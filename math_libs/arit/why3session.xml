<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="CVC3" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.7" alternative="counterexamples" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="7" name="Z3" version="4.8.6" alternative="counterexamples" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="8" name="Z3" version="4.8.6" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="9" name="CVC4" version="1.7" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="12" name="Alt-Ergo" version="2.4.0" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="arit.mlw"/>
<theory name="Div_Mod" proved="true">
 <goal name="div_plus_one&#39;vc" expl="VC for div_plus_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="div_plus_one&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="div_plus_one&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.20" steps="1285397"/></proof>
   </goal>
   <goal name="div_plus_one&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.08" steps="312728"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mod_is_inf&#39;vc" expl="VC for mod_is_inf" proved="true">
 <proof prover="9"><result status="valid" time="0.21" steps="132880"/></proof>
 </goal>
 <goal name="zero_add&#39;vc" expl="VC for zero_add" proved="true">
 <proof prover="9"><result status="valid" time="0.10" steps="122165"/></proof>
 </goal>
 <goal name="add_zero&#39;vc" expl="VC for add_zero" proved="true">
 <proof prover="9"><result status="valid" time="0.12" steps="122216"/></proof>
 </goal>
 <goal name="one_mult&#39;vc" expl="VC for one_mult" proved="true">
 <proof prover="9"><result status="valid" time="0.12" steps="122299"/></proof>
 </goal>
 <goal name="mult_one&#39;vc" expl="VC for mult_one" proved="true">
 <proof prover="9"><result status="valid" time="0.11" steps="122380"/></proof>
 </goal>
 <goal name="add_eq&#39;vc" expl="VC for add_eq" proved="true">
 <proof prover="9"><result status="valid" time="0.12" steps="122511"/></proof>
 </goal>
 <goal name="mult_eq&#39;vc" expl="VC for mult_eq" proved="true">
 <proof prover="9"><result status="valid" time="0.11" steps="122644"/></proof>
 </goal>
 <goal name="add_eq_inv&#39;vc" expl="VC for add_eq_inv" proved="true">
 <proof prover="9"><result status="valid" time="0.12" steps="122775"/></proof>
 </goal>
 <goal name="mult_eq_inv&#39;vc" expl="VC for mult_eq_inv" proved="true">
 <proof prover="9"><result status="valid" time="0.12" steps="122908"/></proof>
 </goal>
 <goal name="bound_eq&#39;vc" expl="VC for bound_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bound_eq&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.06" steps="321994"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bound_eq_rev&#39;vc" expl="VC for bound_eq_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bound_eq_rev&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.11"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="unicity_div_mod&#39;vc" expl="VC for unicity_div_mod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="unicity_div_mod&#39;vc.0" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.19" steps="133885"/></proof>
  </goal>
  <goal name="unicity_div_mod&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.22" steps="1357414"/></proof>
  </goal>
  <goal name="unicity_div_mod&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.11"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_div&#39;vc" expl="VC for get_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_div&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.23" steps="1359273"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_mod&#39;vc" expl="VC for get_mod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_mod&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.23" steps="1360288"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="positive_div&#39;vc" expl="VC for positive_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="positive_div&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.11"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="div_mod_sim_bound&#39;vc" expl="VC for div_mod_sim_bound" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="div_mod_sim_bound&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="div_mod_sim_bound&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="12"><result status="valid" time="0.05" steps="285"/></proof>
   </goal>
   <goal name="div_mod_sim_bound&#39;vc.0.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(d*q &lt;= (r-1) * (q))">
    <goal name="div_mod_sim_bound&#39;vc.0.1.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.11"/></proof>
    </goal>
    <goal name="div_mod_sim_bound&#39;vc.0.1.1" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="0.20" steps="134847"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="div_mod_sim_bound_gen_r&#39;vc" expl="VC for div_mod_sim_bound_gen_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="div_mod_sim_bound_gen_r&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="div_mod_sim_bound_gen_r&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="12"><result status="valid" time="0.05" steps="285"/></proof>
   </goal>
   <goal name="div_mod_sim_bound_gen_r&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="12"><result status="valid" time="0.09" steps="1912"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="unicity_div_gen&#39;vc" expl="VC for unicity_div_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="unicity_div_gen&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="12"><result status="valid" time="0.09" steps="1946"/></proof>
  </goal>
  <goal name="unicity_div_gen&#39;vc.1" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="i,j,q,(i - (j * q))">
   <goal name="unicity_div_gen&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.12" steps="125064"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bound_mod&#39;vc" expl="VC for bound_mod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bound_mod&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bound_mod&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.21" steps="136210"/></proof>
   </goal>
   <goal name="bound_mod&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.21" steps="136257"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mod_eq&#39;vc" expl="VC for mod_eq" proved="true">
 <proof prover="9"><result status="valid" time="0.12" steps="125463"/></proof>
 </goal>
 <goal name="e_div_eq&#39;vc" expl="VC for e_div_eq" proved="true">
 <proof prover="9"><result status="valid" time="0.12" steps="125585"/></proof>
 </goal>
 <goal name="decomp&#39;vc" expl="VC for decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="decomp&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.12"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="div_mod_eq&#39;vc" expl="VC for div_mod_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="div_mod_eq&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.20" steps="136700"/></proof>
  </goal>
  <goal name="div_mod_eq&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="136740"/></proof>
  </goal>
  <goal name="div_mod_eq&#39;vc.2" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="i" arg2="(div i q * q + mod i q)">
   <goal name="div_mod_eq&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.12"/></proof>
   </goal>
   <goal name="div_mod_eq&#39;vc.2.1" expl="equality hypothesis" proved="true">
   <proof prover="9"><result status="valid" time="0.11" steps="125966"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mod_zero&#39;vc" expl="VC for mod_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mod_zero&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.12"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="div_plus_quotient&#39;vc" expl="VC for div_plus_quotient" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="div_plus_quotient&#39;vc.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="(i+j),j,(div i j+1),(mod i j)">
   <goal name="div_plus_quotient&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.13"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="div_plus_fact_gen_div&#39;vc" expl="VC for div_plus_fact_gen_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="div_plus_fact_gen_div&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.21" steps="1378299"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mod_plus_fact_gen_mod&#39;vc" expl="VC for mod_plus_fact_gen_mod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mod_plus_fact_gen_mod&#39;vc.0" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.29" steps="144281"/></proof>
  </goal>
  <goal name="mod_plus_fact_gen_mod&#39;vc.1" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.28" steps="144901"/></proof>
  </goal>
  <goal name="mod_plus_fact_gen_mod&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.22" steps="1381340"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mod_plus_fact_gen_mod_left&#39;vc" expl="VC for mod_plus_fact_gen_mod_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mod_plus_fact_gen_mod_left&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.12" steps="126650"/></proof>
  </goal>
  <goal name="mod_plus_fact_gen_mod_left&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.11" steps="126764"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bound_div&#39;vc" expl="VC for bound_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bound_div&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.12"/></proof>
  </goal>
  <goal name="bound_div&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.12"/></proof>
  </goal>
  <goal name="bound_div&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bound_div&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(div i q * q &lt;= i)">
    <goal name="bound_div&#39;vc.2.0.0" expl="asserted formula" proved="true">
    <proof prover="9"><result status="valid" time="0.12" steps="126924"/></proof>
    </goal>
    <goal name="bound_div&#39;vc.2.0.1" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(f &lt;= div i q)">
     <goal name="bound_div&#39;vc.2.0.1.0" expl="true case (postcondition)" proved="true">
     <transf name="assert" proved="true" arg1="(div i q * q &lt; f *q)">
      <goal name="bound_div&#39;vc.2.0.1.0.0" expl="asserted formula" proved="true">
      <proof prover="9"><result status="valid" time="0.19" steps="138088"/></proof>
      </goal>
      <goal name="bound_div&#39;vc.2.0.1.0.1" expl="true case (postcondition)" proved="true">
      <proof prover="0"><result status="valid" time="0.12"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="bound_div&#39;vc.2.0.1.1" expl="false case (postcondition)" proved="true">
     <proof prover="9"><result status="valid" time="0.14" steps="126966"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mod_upper_bound&#39;vc" expl="VC for mod_upper_bound" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mod_upper_bound&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.13"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bound_div_gen&#39;vc" expl="VC for bound_div_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bound_div_gen&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.36" steps="1378042"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mod_invariant&#39;vc" expl="VC for mod_invariant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mod_invariant&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="12"><result status="valid" time="0.11" steps="2217"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mod_inf&#39;vc" expl="VC for mod_inf" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mod_inf&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.11"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_mod&#39;vc" expl="VC for add_mod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_mod&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.21" steps="138786"/></proof>
  </goal>
  <goal name="add_mod&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.21" steps="138881"/></proof>
  </goal>
  <goal name="add_mod&#39;vc.2" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.23" steps="139627"/></proof>
  </goal>
  <goal name="add_mod&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.24" steps="139038"/></proof>
  </goal>
  <goal name="add_mod&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.21" steps="139038"/></proof>
  </goal>
  <goal name="add_mod&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.21" steps="139038"/></proof>
  </goal>
  <goal name="add_mod&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="139038"/></proof>
  </goal>
  <goal name="add_mod&#39;vc.7" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.13" steps="128186"/></proof>
  </goal>
  <goal name="add_mod&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.14"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_mod_eq&#39;vc" expl="VC for add_mod_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_mod_eq&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(mod (a + b) n)" arg2="(mod (mod a n + mod b n )n)">
   <goal name="add_mod_eq&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(mod (c + d) n)" arg2="(mod (mod c n + mod d n )n)">
    <goal name="add_mod_eq&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="mod_eq">
     <goal name="add_mod_eq&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="0.23" steps="139806"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="add_mod_eq&#39;vc.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="8"><result status="valid" time="0.24" steps="1433534"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="add_mod_eq&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <proof prover="8"><result status="valid" time="0.25" steps="1433538"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="add_mod_left&#39;vc" expl="VC for add_mod_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_mod_left&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.13" steps="128482"/></proof>
  </goal>
  <goal name="add_mod_left&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="139426"/></proof>
  </goal>
  <goal name="add_mod_left&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.14" steps="128598"/></proof>
  </goal>
  <goal name="add_mod_left&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.14"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="simpl_add_mod_left&#39;vc" expl="VC for simpl_add_mod_left" proved="true">
 <proof prover="0"><result status="valid" time="0.14"/></proof>
 </goal>
 <goal name="add_mod_right&#39;vc" expl="VC for add_mod_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_mod_right&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.23" steps="1398295"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mod_mod_left&#39;vc" expl="VC for mod_mod_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mod_mod_left&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.15"/></proof>
  </goal>
  <goal name="mod_mod_left&#39;vc.1" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(forall a b. (mod (j*a + b) j = mod b j))">
   <goal name="mod_mod_left&#39;vc.1.0" expl="asserted formula" proved="true">
   <proof prover="8"><result status="valid" time="0.25" steps="1417776"/></proof>
   </goal>
   <goal name="mod_mod_left&#39;vc.1.1" expl="assertion" proved="true">
   <proof prover="12"><result status="valid" time="0.09" steps="2488"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mod_mod_left&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.21" steps="140805"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mult_mod&#39;vc" expl="VC for mult_mod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mult_mod&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.24" steps="140024"/></proof>
  </goal>
  <goal name="mult_mod&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.23" steps="140119"/></proof>
  </goal>
  <goal name="mult_mod&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.21" steps="140207"/></proof>
  </goal>
  <goal name="mult_mod&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.21" steps="140305"/></proof>
  </goal>
  <goal name="mult_mod&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.24" steps="140305"/></proof>
  </goal>
  <goal name="mult_mod&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.24" steps="140312"/></proof>
  </goal>
  <goal name="mult_mod&#39;vc.6" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mult_mod&#39;vc.6.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.14"/></proof>
   </goal>
   <goal name="mult_mod&#39;vc.6.1" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.15" steps="129604"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mult_mod&#39;vc.7" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="mult_mod&#39;vc.7.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures">
    <goal name="mult_mod&#39;vc.7.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Assert1">
     <goal name="mult_mod&#39;vc.7.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Assert">
      <goal name="mult_mod&#39;vc.7.0.0.0.0" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="((div b c * c) + mod b c)" arg2="b">
       <goal name="mult_mod&#39;vc.7.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="Ensures">
        <goal name="mult_mod&#39;vc.7.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="assert" proved="true" arg1="(forall a b c . a+ (b+c) = a+b+c)">
         <goal name="mult_mod&#39;vc.7.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="0.18" steps="150194"/></proof>
         </goal>
         <goal name="mult_mod&#39;vc.7.0.0.0.0.0.0.1" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="h">
          <goal name="mult_mod&#39;vc.7.0.0.0.0.0.0.1.0" expl="postcondition" proved="true">
          <transf name="rewrite" proved="true" arg1="mod_plus_fact_gen_mod_left">
           <goal name="mult_mod&#39;vc.7.0.0.0.0.0.0.1.0.0" expl="postcondition" proved="true">
           <transf name="rewrite" proved="true" arg1="mod_plus_fact_gen_mod_left">
            <goal name="mult_mod&#39;vc.7.0.0.0.0.0.0.1.0.0.0" expl="postcondition" proved="true">
            <transf name="assert" proved="true" arg1="(forall a b c . a+ (b+c) = a+b+c)">
             <goal name="mult_mod&#39;vc.7.0.0.0.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
             <proof prover="9"><result status="valid" time="0.17" steps="150240"/></proof>
             </goal>
             <goal name="mult_mod&#39;vc.7.0.0.0.0.0.0.1.0.0.0.1" expl="postcondition" proved="true">
             <transf name="assert" proved="true" arg1="(forall a b c . a* b + a*c= a*(b+c))">
              <goal name="mult_mod&#39;vc.7.0.0.0.0.0.0.1.0.0.0.1.0" expl="asserted formula" proved="true">
              <proof prover="9"><result status="valid" time="0.15" steps="150303"/></proof>
              </goal>
              <goal name="mult_mod&#39;vc.7.0.0.0.0.0.0.1.0.0.0.1.1" expl="postcondition" proved="true">
              <transf name="rewrite" proved="true" arg1="h">
               <goal name="mult_mod&#39;vc.7.0.0.0.0.0.0.1.0.0.0.1.1.0" expl="postcondition" proved="true">
               <transf name="rewrite" proved="true" arg1="mod_plus_fact_gen_mod_left">
                <goal name="mult_mod&#39;vc.7.0.0.0.0.0.0.1.0.0.0.1.1.0.0" expl="postcondition" proved="true">
                <proof prover="0"><result status="valid" time="0.17"/></proof>
                </goal>
                <goal name="mult_mod&#39;vc.7.0.0.0.0.0.0.1.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
                <proof prover="9"><result status="valid" time="0.15" steps="150309"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="mult_mod&#39;vc.7.0.0.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="9"><result status="valid" time="0.17" steps="150200"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="mult_mod&#39;vc.7.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
           <proof prover="9"><result status="valid" time="0.18" steps="150200"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mult_mod&#39;vc.7.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="9"><result status="valid" time="0.19" steps="150159"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mod_mod_mult&#39;vc" expl="VC for mod_mod_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mod_mod_mult&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.23" steps="1414672"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mod_mod_mult_rev&#39;vc" expl="VC for mod_mod_mult_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mod_mod_mult_rev&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.24" steps="1415505"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mod_mod_i&#39;vc" expl="VC for mod_mod_i" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mod_mod_i&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.12"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="binary_prod&#39;vc" expl="VC for binary_prod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="binary_prod&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.24" steps="141434"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mod_minus&#39;vc" expl="VC for mod_minus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mod_minus&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.16"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mult_mod_left&#39;vc" expl="VC for mult_mod_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mult_mod_left&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.11"/></proof>
  </goal>
  <goal name="mult_mod_left&#39;vc.1" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="Assert">
   <goal name="mult_mod_left&#39;vc.1.0" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="((c * mod a c) * div b c)" arg2="(c * (mod  a c * div b c))">
    <goal name="mult_mod_left&#39;vc.1.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="mod_plus_fact_gen_mod_left">
     <goal name="mult_mod_left&#39;vc.1.0.0.0" expl="assertion" proved="true">
     <proof prover="9"><result status="valid" time="0.14" steps="131037"/></proof>
     </goal>
     <goal name="mult_mod_left&#39;vc.1.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="9"><result status="valid" time="0.15" steps="131041"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="mult_mod_left&#39;vc.1.0.1" expl="equality hypothesis" proved="true">
    <proof prover="9"><result status="valid" time="0.13" steps="131060"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mult_mod_left&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.12" steps="131094"/></proof>
  </goal>
  <goal name="mult_mod_left&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.21" steps="143021"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mult_mod_right&#39;vc" expl="VC for mult_mod_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mult_mod_right&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.24" steps="1405598"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mod_mod_right&#39;vc" expl="VC for mod_mod_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mod_mod_right&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.13"/></proof>
  </goal>
  <goal name="mod_mod_right&#39;vc.1" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="0.25" steps="1411116"/></proof>
  </goal>
  <goal name="mod_mod_right&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="143424"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mod_mod_rev&#39;vc" expl="VC for mod_mod_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mod_mod_rev&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.14"/></proof>
  </goal>
  <goal name="mod_mod_rev&#39;vc.1" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="0.23" steps="1411965"/></proof>
  </goal>
  <goal name="mod_mod_rev&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.23" steps="143649"/></proof>
  </goal>
  <goal name="mod_mod_rev&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.14" steps="131876"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mod_mod_plus&#39;vc" expl="VC for mod_mod_plus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mod_mod_plus&#39;vc.0" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.13" steps="131896"/></proof>
  </goal>
  <goal name="mod_mod_plus&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.16"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mod_mod_add_left&#39;vc" expl="VC for mod_mod_add_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mod_mod_add_left&#39;vc.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="(mod a c + b),c,mod(a+b)c,(div (mod a c + b) c)">
   <goal name="mod_mod_add_left&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="mod_mod_add_left&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="0.26" steps="1536393"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mod_mod_add_right&#39;vc" expl="VC for mod_mod_add_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mod_mod_add_right&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.24" steps="1407061"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mod_mod_add_left_rev&#39;vc" expl="VC for mod_mod_add_left_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mod_mod_add_left_rev&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.25" steps="1407175"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mod_mod_add_right_rev&#39;vc" expl="VC for mod_mod_add_right_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mod_mod_add_right_rev&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.26" steps="1407373"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mult_assoc&#39;vc" expl="VC for mult_assoc" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mult_assoc&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.13" steps="132937"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="div_div&#39;vc" expl="VC for div_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="div_div&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.12"/></proof>
  </goal>
  <goal name="div_div&#39;vc.1" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.24" steps="144577"/></proof>
  </goal>
  <goal name="div_div&#39;vc.2" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.13"/></proof>
  </goal>
  <goal name="div_div&#39;vc.3" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="144999"/></proof>
  </goal>
  <goal name="div_div&#39;vc.4" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.13"/></proof>
  </goal>
  <goal name="div_div&#39;vc.5" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.13"/></proof>
  </goal>
  <goal name="div_div&#39;vc.6" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.14" steps="133303"/></proof>
  </goal>
  <goal name="div_div&#39;vc.7" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.14" steps="133340"/></proof>
  </goal>
  <goal name="div_div&#39;vc.8" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.25" steps="145282"/></proof>
  </goal>
  <goal name="div_div&#39;vc.9" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.23" steps="145001"/></proof>
  </goal>
  <goal name="div_div&#39;vc.10" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.23" steps="145001"/></proof>
  </goal>
  <goal name="div_div&#39;vc.11" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.23" steps="144994"/></proof>
  </goal>
  <goal name="div_div&#39;vc.12" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.24" steps="145001"/></proof>
  </goal>
  <goal name="div_div&#39;vc.13" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.27" steps="144994"/></proof>
  </goal>
  <goal name="div_div&#39;vc.14" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.13"/></proof>
  </goal>
  <goal name="div_div&#39;vc.15" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.13" steps="133419"/></proof>
  </goal>
  <goal name="div_div&#39;vc.16" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="div_div&#39;vc.16.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.14"/></proof>
   </goal>
   <goal name="div_div&#39;vc.16.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.12" steps="133432"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="div_div&#39;vc.17" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.13" steps="133490"/></proof>
  </goal>
  <goal name="div_div&#39;vc.18" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.14" steps="133494"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="compat_order_div&#39;vc" expl="VC for compat_order_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="compat_order_div&#39;vc.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(div i&#39; j &lt; div i j)">
   <goal name="compat_order_div&#39;vc.0.0" expl="true case (postcondition)" proved="true">
   <transf name="assert" proved="true" arg1="(div i&#39; j * j +j &lt;= div i j * j )">
    <goal name="compat_order_div&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.13"/></proof>
    </goal>
    <goal name="compat_order_div&#39;vc.0.0.1" expl="true case (postcondition)" proved="true">
    <proof prover="0"><result status="valid" time="0.14"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="compat_order_div&#39;vc.0.1" expl="false case (postcondition)" proved="true">
   <proof prover="9"><result status="valid" time="0.13" steps="133376"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mod_div&#39;vc" expl="VC for mod_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mod_div&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.11"/></proof>
  </goal>
  <goal name="mod_div&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.13"/></proof>
  </goal>
  <goal name="mod_div&#39;vc.2" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.12"/></proof>
  </goal>
  <goal name="mod_div&#39;vc.3" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.13" steps="133717"/></proof>
  </goal>
  <goal name="mod_div&#39;vc.4" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.12"/></proof>
  </goal>
  <goal name="mod_div&#39;vc.5" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="( mod (mod i (j * k)) j)" arg2="(mod i j)" arg3="in" arg4="Assert">
   <goal name="mod_div&#39;vc.5.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.14" steps="133784"/></proof>
   </goal>
   <goal name="mod_div&#39;vc.5.1" expl="equality hypothesis" proved="true">
   <proof prover="8"><result status="valid" time="0.26" steps="1428975"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mod_div&#39;vc.6" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.14"/></proof>
  </goal>
  <goal name="mod_div&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.25"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inf_mul&#39;vc" expl="VC for inf_mul" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inf_mul&#39;vc.0" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.13" steps="133756"/></proof>
  </goal>
  <goal name="inf_mul&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="inf_mul&#39;vc.2" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.13" steps="133831"/></proof>
  </goal>
  <goal name="inf_mul&#39;vc.3" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.14" steps="133864"/></proof>
  </goal>
  <goal name="inf_mul&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.23" steps="145056"/></proof>
  </goal>
  <goal name="inf_mul&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.13" steps="133909"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inf_mul_gen&#39;vc" expl="VC for inf_mul_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inf_mul_gen&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="12"><result status="valid" time="0.11" steps="1993"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inf_mul_gen_b&#39;vc" expl="VC for inf_mul_gen_b" proved="true">
 <proof prover="8"><result status="valid" time="0.26" steps="1394920"/></proof>
 </goal>
 <goal name="inf_mul_comm&#39;vc" expl="VC for inf_mul_comm" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inf_mul_comm&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.23" steps="146321"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="indic_div_mod&#39;vc" expl="VC for indic_div_mod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="indic_div_mod&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="indic_div_mod&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.15" steps="139399"/></proof>
   </goal>
   <goal name="indic_div_mod&#39;vc.0.1" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.16" steps="139399"/></proof>
   </goal>
   <goal name="indic_div_mod&#39;vc.0.2" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.13"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="indic_div_mod&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.29" steps="156544"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="indic_div_mod_gen&#39;vc" expl="VC for indic_div_mod_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="indic_div_mod_gen&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.12"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_inf&#39;vc" expl="VC for set_inf" proved="true">
 <proof prover="9"><result status="valid" time="0.14" steps="135480"/></proof>
 </goal>
 <goal name="set_infeq&#39;vc" expl="VC for set_infeq" proved="true">
 <proof prover="9"><result status="valid" time="0.14" steps="135481"/></proof>
 </goal>
 <goal name="bounded_cycle&#39;vc" expl="VC for bounded_cycle" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bounded_cycle&#39;vc.0" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.14" steps="135658"/></proof>
  </goal>
  <goal name="bounded_cycle&#39;vc.1" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bounded_cycle&#39;vc.1.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.12"/></proof>
   </goal>
   <goal name="bounded_cycle&#39;vc.1.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.13"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="bounded_cycle&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.14" steps="135669"/></proof>
  </goal>
  <goal name="bounded_cycle&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.14" steps="135675"/></proof>
  </goal>
  <goal name="bounded_cycle&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.14" steps="135688"/></proof>
  </goal>
  <goal name="bounded_cycle&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.14" steps="135694"/></proof>
  </goal>
  <goal name="bounded_cycle&#39;vc.6" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="bounded_cycle&#39;vc.7" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="bounded_cycle&#39;vc.7.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(div a c)" arg2="0">
    <goal name="bounded_cycle&#39;vc.7.0.0" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(((a * b) + d) &lt;(b * c))">
     <goal name="bounded_cycle&#39;vc.7.0.0.0" expl="asserted formula" proved="true">
     <proof prover="8"><result status="valid" time="0.36" steps="1404016"/></proof>
     </goal>
     <goal name="bounded_cycle&#39;vc.7.0.0.1" expl="postcondition" proved="true">
     <proof prover="12"><result status="valid" time="0.10" steps="2084"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="bounded_cycle&#39;vc.7.0.1" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="0.12"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="bounded_cycle&#39;vc.7.1" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="11.51" steps="28308777"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="div_mod_minus&#39;vc" expl="VC for div_mod_minus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="div_mod_minus&#39;vc.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="(-a),b,(- div a b -1),(b-mod a b)">
   <goal name="div_mod_minus&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="div_mod_minus&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Hinst">
     <goal name="div_mod_minus&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="9"><result status="valid" time="0.16" steps="157115"/></proof>
     </goal>
     <goal name="div_mod_minus&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="9"><result status="valid" time="0.17" steps="157119"/></proof>
     </goal>
     <goal name="div_mod_minus&#39;vc.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.16"/></proof>
     </goal>
     <goal name="div_mod_minus&#39;vc.0.0.0.3" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="div_mod_minus&#39;vc.0.0.0.3.0" proved="true">
      <proof prover="9"><result status="valid" time="0.28" steps="170157"/></proof>
      </goal>
      <goal name="div_mod_minus&#39;vc.0.0.0.3.1" proved="true">
      <proof prover="9"><result status="valid" time="0.28" steps="170151"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mod_mod_iproduct&#39;vc" expl="VC for mod_mod_iproduct" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mod_mod_iproduct&#39;vc.0" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mod_mod_iproduct&#39;vc.0.0" expl="variant decrease" proved="true">
   <proof prover="9"><result status="valid" time="0.42" steps="182853"/></proof>
   </goal>
   <goal name="mod_mod_iproduct&#39;vc.0.1" expl="variant decrease" proved="true">
   <proof prover="9"><result status="valid" time="0.42" steps="185926"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mod_mod_iproduct&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.18" steps="160803"/></proof>
  </goal>
  <goal name="mod_mod_iproduct&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.45" steps="206630"/></proof>
  </goal>
  <goal name="mod_mod_iproduct&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.34" steps="195219"/></proof>
  </goal>
  <goal name="mod_mod_iproduct&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.42" steps="207104"/></proof>
  </goal>
  <goal name="mod_mod_iproduct&#39;vc.5" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="mod_mod_iproduct&#39;vc.5.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.16"/></proof>
   </goal>
   <goal name="mod_mod_iproduct&#39;vc.5.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="mod_mod_iproduct&#39;vc.5.1.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures">
     <goal name="mod_mod_iproduct&#39;vc.5.1.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="mod_mod_iproduct&#39;vc.5.1.0.0.0" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="(mod
  (mod (f @ choose s) b
   * iproduct (remove (choose s) s) (fun (i:a) -&gt; mod (f @ i) b))
  b)" arg2="(mod
  (mod (f @ choose s) b
   * mod (iproduct (remove (choose s) s) (fun (i:a) -&gt; mod (f @ i) b))b)
  b)">
       <goal name="mod_mod_iproduct&#39;vc.5.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="Ensures2">
        <goal name="mod_mod_iproduct&#39;vc.5.1.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="mod_mod_mult">
         <goal name="mod_mod_iproduct&#39;vc.5.1.0.0.0.0.0.0" expl="postcondition" proved="true">
         <proof prover="0"><result status="valid" time="0.14"/></proof>
         </goal>
         <goal name="mod_mod_iproduct&#39;vc.5.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="9"><result status="valid" time="0.17" steps="182051"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mod_mod_iproduct&#39;vc.5.1.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="rewrite" proved="true" arg1="mod_mod_mult_rev">
        <goal name="mod_mod_iproduct&#39;vc.5.1.0.0.0.1.0" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="mod_eq">
         <goal name="mod_mod_iproduct&#39;vc.5.1.0.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="goal_comm">
          <goal name="mod_mod_iproduct&#39;vc.5.1.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="mult_eq">
           <goal name="mod_mod_iproduct&#39;vc.5.1.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="5.88"/></proof>
           </goal>
           <goal name="mod_mod_iproduct&#39;vc.5.1.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="mod_mod_iproduct&#39;vc.5.1.0.0.0.1.1" expl="rewrite premises" proved="true">
        <proof prover="9"><result status="valid" time="0.17" steps="182051"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ind_isum_mod_eq&#39;vc" expl="VC for ind_isum_mod_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ind_isum_mod_eq&#39;vc.0" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.21" steps="183723"/></proof>
  </goal>
  <goal name="ind_isum_mod_eq&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.31" steps="197261"/></proof>
  </goal>
  <goal name="ind_isum_mod_eq&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.17" steps="183716"/></proof>
  </goal>
  <goal name="ind_isum_mod_eq&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.44" steps="211564"/></proof>
  </goal>
  <goal name="ind_isum_mod_eq&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.20" steps="183809"/></proof>
  </goal>
  <goal name="ind_isum_mod_eq&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.19" steps="183844"/></proof>
  </goal>
  <goal name="ind_isum_mod_eq&#39;vc.6" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="ind_isum_mod_eq&#39;vc.6.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.17"/></proof>
   </goal>
   <goal name="ind_isum_mod_eq&#39;vc.6.1" expl="postcondition" proved="true">
   <proof prover="12"><result status="valid" time="0.12" steps="3876"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Base_arit" proved="true">
 <goal name="power_minus_one&#39;vc" expl="VC for power_minus_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="power_minus_one&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.40" steps="178989"/></proof>
  </goal>
  <goal name="power_minus_one&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.16" steps="164816"/></proof>
  </goal>
  <goal name="power_minus_one&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.28" steps="179045"/></proof>
  </goal>
  <goal name="power_minus_one&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.42" steps="180048"/></proof>
  </goal>
  <goal name="power_minus_one&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.41" steps="180025"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="kth_right&#39;vc" expl="VC for kth_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kth_right&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.56" steps="465187"/></proof>
  </goal>
  <goal name="kth_right&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.62" steps="219931"/></proof>
  </goal>
  <goal name="kth_right&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="kth_right&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.60" steps="221512"/></proof>
   </goal>
   <goal name="kth_right&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.44" steps="221581"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="kth_right_eq&#39;vc" expl="VC for kth_right_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kth_right_eq&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="kth_right&#39;def">
   <goal name="kth_right_eq&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="kth_right&#39;def">
    <goal name="kth_right_eq&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Requires">
     <goal name="kth_right_eq&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(ind_iproduct f ((h - k) + 1) h)" arg2="(ind_iproduct g ((h - k) + 1) h)">
      <goal name="kth_right_eq&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
      </transf>
      </goal>
      <goal name="kth_right_eq&#39;vc.0.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="ind_iproduct_eq">
       <goal name="kth_right_eq&#39;vc.0.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="kth_right_eq&#39;vc.0.0.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="0.63" steps="221670"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="kth_right_eq&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="9"><result status="valid" time="0.36" steps="206472"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="kth_right_eq&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="0.20" steps="192720"/></proof>
    </goal>
    <goal name="kth_right_eq&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="0.21" steps="192720"/></proof>
    </goal>
    <goal name="kth_right_eq&#39;vc.0.0.3" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="1.50" steps="459870"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="kth_right_eq&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="9"><result status="valid" time="0.22" steps="192720"/></proof>
   </goal>
   <goal name="kth_right_eq&#39;vc.0.2" expl="rewrite premises" proved="true">
   <proof prover="9"><result status="valid" time="0.20" steps="192720"/></proof>
   </goal>
   <goal name="kth_right_eq&#39;vc.0.3" expl="rewrite premises" proved="true">
   <proof prover="9"><result status="valid" time="0.44" steps="220923"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="kth_right_trans&#39;vc" expl="VC for kth_right_trans" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kth_right_trans&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="kth_right_trans&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.21" steps="192933"/></proof>
   </goal>
   <goal name="kth_right_trans&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.21" steps="192922"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="kth_right_trans&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="192981"/></proof>
  </goal>
  <goal name="kth_right_trans&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.53" steps="475969"/></proof>
  </goal>
  <goal name="kth_right_trans&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.54" steps="476001"/></proof>
  </goal>
  <goal name="kth_right_trans&#39;vc.4" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="kth_right_trans&#39;vc.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="kth_right&#39;def">
    <goal name="kth_right_trans&#39;vc.4.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures">
     <goal name="kth_right_trans&#39;vc.4.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="kth_right&#39;def">
      <goal name="kth_right_trans&#39;vc.4.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="1.40"/></proof>
      </goal>
      <goal name="kth_right_trans&#39;vc.4.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="9"><result status="valid" time="0.21" steps="194337"/></proof>
      </goal>
      <goal name="kth_right_trans&#39;vc.4.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="9"><result status="valid" time="0.35" steps="208569"/></proof>
      </goal>
      <goal name="kth_right_trans&#39;vc.4.0.0.0.3" expl="rewrite premises" proved="true">
      <proof prover="9"><result status="valid" time="0.47" steps="225299"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="kth_right_trans&#39;vc.4.0.1" expl="rewrite premises" proved="true">
    <transf name="assert" proved="true" arg1="(forall a b. 0&lt;= a -&gt; 0&lt; b -&gt; 0&lt;= div a b)">
     <goal name="kth_right_trans&#39;vc.4.0.1.0" expl="asserted formula" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="kth_right_trans&#39;vc.4.0.1.0.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="1.39"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="kth_right_trans&#39;vc.4.0.1.1" expl="rewrite premises" proved="true">
     <transf name="apply" proved="true" arg1="h">
      <goal name="kth_right_trans&#39;vc.4.0.1.1.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.21" steps="194450"/></proof>
      </goal>
      <goal name="kth_right_trans&#39;vc.4.0.1.1.1" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="1.51" steps="493646"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="kth_right_trans&#39;vc.4.0.2" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="0.21" steps="194337"/></proof>
    </goal>
    <goal name="kth_right_trans&#39;vc.4.0.3" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="0.63" steps="225292"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="kth_left&#39;vc" expl="VC for kth_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kth_left&#39;vc.0" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="kth_right&#39;def">
   <goal name="kth_left&#39;vc.0.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="kth_right&#39;def">
    <goal name="kth_left&#39;vc.0.0.0" expl="assertion" proved="true">
    <transf name="replace" proved="true" arg1="(ind_iproduct
    (fun (ind:int) -&gt; if l &lt;= ind /\ ind &lt; h then f @ ind else 1)
    ((h - (((h - l) - k) + 1)) + 1) h)" arg2="(ind_iproduct
    (fun (ind:int) -&gt; f @ ind)
    ((h - (((h - l) - k) + 1)) + 1) h)">
     <goal name="kth_left&#39;vc.0.0.0.0" expl="assertion" proved="true">
     <proof prover="0"><result status="valid" time="0.19"/></proof>
     </goal>
     <goal name="kth_left&#39;vc.0.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="9"><result status="valid" time="1.64" steps="475029"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="kth_left&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="0.23" steps="193281"/></proof>
    </goal>
    <goal name="kth_left&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="0.20" steps="193306"/></proof>
    </goal>
    <goal name="kth_left&#39;vc.0.0.3" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="0.60" steps="221520"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="kth_left&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="9"><result status="valid" time="0.21" steps="193281"/></proof>
   </goal>
   <goal name="kth_left&#39;vc.0.2" expl="rewrite premises" proved="true">
   <proof prover="9"><result status="valid" time="0.20" steps="193306"/></proof>
   </goal>
   <goal name="kth_left&#39;vc.0.3" expl="rewrite premises" proved="true">
   <proof prover="9"><result status="valid" time="1.51" steps="461441"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="kth_left&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.21" steps="193442"/></proof>
  </goal>
  <goal name="kth_left&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.20" steps="193452"/></proof>
  </goal>
  <goal name="kth_left&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.46" steps="222908"/></proof>
  </goal>
  <goal name="kth_left&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.53" steps="470839"/></proof>
  </goal>
  <goal name="kth_left&#39;vc.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="kth_left&#39;vc.5.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.20" steps="193582"/></proof>
   </goal>
   <goal name="kth_left&#39;vc.5.1" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.20" steps="193630"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="kth_left_eq&#39;vc" expl="VC for kth_left_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kth_left_eq&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="kth_left_eq&#39;vc.0.0" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="kth_left&#39;spec2">
    <goal name="kth_left_eq&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.24" steps="222464"/></proof>
    </goal>
    <goal name="kth_left_eq&#39;vc.0.0.1" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.25" steps="222464"/></proof>
    </goal>
    <goal name="kth_left_eq&#39;vc.0.0.2" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.23" steps="222471"/></proof>
    </goal>
    <goal name="kth_left_eq&#39;vc.0.0.3" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="kth_left_eq&#39;vc.0.0.3.0" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="1.43" steps="479100"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="kth_left_eq&#39;vc.1" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="1.32" steps="473062"/></proof>
  </goal>
  <goal name="kth_left_eq&#39;vc.2" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="1.60" steps="478550"/></proof>
  </goal>
  <goal name="kth_left_eq&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.18"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="kth_left_to_mod_div&#39;vc" expl="VC for kth_left_to_mod_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kth_left_to_mod_div&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.38" steps="470063"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="kth_left_trans&#39;vc" expl="VC for kth_left_trans" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kth_left_trans&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.20" steps="194983"/></proof>
  </goal>
  <goal name="kth_left_trans&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="194986"/></proof>
  </goal>
  <goal name="kth_left_trans&#39;vc.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="kth_left_trans&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.20" steps="194989"/></proof>
   </goal>
   <goal name="kth_left_trans&#39;vc.2.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.33" steps="208757"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="kth_left_trans&#39;vc.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="kth_left_trans&#39;vc.3.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.57" steps="223295"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="kth_left_trans&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.46" steps="227237"/></proof>
  </goal>
  <goal name="kth_left_trans&#39;vc.5" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.38" steps="1932009"/></proof>
  </goal>
  <goal name="kth_left_trans&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.24" steps="195184"/></proof>
  </goal>
  <goal name="kth_left_trans&#39;vc.7" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="kth_left_trans&#39;vc.7.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.21" steps="195187"/></proof>
   </goal>
   <goal name="kth_left_trans&#39;vc.7.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.19" steps="195218"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="kth_left_trans&#39;vc.8" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="kth_left_trans&#39;vc.8.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.48" steps="226046"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="kth_left_trans&#39;vc.9" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.23" steps="195317"/></proof>
  </goal>
  <goal name="kth_left_trans&#39;vc.10" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.48" steps="228537"/></proof>
  </goal>
  <goal name="kth_left_trans&#39;vc.11" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.68" steps="490915"/></proof>
  </goal>
  <goal name="kth_left_trans&#39;vc.12" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="kth_left_trans&#39;vc.12.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.24" steps="199840"/></proof>
   </goal>
   <goal name="kth_left_trans&#39;vc.12.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="kth_left_trans&#39;vc.12.1.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="kth_left_trans&#39;vc.12.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures">
      <goal name="kth_left_trans&#39;vc.12.1.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H3">
       <goal name="kth_left_trans&#39;vc.12.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="case" proved="true" arg1="( (l + k) &lt; (h - 1))">
        <goal name="kth_left_trans&#39;vc.12.1.0.0.0.0.0" expl="true case (postcondition)" proved="true">
        <transf name="rewrite" proved="true" arg1="H2">
         <goal name="kth_left_trans&#39;vc.12.1.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
         <transf name="apply" proved="true" arg1="mod_eq">
          <goal name="kth_left_trans&#39;vc.12.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="div_div">
           <goal name="kth_left_trans&#39;vc.12.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="(ind_iproduct f (l + k) h1)" arg2="((ind_iproduct f (l + k) ((h1 - 1) - 1) * (f @ ((h1 - 1) - 1)))
     * (f @ (h1 - 1)))">
            <goal name="kth_left_trans&#39;vc.12.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="9"><result status="valid" time="0.24" steps="223614"/></proof>
            </goal>
            <goal name="kth_left_trans&#39;vc.12.1.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
            <proof prover="0"><result status="valid" time="0.23"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="kth_left_trans&#39;vc.12.1.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="9"><result status="valid" time="0.25" steps="223616"/></proof>
           </goal>
           <goal name="kth_left_trans&#39;vc.12.1.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <transf name="assert" proved="true" arg1="(forall a b. 0&lt;a -&gt; 0&lt;b -&gt; 0&lt; a*b)">
            <goal name="kth_left_trans&#39;vc.12.1.0.0.0.0.0.0.0.2.0" expl="asserted formula" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="kth_left_trans&#39;vc.12.1.0.0.0.0.0.0.0.2.0.0" expl="asserted formula" proved="true">
             <proof prover="0"><result status="valid" time="0.35"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="kth_left_trans&#39;vc.12.1.0.0.0.0.0.0.0.2.1" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="h">
             <goal name="kth_left_trans&#39;vc.12.1.0.0.0.0.0.0.0.2.1.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="ind_iproduct_strict_pos">
              <goal name="kth_left_trans&#39;vc.12.1.0.0.0.0.0.0.0.2.1.0.0" expl="apply premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="kth_left_trans&#39;vc.12.1.0.0.0.0.0.0.0.2.1.0.0.0" expl="apply premises" proved="true">
               <proof prover="9"><result status="valid" time="0.57" steps="262123"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="kth_left_trans&#39;vc.12.1.0.0.0.0.0.0.0.2.1.1" expl="apply premises" proved="true">
             <proof prover="9"><result status="valid" time="0.52" steps="258836"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="kth_left_trans&#39;vc.12.1.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
           <proof prover="9"><result status="valid" time="0.54" steps="258660"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="kth_left_trans&#39;vc.12.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="9"><result status="valid" time="0.25" steps="223633"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="kth_left_trans&#39;vc.12.1.0.0.0.0.1" expl="false case (postcondition)" proved="true">
        <proof prover="12"><result status="valid" time="1.76" steps="43238"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="div_isum_exponents&#39;vc" expl="VC for div_isum_exponents" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="div_isum_exponents&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.28" steps="1656926"/></proof>
  </goal>
  <goal name="div_isum_exponents&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.16"/></proof>
  </goal>
  <goal name="div_isum_exponents&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.29" steps="182589"/></proof>
  </goal>
  <goal name="div_isum_exponents&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.16"/></proof>
  </goal>
  <goal name="div_isum_exponents&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="12"><result status="valid" time="0.19" steps="7353"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="divp&#39;vc" expl="VC for divp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="divp&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.29" steps="182502"/></proof>
  </goal>
  <goal name="divp&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.14"/></proof>
  </goal>
  <goal name="divp&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="divp&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.33" steps="182917"/></proof>
   </goal>
   <goal name="divp&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="12"><result status="valid" time="1.13" steps="21112"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="divp&#39;vc.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="divp&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.31" steps="183069"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="kth_right_div_mod&#39;vc" expl="VC for kth_right_div_mod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kth_right_div_mod&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.33" steps="209973"/></proof>
  </goal>
  <goal name="kth_right_div_mod&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="196216"/></proof>
  </goal>
  <goal name="kth_right_div_mod&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.42" steps="472309"/></proof>
  </goal>
  <goal name="kth_right_div_mod&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.47" steps="226440"/></proof>
  </goal>
  <goal name="kth_right_div_mod&#39;vc.4" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(k=1)">
   <goal name="kth_right_div_mod&#39;vc.4.0" expl="true case (postcondition)" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="kth_right_div_mod&#39;vc.4.0.0" expl="true case (postcondition)" proved="true">
    <transf name="destruct" proved="true" arg1="H">
     <goal name="kth_right_div_mod&#39;vc.4.0.0.0" expl="true case (postcondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="kth_right&#39;def">
      <goal name="kth_right_div_mod&#39;vc.4.0.0.0.0" expl="true case (postcondition)" proved="true">
      <proof prover="0"><result status="valid" time="0.21"/></proof>
      </goal>
      <goal name="kth_right_div_mod&#39;vc.4.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="9"><result status="valid" time="0.24" steps="196149"/></proof>
      </goal>
      <goal name="kth_right_div_mod&#39;vc.4.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="9"><result status="valid" time="0.21" steps="196149"/></proof>
      </goal>
      <goal name="kth_right_div_mod&#39;vc.4.0.0.0.3" expl="rewrite premises" proved="true">
      <proof prover="9"><result status="valid" time="0.59" steps="224677"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="kth_right_div_mod&#39;vc.4.0.0.1" expl="true case (postcondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="kth_right&#39;def">
      <goal name="kth_right_div_mod&#39;vc.4.0.0.1.0" expl="true case (postcondition)" proved="true">
      <proof prover="12"><result status="valid" time="1.39" steps="25154"/></proof>
      </goal>
      <goal name="kth_right_div_mod&#39;vc.4.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="9"><result status="valid" time="0.23" steps="196351"/></proof>
      </goal>
      <goal name="kth_right_div_mod&#39;vc.4.0.0.1.2" expl="rewrite premises" proved="true">
      <proof prover="9"><result status="valid" time="0.22" steps="196351"/></proof>
      </goal>
      <goal name="kth_right_div_mod&#39;vc.4.0.0.1.3" expl="rewrite premises" proved="true">
      <proof prover="9"><result status="valid" time="0.50" steps="227628"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="kth_right_div_mod&#39;vc.4.1" expl="false case (postcondition)" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="kth_right_div_mod&#39;vc.4.1.0" expl="false case (postcondition)" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="kth_right_div_mod&#39;vc.4.1.0.0" expl="false case (postcondition)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="kth_right_div_mod&#39;vc.4.1.0.0.0" expl="false case (postcondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="kth_right&#39;def">
       <goal name="kth_right_div_mod&#39;vc.4.1.0.0.0.0" expl="false case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="H">
        <goal name="kth_right_div_mod&#39;vc.4.1.0.0.0.0.0" expl="false case (postcondition)" proved="true">
        <transf name="replace" proved="true" arg1="((f @ ((h1 - k) + 1)) * ind_iproduct f (((h1 - k) + 1) + 1) h1)" arg2="(ind_iproduct f ((h1 - k) + 1) h1)">
         <goal name="kth_right_div_mod&#39;vc.4.1.0.0.0.0.0.0" expl="false case (postcondition)" proved="true">
         <proof prover="9"><result status="valid" time="0.24" steps="225437"/></proof>
         </goal>
         <goal name="kth_right_div_mod&#39;vc.4.1.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="9"><result status="valid" time="0.26" steps="225352"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="kth_right_div_mod&#39;vc.4.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="9"><result status="valid" time="0.26" steps="225284"/></proof>
       </goal>
       <goal name="kth_right_div_mod&#39;vc.4.1.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="9"><result status="valid" time="0.27" steps="225284"/></proof>
       </goal>
       <goal name="kth_right_div_mod&#39;vc.4.1.0.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="9"><result status="valid" time="0.25" steps="225417"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="kth_right_div_mod&#39;vc.4.1.1" expl="false case (postcondition)" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="kth_right_div_mod&#39;vc.4.1.1.0" expl="false case (postcondition)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="kth_right_div_mod&#39;vc.4.1.1.0.0" expl="false case (postcondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="kth_right&#39;def">
       <goal name="kth_right_div_mod&#39;vc.4.1.1.0.0.0" expl="false case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="H1">
        <goal name="kth_right_div_mod&#39;vc.4.1.1.0.0.0.0" expl="false case (postcondition)" proved="true">
        <proof prover="0"><result status="valid" time="0.22"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="kth_right_div_mod&#39;vc.4.1.1.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="9"><result status="valid" time="0.24" steps="225483"/></proof>
       </goal>
       <goal name="kth_right_div_mod&#39;vc.4.1.1.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="9"><result status="valid" time="0.26" steps="225483"/></proof>
       </goal>
       <goal name="kth_right_div_mod&#39;vc.4.1.1.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="9"><result status="valid" time="0.54" steps="258054"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="kth_head&#39;vc" expl="VC for kth_head" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kth_head&#39;vc.0" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="1.42" steps="468603"/></proof>
  </goal>
  <goal name="kth_head&#39;vc.1" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.49" steps="226104"/></proof>
  </goal>
  <goal name="kth_head&#39;vc.2" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="kth_head&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="kth_right&#39;def">
    <goal name="kth_head&#39;vc.2.0.0" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="0.23" steps="202474"/></proof>
    </goal>
    <goal name="kth_head&#39;vc.2.0.1" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="0.21" steps="197692"/></proof>
    </goal>
    <goal name="kth_head&#39;vc.2.0.2" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="0.22" steps="197699"/></proof>
    </goal>
    <goal name="kth_head&#39;vc.2.0.3" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="0.61" steps="227613"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="weighted_kth_right&#39;vc" expl="VC for weighted_kth_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="weighted_kth_right&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="196637"/></proof>
  </goal>
  <goal name="weighted_kth_right&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="196640"/></proof>
  </goal>
  <goal name="weighted_kth_right&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.46" steps="225132"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="weighted_kth_right_&#39;vc" expl="VC for weighted_kth_right_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="weighted_kth_right_&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.23" steps="196892"/></proof>
  </goal>
  <goal name="weighted_kth_right_&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.21" steps="196895"/></proof>
  </goal>
  <goal name="weighted_kth_right_&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.47" steps="225382"/></proof>
  </goal>
  <goal name="weighted_kth_right_&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.56" steps="475994"/></proof>
  </goal>
  <goal name="weighted_kth_right_&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.57" steps="475853"/></proof>
  </goal>
  <goal name="weighted_kth_right_&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.21" steps="197056"/></proof>
  </goal>
  <goal name="weighted_kth_right_&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.58" steps="475225"/></proof>
  </goal>
  <goal name="weighted_kth_right_&#39;vc.7" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.47" steps="228683"/></proof>
  </goal>
  <goal name="weighted_kth_right_&#39;vc.8" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="197159"/></proof>
  </goal>
  <goal name="weighted_kth_right_&#39;vc.9" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(k=1)">
   <goal name="weighted_kth_right_&#39;vc.9.0" expl="true case (postcondition)" proved="true">
   <proof prover="0"><result status="valid" time="0.31"/></proof>
   </goal>
   <goal name="weighted_kth_right_&#39;vc.9.1" expl="false case (postcondition)" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="weighted_kth_right_&#39;vc.9.1.0" expl="false case (postcondition)" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="weighted_kth_right_&#39;vc.9.1.0.0" expl="false case (postcondition)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="weighted_kth_right_&#39;vc.9.1.0.0.0" expl="false case (postcondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="weighted_kth_right&#39;def">
       <goal name="weighted_kth_right_&#39;vc.9.1.0.0.0.0" expl="false case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="H">
        <goal name="weighted_kth_right_&#39;vc.9.1.0.0.0.0.0" expl="false case (postcondition)" proved="true">
        <transf name="rewrite" proved="true" arg1="kth_head">
         <goal name="weighted_kth_right_&#39;vc.9.1.0.0.0.0.0.0" expl="false case (postcondition)" proved="true">
         <proof prover="9"><result status="valid" time="0.27" steps="226170"/></proof>
         </goal>
         <goal name="weighted_kth_right_&#39;vc.9.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="9"><result status="valid" time="0.26" steps="226032"/></proof>
         </goal>
         <goal name="weighted_kth_right_&#39;vc.9.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="9"><result status="valid" time="0.26" steps="226039"/></proof>
         </goal>
         <goal name="weighted_kth_right_&#39;vc.9.1.0.0.0.0.0.3" expl="rewrite premises" proved="true">
         <proof prover="9"><result status="valid" time="0.24" steps="226067"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="weighted_kth_right_&#39;vc.9.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="9"><result status="valid" time="0.25" steps="226032"/></proof>
       </goal>
       <goal name="weighted_kth_right_&#39;vc.9.1.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="9"><result status="valid" time="0.23" steps="226067"/></proof>
       </goal>
       <goal name="weighted_kth_right_&#39;vc.9.1.0.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="9"><result status="valid" time="0.24" steps="226032"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="weighted_kth_right_&#39;vc.9.1.1" expl="false case (postcondition)" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="weighted_kth_right_&#39;vc.9.1.1.0" expl="false case (postcondition)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="weighted_kth_right_&#39;vc.9.1.1.0.0" expl="false case (postcondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="H2">
       <goal name="weighted_kth_right_&#39;vc.9.1.1.0.0.0" expl="false case (postcondition)" proved="true">
       <transf name="apply" proved="true" arg1="add_eq">
        <goal name="weighted_kth_right_&#39;vc.9.1.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="weighted_kth_right&#39;def">
         <goal name="weighted_kth_right_&#39;vc.9.1.1.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="H3">
          <goal name="weighted_kth_right_&#39;vc.9.1.1.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="9"><result status="valid" time="0.23" steps="226322"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="weighted_kth_right_&#39;vc.9.1.1.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="9"><result status="valid" time="0.26" steps="226308"/></proof>
         </goal>
         <goal name="weighted_kth_right_&#39;vc.9.1.1.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="9"><result status="valid" time="0.39" steps="241804"/></proof>
         </goal>
         <goal name="weighted_kth_right_&#39;vc.9.1.1.0.0.0.0.3" expl="rewrite premises" proved="true">
         <proof prover="9"><result status="valid" time="0.26" steps="226308"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="weighted_kth_right_&#39;vc.9.1.1.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.23"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="kth_right_decomposition&#39;vc" expl="VC for kth_right_decomposition" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kth_right_decomposition&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.23" steps="197199"/></proof>
  </goal>
  <goal name="kth_right_decomposition&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="197202"/></proof>
  </goal>
  <goal name="kth_right_decomposition&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.63" steps="225761"/></proof>
  </goal>
  <goal name="kth_right_decomposition&#39;vc.3" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="kth_right_decomposition&#39;vc.3.0" expl="variant decrease" proved="true">
   <proof prover="9"><result status="valid" time="0.47" steps="211480"/></proof>
   </goal>
   <goal name="kth_right_decomposition&#39;vc.3.1" expl="variant decrease" proved="true">
   <proof prover="9"><result status="valid" time="0.20" steps="197336"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="kth_right_decomposition&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="197320"/></proof>
  </goal>
  <goal name="kth_right_decomposition&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.36" steps="211539"/></proof>
  </goal>
  <goal name="kth_right_decomposition&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.62" steps="228339"/></proof>
  </goal>
  <goal name="kth_right_decomposition&#39;vc.7" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="197455"/></proof>
  </goal>
  <goal name="kth_right_decomposition&#39;vc.8" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.52" steps="229412"/></proof>
  </goal>
  <goal name="kth_right_decomposition&#39;vc.9" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.20" steps="197497"/></proof>
  </goal>
  <goal name="kth_right_decomposition&#39;vc.10" expl="assertion" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="kth_right_decomposition&#39;vc.10.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures2">
    <goal name="kth_right_decomposition&#39;vc.10.0.0" expl="assertion" proved="true">
    <transf name="replace" proved="true" arg1="((h - k) + 1)" arg2="(h - (k - 1))">
     <goal name="kth_right_decomposition&#39;vc.10.0.0.0" expl="assertion" proved="true">
     <transf name="replace" proved="true" arg1="(weighted_kth_right i k h f + mod i (ind_iproduct f ((h - k) + 1) h))" arg2="(mod i (ind_iproduct f (h - k) h))">
      <goal name="kth_right_decomposition&#39;vc.10.0.0.0.0" expl="assertion" proved="true">
      <transf name="replace" proved="true" arg1="(weighted_kth_right i k h f + mod i (ind_iproduct f (h - (k - 1)) h))" arg2="( mod i (ind_iproduct f (h - k) h))">
       <goal name="kth_right_decomposition&#39;vc.10.0.0.0.0.0" expl="assertion" proved="true">
       <transf name="replace" proved="true" arg1="(ind_isum (fun (a:int) -&gt; weighted_kth_right i a h f) 1 (k + 1))" arg2="( ind_isum (fun (a:int) -&gt; if 1 &lt;= a then weighted_kth_right i a h f else 0)
  1 (k + 1))">
        <goal name="kth_right_decomposition&#39;vc.10.0.0.0.0.0.0" expl="assertion" proved="true">
        <transf name="rewrite" proved="true" arg1="Ensures">
         <goal name="kth_right_decomposition&#39;vc.10.0.0.0.0.0.0.0" expl="assertion" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="kth_right_decomposition&#39;vc.10.0.0.0.0.0.0.0.0" expl="assertion" proved="true">
          <transf name="replace" proved="true" arg1="(ind_isum
     (fun (a:int) -&gt; if 1 &lt;= a then weighted_kth_right i a h f else 0) 1 k)" arg2="(ind_isum
     (fun (a:int) -&gt;  weighted_kth_right i a h f ) 1 k)">
           <goal name="kth_right_decomposition&#39;vc.10.0.0.0.0.0.0.0.0.0" expl="assertion" proved="true">
           <transf name="rewrite" proved="true" arg1="Ensures2">
            <goal name="kth_right_decomposition&#39;vc.10.0.0.0.0.0.0.0.0.0.0" expl="assertion" proved="true">
            <transf name="apply" proved="true" arg1="add_eq_inv">
             <goal name="kth_right_decomposition&#39;vc.10.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="9"><result status="valid" time="0.40" steps="212111"/></proof>
             </goal>
             <goal name="kth_right_decomposition&#39;vc.10.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
             <transf name="replace" proved="true" arg1="((h - k) + 1)" arg2="(h - (k - 1))">
              <goal name="kth_right_decomposition&#39;vc.10.0.0.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="Ensures1">
               <goal name="kth_right_decomposition&#39;vc.10.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
               <proof prover="9"><result status="valid" time="1.69" steps="502138"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="kth_right_decomposition&#39;vc.10.0.0.0.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
              <proof prover="9"><result status="valid" time="0.22" steps="197789"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="kth_right_decomposition&#39;vc.10.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
           <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
            <goal name="kth_right_decomposition&#39;vc.10.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
            <proof prover="9"><result status="valid" time="0.51" steps="231198"/></proof>
            </goal>
            <goal name="kth_right_decomposition&#39;vc.10.0.0.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
            <proof prover="9"><result status="valid" time="0.23" steps="197780"/></proof>
            </goal>
            <goal name="kth_right_decomposition&#39;vc.10.0.0.0.0.0.0.0.0.1.2" expl="apply premises" proved="true">
            <proof prover="9"><result status="valid" time="0.23" steps="197780"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="kth_right_decomposition&#39;vc.10.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="9"><result status="valid" time="0.23" steps="197782"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="kth_right_decomposition&#39;vc.10.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
         <goal name="kth_right_decomposition&#39;vc.10.0.0.0.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="0.49" steps="231189"/></proof>
         </goal>
         <goal name="kth_right_decomposition&#39;vc.10.0.0.0.0.0.1.1" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="0.23" steps="197780"/></proof>
         </goal>
         <goal name="kth_right_decomposition&#39;vc.10.0.0.0.0.0.1.2" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="0.22" steps="197780"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="kth_right_decomposition&#39;vc.10.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="9"><result status="valid" time="0.22" steps="197796"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="kth_right_decomposition&#39;vc.10.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="9"><result status="valid" time="0.23" steps="197789"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="kth_right_decomposition&#39;vc.10.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="9"><result status="valid" time="0.23" steps="197789"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="kth_right_decomposition&#39;vc.11" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(k=1)">
   <goal name="kth_right_decomposition&#39;vc.11.0" expl="true case (postcondition)" proved="true">
   <transf name="rewrite" proved="true" arg1="ind_isum_one">
    <goal name="kth_right_decomposition&#39;vc.11.0.0" expl="true case (postcondition)" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="kth_right_decomposition&#39;vc.11.0.0.0" expl="true case (postcondition)" proved="true">
     <proof prover="9"><result status="valid" time="1.60" steps="473488"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="kth_right_decomposition&#39;vc.11.0.1" expl="rewrite premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="kth_right_decomposition&#39;vc.11.0.1.0" expl="rewrite premises" proved="true">
     <proof prover="9"><result status="valid" time="0.24" steps="197650"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="kth_right_decomposition&#39;vc.11.1" expl="false case (postcondition)" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="kth_right_decomposition&#39;vc.11.1.0" expl="false case (postcondition)" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="kth_right_decomposition&#39;vc.11.1.0.0" expl="false case (postcondition)" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="kth_right_decomposition&#39;vc.11.1.0.0.0" expl="false case (postcondition)" proved="true">
      <transf name="destruct" proved="true" arg1="H2">
       <goal name="kth_right_decomposition&#39;vc.11.1.0.0.0.0" expl="false case (postcondition)" proved="true">
       <proof prover="9"><result status="valid" time="0.25" steps="226806"/></proof>
       </goal>
       <goal name="kth_right_decomposition&#39;vc.11.1.0.0.0.1" expl="false case (postcondition)" proved="true">
       <proof prover="9"><result status="valid" time="0.26" steps="226926"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="kth_right_decomposition&#39;vc.11.1.0.0.1" expl="false case (postcondition)" proved="true">
      <transf name="destruct" proved="true" arg1="H2">
       <goal name="kth_right_decomposition&#39;vc.11.1.0.0.1.0" expl="false case (postcondition)" proved="true">
       <proof prover="9"><result status="valid" time="0.25" steps="226867"/></proof>
       </goal>
       <goal name="kth_right_decomposition&#39;vc.11.1.0.0.1.1" expl="false case (postcondition)" proved="true">
       <proof prover="9"><result status="valid" time="1.83" steps="528312"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="kth_left_div_mod&#39;vc" expl="VC for kth_left_div_mod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kth_left_div_mod&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.24" steps="197555"/></proof>
  </goal>
  <goal name="kth_left_div_mod&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.21" steps="197558"/></proof>
  </goal>
  <goal name="kth_left_div_mod&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.48" steps="226122"/></proof>
  </goal>
  <goal name="kth_left_div_mod&#39;vc.3" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="kth_left&#39;def">
   <goal name="kth_left_div_mod&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.48" steps="231753"/></proof>
   </goal>
   <goal name="kth_left_div_mod&#39;vc.3.1" expl="rewrite premises" proved="true">
   <proof prover="9"><result status="valid" time="0.22" steps="197687"/></proof>
   </goal>
   <goal name="kth_left_div_mod&#39;vc.3.2" expl="rewrite premises" proved="true">
   <proof prover="9"><result status="valid" time="0.22" steps="197687"/></proof>
   </goal>
   <goal name="kth_left_div_mod&#39;vc.3.3" expl="rewrite premises" proved="true">
   <proof prover="9"><result status="valid" time="0.21" steps="197694"/></proof>
   </goal>
   <goal name="kth_left_div_mod&#39;vc.3.4" expl="rewrite premises" proved="true">
   <proof prover="9"><result status="valid" time="0.48" steps="229679"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="weighted_kth_left&#39;vc" expl="VC for weighted_kth_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="weighted_kth_left&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.23" steps="197986"/></proof>
  </goal>
  <goal name="weighted_kth_left&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.47" steps="226613"/></proof>
  </goal>
  <goal name="weighted_kth_left&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="198053"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="weighted_kth_left_&#39;vc" expl="VC for weighted_kth_left_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="weighted_kth_left_&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="198333"/></proof>
  </goal>
  <goal name="weighted_kth_left_&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.23" steps="198337"/></proof>
  </goal>
  <goal name="weighted_kth_left_&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.49" steps="227005"/></proof>
  </goal>
  <goal name="weighted_kth_left_&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.61" steps="230178"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bounded_kth_left_decomposition&#39;vc" expl="VC for bounded_kth_left_decomposition" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bounded_kth_left_decomposition&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.23" steps="198726"/></proof>
  </goal>
  <goal name="bounded_kth_left_decomposition&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.21" steps="198754"/></proof>
  </goal>
  <goal name="bounded_kth_left_decomposition&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.45" steps="227495"/></proof>
  </goal>
  <goal name="bounded_kth_left_decomposition&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.59" steps="273581"/></proof>
  </goal>
  <goal name="bounded_kth_left_decomposition&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.57" steps="274312"/></proof>
  </goal>
  <goal name="bounded_kth_left_decomposition&#39;vc.5" expl="precondition" proved="true">
  <transf name="compute_hyp" proved="true" >
   <goal name="bounded_kth_left_decomposition&#39;vc.5.0" expl="precondition" proved="true">
   <transf name="exists" proved="true" arg1="(h-l+1-e&#39;)">
    <goal name="bounded_kth_left_decomposition&#39;vc.5.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="bounded_kth_left_decomposition&#39;vc.5.0.0.0" proved="true">
     <proof prover="9"><result status="valid" time="0.75" steps="273674"/></proof>
     </goal>
     <goal name="bounded_kth_left_decomposition&#39;vc.5.0.0.1" proved="true">
     <proof prover="9"><result status="valid" time="0.26" steps="238354"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="bounded_kth_left_decomposition&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.27" steps="239681"/></proof>
  </goal>
  <goal name="bounded_kth_left_decomposition&#39;vc.7" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.75" steps="275170"/></proof>
  </goal>
  <goal name="bounded_kth_left_decomposition&#39;vc.8" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.28" steps="239723"/></proof>
  </goal>
  <goal name="bounded_kth_left_decomposition&#39;vc.9" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.74" steps="275842"/></proof>
  </goal>
  <goal name="bounded_kth_left_decomposition&#39;vc.10" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="(h - (((h - l) - k) + 1))" arg2="((l + k) - 1)" arg3="in" arg4="Ensures9">
   <goal name="bounded_kth_left_decomposition&#39;vc.10.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures9">
    <goal name="bounded_kth_left_decomposition&#39;vc.10.0.0" expl="assertion" proved="true">
    <transf name="replace" proved="true" arg1="( ind_isum (fun (a:int) -&gt; weighted_kth_right i a h f) 1
  ((((h - l) - k) + 1) + 1))" arg2="(ind_isum (fun (a:int) -&gt; if 1 &lt;= a then weighted_kth_right i a h f else 0)
  1 (((h - l) - k) + 2))">
     <goal name="bounded_kth_left_decomposition&#39;vc.10.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures">
      <goal name="bounded_kth_left_decomposition&#39;vc.10.0.0.0.0" expl="assertion" proved="true">
      <transf name="apply" proved="true" arg1="ind_isum_eq">
       <goal name="bounded_kth_left_decomposition&#39;vc.10.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="bounded_kth_left_decomposition&#39;vc.10.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="bounded_kth_left_decomposition&#39;vc.10.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="0.75" steps="277786"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="bounded_kth_left_decomposition&#39;vc.10.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="9"><result status="valid" time="2.36" steps="699110"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="bounded_kth_left_decomposition&#39;vc.10.1" expl="equality hypothesis" proved="true">
   <proof prover="9"><result status="valid" time="0.26" steps="240071"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="bounded_kth_left_decomposition&#39;vc.11" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Assert">
   <goal name="bounded_kth_left_decomposition&#39;vc.11.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="ind_isum_eq">
    <goal name="bounded_kth_left_decomposition&#39;vc.11.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="bounded_kth_left_decomposition&#39;vc.11.0.0.0" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="0.76" steps="277449"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="kth_left_decomposition&#39;vc" expl="VC for kth_left_decomposition" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kth_left_decomposition&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="199141"/></proof>
  </goal>
  <goal name="kth_left_decomposition&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.35" steps="212937"/></proof>
  </goal>
  <goal name="kth_left_decomposition&#39;vc.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="kth_left_decomposition&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.23" steps="199177"/></proof>
   </goal>
   <goal name="kth_left_decomposition&#39;vc.2.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.24" steps="199195"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="kth_left_decomposition&#39;vc.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="kth_left_decomposition&#39;vc.3.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.52" steps="228954"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="kth_left_decomposition&#39;vc.4" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(mod i (ind_iproduct f ((l + 1) - 1) h))" arg2="i" arg3="in" arg4="Ensures">
   <goal name="kth_left_decomposition&#39;vc.4.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.48" steps="231315"/></proof>
   </goal>
   <goal name="kth_left_decomposition&#39;vc.4.1" expl="equality hypothesis" proved="true">
   <proof prover="0"><result status="valid" time="0.21"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Evenness" proved="true">
 <goal name="odd&#39;vc" expl="VC for odd" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="odd&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="1796"/></proof>
  </goal>
  <goal name="odd&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="2465"/></proof>
  </goal>
  <goal name="odd&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="2536"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="even&#39;vc" expl="VC for even" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="even&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="2398"/></proof>
  </goal>
  <goal name="even&#39;vc.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="even&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.01" steps="2431"/></proof>
   </goal>
   <goal name="even&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.01" steps="3087"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="even_to_mod&#39;vc" expl="VC for even_to_mod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="even_to_mod&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="2614"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="even_minus_one&#39;vc" expl="VC for even_minus_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="even_minus_one&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="3771"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="odd_minus_one&#39;vc" expl="VC for odd_minus_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="odd_minus_one&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="4323"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="even_opp&#39;vc" expl="VC for even_opp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="even_opp&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="even_opp&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(mod (-n) 2 = 0)">
    <goal name="even_opp&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.01"/></proof>
    </goal>
    <goal name="even_opp&#39;vc.0.0.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.00"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="odd_opp&#39;vc" expl="VC for odd_opp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="odd_opp&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(mod (-n) 2 = 1)">
   <goal name="odd_opp&#39;vc.0.0" expl="asserted formula" proved="true">
   <proof prover="9"><result status="valid" time="0.01" steps="5248"/></proof>
   </goal>
   <goal name="odd_opp&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.01" steps="3929"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="odd_to_mod&#39;vc" expl="VC for odd_to_mod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="odd_to_mod&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="4288"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="even_or_odd" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="even_or_odd.0" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="5398"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="cpower_minus_c_one&#39;vc" expl="VC for cpower_minus_c_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cpower_minus_c_one&#39;vc.0" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.43" steps="202890"/></proof>
  </goal>
  <goal name="cpower_minus_c_one&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.20" steps="167797"/></proof>
  </goal>
  <goal name="cpower_minus_c_one&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.34" steps="183525"/></proof>
  </goal>
  <goal name="cpower_minus_c_one&#39;vc.3" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.42" steps="203545"/></proof>
  </goal>
  <goal name="cpower_minus_c_one&#39;vc.4" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.44" steps="203567"/></proof>
  </goal>
  <goal name="cpower_minus_c_one&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.75" steps="205878"/></proof>
  </goal>
  <goal name="cpower_minus_c_one&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.20"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="cpower_minus_c_one_even&#39;vc" expl="VC for cpower_minus_c_one_even" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cpower_minus_c_one_even&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.19" steps="167839"/></proof>
  </goal>
  <goal name="cpower_minus_c_one_even&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.23" steps="167891"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="cpower_minus_c_one_odd&#39;vc" expl="VC for cpower_minus_c_one_odd" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cpower_minus_c_one_odd&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.23" steps="167922"/></proof>
  </goal>
  <goal name="cpower_minus_c_one_odd&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.21" steps="167974"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="iproduct_extract_const&#39;vc" expl="VC for iproduct_extract_const" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="iproduct_extract_const&#39;vc.0" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.52" steps="215385"/></proof>
  </goal>
  <goal name="iproduct_extract_const&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="180484"/></proof>
  </goal>
  <goal name="iproduct_extract_const&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.26" steps="208636"/></proof>
  </goal>
  <goal name="iproduct_extract_const&#39;vc.3" expl="variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.61" steps="248259"/></proof>
  </goal>
  <goal name="iproduct_extract_const&#39;vc.4" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="iproduct_extract_const&#39;vc.4.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.21"/></proof>
   </goal>
   <goal name="iproduct_extract_const&#39;vc.4.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="iproduct_extract_const&#39;vc.4.1.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="iproduct_extract_const&#39;vc.4.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H1">
      <goal name="iproduct_extract_const&#39;vc.4.1.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H">
       <goal name="iproduct_extract_const&#39;vc.4.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="iproduct_extract_const&#39;vc.4.1.0.0.0.0.0" expl="postcondition" proved="true">
        <proof prover="0"><result status="valid" time="0.26"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Divisors" proved="true">
 <goal name="divisors&#39;vc" expl="VC for divisors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="divisors&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.33" steps="206418"/></proof>
  </goal>
  <goal name="divisors&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="4.87" steps="1461605"/></proof>
  </goal>
  <goal name="divisors&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="4.79" steps="1463746"/></proof>
  </goal>
  <goal name="divisors&#39;vc.3" expl="postcondition" proved="true">
  <transf name="exists" proved="true" arg1="(div i j)">
   <goal name="divisors&#39;vc.3.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="divisors&#39;vc.3.0.0" proved="true">
    <proof prover="0"><result status="valid" time="0.24"/></proof>
    </goal>
    <goal name="divisors&#39;vc.3.0.1" proved="true">
    <proof prover="0"><result status="valid" time="0.28"/></proof>
    </goal>
    <goal name="divisors&#39;vc.3.0.2" proved="true">
    <proof prover="0"><result status="valid" time="0.28"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="divisors&#39;vc.4" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(((fun (j1:int) -&gt; (1 &lt;= j1 /\ j1 &lt;= i) /\ mod i j1 = 0) @ j))">
   <goal name="divisors&#39;vc.4.0" expl="asserted formula" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="divisors&#39;vc.4.0.0" expl="asserted formula" proved="true">
    <proof prover="9"><result status="valid" time="0.29" steps="261380"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="divisors&#39;vc.4.1" expl="postcondition" proved="true">
   <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="h">
    <goal name="divisors&#39;vc.4.1.0" expl="postcondition" proved="true">
    <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Ensures4">
     <goal name="divisors&#39;vc.4.1.0.0" expl="postcondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="divisors&#39;vc.4.1.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="Ensures8">
       <goal name="divisors&#39;vc.4.1.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="0.80" steps="345318"/></proof>
       </goal>
       <goal name="divisors&#39;vc.4.1.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="0.35" steps="302177"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="divisors&#39;vc.5" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(((fun (j1:int) -&gt; (1 &lt;= j1 /\ j1 &lt;= i) /\ mod i j1 = 0) @ j))">
   <goal name="divisors&#39;vc.5.0" expl="asserted formula" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="divisors&#39;vc.5.0.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.25"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="divisors&#39;vc.5.1" expl="postcondition" proved="true">
   <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="h">
    <goal name="divisors&#39;vc.5.1.0" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="0.85" steps="303554"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_mem_divisors&#39;vc" expl="VC for set_mem_divisors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_mem_divisors&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="set_mem_divisors&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="divisors&#39;def">
    <goal name="set_mem_divisors&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="in_my_filter">
     <goal name="set_mem_divisors&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="0.60" steps="274119"/></proof>
     </goal>
     <goal name="set_mem_divisors&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="set_mem_divisors&#39;vc.0.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.21" steps="191744"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="set_mem_divisors&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="0.21" steps="191734"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="get_mem_divisors_mod&#39;vc" expl="VC for get_mem_divisors_mod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_mem_divisors_mod&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.23"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_mem_divisors_bounds&#39;vc" expl="VC for get_mem_divisors_bounds" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_mem_divisors_bounds&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.21"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_mem_divisors_inf&#39;vc" expl="VC for get_mem_divisors_inf" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_mem_divisors_inf&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.75" steps="272850"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_mem_divisors&#39;vc" expl="VC for get_mem_divisors" proved="true">
 <proof prover="9"><result status="valid" time="0.65" steps="273589"/></proof>
 </goal>
 <goal name="in_divisors_mult&#39;vc" expl="VC for in_divisors_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="in_divisors_mult&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.28" steps="234108"/></proof>
  </goal>
  <goal name="in_divisors_mult&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.27" steps="234112"/></proof>
  </goal>
  <goal name="in_divisors_mult&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.27"/></proof>
  </goal>
  <goal name="in_divisors_mult&#39;vc.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="in_divisors_mult&#39;vc.3.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.25" steps="234213"/></proof>
   </goal>
   <goal name="in_divisors_mult&#39;vc.3.1" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(j&lt;=j*k)">
    <goal name="in_divisors_mult&#39;vc.3.1.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.25"/></proof>
    </goal>
    <goal name="in_divisors_mult&#39;vc.3.1.1" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.43" steps="253528"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="in_divisors_mult&#39;vc.4" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="(j*k),i,(div j i*k),0">
   <goal name="in_divisors_mult&#39;vc.4.0" expl="precondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="in_divisors_mult&#39;vc.4.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Hinst">
     <goal name="in_divisors_mult&#39;vc.4.0.0.0" expl="precondition" proved="true">
     <proof prover="9"><result status="valid" time="0.30" steps="269611"/></proof>
     </goal>
     <goal name="in_divisors_mult&#39;vc.4.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="9"><result status="valid" time="0.29" steps="269615"/></proof>
     </goal>
     <goal name="in_divisors_mult&#39;vc.4.0.0.2" expl="rewrite premises" proved="true">
     <transf name="assert" proved="true" arg1="(j = div j i* i)">
      <goal name="in_divisors_mult&#39;vc.4.0.0.2.0" expl="asserted formula" proved="true">
      <proof prover="12"><result status="valid" time="0.17" steps="6232"/></proof>
      </goal>
      <goal name="in_divisors_mult&#39;vc.4.0.0.2.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.28"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="in_divisors_mult&#39;vc.4.0.0.3" expl="rewrite premises" proved="true">
     <proof prover="9"><result status="valid" time="0.30" steps="269613"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="in_divisors_mult&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.27" steps="234204"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="in_divisors_powers&#39;vc" expl="VC for in_divisors_powers" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="in_divisors_powers&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.76" steps="274776"/></proof>
  </goal>
  <goal name="in_divisors_powers&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.70" steps="274788"/></proof>
  </goal>
  <goal name="in_divisors_powers&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.27" steps="234318"/></proof>
  </goal>
  <goal name="in_divisors_powers&#39;vc.3" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(power a b * power a (b&#39; - b))" arg2="(power a b&#39;)" arg3="in" arg4="H">
   <goal name="in_divisors_powers&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="4.92" steps="1421226"/></proof>
   </goal>
   <goal name="in_divisors_powers&#39;vc.3.1" expl="equality hypothesis" proved="true">
   <proof prover="9"><result status="valid" time="4.96" steps="1419882"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="powers_in_divisors&#39;vc" expl="VC for powers_in_divisors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="powers_in_divisors&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.75" steps="274037"/></proof>
  </goal>
  <goal name="powers_in_divisors&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.75" steps="274087"/></proof>
  </goal>
  <goal name="powers_in_divisors&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.75" steps="2440490"/></proof>
  </goal>
  <goal name="powers_in_divisors&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.26" steps="234551"/></proof>
  </goal>
  <goal name="powers_in_divisors&#39;vc.4" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="0.45" steps="2435383"/></proof>
  </goal>
  <goal name="powers_in_divisors&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.63" steps="276257"/></proof>
  </goal>
  <goal name="powers_in_divisors&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="4.52" steps="1394674"/></proof>
  </goal>
  <goal name="powers_in_divisors&#39;vc.7" expl="precondition" proved="true">
  <proof prover="12"><result status="valid" time="0.21" steps="8263"/></proof>
  </goal>
  <goal name="powers_in_divisors&#39;vc.8" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.30" steps="234629"/></proof>
  </goal>
  <goal name="powers_in_divisors&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.70" steps="277339"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="not_powers_in_divisors&#39;vc" expl="VC for not_powers_in_divisors" proved="true">
 <proof prover="9"><result status="valid" time="0.45" steps="253495"/></proof>
 </goal>
 <goal name="itself_divisors&#39;vc" expl="VC for itself_divisors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="itself_divisors&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="itself_divisors&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_mem_divisors">
    <goal name="itself_divisors&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.21" steps="193193"/></proof>
    </goal>
    <goal name="itself_divisors&#39;vc.0.0.1" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.21" steps="193212"/></proof>
    </goal>
    <goal name="itself_divisors&#39;vc.0.0.2" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.48" steps="229447"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="unicity_div_rev&#39;vc" expl="VC for unicity_div_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="unicity_div_rev&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(i = div i j * j + mod i j)">
   <goal name="unicity_div_rev&#39;vc.0.0" expl="asserted formula" proved="true">
   <proof prover="8"><result status="valid" time="0.49" steps="2424869"/></proof>
   </goal>
   <goal name="unicity_div_rev&#39;vc.0.1" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(mod i j )" arg2="0" arg3="in" arg4="h">
    <goal name="unicity_div_rev&#39;vc.0.1.0" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="0.45" steps="253842"/></proof>
    </goal>
    <goal name="unicity_div_rev&#39;vc.0.1.1" expl="equality hypothesis" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="unicity_div_rev&#39;vc.0.1.1.0" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="divisors&#39;def" arg2="in" arg3="Requires1">
      <goal name="unicity_div_rev&#39;vc.0.1.1.0.0" expl="equality hypothesis" proved="true">
      <proof prover="9"><result status="valid" time="4.83" steps="1474360"/></proof>
      </goal>
      <goal name="unicity_div_rev&#39;vc.0.1.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="9"><result status="valid" time="0.24" steps="236011"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mem_own_divisors&#39;vc" expl="VC for mem_own_divisors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mem_own_divisors&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_mem_divisors">
   <goal name="mem_own_divisors&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="9"><result status="valid" time="0.21" steps="192386"/></proof>
   </goal>
   <goal name="mem_own_divisors&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="9"><result status="valid" time="0.24" steps="192405"/></proof>
   </goal>
   <goal name="mem_own_divisors&#39;vc.0.2" expl="apply premises" proved="true">
   <proof prover="9"><result status="valid" time="0.49" steps="228545"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mem_one_divisors&#39;vc" expl="VC for mem_one_divisors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mem_one_divisors&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.58" steps="273894"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="trivial_divisors_left&#39;vc" expl="VC for trivial_divisors_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="trivial_divisors_left&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.21" steps="192547"/></proof>
  </goal>
  <goal name="trivial_divisors_left&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="192579"/></proof>
  </goal>
  <goal name="trivial_divisors_left&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.21" steps="192599"/></proof>
  </goal>
  <goal name="trivial_divisors_left&#39;vc.3" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_mem_divisors">
   <goal name="trivial_divisors_left&#39;vc.3.0" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.22"/></proof>
   </goal>
   <goal name="trivial_divisors_left&#39;vc.3.1" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.19"/></proof>
   </goal>
   <goal name="trivial_divisors_left&#39;vc.3.2" expl="apply premises" proved="true">
   <proof prover="9"><result status="valid" time="0.23" steps="192630"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="trivial_divisors_right&#39;vc" expl="VC for trivial_divisors_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="trivial_divisors_right&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="192667"/></proof>
  </goal>
  <goal name="trivial_divisors_right&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.20" steps="192673"/></proof>
  </goal>
  <goal name="trivial_divisors_right&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.25" steps="235314"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_not_prime&#39;vc" expl="VC for get_not_prime" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_not_prime&#39;vc.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(forall b:int. (1 &lt; b /\ b &lt; a) -&gt; not (mem b (divisors a)))">
   <goal name="get_not_prime&#39;vc.0.0" expl="true case (postcondition)" proved="true">
   <transf name="assert" proved="true" arg1="(divisors a = add a (to_set 1))">
    <goal name="get_not_prime&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="set_equal">
     <goal name="get_not_prime&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="get_not_prime&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.60" steps="278329"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="get_not_prime&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="get_not_prime&#39;vc.0.0.0.1.0" expl="apply premises" proved="true">
      <transf name="case" proved="true" arg1="(e = a)">
       <goal name="get_not_prime&#39;vc.0.0.0.1.0.0" expl="apply premises (true case)" proved="true">
       <proof prover="9"><result status="valid" time="0.62" steps="277941"/></proof>
       </goal>
       <goal name="get_not_prime&#39;vc.0.0.0.1.0.1" expl="apply premises (false case)" proved="true">
       <transf name="replace" proved="true" arg1="e" arg2="1">
        <goal name="get_not_prime&#39;vc.0.0.0.1.0.1.0" expl="apply premises (false case)" proved="true">
        <proof prover="9"><result status="valid" time="0.59" steps="277701"/></proof>
        </goal>
        <goal name="get_not_prime&#39;vc.0.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
        <transf name="assert" proved="true" arg1="(mem e (to_set 1))">
         <goal name="get_not_prime&#39;vc.0.0.0.1.0.1.1.0" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="0.44" steps="257283"/></proof>
         </goal>
         <goal name="get_not_prime&#39;vc.0.0.0.1.0.1.1.1" expl="equality hypothesis" proved="true">
         <proof prover="9"><result status="valid" time="0.57" steps="257302"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="get_not_prime&#39;vc.0.0.1" expl="true case (postcondition)" proved="true">
    <proof prover="9"><result status="valid" time="0.58" steps="274729"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="get_not_prime&#39;vc.0.1" expl="false case (postcondition)" proved="true">
   <proof prover="9"><result status="valid" time="0.41" steps="254455"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_not_prime&#39;vc" expl="VC for set_not_prime" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_not_prime&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(exists b. mem b (divisors a) /\ not (mem b (add a (to_set 1))))">
   <goal name="set_not_prime&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="destruct" proved="true" arg1="Requires">
    <goal name="set_not_prime&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="exists" proved="true" arg1="b">
     <goal name="set_not_prime&#39;vc.0.0.0.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="set_not_prime&#39;vc.0.0.0.0.0" proved="true">
      <proof prover="9"><result status="valid" time="0.26" steps="235695"/></proof>
      </goal>
      <goal name="set_not_prime&#39;vc.0.0.0.0.1" proved="true">
      <proof prover="9"><result status="valid" time="1.20" steps="448377"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="set_not_prime&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.73" steps="277133"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="card_prime_divisors&#39;vc" expl="VC for card_prime_divisors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="card_prime_divisors&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(divisors a )" arg2="(add a (to_set 1))">
   <goal name="card_prime_divisors&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="1.23" steps="417083"/></proof>
   </goal>
   <goal name="card_prime_divisors&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <proof prover="9"><result status="valid" time="0.55" steps="235777"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="symetric_co_prime&#39;vc" expl="VC for symetric_co_prime" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="symetric_co_prime&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.04" steps="375882"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="prime_is_co_prime_right&#39;vc" expl="VC for prime_is_co_prime_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="prime_is_co_prime_right&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="prime_is_co_prime_right&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="co_prime&#39;def">
    <goal name="prime_is_co_prime_right&#39;vc.0.0.0" expl="VC for prime_is_co_prime_right" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="prime_is_co_prime_right&#39;vc.0.0.0.0" expl="VC for prime_is_co_prime_right" proved="true">
     <proof prover="9"><result status="valid" time="0.26" steps="237256"/></proof>
     </goal>
     <goal name="prime_is_co_prime_right&#39;vc.0.0.0.1" expl="VC for prime_is_co_prime_right" proved="true">
     <proof prover="9"><result status="valid" time="0.60" steps="276563"/></proof>
     </goal>
     <goal name="prime_is_co_prime_right&#39;vc.0.0.0.2" expl="VC for prime_is_co_prime_right" proved="true">
     <transf name="replace" proved="true" arg1="((divisors b))" arg2="(add b (to_set 1))">
      <goal name="prime_is_co_prime_right&#39;vc.0.0.0.2.0" expl="VC for prime_is_co_prime_right" proved="true">
      <transf name="apply" proved="true" arg1="set_equal">
       <goal name="prime_is_co_prime_right&#39;vc.0.0.0.2.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="prime_is_co_prime_right&#39;vc.0.0.0.2.0.0.0" expl="apply premises" proved="true">
        <transf name="case" proved="true" arg1="(e =1)">
         <goal name="prime_is_co_prime_right&#39;vc.0.0.0.2.0.0.0.0" expl="apply premises (true case)" proved="true">
         <proof prover="9"><result status="valid" time="0.48" steps="259334"/></proof>
         </goal>
         <goal name="prime_is_co_prime_right&#39;vc.0.0.0.2.0.0.0.1" expl="apply premises (false case)" proved="true">
         <transf name="case" proved="true" arg1="(e =b)">
          <goal name="prime_is_co_prime_right&#39;vc.0.0.0.2.0.0.0.1.0" expl="apply premises (false case. true case)" proved="true">
          <transf name="assert" proved="true" arg1="(not (mem e (inter (divisors a) (add b (to_set 1)))))">
           <goal name="prime_is_co_prime_right&#39;vc.0.0.0.2.0.0.0.1.0.0" expl="asserted formula" proved="true">
           <proof prover="9"><result status="valid" time="0.49" steps="259366"/></proof>
           </goal>
           <goal name="prime_is_co_prime_right&#39;vc.0.0.0.2.0.0.0.1.0.1" expl="apply premises (false case. true case)" proved="true">
           <proof prover="9"><result status="valid" time="0.28" steps="240002"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="prime_is_co_prime_right&#39;vc.0.0.0.2.0.0.0.1.1" expl="apply premises (false case)" proved="true">
          <transf name="assert" proved="true" arg1="(not (mem e (inter (divisors a) (add b (to_set 1)))))">
           <goal name="prime_is_co_prime_right&#39;vc.0.0.0.2.0.0.0.1.1.0" expl="asserted formula" proved="true">
           <proof prover="9"><result status="valid" time="4.20" steps="1520366"/></proof>
           </goal>
           <goal name="prime_is_co_prime_right&#39;vc.0.0.0.2.0.0.0.1.1.1" expl="apply premises (false case)" proved="true">
           <proof prover="9"><result status="valid" time="0.27" steps="240006"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="prime_is_co_prime_right&#39;vc.0.0.0.2.0.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="prime_is_co_prime_right&#39;vc.0.0.0.2.0.1.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="(mem e (divisors a))">
         <goal name="prime_is_co_prime_right&#39;vc.0.0.0.2.0.1.0.0" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="0.70" steps="277813"/></proof>
         </goal>
         <goal name="prime_is_co_prime_right&#39;vc.0.0.0.2.0.1.0.1" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="0.78" steps="285470"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="prime_is_co_prime_right&#39;vc.0.0.0.2.1" expl="equality hypothesis" proved="true">
      <proof prover="9"><result status="valid" time="0.67" steps="277606"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="prime_is_co_prime&#39;vc" expl="VC for prime_is_co_prime" proved="true">
 <proof prover="9"><result status="valid" time="0.78" steps="275693"/></proof>
 </goal>
 <goal name="prime_are_co_primes&#39;vc" expl="VC for prime_are_co_primes" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="prime_are_co_primes&#39;vc.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(a=1)">
   <goal name="prime_are_co_primes&#39;vc.0.0" expl="true case (postcondition)" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="prime_are_co_primes&#39;vc.0.0.0" expl="true case (postcondition)" proved="true">
    <proof prover="9"><result status="valid" time="4.13" steps="1367125"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="prime_are_co_primes&#39;vc.0.1" expl="false case (postcondition)" proved="true">
   <transf name="case" proved="true" arg1="(b=1)">
    <goal name="prime_are_co_primes&#39;vc.0.1.0" expl="false case (true case. postcondition)" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="prime_are_co_primes&#39;vc.0.1.0.0" expl="false case (true case. postcondition)" proved="true">
     <proof prover="9"><result status="valid" time="4.22" steps="1367104"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="prime_are_co_primes&#39;vc.0.1.1" expl="false case (postcondition)" proved="true">
    <proof prover="9"><result status="valid" time="4.13" steps="1309730"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="one_is_co_prime&#39;vc" expl="VC for one_is_co_prime" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="one_is_co_prime&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="one_is_co_prime&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="co_prime&#39;def">
    <goal name="one_is_co_prime&#39;vc.0.0.0" expl="VC for one_is_co_prime" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="one_is_co_prime&#39;vc.0.0.0.0" expl="VC for one_is_co_prime" proved="true">
     <proof prover="9"><result status="valid" time="0.22" steps="194965"/></proof>
     </goal>
     <goal name="one_is_co_prime&#39;vc.0.0.0.1" expl="VC for one_is_co_prime" proved="true">
     <proof prover="9"><result status="valid" time="0.23" steps="194972"/></proof>
     </goal>
     <goal name="one_is_co_prime&#39;vc.0.0.0.2" expl="VC for one_is_co_prime" proved="true">
     <transf name="apply" proved="true" arg1="set_equal">
      <goal name="one_is_co_prime&#39;vc.0.0.0.2.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="one_is_co_prime&#39;vc.0.0.0.2.0.0" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="e" arg2="1">
        <goal name="one_is_co_prime&#39;vc.0.0.0.2.0.0.0" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="0.47" steps="258852"/></proof>
        </goal>
        <goal name="one_is_co_prime&#39;vc.0.0.0.2.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="9"><result status="valid" time="4.67" steps="1466918"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="one_is_co_prime&#39;vc.0.0.0.2.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="one_is_co_prime&#39;vc.0.0.0.2.1.0" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="4.66" steps="1485755"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mem_divisors_trans&#39;vc" expl="VC for mem_divisors_trans" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mem_divisors_trans&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_mem_divisors">
   <goal name="mem_divisors_trans&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="9"><result status="valid" time="0.27" steps="236528"/></proof>
   </goal>
   <goal name="mem_divisors_trans&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="9"><result status="valid" time="0.65" steps="277399"/></proof>
   </goal>
   <goal name="mem_divisors_trans&#39;vc.0.2" expl="apply premises" proved="true">
   <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="c,a,(div c b * div b a),0">
    <goal name="mem_divisors_trans&#39;vc.0.2.0" expl="apply premises" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="mem_divisors_trans&#39;vc.0.2.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="Hinst">
      <goal name="mem_divisors_trans&#39;vc.0.2.0.0.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.31" steps="271926"/></proof>
      </goal>
      <goal name="mem_divisors_trans&#39;vc.0.2.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="9"><result status="valid" time="0.67" steps="314527"/></proof>
      </goal>
      <goal name="mem_divisors_trans&#39;vc.0.2.0.0.2" expl="rewrite premises" proved="true">
      <transf name="replace" proved="true" arg1="((div c b * div b a) * a)" arg2="(div c b * (div b a * a))">
       <goal name="mem_divisors_trans&#39;vc.0.2.0.0.2.0" expl="rewrite premises" proved="true">
       <transf name="replace" proved="true" arg1="(div b a * a)" arg2="b">
        <goal name="mem_divisors_trans&#39;vc.0.2.0.0.2.0.0" expl="rewrite premises" proved="true">
        <proof prover="9"><result status="valid" time="0.68" steps="314590"/></proof>
        </goal>
        <goal name="mem_divisors_trans&#39;vc.0.2.0.0.2.0.1" expl="equality hypothesis" proved="true">
        <proof prover="9"><result status="valid" time="0.68" steps="314579"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="mem_divisors_trans&#39;vc.0.2.0.0.2.1" expl="equality hypothesis" proved="true">
       <proof prover="9"><result status="valid" time="0.32" steps="271949"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="mem_divisors_trans&#39;vc.0.2.0.0.3" expl="rewrite premises" proved="true">
      <proof prover="9"><result status="valid" time="0.83" steps="314525"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="subset_divisors&#39;vc" expl="VC for subset_divisors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="subset_divisors&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="4.63" steps="1417817"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="not_prime_divisors&#39;vc" expl="VC for not_prime_divisors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="not_prime_divisors&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(1&lt; cardinal (remove 1 (divisors a)))">
   <goal name="not_prime_divisors&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="(0&lt; cardinal (remove a (remove 1 (divisors a))))">
    <goal name="not_prime_divisors&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="not_prime_divisors&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="rewrite" proved="true" arg1="prime&#39;def" arg2="in" arg3="Requires">
      <goal name="not_prime_divisors&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="(subset (add a (to_set 1)) (divisors a))">
       <goal name="not_prime_divisors&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="set_subset">
        <goal name="not_prime_divisors&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="not_prime_divisors&#39;vc.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="case" proved="true" arg1="(e = a)">
          <goal name="not_prime_divisors&#39;vc.0.0.0.0.0.0.0.0.0" expl="apply premises (true case)" proved="true">
          <proof prover="9"><result status="valid" time="0.64" steps="278512"/></proof>
          </goal>
          <goal name="not_prime_divisors&#39;vc.0.0.0.0.0.0.0.0.1" expl="apply premises (false case)" proved="true">
          <transf name="assert" proved="true" arg1="(e = 1)">
           <goal name="not_prime_divisors&#39;vc.0.0.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
           <transf name="assert" proved="true" arg1="(mem e (to_set 1))">
            <goal name="not_prime_divisors&#39;vc.0.0.0.0.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
            <proof prover="9"><result status="valid" time="0.47" steps="258109"/></proof>
            </goal>
            <goal name="not_prime_divisors&#39;vc.0.0.0.0.0.0.0.0.1.0.1" expl="asserted formula" proved="true">
            <proof prover="9"><result status="valid" time="0.46" steps="258128"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="not_prime_divisors&#39;vc.0.0.0.0.0.0.0.0.1.1" expl="apply premises (false case)" proved="true">
           <proof prover="9"><result status="valid" time="0.60" steps="278525"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="not_prime_divisors&#39;vc.0.0.0.0.0.1" expl="asserted formula" proved="true">
       <transf name="case" proved="true" arg1="(exists x. mem x (divisors a) /\ not (mem x (add a (to_set 1))))">
        <goal name="not_prime_divisors&#39;vc.0.0.0.0.0.1.0" expl="true case (asserted formula)" proved="true">
        <transf name="destruct" proved="true" arg1="h1">
         <goal name="not_prime_divisors&#39;vc.0.0.0.0.0.1.0.0" expl="true case (asserted formula)" proved="true">
         <transf name="assert" proved="true" arg1="(mem x (remove a (remove 1 (divisors a))))">
          <goal name="not_prime_divisors&#39;vc.0.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
          <transf name="assert" proved="true" arg1="(mem x ( (remove 1 (divisors a))))">
           <goal name="not_prime_divisors&#39;vc.0.0.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
           <transf name="assert" proved="true" arg1="(mem x  (divisors a))">
            <goal name="not_prime_divisors&#39;vc.0.0.0.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
            <proof prover="9"><result status="valid" time="0.31" steps="238788"/></proof>
            </goal>
            <goal name="not_prime_divisors&#39;vc.0.0.0.0.0.1.0.0.0.0.1" expl="asserted formula" proved="true">
            <transf name="case" proved="true" arg1="( x  &lt;&gt;1)">
             <goal name="not_prime_divisors&#39;vc.0.0.0.0.0.1.0.0.0.0.1.0" expl="true case (asserted formula)" proved="true">
             <proof prover="9"><result status="valid" time="0.48" steps="259588"/></proof>
             </goal>
             <goal name="not_prime_divisors&#39;vc.0.0.0.0.0.1.0.0.0.0.1.1" expl="false case (asserted formula)" proved="true">
             <transf name="assert" proved="true" arg1="(mem x (to_set 1))">
              <goal name="not_prime_divisors&#39;vc.0.0.0.0.0.1.0.0.0.0.1.1.0" expl="asserted formula" proved="true">
              <proof prover="9"><result status="valid" time="0.49" steps="258162"/></proof>
              </goal>
              <goal name="not_prime_divisors&#39;vc.0.0.0.0.0.1.0.0.0.0.1.1.1" expl="false case (asserted formula)" proved="true">
              <proof prover="9"><result status="valid" time="0.49" steps="259610"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="not_prime_divisors&#39;vc.0.0.0.0.0.1.0.0.0.1" expl="asserted formula" proved="true">
           <proof prover="9"><result status="valid" time="0.49" steps="261692"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="not_prime_divisors&#39;vc.0.0.0.0.0.1.0.0.1" expl="true case (asserted formula)" proved="true">
          <proof prover="9"><result status="valid" time="0.59" steps="254849"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="not_prime_divisors&#39;vc.0.0.0.0.0.1.1" expl="false case (asserted formula)" proved="true">
        <transf name="assert" proved="true" arg1="(divisors a = add a (to_set 1))">
         <goal name="not_prime_divisors&#39;vc.0.0.0.0.0.1.1.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="set_equal">
          <goal name="not_prime_divisors&#39;vc.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="not_prime_divisors&#39;vc.0.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
           <proof prover="9"><result status="valid" time="0.51" steps="258169"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="not_prime_divisors&#39;vc.0.0.0.0.0.1.1.0.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="not_prime_divisors&#39;vc.0.0.0.0.0.1.1.0.1.0" expl="apply premises" proved="true">
           <transf name="case" proved="true" arg1="(e =a)">
            <goal name="not_prime_divisors&#39;vc.0.0.0.0.0.1.1.0.1.0.0" expl="apply premises (true case)" proved="true">
            <proof prover="9"><result status="valid" time="0.52" steps="260035"/></proof>
            </goal>
            <goal name="not_prime_divisors&#39;vc.0.0.0.0.0.1.1.0.1.0.1" expl="apply premises (false case)" proved="true">
            <transf name="assert" proved="true" arg1="(e = 1)">
             <goal name="not_prime_divisors&#39;vc.0.0.0.0.0.1.1.0.1.0.1.0" expl="asserted formula" proved="true">
             <proof prover="9"><result status="valid" time="0.86" steps="282439"/></proof>
             </goal>
             <goal name="not_prime_divisors&#39;vc.0.0.0.0.0.1.1.0.1.0.1.1" expl="apply premises (false case)" proved="true">
             <proof prover="9"><result status="valid" time="0.64" steps="260022"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="not_prime_divisors&#39;vc.0.0.0.0.0.1.1.1" expl="false case (asserted formula)" proved="true">
         <proof prover="9"><result status="valid" time="0.39" steps="231620"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="not_prime_divisors&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="not_prime_divisors&#39;vc.0.0.1.0" expl="asserted formula" proved="true">
     <transf name="rewrite" proved="true" arg1="prime&#39;def" arg2="in" arg3="Requires">
      <goal name="not_prime_divisors&#39;vc.0.0.1.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="(subset (add a (to_set 1)) (divisors a))">
       <goal name="not_prime_divisors&#39;vc.0.0.1.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="set_subset">
        <goal name="not_prime_divisors&#39;vc.0.0.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="not_prime_divisors&#39;vc.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="case" proved="true" arg1="(e = a)">
          <goal name="not_prime_divisors&#39;vc.0.0.1.0.0.0.0.0.0" expl="apply premises (true case)" proved="true">
          <proof prover="9"><result status="valid" time="0.62" steps="279629"/></proof>
          </goal>
          <goal name="not_prime_divisors&#39;vc.0.0.1.0.0.0.0.0.1" expl="apply premises (false case)" proved="true">
          <transf name="assert" proved="true" arg1="(e = 1)">
           <goal name="not_prime_divisors&#39;vc.0.0.1.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
           <transf name="assert" proved="true" arg1="(mem e (to_set 1))">
            <goal name="not_prime_divisors&#39;vc.0.0.1.0.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
            <proof prover="9"><result status="valid" time="0.49" steps="258169"/></proof>
            </goal>
            <goal name="not_prime_divisors&#39;vc.0.0.1.0.0.0.0.0.1.0.1" expl="asserted formula" proved="true">
            <proof prover="9"><result status="valid" time="0.46" steps="258188"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="not_prime_divisors&#39;vc.0.0.1.0.0.0.0.0.1.1" expl="apply premises (false case)" proved="true">
           <proof prover="9"><result status="valid" time="0.60" steps="279585"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="not_prime_divisors&#39;vc.0.0.1.0.0.1" expl="asserted formula" proved="true">
       <transf name="case" proved="true" arg1="(exists x. mem x (divisors a) /\ not (mem x (add a (to_set 1))))">
        <goal name="not_prime_divisors&#39;vc.0.0.1.0.0.1.0" expl="true case (asserted formula)" proved="true">
        <transf name="destruct" proved="true" arg1="h1">
         <goal name="not_prime_divisors&#39;vc.0.0.1.0.0.1.0.0" expl="true case (asserted formula)" proved="true">
         <transf name="assert" proved="true" arg1="(mem x (remove a (remove 1 (divisors a))))">
          <goal name="not_prime_divisors&#39;vc.0.0.1.0.0.1.0.0.0" expl="asserted formula" proved="true">
          <transf name="assert" proved="true" arg1="(mem x ( (remove 1 (divisors a))))">
           <goal name="not_prime_divisors&#39;vc.0.0.1.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
           <transf name="assert" proved="true" arg1="(mem x  (divisors a))">
            <goal name="not_prime_divisors&#39;vc.0.0.1.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
            <proof prover="9"><result status="valid" time="0.27" steps="238843"/></proof>
            </goal>
            <goal name="not_prime_divisors&#39;vc.0.0.1.0.0.1.0.0.0.0.1" expl="asserted formula" proved="true">
            <transf name="case" proved="true" arg1="( x  &lt;&gt;1)">
             <goal name="not_prime_divisors&#39;vc.0.0.1.0.0.1.0.0.0.0.1.0" expl="true case (asserted formula)" proved="true">
             <proof prover="9"><result status="valid" time="0.48" steps="259627"/></proof>
             </goal>
             <goal name="not_prime_divisors&#39;vc.0.0.1.0.0.1.0.0.0.0.1.1" expl="false case (asserted formula)" proved="true">
             <transf name="assert" proved="true" arg1="(mem x (to_set 1))">
              <goal name="not_prime_divisors&#39;vc.0.0.1.0.0.1.0.0.0.0.1.1.0" expl="asserted formula" proved="true">
              <proof prover="9"><result status="valid" time="0.47" steps="258218"/></proof>
              </goal>
              <goal name="not_prime_divisors&#39;vc.0.0.1.0.0.1.0.0.0.0.1.1.1" expl="false case (asserted formula)" proved="true">
              <proof prover="9"><result status="valid" time="0.47" steps="259649"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="not_prime_divisors&#39;vc.0.0.1.0.0.1.0.0.0.1" expl="asserted formula" proved="true">
           <proof prover="9"><result status="valid" time="0.63" steps="261721"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="not_prime_divisors&#39;vc.0.0.1.0.0.1.0.0.1" expl="true case (asserted formula)" proved="true">
          <proof prover="9"><result status="valid" time="1.64" steps="531299"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="not_prime_divisors&#39;vc.0.0.1.0.0.1.1" expl="false case (asserted formula)" proved="true">
        <transf name="assert" proved="true" arg1="(divisors a = add a (to_set 1))">
         <goal name="not_prime_divisors&#39;vc.0.0.1.0.0.1.1.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="set_equal">
          <goal name="not_prime_divisors&#39;vc.0.0.1.0.0.1.1.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="not_prime_divisors&#39;vc.0.0.1.0.0.1.1.0.0.0" expl="apply premises" proved="true">
           <proof prover="9"><result status="valid" time="0.48" steps="258225"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="not_prime_divisors&#39;vc.0.0.1.0.0.1.1.0.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="not_prime_divisors&#39;vc.0.0.1.0.0.1.1.0.1.0" expl="apply premises" proved="true">
           <transf name="case" proved="true" arg1="(e =a)">
            <goal name="not_prime_divisors&#39;vc.0.0.1.0.0.1.1.0.1.0.0" expl="apply premises (true case)" proved="true">
            <proof prover="9"><result status="valid" time="0.51" steps="260150"/></proof>
            </goal>
            <goal name="not_prime_divisors&#39;vc.0.0.1.0.0.1.1.0.1.0.1" expl="apply premises (false case)" proved="true">
            <transf name="assert" proved="true" arg1="(e = 1)">
             <goal name="not_prime_divisors&#39;vc.0.0.1.0.0.1.1.0.1.0.1.0" expl="asserted formula" proved="true">
             <proof prover="9"><result status="valid" time="0.87" steps="283117"/></proof>
             </goal>
             <goal name="not_prime_divisors&#39;vc.0.0.1.0.0.1.1.0.1.0.1.1" expl="apply premises (false case)" proved="true">
             <proof prover="9"><result status="valid" time="0.55" steps="260092"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="not_prime_divisors&#39;vc.0.0.1.0.0.1.1.1" expl="false case (asserted formula)" proved="true">
         <proof prover="9"><result status="valid" time="0.45" steps="231615"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="not_prime_divisors&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.53" steps="246649"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="not_prime_divisors&#39;vc.1" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(1&lt; cardinal (remove 1 (divisors a)))">
   <goal name="not_prime_divisors&#39;vc.1.0" expl="asserted formula" proved="true">
   <proof prover="9"><result status="valid" time="0.55" steps="248788"/></proof>
   </goal>
   <goal name="not_prime_divisors&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="1.41" steps="459076"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="strict_subset_divisors&#39;vc" expl="VC for strict_subset_divisors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="strict_subset_divisors&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.77" steps="277576"/></proof>
  </goal>
  <goal name="strict_subset_divisors&#39;vc.1" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(not (mem b (divisors a)))">
   <goal name="strict_subset_divisors&#39;vc.1.0" expl="asserted formula" proved="true">
   <proof prover="9"><result status="valid" time="0.75" steps="278781"/></proof>
   </goal>
   <goal name="strict_subset_divisors&#39;vc.1.1" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(b &lt; a)">
    <goal name="strict_subset_divisors&#39;vc.1.1.0" expl="true case (postcondition)" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="strict_subset_divisors&#39;vc.1.1.0.0" expl="true case (postcondition)" proved="true">
     <proof prover="9"><result status="valid" time="0.77" steps="279318"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="strict_subset_divisors&#39;vc.1.1.1" expl="false case (postcondition)" proved="true">
    <proof prover="9"><result status="valid" time="0.76" steps="278272"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="strict_subset_divisors&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.75" steps="283257"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="divisors_contains_prime&#39;vc" expl="VC for divisors_contains_prime" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="divisors_contains_prime&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.36" steps="211870"/></proof>
  </goal>
  <goal name="divisors_contains_prime&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.27" steps="242591"/></proof>
  </goal>
  <goal name="divisors_contains_prime&#39;vc.2" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(prime i -&gt; cardinal (divisors i) = 2)">
   <goal name="divisors_contains_prime&#39;vc.2.0" expl="asserted formula" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="divisors_contains_prime&#39;vc.2.0.0" expl="asserted formula" proved="true">
    <proof prover="9"><result status="valid" time="0.59" steps="282042"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="divisors_contains_prime&#39;vc.2.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.29" steps="242610"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="divisors_contains_prime&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.42" steps="261745"/></proof>
  </goal>
  <goal name="divisors_contains_prime&#39;vc.4" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(mem (choose (remove 1 (remove i (divisors i)))) (divisors i))">
   <goal name="divisors_contains_prime&#39;vc.4.0" expl="asserted formula" proved="true">
   <proof prover="9"><result status="valid" time="4.70" steps="1448098"/></proof>
   </goal>
   <goal name="divisors_contains_prime&#39;vc.4.1" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(mem (choose (remove 1 (remove i (divisors i)))) (remove 1 (remove i (divisors i))))">
    <goal name="divisors_contains_prime&#39;vc.4.1.0" expl="asserted formula" proved="true">
    <proof prover="9"><result status="valid" time="1.28" steps="457095"/></proof>
    </goal>
    <goal name="divisors_contains_prime&#39;vc.4.1.1" expl="precondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="divisors_contains_prime&#39;vc.4.1.1.0" expl="precondition" proved="true">
     <proof prover="9"><result status="valid" time="0.48" steps="262541"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="divisors_contains_prime&#39;vc.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="divisors_contains_prime&#39;vc.5.0" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(not (mem i1 (remove 1 (remove i1 (divisors i1)))))">
    <goal name="divisors_contains_prime&#39;vc.5.0.0" expl="asserted formula" proved="true">
    <proof prover="9"><result status="valid" time="0.79" steps="288110"/></proof>
    </goal>
    <goal name="divisors_contains_prime&#39;vc.5.0.1" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(0 &lt;cardinal (remove 1 (remove i1 (divisors i1))) )">
     <goal name="divisors_contains_prime&#39;vc.5.0.1.0" expl="asserted formula" proved="true">
     <proof prover="9"><result status="valid" time="0.76" steps="286623"/></proof>
     </goal>
     <goal name="divisors_contains_prime&#39;vc.5.0.1.1" expl="precondition" proved="true">
     <transf name="assert" proved="true" arg1="(forall s: set int. forall e . mem e s -&gt; cardinal (remove e s) = cardinal s -1)">
      <goal name="divisors_contains_prime&#39;vc.5.0.1.1.0" expl="asserted formula" proved="true">
      <proof prover="9"><result status="valid" time="0.62" steps="286870"/></proof>
      </goal>
      <goal name="divisors_contains_prime&#39;vc.5.0.1.1.1" expl="precondition" proved="true">
      <proof prover="9"><result status="valid" time="0.61" steps="286621"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="divisors_contains_prime&#39;vc.6" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="divisors_contains_prime&#39;vc.6.0" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(mem (choose (remove 1 (remove i1 (divisors i1)))) (remove 1 (remove i1 (divisors i1))))">
    <goal name="divisors_contains_prime&#39;vc.6.0.0" expl="asserted formula" proved="true">
    <proof prover="9"><result status="valid" time="1.30" steps="460011"/></proof>
    </goal>
    <goal name="divisors_contains_prime&#39;vc.6.0.1" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.95" steps="289071"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="divisors_contains_prime&#39;vc.7" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.51" steps="264250"/></proof>
  </goal>
  <goal name="divisors_contains_prime&#39;vc.8" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="divisors_contains_prime&#39;vc.8.0" expl="variant decrease" proved="true">
   <proof prover="9"><result status="valid" time="0.52" steps="264942"/></proof>
   </goal>
   <goal name="divisors_contains_prime&#39;vc.8.1" expl="variant decrease" proved="true">
   <proof prover="9"><result status="valid" time="0.27" steps="245787"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="divisors_contains_prime&#39;vc.9" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="divisors_contains_prime&#39;vc.9.0" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(mem (choose (remove 1 (remove i1 (divisors i1)))) ( (divisors i1)))">
    <goal name="divisors_contains_prime&#39;vc.9.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="(0 &lt;cardinal (remove 1 (remove i1 (divisors i1))) )">
     <goal name="divisors_contains_prime&#39;vc.9.0.0.0" expl="asserted formula" proved="true">
     <proof prover="9"><result status="valid" time="0.62" steps="288716"/></proof>
     </goal>
     <goal name="divisors_contains_prime&#39;vc.9.0.0.1" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="(forall s: set int. forall e . mem e s -&gt; cardinal (remove e s) = cardinal s -1)">
      <goal name="divisors_contains_prime&#39;vc.9.0.0.1.0" expl="asserted formula" proved="true">
      <proof prover="9"><result status="valid" time="0.63" steps="288705"/></proof>
      </goal>
      <goal name="divisors_contains_prime&#39;vc.9.0.0.1.1" expl="asserted formula" proved="true">
      <proof prover="9"><result status="valid" time="4.78" steps="1508614"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="divisors_contains_prime&#39;vc.9.0.1" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(forall s: set int. forall e . mem e s -&gt; cardinal (remove e s) = cardinal s -1)">
     <goal name="divisors_contains_prime&#39;vc.9.0.1.0" expl="asserted formula" proved="true">
     <proof prover="9"><result status="valid" time="0.64" steps="289666"/></proof>
     </goal>
     <goal name="divisors_contains_prime&#39;vc.9.0.1.1" expl="precondition" proved="true">
     <transf name="assert" proved="true" arg1="(mem (choose (remove 1 (remove i1 (divisors i1)))) (to_fset 1 i1))">
      <goal name="divisors_contains_prime&#39;vc.9.0.1.1.0" expl="asserted formula" proved="true">
      <proof prover="9"><result status="valid" time="0.77" steps="289527"/></proof>
      </goal>
      <goal name="divisors_contains_prime&#39;vc.9.0.1.1.1" expl="precondition" proved="true">
      <transf name="assert" proved="true" arg1="(0&lt;= choose (remove 1 (remove i1 (divisors i1))) &lt; i1)">
       <goal name="divisors_contains_prime&#39;vc.9.0.1.1.1.0" expl="asserted formula" proved="true">
       <proof prover="9"><result status="valid" time="0.63" steps="289606"/></proof>
       </goal>
       <goal name="divisors_contains_prime&#39;vc.9.0.1.1.1.1" expl="precondition" proved="true">
       <proof prover="9"><result status="valid" time="1.49" steps="471151"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="divisors_contains_prime&#39;vc.10" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="divisors_contains_prime&#39;vc.10.0" expl="postcondition" proved="true">
   <transf name="exists" proved="true" arg1="i">
    <goal name="divisors_contains_prime&#39;vc.10.0.0" proved="true">
    <proof prover="9"><result status="valid" time="0.63" steps="283287"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="divisors_contains_prime&#39;vc.10.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="divisors_contains_prime&#39;vc.10.1.0" expl="postcondition" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="divisors_contains_prime&#39;vc.10.1.0.0" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="Ensures">
      <goal name="divisors_contains_prime&#39;vc.10.1.0.0.0" expl="postcondition" proved="true">
      <transf name="exists" proved="true" arg1="j">
       <goal name="divisors_contains_prime&#39;vc.10.1.0.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="divisors_contains_prime&#39;vc.10.1.0.0.0.0.0" proved="true">
        <proof prover="9"><result status="valid" time="0.24" steps="245959"/></proof>
        </goal>
        <goal name="divisors_contains_prime&#39;vc.10.1.0.0.0.0.1" proved="true">
        <proof prover="9"><result status="valid" time="0.22" steps="245964"/></proof>
        </goal>
        <goal name="divisors_contains_prime&#39;vc.10.1.0.0.0.0.2" proved="true">
        <proof prover="9"><result status="valid" time="0.61" steps="267209"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_not_co_prime&#39;vc" expl="VC for set_not_co_prime" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_not_co_prime&#39;vc.0" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="4.76" steps="1460768"/></proof>
  </goal>
  <goal name="set_not_co_prime&#39;vc.1" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(not (inter (divisors a) (divisors b) = to_set 1))">
   <goal name="set_not_co_prime&#39;vc.1.0" expl="asserted formula" proved="true">
   <proof prover="9"><result status="valid" time="0.50" steps="262037"/></proof>
   </goal>
   <goal name="set_not_co_prime&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.83" steps="280478"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_not_co_prime_&#39;vc" expl="VC for set_not_co_prime_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_not_co_prime_&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="set_not_co_prime_&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.21"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_co_prime&#39;vc" expl="VC for set_co_prime" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_co_prime&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="set_co_prime&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="co_prime&#39;def">
    <goal name="set_co_prime&#39;vc.0.0.0" expl="VC for set_co_prime" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="set_co_prime&#39;vc.0.0.0.0" expl="VC for set_co_prime" proved="true">
     <proof prover="9"><result status="valid" time="0.31" steps="239137"/></proof>
     </goal>
     <goal name="set_co_prime&#39;vc.0.0.0.1" expl="VC for set_co_prime" proved="true">
     <proof prover="9"><result status="valid" time="0.27" steps="239137"/></proof>
     </goal>
     <goal name="set_co_prime&#39;vc.0.0.0.2" expl="VC for set_co_prime" proved="true">
     <transf name="apply" proved="true" arg1="set_equal">
      <goal name="set_co_prime&#39;vc.0.0.0.2.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="set_co_prime&#39;vc.0.0.0.2.0.0" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="1.46" steps="484881"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="set_co_prime&#39;vc.0.0.0.2.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="set_co_prime&#39;vc.0.0.0.2.1.0" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="0.76" steps="281743"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="co_prime_to_mod&#39;vc" expl="VC for co_prime_to_mod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="co_prime_to_mod&#39;vc.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(mod a b = 0)">
   <goal name="co_prime_to_mod&#39;vc.0.0" expl="true case (postcondition)" proved="true">
   <transf name="assert" proved="true" arg1="(not(co_prime a b))">
    <goal name="co_prime_to_mod&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="co_prime_to_mod&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="case" proved="true" arg1="(a &lt;b)">
      <goal name="co_prime_to_mod&#39;vc.0.0.0.0.0" expl="true case (asserted formula)" proved="true">
      <transf name="assert" proved="true" arg1="(mem a (divisors b))">
       <goal name="co_prime_to_mod&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="2.80"/></proof>
       </goal>
       <goal name="co_prime_to_mod&#39;vc.0.0.0.0.0.1" expl="true case (asserted formula)" proved="true">
       <proof prover="0"><result status="valid" time="2.94"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="co_prime_to_mod&#39;vc.0.0.0.0.1" expl="false case (asserted formula)" proved="true">
      <transf name="assert" proved="true" arg1="(mem b (divisors a))">
       <goal name="co_prime_to_mod&#39;vc.0.0.0.0.1.0" expl="asserted formula" proved="true">
       <proof prover="9"><result status="valid" time="0.80" steps="279301"/></proof>
       </goal>
       <goal name="co_prime_to_mod&#39;vc.0.0.0.0.1.1" expl="false case (asserted formula)" proved="true">
       <transf name="assert" proved="true" arg1="(b&lt;&gt;1)">
        <goal name="co_prime_to_mod&#39;vc.0.0.0.0.1.1.0" expl="asserted formula" proved="true">
        <proof prover="9"><result status="valid" time="0.37" steps="214260"/></proof>
        </goal>
        <goal name="co_prime_to_mod&#39;vc.0.0.0.0.1.1.1" expl="false case (asserted formula)" proved="true">
        <transf name="rewrite" proved="true" arg1="co_prime&#39;def">
         <goal name="co_prime_to_mod&#39;vc.0.0.0.0.1.1.1.0" expl="false case (asserted formula)" proved="true">
         <transf name="assert" proved="true" arg1="(not (inter (divisors a) (divisors b) = to_set 1))">
          <goal name="co_prime_to_mod&#39;vc.0.0.0.0.1.1.1.0.0" expl="asserted formula" proved="true">
          <transf name="assert" proved="true" arg1="(mem b (divisors a))">
           <goal name="co_prime_to_mod&#39;vc.0.0.0.0.1.1.1.0.0.0" expl="asserted formula" proved="true">
           <proof prover="9"><result status="valid" time="0.27" steps="239356"/></proof>
           </goal>
           <goal name="co_prime_to_mod&#39;vc.0.0.0.0.1.1.1.0.0.1" expl="asserted formula" proved="true">
           <transf name="assert" proved="true" arg1="(mem b (inter (divisors a) (divisors b) ))">
            <goal name="co_prime_to_mod&#39;vc.0.0.0.0.1.1.1.0.0.1.0" expl="asserted formula" proved="true">
            <proof prover="9"><result status="valid" time="0.78" steps="282488"/></proof>
            </goal>
            <goal name="co_prime_to_mod&#39;vc.0.0.0.0.1.1.1.0.0.1.1" expl="asserted formula" proved="true">
            <proof prover="9"><result status="valid" time="0.37" steps="217901"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="co_prime_to_mod&#39;vc.0.0.0.0.1.1.1.0.1" expl="false case (asserted formula)" proved="true">
          <proof prover="9"><result status="valid" time="0.23" steps="199553"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="co_prime_to_mod&#39;vc.0.0.1" expl="true case (postcondition)" proved="true">
    <proof prover="9"><result status="valid" time="0.20" steps="195782"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="co_prime_to_mod&#39;vc.0.1" expl="false case (postcondition)" proved="true">
   <proof prover="9"><result status="valid" time="0.36" steps="213326"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="co_prime_to_mod_right&#39;vc" expl="VC for co_prime_to_mod_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="co_prime_to_mod_right&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="4.21" steps="1288741"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inter_div_mod&#39;vc" expl="VC for inter_div_mod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inter_div_mod&#39;vc.0" expl="assertion" proved="true">
  <proof prover="7"><result status="valid" time="0.38" steps="1129013"/></proof>
  </goal>
  <goal name="inter_div_mod&#39;vc.1" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="inter_div_mod&#39;vc.1.0" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="(div b c * c)" arg2="b">
    <goal name="inter_div_mod&#39;vc.1.0.0" expl="assertion" proved="true">
    <proof prover="0"><result status="valid" time="0.31"/></proof>
    </goal>
    <goal name="inter_div_mod&#39;vc.1.0.1" expl="equality hypothesis" proved="true">
    <proof prover="9"><result status="valid" time="4.28" steps="1447412"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="inter_div_mod&#39;vc.1.1" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.29" steps="240530"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="inter_div_mod&#39;vc.2" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_subset">
   <goal name="inter_div_mod&#39;vc.2.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="inter_div_mod&#39;vc.2.0.0" expl="apply premises" proved="true">
    <transf name="assert" proved="true" arg1="(mem e (divisors a))">
     <goal name="inter_div_mod&#39;vc.2.0.0.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="(mod a e = 0)">
      <goal name="inter_div_mod&#39;vc.2.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="a,e,((div a b * div b e) + div (mod a b) e),0">
       <goal name="inter_div_mod&#39;vc.2.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="inter_div_mod&#39;vc.2.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="rewrite" proved="true" arg1="Hinst">
         <goal name="inter_div_mod&#39;vc.2.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="0.32" steps="276343"/></proof>
         </goal>
         <goal name="inter_div_mod&#39;vc.2.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <transf name="assert" proved="true" arg1="(mem e (divisors b))">
          <goal name="inter_div_mod&#39;vc.2.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
          <proof prover="9"><result status="valid" time="0.55" steps="297923"/></proof>
          </goal>
          <goal name="inter_div_mod&#39;vc.2.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
          <proof prover="9"><result status="valid" time="0.71" steps="319912"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="inter_div_mod&#39;vc.2.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.27"/></proof>
         </goal>
         <goal name="inter_div_mod&#39;vc.2.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="inter_div_mod&#39;vc.2.0.0.0.0.0.0.3.0" proved="true">
          <proof prover="9"><result status="valid" time="0.31" steps="276345"/></proof>
          </goal>
          <goal name="inter_div_mod&#39;vc.2.0.0.0.0.0.0.3.1" proved="true">
          <transf name="assert" proved="true" arg1="(mem e (divisors b))">
           <goal name="inter_div_mod&#39;vc.2.0.0.0.0.0.0.3.1.0" expl="asserted formula" proved="true">
           <proof prover="9"><result status="valid" time="0.55" steps="297923"/></proof>
           </goal>
           <goal name="inter_div_mod&#39;vc.2.0.0.0.0.0.0.3.1.1" proved="true">
           <proof prover="9"><result status="valid" time="0.88" steps="319912"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="inter_div_mod&#39;vc.2.0.0.0.1" expl="asserted formula" proved="true">
      <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="a,e,((div a b * div b e) + div (mod a b) e),0">
       <goal name="inter_div_mod&#39;vc.2.0.0.0.1.0" expl="asserted formula" proved="true">
       <transf name="rewrite" proved="true" arg1="divisors&#39;def">
        <goal name="inter_div_mod&#39;vc.2.0.0.0.1.0.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="in_my_filter">
         <goal name="inter_div_mod&#39;vc.2.0.0.0.1.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_mem_to_fset">
          <goal name="inter_div_mod&#39;vc.2.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="inter_div_mod&#39;vc.2.0.0.0.1.0.0.0.0.0" proved="true">
           <proof prover="9"><result status="valid" time="4.46" steps="1451125"/></proof>
           </goal>
           <goal name="inter_div_mod&#39;vc.2.0.0.0.1.0.0.0.0.1" proved="true">
           <proof prover="0"><result status="valid" time="0.30"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="inter_div_mod&#39;vc.2.0.0.0.1.0.0.1" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="inter_div_mod&#39;vc.2.0.0.0.1.0.0.1.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="inter_div_mod&#39;vc.2.0.0.0.1.0.0.1.0.0" proved="true">
           <proof prover="9"><result status="valid" time="4.74" steps="1451125"/></proof>
           </goal>
           <goal name="inter_div_mod&#39;vc.2.0.0.0.1.0.0.1.0.1" proved="true">
           <transf name="assert" proved="true" arg1="(e&lt;=b)">
            <goal name="inter_div_mod&#39;vc.2.0.0.0.1.0.0.1.0.1.0" expl="asserted formula" proved="true">
            <proof prover="9"><result status="valid" time="4.61" steps="1450465"/></proof>
            </goal>
            <goal name="inter_div_mod&#39;vc.2.0.0.0.1.0.0.1.0.1.1" proved="true">
            <proof prover="0"><result status="valid" time="0.30"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="inter_div_mod&#39;vc.2.0.0.0.1.0.0.1.0.2" proved="true">
           <proof prover="9"><result status="valid" time="0.27" steps="240792"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="inter_div_mod&#39;vc.2.0.0.0.1.0.1" expl="rewrite premises" proved="true">
        <proof prover="9"><result status="valid" time="0.27" steps="240794"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="inter_div_mod&#39;vc.2.0.0.1" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="0.61" steps="283340"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="co_prime_mod&#39;vc" expl="VC for co_prime_mod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="co_prime_mod&#39;vc.0" expl="assertion" proved="true">
  <transf name="case" proved="true" arg1="(a= 1)">
   <goal name="co_prime_mod&#39;vc.0.0" expl="true case (assertion)" proved="true">
   <proof prover="9"><result status="valid" time="0.54" steps="232840"/></proof>
   </goal>
   <goal name="co_prime_mod&#39;vc.0.1" expl="false case (assertion)" proved="true">
   <transf name="case" proved="true" arg1="(0 = mod a b)">
    <goal name="co_prime_mod&#39;vc.0.1.0" expl="false case (true case. assertion)" proved="true">
    <transf name="assert" proved="true" arg1="(not (co_prime a b))">
     <goal name="co_prime_mod&#39;vc.0.1.0.0" expl="asserted formula" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="co_prime_mod&#39;vc.0.1.0.0.0" expl="asserted formula" proved="true">
      <transf name="rewrite" proved="true" arg1="co_prime&#39;def">
       <goal name="co_prime_mod&#39;vc.0.1.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="case" proved="true" arg1="(0 &lt; a /\ 0 &lt; b )">
        <goal name="co_prime_mod&#39;vc.0.1.0.0.0.0.0" expl="true case (asserted formula)" proved="true">
        <transf name="assert" proved="true" arg1="(mem b (inter (divisors a) (divisors b)))">
         <goal name="co_prime_mod&#39;vc.0.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="4.71" steps="1506115"/></proof>
         </goal>
         <goal name="co_prime_mod&#39;vc.0.1.0.0.0.0.0.1" expl="true case (asserted formula)" proved="true">
         <proof prover="9"><result status="valid" time="0.42" steps="220056"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="co_prime_mod&#39;vc.0.1.0.0.0.0.1" expl="false case (asserted formula)" proved="true">
        <proof prover="9"><result status="valid" time="0.22" steps="199981"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="co_prime_mod&#39;vc.0.1.0.1" expl="false case (true case. assertion)" proved="true">
     <proof prover="9"><result status="valid" time="0.23" steps="196276"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="co_prime_mod&#39;vc.0.1.1" expl="false case (assertion)" proved="true">
    <proof prover="9"><result status="valid" time="0.36" steps="213844"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="co_prime_mod&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="196248"/></proof>
  </goal>
  <goal name="co_prime_mod&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="196254"/></proof>
  </goal>
  <goal name="co_prime_mod&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.21" steps="196258"/></proof>
  </goal>
  <goal name="co_prime_mod&#39;vc.4" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="co_prime_mod&#39;vc.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="co_prime&#39;def">
    <goal name="co_prime_mod&#39;vc.4.0.0" expl="VC for co_prime_mod" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="co_prime_mod&#39;vc.4.0.0.0" expl="VC for co_prime_mod" proved="true">
     <proof prover="9"><result status="valid" time="0.22" steps="200448"/></proof>
     </goal>
     <goal name="co_prime_mod&#39;vc.4.0.0.1" expl="VC for co_prime_mod" proved="true">
     <proof prover="9"><result status="valid" time="0.37" steps="218126"/></proof>
     </goal>
     <goal name="co_prime_mod&#39;vc.4.0.0.2" expl="VC for co_prime_mod" proved="true">
     <transf name="apply" proved="true" arg1="set_equal">
      <goal name="co_prime_mod&#39;vc.4.0.0.2.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="co_prime_mod&#39;vc.4.0.0.2.0.0" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(to_set 1)" arg2="(inter (divisors a) (divisors b))">
        <goal name="co_prime_mod&#39;vc.4.0.0.2.0.0.0" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="0.64" steps="263475"/></proof>
        </goal>
        <goal name="co_prime_mod&#39;vc.4.0.0.2.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="9"><result status="valid" time="0.68" steps="283199"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="co_prime_mod&#39;vc.4.0.0.2.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="co_prime_mod&#39;vc.4.0.0.2.1.0" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="e" arg2="1">
        <goal name="co_prime_mod&#39;vc.4.0.0.2.1.0.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="(mem 1 (divisors (mod a b)))">
         <goal name="co_prime_mod&#39;vc.4.0.0.2.1.0.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="mem_one_divisors">
          <goal name="co_prime_mod&#39;vc.4.0.0.2.1.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="9"><result status="valid" time="0.29" steps="242316"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="co_prime_mod&#39;vc.4.0.0.2.1.0.0.1" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="0.99" steps="288087"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="co_prime_mod&#39;vc.4.0.0.2.1.0.1" expl="equality hypothesis" proved="true">
        <proof prover="9"><result status="valid" time="0.51" steps="261886"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="co_prime_by_primes&#39;vc" expl="VC for co_prime_by_primes" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="co_prime_by_primes&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.27" steps="238897"/></proof>
  </goal>
  <goal name="co_prime_by_primes&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.61" steps="257754"/></proof>
  </goal>
  <goal name="co_prime_by_primes&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.28" steps="238919"/></proof>
  </goal>
  <goal name="co_prime_by_primes&#39;vc.3" expl="precondition" proved="true">
  <transf name="case" proved="true" arg1="(prime c)">
   <goal name="co_prime_by_primes&#39;vc.3.0" expl="true case (precondition)" proved="true">
   <proof prover="9"><result status="valid" time="0.61" steps="258209"/></proof>
   </goal>
   <goal name="co_prime_by_primes&#39;vc.3.1" expl="false case (precondition)" proved="true">
   <transf name="assert" proved="true" arg1="(exists c&#39;. prime c&#39; /\ 1&lt; c&#39; /\mem c&#39; (divisors c))">
    <goal name="co_prime_by_primes&#39;vc.3.1.0" expl="asserted formula" proved="true">
    <transf name="instantiate" proved="true" arg1="divisors_contains_prime" arg2="c">
     <goal name="co_prime_by_primes&#39;vc.3.1.0.0" expl="asserted formula" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="co_prime_by_primes&#39;vc.3.1.0.0.0" expl="destruct premise" proved="true">
      <transf name="assert" proved="true" arg1="(0&lt;c)">
       <goal name="co_prime_by_primes&#39;vc.3.1.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="9"><result status="valid" time="0.74" steps="278983"/></proof>
       </goal>
       <goal name="co_prime_by_primes&#39;vc.3.1.0.0.0.1" expl="destruct premise" proved="true">
       <proof prover="9"><result status="valid" time="0.40" steps="257903"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="co_prime_by_primes&#39;vc.3.1.0.0.1" expl="asserted formula" proved="true">
      <proof prover="9"><result status="valid" time="0.44" steps="257982"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="co_prime_by_primes&#39;vc.3.1.1" expl="false case (precondition)" proved="true">
    <proof prover="9"><result status="valid" time="4.85" steps="1573522"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="co_prime_by_primes&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.26" steps="238906"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="euclid_lemma_pre&#39;vc" expl="VC for euclid_lemma_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="euclid_lemma_pre&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.53" steps="214312"/></proof>
  </goal>
  <goal name="euclid_lemma_pre&#39;vc.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euclid_lemma_pre&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.37" steps="214395"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euclid_lemma_pre&#39;vc.2" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="co_prime_mod" arg2="b,c">
   <goal name="euclid_lemma_pre&#39;vc.2.0" expl="precondition" proved="true">
   <transf name="exists" proved="true" arg1="(mod b c)">
    <goal name="euclid_lemma_pre&#39;vc.2.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="euclid_lemma_pre&#39;vc.2.0.0.0" proved="true">
     <proof prover="9"><result status="valid" time="0.83" steps="310877"/></proof>
     </goal>
     <goal name="euclid_lemma_pre&#39;vc.2.0.0.1" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="euclid_lemma_pre&#39;vc.2.0.0.1.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="euclid_lemma_pre&#39;vc.2.0.0.1.0.0" proved="true">
       <proof prover="9"><result status="valid" time="0.62" steps="288447"/></proof>
       </goal>
       <goal name="euclid_lemma_pre&#39;vc.2.0.0.1.0.1" proved="true">
       <proof prover="9"><result status="valid" time="0.50" steps="288484"/></proof>
       </goal>
       <goal name="euclid_lemma_pre&#39;vc.2.0.0.1.0.2" proved="true">
       <proof prover="0"><result status="valid" time="0.26"/></proof>
       </goal>
       <goal name="euclid_lemma_pre&#39;vc.2.0.0.1.0.3" proved="true">
       <transf name="assert" proved="true" arg1="(mod (a * b) c = mod (a * mod b c) c)">
        <goal name="euclid_lemma_pre&#39;vc.2.0.0.1.0.3.0" expl="asserted formula" proved="true">
        <proof prover="8"><result status="valid" time="0.98" steps="2893129"/></proof>
        </goal>
        <goal name="euclid_lemma_pre&#39;vc.2.0.0.1.0.3.1" proved="true">
        <transf name="assert" proved="true" arg1="(mod (a * b) c = 0)">
         <goal name="euclid_lemma_pre&#39;vc.2.0.0.1.0.3.1.0" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="0.26" steps="267815"/></proof>
         </goal>
         <goal name="euclid_lemma_pre&#39;vc.2.0.0.1.0.3.1.1" proved="true">
         <proof prover="9"><result status="valid" time="0.29" steps="274950"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euclid_lemma_pre&#39;vc.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euclid_lemma_pre&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.75" steps="314143"/></proof>
   </goal>
   <goal name="euclid_lemma_pre&#39;vc.3.1" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.90" steps="314146"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euclid_lemma_pre&#39;vc.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euclid_lemma_pre&#39;vc.4.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.92" steps="314593"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euclid_lemma_pre&#39;vc.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euclid_lemma_pre&#39;vc.5.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.70" steps="290824"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euclid_lemma_pre&#39;vc.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euclid_lemma_pre&#39;vc.6.0" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(0 = r)">
    <goal name="euclid_lemma_pre&#39;vc.6.0.0" expl="true case (postcondition)" proved="true">
    <transf name="assert" proved="true" arg1="(mem b&#39; (divisors c))">
     <goal name="euclid_lemma_pre&#39;vc.6.0.0.0" expl="asserted formula" proved="true">
     <proof prover="9"><result status="valid" time="0.72" steps="315611"/></proof>
     </goal>
     <goal name="euclid_lemma_pre&#39;vc.6.0.0.1" expl="true case (postcondition)" proved="true">
     <transf name="assert" proved="true" arg1="(not (prime c))">
      <goal name="euclid_lemma_pre&#39;vc.6.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="eliminate_definition" proved="true" >
       <goal name="euclid_lemma_pre&#39;vc.6.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="rewrite" proved="true" arg1="prime&#39;def">
        <goal name="euclid_lemma_pre&#39;vc.6.0.0.1.0.0.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="(exists x. mem x (divisors c )/\ not (mem x (add c (to_set 1))))">
         <goal name="euclid_lemma_pre&#39;vc.6.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="exists" proved="true" arg1="b&#39;">
          <goal name="euclid_lemma_pre&#39;vc.6.0.0.1.0.0.0.0.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="euclid_lemma_pre&#39;vc.6.0.0.1.0.0.0.0.0.0" proved="true">
           <proof prover="9"><result status="valid" time="0.32" steps="269826"/></proof>
           </goal>
           <goal name="euclid_lemma_pre&#39;vc.6.0.0.1.0.0.0.0.0.1" proved="true">
           <transf name="assert" proved="true" arg1="(b&#39; &lt;&gt; c)">
            <goal name="euclid_lemma_pre&#39;vc.6.0.0.1.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
            <proof prover="9"><result status="valid" time="0.67" steps="292269"/></proof>
            </goal>
            <goal name="euclid_lemma_pre&#39;vc.6.0.0.1.0.0.0.0.0.1.1" proved="true">
            <transf name="assert" proved="true" arg1="(b&#39; &lt;&gt; 1)">
             <goal name="euclid_lemma_pre&#39;vc.6.0.0.1.0.0.0.0.0.1.1.0" expl="asserted formula" proved="true">
             <proof prover="9"><result status="valid" time="0.71" steps="317873"/></proof>
             </goal>
             <goal name="euclid_lemma_pre&#39;vc.6.0.0.1.0.0.0.0.0.1.1.1" proved="true">
             <proof prover="9"><result status="valid" time="0.72" steps="319571"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="euclid_lemma_pre&#39;vc.6.0.0.1.0.0.0.1" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="0.73" steps="292906"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="euclid_lemma_pre&#39;vc.6.0.0.1.1" expl="true case (postcondition)" proved="true">
      <proof prover="9"><result status="valid" time="0.31" steps="268764"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="euclid_lemma_pre&#39;vc.6.0.1" expl="false case (postcondition)" proved="true">
    <transf name="assert" proved="true" arg1="(0 &lt;= mod c b&#39;)">
     <goal name="euclid_lemma_pre&#39;vc.6.0.1.0" expl="asserted formula" proved="true">
     <proof prover="9"><result status="valid" time="0.54" steps="291068"/></proof>
     </goal>
     <goal name="euclid_lemma_pre&#39;vc.6.0.1.1" expl="false case (postcondition)" proved="true">
     <proof prover="9"><result status="valid" time="0.69" steps="291084"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="euclid_lemma_pre&#39;vc.6.1" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.67" steps="291073"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euclid_lemma_pre&#39;vc.7" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euclid_lemma_pre&#39;vc.7.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.28"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euclid_lemma_pre&#39;vc.8" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euclid_lemma_pre&#39;vc.8.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.30"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euclid_lemma_pre&#39;vc.9" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euclid_lemma_pre&#39;vc.9.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.30"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euclid_lemma_pre&#39;vc.10" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="Assert1">
   <goal name="euclid_lemma_pre&#39;vc.10.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="Assert">
    <goal name="euclid_lemma_pre&#39;vc.10.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="mul_assoc">
     <goal name="euclid_lemma_pre&#39;vc.10.0.0.0" expl="assertion" proved="true">
     <transf name="assert" proved="true" arg1="(forall a b c. (a*b) - (a*c) = a * (b-c))">
      <goal name="euclid_lemma_pre&#39;vc.10.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="9"><result status="valid" time="0.29" steps="268984"/></proof>
      </goal>
      <goal name="euclid_lemma_pre&#39;vc.10.0.0.0.1" expl="assertion" proved="true">
      <proof prover="9"><result status="valid" time="0.29" steps="269038"/></proof>
      </goal>
     </transf>
     <transf name="assert" proved="true" arg1="(forall a b c. (b*a) - (a*c) = a * (b-c))">
      <goal name="euclid_lemma_pre&#39;vc.10.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="9"><result status="valid" time="0.30" steps="268984"/></proof>
      </goal>
      <goal name="euclid_lemma_pre&#39;vc.10.0.0.0.1" expl="assertion" proved="true">
      <transf name="rewrite" proved="true" arg1="h">
       <goal name="euclid_lemma_pre&#39;vc.10.0.0.0.1.0" expl="assertion" proved="true">
       <proof prover="9"><result status="valid" time="0.31" steps="268986"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euclid_lemma_pre&#39;vc.11" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euclid_lemma_pre&#39;vc.11.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.53" steps="291308"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euclid_lemma_pre&#39;vc.12" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.53" steps="291496"/></proof>
  </goal>
  <goal name="euclid_lemma_pre&#39;vc.13" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euclid_lemma_pre&#39;vc.13.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.29" steps="268949"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euclid_lemma_pre&#39;vc.14" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euclid_lemma_pre&#39;vc.14.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.31" steps="268974"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euclid_lemma_pre&#39;vc.15" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euclid_lemma_pre&#39;vc.15.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.41" steps="268985"/></proof>
   </goal>
   <goal name="euclid_lemma_pre&#39;vc.15.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.31" steps="268980"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euclid_lemma_pre&#39;vc.16" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euclid_lemma_pre&#39;vc.16.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.32" steps="269018"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euclid_lemma_pre&#39;vc.17" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euclid_lemma_pre&#39;vc.17.0" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="in_my_filter">
    <goal name="euclid_lemma_pre&#39;vc.17.0.0" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.73" steps="317202"/></proof>
    </goal>
    <goal name="euclid_lemma_pre&#39;vc.17.0.1" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="euclid_lemma_pre&#39;vc.17.0.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="euclid_lemma_pre&#39;vc.17.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.34" steps="269029"/></proof>
      </goal>
      <goal name="euclid_lemma_pre&#39;vc.17.0.1.0.1" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.55" steps="291926"/></proof>
      </goal>
      <goal name="euclid_lemma_pre&#39;vc.17.0.1.0.2" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.98"/></proof>
      </goal>
      <goal name="euclid_lemma_pre&#39;vc.17.0.1.0.3" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.31" steps="269080"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="euclid_lemma_pre&#39;vc.17.1" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.30" steps="269024"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euclid_lemma_pre&#39;vc.18" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(not (b&#39;=
  min_filter (to_fset 1 c)
  (fun (d:int) -&gt; (1 &lt;= d /\ d &lt;= c) /\ not mod d c = 0 /\ mod (a * d) c = 0)))">
   <goal name="euclid_lemma_pre&#39;vc.18.0" expl="asserted formula" proved="true">
   <transf name="case" proved="true" arg1="(b&#39;
      = min_filter (to_fset 1 c)
        (fun (d:int) -&gt;
          (1 &lt;= d /\ d &lt;= c) /\ not mod d c = 0 /\ mod (a * d) c = 0))">
    <goal name="euclid_lemma_pre&#39;vc.18.0.0" expl="true case (asserted formula)" proved="true">
    <transf name="assert" proved="true" arg1="(b&#39; &lt;= r)">
     <goal name="euclid_lemma_pre&#39;vc.18.0.0.0" expl="asserted formula" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="euclid_lemma_pre&#39;vc.18.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="rewrite" proved="true" arg1="h1">
       <goal name="euclid_lemma_pre&#39;vc.18.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="min_filter&#39;spec1">
        <goal name="euclid_lemma_pre&#39;vc.18.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="0.85" steps="360310"/></proof>
        </goal>
        <goal name="euclid_lemma_pre&#39;vc.18.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="0.67" steps="334708"/></proof>
        </goal>
        <goal name="euclid_lemma_pre&#39;vc.18.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="5.09" steps="1430359"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="euclid_lemma_pre&#39;vc.18.0.0.1" expl="true case (asserted formula)" proved="true">
     <proof prover="9"><result status="valid" time="0.32" steps="269507"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euclid_lemma_pre&#39;vc.18.0.1" expl="false case (asserted formula)" proved="true">
    <proof prover="9"><result status="valid" time="0.92" steps="320518"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="euclid_lemma_pre&#39;vc.18.1" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.95" steps="319533"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="euclid_lemma&#39;vc" expl="VC for euclid_lemma" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="euclid_lemma&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.37" steps="214503"/></proof>
  </goal>
  <goal name="euclid_lemma&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="197003"/></proof>
  </goal>
  <goal name="euclid_lemma&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.23" steps="197009"/></proof>
  </goal>
  <goal name="euclid_lemma&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.21" steps="197015"/></proof>
  </goal>
  <goal name="euclid_lemma&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.20" steps="197019"/></proof>
  </goal>
  <goal name="euclid_lemma&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.21" steps="197022"/></proof>
  </goal>
  <goal name="euclid_lemma&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.23" steps="197023"/></proof>
  </goal>
  <goal name="euclid_lemma&#39;vc.7" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.21" steps="197026"/></proof>
  </goal>
  <goal name="euclid_lemma&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.21" steps="196996"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="divisors_euclid_lemma&#39;vc" expl="VC for divisors_euclid_lemma" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="divisors_euclid_lemma&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.27" steps="239648"/></proof>
  </goal>
  <goal name="divisors_euclid_lemma&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.26" steps="239654"/></proof>
  </goal>
  <goal name="divisors_euclid_lemma&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.26" steps="239660"/></proof>
  </goal>
  <goal name="divisors_euclid_lemma&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.28" steps="239664"/></proof>
  </goal>
  <goal name="divisors_euclid_lemma&#39;vc.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.27"/></proof>
  </goal>
  <goal name="divisors_euclid_lemma&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="4.87" steps="1448576"/></proof>
  </goal>
  <goal name="divisors_euclid_lemma&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.31"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bounded_primes&#39;vc" expl="VC for bounded_primes" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bounded_primes&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.89" steps="312332"/></proof>
  </goal>
  <goal name="bounded_primes&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="5.42" steps="1583251"/></proof>
  </goal>
  <goal name="bounded_primes&#39;vc.2" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="bounded_primes&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="bounded_primes&#39;vc.2.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="in_my_filter">
     <goal name="bounded_primes&#39;vc.2.0.0.0" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="0.85" steps="312213"/></proof>
     </goal>
     <goal name="bounded_primes&#39;vc.2.0.0.1" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="bounded_primes&#39;vc.2.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.27" steps="269562"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="prime_factors&#39;vc" expl="VC for prime_factors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="prime_factors&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="197945"/></proof>
  </goal>
  <goal name="prime_factors&#39;vc.1" expl="precondition" proved="true">
  <transf name="exists" proved="true" arg1="0">
   <goal name="prime_factors&#39;vc.1.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="prime_factors&#39;vc.1.0.0" proved="true">
    <proof prover="9"><result status="valid" time="0.82" steps="309639"/></proof>
    </goal>
    <goal name="prime_factors&#39;vc.1.0.1" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="prime_factors&#39;vc.1.0.1.0" proved="true">
     <proof prover="9"><result status="valid" time="0.84" steps="311160"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prime_factors&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.69" steps="310604"/></proof>
  </goal>
  <goal name="prime_factors&#39;vc.3" expl="postcondition" proved="true">
  <transf name="eliminate_if" proved="true" >
   <goal name="prime_factors&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="prime_factors&#39;vc.3.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="prime_factors&#39;vc.3.0.0.0" expl="postcondition" proved="true">
     <transf name="case" proved="true" arg1="(prime b)">
      <goal name="prime_factors&#39;vc.3.0.0.0.0" expl="true case (postcondition)" proved="true">
      <transf name="case" proved="true" arg1="(b =1)">
       <goal name="prime_factors&#39;vc.3.0.0.0.0.0" expl="true case (postcondition)" proved="true">
       <proof prover="9"><result status="valid" time="0.85" steps="313386"/></proof>
       </goal>
       <goal name="prime_factors&#39;vc.3.0.0.0.0.1" expl="false case (true case. postcondition)" proved="true">
       <transf name="assert" proved="true" arg1="(mem (power b result) (divisors a))">
        <goal name="prime_factors&#39;vc.3.0.0.0.0.1.0" expl="asserted formula" proved="true">
        <proof prover="9"><result status="valid" time="1.43" steps="576682"/></proof>
        </goal>
        <goal name="prime_factors&#39;vc.3.0.0.0.0.1.1" expl="false case (true case. postcondition)" proved="true">
        <transf name="assert" proved="true" arg1="(mem (power b j) (divisors(power b result)))">
         <goal name="prime_factors&#39;vc.3.0.0.0.0.1.1.0" expl="asserted formula" proved="true">
         <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="(power b result),(power b j),(power b (result-j)),0">
          <goal name="prime_factors&#39;vc.3.0.0.0.0.1.1.0.0" expl="asserted formula" proved="true">
          <transf name="assert" proved="true" arg1="(0 = mod (power b result) (power b j))">
           <goal name="prime_factors&#39;vc.3.0.0.0.0.1.1.0.0.0" expl="asserted formula" proved="true">
           <proof prover="9"><result status="valid" time="5.99" steps="2022354"/></proof>
           </goal>
           <goal name="prime_factors&#39;vc.3.0.0.0.0.1.1.0.0.1" expl="asserted formula" proved="true">
           <transf name="split_all_full" proved="true" >
            <goal name="prime_factors&#39;vc.3.0.0.0.0.1.1.0.0.1.0" expl="asserted formula" proved="true">
            <proof prover="9"><result status="valid" time="0.96" steps="362527"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="prime_factors&#39;vc.3.0.0.0.0.1.1.1" expl="false case (true case. postcondition)" proved="true">
         <proof prover="9"><result status="valid" time="0.89" steps="318614"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="prime_factors&#39;vc.3.0.0.0.1" expl="false case (postcondition)" proved="true">
      <proof prover="9"><result status="valid" time="0.68" steps="315575"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prime_factors&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="4.92" steps="1457128"/></proof>
  </goal>
  <goal name="prime_factors&#39;vc.5" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H3">
   <goal name="prime_factors&#39;vc.5.0" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="prime_factors&#39;vc.5.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="prime_factors&#39;vc.5.0.0.0" expl="postcondition" proved="true">
     <transf name="case" proved="true" arg1="(mem (power b (result + 1)) (divisors a))">
      <goal name="prime_factors&#39;vc.5.0.0.0.0" expl="true case (postcondition)" proved="true">
      <transf name="assert" proved="true" arg1="(not (mem (power b (result + 1)) (divisors a)))">
       <goal name="prime_factors&#39;vc.5.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="rewrite" proved="true" arg1="H14" arg2="in" arg3="H3">
        <goal name="prime_factors&#39;vc.5.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="H3">
         <goal name="prime_factors&#39;vc.5.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="4.96" steps="1432659"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="prime_factors&#39;vc.5.0.0.0.0.1" expl="true case (postcondition)" proved="true">
       <proof prover="9"><result status="valid" time="0.35" steps="310798"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="prime_factors&#39;vc.5.0.0.0.1" expl="false case (postcondition)" proved="true">
      <proof prover="9"><result status="valid" time="0.99" steps="357356"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="prime_factors&#39;vc.5.1" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.25" steps="240513"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prime_factors&#39;vc.6" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(mem b (divisors (div a (power b result))))">
   <goal name="prime_factors&#39;vc.6.0" expl="true case (postcondition)" proved="true">
   <transf name="assert" proved="true" arg1="( div a (power b result) = div (div a (power b result)) b * b)">
    <goal name="prime_factors&#39;vc.6.0.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.40"/></proof>
    </goal>
    <goal name="prime_factors&#39;vc.6.0.1" expl="true case (postcondition)" proved="true">
    <transf name="assert" proved="true" arg1="(a = div a (power b result) * (power b result))">
     <goal name="prime_factors&#39;vc.6.0.1.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="(mem (power b result) (divisors a))">
      <goal name="prime_factors&#39;vc.6.0.1.0.0" expl="asserted formula" proved="true">
      <proof prover="9"><result status="valid" time="0.56" steps="291992"/></proof>
      </goal>
      <goal name="prime_factors&#39;vc.6.0.1.0.1" expl="asserted formula" proved="true">
      <proof prover="9"><result status="valid" time="0.84" steps="314691"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="prime_factors&#39;vc.6.0.1.1" expl="true case (postcondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="h1" arg2="in" arg3="h">
      <goal name="prime_factors&#39;vc.6.0.1.1.0" expl="true case (postcondition)" proved="true">
      <transf name="case" proved="true" arg1="(mem b (divisors (div a (power b result))))">
       <goal name="prime_factors&#39;vc.6.0.1.1.0.0" expl="true case (postcondition)" proved="true">
       <transf name="assert" proved="true" arg1="(mem (power b (result +1)) (divisors a))">
        <goal name="prime_factors&#39;vc.6.0.1.1.0.0.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="set_mem_divisors">
         <goal name="prime_factors&#39;vc.6.0.1.1.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="0.30" steps="269433"/></proof>
         </goal>
         <goal name="prime_factors&#39;vc.6.0.1.1.0.0.0.1" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="prime_factors&#39;vc.6.0.1.1.0.0.0.1.0" proved="true">
          <proof prover="9"><result status="valid" time="0.72" steps="314533"/></proof>
          </goal>
          <goal name="prime_factors&#39;vc.6.0.1.1.0.0.0.1.1" proved="true">
          <proof prover="0"><result status="valid" time="0.32"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="prime_factors&#39;vc.6.0.1.1.0.0.0.2" expl="apply premises" proved="true">
         <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="a,(power b (result + 1)),(div (div a (power b result)) b),0">
          <goal name="prime_factors&#39;vc.6.0.1.1.0.0.0.2.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.34"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="prime_factors&#39;vc.6.0.1.1.0.0.1" expl="true case (postcondition)" proved="true">
        <proof prover="9"><result status="valid" time="0.85" steps="315757"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="prime_factors&#39;vc.6.0.1.1.0.1" expl="false case (true case. postcondition)" proved="true">
       <proof prover="9"><result status="valid" time="0.31" steps="269420"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="prime_factors&#39;vc.6.1" expl="false case (postcondition)" proved="true">
   <proof prover="9"><result status="valid" time="0.30" steps="269352"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_prime_factors&#39;vc" expl="VC for set_prime_factors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_prime_factors&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.23"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_prime_factors_null&#39;vc" expl="VC for set_prime_factors_null" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_prime_factors_null&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="199066"/></proof>
  </goal>
  <goal name="set_prime_factors_null&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.25" steps="199069"/></proof>
  </goal>
  <goal name="set_prime_factors_null&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.25" steps="199074"/></proof>
  </goal>
  <goal name="set_prime_factors_null&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.37" steps="217724"/></proof>
  </goal>
  <goal name="set_prime_factors_null&#39;vc.4" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(power b (0 + 1))" arg2="b">
   <goal name="set_prime_factors_null&#39;vc.4.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.21" steps="199118"/></proof>
   </goal>
   <goal name="set_prime_factors_null&#39;vc.4.1" expl="equality hypothesis" proved="true">
   <proof prover="9"><result status="valid" time="0.54" steps="217967"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="set_prime_factors_null&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="199084"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_prime_factors_over&#39;vc" expl="VC for set_prime_factors_over" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_prime_factors_over&#39;vc.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(prime b)">
   <goal name="set_prime_factors_over&#39;vc.0.0" expl="true case (postcondition)" proved="true">
   <transf name="apply" proved="true" arg1="set_prime_factors">
    <goal name="set_prime_factors_over&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.22" steps="199176"/></proof>
    </goal>
    <goal name="set_prime_factors_over&#39;vc.0.0.1" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.21" steps="199176"/></proof>
    </goal>
    <goal name="set_prime_factors_over&#39;vc.0.0.2" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.46" steps="216814"/></proof>
    </goal>
    <goal name="set_prime_factors_over&#39;vc.0.0.3" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.48" steps="217575"/></proof>
    </goal>
    <goal name="set_prime_factors_over&#39;vc.0.0.4" expl="apply premises" proved="true">
    <transf name="case" proved="true" arg1="(mod a b = 0 )">
     <goal name="set_prime_factors_over&#39;vc.0.0.4.0" expl="apply premises (true case)" proved="true">
     <transf name="case" proved="true" arg1="( a  = 0 )">
      <goal name="set_prime_factors_over&#39;vc.0.0.4.0.0" expl="apply premises (true case)" proved="true">
      <proof prover="9"><result status="valid" time="0.50" steps="218381"/></proof>
      </goal>
      <goal name="set_prime_factors_over&#39;vc.0.0.4.0.1" expl="apply premises (false case. true case)" proved="true">
      <proof prover="0"><result status="valid" time="0.22"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="set_prime_factors_over&#39;vc.0.0.4.1" expl="apply premises (false case)" proved="true">
     <proof prover="0"><result status="valid" time="0.32"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="set_prime_factors_over&#39;vc.0.1" expl="false case (postcondition)" proved="true">
   <proof prover="9"><result status="valid" time="0.62" steps="235916"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_prime_factors_not_prime&#39;vc" expl="VC for set_prime_factors_not_prime" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_prime_factors_not_prime&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.49" steps="235999"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_prime_factors_one&#39;vc" expl="VC for set_prime_factors_one" proved="true">
 <proof prover="9"><result status="valid" time="0.53" steps="235998"/></proof>
 </goal>
 <goal name="set_prime_factors_diff&#39;vc" expl="VC for set_prime_factors_diff" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_prime_factors_diff&#39;vc.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(1&lt;b)">
   <goal name="set_prime_factors_diff&#39;vc.0.0" expl="true case (postcondition)" proved="true">
   <transf name="apply" proved="true" arg1="set_prime_factors">
    <goal name="set_prime_factors_diff&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.23" steps="199489"/></proof>
    </goal>
    <goal name="set_prime_factors_diff&#39;vc.0.0.1" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.22" steps="199489"/></proof>
    </goal>
    <goal name="set_prime_factors_diff&#39;vc.0.0.2" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.21" steps="199491"/></proof>
    </goal>
    <goal name="set_prime_factors_diff&#39;vc.0.0.3" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.36" steps="217865"/></proof>
    </goal>
    <goal name="set_prime_factors_diff&#39;vc.0.0.4" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(power b (0 + 1))" arg2="b">
     <goal name="set_prime_factors_diff&#39;vc.0.0.4.0" expl="apply premises" proved="true">
     <transf name="case" proved="true" arg1="(a &lt;b)">
      <goal name="set_prime_factors_diff&#39;vc.0.0.4.0.0" expl="apply premises (true case)" proved="true">
      <proof prover="0"><result status="valid" time="0.23"/></proof>
      </goal>
      <goal name="set_prime_factors_diff&#39;vc.0.0.4.0.1" expl="apply premises (false case)" proved="true">
      <transf name="case" proved="true" arg1="(mod a b = 0)">
       <goal name="set_prime_factors_diff&#39;vc.0.0.4.0.1.0" expl="apply premises (false case. true case)" proved="true">
       <transf name="assert" proved="true" arg1="(mem a (divisors b))">
        <goal name="set_prime_factors_diff&#39;vc.0.0.4.0.1.0.0" expl="asserted formula" proved="true">
        <proof prover="9"><result status="valid" time="4.62" steps="1429208"/></proof>
        </goal>
        <goal name="set_prime_factors_diff&#39;vc.0.0.4.0.1.0.1" expl="apply premises (false case. true case)" proved="true">
        <proof prover="9"><result status="valid" time="0.49" steps="238385"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="set_prime_factors_diff&#39;vc.0.0.4.0.1.1" expl="apply premises (false case)" proved="true">
       <proof prover="9"><result status="valid" time="0.20" steps="199560"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="set_prime_factors_diff&#39;vc.0.0.4.1" expl="equality hypothesis" proved="true">
     <proof prover="9"><result status="valid" time="0.37" steps="217463"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="set_prime_factors_diff&#39;vc.0.1" expl="false case (postcondition)" proved="true">
   <proof prover="9"><result status="valid" time="0.62" steps="236363"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="get_prime_factors&#39;vc" expl="VC for get_prime_factors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_prime_factors&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.27"/></proof>
  </goal>
  <goal name="get_prime_factors&#39;vc.1" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(not mem (power b (i + 1)) (divisors a))">
   <goal name="get_prime_factors&#39;vc.1.0" expl="asserted formula" proved="true">
   <proof prover="9"><result status="valid" time="4.61" steps="1463223"/></proof>
   </goal>
   <goal name="get_prime_factors&#39;vc.1.1" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="get_prime_factors&#39;vc.1.1.0" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(mod a (power b (i + 1)) = 0)">
     <goal name="get_prime_factors&#39;vc.1.1.0.0" expl="true case (postcondition)" proved="true">
     <transf name="assert" proved="true" arg1="( mem (power b (i + 1)) (divisors a))">
      <goal name="get_prime_factors&#39;vc.1.1.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="divisors&#39;spec1">
       <goal name="get_prime_factors&#39;vc.1.1.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="0.29" steps="228163"/></proof>
       </goal>
       <goal name="get_prime_factors&#39;vc.1.1.0.0.0.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="get_prime_factors&#39;vc.1.1.0.0.0.1.0" proved="true">
        <proof prover="9"><result status="valid" time="0.65" steps="271268"/></proof>
        </goal>
        <goal name="get_prime_factors&#39;vc.1.1.0.0.0.1.1" proved="true">
        <proof prover="7"><result status="valid" time="20.85"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="get_prime_factors&#39;vc.1.1.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="0.28" steps="228147"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="get_prime_factors&#39;vc.1.1.0.0.1" expl="true case (postcondition)" proved="true">
      <proof prover="9"><result status="valid" time="0.27" steps="228150"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="get_prime_factors&#39;vc.1.1.0.1" expl="false case (postcondition)" proved="true">
     <proof prover="9"><result status="valid" time="0.31" steps="228149"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="prime_factors_itself&#39;vc" expl="VC for prime_factors_itself" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="prime_factors_itself&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_prime_factors">
   <goal name="prime_factors_itself&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="9"><result status="valid" time="0.37" steps="217513"/></proof>
   </goal>
   <goal name="prime_factors_itself&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="9"><result status="valid" time="0.23" steps="199926"/></proof>
   </goal>
   <goal name="prime_factors_itself&#39;vc.0.2" expl="apply premises" proved="true">
   <proof prover="9"><result status="valid" time="0.21" steps="199928"/></proof>
   </goal>
   <goal name="prime_factors_itself&#39;vc.0.3" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.21"/></proof>
   </goal>
   <goal name="prime_factors_itself&#39;vc.0.4" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.22"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="prime_factors_one&#39;vc" expl="VC for prime_factors_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="prime_factors_one&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.48" steps="236751"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="prime_factors_up&#39;vc" expl="VC for prime_factors_up" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="prime_factors_up&#39;vc.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(prime b)">
   <goal name="prime_factors_up&#39;vc.0.0" expl="true case (postcondition)" proved="true">
   <transf name="assert" proved="true" arg1="(not (mem (power b 1)  (divisors a)))">
    <goal name="prime_factors_up&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <proof prover="9"><result status="valid" time="0.62" steps="283327"/></proof>
    </goal>
    <goal name="prime_factors_up&#39;vc.0.0.1" expl="true case (postcondition)" proved="true">
    <proof prover="9"><result status="valid" time="0.64" steps="239269"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="prime_factors_up&#39;vc.0.1" expl="false case (postcondition)" proved="true">
   <proof prover="9"><result status="valid" time="0.46" steps="236851"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prime_factors_up&#39;vc.1" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="ind_iproduct_trans" arg2="(fun (i:int) -&gt; power i (prime_factors a i)),0,(a+1),(b+1)">
   <goal name="prime_factors_up&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Hinst">
    <goal name="prime_factors_up&#39;vc.1.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="mult_one">
     <goal name="prime_factors_up&#39;vc.1.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
     <goal name="prime_factors_up&#39;vc.1.0.0.1" expl="rewrite premises" proved="true">
     <transf name="apply" proved="true" arg1="ind_iproduct_one">
      <goal name="prime_factors_up&#39;vc.1.0.0.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="prime_factors_up&#39;vc.1.0.0.1.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="prime_factors_up&#39;vc.1.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="0.66" steps="244801"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="prime_factors_up&#39;vc.1.0.1" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="0.34" steps="218074"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="prime_factors_up_set&#39;vc" expl="VC for prime_factors_up_set" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="prime_factors_up_set&#39;vc.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(a=b)">
   <goal name="prime_factors_up_set&#39;vc.0.0" expl="true case (postcondition)" proved="true">
   <transf name="rewrite" proved="true" arg1="h">
    <goal name="prime_factors_up_set&#39;vc.0.0.0" expl="true case (postcondition)" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="prime_factors_up_set&#39;vc.0.1" expl="false case (postcondition)" proved="true">
   <transf name="instantiate" proved="true" arg1="prime_factors_up" arg2="a">
    <goal name="prime_factors_up_set&#39;vc.0.1.0" expl="false case (postcondition)" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="prime_factors_up_set&#39;vc.0.1.0.0" expl="false case (postcondition)" proved="true">
     <transf name="apply" proved="true" arg1="Hinst">
      <goal name="prime_factors_up_set&#39;vc.0.1.0.0.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.23" steps="229476"/></proof>
      </goal>
      <goal name="prime_factors_up_set&#39;vc.0.1.0.0.1" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.58" steps="248340"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="prime_factors_mult&#39;vc" expl="VC for prime_factors_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="prime_factors_mult&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.21" steps="200842"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.27" steps="243538"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.38" steps="243541"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.28" steps="243546"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.29" steps="243548"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.25" steps="243623"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.27" steps="243862"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.7" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.28" steps="243865"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.8" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.31" steps="243870"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.9" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.28" steps="243872"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.10" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.27" steps="243868"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.11" expl="precondition" proved="true">
  <transf name="case" proved="true" arg1="(prime_factors a b = 0)">
   <goal name="prime_factors_mult&#39;vc.11.0" expl="true case (precondition)" proved="true">
   <transf name="case" proved="true" arg1="(prime_factors a&#39; b = 0)">
    <goal name="prime_factors_mult&#39;vc.11.0.0" expl="true case (precondition)" proved="true">
    <proof prover="9"><result status="valid" time="0.49" steps="264951"/></proof>
    </goal>
    <goal name="prime_factors_mult&#39;vc.11.0.1" expl="false case (true case. precondition)" proved="true">
    <proof prover="9"><result status="valid" time="0.63" steps="264806"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="prime_factors_mult&#39;vc.11.1" expl="false case (precondition)" proved="true">
   <proof prover="9"><result status="valid" time="0.71" steps="290646"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prime_factors_mult&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.46" steps="2517467"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.13" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.40" steps="244233"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.14" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="prime_factors_mult&#39;vc.14.0" expl="postcondition" proved="true">
   <proof prover="12"><result status="valid" time="0.22" steps="8408"/></proof>
   </goal>
   <goal name="prime_factors_mult&#39;vc.14.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.27"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prime_factors_mult&#39;vc.15" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.27" steps="244263"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.16" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="4.05" steps="1489489"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.17" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="4.62" steps="1479697"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.18" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="prime_factors_mult&#39;vc.18.0" expl="postcondition" proved="true">
   <proof prover="12"><result status="valid" time="0.26" steps="10538"/></proof>
   </goal>
   <goal name="prime_factors_mult&#39;vc.18.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.24"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prime_factors_mult&#39;vc.19" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="prime_factors_mult&#39;vc.19.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.30" steps="244537"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prime_factors_mult&#39;vc.20" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.39" steps="244548"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.21" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.39" steps="244801"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.22" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.30"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.23" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.26" steps="244830"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.24" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.27" steps="245083"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.25" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="prime_factors_mult&#39;vc.25.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.68" steps="291057"/></proof>
   </goal>
   <goal name="prime_factors_mult&#39;vc.25.1" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="4.51" steps="1544051"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prime_factors_mult&#39;vc.26" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="prime_factors_mult&#39;vc.26.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.29"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prime_factors_mult&#39;vc.27" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="add_zero">
   <goal name="prime_factors_mult&#39;vc.27.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.25"/></proof>
   </goal>
   <goal name="prime_factors_mult&#39;vc.27.1" expl="rewrite premises" proved="true">
   <proof prover="9"><result status="valid" time="0.27" steps="245141"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prime_factors_mult&#39;vc.28" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.28" steps="245198"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.29" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.28" steps="245204"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.30" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.29" steps="245443"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.31" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.79" steps="292280"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.32" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.27" steps="245758"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.33" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="power_sum" arg2="in" arg3="H">
   <goal name="prime_factors_mult&#39;vc.33.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="power_sum" arg2="in" arg3="H">
    <goal name="prime_factors_mult&#39;vc.33.0.0" expl="assertion" proved="true">
    <proof prover="0"><result status="valid" time="0.25"/></proof>
    </goal>
    <goal name="prime_factors_mult&#39;vc.33.0.1" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="0.30" steps="245818"/></proof>
    </goal>
    <goal name="prime_factors_mult&#39;vc.33.0.2" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="0.29" steps="245818"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="prime_factors_mult&#39;vc.33.1" expl="rewrite premises" proved="true">
   <proof prover="9"><result status="valid" time="0.58" steps="266790"/></proof>
   </goal>
   <goal name="prime_factors_mult&#39;vc.33.2" expl="rewrite premises" proved="true">
   <proof prover="9"><result status="valid" time="0.28" steps="245768"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prime_factors_mult&#39;vc.34" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="prime_factors_mult&#39;vc.34.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.34"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prime_factors_mult&#39;vc.35" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.48" steps="266934"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.36" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.37"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.37" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="prime_factors_mult&#39;vc.37.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.40" steps="245860"/></proof>
   </goal>
   <goal name="prime_factors_mult&#39;vc.37.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.27" steps="245855"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prime_factors_mult&#39;vc.38" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="prime_factors_mult&#39;vc.38.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.51"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prime_factors_mult&#39;vc.39" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="5.18" steps="1581560"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.40" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.28" steps="245772"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.41" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.27" steps="246026"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.42" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.34"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.43" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.30" steps="246271"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.44" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.32" steps="246276"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.45" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="power_sum">
   <goal name="prime_factors_mult&#39;vc.45.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.04"/></proof>
   </goal>
   <goal name="prime_factors_mult&#39;vc.45.1" expl="rewrite premises" proved="true">
   <proof prover="9"><result status="valid" time="0.28" steps="246280"/></proof>
   </goal>
   <goal name="prime_factors_mult&#39;vc.45.2" expl="rewrite premises" proved="true">
   <proof prover="9"><result status="valid" time="0.27" steps="246280"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prime_factors_mult&#39;vc.46" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.27" steps="246324"/></proof>
  </goal>
  <goal name="prime_factors_mult&#39;vc.47" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.35"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="prime_factors_mult_gen&#39;vc" expl="VC for prime_factors_mult_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="prime_factors_mult_gen&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="prime_factors_mult_gen&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="prime_factors_mult_gen&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.28"/></proof>
  </goal>
  <goal name="prime_factors_mult_gen&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.25" steps="227952"/></proof>
  </goal>
  <goal name="prime_factors_mult_gen&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.38" steps="227996"/></proof>
  </goal>
  <goal name="prime_factors_mult_gen&#39;vc.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="prime_factors_mult_gen&#39;vc.6" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="prime_factors_mult_gen&#39;vc.6.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="prime_factors_mult">
    <goal name="prime_factors_mult_gen&#39;vc.6.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="power_sum">
     <goal name="prime_factors_mult_gen&#39;vc.6.0.0.0" expl="precondition" proved="true">
     <proof prover="9"><result status="valid" time="0.25" steps="228073"/></proof>
     </goal>
     <goal name="prime_factors_mult_gen&#39;vc.6.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="9"><result status="valid" time="4.51" steps="1346448"/></proof>
     </goal>
     <goal name="prime_factors_mult_gen&#39;vc.6.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="9"><result status="valid" time="4.41" steps="1346509"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="prime_factors_mult_gen&#39;vc.6.0.1" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="0.25" steps="228075"/></proof>
    </goal>
    <goal name="prime_factors_mult_gen&#39;vc.6.0.2" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="0.26" steps="228075"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prime_factors_mult_gen&#39;vc.7" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="Ensures">
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="proper_divisors&#39;vc" expl="VC for proper_divisors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="proper_divisors&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.35" steps="219000"/></proof>
  </goal>
  <goal name="proper_divisors&#39;vc.1" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(forall i:int. not (mem i result))">
   <goal name="proper_divisors&#39;vc.1.0" expl="true case (postcondition)" proved="true">
   <transf name="assert" proved="true" arg1="(divisors a = add a (to_set 1))">
    <goal name="proper_divisors&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="set_equal">
     <goal name="proper_divisors&#39;vc.1.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="proper_divisors&#39;vc.1.0.0.0.0" expl="apply premises" proved="true">
      <transf name="case" proved="true" arg1="(e=1)">
       <goal name="proper_divisors&#39;vc.1.0.0.0.0.0" expl="apply premises (true case)" proved="true">
       <transf name="assert" proved="true" arg1="(mem e (to_set 1))">
        <goal name="proper_divisors&#39;vc.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="9"><result status="valid" time="0.48" steps="266350"/></proof>
        </goal>
        <goal name="proper_divisors&#39;vc.1.0.0.0.0.0.1" expl="apply premises (true case)" proved="true">
        <proof prover="9"><result status="valid" time="0.47" steps="266369"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="proper_divisors&#39;vc.1.0.0.0.0.1" expl="apply premises (false case)" proved="true">
       <transf name="case" proved="true" arg1="(e=a)">
        <goal name="proper_divisors&#39;vc.1.0.0.0.0.1.0" expl="apply premises (false case. true case)" proved="true">
        <proof prover="9"><result status="valid" time="0.50" steps="266759"/></proof>
        </goal>
        <goal name="proper_divisors&#39;vc.1.0.0.0.0.1.1" expl="apply premises (false case)" proved="true">
        <transf name="assert" proved="true" arg1="(mem e result)">
         <goal name="proper_divisors&#39;vc.1.0.0.0.0.1.1.0" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="0.85" steps="289633"/></proof>
         </goal>
         <goal name="proper_divisors&#39;vc.1.0.0.0.0.1.1.1" expl="apply premises (false case)" proved="true">
         <proof prover="9"><result status="valid" time="0.50" steps="266369"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="proper_divisors&#39;vc.1.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="proper_divisors&#39;vc.1.0.0.1.0" expl="apply premises" proved="true">
      <transf name="case" proved="true" arg1="(e=a)">
       <goal name="proper_divisors&#39;vc.1.0.0.1.0.0" expl="apply premises (true case)" proved="true">
       <proof prover="9"><result status="valid" time="0.63" steps="287801"/></proof>
       </goal>
       <goal name="proper_divisors&#39;vc.1.0.0.1.0.1" expl="apply premises (false case)" proved="true">
       <proof prover="9"><result status="valid" time="0.88" steps="290219"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="proper_divisors&#39;vc.1.0.1" expl="true case (postcondition)" proved="true">
    <transf name="assert" proved="true" arg1="(not (prime a))">
     <goal name="proper_divisors&#39;vc.1.0.1.0" expl="asserted formula" proved="true">
     <proof prover="9"><result status="valid" time="0.29" steps="244480"/></proof>
     </goal>
     <goal name="proper_divisors&#39;vc.1.0.1.1" expl="true case (postcondition)" proved="true">
     <proof prover="9"><result status="valid" time="0.75" steps="286348"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="proper_divisors&#39;vc.1.1" expl="false case (postcondition)" proved="true">
   <proof prover="9"><result status="valid" time="0.46" steps="265242"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="proper_divisors&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.82" steps="289393"/></proof>
  </goal>
  <goal name="proper_divisors&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="4.88" steps="1483005"/></proof>
  </goal>
  <goal name="proper_divisors&#39;vc.4" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="proper_divisors&#39;vc.4.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(mem i (divisors a))">
    <goal name="proper_divisors&#39;vc.4.0.0" expl="asserted formula" proved="true">
    <proof prover="9"><result status="valid" time="0.88" steps="325506"/></proof>
    </goal>
    <goal name="proper_divisors&#39;vc.4.0.1" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="1.46" steps="470669"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="proper_divisors&#39;vc.5" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(mem (div a i) (divisors a))">
   <goal name="proper_divisors&#39;vc.5.0" expl="asserted formula" proved="true">
   <transf name="apply" proved="true" arg1="set_mem_divisors">
    <goal name="proper_divisors&#39;vc.5.0.0" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.50" steps="265514"/></proof>
    </goal>
    <goal name="proper_divisors&#39;vc.5.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.33"/></proof>
    </goal>
    <goal name="proper_divisors&#39;vc.5.0.2" expl="apply premises" proved="true">
    <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="a,(div a i),i,0">
     <goal name="proper_divisors&#39;vc.5.0.2.0" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="0.21" steps="1058760"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="proper_divisors&#39;vc.5.1" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(div a i = 1)">
    <goal name="proper_divisors&#39;vc.5.1.0" expl="true case (postcondition)" proved="true">
    <proof prover="7"><result status="valid" time="0.23" steps="1062801"/></proof>
    </goal>
    <goal name="proper_divisors&#39;vc.5.1.1" expl="false case (postcondition)" proved="true">
    <proof prover="0"><result status="valid" time="0.23"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="proper_divisors&#39;vc.6" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="proper_divisors&#39;vc.6.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="strict_subset_divisors">
    <goal name="proper_divisors&#39;vc.6.0.0" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.70" steps="303775"/></proof>
    </goal>
    <goal name="proper_divisors&#39;vc.6.0.1" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.68" steps="304745"/></proof>
    </goal>
    <goal name="proper_divisors&#39;vc.6.0.2" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.68" steps="304184"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="prime_divisors&#39;vc" expl="VC for prime_divisors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="prime_divisors&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="228069"/></proof>
  </goal>
  <goal name="prime_divisors&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.23" steps="228071"/></proof>
  </goal>
  <goal name="prime_divisors&#39;vc.2" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="divisors_contains_prime" arg2="a">
   <goal name="prime_divisors&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="Hinst">
    <goal name="prime_divisors&#39;vc.2.0.0" expl="destruct premise" proved="true">
    <proof prover="9"><result status="valid" time="0.30" steps="272028"/></proof>
    </goal>
    <goal name="prime_divisors&#39;vc.2.0.1" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="prime_divisors&#39;vc.2.0.1.0" expl="postcondition" proved="true">
     <transf name="exists" proved="true" arg1="j">
      <goal name="prime_divisors&#39;vc.2.0.1.0.0" proved="true">
      <transf name="eliminate_definition" proved="true" >
       <goal name="prime_divisors&#39;vc.2.0.1.0.0.0" proved="true">
       <transf name="rewrite" proved="true" arg1="result&#39;def">
        <goal name="prime_divisors&#39;vc.2.0.1.0.0.0.0" proved="true">
        <transf name="apply" proved="true" arg1="in_my_filter">
         <goal name="prime_divisors&#39;vc.2.0.1.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="0.88" steps="317586"/></proof>
         </goal>
         <goal name="prime_divisors&#39;vc.2.0.1.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="0.72" steps="295601"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prime_divisors&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.88" steps="316579"/></proof>
  </goal>
  <goal name="prime_divisors&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.71" steps="315614"/></proof>
  </goal>
  <goal name="prime_divisors&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="4.81" steps="1581813"/></proof>
  </goal>
  <goal name="prime_divisors&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="4.74" steps="1587323"/></proof>
  </goal>
  <goal name="prime_divisors&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="5.59" steps="1617895"/></proof>
  </goal>
  <goal name="prime_divisors&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.88" steps="317086"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="unicity_div_rev_&#39;vc" expl="VC for unicity_div_rev_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="unicity_div_rev_&#39;vc.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="unicity_div_rev" arg2="i,q,j">
   <goal name="unicity_div_rev_&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="Hinst">
    <goal name="unicity_div_rev_&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.29" steps="245663"/></proof>
    </goal>
    <goal name="unicity_div_rev_&#39;vc.0.0.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_mem_divisors">
     <goal name="unicity_div_rev_&#39;vc.0.0.1.0" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="0.27" steps="245663"/></proof>
     </goal>
     <goal name="unicity_div_rev_&#39;vc.0.0.1.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="(i = q*j)">
      <goal name="unicity_div_rev_&#39;vc.0.0.1.1.0" expl="asserted formula" proved="true">
      <proof prover="9"><result status="valid" time="0.80" steps="287000"/></proof>
      </goal>
      <goal name="unicity_div_rev_&#39;vc.0.0.1.1.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.24"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="unicity_div_rev_&#39;vc.0.0.1.2" expl="apply premises" proved="true">
     <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="i,q,j,0">
      <goal name="unicity_div_rev_&#39;vc.0.0.1.2.0" expl="apply premises" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="unicity_div_rev_&#39;vc.0.0.1.2.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="Hinst">
        <goal name="unicity_div_rev_&#39;vc.0.0.1.2.0.0.0" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="0.32" steps="283069"/></proof>
        </goal>
        <goal name="unicity_div_rev_&#39;vc.0.0.1.2.0.0.1" expl="rewrite premises" proved="true">
        <transf name="assert" proved="true" arg1="(i = q*j)">
         <goal name="unicity_div_rev_&#39;vc.0.0.1.2.0.0.1.0" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="0.90" steps="326236"/></proof>
         </goal>
         <goal name="unicity_div_rev_&#39;vc.0.0.1.2.0.0.1.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.28"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="unicity_div_rev_&#39;vc.0.0.1.2.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="9"><result status="valid" time="0.74" steps="326222"/></proof>
        </goal>
        <goal name="unicity_div_rev_&#39;vc.0.0.1.2.0.0.3" expl="rewrite premises" proved="true">
        <transf name="assert" proved="true" arg1="(i = q*j)">
         <goal name="unicity_div_rev_&#39;vc.0.0.1.2.0.0.3.0" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="0.88" steps="326236"/></proof>
         </goal>
         <goal name="unicity_div_rev_&#39;vc.0.0.1.2.0.0.3.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.27"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="unicity_div_rev_&#39;vc.0.0.2" expl="apply premises" proved="true">
    <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="i,q,j,0">
     <goal name="unicity_div_rev_&#39;vc.0.0.2.0" expl="apply premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="unicity_div_rev_&#39;vc.0.0.2.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="Hinst1">
       <goal name="unicity_div_rev_&#39;vc.0.0.2.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="(i = q*j)">
        <goal name="unicity_div_rev_&#39;vc.0.0.2.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="9"><result status="valid" time="0.91" steps="326236"/></proof>
        </goal>
        <goal name="unicity_div_rev_&#39;vc.0.0.2.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.27"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="unicity_div_rev_&#39;vc.0.0.2.0.0.1" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="0.84" steps="326222"/></proof>
       </goal>
       <goal name="unicity_div_rev_&#39;vc.0.0.2.0.0.2" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="(i = q*j)">
        <goal name="unicity_div_rev_&#39;vc.0.0.2.0.0.2.0" expl="asserted formula" proved="true">
        <proof prover="9"><result status="valid" time="0.84" steps="326236"/></proof>
        </goal>
        <goal name="unicity_div_rev_&#39;vc.0.0.2.0.0.2.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.28"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="factors_prod&#39;vc" expl="VC for factors_prod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="factors_prod&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.24" steps="203582"/></proof>
  </goal>
  <goal name="factors_prod&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.48" steps="248309"/></proof>
  </goal>
  <goal name="factors_prod&#39;vc.2" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="factors_prod&#39;vc.2.0" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(prime_factors a e&#39;)" arg2="0">
    <goal name="factors_prod&#39;vc.2.0.0" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.39" steps="248775"/></proof>
    </goal>
    <goal name="factors_prod&#39;vc.2.0.1" expl="equality hypothesis" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="factors_prod&#39;vc.2.0.1.0" expl="equality hypothesis" proved="true">
     <transf name="case" proved="true" arg1="(1 &lt; e&#39; /\ prime e&#39;)">
      <goal name="factors_prod&#39;vc.2.0.1.0.0" expl="true case (equality hypothesis)" proved="true">
      <transf name="apply" proved="true" arg1="set_prime_factors">
       <goal name="factors_prod&#39;vc.2.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="0.24" steps="231501"/></proof>
       </goal>
       <goal name="factors_prod&#39;vc.2.0.1.0.0.1" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="0.22" steps="231501"/></proof>
       </goal>
       <goal name="factors_prod&#39;vc.2.0.1.0.0.2" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="0.22" steps="231503"/></proof>
       </goal>
       <goal name="factors_prod&#39;vc.2.0.1.0.0.3" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="0.55" steps="250527"/></proof>
       </goal>
       <goal name="factors_prod&#39;vc.2.0.1.0.0.4" expl="apply premises" proved="true">
       <transf name="case" proved="true" arg1="(mod a e&#39; = 0 )">
        <goal name="factors_prod&#39;vc.2.0.1.0.0.4.0" expl="apply premises (true case)" proved="true">
        <transf name="assert" proved="true" arg1="(mem a (divisors e&#39;))">
         <goal name="factors_prod&#39;vc.2.0.1.0.0.4.0.0" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="5.16" steps="1516684"/></proof>
         </goal>
         <goal name="factors_prod&#39;vc.2.0.1.0.0.4.0.1" expl="apply premises (true case)" proved="true">
         <proof prover="0"><result status="valid" time="2.15"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="factors_prod&#39;vc.2.0.1.0.0.4.1" expl="apply premises (false case)" proved="true">
        <proof prover="0"><result status="valid" time="2.38"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="factors_prod&#39;vc.2.0.1.0.1" expl="false case (equality hypothesis)" proved="true">
      <proof prover="9"><result status="valid" time="0.69" steps="274370"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="factors_prod&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.54" steps="241177"/></proof>
  </goal>
  <goal name="factors_prod&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.24" steps="203603"/></proof>
  </goal>
  <goal name="factors_prod&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="4.83" steps="1439880"/></proof>
  </goal>
  <goal name="factors_prod&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="4.81" steps="1439157"/></proof>
  </goal>
  <goal name="factors_prod&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="4.80" steps="1454955"/></proof>
  </goal>
  <goal name="factors_prod&#39;vc.8" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="4.89" steps="1464963"/></proof>
  </goal>
  <goal name="factors_prod&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.65" steps="294207"/></proof>
  </goal>
  <goal name="factors_prod&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.72" steps="294354"/></proof>
  </goal>
  <goal name="factors_prod&#39;vc.11" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="a,c,div_c,0">
   <goal name="factors_prod&#39;vc.11.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="unicity_div_rev" arg2="a,c,div_c">
    <goal name="factors_prod&#39;vc.11.0.0" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="0.82" steps="296999"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="factors_prod&#39;vc.12" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_mem_divisors">
   <goal name="factors_prod&#39;vc.12.0" expl="apply premises" proved="true">
   <proof prover="9"><result status="valid" time="0.29" steps="252051"/></proof>
   </goal>
   <goal name="factors_prod&#39;vc.12.1" expl="apply premises" proved="true">
   <proof prover="9"><result status="valid" time="0.61" steps="294619"/></proof>
   </goal>
   <goal name="factors_prod&#39;vc.12.2" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.26"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="factors_prod&#39;vc.13" expl="variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.79" steps="296015"/></proof>
  </goal>
  <goal name="factors_prod&#39;vc.14" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="4.48" steps="1517795"/></proof>
  </goal>
  <goal name="factors_prod&#39;vc.15" expl="variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.87" steps="317460"/></proof>
  </goal>
  <goal name="factors_prod&#39;vc.16" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.89" steps="316649"/></proof>
  </goal>
  <goal name="factors_prod&#39;vc.17" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="5.38" steps="1536191"/></proof>
  </goal>
  <goal name="factors_prod&#39;vc.18" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.89" steps="316872"/></proof>
  </goal>
  <goal name="factors_prod&#39;vc.19" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="factors_prod&#39;vc.19.0" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="mult_eq">
    <goal name="factors_prod&#39;vc.19.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="Ensures2">
     <goal name="factors_prod&#39;vc.19.0.0.0" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="5.46" steps="1558061"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="factors_prod&#39;vc.19.0.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="Ensures1">
     <goal name="factors_prod&#39;vc.19.0.1.0" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="0.86" steps="318130"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="factors_prod&#39;vc.19.1" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="(c * div_c)" arg2="a" arg3="in" arg4="Ensures">
    <goal name="factors_prod&#39;vc.19.1.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures">
     <goal name="factors_prod&#39;vc.19.1.0.0" expl="assertion" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="factors_prod&#39;vc.19.1.1" expl="equality hypothesis" proved="true">
    <proof prover="9"><result status="valid" time="0.32" steps="270130"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="factors_prod&#39;vc.19.2" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="(c * div_c)" arg2="a" arg3="in" arg4="Ensures">
    <goal name="factors_prod&#39;vc.19.2.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures">
     <goal name="factors_prod&#39;vc.19.2.0.0" expl="assertion" proved="true">
     <transf name="replace" proved="true" arg1="a" arg2="(c*div_c)">
      <goal name="factors_prod&#39;vc.19.2.0.0.0" expl="assertion" proved="true">
      <transf name="apply" proved="true" arg1="mult_eq">
       <goal name="factors_prod&#39;vc.19.2.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="goal_comm">
        <goal name="factors_prod&#39;vc.19.2.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="Ensures2">
         <goal name="factors_prod&#39;vc.19.2.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="5.49" steps="1558307"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="factors_prod&#39;vc.19.2.0.0.0.1" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="goal_comm">
        <goal name="factors_prod&#39;vc.19.2.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="Ensures1">
         <goal name="factors_prod&#39;vc.19.2.0.0.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="0.90" steps="318162"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="factors_prod&#39;vc.19.2.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="9"><result status="valid" time="0.32" steps="270130"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="factors_prod&#39;vc.19.2.1" expl="equality hypothesis" proved="true">
    <proof prover="9"><result status="valid" time="0.45" steps="270130"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="factors_prod&#39;vc.20" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H1">
   <goal name="factors_prod&#39;vc.20.0" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(a=1)">
    <goal name="factors_prod&#39;vc.20.0.0" expl="true case (postcondition)" proved="true">
    <transf name="rewrite" proved="true" arg1="ind_iproduct_one">
     <goal name="factors_prod&#39;vc.20.0.0.0" expl="true case (postcondition)" proved="true">
     <proof prover="9"><result status="valid" time="0.27" steps="230341"/></proof>
     </goal>
     <goal name="factors_prod&#39;vc.20.0.0.1" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="factors_prod&#39;vc.20.0.0.1.0" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="factors_prod&#39;vc.20.0.0.1.0.0" expl="rewrite premises" proved="true">
       <proof prover="9"><result status="valid" time="0.96" steps="277271"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="factors_prod&#39;vc.20.0.1" expl="false case (postcondition)" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="factors_prod&#39;vc.20.0.1.0" expl="false case (postcondition)" proved="true">
     <transf name="replace" proved="true" arg1="(ind_iproduct (fun (i:int) -&gt; power i (prime_factors a i)) 0 (x + 1))" arg2="(ind_iproduct (fun (i:int) -&gt; power i (prime_factors a i)) 0 (a + 1))">
      <goal name="factors_prod&#39;vc.20.0.1.0.0" expl="false case (postcondition)" proved="true">
      <transf name="replace" proved="true" arg1="(fun (i:int) -&gt; power i (prime_factors a i))" arg2="o">
       <goal name="factors_prod&#39;vc.20.0.1.0.0.0" expl="false case (postcondition)" proved="true">
       <proof prover="9"><result status="valid" time="0.93" steps="275532"/></proof>
       </goal>
       <goal name="factors_prod&#39;vc.20.0.1.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="9"><result status="valid" time="0.53" steps="248509"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="factors_prod&#39;vc.20.0.1.0.1" expl="equality hypothesis" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="factors_prod&#39;vc.20.0.1.0.1.0" expl="equality hypothesis" proved="true">
       <transf name="case" proved="true" arg1="(a=x)">
        <goal name="factors_prod&#39;vc.20.0.1.0.1.0.0" expl="true case (equality hypothesis)" proved="true">
        <transf name="rewrite" proved="true" arg1="h">
         <goal name="factors_prod&#39;vc.20.0.1.0.1.0.0.0" expl="true case (equality hypothesis)" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="factors_prod&#39;vc.20.0.1.0.1.0.1" expl="false case (equality hypothesis)" proved="true">
        <transf name="apply" proved="true" arg1="prime_factors_up">
         <goal name="factors_prod&#39;vc.20.0.1.0.1.0.1.0" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="0.30" steps="264905"/></proof>
         </goal>
         <goal name="factors_prod&#39;vc.20.0.1.0.1.0.1.1" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="0.65" steps="284351"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="factors_prod&#39;vc.20.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="factors_prod&#39;vc.20.1.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="factors_prod&#39;vc.20.1.0.0" expl="postcondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="factors_prod&#39;vc.20.1.0.0.0" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="(ind_iproduct (fun (i:int) -&gt; power i (prime_factors a i)) 0 (x + 1))" arg2="(ind_iproduct (fun (i:int) -&gt; power i (prime_factors a i)) 0 (a + 1))">
       <goal name="factors_prod&#39;vc.20.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="H1">
        <goal name="factors_prod&#39;vc.20.1.0.0.0.0.0" expl="postcondition" proved="true">
        <proof prover="9"><result status="valid" time="0.37" steps="314198"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="factors_prod&#39;vc.20.1.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="case" proved="true" arg1="(x=a)">
        <goal name="factors_prod&#39;vc.20.1.0.0.0.1.0" expl="true case (equality hypothesis)" proved="true">
        <transf name="rewrite" proved="true" arg1="h">
         <goal name="factors_prod&#39;vc.20.1.0.0.0.1.0.0" expl="true case (equality hypothesis)" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="factors_prod&#39;vc.20.1.0.0.0.1.1" expl="false case (equality hypothesis)" proved="true">
        <transf name="apply" proved="true" arg1="prime_factors_up">
         <goal name="factors_prod&#39;vc.20.1.0.0.0.1.1.0" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="0.35" steps="314215"/></proof>
         </goal>
         <goal name="factors_prod&#39;vc.20.1.0.0.0.1.1.1" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="0.79" steps="336499"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="divisors_by_factor_decomp_pre&#39;vc" expl="VC for divisors_by_factor_decomp_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="divisors_by_factor_decomp_pre&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.79" steps="286220"/></proof>
  </goal>
  <goal name="divisors_by_factor_decomp_pre&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.78" steps="286422"/></proof>
  </goal>
  <goal name="divisors_by_factor_decomp_pre&#39;vc.2" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="1.01" steps="1142285"/></proof>
  </goal>
  <goal name="divisors_by_factor_decomp_pre&#39;vc.3" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="(prime_factors a i )" arg2="(prime_factors (b * div a b) i )">
   <goal name="divisors_by_factor_decomp_pre&#39;vc.3.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="prime_factors_mult">
    <goal name="divisors_by_factor_decomp_pre&#39;vc.3.0.0" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.29" steps="264264"/></proof>
    </goal>
    <goal name="divisors_by_factor_decomp_pre&#39;vc.3.0.1" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="0.81" steps="309840"/></proof>
    </goal>
    <goal name="divisors_by_factor_decomp_pre&#39;vc.3.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.97" steps="2684913"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="divisors_by_factor_decomp_pre&#39;vc.3.1" expl="equality hypothesis" proved="true">
   <transf name="assert" proved="true" arg1="(a = div a b * b)">
    <goal name="divisors_by_factor_decomp_pre&#39;vc.3.1.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="unicity_div_rev">
     <goal name="divisors_by_factor_decomp_pre&#39;vc.3.1.0.0" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="0.30" steps="264241"/></proof>
     </goal>
     <goal name="divisors_by_factor_decomp_pre&#39;vc.3.1.0.1" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="0.28" steps="264225"/></proof>
     </goal>
     <goal name="divisors_by_factor_decomp_pre&#39;vc.3.1.0.2" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="0.30" steps="264223"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="divisors_by_factor_decomp_pre&#39;vc.3.1.1" expl="equality hypothesis" proved="true">
    <proof prover="9"><result status="valid" time="0.49" steps="284213"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="divisors_by_factor_decomp_pre&#39;vc.4" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(0&lt;= prime_factors (div a b) i)">
   <goal name="divisors_by_factor_decomp_pre&#39;vc.4.0" expl="asserted formula" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="divisors_by_factor_decomp_pre&#39;vc.4.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="prime_factors&#39;spec4">
     <goal name="divisors_by_factor_decomp_pre&#39;vc.4.0.0.0" expl="apply premises" proved="true">
     <transf name="instantiate" proved="true" arg1="divisors&#39;spec2" arg2="a">
      <goal name="divisors_by_factor_decomp_pre&#39;vc.4.0.0.0.0" expl="apply premises" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="divisors_by_factor_decomp_pre&#39;vc.4.0.0.0.0.0" expl="destruct premise" proved="true">
       <proof prover="9"><result status="valid" time="0.37" steps="305738"/></proof>
       </goal>
       <goal name="divisors_by_factor_decomp_pre&#39;vc.4.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="instantiate" proved="true" arg1="Hinst" arg2="b">
        <goal name="divisors_by_factor_decomp_pre&#39;vc.4.0.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="destruct" proved="true" arg1="Hinst">
         <goal name="divisors_by_factor_decomp_pre&#39;vc.4.0.0.0.0.1.0.0" expl="destruct premise" proved="true">
         <proof prover="9"><result status="valid" time="0.41" steps="305872"/></proof>
         </goal>
         <goal name="divisors_by_factor_decomp_pre&#39;vc.4.0.0.0.0.1.0.1" expl="apply premises" proved="true">
         <transf name="destruct" proved="true" arg1="Hinst">
          <goal name="divisors_by_factor_decomp_pre&#39;vc.4.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="0.11" steps="723004"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="divisors_by_factor_decomp_pre&#39;vc.4.1" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.72" steps="312175"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="divisors_by_factor_decomp_pre_&#39;vc" expl="VC for divisors_by_factor_decomp_pre_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="divisors_by_factor_decomp_pre_&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.79" steps="288497"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="divisors_by_factor_decomp_pre_rec&#39;vc" expl="VC for divisors_by_factor_decomp_pre_rec" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="divisors_by_factor_decomp_pre_rec&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.23" steps="204206"/></proof>
  </goal>
  <goal name="divisors_by_factor_decomp_pre_rec&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.26" steps="246693"/></proof>
  </goal>
  <goal name="divisors_by_factor_decomp_pre_rec&#39;vc.2" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="factors_prod">
   <goal name="divisors_by_factor_decomp_pre_rec&#39;vc.2.0" expl="apply premises" proved="true">
   <proof prover="9"><result status="valid" time="0.22" steps="230963"/></proof>
   </goal>
   <goal name="divisors_by_factor_decomp_pre_rec&#39;vc.2.1" expl="apply premises" proved="true">
   <proof prover="9"><result status="valid" time="0.25" steps="230963"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="divisors_by_factor_decomp_pre_rec&#39;vc.3" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="factors_prod">
   <goal name="divisors_by_factor_decomp_pre_rec&#39;vc.3.0" expl="apply premises" proved="true">
   <proof prover="9"><result status="valid" time="0.25" steps="231028"/></proof>
   </goal>
   <goal name="divisors_by_factor_decomp_pre_rec&#39;vc.3.1" expl="apply premises" proved="true">
   <proof prover="9"><result status="valid" time="0.26" steps="231035"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="divisors_by_factor_decomp_pre_rec&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.26" steps="231094"/></proof>
  </goal>
  <goal name="divisors_by_factor_decomp_pre_rec&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.26" steps="231138"/></proof>
  </goal>
  <goal name="divisors_by_factor_decomp_pre_rec&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.29" steps="265043"/></proof>
  </goal>
  <goal name="divisors_by_factor_decomp_pre_rec&#39;vc.7" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.28" steps="231200"/></proof>
  </goal>
  <goal name="divisors_by_factor_decomp_pre_rec&#39;vc.8" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.42" steps="249498"/></proof>
  </goal>
  <goal name="divisors_by_factor_decomp_pre_rec&#39;vc.9" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="divisors_by_factor_decomp_pre_rec&#39;vc.9.0" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(prime_factors a k)" arg2="((prime_factors b k) + (prime_factors a k - prime_factors b k))">
    <goal name="divisors_by_factor_decomp_pre_rec&#39;vc.9.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="power_sum">
     <goal name="divisors_by_factor_decomp_pre_rec&#39;vc.9.0.0.0" expl="precondition" proved="true">
     <transf name="apply" proved="true" arg1="mult_eq">
      <goal name="divisors_by_factor_decomp_pre_rec&#39;vc.9.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.26" steps="231292"/></proof>
      </goal>
      <goal name="divisors_by_factor_decomp_pre_rec&#39;vc.9.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.27" steps="231354"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="divisors_by_factor_decomp_pre_rec&#39;vc.9.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.46" steps="2420719"/></proof>
     </goal>
     <goal name="divisors_by_factor_decomp_pre_rec&#39;vc.9.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="9"><result status="valid" time="0.59" steps="276895"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="divisors_by_factor_decomp_pre_rec&#39;vc.9.0.1" expl="equality hypothesis" proved="true">
    <proof prover="9"><result status="valid" time="0.25" steps="231333"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="divisors_by_factor_decomp_pre_rec&#39;vc.10" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(ind_iproduct (fun (i:int) -&gt; power i (prime_factors a i)) 0 (a + 1) = (b
     * ind_iproduct
       (fun (i:int) -&gt; power i (prime_factors a i - prime_factors b i)) 0
       (a + 1)))">
   <goal name="divisors_by_factor_decomp_pre_rec&#39;vc.10.0" expl="asserted formula" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures">
    <goal name="divisors_by_factor_decomp_pre_rec&#39;vc.10.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="mult_eq">
     <goal name="divisors_by_factor_decomp_pre_rec&#39;vc.10.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="goal_comm">
      <goal name="divisors_by_factor_decomp_pre_rec&#39;vc.10.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="Assert1">
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="divisors_by_factor_decomp_pre_rec&#39;vc.10.0.0.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="ind_iproduct_eq">
      <goal name="divisors_by_factor_decomp_pre_rec&#39;vc.10.0.0.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="divisors_by_factor_decomp_pre_rec&#39;vc.10.1" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="(b
     * ind_iproduct
       (fun (i:int) -&gt; power i (prime_factors a i - prime_factors b i)) 0
       (a + 1))" arg2="(ind_iproduct (fun (i:int) -&gt; power i (prime_factors a i)) 0 (a + 1))">
    <goal name="divisors_by_factor_decomp_pre_rec&#39;vc.10.1.0" expl="assertion" proved="true">
    <transf name="apply" proved="true" arg1="Assert">
    </transf>
    </goal>
    <goal name="divisors_by_factor_decomp_pre_rec&#39;vc.10.1.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="goal_comm">
     <goal name="divisors_by_factor_decomp_pre_rec&#39;vc.10.1.1.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="h">
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="divisors_by_factor_decomp_pre_rec&#39;vc.11" expl="postcondition" proved="true">
  <proof prover="12"><result status="valid" time="0.25" steps="11850"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inf_by_prime_factors&#39;vc" expl="VC for inf_by_prime_factors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inf_by_prime_factors&#39;vc.0" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.41" steps="222223"/></proof>
  </goal>
  <goal name="inf_by_prime_factors&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.25" steps="204551"/></proof>
  </goal>
  <goal name="inf_by_prime_factors&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.50" steps="222224"/></proof>
  </goal>
  <goal name="inf_by_prime_factors&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.24" steps="231286"/></proof>
  </goal>
  <goal name="inf_by_prime_factors&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.26" steps="231516"/></proof>
  </goal>
  <goal name="inf_by_prime_factors&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.28" steps="231745"/></proof>
  </goal>
  <goal name="inf_by_prime_factors&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.27" steps="231886"/></proof>
  </goal>
  <goal name="inf_by_prime_factors&#39;vc.7" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="inf_by_prime_factors&#39;vc.7.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.75" steps="273812"/></proof>
   </goal>
   <goal name="inf_by_prime_factors&#39;vc.7.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="inf_by_prime_factors&#39;vc.7.1.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="inf_by_prime_factors&#39;vc.7.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H2">
      <goal name="inf_by_prime_factors&#39;vc.7.1.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H3">
       <goal name="inf_by_prime_factors&#39;vc.7.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="compat_int_order_mult">
        <goal name="inf_by_prime_factors&#39;vc.7.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="inf_by_prime_factors&#39;vc.7.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="ind_iproduct_pos">
          <goal name="inf_by_prime_factors&#39;vc.7.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="inf_by_prime_factors&#39;vc.7.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="inf_by_prime_factors&#39;vc.7.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="9"><result status="valid" time="1.43" steps="459697"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="inf_by_prime_factors&#39;vc.7.1.0.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="H4">
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="inf_by_prime_factors&#39;vc.7.1.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="inf_by_prime_factors&#39;vc.7.1.0.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="inf_by_prime_factors&#39;vc.7.1.0.0.0.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="9"><result status="valid" time="1.06" steps="320409"/></proof>
          </goal>
          <goal name="inf_by_prime_factors&#39;vc.7.1.0.0.0.0.1.0.1" expl="apply premises" proved="true">
          <transf name="case" proved="true" arg1="(k-1 = 0)">
           <goal name="inf_by_prime_factors&#39;vc.7.1.0.0.0.0.1.0.1.0" expl="apply premises (true case)" proved="true">
           <transf name="case" proved="true" arg1="((prime_factors b (k - 1)) = 0)">
            <goal name="inf_by_prime_factors&#39;vc.7.1.0.0.0.0.1.0.1.0.0" expl="apply premises (true case)" proved="true">
            <proof prover="9"><result status="valid" time="0.82" steps="313959"/></proof>
            </goal>
            <goal name="inf_by_prime_factors&#39;vc.7.1.0.0.0.0.1.0.1.0.1" expl="apply premises (false case. true case)" proved="true">
            <proof prover="9"><result status="valid" time="0.83" steps="313852"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="inf_by_prime_factors&#39;vc.7.1.0.0.0.0.1.0.1.1" expl="apply premises (false case)" proved="true">
           <transf name="case" proved="true" arg1="((prime_factors b (k - 1)) = 0)">
            <goal name="inf_by_prime_factors&#39;vc.7.1.0.0.0.0.1.0.1.1.0" expl="apply premises (false case. true case)" proved="true">
            <proof prover="9"><result status="valid" time="0.84" steps="315211"/></proof>
            </goal>
            <goal name="inf_by_prime_factors&#39;vc.7.1.0.0.0.0.1.0.1.1.1" expl="apply premises (false case)" proved="true">
            <proof prover="9"><result status="valid" time="0.87" steps="315482"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="inf_by_prime_factors&#39;vc.7.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="9"><result status="valid" time="0.28" steps="266482"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="inf_by_prime_factors&#39;vc.7.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="9"><result status="valid" time="0.29" steps="266482"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="inf_by_prime_factors&#39;vc.8" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.60" steps="273522"/></proof>
  </goal>
  <goal name="inf_by_prime_factors&#39;vc.9" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ind_iproduct (fun (i:int) -&gt; power i (prime_factors b i)) 0 (max a b + 1))" arg2="b" arg3="in" arg4="H">
   <goal name="inf_by_prime_factors&#39;vc.9.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ind_iproduct (fun (i:int) -&gt; power i (prime_factors a i)) 0 (max a b + 1))" arg2="a" arg3="in" arg4="H">
    <goal name="inf_by_prime_factors&#39;vc.9.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(ind_iproduct (fun (i:int) -&gt; power i (prime_factors a i)) 0 (max a b + 1))" arg2="a" arg3="in" arg4="Ensures">
     <goal name="inf_by_prime_factors&#39;vc.9.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(ind_iproduct (fun (i:int) -&gt; power i (prime_factors b i)) 0 (max a b + 1))" arg2="b" arg3="in" arg4="Ensures">
      <goal name="inf_by_prime_factors&#39;vc.9.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="9"><result status="valid" time="0.27" steps="231259"/></proof>
      </goal>
      <goal name="inf_by_prime_factors&#39;vc.9.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="goal_comm">
       <goal name="inf_by_prime_factors&#39;vc.9.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="factors_prod">
        <goal name="inf_by_prime_factors&#39;vc.9.0.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="0.26" steps="231313"/></proof>
        </goal>
        <goal name="inf_by_prime_factors&#39;vc.9.0.0.0.1.0.1" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="0.77" steps="273403"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="inf_by_prime_factors&#39;vc.9.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="goal_comm">
      <goal name="inf_by_prime_factors&#39;vc.9.0.0.1.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="factors_prod">
       <goal name="inf_by_prime_factors&#39;vc.9.0.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="0.24" steps="231398"/></proof>
       </goal>
       <goal name="inf_by_prime_factors&#39;vc.9.0.0.1.0.1" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="0.81" steps="273507"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="inf_by_prime_factors&#39;vc.9.0.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="goal_comm">
     <goal name="inf_by_prime_factors&#39;vc.9.0.1.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="factors_prod">
      <goal name="inf_by_prime_factors&#39;vc.9.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.28" steps="231398"/></proof>
      </goal>
      <goal name="inf_by_prime_factors&#39;vc.9.0.1.0.1" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.77" steps="273507"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="inf_by_prime_factors&#39;vc.9.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="goal_comm">
    <goal name="inf_by_prime_factors&#39;vc.9.1.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="factors_prod">
     <goal name="inf_by_prime_factors&#39;vc.9.1.0.0" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="0.26" steps="231398"/></proof>
     </goal>
     <goal name="inf_by_prime_factors&#39;vc.9.1.0.1" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="0.59" steps="273507"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="co_prime_to_prod&#39;vc" expl="VC for co_prime_to_prod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="co_prime_to_prod&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="co_prime_to_prod&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.52" steps="222460"/></proof>
  </goal>
  <goal name="co_prime_to_prod&#39;vc.2" expl="precondition" proved="true">
  <transf name="case" proved="true" arg1="( (a * b) = c)">
   <goal name="co_prime_to_prod&#39;vc.2.0" expl="true case (precondition)" proved="true">
   <transf name="assert" proved="true" arg1="(mem a (divisors c))">
    <goal name="co_prime_to_prod&#39;vc.2.0.0" expl="asserted formula" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="co_prime_to_prod&#39;vc.2.0.0.0" expl="asserted formula" proved="true">
     <transf name="rewrite" proved="true" arg1="divisors&#39;def">
      <goal name="co_prime_to_prod&#39;vc.2.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="(1&lt;= a &lt;=c)">
       <goal name="co_prime_to_prod&#39;vc.2.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="co_prime_to_prod&#39;vc.2.0.0.0.0.0.0" proved="true">
        <proof prover="9"><result status="valid" time="0.63" steps="244003"/></proof>
        </goal>
        <goal name="co_prime_to_prod&#39;vc.2.0.0.0.0.0.1" proved="true">
        <proof prover="0"><result status="valid" time="2.49"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="co_prime_to_prod&#39;vc.2.0.0.0.0.1" expl="asserted formula" proved="true">
       <transf name="assert" proved="true" arg1="((fun (j:int) -&gt; (1 &lt;= j /\ j &lt;= c) /\ mod c j = 0) a)">
        <goal name="co_prime_to_prod&#39;vc.2.0.0.0.0.1.0" expl="asserted formula" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="co_prime_to_prod&#39;vc.2.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="co_prime_to_prod&#39;vc.2.0.0.0.0.1.0.0.0" proved="true">
          <proof prover="9"><result status="valid" time="0.23" steps="205890"/></proof>
          </goal>
          <goal name="co_prime_to_prod&#39;vc.2.0.0.0.0.1.0.0.1" proved="true">
          <proof prover="9"><result status="valid" time="0.23" steps="205890"/></proof>
          </goal>
          <goal name="co_prime_to_prod&#39;vc.2.0.0.0.0.1.0.0.2" proved="true">
          <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="c,a,b,0">
           <goal name="co_prime_to_prod&#39;vc.2.0.0.0.0.1.0.0.2.0" proved="true">
           <proof prover="9"><result status="valid" time="0.22" steps="206045"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="co_prime_to_prod&#39;vc.2.0.0.0.0.1.1" expl="asserted formula" proved="true">
        <proof prover="9"><result status="valid" time="4.63" steps="1489450"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="co_prime_to_prod&#39;vc.2.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="9"><result status="valid" time="0.23" steps="205852"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="co_prime_to_prod&#39;vc.2.0.1" expl="true case (precondition)" proved="true">
    <transf name="assert" proved="true" arg1="(mem a (divisors a))">
     <goal name="co_prime_to_prod&#39;vc.2.0.1.0" expl="asserted formula" proved="true">
     <proof prover="9"><result status="valid" time="0.64" steps="289158"/></proof>
     </goal>
     <goal name="co_prime_to_prod&#39;vc.2.0.1.1" expl="true case (precondition)" proved="true">
     <transf name="assert" proved="true" arg1="(not (co_prime a c))">
      <goal name="co_prime_to_prod&#39;vc.2.0.1.1.0" expl="asserted formula" proved="true">
      <transf name="eliminate_definition" proved="true" >
       <goal name="co_prime_to_prod&#39;vc.2.0.1.1.0.0" expl="asserted formula" proved="true">
       <transf name="rewrite" proved="true" arg1="co_prime&#39;def">
        <goal name="co_prime_to_prod&#39;vc.2.0.1.1.0.0.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="(exists e . mem e (inter (divisors a) (divisors c)) /\ not (mem e (to_set 1)))">
         <goal name="co_prime_to_prod&#39;vc.2.0.1.1.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="exists" proved="true" arg1="a">
          <goal name="co_prime_to_prod&#39;vc.2.0.1.1.0.0.0.0.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="co_prime_to_prod&#39;vc.2.0.1.1.0.0.0.0.0.0" proved="true">
           <proof prover="9"><result status="valid" time="0.52" steps="269372"/></proof>
           </goal>
           <goal name="co_prime_to_prod&#39;vc.2.0.1.1.0.0.0.0.0.1" proved="true">
           <proof prover="9"><result status="valid" time="0.52" steps="267811"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="co_prime_to_prod&#39;vc.2.0.1.1.0.0.0.1" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="0.40" steps="226508"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="co_prime_to_prod&#39;vc.2.0.1.1.1" expl="true case (precondition)" proved="true">
      <proof prover="9"><result status="valid" time="0.23" steps="204837"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="co_prime_to_prod&#39;vc.2.1" expl="false case (precondition)" proved="true">
   <proof prover="9"><result status="valid" time="0.23" steps="204783"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="co_prime_to_prod&#39;vc.3" expl="precondition" proved="true">
  <transf name="case" proved="true" arg1="(a= c1)">
   <goal name="co_prime_to_prod&#39;vc.3.0" expl="true case (precondition)" proved="true">
   <transf name="assert" proved="true" arg1="(mem c1 (divisors (a*b)))">
    <goal name="co_prime_to_prod&#39;vc.3.0.0" expl="asserted formula" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="co_prime_to_prod&#39;vc.3.0.0.0" expl="asserted formula" proved="true">
     <transf name="rewrite" proved="true" arg1="divisors&#39;def">
      <goal name="co_prime_to_prod&#39;vc.3.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="(not (fun (j:int) -&gt; (1 &lt;= j /\ j &lt;= c1) /\ mod c1 j = 0) c)">
       <goal name="co_prime_to_prod&#39;vc.3.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="co_prime_to_prod&#39;vc.3.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="case" proved="true" arg1="(mod c1 c = 0)">
         <goal name="co_prime_to_prod&#39;vc.3.0.0.0.0.0.0.0" expl="true case (asserted formula)" proved="true">
         <proof prover="9"><result status="valid" time="4.59" steps="1486163"/></proof>
         </goal>
         <goal name="co_prime_to_prod&#39;vc.3.0.0.0.0.0.0.1" expl="false case (asserted formula)" proved="true">
         <proof prover="9"><result status="valid" time="0.29" steps="248072"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="co_prime_to_prod&#39;vc.3.0.0.0.0.1" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="in_my_filter">
        <goal name="co_prime_to_prod&#39;vc.3.0.0.0.0.1.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="2.38"/></proof>
        </goal>
        <goal name="co_prime_to_prod&#39;vc.3.0.0.0.0.1.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="co_prime_to_prod&#39;vc.3.0.0.0.0.1.1.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="co_prime_to_prod&#39;vc.3.0.0.0.0.1.1.0.0" proved="true">
          <proof prover="9"><result status="valid" time="0.33" steps="248164"/></proof>
          </goal>
          <goal name="co_prime_to_prod&#39;vc.3.0.0.0.0.1.1.0.1" proved="true">
          <proof prover="0"><result status="valid" time="2.32"/></proof>
          </goal>
          <goal name="co_prime_to_prod&#39;vc.3.0.0.0.0.1.1.0.2" proved="true">
          <proof prover="0"><result status="valid" time="2.42"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="co_prime_to_prod&#39;vc.3.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="9"><result status="valid" time="0.28" steps="248005"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="co_prime_to_prod&#39;vc.3.0.1" expl="true case (precondition)" proved="true">
    <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="(a*b),c1,b,0">
     <goal name="co_prime_to_prod&#39;vc.3.0.1.0" expl="true case (precondition)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="co_prime_to_prod&#39;vc.3.0.1.0.0" expl="true case (precondition)" proved="true">
      <proof prover="9"><result status="valid" time="4.84" steps="1399054"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="co_prime_to_prod&#39;vc.3.1" expl="false case (precondition)" proved="true">
   <transf name="case" proved="true" arg1="(mem c (divisors c1))">
    <goal name="co_prime_to_prod&#39;vc.3.1.0" expl="false case (true case. precondition)" proved="true">
    <transf name="case" proved="true" arg1="(mem c (divisors a))">
     <goal name="co_prime_to_prod&#39;vc.3.1.0.0" expl="false case (true case. precondition)" proved="true">
     <transf name="assert" proved="true" arg1="(not (co_prime a c1))">
      <goal name="co_prime_to_prod&#39;vc.3.1.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="set_not_co_prime_">
       <goal name="co_prime_to_prod&#39;vc.3.1.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="0.80" steps="291379"/></proof>
       </goal>
       <goal name="co_prime_to_prod&#39;vc.3.1.0.0.0.1" expl="apply premises" proved="true">
       <transf name="case" proved="true" arg1="(mod c1 a = 0)">
        <goal name="co_prime_to_prod&#39;vc.3.1.0.0.0.1.0" expl="apply premises (true case)" proved="true">
        <proof prover="9"><result status="valid" time="0.27" steps="247010"/></proof>
        </goal>
        <goal name="co_prime_to_prod&#39;vc.3.1.0.0.0.1.1" expl="apply premises (false case)" proved="true">
        <proof prover="9"><result status="valid" time="0.31" steps="247014"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="co_prime_to_prod&#39;vc.3.1.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="0.30" steps="246967"/></proof>
       </goal>
       <goal name="co_prime_to_prod&#39;vc.3.1.0.0.0.3" expl="apply premises" proved="true">
       <transf name="exists" proved="true" arg1="c">
        <goal name="co_prime_to_prod&#39;vc.3.1.0.0.0.3.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="co_prime_to_prod&#39;vc.3.1.0.0.0.3.0.0" proved="true">
         <proof prover="9"><result status="valid" time="0.80" steps="291490"/></proof>
         </goal>
         <goal name="co_prime_to_prod&#39;vc.3.1.0.0.0.3.0.1" proved="true">
         <proof prover="9"><result status="valid" time="0.68" steps="291400"/></proof>
         </goal>
         <goal name="co_prime_to_prod&#39;vc.3.1.0.0.0.3.0.2" proved="true">
         <transf name="assert" proved="true" arg1="(mem c (to_fset 1 (c1+1)))">
          <goal name="co_prime_to_prod&#39;vc.3.1.0.0.0.3.0.2.0" expl="asserted formula" proved="true">
          <proof prover="9"><result status="valid" time="0.68" steps="291921"/></proof>
          </goal>
          <goal name="co_prime_to_prod&#39;vc.3.1.0.0.0.3.0.2.1" proved="true">
          <proof prover="9"><result status="valid" time="0.67" steps="292519"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="co_prime_to_prod&#39;vc.3.1.0.0.0.3.0.3" proved="true">
         <proof prover="9"><result status="valid" time="0.80" steps="291378"/></proof>
         </goal>
         <goal name="co_prime_to_prod&#39;vc.3.1.0.0.0.3.0.4" proved="true">
         <proof prover="9"><result status="valid" time="0.66" steps="292129"/></proof>
         </goal>
         <goal name="co_prime_to_prod&#39;vc.3.1.0.0.0.3.0.5" proved="true">
         <proof prover="9"><result status="valid" time="0.65" steps="292172"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="co_prime_to_prod&#39;vc.3.1.0.0.1" expl="false case (true case. precondition)" proved="true">
      <proof prover="9"><result status="valid" time="0.28" steps="246977"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="co_prime_to_prod&#39;vc.3.1.0.1" expl="false case (true case. precondition)" proved="true">
     <transf name="assert" proved="true" arg1="(mem c (divisors b))">
      <goal name="co_prime_to_prod&#39;vc.3.1.0.1.0" expl="asserted formula" proved="true">
      <proof prover="9"><result status="valid" time="5.40" steps="1667423"/></proof>
      </goal>
      <goal name="co_prime_to_prod&#39;vc.3.1.0.1.1" expl="false case (true case. precondition)" proved="true">
      <transf name="assert" proved="true" arg1="(not (co_prime b c1))">
       <goal name="co_prime_to_prod&#39;vc.3.1.0.1.1.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="set_not_co_prime_">
        <goal name="co_prime_to_prod&#39;vc.3.1.0.1.1.0.0" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="0.44" steps="266104"/></proof>
        </goal>
        <goal name="co_prime_to_prod&#39;vc.3.1.0.1.1.0.1" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="0.27" steps="246990"/></proof>
        </goal>
        <goal name="co_prime_to_prod&#39;vc.3.1.0.1.1.0.2" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="5.32" steps="1584352"/></proof>
        </goal>
        <goal name="co_prime_to_prod&#39;vc.3.1.0.1.1.0.3" expl="apply premises" proved="true">
        <transf name="exists" proved="true" arg1="c">
         <goal name="co_prime_to_prod&#39;vc.3.1.0.1.1.0.3.0" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="co_prime_to_prod&#39;vc.3.1.0.1.1.0.3.0.0" proved="true">
          <proof prover="9"><result status="valid" time="0.64" steps="291019"/></proof>
          </goal>
          <goal name="co_prime_to_prod&#39;vc.3.1.0.1.1.0.3.0.1" proved="true">
          <proof prover="9"><result status="valid" time="5.26" steps="1600222"/></proof>
          </goal>
          <goal name="co_prime_to_prod&#39;vc.3.1.0.1.1.0.3.0.2" proved="true">
          <proof prover="9"><result status="valid" time="0.68" steps="291019"/></proof>
          </goal>
          <goal name="co_prime_to_prod&#39;vc.3.1.0.1.1.0.3.0.3" proved="true">
          <proof prover="9"><result status="valid" time="0.67" steps="290911"/></proof>
          </goal>
          <goal name="co_prime_to_prod&#39;vc.3.1.0.1.1.0.3.0.4" proved="true">
          <proof prover="9"><result status="valid" time="5.15" steps="1587446"/></proof>
          </goal>
          <goal name="co_prime_to_prod&#39;vc.3.1.0.1.1.0.3.0.5" proved="true">
          <proof prover="9"><result status="valid" time="0.88" steps="291742"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="co_prime_to_prod&#39;vc.3.1.0.1.1.1" expl="false case (true case. precondition)" proved="true">
       <proof prover="9"><result status="valid" time="0.27" steps="246996"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="co_prime_to_prod&#39;vc.3.1.1" expl="false case (precondition)" proved="true">
    <proof prover="9"><result status="valid" time="0.33" steps="246956"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="co_prime_to_prod&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.27"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="co_prime_to_prod_rev&#39;vc" expl="VC for co_prime_to_prod_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="co_prime_to_prod_rev&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.26" steps="204744"/></proof>
  </goal>
  <goal name="co_prime_to_prod_rev&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.25" steps="204750"/></proof>
  </goal>
  <goal name="co_prime_to_prod_rev&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.26" steps="204754"/></proof>
  </goal>
  <goal name="co_prime_to_prod_rev&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.23" steps="204757"/></proof>
  </goal>
  <goal name="co_prime_to_prod_rev&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.64" steps="243633"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="co_prime_pow&#39;vc" expl="VC for co_prime_pow" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="co_prime_pow&#39;vc.0" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.51" steps="242539"/></proof>
  </goal>
  <goal name="co_prime_pow&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.51" steps="222680"/></proof>
  </goal>
  <goal name="co_prime_pow&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="205004"/></proof>
  </goal>
  <goal name="co_prime_pow&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="205008"/></proof>
  </goal>
  <goal name="co_prime_pow&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.38" steps="222752"/></proof>
  </goal>
  <goal name="co_prime_pow&#39;vc.5" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="co_prime_pow&#39;vc.5.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.52" steps="242970"/></proof>
   </goal>
   <goal name="co_prime_pow&#39;vc.5.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="co_prime_pow&#39;vc.5.1.0" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="H">
     <goal name="co_prime_pow&#39;vc.5.1.0.0" expl="postcondition" proved="true">
     <proof prover="9"><result status="valid" time="0.37" steps="224145"/></proof>
     </goal>
     <goal name="co_prime_pow&#39;vc.5.1.0.1" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="co_prime_pow&#39;vc.5.1.0.1.0" expl="postcondition" proved="true">
      <proof prover="9"><result status="valid" time="0.63" steps="243715"/></proof>
      </goal>
      <goal name="co_prime_pow&#39;vc.5.1.0.1.1" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="c" arg2="(c-1+1)">
       <goal name="co_prime_pow&#39;vc.5.1.0.1.1.0" expl="postcondition" proved="true">
       <proof prover="9"><result status="valid" time="5.21" steps="1868852"/></proof>
       </goal>
       <goal name="co_prime_pow&#39;vc.5.1.0.1.1.1" expl="equality hypothesis" proved="true">
       <proof prover="9"><result status="valid" time="0.22" steps="204967"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="co_prime_pows&#39;vc" expl="VC for co_prime_pows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="co_prime_pows&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="205061"/></proof>
  </goal>
  <goal name="co_prime_pows&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.23" steps="205065"/></proof>
  </goal>
  <goal name="co_prime_pows&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.51" steps="222805"/></proof>
  </goal>
  <goal name="co_prime_pows&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.50" steps="243664"/></proof>
  </goal>
  <goal name="co_prime_pows&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.66" steps="243986"/></proof>
  </goal>
  <goal name="co_prime_pows&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.49" steps="222846"/></proof>
  </goal>
  <goal name="co_prime_pows&#39;vc.6" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="co_prime_pows&#39;vc.6.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(power b d)" arg2="1">
    <goal name="co_prime_pows&#39;vc.6.0.0" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="0.51" steps="243293"/></proof>
    </goal>
    <goal name="co_prime_pows&#39;vc.6.0.1" expl="equality hypothesis" proved="true">
    <proof prover="9"><result status="valid" time="0.52" steps="223044"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="co_prime_pows&#39;vc.6.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="co_prime_pows&#39;vc.6.1.0" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="H">
     <goal name="co_prime_pows&#39;vc.6.1.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(power a c)" arg2="1">
      <goal name="co_prime_pows&#39;vc.6.1.0.0.0" expl="postcondition" proved="true">
      <transf name="eliminate_definition" proved="true" >
       <goal name="co_prime_pows&#39;vc.6.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="case" proved="true" arg1="(d= 0)">
        <goal name="co_prime_pows&#39;vc.6.1.0.0.0.0.0" expl="true case (postcondition)" proved="true">
        <proof prover="9"><result status="valid" time="0.63" steps="244486"/></proof>
        </goal>
        <goal name="co_prime_pows&#39;vc.6.1.0.0.0.0.1" expl="false case (postcondition)" proved="true">
        <transf name="case" proved="true" arg1="(b=1)">
         <goal name="co_prime_pows&#39;vc.6.1.0.0.0.0.1.0" expl="false case (true case. postcondition)" proved="true">
         <proof prover="9"><result status="valid" time="4.29" steps="1439931"/></proof>
         </goal>
         <goal name="co_prime_pows&#39;vc.6.1.0.0.0.0.1.1" expl="false case (postcondition)" proved="true">
         <transf name="apply" proved="true" arg1="set_co_prime">
          <goal name="co_prime_pows&#39;vc.6.1.0.0.0.0.1.1.0" expl="apply premises" proved="true">
          <proof prover="9"><result status="valid" time="0.21" steps="206132"/></proof>
          </goal>
          <goal name="co_prime_pows&#39;vc.6.1.0.0.0.0.1.1.1" expl="apply premises" proved="true">
          <proof prover="9"><result status="valid" time="0.50" steps="244225"/></proof>
          </goal>
          <goal name="co_prime_pows&#39;vc.6.1.0.0.0.0.1.1.2" expl="apply premises" proved="true">
          <proof prover="9"><result status="valid" time="0.62" steps="244349"/></proof>
          </goal>
          <goal name="co_prime_pows&#39;vc.6.1.0.0.0.0.1.1.3" expl="apply premises" proved="true">
          <proof prover="9"><result status="valid" time="0.60" steps="291497"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="co_prime_pows&#39;vc.6.1.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="9"><result status="valid" time="0.38" steps="223094"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="co_prime_pows&#39;vc.6.1.0.1" expl="postcondition" proved="true">
     <proof prover="9"><result status="valid" time="0.63" steps="244950"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="div_iproduct_primes&#39;vc" expl="VC for div_iproduct_primes" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="div_iproduct_primes&#39;vc.0" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="div_iproduct_primes&#39;vc.0.0" expl="variant decrease" proved="true">
   <proof prover="9"><result status="valid" time="0.25" steps="232303"/></proof>
   </goal>
   <goal name="div_iproduct_primes&#39;vc.0.1" expl="variant decrease" proved="true">
   <proof prover="9"><result status="valid" time="0.24" steps="232319"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="div_iproduct_primes&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.42" steps="250624"/></proof>
  </goal>
  <goal name="div_iproduct_primes&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.74" steps="276022"/></proof>
  </goal>
  <goal name="div_iproduct_primes&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.76" steps="275466"/></proof>
  </goal>
  <goal name="div_iproduct_primes&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.26" steps="232460"/></proof>
  </goal>
  <goal name="div_iproduct_primes&#39;vc.5" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H2">
   <goal name="div_iproduct_primes&#39;vc.5.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ind_iproduct_one">
    <goal name="div_iproduct_primes&#39;vc.5.0.0" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="0.73" steps="273182"/></proof>
    </goal>
    <goal name="div_iproduct_primes&#39;vc.5.0.1" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="0.84" steps="275851"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="div_iproduct_primes&#39;vc.5.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="div_iproduct_primes&#39;vc.5.1.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="div_iproduct_primes&#39;vc.5.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="ind_iproduct_right_extension">
      <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="case" proved="true" arg1="(f bound = 0)">
        <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.0" expl="true case (postcondition)" proved="true">
        <transf name="rewrite" proved="true" arg1="mult_one">
         <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
         <transf name="replace" proved="true" arg1="((bound + 1) - 1)" arg2="((bound - 1) + 1)">
          <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
          <transf name="apply" proved="true" arg1="Ensures1">
           <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="9"><result status="valid" time="0.46" steps="250849"/></proof>
           </goal>
           <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="9"><result status="valid" time="0.28" steps="232602"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="9"><result status="valid" time="0.29" steps="232609"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="9"><result status="valid" time="0.45" steps="251286"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.1" expl="false case (postcondition)" proved="true">
        <transf name="case" proved="true" arg1="(bound = 1)">
         <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.1.0" expl="false case (true case. postcondition)" proved="true">
         <transf name="rewrite" proved="true" arg1="mult_one">
          <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.1.0.0" expl="false case (true case. postcondition)" proved="true">
          <transf name="replace" proved="true" arg1="((bound + 1) - 1)" arg2="((bound -1)+1 )">
           <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.1.0.0.0" expl="false case (true case. postcondition)" proved="true">
           <transf name="apply" proved="true" arg1="Ensures1">
            <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="9"><result status="valid" time="0.44" steps="251073"/></proof>
            </goal>
            <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="9"><result status="valid" time="0.26" steps="232617"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="9"><result status="valid" time="0.26" steps="232624"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
          <transf name="replace" proved="true" arg1="((bound + 1) - 1)" arg2="((bound ) )">
           <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
           <proof prover="9"><result status="valid" time="0.76" steps="276247"/></proof>
           </goal>
           <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
           <proof prover="9"><result status="valid" time="0.27" steps="232624"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.1.1" expl="false case (postcondition)" proved="true">
         <transf name="apply" proved="true" arg1="co_prime_to_prod_rev">
          <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.1.1.0" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="((bound + 1) - 1)" arg2="((bound ) )">
           <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
           <transf name="case" proved="true" arg1="(bound = 1)">
            <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.1.1.0.0.0" expl="apply premises (true case)" proved="true">
            <proof prover="9"><result status="valid" time="0.27" steps="232647"/></proof>
            </goal>
            <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.1.1.0.0.1" expl="apply premises (false case)" proved="true">
            <proof prover="9"><result status="valid" time="0.72" steps="276767"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.1.1.0.1" expl="equality hypothesis" proved="true">
           <proof prover="9"><result status="valid" time="0.25" steps="232628"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.1.1.1" expl="apply premises" proved="true">
          <proof prover="9"><result status="valid" time="0.53" steps="250949"/></proof>
          </goal>
          <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.1.1.2" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="((bound + 1) - 1)" arg2="((bound - 1) + 1)">
           <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.1.1.2.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="symetric_co_prime">
            <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.1.1.2.0.0" expl="apply premises" proved="true">
            <proof prover="9"><result status="valid" time="0.57" steps="250949"/></proof>
            </goal>
            <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.1.1.2.0.1" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="ind_iproduct_strict_pos">
             <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.1.1.2.0.1.0" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.1.1.2.0.1.0.0" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.1.1.2.0.1.0.0.0" expl="apply premises" proved="true">
               <transf name="case" proved="true" arg1="(k = 0)">
                <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.1.1.2.0.1.0.0.0.0" expl="apply premises (true case)" proved="true">
                <proof prover="9"><result status="valid" time="0.66" steps="252605"/></proof>
                </goal>
                <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.1.1.2.0.1.0.0.0.1" expl="apply premises (false case)" proved="true">
                <proof prover="9"><result status="valid" time="0.78" steps="276729"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.1.1.2.0.2" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="Ensures1">
             <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.1.1.2.0.2.0" expl="apply premises" proved="true">
             <proof prover="9"><result status="valid" time="0.45" steps="250874"/></proof>
             </goal>
             <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.1.1.2.0.2.1" expl="apply premises" proved="true">
             <proof prover="9"><result status="valid" time="0.26" steps="232621"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.1.1.2.1" expl="equality hypothesis" proved="true">
           <proof prover="9"><result status="valid" time="0.27" steps="232628"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="div_iproduct_primes&#39;vc.5.1.0.0.0.0.1.1.3" expl="apply premises" proved="true">
          <proof prover="9"><result status="valid" time="1.08" steps="281294"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="div_iproduct_primes&#39;vc.5.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="9"><result status="valid" time="0.26" steps="232586"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="div_iproduct_primes&#39;vc.6" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H4">
   <goal name="div_iproduct_primes&#39;vc.6.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ind_iproduct_one">
    <goal name="div_iproduct_primes&#39;vc.6.0.0" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="0.59" steps="250223"/></proof>
    </goal>
    <goal name="div_iproduct_primes&#39;vc.6.0.1" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="0.44" steps="250397"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="div_iproduct_primes&#39;vc.6.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="div_iproduct_primes&#39;vc.6.1.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="div_iproduct_primes&#39;vc.6.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="ind_iproduct_right_extension">
      <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="case" proved="true" arg1="(f bound = 0)">
        <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.0" expl="true case (postcondition)" proved="true">
        <transf name="rewrite" proved="true" arg1="mult_one">
         <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
         <transf name="replace" proved="true" arg1="((bound + 1) - 1)" arg2="((bound - 1) + 1)">
          <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
          <transf name="case" proved="true" arg1="(bound = j)">
           <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
           <transf name="apply" proved="true" arg1="Ensures2">
            <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="9"><result status="valid" time="0.32" steps="239585"/></proof>
            </goal>
            <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="9"><result status="valid" time="0.27" steps="232782"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.0.0.0.1" expl="false case (true case. postcondition)" proved="true">
           <transf name="apply" proved="true" arg1="Ensures1">
            <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
            <proof prover="9"><result status="valid" time="0.44" steps="251134"/></proof>
            </goal>
            <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
            <proof prover="9"><result status="valid" time="0.26" steps="232786"/></proof>
            </goal>
            <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.0.0.0.1.2" expl="apply premises" proved="true">
            <proof prover="9"><result status="valid" time="0.26" steps="232786"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="9"><result status="valid" time="0.28" steps="232778"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="9"><result status="valid" time="0.59" steps="251441"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1" expl="false case (postcondition)" proved="true">
        <transf name="case" proved="true" arg1="(bound = 1)">
         <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.0" expl="false case (true case. postcondition)" proved="true">
         <transf name="rewrite" proved="true" arg1="mult_one">
          <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.0.0" expl="false case (true case. postcondition)" proved="true">
          <transf name="replace" proved="true" arg1="((bound + 1) - 1)" arg2="((bound -1)+1 )">
           <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.0.0.0" expl="false case (true case. postcondition)" proved="true">
           <transf name="case" proved="true" arg1="(bound = j)">
            <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.0.0.0.0" expl="false case (true case. postcondition)" proved="true">
            <proof prover="9"><result status="valid" time="0.59" steps="251356"/></proof>
            </goal>
            <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.0.0.0.1" expl="false case (true case. postcondition)" proved="true">
            <proof prover="9"><result status="valid" time="0.60" steps="251473"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="9"><result status="valid" time="0.26" steps="232793"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
          <transf name="replace" proved="true" arg1="((bound + 1) - 1)" arg2="((bound ) )">
           <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
           <proof prover="9"><result status="valid" time="0.59" steps="251402"/></proof>
           </goal>
           <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
           <proof prover="9"><result status="valid" time="0.25" steps="232793"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.1" expl="false case (postcondition)" proved="true">
         <transf name="apply" proved="true" arg1="co_prime_to_prod_rev">
          <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.1.0" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="((bound + 1) - 1)" arg2="((bound ) )">
           <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
           <transf name="case" proved="true" arg1="(bound = 1)">
            <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.1.0.0.0" expl="apply premises (true case)" proved="true">
            <proof prover="9"><result status="valid" time="0.26" steps="232816"/></proof>
            </goal>
            <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.1.0.0.1" expl="apply premises (false case)" proved="true">
            <proof prover="9"><result status="valid" time="0.82" steps="277185"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.1.0.1" expl="equality hypothesis" proved="true">
           <proof prover="9"><result status="valid" time="0.24" steps="232797"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.1.1" expl="apply premises" proved="true">
          <proof prover="9"><result status="valid" time="0.27" steps="232806"/></proof>
          </goal>
          <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.1.2" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="((bound + 1) - 1)" arg2="((bound - 1) + 1)">
           <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.1.2.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="symetric_co_prime">
            <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.1.2.0.0" expl="apply premises" proved="true">
            <proof prover="9"><result status="valid" time="0.26" steps="232806"/></proof>
            </goal>
            <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.1.2.0.1" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="ind_iproduct_strict_pos">
             <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.1.2.0.1.0" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.1.2.0.1.0.0" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.1.2.0.1.0.0.0" expl="apply premises" proved="true">
               <transf name="case" proved="true" arg1="(k = 0)">
                <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.1.2.0.1.0.0.0.0" expl="apply premises (true case)" proved="true">
                <proof prover="9"><result status="valid" time="0.47" steps="252777"/></proof>
                </goal>
                <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.1.2.0.1.0.0.0.1" expl="apply premises (false case)" proved="true">
                <proof prover="9"><result status="valid" time="0.60" steps="277196"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.1.2.0.2" expl="apply premises" proved="true">
            <transf name="case" proved="true" arg1="(bound = j)">
             <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.1.2.0.2.0" expl="apply premises (true case)" proved="true">
             <proof prover="9"><result status="valid" time="0.30" steps="239685"/></proof>
             </goal>
             <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.1.2.0.2.1" expl="apply premises (false case)" proved="true">
             <transf name="apply" proved="true" arg1="Ensures1">
              <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.1.2.0.2.1.0" expl="apply premises" proved="true">
              <proof prover="9"><result status="valid" time="0.56" steps="251174"/></proof>
              </goal>
              <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.1.2.0.2.1.1" expl="apply premises" proved="true">
              <proof prover="9"><result status="valid" time="0.25" steps="232805"/></proof>
              </goal>
              <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.1.2.0.2.1.2" expl="apply premises" proved="true">
              <proof prover="9"><result status="valid" time="0.27" steps="232805"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.1.2.1" expl="equality hypothesis" proved="true">
           <proof prover="9"><result status="valid" time="0.27" steps="232797"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.1.3" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="co_prime_pow">
           <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.1.3.0" expl="apply premises" proved="true">
           <proof prover="9"><result status="valid" time="0.28" steps="232806"/></proof>
           </goal>
           <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.1.3.1" expl="apply premises" proved="true">
           <proof prover="9"><result status="valid" time="0.75" steps="276941"/></proof>
           </goal>
           <goal name="div_iproduct_primes&#39;vc.6.1.0.0.0.0.1.1.3.2" expl="apply premises" proved="true">
           <proof prover="9"><result status="valid" time="0.79" steps="276503"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="div_iproduct_primes&#39;vc.6.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="9"><result status="valid" time="0.27" steps="232755"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="unicity_factors_prod_one&#39;vc" expl="VC for unicity_factors_prod_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="unicity_factors_prod_one&#39;vc.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(f i &lt;&gt; 0)">
   <goal name="unicity_factors_prod_one&#39;vc.0.0" expl="true case (postcondition)" proved="true">
   <transf name="assert" proved="true" arg1="(1&lt;   ind_iproduct (fun (i1:int) -&gt; power i1 (f @ i1)) 0 (bound + 1))">
    <goal name="unicity_factors_prod_one&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="ind_iproduct_sup_one">
     <goal name="unicity_factors_prod_one&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="0.26" steps="232707"/></proof>
     </goal>
     <goal name="unicity_factors_prod_one&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="unicity_factors_prod_one&#39;vc.0.0.0.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="unicity_factors_prod_one&#39;vc.0.0.0.1.0.0" expl="apply premises" proved="true">
       <transf name="case" proved="true" arg1="(k = 0)">
        <goal name="unicity_factors_prod_one&#39;vc.0.0.0.1.0.0.0" expl="apply premises (true case)" proved="true">
        <transf name="replace" proved="true" arg1="(f k)" arg2="0">
         <goal name="unicity_factors_prod_one&#39;vc.0.0.0.1.0.0.0.0" expl="apply premises (true case)" proved="true">
         <proof prover="9"><result status="valid" time="0.62" steps="252464"/></proof>
         </goal>
         <goal name="unicity_factors_prod_one&#39;vc.0.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="9"><result status="valid" time="0.60" steps="274733"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="unicity_factors_prod_one&#39;vc.0.0.0.1.0.0.1" expl="apply premises (false case)" proved="true">
        <proof prover="9"><result status="valid" time="0.72" steps="275316"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="unicity_factors_prod_one&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <transf name="exists" proved="true" arg1="i">
      <goal name="unicity_factors_prod_one&#39;vc.0.0.0.2.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="unicity_factors_prod_one&#39;vc.0.0.0.2.0.0" proved="true">
       <proof prover="9"><result status="valid" time="0.73" steps="274686"/></proof>
       </goal>
       <goal name="unicity_factors_prod_one&#39;vc.0.0.0.2.0.1" proved="true">
       <proof prover="9"><result status="valid" time="0.76" steps="274605"/></proof>
       </goal>
       <goal name="unicity_factors_prod_one&#39;vc.0.0.0.2.0.2" proved="true">
       <transf name="case" proved="true" arg1="(i = 1)">
        <goal name="unicity_factors_prod_one&#39;vc.0.0.0.2.0.2.0" expl="true case" proved="true">
        <proof prover="9"><result status="valid" time="0.30" steps="239602"/></proof>
        </goal>
        <goal name="unicity_factors_prod_one&#39;vc.0.0.0.2.0.2.1" expl="false case" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="unicity_factors_prod_one&#39;vc.0.0.0.2.0.2.1.0" expl="false case" proved="true">
         <proof prover="9"><result status="valid" time="0.74" steps="275450"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="unicity_factors_prod_one&#39;vc.0.0.1" expl="true case (postcondition)" proved="true">
    <proof prover="9"><result status="valid" time="0.76" steps="276303"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="unicity_factors_prod_one&#39;vc.0.1" expl="false case (postcondition)" proved="true">
   <proof prover="9"><result status="valid" time="0.26" steps="232687"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="unicity_factors_prod_pre&#39;vc" expl="VC for unicity_factors_prod_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="unicity_factors_prod_pre&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.57" steps="251430"/></proof>
  </goal>
  <goal name="unicity_factors_prod_pre&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.23" steps="233237"/></proof>
  </goal>
  <goal name="unicity_factors_prod_pre&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.89" steps="318862"/></proof>
  </goal>
  <goal name="unicity_factors_prod_pre&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.87" steps="319440"/></proof>
  </goal>
  <goal name="unicity_factors_prod_pre&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.87" steps="319721"/></proof>
  </goal>
  <goal name="unicity_factors_prod_pre&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.85" steps="320002"/></proof>
  </goal>
  <goal name="unicity_factors_prod_pre&#39;vc.6" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(b&lt;=a)">
   <goal name="unicity_factors_prod_pre&#39;vc.6.0" expl="asserted formula" proved="true">
   <proof prover="9"><result status="valid" time="0.72" steps="320135"/></proof>
   </goal>
   <goal name="unicity_factors_prod_pre&#39;vc.6.1" expl="precondition" proved="true">
   <proof prover="12"><result status="valid" time="0.15" steps="6420"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="unicity_factors_prod_pre&#39;vc.7" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.30" steps="272953"/></proof>
  </goal>
  <goal name="unicity_factors_prod_pre&#39;vc.8" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(b = ind_iproduct (fun (i:int) -&gt; power i (prime_factors b i)) 0 (bound + 1))">
   <goal name="unicity_factors_prod_pre&#39;vc.8.0" expl="asserted formula" proved="true">
   <transf name="apply" proved="true" arg1="Ensures2">
    <goal name="unicity_factors_prod_pre&#39;vc.8.0.0" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.92" steps="320941"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="unicity_factors_prod_pre&#39;vc.8.1" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="(ind_iproduct (fun (i:int) -&gt; power i (if i = b then 1 else 0)) 0
    (bound + 1))" arg2="(ind_iproduct (fun (i:int) -&gt; power i (prime_factors b i)) 0 (bound + 1))">
    <goal name="unicity_factors_prod_pre&#39;vc.8.1.0" expl="assertion" proved="true">
    <transf name="apply" proved="true" arg1="h">
    </transf>
    </goal>
    <goal name="unicity_factors_prod_pre&#39;vc.8.1.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="ind_iproduct_eq">
     <goal name="unicity_factors_prod_pre&#39;vc.8.1.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="unicity_factors_prod_pre&#39;vc.8.1.1.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="unicity_factors_prod_pre&#39;vc.8.1.1.0.0.0" expl="apply premises" proved="true">
       <transf name="eliminate_if" proved="true" >
        <goal name="unicity_factors_prod_pre&#39;vc.8.1.1.0.0.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="unicity_factors_prod_pre&#39;vc.8.1.1.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="0.86" steps="329035"/></proof>
         </goal>
         <goal name="unicity_factors_prod_pre&#39;vc.8.1.1.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="0.92" steps="330646"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="unicity_factors_prod_pre&#39;vc.9" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="unicity_div_rev_">
   <goal name="unicity_factors_prod_pre&#39;vc.9.0" expl="apply premises" proved="true">
   <proof prover="9"><result status="valid" time="0.31" steps="273180"/></proof>
   </goal>
   <goal name="unicity_factors_prod_pre&#39;vc.9.1" expl="apply premises" proved="true">
   <proof prover="9"><result status="valid" time="0.86" steps="320064"/></proof>
   </goal>
   <goal name="unicity_factors_prod_pre&#39;vc.9.2" expl="apply premises" proved="true">
   <proof prover="9"><result status="valid" time="0.48" steps="273162"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="unicity_factors_prod_pre&#39;vc.10" expl="assertion" proved="true">
  <transf name="case" proved="true" arg1="(f b = 0)">
   <goal name="unicity_factors_prod_pre&#39;vc.10.0" expl="true case (assertion)" proved="true">
   <transf name="assert" proved="true" arg1="(co_prime  b a)">
    <goal name="unicity_factors_prod_pre&#39;vc.10.0.0" expl="asserted formula" proved="true">
    <transf name="rewrite" proved="true" arg1="Requires">
     <goal name="unicity_factors_prod_pre&#39;vc.10.0.0.0" expl="asserted formula" proved="true">
     <transf name="instantiate" proved="true" arg1="div_iproduct_primes" arg2="bound,(fun (i:int) -&gt; (f i))">
      <goal name="unicity_factors_prod_pre&#39;vc.10.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
       <goal name="unicity_factors_prod_pre&#39;vc.10.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="unicity_factors_prod_pre&#39;vc.10.0.0.0.0.0.0" expl="destruct premise" proved="true">
        <proof prover="9"><result status="valid" time="0.74" steps="293934"/></proof>
        </goal>
        <goal name="unicity_factors_prod_pre&#39;vc.10.0.0.0.0.0.1" expl="asserted formula" proved="true">
        <transf name="destruct" proved="true" arg1="Hinst">
         <goal name="unicity_factors_prod_pre&#39;vc.10.0.0.0.0.0.1.0" expl="destruct premise" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="unicity_factors_prod_pre&#39;vc.10.0.0.0.0.0.1.0.0" expl="destruct premise" proved="true">
          <proof prover="9"><result status="valid" time="0.78" steps="294402"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="unicity_factors_prod_pre&#39;vc.10.0.0.0.0.0.1.1" expl="asserted formula" proved="true">
         <transf name="destruct" proved="true" arg1="Hinst">
          <goal name="unicity_factors_prod_pre&#39;vc.10.0.0.0.0.0.1.1.0" expl="destruct premise" proved="true">
          <proof prover="9"><result status="valid" time="0.74" steps="293914"/></proof>
          </goal>
          <goal name="unicity_factors_prod_pre&#39;vc.10.0.0.0.0.0.1.1.1" expl="asserted formula" proved="true">
          <transf name="destruct" proved="true" arg1="Hinst">
           <goal name="unicity_factors_prod_pre&#39;vc.10.0.0.0.0.0.1.1.1.0" expl="destruct premise" proved="true">
           <proof prover="9"><result status="valid" time="1.05" steps="322840"/></proof>
           </goal>
           <goal name="unicity_factors_prod_pre&#39;vc.10.0.0.0.0.0.1.1.1.1" expl="asserted formula" proved="true">
           <transf name="destruct" proved="true" arg1="Hinst">
            <goal name="unicity_factors_prod_pre&#39;vc.10.0.0.0.0.0.1.1.1.1.0" expl="asserted formula" proved="true">
            <transf name="apply" proved="true" arg1="Hinst">
             <goal name="unicity_factors_prod_pre&#39;vc.10.0.0.0.0.0.1.1.1.1.0.0" expl="apply premises" proved="true">
             <proof prover="9"><result status="valid" time="0.97" steps="323756"/></proof>
             </goal>
             <goal name="unicity_factors_prod_pre&#39;vc.10.0.0.0.0.0.1.1.1.1.0.1" expl="apply premises" proved="true">
             <proof prover="9"><result status="valid" time="0.71" steps="294236"/></proof>
             </goal>
             <goal name="unicity_factors_prod_pre&#39;vc.10.0.0.0.0.0.1.1.1.1.0.2" expl="apply premises" proved="true">
             <proof prover="9"><result status="valid" time="0.31" steps="273528"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="unicity_factors_prod_pre&#39;vc.10.0.1" expl="true case (assertion)" proved="true">
    <transf name="case" proved="true" arg1="(a=b)">
     <goal name="unicity_factors_prod_pre&#39;vc.10.0.1.0" expl="true case (assertion)" proved="true">
     <transf name="assert" proved="true" arg1="(not (co_prime a b))">
      <goal name="unicity_factors_prod_pre&#39;vc.10.0.1.0.0" expl="asserted formula" proved="true">
      <transf name="eliminate_definition" proved="true" >
       <goal name="unicity_factors_prod_pre&#39;vc.10.0.1.0.0.0" expl="asserted formula" proved="true">
       <transf name="rewrite" proved="true" arg1="co_prime&#39;def">
        <goal name="unicity_factors_prod_pre&#39;vc.10.0.1.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="case" proved="true" arg1="(a=1)">
         <goal name="unicity_factors_prod_pre&#39;vc.10.0.1.0.0.0.0.0" expl="true case (asserted formula)" proved="true">
         <proof prover="9"><result status="valid" time="0.33" steps="276374"/></proof>
         </goal>
         <goal name="unicity_factors_prod_pre&#39;vc.10.0.1.0.0.0.0.1" expl="false case (asserted formula)" proved="true">
         <transf name="assert" proved="true" arg1="(mem a (inter (divisors a) (divisors b)))">
          <goal name="unicity_factors_prod_pre&#39;vc.10.0.1.0.0.0.0.1.0" expl="asserted formula" proved="true">
          <proof prover="9"><result status="valid" time="0.92" steps="324692"/></proof>
          </goal>
          <goal name="unicity_factors_prod_pre&#39;vc.10.0.1.0.0.0.0.1.1" expl="false case (asserted formula)" proved="true">
          <proof prover="9"><result status="valid" time="0.74" steps="297639"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="unicity_factors_prod_pre&#39;vc.10.0.1.0.1" expl="true case (assertion)" proved="true">
      <proof prover="9"><result status="valid" time="0.73" steps="293981"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="unicity_factors_prod_pre&#39;vc.10.0.1.1" expl="false case (true case. assertion)" proved="true">
     <transf name="assert" proved="true" arg1="(not (co_prime a b))">
      <goal name="unicity_factors_prod_pre&#39;vc.10.0.1.1.0" expl="asserted formula" proved="true">
      <transf name="eliminate_definition" proved="true" >
       <goal name="unicity_factors_prod_pre&#39;vc.10.0.1.1.0.0" expl="asserted formula" proved="true">
       <transf name="rewrite" proved="true" arg1="co_prime&#39;def">
        <goal name="unicity_factors_prod_pre&#39;vc.10.0.1.1.0.0.0" expl="asserted formula" proved="true">
        <transf name="case" proved="true" arg1="(a=1)">
         <goal name="unicity_factors_prod_pre&#39;vc.10.0.1.1.0.0.0.0" expl="true case (asserted formula)" proved="true">
         <proof prover="9"><result status="valid" time="0.32" steps="276378"/></proof>
         </goal>
         <goal name="unicity_factors_prod_pre&#39;vc.10.0.1.1.0.0.0.1" expl="false case (asserted formula)" proved="true">
         <transf name="assert" proved="true" arg1="(mem a (inter (divisors a) (divisors b)))">
          <goal name="unicity_factors_prod_pre&#39;vc.10.0.1.1.0.0.0.1.0" expl="asserted formula" proved="true">
          <proof prover="9"><result status="valid" time="5.61" steps="1728619"/></proof>
          </goal>
          <goal name="unicity_factors_prod_pre&#39;vc.10.0.1.1.0.0.0.1.1" expl="false case (asserted formula)" proved="true">
          <proof prover="9"><result status="valid" time="0.72" steps="297655"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="unicity_factors_prod_pre&#39;vc.10.0.1.1.1" expl="false case (true case. assertion)" proved="true">
      <proof prover="9"><result status="valid" time="0.93" steps="323467"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="unicity_factors_prod_pre&#39;vc.10.1" expl="false case (assertion)" proved="true">
   <proof prover="9"><result status="valid" time="0.94" steps="322897"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="unicity_factors_prod_pre&#39;vc.11" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(forall divprod. a = b * divprod -&gt; divb = divprod)">
   <goal name="unicity_factors_prod_pre&#39;vc.11.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.42"/></proof>
   </goal>
   <goal name="unicity_factors_prod_pre&#39;vc.11.1" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="h">
    <goal name="unicity_factors_prod_pre&#39;vc.11.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="Requires">
     <goal name="unicity_factors_prod_pre&#39;vc.11.1.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(b
     * ind_iproduct
       (fun (i:int) -&gt; power i (if i = b then (f @ i) - 1 else f @ i)) 0
       (bound + 1))" arg2="(ind_iproduct (fun (i:int) -&gt; power i (if i = b then 1 else 0)) 0
    (bound + 1)     * ind_iproduct
       (fun (i:int) -&gt; power i (if i = b then (f @ i) - 1 else f @ i)) 0
       (bound + 1))">
      <goal name="unicity_factors_prod_pre&#39;vc.11.1.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="ind_iproduct_comp">
       <goal name="unicity_factors_prod_pre&#39;vc.11.1.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="0.56" steps="294118"/></proof>
       </goal>
       <goal name="unicity_factors_prod_pre&#39;vc.11.1.0.0.0.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="unicity_factors_prod_pre&#39;vc.11.1.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="unicity_factors_prod_pre&#39;vc.11.1.0.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="eliminate_if" proved="true" >
          <goal name="unicity_factors_prod_pre&#39;vc.11.1.0.0.0.1.0.0.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="unicity_factors_prod_pre&#39;vc.11.1.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="9"><result status="valid" time="6.31" steps="2051564"/></proof>
           </goal>
           <goal name="unicity_factors_prod_pre&#39;vc.11.1.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="9"><result status="valid" time="0.31" steps="276490"/></proof>
           </goal>
           <goal name="unicity_factors_prod_pre&#39;vc.11.1.0.0.0.1.0.0.0.2" expl="apply premises" proved="true">
           <proof prover="9"><result status="valid" time="0.34" steps="276503"/></proof>
           </goal>
           <goal name="unicity_factors_prod_pre&#39;vc.11.1.0.0.0.1.0.0.0.3" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.35"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="unicity_factors_prod_pre&#39;vc.11.1.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="assert" proved="true" arg1="(forall x. b* x =  ind_iproduct (fun (i:int) -&gt; power i (if i = b then 1 else 0)) 0
    (bound + 1) * x)">
       <goal name="unicity_factors_prod_pre&#39;vc.11.1.0.0.1.0" expl="asserted formula" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="unicity_factors_prod_pre&#39;vc.11.1.0.0.1.0.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="(forall x y z.  x= y -&gt; x*z= y*z)">
         <goal name="unicity_factors_prod_pre&#39;vc.11.1.0.0.1.0.0.0" expl="asserted formula" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="unicity_factors_prod_pre&#39;vc.11.1.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
          <proof prover="9"><result status="valid" time="0.48" steps="280676"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="unicity_factors_prod_pre&#39;vc.11.1.0.0.1.0.0.1" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="h1">
          <goal name="unicity_factors_prod_pre&#39;vc.11.1.0.0.1.0.0.1.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="Assert2">
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="unicity_factors_prod_pre&#39;vc.11.1.0.0.1.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="h">
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="unicity_factors_prod_pre&#39;vc.12" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="unicity_factors_prod_pre&#39;vc.12.0" expl="variant decrease" proved="true">
   <proof prover="9"><result status="valid" time="0.94" steps="323673"/></proof>
   </goal>
   <goal name="unicity_factors_prod_pre&#39;vc.12.1" expl="variant decrease" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="unicity_factors_prod_pre&#39;vc.12.1.0" expl="variant decrease" proved="true">
    <transf name="apply" proved="true" arg1="strict_subset_divisors">
     <goal name="unicity_factors_prod_pre&#39;vc.12.1.0.0" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="0.50" steps="317207"/></proof>
     </goal>
     <goal name="unicity_factors_prod_pre&#39;vc.12.1.0.1" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.69" steps="332783"/></proof>
     </goal>
     <goal name="unicity_factors_prod_pre&#39;vc.12.1.0.2" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_mem_divisors">
      <goal name="unicity_factors_prod_pre&#39;vc.12.1.0.2.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.35" steps="317207"/></proof>
      </goal>
      <goal name="unicity_factors_prod_pre&#39;vc.12.1.0.2.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.60"/></proof>
      </goal>
      <goal name="unicity_factors_prod_pre&#39;vc.12.1.0.2.2" expl="apply premises" proved="true">
      <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="a,divb,b,0">
       <goal name="unicity_factors_prod_pre&#39;vc.12.1.0.2.2.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="Hinst">
        <goal name="unicity_factors_prod_pre&#39;vc.12.1.0.2.2.0.0" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="0.38" steps="317291"/></proof>
        </goal>
        <goal name="unicity_factors_prod_pre&#39;vc.12.1.0.2.2.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.51"/></proof>
        </goal>
        <goal name="unicity_factors_prod_pre&#39;vc.12.1.0.2.2.0.2" expl="rewrite premises" proved="true">
        <proof prover="9"><result status="valid" time="0.49" steps="317293"/></proof>
        </goal>
        <goal name="unicity_factors_prod_pre&#39;vc.12.1.0.2.2.0.3" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.47"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="unicity_factors_prod_pre&#39;vc.13" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="unicity_factors_prod_pre&#39;vc.13.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.98" steps="324621"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="unicity_factors_prod_pre&#39;vc.14" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="unicity_factors_prod_pre&#39;vc.14.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.74" steps="295217"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="unicity_factors_prod_pre&#39;vc.15" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="unicity_factors_prod_pre&#39;vc.15.0" expl="precondition" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="unicity_factors_prod_pre&#39;vc.15.0.0" expl="VC for unicity_factors_prod_pre" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="unicity_factors_prod_pre&#39;vc.15.0.0.0" expl="precondition" proved="true">
     <proof prover="9"><result status="valid" time="0.72" steps="298069"/></proof>
     </goal>
     <goal name="unicity_factors_prod_pre&#39;vc.15.0.0.1" expl="precondition" proved="true">
     <proof prover="9"><result status="valid" time="0.42" steps="277155"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="unicity_factors_prod_pre&#39;vc.16" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="unicity_factors_prod_pre&#39;vc.16.0" expl="precondition" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="unicity_factors_prod_pre&#39;vc.16.0.0" expl="VC for unicity_factors_prod_pre" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="unicity_factors_prod_pre&#39;vc.16.0.0.0" expl="precondition" proved="true">
     <proof prover="9"><result status="valid" time="0.70" steps="298306"/></proof>
     </goal>
     <goal name="unicity_factors_prod_pre&#39;vc.16.0.0.1" expl="precondition" proved="true">
     <proof prover="9"><result status="valid" time="0.92" steps="330196"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="unicity_factors_prod_pre&#39;vc.17" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="unicity_factors_prod_pre&#39;vc.17.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.43"/></proof>
   </goal>
   <goal name="unicity_factors_prod_pre&#39;vc.17.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.31"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="unicity_factors_prod_pre&#39;vc.18" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Assert">
   <goal name="unicity_factors_prod_pre&#39;vc.18.0" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="unicity_factors_prod_pre&#39;vc.19" expl="assertion" proved="true">
  <transf name="case" proved="true" arg1="(prime_factors a b = 0)">
   <goal name="unicity_factors_prod_pre&#39;vc.19.0" expl="true case (assertion)" proved="true">
   <transf name="assert" proved="true" arg1="(co_prime b a)">
    <goal name="unicity_factors_prod_pre&#39;vc.19.0.0" expl="asserted formula" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="unicity_factors_prod_pre&#39;vc.19.0.0.0" expl="asserted formula" proved="true">
     <transf name="replace" proved="true" arg1="a" arg2="(ind_iproduct (fun (i:int) -&gt; power i (prime_factors a i)) 0 (bound + 1))">
      <goal name="unicity_factors_prod_pre&#39;vc.19.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="instantiate" proved="true" arg1="div_iproduct_primes" arg2="bound,(prime_factors a)">
       <goal name="unicity_factors_prod_pre&#39;vc.19.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="unicity_factors_prod_pre&#39;vc.19.0.0.0.0.0.0" expl="destruct premise" proved="true">
        <proof prover="9"><result status="valid" time="0.84" steps="340115"/></proof>
        </goal>
        <goal name="unicity_factors_prod_pre&#39;vc.19.0.0.0.0.0.1" expl="asserted formula" proved="true">
        <transf name="destruct" proved="true" arg1="Hinst">
         <goal name="unicity_factors_prod_pre&#39;vc.19.0.0.0.0.0.1.0" expl="destruct premise" proved="true">
         <proof prover="9"><result status="valid" time="6.13" steps="1516053"/></proof>
         </goal>
         <goal name="unicity_factors_prod_pre&#39;vc.19.0.0.0.0.0.1.1" expl="asserted formula" proved="true">
         <transf name="destruct" proved="true" arg1="Hinst">
          <goal name="unicity_factors_prod_pre&#39;vc.19.0.0.0.0.0.1.1.0" expl="destruct premise" proved="true">
          <proof prover="9"><result status="valid" time="6.19" steps="1511587"/></proof>
          </goal>
          <goal name="unicity_factors_prod_pre&#39;vc.19.0.0.0.0.0.1.1.1" expl="asserted formula" proved="true">
          <transf name="destruct" proved="true" arg1="Hinst">
           <goal name="unicity_factors_prod_pre&#39;vc.19.0.0.0.0.0.1.1.1.0" expl="destruct premise" proved="true">
           <proof prover="9"><result status="valid" time="1.24" steps="400356"/></proof>
           </goal>
           <goal name="unicity_factors_prod_pre&#39;vc.19.0.0.0.0.0.1.1.1.1" expl="asserted formula" proved="true">
           <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
            <goal name="unicity_factors_prod_pre&#39;vc.19.0.0.0.0.0.1.1.1.1.0" expl="asserted formula" proved="true">
            <transf name="apply" proved="true" arg1="Hinst">
             <goal name="unicity_factors_prod_pre&#39;vc.19.0.0.0.0.0.1.1.1.1.0.0" expl="apply premises" proved="true">
             <proof prover="9"><result status="valid" time="1.12" steps="373231"/></proof>
             </goal>
             <goal name="unicity_factors_prod_pre&#39;vc.19.0.0.0.0.0.1.1.1.1.0.1" expl="apply premises" proved="true">
             <proof prover="9"><result status="valid" time="0.78" steps="340320"/></proof>
             </goal>
             <goal name="unicity_factors_prod_pre&#39;vc.19.0.0.0.0.0.1.1.1.1.0.2" expl="apply premises" proved="true">
             <proof prover="9"><result status="valid" time="0.37" steps="317510"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="unicity_factors_prod_pre&#39;vc.19.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="factors_prod">
       <goal name="unicity_factors_prod_pre&#39;vc.19.0.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="0.50" steps="317320"/></proof>
       </goal>
       <goal name="unicity_factors_prod_pre&#39;vc.19.0.0.0.1.1" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="0.38" steps="317320"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="unicity_factors_prod_pre&#39;vc.19.0.1" expl="true case (assertion)" proved="true">
    <transf name="case" proved="true" arg1="(a=b)">
     <goal name="unicity_factors_prod_pre&#39;vc.19.0.1.0" expl="true case (assertion)" proved="true">
     <transf name="assert" proved="true" arg1="(not (co_prime a b))">
      <goal name="unicity_factors_prod_pre&#39;vc.19.0.1.0.0" expl="asserted formula" proved="true">
      <transf name="eliminate_definition" proved="true" >
       <goal name="unicity_factors_prod_pre&#39;vc.19.0.1.0.0.0" expl="asserted formula" proved="true">
       <transf name="rewrite" proved="true" arg1="co_prime&#39;def">
        <goal name="unicity_factors_prod_pre&#39;vc.19.0.1.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="case" proved="true" arg1="(a=1)">
         <goal name="unicity_factors_prod_pre&#39;vc.19.0.1.0.0.0.0.0" expl="true case (asserted formula)" proved="true">
         <proof prover="9"><result status="valid" time="0.35" steps="276676"/></proof>
         </goal>
         <goal name="unicity_factors_prod_pre&#39;vc.19.0.1.0.0.0.0.1" expl="false case (asserted formula)" proved="true">
         <transf name="assert" proved="true" arg1="(mem a (inter (divisors a) (divisors b)))">
          <goal name="unicity_factors_prod_pre&#39;vc.19.0.1.0.0.0.0.1.0" expl="asserted formula" proved="true">
          <proof prover="9"><result status="valid" time="0.97" steps="325935"/></proof>
          </goal>
          <goal name="unicity_factors_prod_pre&#39;vc.19.0.1.0.0.0.0.1.1" expl="false case (asserted formula)" proved="true">
          <proof prover="9"><result status="valid" time="0.78" steps="298143"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="unicity_factors_prod_pre&#39;vc.19.0.1.0.1" expl="true case (assertion)" proved="true">
      <proof prover="9"><result status="valid" time="0.71" steps="294476"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="unicity_factors_prod_pre&#39;vc.19.0.1.1" expl="false case (true case. assertion)" proved="true">
     <proof prover="9"><result status="valid" time="0.98" steps="325849"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="unicity_factors_prod_pre&#39;vc.19.1" expl="false case (assertion)" proved="true">
   <proof prover="9"><result status="valid" time="5.77" steps="1573771"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="unicity_factors_prod_pre&#39;vc.20" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(forall divprod. a = b * divprod -&gt; divb = divprod)">
   <goal name="unicity_factors_prod_pre&#39;vc.20.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.42"/></proof>
   </goal>
   <goal name="unicity_factors_prod_pre&#39;vc.20.1" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="h">
    <goal name="unicity_factors_prod_pre&#39;vc.20.1.0" expl="apply premises" proved="true">
    <transf name="assert" proved="true" arg1="(ind_iproduct (fun (i:int) -&gt; power i (prime_factors a i)) 0 (bound + 1) = ind_iproduct (fun (i:int) -&gt; power i (if i = b then 1 else 0)) 0 (bound + 1) * ind_iproduct
       (fun (i:int) -&gt;
         power i
         (if i = b then prime_factors a i - 1 else prime_factors a i))
       0 (bound + 1))">
     <goal name="unicity_factors_prod_pre&#39;vc.20.1.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="ind_iproduct_comp">
      <goal name="unicity_factors_prod_pre&#39;vc.20.1.0.0.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.64" steps="294613"/></proof>
      </goal>
      <goal name="unicity_factors_prod_pre&#39;vc.20.1.0.0.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="unicity_factors_prod_pre&#39;vc.20.1.0.0.1.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="unicity_factors_prod_pre&#39;vc.20.1.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="( power k (prime_factors a k))" arg2="(power k ((if k = b then 1 else 0) + (if k = b then prime_factors a k - 1 else (prime_factors a) @ k)))">
         <goal name="unicity_factors_prod_pre&#39;vc.20.1.0.0.1.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="goal_comm">
          <goal name="unicity_factors_prod_pre&#39;vc.20.1.0.0.1.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="power_sum">
           <goal name="unicity_factors_prod_pre&#39;vc.20.1.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="mult_eq">
            <goal name="unicity_factors_prod_pre&#39;vc.20.1.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="9"><result status="valid" time="0.42" steps="273625"/></proof>
            </goal>
            <goal name="unicity_factors_prod_pre&#39;vc.20.1.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="9"><result status="valid" time="0.85" steps="321351"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="unicity_factors_prod_pre&#39;vc.20.1.0.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="9"><result status="valid" time="0.75" steps="294717"/></proof>
           </goal>
           <goal name="unicity_factors_prod_pre&#39;vc.20.1.0.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
           <transf name="eliminate_if" proved="true" >
            <goal name="unicity_factors_prod_pre&#39;vc.20.1.0.0.1.0.0.0.0.2.0" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="unicity_factors_prod_pre&#39;vc.20.1.0.0.1.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
             <proof prover="9"><result status="valid" time="0.73" steps="297987"/></proof>
             </goal>
             <goal name="unicity_factors_prod_pre&#39;vc.20.1.0.0.1.0.0.0.0.2.0.1" expl="rewrite premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="unicity_factors_prod_pre&#39;vc.20.1.0.0.1.0.0.0.0.2.0.1.0" expl="rewrite premises" proved="true">
              <proof prover="9"><result status="valid" time="6.27" steps="2082380"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="unicity_factors_prod_pre&#39;vc.20.1.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="9"><result status="valid" time="1.00" steps="355916"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="unicity_factors_prod_pre&#39;vc.20.1.0.1" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(ind_iproduct (fun (i:int) -&gt; power i (if i = b then 1 else 0)) 0
     (bound + 1))" arg2="b" arg3="in" arg4="h">
      <goal name="unicity_factors_prod_pre&#39;vc.20.1.0.1.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(ind_iproduct (fun (i:int) -&gt; power i (prime_factors a i)) 0 (bound + 1))" arg2="a" arg3="in" arg4="h">
       <goal name="unicity_factors_prod_pre&#39;vc.20.1.0.1.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="h">
       </transf>
       </goal>
       <goal name="unicity_factors_prod_pre&#39;vc.20.1.0.1.0.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="goal_comm">
        <goal name="unicity_factors_prod_pre&#39;vc.20.1.0.1.0.1.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="Ensures1">
         <goal name="unicity_factors_prod_pre&#39;vc.20.1.0.1.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="0.31" steps="273737"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="unicity_factors_prod_pre&#39;vc.20.1.0.1.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="goal_comm">
       <goal name="unicity_factors_prod_pre&#39;vc.20.1.0.1.1.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="Assert4">
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="unicity_factors_prod_pre&#39;vc.21" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.31" steps="273634"/></proof>
  </goal>
  <goal name="unicity_factors_prod_pre&#39;vc.22" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.29" steps="273639"/></proof>
  </goal>
  <goal name="unicity_factors_prod_pre&#39;vc.23" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="unicity_factors_prod_pre&#39;vc.23.0" expl="variant decrease" proved="true">
   <proof prover="9"><result status="valid" time="0.91" steps="325319"/></proof>
   </goal>
   <goal name="unicity_factors_prod_pre&#39;vc.23.1" expl="variant decrease" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="unicity_factors_prod_pre&#39;vc.23.1.0" expl="variant decrease" proved="true">
    <transf name="apply" proved="true" arg1="strict_subset_divisors">
     <goal name="unicity_factors_prod_pre&#39;vc.23.1.0.0" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="0.36" steps="317509"/></proof>
     </goal>
     <goal name="unicity_factors_prod_pre&#39;vc.23.1.0.1" expl="apply premises" proved="true">
     <transf name="case" proved="true" arg1="(b=1)">
      <goal name="unicity_factors_prod_pre&#39;vc.23.1.0.1.0" expl="apply premises (true case)" proved="true">
      <proof prover="9"><result status="valid" time="0.80" steps="342163"/></proof>
      </goal>
      <goal name="unicity_factors_prod_pre&#39;vc.23.1.0.1.1" expl="apply premises (false case)" proved="true">
      <proof prover="0"><result status="valid" time="0.52"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="unicity_factors_prod_pre&#39;vc.23.1.0.2" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_mem_divisors">
      <goal name="unicity_factors_prod_pre&#39;vc.23.1.0.2.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.48" steps="317509"/></proof>
      </goal>
      <goal name="unicity_factors_prod_pre&#39;vc.23.1.0.2.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.56"/></proof>
      </goal>
      <goal name="unicity_factors_prod_pre&#39;vc.23.1.0.2.2" expl="apply premises" proved="true">
      <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="a,divb,b,0">
       <goal name="unicity_factors_prod_pre&#39;vc.23.1.0.2.2.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.48"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="unicity_factors_prod_pre&#39;vc.24" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="unicity_factors_prod_pre&#39;vc.24.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.96" steps="327869"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="unicity_factors_prod_pre&#39;vc.25" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="unicity_factors_prod_pre&#39;vc.25.0" expl="precondition" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="unicity_factors_prod_pre&#39;vc.25.0.0" expl="VC for unicity_factors_prod_pre" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="unicity_factors_prod_pre&#39;vc.25.0.0.0" expl="precondition" proved="true">
     <proof prover="9"><result status="valid" time="0.72" steps="298705"/></proof>
     </goal>
     <goal name="unicity_factors_prod_pre&#39;vc.25.0.0.1" expl="precondition" proved="true">
     <proof prover="9"><result status="valid" time="0.95" steps="333137"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="unicity_factors_prod_pre&#39;vc.26" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="unicity_factors_prod_pre&#39;vc.26.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.95" steps="326955"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="unicity_factors_prod_pre&#39;vc.27" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="unicity_factors_prod_pre&#39;vc.27.0" expl="precondition" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="unicity_factors_prod_pre&#39;vc.27.0.0" expl="VC for unicity_factors_prod_pre" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="unicity_factors_prod_pre&#39;vc.27.0.0.0" expl="precondition" proved="true">
     <proof prover="9"><result status="valid" time="0.58" steps="299141"/></proof>
     </goal>
     <goal name="unicity_factors_prod_pre&#39;vc.27.0.0.1" expl="precondition" proved="true">
     <proof prover="8"><result status="valid" time="0.49" steps="3005758"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="unicity_factors_prod_pre&#39;vc.28" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="unicity_factors_prod_pre&#39;vc.28.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.51"/></proof>
   </goal>
   <goal name="unicity_factors_prod_pre&#39;vc.28.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.35"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="unicity_factors_prod_pre&#39;vc.29" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="unicity_factors_prod_pre&#39;vc.29.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Assert">
    <goal name="unicity_factors_prod_pre&#39;vc.29.0.0" expl="precondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="unicity_factors_prod_pre&#39;vc.30" expl="assertion" proved="true">
  <transf name="eliminate_if" proved="true" >
   <goal name="unicity_factors_prod_pre&#39;vc.30.0" expl="VC for unicity_factors_prod_pre" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="unicity_factors_prod_pre&#39;vc.30.0.0" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.72" steps="301060"/></proof>
    </goal>
    <goal name="unicity_factors_prod_pre&#39;vc.30.0.1" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.92" steps="335137"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="unicity_factors_prod_pre&#39;vc.31" expl="assertion" proved="true">
  <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="H">
   <goal name="unicity_factors_prod_pre&#39;vc.31.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="Assert">
    <goal name="unicity_factors_prod_pre&#39;vc.31.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures">
     <goal name="unicity_factors_prod_pre&#39;vc.31.0.0.0" expl="assertion" proved="true">
     <transf name="case" proved="true" arg1="(i=b)">
      <goal name="unicity_factors_prod_pre&#39;vc.31.0.0.0.0" expl="true case (assertion)" proved="true">
      <proof prover="9"><result status="valid" time="0.94" steps="327053"/></proof>
      </goal>
      <goal name="unicity_factors_prod_pre&#39;vc.31.0.0.0.1" expl="false case (assertion)" proved="true">
      <proof prover="7"><result status="valid" time="0.25" steps="1200245"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="unicity_factors_prod_pre&#39;vc.32" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="unicity_factors_prod_pre&#39;vc.32.0" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(prime i)">
    <goal name="unicity_factors_prod_pre&#39;vc.32.0.0" expl="true case (postcondition)" proved="true">
    <transf name="instantiate" proved="true" arg1="unicity_factors_prod_one" arg2="bound,f">
     <goal name="unicity_factors_prod_pre&#39;vc.32.0.0.0" expl="true case (postcondition)" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="unicity_factors_prod_pre&#39;vc.32.0.0.0.0" expl="destruct premise" proved="true">
      <proof prover="9"><result status="valid" time="0.43" steps="251364"/></proof>
      </goal>
      <goal name="unicity_factors_prod_pre&#39;vc.32.0.0.0.1" expl="true case (postcondition)" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="unicity_factors_prod_pre&#39;vc.32.0.0.0.1.0" expl="destruct premise" proved="true">
       <proof prover="9"><result status="valid" time="0.44" steps="251399"/></proof>
       </goal>
       <goal name="unicity_factors_prod_pre&#39;vc.32.0.0.0.1.1" expl="true case (postcondition)" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="unicity_factors_prod_pre&#39;vc.32.0.0.0.1.1.0" expl="destruct premise" proved="true">
        <proof prover="9"><result status="valid" time="0.25" steps="233211"/></proof>
        </goal>
        <goal name="unicity_factors_prod_pre&#39;vc.32.0.0.0.1.1.1" expl="true case (postcondition)" proved="true">
        <transf name="destruct" proved="true" arg1="Hinst">
         <goal name="unicity_factors_prod_pre&#39;vc.32.0.0.0.1.1.1.0" expl="destruct premise" proved="true">
         <proof prover="9"><result status="valid" time="0.56" steps="251409"/></proof>
         </goal>
         <goal name="unicity_factors_prod_pre&#39;vc.32.0.0.0.1.1.1.1" expl="true case (postcondition)" proved="true">
         <transf name="destruct" proved="true" arg1="Hinst">
          <goal name="unicity_factors_prod_pre&#39;vc.32.0.0.0.1.1.1.1.0" expl="destruct premise" proved="true">
          <proof prover="9"><result status="valid" time="0.75" steps="276750"/></proof>
          </goal>
          <goal name="unicity_factors_prod_pre&#39;vc.32.0.0.0.1.1.1.1.1" expl="true case (postcondition)" proved="true">
          <transf name="destruct" proved="true" arg1="Hinst">
           <goal name="unicity_factors_prod_pre&#39;vc.32.0.0.0.1.1.1.1.1.0" expl="destruct premise" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="unicity_factors_prod_pre&#39;vc.32.0.0.0.1.1.1.1.1.0.0" expl="destruct premise" proved="true">
            <proof prover="9"><result status="valid" time="0.74" steps="275317"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="unicity_factors_prod_pre&#39;vc.32.0.0.0.1.1.1.1.1.1" expl="true case (postcondition)" proved="true">
           <proof prover="9"><result status="valid" time="0.72" steps="276266"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="unicity_factors_prod_pre&#39;vc.32.0.1" expl="false case (postcondition)" proved="true">
    <proof prover="9"><result status="valid" time="0.71" steps="276070"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="unicity_factors_prod_pre&#39;vc.32.1" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.57" steps="296228"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="unicity_factors_prod&#39;vc" expl="VC for unicity_factors_prod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="unicity_factors_prod&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="unicity_factors_prod&#39;vc.0.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="Requires1">
    <goal name="unicity_factors_prod&#39;vc.0.0.0" expl="assertion" proved="true">
    <transf name="apply" proved="true" arg1="ind_iproduct_strict_pos_one">
     <goal name="unicity_factors_prod&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="unicity_factors_prod&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="unicity_factors_prod&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="case" proved="true" arg1="(k = 0)">
        <goal name="unicity_factors_prod&#39;vc.0.0.0.0.0.0.0" expl="apply premises (true case)" proved="true">
        <transf name="replace" proved="true" arg1="(f k)" arg2="0">
         <goal name="unicity_factors_prod&#39;vc.0.0.0.0.0.0.0.0" expl="apply premises (true case)" proved="true">
         <proof prover="9"><result status="valid" time="0.46" steps="253339"/></proof>
         </goal>
         <goal name="unicity_factors_prod&#39;vc.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <transf name="assert" proved="true" arg1="(0 &lt;= f 0 &lt;= prime_factors c 0)">
          <goal name="unicity_factors_prod&#39;vc.0.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
          <proof prover="9"><result status="valid" time="0.79" steps="275257"/></proof>
          </goal>
          <goal name="unicity_factors_prod&#39;vc.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
          <proof prover="9"><result status="valid" time="0.81" steps="275400"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="unicity_factors_prod&#39;vc.0.0.0.0.0.0.1" expl="apply premises (false case)" proved="true">
        <proof prover="9"><result status="valid" time="0.74" steps="275392"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="unicity_factors_prod&#39;vc.0.1" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="c" arg2="(ind_iproduct (fun (i:int) -&gt; power i (prime_factors c   i)) 0 (c + 1))">
    <goal name="unicity_factors_prod&#39;vc.0.1.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="Requires1">
     <goal name="unicity_factors_prod&#39;vc.0.1.0.0" expl="assertion" proved="true">
     <transf name="apply" proved="true" arg1="ind_iproduct_inf">
      <goal name="unicity_factors_prod&#39;vc.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="unicity_factors_prod&#39;vc.0.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="unicity_factors_prod&#39;vc.0.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="case" proved="true" arg1="(k = 0)">
         <goal name="unicity_factors_prod&#39;vc.0.1.0.0.0.0.0.0" expl="apply premises (true case)" proved="true">
         <transf name="replace" proved="true" arg1="(f k)" arg2="0">
          <goal name="unicity_factors_prod&#39;vc.0.1.0.0.0.0.0.0.0" expl="apply premises (true case)" proved="true">
          <proof prover="9"><result status="valid" time="0.46" steps="253330"/></proof>
          </goal>
          <goal name="unicity_factors_prod&#39;vc.0.1.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <transf name="assert" proved="true" arg1="(0 &lt;= f 0 &lt;= prime_factors c 0)">
           <goal name="unicity_factors_prod&#39;vc.0.1.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
           <proof prover="9"><result status="valid" time="0.79" steps="275257"/></proof>
           </goal>
           <goal name="unicity_factors_prod&#39;vc.0.1.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
           <proof prover="9"><result status="valid" time="0.75" steps="275400"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="unicity_factors_prod&#39;vc.0.1.0.0.0.0.0.1" expl="apply premises (false case)" proved="true">
         <proof prover="9"><result status="valid" time="0.77" steps="275488"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="unicity_factors_prod&#39;vc.0.1.0.0.0.1" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="unicity_factors_prod&#39;vc.0.1.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="case" proved="true" arg1="(f k =0)">
         <goal name="unicity_factors_prod&#39;vc.0.1.0.0.0.1.0.0" expl="apply premises (true case)" proved="true">
         <proof prover="9"><result status="valid" time="0.63" steps="277572"/></proof>
         </goal>
         <goal name="unicity_factors_prod&#39;vc.0.1.0.0.0.1.0.1" expl="apply premises (false case)" proved="true">
         <proof prover="9"><result status="valid" time="0.75" steps="277326"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="unicity_factors_prod&#39;vc.0.1.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="factors_prod">
     <goal name="unicity_factors_prod&#39;vc.0.1.1.0" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="0.25" steps="233602"/></proof>
     </goal>
     <goal name="unicity_factors_prod&#39;vc.0.1.1.1" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="0.26" steps="233609"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="unicity_factors_prod&#39;vc.1" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(0 &lt;= f i &lt;= prime_factors c i)">
   <goal name="unicity_factors_prod&#39;vc.1.0" expl="asserted formula" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="unicity_factors_prod&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <proof prover="9"><result status="valid" time="0.73" steps="275690"/></proof>
    </goal>
    <goal name="unicity_factors_prod&#39;vc.1.0.1" expl="asserted formula" proved="true">
    <proof prover="9"><result status="valid" time="0.73" steps="276571"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="unicity_factors_prod&#39;vc.1.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.78" steps="276750"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="unicity_factors_prod&#39;vc.2" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(0 &lt;= f i &lt;= prime_factors c i)">
   <goal name="unicity_factors_prod&#39;vc.2.0" expl="asserted formula" proved="true">
   <proof prover="9"><result status="valid" time="0.78" steps="276604"/></proof>
   </goal>
   <goal name="unicity_factors_prod&#39;vc.2.1" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(prime_factors c i = 0)">
    <goal name="unicity_factors_prod&#39;vc.2.1.0" expl="asserted formula" proved="true">
    <proof prover="9"><result status="valid" time="0.65" steps="276633"/></proof>
    </goal>
    <goal name="unicity_factors_prod&#39;vc.2.1.1" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.48" steps="252057"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="unicity_factors_prod&#39;vc.3" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(prime_factors c 1 = 0)">
   <goal name="unicity_factors_prod&#39;vc.3.0" expl="asserted formula" proved="true">
   <proof prover="9"><result status="valid" time="0.62" steps="276199"/></proof>
   </goal>
   <goal name="unicity_factors_prod&#39;vc.3.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.66" steps="276273"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="unicity_factors_prod&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.61" steps="275834"/></proof>
  </goal>
  <goal name="unicity_factors_prod&#39;vc.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="unicity_factors_prod&#39;vc.5.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.27" steps="233854"/></proof>
   </goal>
   <goal name="unicity_factors_prod&#39;vc.5.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.26" steps="233854"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="unicity_factors_prod&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.61" steps="277408"/></proof>
  </goal>
  <goal name="unicity_factors_prod&#39;vc.7" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="divisors_by_factor_decomp_pre_rec">
   <goal name="unicity_factors_prod&#39;vc.7.0" expl="apply premises" proved="true">
   <proof prover="9"><result status="valid" time="0.26" steps="233678"/></proof>
   </goal>
   <goal name="unicity_factors_prod&#39;vc.7.1" expl="apply premises" proved="true">
   <proof prover="9"><result status="valid" time="0.28" steps="233678"/></proof>
   </goal>
   <goal name="unicity_factors_prod&#39;vc.7.2" expl="apply premises" proved="true">
   <proof prover="9"><result status="valid" time="0.64" steps="277784"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="unicity_factors_prod_&#39;vc" expl="VC for unicity_factors_prod_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="unicity_factors_prod_&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.27" steps="233897"/></proof>
  </goal>
  <goal name="unicity_factors_prod_&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.79" steps="275001"/></proof>
  </goal>
  <goal name="unicity_factors_prod_&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.67" steps="277533"/></proof>
  </goal>
  <goal name="unicity_factors_prod_&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.81" steps="277589"/></proof>
  </goal>
  <goal name="unicity_factors_prod_&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.87" steps="314845"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="unicity_factors_prod_gen&#39;vc" expl="VC for unicity_factors_prod_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="unicity_factors_prod_gen&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.43" steps="252324"/></proof>
  </goal>
  <goal name="unicity_factors_prod_gen&#39;vc.1" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="unicity_factors_prod_gen&#39;vc.1.0" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(f k )" arg2="0">
    <goal name="unicity_factors_prod_gen&#39;vc.1.0.0" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.44" steps="252993"/></proof>
    </goal>
    <goal name="unicity_factors_prod_gen&#39;vc.1.0.1" expl="equality hypothesis" proved="true">
    <transf name="assert" proved="true" arg1="(prime_factors c k = 0)">
     <goal name="unicity_factors_prod_gen&#39;vc.1.0.1.0" expl="asserted formula" proved="true">
     <proof prover="9"><result status="valid" time="0.75" steps="278696"/></proof>
     </goal>
     <goal name="unicity_factors_prod_gen&#39;vc.1.0.1.1" expl="equality hypothesis" proved="true">
     <proof prover="9"><result status="valid" time="0.74" steps="278742"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="unicity_factors_prod_gen&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.29" steps="234480"/></proof>
  </goal>
  <goal name="unicity_factors_prod_gen&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.78" steps="277947"/></proof>
  </goal>
  <goal name="unicity_factors_prod_gen&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.60" steps="278910"/></proof>
  </goal>
  <goal name="unicity_factors_prod_gen&#39;vc.5" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures2">
   <goal name="unicity_factors_prod_gen&#39;vc.5.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="mult_one">
    <goal name="unicity_factors_prod_gen&#39;vc.5.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="Ensures">
    </transf>
    </goal>
    <goal name="unicity_factors_prod_gen&#39;vc.5.0.1" expl="rewrite premises" proved="true">
    <transf name="apply" proved="true" arg1="Ensures1">
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="gcd&#39;vc" expl="VC for gcd" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="gcd&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.26" steps="208293"/></proof>
  </goal>
  <goal name="gcd&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.28" steps="250724"/></proof>
  </goal>
  <goal name="gcd&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.24" steps="234510"/></proof>
  </goal>
  <goal name="gcd&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.31" steps="268364"/></proof>
  </goal>
  <goal name="gcd&#39;vc.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="gcd&#39;vc.4.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.58" steps="252663"/></proof>
   </goal>
   <goal name="gcd&#39;vc.4.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.22"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gcd&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.25" steps="234797"/></proof>
  </goal>
  <goal name="gcd&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.32" steps="268651"/></proof>
  </goal>
  <goal name="gcd&#39;vc.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.29"/></proof>
  </goal>
  <goal name="gcd&#39;vc.8" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.29" steps="235084"/></proof>
  </goal>
  <goal name="gcd&#39;vc.9" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.32" steps="268938"/></proof>
  </goal>
  <goal name="gcd&#39;vc.10" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="gcd&#39;vc.10.0" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(prime_factors a k = 0)">
    <goal name="gcd&#39;vc.10.0.0" expl="asserted formula" proved="true">
    <proof prover="9"><result status="valid" time="0.62" steps="281158"/></proof>
    </goal>
    <goal name="gcd&#39;vc.10.0.1" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="1.05" steps="288760"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="gcd&#39;vc.11" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.28" steps="235221"/></proof>
  </goal>
  <goal name="gcd&#39;vc.12" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.32" steps="269075"/></proof>
  </goal>
  <goal name="gcd&#39;vc.13" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="gcd&#39;vc.13.0" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(prime_factors b k = 0)">
    <goal name="gcd&#39;vc.13.0.0" expl="asserted formula" proved="true">
    <proof prover="9"><result status="valid" time="0.80" steps="281376"/></proof>
    </goal>
    <goal name="gcd&#39;vc.13.0.1" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="1.11" steps="289085"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="gcd&#39;vc.14" expl="assertion" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="gcd&#39;vc.14.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="res&#39;def">
    <goal name="gcd&#39;vc.14.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures3">
     <goal name="gcd&#39;vc.14.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="mult_one">
      <goal name="gcd&#39;vc.14.0.0.0.0" expl="assertion" proved="true">
      <proof prover="7"><result status="valid" time="0.86" steps="1105550"/></proof>
      </goal>
      <goal name="gcd&#39;vc.14.0.0.0.1" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="Ensures1">
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="gcd&#39;vc.15" expl="assertion" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="gcd&#39;vc.15.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="res&#39;def">
    <goal name="gcd&#39;vc.15.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures2">
     <goal name="gcd&#39;vc.15.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="mult_one">
      <goal name="gcd&#39;vc.15.0.0.0.0" expl="assertion" proved="true">
      <proof prover="7"><result status="valid" time="0.85" steps="1110950"/></proof>
      </goal>
      <goal name="gcd&#39;vc.15.0.0.0.1" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="Ensures">
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="gcd&#39;vc.16" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.26" steps="235516"/></proof>
  </goal>
  <goal name="gcd&#39;vc.17" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.31" steps="269370"/></proof>
  </goal>
  <goal name="gcd&#39;vc.18" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.26" steps="235566"/></proof>
  </goal>
  <goal name="gcd&#39;vc.19" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="gcd&#39;vc.19.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.50"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gcd&#39;vc.20" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="gcd&#39;vc.20.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="Assert1">
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="gcd&#39;vc.21" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="gcd&#39;vc.21.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.84" steps="282733"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gcd&#39;vc.22" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.31" steps="269060"/></proof>
  </goal>
  <goal name="gcd&#39;vc.23" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.45" steps="269436"/></proof>
  </goal>
  <goal name="gcd&#39;vc.24" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.31" steps="269110"/></proof>
  </goal>
  <goal name="gcd&#39;vc.25" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="gcd&#39;vc.25.0" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(0 &lt;= prime_factors a i)">
    <goal name="gcd&#39;vc.25.0.0" expl="asserted formula" proved="true">
    <proof prover="9"><result status="valid" time="5.04" steps="1470146"/></proof>
    </goal>
    <goal name="gcd&#39;vc.25.0.1" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(0 &lt;= prime_factors b i)">
     <goal name="gcd&#39;vc.25.0.1.0" expl="asserted formula" proved="true">
     <proof prover="9"><result status="valid" time="4.99" steps="1476485"/></proof>
     </goal>
     <goal name="gcd&#39;vc.25.0.1.1" expl="precondition" proved="true">
     <proof prover="9"><result status="valid" time="0.97" steps="319425"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="gcd&#39;vc.26" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="gcd&#39;vc.26.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="Assert">
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="gcd&#39;vc.27" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="gcd&#39;vc.27.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.94" steps="319686"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gcd&#39;vc.28" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.30" steps="269126"/></proof>
  </goal>
  <goal name="gcd&#39;vc.29" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.35" steps="269498"/></proof>
  </goal>
  <goal name="gcd&#39;vc.30" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="unicity_factors_prod_pre" arg2="result,(a*b),(fun i -&gt; min (prime_factors a i) (prime_factors b i))">
   <goal name="gcd&#39;vc.30.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="gcd&#39;vc.30.0.0" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="gcd&#39;vc.30.0.0.0" expl="destruct premise" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="gcd&#39;vc.30.0.0.0.0" expl="destruct premise" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="gcd&#39;vc.30.0.0.0.0.0" expl="destruct premise" proved="true">
       <transf name="replace" proved="true" arg1="(prime_factors a i)" arg2="0">
        <goal name="gcd&#39;vc.30.0.0.0.0.0.0" expl="destruct premise" proved="true">
        <proof prover="9"><result status="valid" time="1.10" steps="363034"/></proof>
        </goal>
        <goal name="gcd&#39;vc.30.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="7"><result status="valid" time="0.23" steps="1269073"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="gcd&#39;vc.30.0.0.1" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="gcd&#39;vc.30.0.0.1.0" expl="destruct premise" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="gcd&#39;vc.30.0.0.1.0.0" expl="destruct premise" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="gcd&#39;vc.30.0.0.1.0.0.0" expl="destruct premise" proved="true">
        <proof prover="9"><result status="valid" time="5.43" steps="1454168"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="gcd&#39;vc.30.0.0.1.1" expl="postcondition" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="gcd&#39;vc.30.0.0.1.1.0" expl="destruct premise" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="gcd&#39;vc.30.0.0.1.1.0.0" expl="destruct premise" proved="true">
        <proof prover="9"><result status="valid" time="5.42" steps="1453069"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="gcd&#39;vc.30.0.0.1.1.1" expl="postcondition" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="gcd&#39;vc.30.0.0.1.1.1.0" expl="destruct premise" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="gcd&#39;vc.30.0.0.1.1.1.0.0" expl="destruct premise" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="gcd&#39;vc.30.0.0.1.1.1.0.0.0" expl="destruct premise" proved="true">
          <proof prover="9"><result status="valid" time="5.85" steps="1462525"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="gcd&#39;vc.30.0.0.1.1.1.1" expl="postcondition" proved="true">
        <transf name="destruct" proved="true" arg1="Hinst">
         <goal name="gcd&#39;vc.30.0.0.1.1.1.1.0" expl="destruct premise" proved="true">
         <transf name="assert" proved="true" arg1="(mem result (divisors (a * b)))">
          <goal name="gcd&#39;vc.30.0.0.1.1.1.1.0.0" expl="asserted formula" proved="true">
          <transf name="replace" proved="true" arg1="result" arg2="res">
           <goal name="gcd&#39;vc.30.0.0.1.1.1.1.0.0.0" expl="asserted formula" proved="true">
           <proof prover="12"><result status="valid" time="0.26" steps="12912"/></proof>
           </goal>
           <goal name="gcd&#39;vc.30.0.0.1.1.1.1.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="9"><result status="valid" time="1.04" steps="362857"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="gcd&#39;vc.30.0.0.1.1.1.1.0.1" expl="destruct premise" proved="true">
          <proof prover="12"><result status="valid" time="0.29" steps="12976"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="gcd&#39;vc.30.0.0.1.1.1.1.1" expl="postcondition" proved="true">
         <transf name="destruct" proved="true" arg1="Hinst">
          <goal name="gcd&#39;vc.30.0.0.1.1.1.1.1.0" expl="destruct premise" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="gcd&#39;vc.30.0.0.1.1.1.1.1.0.0" expl="destruct premise" proved="true">
           <transf name="eliminate_definition" proved="true" >
            <goal name="gcd&#39;vc.30.0.0.1.1.1.1.1.0.0.0" expl="destruct premise" proved="true">
            <transf name="apply" proved="true" arg1="result&#39;def">
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="gcd&#39;vc.30.0.0.1.1.1.1.1.1" expl="postcondition" proved="true">
          <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
           <goal name="gcd&#39;vc.30.0.0.1.1.1.1.1.1.0" expl="postcondition" proved="true">
           <transf name="apply" proved="true" arg1="Hinst">
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="gcd&#39;vc.31" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="result" arg2="res">
   <goal name="gcd&#39;vc.31.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_mem_divisors">
    <goal name="gcd&#39;vc.31.0.0" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.31" steps="269329"/></proof>
    </goal>
    <goal name="gcd&#39;vc.31.0.1" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.93" steps="318042"/></proof>
    </goal>
    <goal name="gcd&#39;vc.31.0.2" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.98" steps="318472"/></proof>
    </goal>
   </transf>
   <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="res,a,((div res (a*b))*b),0">
    <goal name="gcd&#39;vc.31.0.0" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="0.32" steps="269487"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="gcd&#39;vc.31.1" expl="equality hypothesis" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="gcd&#39;vc.31.1.0" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="res&#39;def">
     <goal name="gcd&#39;vc.31.1.0.0" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="result&#39;def">
      <goal name="gcd&#39;vc.31.1.0.0.0" expl="equality hypothesis" proved="true">
      <transf name="compute_specified" proved="true" >
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="gcd&#39;vc.32" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="result" arg2="res">
   <goal name="gcd&#39;vc.32.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="res,a,((div res (a*b))*b),0">
    <goal name="gcd&#39;vc.32.0.0" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="0.32" steps="269498"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="gcd&#39;vc.32.1" expl="equality hypothesis" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="gcd&#39;vc.32.1.0" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="res&#39;def">
     <goal name="gcd&#39;vc.32.1.0.0" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="result&#39;def">
      <goal name="gcd&#39;vc.32.1.0.0.0" expl="equality hypothesis" proved="true">
      <transf name="compute_specified" proved="true" >
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="gcd&#39;vc.33" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="gcd&#39;vc.33.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="j" arg2="(ind_iproduct
    (fun (i:int) -&gt; power i (( fun k -&gt; prime_factors j k) i)) 0
    ((a * b) + 1))">
    <goal name="gcd&#39;vc.33.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="unicity_factors_prod_gen">
     <goal name="gcd&#39;vc.33.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="gcd&#39;vc.33.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="5.41" steps="1535857"/></proof>
      </goal>
      <goal name="gcd&#39;vc.33.0.0.0.1" expl="apply premises" proved="true">
      <transf name="instantiate" proved="true" arg1="mem_divisors_trans" arg2="result,a,(a*b)">
       <goal name="gcd&#39;vc.33.0.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="3.54"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="gcd&#39;vc.33.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="gcd&#39;vc.33.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="0.54" steps="3009411"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="gcd&#39;vc.33.0.0.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="gcd&#39;vc.33.0.0.2.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="gcd&#39;vc.33.0.0.2.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="( prime_factors j i &lt;= prime_factors a i
)">
        <goal name="gcd&#39;vc.33.0.0.2.0.0.0" expl="asserted formula" proved="true">
        <proof prover="9"><result status="valid" time="0.98" steps="323425"/></proof>
        </goal>
        <goal name="gcd&#39;vc.33.0.0.2.0.0.1" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="( prime_factors j i &lt;= prime_factors b i
)">
         <goal name="gcd&#39;vc.33.0.0.2.0.0.1.0" expl="asserted formula" proved="true">
         <proof prover="8"><result status="valid" time="0.55" steps="2865982"/></proof>
         </goal>
         <goal name="gcd&#39;vc.33.0.0.2.0.0.1.1" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="Ensures2">
          <goal name="gcd&#39;vc.33.0.0.2.0.0.1.1.0" expl="apply premises" proved="true">
          <proof prover="9"><result status="valid" time="0.83" steps="324085"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="gcd&#39;vc.33.0.1" expl="equality hypothesis" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="gcd&#39;vc.33.0.1.0" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="factors_prod">
      <goal name="gcd&#39;vc.33.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.93" steps="321069"/></proof>
      </goal>
      <goal name="gcd&#39;vc.33.0.1.0.1" expl="apply premises" proved="true">
      <transf name="instantiate" proved="true" arg1="mem_divisors_trans" arg2="result,a,(a*b)">
       <goal name="gcd&#39;vc.33.0.1.0.1.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="3.56"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="gcd_prime_factors&#39;vc" expl="VC for gcd_prime_factors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="gcd_prime_factors&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.70" steps="248216"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="scm&#39;vc" expl="VC for scm" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="scm&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.23" steps="208981"/></proof>
  </goal>
  <goal name="scm&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.29" steps="251369"/></proof>
  </goal>
  <goal name="scm&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="scm&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="a" arg2="( ind_iproduct (fun (i:int) -&gt; power i (prime_factors a i)) 0 (a*b + 1))">
    <goal name="scm&#39;vc.2.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="scm&#39;vc.2.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="res&#39;def">
      <goal name="scm&#39;vc.2.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="ind_iproduct_inf">
       <goal name="scm&#39;vc.2.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="scm&#39;vc.2.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="scm&#39;vc.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="1.50" steps="460707"/></proof>
         </goal>
         <goal name="scm&#39;vc.2.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="case" proved="true" arg1="(k = 0)">
          <goal name="scm&#39;vc.2.0.0.0.0.0.0.1.0" expl="apply premises (true case)" proved="true">
          <transf name="replace" proved="true" arg1="(max (prime_factors a k) (prime_factors b k))" arg2="0">
           <goal name="scm&#39;vc.2.0.0.0.0.0.0.1.0.0" expl="apply premises (true case)" proved="true">
           <proof prover="9"><result status="valid" time="0.84" steps="279714"/></proof>
           </goal>
           <goal name="scm&#39;vc.2.0.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
           <transf name="replace" proved="true" arg1="(prime_factors a k)" arg2="0">
            <goal name="scm&#39;vc.2.0.0.0.0.0.0.1.0.1.0" expl="equality hypothesis" proved="true">
            <transf name="replace" proved="true" arg1="(prime_factors b k)" arg2="0">
             <goal name="scm&#39;vc.2.0.0.0.0.0.0.1.0.1.0.0" expl="equality hypothesis" proved="true">
             <proof prover="9"><result status="valid" time="0.81" steps="277873"/></proof>
             </goal>
             <goal name="scm&#39;vc.2.0.0.0.0.0.0.1.0.1.0.1" expl="equality hypothesis" proved="true">
             <proof prover="9"><result status="valid" time="0.75" steps="278326"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="scm&#39;vc.2.0.0.0.0.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
            <proof prover="9"><result status="valid" time="0.77" steps="278326"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="scm&#39;vc.2.0.0.0.0.0.0.1.1" expl="apply premises (false case)" proved="true">
          <transf name="case" proved="true" arg1="( (prime_factors a k) = 0)">
           <goal name="scm&#39;vc.2.0.0.0.0.0.0.1.1.0" expl="apply premises (false case. true case)" proved="true">
           <proof prover="9"><result status="valid" time="0.74" steps="280384"/></proof>
           </goal>
           <goal name="scm&#39;vc.2.0.0.0.0.0.0.1.1.1" expl="apply premises (false case)" proved="true">
           <proof prover="9"><result status="valid" time="0.73" steps="280623"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="scm&#39;vc.2.0.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="factors_prod">
     <goal name="scm&#39;vc.2.0.1.0" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="0.26" steps="235179"/></proof>
     </goal>
     <goal name="scm&#39;vc.2.0.1.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.24"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="scm&#39;vc.2.1" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(a*b)" arg2="(ind_iproduct
  (fun (i:int) -&gt; power i ((prime_factors a i) + (prime_factors b i))) 0
  ((a * b) + 1))">
    <goal name="scm&#39;vc.2.1.0" expl="postcondition" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="scm&#39;vc.2.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="res&#39;def">
      <goal name="scm&#39;vc.2.1.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="ind_iproduct_inf">
       <goal name="scm&#39;vc.2.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="scm&#39;vc.2.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="scm&#39;vc.2.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="2.38" steps="657833"/></proof>
         </goal>
         <goal name="scm&#39;vc.2.1.0.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="assert" proved="true" arg1="((max (prime_factors a k) (prime_factors b k)) &lt;= (prime_factors a k + prime_factors b k))">
          <goal name="scm&#39;vc.2.1.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
          <proof prover="0"><result status="valid" time="2.88"/></proof>
          </goal>
          <goal name="scm&#39;vc.2.1.0.0.0.0.0.1.1" expl="apply premises" proved="true">
          <proof prover="9"><result status="valid" time="0.76" steps="282130"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="scm&#39;vc.2.1.1" expl="equality hypothesis" proved="true">
    <transf name="instantiate" proved="true" arg1="factors_prod" arg2="(a*b)">
     <goal name="scm&#39;vc.2.1.1.0" expl="equality hypothesis" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="scm&#39;vc.2.1.1.0.0" expl="destruct premise" proved="true">
      <proof prover="0"><result status="valid" time="0.29"/></proof>
      </goal>
      <goal name="scm&#39;vc.2.1.1.0.1" expl="equality hypothesis" proved="true">
      <transf name="instantiate" proved="true" arg1="Hinst" arg2="(a*b)">
       <goal name="scm&#39;vc.2.1.1.0.1.0" expl="equality hypothesis" proved="true">
       <transf name="replace" proved="true" arg1="(ind_iproduct
    (fun (i:int) -&gt; power i (prime_factors a i + prime_factors b i)) 0
    ((a * b) + 1))" arg2="( ind_iproduct (fun (i:int) -&gt; power i (prime_factors (a * b) i)) 0
    ((a * b) + 1))">
        <goal name="scm&#39;vc.2.1.1.0.1.0.0" expl="equality hypothesis" proved="true">
        <proof prover="9"><result status="valid" time="0.85" steps="279192"/></proof>
        </goal>
        <goal name="scm&#39;vc.2.1.1.0.1.0.1" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="ind_iproduct_eq">
         <goal name="scm&#39;vc.2.1.1.0.1.0.1.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="scm&#39;vc.2.1.1.0.1.0.1.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="scm&#39;vc.2.1.1.0.1.0.1.0.0.0" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="0.51" steps="2450911"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="scm&#39;vc.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="scm&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="b" arg2="( ind_iproduct (fun (i:int) -&gt; power i (prime_factors b i)) 0 (a*b + 1))">
    <goal name="scm&#39;vc.3.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="scm&#39;vc.3.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="res&#39;def">
      <goal name="scm&#39;vc.3.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="ind_iproduct_inf">
       <goal name="scm&#39;vc.3.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="scm&#39;vc.3.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="scm&#39;vc.3.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="1.48" steps="461888"/></proof>
         </goal>
         <goal name="scm&#39;vc.3.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="case" proved="true" arg1="(k = 0)">
          <goal name="scm&#39;vc.3.0.0.0.0.0.0.1.0" expl="apply premises (true case)" proved="true">
          <transf name="replace" proved="true" arg1="(max (prime_factors a k) (prime_factors b k))" arg2="0">
           <goal name="scm&#39;vc.3.0.0.0.0.0.0.1.0.0" expl="apply premises (true case)" proved="true">
           <proof prover="9"><result status="valid" time="0.78" steps="280548"/></proof>
           </goal>
           <goal name="scm&#39;vc.3.0.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
           <transf name="replace" proved="true" arg1="(prime_factors a k)" arg2="0">
            <goal name="scm&#39;vc.3.0.0.0.0.0.0.1.0.1.0" expl="equality hypothesis" proved="true">
            <transf name="replace" proved="true" arg1="(prime_factors b k)" arg2="0">
             <goal name="scm&#39;vc.3.0.0.0.0.0.0.1.0.1.0.0" expl="equality hypothesis" proved="true">
             <proof prover="9"><result status="valid" time="0.67" steps="278730"/></proof>
             </goal>
             <goal name="scm&#39;vc.3.0.0.0.0.0.0.1.0.1.0.1" expl="equality hypothesis" proved="true">
             <proof prover="9"><result status="valid" time="0.65" steps="279169"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="scm&#39;vc.3.0.0.0.0.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
            <proof prover="9"><result status="valid" time="0.65" steps="279169"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="scm&#39;vc.3.0.0.0.0.0.0.1.1" expl="apply premises (false case)" proved="true">
          <transf name="case" proved="true" arg1="( (prime_factors b k) = 0)">
           <goal name="scm&#39;vc.3.0.0.0.0.0.0.1.1.0" expl="apply premises (false case. true case)" proved="true">
           <proof prover="9"><result status="valid" time="0.74" steps="281252"/></proof>
           </goal>
           <goal name="scm&#39;vc.3.0.0.0.0.0.0.1.1.1" expl="apply premises (false case)" proved="true">
           <proof prover="9"><result status="valid" time="0.73" steps="281520"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="scm&#39;vc.3.0.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="factors_prod">
     <goal name="scm&#39;vc.3.0.1.0" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="0.38" steps="235235"/></proof>
     </goal>
     <goal name="scm&#39;vc.3.0.1.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.26"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="scm&#39;vc.3.1" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.27" steps="235235"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="scm&#39;vc.4" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="scm&#39;vc.4.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.59" steps="253471"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="scm&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.26" steps="235402"/></proof>
  </goal>
  <goal name="scm&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.27" steps="235405"/></proof>
  </goal>
  <goal name="scm&#39;vc.7" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.27" steps="235583"/></proof>
  </goal>
  <goal name="scm&#39;vc.8" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="scm&#39;vc.8.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.42" steps="269387"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="scm&#39;vc.9" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.59" steps="253909"/></proof>
  </goal>
  <goal name="scm&#39;vc.10" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="scm&#39;vc.10.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.28"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="scm&#39;vc.11" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="scm&#39;vc.11.0" expl="precondition" proved="true">
   <transf name="case" proved="true" arg1="(max (prime_factors a i) (prime_factors b i) = prime_factors a i)">
    <goal name="scm&#39;vc.11.0.0" expl="true case (precondition)" proved="true">
    <proof prover="8"><result status="valid" time="0.78" steps="2488457"/></proof>
    </goal>
    <goal name="scm&#39;vc.11.0.1" expl="false case (precondition)" proved="true">
    <proof prover="8"><result status="valid" time="0.79" steps="2489041"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="scm&#39;vc.12" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.41" steps="269189"/></proof>
  </goal>
  <goal name="scm&#39;vc.13" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.30" steps="269565"/></proof>
  </goal>
  <goal name="scm&#39;vc.14" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.30" steps="269240"/></proof>
  </goal>
  <goal name="scm&#39;vc.15" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.29" steps="269616"/></proof>
  </goal>
  <goal name="scm&#39;vc.16" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="scm&#39;vc.16.0" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(prime_factors a i)" arg2="0">
    <goal name="scm&#39;vc.16.0.0" expl="precondition" proved="true">
    <transf name="replace" proved="true" arg1="(prime_factors b i)" arg2="0">
     <goal name="scm&#39;vc.16.0.0.0" expl="precondition" proved="true">
     <proof prover="9"><result status="valid" time="0.93" steps="315553"/></proof>
     </goal>
     <goal name="scm&#39;vc.16.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="set_prime_factors_over">
      <goal name="scm&#39;vc.16.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.32" steps="269330"/></proof>
      </goal>
      <goal name="scm&#39;vc.16.0.0.1.1" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="(b&lt;=a*b )">
       <goal name="scm&#39;vc.16.0.0.1.1.0" expl="asserted formula" proved="true">
       <proof prover="9"><result status="valid" time="0.67" steps="289072"/></proof>
       </goal>
       <goal name="scm&#39;vc.16.0.0.1.1.1" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="0.69" steps="289108"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="scm&#39;vc.16.0.1" expl="equality hypothesis" proved="true">
    <transf name="assert" proved="true" arg1="(a&lt;=a*b )">
     <goal name="scm&#39;vc.16.0.1.0" expl="asserted formula" proved="true">
     <proof prover="9"><result status="valid" time="0.72" steps="289072"/></proof>
     </goal>
     <goal name="scm&#39;vc.16.0.1.1" expl="equality hypothesis" proved="true">
     <proof prover="9"><result status="valid" time="0.90" steps="316758"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="scm&#39;vc.17" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="scm&#39;vc.17.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="5.17" steps="1448868"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="scm&#39;vc.18" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="scm&#39;vc.18.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="5.11" steps="1447922"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="scm&#39;vc.19" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="scm&#39;vc.19.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="5.43" steps="1454366"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="scm&#39;vc.20" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(ind_iproduct
     (fun (i:int) -&gt; power i (max (prime_factors a i) (prime_factors b i)))
     0 ((a * b) + 1))" arg2="res">
   <goal name="scm&#39;vc.20.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="scm&#39;vc.20.0.0" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.72" steps="289459"/></proof>
    </goal>
    <goal name="scm&#39;vc.20.0.1" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.33" steps="269718"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="scm&#39;vc.20.1" expl="equality hypothesis" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="scm&#39;vc.20.1.0" expl="equality hypothesis" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="scm&#39;vc.20.1.0.0" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="res&#39;def">
      <goal name="scm&#39;vc.20.1.0.0.0" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="ind_iproduct_eq">
       <goal name="scm&#39;vc.20.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="scm&#39;vc.21" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
  </transf>
  </goal>
  <goal name="scm&#39;vc.22" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="scm&#39;vc.22.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.30" steps="269446"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="scm&#39;vc.23" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.66" steps="289294"/></proof>
  </goal>
  <goal name="scm&#39;vc.24" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.31" steps="269684"/></proof>
  </goal>
  <goal name="scm&#39;vc.25" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.66" steps="289564"/></proof>
  </goal>
  <goal name="scm&#39;vc.26" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.32" steps="269908"/></proof>
  </goal>
  <goal name="scm&#39;vc.27" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="scm&#39;vc.27.0" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(prime_factors a k)" arg2="0">
    <goal name="scm&#39;vc.27.0.0" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.68" steps="290214"/></proof>
    </goal>
    <goal name="scm&#39;vc.27.0.1" expl="equality hypothesis" proved="true">
    <proof prover="9"><result status="valid" time="0.96" steps="319247"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="scm&#39;vc.28" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.33" steps="270017"/></proof>
  </goal>
  <goal name="scm&#39;vc.29" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="scm&#39;vc.29.0" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(prime_factors b k)" arg2="0">
    <goal name="scm&#39;vc.29.0.0" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.72" steps="290347"/></proof>
    </goal>
    <goal name="scm&#39;vc.29.0.1" expl="equality hypothesis" proved="true">
    <proof prover="9"><result status="valid" time="0.94" steps="319371"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="scm&#39;vc.30" expl="assertion" proved="true">
  <transf name="instantiate" proved="true" arg1="factors_prod" arg2="j">
   <goal name="scm&#39;vc.30.0" expl="assertion" proved="true">
   <transf name="destruct" proved="true" arg1="Hinst">
    <goal name="scm&#39;vc.30.0.0" expl="destruct premise" proved="true">
    <proof prover="9"><result status="valid" time="0.44" steps="270179"/></proof>
    </goal>
    <goal name="scm&#39;vc.30.0.1" expl="assertion" proved="true">
    <transf name="instantiate" proved="true" arg1="Hinst" arg2="(max res j)">
     <goal name="scm&#39;vc.30.0.1.0" expl="assertion" proved="true">
     <transf name="instantiate" proved="true" arg1="factors_prod" arg2="res">
      <goal name="scm&#39;vc.30.0.1.0.0" expl="assertion" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="scm&#39;vc.30.0.1.0.0.0" expl="destruct premise" proved="true">
       <proof prover="9"><result status="valid" time="0.69" steps="290366"/></proof>
       </goal>
       <goal name="scm&#39;vc.30.0.1.0.0.1" expl="assertion" proved="true">
       <transf name="instantiate" proved="true" arg1="Hinst" arg2="(max res j)">
        <goal name="scm&#39;vc.30.0.1.0.0.1.0" expl="assertion" proved="true">
        <transf name="assert" proved="true" arg1="(ind_iproduct (fun (i:int) -&gt; power i (prime_factors res i)) 0
    (max res j + 1) &lt;=  ind_iproduct (fun (i:int) -&gt; power i (prime_factors j i)) 0
    (max res j + 1))">
         <goal name="scm&#39;vc.30.0.1.0.0.1.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="ind_iproduct_inf">
          <goal name="scm&#39;vc.30.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="scm&#39;vc.30.0.1.0.0.1.0.0.0.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="scm&#39;vc.30.0.1.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="case" proved="true" arg1="(k=0)">
             <goal name="scm&#39;vc.30.0.1.0.0.1.0.0.0.0.0.0" expl="apply premises (true case)" proved="true">
             <transf name="replace" proved="true" arg1="(prime_factors res k)" arg2="0">
              <goal name="scm&#39;vc.30.0.1.0.0.1.0.0.0.0.0.0.0" expl="apply premises (true case)" proved="true">
              <proof prover="9"><result status="valid" time="0.59" steps="292766"/></proof>
              </goal>
              <goal name="scm&#39;vc.30.0.1.0.0.1.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
              <proof prover="9"><result status="valid" time="0.88" steps="323658"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="scm&#39;vc.30.0.1.0.0.1.0.0.0.0.0.1" expl="apply premises (false case)" proved="true">
             <proof prover="9"><result status="valid" time="0.90" steps="325115"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="scm&#39;vc.30.0.1.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(ind_iproduct
    (fun (i1:int) -&gt;
      power i1 (max (prime_factors a i1) (prime_factors b i1)))
    0 ((a * b) + 1))" arg2="res" arg3="in" arg4="Ensures4">
             <goal name="scm&#39;vc.30.0.1.0.0.1.0.0.0.0.1.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="Ensures4">
              <goal name="scm&#39;vc.30.0.1.0.0.1.0.0.0.0.1.0.0" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="scm&#39;vc.30.0.1.0.0.1.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
               <transf name="case" proved="true" arg1="(max (prime_factors a k) (prime_factors b k)  = 0)">
                <goal name="scm&#39;vc.30.0.1.0.0.1.0.0.0.0.1.0.0.0.0" expl="apply premises (true case)" proved="true">
                <transf name="case" proved="true" arg1="(k=0)">
                 <goal name="scm&#39;vc.30.0.1.0.0.1.0.0.0.0.1.0.0.0.0.0" expl="apply premises (true case)" proved="true">
                 <proof prover="9"><result status="valid" time="5.44" steps="1508608"/></proof>
                 </goal>
                 <goal name="scm&#39;vc.30.0.1.0.0.1.0.0.0.0.1.0.0.0.0.1" expl="apply premises (false case. true case)" proved="true">
                 <proof prover="9"><result status="valid" time="0.87" steps="326146"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="scm&#39;vc.30.0.1.0.0.1.0.0.0.0.1.0.0.0.1" expl="apply premises (false case)" proved="true">
                <transf name="apply" proved="true" arg1="power_leq">
                 <goal name="scm&#39;vc.30.0.1.0.0.1.0.0.0.0.1.0.0.0.1.0" expl="apply premises" proved="true">
                 <proof prover="9"><result status="valid" time="0.31" steps="270645"/></proof>
                 </goal>
                 <goal name="scm&#39;vc.30.0.1.0.0.1.0.0.0.0.1.0.0.0.1.1" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="scm&#39;vc.30.0.1.0.0.1.0.0.0.0.1.0.0.0.1.1.0" proved="true">
                  <proof prover="9"><result status="valid" time="6.09" steps="1537507"/></proof>
                  </goal>
                  <goal name="scm&#39;vc.30.0.1.0.0.1.0.0.0.0.1.0.0.0.1.1.1" proved="true">
                  <proof prover="0"><result status="valid" time="1.12"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="scm&#39;vc.30.0.1.0.0.1.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
             <proof prover="9"><result status="valid" time="1.02" steps="324985"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="scm&#39;vc.30.0.1.0.0.1.0.1" expl="assertion" proved="true">
         <transf name="replace" proved="true" arg1="(ind_iproduct (fun (i:int) -&gt; power i (prime_factors res i)) 0
  (max res j + 1))" arg2="res" arg3="in" arg4="h">
          <goal name="scm&#39;vc.30.0.1.0.0.1.0.1.0" expl="assertion" proved="true">
          <transf name="replace" proved="true" arg1="(ind_iproduct (fun (i:int) -&gt; power i (prime_factors j i)) 0
     (max res j + 1))" arg2="j" arg3="in" arg4="h">
           <goal name="scm&#39;vc.30.0.1.0.0.1.0.1.0.0" expl="assertion" proved="true">
           <proof prover="9"><result status="valid" time="0.30" steps="270678"/></proof>
           </goal>
           <goal name="scm&#39;vc.30.0.1.0.0.1.0.1.0.1" expl="equality hypothesis" proved="true">
           <transf name="apply" proved="true" arg1="goal_comm">
            <goal name="scm&#39;vc.30.0.1.0.0.1.0.1.0.1.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="Hinst2">
             <goal name="scm&#39;vc.30.0.1.0.0.1.0.1.0.1.0.0" expl="apply premises" proved="true">
             <proof prover="9"><result status="valid" time="0.94" steps="323840"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="scm&#39;vc.30.0.1.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="goal_comm">
           <goal name="scm&#39;vc.30.0.1.0.0.1.0.1.1.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="Hinst1">
            <goal name="scm&#39;vc.30.0.1.0.0.1.0.1.1.0.0" expl="apply premises" proved="true">
            <proof prover="9"><result status="valid" time="0.91" steps="323967"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="scm&#39;vc.31" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="res" arg2="(ind_iproduct
    (fun (i2:int) -&gt;
      power i2 (max (prime_factors a i2) (prime_factors b i2)))
    0 ((a * b) + 1))">
   <goal name="scm&#39;vc.31.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures4">
    <goal name="scm&#39;vc.31.0.0" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="0.78" steps="290632"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="scm&#39;vc.31.1" expl="equality hypothesis" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="scm&#39;vc.31.1.0" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="res&#39;def">
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="scm&#39;vc.32" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="unicity_factors_prod" arg2="a,(res),(fun i -&gt; (prime_factors a i) )">
   <goal name="scm&#39;vc.32.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="Hinst">
    <goal name="scm&#39;vc.32.0.0" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.72" steps="290600"/></proof>
    </goal>
    <goal name="scm&#39;vc.32.0.1" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="scm&#39;vc.32.0.1.0" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="5.62" steps="1552249"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="scm&#39;vc.32.0.2" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="scm&#39;vc.32.0.2.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="factors_prod">
      <goal name="scm&#39;vc.32.0.2.0.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.31" steps="270561"/></proof>
      </goal>
      <goal name="scm&#39;vc.32.0.2.0.1" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.31" steps="270561"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="scm&#39;vc.32.0.3" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="scm&#39;vc.32.0.3.0" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="5.64" steps="1560765"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="scm&#39;vc.33" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="unicity_factors_prod" arg2="b,(res),(fun i -&gt; (prime_factors b i) )">
   <goal name="scm&#39;vc.33.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="Hinst">
    <goal name="scm&#39;vc.33.0.0" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.60" steps="290617"/></proof>
    </goal>
    <goal name="scm&#39;vc.33.0.1" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="scm&#39;vc.33.0.1.0" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="5.38" steps="1611905"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="scm&#39;vc.33.0.2" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="scm&#39;vc.33.0.2.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="factors_prod">
      <goal name="scm&#39;vc.33.0.2.0.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.32" steps="270572"/></proof>
      </goal>
      <goal name="scm&#39;vc.33.0.2.0.1" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.45" steps="270572"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="scm&#39;vc.33.0.3" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="scm&#39;vc.33.0.3.0" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="5.37" steps="1587373"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="scm&#39;vc.34" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="unicity_factors_prod" arg2="res,j,(fun i -&gt; prime_factors res i )">
   <goal name="scm&#39;vc.34.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="Hinst">
    <goal name="scm&#39;vc.34.0.0" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.32" steps="270637"/></proof>
    </goal>
    <goal name="scm&#39;vc.34.0.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="scm&#39;vc.34.0.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="scm&#39;vc.34.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="5.58" steps="1551292"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="scm&#39;vc.34.0.2" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="scm&#39;vc.34.0.2.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="factors_prod">
      <goal name="scm&#39;vc.34.0.2.0.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.54" steps="290767"/></proof>
      </goal>
      <goal name="scm&#39;vc.34.0.2.0.1" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.95" steps="324703"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="scm&#39;vc.34.0.3" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="scm&#39;vc.34.0.3.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="scm&#39;vc.34.0.3.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="Ensures2">
       <goal name="scm&#39;vc.34.0.3.0.0.0" expl="apply premises" proved="true">
       <transf name="case" proved="true" arg1="(max (prime_factors a i) (prime_factors b i)  =  (prime_factors a i))">
        <goal name="scm&#39;vc.34.0.3.0.0.0.0" expl="apply premises (true case)" proved="true">
        <proof prover="9"><result status="valid" time="5.30" steps="1526730"/></proof>
        </goal>
        <goal name="scm&#39;vc.34.0.3.0.0.0.1" expl="apply premises (false case)" proved="true">
        <proof prover="9"><result status="valid" time="5.70" steps="1647198"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="divisors_mult&#39;vc" expl="VC for divisors_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="divisors_mult&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.28" steps="251399"/></proof>
  </goal>
  <goal name="divisors_mult&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.28" steps="251403"/></proof>
  </goal>
  <goal name="divisors_mult&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.50" steps="2557821"/></proof>
  </goal>
  <goal name="divisors_mult&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.29" steps="251410"/></proof>
  </goal>
  <goal name="divisors_mult&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.29" steps="251414"/></proof>
  </goal>
  <goal name="divisors_mult&#39;vc.5" expl="precondition" proved="true">
  <proof prover="12"><result status="valid" time="0.18" steps="5885"/></proof>
  </goal>
  <goal name="divisors_mult&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.69" steps="296431"/></proof>
  </goal>
  <goal name="divisors_mult&#39;vc.7" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="divisors_mult&#39;vc.7.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.67" steps="296506"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="prime_factors_to_div&#39;vc" expl="VC for prime_factors_to_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="prime_factors_to_div&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.67" steps="293839"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="prime_factors_not_prime&#39;vc" expl="VC for prime_factors_not_prime" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="prime_factors_not_prime&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.56" steps="248905"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="prime_factors_not_one&#39;vc" expl="VC for prime_factors_not_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="prime_factors_not_one&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.55" steps="248233"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="prime_prime_factors&#39;vc" expl="VC for prime_prime_factors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="prime_prime_factors&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.68" steps="277533"/></proof>
  </goal>
  <goal name="prime_prime_factors&#39;vc.1" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="prime_prime_factors&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.53" steps="254750"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prime_prime_factors&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.74" steps="279063"/></proof>
  </goal>
  <goal name="prime_prime_factors&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.76" steps="279861"/></proof>
  </goal>
  <goal name="prime_prime_factors&#39;vc.4" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="prime_prime_factors&#39;vc.4.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.58" steps="254668"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prime_prime_factors&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.61" steps="280672"/></proof>
  </goal>
  <goal name="prime_prime_factors&#39;vc.6" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="prime_prime_factors&#39;vc.6.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.58" steps="279116"/></proof>
   </goal>
   <goal name="prime_prime_factors&#39;vc.6.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.27" steps="236687"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prime_prime_factors&#39;vc.7" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="prime_prime_factors&#39;vc.7.0" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="prime_prime_factors&#39;vc.7.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures">
     <goal name="prime_prime_factors&#39;vc.7.0.0.0" expl="precondition" proved="true">
     <proof prover="9"><result status="valid" time="0.84" steps="282783"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prime_prime_factors&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.37"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mem_div_by_fact&#39;vc" expl="VC for mem_div_by_fact" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mem_div_by_fact&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.24" steps="210088"/></proof>
  </goal>
  <goal name="mem_div_by_fact&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.33" steps="293992"/></proof>
  </goal>
  <goal name="mem_div_by_fact&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.95" steps="339026"/></proof>
  </goal>
  <goal name="mem_div_by_fact&#39;vc.3" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="mem_div_by_fact&#39;vc.3.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.95" steps="340954"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mem_div_by_fact&#39;vc.4" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ind_iproduct
   (fun (i:int) -&gt;
     power i (((fun (y0:int) (y1:int) -&gt; prime_factors y0 y1) @ a) @ i))
   0 (c + 1))" arg2="a" arg3="in" arg4="Ensures">
   <goal name="mem_div_by_fact&#39;vc.4.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.47" steps="293988"/></proof>
   </goal>
   <goal name="mem_div_by_fact&#39;vc.4.1" expl="equality hypothesis" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="mem_div_by_fact&#39;vc.4.1.0" expl="equality hypothesis" proved="true">
    <transf name="instantiate" proved="true" arg1="factors_prod" arg2="a">
     <goal name="mem_div_by_fact&#39;vc.4.1.0.0" expl="equality hypothesis" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="mem_div_by_fact&#39;vc.4.1.0.0.0" expl="destruct premise" proved="true">
      <proof prover="9"><result status="valid" time="0.47" steps="294049"/></proof>
      </goal>
      <goal name="mem_div_by_fact&#39;vc.4.1.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="instantiate" proved="true" arg1="Hinst" arg2="(max a c)">
       <goal name="mem_div_by_fact&#39;vc.4.1.0.0.1.0" expl="equality hypothesis" proved="true">
       <transf name="instantiate" proved="true" arg1="ind_iproduct_trans" arg2="(fun (i:int) -&gt; power i (prime_factors a i)),0,(c+1),(max a c + 1)">
        <goal name="mem_div_by_fact&#39;vc.4.1.0.0.1.0.0" expl="equality hypothesis" proved="true">
        <transf name="destruct" proved="true" arg1="Hinst">
         <goal name="mem_div_by_fact&#39;vc.4.1.0.0.1.0.0.0" expl="destruct premise" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="mem_div_by_fact&#39;vc.4.1.0.0.1.0.0.0.0" proved="true">
          <proof prover="9"><result status="valid" time="0.74" steps="314492"/></proof>
          </goal>
          <goal name="mem_div_by_fact&#39;vc.4.1.0.0.1.0.0.0.1" proved="true">
          <proof prover="9"><result status="valid" time="0.95" steps="342168"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="mem_div_by_fact&#39;vc.4.1.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
         <transf name="rewrite" proved="true" arg1="mult_one" arg2="in" arg3="Hinst">
          <goal name="mem_div_by_fact&#39;vc.4.1.0.0.1.0.0.1.0" expl="equality hypothesis" proved="true">
          <transf name="replace" proved="true" arg1="(ind_iproduct (fun (i:int) -&gt; power i (prime_factors a i)) 0 (c + 1))" arg2="(ind_iproduct (fun (i:int) -&gt; power i (prime_factors a i)) 0 (max a c + 1))">
           <goal name="mem_div_by_fact&#39;vc.4.1.0.0.1.0.0.1.0.0" expl="equality hypothesis" proved="true">
           <transf name="apply" proved="true" arg1="goal_comm">
            <goal name="mem_div_by_fact&#39;vc.4.1.0.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="Hinst1">
             <goal name="mem_div_by_fact&#39;vc.4.1.0.0.1.0.0.1.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="9"><result status="valid" time="0.88" steps="343235"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="mem_div_by_fact&#39;vc.4.1.0.0.1.0.0.1.0.1" expl="equality hypothesis" proved="true">
           <transf name="apply" proved="true" arg1="goal_comm">
            <goal name="mem_div_by_fact&#39;vc.4.1.0.0.1.0.0.1.0.1.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="Hinst">
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="mem_div_by_fact&#39;vc.4.1.0.0.1.0.0.1.1" expl="rewrite premises" proved="true">
          <transf name="apply" proved="true" arg1="ind_iproduct_one">
           <goal name="mem_div_by_fact&#39;vc.4.1.0.0.1.0.0.1.1.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="mem_div_by_fact&#39;vc.4.1.0.0.1.0.0.1.1.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="mem_div_by_fact&#39;vc.4.1.0.0.1.0.0.1.1.0.0.0" expl="apply premises" proved="true">
             <proof prover="9"><result status="valid" time="5.47" steps="1566520"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="div_prime&#39;vc" expl="VC for div_prime" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="div_prime&#39;vc.0" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.50" steps="248646"/></proof>
  </goal>
  <goal name="div_prime&#39;vc.1" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.52" steps="248917"/></proof>
  </goal>
  <goal name="div_prime&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.54" steps="227975"/></proof>
  </goal>
  <goal name="div_prime&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.24" steps="236544"/></proof>
  </goal>
  <goal name="div_prime&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.77" steps="280946"/></proof>
  </goal>
  <goal name="div_prime&#39;vc.5" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(i
   = ind_iproduct (fun (i1:int) -&gt; power i1 (prime_factors i i1)) 0 (a + 1))">
   <goal name="div_prime&#39;vc.5.0" expl="asserted formula" proved="true">
   <transf name="apply" proved="true" arg1="Ensures">
    <goal name="div_prime&#39;vc.5.0.0" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.43" steps="254796"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="div_prime&#39;vc.5.1" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(ind_iproduct
    (fun (i1:int) -&gt; power i1 ((fun (j:int) -&gt; if j = i then 1 else 0) @ i1))
    0 (a + 1))" arg2="(ind_iproduct (fun (i1:int) -&gt; power i1 (prime_factors i i1)) 0 (a + 1))">
    <goal name="div_prime&#39;vc.5.1.0" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.74" steps="281785"/></proof>
    </goal>
    <goal name="div_prime&#39;vc.5.1.1" expl="equality hypothesis" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="div_prime&#39;vc.5.1.1.0" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="ind_iproduct_eq">
      <goal name="div_prime&#39;vc.5.1.1.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="div_prime&#39;vc.5.1.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="0.69" steps="285120"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="div_prime&#39;vc.6" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="div_prime&#39;vc.6.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.15" steps="605762"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="div_prime&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.33" steps="269907"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="not_co_prime_itself&#39;vc" expl="VC for not_co_prime_itself" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="not_co_prime_itself&#39;vc.0" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(mem a (divisors a))">
   <goal name="not_co_prime_itself&#39;vc.0.0" expl="asserted formula" proved="true">
   <proof prover="9"><result status="valid" time="0.85" steps="293057"/></proof>
   </goal>
   <goal name="not_co_prime_itself&#39;vc.0.1" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.62" steps="273727"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="not_co_prime_itself&#39;vc.1" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="not_co_prime_itself&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="1.32" steps="488538"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="co_prime_gcd&#39;vc" expl="VC for co_prime_gcd" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="co_prime_gcd&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="co_prime_gcd&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="gcd_prime_factors">
    <goal name="co_prime_gcd&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(0 &lt; prime_factors a i)">
     <goal name="co_prime_gcd&#39;vc.0.0.0.0" expl="true case (postcondition)" proved="true">
     <transf name="case" proved="true" arg1="(0 &lt; prime_factors b i)">
      <goal name="co_prime_gcd&#39;vc.0.0.0.0.0" expl="true case (postcondition)" proved="true">
      <transf name="assert" proved="true" arg1="(mem i (inter (divisors a) (divisors b)))">
       <goal name="co_prime_gcd&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="9"><result status="valid" time="5.13" steps="1417152"/></proof>
       </goal>
       <goal name="co_prime_gcd&#39;vc.0.0.0.0.0.1" expl="true case (postcondition)" proved="true">
       <transf name="case" proved="true" arg1="(0 &lt; prime_factors (gcd a b) i)">
        <goal name="co_prime_gcd&#39;vc.0.0.0.0.0.1.0" expl="true case (postcondition)" proved="true">
        <transf name="assert" proved="true" arg1="(mem i (inter (divisors a) (divisors b)))">
         <goal name="co_prime_gcd&#39;vc.0.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="0.35" steps="292373"/></proof>
         </goal>
         <goal name="co_prime_gcd&#39;vc.0.0.0.0.0.1.0.1" expl="true case (postcondition)" proved="true">
         <transf name="case" proved="true" arg1="(i = 1)">
          <goal name="co_prime_gcd&#39;vc.0.0.0.0.0.1.0.1.0" expl="true case (postcondition)" proved="true">
          <transf name="case" proved="true" arg1="(a = b)">
           <goal name="co_prime_gcd&#39;vc.0.0.0.0.0.1.0.1.0.0" expl="true case (postcondition)" proved="true">
           <proof prover="9"><result status="valid" time="0.60" steps="283696"/></proof>
           </goal>
           <goal name="co_prime_gcd&#39;vc.0.0.0.0.0.1.0.1.0.1" expl="false case (true case. postcondition)" proved="true">
           <proof prover="9"><result status="valid" time="0.75" steps="285135"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="co_prime_gcd&#39;vc.0.0.0.0.0.1.0.1.1" expl="false case (true case. postcondition)" proved="true">
          <transf name="assert" proved="true" arg1="(not (co_prime a b))">
           <goal name="co_prime_gcd&#39;vc.0.0.0.0.0.1.0.1.1.0" expl="asserted formula" proved="true">
           <transf name="apply" proved="true" arg1="set_not_co_prime_">
            <goal name="co_prime_gcd&#39;vc.0.0.0.0.0.1.0.1.1.0.0" expl="apply premises" proved="true">
            <proof prover="9"><result status="valid" time="0.28" steps="241185"/></proof>
            </goal>
            <goal name="co_prime_gcd&#39;vc.0.0.0.0.0.1.0.1.1.0.1" expl="apply premises" proved="true">
            <proof prover="9"><result status="valid" time="0.37" steps="241185"/></proof>
            </goal>
            <goal name="co_prime_gcd&#39;vc.0.0.0.0.0.1.0.1.1.0.2" expl="apply premises" proved="true">
            <proof prover="9"><result status="valid" time="0.72" steps="284825"/></proof>
            </goal>
            <goal name="co_prime_gcd&#39;vc.0.0.0.0.0.1.0.1.1.0.3" expl="apply premises" proved="true">
            <transf name="exists" proved="true" arg1="i">
             <goal name="co_prime_gcd&#39;vc.0.0.0.0.0.1.0.1.1.0.3.0" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="co_prime_gcd&#39;vc.0.0.0.0.0.1.0.1.1.0.3.0.0" proved="true">
              <proof prover="9"><result status="valid" time="0.62" steps="284858"/></proof>
              </goal>
              <goal name="co_prime_gcd&#39;vc.0.0.0.0.0.1.0.1.1.0.3.0.1" proved="true">
              <proof prover="9"><result status="valid" time="0.74" steps="285032"/></proof>
              </goal>
              <goal name="co_prime_gcd&#39;vc.0.0.0.0.0.1.0.1.1.0.3.0.2" proved="true">
              <proof prover="9"><result status="valid" time="0.60" steps="284858"/></proof>
              </goal>
              <goal name="co_prime_gcd&#39;vc.0.0.0.0.0.1.0.1.1.0.3.0.3" proved="true">
              <proof prover="9"><result status="valid" time="4.80" steps="1396194"/></proof>
              </goal>
              <goal name="co_prime_gcd&#39;vc.0.0.0.0.0.1.0.1.1.0.3.0.4" proved="true">
              <proof prover="9"><result status="valid" time="0.77" steps="285493"/></proof>
              </goal>
              <goal name="co_prime_gcd&#39;vc.0.0.0.0.0.1.0.1.1.0.3.0.5" proved="true">
              <proof prover="9"><result status="valid" time="4.92" steps="1393025"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="co_prime_gcd&#39;vc.0.0.0.0.0.1.0.1.1.1" expl="false case (true case. postcondition)" proved="true">
           <proof prover="9"><result status="valid" time="0.27" steps="241205"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="co_prime_gcd&#39;vc.0.0.0.0.0.1.1" expl="false case (true case. postcondition)" proved="true">
        <transf name="assert" proved="true" arg1="(mem i (inter (divisors a) (divisors b)))">
         <goal name="co_prime_gcd&#39;vc.0.0.0.0.0.1.1.0" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="0.35" steps="292377"/></proof>
         </goal>
         <goal name="co_prime_gcd&#39;vc.0.0.0.0.0.1.1.1" expl="false case (true case. postcondition)" proved="true">
         <transf name="case" proved="true" arg1="(i = 1)">
          <goal name="co_prime_gcd&#39;vc.0.0.0.0.0.1.1.1.0" expl="false case (true case. postcondition)" proved="true">
          <proof prover="9"><result status="valid" time="0.62" steps="284084"/></proof>
          </goal>
          <goal name="co_prime_gcd&#39;vc.0.0.0.0.0.1.1.1.1" expl="false case (true case. postcondition)" proved="true">
          <transf name="case" proved="true" arg1="(a = b)">
           <goal name="co_prime_gcd&#39;vc.0.0.0.0.0.1.1.1.1.0" expl="false case (true case. postcondition)" proved="true">
           <proof prover="9"><result status="valid" time="0.77" steps="284767"/></proof>
           </goal>
           <goal name="co_prime_gcd&#39;vc.0.0.0.0.0.1.1.1.1.1" expl="false case (true case. postcondition)" proved="true">
           <proof prover="9"><result status="valid" time="0.64" steps="287836"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="co_prime_gcd&#39;vc.0.0.0.0.1" expl="false case (true case. postcondition)" proved="true">
      <proof prover="9"><result status="valid" time="0.64" steps="283976"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="co_prime_gcd&#39;vc.0.0.0.1" expl="false case (postcondition)" proved="true">
     <proof prover="9"><result status="valid" time="4.80" steps="1350805"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="co_prime_gcd&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="0.27" steps="241040"/></proof>
    </goal>
    <goal name="co_prime_gcd&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="0.30" steps="241040"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="co_prime_gcd_rev&#39;vc" expl="VC for co_prime_gcd_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="co_prime_gcd_rev&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="co_prime_gcd_rev&#39;vc.0.0" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="0" arg2="(prime_factors (gcd a b) i)">
    <goal name="co_prime_gcd_rev&#39;vc.0.0.0" expl="assertion" proved="true">
    <transf name="apply" proved="true" arg1="divisors_by_factor_decomp_pre">
     <goal name="co_prime_gcd_rev&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="4.87" steps="1393981"/></proof>
     </goal>
     <goal name="co_prime_gcd_rev&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="0.73" steps="335747"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="co_prime_gcd_rev&#39;vc.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="9"><result status="valid" time="0.59" steps="313532"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="co_prime_gcd_rev&#39;vc.1" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="4.95" steps="1450538"/></proof>
  </goal>
  <goal name="co_prime_gcd_rev&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.30" steps="260197"/></proof>
  </goal>
  <goal name="co_prime_gcd_rev&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.30" steps="260898"/></proof>
  </goal>
  <goal name="co_prime_gcd_rev&#39;vc.4" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="factors_prod" arg2="e">
   <goal name="co_prime_gcd_rev&#39;vc.4.0" expl="precondition" proved="true">
   <transf name="destruct" proved="true" arg1="Hinst">
    <goal name="co_prime_gcd_rev&#39;vc.4.0.0" expl="destruct premise" proved="true">
    <proof prover="9"><result status="valid" time="5.06" steps="1470768"/></proof>
    </goal>
    <goal name="co_prime_gcd_rev&#39;vc.4.0.1" expl="precondition" proved="true">
    <transf name="instantiate" proved="true" arg1="Hinst" arg2="e">
     <goal name="co_prime_gcd_rev&#39;vc.4.0.1.0" expl="precondition" proved="true">
     <transf name="rewrite" proved="true" arg1="ind_iproduct_one" arg2="in" arg3="Hinst">
      <goal name="co_prime_gcd_rev&#39;vc.4.0.1.0.0" expl="precondition" proved="true">
      <proof prover="9"><result status="valid" time="0.64" steps="281354"/></proof>
      </goal>
      <goal name="co_prime_gcd_rev&#39;vc.4.0.1.0.1" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="co_prime_gcd_rev&#39;vc.4.0.1.0.1.0" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="co_prime_gcd_rev&#39;vc.4.0.1.0.1.0.0" expl="rewrite premises" proved="true">
        <proof prover="9"><result status="valid" time="0.54" steps="283356"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="co_prime_gcd_rev&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="5.25" steps="1483479"/></proof>
  </goal>
  <goal name="co_prime_gcd_rev&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.80" steps="303347"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="divisors_euclid_lemma_co_prime&#39;vc" expl="VC for divisors_euclid_lemma_co_prime" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="divisors_euclid_lemma_co_prime&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(mem c (divisors a))">
   <goal name="divisors_euclid_lemma_co_prime&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="apply" proved="true" arg1="mem_div_by_fact">
    <goal name="divisors_euclid_lemma_co_prime&#39;vc.0.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="divisors_euclid_lemma_co_prime&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="0.28" steps="252674"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="divisors_euclid_lemma_co_prime&#39;vc.0.0.1" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.30" steps="252674"/></proof>
    </goal>
    <goal name="divisors_euclid_lemma_co_prime&#39;vc.0.0.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="divisors_euclid_lemma_co_prime&#39;vc.0.0.2.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="(prime_factors c i &lt;= prime_factors (a*b) i)
">
      <goal name="divisors_euclid_lemma_co_prime&#39;vc.0.0.2.0.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.31"/></proof>
      </goal>
      <goal name="divisors_euclid_lemma_co_prime&#39;vc.0.0.2.0.1" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="prime_factors_mult" arg2="in" arg3="h">
       <goal name="divisors_euclid_lemma_co_prime&#39;vc.0.0.2.0.1.0" expl="apply premises" proved="true">
       <transf name="case" proved="true" arg1="(prime_factors c i = 0)">
        <goal name="divisors_euclid_lemma_co_prime&#39;vc.0.0.2.0.1.0.0" expl="apply premises (true case)" proved="true">
        <proof prover="9"><result status="valid" time="5.23" steps="1528248"/></proof>
        </goal>
        <goal name="divisors_euclid_lemma_co_prime&#39;vc.0.0.2.0.1.0.1" expl="apply premises (false case)" proved="true">
        <transf name="case" proved="true" arg1="(prime_factors b i = 0)">
         <goal name="divisors_euclid_lemma_co_prime&#39;vc.0.0.2.0.1.0.1.0" expl="apply premises (false case. true case)" proved="true">
         <proof prover="9"><result status="valid" time="0.46" steps="272112"/></proof>
         </goal>
         <goal name="divisors_euclid_lemma_co_prime&#39;vc.0.0.2.0.1.0.1.1" expl="apply premises (false case)" proved="true">
         <transf name="case" proved="true" arg1="(prime_factors (gcd b c) i = 0)">
          <goal name="divisors_euclid_lemma_co_prime&#39;vc.0.0.2.0.1.0.1.1.0" expl="apply premises (false case. true case)" proved="true">
          <proof prover="9"><result status="valid" time="5.18" steps="1544874"/></proof>
          </goal>
          <goal name="divisors_euclid_lemma_co_prime&#39;vc.0.0.2.0.1.0.1.1.1" expl="apply premises (false case)" proved="true">
          <proof prover="9"><result status="valid" time="0.70" steps="300637"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="divisors_euclid_lemma_co_prime&#39;vc.0.0.2.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="9"><result status="valid" time="0.30" steps="252723"/></proof>
       </goal>
       <goal name="divisors_euclid_lemma_co_prime&#39;vc.0.0.2.0.1.2" expl="rewrite premises" proved="true">
       <proof prover="9"><result status="valid" time="0.27" steps="252723"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="divisors_euclid_lemma_co_prime&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="1.54" steps="484822"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="divisors_euclid_lemma_co_prime_itself&#39;vc" expl="VC for divisors_euclid_lemma_co_prime_itself" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="divisors_euclid_lemma_co_prime_itself&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.28" steps="252904"/></proof>
  </goal>
  <goal name="divisors_euclid_lemma_co_prime_itself&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.29" steps="252910"/></proof>
  </goal>
  <goal name="divisors_euclid_lemma_co_prime_itself&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.27" steps="252916"/></proof>
  </goal>
  <goal name="divisors_euclid_lemma_co_prime_itself&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.26" steps="252920"/></proof>
  </goal>
  <goal name="divisors_euclid_lemma_co_prime_itself&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.28" steps="252923"/></proof>
  </goal>
  <goal name="divisors_euclid_lemma_co_prime_itself&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="5.32" steps="1484745"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="euclid_lemma_co_prime&#39;vc" expl="VC for euclid_lemma_co_prime" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="euclid_lemma_co_prime&#39;vc.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(c=1)">
   <goal name="euclid_lemma_co_prime&#39;vc.0.0" expl="true case (postcondition)" proved="true">
   <proof prover="9"><result status="valid" time="5.02" steps="1505584"/></proof>
   </goal>
   <goal name="euclid_lemma_co_prime&#39;vc.0.1" expl="false case (postcondition)" proved="true">
   <transf name="case" proved="true" arg1="(a=1)">
    <goal name="euclid_lemma_co_prime&#39;vc.0.1.0" expl="false case (true case. postcondition)" proved="true">
    <proof prover="9"><result status="valid" time="0.54" steps="228927"/></proof>
    </goal>
    <goal name="euclid_lemma_co_prime&#39;vc.0.1.1" expl="false case (postcondition)" proved="true">
    <proof prover="9"><result status="valid" time="4.90" steps="1612095"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="co_prime_odd&#39;vc" expl="VC for co_prime_odd" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="co_prime_odd&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.24" steps="211346"/></proof>
  </goal>
  <goal name="co_prime_odd&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.24" steps="211352"/></proof>
  </goal>
  <goal name="co_prime_odd&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.11" steps="396018"/></proof>
  </goal>
  <goal name="co_prime_odd&#39;vc.3" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(divisors 2 )" arg2="(add 2 (to_set 1))" arg3="in" arg4="H1">
   <goal name="co_prime_odd&#39;vc.3.0" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="c" arg2="2">
    <goal name="co_prime_odd&#39;vc.3.0.0" expl="precondition" proved="true">
    <proof prover="8"><result status="valid" time="0.48" steps="2626166"/></proof>
    </goal>
    <goal name="co_prime_odd&#39;vc.3.0.1" expl="equality hypothesis" proved="true">
    <proof prover="9"><result status="valid" time="0.86" steps="299195"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="co_prime_odd&#39;vc.3.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="set_equal">
    <goal name="co_prime_odd&#39;vc.3.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="co_prime_odd&#39;vc.3.1.0.0" expl="apply premises" proved="true">
     <transf name="case" proved="true" arg1="(e= 1)">
      <goal name="co_prime_odd&#39;vc.3.1.0.0.0" expl="apply premises (true case)" proved="true">
      <proof prover="9"><result status="valid" time="0.88" steps="298282"/></proof>
      </goal>
      <goal name="co_prime_odd&#39;vc.3.1.0.0.1" expl="apply premises (false case)" proved="true">
      <transf name="replace" proved="true" arg1="e" arg2="2">
       <goal name="co_prime_odd&#39;vc.3.1.0.0.1.0" expl="apply premises (false case)" proved="true">
       <proof prover="9"><result status="valid" time="0.51" steps="275491"/></proof>
       </goal>
       <goal name="co_prime_odd&#39;vc.3.1.0.0.1.1" expl="equality hypothesis" proved="true">
       <proof prover="9"><result status="valid" time="0.65" steps="295774"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="co_prime_odd&#39;vc.3.1.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="co_prime_odd&#39;vc.3.1.1.0" expl="apply premises" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="co_prime_odd&#39;vc.3.1.1.0.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="1.31" steps="501154"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="co_prime_odd&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.24" steps="211350"/></proof>
  </goal>
  <goal name="co_prime_odd&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.23" steps="211354"/></proof>
  </goal>
  <goal name="co_prime_odd&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.24" steps="211359"/></proof>
  </goal>
  <goal name="co_prime_odd&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.23" steps="211366"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="co_primes&#39;vc" expl="VC for co_primes" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="co_primes&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="co_primes&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="co_primes&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="in_my_filter">
     <goal name="co_primes&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="1.04" steps="351730"/></proof>
     </goal>
     <goal name="co_primes&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="co_primes&#39;vc.0.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="1.03" steps="351659"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="co_primes&#39;vc.1" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(i =1)">
   <goal name="co_primes&#39;vc.1.0" expl="true case (postcondition)" proved="true">
   <proof prover="9"><result status="valid" time="0.62" steps="328534"/></proof>
   </goal>
   <goal name="co_primes&#39;vc.1.1" expl="false case (postcondition)" proved="true">
   <transf name="assert" proved="true" arg1="(subset result (to_fset 1 i))">
    <goal name="co_primes&#39;vc.1.1.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="set_subset">
     <goal name="co_primes&#39;vc.1.1.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="co_primes&#39;vc.1.1.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="(mem e (to_fset 0 i))">
       <goal name="co_primes&#39;vc.1.1.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="9"><result status="valid" time="0.64" steps="328730"/></proof>
       </goal>
       <goal name="co_primes&#39;vc.1.1.0.0.0.1" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="(co_prime e i)">
        <goal name="co_primes&#39;vc.1.1.0.0.0.1.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="(e&lt;&gt; 0)">
         <goal name="co_primes&#39;vc.1.1.0.0.0.1.0.0" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="(co_prime e i)">
          <goal name="co_primes&#39;vc.1.1.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
          <proof prover="9"><result status="valid" time="4.95" steps="1551418"/></proof>
          </goal>
          <goal name="co_primes&#39;vc.1.1.0.0.0.1.0.0.1" expl="asserted formula" proved="true">
          <proof prover="9"><result status="valid" time="1.01" steps="352169"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="co_primes&#39;vc.1.1.0.0.0.1.0.1" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="1.71" steps="532841"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="co_primes&#39;vc.1.1.0.0.0.1.1" expl="apply premises" proved="true">
        <transf name="eliminate_definition" proved="true" >
         <goal name="co_primes&#39;vc.1.1.0.0.0.1.1.0" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="1.01" steps="354101"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="co_primes&#39;vc.1.1.1" expl="false case (postcondition)" proved="true">
    <transf name="assert" proved="true" arg1="(cardinal result &lt;= cardinal (to_fset 1 i))">
     <goal name="co_primes&#39;vc.1.1.1.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="(1&lt;= cardinal result)">
      <goal name="co_primes&#39;vc.1.1.1.0.0" expl="asserted formula" proved="true">
      <proof prover="9"><result status="valid" time="0.98" steps="351086"/></proof>
      </goal>
      <goal name="co_primes&#39;vc.1.1.1.0.1" expl="asserted formula" proved="true">
      <proof prover="9"><result status="valid" time="1.09" steps="351297"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="co_primes&#39;vc.1.1.1.1" expl="false case (postcondition)" proved="true">
     <proof prover="9"><result status="valid" time="0.98" steps="351753"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="co_primes&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="co_primes&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(co_prime i j)">
    <goal name="co_primes&#39;vc.2.0.0" expl="asserted formula" proved="true">
    <proof prover="9"><result status="valid" time="0.81" steps="351845"/></proof>
    </goal>
    <goal name="co_primes&#39;vc.2.0.1" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="0.97" steps="352254"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="co_primes&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="5.63" steps="1512594"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="co_primes&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.99" steps="351994"/></proof>
  </goal>
  <goal name="co_primes&#39;vc.4" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="co_primes&#39;vc.4.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="5.18" steps="1616819"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="co_prime_iproduct&#39;vc" expl="VC for co_prime_iproduct" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="co_prime_iproduct&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.85" steps="320344"/></proof>
  </goal>
  <goal name="co_prime_iproduct&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.95" steps="321972"/></proof>
  </goal>
  <goal name="co_prime_iproduct&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.31" steps="277138"/></proof>
  </goal>
  <goal name="co_prime_iproduct&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.85" steps="322127"/></proof>
  </goal>
  <goal name="co_prime_iproduct&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.95" steps="322562"/></proof>
  </goal>
  <goal name="co_prime_iproduct&#39;vc.5" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="co_prime_iproduct&#39;vc.5.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(co_prime  1 bound)">
    <goal name="co_prime_iproduct&#39;vc.5.0.0" expl="asserted formula" proved="true">
    <proof prover="8"><result status="valid" time="0.61" steps="2939637"/></proof>
    </goal>
    <goal name="co_prime_iproduct&#39;vc.5.0.1" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="0.83" steps="321438"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="co_prime_iproduct&#39;vc.5.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="co_prime_iproduct&#39;vc.5.1.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="co_prime_iproduct&#39;vc.5.1.0.0" expl="postcondition" proved="true">
     <transf name="case" proved="true" arg1="(s =empty )">
      <goal name="co_prime_iproduct&#39;vc.5.1.0.0.0" expl="true case (postcondition)" proved="true">
      <proof prover="9"><result status="valid" time="1.20" steps="374697"/></proof>
      </goal>
      <goal name="co_prime_iproduct&#39;vc.5.1.0.0.1" expl="false case (postcondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="H1">
       <goal name="co_prime_iproduct&#39;vc.5.1.0.0.1.0" expl="false case (postcondition)" proved="true">
       <transf name="apply" proved="true" arg1="euclid_lemma_co_prime">
        <goal name="co_prime_iproduct&#39;vc.5.1.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="5.56" steps="1431457"/></proof>
        </goal>
        <goal name="co_prime_iproduct&#39;vc.5.1.0.0.1.0.1" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="1.01" steps="369617"/></proof>
        </goal>
        <goal name="co_prime_iproduct&#39;vc.5.1.0.0.1.0.2" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="0.37" steps="321818"/></proof>
        </goal>
        <goal name="co_prime_iproduct&#39;vc.5.1.0.0.1.0.3" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="0.35" steps="321816"/></proof>
        </goal>
        <goal name="co_prime_iproduct&#39;vc.5.1.0.0.1.0.4" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="Requires">
         <goal name="co_prime_iproduct&#39;vc.5.1.0.0.1.0.4.0" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="5.08" steps="1428946"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="greatest_factor_in_n&#39;vc" expl="VC for greatest_factor_in_n" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="greatest_factor_in_n&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.39" steps="230358"/></proof>
  </goal>
  <goal name="greatest_factor_in_n&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.38" steps="230432"/></proof>
  </goal>
  <goal name="greatest_factor_in_n&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.38" steps="230444"/></proof>
  </goal>
  <goal name="greatest_factor_in_n&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="greatest_factor_in_n&#39;vc.4" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="((result-1) * multi + i &lt; power 2 n)">
   <goal name="greatest_factor_in_n&#39;vc.4.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.26"/></proof>
   </goal>
   <goal name="greatest_factor_in_n&#39;vc.4.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="((result-1) * multi + i &lt;= (result-1) * multi + i )">
    <goal name="greatest_factor_in_n&#39;vc.4.1.0" expl="asserted formula" proved="true">
    <proof prover="9"><result status="valid" time="0.25" steps="212874"/></proof>
    </goal>
    <goal name="greatest_factor_in_n&#39;vc.4.1.1" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="( ((j * multi) + mod i multi) &lt;= (result-1) * multi + i &lt; power 2 n )">
     <goal name="greatest_factor_in_n&#39;vc.4.1.1.0" expl="asserted formula" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="greatest_factor_in_n&#39;vc.4.1.1.0.0" proved="true">
      <proof prover="0"><result status="valid" time="0.23"/></proof>
      </goal>
      <goal name="greatest_factor_in_n&#39;vc.4.1.1.0.1" proved="true">
      <proof prover="9"><result status="valid" time="0.23" steps="212880"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="greatest_factor_in_n&#39;vc.4.1.1.1" expl="postcondition" proved="true">
     <proof prover="9"><result status="valid" time="0.40" steps="231586"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="greatest_factor_in_n&#39;vc.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="greatest_factor_in_n&#39;vc.5.0" expl="postcondition" proved="true">
   <transf name="exists" proved="true" arg1="(div j multi)">
    <goal name="greatest_factor_in_n&#39;vc.5.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="greatest_factor_in_n&#39;vc.5.0.0.0" proved="true">
     <proof prover="0"><result status="valid" time="0.31"/></proof>
     </goal>
     <goal name="greatest_factor_in_n&#39;vc.5.0.0.1" proved="true">
     <transf name="destruct" proved="true" arg1="H3">
      <goal name="greatest_factor_in_n&#39;vc.5.0.0.1.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="greatest_factor_in_n&#39;vc.5.0.0.1.0.0" proved="true">
       <proof prover="12"><result status="valid" time="0.13" steps="6121"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="greatest_factor_in_n&#39;vc.5.0.0.1.1" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="greatest_factor_in_n&#39;vc.5.0.0.1.1.0" proved="true">
       <transf name="case" proved="true" arg1="(i = 0)">
        <goal name="greatest_factor_in_n&#39;vc.5.0.0.1.1.0.0" expl="true case" proved="true">
        <proof prover="0"><result status="valid" time="0.21"/></proof>
        </goal>
        <goal name="greatest_factor_in_n&#39;vc.5.0.0.1.1.0.1" expl="false case" proved="true">
        <transf name="case" proved="true" arg1="(div j multi = result)">
         <goal name="greatest_factor_in_n&#39;vc.5.0.0.1.1.0.1.0" expl="false case (true case)" proved="true">
         <proof prover="0"><result status="valid" time="0.22"/></proof>
         </goal>
         <goal name="greatest_factor_in_n&#39;vc.5.0.0.1.1.0.1.1" expl="false case" proved="true">
         <proof prover="12"><result status="valid" time="0.13" steps="6115"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="greatest_factor_in_n&#39;vc.5.0.0.2" proved="true">
     <proof prover="0"><result status="valid" time="0.23"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="greatest_factor_in_n&#39;vc.5.1" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.46" steps="2286555"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="greatest_factor_in_n&#39;vc.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="greatest_factor_in_n&#39;vc.6.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(i_to_c ((result-1) * multi +i) &lt;=. i_to_c (power 2 (2*n)))">
    <goal name="greatest_factor_in_n&#39;vc.6.0.0" expl="asserted formula" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="greatest_factor_in_n&#39;vc.6.0.0.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="( (((result - 1) * multi) + i) &lt;= (power 2 (2 * n)))">
      <goal name="greatest_factor_in_n&#39;vc.6.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="8"><result status="valid" time="0.89" steps="2272552"/></proof>
      </goal>
      <goal name="greatest_factor_in_n&#39;vc.6.0.0.0.1" expl="asserted formula" proved="true">
      <proof prover="9"><result status="valid" time="5.97" steps="1744661"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="greatest_factor_in_n&#39;vc.6.0.1" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(i_to_c (result - 1))" arg2="((i_to_c (((result - 1) * multi) + i - i))/. i_to_c multi)">
     <goal name="greatest_factor_in_n&#39;vc.6.0.1.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="(/.)&#39;def">
      <goal name="greatest_factor_in_n&#39;vc.6.0.1.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="(/.)&#39;def">
       <goal name="greatest_factor_in_n&#39;vc.6.0.1.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="compat_order_mult">
        <goal name="greatest_factor_in_n&#39;vc.6.0.1.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.26"/></proof>
        </goal>
        <goal name="greatest_factor_in_n&#39;vc.6.0.1.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="0.55" steps="232224"/></proof>
        </goal>
        <goal name="greatest_factor_in_n&#39;vc.6.0.1.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="0.41" steps="232211"/></proof>
        </goal>
        <goal name="greatest_factor_in_n&#39;vc.6.0.1.0.0.0.3" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(inv1 (i_to_c multi))" arg2="(c_one /. (i_to_c multi))">
         <goal name="greatest_factor_in_n&#39;vc.6.0.1.0.0.0.3.0" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="5.85" steps="1762745"/></proof>
         </goal>
         <goal name="greatest_factor_in_n&#39;vc.6.0.1.0.0.0.3.1" expl="equality hypothesis" proved="true">
         <proof prover="9"><result status="valid" time="0.60" steps="259027"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="greatest_factor_in_n&#39;vc.6.0.1.0.0.0.4" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(inv1 (i_to_c multi))" arg2="(c_one /. (i_to_c multi))">
         <goal name="greatest_factor_in_n&#39;vc.6.0.1.0.0.0.4.0" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="5.99" steps="1775107"/></proof>
         </goal>
         <goal name="greatest_factor_in_n&#39;vc.6.0.1.0.0.0.4.1" expl="equality hypothesis" proved="true">
         <proof prover="9"><result status="valid" time="0.77" steps="259027"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="greatest_factor_in_n&#39;vc.6.0.1.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="9"><result status="valid" time="0.54" steps="232240"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="greatest_factor_in_n&#39;vc.6.0.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="9"><result status="valid" time="0.56" steps="232240"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="greatest_factor_in_n&#39;vc.6.0.1.1" expl="equality hypothesis" proved="true">
     <transf name="assert" proved="true" arg1="(forall a. a+ i-i = a )">
      <goal name="greatest_factor_in_n&#39;vc.6.0.1.1.0" expl="asserted formula" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="greatest_factor_in_n&#39;vc.6.0.1.1.0.0" expl="asserted formula" proved="true">
       <proof prover="9"><result status="valid" time="0.24" steps="213219"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="greatest_factor_in_n&#39;vc.6.0.1.1.1" expl="equality hypothesis" proved="true">
      <transf name="rewrite" proved="true" arg1="h">
       <goal name="greatest_factor_in_n&#39;vc.6.0.1.1.1.0" expl="equality hypothesis" proved="true">
       <transf name="rewrite" proved="true" arg1="i_to_c_mult_rev">
        <goal name="greatest_factor_in_n&#39;vc.6.0.1.1.1.0.0" expl="equality hypothesis" proved="true">
        <proof prover="9"><result status="valid" time="0.59" steps="233582"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="greatest_factor_in_n&#39;vc.6.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(i_to_c ((result-1) * multi +i) &lt;=. i_to_c (power 2 (2*n)))">
    <goal name="greatest_factor_in_n&#39;vc.6.1.0" expl="asserted formula" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="greatest_factor_in_n&#39;vc.6.1.0.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="( (((result - 1) * multi) + i) &lt;= (power 2 (2 * n)))">
      <goal name="greatest_factor_in_n&#39;vc.6.1.0.0.0" expl="asserted formula" proved="true">
      <proof prover="8"><result status="valid" time="0.79" steps="2280203"/></proof>
      </goal>
      <goal name="greatest_factor_in_n&#39;vc.6.1.0.0.1" expl="asserted formula" proved="true">
      <proof prover="12"><result status="valid" time="0.19" steps="6920"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="greatest_factor_in_n&#39;vc.6.1.1" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(i_to_c (result - 1))" arg2="((i_to_c (((result - 1) * multi) + i - i))/. i_to_c multi)">
     <goal name="greatest_factor_in_n&#39;vc.6.1.1.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="(/.)&#39;def">
      <goal name="greatest_factor_in_n&#39;vc.6.1.1.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="(/.)&#39;def">
       <goal name="greatest_factor_in_n&#39;vc.6.1.1.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="compat_order_mult">
        <goal name="greatest_factor_in_n&#39;vc.6.1.1.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.24"/></proof>
        </goal>
        <goal name="greatest_factor_in_n&#39;vc.6.1.1.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="0.57" steps="232199"/></proof>
        </goal>
        <goal name="greatest_factor_in_n&#39;vc.6.1.1.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="0.57" steps="232177"/></proof>
        </goal>
        <goal name="greatest_factor_in_n&#39;vc.6.1.1.0.0.0.3" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(inv1 (i_to_c multi))" arg2="(c_one /. (i_to_c multi))">
         <goal name="greatest_factor_in_n&#39;vc.6.1.1.0.0.0.3.0" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="0.82" steps="259791"/></proof>
         </goal>
         <goal name="greatest_factor_in_n&#39;vc.6.1.1.0.0.0.3.1" expl="equality hypothesis" proved="true">
         <proof prover="9"><result status="valid" time="0.81" steps="259847"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="greatest_factor_in_n&#39;vc.6.1.1.0.0.0.4" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(inv1 (i_to_c multi))" arg2="(c_one /. (i_to_c multi))">
         <goal name="greatest_factor_in_n&#39;vc.6.1.1.0.0.0.4.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.25"/></proof>
         </goal>
         <goal name="greatest_factor_in_n&#39;vc.6.1.1.0.0.0.4.1" expl="equality hypothesis" proved="true">
         <proof prover="9"><result status="valid" time="0.87" steps="259847"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="greatest_factor_in_n&#39;vc.6.1.1.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="9"><result status="valid" time="0.53" steps="232206"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="greatest_factor_in_n&#39;vc.6.1.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="9"><result status="valid" time="0.58" steps="232206"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="greatest_factor_in_n&#39;vc.6.1.1.1" expl="equality hypothesis" proved="true">
     <proof prover="9"><result status="valid" time="6.64" steps="1952629"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="greatest_factor_sum_in_n&#39;vc" expl="VC for greatest_factor_sum_in_n" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="greatest_factor_sum_in_n&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.40" steps="231478"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.53" steps="245229"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.43" steps="245467"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.42" steps="245323"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.61" steps="245520"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.26" steps="227115"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.26" steps="227130"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.7" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.25" steps="227143"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.8" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.59" steps="273431"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.9" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.69" steps="304467"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.10" expl="precondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="greatest_factor_sum_in_n&#39;vc.10.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_empty1">
    <goal name="greatest_factor_sum_in_n&#39;vc.10.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="greatest_factor_sum_in_n&#39;vc.10.0.0.0" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="4.89" steps="1457353"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.11" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.74" steps="308846"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.12" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.34" steps="288193"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.13" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.31" steps="288208"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.14" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.33" steps="288221"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.15" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.59" steps="309101"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.16" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="greatest_factor_sum_in_n&#39;vc.16.0" expl="precondition" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="greatest_factor_sum_in_n&#39;vc.16.0.0" expl="VC for greatest_factor_sum_in_n" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="greatest_factor_sum_in_n&#39;vc.16.0.0.0" expl="precondition" proved="true">
     <proof prover="0"><result status="valid" time="0.41"/></proof>
     </goal>
     <goal name="greatest_factor_sum_in_n&#39;vc.16.0.0.1" expl="precondition" proved="true">
     <proof prover="9"><result status="valid" time="0.98" steps="341061"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.17" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.57" steps="309476"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.18" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.34" steps="288496"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.19" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.33" steps="288511"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.20" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.32" steps="288524"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.21" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.59" steps="309688"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.22" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="greatest_factor_sum_in_n&#39;vc.22.0" expl="precondition" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="greatest_factor_sum_in_n&#39;vc.22.0.0" expl="VC for greatest_factor_sum_in_n" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="greatest_factor_sum_in_n&#39;vc.22.0.0.0" expl="precondition" proved="true">
     <proof prover="0"><result status="valid" time="0.34"/></proof>
     </goal>
     <goal name="greatest_factor_sum_in_n&#39;vc.22.0.0.1" expl="precondition" proved="true">
     <proof prover="0"><result status="valid" time="0.33"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.23" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.48" steps="288802"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.24" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.34" steps="288817"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.25" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.34" steps="288830"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.26" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.56" steps="310284"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.27" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.72" steps="310430"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.28" expl="precondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="greatest_factor_sum_in_n&#39;vc.28.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_empty1">
    <goal name="greatest_factor_sum_in_n&#39;vc.28.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="greatest_factor_sum_in_n&#39;vc.28.0.0.0" expl="apply premises" proved="true">
     <transf name="case" proved="true" arg1="(mem e (to_fset 0 (mod (power 2 n) multi)))">
      <goal name="greatest_factor_sum_in_n&#39;vc.28.0.0.0.0" expl="apply premises (true case)" proved="true">
      <proof prover="9"><result status="valid" time="0.94" steps="396893"/></proof>
      </goal>
      <goal name="greatest_factor_sum_in_n&#39;vc.28.0.0.0.1" expl="apply premises (false case)" proved="true">
      <transf name="case" proved="true" arg1="(mem e (to_fset (mod (power 2 n) multi) multi))">
       <goal name="greatest_factor_sum_in_n&#39;vc.28.0.0.0.1.0" expl="apply premises (false case. true case)" proved="true">
       <proof prover="9"><result status="valid" time="0.85" steps="360067"/></proof>
       </goal>
       <goal name="greatest_factor_sum_in_n&#39;vc.28.0.0.0.1.1" expl="apply premises (false case)" proved="true">
       <proof prover="9"><result status="valid" time="0.86" steps="360076"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.29" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.71" steps="311237"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.30" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.33" steps="289411"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.31" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.35" steps="289426"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.32" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.32" steps="289439"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.33" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.72" steps="311440"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.34" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="greatest_factor_sum_in_n&#39;vc.34.0" expl="precondition" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="greatest_factor_sum_in_n&#39;vc.34.0.0" expl="VC for greatest_factor_sum_in_n" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="greatest_factor_sum_in_n&#39;vc.34.0.0.0" expl="precondition" proved="true">
     <proof prover="7"><result status="valid" time="0.12" steps="796813"/></proof>
     </goal>
     <goal name="greatest_factor_sum_in_n&#39;vc.34.0.0.1" expl="precondition" proved="true">
     <proof prover="9"><result status="valid" time="1.02" steps="356557"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.35" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.70" steps="311833"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.36" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.43" steps="289722"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.37" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.32" steps="289737"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.38" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.32" steps="289750"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.39" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.69" steps="312036"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.40" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="greatest_factor_sum_in_n&#39;vc.40.0" expl="precondition" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="greatest_factor_sum_in_n&#39;vc.40.0.0" expl="VC for greatest_factor_sum_in_n" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="greatest_factor_sum_in_n&#39;vc.40.0.0.0" expl="precondition" proved="true">
     <proof prover="8"><result status="valid" time="0.62" steps="3340328"/></proof>
     </goal>
     <goal name="greatest_factor_sum_in_n&#39;vc.40.0.0.1" expl="precondition" proved="true">
     <proof prover="0"><result status="valid" time="0.36"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.41" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.71" steps="312451"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.42" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.71" steps="312451"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.43" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.37"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.44" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.32" steps="290056"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.45" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.32" steps="290088"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.46" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.47"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.47" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="mult_comm">
   <goal name="greatest_factor_sum_in_n&#39;vc.47.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="sum_scal_rev">
    <goal name="greatest_factor_sum_in_n&#39;vc.47.0.0" expl="assertion" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.48" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="(sum (to_fset 0 multi)
   (fun (i:int) -&gt; cpower (i_to_c (greatest_factor_in_n multi n i)) 2))" arg2="(sum
  (union (to_fset 0 (mod (power 2 n) multi))
   (to_fset (mod (power 2 n) multi) multi))
  (fun (i:int) -&gt;
    if 0 &lt;= i /\ i &lt; multi
    then cpower (i_to_c (greatest_factor_in_n multi n i)) 2 else c_zero))">
   <goal name="greatest_factor_sum_in_n&#39;vc.48.0" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="(to_fset 0 multi)" arg2="(union (to_fset 0 (mod (power 2 n) multi))
     (to_fset (mod (power 2 n) multi) multi))">
    <goal name="greatest_factor_sum_in_n&#39;vc.48.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures10">
     <goal name="greatest_factor_sum_in_n&#39;vc.48.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures">
      <goal name="greatest_factor_sum_in_n&#39;vc.48.0.0.0.0" expl="assertion" proved="true">
      <transf name="rewrite" proved="true" arg1="Ensures20">
       <goal name="greatest_factor_sum_in_n&#39;vc.48.0.0.0.0.0" expl="assertion" proved="true">
       <transf name="replace" proved="true" arg1="(cardinal (to_fset 0 (mod (power 2 n) multi)) )" arg2="(mod (power 2 n) multi)
">
        <goal name="greatest_factor_sum_in_n&#39;vc.48.0.0.0.0.0.0" expl="assertion" proved="true">
        <transf name="rewrite" proved="true" arg1="Ensures5">
         <goal name="greatest_factor_sum_in_n&#39;vc.48.0.0.0.0.0.0.0" expl="assertion" proved="true">
         <transf name="rewrite" proved="true" arg1="i_to_c_add_rev">
          <goal name="greatest_factor_sum_in_n&#39;vc.48.0.0.0.0.0.0.0.0" expl="assertion" proved="true">
          <transf name="replace" proved="true" arg1="(cardinal (to_fset 0 (mod (power 2 n) multi)))" arg2="modm">
           <goal name="greatest_factor_sum_in_n&#39;vc.48.0.0.0.0.0.0.0.0.0" expl="assertion" proved="true">
           <transf name="replace" proved="true" arg1="( (div (power 2 n) multi) )" arg2="divm">
            <goal name="greatest_factor_sum_in_n&#39;vc.48.0.0.0.0.0.0.0.0.0.0" expl="assertion" proved="true">
            <transf name="rewrite" proved="true" arg1="cpower_i_to_c_rev">
             <goal name="greatest_factor_sum_in_n&#39;vc.48.0.0.0.0.0.0.0.0.0.0.0" expl="assertion" proved="true">
             <transf name="rewrite" proved="true" arg1="i_to_c_add">
              <goal name="greatest_factor_sum_in_n&#39;vc.48.0.0.0.0.0.0.0.0.0.0.0.0" expl="assertion" proved="true">
              <transf name="rewrite" proved="true" arg1="cpower_i_to_c_rev">
               <goal name="greatest_factor_sum_in_n&#39;vc.48.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="assertion" proved="true">
               <transf name="rewrite" proved="true" arg1="i_to_c_mult">
                <goal name="greatest_factor_sum_in_n&#39;vc.48.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="assertion" proved="true">
                <transf name="rewrite" proved="true" arg1="i_to_c_add_rev">
                 <goal name="greatest_factor_sum_in_n&#39;vc.48.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="assertion" proved="true">
                 <transf name="rewrite" proved="true" arg1="i_to_c_add">
                  <goal name="greatest_factor_sum_in_n&#39;vc.48.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="assertion" proved="true">
                  <transf name="rewrite" proved="true" arg1="i_to_c_mult">
                   <goal name="greatest_factor_sum_in_n&#39;vc.48.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="assertion" proved="true">
                   <transf name="rewrite" proved="true" arg1="i_to_c_add">
                    <goal name="greatest_factor_sum_in_n&#39;vc.48.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="assertion" proved="true">
                    <transf name="rewrite" proved="true" arg1="i_to_c_mult">
                     <goal name="greatest_factor_sum_in_n&#39;vc.48.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="assertion" proved="true">
                     <proof prover="9"><result status="valid" time="0.46" steps="290387"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="greatest_factor_sum_in_n&#39;vc.48.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="9"><result status="valid" time="0.47" steps="290302"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="greatest_factor_sum_in_n&#39;vc.48.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="9"><result status="valid" time="0.36" steps="290302"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="greatest_factor_sum_in_n&#39;vc.48.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
            <proof prover="9"><result status="valid" time="0.36" steps="290293"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="greatest_factor_sum_in_n&#39;vc.48.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="9"><result status="valid" time="0.33" steps="290295"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="greatest_factor_sum_in_n&#39;vc.48.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="9"><result status="valid" time="0.34" steps="290295"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="greatest_factor_sum_in_n&#39;vc.48.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="9"><result status="valid" time="0.56" steps="312562"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="greatest_factor_sum_in_n&#39;vc.48.0.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="set_equal">
     <goal name="greatest_factor_sum_in_n&#39;vc.48.0.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="greatest_factor_sum_in_n&#39;vc.48.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="1.05" steps="361461"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="greatest_factor_sum_in_n&#39;vc.48.0.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="greatest_factor_sum_in_n&#39;vc.48.0.1.1.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="1.10" steps="361562"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="greatest_factor_sum_in_n&#39;vc.48.1" expl="equality hypothesis" proved="true">
   <transf name="replace" proved="true" arg1="(to_fset 0 multi)" arg2="(union (to_fset 0 (mod (power 2 n) multi))
     (to_fset (mod (power 2 n) multi) multi))
">
    <goal name="greatest_factor_sum_in_n&#39;vc.48.1.0" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="sum_eq">
     <goal name="greatest_factor_sum_in_n&#39;vc.48.1.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="greatest_factor_sum_in_n&#39;vc.48.1.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="greatest_factor_sum_in_n&#39;vc.48.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="eliminate_if" proved="true" >
        <goal name="greatest_factor_sum_in_n&#39;vc.48.1.0.0.0.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="greatest_factor_sum_in_n&#39;vc.48.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="0.33" steps="294206"/></proof>
         </goal>
         <goal name="greatest_factor_sum_in_n&#39;vc.48.1.0.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(union (to_fset 0 (mod (power 2 n) multi))
   (to_fset (mod (power 2 n) multi) multi))" arg2="(to_fset 0 multi)" arg3="in" arg4="H1">
          <goal name="greatest_factor_sum_in_n&#39;vc.48.1.0.0.0.0.0.1.0" expl="apply premises" proved="true">
          <proof prover="9"><result status="valid" time="1.05" steps="361413"/></proof>
          </goal>
          <goal name="greatest_factor_sum_in_n&#39;vc.48.1.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
          <proof prover="9"><result status="valid" time="1.02" steps="363648"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="greatest_factor_sum_in_n&#39;vc.48.1.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="set_equal">
     <goal name="greatest_factor_sum_in_n&#39;vc.48.1.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="greatest_factor_sum_in_n&#39;vc.48.1.1.0.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="1.02" steps="361461"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="greatest_factor_sum_in_n&#39;vc.48.1.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="greatest_factor_sum_in_n&#39;vc.48.1.1.1.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="1.12" steps="361562"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.49" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.33" steps="290504"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.50" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.34" steps="290508"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.51" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.46"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.52" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.46"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.53" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.47"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.54" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.31" steps="290675"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.55" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="greatest_factor_sum_in_n&#39;vc.55.0" expl="assertion" proved="true">
   <transf name="assert" proved="true" arg1="(forall a b c. (a+b)*c = a*c+b*c)">
    <goal name="greatest_factor_sum_in_n&#39;vc.55.0.0" expl="asserted formula" proved="true">
    <proof prover="9"><result status="valid" time="0.33" steps="290737"/></proof>
    </goal>
    <goal name="greatest_factor_sum_in_n&#39;vc.55.0.1" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="h">
     <goal name="greatest_factor_sum_in_n&#39;vc.55.0.1.0" expl="assertion" proved="true">
     <transf name="assert" proved="true" arg1="(forall a b c. c*(a+b) = a*c+b*c)">
      <goal name="greatest_factor_sum_in_n&#39;vc.55.0.1.0.0" expl="asserted formula" proved="true">
      <proof prover="9"><result status="valid" time="0.36" steps="290800"/></proof>
      </goal>
      <goal name="greatest_factor_sum_in_n&#39;vc.55.0.1.0.1" expl="assertion" proved="true">
      <transf name="assert" proved="true" arg1="(forall a b c. c*(a+b) = a*c+b*c)">
       <goal name="greatest_factor_sum_in_n&#39;vc.55.0.1.0.1.0" expl="asserted formula" proved="true">
       <proof prover="9"><result status="valid" time="0.36" steps="290863"/></proof>
       </goal>
       <goal name="greatest_factor_sum_in_n&#39;vc.55.0.1.0.1.1" expl="assertion" proved="true">
       <proof prover="9"><result status="valid" time="0.34" steps="290905"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="greatest_factor_sum_in_n&#39;vc.55.1" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.46"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.56" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.74" steps="313473"/></proof>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.57" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(sum (to_fset 0 multi)
  (fun (i:int) -&gt; i_to_c (greatest_factor_in_n multi n i) *. cst))" arg2="(cst *. sum (to_fset 0 multi)
  (fun (i:int) -&gt; i_to_c (greatest_factor_in_n multi n i) ))">
   <goal name="greatest_factor_sum_in_n&#39;vc.57.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="mult_comm">
    <goal name="greatest_factor_sum_in_n&#39;vc.57.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="mult_eq_t">
     <goal name="greatest_factor_sum_in_n&#39;vc.57.0.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(sum (to_fset 0 multi)
  (fun (i:int) -&gt; i_to_c (greatest_factor_in_n multi n i)))" arg2="(sum
  (union (to_fset 0 (mod (power 2 n) multi))
   (to_fset (mod (power 2 n) multi) multi))
  (fun (i:int) -&gt;
    if 0 &lt;= i /\ i &lt; multi then i_to_c (greatest_factor_in_n multi n i)
    else c_zero))">
      <goal name="greatest_factor_sum_in_n&#39;vc.57.0.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="Ensures27">
       <goal name="greatest_factor_sum_in_n&#39;vc.57.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="Ensures17">
        <goal name="greatest_factor_sum_in_n&#39;vc.57.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="Ensures22">
         <goal name="greatest_factor_sum_in_n&#39;vc.57.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="Ensures35">
          <goal name="greatest_factor_sum_in_n&#39;vc.57.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="(cardinal (to_fset 0 (mod (power 2 n) multi)))" arg2="(mod (power 2 n) multi)
">
           <goal name="greatest_factor_sum_in_n&#39;vc.57.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="i_to_c_mult">
            <goal name="greatest_factor_sum_in_n&#39;vc.57.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="i_to_c_mult">
             <goal name="greatest_factor_sum_in_n&#39;vc.57.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="i_to_c_add">
              <goal name="greatest_factor_sum_in_n&#39;vc.57.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="apply" proved="true" arg1="i_to_c_eq">
               <goal name="greatest_factor_sum_in_n&#39;vc.57.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="9"><result status="valid" time="0.32" steps="290825"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="greatest_factor_sum_in_n&#39;vc.57.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="9"><result status="valid" time="0.36" steps="290811"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="greatest_factor_sum_in_n&#39;vc.57.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="sum_eq_gen">
       <goal name="greatest_factor_sum_in_n&#39;vc.57.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_equal">
        <goal name="greatest_factor_sum_in_n&#39;vc.57.0.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="greatest_factor_sum_in_n&#39;vc.57.0.0.0.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="1.14" steps="365751"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="greatest_factor_sum_in_n&#39;vc.57.0.0.0.1.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="greatest_factor_sum_in_n&#39;vc.57.0.0.0.1.0.1.0" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="1.12" steps="365829"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="greatest_factor_sum_in_n&#39;vc.57.0.0.0.1.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="greatest_factor_sum_in_n&#39;vc.57.0.0.0.1.1.0" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="1.07" steps="360227"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="greatest_factor_sum_in_n&#39;vc.57.0.0.1" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="0.47" steps="290809"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="greatest_factor_sum_in_n&#39;vc.57.1" expl="equality hypothesis" proved="true">
   <transf name="rewrite" proved="true" arg1="sum_scal_rev">
    <goal name="greatest_factor_sum_in_n&#39;vc.57.1.0" expl="equality hypothesis" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="greatest_factor_sum_in_n&#39;vc.57.1.0.0" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="sum_eq">
      <goal name="greatest_factor_sum_in_n&#39;vc.57.1.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="greatest_factor_sum_in_n&#39;vc.57.1.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="0.76" steps="313992"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="greatest_factor_sum_in_n&#39;vc.58" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Assert8">
   <goal name="greatest_factor_sum_in_n&#39;vc.58.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="cpower_i_to_c_rev">
    <goal name="greatest_factor_sum_in_n&#39;vc.58.0.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="greatest_factor_sum_in_n&#39;vc.58.0.0.0" expl="postcondition" proved="true">
     <transf name="assert" proved="true" arg1="( (power (power 2 n) 2)
  &lt;=      (((modm * multi) * power (divm + 1) 2)
       + ((minusmod * multi) * power divm 2)))">
      <goal name="greatest_factor_sum_in_n&#39;vc.58.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="9"><result status="valid" time="0.31" steps="290887"/></proof>
      </goal>
      <goal name="greatest_factor_sum_in_n&#39;vc.58.0.0.0.1" expl="postcondition" proved="true">
      <transf name="assert" proved="true" arg1="(forall a b. a &lt;= b -&gt; i_to_c a &lt;=. i_to_c b)">
       <goal name="greatest_factor_sum_in_n&#39;vc.58.0.0.0.1.0" expl="asserted formula" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="greatest_factor_sum_in_n&#39;vc.58.0.0.0.1.0.0" expl="asserted formula" proved="true">
        <proof prover="0"><result status="valid" time="0.48"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="greatest_factor_sum_in_n&#39;vc.58.0.0.0.1.1" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="h">
        <goal name="greatest_factor_sum_in_n&#39;vc.58.0.0.0.1.1.0" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="0.31" steps="290976"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="greatest_factor_sum_in_n&#39;vc.58.0.1" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="greatest_factor_sum_in_n&#39;vc.58.0.1.0" expl="rewrite premises" proved="true">
     <proof prover="9"><result status="valid" time="0.32" steps="290894"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="antirefl_co_prime&#39;vc" expl="VC for antirefl_co_prime" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="antirefl_co_prime&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.65" steps="252128"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Inverse" proved="true">
 <goal name="euler_phi&#39;vc" expl="VC for euler_phi" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="euler_phi&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.40" steps="215281"/></proof>
  </goal>
  <goal name="euler_phi&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.51" steps="262010"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="injec_mult_mod_pre&#39;vc" expl="VC for injec_mult_mod_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="injec_mult_mod_pre&#39;vc.0" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(1&lt; bound)">
   <goal name="injec_mult_mod_pre&#39;vc.0.0" expl="asserted formula" proved="true">
   <proof prover="9"><result status="valid" time="0.50" steps="237970"/></proof>
   </goal>
   <goal name="injec_mult_mod_pre&#39;vc.0.1" expl="assertion" proved="true">
   <transf name="case" proved="true" arg1="(i&#39; = bound)">
    <goal name="injec_mult_mod_pre&#39;vc.0.1.0" expl="true case (assertion)" proved="true">
    <transf name="assert" proved="true" arg1="(mem i&#39; (divisors bound))">
     <goal name="injec_mult_mod_pre&#39;vc.0.1.0.0" expl="asserted formula" proved="true">
     <proof prover="9"><result status="valid" time="0.46" steps="275860"/></proof>
     </goal>
     <goal name="injec_mult_mod_pre&#39;vc.0.1.0.1" expl="true case (assertion)" proved="true">
     <proof prover="9"><result status="valid" time="0.31" steps="220193"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="injec_mult_mod_pre&#39;vc.0.1.1" expl="false case (assertion)" proved="true">
    <proof prover="9"><result status="valid" time="0.40" steps="220171"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="injec_mult_mod_pre&#39;vc.1" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.64" steps="238023"/></proof>
  </goal>
  <goal name="injec_mult_mod_pre&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.63" steps="238017"/></proof>
  </goal>
  <goal name="injec_mult_mod_pre&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.54" steps="238017"/></proof>
  </goal>
  <goal name="injec_mult_mod_pre&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.53" steps="238152"/></proof>
  </goal>
  <goal name="injec_mult_mod_pre&#39;vc.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="injec_mult_mod_pre&#39;vc.5.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.64" steps="238133"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="injec_mult_mod_pre&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.55" steps="238482"/></proof>
  </goal>
  <goal name="injec_mult_mod_pre&#39;vc.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="injec_mult_mod_pre&#39;vc.8" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.55" steps="239041"/></proof>
  </goal>
  <goal name="injec_mult_mod_pre&#39;vc.9" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.69" steps="238154"/></proof>
  </goal>
  <goal name="injec_mult_mod_pre&#39;vc.10" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.55" steps="238154"/></proof>
  </goal>
  <goal name="injec_mult_mod_pre&#39;vc.11" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.56" steps="238484"/></proof>
  </goal>
  <goal name="injec_mult_mod_pre&#39;vc.12" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.27"/></proof>
  </goal>
  <goal name="injec_mult_mod_pre&#39;vc.13" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.71" steps="239047"/></proof>
  </goal>
  <goal name="injec_mult_mod_pre&#39;vc.14" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.70" steps="238156"/></proof>
  </goal>
  <goal name="injec_mult_mod_pre&#39;vc.15" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.52" steps="238156"/></proof>
  </goal>
  <goal name="injec_mult_mod_pre&#39;vc.16" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.55" steps="238486"/></proof>
  </goal>
  <goal name="injec_mult_mod_pre&#39;vc.17" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.35"/></proof>
  </goal>
  <goal name="injec_mult_mod_pre&#39;vc.18" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.34" steps="220419"/></proof>
  </goal>
  <goal name="injec_mult_mod_pre&#39;vc.19" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.44" steps="220436"/></proof>
  </goal>
  <goal name="injec_mult_mod_pre&#39;vc.20" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.69" steps="260672"/></proof>
  </goal>
  <goal name="injec_mult_mod_pre&#39;vc.21" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.52" steps="239445"/></proof>
  </goal>
  <goal name="injec_mult_mod_pre&#39;vc.22" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_mem_divisors">
   <goal name="injec_mult_mod_pre&#39;vc.22.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="injec_mult_mod_pre&#39;vc.22.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.34"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="injec_mult_mod_pre&#39;vc.22.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="injec_mult_mod_pre&#39;vc.22.1.0" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.43" steps="220479"/></proof>
    </goal>
    <goal name="injec_mult_mod_pre&#39;vc.22.1.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.34"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="injec_mult_mod_pre&#39;vc.22.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="injec_mult_mod_pre&#39;vc.22.2.0" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.33" steps="220479"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="injec_mult_mod_pre&#39;vc.23" expl="precondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="injec_mult_mod_pre&#39;vc.23.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.61" steps="315738"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="injec_mult_mod_pre&#39;vc.24" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(mem bound (divisors ((i&#39; - i) * a)))">
   <goal name="injec_mult_mod_pre&#39;vc.24.0" expl="asserted formula" proved="true">
   <transf name="apply" proved="true" arg1="set_mem_divisors">
    <goal name="injec_mult_mod_pre&#39;vc.24.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.40"/></proof>
    </goal>
    <goal name="injec_mult_mod_pre&#39;vc.24.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.39"/></proof>
    </goal>
    <goal name="injec_mult_mod_pre&#39;vc.24.0.2" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.42" steps="269052"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="injec_mult_mod_pre&#39;vc.24.1" expl="assertion" proved="true">
   <proof prover="12"><result status="valid" time="0.24" steps="7118"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="injec_mult_mod_pre&#39;vc.25" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.36"/></proof>
  </goal>
  <goal name="injec_mult_mod_pre&#39;vc.26" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.36" steps="220292"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="injec_mult_mod&#39;vc" expl="VC for injec_mult_mod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="injec_mult_mod&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.41" steps="220417"/></proof>
  </goal>
  <goal name="injec_mult_mod&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.31" steps="220436"/></proof>
  </goal>
  <goal name="injec_mult_mod&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.44" steps="220434"/></proof>
  </goal>
  <goal name="injec_mult_mod&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.50" steps="238340"/></proof>
  </goal>
  <goal name="injec_mult_mod&#39;vc.4" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(mod (i * a) bound = mod (i&#39; * a) bound)">
   <goal name="injec_mult_mod&#39;vc.4.0" expl="true case (postcondition)" proved="true">
   <transf name="case" proved="true" arg1="(i&lt;i&#39;)">
    <goal name="injec_mult_mod&#39;vc.4.0.0" expl="true case (postcondition)" proved="true">
    <transf name="assert" proved="true" arg1="(mod ((i&#39;-i)*a) bound = 0)">
     <goal name="injec_mult_mod&#39;vc.4.0.0.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="(mod (i&#39;-i) bound = 0)">
      <goal name="injec_mult_mod&#39;vc.4.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="(i&#39;-i &lt; bound)">
       <goal name="injec_mult_mod&#39;vc.4.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="9"><result status="valid" time="0.33" steps="220558"/></proof>
       </goal>
       <goal name="injec_mult_mod&#39;vc.4.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="9"><result status="valid" time="0.29" steps="220590"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="injec_mult_mod&#39;vc.4.0.0.0.1" expl="asserted formula" proved="true">
      <proof prover="9"><result status="valid" time="0.32" steps="220599"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="injec_mult_mod&#39;vc.4.0.0.1" expl="true case (postcondition)" proved="true">
     <proof prover="9"><result status="valid" time="0.32" steps="220569"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="injec_mult_mod&#39;vc.4.0.1" expl="false case (true case. postcondition)" proved="true">
    <proof prover="9"><result status="valid" time="0.32" steps="220536"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="injec_mult_mod&#39;vc.4.1" expl="false case (postcondition)" proved="true">
   <proof prover="9"><result status="valid" time="0.31" steps="220513"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="co_prime_mod_mult&#39;vc" expl="VC for co_prime_mod_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="co_prime_mod_mult&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="co_prime_mod">
   <goal name="co_prime_mod_mult&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.39"/></proof>
   </goal>
   <goal name="co_prime_mod_mult&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="9"><result status="valid" time="0.33" steps="220701"/></proof>
   </goal>
   <goal name="co_prime_mod_mult&#39;vc.0.2" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="0.52" steps="2317402"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_injec_mult_mod&#39;vc" expl="VC for set_injec_mult_mod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_injec_mult_mod&#39;vc.0" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="0.59" steps="2728902"/></proof>
  </goal>
  <goal name="set_injec_mult_mod&#39;vc.1" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="5.52" steps="1639133"/></proof>
  </goal>
  <goal name="set_injec_mult_mod&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.63" steps="290750"/></proof>
  </goal>
  <goal name="set_injec_mult_mod&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.65" steps="295652"/></proof>
  </goal>
  <goal name="set_injec_mult_mod&#39;vc.4" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_injective">
   <goal name="set_injec_mult_mod&#39;vc.4.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="set_injec_mult_mod&#39;vc.4.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="set_injec_mult_mod&#39;vc.4.0.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(a * e)" arg2="(e * a)">
      <goal name="set_injec_mult_mod&#39;vc.4.0.0.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(a * e&#39;)" arg2="(e&#39; * a)">
       <goal name="set_injec_mult_mod&#39;vc.4.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="injec_mult_mod">
        <goal name="set_injec_mult_mod&#39;vc.4.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="0.43" steps="294561"/></proof>
        </goal>
        <goal name="set_injec_mult_mod&#39;vc.4.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="0.99" steps="342910"/></proof>
        </goal>
        <goal name="set_injec_mult_mod&#39;vc.4.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="0.92" steps="342910"/></proof>
        </goal>
        <goal name="set_injec_mult_mod&#39;vc.4.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="0.43" steps="294559"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="set_injec_mult_mod&#39;vc.4.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="9"><result status="valid" time="0.54" steps="294582"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="set_injec_mult_mod&#39;vc.4.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="9"><result status="valid" time="0.45" steps="294582"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="set_injec_mult_mod&#39;vc.5" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="set_injec_mult_mod&#39;vc.5.0" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(co_prime (mod (a * e) bound) bound)">
    <goal name="set_injec_mult_mod&#39;vc.5.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="co_prime_mod">
     <goal name="set_injec_mult_mod&#39;vc.5.0.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.39"/></proof>
     </goal>
     <goal name="set_injec_mult_mod&#39;vc.5.0.0.1" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="0.46" steps="295432"/></proof>
     </goal>
     <goal name="set_injec_mult_mod&#39;vc.5.0.0.2" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="euclid_lemma_co_prime">
      <goal name="set_injec_mult_mod&#39;vc.5.0.0.2.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.98" steps="343614"/></proof>
      </goal>
      <goal name="set_injec_mult_mod&#39;vc.5.0.0.2.1" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.96" steps="343616"/></proof>
      </goal>
      <goal name="set_injec_mult_mod&#39;vc.5.0.0.2.2" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.75" steps="315418"/></proof>
      </goal>
      <goal name="set_injec_mult_mod&#39;vc.5.0.0.2.3" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="1.00" steps="344036"/></proof>
      </goal>
      <goal name="set_injec_mult_mod&#39;vc.5.0.0.2.4" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.42" steps="295430"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="set_injec_mult_mod&#39;vc.5.0.1" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="1.03" steps="345535"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="set_injec_mult_mod&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.00" steps="346276"/></proof>
  </goal>
  <goal name="set_injec_mult_mod&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.96" steps="346808"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="injec_mult_mod_rev&#39;vc" expl="VC for injec_mult_mod_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="injec_mult_mod_rev&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="12"><result status="valid" time="0.20" steps="5984"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bezout_set&#39;vc" expl="VC for bezout_set" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bezout_set&#39;vc.0" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(exists e. mem e res)">
   <goal name="bezout_set&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="bezout_set&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="rewrite" proved="true" arg1="res&#39;def">
     <goal name="bezout_set&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="bezout_set&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="exists" proved="true" arg1="pick">
       <goal name="bezout_set&#39;vc.0.0.0.0.0.0" proved="true">
       <transf name="replace" proved="true" arg1="(my_filter_int 1 (pick + 1) (fun (y2:int) -&gt; bezout_pred pick bound y2))" arg2="(my_filter (to_fset 1 (pick + 1)) (fun (y2:int) -&gt; bezout_pred pick bound y2))">
        <goal name="bezout_set&#39;vc.0.0.0.0.0.0.0" proved="true">
        <transf name="apply" proved="true" arg1="in_my_filter">
         <goal name="bezout_set&#39;vc.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="1.25" steps="410171"/></proof>
         </goal>
         <goal name="bezout_set&#39;vc.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="bezout_set&#39;vc.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="bezout_pred&#39;def">
           <goal name="bezout_set&#39;vc.0.0.0.0.0.0.0.1.0.0" proved="true">
           <transf name="exists" proved="true" arg1="1">
            <goal name="bezout_set&#39;vc.0.0.0.0.0.0.0.1.0.0.0" proved="true">
            <transf name="exists" proved="true" arg1="0">
             <goal name="bezout_set&#39;vc.0.0.0.0.0.0.0.1.0.0.0.0" proved="true">
             <proof prover="9"><result status="valid" time="0.55" steps="365756"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="bezout_set&#39;vc.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="set_equal">
         <goal name="bezout_set&#39;vc.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="bezout_set&#39;vc.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="9"><result status="valid" time="0.98" steps="387251"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="bezout_set&#39;vc.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="bezout_set&#39;vc.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
          <proof prover="9"><result status="valid" time="0.99" steps="387251"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="bezout_set&#39;vc.0.1" expl="precondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="bezout_set&#39;vc.0.1.0" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="5.40" steps="1594217"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="bezout_set&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.95" steps="386544"/></proof>
  </goal>
  <goal name="bezout_set&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.96" steps="387067"/></proof>
  </goal>
  <goal name="bezout_set&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.94" steps="386732"/></proof>
  </goal>
  <goal name="bezout_set&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.52" steps="365067"/></proof>
  </goal>
  <goal name="bezout_set&#39;vc.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.45"/></proof>
  </goal>
  <goal name="bezout_set&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.57" steps="365117"/></proof>
  </goal>
  <goal name="bezout_set&#39;vc.7" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.48"/></proof>
  </goal>
  <goal name="bezout_set&#39;vc.8" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(bezout_pred pick bound min)">
   <goal name="bezout_set&#39;vc.8.0" expl="asserted formula" proved="true">
   <proof prover="9"><result status="valid" time="1.01" steps="389556"/></proof>
   </goal>
   <goal name="bezout_set&#39;vc.8.1" expl="assertion" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="bezout_set&#39;vc.8.1.0" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="1.21" steps="412385"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="bezout_set&#39;vc.9" expl="assertion" proved="true">
  <proof prover="12"><result status="valid" time="0.22" steps="9147"/></proof>
  </goal>
  <goal name="bezout_set&#39;vc.10" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.96" steps="388091"/></proof>
  </goal>
  <goal name="bezout_set&#39;vc.11" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bezout_set&#39;vc.11.0" expl="assertion" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="bezout_set&#39;vc.11.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="res&#39;def">
     <goal name="bezout_set&#39;vc.11.0.0.0" expl="assertion" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="bezout_set&#39;vc.11.0.0.0.0" expl="assertion" proved="true">
      <transf name="replace" proved="true" arg1="(my_filter_int 1 (pick + 1) (fun (y2:int) -&gt; bezout_pred pick bound y2))" arg2="(my_filter (to_fset 1 (pick + 1)) (fun (y2:int) -&gt; bezout_pred pick bound y2))">
       <goal name="bezout_set&#39;vc.11.0.0.0.0.0" expl="assertion" proved="true">
       <transf name="apply" proved="true" arg1="in_my_filter">
        <goal name="bezout_set&#39;vc.11.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="1.26" steps="412403"/></proof>
        </goal>
        <goal name="bezout_set&#39;vc.11.0.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="bezout_set&#39;vc.11.0.0.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="bezout_pred&#39;def">
          <goal name="bezout_set&#39;vc.11.0.0.0.0.0.1.0.0" proved="true">
          <transf name="exists" proved="true" arg1="(1 - (div pick min * s))
">
           <goal name="bezout_set&#39;vc.11.0.0.0.0.0.1.0.0.0" proved="true">
           <transf name="exists" proved="true" arg1="(-(t*div pick min))
">
            <goal name="bezout_set&#39;vc.11.0.0.0.0.0.1.0.0.0.0" proved="true">
            <proof prover="9"><result status="valid" time="0.59" steps="366473"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="bezout_set&#39;vc.11.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="9"><result status="valid" time="0.99" steps="388643"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="bezout_set&#39;vc.11.1" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.58" steps="365270"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="bezout_set&#39;vc.12" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="1.91" steps="573682"/></proof>
  </goal>
  <goal name="bezout_set&#39;vc.13" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.94" steps="387148"/></proof>
  </goal>
  <goal name="bezout_set&#39;vc.14" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.07" steps="387637"/></proof>
  </goal>
  <goal name="bezout_set&#39;vc.15" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.96" steps="387340"/></proof>
  </goal>
  <goal name="bezout_set&#39;vc.16" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.55" steps="365173"/></proof>
  </goal>
  <goal name="bezout_set&#39;vc.17" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.45"/></proof>
  </goal>
  <goal name="bezout_set&#39;vc.18" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.57" steps="365238"/></proof>
  </goal>
  <goal name="bezout_set&#39;vc.19" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.48"/></proof>
  </goal>
  <goal name="bezout_set&#39;vc.20" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(bezout_pred pick bound min)">
   <goal name="bezout_set&#39;vc.20.0" expl="asserted formula" proved="true">
   <proof prover="9"><result status="valid" time="1.05" steps="389878"/></proof>
   </goal>
   <goal name="bezout_set&#39;vc.20.1" expl="assertion" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="bezout_set&#39;vc.20.1.0" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="1.30" steps="412931"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="bezout_set&#39;vc.21" expl="assertion" proved="true">
  <proof prover="12"><result status="valid" time="0.24" steps="9402"/></proof>
  </goal>
  <goal name="bezout_set&#39;vc.22" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.95" steps="388379"/></proof>
  </goal>
  <goal name="bezout_set&#39;vc.23" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bezout_set&#39;vc.23.0" expl="assertion" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="bezout_set&#39;vc.23.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="res&#39;def">
     <goal name="bezout_set&#39;vc.23.0.0.0" expl="assertion" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="bezout_set&#39;vc.23.0.0.0.0" expl="assertion" proved="true">
      <transf name="replace" proved="true" arg1="(my_filter_int 1 (pick + 1) (fun (y2:int) -&gt; bezout_pred pick bound y2))" arg2="(my_filter (to_fset 1 (pick + 1)) (fun (y2:int) -&gt; bezout_pred pick bound y2))">
       <goal name="bezout_set&#39;vc.23.0.0.0.0.0" expl="assertion" proved="true">
       <transf name="apply" proved="true" arg1="in_my_filter">
        <goal name="bezout_set&#39;vc.23.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="1.25" steps="413227"/></proof>
        </goal>
        <goal name="bezout_set&#39;vc.23.0.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="bezout_set&#39;vc.23.0.0.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="bezout_pred&#39;def">
          <goal name="bezout_set&#39;vc.23.0.0.0.0.0.1.0.0" proved="true">
          <transf name="exists" proved="true" arg1="(-(s * div bound min))
">
           <goal name="bezout_set&#39;vc.23.0.0.0.0.0.1.0.0.0" proved="true">
           <transf name="exists" proved="true" arg1="(1 - (div bound min * t))
">
            <goal name="bezout_set&#39;vc.23.0.0.0.0.0.1.0.0.0.0" proved="true">
            <proof prover="9"><result status="valid" time="0.58" steps="366590"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="bezout_set&#39;vc.23.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="9"><result status="valid" time="1.00" steps="389261"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="bezout_set&#39;vc.23.1" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.59" steps="365369"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="bezout_set&#39;vc.24" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="1.90" steps="574485"/></proof>
  </goal>
  <goal name="bezout_set&#39;vc.25" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(min_set res)" arg2="min">
   <goal name="bezout_set&#39;vc.25.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="1.23" steps="411284"/></proof>
   </goal>
   <goal name="bezout_set&#39;vc.25.1" expl="equality hypothesis" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="bezout_set&#39;vc.25.1.0" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="res&#39;def">
     <goal name="bezout_set&#39;vc.25.1.0.0" expl="equality hypothesis" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="bezout_set&#39;vc.25.1.0.0.0" expl="equality hypothesis" proved="true">
      <transf name="rewrite" proved="true" arg1="min&#39;def">
       <goal name="bezout_set&#39;vc.25.1.0.0.0.0" expl="equality hypothesis" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="bezout_set&#39;vc.25.1.0.0.0.0.0" expl="equality hypothesis" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="bezout_set&#39;vc.25.1.0.0.0.0.0.0" expl="equality hypothesis" proved="true">
         <transf name="rewrite" proved="true" arg1="min_filter_b&#39;spec5">
          <goal name="bezout_set&#39;vc.25.1.0.0.0.0.0.0.0" expl="equality hypothesis" proved="true">
          <transf name="rewrite" proved="true" arg1="min_filter_min_set">
           <goal name="bezout_set&#39;vc.25.1.0.0.0.0.0.0.0.0" expl="equality hypothesis" proved="true">
           <proof prover="9"><result status="valid" time="1.20" steps="469947"/></proof>
           </goal>
           <goal name="bezout_set&#39;vc.25.1.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="9"><result status="valid" time="1.84" steps="497117"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="bezout_set&#39;vc.25.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="9"><result status="valid" time="1.53" steps="492886"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="bezout_set&#39;vc.26" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(min_set res)" arg2="min">
   <goal name="bezout_set&#39;vc.26.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="1.27" steps="413394"/></proof>
   </goal>
   <goal name="bezout_set&#39;vc.26.1" expl="equality hypothesis" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="bezout_set&#39;vc.26.1.0" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="res&#39;def">
     <goal name="bezout_set&#39;vc.26.1.0.0" expl="equality hypothesis" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="bezout_set&#39;vc.26.1.0.0.0" expl="equality hypothesis" proved="true">
      <transf name="rewrite" proved="true" arg1="min&#39;def">
       <goal name="bezout_set&#39;vc.26.1.0.0.0.0" expl="equality hypothesis" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="bezout_set&#39;vc.26.1.0.0.0.0.0" expl="equality hypothesis" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="bezout_set&#39;vc.26.1.0.0.0.0.0.0" expl="equality hypothesis" proved="true">
         <transf name="rewrite" proved="true" arg1="min_filter_b&#39;spec5">
          <goal name="bezout_set&#39;vc.26.1.0.0.0.0.0.0.0" expl="equality hypothesis" proved="true">
          <transf name="rewrite" proved="true" arg1="min_filter_min_set">
           <goal name="bezout_set&#39;vc.26.1.0.0.0.0.0.0.0.0" expl="equality hypothesis" proved="true">
           <proof prover="9"><result status="valid" time="1.11" steps="469971"/></proof>
           </goal>
           <goal name="bezout_set&#39;vc.26.1.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="9"><result status="valid" time="1.67" steps="498841"/></proof>
           </goal>
          </transf>
          <transf name="rewrite" proved="true" arg1="my_filter_int&#39;spec6">
           <goal name="bezout_set&#39;vc.26.1.0.0.0.0.0.0.0.0" expl="equality hypothesis" proved="true">
           <proof prover="9"><result status="valid" time="5.51" steps="1562757"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="bezout_set&#39;vc.26.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="9"><result status="valid" time="1.34" steps="494133"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="bezout_set&#39;vc.27" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="2.14" steps="589033"/></proof>
  </goal>
  <goal name="bezout_set&#39;vc.28" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bezout_set&#39;vc.28.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="1.21" steps="413167"/></proof>
   </goal>
   <goal name="bezout_set&#39;vc.28.1" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(min = pick)">
    <goal name="bezout_set&#39;vc.28.1.0" expl="true case (postcondition)" proved="true">
    <proof prover="9"><result status="valid" time="1.22" steps="413100"/></proof>
    </goal>
    <goal name="bezout_set&#39;vc.28.1.1" expl="false case (postcondition)" proved="true">
    <proof prover="9"><result status="valid" time="1.19" steps="413108"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="bezout_set&#39;vc.29" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.89" steps="387524"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="euler_theorem&#39;vc" expl="VC for euler_theorem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="euler_theorem&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.49" steps="239794"/></proof>
  </goal>
  <goal name="euler_theorem&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.38" steps="221936"/></proof>
  </goal>
  <goal name="euler_theorem&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.59" steps="273562"/></proof>
  </goal>
  <goal name="euler_theorem&#39;vc.3" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="euler_theorem&#39;vc.3.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.57" steps="273452"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_theorem&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.89" steps="315934"/></proof>
  </goal>
  <goal name="euler_theorem&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.84" steps="315935"/></proof>
  </goal>
  <goal name="euler_theorem&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.84" steps="316017"/></proof>
  </goal>
  <goal name="euler_theorem&#39;vc.7" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.68" steps="315987"/></proof>
  </goal>
  <goal name="euler_theorem&#39;vc.8" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="bijective_is_injective" arg2="(fun (x:int) -&gt; mod (pick * x) bound),(co_primes bound),(co_primes bound)">
   <goal name="euler_theorem&#39;vc.8.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="Hinst">
    <goal name="euler_theorem&#39;vc.8.0.0" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.98" steps="348532"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_theorem&#39;vc.9" expl="assertion" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="euler_theorem&#39;vc.9.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="prod&#39;def">
    <goal name="euler_theorem&#39;vc.9.0.0" expl="assertion" proved="true">
    <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Ensures">
     <goal name="euler_theorem&#39;vc.9.0.0.0" expl="assertion" proved="true">
     <transf name="replace" proved="true" arg1="(map (fun (x:int) -&gt; mod (pick * x) bound) (co_primes bound))" arg2="(co_primes bound)" arg3="in" arg4="Ensures">
      <goal name="euler_theorem&#39;vc.9.0.0.0.0" expl="assertion" proved="true">
      <transf name="rewrite" proved="true" arg1="Ensures">
       <goal name="euler_theorem&#39;vc.9.0.0.0.0.0" expl="assertion" proved="true">
       <transf name="apply" proved="true" arg1="mod_eq">
        <goal name="euler_theorem&#39;vc.9.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="iproduct_eq">
         <goal name="euler_theorem&#39;vc.9.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="euler_theorem&#39;vc.9.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="euler_theorem&#39;vc.9.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="2.56"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="euler_theorem&#39;vc.9.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="Ensures11">
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_theorem&#39;vc.10" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.71" steps="317314"/></proof>
  </goal>
  <goal name="euler_theorem&#39;vc.11" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.84" steps="346613"/></proof>
  </goal>
  <goal name="euler_theorem&#39;vc.12" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.83" steps="346881"/></proof>
  </goal>
  <goal name="euler_theorem&#39;vc.13" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.03" steps="347296"/></proof>
  </goal>
  <goal name="euler_theorem&#39;vc.14" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.83" steps="347564"/></proof>
  </goal>
  <goal name="euler_theorem&#39;vc.15" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="Assert">
   <goal name="euler_theorem&#39;vc.15.0" expl="assertion" proved="true">
   <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Ensures6">
    <goal name="euler_theorem&#39;vc.15.0.0" expl="assertion" proved="true">
    <transf name="apply" proved="true" arg1="Ensures6">
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_theorem&#39;vc.16" expl="assertion" proved="true">
  <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Ensures12">
   <goal name="euler_theorem&#39;vc.16.0" expl="assertion" proved="true">
   <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Ensures6">
    <goal name="euler_theorem&#39;vc.16.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures12" arg2="in" arg3="Ensures6">
     <goal name="euler_theorem&#39;vc.16.0.0.0" expl="assertion" proved="true">
     <transf name="replace" proved="true" arg1="(mod (iproduct (co_primes bound) (fun (x:int) -&gt; x)) bound)" arg2="prod" arg3="in" arg4="Ensures6">
      <goal name="euler_theorem&#39;vc.16.0.0.0.0" expl="assertion" proved="true">
      <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Ensures">
       <goal name="euler_theorem&#39;vc.16.0.0.0.0.0" expl="assertion" proved="true">
       <transf name="assert" proved="true" arg1="(mod (iproduct (co_primes bound) (fun (i:int) -&gt; mod (pick * i) bound))
  bound = mod (power pick (euler_phi bound) * prod) bound)
">
        <goal name="euler_theorem&#39;vc.16.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="rewrite" proved="true" arg1="Ensures6">
         <goal name="euler_theorem&#39;vc.16.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="replace" proved="true" arg1="(cardinal (co_primes bound))" arg2="(euler_phi bound)
">
          <goal name="euler_theorem&#39;vc.16.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="rewrite" proved="true" arg1="mod_mod_mult_rev">
           <goal name="euler_theorem&#39;vc.16.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
           <transf name="replace" proved="true" arg1="(mod (iproduct (co_primes bound) (fun (x:int) -&gt; x)) bound)" arg2="prod
">
            <goal name="euler_theorem&#39;vc.16.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
            <transf name="rewrite" proved="true" arg1="mod_mod_mult_rev">
             <goal name="euler_theorem&#39;vc.16.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
             <transf name="apply" proved="true" arg1="goal_comm">
              <goal name="euler_theorem&#39;vc.16.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="mod_mod_mult_rev">
               <goal name="euler_theorem&#39;vc.16.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="mod_mod_i">
                <goal name="euler_theorem&#39;vc.16.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="compute_specified" proved="true" >
                </transf>
                </goal>
                <goal name="euler_theorem&#39;vc.16.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="9"><result status="valid" time="1.02" steps="348327"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="euler_theorem&#39;vc.16.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="9"><result status="valid" time="0.85" steps="348327"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="euler_theorem&#39;vc.16.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="9"><result status="valid" time="1.02" steps="348327"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="euler_theorem&#39;vc.16.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
            <transf name="eliminate_definition" proved="true" >
             <goal name="euler_theorem&#39;vc.16.0.0.0.0.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
             <transf name="rewrite" proved="true" arg1="prod&#39;def">
              <goal name="euler_theorem&#39;vc.16.0.0.0.0.0.0.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
              <transf name="rewrite" proved="true" arg1="Ensures">
               <goal name="euler_theorem&#39;vc.16.0.0.0.0.0.0.0.0.0.1.0.0.0" expl="equality hypothesis" proved="true">
               <transf name="apply" proved="true" arg1="mod_eq">
                <goal name="euler_theorem&#39;vc.16.0.0.0.0.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                <transf name="apply" proved="true" arg1="iproduct_eq">
                 <goal name="euler_theorem&#39;vc.16.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="compute_specified" proved="true" >
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="euler_theorem&#39;vc.16.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="9"><result status="valid" time="1.03" steps="348327"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="euler_theorem&#39;vc.16.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="9"><result status="valid" time="1.38" steps="380689"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="euler_theorem&#39;vc.16.0.0.0.0.0.1" expl="assertion" proved="true">
        <transf name="replace" proved="true" arg1="(mod (iproduct (co_primes bound) (fun (i:int) -&gt; mod (pick * i) bound))
  bound)" arg2="prod" arg3="in" arg4="h
">
         <goal name="euler_theorem&#39;vc.16.0.0.0.0.0.1.0" expl="assertion" proved="true">
         <transf name="apply" proved="true" arg1="h">
         </transf>
         </goal>
         <goal name="euler_theorem&#39;vc.16.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="goal_comm">
          <goal name="euler_theorem&#39;vc.16.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="Assert1">
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="euler_theorem&#39;vc.16.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="eliminate_definition" proved="true" >
       <goal name="euler_theorem&#39;vc.16.0.0.0.1.0" expl="equality hypothesis" proved="true">
       <transf name="rewrite" proved="true" arg1="prod&#39;def">
        <goal name="euler_theorem&#39;vc.16.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="goal_comm">
         <goal name="euler_theorem&#39;vc.16.0.0.0.1.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Ensures">
          <goal name="euler_theorem&#39;vc.16.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="Ensures">
           <goal name="euler_theorem&#39;vc.16.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="9"><result status="valid" time="0.50" steps="327324"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_theorem&#39;vc.17" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="(mod (power pick (euler_phi bound)) bound * prod)" arg2="(mod (power pick (euler_phi bound)) bound * (mod prod bound))">
   <goal name="euler_theorem&#39;vc.17.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="mult_mod">
    <goal name="euler_theorem&#39;vc.17.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.75" steps="346455"/></proof>
    </goal>
    <goal name="euler_theorem&#39;vc.17.0.1" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="0.86" steps="348911"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="euler_theorem&#39;vc.17.1" expl="equality hypothesis" proved="true">
   <proof prover="2"><result status="valid" time="0.77" steps="363996"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_theorem&#39;vc.18" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.80" steps="349690"/></proof>
  </goal>
  <goal name="euler_theorem&#39;vc.19" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.82" steps="348832"/></proof>
  </goal>
  <goal name="euler_theorem&#39;vc.20" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.84" steps="349709"/></proof>
  </goal>
  <goal name="euler_theorem&#39;vc.21" expl="precondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="euler_theorem&#39;vc.21.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="prod&#39;def">
    <goal name="euler_theorem&#39;vc.21.0.0" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="co_prime_mod">
     <goal name="euler_theorem&#39;vc.21.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="iproduct_strict_pos">
      <goal name="euler_theorem&#39;vc.21.0.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="euler_theorem&#39;vc.21.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="euler_theorem&#39;vc.21.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="2.91"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="euler_theorem&#39;vc.21.0.0.1" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="0.48" steps="327513"/></proof>
     </goal>
     <goal name="euler_theorem&#39;vc.21.0.0.2" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="co_prime_iproduct">
      <goal name="euler_theorem&#39;vc.21.0.0.2.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="1.02" steps="349952"/></proof>
      </goal>
      <goal name="euler_theorem&#39;vc.21.0.0.2.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="euler_theorem&#39;vc.21.0.0.2.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="euler_theorem&#39;vc.21.0.0.2.1.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="2.85"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="euler_theorem&#39;vc.21.0.0.2.2" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="euler_theorem&#39;vc.21.0.0.2.2.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="euler_theorem&#39;vc.21.0.0.2.2.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="co_prime_mod">
         <goal name="euler_theorem&#39;vc.21.0.0.2.2.0.0.0" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="1.25" steps="385655"/></proof>
         </goal>
         <goal name="euler_theorem&#39;vc.21.0.0.2.2.0.0.1" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="0.51" steps="327525"/></proof>
         </goal>
         <goal name="euler_theorem&#39;vc.21.0.0.2.2.0.0.2" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="1.18" steps="385973"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_theorem&#39;vc.22" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.88" steps="350322"/></proof>
  </goal>
  <goal name="euler_theorem&#39;vc.23" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.51" steps="326784"/></proof>
  </goal>
  <goal name="euler_theorem&#39;vc.24" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(1*prod)" arg2="prod">
   <goal name="euler_theorem&#39;vc.24.0" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(mod prod bound)" arg2="prod">
    <goal name="euler_theorem&#39;vc.24.0.0" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="goal_comm">
     <goal name="euler_theorem&#39;vc.24.0.0.0" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="0.02" steps="4130"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_theorem&#39;vc.24.0.1" expl="equality hypothesis" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="euler_theorem&#39;vc.24.0.1.0" expl="equality hypothesis" proved="true">
     <proof prover="0"><result status="valid" time="2.79"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="euler_theorem&#39;vc.24.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="one_mult">
    <goal name="euler_theorem&#39;vc.24.1.0" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.48" steps="326786"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_theorem&#39;vc.25" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.51" steps="326631"/></proof>
  </goal>
  <goal name="euler_theorem&#39;vc.26" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.55" steps="326634"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="modular_inverse&#39;vc" expl="VC for modular_inverse" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="modular_inverse&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.34" steps="222077"/></proof>
  </goal>
  <goal name="modular_inverse&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.33" steps="222081"/></proof>
  </goal>
  <goal name="modular_inverse&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.51" steps="239969"/></proof>
  </goal>
  <goal name="modular_inverse&#39;vc.3" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="modular_inverse&#39;vc.3.0" expl="precondition" proved="true">
   <transf name="exists" proved="true" arg1="(mod (power pick (euler_phi bound -1)) bound)">
    <goal name="modular_inverse&#39;vc.3.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="modular_inverse&#39;vc.3.0.0.0" proved="true">
     <proof prover="9"><result status="valid" time="0.62" steps="271695"/></proof>
     </goal>
     <goal name="modular_inverse&#39;vc.3.0.0.1" proved="true">
     <proof prover="9"><result status="valid" time="0.63" steps="271728"/></proof>
     </goal>
     <goal name="modular_inverse&#39;vc.3.0.0.2" proved="true">
     <transf name="rewrite" proved="true" arg1="mod_mod_mult_rev">
      <goal name="modular_inverse&#39;vc.3.0.0.2.0" proved="true">
      <transf name="rewrite" proved="true" arg1="mod_mod_i">
       <goal name="modular_inverse&#39;vc.3.0.0.2.0.0" proved="true">
       <transf name="rewrite" proved="true" arg1="mod_mod_mult">
        <goal name="modular_inverse&#39;vc.3.0.0.2.0.0.0" proved="true">
        <transf name="replace" proved="true" arg1="(power pick (euler_phi bound - 1) * pick)" arg2="(power pick (euler_phi bound))">
         <goal name="modular_inverse&#39;vc.3.0.0.2.0.0.0.0" proved="true">
         <proof prover="9"><result status="valid" time="0.37" steps="252416"/></proof>
         </goal>
         <goal name="modular_inverse&#39;vc.3.0.0.2.0.0.0.1" expl="equality hypothesis" proved="true">
         <transf name="assert" proved="true" arg1="(power pick (euler_phi bound) =  power pick (euler_phi bound -1 +1))">
          <goal name="modular_inverse&#39;vc.3.0.0.2.0.0.0.1.0" expl="asserted formula" proved="true">
          <proof prover="9"><result status="valid" time="0.36" steps="252437"/></proof>
          </goal>
          <goal name="modular_inverse&#39;vc.3.0.0.2.0.0.0.1.1" expl="equality hypothesis" proved="true">
          <transf name="rewrite" proved="true" arg1="power_sum" arg2="in" arg3="h">
           <goal name="modular_inverse&#39;vc.3.0.0.2.0.0.0.1.1.0" expl="equality hypothesis" proved="true">
           <proof prover="12"><result status="valid" time="0.20" steps="8019"/></proof>
           </goal>
           <goal name="modular_inverse&#39;vc.3.0.0.2.0.0.0.1.1.1" expl="rewrite premises" proved="true">
           <transf name="assert" proved="true" arg1="(1 &lt; bound)">
            <goal name="modular_inverse&#39;vc.3.0.0.2.0.0.0.1.1.1.0" expl="asserted formula" proved="true">
            <proof prover="9"><result status="valid" time="0.63" steps="271787"/></proof>
            </goal>
            <goal name="modular_inverse&#39;vc.3.0.0.2.0.0.0.1.1.1.1" expl="rewrite premises" proved="true">
            <transf name="assert" proved="true" arg1="(mem (euler_phi bound) (to_fset 1 bound))">
             <goal name="modular_inverse&#39;vc.3.0.0.2.0.0.0.1.1.1.1.0" expl="asserted formula" proved="true">
             <proof prover="9"><result status="valid" time="0.96" steps="342915"/></proof>
             </goal>
             <goal name="modular_inverse&#39;vc.3.0.0.2.0.0.0.1.1.1.1.1" expl="rewrite premises" proved="true">
             <proof prover="0"><result status="valid" time="0.32"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="modular_inverse&#39;vc.3.0.0.2.0.0.0.1.1.2" expl="rewrite premises" proved="true">
           <proof prover="9"><result status="valid" time="0.38" steps="252448"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="modular_inverse&#39;vc.3.0.0.2.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="9"><result status="valid" time="0.59" steps="271756"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="modular_inverse&#39;vc.3.0.0.2.0.1" expl="rewrite premises" proved="true">
       <proof prover="9"><result status="valid" time="0.59" steps="271756"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="modular_inverse&#39;vc.3.0.0.2.1" expl="rewrite premises" proved="true">
      <proof prover="9"><result status="valid" time="0.60" steps="271756"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_inverse&#39;vc.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_inverse&#39;vc.4.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.36" steps="253124"/></proof>
   </goal>
   <goal name="modular_inverse&#39;vc.4.1" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.36" steps="253126"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_inverse&#39;vc.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_inverse&#39;vc.5.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.81" steps="295872"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="multi_order&#39;vc" expl="VC for multi_order" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="multi_order&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.50" steps="240418"/></proof>
  </goal>
  <goal name="multi_order&#39;vc.1" expl="precondition" proved="true">
  <transf name="exists" proved="true" arg1="(euler_phi bound)">
   <goal name="multi_order&#39;vc.1.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="multi_order&#39;vc.1.0.0" proved="true">
    <transf name="assert" proved="true" arg1="(mem (euler_phi bound) (to_fset 1 bound))">
     <goal name="multi_order&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <proof prover="9"><result status="valid" time="0.91" steps="341170"/></proof>
     </goal>
     <goal name="multi_order&#39;vc.1.0.0.1" proved="true">
     <proof prover="0"><result status="valid" time="0.31"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="multi_order&#39;vc.1.0.1" proved="true">
    <proof prover="9"><result status="valid" time="5.55" steps="1753740"/></proof>
    </goal>
    <goal name="multi_order&#39;vc.1.0.2" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="multi_order&#39;vc.1.0.2.0" proved="true">
     <transf name="apply" proved="true" arg1="euler_theorem">
      <goal name="multi_order&#39;vc.1.0.2.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="multi_order&#39;vc.1.0.2.0.0.0" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="0.34" steps="252794"/></proof>
       </goal>
       <goal name="multi_order&#39;vc.1.0.2.0.0.1" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="0.35" steps="252807"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="multi_order&#39;vc.1.0.2.0.1" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.34" steps="252792"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="multi_order&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multi_order&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.55" steps="253501"/></proof>
   </goal>
   <goal name="multi_order&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.36" steps="253503"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multi_order&#39;vc.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multi_order&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.84" steps="295831"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="modular_expo&#39;vc" expl="VC for modular_expo" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="modular_expo&#39;vc.0" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.74" steps="241067"/></proof>
  </goal>
  <goal name="modular_expo&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.33" steps="223153"/></proof>
  </goal>
  <goal name="modular_expo&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.47" steps="223125"/></proof>
  </goal>
  <goal name="modular_expo&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.42" steps="223139"/></proof>
  </goal>
  <goal name="modular_expo&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.31" steps="223157"/></proof>
  </goal>
  <goal name="modular_expo&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.41" steps="223161"/></proof>
  </goal>
  <goal name="modular_expo&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.33" steps="223164"/></proof>
  </goal>
  <goal name="modular_expo&#39;vc.7" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="modular_expo&#39;vc.7.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.35" steps="230006"/></proof>
   </goal>
   <goal name="modular_expo&#39;vc.7.1" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="((k * multi_order a bound)+i)" arg2="((((k-1) * multi_order a bound)+i)  + multi_order a bound)">
    <goal name="modular_expo&#39;vc.7.1.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="power_sum">
     <goal name="modular_expo&#39;vc.7.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="mod_mod_mult_rev">
      <goal name="modular_expo&#39;vc.7.1.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="mult_one">
       <goal name="modular_expo&#39;vc.7.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="mod_mod_i">
        <goal name="modular_expo&#39;vc.7.1.0.0.0.0.0" expl="postcondition" proved="true">
        <proof prover="9"><result status="valid" time="0.32" steps="223222"/></proof>
        </goal>
        <goal name="modular_expo&#39;vc.7.1.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="9"><result status="valid" time="0.51" steps="241700"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="modular_expo&#39;vc.7.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="9"><result status="valid" time="0.69" steps="265360"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="modular_expo&#39;vc.7.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="9"><result status="valid" time="0.51" steps="241700"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="modular_expo&#39;vc.7.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.27"/></proof>
     </goal>
     <goal name="modular_expo&#39;vc.7.1.0.2" expl="rewrite premises" proved="true">
     <proof prover="9"><result status="valid" time="0.72" steps="265328"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="modular_expo&#39;vc.7.1.1" expl="equality hypothesis" proved="true">
    <proof prover="9"><result status="valid" time="0.30" steps="223252"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="modular_expo_gen&#39;vc" expl="VC for modular_expo_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="modular_expo_gen&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.96" steps="2378686"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="modular_expo_rev&#39;vc" expl="VC for modular_expo_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="modular_expo_rev&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.92" steps="2380930"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="modular_expo_gen_rev&#39;vc" expl="VC for modular_expo_gen_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="modular_expo_gen_rev&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.51" steps="2372130"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="modular_expo_modulo&#39;vc" expl="VC for modular_expo_modulo" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="modular_expo_modulo&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.31" steps="224373"/></proof>
  </goal>
  <goal name="modular_expo_modulo&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.30" steps="224377"/></proof>
  </goal>
  <goal name="modular_expo_modulo&#39;vc.2" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="Ensures" arg2="(mod i (multi_order pick bound)),(div i (multi_order pick bound))">
   <goal name="modular_expo_modulo&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="((div i (multi_order pick bound) * multi_order pick bound)
    + mod i (multi_order pick bound))" arg2="i" arg3="in" arg4="Hinst">
    <goal name="modular_expo_modulo&#39;vc.2.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="Hinst">
     <goal name="modular_expo_modulo&#39;vc.2.0.0.0" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="0.71" steps="267055"/></proof>
     </goal>
     <goal name="modular_expo_modulo&#39;vc.2.0.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.29"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="modular_expo_modulo&#39;vc.2.0.1" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="0.29"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="modular_expo_modulo_rev&#39;vc" expl="VC for modular_expo_modulo_rev" proved="true">
 <proof prover="9"><result status="valid" time="0.69" steps="266203"/></proof>
 </goal>
 <goal name="injec_mod_prod_multi_order_pre&#39;vc" expl="VC for injec_mod_prod_multi_order_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="injec_mod_prod_multi_order_pre&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.68" steps="292919"/></proof>
  </goal>
  <goal name="injec_mod_prod_multi_order_pre&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.64" steps="292919"/></proof>
  </goal>
  <goal name="injec_mod_prod_multi_order_pre&#39;vc.2" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="((i + multi_order pick bound) - i&#39;)" arg2="(i + (multi_order pick bound - i&#39;))">
   <goal name="injec_mod_prod_multi_order_pre&#39;vc.2.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="power_sum">
    <goal name="injec_mod_prod_multi_order_pre&#39;vc.2.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="mod_mod_mult_rev">
     <goal name="injec_mod_prod_multi_order_pre&#39;vc.2.0.0.0" expl="assertion" proved="true">
     <transf name="replace" proved="true" arg1="(mod (power pick i) bound)" arg2="(mod (power pick i&#39;) bound)">
      <goal name="injec_mod_prod_multi_order_pre&#39;vc.2.0.0.0.0" expl="assertion" proved="true">
      <transf name="rewrite" proved="true" arg1="mod_mod_mult">
       <goal name="injec_mod_prod_multi_order_pre&#39;vc.2.0.0.0.0.0" expl="assertion" proved="true">
       <transf name="rewrite" proved="true" arg1="power_sum_rev">
        <goal name="injec_mod_prod_multi_order_pre&#39;vc.2.0.0.0.0.0.0" expl="assertion" proved="true">
        <proof prover="9"><result status="valid" time="0.88" steps="319586"/></proof>
        </goal>
        <goal name="injec_mod_prod_multi_order_pre&#39;vc.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="9"><result status="valid" time="0.86" steps="319119"/></proof>
        </goal>
        <goal name="injec_mod_prod_multi_order_pre&#39;vc.2.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="9"><result status="valid" time="0.87" steps="319267"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="injec_mod_prod_multi_order_pre&#39;vc.2.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="9"><result status="valid" time="0.66" steps="293340"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="injec_mod_prod_multi_order_pre&#39;vc.2.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="9"><result status="valid" time="0.40" steps="273542"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="injec_mod_prod_multi_order_pre&#39;vc.2.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="9"><result status="valid" time="0.63" steps="293340"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="injec_mod_prod_multi_order_pre&#39;vc.2.0.1" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="0.85" steps="319119"/></proof>
    </goal>
    <goal name="injec_mod_prod_multi_order_pre&#39;vc.2.0.2" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="0.90" steps="319267"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="injec_mod_prod_multi_order_pre&#39;vc.2.1" expl="equality hypothesis" proved="true">
   <proof prover="9"><result status="valid" time="0.55" steps="273574"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="injec_mod_prod_multi_order_pre&#39;vc.3" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="injec_mod_prod_multi_order_pre&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.54" steps="273538"/></proof>
   </goal>
   <goal name="injec_mod_prod_multi_order_pre&#39;vc.3.1" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(mod (power pick i&#39;) bound = mod (power pick i) bound)">
    <goal name="injec_mod_prod_multi_order_pre&#39;vc.3.1.0" expl="true case (postcondition)" proved="true">
    <transf name="replace" proved="true" arg1="((i + multi_order pick bound) - i&#39;)" arg2="(1* multi_order pick bound + (i - i&#39;))" arg3="in" arg4="H">
     <goal name="injec_mod_prod_multi_order_pre&#39;vc.3.1.0.0" expl="true case (postcondition)" proved="true">
     <transf name="assert" proved="true" arg1="(exists b. 1&lt;= b &lt; bound /\  b &lt; multi_order pick bound /\ (fun (i1:int) -&gt; mod (power pick i1) bound = 1) b)">
      <goal name="injec_mod_prod_multi_order_pre&#39;vc.3.1.0.0.0" expl="asserted formula" proved="true">
      <proof prover="9"><result status="valid" time="5.00" steps="1508321"/></proof>
      </goal>
      <goal name="injec_mod_prod_multi_order_pre&#39;vc.3.1.0.0.1" expl="true case (postcondition)" proved="true">
      <transf name="destruct" proved="true" arg1="h">
       <goal name="injec_mod_prod_multi_order_pre&#39;vc.3.1.0.0.1.0" expl="true case (postcondition)" proved="true">
       <transf name="assert" proved="true" arg1="(multi_order pick bound &lt;= b)">
        <goal name="injec_mod_prod_multi_order_pre&#39;vc.3.1.0.0.1.0.0" expl="asserted formula" proved="true">
        <transf name="rewrite" proved="true" arg1="multi_order&#39;def">
         <goal name="injec_mod_prod_multi_order_pre&#39;vc.3.1.0.0.1.0.0.0" expl="asserted formula" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="injec_mod_prod_multi_order_pre&#39;vc.3.1.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="min_filter_b&#39;spec1">
           <goal name="injec_mod_prod_multi_order_pre&#39;vc.3.1.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="9"><result status="valid" time="5.32" steps="1507158"/></proof>
           </goal>
           <goal name="injec_mod_prod_multi_order_pre&#39;vc.3.1.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="9"><result status="valid" time="0.47" steps="321535"/></proof>
           </goal>
           <goal name="injec_mod_prod_multi_order_pre&#39;vc.3.1.0.0.1.0.0.0.0.2" expl="apply premises" proved="true">
           <proof prover="9"><result status="valid" time="1.10" steps="404292"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="injec_mod_prod_multi_order_pre&#39;vc.3.1.0.0.1.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="9"><result status="valid" time="0.37" steps="273777"/></proof>
         </goal>
         <goal name="injec_mod_prod_multi_order_pre&#39;vc.3.1.0.0.1.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="9"><result status="valid" time="0.40" steps="273788"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="injec_mod_prod_multi_order_pre&#39;vc.3.1.0.0.1.0.1" expl="true case (postcondition)" proved="true">
        <proof prover="9"><result status="valid" time="0.38" steps="273788"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="injec_mod_prod_multi_order_pre&#39;vc.3.1.0.1" expl="equality hypothesis" proved="true">
     <proof prover="9"><result status="valid" time="0.39" steps="273616"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="injec_mod_prod_multi_order_pre&#39;vc.3.1.1" expl="false case (postcondition)" proved="true">
    <proof prover="9"><result status="valid" time="0.40" steps="273595"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="injec_mod_prod_multi_order&#39;vc" expl="VC for injec_mod_prod_multi_order" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="injec_mod_prod_multi_order&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.35" steps="273729"/></proof>
  </goal>
  <goal name="injec_mod_prod_multi_order&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.40" steps="273743"/></proof>
  </goal>
  <goal name="injec_mod_prod_multi_order&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.38" steps="273747"/></proof>
  </goal>
  <goal name="injec_mod_prod_multi_order&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.56" steps="273750"/></proof>
  </goal>
  <goal name="injec_mod_prod_multi_order&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.38" steps="273768"/></proof>
  </goal>
  <goal name="injec_mod_prod_multi_order&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.38" steps="273746"/></proof>
  </goal>
  <goal name="injec_mod_prod_multi_order&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.39" steps="273760"/></proof>
  </goal>
  <goal name="injec_mod_prod_multi_order&#39;vc.7" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.38" steps="273764"/></proof>
  </goal>
  <goal name="injec_mod_prod_multi_order&#39;vc.8" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.38" steps="273767"/></proof>
  </goal>
  <goal name="injec_mod_prod_multi_order&#39;vc.9" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.62" steps="293295"/></proof>
  </goal>
  <goal name="injec_mod_prod_multi_order&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.39" steps="273822"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="injec_mod_prod_multi_order_gen&#39;vc" expl="VC for injec_mod_prod_multi_order_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="injec_mod_prod_multi_order_gen&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.45" steps="225494"/></proof>
  </goal>
  <goal name="injec_mod_prod_multi_order_gen&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.30" steps="225508"/></proof>
  </goal>
  <goal name="injec_mod_prod_multi_order_gen&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.49" steps="243930"/></proof>
  </goal>
  <goal name="injec_mod_prod_multi_order_gen&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.31" steps="225579"/></proof>
  </goal>
  <goal name="injec_mod_prod_multi_order_gen&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.45" steps="225593"/></proof>
  </goal>
  <goal name="injec_mod_prod_multi_order_gen&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.53" steps="243946"/></proof>
  </goal>
  <goal name="injec_mod_prod_multi_order_gen&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.33" steps="225591"/></proof>
  </goal>
  <goal name="injec_mod_prod_multi_order_gen&#39;vc.7" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.31" steps="225605"/></proof>
  </goal>
  <goal name="injec_mod_prod_multi_order_gen&#39;vc.8" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.84" steps="319730"/></proof>
  </goal>
  <goal name="injec_mod_prod_multi_order_gen&#39;vc.9" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.87" steps="320337"/></proof>
  </goal>
  <goal name="injec_mod_prod_multi_order_gen&#39;vc.10" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.38" steps="274155"/></proof>
  </goal>
  <goal name="injec_mod_prod_multi_order_gen&#39;vc.11" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(mod (power pick (mod i&#39; (multi_order pick bound))) bound)" arg2="(mod (power pick i&#39;) bound )" arg3="in" arg4="Ensures">
   <goal name="injec_mod_prod_multi_order_gen&#39;vc.11.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.33"/></proof>
   </goal>
   <goal name="injec_mod_prod_multi_order_gen&#39;vc.11.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="modular_expo_modulo_rev">
    <goal name="injec_mod_prod_multi_order_gen&#39;vc.11.1.0" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.38" steps="225662"/></proof>
    </goal>
    <goal name="injec_mod_prod_multi_order_gen&#39;vc.11.1.1" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.36" steps="225673"/></proof>
    </goal>
    <goal name="injec_mod_prod_multi_order_gen&#39;vc.11.1.2" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.43" steps="225662"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mod_eq_power_to_multi_order&#39;vc" expl="VC for mod_eq_power_to_multi_order" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mod_eq_power_to_multi_order&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.46" steps="225813"/></proof>
  </goal>
  <goal name="mod_eq_power_to_multi_order&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.34" steps="225827"/></proof>
  </goal>
  <goal name="mod_eq_power_to_multi_order&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.50" steps="244491"/></proof>
  </goal>
  <goal name="mod_eq_power_to_multi_order&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.30" steps="225898"/></proof>
  </goal>
  <goal name="mod_eq_power_to_multi_order&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.34" steps="225912"/></proof>
  </goal>
  <goal name="mod_eq_power_to_multi_order&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.72" steps="244507"/></proof>
  </goal>
  <goal name="mod_eq_power_to_multi_order&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.32" steps="225997"/></proof>
  </goal>
  <goal name="mod_eq_power_to_multi_order&#39;vc.7" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.45" steps="226011"/></proof>
  </goal>
  <goal name="mod_eq_power_to_multi_order&#39;vc.8" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.29" steps="226013"/></proof>
  </goal>
  <goal name="mod_eq_power_to_multi_order&#39;vc.9" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.30" steps="226018"/></proof>
  </goal>
  <goal name="mod_eq_power_to_multi_order&#39;vc.10" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.31" steps="226021"/></proof>
  </goal>
  <goal name="mod_eq_power_to_multi_order&#39;vc.11" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.31" steps="226004"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mod_eq_multi_order_to_power&#39;vc" expl="VC for mod_eq_multi_order_to_power" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mod_eq_multi_order_to_power&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.38"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Incr_abs" proved="true">
 <goal name="incr_abs&#39;vc" expl="VC for incr_abs" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="incr_abs&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="224"/></proof>
  </goal>
  <goal name="incr_abs&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="245"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="decr_abs&#39;vc" expl="VC for decr_abs" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="decr_abs&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="433"/></proof>
  </goal>
  <goal name="decr_abs&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="443"/></proof>
  </goal>
  <goal name="decr_abs&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="decr_abs&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(0&lt;k)">
    <goal name="decr_abs&#39;vc.2.0.0" expl="true case (postcondition)" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures1">
     <goal name="decr_abs&#39;vc.2.0.0.0" expl="true case (postcondition)" proved="true">
     <proof prover="9"><result status="valid" time="0.01" steps="810"/></proof>
     </goal>
     <goal name="decr_abs&#39;vc.2.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="9"><result status="valid" time="0.01" steps="541"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decr_abs&#39;vc.2.0.1" expl="false case (postcondition)" proved="true">
    <proof prover="9"><result status="valid" time="0.01" steps="851"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="decr_inc&#39;vc" expl="VC for decr_inc" proved="true">
 <proof prover="9"><result status="valid" time="0.01" steps="1621"/></proof>
 </goal>
</theory>
</file>
</why3session>
