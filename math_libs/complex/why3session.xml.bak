<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="CVC3" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="8" name="Alt-Ergo" version="2.4.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="10" name="Z3" version="4.8.6" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="11" name="CVC4" version="1.7" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="complex.mlw"/>
<theory name="Assert_equal" proved="true">
 <goal name="assert_equal&#39;vc" expl="VC for assert_equal" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="assert_equal&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.01" steps="455"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="goal_comm&#39;vc" expl="VC for goal_comm" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="goal_comm&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.01" steps="463"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="P_real" proved="true">
 <goal name="infix /*&#39;vc" expl="VC for infix /*" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="infix /*&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.01" steps="1775"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="infix =*&#39;vc" expl="VC for infix =*" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="infix =*&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="infix =*&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.01" steps="1932"/></proof>
   </goal>
   <goal name="infix =*&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.01" steps="1932"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="infix &lt;&gt;*&#39;vc" expl="VC for infix &lt;&gt;*" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="infix &lt;&gt;*&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="infix &lt;&gt;*&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.01" steps="1976"/></proof>
   </goal>
   <goal name="infix &lt;&gt;*&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.01" steps="1976"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Zero" proved="true">
 <proof prover="11"><result status="valid" time="0.01" steps="2685"/></proof>
 </goal>
 <goal name="Add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="Add.0" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="2806"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="One" proved="true">
 <proof prover="11"><result status="valid" time="0.01" steps="2753"/></proof>
 </goal>
 <goal name="Sub" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="Sub.0" proved="true">
  <proof prover="11"><result status="valid" time="0.01" steps="2915"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mul_pos&#39;vc" expl="VC for mul_pos" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mul_pos&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="mul_pos&#39;vc.1" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.01" steps="2595"/></proof>
  </goal>
  <goal name="mul_pos&#39;vc.2" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mul_pos&#39;vc.2.0" expl="variant decrease" proved="true">
   <proof prover="11"><result status="valid" time="0.01" steps="2599"/></proof>
   </goal>
   <goal name="mul_pos&#39;vc.2.1" expl="variant decrease" proved="true">
   <proof prover="11"><result status="valid" time="0.01" steps="2608"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mul_pos&#39;vc.3" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.01" steps="3018"/></proof>
  </goal>
  <goal name="mul_pos&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.01"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mul&#39;vc" expl="VC for mul" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mul&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="2599"/></proof>
  </goal>
  <goal name="mul&#39;vc.1" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.01" steps="2624"/></proof>
  </goal>
  <goal name="mul&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mul&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.02" steps="2636"/></proof>
   </goal>
   <goal name="mul&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.01" steps="2676"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mul_rev&#39;vc" expl="VC for mul_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mul_rev&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="6567"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="neg" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="neg.0" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="3252"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="injective" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="injective.0" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="3277"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Monotonic" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="Monotonic.0" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="3352"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="r_zeroLessOne&#39;vc" expl="VC for r_zeroLessOne" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="r_zeroLessOne&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.01" steps="3044"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="r_compatOrderAdd&#39;vc" expl="VC for r_compatOrderAdd" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="r_compatOrderAdd&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.01" steps="3083"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="r_compatOrderMult&#39;vc" expl="VC for r_compatOrderMult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="r_compatOrderMult&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.01"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inv_order&#39;vc" expl="VC for inv_order" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inv_order&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="inv_order&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="8"><result status="valid" time="0.01" steps="543"/></proof>
   </goal>
   <goal name="inv_order&#39;vc.0.1" expl="assertion" proved="true">
   <proof prover="8"><result status="valid" time="0.01" steps="681"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="inv_order&#39;vc.1" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="inv_order&#39;vc.1.0" expl="assertion" proved="true">
   <proof prover="8"><result status="valid" time="0.45" steps="37905"/></proof>
   </goal>
   <goal name="inv_order&#39;vc.1.1" expl="assertion" proved="true">
   <proof prover="8"><result status="valid" time="0.05" steps="3023"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="inv_order&#39;vc.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="inv_order&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="11"><result status="valid" time="0.03" steps="15838"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="inv_order&#39;vc.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="inv_order&#39;vc.3.0" expl="precondition" proved="true">
   <proof prover="11"><result status="valid" time="0.01" steps="3454"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="inv_order&#39;vc.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="inv_order&#39;vc.4.0" expl="precondition" proved="true">
   <proof prover="11"><result status="valid" time="0.31" steps="262643"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="inv_order&#39;vc.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="inv_order&#39;vc.5.0" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.01" steps="4287"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="inv_strict_order&#39;vc" expl="VC for inv_strict_order" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inv_strict_order&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="inv_strict_order&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="8"><result status="valid" time="0.02" steps="1007"/></proof>
   </goal>
   <goal name="inv_strict_order&#39;vc.0.1" expl="assertion" proved="true">
   <proof prover="8"><result status="valid" time="0.03" steps="1943"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="inv_strict_order&#39;vc.1" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="inv_strict_order&#39;vc.1.0" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="0.03" steps="143450"/></proof>
   </goal>
   <goal name="inv_strict_order&#39;vc.1.1" expl="assertion" proved="true">
   <proof prover="8"><result status="valid" time="0.06" steps="3971"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="inv_strict_order&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="inv_strict_order&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.34" steps="12791"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Complex" proved="true">
 <goal name="teq&#39;vc" expl="VC for teq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="teq&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.01" steps="589"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="infix /.&#39;vc" expl="VC for infix /." proved="true">
 <proof prover="11"><result status="valid" time="0.01" steps="1976"/></proof>
 </goal>
 <goal name="invol_neg&#39;vc" expl="VC for invol_neg" proved="true">
 <proof prover="8"><result status="valid" time="0.02" steps="1713"/></proof>
 </goal>
 <goal name="injective_neg&#39;vc" expl="VC for injective_neg" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="injective_neg&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.01"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="find_opposite&#39;vc" expl="VC for find_opposite" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="find_opposite&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.03" steps="2145"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="div_as_mult_inv&#39;vc" expl="VC for div_as_mult_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="div_as_mult_inv&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.01" steps="6841"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_opposite&#39;vc" expl="VC for add_opposite" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_opposite&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="5954"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="opposite&#39;vc" expl="VC for opposite" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="opposite&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="6838"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mult_num&#39;vc" expl="VC for mult_num" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mult_num&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="7068"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="div_rev&#39;vc" expl="VC for div_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="div_rev&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="6169"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mult_div_num&#39;vc" expl="VC for mult_div_num" proved="true">
 <proof prover="11"><result status="valid" time="0.02" steps="7342"/></proof>
 </goal>
 <goal name="mult_denom&#39;vc" expl="VC for mult_denom" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mult_denom&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.50"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mult_simpl&#39;vc" expl="VC for mult_simpl" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mult_simpl&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.01" steps="5894"/></proof>
  </goal>
  <goal name="mult_simpl&#39;vc.1" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="5897"/></proof>
  </goal>
  <goal name="mult_simpl&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.07"/></proof>
  </goal>
  <goal name="mult_simpl&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="10662"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="dic_simpl&#39;vc" expl="VC for dic_simpl" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="dic_simpl&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="9883"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="simpl_with_c_one&#39;vc" expl="VC for simpl_with_c_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="simpl_with_c_one&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="8037"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_op&#39;vc" expl="VC for add_op" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_op&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="6769"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mult_eq_t&#39;vc" expl="VC for mult_eq_t" proved="true">
 <proof prover="11"><result status="valid" time="0.02" steps="6397"/></proof>
 </goal>
 <goal name="mult_eq_t_rev&#39;vc" expl="VC for mult_eq_t_rev" proved="true">
 <proof prover="11"><result status="valid" time="0.02" steps="7024"/></proof>
 </goal>
 <goal name="mult_comm&#39;vc" expl="VC for mult_comm" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mult_comm&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="7098"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mult_assoc&#39;vc" expl="VC for mult_assoc" proved="true">
 <proof prover="11"><result status="valid" time="0.02" steps="7128"/></proof>
 </goal>
 <goal name="mult_abc_to_acb&#39;vc" expl="VC for mult_abc_to_acb" proved="true">
 <proof prover="11"><result status="valid" time="0.02" steps="8287"/></proof>
 </goal>
 <goal name="zero_mult_t&#39;vc" expl="VC for zero_mult_t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="zero_mult_t&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mult_zero_t&#39;vc" expl="VC for mult_zero_t" proved="true">
 <proof prover="11"><result status="valid" time="0.02" steps="8277"/></proof>
 </goal>
 <goal name="mult_one_t&#39;vc" expl="VC for mult_one_t" proved="true">
 <proof prover="11"><result status="valid" time="0.03" steps="8365"/></proof>
 </goal>
 <goal name="add_eq_t&#39;vc" expl="VC for add_eq_t" proved="true">
 <proof prover="11"><result status="valid" time="0.02" steps="7057"/></proof>
 </goal>
 <goal name="add_eq_t_rev&#39;vc" expl="VC for add_eq_t_rev" proved="true">
 <proof prover="11"><result status="valid" time="0.02" steps="7707"/></proof>
 </goal>
 <goal name="substr_eq_t&#39;vc" expl="VC for substr_eq_t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="substr_eq_t&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.01" steps="7240"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="r_to_c_add_rev" proved="true">
 <proof prover="11"><result status="valid" time="0.02" steps="8729"/></proof>
 </goal>
 <goal name="r_to_c_mult_rev" proved="true">
 <proof prover="11"><result status="valid" time="0.02" steps="9006"/></proof>
 </goal>
 <goal name="r_to_c_sub" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="r_to_c_sub.0" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="32345"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Real_part_opposite" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="Real_part_opposite.0" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="13739"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Im_part_opposite" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="Im_part_opposite.0" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="13918"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="unic_decomp&#39;vc" expl="VC for unic_decomp" proved="true">
 <proof prover="11"><result status="valid" time="0.02" steps="9768"/></proof>
 </goal>
 <goal name="r_to_c_real&#39;vc" expl="VC for r_to_c_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="r_to_c_real&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="11175"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="real_r_to_c&#39;vc" expl="VC for real_r_to_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="real_r_to_c&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="9968"/></proof>
  </goal>
  <goal name="real_r_to_c&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="10717"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="r_to_c_pure_im&#39;vc" expl="VC for r_to_c_pure_im" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="r_to_c_pure_im&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="11310"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="decomp_mult&#39;vc" expl="VC for decomp_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="decomp_mult&#39;vc.0" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="35123"/></proof>
  </goal>
  <goal name="decomp_mult&#39;vc.1" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="18858"/></proof>
  </goal>
  <goal name="decomp_mult&#39;vc.2" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="10140"/></proof>
  </goal>
  <goal name="decomp_mult&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="20734"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="t_real_part&#39;vc" expl="VC for t_real_part" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="t_real_part&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="10098"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="t_real_part_inv&#39;vc" expl="VC for t_real_part_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="t_real_part_inv&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="14134"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="t_im_part&#39;vc" expl="VC for t_im_part" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="t_im_part&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="10197"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="t_im_part_inv&#39;vc" expl="VC for t_im_part_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="t_im_part_inv&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="14355"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="decomp_mult_as_reals&#39;vc" expl="VC for decomp_mult_as_reals" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="decomp_mult_as_reals&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="10574"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="decomp_mult_real_part&#39;vc" expl="VC for decomp_mult_real_part" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="decomp_mult_real_part&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.15" steps="5060"/></proof>
  </goal>
  <goal name="decomp_mult_real_part&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="9105"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="decomp_mult_im_part&#39;vc" expl="VC for decomp_mult_im_part" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="decomp_mult_im_part&#39;vc.0" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(r_to_c ((real_part a ** real_part b) -* (im_part a ** im_part b)))" arg2="((r_to_c (real_part a) *. r_to_c (real_part b))
      -. (r_to_c (im_part a) *. r_to_c (im_part b)))">
   <goal name="decomp_mult_im_part&#39;vc.0.0" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(r_to_c ((real_part a ** im_part b) +* (real_part b ** im_part a)))" arg2="(((r_to_c (real_part a) *. r_to_c (im_part b))
             +. (r_to_c (real_part b) *. r_to_c (im_part a))))">
    <goal name="decomp_mult_im_part&#39;vc.0.0.0" expl="precondition" proved="true">
    <proof prover="11"><result status="valid" time="0.02" steps="9099"/></proof>
    </goal>
    <goal name="decomp_mult_im_part&#39;vc.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="8"><result status="valid" time="0.09" steps="2491"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="decomp_mult_im_part&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <proof prover="8"><result status="valid" time="0.15" steps="4195"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decomp_mult_im_part&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="9182"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="t_mult_real&#39;vc" expl="VC for t_mult_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="t_mult_real&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.08" steps="37031"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="t_mult_im&#39;vc" expl="VC for t_mult_im" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="t_mult_im&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="t_mult_im&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="t_im_part&#39;def">
    <goal name="t_mult_im&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="decomp_mult_im_part">
     <goal name="t_mult_im&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="r_to_c_add_rev">
      <goal name="t_mult_im&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="add_eq_t">
       <goal name="t_mult_im&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="11"><result status="valid" time="0.04" steps="13812"/></proof>
       </goal>
       <goal name="t_mult_im&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="r_to_c_mult_rev">
        <goal name="t_mult_im&#39;vc.0.0.0.0.0.1.0" expl="apply premises" proved="true">
        <proof prover="11"><result status="valid" time="0.03" steps="11850"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mult_real_real&#39;vc" expl="VC for mult_real_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mult_real_real&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="mult_real_real&#39;vc.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mult_real_real&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.03" steps="10994"/></proof>
   </goal>
   <goal name="mult_real_real&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.04" steps="13881"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mult_real_real&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="9407"/></proof>
  </goal>
  <goal name="mult_real_real&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="9418"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="complex_squared&#39;vc" expl="VC for complex_squared" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="complex_squared&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="decomp_mult_as_reals">
   <goal name="complex_squared&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="add_eq_t">
    <goal name="complex_squared&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="11"><result status="valid" time="0.02" steps="9459"/></proof>
    </goal>
    <goal name="complex_squared&#39;vc.0.0.1" expl="apply premises" proved="true">
    <proof prover="11"><result status="valid" time="0.03" steps="15203"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="complex_squared&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="11083"/></proof>
  </goal>
  <goal name="complex_squared&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="16106"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="complex_real_squared&#39;vc" expl="VC for complex_real_squared" proved="true">
 <proof prover="11"><result status="valid" time="0.04" steps="14379"/></proof>
 </goal>
 <goal name="decomp_div&#39;vc" expl="VC for decomp_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="decomp_div&#39;vc.0" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="11284"/></proof>
  </goal>
  <goal name="decomp_div&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.17" steps="71315"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="decomp_div_real&#39;vc" expl="VC for decomp_div_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="decomp_div_real&#39;vc.0" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="11433"/></proof>
  </goal>
  <goal name="decomp_div_real&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.12" steps="47475"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="complex_prod_fact&#39;vc" expl="VC for complex_prod_fact" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="complex_prod_fact&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="13798"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="non_zero_prod_pre&#39;vc" expl="VC for non_zero_prod_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="non_zero_prod_pre&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="11708"/></proof>
  </goal>
  <goal name="non_zero_prod_pre&#39;vc.1" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="11722"/></proof>
  </goal>
  <goal name="non_zero_prod_pre&#39;vc.2" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="11752"/></proof>
  </goal>
  <goal name="non_zero_prod_pre&#39;vc.3" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="13814"/></proof>
  </goal>
  <goal name="non_zero_prod_pre&#39;vc.4" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="13872"/></proof>
  </goal>
  <goal name="non_zero_prod_pre&#39;vc.5" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="non_zero_prod_pre&#39;vc.5.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="non_zero_prod_pre&#39;vc.5.0.0" expl="assertion" proved="true">
    <proof prover="11"><result status="valid" time="0.45" steps="130986"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="non_zero_prod_pre&#39;vc.6" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.30" steps="93861"/></proof>
  </goal>
  <goal name="non_zero_prod_pre&#39;vc.7" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.53" steps="156709"/></proof>
  </goal>
  <goal name="non_zero_prod_pre&#39;vc.8" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.06" steps="22855"/></proof>
  </goal>
  <goal name="non_zero_prod_pre&#39;vc.9" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.11" steps="54606"/></proof>
  </goal>
  <goal name="non_zero_prod_pre&#39;vc.10" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="1.24" steps="26283"/></proof>
  </goal>
  <goal name="non_zero_prod_pre&#39;vc.11" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="non_zero_prod_pre&#39;vc.11.0" expl="assertion" proved="true">
   <proof prover="11"><result status="valid" time="0.03" steps="10238"/></proof>
   </goal>
   <goal name="non_zero_prod_pre&#39;vc.11.1" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="non_zero_prod_pre&#39;vc.11.1.0" expl="assertion" proved="true">
    <proof prover="11"><result status="valid" time="0.48" steps="153778"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="non_zero_prod_pre&#39;vc.11.2" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="non_zero_prod_pre&#39;vc.11.2.0" expl="assertion" proved="true">
    <proof prover="8"><result status="valid" time="0.11" steps="5896"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="non_zero_prod_pre&#39;vc.12" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="non_zero_prod_pre&#39;vc.12.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="non_zero_prod_pre&#39;vc.12.0.0" expl="assertion" proved="true">
    <proof prover="11"><result status="valid" time="2.64" steps="590234"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="non_zero_prod_pre&#39;vc.12.1" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="non_zero_prod_pre&#39;vc.12.1.0" expl="assertion" proved="true">
    <proof prover="11"><result status="valid" time="2.65" steps="590221"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="non_zero_prod_pre&#39;vc.13" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="non_zero_prod_pre&#39;vc.13.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="non_zero_prod_pre&#39;vc.13.0.0" expl="assertion" proved="true">
    <proof prover="11"><result status="valid" time="0.16" steps="57304"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="non_zero_prod_pre&#39;vc.13.1" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="non_zero_prod_pre&#39;vc.13.1.0" expl="assertion" proved="true">
    <proof prover="8"><result status="valid" time="0.02" steps="745"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="non_zero_prod_pre&#39;vc.14" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="non_zero_prod_pre&#39;vc.14.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="non_zero_prod_pre&#39;vc.14.0.0" expl="assertion" proved="true">
    <proof prover="11"><result status="valid" time="0.09" steps="25421"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="non_zero_prod_pre&#39;vc.14.1" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="non_zero_prod_pre&#39;vc.14.1.0" expl="assertion" proved="true">
    <proof prover="8"><result status="valid" time="0.03" steps="858"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="non_zero_prod_pre&#39;vc.14.2" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="non_zero_prod_pre&#39;vc.14.2.0" expl="assertion" proved="true">
    <proof prover="8"><result status="valid" time="0.02" steps="855"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="non_zero_prod_pre&#39;vc.15" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="non_zero_prod_pre&#39;vc.15.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="non_zero_prod_pre&#39;vc.15.0.0" expl="assertion" proved="true">
    <proof prover="11"><result status="valid" time="0.03" steps="12394"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="non_zero_prod_pre&#39;vc.15.1" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="non_zero_prod_pre&#39;vc.15.1.0" expl="assertion" proved="true">
    <proof prover="11"><result status="valid" time="0.03" steps="12394"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="non_zero_prod_pre&#39;vc.16" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="15119"/></proof>
  </goal>
  <goal name="non_zero_prod_pre&#39;vc.17" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="non_zero_prod_pre&#39;vc.17.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="non_zero_prod_pre&#39;vc.17.0.0" expl="postcondition" proved="true">
    <proof prover="11"><result status="valid" time="0.03" steps="14024"/></proof>
    </goal>
    <goal name="non_zero_prod_pre&#39;vc.17.0.1" expl="postcondition" proved="true">
    <proof prover="11"><result status="valid" time="0.03" steps="12489"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="non_zero_prod_pre&#39;vc.17.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="non_zero_prod_pre&#39;vc.17.1.0" expl="postcondition" proved="true">
    <proof prover="11"><result status="valid" time="0.04" steps="13997"/></proof>
    </goal>
    <goal name="non_zero_prod_pre&#39;vc.17.1.1" expl="postcondition" proved="true">
    <proof prover="11"><result status="valid" time="0.03" steps="12453"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="non_zero_prod&#39;vc" expl="VC for non_zero_prod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="non_zero_prod&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="22106"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="minus_c_one&#39;vc" expl="VC for minus_c_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="minus_c_one&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="minus_c_one&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="((-. c_one) *. a)" arg2="(-. (c_one *. a))">
    <goal name="minus_c_one&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="11"><result status="valid" time="0.05" steps="12918"/></proof>
    </goal>
    <goal name="minus_c_one&#39;vc.0.0.1" expl="equality hypothesis" proved="true">
    <transf name="assert" proved="true" arg1="(((-. c_one) *. a) -. (-. (c_one *. a)) = c_zero)">
     <goal name="minus_c_one&#39;vc.0.0.1.0" expl="asserted formula" proved="true">
     <proof prover="11"><result status="valid" time="0.05" steps="18353"/></proof>
     </goal>
     <goal name="minus_c_one&#39;vc.0.0.1.1" expl="equality hypothesis" proved="true">
     <proof prover="11"><result status="valid" time="0.03" steps="12970"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mult_neg_l&#39;vc" expl="VC for mult_neg_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mult_neg_l&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="12062"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mult_neg_r&#39;vc" expl="VC for mult_neg_r" proved="true">
 <proof prover="11"><result status="valid" time="0.03" steps="14475"/></proof>
 </goal>
 <goal name="neg_neg_out&#39;vc" expl="VC for neg_neg_out" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="neg_neg_out&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="12059"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="div_neg_l&#39;vc" expl="VC for div_neg_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="div_neg_l&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="14048"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="eq_to_real&#39;vc" expl="VC for eq_to_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="eq_to_real&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="10588"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="eq_by_real&#39;vc" expl="VC for eq_by_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="eq_by_real&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="13927"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="div_neg_r&#39;vc" expl="VC for div_neg_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="div_neg_r&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(a /. (-. b))" arg2="(a*. (-. c_one/.b))">
   <goal name="div_neg_r&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.04" steps="14853"/></proof>
   </goal>
   <goal name="div_neg_r&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <proof prover="11"><result status="valid" time="0.16" steps="68459"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="invadd" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="invadd.0" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="12516"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="noc_zeroAdd&#39;vc" expl="VC for noc_zeroAdd" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="noc_zeroAdd&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="noc_zeroAdd&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="11"><result status="valid" time="0.03" steps="12585"/></proof>
   </goal>
   <goal name="noc_zeroAdd&#39;vc.0.1" expl="assertion" proved="true">
   <proof prover="11"><result status="valid" time="0.03" steps="12585"/></proof>
   </goal>
   <goal name="noc_zeroAdd&#39;vc.0.2" expl="assertion" proved="true">
   <proof prover="11"><result status="valid" time="0.04" steps="14364"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="noc_zeroAdd&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.27" steps="91725"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Absorbing_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="Absorbing_zero.0" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="12728"/></proof>
  </goal>
  <goal name="Absorbing_zero.1" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="12793"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="real_part_add&#39;vc" expl="VC for real_part_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="real_part_add&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="14583"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mult_im_rev&#39;vc" expl="VC for mult_im_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mult_im_rev&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="12857"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="im_im_elim&#39;vc" expl="VC for im_im_elim" proved="true">
 <proof prover="11"><result status="valid" time="0.03" steps="15022"/></proof>
 </goal>
 <goal name="im_im_fact&#39;vc" expl="VC for im_im_fact" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="im_im_fact&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="17429"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="minus_minus_fact&#39;vc" expl="VC for minus_minus_fact" proved="true">
 <proof prover="11"><result status="valid" time="0.08" steps="32383"/></proof>
 </goal>
 <goal name="minus_minus_add&#39;vc" expl="VC for minus_minus_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="minus_minus_add&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="15491"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="minus_minus_add_rev&#39;vc" expl="VC for minus_minus_add_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="minus_minus_add_rev&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="13115"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="minus_out_left&#39;vc" expl="VC for minus_out_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="minus_out_left&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="13159"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="minus_out_right&#39;vc" expl="VC for minus_out_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="minus_out_right&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="13212"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="minus_in_left&#39;vc" expl="VC for minus_in_left" proved="true">
 <proof prover="11"><result status="valid" time="0.03" steps="13233"/></proof>
 </goal>
 <goal name="minus_in_right&#39;vc" expl="VC for minus_in_right" proved="true">
 <proof prover="11"><result status="valid" time="0.02" steps="13286"/></proof>
 </goal>
 <goal name="minus_add_out_left&#39;vc" expl="VC for minus_add_out_left" proved="true">
 <proof prover="11"><result status="valid" time="0.04" steps="17901"/></proof>
 </goal>
 <goal name="minus_as_add_opp&#39;vc" expl="VC for minus_as_add_opp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="minus_as_add_opp&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="13419"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="minus_add_out_right&#39;vc" expl="VC for minus_add_out_right" proved="true">
 <proof prover="11"><result status="valid" time="0.04" steps="16088"/></proof>
 </goal>
 <goal name="minus_add_in&#39;vc" expl="VC for minus_add_in" proved="true">
 <proof prover="11"><result status="valid" time="0.03" steps="13496"/></proof>
 </goal>
 <goal name="minus_add_out&#39;vc" expl="VC for minus_add_out" proved="true">
 <proof prover="11"><result status="valid" time="0.03" steps="13553"/></proof>
 </goal>
 <goal name="minus_eq&#39;vc" expl="VC for minus_eq" proved="true">
 <proof prover="11"><result status="valid" time="0.02" steps="11685"/></proof>
 </goal>
 <goal name="im_out_right&#39;vc" expl="VC for im_out_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="im_out_right&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="13717"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="im_out_left&#39;vc" expl="VC for im_out_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="im_out_left&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="16284"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="im_part_add&#39;vc" expl="VC for im_part_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="im_part_add&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="15626"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="injective_real_part&#39;vc" expl="VC for injective_real_part" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="injective_real_part&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="12104"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="injective_im_part&#39;vc" expl="VC for injective_im_part" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="injective_im_part&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="12182"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="minus_distr_four&#39;vc" expl="VC for minus_distr_four" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="minus_distr_four&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="22554"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="complex_decomp&#39;vc" expl="VC for complex_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="complex_decomp&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="14126"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="simpl_frac&#39;vc" expl="VC for simpl_frac" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="simpl_frac&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="26554"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="simpl_frac_&#39;vc" expl="VC for simpl_frac_" proved="true">
 <proof prover="11"><result status="valid" time="0.03" steps="14470"/></proof>
 </goal>
 <goal name="fact_frac&#39;vc" expl="VC for fact_frac" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="fact_frac&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="14468"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="fact_frac_rev&#39;vc" expl="VC for fact_frac_rev" proved="true">
 <proof prover="11"><result status="valid" time="0.03" steps="14586"/></proof>
 </goal>
 <goal name="mult_sym&#39;vc" expl="VC for mult_sym" proved="true">
 <proof prover="11"><result status="valid" time="0.04" steps="14626"/></proof>
 </goal>
 <goal name="inv_mult&#39;vc" expl="VC for inv_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inv_mult&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="14821"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="div_div&#39;vc" expl="VC for div_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="div_div&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="16841"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="div_div_rev&#39;vc" expl="VC for div_div_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="div_div_rev&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="15125"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="involutive_inv&#39;vc" expl="VC for involutive_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="involutive_inv&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.09" steps="26179"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="twice&#39;vc" expl="VC for twice" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="twice&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="19183"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="twice_half&#39;vc" expl="VC for twice_half" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="twice_half&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="20390"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="half_plus_half&#39;vc" expl="VC for half_plus_half" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="half_plus_half&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.09" steps="39710"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="decomp_inv_real&#39;vc" expl="VC for decomp_inv_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="decomp_inv_real&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decomp_inv_real&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="11"><result status="valid" time="0.03" steps="18138"/></proof>
   </goal>
   <goal name="decomp_inv_real&#39;vc.0.1" expl="assertion" proved="true">
   <proof prover="11"><result status="valid" time="0.04" steps="18225"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decomp_inv_real&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="13123"/></proof>
  </goal>
  <goal name="decomp_inv_real&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="15598"/></proof>
  </goal>
  <goal name="decomp_inv_real&#39;vc.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decomp_inv_real&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.05" steps="18575"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decomp_inv_real&#39;vc.4" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="decomp_inv_real&#39;vc.4.0" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.05" steps="20280"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mult_div_comm&#39;vc" expl="VC for mult_div_comm" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mult_div_comm&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="26428"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mult_div_comm_rev&#39;vc" expl="VC for mult_div_comm_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mult_div_comm_rev&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="15965"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="leq_left_real&#39;vc" expl="VC for leq_left_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="leq_left_real&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="22014"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="leq_right_real&#39;vc" expl="VC for leq_right_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="leq_right_real&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="22107"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inf_left_real&#39;vc" expl="VC for inf_left_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inf_left_real&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.08" steps="37791"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inf_right_real&#39;vc" expl="VC for inf_right_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inf_right_real&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="18943"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inf_from_real&#39;vc" expl="VC for inf_from_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inf_from_real&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="inf_from_real&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="inf_from_real&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="(&lt;.)&#39;def">
     <goal name="inf_from_real&#39;vc.0.0.0.0" expl="VC for inf_from_real" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="inf_from_real&#39;vc.0.0.0.0.0" expl="VC for inf_from_real" proved="true">
      <transf name="rewrite" proved="true" arg1="(&lt;=.)&#39;def">
       <goal name="inf_from_real&#39;vc.0.0.0.0.0.0" expl="VC for inf_from_real" proved="true">
       <proof prover="11"><result status="valid" time="0.03" steps="18794"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="inf_from_real&#39;vc.0.0.0.0.1" expl="VC for inf_from_real" proved="true">
      <proof prover="11"><result status="valid" time="0.04" steps="21876"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="inf_to_real&#39;vc" expl="VC for inf_to_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inf_to_real&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="40265"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="leq_left_not_real_a&#39;vc" expl="VC for leq_left_not_real_a" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="leq_left_not_real_a&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="19159"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="leq_left_not_real_b&#39;vc" expl="VC for leq_left_not_real_b" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="leq_left_not_real_b&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="19103"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="PartialOrder.Refl" proved="true">
 <proof prover="11"><result status="valid" time="0.03" steps="19246"/></proof>
 </goal>
 <goal name="PartialOrder.Trans" proved="true">
 <proof prover="11"><result status="valid" time="0.05" steps="23338"/></proof>
 </goal>
 <goal name="PartialOrder.Antisymm" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="Antisymm.0" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="19794"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Supeq.Refl" proved="true">
 <proof prover="11"><result status="valid" time="0.03" steps="16914"/></proof>
 </goal>
 <goal name="Supeq.Trans" proved="true">
 <proof prover="11"><result status="valid" time="0.03" steps="17076"/></proof>
 </goal>
 <goal name="Supeq.Antisymm" proved="true">
 <proof prover="11"><result status="valid" time="0.04" steps="17145"/></proof>
 </goal>
 <goal name="Inf.Trans" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="Trans.0" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="Trans.0.0" proved="true">
   <proof prover="11"><result status="valid" time="0.09" steps="43049"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Inf.Asymm" proved="true">
 <proof prover="11"><result status="valid" time="0.05" steps="23409"/></proof>
 </goal>
 <goal name="Infeq.Trans" proved="true">
 <proof prover="11"><result status="valid" time="0.05" steps="23776"/></proof>
 </goal>
 <goal name="Infeq.Asymm" proved="true">
 <proof prover="11"><result status="valid" time="0.05" steps="22957"/></proof>
 </goal>
 <goal name="r_to_c_inf" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="r_to_c_inf.0" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="r_to_c_inf.0.0" proved="true">
   <proof prover="11"><result status="valid" time="0.83" steps="270715"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="r_to_c_inf.1" proved="true">
  <proof prover="11"><result status="valid" time="0.76" steps="245635"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="reali_is_its_real_part&#39;vc" expl="VC for reali_is_its_real_part" proved="true">
 <proof prover="11"><result status="valid" time="0.03" steps="17439"/></proof>
 </goal>
 <goal name="inf_from_r&#39;vc" expl="VC for inf_from_r" proved="true">
 <proof prover="11"><result status="valid" time="0.04" steps="20500"/></proof>
 </goal>
 <goal name="strict_inf_from_r&#39;vc" expl="VC for strict_inf_from_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="strict_inf_from_r&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="17650"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="positive_inv_t&#39;vc" expl="VC for positive_inv_t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="positive_inv_t&#39;vc.0" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="17711"/></proof>
  </goal>
  <goal name="positive_inv_t&#39;vc.1" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="positive_inv">
   <goal name="positive_inv_t&#39;vc.1.0" expl="apply premises" proved="true">
   <transf name="assert" proved="true" arg1="( 0.0 &lt;=* real_part x)">
    <goal name="positive_inv_t&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <proof prover="11"><result status="valid" time="0.10" steps="42192"/></proof>
    </goal>
    <goal name="positive_inv_t&#39;vc.1.0.1" expl="apply premises" proved="true">
    <proof prover="11"><result status="valid" time="0.05" steps="23804"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="positive_inv_t&#39;vc.2" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="inf_from_real">
   <goal name="positive_inv_t&#39;vc.2.0" expl="apply premises" proved="true">
   <proof prover="11"><result status="valid" time="0.04" steps="17754"/></proof>
   </goal>
   <goal name="positive_inv_t&#39;vc.2.1" expl="apply premises" proved="true">
   <proof prover="11"><result status="valid" time="0.04" steps="17964"/></proof>
   </goal>
   <goal name="positive_inv_t&#39;vc.2.2" expl="apply premises" proved="true">
   <transf name="replace" proved="true" arg1="c_zero" arg2="(r_to_c 0.0)">
    <goal name="positive_inv_t&#39;vc.2.2.0" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(real_part (c_one /. x))" arg2="( (1.0 /* ( (real_part x))))">
     <goal name="positive_inv_t&#39;vc.2.2.0.0" expl="apply premises" proved="true">
     <proof prover="11"><result status="valid" time="0.05" steps="24935"/></proof>
     </goal>
     <goal name="positive_inv_t&#39;vc.2.2.0.1" expl="equality hypothesis" proved="true">
     <proof prover="11"><result status="valid" time="0.04" steps="17986"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="positive_inv_t&#39;vc.2.2.1" expl="equality hypothesis" proved="true">
    <proof prover="11"><result status="valid" time="0.02" steps="15094"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="real_pi" proved="true">
 <proof prover="11"><result status="valid" time="0.03" steps="17800"/></proof>
 </goal>
 <goal name="pi_sup_one" proved="true">
 <proof prover="11"><result status="valid" time="0.40" steps="169122"/></proof>
 </goal>
 <goal name="pi_sup_zero" proved="true">
 <proof prover="11"><result status="valid" time="0.08" steps="43406"/></proof>
 </goal>
 <goal name="compat_order_mult&#39;vc" expl="VC for compat_order_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="compat_order_mult&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="15198"/></proof>
  </goal>
  <goal name="compat_order_mult&#39;vc.1" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="15201"/></proof>
  </goal>
  <goal name="compat_order_mult&#39;vc.2" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="15291"/></proof>
  </goal>
  <goal name="compat_order_mult&#39;vc.3" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="15294"/></proof>
  </goal>
  <goal name="compat_order_mult&#39;vc.4" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="23621"/></proof>
  </goal>
  <goal name="compat_order_mult&#39;vc.5" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="23133"/></proof>
  </goal>
  <goal name="compat_order_mult&#39;vc.6" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="(real_part y ** real_part z)" arg2="( real_part (y *. z))">
   <goal name="compat_order_mult&#39;vc.6.0" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="(real_part x ** real_part z)" arg2="( real_part (x *. z))">
    <goal name="compat_order_mult&#39;vc.6.0.0" expl="assertion" proved="true">
    <proof prover="11"><result status="valid" time="0.04" steps="18192"/></proof>
    </goal>
    <goal name="compat_order_mult&#39;vc.6.0.1" expl="equality hypothesis" proved="true">
    <proof prover="11"><result status="valid" time="0.03" steps="15394"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="compat_order_mult&#39;vc.6.1" expl="equality hypothesis" proved="true">
   <proof prover="11"><result status="valid" time="0.02" steps="15394"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="compat_order_mult&#39;vc.7" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="18196"/></proof>
  </goal>
  <goal name="compat_order_mult&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.06" steps="25153"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="compat_order_add&#39;vc" expl="VC for compat_order_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="compat_order_add&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="15317"/></proof>
  </goal>
  <goal name="compat_order_add&#39;vc.1" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="15320"/></proof>
  </goal>
  <goal name="compat_order_add&#39;vc.2" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="15410"/></proof>
  </goal>
  <goal name="compat_order_add&#39;vc.3" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="15413"/></proof>
  </goal>
  <goal name="compat_order_add&#39;vc.4" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="23577"/></proof>
  </goal>
  <goal name="compat_order_add&#39;vc.5" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="15520"/></proof>
  </goal>
  <goal name="compat_order_add&#39;vc.6" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.06" steps="23572"/></proof>
  </goal>
  <goal name="compat_order_add&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="24585"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="compat_order_add_left&#39;vc" expl="VC for compat_order_add_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="compat_order_add_left&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="15429"/></proof>
  </goal>
  <goal name="compat_order_add_left&#39;vc.1" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="15432"/></proof>
  </goal>
  <goal name="compat_order_add_left&#39;vc.2" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="15435"/></proof>
  </goal>
  <goal name="compat_order_add_left&#39;vc.3" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="15438"/></proof>
  </goal>
  <goal name="compat_order_add_left&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="18704"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="compat_order_add_both&#39;vc" expl="VC for compat_order_add_both" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="compat_order_add_both&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="15561"/></proof>
  </goal>
  <goal name="compat_order_add_both&#39;vc.1" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="15564"/></proof>
  </goal>
  <goal name="compat_order_add_both&#39;vc.2" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="15567"/></proof>
  </goal>
  <goal name="compat_order_add_both&#39;vc.3" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="15570"/></proof>
  </goal>
  <goal name="compat_order_add_both&#39;vc.4" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="15586"/></proof>
  </goal>
  <goal name="compat_order_add_both&#39;vc.5" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="15589"/></proof>
  </goal>
  <goal name="compat_order_add_both&#39;vc.6" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="15592"/></proof>
  </goal>
  <goal name="compat_order_add_both&#39;vc.7" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="15595"/></proof>
  </goal>
  <goal name="compat_order_add_both&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="18339"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="compat_order_substr&#39;vc" expl="VC for compat_order_substr" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="compat_order_substr&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="15689"/></proof>
  </goal>
  <goal name="compat_order_substr&#39;vc.1" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="15692"/></proof>
  </goal>
  <goal name="compat_order_substr&#39;vc.2" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="15695"/></proof>
  </goal>
  <goal name="compat_order_substr&#39;vc.3" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.08" steps="50569"/></proof>
  </goal>
  <goal name="compat_order_substr&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="18938"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="compat_inf_mult&#39;vc" expl="VC for compat_inf_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="compat_inf_mult&#39;vc.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(x = c_zero)">
   <goal name="compat_inf_mult&#39;vc.0.0" expl="true case (postcondition)" proved="true">
   <proof prover="11"><result status="valid" time="0.04" steps="22869"/></proof>
   </goal>
   <goal name="compat_inf_mult&#39;vc.0.1" expl="false case (postcondition)" proved="true">
   <transf name="case" proved="true" arg1="(y = c_zero)">
    <goal name="compat_inf_mult&#39;vc.0.1.0" expl="false case (true case. postcondition)" proved="true">
    <proof prover="11"><result status="valid" time="0.05" steps="22864"/></proof>
    </goal>
    <goal name="compat_inf_mult&#39;vc.0.1.1" expl="false case (postcondition)" proved="true">
    <transf name="assert" proved="true" arg1="((x *. z) &lt;=. (y *. z))">
     <goal name="compat_inf_mult&#39;vc.0.1.1.0" expl="asserted formula" proved="true">
     <proof prover="11"><result status="valid" time="0.04" steps="22507"/></proof>
     </goal>
     <goal name="compat_inf_mult&#39;vc.0.1.1.1" expl="false case (postcondition)" proved="true">
     <transf name="assert" proved="true" arg1="((x *. z) &lt;&gt; (y *. z))">
      <goal name="compat_inf_mult&#39;vc.0.1.1.1.0" expl="asserted formula" proved="true">
      <proof prover="11"><result status="valid" time="0.05" steps="22691"/></proof>
      </goal>
      <goal name="compat_inf_mult&#39;vc.0.1.1.1.1" expl="false case (postcondition)" proved="true">
      <proof prover="11"><result status="valid" time="0.04" steps="22904"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="transitive_infeq&#39;vc" expl="VC for transitive_infeq" proved="true">
 <proof prover="11"><result status="valid" time="0.04" steps="18657"/></proof>
 </goal>
 <goal name="transitive_infeq_inf&#39;vc" expl="VC for transitive_infeq_inf" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="transitive_infeq_inf&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.06" steps="27939"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="transitive_inf_infeq&#39;vc" expl="VC for transitive_inf_infeq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="transitive_inf_infeq&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.06" steps="28031"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="transitive_inf&#39;vc" expl="VC for transitive_inf" proved="true">
 <proof prover="11"><result status="valid" time="0.03" steps="18878"/></proof>
 </goal>
 <goal name="pi_sup_ttwo&#39;vc" expl="VC for pi_sup_ttwo" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pi_sup_ttwo&#39;vc.0" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="ttwo" arg2="(r_to_c 2.0)">
   <goal name="pi_sup_ttwo&#39;vc.0.0" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="( r_to_c 2.0 &lt;=. r_to_c 3.0)">
    <goal name="pi_sup_ttwo&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <proof prover="11"><result status="valid" time="0.05" steps="21788"/></proof>
    </goal>
    <goal name="pi_sup_ttwo&#39;vc.0.0.1" expl="precondition" proved="true">
    <proof prover="11"><result status="valid" time="0.45" steps="178312"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="pi_sup_ttwo&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <proof prover="11"><result status="valid" time="0.05" steps="21652"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="pi_sup_ttwo&#39;vc.1" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="16188"/></proof>
  </goal>
  <goal name="pi_sup_ttwo&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="16188"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="transitive_leq_inv_r&#39;vc" expl="VC for transitive_leq_inv_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="transitive_leq_inv_r&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="22880"/></proof>
  </goal>
  <goal name="transitive_leq_inv_r&#39;vc.1" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="16277"/></proof>
  </goal>
  <goal name="transitive_leq_inv_r&#39;vc.2" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="19078"/></proof>
  </goal>
  <goal name="transitive_leq_inv_r&#39;vc.3" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="16288"/></proof>
  </goal>
  <goal name="transitive_leq_inv_r&#39;vc.4" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="19102"/></proof>
  </goal>
  <goal name="transitive_leq_inv_r&#39;vc.5" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(c_one /. c)" arg2="(r_to_c (1.0/* real_part c ))">
   <goal name="transitive_leq_inv_r&#39;vc.5.0" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(0.0 &lt;=*  (1.0 /* real_part c))">
    <goal name="transitive_leq_inv_r&#39;vc.5.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="(0.0 &lt;=*  ( real_part c))">
     <goal name="transitive_leq_inv_r&#39;vc.5.0.0.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="(0.0 &lt;*  ( real_part c))">
      <goal name="transitive_leq_inv_r&#39;vc.5.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="(1.0 &lt;=*  ( real_part c))">
       <goal name="transitive_leq_inv_r&#39;vc.5.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="11"><result status="valid" time="1.41" steps="236087"/></proof>
       </goal>
       <goal name="transitive_leq_inv_r&#39;vc.5.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="11"><result status="valid" time="0.07" steps="34522"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="transitive_leq_inv_r&#39;vc.5.0.0.0.1" expl="asserted formula" proved="true">
      <proof prover="11"><result status="valid" time="0.05" steps="24241"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="transitive_leq_inv_r&#39;vc.5.0.0.1" expl="asserted formula" proved="true">
     <proof prover="11"><result status="valid" time="0.32" steps="76550"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="transitive_leq_inv_r&#39;vc.5.0.1" expl="precondition" proved="true">
    <proof prover="11"><result status="valid" time="0.06" steps="24199"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="transitive_leq_inv_r&#39;vc.5.1" expl="equality hypothesis" proved="true">
   <proof prover="11"><result status="valid" time="0.17" steps="70758"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="transitive_leq_inv_r&#39;vc.6" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.06" steps="24121"/></proof>
  </goal>
  <goal name="transitive_leq_inv_r&#39;vc.7" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="16305"/></proof>
  </goal>
  <goal name="transitive_leq_inv_r&#39;vc.8" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="35904"/></proof>
  </goal>
  <goal name="transitive_leq_inv_r&#39;vc.9" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="transitive_leq_inv_r&#39;vc.9.0" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.02" steps="16316"/></proof>
   </goal>
   <goal name="transitive_leq_inv_r&#39;vc.9.1" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.02" steps="16316"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="compat_inf_mult_left&#39;vc" expl="VC for compat_inf_mult_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="compat_inf_mult_left&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="((z *. x) &lt;=. (z *. y))">
   <goal name="compat_inf_mult_left&#39;vc.0.0" expl="asserted formula" proved="true">
   <proof prover="11"><result status="valid" time="0.06" steps="24205"/></proof>
   </goal>
   <goal name="compat_inf_mult_left&#39;vc.0.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="((z *. x) &lt;&gt; (z *. y))">
    <goal name="compat_inf_mult_left&#39;vc.0.1.0" expl="asserted formula" proved="true">
    <proof prover="11"><result status="valid" time="0.07" steps="24314"/></proof>
    </goal>
    <goal name="compat_inf_mult_left&#39;vc.0.1.1" expl="postcondition" proved="true">
    <proof prover="11"><result status="valid" time="0.05" steps="24023"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="compat_inf_mult_both&#39;vc" expl="VC for compat_inf_mult_both" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="compat_inf_mult_both&#39;vc.0" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="compat_inf_mult_left">
   <goal name="compat_inf_mult_both&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="11"><result status="valid" time="0.02" steps="16538"/></proof>
   </goal>
   <goal name="compat_inf_mult_both&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="11"><result status="valid" time="0.03" steps="16538"/></proof>
   </goal>
   <goal name="compat_inf_mult_both&#39;vc.0.2" expl="apply premises" proved="true">
   <proof prover="11"><result status="valid" time="0.02" steps="16538"/></proof>
   </goal>
   <goal name="compat_inf_mult_both&#39;vc.0.3" expl="apply premises" proved="true">
   <proof prover="11"><result status="valid" time="0.02" steps="16538"/></proof>
   </goal>
   <goal name="compat_inf_mult_both&#39;vc.0.4" expl="apply premises" proved="true">
   <proof prover="11"><result status="valid" time="0.03" steps="16538"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="compat_inf_mult_both&#39;vc.1" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="compat_inf_mult">
   <goal name="compat_inf_mult_both&#39;vc.1.0" expl="apply premises" proved="true">
   <proof prover="11"><result status="valid" time="0.03" steps="16563"/></proof>
   </goal>
   <goal name="compat_inf_mult_both&#39;vc.1.1" expl="apply premises" proved="true">
   <proof prover="11"><result status="valid" time="0.02" steps="16563"/></proof>
   </goal>
   <goal name="compat_inf_mult_both&#39;vc.1.2" expl="apply premises" proved="true">
   <proof prover="11"><result status="valid" time="0.03" steps="19415"/></proof>
   </goal>
   <goal name="compat_inf_mult_both&#39;vc.1.3" expl="apply premises" proved="true">
   <proof prover="11"><result status="valid" time="0.03" steps="16563"/></proof>
   </goal>
   <goal name="compat_inf_mult_both&#39;vc.1.4" expl="apply premises" proved="true">
   <proof prover="11"><result status="valid" time="0.02" steps="16563"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="compat_inf_mult_both&#39;vc.2" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="((z *. x) &lt;=. (t *. y))">
   <goal name="compat_inf_mult_both&#39;vc.2.0" expl="asserted formula" proved="true">
   <proof prover="11"><result status="valid" time="0.04" steps="19434"/></proof>
   </goal>
   <goal name="compat_inf_mult_both&#39;vc.2.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="((z *. x) &lt;&gt; (t *. y))">
    <goal name="compat_inf_mult_both&#39;vc.2.1.0" expl="asserted formula" proved="true">
    <proof prover="11"><result status="valid" time="0.04" steps="19450"/></proof>
    </goal>
    <goal name="compat_inf_mult_both&#39;vc.2.1.1" expl="postcondition" proved="true">
    <proof prover="11"><result status="valid" time="0.02" steps="16589"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="compat_inf_add&#39;vc" expl="VC for compat_inf_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="compat_inf_add&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="((x +. z) &lt;=. (y +. z))">
   <goal name="compat_inf_add&#39;vc.0.0" expl="asserted formula" proved="true">
   <proof prover="11"><result status="valid" time="0.05" steps="23440"/></proof>
   </goal>
   <goal name="compat_inf_add&#39;vc.0.1" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="((x +. z) = (y +. z))">
    <goal name="compat_inf_add&#39;vc.0.1.0" expl="true case (postcondition)" proved="true">
    <proof prover="11"><result status="valid" time="0.07" steps="33997"/></proof>
    </goal>
    <goal name="compat_inf_add&#39;vc.0.1.1" expl="false case (postcondition)" proved="true">
    <proof prover="11"><result status="valid" time="0.06" steps="23852"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="compat_inf_add_left&#39;vc" expl="VC for compat_inf_add_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="compat_inf_add_left&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="((z+. x) &lt;=. (z +. y))">
   <goal name="compat_inf_add_left&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="(((x +. z) &lt;=. (y +. z)))">
    <goal name="compat_inf_add_left&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="compat_order_add">
     <goal name="compat_inf_add_left&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="11"><result status="valid" time="0.04" steps="19677"/></proof>
     </goal>
     <goal name="compat_inf_add_left&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="11"><result status="valid" time="0.02" steps="16785"/></proof>
     </goal>
     <goal name="compat_inf_add_left&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="11"><result status="valid" time="0.02" steps="16785"/></proof>
     </goal>
     <goal name="compat_inf_add_left&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="11"><result status="valid" time="0.02" steps="16785"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="compat_inf_add_left&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="11"><result status="valid" time="0.04" steps="20263"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="compat_inf_add_left&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.06" steps="24441"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="compat_inf_add_both&#39;vc" expl="VC for compat_inf_add_both" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="compat_inf_add_both&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="16885"/></proof>
  </goal>
  <goal name="compat_inf_add_both&#39;vc.1" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="19761"/></proof>
  </goal>
  <goal name="compat_inf_add_both&#39;vc.2" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="19770"/></proof>
  </goal>
  <goal name="compat_inf_add_both&#39;vc.3" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="19779"/></proof>
  </goal>
  <goal name="compat_inf_add_both&#39;vc.4" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="16910"/></proof>
  </goal>
  <goal name="compat_inf_add_both&#39;vc.5" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="19787"/></proof>
  </goal>
  <goal name="compat_inf_add_both&#39;vc.6" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="19796"/></proof>
  </goal>
  <goal name="compat_inf_add_both&#39;vc.7" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="19805"/></proof>
  </goal>
  <goal name="compat_inf_add_both&#39;vc.8" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="16928"/></proof>
  </goal>
  <goal name="compat_inf_add_both&#39;vc.9" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="16931"/></proof>
  </goal>
  <goal name="compat_inf_add_both&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="16939"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="compat_inf_substr&#39;vc" expl="VC for compat_inf_substr" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="compat_inf_substr&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="16985"/></proof>
  </goal>
  <goal name="compat_inf_substr&#39;vc.1" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="16988"/></proof>
  </goal>
  <goal name="compat_inf_substr&#39;vc.2" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="16991"/></proof>
  </goal>
  <goal name="compat_inf_substr&#39;vc.3" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.13" steps="60693"/></proof>
  </goal>
  <goal name="compat_inf_substr&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="20487"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="real_inv&#39;vc" expl="VC for real_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="real_inv&#39;vc.0" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="32190"/></proof>
  </goal>
  <goal name="real_inv&#39;vc.1" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="17106"/></proof>
  </goal>
  <goal name="real_inv&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="20254"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="compat_order_mult_rev&#39;vc" expl="VC for compat_order_mult_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="compat_order_mult_rev&#39;vc.0" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(0.0 &lt;* real_part (c_one /. z))">
   <goal name="compat_order_mult_rev&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="replace" proved="true" arg1="(real_part (c_one /. z))" arg2="(1.0 /* real_part z)">
    <goal name="compat_order_mult_rev&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="positive_inv">
     <goal name="compat_order_mult_rev&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="11"><result status="valid" time="0.09" steps="39156"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="compat_order_mult_rev&#39;vc.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="11"><result status="valid" time="0.04" steps="20720"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="compat_order_mult_rev&#39;vc.0.1" expl="assertion" proved="true">
   <proof prover="11"><result status="valid" time="0.15" steps="70389"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="compat_order_mult_rev&#39;vc.1" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(c_zero &lt;. t_real_part z)">
   <goal name="compat_order_mult_rev&#39;vc.1.0" expl="asserted formula" proved="true">
   <proof prover="11"><result status="valid" time="0.05" steps="24640"/></proof>
   </goal>
   <goal name="compat_order_mult_rev&#39;vc.1.1" expl="assertion" proved="true">
   <transf name="assert" proved="true" arg1="(c_zero &lt;=. t_real_part (c_one/.z))">
    <goal name="compat_order_mult_rev&#39;vc.1.1.0" expl="asserted formula" proved="true">
    <proof prover="11"><result status="valid" time="0.05" steps="25150"/></proof>
    </goal>
    <goal name="compat_order_mult_rev&#39;vc.1.1.1" expl="assertion" proved="true">
    <proof prover="11"><result status="valid" time="0.10" steps="45852"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="compat_order_mult_rev&#39;vc.2" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="20209"/></proof>
  </goal>
  <goal name="compat_order_mult_rev&#39;vc.3" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="17253"/></proof>
  </goal>
  <goal name="compat_order_mult_rev&#39;vc.4" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.19" steps="81893"/></proof>
  </goal>
  <goal name="compat_order_mult_rev&#39;vc.5" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="20217"/></proof>
  </goal>
  <goal name="compat_order_mult_rev&#39;vc.6" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="21046"/></proof>
  </goal>
  <goal name="compat_order_mult_rev&#39;vc.7" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="26227"/></proof>
  </goal>
  <goal name="compat_order_mult_rev&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="26909"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="compat_order_mult_left&#39;vc" expl="VC for compat_order_mult_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="compat_order_mult_left&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(z *. x)" arg2="(x *. z)">
   <goal name="compat_order_mult_left&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(z *. y)" arg2="(y *. z)">
    <goal name="compat_order_mult_left&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="compat_order_mult">
     <goal name="compat_order_mult_left&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="11"><result status="valid" time="0.02" steps="17310"/></proof>
     </goal>
     <goal name="compat_order_mult_left&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="11"><result status="valid" time="0.03" steps="17310"/></proof>
     </goal>
     <goal name="compat_order_mult_left&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="11"><result status="valid" time="0.02" steps="17310"/></proof>
     </goal>
     <goal name="compat_order_mult_left&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="11"><result status="valid" time="0.03" steps="17310"/></proof>
     </goal>
     <goal name="compat_order_mult_left&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="11"><result status="valid" time="0.02" steps="17310"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="compat_order_mult_left&#39;vc.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="11"><result status="valid" time="0.04" steps="20266"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="compat_order_mult_left&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <proof prover="11"><result status="valid" time="0.04" steps="20266"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="strict_compat_order_mult&#39;vc" expl="VC for strict_compat_order_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="strict_compat_order_mult&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="20426"/></proof>
  </goal>
  <goal name="strict_compat_order_mult&#39;vc.1" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="17451"/></proof>
  </goal>
  <goal name="strict_compat_order_mult&#39;vc.2" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="17454"/></proof>
  </goal>
  <goal name="strict_compat_order_mult&#39;vc.3" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="17457"/></proof>
  </goal>
  <goal name="strict_compat_order_mult&#39;vc.4" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="20457"/></proof>
  </goal>
  <goal name="strict_compat_order_mult&#39;vc.5" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(real_part x = real_part y)">
   <goal name="strict_compat_order_mult&#39;vc.5.0" expl="asserted formula" proved="true">
   <proof prover="11"><result status="valid" time="0.05" steps="25016"/></proof>
   </goal>
   <goal name="strict_compat_order_mult&#39;vc.5.1" expl="assertion" proved="true">
   <proof prover="11"><result status="valid" time="0.04" steps="20476"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="strict_compat_order_mult&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="20482"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="strict_compat_order_mult_left&#39;vc" expl="VC for strict_compat_order_mult_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="strict_compat_order_mult_left&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="20599"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="complete_order_real&#39;vc" expl="VC for complete_order_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="complete_order_real&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(y &lt;=. x)">
   <goal name="complete_order_real&#39;vc.0.0" expl="asserted formula" proved="true">
   <proof prover="11"><result status="valid" time="0.13" steps="57522"/></proof>
   </goal>
   <goal name="complete_order_real&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.05" steps="24511"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="complete_order_real_&#39;vc" expl="VC for complete_order_real_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="complete_order_real_&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="20840"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="compat_order_mult_both&#39;vc" expl="VC for compat_order_mult_both" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="compat_order_mult_both&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="17907"/></proof>
  </goal>
  <goal name="compat_order_mult_both&#39;vc.1" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="21271"/></proof>
  </goal>
  <goal name="compat_order_mult_both&#39;vc.2" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="20960"/></proof>
  </goal>
  <goal name="compat_order_mult_both&#39;vc.3" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="21523"/></proof>
  </goal>
  <goal name="compat_order_mult_both&#39;vc.4" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="20988"/></proof>
  </goal>
  <goal name="compat_order_mult_both&#39;vc.5" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="17932"/></proof>
  </goal>
  <goal name="compat_order_mult_both&#39;vc.6" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="21297"/></proof>
  </goal>
  <goal name="compat_order_mult_both&#39;vc.7" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="20986"/></proof>
  </goal>
  <goal name="compat_order_mult_both&#39;vc.8" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="21485"/></proof>
  </goal>
  <goal name="compat_order_mult_both&#39;vc.9" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="17959"/></proof>
  </goal>
  <goal name="compat_order_mult_both&#39;vc.10" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="17950"/></proof>
  </goal>
  <goal name="compat_order_mult_both&#39;vc.11" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="17953"/></proof>
  </goal>
  <goal name="compat_order_mult_both&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.02" steps="17961"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inf_to_non_sup_eq&#39;vc" expl="VC for inf_to_non_sup_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inf_to_non_sup_eq&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.06" steps="24596"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="sup_eq_to_non_inf&#39;vc" expl="VC for sup_eq_to_non_inf" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sup_eq_to_non_inf&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="21168"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="sup_to_inf&#39;vc" expl="VC for sup_to_inf" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sup_to_inf&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="24945"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inf_to_sup&#39;vc" expl="VC for inf_to_sup" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inf_to_sup&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="34710"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="sup_to_non_inf_eq&#39;vc" expl="VC for sup_to_non_inf_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sup_to_non_inf_eq&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.06" steps="25005"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inf_eq_to_non_sup&#39;vc" expl="VC for inf_eq_to_non_sup" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inf_eq_to_non_sup&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="21505"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="non_inf_eq_to_sup&#39;vc" expl="VC for non_inf_eq_to_sup" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="non_inf_eq_to_sup&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="35263"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="non_sup_toinf_eq&#39;vc" expl="VC for non_sup_toinf_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="non_sup_toinf_eq&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="21673"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="real_mult&#39;vc" expl="VC for real_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="real_mult&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.13" steps="60851"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="real_add&#39;vc" expl="VC for real_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="real_add&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.17" steps="66461"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="real_substr&#39;vc" expl="VC for real_substr" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="real_substr&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.15" steps="63009"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inv_pos&#39;vc" expl="VC for inv_pos" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inv_pos&#39;vc.0" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(0.0 &lt;* real_part x)">
   <goal name="inv_pos&#39;vc.0.0" expl="asserted formula" proved="true">
   <proof prover="11"><result status="valid" time="0.13" steps="61561"/></proof>
   </goal>
   <goal name="inv_pos&#39;vc.0.1" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="(real_part (c_one/. x))" arg2="(1.0 /* real_part x)">
    <goal name="inv_pos&#39;vc.0.1.0" expl="assertion" proved="true">
    <proof prover="11"><result status="valid" time="0.05" steps="21988"/></proof>
    </goal>
    <goal name="inv_pos&#39;vc.0.1.1" expl="equality hypothesis" proved="true">
    <proof prover="11"><result status="valid" time="0.05" steps="22409"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="inv_pos&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="21988"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="lower_over_cons&#39;vc" expl="VC for lower_over_cons" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="lower_over_cons&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.15" steps="67190"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="eq_to_leq_t&#39;vc" expl="VC for eq_to_leq_t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="eq_to_leq_t&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="22174"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="real_minus&#39;vc" expl="VC for real_minus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="real_minus&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.13" steps="59977"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="compat_r_to_c_infeq&#39;vc" expl="VC for compat_r_to_c_infeq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="compat_r_to_c_infeq&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.84" steps="227545"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="compat_r_to_c_inf&#39;vc" expl="VC for compat_r_to_c_inf" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="compat_r_to_c_inf&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="1.25" steps="365196"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="compat_r_to_c_supeq&#39;vc" expl="VC for compat_r_to_c_supeq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="compat_r_to_c_supeq&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.80" steps="223651"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="compat_r_to_c_sup&#39;vc" expl="VC for compat_r_to_c_sup" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="compat_r_to_c_sup&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.06" steps="26074"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="unic_inv&#39;vc" expl="VC for unic_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="unic_inv&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="unic_inv&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="11"><result status="valid" time="0.13" steps="64305"/></proof>
   </goal>
   <goal name="unic_inv&#39;vc.0.1" expl="assertion" proved="true">
   <proof prover="11"><result status="valid" time="0.04" steps="22679"/></proof>
   </goal>
   <goal name="unic_inv&#39;vc.0.2" expl="assertion" proved="true">
   <proof prover="11"><result status="valid" time="0.06" steps="27460"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="unic_inv&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="28227"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inf_eq_def&#39;vc" expl="VC for inf_eq_def" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inf_eq_def&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="inf_eq_def&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.07" steps="26962"/></proof>
   </goal>
   <goal name="inf_eq_def&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.06" steps="26909"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="inf_minus&#39;vc" expl="VC for inf_minus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inf_minus&#39;vc.0" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.14" steps="68643"/></proof>
  </goal>
  <goal name="inf_minus&#39;vc.1" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.06" steps="26607"/></proof>
  </goal>
  <goal name="inf_minus&#39;vc.2" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.06" steps="26915"/></proof>
  </goal>
  <goal name="inf_minus&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.06" steps="27952"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="absorbing_zero&#39;vc" expl="VC for absorbing_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="absorbing_zero&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="22942"/></proof>
  </goal>
  <goal name="absorbing_zero&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="19697"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inf_zero_inv&#39;vc" expl="VC for inf_zero_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inf_zero_inv&#39;vc.0" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.12" steps="60589"/></proof>
  </goal>
  <goal name="inf_zero_inv&#39;vc.1" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="23110"/></proof>
  </goal>
  <goal name="inf_zero_inv&#39;vc.2" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.06" steps="27516"/></proof>
  </goal>
  <goal name="inf_zero_inv&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="23164"/></proof>
  </goal>
  <goal name="inf_zero_inv&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="23197"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mult_pos&#39;vc" expl="VC for mult_pos" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mult_pos&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(x *. y)" arg2="(r_to_c (real_part x ** real_part y))">
   <goal name="mult_pos&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="r_to_c_mult_rev">
    <goal name="mult_pos&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="11"><result status="valid" time="0.40" steps="84386"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="mult_pos&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <proof prover="11"><result status="valid" time="0.14" steps="69430"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="simpl_leq_mult_div&#39;vc" expl="VC for simpl_leq_mult_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="simpl_leq_mult_div&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="23320"/></proof>
  </goal>
  <goal name="simpl_leq_mult_div&#39;vc.1" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="19974"/></proof>
  </goal>
  <goal name="simpl_leq_mult_div&#39;vc.2" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="real_mult">
   <goal name="simpl_leq_mult_div&#39;vc.2.0" expl="apply premises" proved="true">
   <proof prover="11"><result status="valid" time="0.03" steps="19977"/></proof>
   </goal>
   <goal name="simpl_leq_mult_div&#39;vc.2.1" expl="apply premises" proved="true">
   <proof prover="11"><result status="valid" time="0.05" steps="23351"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="simpl_leq_mult_div&#39;vc.3" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="23364"/></proof>
  </goal>
  <goal name="simpl_leq_mult_div&#39;vc.4" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.06" steps="28957"/></proof>
  </goal>
  <goal name="simpl_leq_mult_div&#39;vc.5" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="23399"/></proof>
  </goal>
  <goal name="simpl_leq_mult_div&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="30600"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mult_leq_c_one_leq&#39;vc" expl="VC for mult_leq_c_one_leq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mult_leq_c_one_leq&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="a" arg2="(a *. c_one)">
   <goal name="mult_leq_c_one_leq&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.07" steps="28879"/></proof>
   </goal>
   <goal name="mult_leq_c_one_leq&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <proof prover="11"><result status="valid" time="0.05" steps="23460"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mult_leq_c_one_leq_gen&#39;vc" expl="VC for mult_leq_c_one_leq_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mult_leq_c_one_leq_gen&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="23616"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mult_leq_c_one&#39;vc" expl="VC for mult_leq_c_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mult_leq_c_one&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mult_leq_c_one&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="11"><result status="valid" time="0.05" steps="23811"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mult_leq_c_one&#39;vc.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mult_leq_c_one&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="11"><result status="valid" time="0.05" steps="24600"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mult_leq_c_one&#39;vc.2" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="24478"/></proof>
  </goal>
  <goal name="mult_leq_c_one&#39;vc.3" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="23948"/></proof>
  </goal>
  <goal name="mult_leq_c_one&#39;vc.4" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="23951"/></proof>
  </goal>
  <goal name="mult_leq_c_one&#39;vc.5" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="23986"/></proof>
  </goal>
  <goal name="mult_leq_c_one&#39;vc.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mult_leq_c_one&#39;vc.6.0" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.06" steps="30386"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mult_leq_c_one_expl&#39;vc" expl="VC for mult_leq_c_one_expl" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mult_leq_c_one_expl&#39;vc.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(b = c_zero)">
   <goal name="mult_leq_c_one_expl&#39;vc.0.0" expl="true case (postcondition)" proved="true">
   <proof prover="11"><result status="valid" time="0.07" steps="29259"/></proof>
   </goal>
   <goal name="mult_leq_c_one_expl&#39;vc.0.1" expl="false case (postcondition)" proved="true">
   <transf name="case" proved="true" arg1="(b &lt;. c_zero)">
    <goal name="mult_leq_c_one_expl&#39;vc.0.1.0" expl="false case (true case. postcondition)" proved="true">
    <transf name="assert" proved="true" arg1="(a*.b &lt;=. c_zero)">
     <goal name="mult_leq_c_one_expl&#39;vc.0.1.0.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="( c_zero&lt;=. a *. (-.b))">
      <goal name="mult_leq_c_one_expl&#39;vc.0.1.0.0.0" expl="asserted formula" proved="true">
      <proof prover="11"><result status="valid" time="0.24" steps="92927"/></proof>
      </goal>
      <goal name="mult_leq_c_one_expl&#39;vc.0.1.0.0.1" expl="asserted formula" proved="true">
      <transf name="replace" proved="true" arg1="(a *. (-. b))" arg2="(-. (a*.b))" arg3="in" arg4="h1">
       <goal name="mult_leq_c_one_expl&#39;vc.0.1.0.0.1.0" expl="asserted formula" proved="true">
       <proof prover="11"><result status="valid" time="0.07" steps="30896"/></proof>
       </goal>
       <goal name="mult_leq_c_one_expl&#39;vc.0.1.0.0.1.1" expl="equality hypothesis" proved="true">
       <proof prover="11"><result status="valid" time="0.05" steps="24137"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mult_leq_c_one_expl&#39;vc.0.1.0.1" expl="false case (true case. postcondition)" proved="true">
     <proof prover="11"><result status="valid" time="0.26" steps="101004"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="mult_leq_c_one_expl&#39;vc.0.1.1" expl="false case (postcondition)" proved="true">
    <transf name="replace" proved="true" arg1="c_one" arg2="(d*. (c_one /.d))">
     <goal name="mult_leq_c_one_expl&#39;vc.0.1.1.0" expl="false case (postcondition)" proved="true">
     <transf name="apply" proved="true" arg1="compat_order_mult_both">
      <goal name="mult_leq_c_one_expl&#39;vc.0.1.1.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="mult_leq_c_one_expl&#39;vc.0.1.1.0.0.0" proved="true">
       <proof prover="11"><result status="valid" time="0.06" steps="28985"/></proof>
       </goal>
       <goal name="mult_leq_c_one_expl&#39;vc.0.1.1.0.0.1" proved="true">
       <proof prover="11"><result status="valid" time="0.03" steps="20573"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="mult_leq_c_one_expl&#39;vc.0.1.1.0.1" expl="apply premises" proved="true">
      <proof prover="11"><result status="valid" time="0.03" steps="20580"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="mult_leq_c_one_expl&#39;vc.0.1.1.1" expl="equality hypothesis" proved="true">
     <proof prover="11"><result status="valid" time="0.07" steps="47548"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mult_leq_c_one_rev&#39;vc" expl="VC for mult_leq_c_one_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mult_leq_c_one_rev&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="24218"/></proof>
  </goal>
  <goal name="mult_leq_c_one_rev&#39;vc.1" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="20681"/></proof>
  </goal>
  <goal name="mult_leq_c_one_rev&#39;vc.2" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="29700"/></proof>
  </goal>
  <goal name="mult_leq_c_one_rev&#39;vc.3" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="24276"/></proof>
  </goal>
  <goal name="mult_leq_c_one_rev&#39;vc.4" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="24826"/></proof>
  </goal>
  <goal name="mult_leq_c_one_rev&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="29700"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="simpl_leq_mult&#39;vc" expl="VC for simpl_leq_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="simpl_leq_mult&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="29109"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="simpl_leq_mult_inv&#39;vc" expl="VC for simpl_leq_mult_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="simpl_leq_mult_inv&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="25039"/></proof>
  </goal>
  <goal name="simpl_leq_mult_inv&#39;vc.1" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="20878"/></proof>
  </goal>
  <goal name="simpl_leq_mult_inv&#39;vc.2" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="20881"/></proof>
  </goal>
  <goal name="simpl_leq_mult_inv&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.14" steps="73650"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mult_to_div_leq&#39;vc" expl="VC for mult_to_div_leq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mult_to_div_leq&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="24636"/></proof>
  </goal>
  <goal name="mult_to_div_leq&#39;vc.1" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="20999"/></proof>
  </goal>
  <goal name="mult_to_div_leq&#39;vc.2" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="real_mult">
   <goal name="mult_to_div_leq&#39;vc.2.0" expl="apply premises" proved="true">
   <proof prover="11"><result status="valid" time="0.03" steps="21002"/></proof>
   </goal>
   <goal name="mult_to_div_leq&#39;vc.2.1" expl="apply premises" proved="true">
   <proof prover="11"><result status="valid" time="0.04" steps="24667"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mult_to_div_leq&#39;vc.3" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="24680"/></proof>
  </goal>
  <goal name="mult_to_div_leq&#39;vc.4" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.06" steps="30531"/></proof>
  </goal>
  <goal name="mult_to_div_leq&#39;vc.5" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="24715"/></proof>
  </goal>
  <goal name="mult_to_div_leq&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="24731"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mult_div&#39;vc" expl="VC for mult_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mult_div&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="24759"/></proof>
  </goal>
  <goal name="mult_div&#39;vc.1" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="21090"/></proof>
  </goal>
  <goal name="mult_div&#39;vc.2" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="24817"/></proof>
  </goal>
  <goal name="mult_div&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="25273"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="strict_mult_pos&#39;vc" expl="VC for strict_mult_pos" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="strict_mult_pos&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="29308"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="rewrite_supeq&#39;vc" expl="VC for rewrite_supeq" proved="true">
 <proof prover="11"><result status="valid" time="0.03" steps="21185"/></proof>
 </goal>
 <goal name="rewrite_sup&#39;vc" expl="VC for rewrite_sup" proved="true">
 <proof prover="11"><result status="valid" time="0.07" steps="28516"/></proof>
 </goal>
 <goal name="inv_order_complex&#39;vc" expl="VC for inv_order_complex" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inv_order_complex&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="inv_order_complex&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="11"><result status="valid" time="0.06" steps="30154"/></proof>
   </goal>
   <goal name="inv_order_complex&#39;vc.0.1" expl="assertion" proved="true">
   <proof prover="11"><result status="valid" time="0.05" steps="25769"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="inv_order_complex&#39;vc.1" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="inv_order_complex&#39;vc.1.0" expl="assertion" proved="true">
   <proof prover="11"><result status="valid" time="0.07" steps="31449"/></proof>
   </goal>
   <goal name="inv_order_complex&#39;vc.1.1" expl="assertion" proved="true">
   <proof prover="11"><result status="valid" time="0.06" steps="25891"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="inv_order_complex&#39;vc.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="inv_order_complex&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="11"><result status="valid" time="0.05" steps="25807"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="inv_order_complex&#39;vc.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="inv_order_complex&#39;vc.3.0" expl="precondition" proved="true">
   <proof prover="11"><result status="valid" time="0.03" steps="21395"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="inv_order_complex&#39;vc.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="inv_order_complex&#39;vc.4.0" expl="precondition" proved="true">
   <proof prover="11"><result status="valid" time="0.05" steps="25207"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="inv_order_complex&#39;vc.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="inv_order_complex&#39;vc.5.0" expl="precondition" proved="true">
   <proof prover="11"><result status="valid" time="0.04" steps="25220"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="inv_order_complex&#39;vc.6" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="inv_order_complex&#39;vc.6.0" expl="precondition" proved="true">
   <proof prover="11"><result status="valid" time="0.07" steps="33135"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="inv_order_complex&#39;vc.7" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="inv_order_complex&#39;vc.7.0" expl="precondition" proved="true">
   <proof prover="11"><result status="valid" time="0.06" steps="33306"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="inv_order_complex&#39;vc.8" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="inv_order_complex&#39;vc.8.0" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.05" steps="25201"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="compat_inv_order&#39;vc" expl="VC for compat_inv_order" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="compat_inv_order&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(c_one/.b &lt;=.c_one /.a)">
   <goal name="compat_inv_order&#39;vc.0.0" expl="asserted formula" proved="true">
   <proof prover="11"><result status="valid" time="0.06" steps="29901"/></proof>
   </goal>
   <goal name="compat_inv_order&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.05" steps="25209"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="leq_by_div_simpl&#39;vc" expl="VC for leq_by_div_simpl" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="leq_by_div_simpl&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="25314"/></proof>
  </goal>
  <goal name="leq_by_div_simpl&#39;vc.1" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.06" steps="30374"/></proof>
  </goal>
  <goal name="leq_by_div_simpl&#39;vc.2" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="31573"/></proof>
  </goal>
  <goal name="leq_by_div_simpl&#39;vc.3" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="31126"/></proof>
  </goal>
  <goal name="leq_by_div_simpl&#39;vc.4" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="25431"/></proof>
  </goal>
  <goal name="leq_by_div_simpl&#39;vc.5" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="26128"/></proof>
  </goal>
  <goal name="leq_by_div_simpl&#39;vc.6" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="21570"/></proof>
  </goal>
  <goal name="leq_by_div_simpl&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="33402"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="leq_by_div&#39;vc" expl="VC for leq_by_div" proved="true">
 <proof prover="11"><result status="valid" time="0.04" steps="25449"/></proof>
 </goal>
 <goal name="strict_pos_div&#39;vc" expl="VC for strict_pos_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="strict_pos_div&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="25559"/></proof>
  </goal>
  <goal name="strict_pos_div&#39;vc.1" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="21700"/></proof>
  </goal>
  <goal name="strict_pos_div&#39;vc.2" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="25609"/></proof>
  </goal>
  <goal name="strict_pos_div&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="26191"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inf_def&#39;vc" expl="VC for inf_def" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inf_def&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="inf_def&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.05" steps="25790"/></proof>
   </goal>
   <goal name="inf_def&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.04" steps="25794"/></proof>
   </goal>
   <goal name="inf_def&#39;vc.0.2" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.05" steps="25790"/></proof>
   </goal>
   <goal name="inf_def&#39;vc.0.3" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.05" steps="25758"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="sup_eq_def&#39;vc" expl="VC for sup_eq_def" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sup_eq_def&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sup_eq_def&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.04" steps="25966"/></proof>
   </goal>
   <goal name="sup_eq_def&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.07" steps="30316"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="sup_def&#39;vc" expl="VC for sup_def" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sup_def&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sup_def&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.05" steps="25980"/></proof>
   </goal>
   <goal name="sup_def&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.04" steps="25984"/></proof>
   </goal>
   <goal name="sup_def&#39;vc.0.2" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.06" steps="30745"/></proof>
   </goal>
   <goal name="sup_def&#39;vc.0.3" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.07" steps="30519"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="assoc_mult_div&#39;vc" expl="VC for assoc_mult_div" proved="true">
 <proof prover="11"><result status="valid" time="0.05" steps="25943"/></proof>
 </goal>
 <goal name="assoc_mult_div_rev&#39;vc" expl="VC for assoc_mult_div_rev" proved="true">
 <proof prover="11"><result status="valid" time="0.04" steps="26062"/></proof>
 </goal>
 <goal name="subst_zero&#39;vc" expl="VC for subst_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="subst_zero&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.06" steps="30026"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="subst_zero_gen&#39;vc" expl="VC for subst_zero_gen" proved="true">
 <proof prover="11"><result status="valid" time="0.04" steps="26206"/></proof>
 </goal>
 <goal name="transitive_inf_inv_r&#39;vc" expl="VC for transitive_inf_inv_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="transitive_inf_inv_r&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="transitive_inf_inv_r&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.03" steps="22268"/></proof>
   </goal>
   <goal name="transitive_inf_inv_r&#39;vc.0.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(c_one /.c &lt;. c_one)">
    <goal name="transitive_inf_inv_r&#39;vc.0.1.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="((c_one /. c) *. c_one &lt;. (c_one/.c) *.c)">
     <goal name="transitive_inf_inv_r&#39;vc.0.1.0.0" expl="asserted formula" proved="true">
     <proof prover="11"><result status="valid" time="0.34" steps="94006"/></proof>
     </goal>
     <goal name="transitive_inf_inv_r&#39;vc.0.1.0.1" expl="asserted formula" proved="true">
     <proof prover="11"><result status="valid" time="0.22" steps="86769"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="transitive_inf_inv_r&#39;vc.0.1.1" expl="postcondition" proved="true">
    <proof prover="11"><result status="valid" time="0.05" steps="26357"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="infeq_scal_r&#39;vc" expl="VC for infeq_scal_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="infeq_scal_r&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.06" steps="31781"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="infeq_scal_l&#39;vc" expl="VC for infeq_scal_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="infeq_scal_l&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="31851"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="transitive_supeq&#39;vc" expl="VC for transitive_supeq" proved="true">
 <proof prover="11"><result status="valid" time="0.05" steps="26631"/></proof>
 </goal>
 <goal name="transitive_inf_l&#39;vc" expl="VC for transitive_inf_l" proved="true">
 <proof prover="11"><result status="valid" time="0.05" steps="26708"/></proof>
 </goal>
 <goal name="transitive_sup_l&#39;vc" expl="VC for transitive_sup_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="transitive_sup_l&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="31250"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="transitive_inf_r&#39;vc" expl="VC for transitive_inf_r" proved="true">
 <proof prover="11"><result status="valid" time="0.05" steps="26857"/></proof>
 </goal>
 <goal name="transitive_sup_r&#39;vc" expl="VC for transitive_sup_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="transitive_sup_r&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.06" steps="31458"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="simpl_frac_r&#39;vc" expl="VC for simpl_frac_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="simpl_frac_r&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.22" steps="91132"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="compat_mult_sup_eq_right&#39;vc" expl="VC for compat_mult_sup_eq_right" proved="true">
 <proof prover="11"><result status="valid" time="0.03" steps="27137"/></proof>
 </goal>
 <goal name="compat_mult_sup_right&#39;vc" expl="VC for compat_mult_sup_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="compat_mult_sup_right&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.08" steps="32849"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="compat_mult_inf_right&#39;vc" expl="VC for compat_mult_inf_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="compat_mult_inf_right&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="32266"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="infeq_to_supeq&#39;vc" expl="VC for infeq_to_supeq" proved="true">
 <proof prover="11"><result status="valid" time="0.03" steps="23180"/></proof>
 </goal>
 <goal name="infeq_inv&#39;vc" expl="VC for infeq_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="infeq_inv&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="32057"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="infeq_inv_add_l&#39;vc" expl="VC for infeq_inv_add_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="infeq_inv_add_l&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="23278"/></proof>
  </goal>
  <goal name="infeq_inv_add_l&#39;vc.1" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.06" steps="27511"/></proof>
  </goal>
  <goal name="infeq_inv_add_l&#39;vc.2" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="27520"/></proof>
  </goal>
  <goal name="infeq_inv_add_l&#39;vc.3" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="23297"/></proof>
  </goal>
  <goal name="infeq_inv_add_l&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.19" steps="102210"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="infeq_inv_add_r&#39;vc" expl="VC for infeq_inv_add_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="infeq_inv_add_r&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="23375"/></proof>
  </goal>
  <goal name="infeq_inv_add_r&#39;vc.1" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="23378"/></proof>
  </goal>
  <goal name="infeq_inv_add_r&#39;vc.2" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="27613"/></proof>
  </goal>
  <goal name="infeq_inv_add_r&#39;vc.3" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="23389"/></proof>
  </goal>
  <goal name="infeq_inv_add_r&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="1.69" steps="470863"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="r_to_c_surj&#39;vc" expl="VC for r_to_c_surj" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="r_to_c_surj&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="r_to_c_surj&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.19" steps="76083"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="r_to_c_inf_rev&#39;vc" expl="VC for r_to_c_inf_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="r_to_c_inf_rev&#39;vc.0" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="23547"/></proof>
  </goal>
  <goal name="r_to_c_inf_rev&#39;vc.1" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="0.02" steps="1227"/></proof>
  </goal>
  <goal name="r_to_c_inf_rev&#39;vc.2" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.16" steps="83232"/></proof>
  </goal>
  <goal name="r_to_c_inf_rev&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="27836"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="div_simpl&#39;vc" expl="VC for div_simpl" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="div_simpl&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="32970"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="infeq_inv_subs_l&#39;vc" expl="VC for infeq_inv_subs_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="infeq_inv_subs_l&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="23691"/></proof>
  </goal>
  <goal name="infeq_inv_subs_l&#39;vc.1" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(a-.c)" arg2="(a+. (-.c))">
   <goal name="infeq_inv_subs_l&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="11"><result status="valid" time="0.06" steps="28594"/></proof>
   </goal>
   <goal name="infeq_inv_subs_l&#39;vc.1.1" expl="equality hypothesis" proved="true">
   <proof prover="11"><result status="valid" time="0.05" steps="27987"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="infeq_inv_subs_l&#39;vc.2" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="23702"/></proof>
  </goal>
  <goal name="infeq_inv_subs_l&#39;vc.3" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="23705"/></proof>
  </goal>
  <goal name="infeq_inv_subs_l&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.26" steps="113171"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="infeq_inv_subs_r&#39;vc" expl="VC for infeq_inv_subs_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="infeq_inv_subs_r&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(a+.c&lt;=. (b-.c) +. c)">
   <goal name="infeq_inv_subs_r&#39;vc.0.0" expl="asserted formula" proved="true">
   <proof prover="11"><result status="valid" time="0.07" steps="33380"/></proof>
   </goal>
   <goal name="infeq_inv_subs_r&#39;vc.0.1" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="((b -. c) +. c)" arg2="b" arg3="in" arg4="h">
    <goal name="infeq_inv_subs_r&#39;vc.0.1.0" expl="postcondition" proved="true">
    <proof prover="11"><result status="valid" time="0.03" steps="23821"/></proof>
    </goal>
    <goal name="infeq_inv_subs_r&#39;vc.0.1.1" expl="equality hypothesis" proved="true">
    <proof prover="11"><result status="valid" time="0.29" steps="120981"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="infeq_pos_elim&#39;vc" expl="VC for infeq_pos_elim" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="infeq_pos_elim&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.08" steps="33822"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="infeq_pos_elim_add&#39;vc" expl="VC for infeq_pos_elim_add" proved="true">
 <proof prover="11"><result status="valid" time="0.08" steps="34515"/></proof>
 </goal>
 <goal name="supeq_elim_left&#39;vc" expl="VC for supeq_elim_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="supeq_elim_left&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.09" steps="49239"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="sup_elim_left&#39;vc" expl="VC for sup_elim_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sup_elim_left&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.06" steps="32731"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="infeq_elim_left&#39;vc" expl="VC for infeq_elim_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="infeq_elim_left&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.10" steps="49501"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inf_elim_left&#39;vc" expl="VC for inf_elim_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inf_elim_left&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.06" steps="33068"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="t_im_real&#39;vc" expl="VC for t_im_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="t_im_real&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="t_im_real&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.06" steps="29833"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="t_decomp_mult&#39;vc" expl="VC for t_decomp_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="t_decomp_mult&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="35952"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="t_complex_decomp&#39;vc" expl="VC for t_complex_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="t_complex_decomp&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.08" steps="33708"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="t_unic_decomp&#39;vc" expl="VC for t_unic_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="t_unic_decomp&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="29604"/></proof>
  </goal>
  <goal name="t_unic_decomp&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="34461"/></proof>
  </goal>
  <goal name="t_unic_decomp&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.08" steps="34490"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="t_decomp_minus&#39;vc" expl="VC for t_decomp_minus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="t_decomp_minus&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="2.40" steps="589799"/></proof>
  </goal>
  <goal name="t_decomp_minus&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.42" steps="118456"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="real_sum&#39;vc" expl="VC for real_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="real_sum&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="29327"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="real_diff&#39;vc" expl="VC for real_diff" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="real_diff&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="29399"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pure_im_sum&#39;vc" expl="VC for pure_im_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pure_im_sum&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.18" steps="82338"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="equal_decomp&#39;vc" expl="VC for equal_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="equal_decomp&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.08" steps="33637"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="t_equal_decomp&#39;vc" expl="VC for t_equal_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="t_equal_decomp&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="33742"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pure_im_diff&#39;vc" expl="VC for pure_im_diff" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pure_im_diff&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(x -. y)" arg2="(x+. (-.y))">
   <goal name="pure_im_diff&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.22" steps="90600"/></proof>
   </goal>
   <goal name="pure_im_diff&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <proof prover="11"><result status="valid" time="0.06" steps="29714"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="real_div&#39;vc" expl="VC for real_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="real_div&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.21" steps="101776"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mult_im_im&#39;vc" expl="VC for mult_im_im" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mult_im_im&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="3.12"/></proof>
  </goal>
  <goal name="mult_im_im&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.12" steps="42975"/></proof>
  </goal>
  <goal name="mult_im_im&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.46" steps="168945"/></proof>
  </goal>
  <goal name="mult_im_im&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="25633"/></proof>
  </goal>
  <goal name="mult_im_im&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="25644"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mult_real_im&#39;vc" expl="VC for mult_real_im" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mult_real_im&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.17" steps="1009879"/></proof>
  </goal>
  <goal name="mult_real_im&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="32012"/></proof>
  </goal>
  <goal name="mult_real_im&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.12" steps="45294"/></proof>
  </goal>
  <goal name="mult_real_im&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="25828"/></proof>
  </goal>
  <goal name="mult_real_im&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="25839"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mult_im_real&#39;vc" expl="VC for mult_im_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mult_im_real&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.10" steps="40497"/></proof>
  </goal>
  <goal name="mult_im_real&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.06" steps="32241"/></proof>
  </goal>
  <goal name="mult_im_real&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.10" steps="44588"/></proof>
  </goal>
  <goal name="mult_im_real&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="26028"/></proof>
  </goal>
  <goal name="mult_im_real&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="26039"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="decomp_mult_gen&#39;vc" expl="VC for decomp_mult_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="decomp_mult_gen&#39;vc.0" expl="assertion" proved="true">
  <transf name="instantiate" proved="true" arg1="complex_decomp" arg2="a">
   <goal name="decomp_mult_gen&#39;vc.0.0" expl="assertion" proved="true">
   <transf name="instantiate" proved="true" arg1="complex_decomp" arg2="b">
    <goal name="decomp_mult_gen&#39;vc.0.0.0" expl="assertion" proved="true">
    <transf name="replace" proved="true" arg1="(a*.b)" arg2="( (r_to_c (real_part a) +. (im *. r_to_c (im_part a))) *.  (r_to_c (real_part b) +. (im *. r_to_c (im_part b))))">
     <goal name="decomp_mult_gen&#39;vc.0.0.0.0" expl="assertion" proved="true">
     <transf name="assert" proved="true" arg1="(forall a b c d:complex. (a+.b) *. (c+.d) = ((((a*.c) +. (a*.d)) +. (b*.c)) +. (b*.d)))">
      <goal name="decomp_mult_gen&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="(forall a b c d:complex. (a+.b) *. (c+.d) = ((((a*.c) +. (a*.d)) +. (b*.c)) +. (b*.d)))">
       <goal name="decomp_mult_gen&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="decomp_mult_gen&#39;vc.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="11"><result status="valid" time="0.13" steps="60087"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="decomp_mult_gen&#39;vc.0.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="11"><result status="valid" time="0.05" steps="30689"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="decomp_mult_gen&#39;vc.0.0.0.0.1" expl="assertion" proved="true">
      <transf name="rewrite" proved="true" arg1="h">
       <goal name="decomp_mult_gen&#39;vc.0.0.0.0.1.0" expl="assertion" proved="true">
       <transf name="assert" proved="true" arg1="(forall a b c d: complex. a = c -&gt; b = d -&gt; a+. b = c+.d)">
        <goal name="decomp_mult_gen&#39;vc.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
        <proof prover="11"><result status="valid" time="0.04" steps="26308"/></proof>
        </goal>
        <goal name="decomp_mult_gen&#39;vc.0.0.0.0.1.0.1" expl="assertion" proved="true">
        <transf name="apply" proved="true" arg1="h">
         <goal name="decomp_mult_gen&#39;vc.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="h">
          <goal name="decomp_mult_gen&#39;vc.0.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="h">
           <goal name="decomp_mult_gen&#39;vc.0.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.09"/></proof>
           </goal>
           <goal name="decomp_mult_gen&#39;vc.0.0.0.0.1.0.1.0.0.1" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="0.22" steps="12711"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="decomp_mult_gen&#39;vc.0.0.0.0.1.0.1.0.1" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="0.23" steps="12883"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="decomp_mult_gen&#39;vc.0.0.0.0.1.0.1.1" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="0.14" steps="863622"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="decomp_mult_gen&#39;vc.0.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="11"><result status="valid" time="0.06" steps="30530"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decomp_mult_gen&#39;vc.1" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.09" steps="41751"/></proof>
  </goal>
  <goal name="decomp_mult_gen&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="26187"/></proof>
  </goal>
  <goal name="decomp_mult_gen&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="26198"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inv_real&#39;vc" expl="VC for inv_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inv_real&#39;vc.0" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.06" steps="30716"/></proof>
  </goal>
  <goal name="inv_real&#39;vc.1" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.09" steps="36577"/></proof>
  </goal>
  <goal name="inv_real&#39;vc.2" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.03" steps="26237"/></proof>
  </goal>
  <goal name="inv_real&#39;vc.3" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.08" steps="39463"/></proof>
  </goal>
  <goal name="inv_real&#39;vc.4" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(r_to_c (real_part (inv1 a))  = c_one /. a)">
   <goal name="inv_real&#39;vc.4.0" expl="asserted formula" proved="true">
   <proof prover="11"><result status="valid" time="0.10" steps="38743"/></proof>
   </goal>
   <goal name="inv_real&#39;vc.4.1" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.07" steps="31149"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="inv_real&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="31109"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="div_real_real&#39;vc" expl="VC for div_real_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="div_real_real&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="26315"/></proof>
  </goal>
  <goal name="div_real_real&#39;vc.1" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="26346"/></proof>
  </goal>
  <goal name="div_real_real&#39;vc.2" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="30976"/></proof>
  </goal>
  <goal name="div_real_real&#39;vc.3" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(real_part a /* real_part b)" arg2="(real_part a ** real_part(c_one /. b))">
   <goal name="div_real_real&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(a /. b)" arg2="(a*. c_one/.b)">
    <goal name="div_real_real&#39;vc.3.0.0" expl="postcondition" proved="true">
    <proof prover="11"><result status="valid" time="0.05" steps="32353"/></proof>
    </goal>
    <goal name="div_real_real&#39;vc.3.0.1" expl="equality hypothesis" proved="true">
    <proof prover="11"><result status="valid" time="0.06" steps="32299"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="div_real_real&#39;vc.3.1" expl="equality hypothesis" proved="true">
   <transf name="replace" proved="true" arg1="(real_part a ** real_part (c_one /. b))" arg2="(real_part (a *.  (c_one /. b)))">
    <goal name="div_real_real&#39;vc.3.1.0" expl="equality hypothesis" proved="true">
    <transf name="instantiate" proved="true" arg1="inv_real" arg2="b">
     <goal name="div_real_real&#39;vc.3.1.0.0" expl="equality hypothesis" proved="true">
     <transf name="replace" proved="true" arg1="(real_part (a *. (c_one /. b)))" arg2="(real_part a ** real_part  (c_one /. b))">
      <goal name="div_real_real&#39;vc.3.1.0.0.0" expl="equality hypothesis" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="div_real_real&#39;vc.3.1.0.0.0.0" expl="equality hypothesis" proved="true">
       <transf name="rewrite" proved="true" arg1="Hinst1">
        <goal name="div_real_real&#39;vc.3.1.0.0.0.0.0" expl="equality hypothesis" proved="true">
        <transf name="rewrite" proved="true" arg1="(/*)&#39;def">
         <goal name="div_real_real&#39;vc.3.1.0.0.0.0.0.0" expl="equality hypothesis" proved="true">
         <transf name="assert" proved="true" arg1="(real_part b &lt;&gt; 0.0)">
          <goal name="div_real_real&#39;vc.3.1.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
          <proof prover="11"><result status="valid" time="0.07" steps="34761"/></proof>
          </goal>
          <goal name="div_real_real&#39;vc.3.1.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <transf name="assert" proved="true" arg1="(forall a b: real.  b &lt;&gt; 0.0 -&gt; a/b = a** (1.0 /b))">
           <goal name="div_real_real&#39;vc.3.1.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
           <proof prover="8"><result status="valid" time="0.06" steps="6172"/></proof>
           </goal>
           <goal name="div_real_real&#39;vc.3.1.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
           <transf name="rewrite" proved="true" arg1="h">
            <goal name="div_real_real&#39;vc.3.1.0.0.0.0.0.0.1.1.0" expl="equality hypothesis" proved="true">
            <proof prover="8"><result status="valid" time="0.06" steps="6124"/></proof>
            </goal>
            <goal name="div_real_real&#39;vc.3.1.0.0.0.0.0.0.1.1.1" expl="rewrite premises" proved="true">
            <proof prover="11"><result status="valid" time="0.04" steps="29920"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="div_real_real&#39;vc.3.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="11"><result status="valid" time="0.06" steps="34761"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="div_real_real&#39;vc.3.1.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="11"><result status="valid" time="0.04" steps="29766"/></proof>
        </goal>
        <goal name="div_real_real&#39;vc.3.1.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="11"><result status="valid" time="0.05" steps="29768"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="div_real_real&#39;vc.3.1.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="11"><result status="valid" time="0.03" steps="26486"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="div_real_real&#39;vc.3.1.1" expl="equality hypothesis" proved="true">
    <proof prover="11"><result status="valid" time="0.03" steps="26446"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="zeroLessOne&#39;vc" expl="VC for zeroLessOne" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="zeroLessOne&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.09" steps="35101"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="compatOrderAdd&#39;vc" expl="VC for compatOrderAdd" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="compatOrderAdd&#39;vc.0" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.08" steps="37458"/></proof>
  </goal>
  <goal name="compatOrderAdd&#39;vc.1" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.09" steps="38627"/></proof>
  </goal>
  <goal name="compatOrderAdd&#39;vc.2" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="( real_part (x +. z) &lt;=* real_part (y +. z)
)">
   <goal name="compatOrderAdd&#39;vc.2.0" expl="asserted formula" proved="true">
   <proof prover="11"><result status="valid" time="0.04" steps="26515"/></proof>
   </goal>
   <goal name="compatOrderAdd&#39;vc.2.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(r_to_c (real_part (x +. z)) &lt;=. r_to_c (real_part (y +. z)))">
    <goal name="compatOrderAdd&#39;vc.2.1.0" expl="asserted formula" proved="true">
    <proof prover="11"><result status="valid" time="0.10" steps="38967"/></proof>
    </goal>
    <goal name="compatOrderAdd&#39;vc.2.1.1" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(real_ (x+.y))">
     <goal name="compatOrderAdd&#39;vc.2.1.1.0" expl="asserted formula" proved="true">
     <proof prover="11"><result status="valid" time="0.06" steps="31151"/></proof>
     </goal>
     <goal name="compatOrderAdd&#39;vc.2.1.1.1" expl="postcondition" proved="true">
     <proof prover="11"><result status="valid" time="0.06" steps="31171"/></proof>
     </goal>
    </transf>
    <transf name="assert" proved="true" arg1="(real_ (x+.z))">
     <goal name="compatOrderAdd&#39;vc.2.1.1.0" expl="asserted formula" proved="true">
     <proof prover="11"><result status="valid" time="0.06" steps="31144"/></proof>
     </goal>
     <goal name="compatOrderAdd&#39;vc.2.1.1.1" expl="postcondition" proved="true">
     <proof prover="11"><result status="valid" time="0.07" steps="31164"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="positive_add&#39;vc" expl="VC for positive_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="positive_add&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="26543"/></proof>
  </goal>
  <goal name="positive_add&#39;vc.1" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.08" steps="36480"/></proof>
  </goal>
  <goal name="positive_add&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="26561"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="strict_positive_add_l&#39;vc" expl="VC for strict_positive_add_l" proved="true">
 <proof prover="11"><result status="valid" time="0.08" steps="37505"/></proof>
 </goal>
 <goal name="strict_compatOrderAdd&#39;vc" expl="VC for strict_compatOrderAdd" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="strict_compatOrderAdd&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="((x +. z) &lt;. (y +. z))">
   <goal name="strict_compatOrderAdd&#39;vc.0.0" expl="asserted formula" proved="true">
   <proof prover="11"><result status="valid" time="0.06" steps="31389"/></proof>
   </goal>
   <goal name="strict_compatOrderAdd&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.06" steps="31400"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="compat_sup_add&#39;vc" expl="VC for compat_sup_add" proved="true">
 <proof prover="11"><result status="valid" time="0.10" steps="40319"/></proof>
 </goal>
 <goal name="compat_supeq_mult&#39;vc" expl="VC for compat_supeq_mult" proved="true">
 <proof prover="11"><result status="valid" time="0.06" steps="31806"/></proof>
 </goal>
 <goal name="compat_supeq_div&#39;vc" expl="VC for compat_supeq_div" proved="true">
 <proof prover="11"><result status="valid" time="0.10" steps="40115"/></proof>
 </goal>
 <goal name="compat_infeq_div&#39;vc" expl="VC for compat_infeq_div" proved="true">
 <proof prover="11"><result status="valid" time="0.06" steps="32114"/></proof>
 </goal>
 <goal name="compat_sup_div&#39;vc" expl="VC for compat_sup_div" proved="true">
 <proof prover="11"><result status="valid" time="0.11" steps="39937"/></proof>
 </goal>
 <goal name="compat_inf_div&#39;vc" expl="VC for compat_inf_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="compat_inf_div&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.09" steps="40015"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="positive_prod_itself&#39;vc" expl="VC for positive_prod_itself" proved="true">
 <proof prover="11"><result status="valid" time="0.21" steps="84303"/></proof>
 </goal>
 <goal name="strict_positive_prod_itself&#39;vc" expl="VC for strict_positive_prod_itself" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="strict_positive_prod_itself&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.09" steps="37719"/></proof>
  </goal>
  <goal name="strict_positive_prod_itself&#39;vc.1" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="32505"/></proof>
  </goal>
  <goal name="strict_positive_prod_itself&#39;vc.2" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="27720"/></proof>
  </goal>
  <goal name="strict_positive_prod_itself&#39;vc.3" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="27723"/></proof>
  </goal>
  <goal name="strict_positive_prod_itself&#39;vc.4" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="27726"/></proof>
  </goal>
  <goal name="strict_positive_prod_itself&#39;vc.5" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.08" steps="32519"/></proof>
  </goal>
  <goal name="strict_positive_prod_itself&#39;vc.6" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.45" steps="209888"/></proof>
  </goal>
  <goal name="strict_positive_prod_itself&#39;vc.7" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="32541"/></proof>
  </goal>
  <goal name="strict_positive_prod_itself&#39;vc.8" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.06" steps="32552"/></proof>
  </goal>
  <goal name="strict_positive_prod_itself&#39;vc.9" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="27761"/></proof>
  </goal>
  <goal name="strict_positive_prod_itself&#39;vc.10" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="27764"/></proof>
  </goal>
  <goal name="strict_positive_prod_itself&#39;vc.11" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.08" steps="33468"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="compat_sup_mult&#39;vc" expl="VC for compat_sup_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="compat_sup_mult&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.08" steps="32631"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="strict_compat_sup_mult&#39;vc" expl="VC for strict_compat_sup_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="strict_compat_sup_mult&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.09" steps="41538"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="compat_sup_mult_left&#39;vc" expl="VC for compat_sup_mult_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="compat_sup_mult_left&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="32944"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="strict_compat_sup_mult_left&#39;vc" expl="VC for strict_compat_sup_mult_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="strict_compat_sup_mult_left&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="33086"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inv_inf_eq&#39;vc" expl="VC for inv_inf_eq" proved="true">
 <proof prover="11"><result status="valid" time="0.11" steps="46382"/></proof>
 </goal>
 <goal name="inv_sup_eq&#39;vc" expl="VC for inv_sup_eq" proved="true">
 <proof prover="11"><result status="valid" time="0.07" steps="33487"/></proof>
 </goal>
 <goal name="inv_sup&#39;vc" expl="VC for inv_sup" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inv_sup&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="33509"/></proof>
  </goal>
  <goal name="inv_sup&#39;vc.1" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="33558"/></proof>
  </goal>
  <goal name="inv_sup&#39;vc.2" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.12" steps="44489"/></proof>
  </goal>
  <goal name="inv_sup&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.11" steps="43904"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inv_eqinf&#39;vc" expl="VC for inv_eqinf" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inv_eqinf&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.06" steps="33663"/></proof>
  </goal>
  <goal name="inv_eqinf&#39;vc.1" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="33704"/></proof>
  </goal>
  <goal name="inv_eqinf&#39;vc.2" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.08" steps="33785"/></proof>
  </goal>
  <goal name="inv_eqinf&#39;vc.3" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="inv_eqinf&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.08" steps="33773"/></proof>
   </goal>
   <goal name="inv_eqinf&#39;vc.3.1" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="((c_one /. x) &lt;. (c_one /. y) )">
    <goal name="inv_eqinf&#39;vc.3.1.0" expl="true case (postcondition)" proved="true">
    <transf name="assert" proved="true" arg1="false">
     <goal name="inv_eqinf&#39;vc.3.1.0.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="((x *. (c_one /. x)) = (x *. (c_one /. y)))">
      <goal name="inv_eqinf&#39;vc.3.1.0.0.0" expl="asserted formula" proved="true">
      <transf name="replace" proved="true" arg1="(x *. (c_one /. x))" arg2="c_one">
       <goal name="inv_eqinf&#39;vc.3.1.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="11"><result status="valid" time="0.10" steps="43647"/></proof>
       </goal>
       <goal name="inv_eqinf&#39;vc.3.1.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="11"><result status="valid" time="0.07" steps="35219"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="inv_eqinf&#39;vc.3.1.0.0.1" expl="asserted formula" proved="true">
      <proof prover="11"><result status="valid" time="0.07" steps="33819"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="inv_eqinf&#39;vc.3.1.0.1" expl="true case (postcondition)" proved="true">
     <proof prover="11"><result status="valid" time="0.03" steps="28717"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="inv_eqinf&#39;vc.3.1.1" expl="false case (postcondition)" proved="true">
    <proof prover="11"><result status="valid" time="0.07" steps="33812"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="inv_eqsup&#39;vc" expl="VC for inv_eqsup" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inv_eqsup&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.09" steps="40515"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inv_inf&#39;vc" expl="VC for inv_inf" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inv_inf&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.13" steps="41816"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inv_neg&#39;vc" expl="VC for inv_neg" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inv_neg&#39;vc.0" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="34857"/></proof>
  </goal>
  <goal name="inv_neg&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.08" steps="41334"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="lower_inv&#39;vc" expl="VC for lower_inv" proved="true">
 <proof prover="11"><result status="valid" time="0.12" steps="43883"/></proof>
 </goal>
 <goal name="lower_inv_&#39;vc" expl="VC for lower_inv_" proved="true">
 <proof prover="11"><result status="valid" time="0.11" steps="44017"/></proof>
 </goal>
 <goal name="zero_add_t&#39;vc" expl="VC for zero_add_t" proved="true">
 <proof prover="11"><result status="valid" time="0.08" steps="34432"/></proof>
 </goal>
 <goal name="add_zero_t&#39;vc" expl="VC for add_zero_t" proved="true">
 <proof prover="11"><result status="valid" time="0.08" steps="34536"/></proof>
 </goal>
 <goal name="one_mult_t&#39;vc" expl="VC for one_mult_t" proved="true">
 <proof prover="11"><result status="valid" time="0.08" steps="34640"/></proof>
 </goal>
 <goal name="one_mult_t_const&#39;vc" expl="VC for one_mult_t_const" proved="true">
 <proof prover="11"><result status="valid" time="0.07" steps="34688"/></proof>
 </goal>
 <goal name="zero_mult_t_const&#39;vc" expl="VC for zero_mult_t_const" proved="true">
 <proof prover="11"><result status="valid" time="0.06" steps="34736"/></proof>
 </goal>
 <goal name="mult_zero_t_const&#39;vc" expl="VC for mult_zero_t_const" proved="true">
 <proof prover="11"><result status="valid" time="0.07" steps="34784"/></proof>
 </goal>
 <goal name="subs_eq&#39;vc" expl="VC for subs_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="subs_eq&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="32130"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="subst_itself&#39;vc" expl="VC for subst_itself" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="subst_itself&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="35007"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mult_assoc_four&#39;vc" expl="VC for mult_assoc_four" proved="true">
 <proof prover="11"><result status="valid" time="0.10" steps="42720"/></proof>
 </goal>
 <goal name="mult_assoc_rev&#39;vc" expl="VC for mult_assoc_rev" proved="true">
 <proof prover="11"><result status="valid" time="0.07" steps="35138"/></proof>
 </goal>
 <goal name="add_assoc&#39;vc" expl="VC for add_assoc" proved="true">
 <proof prover="11"><result status="valid" time="0.07" steps="35200"/></proof>
 </goal>
 <goal name="add_assoc_rev&#39;vc" expl="VC for add_assoc_rev" proved="true">
 <proof prover="11"><result status="valid" time="0.06" steps="35262"/></proof>
 </goal>
 <goal name="div_mult&#39;vc" expl="VC for div_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="div_mult&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="35398"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="div_mult_rev&#39;vc" expl="VC for div_mult_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="div_mult_rev&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="35506"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="triang_p&#39;vc" expl="VC for triang_p" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="triang_p&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="((a +. b) *. (a +. b))" arg2="(a*.a +.a*.b+.b*.a+.b*.b)">
   <goal name="triang_p&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.17" steps="73786"/></proof>
   </goal>
   <goal name="triang_p&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <proof prover="11"><result status="valid" time="0.16" steps="75141"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="triang_n&#39;vc" expl="VC for triang_n" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="triang_n&#39;vc.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="triang_p" arg2="a">
   <goal name="triang_n&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="Hinst" arg2="(-. b)">
    <goal name="triang_n&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(a -. b)" arg2="(a +. (-. b))">
     <goal name="triang_n&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Hinst">
      <goal name="triang_n&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="((-. b) *. (-. b))" arg2="(b*.b)">
       <goal name="triang_n&#39;vc.0.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="11"><result status="valid" time="0.09" steps="44764"/></proof>
       </goal>
       <goal name="triang_n&#39;vc.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="11"><result status="valid" time="0.08" steps="35844"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="triang_n&#39;vc.0.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="11"><result status="valid" time="0.07" steps="35857"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="triang_s&#39;vc" expl="VC for triang_s" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="triang_s&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Assoc5">
   <goal name="triang_s&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Assoc5">
    <goal name="triang_s&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(b +. (c +. ((d -. b) +. e)))" arg2="(c+.d+.e )">
     <goal name="triang_s&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="11"><result status="valid" time="0.11" steps="41644"/></proof>
     </goal>
     <goal name="triang_s&#39;vc.0.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="Assoc5">
      <goal name="triang_s&#39;vc.0.0.0.1.0" expl="equality hypothesis" proved="true">
      <transf name="replace" proved="true" arg1="(b +. (c +. ((d -. b) +. e)))" arg2="( (c +. ((d -. b) +. b +. e)))">
       <goal name="triang_s&#39;vc.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
       <transf name="replace" proved="true" arg1="((d -. b) +. b)" arg2="d">
        <goal name="triang_s&#39;vc.0.0.0.1.0.0.0" expl="equality hypothesis" proved="true">
        <proof prover="11"><result status="valid" time="0.05" steps="30310"/></proof>
        </goal>
        <goal name="triang_s&#39;vc.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="11"><result status="valid" time="0.32" steps="119610"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="triang_s&#39;vc.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
       <proof prover="11"><result status="valid" time="0.16" steps="68946"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="triang_t&#39;vc" expl="VC for triang_t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="triang_t&#39;vc.0" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="35911"/></proof>
  </goal>
  <goal name="triang_t&#39;vc.1" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.63" steps="228961"/></proof>
  </goal>
  <goal name="triang_t&#39;vc.2" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.66" steps="234398"/></proof>
  </goal>
  <goal name="triang_t&#39;vc.3" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="(a-. b)" arg2="(a+. (-.b))">
   <goal name="triang_t&#39;vc.3.0" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="(b-. c)" arg2="(b+. (-.c))">
    <goal name="triang_t&#39;vc.3.0.0" expl="assertion" proved="true">
    <transf name="assert" proved="true" arg1="(forall a b c d. (a+. b) +. (c+. d)  = a +. (b+. c) +. d)">
     <goal name="triang_t&#39;vc.3.0.0.0" expl="asserted formula" proved="true">
     <proof prover="11"><result status="valid" time="0.11" steps="45115"/></proof>
     </goal>
     <goal name="triang_t&#39;vc.3.0.0.1" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="h">
      <goal name="triang_t&#39;vc.3.0.0.1.0" expl="assertion" proved="true">
      <proof prover="11"><result status="valid" time="0.09" steps="36669"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="triang_t&#39;vc.3.0.1" expl="equality hypothesis" proved="true">
    <proof prover="11"><result status="valid" time="0.09" steps="35994"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="triang_t&#39;vc.3.1" expl="equality hypothesis" proved="true">
   <proof prover="11"><result status="valid" time="0.08" steps="35994"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="triang_t&#39;vc.4" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="((a +. b) *. (a -. b))" arg2="(a *. (a-. b) +. b*. (a-.b))">
   <goal name="triang_t&#39;vc.4.0" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.08" steps="36065"/></proof>
   </goal>
   <goal name="triang_t&#39;vc.4.1" expl="equality hypothesis" proved="true">
   <proof prover="11"><result status="valid" time="0.06" steps="30572"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="triang_sr&#39;vc" expl="VC for triang_sr" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="triang_sr&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(((a -. b) +. c) +. ((d +. b) +. e))" arg2="( ((d +. b) +. e)+.((a -. b) +. c))">
   <goal name="triang_sr&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.10" steps="42414"/></proof>
   </goal>
   <goal name="triang_sr&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <proof prover="11"><result status="valid" time="0.08" steps="35973"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="add_pos&#39;vc" expl="VC for add_pos" proved="true">
 <proof prover="11"><result status="valid" time="0.09" steps="36066"/></proof>
 </goal>
 <goal name="add_pos_strit_l&#39;vc" expl="VC for add_pos_strit_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_pos_strit_l&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="36183"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_pos_strit_r&#39;vc" expl="VC for add_pos_strit_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_pos_strit_r&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.13" steps="42833"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="modulus_pre_pre&#39;vc" expl="VC for modulus_pre_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="modulus_pre_pre&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.20" steps="86917"/></proof>
  </goal>
  <goal name="modulus_pre_pre&#39;vc.1" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Mul_distr_r2">
   <goal name="modulus_pre_pre&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.04" steps="30871"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="modulus_pre&#39;vc" expl="VC for modulus_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="modulus_pre&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="((a *. b) *. (a *. b))" arg2="((a *. a) *. (b *. b))">
   <goal name="modulus_pre&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="((c *. d) *. (c *. d))" arg2="((c *. c) *. (d *. d))">
    <goal name="modulus_pre&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="((a *. d) *. (a *. d))" arg2="((a*.a)*.(d*.d))">
     <goal name="modulus_pre&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="((c *. b) *. (c *. b))" arg2="((c*.c) *. (b*.b))">
      <goal name="modulus_pre&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="11"><result status="valid" time="0.08" steps="36596"/></proof>
      </goal>
      <goal name="modulus_pre&#39;vc.0.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="11"><result status="valid" time="0.10" steps="43327"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="modulus_pre&#39;vc.0.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="11"><result status="valid" time="0.11" steps="43262"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="modulus_pre&#39;vc.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="11"><result status="valid" time="0.11" steps="43262"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="modulus_pre&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <proof prover="11"><result status="valid" time="0.11" steps="43262"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="square_rt&#39;vc" expl="VC for square_rt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="square_rt&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.33" steps="161323"/></proof>
  </goal>
  <goal name="square_rt&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="37298"/></proof>
  </goal>
  <goal name="square_rt&#39;vc.2" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(real_ x)">
   <goal name="square_rt&#39;vc.2.0" expl="asserted formula" proved="true">
   <proof prover="11"><result status="valid" time="0.08" steps="38033"/></proof>
   </goal>
   <goal name="square_rt&#39;vc.2.1" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="square_rt&#39;vc.2.1.0" expl="postcondition" proved="true">
    <proof prover="11"><result status="valid" time="0.10" steps="45507"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="square_rt&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.58" steps="238808"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="square_rt_eq&#39;vc" expl="VC for square_rt_eq" proved="true">
 <proof prover="11"><result status="valid" time="0.05" steps="31900"/></proof>
 </goal>
 <goal name="real_square_rt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="real_square_rt.0" proved="true">
  <proof prover="11"><result status="valid" time="0.08" steps="37586"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pos_square_rt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pos_square_rt.0" proved="true">
  <proof prover="11"><result status="valid" time="0.08" steps="37675"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="square_rt_square&#39;vc" expl="VC for square_rt_square" proved="true">
 <proof prover="11"><result status="valid" time="0.08" steps="37820"/></proof>
 </goal>
 <goal name="square_rt_infeq&#39;vc" expl="VC for square_rt_infeq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="square_rt_infeq&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.58" steps="320276"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="square_rt_inf&#39;vc" expl="VC for square_rt_inf" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="square_rt_inf&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(square_rt x &lt;=. square_rt y)">
   <goal name="square_rt_inf&#39;vc.0.0" expl="asserted formula" proved="true">
   <proof prover="11"><result status="valid" time="0.10" steps="43575"/></proof>
   </goal>
   <goal name="square_rt_inf&#39;vc.0.1" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(square_rt x = square_rt y)">
    <goal name="square_rt_inf&#39;vc.0.1.0" expl="true case (postcondition)" proved="true">
    <proof prover="11"><result status="valid" time="0.10" steps="44355"/></proof>
    </goal>
    <goal name="square_rt_inf&#39;vc.0.1.1" expl="false case (postcondition)" proved="true">
    <proof prover="11"><result status="valid" time="0.11" steps="43841"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="injective_square_rt&#39;vc" expl="VC for injective_square_rt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="injective_square_rt&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="complete_order_real_">
   <goal name="injective_square_rt&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="11"><result status="valid" time="0.05" steps="32338"/></proof>
   </goal>
   <goal name="injective_square_rt&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="11"><result status="valid" time="0.04" steps="32338"/></proof>
   </goal>
   <goal name="injective_square_rt&#39;vc.0.2" expl="apply premises" proved="true">
   <proof prover="11"><result status="valid" time="0.10" steps="44796"/></proof>
   </goal>
   <goal name="injective_square_rt&#39;vc.0.3" expl="apply premises" proved="true">
   <proof prover="11"><result status="valid" time="0.09" steps="44796"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="injective_square&#39;vc" expl="VC for injective_square" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="injective_square&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="complete_order_real_">
   <goal name="injective_square&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="11"><result status="valid" time="0.04" steps="32468"/></proof>
   </goal>
   <goal name="injective_square&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="11"><result status="valid" time="0.04" steps="32468"/></proof>
   </goal>
   <goal name="injective_square&#39;vc.0.2" expl="apply premises" proved="true">
   <transf name="case" proved="true" arg1="(y&lt;.x)">
    <goal name="injective_square&#39;vc.0.2.0" expl="true case (apply premises)" proved="true">
    <transf name="assert" proved="true" arg1="(y*.y &lt;. x*.x)">
     <goal name="injective_square&#39;vc.0.2.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="compat_inf_mult_both">
      <goal name="injective_square&#39;vc.0.2.0.0.0" expl="apply premises" proved="true">
      <proof prover="11"><result status="valid" time="0.04" steps="32479"/></proof>
      </goal>
      <goal name="injective_square&#39;vc.0.2.0.0.1" expl="apply premises" proved="true">
      <proof prover="11"><result status="valid" time="0.04" steps="32479"/></proof>
      </goal>
      <goal name="injective_square&#39;vc.0.2.0.0.2" expl="apply premises" proved="true">
      <proof prover="11"><result status="valid" time="0.05" steps="32479"/></proof>
      </goal>
      <goal name="injective_square&#39;vc.0.2.0.0.3" expl="apply premises" proved="true">
      <proof prover="11"><result status="valid" time="0.05" steps="32479"/></proof>
      </goal>
      <goal name="injective_square&#39;vc.0.2.0.0.4" expl="apply premises" proved="true">
      <proof prover="11"><result status="valid" time="0.11" steps="45908"/></proof>
      </goal>
      <goal name="injective_square&#39;vc.0.2.0.0.5" expl="apply premises" proved="true">
      <proof prover="11"><result status="valid" time="0.08" steps="38266"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="injective_square&#39;vc.0.2.0.1" expl="true case (apply premises)" proved="true">
     <proof prover="11"><result status="valid" time="0.08" steps="38275"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="injective_square&#39;vc.0.2.1" expl="false case (apply premises)" proved="true">
    <proof prover="11"><result status="valid" time="0.04" steps="32481"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="injective_square&#39;vc.0.3" expl="apply premises" proved="true">
   <transf name="case" proved="true" arg1="(x&lt;.y)">
    <goal name="injective_square&#39;vc.0.3.0" expl="true case (apply premises)" proved="true">
    <transf name="assert" proved="true" arg1="(x *. x &lt;.y*.y)">
     <goal name="injective_square&#39;vc.0.3.0.0" expl="asserted formula" proved="true">
     <transf name="case" proved="true" arg1="(x = c_zero)">
      <goal name="injective_square&#39;vc.0.3.0.0.0" expl="true case (asserted formula)" proved="true">
      <transf name="apply" proved="true" arg1="compat_inf_mult_both">
       <goal name="injective_square&#39;vc.0.3.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="11"><result status="valid" time="0.04" steps="32490"/></proof>
       </goal>
       <goal name="injective_square&#39;vc.0.3.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="11"><result status="valid" time="0.04" steps="32490"/></proof>
       </goal>
       <goal name="injective_square&#39;vc.0.3.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="11"><result status="valid" time="0.05" steps="32490"/></proof>
       </goal>
       <goal name="injective_square&#39;vc.0.3.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="11"><result status="valid" time="0.04" steps="32490"/></proof>
       </goal>
       <goal name="injective_square&#39;vc.0.3.0.0.0.4" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="injective_square&#39;vc.0.3.0.0.0.4.0" proved="true">
        <proof prover="11"><result status="valid" time="0.08" steps="39776"/></proof>
        </goal>
        <goal name="injective_square&#39;vc.0.3.0.0.0.4.1" proved="true">
        <proof prover="11"><result status="valid" time="0.04" steps="32490"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="injective_square&#39;vc.0.3.0.0.0.5" expl="apply premises" proved="true">
       <proof prover="11"><result status="valid" time="0.07" steps="38249"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="injective_square&#39;vc.0.3.0.0.1" expl="false case (asserted formula)" proved="true">
      <transf name="apply" proved="true" arg1="compat_inf_mult_both">
       <goal name="injective_square&#39;vc.0.3.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="11"><result status="valid" time="0.04" steps="32494"/></proof>
       </goal>
       <goal name="injective_square&#39;vc.0.3.0.0.1.1" expl="apply premises" proved="true">
       <proof prover="11"><result status="valid" time="0.04" steps="32494"/></proof>
       </goal>
       <goal name="injective_square&#39;vc.0.3.0.0.1.2" expl="apply premises" proved="true">
       <proof prover="11"><result status="valid" time="0.03" steps="32494"/></proof>
       </goal>
       <goal name="injective_square&#39;vc.0.3.0.0.1.3" expl="apply premises" proved="true">
       <proof prover="11"><result status="valid" time="0.04" steps="32494"/></proof>
       </goal>
       <goal name="injective_square&#39;vc.0.3.0.0.1.4" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="injective_square&#39;vc.0.3.0.0.1.4.0" proved="true">
        <proof prover="11"><result status="valid" time="0.10" steps="45842"/></proof>
        </goal>
        <goal name="injective_square&#39;vc.0.3.0.0.1.4.1" proved="true">
        <proof prover="11"><result status="valid" time="0.04" steps="32494"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="injective_square&#39;vc.0.3.0.0.1.5" expl="apply premises" proved="true">
       <proof prover="11"><result status="valid" time="0.08" steps="38297"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="injective_square&#39;vc.0.3.0.1" expl="true case (apply premises)" proved="true">
     <proof prover="11"><result status="valid" time="0.07" steps="38275"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="injective_square&#39;vc.0.3.1" expl="false case (apply premises)" proved="true">
    <proof prover="11"><result status="valid" time="0.04" steps="32481"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="square_rt_c_one&#39;vc" expl="VC for square_rt_c_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="square_rt_c_one&#39;vc.0" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.34" steps="142455"/></proof>
  </goal>
  <goal name="square_rt_c_one&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.15" steps="70367"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="square_rt_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="square_rt_mult.0" proved="true">
  <transf name="apply" proved="true" arg1="injective_square">
   <goal name="square_rt_mult.0.0" expl="apply premises" proved="true">
   <proof prover="11"><result status="valid" time="0.10" steps="45761"/></proof>
   </goal>
   <goal name="square_rt_mult.0.1" expl="apply premises" proved="true">
   <proof prover="11"><result status="valid" time="0.10" steps="45559"/></proof>
   </goal>
   <goal name="square_rt_mult.0.2" expl="apply premises" proved="true">
   <proof prover="11"><result status="valid" time="0.11" steps="45919"/></proof>
   </goal>
   <goal name="square_rt_mult.0.3" expl="apply premises" proved="true">
   <proof prover="11"><result status="valid" time="0.09" steps="45726"/></proof>
   </goal>
   <goal name="square_rt_mult.0.4" expl="apply premises" proved="true">
   <proof prover="11"><result status="valid" time="0.14" steps="49324"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="square_rt_mult_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="square_rt_mult_rev.0" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="38607"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="modulus&#39;vc" expl="VC for modulus" proved="true">
 <proof prover="11"><result status="valid" time="0.11" steps="46563"/></proof>
 </goal>
 <goal name="modulus_eq&#39;vc" expl="VC for modulus_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="modulus_eq&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.10" steps="46065"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="modulus_minus&#39;vc" expl="VC for modulus_minus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="modulus_minus&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="modulus_minus&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.86" steps="166740"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="square_rt_simpl&#39;vc" expl="VC for square_rt_simpl" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="square_rt_simpl&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(x *. (c_one /. square_rt x))" arg2="(square_rt x *. square_rt x  *. (c_one /. square_rt x) )">
   <goal name="square_rt_simpl&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.10" steps="45462"/></proof>
   </goal>
   <goal name="square_rt_simpl&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <proof prover="11"><result status="valid" time="0.10" steps="45963"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="square_rt_simpl_fact&#39;vc" expl="VC for square_rt_simpl_fact" proved="true">
 <proof prover="11"><result status="valid" time="0.09" steps="47025"/></proof>
 </goal>
 <goal name="square_rt_simpl_mult&#39;vc" expl="VC for square_rt_simpl_mult" proved="true">
 <proof prover="11"><result status="valid" time="0.13" steps="47127"/></proof>
 </goal>
 <goal name="square_rt_simpl_fact_assoc&#39;vc" expl="VC for square_rt_simpl_fact_assoc" proved="true">
 <proof prover="11"><result status="valid" time="0.10" steps="46492"/></proof>
 </goal>
 <goal name="modulus_itself&#39;vc" expl="VC for modulus_itself" proved="true">
 <proof prover="11"><result status="valid" time="0.04" steps="33454"/></proof>
 </goal>
 <goal name="modulus_real_pos&#39;vc" expl="VC for modulus_real_pos" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="modulus_real_pos&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="modulus_real_pos&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.59" steps="274648"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="modulus_real_pos_inv&#39;vc" expl="VC for modulus_real_pos_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="modulus_real_pos_inv&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="modulus_real_pos_inv&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.10" steps="46570"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="modulus_real_neg&#39;vc" expl="VC for modulus_real_neg" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="modulus_real_neg&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="1.44" steps="272216"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="strict_positive_modulus&#39;vc" expl="VC for strict_positive_modulus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="strict_positive_modulus&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(c_zero&lt;=. modulus x)">
   <goal name="strict_positive_modulus&#39;vc.0.0" expl="asserted formula" proved="true">
   <proof prover="11"><result status="valid" time="0.07" steps="39811"/></proof>
   </goal>
   <goal name="strict_positive_modulus&#39;vc.0.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(not (c_zero =  modulus x))">
    <goal name="strict_positive_modulus&#39;vc.0.1.0" expl="asserted formula" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="strict_positive_modulus&#39;vc.0.1.0.0" expl="asserted formula" proved="true">
     <proof prover="11"><result status="valid" time="0.49" steps="171446"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="strict_positive_modulus&#39;vc.0.1.1" expl="postcondition" proved="true">
    <proof prover="11"><result status="valid" time="0.09" steps="45404"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="not_modulus_zero&#39;vc" expl="VC for not_modulus_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="not_modulus_zero&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.10" steps="45488"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="modulus_real&#39;vc" expl="VC for modulus_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="modulus_real&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.11" steps="45650"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="t_mult_real_square&#39;vc" expl="VC for t_mult_real_square" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="t_mult_real_square&#39;vc.0" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.11" steps="55872"/></proof>
  </goal>
  <goal name="t_mult_real_square&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.13" steps="58437"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="t_mult_im_square&#39;vc" expl="VC for t_mult_im_square" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="t_mult_im_square&#39;vc.0" expl="assertion" proved="true">
  <proof prover="11"><result status="valid" time="0.11" steps="56048"/></proof>
  </goal>
  <goal name="t_mult_im_square&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.89" steps="526604"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mult_modulus_pre&#39;vc" expl="VC for mult_modulus_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mult_modulus_pre&#39;vc.0" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(forall a b c. (a+.c) +.(b-.c) = a+. b)">
   <goal name="mult_modulus_pre&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="mult_modulus_pre&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="replace" proved="true" arg1="(b-. c)" arg2="(b+. (-.c))">
     <goal name="mult_modulus_pre&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="replace" proved="true" arg1="((a +. c) +. (b +. (-. c)))" arg2="(a+. b +. (c+. (-.c)))">
      <goal name="mult_modulus_pre&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="11"><result status="valid" time="0.08" steps="41231"/></proof>
      </goal>
      <goal name="mult_modulus_pre&#39;vc.0.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="11"><result status="valid" time="0.51" steps="246137"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="mult_modulus_pre&#39;vc.0.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="11"><result status="valid" time="0.07" steps="40539"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mult_modulus_pre&#39;vc.0.1" expl="assertion" proved="true">
   <transf name="assert" proved="true" arg1="(forall a b c. (a-.c) +.(b+.c) = a+. b)">
    <goal name="mult_modulus_pre&#39;vc.0.1.0" expl="asserted formula" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mult_modulus_pre&#39;vc.0.1.0.0" expl="asserted formula" proved="true">
     <proof prover="11"><result status="valid" time="0.19" steps="58071"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="mult_modulus_pre&#39;vc.0.1.1" expl="assertion" proved="true">
    <proof prover="11"><result status="valid" time="0.13" steps="58236"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mult_modulus_pre&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.09" steps="40688"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mult_modulus&#39;vc" expl="VC for mult_modulus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mult_modulus&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="mult_modulus&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.67" steps="263547"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mult_modulus_rev&#39;vc" expl="VC for mult_modulus_rev" proved="true">
 <proof prover="11"><result status="valid" time="0.08" steps="40483"/></proof>
 </goal>
 <goal name="modulus_real_minus_bound&#39;vc" expl="VC for modulus_real_minus_bound" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="modulus_real_minus_bound&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modulus_real_minus_bound&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="3.93" steps="463416"/></proof>
   </goal>
   <goal name="modulus_real_minus_bound&#39;vc.0.1" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(a -&#39;&#39; b)" arg2="(a -. b)" arg3="in" arg4="Requires">
    <goal name="modulus_real_minus_bound&#39;vc.0.1.0" expl="postcondition" proved="true">
    <proof prover="11"><result status="valid" time="1.19" steps="521039"/></proof>
    </goal>
    <goal name="modulus_real_minus_bound&#39;vc.0.1.1" expl="equality hypothesis" proved="true">
    <proof prover="11"><result status="valid" time="0.13" steps="49553"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mult_real_modulus&#39;vc" expl="VC for mult_real_modulus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mult_real_modulus&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="34582"/></proof>
  </goal>
  <goal name="mult_real_modulus&#39;vc.1" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="34585"/></proof>
  </goal>
  <goal name="mult_real_modulus&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.08" steps="40840"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mult_real_modulus_rev&#39;vc" expl="VC for mult_real_modulus_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mult_real_modulus_rev&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="34669"/></proof>
  </goal>
  <goal name="mult_real_modulus_rev&#39;vc.1" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.04" steps="34672"/></proof>
  </goal>
  <goal name="mult_real_modulus_rev&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.08" steps="40953"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="modulus_real_div&#39;vc" expl="VC for modulus_real_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="modulus_real_div&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="34756"/></proof>
  </goal>
  <goal name="modulus_real_div&#39;vc.1" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.08" steps="41087"/></proof>
  </goal>
  <goal name="modulus_real_div&#39;vc.2" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(y /. x)" arg2="(y *. (c_one/.x))">
   <goal name="modulus_real_div&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="11"><result status="valid" time="0.25" steps="130664"/></proof>
   </goal>
   <goal name="modulus_real_div&#39;vc.2.1" expl="equality hypothesis" proved="true">
   <proof prover="11"><result status="valid" time="0.08" steps="41881"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mult_modulus_real&#39;vc" expl="VC for mult_modulus_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mult_modulus_real&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.06" steps="34843"/></proof>
  </goal>
  <goal name="mult_modulus_real&#39;vc.1" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="34846"/></proof>
  </goal>
  <goal name="mult_modulus_real&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.09" steps="41160"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mult_modulus_non_null&#39;vc" expl="VC for mult_modulus_non_null" proved="true">
 <proof prover="11"><result status="valid" time="0.09" steps="41860"/></proof>
 </goal>
 <goal name="modulus_to_non_null&#39;vc" expl="VC for modulus_to_non_null" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="modulus_to_non_null&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.11" steps="47190"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mult_c_one_modulus&#39;vc" expl="VC for mult_c_one_modulus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mult_c_one_modulus&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.13" steps="48097"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="modulus_pos&#39;vc" expl="VC for modulus_pos" proved="true">
 <proof prover="11"><result status="valid" time="0.07" steps="41616"/></proof>
 </goal>
 <goal name="modulus_infeq&#39;vc" expl="VC for modulus_infeq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="modulus_infeq&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.12" steps="50597"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="modulus_inf&#39;vc" expl="VC for modulus_inf" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="modulus_inf&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.12" steps="49825"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="modulus_diff_rev&#39;vc" expl="VC for modulus_diff_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="modulus_diff_rev&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="modulus_diff_rev&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(a-.b)" arg2="(a+. (-.b))">
    <goal name="modulus_diff_rev&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(b-.a)" arg2="(b+. (-.a))">
     <goal name="modulus_diff_rev&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="modulus_eq">
      <goal name="modulus_diff_rev&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(a+. (-. b))" arg2="(-. (b+.(-.a)))">
       <goal name="modulus_diff_rev&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="11"><result status="valid" time="0.12" steps="55334"/></proof>
       </goal>
       <goal name="modulus_diff_rev&#39;vc.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="11"><result status="valid" time="0.12" steps="52665"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="modulus_diff_rev&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(a+. (-. b))" arg2="(-. (b+.(-.a)))">
       <goal name="modulus_diff_rev&#39;vc.0.0.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="11"><result status="valid" time="0.14" steps="54958"/></proof>
       </goal>
       <goal name="modulus_diff_rev&#39;vc.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
       <proof prover="11"><result status="valid" time="0.12" steps="52665"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="modulus_diff_rev&#39;vc.0.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="11"><result status="valid" time="0.08" steps="45712"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="modulus_diff_rev&#39;vc.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="11"><result status="valid" time="0.09" steps="45712"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="modulus_simpl_leq&#39;vc" expl="VC for modulus_simpl_leq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="modulus_simpl_leq&#39;vc.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(real_ a)">
   <goal name="modulus_simpl_leq&#39;vc.0.0" expl="true case (postcondition)" proved="true">
   <transf name="case" proved="true" arg1="(real_ c)">
    <goal name="modulus_simpl_leq&#39;vc.0.0.0" expl="true case (postcondition)" proved="true">
    <transf name="case" proved="true" arg1="(c_zero &lt;=. a)">
     <goal name="modulus_simpl_leq&#39;vc.0.0.0.0" expl="true case (postcondition)" proved="true">
     <proof prover="11"><result status="valid" time="0.12" steps="54498"/></proof>
     </goal>
     <goal name="modulus_simpl_leq&#39;vc.0.0.0.1" expl="false case (true case. postcondition)" proved="true">
     <proof prover="11"><result status="valid" time="0.12" steps="53029"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="modulus_simpl_leq&#39;vc.0.0.1" expl="false case (true case. postcondition)" proved="true">
    <proof prover="11"><result status="valid" time="0.04" steps="35486"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="modulus_simpl_leq&#39;vc.0.1" expl="false case (postcondition)" proved="true">
   <transf name="case" proved="true" arg1="(real_ c)">
    <goal name="modulus_simpl_leq&#39;vc.0.1.0" expl="false case (true case. postcondition)" proved="true">
    <proof prover="11"><result status="valid" time="0.05" steps="35486"/></proof>
    </goal>
    <goal name="modulus_simpl_leq&#39;vc.0.1.1" expl="false case (postcondition)" proved="true">
    <proof prover="11"><result status="valid" time="0.05" steps="35491"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="modulus_simpl_leq_rev&#39;vc" expl="VC for modulus_simpl_leq_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="modulus_simpl_leq_rev&#39;vc.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(real_ a)">
   <goal name="modulus_simpl_leq_rev&#39;vc.0.0" expl="true case (postcondition)" proved="true">
   <transf name="case" proved="true" arg1="(real_ c)">
    <goal name="modulus_simpl_leq_rev&#39;vc.0.0.0" expl="true case (postcondition)" proved="true">
    <proof prover="11"><result status="valid" time="0.11" steps="53792"/></proof>
    </goal>
    <goal name="modulus_simpl_leq_rev&#39;vc.0.0.1" expl="false case (true case. postcondition)" proved="true">
    <proof prover="11"><result status="valid" time="0.05" steps="35624"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="modulus_simpl_leq_rev&#39;vc.0.1" expl="false case (postcondition)" proved="true">
   <transf name="assert" proved="true" arg1="(a=b)">
    <goal name="modulus_simpl_leq_rev&#39;vc.0.1.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="(not (real_ b))">
     <goal name="modulus_simpl_leq_rev&#39;vc.0.1.0.0" expl="asserted formula" proved="true">
     <proof prover="11"><result status="valid" time="0.06" steps="35596"/></proof>
     </goal>
     <goal name="modulus_simpl_leq_rev&#39;vc.0.1.0.1" expl="asserted formula" proved="true">
     <proof prover="11"><result status="valid" time="0.05" steps="35611"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="modulus_simpl_leq_rev&#39;vc.0.1.1" expl="false case (postcondition)" proved="true">
    <proof prover="11"><result status="valid" time="0.05" steps="35632"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="div_eq&#39;vc" expl="VC for div_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="div_eq&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.06" steps="39170"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_eq_inv_t&#39;vc" expl="VC for add_eq_inv_t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_eq_inv_t&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.09" steps="42362"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mult_eq_inv_t&#39;vc" expl="VC for mult_eq_inv_t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mult_eq_inv_t&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.09" steps="42497"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="sum_frac&#39;vc" expl="VC for sum_frac" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sum_frac&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.10" steps="49856"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="sum_frac_rev&#39;vc" expl="VC for sum_frac_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sum_frac_rev&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.08" steps="42772"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="div_pos&#39;vc" expl="VC for div_pos" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="div_pos&#39;vc.0" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.09" steps="42865"/></proof>
  </goal>
  <goal name="div_pos&#39;vc.1" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.05" steps="36325"/></proof>
  </goal>
  <goal name="div_pos&#39;vc.2" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="42923"/></proof>
  </goal>
  <goal name="div_pos&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="0.07" steps="42950"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
