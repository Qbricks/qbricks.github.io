<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="4" name="CVC3" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="7" name="Alt-Ergo" version="2.4.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="8" name="CVC4" version="1.7" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="10" name="Z3" version="4.8.6" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="11" name="Z3" version="4.8.6" alternative="counterexamples" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="qdata.mlw"/>
<theory name="Qreg" proved="true">
 <goal name="xor_i&#39;vc" expl="VC for xor_i" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="xor_i&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="xor_i&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.34" steps="260044"/></proof>
   </goal>
   <goal name="xor_i&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.31" steps="254621"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="xor_i&#39;vc.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="xor_i&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.33" steps="260083"/></proof>
   </goal>
   <goal name="xor_i&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.31" steps="254653"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="xor_i&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="xor_i&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.33" steps="260080"/></proof>
   </goal>
   <goal name="xor_i&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.34" steps="260148"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="xor_i&#39;vc.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="xor_i&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.32" steps="260097"/></proof>
   </goal>
   <goal name="xor_i&#39;vc.3.1" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.31" steps="260165"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_l_rows&#39;vc" expl="VC for ket_l_rows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_l_rows&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.65" steps="295315"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ket_l_columns&#39;vc" expl="VC for ket_l_columns" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_l_columns&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.64" steps="294790"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ket_length&#39;vc" expl="VC for ket_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_length&#39;vc.0" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="0.66" steps="294810"/></proof>
  </goal>
  <goal name="ket_length&#39;vc.1" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="0.64" steps="293775"/></proof>
  </goal>
  <goal name="ket_length&#39;vc.2" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_length&#39;vc.2.0" expl="assertion" proved="true">
   <proof prover="8"><result status="valid" time="1.70" steps="649025"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_length&#39;vc.3" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_length&#39;vc.3.0" expl="assertion" proved="true">
   <proof prover="8"><result status="valid" time="0.59" steps="296222"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_length&#39;vc.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_length&#39;vc.4.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.60" steps="296236"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_length&#39;vc.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_length&#39;vc.5.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.28" steps="260058"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_length&#39;vc.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_length&#39;vc.6.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.30" steps="260062"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="get_ket_rev&#39;vc" expl="VC for get_ket_rev" proved="true">
 <proof prover="8"><result status="valid" time="0.29" steps="255361"/></proof>
 </goal>
 <goal name="get_ket_bv&#39;vc" expl="VC for get_ket_bv" proved="true">
 <proof prover="8"><result status="valid" time="0.31" steps="255478"/></proof>
 </goal>
 <goal name="get_ket_add&#39;vc" expl="VC for get_ket_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_ket_add&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.63" steps="294509"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_ket_substr&#39;vc" expl="VC for get_ket_substr" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_ket_substr&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.61" steps="294673"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mat_mult_ket_l&#39;vc" expl="VC for mat_mult_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_mult_ket_l&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.65" steps="295921"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ket_kronecker_values&#39;vc" expl="VC for ket_kronecker_values" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_kronecker_values&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.75" steps="671614"/></proof>
  </goal>
  <goal name="ket_kronecker_values&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.66" steps="27118"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ket_l_to_ket&#39;vc" expl="VC for ket_l_to_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_l_to_ket&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.50" steps="625006"/></proof>
  </goal>
  <goal name="ket_l_to_ket&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.71" steps="627726"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ket_l_to_ket_gen&#39;vc" expl="VC for ket_l_to_ket_gen" proved="true">
 <proof prover="8"><result status="valid" time="0.44" steps="273676"/></proof>
 </goal>
 <goal name="ket_to_ket_l&#39;vc" expl="VC for ket_to_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_to_ket_l&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.59" steps="290403"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_ket_valid_index&#39;vc" expl="VC for set_ket_valid_index" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_ket_valid_index&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.58" steps="295640"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ket_to_ket_l_l&#39;vc" expl="VC for ket_to_ket_l_l" proved="true">
 <proof prover="8"><result status="valid" time="0.46" steps="273494"/></proof>
 </goal>
 <goal name="set_constant_size_ket&#39;vc" expl="VC for set_constant_size_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_constant_size_ket&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="set_constant_size_ket&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="set_constant_size_ket&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.84" steps="383100"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="set_constant_size_ket&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="set_constant_size_ket&#39;vc.0.1.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.83" steps="383207"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_norm_l&#39;vc" expl="VC for ket_norm_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_norm_l&#39;vc.0" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="positive_sum">
   <goal name="ket_norm_l&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="ket_norm_l&#39;vc.0.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="ket_norm_l&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="0.80" steps="400405"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ind_sum_ket_norm_l&#39;vc" expl="VC for ind_sum_ket_norm_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ind_sum_ket_norm_l&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ind_sum_to_sum">
   <goal name="ind_sum_ket_norm_l&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="ket_norm_l&#39;def">
    <goal name="ind_sum_ket_norm_l&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.28" steps="257229"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_norm_one&#39;vc" expl="VC for ket_norm_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_norm_one&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="2.19" steps="740301"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ket_norm_one_c_one&#39;vc" expl="VC for ket_norm_one_c_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_norm_one_c_one&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.49" steps="277682"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="scalar_ket_norm_l&#39;vc" expl="VC for scalar_ket_norm_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="scalar_ket_norm_l&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="scalar_ket_norm_l&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ind_sum_ket_norm_l">
    <goal name="scalar_ket_norm_l&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(ind_sum
   (fun (k:int) -&gt; modulus (get (a *.. x) k 0) *. modulus (get (a *.. x) k 0))
   0 (power 2 n))" arg2="((a*.a)*.ind_sum
   (fun (k:int) -&gt; modulus (get x k 0) *. modulus (get x k 0))
   0 (power 2 n))">
     <goal name="scalar_ket_norm_l&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="square_rt_mult_rev">
      <goal name="scalar_ket_norm_l&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="mult_eq_t">
       <goal name="scalar_ket_norm_l&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="square_rt_mult_rev">
        <goal name="scalar_ket_norm_l&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="0.51" steps="276332"/></proof>
        </goal>
        <goal name="scalar_ket_norm_l&#39;vc.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="0.52" steps="277204"/></proof>
        </goal>
        <goal name="scalar_ket_norm_l&#39;vc.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="0.30" steps="258933"/></proof>
        </goal>
        <goal name="scalar_ket_norm_l&#39;vc.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="0.49" steps="277204"/></proof>
        </goal>
        <goal name="scalar_ket_norm_l&#39;vc.0.0.0.0.0.0.4" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="0.32" steps="258933"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="scalar_ket_norm_l&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="ind_sum_ket_norm_l">
        <goal name="scalar_ket_norm_l&#39;vc.0.0.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
        </transf>
        </goal>
        <goal name="scalar_ket_norm_l&#39;vc.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="0.32" steps="258933"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="scalar_ket_norm_l&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.63" steps="293872"/></proof>
      </goal>
      <goal name="scalar_ket_norm_l&#39;vc.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.50" steps="276315"/></proof>
      </goal>
      <goal name="scalar_ket_norm_l&#39;vc.0.0.0.0.3" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="real_ind_sum">
       <goal name="scalar_ket_norm_l&#39;vc.0.0.0.0.3.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="0.64" steps="294105"/></proof>
       </goal>
       <goal name="scalar_ket_norm_l&#39;vc.0.0.0.0.3.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="scalar_ket_norm_l&#39;vc.0.0.0.0.3.1.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="scalar_ket_norm_l&#39;vc.0.0.0.0.3.1.0.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="0.62" steps="298066"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="scalar_ket_norm_l&#39;vc.0.0.0.0.4" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="positive_ind_sum">
       <goal name="scalar_ket_norm_l&#39;vc.0.0.0.0.4.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="0.62" steps="294105"/></proof>
       </goal>
       <goal name="scalar_ket_norm_l&#39;vc.0.0.0.0.4.1" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="scalar_ket_norm_l&#39;vc.0.0.0.0.4.1.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="0.64" steps="298395"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="scalar_ket_norm_l&#39;vc.0.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="ind_sum_scal_rev">
      <goal name="scalar_ket_norm_l&#39;vc.0.0.0.1.0" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="ind_sum_eq">
       <goal name="scalar_ket_norm_l&#39;vc.0.0.0.1.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="scalar_ket_norm_l&#39;vc.0.0.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="scalar_ket_norm_l&#39;vc.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="scalar_values">
          <goal name="scalar_ket_norm_l&#39;vc.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="mult_modulus">
           <goal name="scalar_ket_norm_l&#39;vc.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="0.63" steps="300363"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="scalar_ket_norm_l&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.62" steps="293721"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="zero_ket_norm_l&#39;vc" expl="VC for zero_ket_norm_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="zero_ket_norm_l&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ind_sum_ket_norm_l" arg2="in" arg3="Requires">
   <goal name="zero_ket_norm_l&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(get x i j &lt;&gt; c_zero)">
    <goal name="zero_ket_norm_l&#39;vc.0.0.0" expl="true case (postcondition)" proved="true">
    <transf name="assert" proved="true" arg1="(c_zero &lt;. modulus (get x i j))">
     <goal name="zero_ket_norm_l&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <proof prover="8"><result status="valid" time="0.56" steps="311899"/></proof>
     </goal>
     <goal name="zero_ket_norm_l&#39;vc.0.0.0.1" expl="true case (postcondition)" proved="true">
     <transf name="assert" proved="true" arg1="(c_zero &lt;. (ind_sum (fun (k:int) -&gt; modulus (get x k 0) *. modulus (get x k 0)) 0
   (power 2 n)))">
      <goal name="zero_ket_norm_l&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="instantiate" proved="true" arg1="ind_sum_trans" arg2="(fun (k:int) -&gt; modulus (get x k 0) *. modulus (get x k 0)),0,i,(power 2 n)">
       <goal name="zero_ket_norm_l&#39;vc.0.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="rewrite" proved="true" arg1="Hinst">
        <goal name="zero_ket_norm_l&#39;vc.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="(c_zero &lt;. ind_sum (fun (k:int) -&gt; modulus (get x k 0) *. modulus (get x k 0))
         i (power 2 n))">
         <goal name="zero_ket_norm_l&#39;vc.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="h">
         </transf>
         </goal>
         <goal name="zero_ket_norm_l&#39;vc.0.0.0.1.0.0.0.1" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="(forall a b. c_zero &lt;=. a -&gt; c_zero &lt;. b -&gt; c_zero &lt;. a+.b)">
          <goal name="zero_ket_norm_l&#39;vc.0.0.0.1.0.0.0.1.0" expl="asserted formula" proved="true">
          <proof prover="8"><result status="valid" time="0.56" steps="310552"/></proof>
          </goal>
          <goal name="zero_ket_norm_l&#39;vc.0.0.0.1.0.0.0.1.1" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="h1">
           <goal name="zero_ket_norm_l&#39;vc.0.0.0.1.0.0.0.1.1.0" expl="apply premises" proved="true">
           <transf name="case" proved="true" arg1="(0&lt;i)">
            <goal name="zero_ket_norm_l&#39;vc.0.0.0.1.0.0.0.1.1.0.0" expl="true case (apply premises)" proved="true">
            <transf name="apply" proved="true" arg1="positive_ind_sum">
             <goal name="zero_ket_norm_l&#39;vc.0.0.0.1.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="0.36" steps="292434"/></proof>
             </goal>
             <goal name="zero_ket_norm_l&#39;vc.0.0.0.1.0.0.0.1.1.0.0.1" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="zero_ket_norm_l&#39;vc.0.0.0.1.0.0.0.1.1.0.0.1.0" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="2.74" steps="960904"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="zero_ket_norm_l&#39;vc.0.0.0.1.0.0.0.1.1.0.1" expl="false case (apply premises)" proved="true">
            <proof prover="8"><result status="valid" time="0.73" steps="333268"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="zero_ket_norm_l&#39;vc.0.0.0.1.0.0.0.1.1.1" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="2.28" steps="862294"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="zero_ket_norm_l&#39;vc.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="0.54" steps="310368"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="zero_ket_norm_l&#39;vc.0.0.0.1.1" expl="true case (postcondition)" proved="true">
      <transf name="assert" proved="true" arg1="(forall x. c_zero &lt;. x -&gt; c_zero &lt;&gt; square_rt x)">
       <goal name="zero_ket_norm_l&#39;vc.0.0.0.1.1.0" expl="asserted formula" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="zero_ket_norm_l&#39;vc.0.0.0.1.1.0.0" expl="asserted formula" proved="true">
        <proof prover="8"><result status="valid" time="0.79" steps="331150"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="zero_ket_norm_l&#39;vc.0.0.0.1.1.1" expl="true case (postcondition)" proved="true">
       <transf name="assert" proved="true" arg1="( square_rt
  (ind_sum (fun (k:int) -&gt; modulus (get x k 0) *. modulus (get x k 0)) 0
   (power 2 n))
  &lt;&gt; c_zero)">
        <goal name="zero_ket_norm_l&#39;vc.0.0.0.1.1.1.0" expl="asserted formula" proved="true">
        <proof prover="8"><result status="valid" time="0.78" steps="331533"/></proof>
        </goal>
        <goal name="zero_ket_norm_l&#39;vc.0.0.0.1.1.1.1" expl="true case (postcondition)" proved="true">
        <transf name="assert" proved="true" arg1="false">
         <goal name="zero_ket_norm_l&#39;vc.0.0.0.1.1.1.1.0" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="(forall x. x= c_zero -&gt; not x = c_zero -&gt; false)">
          <goal name="zero_ket_norm_l&#39;vc.0.0.0.1.1.1.1.0.0" expl="asserted formula" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="zero_ket_norm_l&#39;vc.0.0.0.1.1.1.1.0.0.0" expl="asserted formula" proved="true">
           <proof prover="8"><result status="valid" time="0.32" steps="292233"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="zero_ket_norm_l&#39;vc.0.0.0.1.1.1.1.0.1" expl="asserted formula" proved="true">
          <transf name="instantiate" proved="true" arg1="h1" arg2="(square_rt
      (ind_sum (fun (k:int) -&gt; modulus (get x k 0) *. modulus (get x k 0)) 0
       (power 2 n)))">
           <goal name="zero_ket_norm_l&#39;vc.0.0.0.1.1.1.1.0.1.0" expl="asserted formula" proved="true">
           <transf name="destruct" proved="true" arg1="Hinst">
            <goal name="zero_ket_norm_l&#39;vc.0.0.0.1.1.1.1.0.1.0.0" expl="destruct premise" proved="true">
            <proof prover="8"><result status="valid" time="0.73" steps="332446"/></proof>
            </goal>
            <goal name="zero_ket_norm_l&#39;vc.0.0.0.1.1.1.1.0.1.0.1" expl="asserted formula" proved="true">
            <transf name="destruct" proved="true" arg1="Hinst">
             <goal name="zero_ket_norm_l&#39;vc.0.0.0.1.1.1.1.0.1.0.1.0" expl="destruct premise" proved="true">
             <proof prover="8"><result status="valid" time="0.77" steps="332302"/></proof>
             </goal>
             <goal name="zero_ket_norm_l&#39;vc.0.0.0.1.1.1.1.0.1.0.1.1" expl="asserted formula" proved="true">
             <proof prover="8"><result status="valid" time="0.36" steps="292223"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="zero_ket_norm_l&#39;vc.0.0.0.1.1.1.1.1" expl="true case (postcondition)" proved="true">
         <proof prover="8"><result status="valid" time="0.35" steps="293541"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="zero_ket_norm_l&#39;vc.0.0.1" expl="false case (postcondition)" proved="true">
    <proof prover="8"><result status="valid" time="0.33" steps="293317"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="zero_ket_norm_l&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.28" steps="257947"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="normalized_l&#39;vc" expl="VC for normalized_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="normalized_l&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.31" steps="261001"/></proof>
  </goal>
  <goal name="normalized_l&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.74" steps="296221"/></proof>
  </goal>
  <goal name="normalized_l&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.64" steps="301107"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="make_ket&#39;vc" expl="VC for make_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="make_ket&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.88" steps="361909"/></proof>
  </goal>
  <goal name="make_ket&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.30" steps="325074"/></proof>
  </goal>
  <goal name="make_ket&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.83" steps="365040"/></proof>
  </goal>
  <goal name="make_ket&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.05" steps="366658"/></proof>
  </goal>
  <goal name="make_ket&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.80" steps="365849"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="assert_make_ket&#39;vc" expl="VC for assert_make_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="assert_make_ket&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="assert_make_ket&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="get_ket&#39;def">
    <goal name="assert_make_ket&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="1.82" steps="697769"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="assert_make_ket_l&#39;vc" expl="VC for assert_make_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="assert_make_ket_l&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="assert_make_ket_l&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="get_ket&#39;def">
    <goal name="assert_make_ket_l&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="get&#39;def">
     <goal name="assert_make_ket_l&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="make_ket&#39;def">
      <goal name="assert_make_ket_l&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="assert_make_ket_l&#39;vc.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="replace" proved="true" arg1="(f i)" arg2="((fun (x:int) (_:int) -&gt; f @ x) i 0)">
        <goal name="assert_make_ket_l&#39;vc.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="make_f&#39;def">
         <goal name="assert_make_ket_l&#39;vc.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="make_func&#39;spec3">
          <goal name="assert_make_ket_l&#39;vc.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <proof prover="8"><result status="valid" time="0.88" steps="420395"/></proof>
          </goal>
          <goal name="assert_make_ket_l&#39;vc.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="0.66" steps="341384"/></proof>
          </goal>
          <goal name="assert_make_ket_l&#39;vc.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="0.34" steps="305600"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="assert_make_ket_l&#39;vc.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="0.73" steps="341384"/></proof>
         </goal>
         <goal name="assert_make_ket_l&#39;vc.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="0.34" steps="305600"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="assert_make_ket_l&#39;vc.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="8"><result status="valid" time="0.77" steps="403827"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="assert_make_ket_l&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.29" steps="260622"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="make_ket_length&#39;vc" expl="VC for make_ket_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="make_ket_length&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="make_ket_length&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="make_ket&#39;def">
    <goal name="make_ket_length&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_length&#39;def">
     <goal name="make_ket_length&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="8"><result status="valid" time="1.96" steps="738395"/></proof>
     </goal>
     <goal name="make_ket_length&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.88" steps="727152"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="make_ket_length&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.31" steps="260718"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="make_ket_rows&#39;vc" expl="VC for make_ket_rows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="make_ket_rows&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.84" steps="679796"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="make_ket_columns&#39;vc" expl="VC for make_ket_columns" proved="true">
 <proof prover="8"><result status="valid" time="1.90" steps="670065"/></proof>
 </goal>
 <goal name="make_ket_constant&#39;vc" expl="VC for make_ket_constant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="make_ket_constant&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.29" steps="293710"/></proof>
  </goal>
  <goal name="make_ket_constant&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.32" steps="296892"/></proof>
  </goal>
  <goal name="make_ket_constant&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.76" steps="334668"/></proof>
  </goal>
  <goal name="make_ket_constant&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.79" steps="333993"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_equal_ket&#39;vc" expl="VC for set_equal_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_equal_ket&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.59" steps="300495"/></proof>
  </goal>
  <goal name="set_equal_ket&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.60" steps="299960"/></proof>
  </goal>
  <goal name="set_equal_ket&#39;vc.2" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="j" arg2="0">
   <goal name="set_equal_ket&#39;vc.2.0" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(get m i 0 )" arg2="(get_ket m i  )">
    <goal name="set_equal_ket&#39;vc.2.0.0" expl="precondition" proved="true">
    <proof prover="8"><result status="valid" time="0.60" steps="300659"/></proof>
    </goal>
    <goal name="set_equal_ket&#39;vc.2.0.1" expl="equality hypothesis" proved="true">
    <proof prover="8"><result status="valid" time="0.29" steps="264217"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="set_equal_ket&#39;vc.2.1" expl="equality hypothesis" proved="true">
   <proof prover="8"><result status="valid" time="0.61" steps="300160"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="set_equal_ket&#39;vc.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="set_equal_ket&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.30" steps="263078"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_equal_ket_&#39;vc" expl="VC for set_equal_ket_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_equal_ket_&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.63" steps="300907"/></proof>
  </goal>
  <goal name="set_equal_ket_&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.48" steps="283381"/></proof>
  </goal>
  <goal name="set_equal_ket_&#39;vc.2" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="j" arg2="0">
   <goal name="set_equal_ket_&#39;vc.2.0" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(get m i 0)" arg2="(get_ket m i)">
    <goal name="set_equal_ket_&#39;vc.2.0.0" expl="precondition" proved="true">
    <proof prover="8"><result status="valid" time="0.61" steps="301554"/></proof>
    </goal>
    <goal name="set_equal_ket_&#39;vc.2.0.1" expl="equality hypothesis" proved="true">
    <proof prover="8"><result status="valid" time="0.28" steps="264460"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="set_equal_ket_&#39;vc.2.1" expl="equality hypothesis" proved="true">
   <proof prover="8"><result status="valid" time="0.60" steps="300859"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="set_equal_ket_&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.30" steps="263321"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_ket&#39;vc" expl="VC for add_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_ket&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.61" steps="301405"/></proof>
  </goal>
  <goal name="add_ket&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.64" steps="300927"/></proof>
  </goal>
  <goal name="add_ket&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.70" steps="659201"/></proof>
  </goal>
  <goal name="add_ket&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.61" steps="302535"/></proof>
  </goal>
  <goal name="add_ket&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.46" steps="282357"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_ket_l&#39;vc" expl="VC for add_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_ket_l&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.29" steps="296320"/></proof>
  </goal>
  <goal name="add_ket_l&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.35" steps="298304"/></proof>
  </goal>
  <goal name="add_ket_l&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.58" steps="317352"/></proof>
  </goal>
  <goal name="add_ket_l&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.69" steps="335995"/></proof>
  </goal>
  <goal name="add_ket_l&#39;vc.4" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="add_ket_l&#39;vc.4.0" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="0.71" steps="336610"/></proof>
   </goal>
   <goal name="add_ket_l&#39;vc.4.1" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="0.70" steps="336623"/></proof>
   </goal>
   <goal name="add_ket_l&#39;vc.4.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="add_ket_l&#39;vc.4.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures3">
     <goal name="add_ket_l&#39;vc.4.2.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="add_values">
      <goal name="add_ket_l&#39;vc.4.2.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="add_ket_l&#39;vc.4.2.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="0.69" steps="337403"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="add_ket_l&#39;vc.4.2.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.55" steps="318526"/></proof>
      </goal>
      <goal name="add_ket_l&#39;vc.4.2.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.72" steps="336368"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="add_ket_l&#39;vc.4.2.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.34" steps="298419"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="add_ket_l_to_add_mat&#39;vc" expl="VC for add_ket_l_to_add_mat" proved="true">
 <proof prover="7"><result status="valid" time="0.17" steps="2612"/></proof>
 </goal>
 <goal name="null_add_ket_l&#39;vc" expl="VC for null_add_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="null_add_ket_l&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="add_ket_l&#39;def">
   <goal name="null_add_ket_l&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_equal_ket_">
    <goal name="null_add_ket_l&#39;vc.0.0.0" expl="apply premises" proved="true">
    <transf name="exists" proved="true" arg1="l">
     <goal name="null_add_ket_l&#39;vc.0.0.0.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="null_add_ket_l&#39;vc.0.0.0.0.0" proved="true">
      <proof prover="8"><result status="valid" time="0.71" steps="331818"/></proof>
      </goal>
      <goal name="null_add_ket_l&#39;vc.0.0.0.0.1" proved="true">
      <proof prover="8"><result status="valid" time="0.30" steps="261932"/></proof>
      </goal>
      <goal name="null_add_ket_l&#39;vc.0.0.0.0.2" proved="true">
      <transf name="rewrite" proved="true" arg1="assert_make_ket_l">
       <goal name="null_add_ket_l&#39;vc.0.0.0.0.2.0" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="null_add_ket_l&#39;vc.0.0.0.0.2.0.0" proved="true">
        <transf name="apply" proved="true" arg1="zero_add_t">
         <goal name="null_add_ket_l&#39;vc.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
         <transf name="eliminate_definition" proved="true" >
          <goal name="null_add_ket_l&#39;vc.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="get_ket&#39;def">
           <goal name="null_add_ket_l&#39;vc.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="get_null_mat">
            <goal name="null_add_ket_l&#39;vc.0.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="0.30" steps="262807"/></proof>
            </goal>
            <goal name="null_add_ket_l&#39;vc.0.0.0.0.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="0.30" steps="262809"/></proof>
            </goal>
            <goal name="null_add_ket_l&#39;vc.0.0.0.0.2.0.0.0.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="0.61" steps="302558"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="null_add_ket_l&#39;vc.0.0.0.0.2.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.61" steps="297274"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="null_add_ket_l&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.60" steps="296503"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="add_ket_l_null&#39;vc" expl="VC for add_ket_l_null" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_ket_l_null&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="add_ket_l&#39;def">
   <goal name="add_ket_l_null&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_equal_ket_">
    <goal name="add_ket_l_null&#39;vc.0.0.0" expl="apply premises" proved="true">
    <transf name="exists" proved="true" arg1="l">
     <goal name="add_ket_l_null&#39;vc.0.0.0.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="add_ket_l_null&#39;vc.0.0.0.0.0" proved="true">
      <proof prover="8"><result status="valid" time="0.69" steps="331919"/></proof>
      </goal>
      <goal name="add_ket_l_null&#39;vc.0.0.0.0.1" proved="true">
      <proof prover="8"><result status="valid" time="0.30" steps="262032"/></proof>
      </goal>
      <goal name="add_ket_l_null&#39;vc.0.0.0.0.2" proved="true">
      <transf name="rewrite" proved="true" arg1="assert_make_ket_l">
       <goal name="add_ket_l_null&#39;vc.0.0.0.0.2.0" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="add_ket_l_null&#39;vc.0.0.0.0.2.0.0" proved="true">
        <transf name="apply" proved="true" arg1="add_zero_t">
         <goal name="add_ket_l_null&#39;vc.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
         <transf name="eliminate_definition" proved="true" >
          <goal name="add_ket_l_null&#39;vc.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="get_ket&#39;def">
           <goal name="add_ket_l_null&#39;vc.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="get_null_mat">
            <goal name="add_ket_l_null&#39;vc.0.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="0.28" steps="262907"/></proof>
            </goal>
            <goal name="add_ket_l_null&#39;vc.0.0.0.0.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="0.32" steps="262909"/></proof>
            </goal>
            <goal name="add_ket_l_null&#39;vc.0.0.0.0.2.0.0.0.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="0.66" steps="302654"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="add_ket_l_null&#39;vc.0.0.0.0.2.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.65" steps="297375"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="add_ket_l_null&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.65" steps="296604"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="add_ket_l_eq&#39;vc" expl="VC for add_ket_l_eq" proved="true">
 <proof prover="8"><result status="valid" time="0.44" steps="351234"/></proof>
 </goal>
 <goal name="add_ket_l_value&#39;vc" expl="VC for add_ket_l_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_ket_l_value&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="add_ket_l_value&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="add_ket_l&#39;spec1">
    <goal name="add_ket_l_value&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="0.35" steps="300143"/></proof>
    </goal>
    <goal name="add_ket_l_value&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.34" steps="300145"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="add_ket_l_length&#39;vc" expl="VC for add_ket_l_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_ket_l_length&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="add_ket_l_length&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="add_ket_l&#39;spec2">
    <goal name="add_ket_l_length&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="0.35" steps="300317"/></proof>
    </goal>
    <goal name="add_ket_l_length&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.35" steps="300319"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="add_ket_l_rows&#39;vc" expl="VC for add_ket_l_rows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_ket_l_rows&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.70" steps="653075"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_ket_l_columns&#39;vc" expl="VC for add_ket_l_columns" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_ket_l_columns&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.63" steps="642404"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_ket_l_values&#39;vc" expl="VC for add_ket_l_values" proved="true">
 <proof prover="8"><result status="valid" time="0.63" steps="302307"/></proof>
 </goal>
 <goal name="add_ket_l_comm&#39;vc" expl="VC for add_ket_l_comm" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_ket_l_comm&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_ket">
   <goal name="add_ket_l_comm&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.67" steps="634208"/></proof>
   </goal>
   <goal name="add_ket_l_comm&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.67" steps="634215"/></proof>
   </goal>
   <goal name="add_ket_l_comm&#39;vc.0.2" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="0.81" steps="298276"/></proof>
   </goal>
   <goal name="add_ket_l_comm&#39;vc.0.3" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="0.64" steps="302701"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_equal_ket_l&#39;vc" expl="VC for set_equal_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_equal_ket_l&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.49" steps="283669"/></proof>
  </goal>
  <goal name="set_equal_ket_l&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.47" steps="283680"/></proof>
  </goal>
  <goal name="set_equal_ket_l&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.48" steps="284309"/></proof>
  </goal>
  <goal name="set_equal_ket_l&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.62" steps="302548"/></proof>
  </goal>
  <goal name="set_equal_ket_l&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.29" steps="266183"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_equal_ket_l_&#39;vc" expl="VC for set_equal_ket_l_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_equal_ket_l_&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.49" steps="283862"/></proof>
  </goal>
  <goal name="set_equal_ket_l_&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.50" steps="283871"/></proof>
  </goal>
  <goal name="set_equal_ket_l_&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.49" steps="284507"/></proof>
  </goal>
  <goal name="set_equal_ket_l_&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.61" steps="302995"/></proof>
  </goal>
  <goal name="set_equal_ket_l_&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.29" steps="266395"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_ket_length&#39;vc" expl="VC for get_ket_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_ket_length&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.42" steps="2588275"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_ket_length&#39;vc" expl="VC for set_ket_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_ket_length&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.65" steps="305082"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="scalar_ket&#39;vc" expl="VC for scalar_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="scalar_ket&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.86" steps="638013"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="scalar_ket_length&#39;vc" expl="VC for scalar_ket_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="scalar_ket_length&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.59" steps="299363"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="scalar_ket_valid_index&#39;vc" expl="VC for scalar_ket_valid_index" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="scalar_ket_valid_index&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.48" steps="285707"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="scalar_ket_l&#39;vc" expl="VC for scalar_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="scalar_ket_l&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.46" steps="282063"/></proof>
  </goal>
  <goal name="scalar_ket_l&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.60" steps="299293"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="scalar_ket_l_values&#39;vc" expl="VC for scalar_ket_l_values" proved="true">
 <proof prover="8"><result status="valid" time="0.46" steps="284770"/></proof>
 </goal>
 <goal name="scalar_ket_l_value&#39;vc" expl="VC for scalar_ket_l_value" proved="true">
 <proof prover="8"><result status="valid" time="0.44" steps="284414"/></proof>
 </goal>
 <goal name="scalar_ket_value&#39;vc" expl="VC for scalar_ket_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="scalar_ket_value&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.48" steps="284888"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="scalar_ket_value_rev&#39;vc" expl="VC for scalar_ket_value_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="scalar_ket_value_rev&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.50" steps="284960"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_ket_is_a_ket&#39;vc" expl="VC for add_ket_is_a_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_ket_is_a_ket&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.63" steps="301181"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_ket_length_gen&#39;vc" expl="VC for set_ket_length_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_ket_length_gen&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.61" steps="306293"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_is_a_ket&#39;vc" expl="VC for set_is_a_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_is_a_ket&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="set_is_a_ket&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.68" steps="650105"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_is_a_ket_l&#39;vc" expl="VC for set_is_a_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_is_a_ket_l&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="set_is_a_ket_l&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.64" steps="306288"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_is_a_ket_p&#39;vc" expl="VC for set_is_a_ket_p" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_is_a_ket_p&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.63" steps="305750"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_is_a_ket&#39;vc" expl="VC for get_is_a_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_is_a_ket&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.62" steps="306186"/></proof>
  </goal>
  <goal name="get_is_a_ket&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.62" steps="305951"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_ket_columns&#39;vc" expl="VC for get_ket_columns" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_ket_columns&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.49" steps="288992"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_ket_rows&#39;vc" expl="VC for get_ket_rows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_ket_rows&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.50" steps="289064"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_ket_rows_gen&#39;vc" expl="VC for get_ket_rows_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_ket_rows_gen&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.48" steps="289160"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_ket_rows_length&#39;vc" expl="VC for get_ket_rows_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_ket_rows_length&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.48" steps="289263"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ket_kronecker&#39;vc" expl="VC for ket_kronecker" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_kronecker&#39;vc.0" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="1.67" steps="655881"/></proof>
  </goal>
  <goal name="ket_kronecker&#39;vc.1" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="kronecker_rows">
   <goal name="ket_kronecker&#39;vc.1.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="power_sum">
    <goal name="ket_kronecker&#39;vc.1.0.0" expl="assertion" proved="true">
    <transf name="apply" proved="true" arg1="mult_eq">
     <goal name="ket_kronecker&#39;vc.1.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="0.49" steps="288462"/></proof>
     </goal>
     <goal name="ket_kronecker&#39;vc.1.0.0.1" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="0.49" steps="288462"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="ket_kronecker&#39;vc.1.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.61" steps="307365"/></proof>
    </goal>
    <goal name="ket_kronecker&#39;vc.1.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.61" steps="307378"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ket_kronecker&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.63" steps="307289"/></proof>
  </goal>
  <goal name="ket_kronecker&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.63" steps="307503"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ket_kronecker_l&#39;vc" expl="VC for ket_kronecker_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_kronecker_l&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.70" steps="650254"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_ket_kron_l&#39;vc" expl="VC for set_ket_kron_l" proved="true">
 <proof prover="8"><result status="valid" time="1.68" steps="649162"/></proof>
 </goal>
</theory>
<theory name="Kronecker_Qbit" proved="true">
 <goal name="ket&#39;vc" expl="VC for ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.46" steps="283910"/></proof>
  </goal>
  <goal name="ket&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.63" steps="306023"/></proof>
  </goal>
  <goal name="ket&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.63" steps="301821"/></proof>
  </goal>
  <goal name="ket&#39;vc.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.81" steps="681237"/></proof>
   </goal>
   <goal name="ket&#39;vc.3.1" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.63" steps="306052"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.73" steps="664907"/></proof>
  </goal>
  <goal name="ket&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.49" steps="288085"/></proof>
  </goal>
  <goal name="ket&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.48" steps="288494"/></proof>
  </goal>
  <goal name="ket&#39;vc.7" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket&#39;vc.7.0" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="ket&#39;vc.7.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="ket&#39;vc.7.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="get_indic">
      <goal name="ket&#39;vc.7.0.0.0.0" expl="postcondition" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="ket&#39;vc.7.0.0.0.0.0" expl="VC for ket" proved="true">
       <proof prover="8"><result status="valid" time="2.76" steps="1394044"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ket&#39;vc.7.1" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.27" steps="271094"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="2.72" steps="737910"/></proof>
  </goal>
  <goal name="ket&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.51" steps="289424"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="scal_ket_zero&#39;vc" expl="VC for scal_ket_zero" proved="true">
 <proof prover="8"><result status="valid" time="0.29" steps="267413"/></proof>
 </goal>
 <goal name="scal_ket_one&#39;vc" expl="VC for scal_ket_one" proved="true">
 <proof prover="8"><result status="valid" time="0.31" steps="267413"/></proof>
 </goal>
 <goal name="ket_l&#39;vc" expl="VC for ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_l&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.40" steps="20672"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ket_ket_length&#39;vc" expl="VC for ket_ket_length" proved="true">
 <proof prover="8"><result status="valid" time="0.63" steps="303041"/></proof>
 </goal>
 <goal name="ket_length_explicit&#39;vc" expl="VC for ket_length_explicit" proved="true">
 <proof prover="8"><result status="valid" time="0.49" steps="284917"/></proof>
 </goal>
 <goal name="ket_eq&#39;vc" expl="VC for ket_eq" proved="true">
 <proof prover="8"><result status="valid" time="0.29" steps="267873"/></proof>
 </goal>
 <goal name="ket_rows&#39;vc" expl="VC for ket_rows" proved="true">
 <proof prover="8"><result status="valid" time="0.64" steps="310054"/></proof>
 </goal>
 <goal name="ket_columns&#39;vc" expl="VC for ket_columns" proved="true">
 <proof prover="8"><result status="valid" time="0.61" steps="309248"/></proof>
 </goal>
 <goal name="ket_value&#39;vc" expl="VC for ket_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_value&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="ket_value&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ket&#39;spec2">
    <goal name="ket_value&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="0.69" steps="345003"/></proof>
    </goal>
    <goal name="ket_value&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.33" steps="306124"/></proof>
    </goal>
    <goal name="ket_value&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.32" steps="306133"/></proof>
    </goal>
    <goal name="ket_value&#39;vc.0.0.3" expl="rewrite premises" proved="true">
    <transf name="apply" proved="true" arg1="set_valid_index">
     <goal name="ket_value&#39;vc.0.0.3.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ket_value&#39;vc.0.0.3.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="0.33" steps="306124"/></proof>
      </goal>
      <goal name="ket_value&#39;vc.0.0.3.0.1" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="0.70" steps="347946"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="ket_value&#39;vc.0.0.3.1" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="0.72" steps="347954"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="g_ket_value&#39;vc" expl="VC for g_ket_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="g_ket_value&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.62" steps="306445"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="norm_ket_basis&#39;vc" expl="VC for norm_ket_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="norm_ket_basis&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ind_sum_ket_norm_l">
   <goal name="norm_ket_basis&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="ind_sum_trans" arg2="(fun (k:int) -&gt; modulus (get (ket n i) k 0) *. modulus (get (ket n i) k 0)),0,i,(power 2 n)">
    <goal name="norm_ket_basis&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="((ind_sum
   (fun (k:int) -&gt; modulus (get (ket n i) k 0) *. modulus (get (ket n i) k 0))
   0 (power 2 n)) = c_one)">
     <goal name="norm_ket_basis&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="rewrite" proved="true" arg1="Hinst">
      <goal name="norm_ket_basis&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="replace" proved="true" arg1="(ind_sum
      (fun (k:int) -&gt;
        modulus (get (ket n i) k 0) *. modulus (get (ket n i) k 0))
      i (power 2 n))" arg2="(c_one +. ind_sum
      (fun (k:int) -&gt;
        modulus (get (ket n i) k 0) *. modulus (get (ket n i) k 0))
      (i+1) (power 2 n))">
       <goal name="norm_ket_basis&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="rewrite" proved="true" arg1="ind_sum_null">
        <goal name="norm_ket_basis&#39;vc.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="rewrite" proved="true" arg1="ind_sum_null">
         <goal name="norm_ket_basis&#39;vc.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="8"><result status="valid" time="0.49" steps="287276"/></proof>
         </goal>
         <goal name="norm_ket_basis&#39;vc.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="norm_ket_basis&#39;vc.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="0.74" steps="309779"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="norm_ket_basis&#39;vc.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="2.31" steps="740529"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="norm_ket_basis&#39;vc.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="rewrite" proved="true" arg1="ind_sum_plus_one">
        <goal name="norm_ket_basis&#39;vc.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="add_eq_t">
         <goal name="norm_ket_basis&#39;vc.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="norm_ket_basis&#39;vc.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="0.63" steps="309296"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="norm_ket_basis&#39;vc.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="norm_ket_basis&#39;vc.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="0.29" steps="268922"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="norm_ket_basis&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.48" steps="286244"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="norm_ket_basis&#39;vc.0.0.0.1" expl="postcondition" proved="true">
     <proof prover="8"><result status="valid" time="2.12" steps="759348"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="norm_ket_basis&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.61" steps="304093"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="get_ket_&#39;vc" expl="VC for get_ket_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_ket_&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.64" steps="304956"/></proof>
  </goal>
  <goal name="get_ket_&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.63" steps="304563"/></proof>
  </goal>
  <goal name="get_ket_&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.52" steps="292078"/></proof>
  </goal>
  <goal name="get_ket_&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.51" steps="291173"/></proof>
  </goal>
  <goal name="get_ket_&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.65" steps="309855"/></proof>
  </goal>
  <goal name="get_ket_&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.65" steps="309913"/></proof>
  </goal>
  <goal name="get_ket_&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.64" steps="309534"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_ket_value&#39;vc" expl="VC for get_ket_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_ket_value&#39;vc.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(i = j)">
   <goal name="get_ket_value&#39;vc.0.0" expl="true case (postcondition)" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="get_ket_value&#39;vc.0.0.0" expl="true case (postcondition)" proved="true">
    <proof prover="8"><result status="valid" time="0.72" steps="349323"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="get_ket_value&#39;vc.0.1" expl="false case (postcondition)" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="get_ket_value&#39;vc.0.1.0" expl="false case (postcondition)" proved="true">
    <transf name="replace" proved="true" arg1="( get (ket n i) j 0 )" arg2="c_zero">
     <goal name="get_ket_value&#39;vc.0.1.0.0" expl="false case (postcondition)" proved="true">
     <proof prover="8"><result status="valid" time="0.71" steps="346770"/></proof>
     </goal>
     <goal name="get_ket_value&#39;vc.0.1.0.1" expl="equality hypothesis" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="get_ket_value&#39;vc.0.1.0.1.0" expl="equality hypothesis" proved="true">
      <transf name="instantiate" proved="true" arg1="get_ket_1" arg2="(ket n i),i,n">
       <goal name="get_ket_value&#39;vc.0.1.0.1.0.0" expl="equality hypothesis" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="get_ket_value&#39;vc.0.1.0.1.0.0.0" expl="destruct premise" proved="true">
        <proof prover="8"><result status="valid" time="0.34" steps="308774"/></proof>
        </goal>
        <goal name="get_ket_value&#39;vc.0.1.0.1.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="8"><result status="valid" time="0.70" steps="349524"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="get_ket_values&#39;vc" expl="VC for get_ket_values" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_ket_values&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.64" steps="309022"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_ket_value_z&#39;vc" expl="VC for get_ket_value_z" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_ket_value_z&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.62" steps="309334"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get__ket_value&#39;vc" expl="VC for get__ket_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get__ket_value&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.63" steps="309579"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_ket&#39;vc" expl="VC for set_ket" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="set_ket&#39;vc.0" expl="VC for set_ket" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="set_ket&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.29" steps="274442"/></proof>
   </goal>
   <goal name="set_ket&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.48" steps="292503"/></proof>
   </goal>
   <goal name="set_ket&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.33" steps="280581"/></proof>
   </goal>
   <goal name="set_ket&#39;vc.0.3" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="j" arg2="0">
    <goal name="set_ket&#39;vc.0.3.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures2">
     <goal name="set_ket&#39;vc.0.3.0.0" expl="precondition" proved="true">
     <proof prover="8"><result status="valid" time="1.91" steps="722838"/></proof>
     </goal>
     <goal name="set_ket&#39;vc.0.3.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.31" steps="274735"/></proof>
     </goal>
     <goal name="set_ket&#39;vc.0.3.0.2" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.66" steps="313485"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="set_ket&#39;vc.0.3.1" expl="equality hypothesis" proved="true">
    <proof prover="8"><result status="valid" time="0.65" steps="313247"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="set_ket&#39;vc.0.4" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.32" steps="274708"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="kronecker_kets&#39;vc" expl="VC for kronecker_kets" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kronecker_kets&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="kronecker_kets&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="kronecker_kets&#39;vc.0.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="kronecker&#39;spec2">
     <goal name="kronecker_kets&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="ket_rows">
      <goal name="kronecker_kets&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="ket_rows">
       <goal name="kronecker_kets&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="ket_rows">
        <goal name="kronecker_kets&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="0.22" steps="4028"/></proof>
        </goal>
        <goal name="kronecker_kets&#39;vc.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="0.67" steps="366107"/></proof>
        </goal>
        <goal name="kronecker_kets&#39;vc.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="kronecker_kets&#39;vc.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="0.13" steps="576"/></proof>
         </goal>
         <goal name="kronecker_kets&#39;vc.0.0.0.0.0.0.2.1" expl="rewrite premises" proved="true">
         <transf name="assert" proved="true" arg1="((i1 * power 2 n2) &lt;= (power 2 n1 -1) * (power 2 n2) )">
          <goal name="kronecker_kets&#39;vc.0.0.0.0.0.0.2.1.0" expl="asserted formula" proved="true">
          <proof prover="7"><result status="valid" time="0.22" steps="3875"/></proof>
          </goal>
          <goal name="kronecker_kets&#39;vc.0.0.0.0.0.0.2.1.1" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="0.24" steps="4257"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="kronecker_kets&#39;vc.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.41" steps="345082"/></proof>
       </goal>
       <goal name="kronecker_kets&#39;vc.0.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.43" steps="345091"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="kronecker_kets&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.40" steps="345082"/></proof>
      </goal>
      <goal name="kronecker_kets&#39;vc.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.42" steps="345091"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="kronecker_kets&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="2.57" steps="947769"/></proof>
   </goal>
   <goal name="kronecker_kets&#39;vc.0.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="kronecker_kets&#39;vc.0.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="kronecker_values">
     <goal name="kronecker_kets&#39;vc.0.2.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(div j (columns (ket n2 i2)))" arg2="0">
      <goal name="kronecker_kets&#39;vc.0.2.0.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(mod j (columns (ket n2 i2)))" arg2="0">
       <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="get_ket_value">
        <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="get_ket_value">
         <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="j" arg2="0">
          <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="get_ket_value">
           <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="case" proved="true" arg1="(i = ((i1 * power 2 n2) + i2))">
            <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
            <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="i,(power 2 n2),i1,i2">
             <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
             <transf name="rewrite" proved="true" arg1="get_indic">
              <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
              <transf name="rewrite" proved="true" arg1="get_indic">
               <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
               <transf name="rewrite" proved="true" arg1="get_indic">
                <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
                <transf name="eliminate_if" proved="true" >
                 <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
                  <proof prover="8"><result status="valid" time="0.63" steps="331717"/></proof>
                  </goal>
                  <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="true case (apply premises)" proved="true">
                  <proof prover="8"><result status="valid" time="0.35" steps="311091"/></proof>
                  </goal>
                  <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="true case (apply premises)" proved="true">
                  <proof prover="4"><result status="valid" time="0.25"/></proof>
                  </goal>
                  <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.3" expl="true case (apply premises)" proved="true">
                  <proof prover="8"><result status="valid" time="0.41" steps="311095"/></proof>
                  </goal>
                  <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.4" expl="true case (apply premises)" proved="true">
                  <proof prover="4"><result status="valid" time="0.40"/></proof>
                  </goal>
                  <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.5" expl="true case (apply premises)" proved="true">
                  <proof prover="8"><result status="valid" time="0.40" steps="311095"/></proof>
                  </goal>
                  <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.6" expl="true case (apply premises)" proved="true">
                  <proof prover="7"><result status="valid" time="1.92" steps="31512"/></proof>
                  </goal>
                  <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.7" expl="true case (apply premises)" proved="true">
                  <proof prover="8"><result status="valid" time="0.39" steps="311099"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.0.0.0.0.1" expl="false case (apply premises)" proved="true">
            <transf name="replace" proved="true" arg1="(rows (ket n2 i2))" arg2="(power 2 n2)">
             <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.0.0.0.0.1.0" expl="false case (apply premises)" proved="true">
             <transf name="instantiate" proved="true" arg1="decomp" arg2="i,(power 2 n2)">
              <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.0.0.0.0.1.0.0" expl="false case (apply premises)" proved="true">
              <proof prover="4"><result status="valid" time="0.30"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
             <proof prover="8"><result status="valid" time="0.76" steps="354367"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="0.58" steps="325391"/></proof>
           </goal>
           <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="7"><result status="valid" time="0.24" steps="4210"/></proof>
           </goal>
           <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
           <proof prover="7"><result status="valid" time="1.70" steps="27956"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="8"><result status="valid" time="2.77" steps="987601"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="0.39" steps="305770"/></proof>
         </goal>
         <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="0.37" steps="305779"/></proof>
         </goal>
         <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.0.3" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="0.83" steps="355582"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="0.36" steps="305770"/></proof>
        </goal>
        <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="0.35" steps="305779"/></proof>
        </goal>
        <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.3" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.3.0" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="2.59" steps="985607"/></proof>
         </goal>
         <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.3.1" expl="rewrite premises" proved="true">
         <transf name="assert" proved="true" arg1="(i &lt; power 2 (n1+n2))">
          <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.3.1.0" expl="asserted formula" proved="true">
          <transf name="replace" proved="true" arg1="(n1+n2)" arg2="(ket_length (kronecker (ket n1 i1) (ket n2 i2)))">
           <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.3.1.0.0" expl="asserted formula" proved="true">
           <proof prover="8"><result status="valid" time="3.84" steps="1038668"/></proof>
           </goal>
           <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.3.1.0.1" expl="equality hypothesis" proved="true">
           <proof prover="8"><result status="valid" time="3.98" steps="1025470"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.3.1.1" expl="rewrite premises" proved="true">
          <transf name="rewrite" proved="true" arg1="power_sum" arg2="in" arg3="h">
           <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.3.1.1.0" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="(rows (ket n2 i2))" arg2="(power 2 n2)">
            <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.3.1.1.0.0" expl="rewrite premises" proved="true">
            <proof prover="7"><result status="valid" time="0.17" steps="4081"/></proof>
            </goal>
            <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.3.1.1.0.1" expl="equality hypothesis" proved="true">
            <proof prover="8"><result status="valid" time="0.80" steps="354308"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.3.1.1.1" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="0.39" steps="305797"/></proof>
           </goal>
           <goal name="kronecker_kets&#39;vc.0.2.0.0.0.0.3.1.1.2" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="0.43" steps="305797"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="kronecker_kets&#39;vc.0.2.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="8"><result status="valid" time="0.93" steps="355619"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="kronecker_kets&#39;vc.0.2.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="7"><result status="valid" time="1.50" steps="26351"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="kronecker_kets&#39;vc.0.2.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.45" steps="305770"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="kronecker_kets_&#39;vc" expl="VC for kronecker_kets_" proved="true">
 <proof prover="8"><result status="valid" time="0.68" steps="321992"/></proof>
 </goal>
 <goal name="kronecker_ket_l&#39;vc" expl="VC for kronecker_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kronecker_ket_l&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.87" steps="346795"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="kronecker_ket_l_sum&#39;vc" expl="VC for kronecker_ket_l_sum" proved="true">
 <proof prover="8"><result status="valid" time="0.86" steps="346897"/></proof>
 </goal>
 <goal name="kronecker_kets_bin_to_int&#39;vc" expl="VC for kronecker_kets_bin_to_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kronecker_kets_bin_to_int&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="bin_to_int&#39;def">
   <goal name="kronecker_kets_bin_to_int&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="bin_to_int&#39;def">
    <goal name="kronecker_kets_bin_to_int&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="kronecker_kets">
     <goal name="kronecker_kets_bin_to_int&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="0.45" steps="329780"/></proof>
     </goal>
     <goal name="kronecker_kets_bin_to_int&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="0.43" steps="329780"/></proof>
     </goal>
     <goal name="kronecker_kets_bin_to_int&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="kronecker_kets_bin_to_int&#39;vc.0.0.0.2.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="0.97" steps="377628"/></proof>
      </goal>
      <goal name="kronecker_kets_bin_to_int&#39;vc.0.0.0.2.1" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(power 2 n1)" arg2="(power 2 (length (make_bv f1 n1)))">
       <goal name="kronecker_kets_bin_to_int&#39;vc.0.0.0.2.1.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="0.98" steps="379074"/></proof>
       </goal>
       <goal name="kronecker_kets_bin_to_int&#39;vc.0.0.0.2.1.1" expl="equality hypothesis" proved="true">
       <transf name="rewrite" proved="true" arg1="make_bv_length">
        <goal name="kronecker_kets_bin_to_int&#39;vc.0.0.0.2.1.1.0" expl="equality hypothesis" proved="true">
        <proof prover="8"><result status="valid" time="0.45" steps="329778"/></proof>
        </goal>
        <goal name="kronecker_kets_bin_to_int&#39;vc.0.0.0.2.1.1.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="0.95" steps="377402"/></proof>
        </goal>
        <goal name="kronecker_kets_bin_to_int&#39;vc.0.0.0.2.1.1.2" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="0.44" steps="329780"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="kronecker_kets_bin_to_int&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="kronecker_kets_bin_to_int&#39;vc.0.0.0.3.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="0.91" steps="377628"/></proof>
      </goal>
      <goal name="kronecker_kets_bin_to_int&#39;vc.0.0.0.3.1" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(power 2 n2)" arg2="(power 2 (length (make_bv f2 n2)))">
       <goal name="kronecker_kets_bin_to_int&#39;vc.0.0.0.3.1.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="0.97" steps="379074"/></proof>
       </goal>
       <goal name="kronecker_kets_bin_to_int&#39;vc.0.0.0.3.1.1" expl="equality hypothesis" proved="true">
       <transf name="rewrite" proved="true" arg1="make_bv_length">
        <goal name="kronecker_kets_bin_to_int&#39;vc.0.0.0.3.1.1.0" expl="equality hypothesis" proved="true">
        <proof prover="8"><result status="valid" time="0.45" steps="329778"/></proof>
        </goal>
        <goal name="kronecker_kets_bin_to_int&#39;vc.0.0.0.3.1.1.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="0.99" steps="377402"/></proof>
        </goal>
        <goal name="kronecker_kets_bin_to_int&#39;vc.0.0.0.3.1.1.2" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="0.43" steps="329780"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="kronecker_kets_bin_to_int&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.46" steps="329780"/></proof>
    </goal>
    <goal name="kronecker_kets_bin_to_int&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.75" steps="351307"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="kronecker_kets_bin_to_int&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.44" steps="329780"/></proof>
   </goal>
   <goal name="kronecker_kets_bin_to_int&#39;vc.0.2" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.81" steps="351307"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Ket_basis" proved="true">
 <goal name="ket_basis&#39;vc" expl="VC for ket_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_basis&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.92" steps="363201"/></proof>
  </goal>
  <goal name="ket_basis&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.43" steps="318547"/></proof>
  </goal>
  <goal name="ket_basis&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.73" steps="575482"/></proof>
  </goal>
  <goal name="ket_basis&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.75" steps="519405"/></proof>
  </goal>
  <goal name="ket_basis&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="2.32" steps="696962"/></proof>
  </goal>
  <goal name="ket_basis&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="2.13" steps="694627"/></proof>
  </goal>
  <goal name="ket_basis&#39;vc.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_basis&#39;vc.6.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.33" steps="547833"/></proof>
   </goal>
   <goal name="ket_basis&#39;vc.6.1" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.32" steps="547809"/></proof>
   </goal>
   <goal name="ket_basis&#39;vc.6.2" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="ket_basis&#39;vc.6.2.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="Ensures10" arg2="mat">
     <goal name="ket_basis&#39;vc.6.2.0.0" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="ket_basis&#39;vc.6.2.0.0.0" expl="destruct premise" proved="true">
      <proof prover="8"><result status="valid" time="0.80" steps="597687"/></proof>
      </goal>
      <goal name="ket_basis&#39;vc.6.2.0.0.1" expl="postcondition" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="ket_basis&#39;vc.6.2.0.0.1.0" expl="postcondition" proved="true">
       <transf name="exists" proved="true" arg1="i">
        <goal name="ket_basis&#39;vc.6.2.0.0.1.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="ket_basis&#39;vc.6.2.0.0.1.0.0.0" proved="true">
         <proof prover="8"><result status="valid" time="1.86" steps="658925"/></proof>
         </goal>
         <goal name="ket_basis&#39;vc.6.2.0.0.1.0.0.1" proved="true">
         <proof prover="8"><result status="valid" time="3.94" steps="1200817"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="unary_ket_basis&#39;vc" expl="VC for unary_ket_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="unary_ket_basis&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="unary_ket_basis&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.55" steps="397627"/></proof>
   </goal>
   <goal name="unary_ket_basis&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.53" steps="397642"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="unary_ket_basis&#39;vc.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="unary_ket_basis&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.53" steps="397643"/></proof>
   </goal>
   <goal name="unary_ket_basis&#39;vc.1.1" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.56" steps="397645"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="unary_ket_basis&#39;vc.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="unary_ket_basis&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.57" steps="397643"/></proof>
   </goal>
   <goal name="unary_ket_basis&#39;vc.2.1" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.57" steps="397643"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="unary_ket_basis&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.59" steps="433861"/></proof>
  </goal>
  <goal name="unary_ket_basis&#39;vc.4" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (o:(int, int)) -&gt; ind_basis_mat (fir o) (sec o) (power 2 n) 1),(cartesian_product (to_fset 0 (power 2 n)) (to_fset 0 1)),e
">
   <goal name="unary_ket_basis&#39;vc.4.0" expl="precondition" proved="true">
   <transf name="destruct" proved="true" arg1="Hinst">
    <goal name="unary_ket_basis&#39;vc.4.0.0" expl="destruct premise" proved="true">
    <transf name="apply" proved="true" arg1="set_map_mem">
     <goal name="unary_ket_basis&#39;vc.4.0.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="unary_ket_basis&#39;vc.4.0.0.0.0" expl="apply premises" proved="true">
      <transf name="instantiate" proved="true" arg1="Ensures" arg2="e">
       <goal name="unary_ket_basis&#39;vc.4.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.99" steps="713328"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="unary_ket_basis&#39;vc.4.0.1" expl="precondition" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="unary_ket_basis&#39;vc.4.0.1.0" expl="precondition" proved="true">
     <transf name="apply" proved="true" arg1="set_map_mem">
      <goal name="unary_ket_basis&#39;vc.4.0.1.0.0" expl="apply premises" proved="true">
      <transf name="exists" proved="true" arg1="(fir a)">
       <goal name="unary_ket_basis&#39;vc.4.0.1.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="unary_ket_basis&#39;vc.4.0.1.0.0.0.0" proved="true">
        <proof prover="8"><result status="valid" time="1.35" steps="594737"/></proof>
        </goal>
        <goal name="unary_ket_basis&#39;vc.4.0.1.0.0.0.1" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="unary_ket_basis&#39;vc.4.0.1.0.0.0.1.0" proved="true">
         <transf name="eliminate_if" proved="true" >
          <goal name="unary_ket_basis&#39;vc.4.0.1.0.0.0.1.0.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="unary_ket_basis&#39;vc.4.0.1.0.0.0.1.0.0.0" proved="true">
           <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
            <goal name="unary_ket_basis&#39;vc.4.0.1.0.0.0.1.0.0.0.0" proved="true">
            <transf name="replace" proved="true" arg1="(sec a)" arg2="0" arg3="in" arg4="Hinst">
             <goal name="unary_ket_basis&#39;vc.4.0.1.0.0.0.1.0.0.0.0.0" proved="true">
             <proof prover="8"><result status="valid" time="0.77" steps="572187"/></proof>
             </goal>
             <goal name="unary_ket_basis&#39;vc.4.0.1.0.0.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
             <proof prover="8"><result status="valid" time="7.04" steps="3117875"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="unary_ket_basis&#39;vc.4.0.1.0.0.0.1.0.0.1" proved="true">
           <transf name="assert" proved="true" arg1="false">
            <goal name="unary_ket_basis&#39;vc.4.0.1.0.0.0.1.0.0.1.0" expl="asserted formula" proved="true">
            <transf name="assert" proved="true" arg1="(not mem (fir a) (to_fset 0 (power 2 n)))">
             <goal name="unary_ket_basis&#39;vc.4.0.1.0.0.0.1.0.0.1.0.0" expl="asserted formula" proved="true">
             <proof prover="8"><result status="valid" time="1.74" steps="632205"/></proof>
             </goal>
             <goal name="unary_ket_basis&#39;vc.4.0.1.0.0.0.1.0.0.1.0.1" expl="asserted formula" proved="true">
             <proof prover="8"><result status="valid" time="1.37" steps="599685"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="unary_ket_basis&#39;vc.4.0.1.0.0.0.1.0.0.1.1" proved="true">
            <proof prover="8"><result status="valid" time="0.82" steps="572263"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="unary_ket_basis&#39;vc.5" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (i:int) -&gt;
     if 0 &lt;= i /\ i &lt; power 2 n then ind_basis_mat i 0 (power 2 n) 1
     else make 1 1 c_one),(to_fset 0 (power 2 n)),e">
   <goal name="unary_ket_basis&#39;vc.5.0" expl="precondition" proved="true">
   <transf name="destruct" proved="true" arg1="Hinst">
    <goal name="unary_ket_basis&#39;vc.5.0.0" expl="destruct premise" proved="true">
    <proof prover="8"><result status="valid" time="1.58" steps="629209"/></proof>
    </goal>
    <goal name="unary_ket_basis&#39;vc.5.0.1" expl="precondition" proved="true">
    <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (i:int) -&gt;
     if 0 &lt;= i /\ i &lt; power 2 n then ind_basis_mat i 0 (power 2 n) 1
     else make 1 1 c_one),((to_fset 0 (power 2 n))),e">
     <goal name="unary_ket_basis&#39;vc.5.0.1.0" expl="precondition" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="unary_ket_basis&#39;vc.5.0.1.0.0" expl="destruct premise" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="unary_ket_basis&#39;vc.5.0.1.0.0.0" expl="destruct premise" proved="true">
       <transf name="apply" proved="true" arg1="H">
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="unary_ket_basis&#39;vc.5.0.1.0.1" expl="precondition" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="unary_ket_basis&#39;vc.5.0.1.0.1.0" expl="precondition" proved="true">
       <transf name="rewrite" proved="true" arg1="ket_basis&#39;spec6">
        <goal name="unary_ket_basis&#39;vc.5.0.1.0.1.0.0" expl="precondition" proved="true">
        <transf name="apply" proved="true" arg1="set_map_mem">
         <goal name="unary_ket_basis&#39;vc.5.0.1.0.1.0.0.0" expl="apply premises" proved="true">
         <transf name="destruct" proved="true" arg1="Hinst">
          <goal name="unary_ket_basis&#39;vc.5.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
          <transf name="exists" proved="true" arg1="(a,0)">
           <goal name="unary_ket_basis&#39;vc.5.0.1.0.1.0.0.0.0.0" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="unary_ket_basis&#39;vc.5.0.1.0.1.0.0.0.0.0.0" proved="true">
            <proof prover="8"><result status="valid" time="4.12" steps="1340305"/></proof>
            </goal>
            <goal name="unary_ket_basis&#39;vc.5.0.1.0.1.0.0.0.0.0.1" proved="true">
            <proof prover="8"><result status="valid" time="2.05" steps="727564"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="unary_ket_basis&#39;vc.5.0.1.0.1.0.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="1.04" steps="665472"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="unary_ket_basis&#39;vc.6" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="map_eq">
   <goal name="unary_ket_basis&#39;vc.6.0" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="unary_ket_basis&#39;vc.6.0.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="1.81" steps="629400"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="unary_ket_basis&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="4.39" steps="1319695"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="to_ket_basis&#39;vc" expl="VC for to_ket_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="to_ket_basis&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.43" steps="319497"/></proof>
  </goal>
  <goal name="to_ket_basis&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.55"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ket_basis_index&#39;vc" expl="VC for ket_basis_index" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_basis_index&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.20" steps="439046"/></proof>
  </goal>
  <goal name="ket_basis_index&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.79" steps="625251"/></proof>
  </goal>
  <goal name="ket_basis_index&#39;vc.2" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="ket_basis_index&#39;vc.2.0" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.41" steps="518229"/></proof>
   </goal>
   <goal name="ket_basis_index&#39;vc.2.1" expl="apply premises" proved="true">
   <transf name="rewrite" proved="true" arg1="assert_make_c">
    <goal name="ket_basis_index&#39;vc.2.1.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="1.40" steps="517500"/></proof>
    </goal>
    <goal name="ket_basis_index&#39;vc.2.1.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.36" steps="517535"/></proof>
    </goal>
    <goal name="ket_basis_index&#39;vc.2.1.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.67" steps="463811"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="ket_basis_index&#39;vc.2.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="ket_basis_index&#39;vc.2.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="assert_make">
     <goal name="ket_basis_index&#39;vc.2.2.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="ket_basis_index&#39;vc.2.2.0.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="4.00" steps="1269177"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="ket_basis_index&#39;vc.2.2.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.39" steps="517939"/></proof>
     </goal>
     <goal name="ket_basis_index&#39;vc.2.2.0.2" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ket_basis_index&#39;vc.2.2.0.2.0" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.40" steps="517905"/></proof>
      </goal>
      <goal name="ket_basis_index&#39;vc.2.2.0.2.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.37" steps="518129"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ket_basis_index&#39;vc.3" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="ket_basis_index&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="assert_make">
    <goal name="ket_basis_index&#39;vc.3.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="ket_basis_index&#39;vc.3.0.0.0" expl="postcondition" proved="true">
     <proof prover="8"><result status="valid" time="1.40" steps="518919"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="ket_basis_index&#39;vc.3.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.42" steps="518216"/></proof>
    </goal>
    <goal name="ket_basis_index&#39;vc.3.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.66" steps="463934"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ket_basis_index&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.90" steps="629268"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_ket_basis&#39;vc" expl="VC for set_ket_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_ket_basis&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.16" steps="439959"/></proof>
  </goal>
  <goal name="set_ket_basis&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.21" steps="439037"/></proof>
  </goal>
  <goal name="set_ket_basis&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.52" steps="387358"/></proof>
  </goal>
  <goal name="set_ket_basis&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.47" steps="518702"/></proof>
  </goal>
  <goal name="set_ket_basis&#39;vc.4" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.45" steps="518717"/></proof>
  </goal>
  <goal name="set_ket_basis&#39;vc.5" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="set_ket_basis&#39;vc.5.0" expl="precondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="set_ket_basis&#39;vc.5.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="indic_2_if">
     <goal name="set_ket_basis&#39;vc.5.0.0.0" expl="precondition" proved="true">
     <transf name="replace" proved="true" arg1="j" arg2="0">
      <goal name="set_ket_basis&#39;vc.5.0.0.0.0" expl="precondition" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="set_ket_basis&#39;vc.5.0.0.0.0.0" expl="VC for set_ket_basis" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="set_ket_basis&#39;vc.5.0.0.0.0.0.0" expl="precondition" proved="true">
        <proof prover="8"><result status="valid" time="1.16" steps="496726"/></proof>
        </goal>
        <goal name="set_ket_basis&#39;vc.5.0.0.0.0.0.1" expl="precondition" proved="true">
        <proof prover="8"><result status="valid" time="0.95" steps="496684"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="set_ket_basis&#39;vc.5.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="8"><result status="valid" time="1.41" steps="517891"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="set_ket_basis&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.40" steps="519027"/></proof>
  </goal>
  <goal name="set_ket_basis&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.42" steps="519869"/></proof>
  </goal>
  <goal name="set_ket_basis&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.68" steps="465235"/></proof>
  </goal>
  <goal name="set_ket_basis&#39;vc.9" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures3" arg2="in" arg3="Ensures5">
   <goal name="set_ket_basis&#39;vc.9.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="Ensures5">
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="from_ket_basis&#39;vc" expl="VC for from_ket_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="from_ket_basis&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.57" steps="385477"/></proof>
  </goal>
  <goal name="from_ket_basis&#39;vc.1" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures" arg2="in" arg3="Requires">
   <goal name="from_ket_basis&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (i:int) -&gt; ind_basis_mat i 0 (power 2 n) 1),(to_fset 0 (power 2 n)),m">
    <goal name="from_ket_basis&#39;vc.1.0.0" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="from_ket_basis&#39;vc.1.0.0.0" expl="destruct premise" proved="true">
     <transf name="apply" proved="true" arg1="Requires">
     </transf>
     </goal>
     <goal name="from_ket_basis&#39;vc.1.0.0.1" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="from_ket_basis&#39;vc.1.0.0.1.0" expl="postcondition" proved="true">
      <transf name="exists" proved="true" arg1="a">
       <goal name="from_ket_basis&#39;vc.1.0.0.1.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="from_ket_basis&#39;vc.1.0.0.1.0.0.0" proved="true">
        <proof prover="8"><result status="valid" time="1.40" steps="494250"/></proof>
        </goal>
        <goal name="from_ket_basis&#39;vc.1.0.0.1.0.0.1" proved="true">
        <proof prover="8"><result status="valid" time="4.13" steps="1263684"/></proof>
        </goal>
        <goal name="from_ket_basis&#39;vc.1.0.0.1.0.0.2" proved="true">
        <proof prover="8"><result status="valid" time="1.16" steps="465425"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="int_to_ket_basis&#39;vc" expl="VC for int_to_ket_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_to_ket_basis&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.70" steps="341183"/></proof>
  </goal>
  <goal name="int_to_ket_basis&#39;vc.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="int_to_ket_basis&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.41" steps="320966"/></proof>
   </goal>
   <goal name="int_to_ket_basis&#39;vc.1.1" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.45" steps="320981"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="int_to_ket_basis&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="int_to_ket_basis&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ket_basis&#39;spec6">
    <goal name="int_to_ket_basis&#39;vc.2.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="set_map_mem">
     <goal name="int_to_ket_basis&#39;vc.2.0.0.0" expl="apply premises" proved="true">
     <transf name="exists" proved="true" arg1="(i,0)">
      <goal name="int_to_ket_basis&#39;vc.2.0.0.0.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="int_to_ket_basis&#39;vc.2.0.0.0.0.0" proved="true">
       <transf name="apply" proved="true" arg1="mem_cartesian_product">
        <goal name="int_to_ket_basis&#39;vc.2.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.66" steps="603859"/></proof>
        </goal>
        <goal name="int_to_ket_basis&#39;vc.2.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.67" steps="603822"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="int_to_ket_basis&#39;vc.2.0.0.0.0.1" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="int_to_ket_basis&#39;vc.2.0.0.0.0.1.0" proved="true">
        <transf name="rewrite" proved="true" arg1="ind_basis_mat&#39;def">
         <goal name="int_to_ket_basis&#39;vc.2.0.0.0.0.1.0.0" proved="true">
         <transf name="apply" proved="true" arg1="set_equal_mat">
          <goal name="int_to_ket_basis&#39;vc.2.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.57" steps="594432"/></proof>
          </goal>
          <goal name="int_to_ket_basis&#39;vc.2.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.58" steps="594525"/></proof>
          </goal>
          <goal name="int_to_ket_basis&#39;vc.2.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="int_to_ket_basis&#39;vc.2.0.0.0.0.1.0.0.2.0" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="j" arg2="0">
            <goal name="int_to_ket_basis&#39;vc.2.0.0.0.0.1.0.0.2.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="get_ket_value">
             <goal name="int_to_ket_basis&#39;vc.2.0.0.0.0.1.0.0.2.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="assert_make">
              <goal name="int_to_ket_basis&#39;vc.2.0.0.0.0.1.0.0.2.0.0.0.0" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="int_to_ket_basis&#39;vc.2.0.0.0.0.1.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="1.32" steps="513886"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="int_to_ket_basis&#39;vc.2.0.0.0.0.1.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="int_to_ket_basis&#39;vc.2.0.0.0.0.1.0.0.2.0.0.0.1.0" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="1.29" steps="505454"/></proof>
               </goal>
               <goal name="int_to_ket_basis&#39;vc.2.0.0.0.0.1.0.0.2.0.0.0.1.1" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="1.30" steps="505815"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="int_to_ket_basis&#39;vc.2.0.0.0.0.1.0.0.2.0.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="0.65" steps="453036"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="int_to_ket_basis&#39;vc.2.0.0.0.0.1.0.0.2.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="1.08" steps="477785"/></proof>
             </goal>
             <goal name="int_to_ket_basis&#39;vc.2.0.0.0.0.1.0.0.2.0.0.2" expl="rewrite premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="int_to_ket_basis&#39;vc.2.0.0.0.0.1.0.0.2.0.0.2.0" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="0.68" steps="453013"/></proof>
              </goal>
              <goal name="int_to_ket_basis&#39;vc.2.0.0.0.0.1.0.0.2.0.0.2.1" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="0.65" steps="453028"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="int_to_ket_basis&#39;vc.2.0.0.0.0.1.0.0.2.0.0.3" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="1.36" steps="505889"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="int_to_ket_basis&#39;vc.2.0.0.0.0.1.0.0.2.0.1" expl="equality hypothesis" proved="true">
            <proof prover="8"><result status="valid" time="1.36" steps="505843"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="int_to_ket_basis&#39;vc.2.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="1.11" steps="479691"/></proof>
         </goal>
         <goal name="int_to_ket_basis&#39;vc.2.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="1.12" steps="479675"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="int_to_ket_basis&#39;vc.2.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.06" steps="473201"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="is_a_ket_basis_elt&#39;vc" expl="VC for is_a_ket_basis_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="is_a_ket_basis_elt&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.47" steps="321056"/></proof>
  </goal>
  <goal name="is_a_ket_basis_elt&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.47" steps="326322"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ket_basis_elt_are_kets&#39;vc" expl="VC for ket_basis_elt_are_kets" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_basis_elt_are_kets&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.76" steps="341757"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_is_a_ket_basis_elt&#39;vc" expl="VC for get_is_a_ket_basis_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_is_a_ket_basis_elt&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="get_is_a_ket_basis_elt&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.78" steps="341799"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="get_is_a_ket_basis_elt&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.94" steps="408584"/></proof>
  </goal>
  <goal name="get_is_a_ket_basis_elt&#39;vc.2" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="from_ket_basis" arg2="(ket_length m),m">
   <goal name="get_is_a_ket_basis_elt&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="Hinst">
    <goal name="get_is_a_ket_basis_elt&#39;vc.2.0.0" expl="destruct premise" proved="true">
    <proof prover="8"><result status="valid" time="1.18" steps="434332"/></proof>
    </goal>
    <goal name="get_is_a_ket_basis_elt&#39;vc.2.0.1" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="get_is_a_ket_basis_elt&#39;vc.2.0.1.0" expl="destruct premise" proved="true">
     <proof prover="8"><result status="valid" time="0.53" steps="385905"/></proof>
     </goal>
     <goal name="get_is_a_ket_basis_elt&#39;vc.2.0.1.1" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="get_is_a_ket_basis_elt&#39;vc.2.0.1.1.0" expl="postcondition" proved="true">
      <transf name="exists" proved="true" arg1="i">
       <goal name="get_is_a_ket_basis_elt&#39;vc.2.0.1.1.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="get_is_a_ket_basis_elt&#39;vc.2.0.1.1.0.0.0" proved="true">
        <proof prover="8"><result status="valid" time="0.53" steps="385965"/></proof>
        </goal>
        <goal name="get_is_a_ket_basis_elt&#39;vc.2.0.1.1.0.0.1" proved="true">
        <proof prover="8"><result status="valid" time="0.57" steps="385980"/></proof>
        </goal>
        <goal name="get_is_a_ket_basis_elt&#39;vc.2.0.1.1.0.0.2" proved="true">
        <transf name="apply" proved="true" arg1="set_equal_mat">
         <goal name="get_is_a_ket_basis_elt&#39;vc.2.0.1.1.0.0.2.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.19" steps="442647"/></proof>
         </goal>
         <goal name="get_is_a_ket_basis_elt&#39;vc.2.0.1.1.0.0.2.1" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.19" steps="442872"/></proof>
         </goal>
         <goal name="get_is_a_ket_basis_elt&#39;vc.2.0.1.1.0.0.2.2" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="get_is_a_ket_basis_elt&#39;vc.2.0.1.1.0.0.2.2.0" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="j" arg2="0">
           <goal name="get_is_a_ket_basis_elt&#39;vc.2.0.1.1.0.0.2.2.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="get_ket_value">
            <goal name="get_is_a_ket_basis_elt&#39;vc.2.0.1.1.0.0.2.2.0.0.0" expl="apply premises" proved="true">
            <transf name="destruct" proved="true" arg1="Hinst">
             <goal name="get_is_a_ket_basis_elt&#39;vc.2.0.1.1.0.0.2.2.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="Hinst">
              <goal name="get_is_a_ket_basis_elt&#39;vc.2.0.1.1.0.0.2.2.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="ind_basis_mat&#39;def">
               <goal name="get_is_a_ket_basis_elt&#39;vc.2.0.1.1.0.0.2.2.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="assert_make">
                <goal name="get_is_a_ket_basis_elt&#39;vc.2.0.1.1.0.0.2.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="get_is_a_ket_basis_elt&#39;vc.2.0.1.1.0.0.2.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.01" steps="441575"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="get_is_a_ket_basis_elt&#39;vc.2.0.1.1.0.0.2.2.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="get_is_a_ket_basis_elt&#39;vc.2.0.1.1.0.0.2.2.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.18" steps="439815"/></proof>
                 </goal>
                 <goal name="get_is_a_ket_basis_elt&#39;vc.2.0.1.1.0.0.2.2.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.22" steps="439980"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="get_is_a_ket_basis_elt&#39;vc.2.0.1.1.0.0.2.2.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="0.56" steps="389471"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="get_is_a_ket_basis_elt&#39;vc.2.0.1.1.0.0.2.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="0.56" steps="389448"/></proof>
               </goal>
               <goal name="get_is_a_ket_basis_elt&#39;vc.2.0.1.1.0.0.2.2.0.0.0.0.0.2" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="0.55" steps="389471"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="get_is_a_ket_basis_elt&#39;vc.2.0.1.1.0.0.2.2.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="1.15" steps="439814"/></proof>
            </goal>
            <goal name="get_is_a_ket_basis_elt&#39;vc.2.0.1.1.0.0.2.2.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="0.54" steps="389455"/></proof>
            </goal>
            <goal name="get_is_a_ket_basis_elt&#39;vc.2.0.1.1.0.0.2.2.0.0.3" expl="rewrite premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="get_is_a_ket_basis_elt&#39;vc.2.0.1.1.0.0.2.2.0.0.3.0" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="1.20" steps="439816"/></proof>
             </goal>
             <goal name="get_is_a_ket_basis_elt&#39;vc.2.0.1.1.0.0.2.2.0.0.3.1" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="1.20" steps="439986"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="get_is_a_ket_basis_elt&#39;vc.2.0.1.1.0.0.2.2.0.1" expl="equality hypothesis" proved="true">
           <proof prover="8"><result status="valid" time="0.98" steps="440010"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="get_is_a_ket_basis_elt&#39;vc.3" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="Ensures">
   <goal name="get_is_a_ket_basis_elt&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="exists" proved="true" arg1="i">
    <goal name="get_is_a_ket_basis_elt&#39;vc.3.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="get_is_a_ket_basis_elt&#39;vc.3.0.0.0" proved="true">
     <proof prover="8"><result status="valid" time="0.54" steps="385955"/></proof>
     </goal>
     <goal name="get_is_a_ket_basis_elt&#39;vc.3.0.0.1" proved="true">
     <proof prover="8"><result status="valid" time="0.59" steps="385970"/></proof>
     </goal>
     <goal name="get_is_a_ket_basis_elt&#39;vc.3.0.0.2" proved="true">
     <proof prover="8"><result status="valid" time="0.98" steps="438014"/></proof>
     </goal>
     <goal name="get_is_a_ket_basis_elt&#39;vc.3.0.0.3" proved="true">
     <proof prover="8"><result status="valid" time="0.97" steps="438194"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="get_is_a_ket_basis_elt&#39;vc.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="get_is_a_ket_basis_elt&#39;vc.4.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.21" steps="440035"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="get_is_a_ket_basis_elt_indic&#39;vc" expl="VC for get_is_a_ket_basis_elt_indic" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_is_a_ket_basis_elt_indic&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.46" steps="321994"/></proof>
  </goal>
  <goal name="get_is_a_ket_basis_elt_indic&#39;vc.1" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="Ensures1">
   <goal name="get_is_a_ket_basis_elt_indic&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="exists" proved="true" arg1="i">
    <goal name="get_is_a_ket_basis_elt_indic&#39;vc.1.0.0" proved="true">
    <proof prover="8"><result status="valid" time="3.61" steps="1133989"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_is_a_ket_basis_elt&#39;vc" expl="VC for set_is_a_ket_basis_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_is_a_ket_basis_elt&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="set_is_a_ket_basis_elt&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="set_is_a_ket_basis_elt&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="is_a_ket_basis_elt&#39;def">
     <goal name="set_is_a_ket_basis_elt&#39;vc.0.0.0.0" expl="VC for set_is_a_ket_basis_elt" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="set_is_a_ket_basis_elt&#39;vc.0.0.0.0.0" expl="VC for set_is_a_ket_basis_elt" proved="true">
      <proof prover="8"><result status="valid" time="0.45" steps="322762"/></proof>
      </goal>
      <goal name="set_is_a_ket_basis_elt&#39;vc.0.0.0.0.1" expl="VC for set_is_a_ket_basis_elt" proved="true">
      <transf name="rewrite" proved="true" arg1="ket_basis&#39;def">
       <goal name="set_is_a_ket_basis_elt&#39;vc.0.0.0.0.1.0" expl="VC for set_is_a_ket_basis_elt" proved="true">
       <transf name="rewrite" proved="true" arg1="basis_mat&#39;def">
        <goal name="set_is_a_ket_basis_elt&#39;vc.0.0.0.0.1.0.0" expl="VC for set_is_a_ket_basis_elt" proved="true">
        <transf name="apply" proved="true" arg1="set_map_mem">
         <goal name="set_is_a_ket_basis_elt&#39;vc.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
         <transf name="exists" proved="true" arg1="(i,0)">
          <goal name="set_is_a_ket_basis_elt&#39;vc.0.0.0.0.1.0.0.0.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="set_is_a_ket_basis_elt&#39;vc.0.0.0.0.1.0.0.0.0.0" proved="true">
           <transf name="apply" proved="true" arg1="mem_cartesian_product">
            <goal name="set_is_a_ket_basis_elt&#39;vc.0.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="1.13" steps="434219"/></proof>
            </goal>
            <goal name="set_is_a_ket_basis_elt&#39;vc.0.0.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="1.17" steps="434205"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="set_is_a_ket_basis_elt&#39;vc.0.0.0.0.1.0.0.0.0.1" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="set_is_a_ket_basis_elt&#39;vc.0.0.0.0.1.0.0.0.0.1.0" proved="true">
            <transf name="eliminate_if" proved="true" >
             <goal name="set_is_a_ket_basis_elt&#39;vc.0.0.0.0.1.0.0.0.0.1.0.0" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="set_is_a_ket_basis_elt&#39;vc.0.0.0.0.1.0.0.0.0.1.0.0.0" proved="true">
              <transf name="apply" proved="true" arg1="set_equal_mat">
               <goal name="set_is_a_ket_basis_elt&#39;vc.0.0.0.0.1.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="3.89" steps="1642387"/></proof>
               </goal>
               <goal name="set_is_a_ket_basis_elt&#39;vc.0.0.0.0.1.0.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="3.98" steps="1641980"/></proof>
               </goal>
               <goal name="set_is_a_ket_basis_elt&#39;vc.0.0.0.0.1.0.0.0.0.1.0.0.0.2" expl="apply premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="set_is_a_ket_basis_elt&#39;vc.0.0.0.0.1.0.0.0.0.1.0.0.0.2.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="ind_basis_mat_values">
                 <goal name="set_is_a_ket_basis_elt&#39;vc.0.0.0.0.1.0.0.0.0.1.0.0.0.2.0.0" expl="apply premises" proved="true">
                 <transf name="replace" proved="true" arg1="j" arg2="0">
                  <goal name="set_is_a_ket_basis_elt&#39;vc.0.0.0.0.1.0.0.0.0.1.0.0.0.2.0.0.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.04" steps="376925"/></proof>
                  </goal>
                  <goal name="set_is_a_ket_basis_elt&#39;vc.0.0.0.0.1.0.0.0.0.1.0.0.0.2.0.0.1" expl="equality hypothesis" proved="true">
                  <proof prover="8"><result status="valid" time="0.97" steps="373953"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="set_is_a_ket_basis_elt&#39;vc.0.0.0.0.1.0.0.0.0.1.0.0.0.2.0.1" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="0.45" steps="329777"/></proof>
                 </goal>
                 <goal name="set_is_a_ket_basis_elt&#39;vc.0.0.0.0.1.0.0.0.0.1.0.0.0.2.0.2" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="0.43" steps="329791"/></proof>
                 </goal>
                 <goal name="set_is_a_ket_basis_elt&#39;vc.0.0.0.0.1.0.0.0.0.1.0.0.0.2.0.3" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="0.89" steps="373994"/></proof>
                 </goal>
                 <goal name="set_is_a_ket_basis_elt&#39;vc.0.0.0.0.1.0.0.0.0.1.0.0.0.2.0.4" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="0.86" steps="373969"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="set_is_a_ket_basis_elt&#39;vc.0.0.0.0.1.0.0.0.0.1.0.0.1" proved="true">
              <proof prover="8"><result status="valid" time="0.37" steps="326833"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="set_is_a_ket_basis_elt&#39;vc.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="0.63" steps="343142"/></proof>
        </goal>
        <goal name="set_is_a_ket_basis_elt&#39;vc.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="0.39" steps="322771"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="set_is_a_ket_basis_elt&#39;vc.0.0.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.84" steps="366356"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_is_a_ket_basis_elt_exists&#39;vc" expl="VC for set_is_a_ket_basis_elt_exists" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_is_a_ket_basis_elt_exists&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_is_a_ket_basis_elt">
   <goal name="set_is_a_ket_basis_elt_exists&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="0.50" steps="397838"/></proof>
   </goal>
   <goal name="set_is_a_ket_basis_elt_exists&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="destruct" proved="true" arg1="Requires">
    <goal name="set_is_a_ket_basis_elt_exists&#39;vc.0.1.0" expl="apply premises" proved="true">
    <transf name="exists" proved="true" arg1="j">
     <goal name="set_is_a_ket_basis_elt_exists&#39;vc.0.1.0.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="set_is_a_ket_basis_elt_exists&#39;vc.0.1.0.0.0" proved="true">
      <proof prover="8"><result status="valid" time="0.50" steps="397759"/></proof>
      </goal>
      <goal name="set_is_a_ket_basis_elt_exists&#39;vc.0.1.0.0.1" proved="true">
      <proof prover="8"><result status="valid" time="0.49" steps="397774"/></proof>
      </goal>
      <goal name="set_is_a_ket_basis_elt_exists&#39;vc.0.1.0.0.2" proved="true">
      <transf name="apply" proved="true" arg1="set_equal_mat">
       <goal name="set_is_a_ket_basis_elt_exists&#39;vc.0.1.0.0.2.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.08" steps="450783"/></proof>
       </goal>
       <goal name="set_is_a_ket_basis_elt_exists&#39;vc.0.1.0.0.2.1" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.10" steps="450969"/></proof>
       </goal>
       <goal name="set_is_a_ket_basis_elt_exists&#39;vc.0.1.0.0.2.2" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="set_is_a_ket_basis_elt_exists&#39;vc.0.1.0.0.2.2.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="j" arg2="0">
         <goal name="set_is_a_ket_basis_elt_exists&#39;vc.0.1.0.0.2.2.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="get_ket_value">
          <goal name="set_is_a_ket_basis_elt_exists&#39;vc.0.1.0.0.2.2.0.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.16" steps="452903"/></proof>
          </goal>
          <goal name="set_is_a_ket_basis_elt_exists&#39;vc.0.1.0.0.2.2.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="1.07" steps="450174"/></proof>
          </goal>
          <goal name="set_is_a_ket_basis_elt_exists&#39;vc.0.1.0.0.2.2.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="0.48" steps="401273"/></proof>
          </goal>
          <goal name="set_is_a_ket_basis_elt_exists&#39;vc.0.1.0.0.2.2.0.0.3" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="set_is_a_ket_basis_elt_exists&#39;vc.0.1.0.0.2.2.0.0.3.0" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="1.07" steps="450176"/></proof>
           </goal>
           <goal name="set_is_a_ket_basis_elt_exists&#39;vc.0.1.0.0.2.2.0.0.3.1" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="1.07" steps="450328"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="set_is_a_ket_basis_elt_exists&#39;vc.0.1.0.0.2.2.0.1" expl="equality hypothesis" proved="true">
         <proof prover="8"><result status="valid" time="1.04" steps="450357"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_func_sets_ket_basis_elts&#39;vc" expl="VC for ket_func_sets_ket_basis_elts" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_func_sets_ket_basis_elts&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.40" steps="322826"/></proof>
  </goal>
  <goal name="ket_func_sets_ket_basis_elts&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.37" steps="326275"/></proof>
  </goal>
  <goal name="ket_func_sets_ket_basis_elts&#39;vc.2" expl="precondition" proved="true">
  <transf name="exists" proved="true" arg1="i">
   <goal name="ket_func_sets_ket_basis_elts&#39;vc.2.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="ket_func_sets_ket_basis_elts&#39;vc.2.0.0" proved="true">
    <proof prover="8"><result status="valid" time="0.39" steps="326278"/></proof>
    </goal>
    <goal name="ket_func_sets_ket_basis_elts&#39;vc.2.0.1" proved="true">
    <proof prover="8"><result status="valid" time="0.64" steps="347356"/></proof>
    </goal>
    <goal name="ket_func_sets_ket_basis_elts&#39;vc.2.0.2" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_mat">
     <goal name="ket_func_sets_ket_basis_elts&#39;vc.2.0.2.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.09" steps="451478"/></proof>
     </goal>
     <goal name="ket_func_sets_ket_basis_elts&#39;vc.2.0.2.1" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.06" steps="451031"/></proof>
     </goal>
     <goal name="ket_func_sets_ket_basis_elts&#39;vc.2.0.2.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ket_func_sets_ket_basis_elts&#39;vc.2.0.2.2.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="j" arg2="0">
       <goal name="ket_func_sets_ket_basis_elts&#39;vc.2.0.2.2.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="get_ket_value">
        <goal name="ket_func_sets_ket_basis_elts&#39;vc.2.0.2.2.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="assert_make">
         <goal name="ket_func_sets_ket_basis_elts&#39;vc.2.0.2.2.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="0.81" steps="424479"/></proof>
         </goal>
         <goal name="ket_func_sets_ket_basis_elts&#39;vc.2.0.2.2.0.0.0.1" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="ket_func_sets_ket_basis_elts&#39;vc.2.0.2.2.0.0.0.1.0" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="0.88" steps="374087"/></proof>
          </goal>
          <goal name="ket_func_sets_ket_basis_elts&#39;vc.2.0.2.2.0.0.0.1.1" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="0.85" steps="374268"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="ket_func_sets_ket_basis_elts&#39;vc.2.0.2.2.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="0.40" steps="326340"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="ket_func_sets_ket_basis_elts&#39;vc.2.0.2.2.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="0.38" steps="326317"/></proof>
        </goal>
        <goal name="ket_func_sets_ket_basis_elts&#39;vc.2.0.2.2.0.0.2" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="ket_func_sets_ket_basis_elts&#39;vc.2.0.2.2.0.0.2.0" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="0.38" steps="326317"/></proof>
         </goal>
         <goal name="ket_func_sets_ket_basis_elts&#39;vc.2.0.2.2.0.0.2.1" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="0.37" steps="326332"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="ket_func_sets_ket_basis_elts&#39;vc.2.0.2.2.0.0.3" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="0.87" steps="374316"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="ket_func_sets_ket_basis_elts&#39;vc.2.0.2.2.0.1" expl="equality hypothesis" proved="true">
       <proof prover="8"><result status="valid" time="0.87" steps="374294"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ket_func_sets_ket_basis_elts&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.42" steps="326283"/></proof>
  </goal>
  <goal name="ket_func_sets_ket_basis_elts&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.41" steps="326286"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="kronecker_is_a_ket_basis_elt&#39;vc" expl="VC for kronecker_is_a_ket_basis_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kronecker_is_a_ket_basis_elt&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.39" steps="322950"/></proof>
  </goal>
  <goal name="kronecker_is_a_ket_basis_elt&#39;vc.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="kronecker_is_a_ket_basis_elt&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.48" steps="389831"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="kronecker_is_a_ket_basis_elt&#39;vc.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="kronecker_is_a_ket_basis_elt&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="1.07" steps="447820"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="kronecker_is_a_ket_basis_elt&#39;vc.3" expl="precondition" proved="true">
  <transf name="destruct" proved="true" arg1="Ensures5">
   <goal name="kronecker_is_a_ket_basis_elt&#39;vc.3.0" expl="precondition" proved="true">
   <transf name="destruct" proved="true" arg1="Ensures10">
    <goal name="kronecker_is_a_ket_basis_elt&#39;vc.3.0.0" expl="precondition" proved="true">
    <transf name="exists" proved="true" arg1="(i1 * power 2 (ket_length y) + i)">
     <goal name="kronecker_is_a_ket_basis_elt&#39;vc.3.0.0.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="kronecker_is_a_ket_basis_elt&#39;vc.3.0.0.0.0" proved="true">
      <proof prover="7"><result status="valid" time="0.12" steps="760"/></proof>
      </goal>
      <goal name="kronecker_is_a_ket_basis_elt&#39;vc.3.0.0.0.1" proved="true">
      <transf name="replace" proved="true" arg1="(ket_length (kronecker x y))" arg2="(ket_length x+ ket_length y)">
       <goal name="kronecker_is_a_ket_basis_elt&#39;vc.3.0.0.0.1.0" proved="true">
       <proof prover="7"><result status="valid" time="0.25" steps="8772"/></proof>
       </goal>
       <goal name="kronecker_is_a_ket_basis_elt&#39;vc.3.0.0.0.1.1" expl="equality hypothesis" proved="true">
       <proof prover="8"><result status="valid" time="1.06" steps="448229"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="kronecker_is_a_ket_basis_elt&#39;vc.3.0.0.0.2" proved="true">
      <transf name="replace" proved="true" arg1="(kronecker x y)" arg2="(kronecker (ket (ket_length x) i2) (ket (ket_length y) i1))">
       <goal name="kronecker_is_a_ket_basis_elt&#39;vc.3.0.0.0.2.0" proved="true">
       <transf name="rewrite" proved="true" arg1="kronecker_kets">
        <goal name="kronecker_is_a_ket_basis_elt&#39;vc.3.0.0.0.2.0.0" proved="true">
        <transf name="apply" proved="true" arg1="ket_eq">
         <goal name="kronecker_is_a_ket_basis_elt&#39;vc.3.0.0.0.2.0.0.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.09" steps="449114"/></proof>
         </goal>
         <goal name="kronecker_is_a_ket_basis_elt&#39;vc.3.0.0.0.2.0.0.1" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.09" steps="450221"/></proof>
         </goal>
         <goal name="kronecker_is_a_ket_basis_elt&#39;vc.3.0.0.0.2.0.0.2" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="0.50" steps="391271"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="kronecker_is_a_ket_basis_elt&#39;vc.3.0.0.0.2.0.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="1.09" steps="448904"/></proof>
        </goal>
        <goal name="kronecker_is_a_ket_basis_elt&#39;vc.3.0.0.0.2.0.2" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="1.05" steps="448904"/></proof>
        </goal>
        <goal name="kronecker_is_a_ket_basis_elt&#39;vc.3.0.0.0.2.0.3" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="kronecker_is_a_ket_basis_elt&#39;vc.3.0.0.0.2.0.3.0" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="0.50" steps="391273"/></proof>
         </goal>
         <goal name="kronecker_is_a_ket_basis_elt&#39;vc.3.0.0.0.2.0.3.1" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="0.49" steps="391284"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="kronecker_is_a_ket_basis_elt&#39;vc.3.0.0.0.2.0.4" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="kronecker_is_a_ket_basis_elt&#39;vc.3.0.0.0.2.0.4.0" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="0.52" steps="391273"/></proof>
         </goal>
         <goal name="kronecker_is_a_ket_basis_elt&#39;vc.3.0.0.0.2.0.4.1" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="0.52" steps="391284"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="kronecker_is_a_ket_basis_elt&#39;vc.3.0.0.0.2.1" expl="equality hypothesis" proved="true">
       <proof prover="8"><result status="valid" time="0.84" steps="414428"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="kronecker_is_a_ket_basis_elt&#39;vc.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="kronecker_is_a_ket_basis_elt&#39;vc.4.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.50" steps="391150"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_is_a_ket_basis_elt&#39;vc" expl="VC for ket_is_a_ket_basis_elt" proved="true">
 <proof prover="8"><result status="valid" time="0.83" steps="368531"/></proof>
 </goal>
 <goal name="ket_basis_non_null_val&#39;vc" expl="VC for ket_basis_non_null_val" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_basis_non_null_val&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="ket_basis_non_null_val&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="ket_basis_non_null_val&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ket&#39;def2">
     <goal name="ket_basis_non_null_val&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="set_equal_mat">
      <goal name="ket_basis_non_null_val&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="2.47" steps="832939"/></proof>
      </goal>
      <goal name="ket_basis_non_null_val&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="2.47" steps="830715"/></proof>
      </goal>
      <goal name="ket_basis_non_null_val&#39;vc.0.0.0.0.2" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="ket_basis_non_null_val&#39;vc.0.0.0.0.2.0" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="j" arg2="0">
        <goal name="ket_basis_non_null_val&#39;vc.0.0.0.0.2.0.0" expl="apply premises" proved="true">
        <transf name="case" proved="true" arg1="(i = i1)">
         <goal name="ket_basis_non_null_val&#39;vc.0.0.0.0.2.0.0.0" expl="true case (apply premises)" proved="true">
         <proof prover="8"><result status="valid" time="2.70" steps="832175"/></proof>
         </goal>
         <goal name="ket_basis_non_null_val&#39;vc.0.0.0.0.2.0.0.1" expl="false case (apply premises)" proved="true">
         <proof prover="8"><result status="valid" time="2.48" steps="841233"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="ket_basis_non_null_val&#39;vc.0.0.0.0.2.0.1" expl="equality hypothesis" proved="true">
        <proof prover="8"><result status="valid" time="1.37" steps="476881"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ket_basis_non_null_val&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.45" steps="385376"/></proof>
     </goal>
     <goal name="ket_basis_non_null_val&#39;vc.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.45" steps="385385"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_to_int&#39;vc" expl="VC for ket_to_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_to_int&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.38" steps="323415"/></proof>
  </goal>
  <goal name="ket_to_int&#39;vc.1" expl="loop invariant init" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_to_int&#39;vc.1.0" expl="loop invariant init" proved="true">
   <proof prover="8"><result status="valid" time="0.49" steps="390292"/></proof>
   </goal>
   <goal name="ket_to_int&#39;vc.1.1" expl="loop invariant init" proved="true">
   <proof prover="8"><result status="valid" time="0.85" steps="416629"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_to_int&#39;vc.2" expl="loop invariant init" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_to_int&#39;vc.2.0" expl="loop invariant init" proved="true">
   <proof prover="8"><result status="valid" time="1.05" steps="444113"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_to_int&#39;vc.3" expl="loop invariant init" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_to_int&#39;vc.3.0" expl="loop invariant init" proved="true">
   <proof prover="8"><result status="valid" time="0.50" steps="392749"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_to_int&#39;vc.4" expl="loop invariant init" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_to_int&#39;vc.4.0" expl="loop invariant init" proved="true">
   <proof prover="8"><result status="valid" time="0.46" steps="392802"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_to_int&#39;vc.5" expl="loop invariant init" proved="true">
  <transf name="split_vc" proved="true" >
  </transf>
  </goal>
  <goal name="ket_to_int&#39;vc.6" expl="loop variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_to_int&#39;vc.6.0" expl="loop variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="0.93" steps="492070"/></proof>
   </goal>
   <goal name="ket_to_int&#39;vc.6.1" expl="loop variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="0.63" steps="473791"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_to_int&#39;vc.7" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_to_int&#39;vc.7.0" expl="loop invariant preservation" proved="true">
   <proof prover="8"><result status="valid" time="0.98" steps="491868"/></proof>
   </goal>
   <goal name="ket_to_int&#39;vc.7.1" expl="loop invariant preservation" proved="true">
   <proof prover="8"><result status="valid" time="1.24" steps="523008"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_to_int&#39;vc.8" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_to_int&#39;vc.8.0" expl="loop invariant preservation" proved="true">
   <proof prover="8"><result status="valid" time="1.17" steps="523215"/></proof>
   </goal>
   <goal name="ket_to_int&#39;vc.8.1" expl="loop invariant preservation" proved="true">
   <proof prover="8"><result status="valid" time="0.60" steps="466692"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_to_int&#39;vc.9" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_to_int&#39;vc.9.0" expl="loop invariant preservation" proved="true">
   <proof prover="8"><result status="valid" time="3.39" steps="1220955"/></proof>
   </goal>
   <goal name="ket_to_int&#39;vc.9.1" expl="loop invariant preservation" proved="true">
   <proof prover="8"><result status="valid" time="0.61" steps="466760"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_to_int&#39;vc.10" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_to_int&#39;vc.10.0" expl="loop invariant preservation" proved="true">
   <proof prover="8"><result status="valid" time="0.62" steps="473996"/></proof>
   </goal>
   <goal name="ket_to_int&#39;vc.10.1" expl="loop invariant preservation" proved="true">
   <proof prover="8"><result status="valid" time="0.62" steps="466827"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_to_int&#39;vc.11" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_to_int&#39;vc.11.0" expl="loop invariant preservation" proved="true">
   <proof prover="8"><result status="valid" time="0.57" steps="466832"/></proof>
   </goal>
   <goal name="ket_to_int&#39;vc.11.1" expl="loop invariant preservation" proved="true">
   <proof prover="8"><result status="valid" time="0.61" steps="466838"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_to_int&#39;vc.12" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_to_int&#39;vc.12.0" expl="assertion" proved="true">
   <proof prover="8"><result status="valid" time="1.20" steps="522280"/></proof>
   </goal>
   <goal name="ket_to_int&#39;vc.12.1" expl="assertion" proved="true">
   <proof prover="8"><result status="valid" time="0.62" steps="466532"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_to_int&#39;vc.13" expl="loop variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_to_int&#39;vc.13.0" expl="loop variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="0.91" steps="491978"/></proof>
   </goal>
   <goal name="ket_to_int&#39;vc.13.1" expl="loop variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="0.96" steps="491837"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_to_int&#39;vc.14" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_to_int&#39;vc.14.0" expl="loop invariant preservation" proved="true">
   <proof prover="8"><result status="valid" time="0.55" steps="466553"/></proof>
   </goal>
   <goal name="ket_to_int&#39;vc.14.1" expl="loop invariant preservation" proved="true">
   <proof prover="8"><result status="valid" time="0.57" steps="466568"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_to_int&#39;vc.15" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_to_int&#39;vc.15.0" expl="loop invariant preservation" proved="true">
   <proof prover="8"><result status="valid" time="0.63" steps="473850"/></proof>
   </goal>
   <goal name="ket_to_int&#39;vc.15.1" expl="loop invariant preservation" proved="true">
   <proof prover="8"><result status="valid" time="0.61" steps="466681"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_to_int&#39;vc.16" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_to_int&#39;vc.16.0" expl="loop invariant preservation" proved="true">
   <proof prover="8"><result status="valid" time="0.70" steps="473917"/></proof>
   </goal>
   <goal name="ket_to_int&#39;vc.16.1" expl="loop invariant preservation" proved="true">
   <proof prover="8"><result status="valid" time="0.64" steps="466748"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_to_int&#39;vc.17" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_to_int&#39;vc.17.0" expl="loop invariant preservation" proved="true">
   <proof prover="8"><result status="valid" time="0.64" steps="466792"/></proof>
   </goal>
   <goal name="ket_to_int&#39;vc.17.1" expl="loop invariant preservation" proved="true">
   <proof prover="8"><result status="valid" time="0.61" steps="466798"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_to_int&#39;vc.18" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_to_int&#39;vc.18.0" expl="loop invariant preservation" proved="true">
   <proof prover="8"><result status="valid" time="0.65" steps="466808"/></proof>
   </goal>
   <goal name="ket_to_int&#39;vc.18.1" expl="loop invariant preservation" proved="true">
   <proof prover="8"><result status="valid" time="0.58" steps="466814"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_to_int&#39;vc.19" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_to_int&#39;vc.19.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.50" steps="392946"/></proof>
   </goal>
   <goal name="ket_to_int&#39;vc.19.1" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.80" steps="417131"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_to_int&#39;vc.20" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_to_int&#39;vc.20.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.48" steps="392936"/></proof>
   </goal>
   <goal name="ket_to_int&#39;vc.20.1" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.47" steps="392938"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_to_int&#39;vc.21" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_to_int&#39;vc.21.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.99" steps="445403"/></proof>
   </goal>
   <goal name="ket_to_int&#39;vc.21.1" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.48" steps="392955"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_to_int&#39;vc.22" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_to_int&#39;vc.22.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.98" steps="445480"/></proof>
   </goal>
   <goal name="ket_to_int&#39;vc.22.1" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.46" steps="393009"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_to_int_ket&#39;vc" expl="VC for ket_to_int_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_to_int_ket&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.40" steps="323778"/></proof>
  </goal>
  <goal name="ket_to_int_ket&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.39" steps="327203"/></proof>
  </goal>
  <goal name="ket_to_int_ket&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.37" steps="327206"/></proof>
  </goal>
  <goal name="ket_to_int_ket&#39;vc.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_to_int_ket&#39;vc.3.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.35" steps="327209"/></proof>
   </goal>
   <goal name="ket_to_int_ket&#39;vc.3.1" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.39" steps="327224"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_to_int_ket&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.85" steps="376768"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="equal_ket_by_int&#39;vc" expl="VC for equal_ket_by_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="equal_ket_by_int&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_ket_l">
   <goal name="equal_ket_by_int&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="exists" proved="true" arg1="l">
    <goal name="equal_ket_by_int&#39;vc.0.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="equal_ket_by_int&#39;vc.0.0.0.0" proved="true">
     <proof prover="8"><result status="valid" time="0.37" steps="323929"/></proof>
     </goal>
     <goal name="equal_ket_by_int&#39;vc.0.0.0.1" proved="true">
     <proof prover="8"><result status="valid" time="0.37" steps="323929"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="equal_ket_by_int&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="equal_ket_by_int&#39;vc.0.1.0" expl="apply premises" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="equal_ket_by_int&#39;vc.0.1.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="m" arg2="(ket l (ket_to_int m))">
      <goal name="equal_ket_by_int&#39;vc.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="n" arg2="(ket l (ket_to_int n))">
       <goal name="equal_ket_by_int&#39;vc.0.1.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="0.69" steps="399787"/></proof>
       </goal>
       <goal name="equal_ket_by_int&#39;vc.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="8"><result status="valid" time="0.92" steps="425399"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="equal_ket_by_int&#39;vc.0.1.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="8"><result status="valid" time="0.74" steps="398614"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bin_to_ket&#39;vc" expl="VC for bin_to_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bin_to_ket&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.42" steps="354293"/></proof>
  </goal>
  <goal name="bin_to_ket&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.70" steps="375906"/></proof>
  </goal>
  <goal name="bin_to_ket&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.42" steps="354401"/></proof>
  </goal>
  <goal name="bin_to_ket&#39;vc.3" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_is_a_ket_basis_elt">
   <goal name="bin_to_ket&#39;vc.3.0" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="0.43" steps="357798"/></proof>
   </goal>
   <goal name="bin_to_ket&#39;vc.3.1" expl="apply premises" proved="true">
   <transf name="exists" proved="true" arg1="(bin_to_int bvx n)">
    <goal name="bin_to_ket&#39;vc.3.1.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="bin_to_ket&#39;vc.3.1.0.0" proved="true">
     <proof prover="8"><result status="valid" time="0.43" steps="357798"/></proof>
     </goal>
     <goal name="bin_to_ket&#39;vc.3.1.0.1" proved="true">
     <transf name="replace" proved="true" arg1="(ket_length result)" arg2="n">
      <goal name="bin_to_ket&#39;vc.3.1.0.1.0" proved="true">
      <transf name="rewrite" proved="true" arg1="bin_to_int&#39;def">
       <goal name="bin_to_ket&#39;vc.3.1.0.1.0.0" proved="true">
       <transf name="replace" proved="true" arg1="(power 2 n)" arg2="(power 2(length (make_bv bvx n)))">
        <goal name="bin_to_ket&#39;vc.3.1.0.1.0.0.0" proved="true">
        <proof prover="8"><result status="valid" time="0.93" steps="411752"/></proof>
        </goal>
        <goal name="bin_to_ket&#39;vc.3.1.0.1.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="rewrite" proved="true" arg1="make_bv_length">
         <goal name="bin_to_ket&#39;vc.3.1.0.1.0.0.1.0" expl="equality hypothesis" proved="true">
         <proof prover="8"><result status="valid" time="0.44" steps="357796"/></proof>
         </goal>
         <goal name="bin_to_ket&#39;vc.3.1.0.1.0.0.1.1" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="0.90" steps="409651"/></proof>
         </goal>
         <goal name="bin_to_ket&#39;vc.3.1.0.1.0.0.1.2" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="0.41" steps="357798"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="bin_to_ket&#39;vc.3.1.0.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.45" steps="357798"/></proof>
       </goal>
       <goal name="bin_to_ket&#39;vc.3.1.0.1.0.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.76" steps="379763"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="bin_to_ket&#39;vc.3.1.0.1.1" expl="equality hypothesis" proved="true">
      <proof prover="8"><result status="valid" time="0.45" steps="357798"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="bin_to_ket&#39;vc.3.1.0.2" proved="true">
     <proof prover="8"><result status="valid" time="0.65" steps="379416"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="bin_to_ket&#39;vc.4" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="bin_to_ket&#39;vc.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="bin_to_ket&#39;vc.4.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="bin_to_ket&#39;vc.4.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="ket&#39;spec5">
      <goal name="bin_to_ket&#39;vc.4.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="0.48" steps="429200"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="bin_to_ket&#39;vc.5" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="bin_to_ket&#39;vc.5.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="result" arg2="(ket n (bin_to_int bvx n))">
    <goal name="bin_to_ket&#39;vc.5.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_to_int_ket">
     <goal name="bin_to_ket&#39;vc.5.0.0.0" expl="postcondition" proved="true">
     <proof prover="8"><result status="valid" time="0.41" steps="358918"/></proof>
     </goal>
     <goal name="bin_to_ket&#39;vc.5.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.41" steps="358927"/></proof>
     </goal>
     <goal name="bin_to_ket&#39;vc.5.0.0.2" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="bin_to_ket&#39;vc.5.0.0.2.0" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.42" steps="358920"/></proof>
      </goal>
      <goal name="bin_to_ket&#39;vc.5.0.0.2.1" expl="rewrite premises" proved="true">
      <transf name="rewrite" proved="true" arg1="bin_to_int&#39;def">
       <goal name="bin_to_ket&#39;vc.5.0.0.2.1.0" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="2.42" steps="825079"/></proof>
       </goal>
       <goal name="bin_to_ket&#39;vc.5.0.0.2.1.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.41" steps="358927"/></proof>
       </goal>
       <goal name="bin_to_ket&#39;vc.5.0.0.2.1.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.73" steps="381011"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="bin_to_ket&#39;vc.5.0.1" expl="equality hypothesis" proved="true">
    <proof prover="8"><result status="valid" time="0.43" steps="358920"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="bin_to_ket&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.44" steps="357824"/></proof>
  </goal>
  <goal name="bin_to_ket&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.42" steps="357827"/></proof>
  </goal>
  <goal name="bin_to_ket&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.41" steps="357830"/></proof>
  </goal>
  <goal name="bin_to_ket&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.73" steps="379823"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bin_to_ket_l&#39;vc" expl="VC for bin_to_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bin_to_ket_l&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.91" steps="402846"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bin_to_ket_eq&#39;vc" expl="VC for bin_to_ket_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bin_to_ket_eq&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="bin_to_ket&#39;def">
   <goal name="bin_to_ket_eq&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="bin_to_ket&#39;def">
    <goal name="bin_to_ket_eq&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(bin_to_int bvx1 n1)" arg2="(bin_to_int bvx2 n2)">
     <goal name="bin_to_ket_eq&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="8"><result status="valid" time="0.45" steps="361223"/></proof>
     </goal>
     <goal name="bin_to_ket_eq&#39;vc.0.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="bin_to_int&#39;def">
      <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0" expl="equality hypothesis" proved="true">
      <transf name="rewrite" proved="true" arg1="bin_to_int&#39;def">
       <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
       <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
        <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0" expl="equality hypothesis" proved="true">
        <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
         <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
          <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="mult_eq">
             <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
              <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
               <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="Requires">
                <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
                 <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="0.41" steps="354902"/></proof>
                 </goal>
                 <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.05" steps="406706"/></proof>
                 </goal>
                 <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="0.42" steps="354889"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="0.91" steps="404402"/></proof>
               </goal>
               <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
               <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
                <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="0.69" steps="376145"/></proof>
                </goal>
                <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.0.0.0.0.0.2.1" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="1.06" steps="406706"/></proof>
                </goal>
                <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.0.0.0.0.0.2.2" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="0.42" steps="354889"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="1.05" steps="406706"/></proof>
              </goal>
              <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
              <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
               <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="0.41" steps="354902"/></proof>
               </goal>
               <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.0.0.0.0.2.1" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="1.01" steps="406706"/></proof>
               </goal>
               <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.0.0.0.0.2.2" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="0.40" steps="354889"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="make_bv_length">
              <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="make_bv_length">
               <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="0.47" steps="361305"/></proof>
               </goal>
               <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="0.92" steps="404402"/></proof>
               </goal>
               <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="0.67" steps="376134"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="0.91" steps="406706"/></proof>
              </goal>
              <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.0.0.0.1.2" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="0.43" steps="354889"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="0.43" steps="354851"/></proof>
          </goal>
          <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.2" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="make_bv_length">
           <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.2.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="make_bv_length">
            <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.2.0.0" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="0.43" steps="354860"/></proof>
            </goal>
            <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.2.0.1" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="0.91" steps="403236"/></proof>
            </goal>
            <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.2.0.2" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="0.70" steps="376070"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.2.1" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="0.91" steps="403249"/></proof>
           </goal>
           <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.0.0.0.2.2" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="0.41" steps="354853"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.70" steps="376070"/></proof>
       </goal>
       <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.0.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.72" steps="376497"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.44" steps="354853"/></proof>
      </goal>
      <goal name="bin_to_ket_eq&#39;vc.0.0.0.1.2" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.68" steps="376504"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="bin_to_ket_eq&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.66" steps="376070"/></proof>
    </goal>
    <goal name="bin_to_ket_eq&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.39" steps="354853"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="bin_to_ket_eq&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.41" steps="354853"/></proof>
   </goal>
   <goal name="bin_to_ket_eq&#39;vc.0.2" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.40" steps="354853"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="kronecker_kets_bin_to_ket&#39;vc" expl="VC for kronecker_kets_bin_to_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kronecker_kets_bin_to_ket&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.43" steps="368023"/></proof>
  </goal>
  <goal name="kronecker_kets_bin_to_ket&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.42" steps="368026"/></proof>
  </goal>
  <goal name="kronecker_kets_bin_to_ket&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.41" steps="368029"/></proof>
  </goal>
  <goal name="kronecker_kets_bin_to_ket&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.43" steps="368032"/></proof>
  </goal>
  <goal name="kronecker_kets_bin_to_ket&#39;vc.4" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.41" steps="368104"/></proof>
  </goal>
  <goal name="kronecker_kets_bin_to_ket&#39;vc.5" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.44" steps="368107"/></proof>
  </goal>
  <goal name="kronecker_kets_bin_to_ket&#39;vc.6" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.44" steps="368110"/></proof>
  </goal>
  <goal name="kronecker_kets_bin_to_ket&#39;vc.7" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.44" steps="368113"/></proof>
  </goal>
  <goal name="kronecker_kets_bin_to_ket&#39;vc.8" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="bin_to_ket&#39;def">
   <goal name="kronecker_kets_bin_to_ket&#39;vc.8.0" expl="postcondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="kronecker_kets_bin_to_ket&#39;vc.8.0.0" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="1.90" steps="30114"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="kronecker_kets_bin_to_ket&#39;vc.8.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.55" steps="452627"/></proof>
   </goal>
   <goal name="kronecker_kets_bin_to_ket&#39;vc.8.2" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.56" steps="452627"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="kronecker_ket_to_int&#39;vc" expl="VC for kronecker_ket_to_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kronecker_ket_to_int&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.68" steps="360628"/></proof>
  </goal>
  <goal name="kronecker_ket_to_int&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.06" steps="386921"/></proof>
  </goal>
  <goal name="kronecker_ket_to_int&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.77" steps="26819"/></proof>
  </goal>
  <goal name="kronecker_ket_to_int&#39;vc.3" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="kronecker_ket_to_int&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ket_to_int_ket">
    <goal name="kronecker_ket_to_int&#39;vc.3.0.0" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="0.42" steps="339384"/></proof>
    </goal>
    <goal name="kronecker_ket_to_int&#39;vc.3.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.08" steps="388376"/></proof>
    </goal>
    <goal name="kronecker_ket_to_int&#39;vc.3.0.2" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="kronecker_ket_to_int&#39;vc.3.0.2.0" expl="rewrite premises" proved="true">
     <transf name="assert" proved="true" arg1="(forall a b c. 0&lt;= a -&gt; 0&lt;= b -&gt; 0&lt;= c -&gt; 0&lt;= a*b+c)">
      <goal name="kronecker_ket_to_int&#39;vc.3.0.2.0.0" expl="asserted formula" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="kronecker_ket_to_int&#39;vc.3.0.2.0.0.0" expl="asserted formula" proved="true">
       <proof prover="7"><result status="valid" time="0.11" steps="627"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="kronecker_ket_to_int&#39;vc.3.0.2.0.1" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="h">
       <goal name="kronecker_ket_to_int&#39;vc.3.0.2.0.1.0" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="0.21" steps="3976"/></proof>
       </goal>
       <goal name="kronecker_ket_to_int&#39;vc.3.0.2.0.1.1" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.07" steps="388566"/></proof>
       </goal>
       <goal name="kronecker_ket_to_int&#39;vc.3.0.2.0.1.2" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="3.46" steps="1052216"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="kronecker_ket_to_int&#39;vc.3.0.2.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="3.45" steps="1046895"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_ket_to_int&#39;vc" expl="VC for ket_ket_to_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_ket_to_int&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.41" steps="339484"/></proof>
  </goal>
  <goal name="ket_ket_to_int&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.71" steps="362841"/></proof>
  </goal>
  <goal name="ket_ket_to_int&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.41" steps="343719"/></proof>
  </goal>
  <goal name="ket_ket_to_int&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.68" steps="364426"/></proof>
  </goal>
  <goal name="ket_ket_to_int&#39;vc.4" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.67" steps="364504"/></proof>
  </goal>
  <goal name="ket_ket_to_int&#39;vc.5" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.66" steps="364543"/></proof>
  </goal>
  <goal name="ket_ket_to_int&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.42" steps="343115"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ket_ket_to_int_values&#39;vc" expl="VC for ket_ket_to_int_values" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_ket_to_int_values&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.41" steps="339547"/></proof>
  </goal>
  <goal name="ket_ket_to_int_values&#39;vc.1" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(get x i j)" arg2="(get (ket (ket_length x) (ket_to_int x)) i j)">
   <goal name="ket_ket_to_int_values&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="get_ket_value_z">
    <goal name="ket_ket_to_int_values&#39;vc.1.0.0" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="0.43" steps="343071"/></proof>
    </goal>
    <goal name="ket_ket_to_int_values&#39;vc.1.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.90" steps="391245"/></proof>
    </goal>
    <goal name="ket_ket_to_int_values&#39;vc.1.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.07" steps="391040"/></proof>
    </goal>
    <goal name="ket_ket_to_int_values&#39;vc.1.0.3" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.90" steps="391867"/></proof>
    </goal>
    <goal name="ket_ket_to_int_values&#39;vc.1.0.4" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.89" steps="392044"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="ket_ket_to_int_values&#39;vc.1.1" expl="equality hypothesis" proved="true">
   <proof prover="8"><result status="valid" time="0.65" steps="363879"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_basis_projection&#39;vc" expl="VC for ket_basis_projection" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_basis_projection&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.71" steps="367105"/></proof>
  </goal>
  <goal name="ket_basis_projection&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.81" steps="366222"/></proof>
  </goal>
  <goal name="ket_basis_projection&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.46" steps="409189"/></proof>
  </goal>
  <goal name="ket_basis_projection&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.49" steps="409211"/></proof>
  </goal>
  <goal name="ket_basis_projection&#39;vc.4" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.84" steps="433840"/></proof>
  </goal>
  <goal name="ket_basis_projection&#39;vc.5" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.84" steps="434340"/></proof>
  </goal>
  <goal name="ket_basis_projection&#39;vc.6" expl="precondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="ket_basis_projection&#39;vc.6.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="get_ket_value_z">
    <goal name="ket_basis_projection&#39;vc.6.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ind_basis_mat&#39;def">
     <goal name="ket_basis_projection&#39;vc.6.0.0.0" expl="precondition" proved="true">
     <transf name="rewrite" proved="true" arg1="assert_make">
      <goal name="ket_basis_projection&#39;vc.6.0.0.0.0" expl="precondition" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="ket_basis_projection&#39;vc.6.0.0.0.0.0" expl="precondition" proved="true">
       <proof prover="8"><result status="valid" time="1.15" steps="467822"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="ket_basis_projection&#39;vc.6.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.06" steps="466075"/></proof>
      </goal>
      <goal name="ket_basis_projection&#39;vc.6.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.01" steps="466071"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="ket_basis_projection&#39;vc.6.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.81" steps="434868"/></proof>
     </goal>
     <goal name="ket_basis_projection&#39;vc.6.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.78" steps="434786"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="ket_basis_projection&#39;vc.6.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.23" steps="466019"/></proof>
    </goal>
    <goal name="ket_basis_projection&#39;vc.6.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.46" steps="411088"/></proof>
    </goal>
    <goal name="ket_basis_projection&#39;vc.6.0.3" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.50" steps="411088"/></proof>
    </goal>
    <goal name="ket_basis_projection&#39;vc.6.0.4" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.09" steps="466065"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ket_basis_projection&#39;vc.7" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.50" steps="410124"/></proof>
  </goal>
  <goal name="ket_basis_projection&#39;vc.8" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.49" steps="410130"/></proof>
  </goal>
  <goal name="ket_basis_projection&#39;vc.9" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="basis_projection&#39;def">
   <goal name="ket_basis_projection&#39;vc.9.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.99" steps="509669"/></proof>
   </goal>
   <goal name="ket_basis_projection&#39;vc.9.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="1.01" steps="509715"/></proof>
   </goal>
   <goal name="ket_basis_projection&#39;vc.9.2" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="1.00" steps="509706"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_basis_projection_columns&#39;vc" expl="VC for ket_basis_projection_columns" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_basis_projection_columns&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="2.73" steps="1064115"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ket_basis_projection_rows&#39;vc" expl="VC for ket_basis_projection_rows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_basis_projection_rows&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="3.14" steps="1066193"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ket_basis_projections&#39;vc" expl="VC for ket_basis_projections" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_basis_projections&#39;vc.0" expl="assertion" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="ket_basis_projections&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="8"><result status="valid" time="3.13" steps="1180062"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_basis_projections&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.58" steps="472099"/></proof>
  </goal>
  <goal name="ket_basis_projections&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.70" steps="539448"/></proof>
  </goal>
  <goal name="ket_basis_projections&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.69" steps="539523"/></proof>
  </goal>
  <goal name="ket_basis_projections&#39;vc.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_basis_projections&#39;vc.4.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="1.45" steps="598380"/></proof>
   </goal>
   <goal name="ket_basis_projections&#39;vc.4.1" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="1.39" steps="598387"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_basis_projections&#39;vc.5" expl="precondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="ket_basis_projections&#39;vc.5.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="basis_projections&#39;def" arg2="in" arg3="H">
    <goal name="ket_basis_projections&#39;vc.5.0.0" expl="precondition" proved="true">
    <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (o:(int, int)) -&gt;
     if valid_index m (fir o) (sec o) then basis_projection m (fir o) (sec o)
     else m),(to_indexes m),e">
     <goal name="ket_basis_projections&#39;vc.5.0.0.0" expl="precondition" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="ket_basis_projections&#39;vc.5.0.0.0.0" expl="destruct premise" proved="true">
      <transf name="apply" proved="true" arg1="H">
      </transf>
      </goal>
      <goal name="ket_basis_projections&#39;vc.5.0.0.0.1" expl="precondition" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="ket_basis_projections&#39;vc.5.0.0.0.1.0" expl="precondition" proved="true">
       <transf name="apply" proved="true" arg1="set_map_mem">
        <goal name="ket_basis_projections&#39;vc.5.0.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="exists" proved="true" arg1="(fir a)">
         <goal name="ket_basis_projections&#39;vc.5.0.0.0.1.0.0.0" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="ket_basis_projections&#39;vc.5.0.0.0.1.0.0.0.0" proved="true">
          <proof prover="8"><result status="valid" time="2.08" steps="795207"/></proof>
          </goal>
          <goal name="ket_basis_projections&#39;vc.5.0.0.0.1.0.0.0.1" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="ket_basis_projections&#39;vc.5.0.0.0.1.0.0.0.1.0" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="ket_basis_projections&#39;vc.5.0.0.0.1.0.0.0.1.0.0" proved="true">
            <transf name="rewrite" proved="true" arg1="Hinst">
             <goal name="ket_basis_projections&#39;vc.5.0.0.0.1.0.0.0.1.0.0.0" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="ket_basis_projections&#39;vc.5.0.0.0.1.0.0.0.1.0.0.0.0" proved="true">
              <transf name="eliminate_if" proved="true" >
               <goal name="ket_basis_projections&#39;vc.5.0.0.0.1.0.0.0.1.0.0.0.0.0" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="ket_basis_projections&#39;vc.5.0.0.0.1.0.0.0.1.0.0.0.0.0.0" proved="true">
                <proof prover="7"><result status="valid" time="0.78" steps="15582"/></proof>
                </goal>
                <goal name="ket_basis_projections&#39;vc.5.0.0.0.1.0.0.0.1.0.0.0.0.0.1" proved="true">
                <proof prover="8"><result status="valid" time="2.41" steps="947739"/></proof>
                </goal>
                <goal name="ket_basis_projections&#39;vc.5.0.0.0.1.0.0.0.1.0.0.0.0.0.2" proved="true">
                <proof prover="8"><result status="valid" time="2.76" steps="947248"/></proof>
                </goal>
                <goal name="ket_basis_projections&#39;vc.5.0.0.0.1.0.0.0.1.0.0.0.0.0.3" proved="true">
                <proof prover="8"><result status="valid" time="1.17" steps="879303"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ket_basis_projections&#39;vc.6" expl="precondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="ket_basis_projections&#39;vc.6.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="basis_projections&#39;def">
    <goal name="ket_basis_projections&#39;vc.6.0.0" expl="precondition" proved="true">
    <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (j:int) -&gt;
     if mem j (to_fset 0 (power 2 (ket_length m)))
     then ket_basis_projection m j else m),(to_fset 0 (power 2 (ket_length m))),e">
     <goal name="ket_basis_projections&#39;vc.6.0.0.0" expl="precondition" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="ket_basis_projections&#39;vc.6.0.0.0.0" expl="destruct premise" proved="true">
      <transf name="apply" proved="true" arg1="H">
      </transf>
      </goal>
      <goal name="ket_basis_projections&#39;vc.6.0.0.0.1" expl="precondition" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="ket_basis_projections&#39;vc.6.0.0.0.1.0" expl="precondition" proved="true">
       <transf name="apply" proved="true" arg1="set_map_mem">
        <goal name="ket_basis_projections&#39;vc.6.0.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="exists" proved="true" arg1="(a,0)">
         <goal name="ket_basis_projections&#39;vc.6.0.0.0.1.0.0.0" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="ket_basis_projections&#39;vc.6.0.0.0.1.0.0.0.0" proved="true">
          <proof prover="8"><result status="valid" time="2.66" steps="880904"/></proof>
          </goal>
          <goal name="ket_basis_projections&#39;vc.6.0.0.0.1.0.0.0.1" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="ket_basis_projections&#39;vc.6.0.0.0.1.0.0.0.1.0" proved="true">
           <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
            <goal name="ket_basis_projections&#39;vc.6.0.0.0.1.0.0.0.1.0.0" proved="true">
            <proof prover="8"><result status="valid" time="2.38" steps="799959"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ket_basis_projections&#39;vc.7" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.14" steps="728131"/></proof>
  </goal>
  <goal name="ket_basis_projections&#39;vc.8" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.94" steps="728196"/></proof>
  </goal>
  <goal name="ket_basis_projections&#39;vc.9" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.12" steps="728271"/></proof>
  </goal>
  <goal name="ket_basis_projections&#39;vc.10" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_basis_projections&#39;vc.10.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="2.44" steps="794701"/></proof>
   </goal>
   <goal name="ket_basis_projections&#39;vc.10.1" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="2.32" steps="794703"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_basis_projections&#39;vc.11" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures5">
   <goal name="ket_basis_projections&#39;vc.11.0" expl="postcondition" proved="true">
   <transf name="compute_specified" proved="true" >
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_basis_projections_antec&#39;vc" expl="VC for ket_basis_projections_antec" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_basis_projections_antec&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.40" steps="340561"/></proof>
  </goal>
  <goal name="ket_basis_projections_antec&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.52" steps="424114"/></proof>
  </goal>
  <goal name="ket_basis_projections_antec&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.52" steps="424189"/></proof>
  </goal>
  <goal name="ket_basis_projections_antec&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.10" steps="478772"/></proof>
  </goal>
  <goal name="ket_basis_projections_antec&#39;vc.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_basis_projections_antec&#39;vc.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ket_basis_projections&#39;def" arg2="in" arg3="H">
    <goal name="ket_basis_projections_antec&#39;vc.4.0.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (j:int) -&gt;
     if mem j (to_fset 0 (power 2 (ket_length m)))
     then ket_basis_projection m j else m),(to_fset 0 (power 2 (ket_length m))),e">
     <goal name="ket_basis_projections_antec&#39;vc.4.0.0.0" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="ket_basis_projections_antec&#39;vc.4.0.0.0.0" expl="destruct premise" proved="true">
      <transf name="apply" proved="true" arg1="H">
      </transf>
      </goal>
      <goal name="ket_basis_projections_antec&#39;vc.4.0.0.0.1" expl="postcondition" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="ket_basis_projections_antec&#39;vc.4.0.0.0.1.0" expl="postcondition" proved="true">
       <transf name="exists" proved="true" arg1="a">
        <goal name="ket_basis_projections_antec&#39;vc.4.0.0.0.1.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="ket_basis_projections_antec&#39;vc.4.0.0.0.1.0.0.0" proved="true">
         <proof prover="8"><result status="valid" time="1.69" steps="599276"/></proof>
         </goal>
         <goal name="ket_basis_projections_antec&#39;vc.4.0.0.0.1.0.0.1" proved="true">
         <proof prover="8"><result status="valid" time="1.68" steps="599278"/></proof>
         </goal>
         <goal name="ket_basis_projections_antec&#39;vc.4.0.0.0.1.0.0.2" proved="true">
         <proof prover="8"><result status="valid" time="1.66" steps="599534"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="ket_basis_projections_antec&#39;vc.4.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.67" steps="538045"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="ket_basis_projections_antec&#39;vc.4.1" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="4.82" steps="1424762"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_basis_projections_antec&#39;vc.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_basis_projections_antec&#39;vc.5.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures" arg2="in" arg3="H">
    <goal name="ket_basis_projections_antec&#39;vc.5.0.0" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="H">
     <goal name="ket_basis_projections_antec&#39;vc.5.0.0.0" expl="postcondition" proved="true">
     <transf name="exists" proved="true" arg1="j">
      <goal name="ket_basis_projections_antec&#39;vc.5.0.0.0.0" proved="true">
      <transf name="exists" proved="true" arg1="0">
       <goal name="ket_basis_projections_antec&#39;vc.5.0.0.0.0.0" proved="true">
       <proof prover="8"><result status="valid" time="1.68" steps="597515"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ket_basis_projections_antec&#39;vc.5.1" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures">
    <goal name="ket_basis_projections_antec&#39;vc.5.1.0" expl="VC for ket_basis_projections_antec" proved="true">
    <transf name="exists" proved="true" arg1="j">
     <goal name="ket_basis_projections_antec&#39;vc.5.1.0.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ket_basis_projections_antec&#39;vc.5.1.0.0.0" proved="true">
      <proof prover="8"><result status="valid" time="1.73" steps="597127"/></proof>
      </goal>
      <goal name="ket_basis_projections_antec&#39;vc.5.1.0.0.1" proved="true">
      <proof prover="8"><result status="valid" time="1.71" steps="597329"/></proof>
      </goal>
      <goal name="ket_basis_projections_antec&#39;vc.5.1.0.0.2" proved="true">
      <proof prover="8"><result status="valid" time="5.09" steps="1398606"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum&#39;vc" expl="VC for ket_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_sum&#39;vc.0.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="ket_sum&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="1.15" steps="504186"/></proof>
    </goal>
    <goal name="ket_sum&#39;vc.0.0.1" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="1.18" steps="504245"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ket_sum&#39;vc.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_sum&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.56" steps="446511"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_sum&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_sum&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="ket_sum&#39;vc.2.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="result&#39;def">
     <goal name="ket_sum&#39;vc.2.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="get_ket&#39;def">
      <goal name="ket_sum&#39;vc.2.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_to_sum_pre">
       <goal name="ket_sum&#39;vc.2.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="sum_eq_gen">
        <goal name="ket_sum&#39;vc.2.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="0.57" steps="452249"/></proof>
        </goal>
        <goal name="ket_sum&#39;vc.2.0.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="ket_sum&#39;vc.2.0.0.0.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="0.92" steps="475936"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="ket_sum&#39;vc.2.0.0.0.0.1" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="ket_sum&#39;vc.2.0.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="ket_sum&#39;vc.2.0.0.0.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="0.94" steps="478117"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="ket_sum&#39;vc.2.0.0.0.0.1.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="ket_sum&#39;vc.2.0.0.0.0.1.1.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="0.94" steps="478125"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="ket_sum&#39;vc.2.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.54" steps="452253"/></proof>
       </goal>
       <goal name="ket_sum&#39;vc.2.0.0.0.0.3" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="ket_sum&#39;vc.2.0.0.0.0.3.0" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="3.11" steps="955049"/></proof>
        </goal>
        <goal name="ket_sum&#39;vc.2.0.0.0.0.3.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="3.10" steps="957892"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="ket_sum&#39;vc.2.0.0.0.0.4" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="1.35" steps="503019"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ket_sum&#39;vc.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_sum&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_is_a_ket">
    <goal name="ket_sum&#39;vc.3.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures3">
     <goal name="ket_sum&#39;vc.3.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_s_columns">
      <goal name="ket_sum&#39;vc.3.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_constant_size">
       <goal name="ket_sum&#39;vc.3.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.16" steps="503793"/></proof>
       </goal>
       <goal name="ket_sum&#39;vc.3.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.03" steps="503801"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="ket_sum&#39;vc.3.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="1.29" steps="532278"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="ket_sum&#39;vc.3.0.1" expl="apply premises" proved="true">
    <transf name="exists" proved="true" arg1="(ket_length (f (choose s)))">
     <goal name="ket_sum&#39;vc.3.0.1.0" proved="true">
     <proof prover="8"><result status="valid" time="1.32" steps="533206"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ket_sum&#39;vc.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_sum&#39;vc.4.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(rows result = power 2 (ket_length (f e)))">
    <goal name="ket_sum&#39;vc.4.0.0" expl="asserted formula" proved="true">
    <proof prover="8"><result status="valid" time="1.27" steps="532410"/></proof>
    </goal>
    <goal name="ket_sum&#39;vc.4.0.1" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="1.27" steps="532372"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_l&#39;vc" expl="VC for ket_sum_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_l&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.48" steps="414466"/></proof>
  </goal>
  <goal name="ket_sum_l&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.72" steps="472782"/></proof>
  </goal>
  <goal name="ket_sum_l&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.72" steps="472787"/></proof>
  </goal>
  <goal name="ket_sum_l&#39;vc.3" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_sum_l&#39;vc.3.0" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.63" steps="528248"/></proof>
   </goal>
   <goal name="ket_sum_l&#39;vc.3.1" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.45" steps="529881"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_sum_l&#39;vc.4" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.61" steps="474831"/></proof>
  </goal>
  <goal name="ket_sum_l&#39;vc.5" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.69" steps="547869"/></proof>
  </goal>
  <goal name="ket_sum_l&#39;vc.6" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_is_a_ket">
   <goal name="ket_sum_l&#39;vc.6.0" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.74" steps="605915"/></proof>
   </goal>
   <goal name="ket_sum_l&#39;vc.6.1" expl="apply premises" proved="true">
   <transf name="exists" proved="true" arg1="l">
    <goal name="ket_sum_l&#39;vc.6.1.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="ket_sum_l&#39;vc.6.1.0.0" proved="true">
     <proof prover="8"><result status="valid" time="0.82" steps="547872"/></proof>
     </goal>
     <goal name="ket_sum_l&#39;vc.6.1.0.1" proved="true">
     <proof prover="8"><result status="valid" time="1.50" steps="607047"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ket_sum_l&#39;vc.7" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(ket_length
  (mat_sum (remove (choose s) s)
   (fun (i:a) -&gt; make_ket l (fun (j:int) -&gt; get (f @ i) j 0))))" arg2="l">
   <goal name="ket_sum_l&#39;vc.7.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="goal_comm">
    <goal name="ket_sum_l&#39;vc.7.0.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="1.52" steps="606790"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="ket_sum_l&#39;vc.7.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="get_ket_length">
    <goal name="ket_sum_l&#39;vc.7.1.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.68" steps="547944"/></proof>
    </goal>
    <goal name="ket_sum_l&#39;vc.7.1.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="columns_mat_sum">
     <goal name="ket_sum_l&#39;vc.7.1.1.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.73" steps="605679"/></proof>
     </goal>
     <goal name="ket_sum_l&#39;vc.7.1.1.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="ket_sum_l&#39;vc.7.1.1.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="ket_sum_l&#39;vc.7.1.1.1.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.75" steps="607712"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="ket_sum_l&#39;vc.7.1.1.1.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="ket_sum_l&#39;vc.7.1.1.1.1.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.76" steps="607646"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ket_sum_l&#39;vc.7.1.1.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ket_sum_l&#39;vc.7.1.1.2.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="ket_sum_l&#39;vc.7.1.1.2.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.78" steps="606881"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="ket_sum_l&#39;vc.7.1.2" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="rows_mat_sum">
     <goal name="ket_sum_l&#39;vc.7.1.2.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.79" steps="605679"/></proof>
     </goal>
     <goal name="ket_sum_l&#39;vc.7.1.2.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="ket_sum_l&#39;vc.7.1.2.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="ket_sum_l&#39;vc.7.1.2.1.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.79" steps="607712"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="ket_sum_l&#39;vc.7.1.2.1.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="ket_sum_l&#39;vc.7.1.2.1.1.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.73" steps="607646"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ket_sum_l&#39;vc.7.1.2.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ket_sum_l&#39;vc.7.1.2.2.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="ket_sum_l&#39;vc.7.1.2.2.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.49" steps="608043"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ket_sum_l&#39;vc.8" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H1">
   <goal name="ket_sum_l&#39;vc.8.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.64" steps="457198"/></proof>
   </goal>
   <goal name="ket_sum_l&#39;vc.8.1" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="H1">
    <goal name="ket_sum_l&#39;vc.8.1.0" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="H1">
     <goal name="ket_sum_l&#39;vc.8.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="mat_sum_cardone">
      <goal name="ket_sum_l&#39;vc.8.1.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="ket_sum_l&#39;vc.8.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="ket_sum_l&#39;vc.8.1.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="eliminate_let" proved="true" >
         <goal name="ket_sum_l&#39;vc.8.1.0.0.0.0.0.0" expl="postcondition" proved="true">
         <proof prover="8"><result status="valid" time="1.42" steps="604940"/></proof>
         <transf name="rewrite" proved="true" arg1="H4">
          <goal name="ket_sum_l&#39;vc.8.1.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="apply" proved="true" arg1="set_equal_ket_l">
           <goal name="ket_sum_l&#39;vc.8.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="exists" proved="true" arg1="l">
            <goal name="ket_sum_l&#39;vc.8.1.0.0.0.0.0.0.0.0.0" proved="true">
            <proof prover="8"><result status="valid" time="1.21" steps="604667"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="ket_sum_l&#39;vc.8.1.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="1.45" steps="607719"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="ket_sum_l&#39;vc.8.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.54" steps="474520"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="ket_sum_l&#39;vc.8.1.0.1" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="mat_sum_plus_one">
      <goal name="ket_sum_l&#39;vc.8.1.0.1.0" expl="postcondition" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0" expl="postcondition" proved="true">
       <transf name="eliminate_let" proved="true" >
        <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="H4">
         <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="add_ket&#39;def">
          <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="apply" proved="true" arg1="add_mat_eq_rev">
           <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.60"/></proof>
           <proof prover="8"><result status="valid" time="1.85" steps="700694"/></proof>
           </goal>
           <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="1.14" steps="669571"/></proof>
           </goal>
           <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.2" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.2.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="set_equal_ket_l">
             <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
             <transf name="exists" proved="true" arg1="l">
              <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.2.0.0.0" proved="true">
              <proof prover="8"><result status="valid" time="1.68" steps="700068"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.2.0.1" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.71" steps="702828"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="set_equal_ket_l">
            <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.0" expl="apply premises" proved="true">
            <transf name="exists" proved="true" arg1="l">
             <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.0.0" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.0.0.0" proved="true">
              <proof prover="8"><result status="valid" time="0.81" steps="638527"/></proof>
              </goal>
              <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.0.0.1" proved="true">
              <transf name="apply" proved="true" arg1="set_is_a_ket_l">
               <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.0.0.1.0" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="0.84" steps="638527"/></proof>
               </goal>
               <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.0.0.1.1" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="columns_mat_sum">
                <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.0.0.1.1.0" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="1.74" steps="699607"/></proof>
                </goal>
                <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.0.0.1.1.1" expl="apply premises" proved="true">
                <transf name="apply" proved="true" arg1="set_constant_size">
                 <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.0.0.1.1.1.0" expl="apply premises" proved="true">
                 <transf name="compute_specified" proved="true" >
                  <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.0.0.1.1.1.0.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.67" steps="702057"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.0.0.1.1.1.1" expl="apply premises" proved="true">
                 <transf name="compute_specified" proved="true" >
                  <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.0.0.1.1.1.1.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.77" steps="702022"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.0.0.1.1.2" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="3.85" steps="1225977"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.0.0.1.2" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="rows_mat_sum">
                <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.0.0.1.2.0" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="1.70" steps="699607"/></proof>
                </goal>
                <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.0.0.1.2.1" expl="apply premises" proved="true">
                <transf name="apply" proved="true" arg1="set_constant_size">
                 <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.0.0.1.2.1.0" expl="apply premises" proved="true">
                 <transf name="compute_specified" proved="true" >
                  <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.0.0.1.2.1.0.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.87" steps="702057"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.0.0.1.2.1.1" expl="apply premises" proved="true">
                 <transf name="compute_specified" proved="true" >
                  <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.0.0.1.2.1.1.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.92" steps="702022"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.0.0.1.2.2" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="3.88" steps="1241807"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.1" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.1.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="H10">
              <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.1.0.0" expl="apply premises" proved="true">
              <transf name="eliminate_definition" proved="true" >
               <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.1.0.0.0" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="goal_comm">
                <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.1.0.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="get_ket&#39;def">
                 <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.1.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="mat_sum_value">
                  <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="apply" proved="true" arg1="sum_eq">
                   <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="compute_specified" proved="true" >
                    <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                     <proof prover="10"><result status="valid" time="0.99" steps="5758954"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                  <transf name="apply" proved="true" arg1="set_constant_size">
                   <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.1.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                   <transf name="compute_specified" proved="true" >
                    <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.1.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="1.88" steps="700531"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.1.0.0.0.0.0.1.1" expl="apply premises" proved="true">
                   <transf name="compute_specified" proved="true" >
                    <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.1.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="1.91" steps="700547"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.87" steps="698574"/></proof>
                  </goal>
                  <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.1.0.0.0.0.0.3" expl="rewrite premises" proved="true">
                  <transf name="apply" proved="true" arg1="set_valid_index">
                   <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.1.0.0.0.0.0.3.0" expl="apply premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.1.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="0.87" steps="638820"/></proof>
                    </goal>
                    <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.1.0.0.0.0.0.3.0.1" expl="apply premises" proved="true">
                    <transf name="replace" proved="true" arg1="(rows
    (mat_sum (remove (choose s) s)
     (fun (i1:a) -&gt; make_ket l (fun (j:int) -&gt; get (f @ i1) j 0))))" arg2="(power 2 l)">
                     <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.1.0.0.0.0.0.3.0.1.0" expl="apply premises" proved="true">
                     <proof prover="8"><result status="valid" time="1.44" steps="668706"/></proof>
                     </goal>
                     <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.1.0.0.0.0.0.3.0.1.1" expl="equality hypothesis" proved="true">
                     <transf name="apply" proved="true" arg1="rows_mat_sum">
                      <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.1.0.0.0.0.0.3.0.1.1.0" expl="apply premises" proved="true">
                      <proof prover="8"><result status="valid" time="1.74" steps="698053"/></proof>
                      </goal>
                      <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.1.0.0.0.0.0.3.0.1.1.1" expl="apply premises" proved="true">
                      <transf name="apply" proved="true" arg1="set_constant_size">
                       <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.1.0.0.0.0.0.3.0.1.1.1.0" expl="apply premises" proved="true">
                       <transf name="compute_specified" proved="true" >
                        <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.1.0.0.0.0.0.3.0.1.1.1.0.0" expl="apply premises" proved="true">
                        <proof prover="8"><result status="valid" time="1.67" steps="700531"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.1.0.0.0.0.0.3.0.1.1.1.1" expl="apply premises" proved="true">
                       <transf name="compute_specified" proved="true" >
                        <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.1.0.0.0.0.0.3.0.1.1.1.1.0" expl="apply premises" proved="true">
                        <proof prover="8"><result status="valid" time="1.59" steps="700547"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.1.0.0.0.0.0.3.0.1.1.2" expl="apply premises" proved="true">
                      <transf name="compute_specified" proved="true" >
                       <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.1.0.0.0.0.0.3.0.1.1.2.0" expl="apply premises" proved="true">
                       <proof prover="8"><result status="valid" time="1.79" steps="699577"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.1.0.0.0.0.0.3.1" expl="apply premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.1.0.0.0.0.0.3.1.0" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="0.93" steps="638827"/></proof>
                    </goal>
                    <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.1.0.0.0.0.0.3.1.1" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="1.92" steps="699516"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.0.3.1.0.1" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="1.73" steps="700963"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="0.82" steps="638084"/></proof>
          </goal>
          <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="1.50" steps="668852"/></proof>
          </goal>
          <goal name="ket_sum_l&#39;vc.8.1.0.1.0.0.0.0.3" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="1.64" steps="668899"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="ket_sum_l&#39;vc.8.1.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.06" steps="575035"/></proof>
      </goal>
      <goal name="ket_sum_l&#39;vc.8.1.0.1.2" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="set_constant_size">
       <goal name="ket_sum_l&#39;vc.8.1.0.1.2.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="ket_sum_l&#39;vc.8.1.0.1.2.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.43" steps="607696"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="ket_sum_l&#39;vc.8.1.0.1.2.1" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="ket_sum_l&#39;vc.8.1.0.1.2.1.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.40" steps="607635"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ket_sum_l&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.14" steps="575686"/></proof>
  </goal>
  <goal name="ket_sum_l&#39;vc.10" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_sum_l&#39;vc.10.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.64" steps="545371"/></proof>
   </goal>
   <goal name="ket_sum_l&#39;vc.10.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="ket_sum_l&#39;vc.10.1.0" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="1.34" steps="574137"/></proof>
    </goal>
    <goal name="ket_sum_l&#39;vc.10.1.1" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures1">
     <goal name="ket_sum_l&#39;vc.10.1.1.0" expl="postcondition" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="ket_sum_l&#39;vc.10.1.1.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="get_ket&#39;def">
       <goal name="ket_sum_l&#39;vc.10.1.1.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="mat_sum_value">
        <goal name="ket_sum_l&#39;vc.10.1.1.0.0.0.0" expl="postcondition" proved="true">
        <transf name="apply" proved="true" arg1="sum_eq">
         <goal name="ket_sum_l&#39;vc.10.1.1.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="ket_sum_l&#39;vc.10.1.1.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="ket_sum_l&#39;vc.10.1.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="( get (make_ket l (fun (j:int) -&gt; get (f @ x) j 0)) i 0)" arg2="( get_ket (make_ket l (fun (j:int) -&gt; get (f @ x) j 0)) i )">
            <goal name="ket_sum_l&#39;vc.10.1.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="3.45" steps="1219664"/></proof>
            </goal>
            <goal name="ket_sum_l&#39;vc.10.1.1.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
            <transf name="rewrite" proved="true" arg1="get_ket&#39;def">
             <goal name="ket_sum_l&#39;vc.10.1.1.0.0.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
             <transf name="compute_specified" proved="true" >
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="ket_sum_l&#39;vc.10.1.1.0.0.0.1" expl="rewrite premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="ket_sum_l&#39;vc.10.1.1.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="ket_sum_l&#39;vc.10.1.1.0.0.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.38" steps="606968"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="ket_sum_l&#39;vc.10.1.1.0.0.0.1.1" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="ket_sum_l&#39;vc.10.1.1.0.0.0.1.1.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.36" steps="606907"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="ket_sum_l&#39;vc.10.1.1.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="1.41" steps="605260"/></proof>
        </goal>
        <goal name="ket_sum_l&#39;vc.10.1.1.0.0.0.3" expl="rewrite premises" proved="true">
        <transf name="apply" proved="true" arg1="set_valid_index">
         <goal name="ket_sum_l&#39;vc.10.1.1.0.0.0.3.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="ket_sum_l&#39;vc.10.1.1.0.0.0.3.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="3.41" steps="1200572"/></proof>
          </goal>
          <goal name="ket_sum_l&#39;vc.10.1.1.0.0.0.3.0.1" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="(rows
    (mat_sum s
     (fun (i1:a) -&gt; make_ket l (fun (j:int) -&gt; get (f @ i1) j 0))))" arg2="(power 2 l)">
           <goal name="ket_sum_l&#39;vc.10.1.1.0.0.0.3.0.1.0" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="3.42" steps="1221173"/></proof>
           </goal>
           <goal name="ket_sum_l&#39;vc.10.1.1.0.0.0.3.0.1.1" expl="equality hypothesis" proved="true">
           <transf name="apply" proved="true" arg1="rows_mat_sum">
            <goal name="ket_sum_l&#39;vc.10.1.1.0.0.0.3.0.1.1.0" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="0.68" steps="548766"/></proof>
            </goal>
            <goal name="ket_sum_l&#39;vc.10.1.1.0.0.0.3.0.1.1.1" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="set_constant_size">
             <goal name="ket_sum_l&#39;vc.10.1.1.0.0.0.3.0.1.1.1.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="ket_sum_l&#39;vc.10.1.1.0.0.0.3.0.1.1.1.0.0" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="1.45" steps="606968"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="ket_sum_l&#39;vc.10.1.1.0.0.0.3.0.1.1.1.1" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="ket_sum_l&#39;vc.10.1.1.0.0.0.3.0.1.1.1.1.0" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="1.42" steps="606907"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="ket_sum_l&#39;vc.10.1.1.0.0.0.3.0.1.1.2" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="3.53" steps="1270219"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="ket_sum_l&#39;vc.10.1.1.0.0.0.3.1" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="ket_sum_l&#39;vc.10.1.1.0.0.0.3.1.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="0.71" steps="548775"/></proof>
          </goal>
          <goal name="ket_sum_l&#39;vc.10.1.1.0.0.0.3.1.1" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.42" steps="605692"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ket_sum_l&#39;vc.10.1.1.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.39" steps="607482"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ket_sum_l&#39;vc.11" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="ket_sum_l&#39;vc.11.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.19" steps="576677"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_sum_l&#39;vc.12" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="ket_sum_l&#39;vc.12.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="goal_comm">
    <goal name="ket_sum_l&#39;vc.12.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="rows_mat_sum">
     <goal name="ket_sum_l&#39;vc.12.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.15" steps="575752"/></proof>
     </goal>
     <goal name="ket_sum_l&#39;vc.12.0.0.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="ket_sum_l&#39;vc.12.0.0.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="ket_sum_l&#39;vc.12.0.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="0.68" steps="527570"/></proof>
       </goal>
       <goal name="ket_sum_l&#39;vc.12.0.0.1.0.1" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.63" steps="613257"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="ket_sum_l&#39;vc.12.0.0.1.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="ket_sum_l&#39;vc.12.0.0.1.1.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="0.71" steps="527607"/></proof>
       </goal>
       <goal name="ket_sum_l&#39;vc.12.0.0.1.1.1" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.85" steps="612871"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ket_sum_l&#39;vc.12.0.0.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ket_sum_l&#39;vc.12.0.0.2.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="0.68" steps="527551"/></proof>
      </goal>
      <goal name="ket_sum_l&#39;vc.12.0.0.2.1" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="1.84" steps="612275"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ket_sum_l&#39;vc.12.1" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="goal_comm">
    <goal name="ket_sum_l&#39;vc.12.1.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="columns_mat_sum">
     <goal name="ket_sum_l&#39;vc.12.1.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.32" steps="575752"/></proof>
     </goal>
     <goal name="ket_sum_l&#39;vc.12.1.0.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="ket_sum_l&#39;vc.12.1.0.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="ket_sum_l&#39;vc.12.1.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="0.69" steps="527570"/></proof>
       </goal>
       <goal name="ket_sum_l&#39;vc.12.1.0.1.0.1" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.84" steps="613257"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="ket_sum_l&#39;vc.12.1.0.1.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="ket_sum_l&#39;vc.12.1.0.1.1.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="0.70" steps="527607"/></proof>
       </goal>
       <goal name="ket_sum_l&#39;vc.12.1.0.1.1.1" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.89" steps="612871"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ket_sum_l&#39;vc.12.1.0.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ket_sum_l&#39;vc.12.1.0.2.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="0.68" steps="527588"/></proof>
      </goal>
      <goal name="ket_sum_l&#39;vc.12.1.0.2.1" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="1.66" steps="610072"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ket_sum_l&#39;vc.12.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="ket_sum_l&#39;vc.12.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures3">
     <goal name="ket_sum_l&#39;vc.12.2.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="mat_sum_value">
      <goal name="ket_sum_l&#39;vc.12.2.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_value">
       <goal name="ket_sum_l&#39;vc.12.2.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="sum_eq">
        <goal name="ket_sum_l&#39;vc.12.2.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="ket_sum_l&#39;vc.12.2.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="ket_sum_l&#39;vc.12.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="(get (make_ket l (fun (j1:int) -&gt; get (f @ x) j1 0)) i j)" arg2="(get_ket (make_ket l (fun (j1:int) -&gt; get (f @ x) j1 0)) i )">
           <goal name="ket_sum_l&#39;vc.12.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="assert_make_ket_l">
            <goal name="ket_sum_l&#39;vc.12.2.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="ket_sum_l&#39;vc.12.2.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="0.66" steps="527712"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="ket_sum_l&#39;vc.12.2.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="0.62" steps="520348"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="ket_sum_l&#39;vc.12.2.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
           <transf name="eliminate_definition" proved="true" >
            <goal name="ket_sum_l&#39;vc.12.2.0.0.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
            <proof prover="8"><result status="valid" time="0.66" steps="528783"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="ket_sum_l&#39;vc.12.2.0.0.0.1" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="ket_sum_l&#39;vc.12.2.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="ket_sum_l&#39;vc.12.2.0.0.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="0.69" steps="527586"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="ket_sum_l&#39;vc.12.2.0.0.0.1.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="ket_sum_l&#39;vc.12.2.0.0.0.1.1.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="0.68" steps="527623"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="ket_sum_l&#39;vc.12.2.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.64" steps="520338"/></proof>
       </goal>
       <goal name="ket_sum_l&#39;vc.12.2.0.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.70" steps="527683"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="ket_sum_l&#39;vc.12.2.0.0.1" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="set_constant_size">
       <goal name="ket_sum_l&#39;vc.12.2.0.0.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="ket_sum_l&#39;vc.12.2.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="0.70" steps="527735"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="ket_sum_l&#39;vc.12.2.0.0.1.1" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="ket_sum_l&#39;vc.12.2.0.0.1.1.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="0.71" steps="527772"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="ket_sum_l&#39;vc.12.2.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.80" steps="520338"/></proof>
      </goal>
      <goal name="ket_sum_l&#39;vc.12.2.0.0.3" expl="rewrite premises" proved="true">
      <transf name="eliminate_let" proved="true" >
       <goal name="ket_sum_l&#39;vc.12.2.0.0.3.0" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_valid_index">
        <goal name="ket_sum_l&#39;vc.12.2.0.0.3.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="ket_sum_l&#39;vc.12.2.0.0.3.0.0.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="0.70" steps="527680"/></proof>
         </goal>
         <goal name="ket_sum_l&#39;vc.12.2.0.0.3.0.0.1" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(rows
    (mat_sum s (fun (i1:a) -&gt; make_ket l (fun (j1:int) -&gt; get (f @ i1) j1 0))))" arg2="(power 2 l)">
          <goal name="ket_sum_l&#39;vc.12.2.0.0.3.0.0.1.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="0.71" steps="527691"/></proof>
          </goal>
          <goal name="ket_sum_l&#39;vc.12.2.0.0.3.0.0.1.1" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="rows_mat_sum">
           <goal name="ket_sum_l&#39;vc.12.2.0.0.3.0.0.1.1.0" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="0.70" steps="527673"/></proof>
           </goal>
           <goal name="ket_sum_l&#39;vc.12.2.0.0.3.0.0.1.1.1" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="0.85" steps="528102"/></proof>
           </goal>
           <goal name="ket_sum_l&#39;vc.12.2.0.0.3.0.0.1.1.2" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="0.70" steps="527693"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="ket_sum_l&#39;vc.12.2.0.0.3.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="ket_sum_l&#39;vc.12.2.0.0.3.0.1.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="0.72" steps="527680"/></proof>
         </goal>
         <goal name="ket_sum_l&#39;vc.12.2.0.0.3.0.1.1" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="0.75" steps="527705"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ket_sum_l&#39;vc.12.2.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.67" steps="520338"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="ket_sum_l&#39;vc.12.2.1" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(get result i j)" arg2="(get_ket result i)">
     <goal name="ket_sum_l&#39;vc.12.2.1.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures1">
      <goal name="ket_sum_l&#39;vc.12.2.1.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_value">
       <goal name="ket_sum_l&#39;vc.12.2.1.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="sum_eq">
        <goal name="ket_sum_l&#39;vc.12.2.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="ket_sum_l&#39;vc.12.2.1.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.75" steps="609751"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="ket_sum_l&#39;vc.12.2.1.0.0.1" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="ket_sum_l&#39;vc.12.2.1.0.0.1.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="ket_sum_l&#39;vc.12.2.1.0.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.39" steps="575562"/></proof>
         </goal>
         <goal name="ket_sum_l&#39;vc.12.2.1.0.0.1.0.1" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.53" steps="614305"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="ket_sum_l&#39;vc.12.2.1.0.0.1.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="ket_sum_l&#39;vc.12.2.1.0.0.1.1.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.33" steps="575599"/></proof>
         </goal>
         <goal name="ket_sum_l&#39;vc.12.2.1.0.0.1.1.1" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.50" steps="613938"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="ket_sum_l&#39;vc.12.2.1.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.68" steps="548326"/></proof>
       </goal>
       <goal name="ket_sum_l&#39;vc.12.2.1.0.0.3" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_valid_index">
        <goal name="ket_sum_l&#39;vc.12.2.1.0.0.3.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="ket_sum_l&#39;vc.12.2.1.0.0.3.0.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.46" steps="607634"/></proof>
         </goal>
         <goal name="ket_sum_l&#39;vc.12.2.1.0.0.3.0.1" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(rows (mat_sum s f))" arg2="(power 2 l)">
          <goal name="ket_sum_l&#39;vc.12.2.1.0.0.3.0.1.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.48" steps="608569"/></proof>
          </goal>
          <goal name="ket_sum_l&#39;vc.12.2.1.0.0.3.0.1.1" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="rows_mat_sum">
           <goal name="ket_sum_l&#39;vc.12.2.1.0.0.3.0.1.1.0" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="0.68" steps="548322"/></proof>
           </goal>
           <goal name="ket_sum_l&#39;vc.12.2.1.0.0.3.0.1.1.1" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="set_constant_size">
            <goal name="ket_sum_l&#39;vc.12.2.1.0.0.3.0.1.1.1.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="ket_sum_l&#39;vc.12.2.1.0.0.3.0.1.1.1.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.37" steps="575562"/></proof>
             </goal>
             <goal name="ket_sum_l&#39;vc.12.2.1.0.0.3.0.1.1.1.0.1" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.51" steps="614305"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="ket_sum_l&#39;vc.12.2.1.0.0.3.0.1.1.1.1" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="ket_sum_l&#39;vc.12.2.1.0.0.3.0.1.1.1.1.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.39" steps="575599"/></proof>
             </goal>
             <goal name="ket_sum_l&#39;vc.12.2.1.0.0.3.0.1.1.1.1.1" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.51" steps="613938"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="ket_sum_l&#39;vc.12.2.1.0.0.3.0.1.1.2" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="ket_sum_l&#39;vc.12.2.1.0.0.3.0.1.1.2.0" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="1.84" steps="609228"/></proof>
            </goal>
            <goal name="ket_sum_l&#39;vc.12.2.1.0.0.3.0.1.1.2.1" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="1.41" steps="613465"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="ket_sum_l&#39;vc.12.2.1.0.0.3.1" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.71" steps="608076"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="ket_sum_l&#39;vc.12.2.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.62" steps="608148"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="ket_sum_l&#39;vc.12.2.1.1" expl="equality hypothesis" proved="true">
     <proof prover="8"><result status="valid" time="1.41" steps="609030"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ket_sum_l&#39;vc.13" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.15" steps="576033"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_l_to_mat_sum&#39;vc" expl="VC for ket_sum_l_to_mat_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_l_to_mat_sum&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="ket_sum_l_to_mat_sum&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ket_sum_l&#39;spec5">
    <goal name="ket_sum_l_to_mat_sum&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
    <goal name="ket_sum_l_to_mat_sum&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.55" steps="434675"/></proof>
    </goal>
    <goal name="ket_sum_l_to_mat_sum&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.53" steps="434677"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_l_rows&#39;vc" expl="VC for ket_sum_l_rows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_l_rows&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(power 2 l)" arg2="(power 2 (ket_length (ket_sum_l s f l)))">
   <goal name="ket_sum_l_rows&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.31" steps="3557"/></proof>
   </goal>
   <goal name="ket_sum_l_rows&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="ket_sum_l_rows&#39;vc.0.1.0" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_l&#39;spec">
     <goal name="ket_sum_l_rows&#39;vc.0.1.0.0" expl="equality hypothesis" proved="true">
     <proof prover="8"><result status="valid" time="0.54" steps="435163"/></proof>
     </goal>
     <goal name="ket_sum_l_rows&#39;vc.0.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.53" steps="435165"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_l_value&#39;vc" expl="VC for ket_sum_l_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_l_value&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="ket_sum_l_value&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="ket_sum_l_value&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="j" arg2="0">
     <goal name="ket_sum_l_value&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(get (ket_sum_l s f l) i 0 )" arg2="(get_ket (ket_sum_l s f l) i )">
      <goal name="ket_sum_l_value&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="ket_sum_l&#39;spec3">
       <goal name="ket_sum_l_value&#39;vc.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="sum_eq">
        <goal name="ket_sum_l_value&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="ket_sum_l_value&#39;vc.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.11" steps="541171"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="ket_sum_l_value&#39;vc.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.51" steps="400165"/></proof>
       </goal>
       <goal name="ket_sum_l_value&#39;vc.0.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="1.12" steps="502007"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="ket_sum_l_value&#39;vc.0.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="8"><result status="valid" time="0.90" steps="478863"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="ket_sum_l_value&#39;vc.0.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="8"><result status="valid" time="0.49" steps="400165"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="get_ket_sum_l_value&#39;vc" expl="VC for get_ket_sum_l_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_ket_sum_l_value&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="get_ket_sum_l_value&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="get_ket&#39;def">
    <goal name="get_ket_sum_l_value&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_l_value">
     <goal name="get_ket_sum_l_value&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="sum_eq">
      <goal name="get_ket_sum_l_value&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="get_ket_sum_l_value&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="0.92" steps="467963"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="get_ket_sum_l_value&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.43" steps="344732"/></proof>
     </goal>
     <goal name="get_ket_sum_l_value&#39;vc.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.41" steps="344741"/></proof>
     </goal>
     <goal name="get_ket_sum_l_value&#39;vc.0.0.0.3" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.43" steps="344730"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_l_columns&#39;vc" expl="VC for ket_sum_l_columns" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_l_columns&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="ket_sum_l_columns&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(forall x. is_a_ket x -&gt; columns x = 1)">
    <goal name="ket_sum_l_columns&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <proof prover="8"><result status="valid" time="0.80" steps="428295"/></proof>
    </goal>
    <goal name="ket_sum_l_columns&#39;vc.0.0.1" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="h">
     <goal name="ket_sum_l_columns&#39;vc.0.0.1.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="ket_sum_l&#39;spec4">
      <goal name="ket_sum_l_columns&#39;vc.0.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="0.50" steps="400905"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_null_but_maybe_one_elt&#39;vc" expl="VC for ket_sum_null_but_maybe_one_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_null_but_maybe_one_elt&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.58" steps="452769"/></proof>
  </goal>
  <goal name="ket_sum_null_but_maybe_one_elt&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.56" steps="452773"/></proof>
  </goal>
  <goal name="ket_sum_null_but_maybe_one_elt&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.57" steps="452776"/></proof>
  </goal>
  <goal name="ket_sum_null_but_maybe_one_elt&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.97" steps="477326"/></proof>
  </goal>
  <goal name="ket_sum_null_but_maybe_one_elt&#39;vc.4" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ket_sum&#39;def">
   <goal name="ket_sum_null_but_maybe_one_elt&#39;vc.4.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.59" steps="454814"/></proof>
   </goal>
   <goal name="ket_sum_null_but_maybe_one_elt&#39;vc.4.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.90" steps="478914"/></proof>
   </goal>
   <goal name="ket_sum_null_but_maybe_one_elt&#39;vc.4.2" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.89" steps="478948"/></proof>
   </goal>
   <goal name="ket_sum_null_but_maybe_one_elt&#39;vc.4.3" expl="rewrite premises" proved="true">
   <transf name="exists" proved="true" arg1="(ket_length ( f (choose s)))">
    <goal name="ket_sum_null_but_maybe_one_elt&#39;vc.4.3.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="ket_sum_null_but_maybe_one_elt&#39;vc.4.3.0.0" proved="true">
     <proof prover="8"><result status="valid" time="1.26" steps="510954"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_null&#39;vc" expl="VC for ket_sum_null" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_null&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.72" steps="516684"/></proof>
  </goal>
  <goal name="ket_sum_null&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.72" steps="516710"/></proof>
  </goal>
  <goal name="ket_sum_null&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="4.06" steps="1286269"/></proof>
  </goal>
  <goal name="ket_sum_null&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="4.03" steps="1273407"/></proof>
  </goal>
  <goal name="ket_sum_null&#39;vc.4" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="ket_sum_null&#39;vc.4.0" expl="precondition" proved="true">
   <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="H">
    <goal name="ket_sum_null&#39;vc.4.0.0" expl="precondition" proved="true">
    <transf name="replace" proved="true" arg1="(get (make_ket l (fun (y1:int) -&gt; get_ket (f @ e) y1)) i j )" arg2="(get_ket (make_ket l (fun (y1:int) -&gt; get_ket (f @ e) y1)) i  )">
     <goal name="ket_sum_null&#39;vc.4.0.0.0" expl="precondition" proved="true">
     <transf name="rewrite" proved="true" arg1="assert_make_ket_l">
      <goal name="ket_sum_null&#39;vc.4.0.0.0.0" expl="precondition" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="ket_sum_null&#39;vc.4.0.0.0.0.0" expl="precondition" proved="true">
       <proof prover="8"><result status="valid" time="1.28" steps="573371"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="ket_sum_null&#39;vc.4.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.57" steps="516615"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="ket_sum_null&#39;vc.4.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="replace" proved="true" arg1="j" arg2="0">
      <goal name="ket_sum_null&#39;vc.4.0.0.1.0" expl="equality hypothesis" proved="true">
      <proof prover="8"><result status="valid" time="4.40" steps="1403206"/></proof>
      </goal>
      <goal name="ket_sum_null&#39;vc.4.0.0.1.1" expl="equality hypothesis" proved="true">
      <proof prover="8"><result status="valid" time="1.53" steps="572013"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ket_sum_null&#39;vc.5" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ket_sum_l_to_mat_sum">
   <goal name="ket_sum_null&#39;vc.5.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="Ensures" arg2="j,0">
    <goal name="ket_sum_null&#39;vc.5.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="ket_sum_null&#39;vc.5.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="get_ket&#39;def">
      <goal name="ket_sum_null&#39;vc.5.0.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
       <goal name="ket_sum_null&#39;vc.5.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="get_ket&#39;def" arg2="in" arg3="Hinst">
        <goal name="ket_sum_null&#39;vc.5.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="apply" proved="true" arg1="Hinst">
         <goal name="ket_sum_null&#39;vc.5.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="0.74" steps="520891"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ket_sum_null&#39;vc.5.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.58" steps="520048"/></proof>
   </goal>
   <goal name="ket_sum_null&#39;vc.5.2" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="1.21" steps="546219"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_l_null_but_maybe_one_elt&#39;vc" expl="VC for ket_sum_l_null_but_maybe_one_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_l_null_but_maybe_one_elt&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.56" steps="517647"/></proof>
  </goal>
  <goal name="ket_sum_l_null_but_maybe_one_elt&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.58" steps="517673"/></proof>
  </goal>
  <goal name="ket_sum_l_null_but_maybe_one_elt&#39;vc.2" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="ket_sum_l_null_but_maybe_one_elt&#39;vc.2.0" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="3.97" steps="1345562"/></proof>
   </goal>
   <goal name="ket_sum_l_null_but_maybe_one_elt&#39;vc.2.1" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="3.91" steps="1344557"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_sum_l_null_but_maybe_one_elt&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.56" steps="518920"/></proof>
  </goal>
  <goal name="ket_sum_l_null_but_maybe_one_elt&#39;vc.4" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_null_mat">
   <goal name="ket_sum_l_null_but_maybe_one_elt&#39;vc.4.0" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="ket_sum_l_null_but_maybe_one_elt&#39;vc.4.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="ket_sum_l_null_but_maybe_one_elt&#39;vc.4.0.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(get (make_ket l (fun (y1:int) -&gt; get_ket (f @ e&#39;) y1)) i j)" arg2="(get_ket (make_ket l (fun (y1:int) -&gt; get_ket (f @ e&#39;) y1)) i )">
      <goal name="ket_sum_l_null_but_maybe_one_elt&#39;vc.4.0.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="assert_make_ket_l">
       <goal name="ket_sum_l_null_but_maybe_one_elt&#39;vc.4.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="ket_sum_l_null_but_maybe_one_elt&#39;vc.4.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="Requires3">
         <goal name="ket_sum_l_null_but_maybe_one_elt&#39;vc.4.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="0.61" steps="520393"/></proof>
         </goal>
         <goal name="ket_sum_l_null_but_maybe_one_elt&#39;vc.4.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="0.61" steps="520400"/></proof>
         </goal>
         <goal name="ket_sum_l_null_but_maybe_one_elt&#39;vc.4.0.0.0.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.34" steps="578632"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="ket_sum_l_null_but_maybe_one_elt&#39;vc.4.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.60" steps="520393"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="ket_sum_l_null_but_maybe_one_elt&#39;vc.4.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="goal_comm">
       <goal name="ket_sum_l_null_but_maybe_one_elt&#39;vc.4.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="eliminate_definition" proved="true" >
        <goal name="ket_sum_l_null_but_maybe_one_elt&#39;vc.4.0.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="j" arg2="0">
         <goal name="ket_sum_l_null_but_maybe_one_elt&#39;vc.4.0.0.0.1.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="get_ket&#39;def">
         </transf>
         </goal>
         <goal name="ket_sum_l_null_but_maybe_one_elt&#39;vc.4.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="8"><result status="valid" time="1.41" steps="578064"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ket_sum_l_null_but_maybe_one_elt&#39;vc.5" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ket_sum_l_to_mat_sum">
   <goal name="ket_sum_l_null_but_maybe_one_elt&#39;vc.5.0" expl="postcondition" proved="true">
   <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Ensures">
    <goal name="ket_sum_l_null_but_maybe_one_elt&#39;vc.5.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="ket_sum_l_null_but_maybe_one_elt&#39;vc.5.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="get_ket&#39;def" arg2="in" arg3="Ensures">
      <goal name="ket_sum_l_null_but_maybe_one_elt&#39;vc.5.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="Ensures">
       <goal name="ket_sum_l_null_but_maybe_one_elt&#39;vc.5.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="compute_specified" proved="true" >
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ket_sum_l_null_but_maybe_one_elt&#39;vc.5.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.58" steps="520963"/></proof>
   </goal>
   <goal name="ket_sum_l_null_but_maybe_one_elt&#39;vc.5.2" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="1.20" steps="547168"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_l_null_but_maybe_one_elt_&#39;vc" expl="VC for ket_sum_l_null_but_maybe_one_elt_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_l_null_but_maybe_one_elt_&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.57" steps="455536"/></proof>
  </goal>
  <goal name="ket_sum_l_null_but_maybe_one_elt_&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.57" steps="455541"/></proof>
  </goal>
  <goal name="ket_sum_l_null_but_maybe_one_elt_&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.55" steps="455545"/></proof>
  </goal>
  <goal name="ket_sum_l_null_but_maybe_one_elt_&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.20" steps="510957"/></proof>
  </goal>
  <goal name="ket_sum_l_null_but_maybe_one_elt_&#39;vc.4" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="ket_sum_l_null_but_maybe_one_elt_&#39;vc.4.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_equal_ket">
    <goal name="ket_sum_l_null_but_maybe_one_elt_&#39;vc.4.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_is_a_ket">
     <goal name="ket_sum_l_null_but_maybe_one_elt_&#39;vc.4.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="3.55" steps="1294874"/></proof>
     </goal>
     <goal name="ket_sum_l_null_but_maybe_one_elt_&#39;vc.4.0.0.1" expl="apply premises" proved="true">
     <transf name="exists" proved="true" arg1="l">
      <goal name="ket_sum_l_null_but_maybe_one_elt_&#39;vc.4.0.0.1.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="ket_sum_l_null_but_maybe_one_elt_&#39;vc.4.0.0.1.0.0" proved="true">
       <proof prover="8"><result status="valid" time="0.65" steps="519028"/></proof>
       </goal>
       <goal name="ket_sum_l_null_but_maybe_one_elt_&#39;vc.4.0.0.1.0.1" proved="true">
       <proof prover="8"><result status="valid" time="3.55" steps="1309062"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="ket_sum_l_null_but_maybe_one_elt_&#39;vc.4.0.1" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="1.58" steps="577170"/></proof>
    </goal>
    <goal name="ket_sum_l_null_but_maybe_one_elt_&#39;vc.4.0.2" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="3.41" steps="1289213"/></proof>
    </goal>
    <goal name="ket_sum_l_null_but_maybe_one_elt_&#39;vc.4.0.3" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="ket_sum_l_null_but_maybe_one_elt_&#39;vc.4.0.3.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="3.83" steps="1434976"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_ket_l&#39;vc" expl="VC for ket_sum_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_ket_l&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.20" steps="3137"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_ket_l_&#39;vc" expl="VC for ket_sum_ket_l_" proved="true">
 <proof prover="8"><result status="valid" time="0.76" steps="416389"/></proof>
 </goal>
 <goal name="add_ket_l_eq&#39;vc" expl="VC for add_ket_l_eq" proved="true">
 <proof prover="8"><result status="valid" time="0.41" steps="347109"/></proof>
 </goal>
 <goal name="add_ket_l_eq_scal&#39;vc" expl="VC for add_ket_l_eq_scal" proved="true">
 <proof prover="8"><result status="valid" time="0.40" steps="347401"/></proof>
 </goal>
 <goal name="add_ket_l_scal&#39;vc" expl="VC for add_ket_l_scal" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_ket_l_scal&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.16" steps="399316"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_ket_l_scal_rev&#39;vc" expl="VC for add_ket_l_scal_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_ket_l_scal_rev&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.62" steps="369206"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_ket_scalar&#39;vc" expl="VC for get_ket_scalar" proved="true">
 <proof prover="8"><result status="valid" time="0.63" steps="370509"/></proof>
 </goal>
 <goal name="scal_add_scal_ket_l&#39;vc" expl="VC for scal_add_scal_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="scal_add_scal_ket_l&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="scal_add_scal_ket_l&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="scal_add_scal_ket_l&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_ket_">
     <goal name="scal_add_scal_ket_l&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="exists" proved="true" arg1="n">
      <goal name="scal_add_scal_ket_l&#39;vc.0.0.0.0.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="scal_add_scal_ket_l&#39;vc.0.0.0.0.0.0" proved="true">
       <proof prover="8"><result status="valid" time="0.97" steps="459824"/></proof>
       </goal>
       <goal name="scal_add_scal_ket_l&#39;vc.0.0.0.0.0.1" proved="true">
       <proof prover="8"><result status="valid" time="0.98" steps="461000"/></proof>
       </goal>
       <goal name="scal_add_scal_ket_l&#39;vc.0.0.0.0.0.2" proved="true">
       <transf name="rewrite" proved="true" arg1="scalar_ket_value">
        <goal name="scal_add_scal_ket_l&#39;vc.0.0.0.0.0.2.0" proved="true">
        <transf name="rewrite" proved="true" arg1="add_ket_l_value">
         <goal name="scal_add_scal_ket_l&#39;vc.0.0.0.0.0.2.0.0" proved="true">
         <transf name="rewrite" proved="true" arg1="add_ket_l_value">
          <goal name="scal_add_scal_ket_l&#39;vc.0.0.0.0.0.2.0.0.0" proved="true">
          <transf name="rewrite" proved="true" arg1="scalar_ket_value">
           <goal name="scal_add_scal_ket_l&#39;vc.0.0.0.0.0.2.0.0.0.0" proved="true">
           <transf name="rewrite" proved="true" arg1="scalar_ket_value">
            <goal name="scal_add_scal_ket_l&#39;vc.0.0.0.0.0.2.0.0.0.0.0" proved="true">
            <transf name="rewrite" proved="true" arg1="scalar_ket_value">
             <goal name="scal_add_scal_ket_l&#39;vc.0.0.0.0.0.2.0.0.0.0.0.0" proved="true">
             <transf name="rewrite" proved="true" arg1="scalar_ket_value">
              <goal name="scal_add_scal_ket_l&#39;vc.0.0.0.0.0.2.0.0.0.0.0.0.0" proved="true">
              <proof prover="8"><result status="valid" time="1.03" steps="465469"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="scal_add_scal_ket_l&#39;vc.0.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="0.49" steps="412060"/></proof>
          </goal>
          <goal name="scal_add_scal_ket_l&#39;vc.0.0.0.0.0.2.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="0.47" steps="412051"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="scal_add_scal_ket_l&#39;vc.0.0.0.0.0.2.0.1" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="0.46" steps="412060"/></proof>
         </goal>
         <goal name="scal_add_scal_ket_l&#39;vc.0.0.0.0.0.2.0.2" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="0.47" steps="412051"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="add_ket_l_switch&#39;vc" expl="VC for add_ket_l_switch" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_ket_l_switch&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_ket_l">
   <goal name="add_ket_l_switch&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="exists" proved="true" arg1="n">
    <goal name="add_ket_l_switch&#39;vc.0.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="add_ket_l_switch&#39;vc.0.0.0.0" proved="true">
     <proof prover="8"><result status="valid" time="0.85" steps="395565"/></proof>
     </goal>
     <goal name="add_ket_l_switch&#39;vc.0.0.0.1" proved="true">
     <proof prover="8"><result status="valid" time="0.86" steps="395565"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="add_ket_l_switch&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="add_ket_l_switch&#39;vc.0.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="add_ket_l_value">
     <goal name="add_ket_l_switch&#39;vc.0.1.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="add_ket_l_value">
      <goal name="add_ket_l_switch&#39;vc.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="add_ket_l_value">
       <goal name="add_ket_l_switch&#39;vc.0.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="add_ket_l_value">
        <goal name="add_ket_l_switch&#39;vc.0.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="add_ket_l_value">
         <goal name="add_ket_l_switch&#39;vc.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="add_ket_l_value">
          <goal name="add_ket_l_switch&#39;vc.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="0.99" steps="410813"/></proof>
          </goal>
          <goal name="add_ket_l_switch&#39;vc.0.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="0.85" steps="397687"/></proof>
          </goal>
          <goal name="add_ket_l_switch&#39;vc.0.1.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="0.41" steps="347943"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="add_ket_l_switch&#39;vc.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="0.84" steps="397687"/></proof>
         </goal>
         <goal name="add_ket_l_switch&#39;vc.0.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="0.39" steps="347943"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="add_ket_l_switch&#39;vc.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="0.84" steps="397687"/></proof>
        </goal>
        <goal name="add_ket_l_switch&#39;vc.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="0.40" steps="347943"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="add_ket_l_switch&#39;vc.0.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.86" steps="397687"/></proof>
       </goal>
       <goal name="add_ket_l_switch&#39;vc.0.1.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.39" steps="347943"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="add_ket_l_switch&#39;vc.0.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.84" steps="397687"/></proof>
      </goal>
      <goal name="add_ket_l_switch&#39;vc.0.1.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.41" steps="347943"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="add_ket_l_switch&#39;vc.0.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.87" steps="397687"/></proof>
     </goal>
     <goal name="add_ket_l_switch&#39;vc.0.1.0.2" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.40" steps="347943"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="add_ket_scal_fact&#39;vc" expl="VC for add_ket_scal_fact" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_ket_scal_fact&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.14" steps="398654"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_comp_l&#39;vc" expl="VC for ket_sum_comp_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_comp_l&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.69" steps="480592"/></proof>
  </goal>
  <goal name="ket_sum_comp_l&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.66" steps="480704"/></proof>
  </goal>
  <goal name="ket_sum_comp_l&#39;vc.2" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="ket_sum_comp_l&#39;vc.2.0" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="4.15" steps="1338040"/></proof>
   </goal>
   <goal name="ket_sum_comp_l&#39;vc.2.1" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="4.02" steps="1337038"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_sum_comp_l&#39;vc.3" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="ket_sum_comp_l&#39;vc.3.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="ket_sum_comp_l&#39;vc.3.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="ket_sum_comp_l&#39;vc.3.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.24" steps="583716"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ket_sum_comp_l&#39;vc.3.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="ket_sum_comp_l&#39;vc.3.1.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="ket_sum_comp_l&#39;vc.3.1.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.22" steps="583805"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ket_sum_comp_l&#39;vc.4" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_s_rows">
   <goal name="ket_sum_comp_l&#39;vc.4.0" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="ket_sum_comp_l&#39;vc.4.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="ket_sum_comp_l&#39;vc.4.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="4.65" steps="1503923"/></proof>
     </goal>
     <goal name="ket_sum_comp_l&#39;vc.4.0.0.1" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="4.78" steps="1502379"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ket_sum_comp_l&#39;vc.4.1" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="goal_comm">
    <goal name="ket_sum_comp_l&#39;vc.4.1.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_s_rows">
     <goal name="ket_sum_comp_l&#39;vc.4.1.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="ket_sum_comp_l&#39;vc.4.1.0.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="5.30" steps="1505355"/></proof>
      </goal>
      <goal name="ket_sum_comp_l&#39;vc.4.1.0.0.1" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="5.27" steps="1504072"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="ket_sum_comp_l&#39;vc.4.1.0.1" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="4.03" steps="1326712"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ket_sum_comp_l&#39;vc.5" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_s_columns">
   <goal name="ket_sum_comp_l&#39;vc.5.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="ket_sum_comp_l&#39;vc.5.0.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="5.32" steps="1553976"/></proof>
    </goal>
    <goal name="ket_sum_comp_l&#39;vc.5.0.1" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="5.35" steps="1553352"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="ket_sum_comp_l&#39;vc.5.1" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="goal_comm">
    <goal name="ket_sum_comp_l&#39;vc.5.1.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_s_columns">
     <goal name="ket_sum_comp_l&#39;vc.5.1.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="ket_sum_comp_l&#39;vc.5.1.0.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="5.48" steps="1553976"/></proof>
      </goal>
      <goal name="ket_sum_comp_l&#39;vc.5.1.0.0.1" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="5.41" steps="1553352"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="ket_sum_comp_l&#39;vc.5.1.0.1" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="4.80" steps="1371455"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ket_sum_comp_l&#39;vc.6" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.59" steps="537157"/></proof>
  </goal>
  <goal name="ket_sum_comp_l&#39;vc.7" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_ket_">
   <goal name="ket_sum_comp_l&#39;vc.7.0" expl="apply premises" proved="true">
   <transf name="exists" proved="true" arg1="l">
    <goal name="ket_sum_comp_l&#39;vc.7.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="ket_sum_comp_l&#39;vc.7.0.0.0" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="ket_sum_comp_l&#39;vc.7.0.0.0.0" proved="true">
      <transf name="apply" proved="true" arg1="ket_sum_l&#39;spec2">
       <goal name="ket_sum_comp_l&#39;vc.7.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="0.76" steps="480508"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ket_sum_comp_l&#39;vc.7.0.0.1" proved="true">
     <proof prover="8"><result status="valid" time="1.34" steps="471869"/></proof>
     </goal>
     <goal name="ket_sum_comp_l&#39;vc.7.0.0.2" proved="true">
     <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
      <goal name="ket_sum_comp_l&#39;vc.7.0.0.2.0" proved="true">
      <transf name="rewrite" proved="true" arg1="add_ket_l_value">
       <goal name="ket_sum_comp_l&#39;vc.7.0.0.2.0.0" proved="true">
       <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
        <goal name="ket_sum_comp_l&#39;vc.7.0.0.2.0.0.0" proved="true">
        <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
         <goal name="ket_sum_comp_l&#39;vc.7.0.0.2.0.0.0.0" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="ket_sum_comp_l&#39;vc.7.0.0.2.0.0.0.0.0" proved="true">
          <transf name="rewrite" proved="true" arg1="sum_comp_rev">
           <goal name="ket_sum_comp_l&#39;vc.7.0.0.2.0.0.0.0.0.0" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="ket_sum_comp_l&#39;vc.7.0.0.2.0.0.0.0.0.0.0" proved="true">
            <transf name="apply" proved="true" arg1="sum_eq">
             <goal name="ket_sum_comp_l&#39;vc.7.0.0.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="ket_sum_comp_l&#39;vc.7.0.0.2.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="1.45" steps="519901"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="ket_sum_comp_l&#39;vc.7.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="0.50" steps="419459"/></proof>
         </goal>
         <goal name="ket_sum_comp_l&#39;vc.7.0.0.2.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="0.50" steps="419468"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="ket_sum_comp_l&#39;vc.7.0.0.2.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="0.67" steps="419459"/></proof>
        </goal>
        <goal name="ket_sum_comp_l&#39;vc.7.0.0.2.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="0.50" steps="419468"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="ket_sum_comp_l&#39;vc.7.0.0.2.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.69" steps="419468"/></proof>
       </goal>
       <goal name="ket_sum_comp_l&#39;vc.7.0.0.2.0.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.70" steps="419459"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="ket_sum_comp_l&#39;vc.7.0.0.2.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.52" steps="419459"/></proof>
      </goal>
      <goal name="ket_sum_comp_l&#39;vc.7.0.0.2.2" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.53" steps="419468"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_comp_l_rev&#39;vc" expl="VC for ket_sum_comp_l_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_comp_l_rev&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.41" steps="348460"/></proof>
  </goal>
  <goal name="ket_sum_comp_l_rev&#39;vc.1" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="ket_sum_comp_l_rev&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="compute_specified" proved="true" >
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_scalar_l&#39;vc" expl="VC for ket_sum_scalar_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_scalar_l&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_ket_l">
   <goal name="ket_sum_scalar_l&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="exists" proved="true" arg1="l">
    <goal name="ket_sum_scalar_l&#39;vc.0.0.0" proved="true">
    <proof prover="8"><result status="valid" time="0.98" steps="445682"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="ket_sum_scalar_l&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="ket_sum_scalar_l&#39;vc.0.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="scalar_ket_value">
     <goal name="ket_sum_scalar_l&#39;vc.0.1.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
      <goal name="ket_sum_scalar_l&#39;vc.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
       <goal name="ket_sum_scalar_l&#39;vc.0.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="sum_scal_rev">
        <goal name="ket_sum_scalar_l&#39;vc.0.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="sum_eq">
         <goal name="ket_sum_scalar_l&#39;vc.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="ket_sum_scalar_l&#39;vc.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="ket_sum_scalar_l&#39;vc.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="0.88" steps="473324"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="ket_sum_scalar_l&#39;vc.0.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.48" steps="396188"/></proof>
       </goal>
       <goal name="ket_sum_scalar_l&#39;vc.0.1.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="1.17" steps="449782"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="ket_sum_scalar_l&#39;vc.0.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.51" steps="396188"/></proof>
      </goal>
      <goal name="ket_sum_scalar_l&#39;vc.0.1.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.16" steps="449782"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_l_ket_sum_scalar&#39;vc" expl="VC for ket_l_ket_sum_scalar" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_l_ket_sum_scalar&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.04" steps="445817"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="scal_ket_sum_scalar_l&#39;vc" expl="VC for scal_ket_sum_scalar_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="scal_ket_sum_scalar_l&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="scalar_ket_l">
   <goal name="scal_ket_sum_scalar_l&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="scal_ket_sum_scalar_l&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="1.14" steps="512249"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_scalar_rev_l&#39;vc" expl="VC for ket_sum_scalar_rev_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_scalar_rev_l&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ket_sum_scalar_l">
   <goal name="ket_sum_scalar_rev_l&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.39" steps="349312"/></proof>
   </goal>
   <goal name="ket_sum_scalar_rev_l&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.43" steps="349314"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_eq&#39;vc" expl="VC for ket_sum_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_eq&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_ket_l">
   <goal name="ket_sum_eq&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="exists" proved="true" arg1="l">
    <goal name="ket_sum_eq&#39;vc.0.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="ket_sum_eq&#39;vc.0.0.0.0" proved="true">
     <proof prover="8"><result status="valid" time="1.16" steps="500577"/></proof>
     </goal>
     <goal name="ket_sum_eq&#39;vc.0.0.0.1" proved="true">
     <proof prover="8"><result status="valid" time="1.15" steps="500564"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ket_sum_eq&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="ket_sum_eq&#39;vc.0.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
     <goal name="ket_sum_eq&#39;vc.0.1.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
      <goal name="ket_sum_eq&#39;vc.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="sum_eq_gen">
       <goal name="ket_sum_eq&#39;vc.0.1.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="0.55" steps="448892"/></proof>
       </goal>
       <goal name="ket_sum_eq&#39;vc.0.1.0.0.0.1" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="ket_sum_eq&#39;vc.0.1.0.0.0.1.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="0.95" steps="475589"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="ket_sum_eq&#39;vc.0.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.56" steps="448892"/></proof>
      </goal>
      <goal name="ket_sum_eq&#39;vc.0.1.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.23" steps="505386"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="ket_sum_eq&#39;vc.0.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.55" steps="448892"/></proof>
     </goal>
     <goal name="ket_sum_eq&#39;vc.0.1.0.2" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.23" steps="505386"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_eq_gen&#39;vc" expl="VC for ket_sum_eq_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_eq_gen&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.55" steps="447707"/></proof>
  </goal>
  <goal name="ket_sum_eq_gen&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.54" steps="447710"/></proof>
  </goal>
  <goal name="ket_sum_eq_gen&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.90" steps="472364"/></proof>
  </goal>
  <goal name="ket_sum_eq_gen&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.86" steps="473634"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_eq_by_sum&#39;vc" expl="VC for ket_sum_eq_by_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_eq_by_sum&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_ket_l">
   <goal name="ket_sum_eq_by_sum&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="exists" proved="true" arg1="l1">
    <goal name="ket_sum_eq_by_sum&#39;vc.0.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="ket_sum_eq_by_sum&#39;vc.0.0.0.0" proved="true">
     <proof prover="8"><result status="valid" time="1.07" steps="487486"/></proof>
     </goal>
     <goal name="ket_sum_eq_by_sum&#39;vc.0.0.0.1" proved="true">
     <proof prover="8"><result status="valid" time="1.06" steps="487480"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ket_sum_eq_by_sum&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="ket_sum_eq_by_sum&#39;vc.0.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
     <goal name="ket_sum_eq_by_sum&#39;vc.0.1.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
      <goal name="ket_sum_eq_by_sum&#39;vc.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="s&#39;" arg2="s">
       <goal name="ket_sum_eq_by_sum&#39;vc.0.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="Requires">
        <goal name="ket_sum_eq_by_sum&#39;vc.0.1.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.17" steps="491987"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="ket_sum_eq_by_sum&#39;vc.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="8"><result status="valid" time="0.53" steps="437110"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="ket_sum_eq_by_sum&#39;vc.0.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.03" steps="460774"/></proof>
      </goal>
      <goal name="ket_sum_eq_by_sum&#39;vc.0.1.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.50" steps="491990"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="ket_sum_eq_by_sum&#39;vc.0.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.51" steps="437103"/></proof>
     </goal>
     <goal name="ket_sum_eq_by_sum&#39;vc.0.1.0.2" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.49" steps="491987"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_bvs_eq&#39;vc" expl="VC for ket_sum_bvs_eq" proved="true">
 <proof prover="8"><result status="valid" time="1.16" steps="488957"/></proof>
 </goal>
 <goal name="ket_sum_scal_bvs_eq&#39;vc" expl="VC for ket_sum_scal_bvs_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_scal_bvs_eq&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="scalar_eq_gen">
   <goal name="ket_sum_scal_bvs_eq&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
    <goal name="ket_sum_scal_bvs_eq&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.55" steps="447919"/></proof>
    </goal>
    <goal name="ket_sum_scal_bvs_eq&#39;vc.0.0.1" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.59" steps="455127"/></proof>
    </goal>
    <goal name="ket_sum_scal_bvs_eq&#39;vc.0.0.2" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.54" steps="447919"/></proof>
    </goal>
    <goal name="ket_sum_scal_bvs_eq&#39;vc.0.0.3" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.87" steps="472063"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="ket_sum_scal_bvs_eq&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="0.51" steps="447919"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_sum_bvs_eq&#39;vc" expl="VC for ket_sum_sum_bvs_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_sum_bvs_eq&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
   <goal name="ket_sum_sum_bvs_eq&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="0.90" steps="497694"/></proof>
   </goal>
   <goal name="ket_sum_sum_bvs_eq&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="0.62" steps="480286"/></proof>
   </goal>
   <goal name="ket_sum_sum_bvs_eq&#39;vc.0.2" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="0.63" steps="480284"/></proof>
   </goal>
   <goal name="ket_sum_sum_bvs_eq&#39;vc.0.3" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="ket_sum_sum_bvs_eq&#39;vc.0.3.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="ket_sum_sum_bvs_eq&#39;vc.0.3.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
      <goal name="ket_sum_sum_bvs_eq&#39;vc.0.3.0.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="0.57" steps="473110"/></proof>
      </goal>
      <goal name="ket_sum_sum_bvs_eq&#39;vc.0.3.0.0.1" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="0.60" steps="480303"/></proof>
      </goal>
      <goal name="ket_sum_sum_bvs_eq&#39;vc.0.3.0.0.2" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="0.62" steps="480301"/></proof>
      </goal>
      <goal name="ket_sum_sum_bvs_eq&#39;vc.0.3.0.0.3" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="0.96" steps="498262"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_sum_scal_bvs_eq&#39;vc" expl="VC for ket_sum_sum_scal_bvs_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_sum_scal_bvs_eq&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="scalar_eq_gen">
   <goal name="ket_sum_sum_scal_bvs_eq&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
    <goal name="ket_sum_sum_scal_bvs_eq&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.93" steps="498563"/></proof>
    </goal>
    <goal name="ket_sum_sum_scal_bvs_eq&#39;vc.0.0.1" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.62" steps="481150"/></proof>
    </goal>
    <goal name="ket_sum_sum_scal_bvs_eq&#39;vc.0.0.2" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.63" steps="481148"/></proof>
    </goal>
    <goal name="ket_sum_sum_scal_bvs_eq&#39;vc.0.0.3" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="ket_sum_sum_scal_bvs_eq&#39;vc.0.0.3.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ket_sum_sum_scal_bvs_eq&#39;vc.0.0.3.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
       <goal name="ket_sum_sum_scal_bvs_eq&#39;vc.0.0.3.0.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="0.57" steps="473974"/></proof>
       </goal>
       <goal name="ket_sum_sum_scal_bvs_eq&#39;vc.0.0.3.0.0.1" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="0.61" steps="481167"/></proof>
       </goal>
       <goal name="ket_sum_sum_scal_bvs_eq&#39;vc.0.0.3.0.0.2" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="0.63" steps="481165"/></proof>
       </goal>
       <goal name="ket_sum_sum_scal_bvs_eq&#39;vc.0.0.3.0.0.3" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="0.95" steps="499131"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ket_sum_sum_scal_bvs_eq&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="0.57" steps="473960"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_sum_scal_mult_bvs_eq&#39;vc" expl="VC for ket_sum_sum_scal_mult_bvs_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_sum_scal_mult_bvs_eq&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ket_sum_scalar_rev_l">
   <goal name="ket_sum_sum_scal_mult_bvs_eq&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ket_sum_scalar_rev_l">
    <goal name="ket_sum_sum_scal_mult_bvs_eq&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_scalar_rev_l">
     <goal name="ket_sum_sum_scal_mult_bvs_eq&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
      <goal name="ket_sum_sum_scal_mult_bvs_eq&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="0.90" steps="499527"/></proof>
      </goal>
      <goal name="ket_sum_sum_scal_mult_bvs_eq&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="0.63" steps="482110"/></proof>
      </goal>
      <goal name="ket_sum_sum_scal_mult_bvs_eq&#39;vc.0.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="0.61" steps="482108"/></proof>
      </goal>
      <goal name="ket_sum_sum_scal_mult_bvs_eq&#39;vc.0.0.0.0.3" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="ket_sum_sum_scal_mult_bvs_eq&#39;vc.0.0.0.0.3.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="ket_sum_sum_scal_mult_bvs_eq&#39;vc.0.0.0.0.3.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="ket_sum_scalar_rev_l">
         <goal name="ket_sum_sum_scal_mult_bvs_eq&#39;vc.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="ket_sum_scalar_rev_l">
          <goal name="ket_sum_sum_scal_mult_bvs_eq&#39;vc.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
           <goal name="ket_sum_sum_scal_mult_bvs_eq&#39;vc.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="0.89" steps="499541"/></proof>
           </goal>
           <goal name="ket_sum_sum_scal_mult_bvs_eq&#39;vc.0.0.0.0.3.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="0.62" steps="482124"/></proof>
           </goal>
           <goal name="ket_sum_sum_scal_mult_bvs_eq&#39;vc.0.0.0.0.3.0.0.0.0.2" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="0.60" steps="482122"/></proof>
           </goal>
           <goal name="ket_sum_sum_scal_mult_bvs_eq&#39;vc.0.0.0.0.3.0.0.0.0.3" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="ket_sum_sum_scal_mult_bvs_eq&#39;vc.0.0.0.0.3.0.0.0.0.3.0" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="0.96" steps="501057"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="ket_sum_sum_scal_mult_bvs_eq&#39;vc.0.0.0.0.3.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="0.57" steps="474938"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="ket_sum_sum_scal_mult_bvs_eq&#39;vc.0.0.0.0.3.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="0.94" steps="499541"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ket_sum_sum_scal_mult_bvs_eq&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.93" steps="499526"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="ket_sum_sum_scal_mult_bvs_eq&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.90" steps="499526"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="ket_sum_sum_scal_mult_bvs_eq&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.94" steps="499527"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_l_cardone&#39;vc" expl="VC for ket_sum_l_cardone" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_l_cardone&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_ket">
   <goal name="ket_sum_l_cardone&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.20" steps="481057"/></proof>
   </goal>
   <goal name="ket_sum_l_cardone&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="0.88" steps="448918"/></proof>
   </goal>
   <goal name="ket_sum_l_cardone&#39;vc.0.2" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.16" steps="481614"/></proof>
   </goal>
   <goal name="ket_sum_l_cardone&#39;vc.0.3" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.43" steps="596017"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_l_empty&#39;vc" expl="VC for ket_sum_l_empty" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_l_empty&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="ket_sum_l_empty&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ket_sum_l&#39;def2">
    <goal name="ket_sum_l_empty&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
    <goal name="ket_sum_l_empty&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.55" steps="448339"/></proof>
    </goal>
    <goal name="ket_sum_l_empty&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.54" steps="448339"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_l_cardone_&#39;vc" expl="VC for ket_sum_l_cardone_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_l_cardone_&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_ket_l">
   <goal name="ket_sum_l_cardone_&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="exists" proved="true" arg1="l">
    <goal name="ket_sum_l_cardone_&#39;vc.0.0.0" proved="true">
    <proof prover="8"><result status="valid" time="1.22" steps="546094"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="ket_sum_l_cardone_&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="ket_sum_l_cardone_&#39;vc.0.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="assert_make_ket_l">
     <goal name="ket_sum_l_cardone_&#39;vc.0.1.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="ket_sum_l_cardone_&#39;vc.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
       <goal name="ket_sum_l_cardone_&#39;vc.0.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="sum_one">
        <goal name="ket_sum_l_cardone_&#39;vc.0.1.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="0.89" steps="482174"/></proof>
        </goal>
        <goal name="ket_sum_l_cardone_&#39;vc.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="0.52" steps="426451"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="ket_sum_l_cardone_&#39;vc.0.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.50" steps="426451"/></proof>
       </goal>
       <goal name="ket_sum_l_cardone_&#39;vc.0.1.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="1.21" steps="481951"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ket_sum_l_cardone_&#39;vc.0.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.53" steps="426451"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_l_plus_one&#39;vc" expl="VC for ket_sum_l_plus_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_l_plus_one&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_ket_l">
   <goal name="ket_sum_l_plus_one&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="exists" proved="true" arg1="l">
    <goal name="ket_sum_l_plus_one&#39;vc.0.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="ket_sum_l_plus_one&#39;vc.0.0.0.0" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="ket_sum_l_plus_one&#39;vc.0.0.0.0.0" proved="true">
      <proof prover="8"><result status="valid" time="1.36" steps="600609"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="ket_sum_l_plus_one&#39;vc.0.0.0.1" proved="true">
     <proof prover="8"><result status="valid" time="1.19" steps="520197"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ket_sum_l_plus_one&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="ket_sum_l_plus_one&#39;vc.0.1.0" expl="apply premises" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="ket_sum_l_plus_one&#39;vc.0.1.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
      <goal name="ket_sum_l_plus_one&#39;vc.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="add_ket_l_value">
       <goal name="ket_sum_l_plus_one&#39;vc.0.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
        <goal name="ket_sum_l_plus_one&#39;vc.0.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="sum_add">
         <goal name="ket_sum_l_plus_one&#39;vc.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="add_eq_t_rev">
          <goal name="ket_sum_l_plus_one&#39;vc.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.14" steps="602470"/></proof>
          </goal>
          <goal name="ket_sum_l_plus_one&#39;vc.0.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.56" steps="634945"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="ket_sum_l_plus_one&#39;vc.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="0.63" steps="544338"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="ket_sum_l_plus_one&#39;vc.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="0.68" steps="544340"/></proof>
        </goal>
        <goal name="ket_sum_l_plus_one&#39;vc.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="1.36" steps="602875"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="ket_sum_l_plus_one&#39;vc.0.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="1.33" steps="602875"/></proof>
       </goal>
       <goal name="ket_sum_l_plus_one&#39;vc.0.1.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.63" steps="544340"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="ket_sum_l_plus_one&#39;vc.0.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.70" steps="544340"/></proof>
      </goal>
      <goal name="ket_sum_l_plus_one&#39;vc.0.1.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.46" steps="602875"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_n_bvs_pos&#39;vc" expl="VC for ket_sum_n_bvs_pos" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_n_bvs_pos&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ket_sum_l_to_mat_sum">
   <goal name="ket_sum_n_bvs_pos&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_sum_n_bvs_pos">
    <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_l_to_mat_sum">
     <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="ket_sum_l_to_mat_sum">
      <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="add_ket_l_to_add_mat">
       <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="compute_specified" proved="true" >
       </transf>
       </goal>
       <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.53" steps="355698"/></proof>
       </goal>
       <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0.2" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_is_a_ket_l">
        <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0.2.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="0.57" steps="355698"/></proof>
        </goal>
        <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0.2.1" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="columns_mat_sum">
         <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0.2.1.0" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="0.22" steps="3127"/></proof>
         </goal>
         <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0.2.1.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_constant_size">
          <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0.2.1.1.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="3.50" steps="1272689"/></proof>
          </goal>
          <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0.2.1.1.1" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0.2.1.1.1.0" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="1.30" steps="520533"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0.2.1.2" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="3.44" steps="1211929"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0.2.2" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="rows_mat_sum">
         <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0.2.2.0" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="0.22" steps="3127"/></proof>
         </goal>
         <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0.2.2.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_constant_size">
          <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0.2.2.1.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="4.26" steps="1272689"/></proof>
          </goal>
          <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0.2.2.1.1" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0.2.2.1.1.0" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="1.31" steps="520533"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0.2.2.2" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="4.08" steps="1224974"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0.3" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_is_a_ket_l">
        <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0.3.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="0.44" steps="355698"/></proof>
        </goal>
        <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0.3.1" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="columns_mat_sum">
         <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0.3.1.0" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="0.23" steps="3127"/></proof>
         </goal>
         <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0.3.1.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_constant_size">
          <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0.3.1.1.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="4.02" steps="1272650"/></proof>
          </goal>
          <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0.3.1.1.1" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0.3.1.1.1.0" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="1.34" steps="520533"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0.3.1.2" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="3.94" steps="1211842"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0.3.2" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="rows_mat_sum">
         <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0.3.2.0" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="0.22" steps="3127"/></proof>
         </goal>
         <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0.3.2.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_constant_size">
          <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0.3.2.1.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="4.04" steps="1272650"/></proof>
          </goal>
          <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0.3.2.1.1" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0.3.2.1.1.0" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="1.31" steps="520533"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.0.3.2.2" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="3.43" steps="1224975"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.55" steps="355698"/></proof>
      </goal>
      <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.21" steps="3128"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.41" steps="355698"/></proof>
     </goal>
     <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.23" steps="3128"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.47" steps="355700"/></proof>
    </goal>
    <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.2.0" expl="rewrite premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.2.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.2.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.2.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.31" steps="520348"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.2.0.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.2.0.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="ket_sum_n_bvs_pos&#39;vc.0.0.2.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.33" steps="520445"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ket_sum_n_bvs_pos&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.52" steps="355698"/></proof>
   </goal>
   <goal name="ket_sum_n_bvs_pos&#39;vc.0.2" expl="rewrite premises" proved="true">
   <proof prover="7"><result status="valid" time="0.23" steps="3144"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_bitvec_one&#39;vc" expl="VC for ket_sum_bitvec_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_bitvec_one&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.76" steps="466903"/></proof>
  </goal>
  <goal name="ket_sum_bitvec_one&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.81" steps="466934"/></proof>
  </goal>
  <goal name="ket_sum_bitvec_one&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.77" steps="496661"/></proof>
  </goal>
  <goal name="ket_sum_bitvec_one&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.91" steps="562959"/></proof>
  </goal>
  <goal name="ket_sum_bitvec_one&#39;vc.4" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.98" steps="570478"/></proof>
  </goal>
  <goal name="ket_sum_bitvec_one&#39;vc.5" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.03" steps="626213"/></proof>
  </goal>
  <goal name="ket_sum_bitvec_one&#39;vc.6" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(n_bvs 1)" arg2="(add (int_to_bv 1 1) (to_set (int_to_bv 0 1)))">
   <goal name="ket_sum_bitvec_one&#39;vc.6.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ket_sum_l (add (int_to_bv 1 1) (to_set (int_to_bv 0 1))) f l)" arg2="(ket_sum_l (add (int_to_bv 1 1) (to_set (int_to_bv 0 1)))
  (fun (e:bitvec) -&gt;
    make_ket l
    ((fun (y0:matrix complex) (y1:int) -&gt; get_ket y0 y1) @ (f @ e)))
  l)">
    <goal name="ket_sum_bitvec_one&#39;vc.6.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures">
     <goal name="ket_sum_bitvec_one&#39;vc.6.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="ket_sum_l_cardone">
      <goal name="ket_sum_bitvec_one&#39;vc.6.0.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="ket_sum_bitvec_one&#39;vc.6.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="set_equal_ket_l">
        <goal name="ket_sum_bitvec_one&#39;vc.6.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="exists" proved="true" arg1="l">
         <goal name="ket_sum_bitvec_one&#39;vc.6.0.0.0.0.0.0.0" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="ket_sum_bitvec_one&#39;vc.6.0.0.0.0.0.0.0.0" proved="true">
          <proof prover="8"><result status="valid" time="2.06" steps="626712"/></proof>
          </goal>
          <goal name="ket_sum_bitvec_one&#39;vc.6.0.0.0.0.0.0.0.1" proved="true">
          <proof prover="8"><result status="valid" time="1.98" steps="626646"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="ket_sum_bitvec_one&#39;vc.6.0.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="ket_sum_bitvec_one&#39;vc.6.0.0.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="add_ket_l_value">
          <goal name="ket_sum_bitvec_one&#39;vc.6.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="add_ket_l_value">
           <goal name="ket_sum_bitvec_one&#39;vc.6.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="add_eq_t">
            <goal name="ket_sum_bitvec_one&#39;vc.6.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="assert_make_ket_l">
             <goal name="ket_sum_bitvec_one&#39;vc.6.0.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.89" steps="629751"/></proof>
             </goal>
             <goal name="ket_sum_bitvec_one&#39;vc.6.0.0.0.0.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="0.92" steps="565043"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="ket_sum_bitvec_one&#39;vc.6.0.0.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="5.47" steps="1389532"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="ket_sum_bitvec_one&#39;vc.6.0.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="2.02" steps="629156"/></proof>
           </goal>
           <goal name="ket_sum_bitvec_one&#39;vc.6.0.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="0.90" steps="565043"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="ket_sum_bitvec_one&#39;vc.6.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="1.98" steps="629156"/></proof>
          </goal>
          <goal name="ket_sum_bitvec_one&#39;vc.6.0.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="0.86" steps="565043"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="ket_sum_bitvec_one&#39;vc.6.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.88" steps="564852"/></proof>
      </goal>
      <goal name="ket_sum_bitvec_one&#39;vc.6.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.86" steps="564852"/></proof>
      </goal>
      <goal name="ket_sum_bitvec_one&#39;vc.6.0.0.0.3" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="4.72" steps="1235429"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="ket_sum_bitvec_one&#39;vc.6.0.1" expl="equality hypothesis" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="ket_sum_bitvec_one&#39;vc.6.0.1.0" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="set_equal_ket_l">
      <goal name="ket_sum_bitvec_one&#39;vc.6.0.1.0.0" expl="apply premises" proved="true">
      <transf name="exists" proved="true" arg1="l">
       <goal name="ket_sum_bitvec_one&#39;vc.6.0.1.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="ket_sum_bitvec_one&#39;vc.6.0.1.0.0.0.0" proved="true">
        <proof prover="8"><result status="valid" time="4.68" steps="1237555"/></proof>
        </goal>
        <goal name="ket_sum_bitvec_one&#39;vc.6.0.1.0.0.0.1" proved="true">
        <proof prover="8"><result status="valid" time="4.63" steps="1236891"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="ket_sum_bitvec_one&#39;vc.6.0.1.0.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="ket_sum_bitvec_one&#39;vc.6.0.1.0.1.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
        <goal name="ket_sum_bitvec_one&#39;vc.6.0.1.0.1.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
         <goal name="ket_sum_bitvec_one&#39;vc.6.0.1.0.1.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="sum_eq">
          <goal name="ket_sum_bitvec_one&#39;vc.6.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="ket_sum_bitvec_one&#39;vc.6.0.1.0.1.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="ket_sum_bitvec_one&#39;vc.6.0.1.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="1.94" steps="630918"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="ket_sum_bitvec_one&#39;vc.6.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="0.85" steps="564898"/></proof>
         </goal>
         <goal name="ket_sum_bitvec_one&#39;vc.6.0.1.0.1.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="1.79" steps="28499"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="ket_sum_bitvec_one&#39;vc.6.0.1.0.1.0.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="0.89" steps="564898"/></proof>
        </goal>
        <goal name="ket_sum_bitvec_one&#39;vc.6.0.1.0.1.0.2" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="1.80" steps="28499"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ket_sum_bitvec_one&#39;vc.6.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="set_equal">
    <goal name="ket_sum_bitvec_one&#39;vc.6.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="ket_sum_bitvec_one&#39;vc.6.1.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="e" arg2="(int_to_bv (bv_to_int e) 1)">
      <goal name="ket_sum_bitvec_one&#39;vc.6.1.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="(0&lt;= (bv_to_int e)  &lt;2)">
       <goal name="ket_sum_bitvec_one&#39;vc.6.1.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="8"><result status="valid" time="2.31" steps="720897"/></proof>
       </goal>
       <goal name="ket_sum_bitvec_one&#39;vc.6.1.0.0.0.1" expl="apply premises" proved="true">
       <transf name="case" proved="true" arg1="(bv_to_int e = 0)">
        <goal name="ket_sum_bitvec_one&#39;vc.6.1.0.0.0.1.0" expl="true case (apply premises)" proved="true">
        <proof prover="8"><result status="valid" time="1.53" steps="592689"/></proof>
        </goal>
        <goal name="ket_sum_bitvec_one&#39;vc.6.1.0.0.0.1.1" expl="false case (apply premises)" proved="true">
        <proof prover="8"><result status="valid" time="1.47" steps="592742"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="ket_sum_bitvec_one&#39;vc.6.1.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="8"><result status="valid" time="1.99" steps="627991"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="ket_sum_bitvec_one&#39;vc.6.1.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="ket_sum_bitvec_one&#39;vc.6.1.1.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="in_n_bvs">
      <goal name="ket_sum_bitvec_one&#39;vc.6.1.1.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="1.01" steps="564871"/></proof>
      </goal>
      <goal name="ket_sum_bitvec_one&#39;vc.6.1.1.0.1" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="2.49" steps="634506"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_bitvec_zero&#39;vc" expl="VC for ket_sum_bitvec_zero" proved="true">
 <proof prover="8"><result status="valid" time="1.95" steps="739219"/></proof>
 </goal>
 <goal name="ket_sum_l_valid_index&#39;vc" expl="VC for ket_sum_l_valid_index" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_l_valid_index&#39;vc.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(cardinal s = 0)">
   <goal name="ket_sum_l_valid_index&#39;vc.0.0" expl="true case (postcondition)" proved="true">
   <transf name="rewrite" proved="true" arg1="ket_sum_l_empty">
    <goal name="ket_sum_l_valid_index&#39;vc.0.0.0" expl="true case (postcondition)" proved="true">
    <proof prover="8"><result status="valid" time="0.91" steps="460279"/></proof>
    </goal>
    <goal name="ket_sum_l_valid_index&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.47" steps="393711"/></proof>
    </goal>
    <goal name="ket_sum_l_valid_index&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.51" steps="393711"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="ket_sum_l_valid_index&#39;vc.0.1" expl="false case (postcondition)" proved="true">
   <transf name="apply" proved="true" arg1="set_ket_valid_index">
    <goal name="ket_sum_l_valid_index&#39;vc.0.1.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="1.23" steps="481638"/></proof>
    </goal>
    <goal name="ket_sum_l_valid_index&#39;vc.0.1.1" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(ket_length (ket_sum_l s f l))" arg2="l">
     <goal name="ket_sum_l_valid_index&#39;vc.0.1.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ket_sum_l_valid_index&#39;vc.0.1.1.0.0" proved="true">
      <proof prover="8"><result status="valid" time="0.48" steps="393715"/></proof>
      </goal>
      <goal name="ket_sum_l_valid_index&#39;vc.0.1.1.0.1" proved="true">
      <proof prover="8"><result status="valid" time="1.15" steps="444971"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="ket_sum_l_valid_index&#39;vc.0.1.1.1" expl="equality hypothesis" proved="true">
     <proof prover="8"><result status="valid" time="1.19" steps="481906"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_const&#39;vc" expl="VC for ket_sum_const" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_const&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.54" steps="444183"/></proof>
  </goal>
  <goal name="ket_sum_const&#39;vc.1" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(cardinal s = 0)">
   <goal name="ket_sum_const&#39;vc.1.0" expl="true case (postcondition)" proved="true">
   <transf name="rewrite" proved="true" arg1="ket_sum_l_empty">
    <goal name="ket_sum_const&#39;vc.1.0.0" expl="true case (postcondition)" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_ket_l">
     <goal name="ket_sum_const&#39;vc.1.0.0.0" expl="apply premises" proved="true">
     <transf name="exists" proved="true" arg1="l">
      <goal name="ket_sum_const&#39;vc.1.0.0.0.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="ket_sum_const&#39;vc.1.0.0.0.0.0" proved="true">
       <proof prover="8"><result status="valid" time="1.74" steps="520827"/></proof>
       </goal>
       <goal name="ket_sum_const&#39;vc.1.0.0.0.0.1" proved="true">
       <proof prover="8"><result status="valid" time="1.30" steps="452992"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ket_sum_const&#39;vc.1.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ket_sum_const&#39;vc.1.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="2.53" steps="712292"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="ket_sum_const&#39;vc.1.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.56" steps="429380"/></proof>
    </goal>
    <goal name="ket_sum_const&#39;vc.1.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.76" steps="429380"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="ket_sum_const&#39;vc.1.1" expl="false case (postcondition)" proved="true">
   <transf name="apply" proved="true" arg1="set_equal_ket_l">
    <goal name="ket_sum_const&#39;vc.1.1.0" expl="apply premises" proved="true">
    <transf name="exists" proved="true" arg1="l">
     <goal name="ket_sum_const&#39;vc.1.1.0.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ket_sum_const&#39;vc.1.1.0.0.0" proved="true">
      <proof prover="8"><result status="valid" time="1.66" steps="483070"/></proof>
      </goal>
      <goal name="ket_sum_const&#39;vc.1.1.0.0.1" proved="true">
      <proof prover="8"><result status="valid" time="1.27" steps="452984"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="ket_sum_const&#39;vc.1.1.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="ket_sum_const&#39;vc.1.1.1.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
      <goal name="ket_sum_const&#39;vc.1.1.1.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(i_to_c (cardinal s) *.. x)" arg2="( mat_sum s (fun (_:a) -&gt; x) )">
       <goal name="ket_sum_const&#39;vc.1.1.1.0.0.0" expl="apply premises" proved="true">
       <transf name="eliminate_definition" proved="true" >
        <goal name="ket_sum_const&#39;vc.1.1.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="get_ket&#39;def">
         <goal name="ket_sum_const&#39;vc.1.1.1.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="get_ket&#39;def">
          <goal name="ket_sum_const&#39;vc.1.1.1.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="mat_sum_value">
           <goal name="ket_sum_const&#39;vc.1.1.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
           </transf>
           </goal>
           <goal name="ket_sum_const&#39;vc.1.1.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="1.92" steps="563937"/></proof>
           </goal>
           <goal name="ket_sum_const&#39;vc.1.1.1.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="1.56" steps="481714"/></proof>
           </goal>
           <goal name="ket_sum_const&#39;vc.1.1.1.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="set_valid_index">
            <goal name="ket_sum_const&#39;vc.1.1.1.0.0.0.0.0.0.3.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="ket_sum_const&#39;vc.1.1.1.0.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="0.76" steps="430869"/></proof>
             </goal>
             <goal name="ket_sum_const&#39;vc.1.1.1.0.0.0.0.0.0.3.0.1" expl="apply premises" proved="true">
             <transf name="replace" proved="true" arg1="(rows (mat_sum s (fun (_:a) -&gt; x)))" arg2="(power 2 l)">
              <goal name="ket_sum_const&#39;vc.1.1.1.0.0.0.0.0.0.3.0.1.0" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="1.54" steps="483980"/></proof>
              </goal>
              <goal name="ket_sum_const&#39;vc.1.1.1.0.0.0.0.0.0.3.0.1.1" expl="equality hypothesis" proved="true">
              <transf name="apply" proved="true" arg1="rows_mat_sum">
               <goal name="ket_sum_const&#39;vc.1.1.1.0.0.0.0.0.0.3.0.1.1.0" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="0.54" steps="430867"/></proof>
               </goal>
               <goal name="ket_sum_const&#39;vc.1.1.1.0.0.0.0.0.0.3.0.1.1.1" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="1.50" steps="563937"/></proof>
               </goal>
               <goal name="ket_sum_const&#39;vc.1.1.1.0.0.0.0.0.0.3.0.1.1.2" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="1.27" steps="502069"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="ket_sum_const&#39;vc.1.1.1.0.0.0.0.0.0.3.1" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="ket_sum_const&#39;vc.1.1.1.0.0.0.0.0.0.3.1.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="0.52" steps="430876"/></proof>
             </goal>
             <goal name="ket_sum_const&#39;vc.1.1.1.0.0.0.0.0.0.3.1.1" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.41" steps="488659"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="ket_sum_const&#39;vc.1.1.1.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="goal_comm">
        <goal name="ket_sum_const&#39;vc.1.1.1.0.0.1.0" expl="apply premises" proved="true">
        <transf name="destruct" proved="true" arg1="H2">
         <goal name="ket_sum_const&#39;vc.1.1.1.0.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="0.64" steps="431213"/></proof>
         </goal>
         <goal name="ket_sum_const&#39;vc.1.1.1.0.0.1.0.1" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.18" steps="456331"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="ket_sum_const&#39;vc.1.1.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.51" steps="431221"/></proof>
      </goal>
      <goal name="ket_sum_const&#39;vc.1.1.1.0.2" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.51" steps="487680"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_const_w&#39;vc" expl="VC for ket_sum_const_w" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_const_w&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.47" steps="394391"/></proof>
  </goal>
  <goal name="ket_sum_const_w&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.45" steps="394394"/></proof>
  </goal>
  <goal name="ket_sum_const_w&#39;vc.2" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="ket_sum_const_w&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="scalar_assoc">
    <goal name="ket_sum_const_w&#39;vc.2.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="scalar_c_one_gen">
     <goal name="ket_sum_const_w&#39;vc.2.0.0.0" expl="postcondition" proved="true">
     <proof prover="8"><result status="valid" time="0.51" steps="428670"/></proof>
     </goal>
     <goal name="ket_sum_const_w&#39;vc.2.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.18" steps="484075"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="map_ket_sum_l&#39;vc" expl="VC for map_ket_sum_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="map_ket_sum_l&#39;vc.0" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="map_ket_sum_l&#39;vc.0.0" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.35" steps="471886"/></proof>
   </goal>
   <goal name="map_ket_sum_l&#39;vc.0.1" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.15" steps="475740"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="map_ket_sum_l&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.49" steps="421132"/></proof>
  </goal>
  <goal name="map_ket_sum_l&#39;vc.2" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_injective">
   <goal name="map_ket_sum_l&#39;vc.2.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="map_ket_sum_l&#39;vc.2.0.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="1.40" steps="524208"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="map_ket_sum_l&#39;vc.3" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(cardinal s = 0)">
   <goal name="map_ket_sum_l&#39;vc.3.0" expl="true case (postcondition)" proved="true">
   <transf name="rewrite" proved="true" arg1="ket_sum_l_empty">
    <goal name="map_ket_sum_l&#39;vc.3.0.0" expl="true case (postcondition)" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_l_empty">
     <goal name="map_ket_sum_l&#39;vc.3.0.0.0" expl="true case (postcondition)" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
     <goal name="map_ket_sum_l&#39;vc.3.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.61" steps="510351"/></proof>
     </goal>
     <goal name="map_ket_sum_l&#39;vc.3.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.79" steps="510351"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="map_ket_sum_l&#39;vc.3.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.80" steps="510351"/></proof>
    </goal>
    <goal name="map_ket_sum_l&#39;vc.3.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.41" steps="563483"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="map_ket_sum_l&#39;vc.3.1" expl="false case (postcondition)" proved="true">
   <transf name="rewrite" proved="true" arg1="ket_sum_l_to_mat_sum">
    <goal name="map_ket_sum_l&#39;vc.3.1.0" expl="false case (postcondition)" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_l_to_mat_sum">
     <goal name="map_ket_sum_l&#39;vc.3.1.0.0" expl="false case (postcondition)" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="map_ket_sum_l&#39;vc.3.1.0.0.0" expl="false case (postcondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="map_mat_sum">
       <goal name="map_ket_sum_l&#39;vc.3.1.0.0.0.0" expl="false case (postcondition)" proved="true">
       <transf name="apply" proved="true" arg1="mat_sum_eq">
        <goal name="map_ket_sum_l&#39;vc.3.1.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.70" steps="565232"/></proof>
        </goal>
        <goal name="map_ket_sum_l&#39;vc.3.1.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="map_ket_sum_l&#39;vc.3.1.0.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="map_ket_sum_l&#39;vc.3.1.0.0.0.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="2.02" steps="650304"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="map_ket_sum_l&#39;vc.3.1.0.0.0.0.1.1" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="map_ket_sum_l&#39;vc.3.1.0.0.0.0.1.1.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.97" steps="650423"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="map_ket_sum_l&#39;vc.3.1.0.0.0.0.2" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="map_ket_sum_l&#39;vc.3.1.0.0.0.0.2.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="map_ket_sum_l&#39;vc.3.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="1.62" steps="565232"/></proof>
       </goal>
       <goal name="map_ket_sum_l&#39;vc.3.1.0.0.0.2" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="map_ket_sum_l&#39;vc.3.1.0.0.0.2.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="map_ket_sum_l&#39;vc.3.1.0.0.0.2.0.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.95" steps="650304"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="map_ket_sum_l&#39;vc.3.1.0.0.0.2.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="map_ket_sum_l&#39;vc.3.1.0.0.0.2.1.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.99" steps="650423"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="map_ket_sum_l&#39;vc.3.1.0.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.79" steps="510356"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="map_ket_sum_l&#39;vc.3.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.78" steps="510356"/></proof>
     </goal>
     <goal name="map_ket_sum_l&#39;vc.3.1.0.2" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.66" steps="565232"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="map_ket_sum_l&#39;vc.3.1.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.64" steps="510356"/></proof>
    </goal>
    <goal name="map_ket_sum_l&#39;vc.3.1.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.72" steps="593903"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_l_to_n_bvs&#39;vc" expl="VC for ket_sum_l_to_n_bvs" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_l_to_n_bvs&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.46" steps="372024"/></proof>
  </goal>
  <goal name="ket_sum_l_to_n_bvs&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.51" steps="428350"/></proof>
  </goal>
  <goal name="ket_sum_l_to_n_bvs&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.63" steps="510133"/></proof>
  </goal>
  <goal name="ket_sum_l_to_n_bvs&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.63" steps="510136"/></proof>
  </goal>
  <goal name="ket_sum_l_to_n_bvs&#39;vc.4" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(to_fset 0 (power 2 l))" arg2="(map (fun (y0:bitvec) -&gt; bv_to_int y0) (n_bvs l))">
   <goal name="ket_sum_l_to_n_bvs&#39;vc.4.0" expl="postcondition" proved="true">
   <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Ensures">
    <goal name="ket_sum_l_to_n_bvs&#39;vc.4.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="Ensures">
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ket_sum_l_to_n_bvs&#39;vc.4.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="goal_comm">
    <goal name="ket_sum_l_to_n_bvs&#39;vc.4.1.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_map_eq">
     <goal name="ket_sum_l_to_n_bvs&#39;vc.4.1.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ket_sum_l_to_n_bvs&#39;vc.4.1.0.0.0" expl="apply premises" proved="true">
      <transf name="exists" proved="true" arg1="(int_to_bv b l)">
       <goal name="ket_sum_l_to_n_bvs&#39;vc.4.1.0.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="ket_sum_l_to_n_bvs&#39;vc.4.1.0.0.0.0.0" proved="true">
        <proof prover="8"><result status="valid" time="2.19" steps="728302"/></proof>
        </goal>
        <goal name="ket_sum_l_to_n_bvs&#39;vc.4.1.0.0.0.0.1" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="ket_sum_l_to_n_bvs&#39;vc.4.1.0.0.0.0.1.0" proved="true">
         <proof prover="8"><result status="valid" time="2.16" steps="728405"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ket_sum_l_to_n_bvs&#39;vc.4.1.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ket_sum_l_to_n_bvs&#39;vc.4.1.0.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="ket_sum_l_to_n_bvs&#39;vc.4.1.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="2.19" steps="729246"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_l_to_fset&#39;vc" expl="VC for ket_sum_l_to_fset" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_l_to_fset&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.46" steps="372253"/></proof>
  </goal>
  <goal name="ket_sum_l_to_fset&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.48" steps="408053"/></proof>
  </goal>
  <goal name="ket_sum_l_to_fset&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.59" steps="490793"/></proof>
  </goal>
  <goal name="ket_sum_l_to_fset&#39;vc.3" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(power 2 l)" arg2="(power 2 l)">
   <goal name="ket_sum_l_to_fset&#39;vc.3.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="Ensures3">
   </transf>
   </goal>
   <goal name="ket_sum_l_to_fset&#39;vc.3.1" expl="equality hypothesis" proved="true">
   <proof prover="8"><result status="valid" time="0.61" steps="490794"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_sum_l_to_fset&#39;vc.4" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(n_bvs l)" arg2="(map (fun (i:int) -&gt; int_to_bv i l) (to_fset 0 (power 2 l)))">
   <goal name="ket_sum_l_to_fset&#39;vc.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures">
    <goal name="ket_sum_l_to_fset&#39;vc.4.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ket_sum_l_to_fset&#39;vc.4.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="goal_comm">
    <goal name="ket_sum_l_to_fset&#39;vc.4.1.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_map_eq">
     <goal name="ket_sum_l_to_fset&#39;vc.4.1.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ket_sum_l_to_fset&#39;vc.4.1.0.0.0" expl="apply premises" proved="true">
      <transf name="exists" proved="true" arg1="(bv_to_int b)">
       <goal name="ket_sum_l_to_fset&#39;vc.4.1.0.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="ket_sum_l_to_fset&#39;vc.4.1.0.0.0.0.0" proved="true">
        <proof prover="8"><result status="valid" time="2.06" steps="717052"/></proof>
        </goal>
        <goal name="ket_sum_l_to_fset&#39;vc.4.1.0.0.0.0.1" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="ket_sum_l_to_fset&#39;vc.4.1.0.0.0.0.1.0" proved="true">
         <transf name="replace" proved="true" arg1="l" arg2="(length b)">
          <goal name="ket_sum_l_to_fset&#39;vc.4.1.0.0.0.0.1.0.0" proved="true">
          <transf name="case" proved="true" arg1="(length b = 0)">
           <goal name="ket_sum_l_to_fset&#39;vc.4.1.0.0.0.0.1.0.0.0" expl="true case" proved="true">
           <proof prover="8"><result status="valid" time="2.07" steps="718065"/></proof>
           </goal>
           <goal name="ket_sum_l_to_fset&#39;vc.4.1.0.0.0.0.1.0.0.1" expl="false case" proved="true">
           <proof prover="8"><result status="valid" time="2.03" steps="718150"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="ket_sum_l_to_fset&#39;vc.4.1.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="goal_comm">
           <goal name="ket_sum_l_to_fset&#39;vc.4.1.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
           <transf name="split_all_full" proved="true" >
            <goal name="ket_sum_l_to_fset&#39;vc.4.1.0.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="n_bvs&#39;spec2">
             <goal name="ket_sum_l_to_fset&#39;vc.4.1.0.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.18" steps="747633"/></proof>
             </goal>
             <goal name="ket_sum_l_to_fset&#39;vc.4.1.0.0.0.0.1.0.1.0.0.1" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.17" steps="747633"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ket_sum_l_to_fset&#39;vc.4.1.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ket_sum_l_to_fset&#39;vc.4.1.0.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="ket_sum_l_to_fset&#39;vc.4.1.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="2.19" steps="716387"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_partition&#39;vc" expl="VC for ket_sum_partition" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_partition&#39;vc.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(cardinal s1 =0)">
   <goal name="ket_sum_partition&#39;vc.0.0" expl="true case (postcondition)" proved="true">
   <transf name="case" proved="true" arg1="(cardinal s2 = 0)">
    <goal name="ket_sum_partition&#39;vc.0.0.0" expl="true case (postcondition)" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_ket_l">
     <goal name="ket_sum_partition&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="exists" proved="true" arg1="n">
      <goal name="ket_sum_partition&#39;vc.0.0.0.0.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="ket_sum_partition&#39;vc.0.0.0.0.0.0" proved="true">
       <proof prover="8"><result status="valid" time="1.15" steps="492533"/></proof>
       </goal>
       <goal name="ket_sum_partition&#39;vc.0.0.0.0.0.1" proved="true">
       <proof prover="8"><result status="valid" time="1.17" steps="492710"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ket_sum_partition&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ket_sum_partition&#39;vc.0.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="2.23" steps="714487"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="ket_sum_partition&#39;vc.0.0.1" expl="false case (true case. postcondition)" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_ket_l">
     <goal name="ket_sum_partition&#39;vc.0.0.1.0" expl="apply premises" proved="true">
     <transf name="exists" proved="true" arg1="n">
      <goal name="ket_sum_partition&#39;vc.0.0.1.0.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="ket_sum_partition&#39;vc.0.0.1.0.0.0" proved="true">
       <proof prover="8"><result status="valid" time="1.14" steps="492802"/></proof>
       </goal>
       <goal name="ket_sum_partition&#39;vc.0.0.1.0.0.1" proved="true">
       <proof prover="8"><result status="valid" time="1.12" steps="493044"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ket_sum_partition&#39;vc.0.0.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ket_sum_partition&#39;vc.0.0.1.1.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="add_ket_l_value">
       <goal name="ket_sum_partition&#39;vc.0.0.1.1.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.58" steps="509060"/></proof>
       </goal>
       <goal name="ket_sum_partition&#39;vc.0.0.1.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="1.44" steps="501331"/></proof>
       </goal>
       <goal name="ket_sum_partition&#39;vc.0.0.1.1.0.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.53" steps="431479"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ket_sum_partition&#39;vc.0.1" expl="false case (postcondition)" proved="true">
   <transf name="case" proved="true" arg1="(cardinal s2 = 0)">
    <goal name="ket_sum_partition&#39;vc.0.1.0" expl="false case (true case. postcondition)" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_ket_l">
     <goal name="ket_sum_partition&#39;vc.0.1.0.0" expl="apply premises" proved="true">
     <transf name="exists" proved="true" arg1="n">
      <goal name="ket_sum_partition&#39;vc.0.1.0.0.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="ket_sum_partition&#39;vc.0.1.0.0.0.0" proved="true">
       <proof prover="8"><result status="valid" time="1.12" steps="492802"/></proof>
       </goal>
       <goal name="ket_sum_partition&#39;vc.0.1.0.0.0.1" proved="true">
       <proof prover="8"><result status="valid" time="1.11" steps="493044"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ket_sum_partition&#39;vc.0.1.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ket_sum_partition&#39;vc.0.1.0.1.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="add_ket_l_value">
       <goal name="ket_sum_partition&#39;vc.0.1.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="2.43" steps="762368"/></proof>
       </goal>
       <goal name="ket_sum_partition&#39;vc.0.1.0.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="1.47" steps="501324"/></proof>
       </goal>
       <goal name="ket_sum_partition&#39;vc.0.1.0.1.0.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.53" steps="431479"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="ket_sum_partition&#39;vc.0.1.1" expl="false case (postcondition)" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_ket_l">
     <goal name="ket_sum_partition&#39;vc.0.1.1.0" expl="apply premises" proved="true">
     <transf name="exists" proved="true" arg1="n">
      <goal name="ket_sum_partition&#39;vc.0.1.1.0.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="ket_sum_partition&#39;vc.0.1.1.0.0.0" proved="true">
       <proof prover="8"><result status="valid" time="1.12" steps="492892"/></proof>
       </goal>
       <goal name="ket_sum_partition&#39;vc.0.1.1.0.0.1" proved="true">
       <proof prover="8"><result status="valid" time="1.15" steps="493174"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ket_sum_partition&#39;vc.0.1.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ket_sum_partition&#39;vc.0.1.1.1.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="add_ket_l_value">
       <goal name="ket_sum_partition&#39;vc.0.1.1.1.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
        <goal name="ket_sum_partition&#39;vc.0.1.1.1.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
         <goal name="ket_sum_partition&#39;vc.0.1.1.1.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
          <goal name="ket_sum_partition&#39;vc.0.1.1.1.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="s" arg2="(union s1 s2)">
           <goal name="ket_sum_partition&#39;vc.0.1.1.1.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="sum_disjoint_transitivity">
            <goal name="ket_sum_partition&#39;vc.0.1.1.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
            </transf>
            </goal>
            <goal name="ket_sum_partition&#39;vc.0.1.1.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="0.52" steps="431483"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="ket_sum_partition&#39;vc.0.1.1.1.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="8"><result status="valid" time="0.55" steps="431483"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="ket_sum_partition&#39;vc.0.1.1.1.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="0.54" steps="431483"/></proof>
          </goal>
          <goal name="ket_sum_partition&#39;vc.0.1.1.1.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="1.50" steps="500967"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="ket_sum_partition&#39;vc.0.1.1.1.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="0.55" steps="431483"/></proof>
         </goal>
         <goal name="ket_sum_partition&#39;vc.0.1.1.1.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="1.64" steps="500967"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="ket_sum_partition&#39;vc.0.1.1.1.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="0.65" steps="431483"/></proof>
        </goal>
        <goal name="ket_sum_partition&#39;vc.0.1.1.1.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="1.73" steps="500967"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="ket_sum_partition&#39;vc.0.1.1.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="1.71" steps="500967"/></proof>
       </goal>
       <goal name="ket_sum_partition&#39;vc.0.1.1.1.0.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.60" steps="431483"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_decomp&#39;vc" expl="VC for ket_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_decomp&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.31" steps="573104"/></proof>
  </goal>
  <goal name="ket_decomp&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.80" steps="543353"/></proof>
  </goal>
  <goal name="ket_decomp&#39;vc.2" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="ket_decomp&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="2.30" steps="679663"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_decomp&#39;vc.3" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="ket_decomp&#39;vc.3.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="1.93" steps="672951"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_decomp&#39;vc.4" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_map_mem">
   <goal name="ket_decomp&#39;vc.4.0" expl="apply premises" proved="true">
   <transf name="exists" proved="true" arg1="(e,0)">
    <goal name="ket_decomp&#39;vc.4.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="ket_decomp&#39;vc.4.0.0.0" proved="true">
     <proof prover="8"><result status="valid" time="1.99" steps="687058"/></proof>
     </goal>
     <goal name="ket_decomp&#39;vc.4.0.0.1" proved="true">
     <proof prover="8"><result status="valid" time="1.92" steps="641271"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ket_decomp&#39;vc.5" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (y0:(int, int)) -&gt; fir y0),couple_set,e">
   <goal name="ket_decomp&#39;vc.5.0" expl="precondition" proved="true">
   <transf name="destruct" proved="true" arg1="Hinst">
    <goal name="ket_decomp&#39;vc.5.0.0" expl="destruct premise" proved="true">
    <transf name="apply" proved="true" arg1="set_map_mem">
     <goal name="ket_decomp&#39;vc.5.0.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(fun (y0:(int, int)) -&gt; match y0 with
          | x, _ -&gt; x
          end)" arg2="fir" arg3="in" arg4="H">
      <goal name="ket_decomp&#39;vc.5.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="2.05" steps="687691"/></proof>
      </goal>
      <goal name="ket_decomp&#39;vc.5.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="compute_hyp" proved="true" >
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="ket_decomp&#39;vc.5.0.1" expl="precondition" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="ket_decomp&#39;vc.5.0.1.0" expl="precondition" proved="true">
     <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
      <goal name="ket_decomp&#39;vc.5.0.1.0.0" expl="precondition" proved="true">
      <proof prover="8"><result status="valid" time="1.63" steps="644435"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ket_decomp&#39;vc.6" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(fun (y0:(int, int)) -&gt; match y0 with
          | x, _ -&gt; x
          end)" arg2="fir">
   <goal name="ket_decomp&#39;vc.6.0" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="ket_decomp&#39;vc.6.0.0" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(sec e = sec e&#39;)">
     <goal name="ket_decomp&#39;vc.6.0.0.0" expl="asserted formula" proved="true">
     <proof prover="8"><result status="valid" time="1.86" steps="689999"/></proof>
     </goal>
     <goal name="ket_decomp&#39;vc.6.0.0.1" expl="precondition" proved="true">
     <transf name="case" proved="true" arg1="(fir e = fir e&#39;)">
      <goal name="ket_decomp&#39;vc.6.0.0.1.0" expl="true case (precondition)" proved="true">
      <transf name="assert" proved="true" arg1="(e = e&#39;)">
       <goal name="ket_decomp&#39;vc.6.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="rewrite" proved="true" arg1="set_pair">
        <goal name="ket_decomp&#39;vc.6.0.0.1.0.0.0" expl="asserted formula" proved="true">
        <transf name="rewrite" proved="true" arg1="set_pair">
         <goal name="ket_decomp&#39;vc.6.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="8"><result status="valid" time="1.69" steps="648326"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="ket_decomp&#39;vc.6.0.0.1.0.1" expl="true case (precondition)" proved="true">
       <proof prover="8"><result status="valid" time="0.89" steps="614061"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="ket_decomp&#39;vc.6.0.0.1.1" expl="false case (precondition)" proved="true">
      <proof prover="8"><result status="valid" time="0.80" steps="614060"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ket_decomp&#39;vc.6.1" expl="equality hypothesis" proved="true">
   <transf name="compute_hyp" proved="true" >
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ket_decomp&#39;vc.7" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.75" steps="569480"/></proof>
  </goal>
  <goal name="ket_decomp&#39;vc.8" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.99" steps="679328"/></proof>
  </goal>
  <goal name="ket_decomp&#39;vc.9" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="ket_decomp&#39;vc.9.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="ket_decomp&#39;vc.9.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="ket_decomp&#39;vc.9.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="2.19" steps="731784"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="ket_decomp&#39;vc.9.0.1" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="ket_decomp&#39;vc.9.0.1.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="2.23" steps="731458"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ket_decomp&#39;vc.10" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.00" steps="606309"/></proof>
  </goal>
  <goal name="ket_decomp&#39;vc.11" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.79" steps="609163"/></proof>
  </goal>
  <goal name="ket_decomp&#39;vc.12" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="ket_decomp&#39;vc.12.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="ket_decomp&#39;vc.12.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="ket_decomp&#39;vc.12.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="2.11" steps="690336"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ket_decomp&#39;vc.12.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="ket_decomp&#39;vc.12.1.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="ket_decomp&#39;vc.12.1.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="2.14" steps="689970"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ket_decomp&#39;vc.13" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.07" steps="683683"/></proof>
  </goal>
  <goal name="ket_decomp&#39;vc.14" expl="precondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="ket_decomp&#39;vc.14.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="m_p&#39;def">
    <goal name="ket_decomp&#39;vc.14.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="indexes_decomp&#39;def">
     <goal name="ket_decomp&#39;vc.14.0.0.0" expl="precondition" proved="true">
     <transf name="replace" proved="true" arg1="proj_set" arg2="(map (fun (y0:(int, int)) -&gt; fir y0) couple_set)
">
      <goal name="ket_decomp&#39;vc.14.0.0.0.0" expl="precondition" proved="true">
      <transf name="replace" proved="true" arg1="(fun (y0:(int, int)) -&gt; match y0 with
          | x, _ -&gt; x
          end)" arg2="fir" arg3="in" arg4="Ensures6">
       <goal name="ket_decomp&#39;vc.14.0.0.0.0.0" expl="precondition" proved="true">
       <transf name="replace" proved="true" arg1="(fun (y0:(int, int)) -&gt; match y0 with
          | x, _ -&gt; x
          end)" arg2="fir" arg3="in" arg4="Ensures4">
        <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0" expl="precondition" proved="true">
        <transf name="rewrite" proved="true" arg1="Ensures4">
         <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0" expl="precondition" proved="true">
         <transf name="apply" proved="true" arg1="mat_sum_eq_gen">
          <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="2.17" steps="682537"/></proof>
          </goal>
          <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.07" steps="610197"/></proof>
          </goal>
          <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="set_constant_size">
           <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="4.85"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.2.1" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.2.1.0" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="4.74"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.3.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
            <transf name="eliminate_if" proved="true" >
             <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.3.0.0.0" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="basis_projection&#39;def">
               <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="replace" proved="true" arg1="(sec a)" arg2="0">
                <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="apply" proved="true" arg1="scalar_eq">
                 <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="ind_basis_mat&#39;def">
                  <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="replace" proved="true" arg1="(columns m)" arg2="1">
                   <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="apply" proved="true" arg1="set_equal_mat">
                    <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.70" steps="809726"/></proof>
                    </goal>
                    <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.70" steps="809249"/></proof>
                    </goal>
                    <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
                     <transf name="replace" proved="true" arg1="(get (ket n (fir a)) i j)" arg2="(get_ket (ket n (fir a)) i )">
                      <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="assert_make">
                       <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
                       <transf name="compute_specified" proved="true" >
                        <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
                        <proof prover="8"><result status="valid" time="2.74" steps="811422"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
                       <proof prover="8"><result status="valid" time="2.67" steps="806632"/></proof>
                       </goal>
                       <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.0.0.2.0.0.2" expl="rewrite premises" proved="true">
                       <proof prover="8"><result status="valid" time="2.29" steps="806621"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.0.0.2.0.1" expl="equality hypothesis" proved="true">
                      <transf name="rewrite" proved="true" arg1="get_ket&#39;def">
                       <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.0.0.2.0.1.0" expl="equality hypothesis" proved="true">
                       <proof prover="8"><result status="valid" time="2.09" steps="809860"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                   <proof prover="8"><result status="valid" time="1.52" steps="692525"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.05" steps="734392"/></proof>
                  </goal>
                  <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.49" steps="694316"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.3.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                <proof prover="8"><result status="valid" time="2.05" steps="734639"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.3.0.0.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="1.92" steps="734392"/></proof>
               </goal>
               <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.3.0.0.0.0.2" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="2.02" steps="734397"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.0.0.3.0.0.0.1" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="0.95" steps="660510"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="set_equal_func">
         <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="ket_decomp&#39;vc.14.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="0.28" steps="10109"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="ket_decomp&#39;vc.14.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="set_equal_func">
        <goal name="ket_decomp&#39;vc.14.0.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="ket_decomp&#39;vc.14.0.0.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="ket_decomp&#39;vc.14.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="0.23" steps="10135"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="ket_decomp&#39;vc.14.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="rewrite" proved="true" arg1="Ensures6">
       <goal name="ket_decomp&#39;vc.14.0.0.0.1.0" expl="equality hypothesis" proved="true">
       <transf name="replace" proved="true" arg1="(fun (y0:(int, int)) -&gt; match y0 with
        | x, _ -&gt; x
        end)" arg2="(fun (y0:(int, int)) -&gt; fir y0)">
        <goal name="ket_decomp&#39;vc.14.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
        <transf name="compute_specified" proved="true" >
        </transf>
        </goal>
        <goal name="ket_decomp&#39;vc.14.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="set_equal_func">
         <goal name="ket_decomp&#39;vc.14.0.0.0.1.0.1.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="ket_decomp&#39;vc.14.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="ket_decomp&#39;vc.14.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="0.29" steps="10135"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ket_decomp&#39;vc.15" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="m_p" arg2="m" arg3="in" arg4="Ensures">
   <goal name="ket_decomp&#39;vc.15.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(to_fset 0 (power 2 n))" arg2="proj_set">
    <goal name="ket_decomp&#39;vc.15.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="Ensures">
    </transf>
    </goal>
    <goal name="ket_decomp&#39;vc.15.0.1" expl="equality hypothesis" proved="true">
    <proof prover="8"><result status="valid" time="0.80" steps="609688"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="ket_decomp&#39;vc.15.1" expl="equality hypothesis" proved="true">
   <proof prover="8"><result status="valid" time="0.80" steps="609697"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_decomp_bv&#39;vc" expl="VC for ket_decomp_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_decomp_bv&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.45" steps="373020"/></proof>
  </goal>
  <goal name="ket_decomp_bv&#39;vc.1" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_map_mem">
   <goal name="ket_decomp_bv&#39;vc.1.0" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="ket_decomp_bv&#39;vc.1.0.0" expl="apply premises" proved="true">
    <transf name="exists" proved="true" arg1="(int_to_bv e n)">
     <goal name="ket_decomp_bv&#39;vc.1.0.0.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ket_decomp_bv&#39;vc.1.0.0.0.0" proved="true">
      <proof prover="8"><result status="valid" time="1.66" steps="669507"/></proof>
      </goal>
      <goal name="ket_decomp_bv&#39;vc.1.0.0.0.1" proved="true">
      <proof prover="8"><result status="valid" time="1.66" steps="669605"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ket_decomp_bv&#39;vc.2" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (y0:bitvec) -&gt; bv_to_int y0),(n_bvs n),e">
   <goal name="ket_decomp_bv&#39;vc.2.0" expl="precondition" proved="true">
   <transf name="destruct" proved="true" arg1="Hinst">
    <goal name="ket_decomp_bv&#39;vc.2.0.0" expl="destruct premise" proved="true">
    <transf name="apply" proved="true" arg1="H">
    </transf>
    </goal>
    <goal name="ket_decomp_bv&#39;vc.2.0.1" expl="precondition" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="ket_decomp_bv&#39;vc.2.0.1.0" expl="precondition" proved="true">
     <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
      <goal name="ket_decomp_bv&#39;vc.2.0.1.0.0" expl="precondition" proved="true">
      <transf name="assert" proved="true" arg1="(e &lt; power 2 n)">
       <goal name="ket_decomp_bv&#39;vc.2.0.1.0.0.0" expl="asserted formula" proved="true">
       <proof prover="8"><result status="valid" time="1.71" steps="673735"/></proof>
       </goal>
       <goal name="ket_decomp_bv&#39;vc.2.0.1.0.0.1" expl="precondition" proved="true">
       <proof prover="8"><result status="valid" time="1.79" steps="673970"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ket_decomp_bv&#39;vc.3" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="map_ket_sum_l" arg2="(fun (j:int) -&gt; get m j 0 *.. ket n j),(n_bvs n),(bv_to_int ),n">
   <goal name="ket_decomp_bv&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ket_sum_l (map (fun (y0:bitvec) -&gt; bv_to_int y0) (n_bvs n))
  (fun (j:int) -&gt; get m j 0 *.. ket n j) n)" arg2="m" arg3="in" arg4="Hinst">
    <goal name="ket_decomp_bv&#39;vc.3.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Hinst">
     <goal name="ket_decomp_bv&#39;vc.3.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="ket_sum_eq">
      <goal name="ket_decomp_bv&#39;vc.3.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="0.89" steps="597349"/></proof>
      </goal>
      <goal name="ket_decomp_bv&#39;vc.3.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="0.79" steps="597347"/></proof>
      </goal>
      <goal name="ket_decomp_bv&#39;vc.3.0.0.0.2" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="ket_decomp_bv&#39;vc.3.0.0.0.2.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="ket_decomp_bv&#39;vc.3.0.0.0.2.0.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(ket_sum_l (n_bvs n)
      (fun (a1:bitvec) -&gt; get m (bv_to_int a1) 0 *.. ket n (bv_to_int a1)) n)" arg2="m">
         <goal name="ket_decomp_bv&#39;vc.3.0.0.0.2.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
         <goal name="ket_decomp_bv&#39;vc.3.0.0.0.2.0.0.1" expl="equality hypothesis" proved="true">
         <transf name="replace" proved="true" arg1="( ket_sum_l (n_bvs n)
  (fun (a1:bitvec) -&gt; get m (bv_to_int a1) 0 *.. ket n (bv_to_int a1)) n)" arg2="(ket_sum_l (n_bvs n)
    (fun (a1:bitvec) -&gt;
      (fun (j:int) -&gt; get m j 0 *.. ket n j)
      @ ((fun (y0:bitvec) -&gt; bv_to_int y0) @ a1))
    n)">
          <goal name="ket_decomp_bv&#39;vc.3.0.0.0.2.0.0.1.0" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="goal_comm">
           <goal name="ket_decomp_bv&#39;vc.3.0.0.0.2.0.0.1.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="Hinst">
            <goal name="ket_decomp_bv&#39;vc.3.0.0.0.2.0.0.1.0.0.0" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="0.86" steps="597361"/></proof>
            </goal>
            <goal name="ket_decomp_bv&#39;vc.3.0.0.0.2.0.0.1.0.0.1" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="2.06" steps="681253"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="ket_decomp_bv&#39;vc.3.0.0.0.2.0.0.1.1" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="goal_comm">
           <goal name="ket_decomp_bv&#39;vc.3.0.0.0.2.0.0.1.1.0" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="3.20" steps="946855"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ket_decomp_bv&#39;vc.3.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.79" steps="597349"/></proof>
     </goal>
     <goal name="ket_decomp_bv&#39;vc.3.0.0.2" expl="rewrite premises" proved="true">
     <transf name="apply" proved="true" arg1="set_injective">
      <goal name="ket_decomp_bv&#39;vc.3.0.0.2.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="ket_decomp_bv&#39;vc.3.0.0.2.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="ket_decomp_bv&#39;vc.3.0.0.2.0.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.65" steps="682074"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="ket_decomp_bv&#39;vc.3.0.1" expl="equality hypothesis" proved="true">
    <transf name="replace" proved="true" arg1="(ket_sum_l (map (fun (y0:bitvec) -&gt; bv_to_int y0) (n_bvs n))
  (fun (j:int) -&gt; get m j 0 *.. ket n j) n)" arg2="(mat_sum (to_fset 0 (power 2 n))
     (fun (j:int) -&gt; get m j 0 *.. ket n j))">
     <goal name="ket_decomp_bv&#39;vc.3.0.1.0" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="goal_comm">
      <goal name="ket_decomp_bv&#39;vc.3.0.1.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="ket_decomp">
       <goal name="ket_decomp_bv&#39;vc.3.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="0.72" steps="597445"/></proof>
       </goal>
       <goal name="ket_decomp_bv&#39;vc.3.0.1.0.0.1" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.01" steps="597445"/></proof>
       </goal>
       <goal name="ket_decomp_bv&#39;vc.3.0.1.0.0.2" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.03" steps="597445"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ket_decomp_bv&#39;vc.3.0.1.1" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="ket_sum_l_to_mat_sum">
      <goal name="ket_decomp_bv&#39;vc.3.0.1.1.0" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="mat_sum_eq_gen">
       <goal name="ket_decomp_bv&#39;vc.3.0.1.1.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="2.06" steps="677800"/></proof>
       </goal>
       <goal name="ket_decomp_bv&#39;vc.3.0.1.1.0.1" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="0.93" steps="597452"/></proof>
       </goal>
       <goal name="ket_decomp_bv&#39;vc.3.0.1.1.0.2" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="ket_decomp_bv&#39;vc.3.0.1.1.0.2.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="ket_decomp_bv&#39;vc.3.0.1.1.0.2.0.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="ket_decomp_bv&#39;vc.3.0.1.1.0.2.0.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.90" steps="719698"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="ket_decomp_bv&#39;vc.3.0.1.1.0.2.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="ket_decomp_bv&#39;vc.3.0.1.1.0.2.1.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="2.03" steps="719797"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="ket_decomp_bv&#39;vc.3.0.1.1.0.3" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="ket_decomp_bv&#39;vc.3.0.1.1.0.3.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="ket_decomp_bv&#39;vc.3.0.1.1.0.3.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_equal_ket_l">
          <goal name="ket_decomp_bv&#39;vc.3.0.1.1.0.3.0.0.0" expl="apply premises" proved="true">
          <transf name="exists" proved="true" arg1="n">
           <goal name="ket_decomp_bv&#39;vc.3.0.1.1.0.3.0.0.0.0" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="ket_decomp_bv&#39;vc.3.0.1.1.0.3.0.0.0.0.0" proved="true">
            <transf name="apply" proved="true" arg1="set_is_a_ket_l">
             <goal name="ket_decomp_bv&#39;vc.3.0.1.1.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="0.83" steps="597457"/></proof>
             </goal>
             <goal name="ket_decomp_bv&#39;vc.3.0.1.1.0.3.0.0.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.96" steps="718232"/></proof>
             </goal>
             <goal name="ket_decomp_bv&#39;vc.3.0.1.1.0.3.0.0.0.0.0.2" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.93" steps="718190"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="ket_decomp_bv&#39;vc.3.0.1.1.0.3.0.0.0.0.1" proved="true">
            <proof prover="8"><result status="valid" time="1.72" steps="679953"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="ket_decomp_bv&#39;vc.3.0.1.1.0.3.0.0.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="ket_decomp_bv&#39;vc.3.0.1.1.0.3.0.0.1.0" expl="apply premises" proved="true">
           <proof prover="10"><result status="valid" time="1.27" steps="6375929"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="ket_decomp_bv&#39;vc.3.0.1.1.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.72" steps="597445"/></proof>
      </goal>
      <goal name="ket_decomp_bv&#39;vc.3.0.1.1.2" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.64" steps="677800"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_recomp&#39;vc" expl="VC for ket_recomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_recomp&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.37" steps="510450"/></proof>
  </goal>
  <goal name="ket_recomp&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.49" steps="448880"/></proof>
  </goal>
  <goal name="ket_recomp&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.61" steps="449835"/></proof>
  </goal>
  <goal name="ket_recomp&#39;vc.3" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.24" steps="6963"/></proof>
  </goal>
  <goal name="ket_recomp&#39;vc.4" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.25" steps="7218"/></proof>
  </goal>
  <goal name="ket_recomp&#39;vc.5" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="ket_recomp&#39;vc.5.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="mat_sum_eq">
    <goal name="ket_recomp&#39;vc.5.0.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="1.64" steps="596385"/></proof>
    </goal>
    <goal name="ket_recomp&#39;vc.5.0.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="ket_recomp&#39;vc.5.0.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ket_recomp&#39;vc.5.0.1.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="ket_recomp&#39;vc.5.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.54" steps="628693"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ket_recomp&#39;vc.5.0.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ket_recomp&#39;vc.5.0.1.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="ket_recomp&#39;vc.5.0.1.1.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.63" steps="628404"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="ket_recomp&#39;vc.5.0.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="ket_recomp&#39;vc.5.0.2.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="ket_recomp&#39;vc.5.0.2.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="assert_make">
       <goal name="ket_recomp&#39;vc.5.0.2.0.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.30" steps="590023"/></proof>
       </goal>
       <goal name="ket_recomp&#39;vc.5.0.2.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="1.54" steps="625805"/></proof>
       </goal>
       <goal name="ket_recomp&#39;vc.5.0.2.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.71" steps="559279"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_decomp_quant&#39;vc" expl="VC for ket_decomp_quant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_decomp_quant&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="ket_decomp">
   <goal name="ket_decomp_quant&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.02" steps="430969"/></proof>
   </goal>
   <goal name="ket_decomp_quant&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="0.48" steps="373583"/></proof>
   </goal>
   <goal name="ket_decomp_quant&#39;vc.0.2" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="0.49" steps="373581"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_mult_ket_basis&#39;vc" expl="VC for mat_mult_ket_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_mult_ket_basis&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="mat_mult_ket_basis&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_mult_rows">
    <goal name="mat_mult_ket_basis&#39;vc.0.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="goal_comm">
     <goal name="mat_mult_ket_basis&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="rows_mat_sum">
      <goal name="mat_mult_ket_basis&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="1.22" steps="475395"/></proof>
      </goal>
      <goal name="mat_mult_ket_basis&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_constant_size">
       <goal name="mat_mult_ket_basis&#39;vc.0.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mat_mult_ket_basis&#39;vc.0.0.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="mat_mult_ket_basis&#39;vc.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.32" steps="511961"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_mult_ket_basis&#39;vc.0.0.0.0.1.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mat_mult_ket_basis&#39;vc.0.0.0.0.1.1.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="mat_mult_ket_basis&#39;vc.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.40" steps="510452"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="mat_mult_ket_basis&#39;vc.0.0.0.0.2" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="mat_mult_ket_basis&#39;vc.0.0.0.0.2.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="mat_mult_ket_basis&#39;vc.0.0.0.0.2.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.24" steps="509836"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_mult_ket_basis&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.77" steps="403193"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="mat_mult_ket_basis&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_mult_columns">
    <goal name="mat_mult_ket_basis&#39;vc.0.1.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="goal_comm">
     <goal name="mat_mult_ket_basis&#39;vc.0.1.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="columns_mat_sum">
      <goal name="mat_mult_ket_basis&#39;vc.0.1.0.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="1.18" steps="475395"/></proof>
      </goal>
      <goal name="mat_mult_ket_basis&#39;vc.0.1.0.0.1" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_constant_size">
       <goal name="mat_mult_ket_basis&#39;vc.0.1.0.0.1.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mat_mult_ket_basis&#39;vc.0.1.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="mat_mult_ket_basis&#39;vc.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.24" steps="511961"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_mult_ket_basis&#39;vc.0.1.0.0.1.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mat_mult_ket_basis&#39;vc.0.1.0.0.1.1.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="mat_mult_ket_basis&#39;vc.0.1.0.0.1.1.0.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.19" steps="510452"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="mat_mult_ket_basis&#39;vc.0.1.0.0.2" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="mat_mult_ket_basis&#39;vc.0.1.0.0.2.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="mat_mult_ket_basis&#39;vc.0.1.0.0.2.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.26" steps="509002"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_mult_ket_basis&#39;vc.0.1.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.75" steps="403193"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="mat_mult_ket_basis&#39;vc.0.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="mat_mult_ket_basis&#39;vc.0.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="mat_mult_values">
     <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0" expl="apply premises" proved="true">
     <transf name="instantiate" proved="true" arg1="ind_sum_null_but_maybe_one_elt" arg2="(fun (k:int) -&gt; get m i k *. get x k j),0,(columns m),(ket_to_int x)
">
      <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="Hinst">
       <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="mat_sum_to_sum_pre">
        <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="instantiate" proved="true" arg1="sum_null_but_maybe_one_elt" arg2="(fun (e:int) -&gt; get (get m e (ket_to_int x) *.. ket (ket_length x) e) i j),(to_fset 0 (rows x)),i
">
          <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="Hinst">
           <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="j" arg2="0">
             <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="scalar_values">
              <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="get_ket_value">
               <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="mult_eq_t">
                <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="0.44" steps="378827"/></proof>
                </goal>
                <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                <transf name="split_all_full" proved="true" >
                 <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="ket_to_int&#39;spec2">
                  <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.18" steps="504162"/></proof>
                  </goal>
                  <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="0.54" steps="437273"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="1.16" steps="441790"/></proof>
               </goal>
               <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="1.24" steps="443269"/></proof>
               </goal>
               <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="1.17" steps="443269"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
             <proof prover="8"><result status="valid" time="1.29" steps="442180"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="1.30" steps="514432"/></proof>
           </goal>
           <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
             <transf name="replace" proved="true" arg1="j" arg2="0">
              <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.0.0.0.2.0.0.0" expl="rewrite premises" proved="true">
              <transf name="rewrite" proved="true" arg1="scalar_values">
               <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.0.0.0.2.0.0.0.0" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="1.30" steps="516140"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.0.0.0.2.0.0.1" expl="equality hypothesis" proved="true">
              <proof prover="8"><result status="valid" time="1.49" steps="515078"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.1.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="1.31" steps="515613"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.1.1" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.1.1.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="1.31" steps="513410"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="1.22" steps="478641"/></proof>
        </goal>
        <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.3" expl="rewrite premises" proved="true">
        <transf name="replace" proved="true" arg1="(s_rows (to_fset 0 (rows x))
    (fun (k:int) -&gt; get m k (ket_to_int x) *.. ket (ket_length x) k))" arg2="(columns m)">
         <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.3.0" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="1.08" steps="440295"/></proof>
         </goal>
         <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.3.1" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="set_s_rows">
          <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.3.1.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="set_constant_size">
           <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.3.1.0.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.3.1.0.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.3.1.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.27" steps="515613"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.3.1.0.1" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.3.1.0.1.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.3.1.0.1.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="scalar_columns">
              <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.3.1.0.1.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="scalar_columns">
               <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.3.1.0.1.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="1.28" steps="514732"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.3.1.1" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.3.1.1.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="scalar_rows">
            <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.3.1.1.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="H2">
             <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.3.1.1.0.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.58" steps="454994"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.4" expl="rewrite premises" proved="true">
        <transf name="replace" proved="true" arg1="(s_columns (to_fset 0 (rows x))
    (fun (k:int) -&gt; get m k (ket_to_int x) *.. ket (ket_length x) k))" arg2="1
">
         <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.4.0" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.4.0.0" proved="true">
          <proof prover="8"><result status="valid" time="1.08" steps="439749"/></proof>
          </goal>
          <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.4.0.1" proved="true">
          <proof prover="8"><result status="valid" time="1.14" steps="440245"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.4.1" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="set_s_columns">
          <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.4.1.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="set_constant_size">
           <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.4.1.0.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.4.1.0.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.4.1.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.32" steps="515613"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.4.1.0.1" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.4.1.0.1.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.4.1.0.1.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.27" steps="513410"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.4.1.1" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.4.1.1.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="scalar_columns">
            <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.0.4.1.1.0.0" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="1.12" steps="447094"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.43"/></proof>
       </goal>
       <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.2" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.2.0" expl="rewrite premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.2.0.0" expl="rewrite premises" proved="true">
         <transf name="replace" proved="true" arg1="x" arg2="(ket (ket_length x) (ket_to_int x))">
          <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.2.0.0.0" expl="rewrite premises" proved="true">
          <transf name="replace" proved="true" arg1="j" arg2="0">
           <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.2.0.0.0.0" expl="rewrite premises" proved="true">
           <transf name="rewrite" proved="true" arg1="get_ket_value">
            <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.2.0.0.0.0.0" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="1.11" steps="439572"/></proof>
            </goal>
            <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="1.11" steps="439995"/></proof>
            </goal>
            <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="7"><result status="valid" time="0.27" steps="6856"/></proof>
            </goal>
            <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.2.0.0.0.0.3" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="1.12" steps="441254"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.2.0.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="8"><result status="valid" time="1.12" steps="440387"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="mat_mult_ket_basis&#39;vc.0.2.0.0.0.2.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="8"><result status="valid" time="0.90" steps="404043"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_mult_ket_basis&#39;vc.0.2.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.84" steps="403007"/></proof>
     </goal>
     <goal name="mat_mult_ket_basis&#39;vc.0.2.0.2" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.48" steps="377852"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_mult_diag&#39;vc" expl="VC for ket_mult_diag" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_mult_diag&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mat_mult_ket_basis">
   <goal name="ket_mult_diag&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="mat_sum_null_but_maybe_one_elt" arg2="(fun (k:int) -&gt; get m k (ket_to_int x) *.. ket (ket_length x) k),(to_fset 0 (rows x)),(ket_to_int x)">
    <goal name="ket_mult_diag&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Hinst">
     <goal name="ket_mult_diag&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
     <goal name="ket_mult_diag&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.20" steps="480318"/></proof>
     </goal>
     <goal name="ket_mult_diag&#39;vc.0.0.0.2" expl="rewrite premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="ket_mult_diag&#39;vc.0.0.0.2.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="ket_mult_diag&#39;vc.0.0.0.2.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="ket_mult_diag&#39;vc.0.0.0.2.0.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.34" steps="520926"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="ket_mult_diag&#39;vc.0.0.0.2.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="ket_mult_diag&#39;vc.0.0.0.2.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="ket_mult_diag&#39;vc.0.0.0.2.1.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.30" steps="518208"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ket_mult_diag&#39;vc.0.0.0.3" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.52"/></proof>
     </goal>
     <goal name="ket_mult_diag&#39;vc.0.0.0.4" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="ket_mult_diag&#39;vc.0.0.0.4.0" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.57" steps="524407"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ket_mult_diag&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.49" steps="376815"/></proof>
   </goal>
   <goal name="ket_mult_diag&#39;vc.0.2" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="1.09" steps="436526"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_mult_ket_basis_bv&#39;vc" expl="VC for mat_mult_ket_basis_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_mult_ket_basis_bv&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ket_sum_l_to_fset">
   <goal name="mat_mult_ket_basis_bv&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_mult_ket_basis">
    <goal name="mat_mult_ket_basis_bv&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_l_to_mat_sum">
     <goal name="mat_mult_ket_basis_bv&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="mat_sum_eq_gen">
      <goal name="mat_mult_ket_basis_bv&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="1.18" steps="476253"/></proof>
      </goal>
      <goal name="mat_mult_ket_basis_bv&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="1.12" steps="439180"/></proof>
      </goal>
      <goal name="mat_mult_ket_basis_bv&#39;vc.0.0.0.0.2" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_constant_size">
       <goal name="mat_mult_ket_basis_bv&#39;vc.0.0.0.0.2.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mat_mult_ket_basis_bv&#39;vc.0.0.0.0.2.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="mat_mult_ket_basis_bv&#39;vc.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.30" steps="512754"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_mult_ket_basis_bv&#39;vc.0.0.0.0.2.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mat_mult_ket_basis_bv&#39;vc.0.0.0.0.2.1.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="mat_mult_ket_basis_bv&#39;vc.0.0.0.0.2.1.0.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.24" steps="511239"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="mat_mult_ket_basis_bv&#39;vc.0.0.0.0.3" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="mat_mult_ket_basis_bv&#39;vc.0.0.0.0.3.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mat_mult_ket_basis_bv&#39;vc.0.0.0.0.3.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_equal_ket_l">
         <goal name="mat_mult_ket_basis_bv&#39;vc.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
         <transf name="exists" proved="true" arg1="n">
          <goal name="mat_mult_ket_basis_bv&#39;vc.0.0.0.0.3.0.0.0.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="mat_mult_ket_basis_bv&#39;vc.0.0.0.0.3.0.0.0.0.0" proved="true">
           <proof prover="8"><result status="valid" time="1.25" steps="508820"/></proof>
           </goal>
           <goal name="mat_mult_ket_basis_bv&#39;vc.0.0.0.0.3.0.0.0.0.1" proved="true">
           <proof prover="8"><result status="valid" time="1.34" steps="542755"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="mat_mult_ket_basis_bv&#39;vc.0.0.0.0.3.0.0.1" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="mat_mult_ket_basis_bv&#39;vc.0.0.0.0.3.0.0.1.0" expl="apply premises" proved="true">
          <transf name="eliminate_definition" proved="true" >
           <goal name="mat_mult_ket_basis_bv&#39;vc.0.0.0.0.3.0.0.1.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="get_ket&#39;def">
            <goal name="mat_mult_ket_basis_bv&#39;vc.0.0.0.0.3.0.0.1.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="assert_make_ket_l">
             <goal name="mat_mult_ket_basis_bv&#39;vc.0.0.0.0.3.0.0.1.0.0.0.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="mat_mult_ket_basis_bv&#39;vc.0.0.0.0.3.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="1.30" steps="513109"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="mat_mult_ket_basis_bv&#39;vc.0.0.0.0.3.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="1.25" steps="508246"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_mult_ket_basis_bv&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.07" steps="437683"/></proof>
     </goal>
     <goal name="mat_mult_ket_basis_bv&#39;vc.0.0.0.2" expl="rewrite premises" proved="true">
     <transf name="replace" proved="true" arg1="(cardinal (to_fset 0 (power 2 n)))" arg2="(power 2 n)">
      <goal name="mat_mult_ket_basis_bv&#39;vc.0.0.0.2.0" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.13" steps="438642"/></proof>
      </goal>
      <goal name="mat_mult_ket_basis_bv&#39;vc.0.0.0.2.1" expl="equality hypothesis" proved="true">
      <proof prover="8"><result status="valid" time="1.40" steps="477173"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_mult_ket_basis_bv&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.50" steps="378531"/></proof>
    </goal>
    <goal name="mat_mult_ket_basis_bv&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.49" steps="378538"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="mat_mult_ket_basis_bv&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="1.12" steps="437683"/></proof>
   </goal>
   <goal name="mat_mult_ket_basis_bv&#39;vc.0.2" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="1.12" steps="437683"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_mult_ket_basis_bv_gen&#39;vc" expl="VC for mat_mult_ket_basis_bv_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_mult_ket_basis_bv_gen&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.91" steps="404485"/></proof>
  </goal>
  <goal name="mat_mult_ket_basis_bv_gen&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.51" steps="378876"/></proof>
  </goal>
  <goal name="mat_mult_ket_basis_bv_gen&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.50" steps="378879"/></proof>
  </goal>
  <goal name="mat_mult_ket_basis_bv_gen&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.52" steps="378889"/></proof>
  </goal>
  <goal name="mat_mult_ket_basis_bv_gen&#39;vc.4" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="Ensures">
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_mult_ket_bv&#39;vc" expl="VC for mat_mult_ket_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_mult_ket_bv&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.15" steps="439080"/></proof>
  </goal>
  <goal name="mat_mult_ket_bv&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.91" steps="404735"/></proof>
  </goal>
  <goal name="mat_mult_ket_bv&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.90" steps="404784"/></proof>
  </goal>
  <goal name="mat_mult_ket_bv&#39;vc.3" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(mat_mult m x)" arg2="(mat_mult m (ket_sum_l (n_bvs n)
    (fun (bvx:bitvec) -&gt; get x (bv_to_int bvx) 0 *.. ket n (bv_to_int bvx)) n))">
   <goal name="mat_mult_ket_bv&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ket_sum_l_to_mat_sum">
    <goal name="mat_mult_ket_bv&#39;vc.3.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="product_mat_sum_r">
     <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="ket_sum_l_to_mat_sum">
      <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="mat_sum_eq">
       <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.38" steps="514889"/></proof>
       </goal>
       <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="1.63" steps="585634"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.1.0.1" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="mat_mult_columns">
            <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="mat_mult_columns">
             <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.69" steps="584466"/></proof>
             </goal>
             <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.1.0.1.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="1.53" steps="583537"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="1.42" steps="583537"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_equal_ket_l">
          <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
          <transf name="exists" proved="true" arg1="n">
           <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.0.0" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.0.0.0" proved="true">
            <proof prover="8"><result status="valid" time="1.66" steps="583674"/></proof>
            </goal>
            <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.0.0.1" proved="true">
            <proof prover="8"><result status="valid" time="1.68" steps="582739"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="(mat_mult m
   (make_ket n
    (fun (j:int) -&gt; get (get x (bv_to_int a) 0 *.. ket n (bv_to_int a)) j 0)))" arg2="(make_ket n
     (fun (j:int) -&gt;
       get (get_ket x (bv_to_int a) *.. mat_mult m (ket n (bv_to_int a))) j 0))">
            <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
            </transf>
            </goal>
            <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1" expl="equality hypothesis" proved="true">
            <transf name="apply" proved="true" arg1="set_equal_ket_l">
             <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.0" expl="apply premises" proved="true">
             <transf name="exists" proved="true" arg1="n">
              <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.0.0" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.0.0.0" proved="true">
               <proof prover="7"><result status="valid" time="0.30" steps="8096"/></proof>
               </goal>
               <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.0.0.1" proved="true">
               <proof prover="7"><result status="valid" time="0.30" steps="8008"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0" expl="apply premises" proved="true">
              <transf name="eliminate_definition" proved="true" >
               <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="get_ket&#39;def">
                <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="assert_make_ket_l">
                 <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="compute_specified" proved="true" >
                  <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="scalar_values">
                   <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="apply" proved="true" arg1="goal_comm">
                    <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="mat_mut_scal_rev">
                     <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="mat_mult_values">
                      <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="mat_mult_values">
                       <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                       <transf name="apply" proved="true" arg1="ind_sum_eq">
                        <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                        <transf name="compute_specified" proved="true" >
                         <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                         <transf name="split_vc" proved="true" >
                          <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                          <transf name="apply" proved="true" arg1="mult_eq_t">
                           <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                           <proof prover="8"><result status="valid" time="0.64" steps="515341"/></proof>
                           </goal>
                           <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                           <transf name="rewrite" proved="true" arg1="get_ket_rev">
                            <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                            <transf name="rewrite" proved="true" arg1="get_ket_rev">
                             <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                             <proof prover="10"><result status="valid" time="1.01" steps="5225206"/></proof>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                       <transf name="rewrite" proved="true" arg1="make_ket_rows">
                        <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                        <proof prover="8"><result status="valid" time="1.02" steps="544173"/></proof>
                        </goal>
                        <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                        <proof prover="8"><result status="valid" time="1.33" steps="581444"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                       <transf name="apply" proved="true" arg1="set_valid_index">
                        <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
                         <proof prover="8"><result status="valid" time="0.61" steps="515318"/></proof>
                         </goal>
                         <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1" expl="apply premises" proved="true">
                         <transf name="rewrite" proved="true" arg1="mat_mult_rows">
                          <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1.0" expl="apply premises" proved="true">
                          <transf name="replace" proved="true" arg1="(ket_length
     (mat_mult m
      (make_ket n
       (fun (j:int) -&gt;
         get (get x (bv_to_int a) 0 *.. ket n (bv_to_int a)) j 0))))" arg2="n" arg3="in" arg4="H">
                           <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1.0.0" expl="apply premises" proved="true">
                           <proof prover="8"><result status="valid" time="1.01" steps="544146"/></proof>
                           </goal>
                           <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1.0.1" expl="equality hypothesis" proved="true">
                           <transf name="apply" proved="true" arg1="get_ket_length">
                            <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1.0.1.0" expl="apply premises" proved="true">
                            <proof prover="8"><result status="valid" time="1.31" steps="581444"/></proof>
                            </goal>
                            <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1.0.1.1" expl="apply premises" proved="true">
                            <transf name="rewrite" proved="true" arg1="mat_mult_columns">
                             <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1.0.1.1.0" expl="apply premises" proved="true">
                             <proof prover="7"><result status="valid" time="0.28" steps="8323"/></proof>
                             </goal>
                             <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1.0.1.1.1" expl="rewrite premises" proved="true">
                             <transf name="rewrite" proved="true" arg1="make_ket_rows">
                              <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1.0.1.1.1.0" expl="rewrite premises" proved="true">
                              <proof prover="8"><result status="valid" time="1.05" steps="544173"/></proof>
                              </goal>
                              <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1.0.1.1.1.1" expl="rewrite premises" proved="true">
                              <proof prover="8"><result status="valid" time="1.40" steps="581444"/></proof>
                              </goal>
                             </transf>
                             </goal>
                            </transf>
                            </goal>
                            <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1.0.1.2" expl="apply premises" proved="true">
                            <transf name="rewrite" proved="true" arg1="mat_mult_rows">
                             <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1.0.1.2.0" expl="apply premises" proved="true">
                             <proof prover="8"><result status="valid" time="1.07" steps="544178"/></proof>
                             </goal>
                             <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1.0.1.2.1" expl="rewrite premises" proved="true">
                             <transf name="rewrite" proved="true" arg1="make_ket_rows">
                              <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1.0.1.2.1.0" expl="rewrite premises" proved="true">
                              <proof prover="8"><result status="valid" time="1.07" steps="544173"/></proof>
                              </goal>
                              <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1.0.1.2.1.1" expl="rewrite premises" proved="true">
                              <proof prover="8"><result status="valid" time="1.43" steps="581444"/></proof>
                              </goal>
                             </transf>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1.1" expl="rewrite premises" proved="true">
                          <transf name="rewrite" proved="true" arg1="make_ket_rows">
                           <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1.1.0" expl="rewrite premises" proved="true">
                           <proof prover="8"><result status="valid" time="1.07" steps="544173"/></proof>
                           </goal>
                           <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1.1.1" expl="rewrite premises" proved="true">
                           <proof prover="8"><result status="valid" time="1.41" steps="581444"/></proof>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.1" expl="apply premises" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.1.0" expl="apply premises" proved="true">
                         <proof prover="8"><result status="valid" time="0.64" steps="515325"/></proof>
                         </goal>
                         <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.1.1" expl="apply premises" proved="true">
                         <proof prover="8"><result status="valid" time="1.39" steps="582121"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="scalar_rows">
                       <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                       <proof prover="8"><result status="valid" time="1.42" steps="583158"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                      <transf name="apply" proved="true" arg1="set_valid_index">
                       <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
                        <proof prover="8"><result status="valid" time="0.64" steps="515318"/></proof>
                        </goal>
                        <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.1" expl="apply premises" proved="true">
                        <transf name="rewrite" proved="true" arg1="mat_mult_rows">
                         <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.1.0" expl="apply premises" proved="true">
                         <transf name="replace" proved="true" arg1="(ket_length
     (mat_mult m
      (make_ket n
       (fun (j:int) -&gt;
         get (get x (bv_to_int a) 0 *.. ket n (bv_to_int a)) j 0))))" arg2="n" arg3="in" arg4="H">
                          <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.1.0.0" expl="apply premises" proved="true">
                          <proof prover="8"><result status="valid" time="1.07" steps="544146"/></proof>
                          </goal>
                          <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.1.0.1" expl="equality hypothesis" proved="true">
                          <transf name="apply" proved="true" arg1="get_ket_length">
                           <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.1.0.1.0" expl="apply premises" proved="true">
                           <proof prover="8"><result status="valid" time="1.36" steps="581444"/></proof>
                           </goal>
                           <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.1.0.1.1" expl="apply premises" proved="true">
                           <transf name="rewrite" proved="true" arg1="mat_mult_columns">
                            <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.1.0.1.1.0" expl="apply premises" proved="true">
                            <proof prover="7"><result status="valid" time="0.30" steps="8323"/></proof>
                            </goal>
                            <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.1.0.1.1.1" expl="rewrite premises" proved="true">
                            <transf name="rewrite" proved="true" arg1="make_ket_rows">
                             <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.1.0.1.1.1.0" expl="rewrite premises" proved="true">
                             <proof prover="8"><result status="valid" time="1.07" steps="544173"/></proof>
                             </goal>
                             <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.1.0.1.1.1.1" expl="rewrite premises" proved="true">
                             <proof prover="8"><result status="valid" time="1.42" steps="581444"/></proof>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.1.0.1.2" expl="apply premises" proved="true">
                           <transf name="rewrite" proved="true" arg1="mat_mult_rows">
                            <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.1.0.1.2.0" expl="apply premises" proved="true">
                            <proof prover="8"><result status="valid" time="1.08" steps="544178"/></proof>
                            </goal>
                            <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.1.0.1.2.1" expl="rewrite premises" proved="true">
                            <transf name="rewrite" proved="true" arg1="make_ket_rows">
                             <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.1.0.1.2.1.0" expl="rewrite premises" proved="true">
                             <proof prover="8"><result status="valid" time="1.06" steps="544173"/></proof>
                             </goal>
                             <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.1.0.1.2.1.1" expl="rewrite premises" proved="true">
                             <proof prover="8"><result status="valid" time="1.34" steps="581444"/></proof>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.1.1" expl="rewrite premises" proved="true">
                         <transf name="rewrite" proved="true" arg1="scalar_rows">
                          <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.1.1.0" expl="rewrite premises" proved="true">
                          <proof prover="8"><result status="valid" time="1.34" steps="583158"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.1" expl="apply premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.1.0" expl="apply premises" proved="true">
                        <proof prover="8"><result status="valid" time="0.60" steps="515325"/></proof>
                        </goal>
                        <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.1.1" expl="apply premises" proved="true">
                        <proof prover="8"><result status="valid" time="1.29" steps="583516"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                     <proof prover="8"><result status="valid" time="1.32" steps="583171"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.1" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.30" steps="581444"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.06" steps="490061"/></proof>
      </goal>
      <goal name="mat_mult_ket_bv&#39;vc.3.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.14" steps="514889"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="mat_mult_ket_bv&#39;vc.3.0.0.1" expl="rewrite premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="mat_mult_ket_bv&#39;vc.3.0.0.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="mat_mult_ket_bv&#39;vc.3.0.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.32" steps="584550"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="mat_mult_ket_bv&#39;vc.3.0.0.1.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="mat_mult_ket_bv&#39;vc.3.0.0.1.1.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.30" steps="584419"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_mult_ket_bv&#39;vc.3.0.0.2" expl="rewrite premises" proved="true">
     <transf name="apply" proved="true" arg1="goal_comm">
      <goal name="mat_mult_ket_bv&#39;vc.3.0.0.2.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_s_rows">
       <goal name="mat_mult_ket_bv&#39;vc.3.0.0.2.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="mat_mult_ket_bv&#39;vc.3.0.0.2.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="mat_mult_ket_bv&#39;vc.3.0.0.2.0.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="mat_mult_ket_bv&#39;vc.3.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.32" steps="584550"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="mat_mult_ket_bv&#39;vc.3.0.0.2.0.0.0.1" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="mat_mult_ket_bv&#39;vc.3.0.0.2.0.0.0.1.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.32" steps="584419"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_mult_ket_bv&#39;vc.3.0.0.2.0.1" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="mat_mult_ket_bv&#39;vc.3.0.0.2.0.1.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="make_ket_rows">
         <goal name="mat_mult_ket_bv&#39;vc.3.0.0.2.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="0.83" steps="453916"/></proof>
         </goal>
         <goal name="mat_mult_ket_bv&#39;vc.3.0.0.2.0.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="1.08" steps="490061"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_mult_ket_bv&#39;vc.3.0.0.3" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.17" steps="514889"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="mat_mult_ket_bv&#39;vc.3.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.08" steps="490061"/></proof>
    </goal>
    <goal name="mat_mult_ket_bv&#39;vc.3.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.17" steps="514889"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="mat_mult_ket_bv&#39;vc.3.1" expl="equality hypothesis" proved="true">
   <proof prover="8"><result status="valid" time="1.31" steps="492253"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_mult_ket_bv_gen&#39;vc" expl="VC for mat_mult_ket_bv_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_mult_ket_bv_gen&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.45" steps="379370"/></proof>
  </goal>
  <goal name="mat_mult_ket_bv_gen&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.78" steps="404983"/></proof>
  </goal>
  <goal name="mat_mult_ket_bv_gen&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.46" steps="379426"/></proof>
  </goal>
  <goal name="mat_mult_ket_bv_gen&#39;vc.3" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="Ensures">
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_mult_ket_sum_l&#39;vc" expl="VC for mat_mult_ket_sum_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_mult_ket_sum_l&#39;vc.0" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="mat_mult_ket_sum_l&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="mat_mult_ket_sum_l&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="1.57" steps="562959"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="mat_mult_ket_sum_l&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="mat_mult_ket_sum_l&#39;vc.0.1.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="1.81" steps="561940"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mat_mult_ket_sum_l&#39;vc.1" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="goal_comm">
   <goal name="mat_mult_ket_sum_l&#39;vc.1.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="set_s_rows">
    <goal name="mat_mult_ket_sum_l&#39;vc.1.0.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.60" steps="490910"/></proof>
    </goal>
    <goal name="mat_mult_ket_sum_l&#39;vc.1.0.1" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="1.73" steps="563728"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mat_mult_ket_sum_l&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.59" steps="490780"/></proof>
  </goal>
  <goal name="mat_mult_ket_sum_l&#39;vc.3" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ket_sum_l s f l)" arg2="(mat_sum s f)">
   <goal name="mat_mult_ket_sum_l&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures">
    <goal name="mat_mult_ket_sum_l&#39;vc.3.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="mat_mult_ket_sum_l&#39;vc.3.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="ket_sum_l&#39;spec1">
      <goal name="mat_mult_ket_sum_l&#39;vc.3.0.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
      </transf>
      </goal>
      <goal name="mat_mult_ket_sum_l&#39;vc.3.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.43" steps="639850"/></proof>
      </goal>
      <goal name="mat_mult_ket_sum_l&#39;vc.3.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.69" steps="569515"/></proof>
      </goal>
      <goal name="mat_mult_ket_sum_l&#39;vc.3.0.0.0.3" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="mat_mult_ket_sum_l&#39;vc.3.0.0.0.3.0" expl="rewrite premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="mat_mult_ket_sum_l&#39;vc.3.0.0.0.3.0.0" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="1.22" steps="603476"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_mult_ket_sum_l&#39;vc.3.1" expl="equality hypothesis" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="mat_mult_ket_sum_l&#39;vc.3.1.0" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_l&#39;spec1">
     <goal name="mat_mult_ket_sum_l&#39;vc.3.1.0.0" expl="equality hypothesis" proved="true">
     <proof prover="8"><result status="valid" time="0.69" steps="569511"/></proof>
     </goal>
     <goal name="mat_mult_ket_sum_l&#39;vc.3.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.40" steps="639850"/></proof>
     </goal>
     <goal name="mat_mult_ket_sum_l&#39;vc.3.1.0.2" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.66" steps="569515"/></proof>
     </goal>
     <goal name="mat_mult_ket_sum_l&#39;vc.3.1.0.3" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.07" steps="601576"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="fun_inversion_pre&#39;vc" expl="VC for fun_inversion_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="fun_inversion_pre&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.52" steps="544776"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.1" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_valid_index">
   <goal name="fun_inversion_pre&#39;vc.1.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="fun_inversion_pre&#39;vc.1.0.0" expl="apply premises" proved="true">
    <transf name="assert" proved="true" arg1="( mem (f j) (to_fset 0 n))">
     <goal name="fun_inversion_pre&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <proof prover="8"><result status="valid" time="1.93" steps="553455"/></proof>
     </goal>
     <goal name="fun_inversion_pre&#39;vc.1.0.0.1" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.20" steps="546564"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="fun_inversion_pre&#39;vc.1.0.1" expl="apply premises" proved="true">
    <transf name="assert" proved="true" arg1="( mem (f j) (to_fset 0 n))">
     <goal name="fun_inversion_pre&#39;vc.1.0.1.0" expl="asserted formula" proved="true">
     <proof prover="8"><result status="valid" time="1.91" steps="553455"/></proof>
     </goal>
     <goal name="fun_inversion_pre&#39;vc.1.0.1.1" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.22" steps="546712"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="fun_inversion_pre&#39;vc.1.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="fun_inversion_pre&#39;vc.1.1.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.57" steps="479438"/></proof>
    </goal>
    <goal name="fun_inversion_pre&#39;vc.1.1.1" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.61" steps="488635"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.20" steps="544609"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.20" steps="545069"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.4" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_valid_index">
   <goal name="fun_inversion_pre&#39;vc.4.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="fun_inversion_pre&#39;vc.4.0.0" expl="apply premises" proved="true">
    <transf name="assert" proved="true" arg1="(mem j (to_fset 0 n))">
     <goal name="fun_inversion_pre&#39;vc.4.0.0.0" expl="asserted formula" proved="true">
     <proof prover="8"><result status="valid" time="1.18" steps="509047"/></proof>
     </goal>
     <goal name="fun_inversion_pre&#39;vc.4.0.0.1" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.47" steps="546800"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="fun_inversion_pre&#39;vc.4.0.1" expl="apply premises" proved="true">
    <transf name="assert" proved="true" arg1="(mem j (to_fset 0 n))">
     <goal name="fun_inversion_pre&#39;vc.4.0.1.0" expl="asserted formula" proved="true">
     <proof prover="8"><result status="valid" time="0.98" steps="509047"/></proof>
     </goal>
     <goal name="fun_inversion_pre&#39;vc.4.0.1.1" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.44" steps="546934"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="fun_inversion_pre&#39;vc.4.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="fun_inversion_pre&#39;vc.4.1.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.57" steps="479438"/></proof>
    </goal>
    <goal name="fun_inversion_pre&#39;vc.4.1.1" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.66" steps="488635"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.5" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.60" steps="479150"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.6" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.58" steps="479153"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.7" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.27" steps="544718"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.8" expl="assertion" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="fun_inversion_pre&#39;vc.8.0" expl="assertion" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="fun_inversion_pre&#39;vc.8.0.0" expl="VC for fun_inversion_pre" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="fun_inversion_pre&#39;vc.8.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="scalar_rows">
      <goal name="fun_inversion_pre&#39;vc.8.0.0.0.0" expl="assertion" proved="true">
      <transf name="rewrite" proved="true" arg1="set_rows">
       <goal name="fun_inversion_pre&#39;vc.8.0.0.0.0.0" expl="assertion" proved="true">
       <proof prover="10"><result status="valid" time="0.94" steps="5127291"/></proof>
       </goal>
       <goal name="fun_inversion_pre&#39;vc.8.0.0.0.0.1" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_valid_index">
        <goal name="fun_inversion_pre&#39;vc.8.0.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="(mem e (to_fset 0 n))">
         <goal name="fun_inversion_pre&#39;vc.8.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
         <proof prover="8"><result status="valid" time="0.60" steps="482127"/></proof>
         </goal>
         <goal name="fun_inversion_pre&#39;vc.8.0.0.0.0.1.0.1" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="( rows (make n 1 c_zero))" arg2="n">
          <goal name="fun_inversion_pre&#39;vc.8.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="to_fset_bounds">
           <goal name="fun_inversion_pre&#39;vc.8.0.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="1.39" steps="548110"/></proof>
           </goal>
           <goal name="fun_inversion_pre&#39;vc.8.0.0.0.0.1.0.1.0.1" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="1.75" steps="554586"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="fun_inversion_pre&#39;vc.8.0.0.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
          <proof prover="10"><result status="valid" time="0.97" steps="5127296"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="fun_inversion_pre&#39;vc.8.0.0.0.0.1.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="fun_inversion_pre&#39;vc.8.0.0.0.0.1.1.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="0.59" steps="482134"/></proof>
         </goal>
         <goal name="fun_inversion_pre&#39;vc.8.0.0.0.0.1.1.1" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.28" steps="553930"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="fun_inversion_pre&#39;vc.8.0.0.1" expl="assertion" proved="true">
     <proof prover="10"><result status="valid" time="0.94" steps="5127269"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.9" expl="assertion" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="fun_inversion_pre&#39;vc.9.0" expl="assertion" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="fun_inversion_pre&#39;vc.9.0.0" expl="VC for fun_inversion_pre" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="fun_inversion_pre&#39;vc.9.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="scalar_columns">
      <goal name="fun_inversion_pre&#39;vc.9.0.0.0.0" expl="assertion" proved="true">
      <transf name="rewrite" proved="true" arg1="set_columns">
       <goal name="fun_inversion_pre&#39;vc.9.0.0.0.0.0" expl="assertion" proved="true">
       <proof prover="10"><result status="valid" time="0.93" steps="5451927"/></proof>
       </goal>
       <goal name="fun_inversion_pre&#39;vc.9.0.0.0.0.1" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_valid_index">
        <goal name="fun_inversion_pre&#39;vc.9.0.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="(mem e (to_fset 0 n))">
         <goal name="fun_inversion_pre&#39;vc.9.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
         <proof prover="8"><result status="valid" time="0.62" steps="524723"/></proof>
         </goal>
         <goal name="fun_inversion_pre&#39;vc.9.0.0.0.0.1.0.1" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="( rows (make n 1 c_zero))" arg2="n">
          <goal name="fun_inversion_pre&#39;vc.9.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="to_fset_bounds">
           <goal name="fun_inversion_pre&#39;vc.9.0.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="1.68" steps="592087"/></proof>
           </goal>
           <goal name="fun_inversion_pre&#39;vc.9.0.0.0.0.1.0.1.0.1" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="1.88" steps="598626"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="fun_inversion_pre&#39;vc.9.0.0.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
          <proof prover="10"><result status="valid" time="0.99" steps="5474037"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="fun_inversion_pre&#39;vc.9.0.0.0.0.1.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="fun_inversion_pre&#39;vc.9.0.0.0.0.1.1.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="0.66" steps="524730"/></proof>
         </goal>
         <goal name="fun_inversion_pre&#39;vc.9.0.0.0.0.1.1.1" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.41" steps="590841"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="fun_inversion_pre&#39;vc.9.0.0.1" expl="assertion" proved="true">
     <proof prover="10"><result status="valid" time="0.95" steps="5451908"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.10" expl="assertion" proved="true">
  <transf name="compute_hyp_specified" proved="true" >
   <goal name="fun_inversion_pre&#39;vc.10.0" expl="assertion" proved="true">
   <transf name="case" proved="true" arg1="(mem e s&#39;)">
    <goal name="fun_inversion_pre&#39;vc.10.0.0" expl="true case (assertion)" proved="true">
    <transf name="replace" proved="true" arg1="(if mem e s&#39;
   then (a @ inv_func f s s&#39; e) *.. set (make n 1 c_zero) e 0 c_one
   else make n 1 c_zero)" arg2="((a @ inv_func f s s&#39; e) *.. set (make n 1 c_zero) e 0 c_one
   )">
     <goal name="fun_inversion_pre&#39;vc.10.0.0.0" expl="true case (assertion)" proved="true">
     <transf name="rewrite" proved="true" arg1="scalar_rows">
      <goal name="fun_inversion_pre&#39;vc.10.0.0.0.0" expl="true case (assertion)" proved="true">
      <transf name="rewrite" proved="true" arg1="set_rows">
       <goal name="fun_inversion_pre&#39;vc.10.0.0.0.0.0" expl="true case (assertion)" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="fun_inversion_pre&#39;vc.10.0.0.0.0.0.0" expl="true case (assertion)" proved="true">
        <transf name="rewrite" proved="true" arg1="make&#39;spec2">
         <goal name="fun_inversion_pre&#39;vc.10.0.0.0.0.0.0.0" expl="true case (assertion)" proved="true">
         <proof prover="8"><result status="valid" time="0.76" steps="600109"/></proof>
         </goal>
         <goal name="fun_inversion_pre&#39;vc.10.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="1.60" steps="672172"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="fun_inversion_pre&#39;vc.10.0.0.0.0.1" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_valid_index">
        <goal name="fun_inversion_pre&#39;vc.10.0.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="fun_inversion_pre&#39;vc.10.0.0.0.0.1.0.0" proved="true">
         <proof prover="8"><result status="valid" time="1.40" steps="586142"/></proof>
         </goal>
         <goal name="fun_inversion_pre&#39;vc.10.0.0.0.0.1.0.1" proved="true">
         <transf name="replace" proved="true" arg1="(rows (make n 1 c_zero))" arg2="n">
          <goal name="fun_inversion_pre&#39;vc.10.0.0.0.0.1.0.1.0" proved="true">
          <proof prover="8"><result status="valid" time="1.51" steps="586164"/></proof>
          </goal>
          <goal name="fun_inversion_pre&#39;vc.10.0.0.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
          <proof prover="10"><result status="valid" time="0.99" steps="5346430"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="fun_inversion_pre&#39;vc.10.0.0.0.0.1.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="fun_inversion_pre&#39;vc.10.0.0.0.0.1.1.0" proved="true">
         <proof prover="8"><result status="valid" time="0.63" steps="517997"/></proof>
         </goal>
         <goal name="fun_inversion_pre&#39;vc.10.0.0.0.0.1.1.1" proved="true">
         <proof prover="8"><result status="valid" time="1.41" steps="586574"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="fun_inversion_pre&#39;vc.10.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="8"><result status="valid" time="1.17" steps="580316"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="fun_inversion_pre&#39;vc.10.0.1" expl="false case (assertion)" proved="true">
    <proof prover="10"><result status="valid" time="1.03" steps="5634011"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.11" expl="assertion" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="fun_inversion_pre&#39;vc.11.0" expl="assertion" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="fun_inversion_pre&#39;vc.11.0.0" expl="VC for fun_inversion_pre" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="fun_inversion_pre&#39;vc.11.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="scalar_columns">
      <goal name="fun_inversion_pre&#39;vc.11.0.0.0.0" expl="assertion" proved="true">
      <transf name="rewrite" proved="true" arg1="set_columns">
       <goal name="fun_inversion_pre&#39;vc.11.0.0.0.0.0" expl="assertion" proved="true">
       <proof prover="10"><result status="valid" time="0.94" steps="5457604"/></proof>
       </goal>
       <goal name="fun_inversion_pre&#39;vc.11.0.0.0.0.1" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_valid_index">
        <goal name="fun_inversion_pre&#39;vc.11.0.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="fun_inversion_pre&#39;vc.11.0.0.0.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.47" steps="591331"/></proof>
         </goal>
         <goal name="fun_inversion_pre&#39;vc.11.0.0.0.0.1.0.1" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(rows (make n 1 c_zero))" arg2="n">
          <goal name="fun_inversion_pre&#39;vc.11.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.42" steps="591332"/></proof>
          </goal>
          <goal name="fun_inversion_pre&#39;vc.11.0.0.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
          <proof prover="10"><result status="valid" time="1.10" steps="5462069"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="fun_inversion_pre&#39;vc.11.0.0.0.0.1.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="fun_inversion_pre&#39;vc.11.0.0.0.0.1.1.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="0.63" steps="523661"/></proof>
         </goal>
         <goal name="fun_inversion_pre&#39;vc.11.0.0.0.0.1.1.1" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.35" steps="591908"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="fun_inversion_pre&#39;vc.11.0.0.1" expl="assertion" proved="true">
     <proof prover="10"><result status="valid" time="0.97" steps="5457587"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.12" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Assert3">
   <goal name="fun_inversion_pre&#39;vc.12.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Assert3">
    <goal name="fun_inversion_pre&#39;vc.12.0.0" expl="precondition" proved="true">
    <proof prover="8"><result status="valid" time="0.71" steps="553129"/></proof>
    </goal>
    <goal name="fun_inversion_pre&#39;vc.12.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.67" steps="553131"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="fun_inversion_pre&#39;vc.12.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.66" steps="553131"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.13" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Assert2">
   <goal name="fun_inversion_pre&#39;vc.13.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Assert2">
    <goal name="fun_inversion_pre&#39;vc.13.0.0" expl="precondition" proved="true">
    <proof prover="8"><result status="valid" time="0.64" steps="553401"/></proof>
    </goal>
    <goal name="fun_inversion_pre&#39;vc.13.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.69" steps="553403"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="fun_inversion_pre&#39;vc.13.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.75" steps="553403"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.14" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Assert1">
   <goal name="fun_inversion_pre&#39;vc.14.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Assert1">
    <goal name="fun_inversion_pre&#39;vc.14.0.0" expl="precondition" proved="true">
    <proof prover="8"><result status="valid" time="0.85" steps="554189"/></proof>
    </goal>
    <goal name="fun_inversion_pre&#39;vc.14.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.63" steps="554191"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="fun_inversion_pre&#39;vc.14.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.62" steps="554191"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.15" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="fun_inversion_pre&#39;vc.15.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="1.54" steps="630287"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.16" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="fun_inversion_pre&#39;vc.16.0" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="fun_inversion_pre&#39;vc.16.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="fun_inversion_pre&#39;vc.16.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.59" steps="632636"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="fun_inversion_pre&#39;vc.16.1" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="fun_inversion_pre&#39;vc.16.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="fun_inversion_pre&#39;vc.16.1.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.66" steps="632449"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.17" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="fun_inversion_pre&#39;vc.17.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="2.01" steps="635581"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.18" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.40" steps="624968"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.19" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="fun_inversion_pre&#39;vc.19.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="2.25" steps="635772"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.20" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="fun_inversion_pre&#39;vc.20.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="fun_inversion_pre&#39;vc.20.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="fun_inversion_pre&#39;vc.20.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.58" steps="632194"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="fun_inversion_pre&#39;vc.20.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="fun_inversion_pre&#39;vc.20.1.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="fun_inversion_pre&#39;vc.20.1.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.66" steps="631984"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.21" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="fun_inversion_pre&#39;vc.21.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="2.25" steps="636291"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.22" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.65" steps="625790"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.23" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Assert">
   <goal name="fun_inversion_pre&#39;vc.23.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.82" steps="555052"/></proof>
   </goal>
   <goal name="fun_inversion_pre&#39;vc.23.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="1.85" steps="632428"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.24" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="fun_inversion_pre&#39;vc.24.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="fun_inversion_pre&#39;vc.24.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="fun_inversion_pre&#39;vc.24.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.71" steps="635195"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="fun_inversion_pre&#39;vc.24.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="fun_inversion_pre&#39;vc.24.1.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="fun_inversion_pre&#39;vc.24.1.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.76" steps="635003"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.25" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.28" steps="586985"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.26" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.71" steps="555339"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.27" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="fun_inversion_pre&#39;vc.27.0" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="fun_inversion_pre&#39;vc.27.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="fun_inversion_pre&#39;vc.27.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.76" steps="635683"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="fun_inversion_pre&#39;vc.27.1" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="fun_inversion_pre&#39;vc.27.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="fun_inversion_pre&#39;vc.27.1.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.72" steps="635472"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.28" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.38" steps="588367"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.29" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.75" steps="556031"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.30" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="fun_inversion_pre&#39;vc.30.0" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="fun_inversion_pre&#39;vc.30.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="fun_inversion_pre&#39;vc.30.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.81" steps="641289"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="fun_inversion_pre&#39;vc.30.1" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="fun_inversion_pre&#39;vc.30.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="fun_inversion_pre&#39;vc.30.1.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.84" steps="641102"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.31" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="3.11" steps="905520"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.32" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.92" steps="636497"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.33" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.72" steps="632794"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.34" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.64" steps="637773"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.35" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.84" steps="640520"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.36" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.87" steps="635359"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.37" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="fun_inversion_pre&#39;vc.37.0" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="fun_inversion_pre&#39;vc.37.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="fun_inversion_pre&#39;vc.37.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.66" steps="642442"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="fun_inversion_pre&#39;vc.37.1" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="fun_inversion_pre&#39;vc.37.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="fun_inversion_pre&#39;vc.37.1.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.69" steps="642240"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.38" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="fun_inversion_pre&#39;vc.38.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures7">
    <goal name="fun_inversion_pre&#39;vc.38.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures36">
     <goal name="fun_inversion_pre&#39;vc.38.0.0.0" expl="precondition" proved="true">
     <proof prover="8"><result status="valid" time="2.24" steps="652699"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.39" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures6">
   <goal name="fun_inversion_pre&#39;vc.39.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures32">
    <goal name="fun_inversion_pre&#39;vc.39.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Assert2">
     <goal name="fun_inversion_pre&#39;vc.39.0.0.0" expl="precondition" proved="true">
     <proof prover="8"><result status="valid" time="0.80" steps="558786"/></proof>
     </goal>
     <goal name="fun_inversion_pre&#39;vc.39.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="2.47" steps="650805"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.40" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.30" steps="590671"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.41" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.60" steps="639953"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.42" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="fun_inversion_pre&#39;vc.42.0" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="fun_inversion_pre&#39;vc.42.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="fun_inversion_pre&#39;vc.42.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.70" steps="647606"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="fun_inversion_pre&#39;vc.42.1" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="fun_inversion_pre&#39;vc.42.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="fun_inversion_pre&#39;vc.42.1.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.66" steps="647410"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.43" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures2">
   <goal name="fun_inversion_pre&#39;vc.43.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures29">
    <goal name="fun_inversion_pre&#39;vc.43.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Assert1">
     <goal name="fun_inversion_pre&#39;vc.43.0.0.0" expl="precondition" proved="true">
     <proof prover="8"><result status="valid" time="0.71" steps="561141"/></proof>
     </goal>
     <goal name="fun_inversion_pre&#39;vc.43.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="2.38" steps="654625"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.44" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures1">
   <goal name="fun_inversion_pre&#39;vc.44.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Assert">
    <goal name="fun_inversion_pre&#39;vc.44.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures25">
     <goal name="fun_inversion_pre&#39;vc.44.0.0.0" expl="precondition" proved="true">
     <proof prover="8"><result status="valid" time="0.71" steps="561364"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="fun_inversion_pre&#39;vc.44.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="2.70" steps="656468"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.45" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.30" steps="593413"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.46" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.11" steps="645949"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.47" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.22" steps="662773"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.48" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.59" steps="666150"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.49" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="get_surjective" arg2="f,s,s&#39;">
   <goal name="fun_inversion_pre&#39;vc.49.0" expl="precondition" proved="true">
   <transf name="destruct" proved="true" arg1="Hinst">
    <goal name="fun_inversion_pre&#39;vc.49.0.0" expl="destruct premise" proved="true">
    <proof prover="8"><result status="valid" time="1.38" steps="593613"/></proof>
    </goal>
    <goal name="fun_inversion_pre&#39;vc.49.0.1" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="fun_inversion_pre&#39;vc.49.0.1.0" expl="precondition" proved="true">
     <transf name="instantiate" proved="true" arg1="Hinst" arg2="e&#39;">
      <goal name="fun_inversion_pre&#39;vc.49.0.1.0.0" expl="precondition" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="fun_inversion_pre&#39;vc.49.0.1.0.0.0" expl="destruct premise" proved="true">
       <proof prover="8"><result status="valid" time="1.58" steps="688279"/></proof>
       </goal>
       <goal name="fun_inversion_pre&#39;vc.49.0.1.0.0.1" expl="precondition" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="fun_inversion_pre&#39;vc.49.0.1.0.0.1.0" expl="precondition" proved="true">
        <transf name="exists" proved="true" arg1="e">
         <goal name="fun_inversion_pre&#39;vc.49.0.1.0.0.1.0.0" proved="true">
         <proof prover="8"><result status="valid" time="1.62" steps="689388"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.50" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="fun_inversion_pre&#39;vc.50.0" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.31" steps="594154"/></proof>
   </goal>
   <goal name="fun_inversion_pre&#39;vc.50.1" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="2.47" steps="662732"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.51" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.82" steps="562702"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.52" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.74" steps="648438"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.53" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.79" steps="562729"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.54" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.30" steps="658964"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.55" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.98" steps="659186"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.56" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="fun_inversion_pre&#39;vc.56.0" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="fun_inversion_pre&#39;vc.56.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="fun_inversion_pre&#39;vc.56.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="2.13" steps="669441"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="fun_inversion_pre&#39;vc.56.1" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="fun_inversion_pre&#39;vc.56.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="fun_inversion_pre&#39;vc.56.1.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="2.03" steps="659391"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.57" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.85" steps="649741"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.58" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="fun_inversion_pre&#39;vc.58.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="fun_inversion_pre&#39;vc.58.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="fun_inversion_pre&#39;vc.58.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="2.01" steps="664028"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="fun_inversion_pre&#39;vc.58.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="fun_inversion_pre&#39;vc.58.1.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="fun_inversion_pre&#39;vc.58.1.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="2.00" steps="663670"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.59" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.81" steps="652815"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.60" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures3">
   <goal name="fun_inversion_pre&#39;vc.60.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures21">
    <goal name="fun_inversion_pre&#39;vc.60.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures50">
     <goal name="fun_inversion_pre&#39;vc.60.0.0.0" expl="precondition" proved="true">
     <proof prover="8"><result status="valid" time="2.54" steps="677708"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.61" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures2">
   <goal name="fun_inversion_pre&#39;vc.61.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures20">
    <goal name="fun_inversion_pre&#39;vc.61.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures46">
     <goal name="fun_inversion_pre&#39;vc.61.0.0.0" expl="precondition" proved="true">
     <proof prover="8"><result status="valid" time="2.74" steps="678745"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.62" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.87" steps="565221"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.63" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(mat_sum (remove (choose s) s)
  (fun (j:int) -&gt;
    if mem j s then (a @ j) *.. set (make n 1 c_zero) (f @ j) 0 c_one
    else make n 1 c_zero))" arg2="(mat_sum (remove (choose s) s)
  (fun (j:int) -&gt; (a @ j) *.. set (make n 1 c_zero) (f @ j) 0 c_one))">
   <goal name="fun_inversion_pre&#39;vc.63.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures8">
    <goal name="fun_inversion_pre&#39;vc.63.0.0" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="mat_sum_eq">
     <goal name="fun_inversion_pre&#39;vc.63.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.90" steps="656995"/></proof>
     </goal>
     <goal name="fun_inversion_pre&#39;vc.63.0.0.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="fun_inversion_pre&#39;vc.63.0.0.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="fun_inversion_pre&#39;vc.63.0.0.1.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="fun_inversion_pre&#39;vc.63.0.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="scalar_rows">
         <goal name="fun_inversion_pre&#39;vc.63.0.0.1.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="scalar_rows">
          <goal name="fun_inversion_pre&#39;vc.63.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="3.99" steps="1228027"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="fun_inversion_pre&#39;vc.63.0.0.1.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="fun_inversion_pre&#39;vc.63.0.0.1.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="fun_inversion_pre&#39;vc.63.0.0.1.1.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="scalar_columns">
         <goal name="fun_inversion_pre&#39;vc.63.0.0.1.1.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="scalar_columns">
          <goal name="fun_inversion_pre&#39;vc.63.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="4.02" steps="1221962"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="fun_inversion_pre&#39;vc.63.0.0.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="fun_inversion_pre&#39;vc.63.0.0.2.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="fun_inversion_pre&#39;vc.63.0.0.2.0.0" expl="apply premises" proved="true">
       <transf name="eliminate_if" proved="true" >
        <goal name="fun_inversion_pre&#39;vc.63.0.0.2.0.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="fun_inversion_pre&#39;vc.63.0.0.2.0.0.0.0" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(inv_func f (remove (choose s) s) (remove (f @ choose s) s&#39;) a)" arg2="(inv_func f s s&#39; a)">
          <goal name="fun_inversion_pre&#39;vc.63.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="0.87" steps="574676"/></proof>
          </goal>
          <goal name="fun_inversion_pre&#39;vc.63.0.0.2.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <transf name="assert" proved="true" arg1="(forall a b. mem a s -&gt; mem b s -&gt; f a = f b -&gt; a = b)">
           <goal name="fun_inversion_pre&#39;vc.63.0.0.2.0.0.0.0.1.0" expl="asserted formula" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="fun_inversion_pre&#39;vc.63.0.0.2.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
            <transf name="instantiate" proved="true" arg1="get_injective" arg2="f,s">
             <goal name="fun_inversion_pre&#39;vc.63.0.0.2.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
             <transf name="assert" proved="true" arg1="(a = b -&gt; f a = f b)">
              <goal name="fun_inversion_pre&#39;vc.63.0.0.2.0.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
              <proof prover="8"><result status="valid" time="0.86" steps="574875"/></proof>
              </goal>
              <goal name="fun_inversion_pre&#39;vc.63.0.0.2.0.0.0.0.1.0.0.0.1" expl="asserted formula" proved="true">
              <proof prover="8"><result status="valid" time="1.49" steps="610157"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="fun_inversion_pre&#39;vc.63.0.0.2.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
           <transf name="apply" proved="true" arg1="goal_comm">
            <goal name="fun_inversion_pre&#39;vc.63.0.0.2.0.0.0.0.1.1.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="h">
             <goal name="fun_inversion_pre&#39;vc.63.0.0.2.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.53" steps="609933"/></proof>
             </goal>
             <goal name="fun_inversion_pre&#39;vc.63.0.0.2.0.0.0.0.1.1.0.1" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="2.23" steps="688335"/></proof>
             </goal>
             <goal name="fun_inversion_pre&#39;vc.63.0.0.2.0.0.0.0.1.1.0.2" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.88" steps="674158"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="fun_inversion_pre&#39;vc.63.0.0.2.0.0.0.1" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(inv_func f (remove (choose s) s) (remove (f @ choose s) s&#39;) a)" arg2="(inv_func f s s&#39; a)">
          <goal name="fun_inversion_pre&#39;vc.63.0.0.2.0.0.0.1.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.47" steps="609896"/></proof>
          </goal>
          <goal name="fun_inversion_pre&#39;vc.63.0.0.2.0.0.0.1.1" expl="equality hypothesis" proved="true">
          <transf name="assert" proved="true" arg1="(f ( inv_func f (remove (choose s) s) (remove (f @ choose s) s&#39;) a) = f (inv_func f s s&#39; a))">
           <goal name="fun_inversion_pre&#39;vc.63.0.0.2.0.0.0.1.1.0" expl="asserted formula" proved="true">
           <proof prover="8"><result status="valid" time="1.47" steps="609915"/></proof>
           </goal>
           <goal name="fun_inversion_pre&#39;vc.63.0.0.2.0.0.0.1.1.1" expl="equality hypothesis" proved="true">
           <transf name="case" proved="true" arg1="(inv_func f (remove (choose s) s) (remove (f @ choose s) s&#39;) a
  &lt;&gt; inv_func f s s&#39; a)">
            <goal name="fun_inversion_pre&#39;vc.63.0.0.2.0.0.0.1.1.1.0" expl="true case (equality hypothesis)" proved="true">
            <transf name="assert" proved="true" arg1="( (f @ inv_func f (remove (choose s) s) (remove (f @ choose s) s&#39;) a)
  &lt;&gt; (f @ inv_func f s s&#39; a))">
             <goal name="fun_inversion_pre&#39;vc.63.0.0.2.0.0.0.1.1.1.0.0" expl="asserted formula" proved="true">
             <transf name="instantiate" proved="true" arg1="get_injective" arg2="f,s">
              <goal name="fun_inversion_pre&#39;vc.63.0.0.2.0.0.0.1.1.1.0.0.0" expl="asserted formula" proved="true">
              <transf name="apply" proved="true" arg1="Hinst">
               <goal name="fun_inversion_pre&#39;vc.63.0.0.2.0.0.0.1.1.1.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="1.50" steps="609745"/></proof>
               </goal>
               <goal name="fun_inversion_pre&#39;vc.63.0.0.2.0.0.0.1.1.1.0.0.0.1" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="1.47" steps="610091"/></proof>
               </goal>
               <goal name="fun_inversion_pre&#39;vc.63.0.0.2.0.0.0.1.1.1.0.0.0.2" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="1.52" steps="610091"/></proof>
               </goal>
               <goal name="fun_inversion_pre&#39;vc.63.0.0.2.0.0.0.1.1.1.0.0.0.3" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="0.86" steps="574880"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="fun_inversion_pre&#39;vc.63.0.0.2.0.0.0.1.1.1.0.1" expl="true case (equality hypothesis)" proved="true">
             <proof prover="8"><result status="valid" time="0.84" steps="574751"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="fun_inversion_pre&#39;vc.63.0.0.2.0.0.0.1.1.1.1" expl="false case (equality hypothesis)" proved="true">
            <proof prover="8"><result status="valid" time="0.83" steps="574744"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="fun_inversion_pre&#39;vc.63.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="mat_sum_eq">
    <goal name="fun_inversion_pre&#39;vc.63.1.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="1.82" steps="656969"/></proof>
    </goal>
    <goal name="fun_inversion_pre&#39;vc.63.1.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="fun_inversion_pre&#39;vc.63.1.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="fun_inversion_pre&#39;vc.63.1.1.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="fun_inversion_pre&#39;vc.63.1.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.72" steps="670644"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="fun_inversion_pre&#39;vc.63.1.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="fun_inversion_pre&#39;vc.63.1.1.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="fun_inversion_pre&#39;vc.63.1.1.1.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.71" steps="670323"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="fun_inversion_pre&#39;vc.63.1.2" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="1.87" steps="658410"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.64" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.66" steps="656495"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.65" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.88" steps="656483"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.66" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.88" steps="660403"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.67" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.85" steps="566470"/></proof>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.68" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(mat_sum s (fun (j:int) -&gt;
    if mem j s then (a @ j) *.. set (make n 1 c_zero) (f @ j) 0 c_one
    else make n 1 c_zero))" arg2="(mat_sum (add (choose s ) (remove (choose s) s))(fun (j:int) -&gt;
    if mem j s then (a @ j) *.. set (make n 1 c_zero) (f @ j) 0 c_one
    else make n 1 c_zero))">
   <goal name="fun_inversion_pre&#39;vc.68.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_sum_add">
    <goal name="fun_inversion_pre&#39;vc.68.0.0" expl="precondition" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="fun_inversion_pre&#39;vc.68.0.0.0" expl="precondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures8">
      <goal name="fun_inversion_pre&#39;vc.68.0.0.0.0" expl="precondition" proved="true">
      <transf name="replace" proved="true" arg1="(add (f @ choose s) (remove (f @ choose s) s&#39;))" arg2="s&#39;" arg3="in" arg4="Ensures21">
       <goal name="fun_inversion_pre&#39;vc.68.0.0.0.0.0" expl="precondition" proved="true">
       <transf name="rewrite" proved="true" arg1="Ensures21">
        <goal name="fun_inversion_pre&#39;vc.68.0.0.0.0.0.0" expl="precondition" proved="true">
        <transf name="compute_specified" proved="true" >
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="fun_inversion_pre&#39;vc.68.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="8"><result status="valid" time="1.90" steps="660966"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="fun_inversion_pre&#39;vc.68.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.89" steps="663724"/></proof>
    </goal>
    <goal name="fun_inversion_pre&#39;vc.68.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.94" steps="664566"/></proof>
    </goal>
    <goal name="fun_inversion_pre&#39;vc.68.0.3" expl="rewrite premises" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures30">
     <goal name="fun_inversion_pre&#39;vc.68.0.3.0" expl="rewrite premises" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures59">
      <goal name="fun_inversion_pre&#39;vc.68.0.3.0.0" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="fun_inversion_pre&#39;vc.68.0.3.0.0.0" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="2.62" steps="689315"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="fun_inversion_pre&#39;vc.68.0.4" expl="rewrite premises" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures29">
     <goal name="fun_inversion_pre&#39;vc.68.0.4.0" expl="rewrite premises" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures55">
      <goal name="fun_inversion_pre&#39;vc.68.0.4.0.0" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="2.71" steps="691882"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="fun_inversion_pre&#39;vc.68.0.5" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.41" steps="600835"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="fun_inversion_pre&#39;vc.68.1" expl="equality hypothesis" proved="true">
   <transf name="replace" proved="true" arg1="(add (choose s) (remove (choose s) s))" arg2="s">
    <goal name="fun_inversion_pre&#39;vc.68.1.0" expl="equality hypothesis" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
    <goal name="fun_inversion_pre&#39;vc.68.1.1" expl="equality hypothesis" proved="true">
    <proof prover="8"><result status="valid" time="1.68" steps="662644"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="fun_inversion_pre&#39;vc.69" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(cardinal s = 1)">
   <goal name="fun_inversion_pre&#39;vc.69.0" expl="true case (postcondition)" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_sum_cardone">
    <goal name="fun_inversion_pre&#39;vc.69.0.0" expl="true case (postcondition)" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="fun_inversion_pre&#39;vc.69.0.0.0" expl="true case (postcondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="mat_sum_cardone">
      <goal name="fun_inversion_pre&#39;vc.69.0.0.0.0" expl="true case (postcondition)" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="fun_inversion_pre&#39;vc.69.0.0.0.0.0" expl="true case (postcondition)" proved="true">
       <transf name="apply" proved="true" arg1="scalar_eq_gen">
        <goal name="fun_inversion_pre&#39;vc.69.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="(f (element s) = element s&#39;)">
         <goal name="fun_inversion_pre&#39;vc.69.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="(cardinal s&#39; = 1)">
          <goal name="fun_inversion_pre&#39;vc.69.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
          <proof prover="8"><result status="valid" time="1.41" steps="591892"/></proof>
          </goal>
          <goal name="fun_inversion_pre&#39;vc.69.0.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
          <transf name="assert" proved="true" arg1="(mem (f @ element s) s&#39;)">
           <goal name="fun_inversion_pre&#39;vc.69.0.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
           <proof prover="8"><result status="valid" time="1.99" steps="636792"/></proof>
           </goal>
           <goal name="fun_inversion_pre&#39;vc.69.0.0.0.0.0.0.0.1.1" expl="asserted formula" proved="true">
           <proof prover="8"><result status="valid" time="1.42" steps="592008"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="fun_inversion_pre&#39;vc.69.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.32" steps="591596"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="fun_inversion_pre&#39;vc.69.0.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="(inv_func f s s&#39; (element s&#39;) = element s)">
         <goal name="fun_inversion_pre&#39;vc.69.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="(mem (inv_func f s s&#39; (element s&#39;)) s)">
          <goal name="fun_inversion_pre&#39;vc.69.0.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
          <transf name="assert" proved="true" arg1="(mem (element s&#39;) s&#39;)">
           <goal name="fun_inversion_pre&#39;vc.69.0.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
           <transf name="assert" proved="true" arg1="(cardinal s&#39; =1)">
            <goal name="fun_inversion_pre&#39;vc.69.0.0.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
            <proof prover="8"><result status="valid" time="1.41" steps="591892"/></proof>
            </goal>
            <goal name="fun_inversion_pre&#39;vc.69.0.0.0.0.0.1.0.0.0.1" expl="asserted formula" proved="true">
            <proof prover="8"><result status="valid" time="1.98" steps="635443"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="fun_inversion_pre&#39;vc.69.0.0.0.0.0.1.0.0.1" expl="asserted formula" proved="true">
           <proof prover="8"><result status="valid" time="1.43" steps="591959"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="fun_inversion_pre&#39;vc.69.0.0.0.0.0.1.0.1" expl="asserted formula" proved="true">
          <proof prover="8"><result status="valid" time="1.44" steps="591988"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="fun_inversion_pre&#39;vc.69.0.0.0.0.0.1.1" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.37" steps="591580"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="fun_inversion_pre&#39;vc.69.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.42" steps="591892"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="fun_inversion_pre&#39;vc.69.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.83" steps="560988"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="fun_inversion_pre&#39;vc.69.1" expl="false case (postcondition)" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="fun_inversion_pre&#39;vc.69.1.0" expl="false case (postcondition)" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="fun_inversion_pre&#39;vc.69.1.0.0" expl="false case (postcondition)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="fun_inversion_pre&#39;vc.69.1.0.0.0" expl="false case (postcondition)" proved="true">
      <transf name="replace" proved="true" arg1="( mat_sum s (fun (j:int) -&gt; (a @ j) *.. set (make n 1 c_zero) (f @ j) 0 c_one))" arg2="(mat_sum s
  (fun (j:int) -&gt;
    if mem j s then (a @ j) *.. set (make n 1 c_zero) (f @ j) 0 c_one
    else make n 1 c_zero))">
       <goal name="fun_inversion_pre&#39;vc.69.1.0.0.0.0" expl="false case (postcondition)" proved="true">
       <proof prover="8"><result status="valid" time="0.85" steps="559425"/></proof>
       </goal>
       <goal name="fun_inversion_pre&#39;vc.69.1.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="mat_sum_eq">
        <goal name="fun_inversion_pre&#39;vc.69.1.0.0.0.1.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="0.64" steps="507729"/></proof>
        </goal>
        <goal name="fun_inversion_pre&#39;vc.69.1.0.0.0.1.1" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="fun_inversion_pre&#39;vc.69.1.0.0.0.1.1.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="fun_inversion_pre&#39;vc.69.1.0.0.0.1.1.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="fun_inversion_pre&#39;vc.69.1.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="scalar_rows">
            <goal name="fun_inversion_pre&#39;vc.69.1.0.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="scalar_rows">
             <goal name="fun_inversion_pre&#39;vc.69.1.0.0.0.1.1.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="0.81" steps="561016"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="fun_inversion_pre&#39;vc.69.1.0.0.0.1.1.1" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="fun_inversion_pre&#39;vc.69.1.0.0.0.1.1.1.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="fun_inversion_pre&#39;vc.69.1.0.0.0.1.1.1.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="scalar_columns">
            <goal name="fun_inversion_pre&#39;vc.69.1.0.0.0.1.1.1.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="scalar_columns">
             <goal name="fun_inversion_pre&#39;vc.69.1.0.0.0.1.1.1.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="0.72" steps="561004"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="fun_inversion_pre&#39;vc.69.1.0.0.0.1.2" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="0.86" steps="597622"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="fun_inversion_pre&#39;vc.69.1.1" expl="false case (postcondition)" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="fun_inversion_pre&#39;vc.69.1.1.0" expl="false case (postcondition)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="fun_inversion_pre&#39;vc.69.1.1.0.0" expl="false case (postcondition)" proved="true">
      <transf name="replace" proved="true" arg1="( mat_sum s (fun (j:int) -&gt; (a @ j) *.. set (make n 1 c_zero) (f @ j) 0 c_one))" arg2="(mat_sum s
  (fun (j:int) -&gt;
    if mem j s then (a @ j) *.. set (make n 1 c_zero) (f @ j) 0 c_one
    else make n 1 c_zero))">
       <goal name="fun_inversion_pre&#39;vc.69.1.1.0.0.0" expl="false case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="H">
        <goal name="fun_inversion_pre&#39;vc.69.1.1.0.0.0.0" expl="false case (postcondition)" proved="true">
        <transf name="apply" proved="true" arg1="mat_sum_eq">
         <goal name="fun_inversion_pre&#39;vc.69.1.1.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.69" steps="693950"/></proof>
         </goal>
         <goal name="fun_inversion_pre&#39;vc.69.1.1.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="2.15" steps="755070"/></proof>
         </goal>
         <goal name="fun_inversion_pre&#39;vc.69.1.1.0.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="2.11" steps="756447"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="fun_inversion_pre&#39;vc.69.1.1.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="mat_sum_eq">
        <goal name="fun_inversion_pre&#39;vc.69.1.1.0.0.1.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="0.96" steps="655796"/></proof>
        </goal>
        <goal name="fun_inversion_pre&#39;vc.69.1.1.0.0.1.1" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="fun_inversion_pre&#39;vc.69.1.1.0.0.1.1.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="fun_inversion_pre&#39;vc.69.1.1.0.0.1.1.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="fun_inversion_pre&#39;vc.69.1.1.0.0.1.1.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="scalar_rows">
            <goal name="fun_inversion_pre&#39;vc.69.1.1.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="scalar_rows">
             <goal name="fun_inversion_pre&#39;vc.69.1.1.0.0.1.1.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="2.93" steps="784717"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="fun_inversion_pre&#39;vc.69.1.1.0.0.1.1.1" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="fun_inversion_pre&#39;vc.69.1.1.0.0.1.1.1.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="fun_inversion_pre&#39;vc.69.1.1.0.0.1.1.1.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="scalar_columns">
            <goal name="fun_inversion_pre&#39;vc.69.1.1.0.0.1.1.1.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="scalar_columns">
             <goal name="fun_inversion_pre&#39;vc.69.1.1.0.0.1.1.1.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="2.79" steps="783073"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="fun_inversion_pre&#39;vc.69.1.1.0.0.1.2" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="2.16" steps="756381"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_fun_inversion&#39;vc" expl="VC for ket_fun_inversion" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_fun_inversion&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.22" steps="547251"/></proof>
  </goal>
  <goal name="ket_fun_inversion&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.25" steps="547323"/></proof>
  </goal>
  <goal name="ket_fun_inversion&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.79" steps="518779"/></proof>
  </goal>
  <goal name="ket_fun_inversion&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.33" steps="548183"/></proof>
  </goal>
  <goal name="ket_fun_inversion&#39;vc.4" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.78" steps="519236"/></proof>
  </goal>
  <goal name="ket_fun_inversion&#39;vc.5" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(mat_sum (to_fset 0 pow_2_n)
    (fun (j:int) -&gt;
      (a @ inv_ f (to_fset 0 pow_2_n) (to_fset 0 pow_2_n) j)
      *.. ket (ket_length m) j))" arg2="(mat_sum (to_fset 0 pow_2_n)
  (fun (j:int) -&gt; (a @ j) *.. set (make pow_2_n 1 c_zero) (f @ j) 0 c_one))">
   <goal name="ket_fun_inversion&#39;vc.5.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(mat_sum (to_fset 0 pow_2_n)
    (fun (j:int) -&gt; (a @ j) *.. set (make pow_2_n 1 c_zero) (f @ j) 0 c_one))" arg2="(mat_sum (to_fset 0 pow_2_n)
    (fun (j:int) -&gt; (a @ j) *.. ket (ket_length m) (f @ j)))">
    <goal name="ket_fun_inversion&#39;vc.5.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="Requires">
    </transf>
    </goal>
    <goal name="ket_fun_inversion&#39;vc.5.0.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="mat_sum_eq">
     <goal name="ket_fun_inversion&#39;vc.5.0.1.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.20" steps="547632"/></proof>
     </goal>
     <goal name="ket_fun_inversion&#39;vc.5.0.1.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="ket_fun_inversion&#39;vc.5.0.1.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="ket_fun_inversion&#39;vc.5.0.1.1.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="ket_fun_inversion&#39;vc.5.0.1.1.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="scalar_rows">
         <goal name="ket_fun_inversion&#39;vc.5.0.1.1.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="scalar_rows">
          <goal name="ket_fun_inversion&#39;vc.5.0.1.1.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="set_rows">
           <goal name="ket_fun_inversion&#39;vc.5.0.1.1.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="set_rows">
            <goal name="ket_fun_inversion&#39;vc.5.0.1.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="0.74" steps="518998"/></proof>
            </goal>
            <goal name="ket_fun_inversion&#39;vc.5.0.1.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <transf name="assert" proved="true" arg1="(mem (f e&#39;) (to_fset 0 pow_2_n))">
             <goal name="ket_fun_inversion&#39;vc.5.0.1.1.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
             <proof prover="8"><result status="valid" time="1.25" steps="548060"/></proof>
             </goal>
             <goal name="ket_fun_inversion&#39;vc.5.0.1.1.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
             <transf name="apply" proved="true" arg1="set_valid_index">
              <goal name="ket_fun_inversion&#39;vc.5.0.1.1.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="ket_fun_inversion&#39;vc.5.0.1.1.0.0.0.0.0.0.1.1.0.0" proved="true">
               <proof prover="8"><result status="valid" time="1.60" steps="590155"/></proof>
               </goal>
               <goal name="ket_fun_inversion&#39;vc.5.0.1.1.0.0.0.0.0.0.1.1.0.1" proved="true">
               <transf name="replace" proved="true" arg1="(rows (make pow_2_n 1 c_zero))" arg2="pow_2_n">
                <goal name="ket_fun_inversion&#39;vc.5.0.1.1.0.0.0.0.0.0.1.1.0.1.0" proved="true">
                <proof prover="8"><result status="valid" time="1.61" steps="590167"/></proof>
                </goal>
                <goal name="ket_fun_inversion&#39;vc.5.0.1.1.0.0.0.0.0.0.1.1.0.1.1" expl="equality hypothesis" proved="true">
                <proof prover="7"><result status="valid" time="0.26" steps="8011"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="ket_fun_inversion&#39;vc.5.0.1.1.0.0.0.0.0.0.1.1.1" expl="apply premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="ket_fun_inversion&#39;vc.5.0.1.1.0.0.0.0.0.0.1.1.1.0" proved="true">
               <proof prover="8"><result status="valid" time="0.77" steps="519025"/></proof>
               </goal>
               <goal name="ket_fun_inversion&#39;vc.5.0.1.1.0.0.0.0.0.0.1.1.1.1" proved="true">
               <proof prover="8"><result status="valid" time="1.67" steps="595778"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="ket_fun_inversion&#39;vc.5.0.1.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <transf name="assert" proved="true" arg1="(mem (f e) (to_fset 0 pow_2_n))">
            <goal name="ket_fun_inversion&#39;vc.5.0.1.1.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
            <proof prover="8"><result status="valid" time="1.32" steps="548060"/></proof>
            </goal>
            <goal name="ket_fun_inversion&#39;vc.5.0.1.1.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="set_valid_index">
             <goal name="ket_fun_inversion&#39;vc.5.0.1.1.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="ket_fun_inversion&#39;vc.5.0.1.1.0.0.0.0.0.1.1.0.0" proved="true">
              <proof prover="8"><result status="valid" time="1.65" steps="590152"/></proof>
              </goal>
              <goal name="ket_fun_inversion&#39;vc.5.0.1.1.0.0.0.0.0.1.1.0.1" proved="true">
              <transf name="replace" proved="true" arg1="(rows (make pow_2_n 1 c_zero))" arg2="pow_2_n">
               <goal name="ket_fun_inversion&#39;vc.5.0.1.1.0.0.0.0.0.1.1.0.1.0" proved="true">
               <proof prover="8"><result status="valid" time="1.67" steps="590164"/></proof>
               </goal>
               <goal name="ket_fun_inversion&#39;vc.5.0.1.1.0.0.0.0.0.1.1.0.1.1" expl="equality hypothesis" proved="true">
               <proof prover="7"><result status="valid" time="0.27" steps="8011"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="ket_fun_inversion&#39;vc.5.0.1.1.0.0.0.0.0.1.1.1" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="ket_fun_inversion&#39;vc.5.0.1.1.0.0.0.0.0.1.1.1.0" proved="true">
              <proof prover="8"><result status="valid" time="0.74" steps="519025"/></proof>
              </goal>
              <goal name="ket_fun_inversion&#39;vc.5.0.1.1.0.0.0.0.0.1.1.1.1" proved="true">
              <proof prover="8"><result status="valid" time="1.58" steps="595775"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="ket_fun_inversion&#39;vc.5.0.1.1.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="ket_fun_inversion&#39;vc.5.0.1.1.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="ket_fun_inversion&#39;vc.5.0.1.1.1.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="scalar_columns">
         <goal name="ket_fun_inversion&#39;vc.5.0.1.1.1.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="scalar_columns">
          <goal name="ket_fun_inversion&#39;vc.5.0.1.1.1.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="set_columns">
           <goal name="ket_fun_inversion&#39;vc.5.0.1.1.1.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="set_columns">
            <goal name="ket_fun_inversion&#39;vc.5.0.1.1.1.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="0.75" steps="518998"/></proof>
            </goal>
            <goal name="ket_fun_inversion&#39;vc.5.0.1.1.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="set_valid_index">
             <goal name="ket_fun_inversion&#39;vc.5.0.1.1.1.0.0.0.0.0.1.0" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="ket_fun_inversion&#39;vc.5.0.1.1.1.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
              <transf name="assert" proved="true" arg1="(mem (f e&#39;) (to_fset 0 pow_2_n))">
               <goal name="ket_fun_inversion&#39;vc.5.0.1.1.1.0.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
               <proof prover="8"><result status="valid" time="1.32" steps="548060"/></proof>
               </goal>
               <goal name="ket_fun_inversion&#39;vc.5.0.1.1.1.0.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="1.40" steps="590155"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="ket_fun_inversion&#39;vc.5.0.1.1.1.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
              <transf name="replace" proved="true" arg1="(rows (make pow_2_n 1 c_zero))" arg2="pow_2_n">
               <goal name="ket_fun_inversion&#39;vc.5.0.1.1.1.0.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
               <transf name="assert" proved="true" arg1="(mem (f e&#39;) (to_fset 0 pow_2_n))">
                <goal name="ket_fun_inversion&#39;vc.5.0.1.1.1.0.0.0.0.0.1.0.1.0.0" expl="asserted formula" proved="true">
                <proof prover="8"><result status="valid" time="1.27" steps="548060"/></proof>
                </goal>
                <goal name="ket_fun_inversion&#39;vc.5.0.1.1.1.0.0.0.0.0.1.0.1.0.1" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="1.63" steps="590167"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="ket_fun_inversion&#39;vc.5.0.1.1.1.0.0.0.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
               <proof prover="7"><result status="valid" time="0.31" steps="7742"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="ket_fun_inversion&#39;vc.5.0.1.1.1.0.0.0.0.0.1.1" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="ket_fun_inversion&#39;vc.5.0.1.1.1.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="0.73" steps="519007"/></proof>
              </goal>
              <goal name="ket_fun_inversion&#39;vc.5.0.1.1.1.0.0.0.0.0.1.1.1" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="1.64" steps="594973"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="ket_fun_inversion&#39;vc.5.0.1.1.1.0.0.0.0.1" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="set_valid_index">
            <goal name="ket_fun_inversion&#39;vc.5.0.1.1.1.0.0.0.0.1.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="ket_fun_inversion&#39;vc.5.0.1.1.1.0.0.0.0.1.0.0" expl="apply premises" proved="true">
             <transf name="assert" proved="true" arg1="(mem (f e) (to_fset 0 pow_2_n))">
              <goal name="ket_fun_inversion&#39;vc.5.0.1.1.1.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
              <proof prover="8"><result status="valid" time="1.26" steps="548060"/></proof>
              </goal>
              <goal name="ket_fun_inversion&#39;vc.5.0.1.1.1.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="1.61" steps="590152"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="ket_fun_inversion&#39;vc.5.0.1.1.1.0.0.0.0.1.0.1" expl="apply premises" proved="true">
             <transf name="replace" proved="true" arg1="(rows (make pow_2_n 1 c_zero))" arg2="pow_2_n">
              <goal name="ket_fun_inversion&#39;vc.5.0.1.1.1.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
              <transf name="assert" proved="true" arg1="(mem (f e) (to_fset 0 pow_2_n))">
               <goal name="ket_fun_inversion&#39;vc.5.0.1.1.1.0.0.0.0.1.0.1.0.0" expl="asserted formula" proved="true">
               <proof prover="8"><result status="valid" time="1.28" steps="548060"/></proof>
               </goal>
               <goal name="ket_fun_inversion&#39;vc.5.0.1.1.1.0.0.0.0.1.0.1.0.1" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="1.62" steps="590164"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="ket_fun_inversion&#39;vc.5.0.1.1.1.0.0.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
              <proof prover="7"><result status="valid" time="0.31" steps="7742"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="ket_fun_inversion&#39;vc.5.0.1.1.1.0.0.0.0.1.1" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="ket_fun_inversion&#39;vc.5.0.1.1.1.0.0.0.0.1.1.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="0.73" steps="519007"/></proof>
             </goal>
             <goal name="ket_fun_inversion&#39;vc.5.0.1.1.1.0.0.0.0.1.1.1" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.61" steps="594973"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ket_fun_inversion&#39;vc.5.0.1.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="scalar_eq">
        <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_equal_mat">
         <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="set_rows">
          <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="ket_rows">
           <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="(power 2 (ket_length m))" arg2="pow_2_n">
            <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="7"><result status="valid" time="0.29" steps="7624"/></proof>
            </goal>
            <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
            <proof prover="8"><result status="valid" time="0.74" steps="518995"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="1.40" steps="588677"/></proof>
           </goal>
           <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="(power 2 (ket_length m))" arg2="pow_2_n">
            <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
            <transf name="assert" proved="true" arg1="(mem (f a) (to_fset 0 pow_2_n))">
             <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.0.0.2.0.0" expl="asserted formula" proved="true">
             <proof prover="8"><result status="valid" time="1.29" steps="548042"/></proof>
             </goal>
             <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.0.0.2.0.1" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="1.37" steps="589503"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.0.0.2.1" expl="equality hypothesis" proved="true">
            <proof prover="8"><result status="valid" time="0.77" steps="518995"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.0.1" expl="rewrite premises" proved="true">
          <transf name="apply" proved="true" arg1="set_valid_index">
           <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.0.1.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.0.1.0.0" expl="apply premises" proved="true">
            <transf name="assert" proved="true" arg1="(mem (f a) (to_fset 0 pow_2_n))">
             <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
             <proof prover="8"><result status="valid" time="1.08" steps="548042"/></proof>
             </goal>
             <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.38" steps="589393"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.0.1.0.1" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(rows (make pow_2_n 1 c_zero))" arg2="pow_2_n">
             <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
             <transf name="assert" proved="true" arg1="(mem (f a) (to_fset 0 pow_2_n))">
              <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.0.1.0.1.0.0" expl="asserted formula" proved="true">
              <proof prover="8"><result status="valid" time="1.10" steps="548042"/></proof>
              </goal>
              <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.0.1.0.1.0.1" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="1.67" steps="589410"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
             <proof prover="7"><result status="valid" time="0.31" steps="7624"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.0.1.1" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.0.1.1.0" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="0.76" steps="518995"/></proof>
            </goal>
            <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.0.1.1.1" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="1.67" steps="594349"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.1" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="set_columns">
          <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="ket_columns">
           <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="0.32" steps="7632"/></proof>
           </goal>
           <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.1.0.1" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="1.40" steps="588677"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.1.1" expl="rewrite premises" proved="true">
          <transf name="assert" proved="true" arg1="(mem (f a) (to_fset 0 pow_2_n))">
           <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.1.1.0" expl="asserted formula" proved="true">
           <proof prover="8"><result status="valid" time="1.07" steps="548042"/></proof>
           </goal>
           <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.1.1.1" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="set_valid_index">
            <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.1.1.1.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.1.1.1.0.0" proved="true">
             <transf name="assert" proved="true" arg1="(mem (f a) (to_fset 0 pow_2_n))">
              <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.1.1.1.0.0.0" expl="asserted formula" proved="true">
              <proof prover="8"><result status="valid" time="0.81" steps="519006"/></proof>
              </goal>
              <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.1.1.1.0.0.1" proved="true">
              <proof prover="8"><result status="valid" time="1.34" steps="589397"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.1.1.1.0.1" proved="true">
             <transf name="replace" proved="true" arg1="(rows (make pow_2_n 1 c_zero))" arg2="pow_2_n">
              <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.1.1.1.0.1.0" proved="true">
              <transf name="assert" proved="true" arg1="(mem (f a) (to_fset 0 pow_2_n))">
               <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.1.1.1.0.1.0.0" expl="asserted formula" proved="true">
               <proof prover="8"><result status="valid" time="0.76" steps="519006"/></proof>
               </goal>
               <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.1.1.1.0.1.0.1" proved="true">
               <proof prover="8"><result status="valid" time="1.41" steps="589414"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.1.1.1.0.1.1" expl="equality hypothesis" proved="true">
              <proof prover="7"><result status="valid" time="0.31" steps="7893"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.1.1.1.1" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.1.1.1.1.0" proved="true">
             <proof prover="8"><result status="valid" time="0.79" steps="519013"/></proof>
             </goal>
             <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.1.1.1.1.1" proved="true">
             <proof prover="8"><result status="valid" time="1.67" steps="595091"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="j" arg2="0">
           <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="get_ket_value">
            <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="set_values">
             <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
             <transf name="eliminate_if" proved="true" >
              <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.0.0" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="1.43" steps="559992"/></proof>
               </goal>
               <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.0.0.1" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="make_value">
                <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="1.39" steps="560030"/></proof>
                </goal>
                <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="0.78" steps="528331"/></proof>
                </goal>
                <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2" expl="rewrite premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2.0" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.78" steps="600102"/></proof>
                 </goal>
                 <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2.1" expl="rewrite premises" proved="true">
                 <transf name="instantiate" proved="true" arg1="get_valid_index" arg2="(set (make pow_2_n 1 c_zero) (f @ a) 0 c_one),pow_2_n,1">
                  <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2.1.0" expl="rewrite premises" proved="true">
                  <transf name="split_all_full" proved="true" >
                   <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2.1.0.0" expl="rewrite premises" proved="true">
                   <transf name="destruct" proved="true" arg1="Hinst2">
                    <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2.1.0.0.0" expl="destruct premise" proved="true">
                    <transf name="rewrite" proved="true" arg1="set&#39;spec7">
                     <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2.1.0.0.0.0" expl="destruct premise" proved="true">
                     <proof prover="8"><result status="valid" time="1.74" steps="696562"/></proof>
                     </goal>
                     <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2.1.0.0.0.1" expl="rewrite premises" proved="true">
                     <transf name="assert" proved="true" arg1="(mem (f a) (to_fset 0 (pow_2_n)))">
                      <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2.1.0.0.0.1.0" expl="asserted formula" proved="true">
                      <proof prover="8"><result status="valid" time="1.62" steps="652582"/></proof>
                      </goal>
                      <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2.1.0.0.0.1.1" expl="rewrite premises" proved="true">
                      <proof prover="8"><result status="valid" time="2.04" steps="697948"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2.1.0.0.1" expl="rewrite premises" proved="true">
                    <transf name="destruct" proved="true" arg1="Hinst2">
                     <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2.1.0.0.1.0" expl="destruct premise" proved="true">
                     <transf name="rewrite" proved="true" arg1="set&#39;spec6">
                      <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2.1.0.0.1.0.0" expl="destruct premise" proved="true">
                      <proof prover="8"><result status="valid" time="2.02" steps="696668"/></proof>
                      </goal>
                      <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2.1.0.0.1.0.1" expl="rewrite premises" proved="true">
                      <transf name="assert" proved="true" arg1="(mem (f a) (to_fset 0 (pow_2_n)))">
                       <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2.1.0.0.1.0.1.0" expl="asserted formula" proved="true">
                       <proof prover="8"><result status="valid" time="1.42" steps="652582"/></proof>
                       </goal>
                       <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2.1.0.0.1.0.1.1" expl="rewrite premises" proved="true">
                       <proof prover="8"><result status="valid" time="2.06" steps="697948"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2.1.0.0.1.1" expl="rewrite premises" proved="true">
                     <transf name="instantiate" proved="true" arg1="Hinst2" arg2="i,0">
                      <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2.1.0.0.1.1.0" expl="rewrite premises" proved="true">
                      <proof prover="8"><result status="valid" time="1.99" steps="696025"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.0.0.1.3" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="0.76" steps="528336"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
             <transf name="apply" proved="true" arg1="set_valid_index">
              <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.1.0" expl="apply premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.1.0.0" expl="apply premises" proved="true">
               <transf name="assert" proved="true" arg1="( mem (f a) (to_fset 0 pow_2_n))">
                <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
                <proof prover="8"><result status="valid" time="1.27" steps="552080"/></proof>
                </goal>
                <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.1.0.0.1" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="1.63" steps="594359"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.1.0.1" expl="apply premises" proved="true">
               <transf name="replace" proved="true" arg1="(rows (make pow_2_n 1 c_zero))" arg2="pow_2_n">
                <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.1.0.1.0" expl="apply premises" proved="true">
                <transf name="instantiate" proved="true" arg1="get_valid_index" arg2="(set (make pow_2_n 1 c_zero) (f @ a) 0 c_one),pow_2_n,1">
                 <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
                 <transf name="split_all_full" proved="true" >
                  <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
                  <transf name="destruct" proved="true" arg1="Hinst2">
                   <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.1.0.1.0.0.0.0" expl="destruct premise" proved="true">
                   <transf name="rewrite" proved="true" arg1="set&#39;spec5">
                    <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.1.0.1.0.0.0.0.0" expl="destruct premise" proved="true">
                    <proof prover="8"><result status="valid" time="1.93" steps="685195"/></proof>
                    </goal>
                    <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.1.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
                    <transf name="assert" proved="true" arg1="(mem (f a) (to_fset 0 pow_2_n))">
                     <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.1.0.1.0.0.0.0.1.0" expl="asserted formula" proved="true">
                     <proof prover="8"><result status="valid" time="1.63" steps="640435"/></proof>
                     </goal>
                     <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.1.0.1.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                     <proof prover="8"><result status="valid" time="1.69" steps="686298"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.1.0.1.0.0.0.1" expl="apply premises" proved="true">
                   <transf name="destruct" proved="true" arg1="Hinst2">
                    <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.1.0.1.0.0.0.1.0" expl="destruct premise" proved="true">
                    <transf name="rewrite" proved="true" arg1="set&#39;spec4">
                     <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.1.0.1.0.0.0.1.0.0" expl="destruct premise" proved="true">
                     <proof prover="8"><result status="valid" time="1.89" steps="685303"/></proof>
                     </goal>
                     <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.1.0.1.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                     <transf name="assert" proved="true" arg1="(mem (f a ) (to_fset 0 pow_2_n))">
                      <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.1.0.1.0.0.0.1.0.1.0" expl="asserted formula" proved="true">
                      <proof prover="8"><result status="valid" time="1.57" steps="640435"/></proof>
                      </goal>
                      <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.1.0.1.0.0.0.1.0.1.1" expl="rewrite premises" proved="true">
                      <proof prover="8"><result status="valid" time="1.72" steps="686298"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.1.0.1.0.0.0.1.1" expl="apply premises" proved="true">
                    <transf name="instantiate" proved="true" arg1="Hinst2" arg2="i,0">
                     <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.1.0.1.0.0.0.1.1.0" expl="apply premises" proved="true">
                     <transf name="assert" proved="true" arg1="( mem (f a) (to_fset 0 pow_2_n))">
                      <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.1.0.1.0.0.0.1.1.0.0" expl="asserted formula" proved="true">
                      <proof prover="8"><result status="valid" time="1.53" steps="640641"/></proof>
                      </goal>
                      <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.1.0.1.0.0.0.1.1.0.1" expl="apply premises" proved="true">
                      <proof prover="8"><result status="valid" time="1.61" steps="684901"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
                <proof prover="7"><result status="valid" time="0.32" steps="7910"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.1.1" expl="apply premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.1.1.0" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="0.80" steps="522955"/></proof>
               </goal>
               <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.1.1.1" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="1.70" steps="595142"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.2" expl="rewrite premises" proved="true">
             <transf name="assert" proved="true" arg1="(mem (f a) (to_fset 0 pow_2_n))">
              <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.2.0" expl="asserted formula" proved="true">
              <proof prover="8"><result status="valid" time="1.28" steps="552080"/></proof>
              </goal>
              <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.2.1" expl="rewrite premises" proved="true">
              <transf name="apply" proved="true" arg1="set_valid_index">
               <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.2.1.0" expl="apply premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.2.1.0.0" proved="true">
                <transf name="assert" proved="true" arg1="(mem (f a) (to_fset 0 pow_2_n))">
                 <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.2.1.0.0.0" expl="asserted formula" proved="true">
                 <proof prover="8"><result status="valid" time="0.76" steps="522959"/></proof>
                 </goal>
                 <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.2.1.0.0.1" proved="true">
                 <proof prover="8"><result status="valid" time="1.40" steps="594366"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.2.1.0.1" proved="true">
                <transf name="replace" proved="true" arg1="(rows (make pow_2_n 1 c_zero))" arg2="pow_2_n">
                 <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.2.1.0.1.0" proved="true">
                 <transf name="replace" proved="true" arg1="(pow_2_n )" arg2="(rows (set (make pow_2_n 1 c_zero) (f @ a) 0 c_one))">
                  <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.2.1.0.1.0.0" proved="true">
                  <proof prover="8"><result status="valid" time="1.35" steps="595405"/></proof>
                  </goal>
                  <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.2.1.0.1.0.1" expl="equality hypothesis" proved="true">
                  <transf name="split_all_full" proved="true" >
                   <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.2.1.0.1.0.1.0" expl="equality hypothesis" proved="true">
                   <transf name="rewrite" proved="true" arg1="set&#39;spec5">
                    <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.2.1.0.1.0.1.0.0" expl="equality hypothesis" proved="true">
                    <transf name="rewrite" proved="true" arg1="make&#39;spec2">
                     <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.2.1.0.1.0.1.0.0.0" expl="equality hypothesis" proved="true">
                     <proof prover="8"><result status="valid" time="0.74" steps="607577"/></proof>
                     </goal>
                     <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.2.1.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
                     <proof prover="8"><result status="valid" time="0.70" steps="607597"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.2.1.0.1.0.1.0.1" expl="rewrite premises" proved="true">
                    <proof prover="8"><result status="valid" time="1.80" steps="685016"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.2.1.0.1.1" expl="equality hypothesis" proved="true">
                 <proof prover="7"><result status="valid" time="0.33" steps="8056"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.2.1.1" expl="apply premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.2.1.1.0" proved="true">
                <proof prover="8"><result status="valid" time="0.75" steps="522966"/></proof>
                </goal>
                <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.0.2.1.1.1" proved="true">
                <proof prover="8"><result status="valid" time="1.66" steps="595722"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="1.40" steps="593794"/></proof>
            </goal>
            <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.2" expl="rewrite premises" proved="true">
            <transf name="assert" proved="true" arg1="(mem (f a ) (to_fset 0 pow_2_n))">
             <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.2.0" expl="asserted formula" proved="true">
             <proof prover="8"><result status="valid" time="1.26" steps="552080"/></proof>
             </goal>
             <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.2.1" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="1.45" steps="594419"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.3" expl="rewrite premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.3.0" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="1.37" steps="593796"/></proof>
             </goal>
             <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.3.1" expl="rewrite premises" proved="true">
             <transf name="instantiate" proved="true" arg1="get_valid_index" arg2="(set (make pow_2_n 1 c_zero) (f @ a) 0 c_one),pow_2_n,1">
              <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.3.1.0" expl="rewrite premises" proved="true">
              <transf name="split_all_full" proved="true" >
               <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.3.1.0.0" expl="rewrite premises" proved="true">
               <transf name="destruct" proved="true" arg1="Hinst2">
                <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.3.1.0.0.0" expl="destruct premise" proved="true">
                <transf name="rewrite" proved="true" arg1="set&#39;spec5">
                 <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.3.1.0.0.0.0" expl="destruct premise" proved="true">
                 <proof prover="8"><result status="valid" time="1.84" steps="685195"/></proof>
                 </goal>
                 <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.3.1.0.0.0.1" expl="rewrite premises" proved="true">
                 <transf name="assert" proved="true" arg1="(mem (f a ) (to_fset 0 pow_2_n))">
                  <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.3.1.0.0.0.1.0" expl="asserted formula" proved="true">
                  <proof prover="8"><result status="valid" time="1.26" steps="640435"/></proof>
                  </goal>
                  <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.3.1.0.0.0.1.1" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.59" steps="686298"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.3.1.0.0.1" expl="rewrite premises" proved="true">
                <transf name="destruct" proved="true" arg1="Hinst2">
                 <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.3.1.0.0.1.0" expl="destruct premise" proved="true">
                 <transf name="rewrite" proved="true" arg1="set&#39;spec4">
                  <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.3.1.0.0.1.0.0" expl="destruct premise" proved="true">
                  <proof prover="8"><result status="valid" time="1.59" steps="685303"/></proof>
                  </goal>
                  <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.3.1.0.0.1.0.1" expl="rewrite premises" proved="true">
                  <transf name="assert" proved="true" arg1="(mem (f a ) (to_fset 0 pow_2_n))">
                   <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.3.1.0.0.1.0.1.0" expl="asserted formula" proved="true">
                   <proof prover="8"><result status="valid" time="1.26" steps="640435"/></proof>
                   </goal>
                   <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.3.1.0.0.1.0.1.1" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="1.74" steps="686298"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.3.1.0.0.1.1" expl="rewrite premises" proved="true">
                 <transf name="instantiate" proved="true" arg1="Hinst2" arg2="i,0">
                  <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.0.3.1.0.0.1.1.0" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.61" steps="684460"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1" expl="equality hypothesis" proved="true">
           <transf name="instantiate" proved="true" arg1="get_valid_index" arg2="(set (make pow_2_n 1 c_zero) (f @ a) 0 c_one),pow_2_n,1">
            <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0" expl="equality hypothesis" proved="true">
            <transf name="destruct" proved="true" arg1="Hinst">
             <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.0" expl="destruct premise" proved="true">
             <transf name="rewrite" proved="true" arg1="set_rows">
              <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.0.0" expl="destruct premise" proved="true">
              <proof prover="7"><result status="valid" time="0.32" steps="7910"/></proof>
              </goal>
              <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.0.1" expl="rewrite premises" proved="true">
              <transf name="assert" proved="true" arg1="(mem (f a) (to_fset 0 pow_2_n))">
               <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.0.1.0" expl="asserted formula" proved="true">
               <proof prover="8"><result status="valid" time="1.07" steps="552080"/></proof>
               </goal>
               <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.0.1.1" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="set_valid_index">
                <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.0.1.1.0" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.0.1.1.0.0" proved="true">
                 <transf name="assert" proved="true" arg1="(mem (f a) (to_fset 0 pow_2_n))">
                  <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.0.1.1.0.0.0" expl="asserted formula" proved="true">
                  <proof prover="8"><result status="valid" time="0.79" steps="522959"/></proof>
                  </goal>
                  <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.0.1.1.0.0.1" proved="true">
                  <proof prover="8"><result status="valid" time="1.38" steps="594363"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.0.1.1.0.1" proved="true">
                 <transf name="replace" proved="true" arg1="(rows (make pow_2_n 1 c_zero))" arg2="pow_2_n">
                  <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.0.1.1.0.1.0" proved="true">
                  <transf name="assert" proved="true" arg1="(mem (f a) (to_fset 0 pow_2_n))">
                   <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.0.1.1.0.1.0.0" expl="asserted formula" proved="true">
                   <proof prover="8"><result status="valid" time="0.77" steps="522959"/></proof>
                   </goal>
                   <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.0.1.1.0.1.0.1" proved="true">
                   <proof prover="8"><result status="valid" time="1.60" steps="594385"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.0.1.1.0.1.1" expl="equality hypothesis" proved="true">
                  <proof prover="7"><result status="valid" time="0.34" steps="8056"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.0.1.1.1" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.0.1.1.1.0" proved="true">
                 <proof prover="8"><result status="valid" time="0.72" steps="522966"/></proof>
                 </goal>
                 <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.0.1.1.1.1" proved="true">
                 <proof prover="8"><result status="valid" time="1.39" steps="595722"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.1" expl="equality hypothesis" proved="true">
             <transf name="destruct" proved="true" arg1="Hinst">
              <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.1.0" expl="destruct premise" proved="true">
              <transf name="rewrite" proved="true" arg1="set_columns">
               <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.1.0.0" expl="destruct premise" proved="true">
               <proof prover="7"><result status="valid" time="0.31" steps="7919"/></proof>
               </goal>
               <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.1.0.1" expl="rewrite premises" proved="true">
               <transf name="assert" proved="true" arg1="(mem (f a) (to_fset 0 pow_2_n))">
                <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.1.0.1.0" expl="asserted formula" proved="true">
                <proof prover="8"><result status="valid" time="1.08" steps="552080"/></proof>
                </goal>
                <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.1.0.1.1" expl="rewrite premises" proved="true">
                <transf name="apply" proved="true" arg1="set_valid_index">
                 <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.1.0.1.1.0" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.1.0.1.1.0.0" proved="true">
                  <transf name="assert" proved="true" arg1="(mem (f a) (to_fset 0 pow_2_n))">
                   <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.1.0.1.1.0.0.0" expl="asserted formula" proved="true">
                   <proof prover="8"><result status="valid" time="0.77" steps="522959"/></proof>
                   </goal>
                   <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.1.0.1.1.0.0.1" proved="true">
                   <proof prover="8"><result status="valid" time="1.68" steps="594363"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.1.0.1.1.0.1" proved="true">
                  <transf name="replace" proved="true" arg1="(rows (make pow_2_n 1 c_zero))" arg2="pow_2_n">
                   <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.1.0.1.1.0.1.0" proved="true">
                   <transf name="assert" proved="true" arg1="(mem (f a) (to_fset 0 pow_2_n))">
                    <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.1.0.1.1.0.1.0.0" expl="asserted formula" proved="true">
                    <proof prover="8"><result status="valid" time="0.78" steps="522959"/></proof>
                    </goal>
                    <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.1.0.1.1.0.1.0.1" proved="true">
                    <proof prover="8"><result status="valid" time="1.72" steps="594385"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.1.0.1.1.0.1.1" expl="equality hypothesis" proved="true">
                   <proof prover="7"><result status="valid" time="0.27" steps="8056"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.1.0.1.1.1" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.1.0.1.1.1.0" proved="true">
                  <proof prover="8"><result status="valid" time="0.77" steps="522966"/></proof>
                  </goal>
                  <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.1.0.1.1.1.1" proved="true">
                  <proof prover="8"><result status="valid" time="1.73" steps="595722"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="ket_fun_inversion&#39;vc.5.0.1.2.0.0.0.2.0.1.0.1.1" expl="equality hypothesis" proved="true">
              <proof prover="8"><result status="valid" time="1.70" steps="594279"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ket_fun_inversion&#39;vc.5.1" expl="equality hypothesis" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures">
    <goal name="ket_fun_inversion&#39;vc.5.1.0" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="mat_sum_eq">
     <goal name="ket_fun_inversion&#39;vc.5.1.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.28" steps="547632"/></proof>
     </goal>
     <goal name="ket_fun_inversion&#39;vc.5.1.0.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="ket_fun_inversion&#39;vc.5.1.0.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="ket_fun_inversion&#39;vc.5.1.0.1.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="ket_fun_inversion&#39;vc.5.1.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.81" steps="630261"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="ket_fun_inversion&#39;vc.5.1.0.1.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="ket_fun_inversion&#39;vc.5.1.0.1.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="ket_fun_inversion&#39;vc.5.1.0.1.1.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.48" steps="630697"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ket_fun_inversion&#39;vc.5.1.0.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ket_fun_inversion&#39;vc.5.1.0.2.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="ket_fun_inversion&#39;vc.5.1.0.2.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="scalar_eq_gen">
        <goal name="ket_fun_inversion&#39;vc.5.1.0.2.0.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.37" steps="590996"/></proof>
        </goal>
        <goal name="ket_fun_inversion&#39;vc.5.1.0.2.0.0.1" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.18" steps="583995"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_partition_filter&#39;vc" expl="VC for ket_sum_partition_filter" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_partition_filter&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.73" steps="484571"/></proof>
  </goal>
  <goal name="ket_sum_partition_filter&#39;vc.1" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal">
   <goal name="ket_sum_partition_filter&#39;vc.1.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="ket_sum_partition_filter&#39;vc.1.0.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="1.28" steps="552611"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="ket_sum_partition_filter&#39;vc.1.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="ket_sum_partition_filter&#39;vc.1.1.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="1.26" steps="551357"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ket_sum_partition_filter&#39;vc.2" expl="precondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="ket_sum_partition_filter&#39;vc.2.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_empty1">
    <goal name="ket_sum_partition_filter&#39;vc.2.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="ket_sum_partition_filter&#39;vc.2.0.0.0" expl="apply premises" proved="true">
     <transf name="case" proved="true" arg1="(mem e ( (my_filter s p1)))">
      <goal name="ket_sum_partition_filter&#39;vc.2.0.0.0.0" expl="true case (apply premises)" proved="true">
      <transf name="case" proved="true" arg1="(mem e ( (my_filter s p2)))">
       <goal name="ket_sum_partition_filter&#39;vc.2.0.0.0.0.0" expl="true case (apply premises)" proved="true">
       <transf name="assert" proved="true" arg1="(p1 e &amp;&amp; p2 e)">
        <goal name="ket_sum_partition_filter&#39;vc.2.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="ket_sum_partition_filter&#39;vc.2.0.0.0.0.0.0.0" proved="true">
         <proof prover="8"><result status="valid" time="1.19" steps="596915"/></proof>
         </goal>
         <goal name="ket_sum_partition_filter&#39;vc.2.0.0.0.0.0.0.1" proved="true">
         <proof prover="8"><result status="valid" time="1.14" steps="596998"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="ket_sum_partition_filter&#39;vc.2.0.0.0.0.0.1" expl="true case (apply premises)" proved="true">
        <proof prover="8"><result status="valid" time="1.48" steps="634261"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="ket_sum_partition_filter&#39;vc.2.0.0.0.0.1" expl="false case (true case. apply premises)" proved="true">
       <proof prover="8"><result status="valid" time="1.43" steps="597163"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="ket_sum_partition_filter&#39;vc.2.0.0.0.1" expl="false case (apply premises)" proved="true">
      <proof prover="8"><result status="valid" time="1.20" steps="597151"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ket_sum_partition_filter&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.79" steps="514374"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="kronecker_neutral_ket_l&#39;vc" expl="VC for kronecker_neutral_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kronecker_neutral_ket_l&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_is_a_ket_l">
   <goal name="kronecker_neutral_ket_l&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="0.46" steps="377381"/></proof>
   </goal>
   <goal name="kronecker_neutral_ket_l&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="7"><result status="valid" time="0.25" steps="6175"/></proof>
   </goal>
   <goal name="kronecker_neutral_ket_l&#39;vc.0.2" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="2.61"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="kronecker_neutral_ket_basis&#39;vc" expl="VC for kronecker_neutral_ket_basis" proved="true">
 <transf name="apply" proved="true" arg1="set_is_a_ket_basis_elt">
  <goal name="kronecker_neutral_ket_basis&#39;vc.0" expl="apply premises" proved="true">
  <proof prover="8"><result status="valid" time="0.94" steps="403194"/></proof>
  </goal>
  <goal name="kronecker_neutral_ket_basis&#39;vc.1" expl="apply premises" proved="true">
  <transf name="exists" proved="true" arg1="0">
   <goal name="kronecker_neutral_ket_basis&#39;vc.1.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="kronecker_neutral_ket_basis&#39;vc.1.0.0" proved="true">
    <proof prover="8"><result status="valid" time="0.55" steps="377392"/></proof>
    </goal>
    <goal name="kronecker_neutral_ket_basis&#39;vc.1.0.1" proved="true">
    <proof prover="8"><result status="valid" time="1.18" steps="436996"/></proof>
    </goal>
    <goal name="kronecker_neutral_ket_basis&#39;vc.1.0.2" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_ket_l">
     <goal name="kronecker_neutral_ket_basis&#39;vc.1.0.2.0" expl="apply premises" proved="true">
     <transf name="exists" proved="true" arg1="0">
      <goal name="kronecker_neutral_ket_basis&#39;vc.1.0.2.0.0" proved="true">
      <proof prover="8"><result status="valid" time="0.97" steps="437826"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="kronecker_neutral_ket_basis&#39;vc.1.0.2.1" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="0.97" steps="442277"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="equals_kronecker_neutral&#39;vc" expl="VC for equals_kronecker_neutral" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="equals_kronecker_neutral&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.50"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_kronecker_neutral&#39;vc" expl="VC for get_kronecker_neutral" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_kronecker_neutral&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.92" steps="403903"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_neutral_kronecker&#39;vc" expl="VC for get_neutral_kronecker" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_neutral_kronecker&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.79" steps="403980"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_kronecker_neutral&#39;vc" expl="VC for set_kronecker_neutral" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_kronecker_neutral&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.77" steps="403444"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_neutral_kronecker&#39;vc" expl="VC for set_neutral_kronecker" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_neutral_kronecker&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.99" steps="403492"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Ket_basis_concat" proved="true">
 <goal name="hpart_ket&#39;vc" expl="VC for hpart_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="hpart_ket&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.78" steps="403015"/></proof>
  </goal>
  <goal name="hpart_ket&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.56" steps="382903"/></proof>
  </goal>
  <goal name="hpart_ket&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.60" steps="381608"/></proof>
  </goal>
  <goal name="hpart_ket&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.98" steps="444258"/></proof>
  </goal>
  <goal name="hpart_ket&#39;vc.4" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.01" steps="445268"/></proof>
  </goal>
  <goal name="hpart_ket&#39;vc.5" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="1.22" steps="4017130"/></proof>
  </goal>
  <goal name="hpart_ket&#39;vc.6" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.93" steps="407503"/></proof>
  </goal>
  <goal name="hpart_ket&#39;vc.7" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.56" steps="381784"/></proof>
  </goal>
  <goal name="hpart_ket&#39;vc.8" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.92" steps="406930"/></proof>
  </goal>
  <goal name="hpart_ket&#39;vc.9" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.60" steps="381902"/></proof>
  </goal>
  <goal name="hpart_ket&#39;vc.10" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.61" steps="381914"/></proof>
  </goal>
  <goal name="hpart_ket&#39;vc.11" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.01" steps="407708"/></proof>
  </goal>
  <goal name="hpart_ket&#39;vc.12" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.58" steps="381938"/></proof>
  </goal>
  <goal name="hpart_ket&#39;vc.13" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.97" steps="407128"/></proof>
  </goal>
  <goal name="hpart_ket&#39;vc.14" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.57" steps="382056"/></proof>
  </goal>
  <goal name="hpart_ket&#39;vc.15" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.56" steps="382068"/></proof>
  </goal>
  <goal name="hpart_ket&#39;vc.16" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.88" steps="407875"/></proof>
  </goal>
  <goal name="hpart_ket&#39;vc.17" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.56" steps="382077"/></proof>
  </goal>
  <goal name="hpart_ket&#39;vc.18" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.92" steps="407295"/></proof>
  </goal>
  <goal name="hpart_ket&#39;vc.19" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.55" steps="382195"/></proof>
  </goal>
  <goal name="hpart_ket&#39;vc.20" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.55" steps="381557"/></proof>
  </goal>
  <goal name="hpart_ket&#39;vc.21" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.54" steps="381560"/></proof>
  </goal>
  <goal name="hpart_ket&#39;vc.22" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.54" steps="381563"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="hpart_ket_rows&#39;vc" expl="VC for hpart_ket_rows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="hpart_ket_rows&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.33" steps="449086"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="hpart_ket_l&#39;vc" expl="VC for hpart_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="hpart_ket_l&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.43"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="tpart_ket&#39;vc" expl="VC for tpart_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="tpart_ket&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.92" steps="403815"/></proof>
  </goal>
  <goal name="tpart_ket&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.57" steps="383692"/></proof>
  </goal>
  <goal name="tpart_ket&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.21" steps="444916"/></proof>
  </goal>
  <goal name="tpart_ket&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.97" steps="408099"/></proof>
  </goal>
  <goal name="tpart_ket&#39;vc.4" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.56" steps="382510"/></proof>
  </goal>
  <goal name="tpart_ket&#39;vc.5" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.92" steps="407610"/></proof>
  </goal>
  <goal name="tpart_ket&#39;vc.6" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.94" steps="408235"/></proof>
  </goal>
  <goal name="tpart_ket&#39;vc.7" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.58" steps="382641"/></proof>
  </goal>
  <goal name="tpart_ket&#39;vc.8" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.57" steps="382654"/></proof>
  </goal>
  <goal name="tpart_ket&#39;vc.9" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.97" steps="408330"/></proof>
  </goal>
  <goal name="tpart_ket&#39;vc.10" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.54" steps="382670"/></proof>
  </goal>
  <goal name="tpart_ket&#39;vc.11" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.92" steps="407834"/></proof>
  </goal>
  <goal name="tpart_ket&#39;vc.12" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.94" steps="408466"/></proof>
  </goal>
  <goal name="tpart_ket&#39;vc.13" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.56" steps="382801"/></proof>
  </goal>
  <goal name="tpart_ket&#39;vc.14" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.52" steps="382814"/></proof>
  </goal>
  <goal name="tpart_ket&#39;vc.15" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.89" steps="408505"/></proof>
  </goal>
  <goal name="tpart_ket&#39;vc.16" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.55" steps="382815"/></proof>
  </goal>
  <goal name="tpart_ket&#39;vc.17" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.88" steps="408009"/></proof>
  </goal>
  <goal name="tpart_ket&#39;vc.18" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.98" steps="408641"/></proof>
  </goal>
  <goal name="tpart_ket&#39;vc.19" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.57" steps="382946"/></proof>
  </goal>
  <goal name="tpart_ket&#39;vc.20" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.60" steps="382301"/></proof>
  </goal>
  <goal name="tpart_ket&#39;vc.21" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.56" steps="382304"/></proof>
  </goal>
  <goal name="tpart_ket&#39;vc.22" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.57" steps="382307"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="tpart_ket_l&#39;vc" expl="VC for tpart_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="tpart_ket_l&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.42"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="tpart_ket_rows&#39;vc" expl="VC for tpart_ket_rows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="tpart_ket_rows&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="tpart_ket&#39;def">
   <goal name="tpart_ket_rows&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.25" steps="447553"/></proof>
   </goal>
   <goal name="tpart_ket_rows&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.55" steps="379223"/></proof>
   </goal>
   <goal name="tpart_ket_rows&#39;vc.0.2" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.54" steps="379230"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="concat_ket&#39;vc" expl="VC for concat_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="concat_ket&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.57" steps="379353"/></proof>
  </goal>
  <goal name="concat_ket&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.95" steps="406512"/></proof>
  </goal>
  <goal name="concat_ket&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.59" steps="383216"/></proof>
  </goal>
  <goal name="concat_ket&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.76" steps="408852"/></proof>
  </goal>
  <goal name="concat_ket&#39;vc.4" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.76" steps="408860"/></proof>
  </goal>
  <goal name="concat_ket&#39;vc.5" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.92" steps="408520"/></proof>
  </goal>
  <goal name="concat_ket&#39;vc.6" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.35" steps="8658"/></proof>
  </goal>
  <goal name="concat_ket&#39;vc.7" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.55" steps="383481"/></proof>
  </goal>
  <goal name="concat_ket&#39;vc.8" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.58" steps="383484"/></proof>
  </goal>
  <goal name="concat_ket&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.58" steps="383496"/></proof>
  </goal>
  <goal name="concat_ket&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.21" steps="446646"/></proof>
  </goal>
  <goal name="concat_ket&#39;vc.11" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.21" steps="446665"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="concat_ht_part_ket&#39;vc" expl="VC for concat_ht_part_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="concat_ht_part_ket&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.52" steps="379548"/></proof>
  </goal>
  <goal name="concat_ht_part_ket&#39;vc.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="concat_ht_part_ket&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.50" steps="379551"/></proof>
   </goal>
   <goal name="concat_ht_part_ket&#39;vc.1.1" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.55" steps="379551"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="concat_ht_part_ket&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.55" steps="379643"/></proof>
  </goal>
  <goal name="concat_ht_part_ket&#39;vc.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="concat_ht_part_ket&#39;vc.3.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.55" steps="379646"/></proof>
   </goal>
   <goal name="concat_ht_part_ket&#39;vc.3.1" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.53" steps="379646"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="concat_ht_part_ket&#39;vc.4" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.56" steps="379709"/></proof>
  </goal>
  <goal name="concat_ht_part_ket&#39;vc.5" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.57" steps="379712"/></proof>
  </goal>
  <goal name="concat_ht_part_ket&#39;vc.6" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="equal_ket_by_int" arg2="(kronecker (hpart_ket m i) (tpart_ket m i)),m,(ket_length m)">
   <goal name="concat_ht_part_ket&#39;vc.6.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="Hinst">
    <goal name="concat_ht_part_ket&#39;vc.6.0.0" expl="apply premises" proved="true">
    <proof prover="7"><result status="valid" time="0.30" steps="10281"/></proof>
    </goal>
    <goal name="concat_ht_part_ket&#39;vc.6.0.1" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="1.23" steps="445574"/></proof>
    </goal>
    <goal name="concat_ht_part_ket&#39;vc.6.0.2" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.54" steps="379849"/></proof>
    </goal>
    <goal name="concat_ht_part_ket&#39;vc.6.0.3" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.54" steps="379849"/></proof>
    </goal>
    <goal name="concat_ht_part_ket&#39;vc.6.0.4" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="Hinst">
     <goal name="concat_ht_part_ket&#39;vc.6.0.4.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="0.52" steps="379847"/></proof>
     </goal>
     <goal name="concat_ht_part_ket&#39;vc.6.0.4.1" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.27" steps="10281"/></proof>
     </goal>
     <goal name="concat_ht_part_ket&#39;vc.6.0.4.2" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.22" steps="445574"/></proof>
     </goal>
     <goal name="concat_ht_part_ket&#39;vc.6.0.4.3" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.54" steps="379849"/></proof>
     </goal>
     <goal name="concat_ht_part_ket&#39;vc.6.0.4.4" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.53" steps="379849"/></proof>
     </goal>
     <goal name="concat_ht_part_ket&#39;vc.6.0.4.5" expl="rewrite premises" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures">
      <goal name="concat_ht_part_ket&#39;vc.6.0.4.5.0" expl="rewrite premises" proved="true">
      <transf name="rewrite" proved="true" arg1="Ensures3">
       <goal name="concat_ht_part_ket&#39;vc.6.0.4.5.0.0" expl="rewrite premises" proved="true">
       <transf name="instantiate" proved="true" arg1="decomp" arg2="(ket_to_int m),(power 2 (ket_length m - i))">
        <goal name="concat_ht_part_ket&#39;vc.6.0.4.5.0.0.0" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="0.29" steps="9163"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_ht_decomp&#39;vc" expl="VC for ket_ht_decomp" proved="true">
 <proof prover="8"><result status="valid" time="1.29" steps="444716"/></proof>
 </goal>
 <goal name="ket_ht_decomp_quant&#39;vc" expl="VC for ket_ht_decomp_quant" proved="true">
 <proof prover="8"><result status="valid" time="0.89" steps="405820"/></proof>
 </goal>
 <goal name="ht_decomp&#39;vc" expl="VC for ht_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ht_decomp&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.56" steps="380131"/></proof>
  </goal>
  <goal name="ht_decomp&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.58" steps="385300"/></proof>
  </goal>
  <goal name="ht_decomp&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.58" steps="385303"/></proof>
  </goal>
  <goal name="ht_decomp&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.58" steps="385304"/></proof>
  </goal>
  <goal name="ht_decomp&#39;vc.4" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(mat_sum (to_fset 0 (power 2 (ket_length m)))
    (fun (j:int) -&gt;
      get m j 0
      *.. kronecker (hpart_ket (ket (ket_length m) j) i)
          (tpart_ket (ket (ket_length m) j) i)))" arg2="(mat_sum (to_fset 0 (power 2 (ket_length m)))
    (fun (j:int) -&gt; get m j 0 *.. ket (ket_length m) j))">
   <goal name="ht_decomp&#39;vc.4.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="Ensures">
   </transf>
   </goal>
   <goal name="ht_decomp&#39;vc.4.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="mat_sum_eq">
    <goal name="ht_decomp&#39;vc.4.1.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="1.41" steps="530817"/></proof>
    </goal>
    <goal name="ht_decomp&#39;vc.4.1.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="ht_decomp&#39;vc.4.1.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ht_decomp&#39;vc.4.1.1.0.0" expl="apply premises" proved="true">
      <proof prover="11"><result status="valid" time="1.17" steps="1987302"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="ht_decomp&#39;vc.4.1.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ht_decomp&#39;vc.4.1.1.1.0" expl="apply premises" proved="true">
      <proof prover="11"><result status="valid" time="1.39" steps="1977880"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="ht_decomp&#39;vc.4.1.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="ht_decomp&#39;vc.4.1.2.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="ht_decomp&#39;vc.4.1.2.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_equal_mat">
       <goal name="ht_decomp&#39;vc.4.1.2.0.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.62" steps="567370"/></proof>
       </goal>
       <goal name="ht_decomp&#39;vc.4.1.2.0.0.1" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.34" steps="565519"/></proof>
       </goal>
       <goal name="ht_decomp&#39;vc.4.1.2.0.0.2" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="ht_decomp&#39;vc.4.1.2.0.0.2.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.63" steps="568601"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="not_null_ket_basis&#39;vc" expl="VC for not_null_ket_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="not_null_ket_basis&#39;vc.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(null_mat x)">
   <goal name="not_null_ket_basis&#39;vc.0.0" expl="true case (postcondition)" proved="true">
   <transf name="assert" proved="true" arg1="(get x (ket_to_int x) 0 = c_zero)">
    <goal name="not_null_ket_basis&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="get_null_mat">
     <goal name="not_null_ket_basis&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="0.46" steps="380372"/></proof>
     </goal>
     <goal name="not_null_ket_basis&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="0.27" steps="6423"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="not_null_ket_basis&#39;vc.0.0.1" expl="true case (postcondition)" proved="true">
    <proof prover="7"><result status="valid" time="0.25" steps="6508"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="not_null_ket_basis&#39;vc.0.1" expl="false case (postcondition)" proved="true">
   <proof prover="8"><result status="valid" time="0.45" steps="380374"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Sqrt_two" proved="true">
 <goal name="not_null_powers_squarert_two&#39;vc" expl="VC for not_null_powers_squarert_two" proved="true">
 <proof prover="8"><result status="valid" time="0.36" steps="185245"/></proof>
 </goal>
 <goal name="pos_coeff&#39;vc" expl="VC for pos_coeff" proved="true">
 <proof prover="8"><result status="valid" time="0.35" steps="184190"/></proof>
 </goal>
 <goal name="real_pos_coeff&#39;vc" expl="VC for real_pos_coeff" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="real_pos_coeff&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.36" steps="184167"/></proof>
  </goal>
  <goal name="real_pos_coeff&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.35" steps="184202"/></proof>
  </goal>
  <goal name="real_pos_coeff&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.20" steps="168246"/></proof>
  </goal>
  <goal name="real_pos_coeff&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.20" steps="168238"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="coeffs" proved="true">
 <proof prover="8"><result status="valid" time="0.37" steps="185720"/></proof>
 </goal>
 <goal name="mop&#39;vc" expl="VC for mop" proved="true">
 <proof prover="8"><result status="valid" time="0.16" steps="168258"/></proof>
 </goal>
 <goal name="minus_one_power_values&#39;vc" expl="VC for minus_one_power_values" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="minus_one_power_values&#39;vc.0" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="0.65" steps="206065"/></proof>
  </goal>
  <goal name="minus_one_power_values&#39;vc.1" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="0.48" steps="203678"/></proof>
  </goal>
  <goal name="minus_one_power_values&#39;vc.2" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="0.47" steps="203688"/></proof>
  </goal>
  <goal name="minus_one_power_values&#39;vc.3" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="minus_one_power_values&#39;vc.3.0" expl="variant decrease" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="minus_one_power_values&#39;vc.3.0.0" expl="variant decrease" proved="true">
    <proof prover="8"><result status="valid" time="0.21" steps="168427"/></proof>
    </goal>
    <goal name="minus_one_power_values&#39;vc.3.0.1" expl="variant decrease" proved="true">
    <proof prover="8"><result status="valid" time="0.21" steps="168431"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="minus_one_power_values&#39;vc.3.1" expl="variant decrease" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="minus_one_power_values&#39;vc.3.1.0" expl="variant decrease" proved="true">
    <proof prover="8"><result status="valid" time="0.21" steps="168436"/></proof>
    </goal>
    <goal name="minus_one_power_values&#39;vc.3.1.1" expl="variant decrease" proved="true">
    <proof prover="8"><result status="valid" time="0.20" steps="168440"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="minus_one_power_values&#39;vc.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="minus_one_power_values&#39;vc.4.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.36" steps="184346"/></proof>
   </goal>
   <goal name="minus_one_power_values&#39;vc.4.1" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.36" steps="184353"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="minus_one_power_values&#39;vc.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="minus_one_power_values&#39;vc.5.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="minus_one_power_values&#39;vc.5.0.0" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="0.19" steps="168397"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="minus_one_power_values&#39;vc.5.1" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.46" steps="203996"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="minus_one_power_values&#39;vc.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="minus_one_power_values&#39;vc.6.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="minus_one_power_values&#39;vc.6.0.0" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="0.48" steps="203673"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="minus_one_power_values&#39;vc.6.1" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.49" steps="204028"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="factors_mop&#39;vc" expl="VC for factors_mop" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="factors_mop&#39;vc.0" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="0.47" steps="203777"/></proof>
  </goal>
  <goal name="factors_mop&#39;vc.1" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="0.49" steps="203828"/></proof>
  </goal>
  <goal name="factors_mop&#39;vc.2" expl="assertion" proved="true">
  <transf name="case" proved="true" arg1="(even i)">
   <goal name="factors_mop&#39;vc.2.0" expl="true case (assertion)" proved="true">
   <transf name="assert" proved="true" arg1="(even (i+j))">
    <goal name="factors_mop&#39;vc.2.0.0" expl="asserted formula" proved="true">
    <transf name="replace" proved="true" arg1="j" arg2="(2 * div j 2)">
     <goal name="factors_mop&#39;vc.2.0.0.0" expl="asserted formula" proved="true">
     <proof prover="10"><result status="valid" time="0.91" steps="2005576"/></proof>
     </goal>
     <goal name="factors_mop&#39;vc.2.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="7"><result status="valid" time="0.15" steps="6229"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="factors_mop&#39;vc.2.0.1" expl="true case (assertion)" proved="true">
    <proof prover="8"><result status="valid" time="4.02" steps="1420352"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="factors_mop&#39;vc.2.1" expl="false case (assertion)" proved="true">
   <transf name="assert" proved="true" arg1="(odd (i+j))">
    <goal name="factors_mop&#39;vc.2.1.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="(odd i)">
     <goal name="factors_mop&#39;vc.2.1.0.0" expl="asserted formula" proved="true">
     <proof prover="8"><result status="valid" time="0.37" steps="184678"/></proof>
     </goal>
     <goal name="factors_mop&#39;vc.2.1.0.1" expl="asserted formula" proved="true">
     <proof prover="8"><result status="valid" time="4.57" steps="1423909"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="factors_mop&#39;vc.2.1.1" expl="false case (assertion)" proved="true">
    <proof prover="8"><result status="valid" time="0.48" steps="204556"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="factors_mop&#39;vc.3" expl="assertion" proved="true">
  <transf name="case" proved="true" arg1="(even i)">
   <goal name="factors_mop&#39;vc.3.0" expl="true case (assertion)" proved="true">
   <transf name="assert" proved="true" arg1="(odd (i+j))">
    <goal name="factors_mop&#39;vc.3.0.0" expl="asserted formula" proved="true">
    <transf name="replace" proved="true" arg1="i" arg2="(2 * div i 2)">
     <goal name="factors_mop&#39;vc.3.0.0.0" expl="asserted formula" proved="true">
     <transf name="replace" proved="true" arg1="j" arg2="(2 * div j 2+1)">
      <goal name="factors_mop&#39;vc.3.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="7"><result status="valid" time="0.21" steps="8190"/></proof>
      </goal>
      <goal name="factors_mop&#39;vc.3.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="7"><result status="valid" time="0.17" steps="6443"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="factors_mop&#39;vc.3.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="7"><result status="valid" time="0.16" steps="6324"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="factors_mop&#39;vc.3.0.1" expl="true case (assertion)" proved="true">
    <proof prover="8"><result status="valid" time="0.47" steps="205349"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="factors_mop&#39;vc.3.1" expl="false case (assertion)" proved="true">
   <transf name="assert" proved="true" arg1="(even (i+j))">
    <goal name="factors_mop&#39;vc.3.1.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="(exists i1 j1. i = 2*i1+1 /\ j = 2*j1+1)">
     <goal name="factors_mop&#39;vc.3.1.0.0" expl="asserted formula" proved="true">
     <transf name="exists" proved="true" arg1="(div i 2)">
      <goal name="factors_mop&#39;vc.3.1.0.0.0" proved="true">
      <transf name="exists" proved="true" arg1="(div j 2)">
       <goal name="factors_mop&#39;vc.3.1.0.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="factors_mop&#39;vc.3.1.0.0.0.0.0" proved="true">
        <proof prover="7"><result status="valid" time="0.18" steps="6524"/></proof>
        </goal>
        <goal name="factors_mop&#39;vc.3.1.0.0.0.0.1" proved="true">
        <proof prover="7"><result status="valid" time="0.18" steps="6443"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="factors_mop&#39;vc.3.1.0.1" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.20" steps="6478"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="factors_mop&#39;vc.3.1.1" expl="false case (assertion)" proved="true">
    <proof prover="4"><result status="valid" time="0.31"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="factors_mop&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.37" steps="184840"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="factors_mop_rev&#39;vc" expl="VC for factors_mop_rev" proved="true">
 <proof prover="8"><result status="valid" time="0.34" steps="184532"/></proof>
 </goal>
 <goal name="pow_inv_sqrt_2&#39;vc" expl="VC for pow_inv_sqrt_2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pow_inv_sqrt_2&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.22" steps="168670"/></proof>
  </goal>
  <goal name="pow_inv_sqrt_2&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.21" steps="168673"/></proof>
  </goal>
  <goal name="pow_inv_sqrt_2&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.20" steps="168685"/></proof>
  </goal>
  <goal name="pow_inv_sqrt_2&#39;vc.3" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="pow_inv_sqrt_2&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="pos_coeff&#39;def" arg2="in" arg3="result&#39;def">
    <goal name="pow_inv_sqrt_2&#39;vc.3.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="result&#39;def">
     <goal name="pow_inv_sqrt_2&#39;vc.3.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="cpower_div">
      <goal name="pow_inv_sqrt_2&#39;vc.3.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="div_eq">
       <goal name="pow_inv_sqrt_2&#39;vc.3.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="0.52" steps="207963"/></proof>
       </goal>
       <goal name="pow_inv_sqrt_2&#39;vc.3.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="0.51" steps="208970"/></proof>
       </goal>
       <goal name="pow_inv_sqrt_2&#39;vc.3.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="0.38" steps="189062"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="pow_inv_sqrt_2&#39;vc.3.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.22" steps="169818"/></proof>
      </goal>
      <goal name="pow_inv_sqrt_2&#39;vc.3.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.39" steps="186013"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="pow_inv_sqrt_2_add&#39;vc" expl="VC for pow_inv_sqrt_2_add" proved="true">
 <proof prover="8"><result status="valid" time="5.39" steps="1698196"/></proof>
 </goal>
 <goal name="pow_inv_2&#39;vc" expl="VC for pow_inv_2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pow_inv_2&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.49" steps="205946"/></proof>
  </goal>
  <goal name="pow_inv_2&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.51" steps="208992"/></proof>
  </goal>
  <goal name="pow_inv_2&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.48" steps="208959"/></proof>
  </goal>
  <goal name="pow_inv_2&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="2.61" steps="826375"/></proof>
  </goal>
  <goal name="pow_inv_2&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.56" steps="211062"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pow_inv_2_leq_c_one&#39;vc" expl="VC for pow_inv_2_leq_c_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pow_inv_2_leq_c_one&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="3.99" steps="1440837"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pow_inv_2_inf_c_one&#39;vc" expl="VC for pow_inv_2_inf_c_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pow_inv_2_inf_c_one&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="pow_inv_2_inf_c_one&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="pow_inv_2&#39;def">
    <goal name="pow_inv_2_inf_c_one&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="2.03" steps="674667"/></proof>
    </goal>
    <goal name="pow_inv_2_inf_c_one&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.36" steps="186302"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="pow_inv_sqrt_2_leq_c_one&#39;vc" expl="VC for pow_inv_sqrt_2_leq_c_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pow_inv_sqrt_2_leq_c_one&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="4.01" steps="1472108"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pow_inv_2_sqrt_inf_c_one&#39;vc" expl="VC for pow_inv_2_sqrt_inf_c_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pow_inv_2_sqrt_inf_c_one&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="4.39" steps="1419320"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="cpower_pow_inv_2&#39;vc" expl="VC for cpower_pow_inv_2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cpower_pow_inv_2&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pow_inv_2&#39;def">
   <goal name="cpower_pow_inv_2&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="pow_inv_2&#39;def">
    <goal name="cpower_pow_inv_2&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="cpower_div">
     <goal name="cpower_pow_inv_2&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="div_eq">
      <goal name="cpower_pow_inv_2&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="0.46" steps="205242"/></proof>
      </goal>
      <goal name="cpower_pow_inv_2&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="cpower_i_to_c_rev">
       <goal name="cpower_pow_inv_2&#39;vc.0.0.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="0.51" steps="207578"/></proof>
       </goal>
       <goal name="cpower_pow_inv_2&#39;vc.0.0.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.34" steps="185406"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="cpower_pow_inv_2&#39;vc.0.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="0.51" steps="206320"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="cpower_pow_inv_2&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.36" steps="185406"/></proof>
     </goal>
     <goal name="cpower_pow_inv_2&#39;vc.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.51" steps="205544"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="cpower_pow_inv_2&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.07" steps="576"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="cpower_pow_inv_2&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.36" steps="185406"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cpower_pow_inv_sqrt_2&#39;vc" expl="VC for cpower_pow_inv_sqrt_2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cpower_pow_inv_sqrt_2&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pow_inv_sqrt_2&#39;def">
   <goal name="cpower_pow_inv_sqrt_2&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="pow_inv_sqrt_2&#39;def">
    <goal name="cpower_pow_inv_sqrt_2&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="0.48" steps="206577"/></proof>
    </goal>
    <goal name="cpower_pow_inv_sqrt_2&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.06" steps="576"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="cpower_pow_inv_sqrt_2&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.34" steps="185517"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cpower_2_pow_inv_sqrt_2&#39;vc" expl="VC for cpower_2_pow_inv_sqrt_2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cpower_2_pow_inv_sqrt_2&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.48" steps="206846"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pow_inv_2_subst&#39;vc" expl="VC for pow_inv_2_subst" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pow_inv_2_subst&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pow_inv_2&#39;def">
   <goal name="pow_inv_2_subst&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(i_to_c (power 2 i))" arg2="(cpower ttwo i)">
    <goal name="pow_inv_2_subst&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="0.17" steps="7113"/></proof>
    </goal>
    <goal name="pow_inv_2_subst&#39;vc.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="8"><result status="valid" time="0.49" steps="206527"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="pow_inv_2_subst&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.20" steps="169653"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="pow_inv_2_&#39;vc" expl="VC for pow_inv_2_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pow_inv_2_&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.50" steps="206559"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pow_inv_sqrt_2_2_add&#39;vc" expl="VC for pow_inv_sqrt_2_2_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pow_inv_sqrt_2_2_add&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.70" steps="208324"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pow_inv_2_cpower&#39;vc" expl="VC for pow_inv_2_cpower" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pow_inv_2_cpower&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.53" steps="207058"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pow_inv_2_scal&#39;vc" expl="VC for pow_inv_2_scal" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pow_inv_2_scal&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.65" steps="258135"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pow_inv_2_from_int&#39;vc" expl="VC for pow_inv_2_from_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pow_inv_2_from_int&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.60" steps="259206"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pow_inv_2_sq_rt&#39;vc" expl="VC for pow_inv_2_sq_rt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pow_inv_2_sq_rt&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pow_inv_2&#39;def">
   <goal name="pow_inv_2_sq_rt&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="pow_inv_sqrt_2&#39;def">
    <goal name="pow_inv_2_sq_rt&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="pow_inv_2_sq_rt&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="pos_coeff&#39;def">
      <goal name="pow_inv_2_sq_rt&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="cpower_div">
       <goal name="pow_inv_2_sq_rt&#39;vc.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="cpower_squarert_two">
        <goal name="pow_inv_2_sq_rt&#39;vc.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="replace" proved="true" arg1="(cpower c_one n)" arg2="c_one">
         <goal name="pow_inv_2_sq_rt&#39;vc.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <proof prover="8"><result status="valid" time="0.66" steps="261345"/></proof>
         </goal>
         <goal name="pow_inv_2_sq_rt&#39;vc.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="8"><result status="valid" time="0.66" steps="259677"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="pow_inv_2_sq_rt&#39;vc.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="0.29" steps="217971"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="pow_inv_2_sq_rt&#39;vc.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.26" steps="217971"/></proof>
       </goal>
       <goal name="pow_inv_2_sq_rt&#39;vc.0.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.47" steps="236819"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="pow_inv_2_sq_rt&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.28" steps="216954"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="pow_inv_2_sq_rt&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.27" steps="216954"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="pow_inv_sqrt_2_double&#39;vc" expl="VC for pow_inv_sqrt_2_double" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pow_inv_sqrt_2_double&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.64" steps="258272"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pos_pow_inv_2&#39;vc" expl="VC for pos_pow_inv_2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pos_pow_inv_2&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.64" steps="258285"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pos_pow_inv_sqrt_2&#39;vc" expl="VC for pos_pow_inv_sqrt_2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pos_pow_inv_sqrt_2&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pow_inv_sqrt_2&#39;def">
   <goal name="pos_pow_inv_sqrt_2&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.68" steps="259032"/></proof>
   </goal>
   <goal name="pos_pow_inv_sqrt_2&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.29" steps="217141"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="strict_pos_pow_inv_2&#39;vc" expl="VC for strict_pos_pow_inv_2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="strict_pos_pow_inv_2&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.68" steps="258451"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pow_inv_2_add&#39;vc" expl="VC for pow_inv_2_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pow_inv_2_add&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pow_inv_2&#39;def">
   <goal name="pow_inv_2_add&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="pow_inv_2&#39;def">
    <goal name="pow_inv_2_add&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="pow_inv_2&#39;def">
     <goal name="pow_inv_2_add&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="assert" proved="true" arg1="(forall a b c d. c_zero &lt;&gt; b -&gt; c_zero &lt;&gt; d -&gt; (a/.b) *. (c/.d) = (a*.c) /. (b*.d))">
      <goal name="pow_inv_2_add&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="pow_inv_2_add&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="8"><result status="valid" time="0.50" steps="236149"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="pow_inv_2_add&#39;vc.0.0.0.0.1" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="h">
       <goal name="pow_inv_2_add&#39;vc.0.0.0.0.1.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="div_eq">
        <goal name="pow_inv_2_add&#39;vc.0.0.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="0.50" steps="236206"/></proof>
        </goal>
        <goal name="pow_inv_2_add&#39;vc.0.0.0.0.1.0.1" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="power_sum">
         <goal name="pow_inv_2_add&#39;vc.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="i_to_c_mult">
          <goal name="pow_inv_2_add&#39;vc.0.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="0.28" steps="217383"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="pow_inv_2_add&#39;vc.0.0.0.0.1.0.1.1" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="0.28" steps="217385"/></proof>
         </goal>
         <goal name="pow_inv_2_add&#39;vc.0.0.0.0.1.0.1.2" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="0.29" steps="217385"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="pow_inv_2_add&#39;vc.0.0.0.0.1.0.2" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="0.66" steps="260378"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="pow_inv_2_add&#39;vc.0.0.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.65" steps="259331"/></proof>
       </goal>
       <goal name="pow_inv_2_add&#39;vc.0.0.0.0.1.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.63" steps="259331"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="pow_inv_2_add&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.28" steps="217265"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="pow_inv_2_add&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.31" steps="217265"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="pow_inv_2_add&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.44" steps="235780"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="pow_inv_2_plus_one&#39;vc" expl="VC for pow_inv_2_plus_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pow_inv_2_plus_one&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="5.33" steps="1913136"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pow_inv_2_plus_one_rev&#39;vc" expl="VC for pow_inv_2_plus_one_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pow_inv_2_plus_one_rev&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.63" steps="259583"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pow_inv_2_with_&#39;vc" expl="VC for pow_inv_2_with_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pow_inv_2_with_&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.61" steps="260130"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pow_inv_2_to_one&#39;vc" expl="VC for pow_inv_2_to_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pow_inv_2_to_one&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.63" steps="263667"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pow_inv_2_one&#39;vc" expl="VC for pow_inv_2_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pow_inv_2_one&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.49" steps="238021"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pow_inv_2_to_one_gen&#39;vc" expl="VC for pow_inv_2_to_one_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pow_inv_2_to_one_gen&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.64" steps="261841"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pow_inv_to_pow_2&#39;vc" expl="VC for pow_inv_to_pow_2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pow_inv_to_pow_2&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pow_inv_2&#39;def">
   <goal name="pow_inv_to_pow_2&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="pow_inv_2&#39;def">
    <goal name="pow_inv_to_pow_2&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(c_one /. i_to_c (power 2 (k - l)))" arg2="((c_one *. i_to_c (power 2 l)) /. (i_to_c (power 2 (k - l)) *. i_to_c (power 2 l)))">
     <goal name="pow_inv_to_pow_2&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="i_to_c_mult">
      <goal name="pow_inv_to_pow_2&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="power_sum_rev">
       <goal name="pow_inv_to_pow_2&#39;vc.0.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="10"><result status="valid" time="1.26" steps="2386602"/></proof>
       </goal>
       <goal name="pow_inv_to_pow_2&#39;vc.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.29" steps="217912"/></proof>
       </goal>
       <goal name="pow_inv_to_pow_2&#39;vc.0.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.29" steps="217894"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="pow_inv_to_pow_2&#39;vc.0.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="8"><result status="valid" time="0.61" steps="265094"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="pow_inv_to_pow_2&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.29" steps="217912"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="pow_inv_to_pow_2&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.45" steps="236563"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="neg_pow_inv_sqrt_2&#39;vc" expl="VC for neg_pow_inv_sqrt_2" proved="true">
 <proof prover="8"><result status="valid" time="0.21" steps="217993"/></proof>
 </goal>
 <goal name="inv_pow_inv_sqrt_2&#39;vc" expl="VC for inv_pow_inv_sqrt_2" proved="true">
 <proof prover="8"><result status="valid" time="0.59" steps="260978"/></proof>
 </goal>
 <goal name="pow_inv_sqrt_2_values&#39;vc" expl="VC for pow_inv_sqrt_2_values" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pow_inv_sqrt_2_values&#39;vc.0" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="0.79" steps="264741"/></proof>
  </goal>
  <goal name="pow_inv_sqrt_2_values&#39;vc.1" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="0.63" steps="263566"/></proof>
  </goal>
  <goal name="pow_inv_sqrt_2_values&#39;vc.2" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pow_inv_sqrt_2_values&#39;vc.2.0" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="0.27" steps="218160"/></proof>
   </goal>
   <goal name="pow_inv_sqrt_2_values&#39;vc.2.1" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="0.31" steps="218169"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="pow_inv_sqrt_2_values&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.48" steps="236886"/></proof>
  </goal>
  <goal name="pow_inv_sqrt_2_values&#39;vc.4" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="0.49" steps="239080"/></proof>
  </goal>
  <goal name="pow_inv_sqrt_2_values&#39;vc.5" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="0.52" steps="239491"/></proof>
  </goal>
  <goal name="pow_inv_sqrt_2_values&#39;vc.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pow_inv_sqrt_2_values&#39;vc.6.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.67" steps="263948"/></proof>
   </goal>
   <goal name="pow_inv_sqrt_2_values&#39;vc.6.1" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.68" steps="268659"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="neg_pow_inv_sqrt_2_values&#39;vc" expl="VC for neg_pow_inv_sqrt_2_values" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="neg_pow_inv_sqrt_2_values&#39;vc.0" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="0.66" steps="264706"/></proof>
  </goal>
  <goal name="neg_pow_inv_sqrt_2_values&#39;vc.1" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="(neg_pow_inv_sqrt_2 i )" arg2="(neg_pow_inv_sqrt_2 ((i-1)+1))">
   <goal name="neg_pow_inv_sqrt_2_values&#39;vc.1.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="neg_pow_inv_sqrt_2&#39;def">
    <goal name="neg_pow_inv_sqrt_2_values&#39;vc.1.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="cpower_plus_one">
     <goal name="neg_pow_inv_sqrt_2_values&#39;vc.1.0.0.0" expl="assertion" proved="true">
     <proof prover="8"><result status="valid" time="0.63" steps="264594"/></proof>
     </goal>
     <goal name="neg_pow_inv_sqrt_2_values&#39;vc.1.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.30" steps="218229"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="neg_pow_inv_sqrt_2_values&#39;vc.1.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.26" steps="218218"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="neg_pow_inv_sqrt_2_values&#39;vc.1.1" expl="equality hypothesis" proved="true">
   <proof prover="8"><result status="valid" time="0.27" steps="218226"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="neg_pow_inv_sqrt_2_values&#39;vc.2" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="neg_pow_inv_sqrt_2_values&#39;vc.2.0" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="0.27" steps="218230"/></proof>
   </goal>
   <goal name="neg_pow_inv_sqrt_2_values&#39;vc.2.1" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="0.29" steps="218239"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="neg_pow_inv_sqrt_2_values&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.46" steps="236979"/></proof>
  </goal>
  <goal name="neg_pow_inv_sqrt_2_values&#39;vc.4" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="neg_pow_inv_sqrt_2_values&#39;vc.4.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="neg_pow_inv_sqrt_2_values&#39;vc.4.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H1">
     <goal name="neg_pow_inv_sqrt_2_values&#39;vc.4.0.0.0" expl="postcondition" proved="true">
     <proof prover="8"><result status="valid" time="0.64" steps="297998"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="neg_pow_inv_sqrt_2_values&#39;vc.4.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="neg_pow_inv_sqrt_2_values&#39;vc.4.1.0" expl="postcondition" proved="true">
    <proof prover="11"><result status="valid" time="0.67" steps="1448019"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ppos_neg_coeff_values&#39;vc" expl="VC for ppos_neg_coeff_values" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ppos_neg_coeff_values&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.63" steps="264541"/></proof>
  </goal>
  <goal name="ppos_neg_coeff_values&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="11"><result status="valid" time="1.54" steps="1366538"/></proof>
  </goal>
  <goal name="ppos_neg_coeff_values&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.67" steps="263943"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pow_inv_sqrt_2_neg&#39;vc" expl="VC for pow_inv_sqrt_2_neg" proved="true">
 <proof prover="8"><result status="valid" time="0.28" steps="218377"/></proof>
 </goal>
</theory>
<theory name="Oper_mat" proved="true">
 <goal name="pow_2dim_kets&#39;vc" expl="VC for pow_2dim_kets" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pow_2dim_kets&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="pow_2dim_kets&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="pow2dim&#39;def">
    <goal name="pow_2dim_kets&#39;vc.0.0.0" expl="VC for pow_2dim_kets" proved="true">
    <transf name="exists" proved="true" arg1="(ket_length m)">
     <goal name="pow_2dim_kets&#39;vc.0.0.0.0" proved="true">
     <proof prover="8"><result status="valid" time="0.87" steps="309054"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="get_pow2dim&#39;vc" expl="VC for get_pow2dim" proved="true">
 <proof prover="8"><result status="valid" time="0.78" steps="306272"/></proof>
 </goal>
 <goal name="set_pow2dim&#39;vc" expl="VC for set_pow2dim" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_pow2dim&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.60" steps="290156"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_pow2dim_elt&#39;vc" expl="VC for get_pow2dim_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_pow2dim_elt&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.77" steps="308783"/></proof>
  </goal>
  <goal name="get_pow2dim_elt&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.78" steps="308715"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_pow2dim_elt&#39;vc" expl="VC for set_pow2dim_elt" proved="true">
 <proof prover="8"><result status="valid" time="0.63" steps="290247"/></proof>
 </goal>
 <goal name="mat_size&#39;vc" expl="VC for mat_size" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_size&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.37" steps="267975"/></proof>
  </goal>
  <goal name="mat_size&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.61" steps="289871"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_square&#39;vc" expl="VC for get_square" proved="true">
 <proof prover="8"><result status="valid" time="0.64" steps="290053"/></proof>
 </goal>
 <goal name="set_square&#39;vc" expl="VC for set_square" proved="true">
 <proof prover="8"><result status="valid" time="0.60" steps="290066"/></proof>
 </goal>
 <goal name="set_square_elt&#39;vc" expl="VC for set_square_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_square_elt&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.59" steps="290083"/></proof>
  </goal>
  <goal name="set_square_elt&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.63" steps="290154"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_square_elt&#39;vc" expl="VC for get_square_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_square_elt&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.61" steps="291291"/></proof>
  </goal>
  <goal name="get_square_elt&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.62" steps="290297"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pow2dim_square_dec&#39;vc" expl="VC for pow2dim_square_dec" proved="true">
 <proof prover="8"><result status="valid" time="0.68" steps="304213"/></proof>
 </goal>
 <goal name="dec_pow2dim_square&#39;vc" expl="VC for dec_pow2dim_square" proved="true">
 <proof prover="8"><result status="valid" time="0.68" steps="304215"/></proof>
 </goal>
 <goal name="ln_size&#39;vc" expl="VC for ln_size" proved="true">
 <proof prover="8"><result status="valid" time="0.85" steps="309547"/></proof>
 </goal>
 <goal name="set_ln_size_lnc&#39;vc" expl="VC for set_ln_size_lnc" proved="true">
 <proof prover="8"><result status="valid" time="0.59" steps="286475"/></proof>
 </goal>
 <goal name="set_ln_size_lnr&#39;vc" expl="VC for set_ln_size_lnr" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_ln_size_lnr&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.61" steps="286459"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_ln_size_columns&#39;vc" expl="VC for set_ln_size_columns" proved="true">
 <proof prover="8"><result status="valid" time="0.60" steps="292440"/></proof>
 </goal>
 <goal name="set_ln_size_rows&#39;vc" expl="VC for set_ln_size_rows" proved="true">
 <proof prover="8"><result status="valid" time="0.62" steps="292473"/></proof>
 </goal>
 <goal name="set_pow2dim_square&#39;vc" expl="VC for set_pow2dim_square" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_pow2dim_square&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.65" steps="291961"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_pow2dim_square_elt&#39;vc" expl="VC for set_pow2dim_square_elt" proved="true">
 <proof prover="8"><result status="valid" time="0.83" steps="310226"/></proof>
 </goal>
 <goal name="get_pow2dim_square_elt&#39;vc" expl="VC for get_pow2dim_square_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_pow2dim_square_elt&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.65" steps="292476"/></proof>
  </goal>
  <goal name="get_pow2dim_square_elt&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.68" steps="291493"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Bv_mat_sum" proved="true">
 <goal name="mat_sum_comp&#39;vc" expl="VC for mat_sum_comp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sum_comp&#39;vc.0" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="1.65" steps="573700"/></proof>
  </goal>
  <goal name="mat_sum_comp&#39;vc.1" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="1.61" steps="570910"/></proof>
  </goal>
  <goal name="mat_sum_comp&#39;vc.2" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="set_equal">
   <goal name="mat_sum_comp&#39;vc.2.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="mat_sum_comp&#39;vc.2.0.0" expl="apply premises" proved="true">
    <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (o:(bitvec, bitvec)) -&gt; concat (fir o) (sec o)),(cartesian_product (n_bvs y) (n_bvs x)),e
">
     <goal name="mat_sum_comp&#39;vc.2.0.0.0" expl="apply premises" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="mat_sum_comp&#39;vc.2.0.0.0.0" expl="destruct premise" proved="true">
      <transf name="replace" proved="true" arg1="(fun (o:(bitvec, bitvec)) -&gt;
     concat (match o with
     | x1, _ -&gt; x1
     end) (match o with
     | _, y1 -&gt; y1
     end))" arg2="(fun (o:(bitvec, bitvec)) -&gt; concat (fir o) (sec o))" arg3="in" arg4="H">
       <goal name="mat_sum_comp&#39;vc.2.0.0.0.0.0" expl="destruct premise" proved="true">
       <proof prover="8"><result status="valid" time="1.81" steps="601046"/></proof>
       </goal>
       <goal name="mat_sum_comp&#39;vc.2.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="8"><result status="valid" time="7.05" steps="1965968"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sum_comp&#39;vc.2.0.0.0.1" expl="apply premises" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="mat_sum_comp&#39;vc.2.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="(length e = x+y)">
        <goal name="mat_sum_comp&#39;vc.2.0.0.0.1.0.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="(length e = length (fir a) + length (sec a))">
         <goal name="mat_sum_comp&#39;vc.2.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
         <transf name="replace" proved="true" arg1="(length (fir a) )" arg2="y">
          <goal name="mat_sum_comp&#39;vc.2.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="replace" proved="true" arg1="(length (sec a) )" arg2="x">
           <goal name="mat_sum_comp&#39;vc.2.0.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
           <transf name="split_all_full" proved="true" >
            <goal name="mat_sum_comp&#39;vc.2.0.0.0.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
            <transf name="rewrite" proved="true" arg1="Hinst">
             <goal name="mat_sum_comp&#39;vc.2.0.0.0.1.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="mat_sum_comp&#39;vc.2.0.0.0.1.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
              <transf name="rewrite" proved="true" arg1="concat_length">
               <goal name="mat_sum_comp&#39;vc.2.0.0.0.1.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
               <transf name="apply" proved="true" arg1="add_eq">
                <goal name="mat_sum_comp&#39;vc.2.0.0.0.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="4"><result status="valid" time="0.62"/></proof>
                </goal>
                <goal name="mat_sum_comp&#39;vc.2.0.0.0.1.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                <proof prover="4"><result status="valid" time="0.61"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="mat_sum_comp&#39;vc.2.0.0.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="4"><result status="valid" time="0.54"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="mat_sum_comp&#39;vc.2.0.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="4"><result status="valid" time="0.56"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sum_comp&#39;vc.2.0.0.0.1.0.0.1" expl="asserted formula" proved="true">
         <transf name="rewrite" proved="true" arg1="h1">
          <goal name="mat_sum_comp&#39;vc.2.0.0.0.1.0.0.1.0" expl="asserted formula" proved="true">
          <transf name="replace" proved="true" arg1="(x+y)" arg2="(y+x)">
           <goal name="mat_sum_comp&#39;vc.2.0.0.0.1.0.0.1.0.0" expl="asserted formula" proved="true">
           <transf name="apply" proved="true" arg1="add_eq">
            <goal name="mat_sum_comp&#39;vc.2.0.0.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="0.73"/></proof>
            </goal>
            <goal name="mat_sum_comp&#39;vc.2.0.0.0.1.0.0.1.0.0.1" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="0.56"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="mat_sum_comp&#39;vc.2.0.0.0.1.0.0.1.0.1" expl="equality hypothesis" proved="true">
           <proof prover="8"><result status="valid" time="0.78" steps="535749"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_comp&#39;vc.2.0.0.0.1.0.1" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.41" steps="565060"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_comp&#39;vc.2.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="mat_sum_comp&#39;vc.2.1.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_map_mem">
     <goal name="mat_sum_comp&#39;vc.2.1.0.0" expl="apply premises" proved="true">
     <transf name="exists" proved="true" arg1="(hpart e y, tpart e y)">
      <goal name="mat_sum_comp&#39;vc.2.1.0.0.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="mat_sum_comp&#39;vc.2.1.0.0.0.0" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="mat_sum_comp&#39;vc.2.1.0.0.0.0.0" proved="true">
        <transf name="apply" proved="true" arg1="cartesian_product&#39;spec">
         <goal name="mat_sum_comp&#39;vc.2.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="mat_sum_comp&#39;vc.2.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="2.15" steps="663406"/></proof>
          </goal>
          <goal name="mat_sum_comp&#39;vc.2.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.76"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sum_comp&#39;vc.2.1.0.0.0.1" proved="true">
       <proof prover="4"><result status="valid" time="0.74"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sum_comp&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.82" steps="535567"/></proof>
  </goal>
  <goal name="mat_sum_comp&#39;vc.4" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.85" steps="550164"/></proof>
  </goal>
  <goal name="mat_sum_comp&#39;vc.5" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.65" steps="616729"/></proof>
  </goal>
  <goal name="mat_sum_comp&#39;vc.6" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.78" steps="550446"/></proof>
  </goal>
  <goal name="mat_sum_comp&#39;vc.7" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.37" steps="580346"/></proof>
  </goal>
  <goal name="mat_sum_comp&#39;vc.8" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.42" steps="580416"/></proof>
  </goal>
  <goal name="mat_sum_comp&#39;vc.9" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.84" steps="550628"/></proof>
  </goal>
  <goal name="mat_sum_comp&#39;vc.10" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.88" steps="550634"/></proof>
  </goal>
  <goal name="mat_sum_comp&#39;vc.11" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(mat_sum (n_bvs y)
  (fun (bvy:bitvec) -&gt;
    mat_sum (n_bvs x) (fun (bvx:bitvec) -&gt; (f @ bvy) @ bvx)))" arg2="(mat_sum (n_bvs y) (fun (a:bitvec) -&gt; mat_sum (n_bvs x) (f @ a)))">
   <goal name="mat_sum_comp&#39;vc.11.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures">
    <goal name="mat_sum_comp&#39;vc.11.0.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="map_mat_sum" arg2="(fun bv -&gt;  f    (hpart bv y)  (tpart bv y)),(cartesian_product (n_bvs y) (n_bvs x)),(fun o -&gt;  concat  (fir o) (sec o))">
     <goal name="mat_sum_comp&#39;vc.11.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(fun (o:(bitvec, bitvec)) -&gt;
     concat (match o with
     | x1, _ -&gt; x1
     end) (match o with
     | _, y1 -&gt; y1
     end))" arg2="(fun (o:(bitvec, bitvec)) -&gt; concat (fir o) (sec o))" arg3="in" arg4="Assert">
      <goal name="mat_sum_comp&#39;vc.11.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="Assert" arg2="in" arg3="Hinst">
       <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
        <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="Hinst">
         <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="apply" proved="true" arg1="mat_sum_eq">
          <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.69"/></proof>
          </goal>
          <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="(fun (o:(bitvec, bitvec)) -&gt;
    (f @ match o with
     | x1, _ -&gt; x1
     end) @ match o with
    | _, y1 -&gt; y1
    end)" arg2="(fun (o:(bitvec, bitvec)) -&gt;
    (f @ fir o) @ sec o)">
           <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="set_constant_size">
            <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="Assert2">
               <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="Assert2">
                <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="1.06" steps="675452"/></proof>
                </goal>
                <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="1.83" steps="709966"/></proof>
                </goal>
                <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.0.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="1.83" steps="709990"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="1.72" steps="709966"/></proof>
               </goal>
               <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="1.75" steps="709990"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="Assert1">
               <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="Assert1">
                <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="1.03" steps="675452"/></proof>
                </goal>
                <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.0.1.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="1.84" steps="709966"/></proof>
                </goal>
                <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.0.1.0.1.0.0.0.2" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="1.82" steps="709990"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="1.76" steps="709966"/></proof>
               </goal>
               <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.0.1.0.1.0.0.2" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="1.81" steps="709990"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
           <transf name="apply" proved="true" arg1="set_equal_func">
            <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="2.57" steps="697932"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
            <transf name="split_all_full" proved="true" >
             <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="3.82" steps="1042324"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="0.73"/></proof>
         </goal>
         <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <transf name="apply" proved="true" arg1="set_constant_size">
          <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="Assert2">
             <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="Assert2">
              <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="1.09" steps="675452"/></proof>
              </goal>
              <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
              <transf name="apply" proved="true" arg1="in_n_bvs">
               <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.2.0.0.0.0.1.0" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="1.07" steps="675454"/></proof>
               </goal>
               <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.2.0.0.0.0.1.1" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="5.11" steps="1730319"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="1.94" steps="754439"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="4.04" steps="1155342"/></proof>
             </goal>
             <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.2.0.0.0.2" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="2.26" steps="754439"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.2.1" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.2.1.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.2.1.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="Assert1">
             <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.2.1.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="Assert1">
              <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.2.1.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="1.05" steps="675452"/></proof>
              </goal>
              <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.2.1.0.0.0.1" expl="rewrite premises" proved="true">
              <transf name="eliminate_definition" proved="true" >
               <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.2.1.0.0.0.1.0" expl="rewrite premises" proved="true">
               <transf name="split_all_full" proved="true" >
                <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.2.1.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="3.32" steps="1052579"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.2.1.0.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="2.24" steps="754439"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.2.1.0.0.1" expl="rewrite premises" proved="true">
             <transf name="eliminate_definition" proved="true" >
              <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.2.1.0.0.1.0" expl="rewrite premises" proved="true">
              <transf name="split_all_full" proved="true" >
               <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.2.1.0.0.1.0.0" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="3.34" steps="1052589"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.2.1.0.0.2" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="2.26" steps="754439"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
         <transf name="apply" proved="true" arg1="set_injective">
          <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
            <transf name="case" proved="true" arg1="(fir e = fir e&#39;)">
             <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.0" expl="true case (apply premises)" proved="true">
             <transf name="case" proved="true" arg1="(sec e &lt;&gt; sec e&#39;)">
              <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.0.0" expl="true case (apply premises)" proved="true">
              <transf name="case" proved="true" arg1="(exists i. 0 &lt;= i &lt; x /\ getbv (sec e) i &lt;&gt; getbv (sec e&#39;) i )">
               <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
               <transf name="destruct" proved="true" arg1="h">
                <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
                <transf name="assert" proved="true" arg1="( getbv (concat (fir e) (sec e) ) (i + y) &lt;&gt; getbv (concat (fir e&#39;) (sec e&#39;) ) (i + y) )">
                 <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                 <transf name="rewrite" proved="true" arg1="concat_value">
                  <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                  <transf name="rewrite" proved="true" arg1="concat_value">
                   <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                   <transf name="eliminate_if" proved="true" >
                    <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                     <proof prover="4"><result status="valid" time="0.89"/></proof>
                     </goal>
                     <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.0.0.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
                     <proof prover="8"><result status="valid" time="2.45" steps="805906"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.0.0.0.0.1" expl="true case (apply premises)" proved="true">
                 <proof prover="8"><result status="valid" time="1.74" steps="709823"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.0.0.1" expl="false case (true case. apply premises)" proved="true">
               <transf name="assert" proved="true" arg1="(sec e = sec e&#39;)">
                <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
                <transf name="apply" proved="true" arg1="set_equal_bv">
                 <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.26" steps="756410"/></proof>
                 </goal>
                 <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.40" steps="793723"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.0.0.1.1" expl="false case (true case. apply premises)" proved="true">
                <proof prover="8"><result status="valid" time="0.86" steps="676906"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.0.1" expl="false case (true case. apply premises)" proved="true">
              <transf name="assert" proved="true" arg1="(e= e&#39;)">
               <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.0.1.0" expl="asserted formula" proved="true">
               <transf name="replace" proved="true" arg1="e" arg2="(fir e, sec e)">
                <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
                <transf name="replace" proved="true" arg1="e&#39;" arg2="(fir e&#39;, sec e&#39;)">
                 <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
                 <proof prover="8"><result status="valid" time="1.44" steps="710943"/></proof>
                 </goal>
                 <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
                 <proof prover="8"><result status="valid" time="1.51" steps="711304"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
                <proof prover="8"><result status="valid" time="1.49" steps="711304"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.0.1.1" expl="false case (true case. apply premises)" proved="true">
               <proof prover="8"><result status="valid" time="1.05" steps="676736"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.1" expl="false case (apply premises)" proved="true">
             <transf name="assert" proved="true" arg1="(exists i . 0 &lt;= i &lt; length (concat (fir e) (sec e) )/\ getbv (concat (fir e) (sec e) ) i &lt;&gt; getbv (concat (fir e&#39;) (sec e&#39;) ) i)">
              <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.1.0" expl="asserted formula" proved="true">
              <transf name="case" proved="true" arg1="(exists i . 0 &lt;= i &lt; length  (fir e) /\ getbv  (fir e)   i &lt;&gt; getbv  (fir e&#39;) i)">
               <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.1.0.0" expl="asserted formula (true case)" proved="true">
               <transf name="destruct" proved="true" arg1="h1">
                <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.1.0.0.0" expl="asserted formula (true case)" proved="true">
                <transf name="exists" proved="true" arg1="i">
                 <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.1.0.0.0.0" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.1.0.0.0.0.0" proved="true">
                  <proof prover="8"><result status="valid" time="1.05" steps="675622"/></proof>
                  </goal>
                  <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.1.0.0.0.0.1" proved="true">
                  <proof prover="8"><result status="valid" time="3.72" steps="1228316"/></proof>
                  </goal>
                  <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.1.0.0.0.0.2" proved="true">
                  <transf name="rewrite" proved="true" arg1="concat_value">
                   <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.1.0.0.0.0.2.0" proved="true">
                   <transf name="rewrite" proved="true" arg1="concat_value">
                    <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.1.0.0.0.0.2.0.0" proved="true">
                    <transf name="eliminate_if" proved="true" >
                     <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.1.0.0.0.0.2.0.0.0" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.1.0.0.0.0.2.0.0.0.0" proved="true">
                      <proof prover="8"><result status="valid" time="1.16" steps="714490"/></proof>
                      </goal>
                      <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.1.0.0.0.0.2.0.0.0.1" proved="true">
                      <proof prover="8"><result status="valid" time="2.34" steps="805565"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.1.0.1" expl="asserted formula (false case)" proved="true">
               <transf name="assert" proved="true" arg1="(fir e = fir e&#39;)">
                <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.1.0.1.0" expl="asserted formula" proved="true">
                <transf name="apply" proved="true" arg1="set_equal_bv">
                 <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
                 <transf name="replace" proved="true" arg1="(length (fir e))" arg2="y">
                  <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.95" steps="754751"/></proof>
                  </goal>
                  <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.1" expl="equality hypothesis" proved="true">
                  <transf name="apply" proved="true" arg1="goal_comm">
                   <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.1.0" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.26" steps="754731"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.1.0.1.0.1" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.1.0.1.0.1.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.07" steps="793042"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.1.0.1.1" expl="asserted formula (false case)" proved="true">
                <proof prover="8"><result status="valid" time="0.89" steps="708498"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="mat_sum_comp&#39;vc.11.0.0.0.0.0.0.3.0.0.0.1.1" expl="false case (apply premises)" proved="true">
              <proof prover="8"><result status="valid" time="1.77" steps="709783"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sum_comp&#39;vc.11.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="set_equal_func">
       <goal name="mat_sum_comp&#39;vc.11.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="mat_sum_comp&#39;vc.11.0.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="3.20" steps="974508"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_comp&#39;vc.11.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="mat_sum_eq">
    <goal name="mat_sum_comp&#39;vc.11.1.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.96" steps="616063"/></proof>
    </goal>
    <goal name="mat_sum_comp&#39;vc.11.1.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="mat_sum_comp&#39;vc.11.1.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_comp&#39;vc.11.1.1.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="mat_sum_comp&#39;vc.11.1.1.0.0.0" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(rows (mat_sum (n_bvs x) (fun (bvx:bitvec) -&gt; (f @ e) @ bvx)))" arg2="(power 2 l)">
        <goal name="mat_sum_comp&#39;vc.11.1.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="goal_comm">
         <goal name="mat_sum_comp&#39;vc.11.1.1.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="rows_mat_sum">
          <goal name="mat_sum_comp&#39;vc.11.1.1.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.57" steps="647113"/></proof>
          </goal>
          <goal name="mat_sum_comp&#39;vc.11.1.1.0.0.0.0.0.1" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="set_constant_size">
           <goal name="mat_sum_comp&#39;vc.11.1.1.0.0.0.0.0.1.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="mat_sum_comp&#39;vc.11.1.1.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="1.69" steps="649711"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="mat_sum_comp&#39;vc.11.1.1.0.0.0.0.0.1.1" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="mat_sum_comp&#39;vc.11.1.1.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="1.67" steps="649694"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="mat_sum_comp&#39;vc.11.1.1.0.0.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.59" steps="647648"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_comp&#39;vc.11.1.1.0.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="rows_mat_sum">
         <goal name="mat_sum_comp&#39;vc.11.1.1.0.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.57" steps="647113"/></proof>
         </goal>
         <goal name="mat_sum_comp&#39;vc.11.1.1.0.0.0.1.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_constant_size">
          <goal name="mat_sum_comp&#39;vc.11.1.1.0.0.0.1.1.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="mat_sum_comp&#39;vc.11.1.1.0.0.0.1.1.0.0" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="1.57" steps="649711"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="mat_sum_comp&#39;vc.11.1.1.0.0.0.1.1.1" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="mat_sum_comp&#39;vc.11.1.1.0.0.0.1.1.1.0" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="1.63" steps="649694"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sum_comp&#39;vc.11.1.1.0.0.0.1.2" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.56" steps="647648"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_comp&#39;vc.11.1.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_comp&#39;vc.11.1.1.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="mat_sum_comp&#39;vc.11.1.1.1.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="columns_mat_sum">
        <goal name="mat_sum_comp&#39;vc.11.1.1.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.57" steps="647113"/></proof>
        </goal>
        <goal name="mat_sum_comp&#39;vc.11.1.1.1.0.0.1" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="mat_sum_comp&#39;vc.11.1.1.1.0.0.1.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="mat_sum_comp&#39;vc.11.1.1.1.0.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.60" steps="649711"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sum_comp&#39;vc.11.1.1.1.0.0.1.1" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="mat_sum_comp&#39;vc.11.1.1.1.0.0.1.1.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.60" steps="649694"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_comp&#39;vc.11.1.1.1.0.0.2" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="mat_sum_comp&#39;vc.11.1.1.1.0.0.2.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="mat_sum_comp&#39;vc.11.1.1.1.0.0.2.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="goal_comm">
           <goal name="mat_sum_comp&#39;vc.11.1.1.1.0.0.2.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="columns_mat_sum">
            <goal name="mat_sum_comp&#39;vc.11.1.1.1.0.0.2.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="1.60" steps="647126"/></proof>
            </goal>
            <goal name="mat_sum_comp&#39;vc.11.1.1.1.0.0.2.0.0.0.1" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="set_constant_size">
             <goal name="mat_sum_comp&#39;vc.11.1.1.1.0.0.2.0.0.0.1.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="mat_sum_comp&#39;vc.11.1.1.1.0.0.2.0.0.0.1.0.0" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="1.68" steps="650069"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="mat_sum_comp&#39;vc.11.1.1.1.0.0.2.0.0.0.1.1" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="mat_sum_comp&#39;vc.11.1.1.1.0.0.2.0.0.0.1.1.0" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="1.59" steps="650052"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="mat_sum_comp&#39;vc.11.1.1.1.0.0.2.0.0.0.2" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="1.65" steps="649745"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_comp&#39;vc.11.1.2" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="1.76" steps="686929"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum_comp_rev&#39;vc" expl="VC for mat_sum_comp_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sum_comp_rev&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.79" steps="502982"/></proof>
  </goal>
  <goal name="mat_sum_comp_rev&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.78" steps="502985"/></proof>
  </goal>
  <goal name="mat_sum_comp_rev&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.74" steps="502988"/></proof>
  </goal>
  <goal name="mat_sum_comp_rev&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.25" steps="531597"/></proof>
  </goal>
  <goal name="mat_sum_comp_rev&#39;vc.4" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.25" steps="531734"/></proof>
  </goal>
  <goal name="mat_sum_comp_rev&#39;vc.5" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="mat_sum_comp_rev&#39;vc.5.0" expl="postcondition" proved="true">
   <transf name="compute_specified" proved="true" >
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_bin_comp_l&#39;vc" expl="VC for ket_sum_bin_comp_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_bin_comp_l&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.74" steps="492351"/></proof>
  </goal>
  <goal name="ket_sum_bin_comp_l&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.80" steps="524075"/></proof>
  </goal>
  <goal name="ket_sum_bin_comp_l&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.82" steps="524078"/></proof>
  </goal>
  <goal name="ket_sum_bin_comp_l&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.77" steps="524081"/></proof>
  </goal>
  <goal name="ket_sum_bin_comp_l&#39;vc.4" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="ket_sum_bin_comp_l&#39;vc.4.0" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(is_a_ket_l  ((scal @ bvy) *.. make_ket l (fun (j:int) -&gt; get ((f @ bvy) @ bvx) j 0)) l)">
    <goal name="ket_sum_bin_comp_l&#39;vc.4.0.0" expl="asserted formula" proved="true">
    <proof prover="8"><result status="valid" time="1.61" steps="635784"/></proof>
    </goal>
    <goal name="ket_sum_bin_comp_l&#39;vc.4.0.1" expl="precondition" proved="true">
    <proof prover="8"><result status="valid" time="1.90" steps="636641"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ket_sum_bin_comp_l&#39;vc.5" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(is_a_ket_l  ((scal @ bvy) *.. make_ket l (fun (j:int) -&gt; get ((f @ bvy) @ bvx) j 0)) l)">
   <goal name="ket_sum_bin_comp_l&#39;vc.5.0" expl="asserted formula" proved="true">
   <proof prover="8"><result status="valid" time="1.81" steps="636017"/></proof>
   </goal>
   <goal name="ket_sum_bin_comp_l&#39;vc.5.1" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="ket_sum_bin_comp_l&#39;vc.5.1.0" expl="precondition" proved="true">
    <proof prover="8"><result status="valid" time="1.66" steps="637103"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ket_sum_bin_comp_l&#39;vc.6" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ket_sum_l_to_mat_sum">
   <goal name="ket_sum_bin_comp_l&#39;vc.6.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(mat_sum (n_bvs y)
  (fun (i:bitvec) -&gt;
    make_ket l
    (fun (j:int) -&gt;
      get
      ((fun (bvy:bitvec) -&gt;
         (scal @ bvy)
         *.. ket_sum_l (n_bvs x) (fun (bvx:bitvec) -&gt; (f @ bvy) @ bvx) l)
       @ i)
      j 0)))" arg2="(mat_sum (n_bvs y)
  (fun (bvy:bitvec) -&gt;
    mat_sum (n_bvs x)
    (fun (bvx:bitvec) -&gt;
      ((fun (bvy1:bitvec) (bvx1:bitvec) -&gt;
         (scal @ bvy1)
         *.. make_ket l (fun (j:int) -&gt; get ((f @ bvy1) @ bvx1) j 0))
       @ bvy)
      @ bvx)))">
    <goal name="ket_sum_bin_comp_l&#39;vc.6.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures">
     <goal name="ket_sum_bin_comp_l&#39;vc.6.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="ket_sum_l_to_mat_sum">
      <goal name="ket_sum_bin_comp_l&#39;vc.6.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="mat_sum_eq">
       <goal name="ket_sum_bin_comp_l&#39;vc.6.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="0.33" steps="6656"/></proof>
       </goal>
       <goal name="ket_sum_bin_comp_l&#39;vc.6.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="ket_sum_bin_comp_l&#39;vc.6.0.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="ket_sum_bin_comp_l&#39;vc.6.0.0.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="ket_sum_bin_comp_l&#39;vc.6.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.77" steps="648423"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="ket_sum_bin_comp_l&#39;vc.6.0.0.0.0.1.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="ket_sum_bin_comp_l&#39;vc.6.0.0.0.0.1.1.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="ket_sum_bin_comp_l&#39;vc.6.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.76" steps="648618"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="ket_sum_bin_comp_l&#39;vc.6.0.0.0.0.2" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="ket_sum_bin_comp_l&#39;vc.6.0.0.0.0.2.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="ket_sum_bin_comp_l&#39;vc.6.0.0.0.0.2.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_equal_ket_l">
          <goal name="ket_sum_bin_comp_l&#39;vc.6.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
          <transf name="exists" proved="true" arg1="l">
           <goal name="ket_sum_bin_comp_l&#39;vc.6.0.0.0.0.2.0.0.0.0" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="ket_sum_bin_comp_l&#39;vc.6.0.0.0.0.2.0.0.0.0.0" proved="true">
            <proof prover="8"><result status="valid" time="1.90" steps="644444"/></proof>
            </goal>
            <goal name="ket_sum_bin_comp_l&#39;vc.6.0.0.0.0.2.0.0.0.0.1" proved="true">
            <proof prover="8"><result status="valid" time="1.67" steps="643418"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="ket_sum_bin_comp_l&#39;vc.6.0.0.0.0.2.0.0.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="ket_sum_bin_comp_l&#39;vc.6.0.0.0.0.2.0.0.1.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="scalar_ket_value">
            <goal name="ket_sum_bin_comp_l&#39;vc.6.0.0.0.0.2.0.0.1.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="assert_make_ket_l">
             <goal name="ket_sum_bin_comp_l&#39;vc.6.0.0.0.0.2.0.0.1.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="assert_make_ket_l">
              <goal name="ket_sum_bin_comp_l&#39;vc.6.0.0.0.0.2.0.0.1.0.0.0.0" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="ket_sum_bin_comp_l&#39;vc.6.0.0.0.0.2.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="1.48" steps="606100"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="ket_sum_bin_comp_l&#39;vc.6.0.0.0.0.2.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="0.84" steps="575905"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="ket_sum_bin_comp_l&#39;vc.6.0.0.0.0.2.0.0.1.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="0.81" steps="575905"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="ket_sum_bin_comp_l&#39;vc.6.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.66" steps="532615"/></proof>
      </goal>
      <goal name="ket_sum_bin_comp_l&#39;vc.6.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.21" steps="6656"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="mat_sum_eq">
     <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.0" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="0.27" steps="6656"/></proof>
     </goal>
     <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.1.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.66" steps="647818"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.1.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.1.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.1.1.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.68" steps="647999"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_equal_ket_l">
        <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.0" expl="apply premises" proved="true">
        <transf name="exists" proved="true" arg1="l">
         <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.0.0" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.0.0.0" proved="true">
          <proof prover="8"><result status="valid" time="1.63" steps="643418"/></proof>
          </goal>
          <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.0.0.1" proved="true">
          <transf name="apply" proved="true" arg1="set_is_a_ket_l">
           <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.0.0.1.0" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="0.86" steps="575769"/></proof>
           </goal>
           <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.0.0.1.1" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="columns_mat_sum">
            <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.0.0.1.1.0" expl="apply premises" proved="true">
            <proof prover="7"><result status="valid" time="0.25" steps="6811"/></proof>
            </goal>
            <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.0.0.1.1.1" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="set_constant_size">
             <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.0.0.1.1.1.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.0.0.1.1.1.0.0" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="1.79" steps="648760"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.0.0.1.1.1.1" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.0.0.1.1.1.1.0" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="1.80" steps="648960"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.0.0.1.1.2" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.0.0.1.1.2.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.77" steps="647827"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.0.0.1.2" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="rows_mat_sum">
            <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.0.0.1.2.0" expl="apply premises" proved="true">
            <proof prover="7"><result status="valid" time="0.27" steps="6811"/></proof>
            </goal>
            <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.0.0.1.2.1" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="set_constant_size">
             <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.0.0.1.2.1.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.0.0.1.2.1.0.0" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="1.93" steps="648760"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.0.0.1.2.1.1" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.0.0.1.2.1.1.0" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="1.87" steps="648960"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.0.0.1.2.2" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.0.0.1.2.2.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.73" steps="648644"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="assert_make_ket_l">
          <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="scalar_values">
            <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0" expl="apply premises" proved="true">
            <transf name="eliminate_definition" proved="true" >
             <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="get_ket&#39;def">
              <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="mat_sum_value">
               <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="ket_sum_l_value">
                <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="sum_scal_rev">
                  <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="apply" proved="true" arg1="sum_eq">
                   <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="compute_specified" proved="true" >
                    <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="scalar_values">
                      <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="get_ket_rev">
                       <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                       <transf name="rewrite" proved="true" arg1="get_ket_rev">
                        <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                        <proof prover="10"><result status="valid" time="1.27" steps="5692706"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="0.75" steps="575547"/></proof>
                </goal>
                <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="0.78" steps="575547"/></proof>
                 </goal>
                 <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.0.2.1" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.85" steps="643703"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="0.79" steps="575545"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="set_constant_size">
                <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.77" steps="647652"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.76" steps="647949"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
               <proof prover="7"><result status="valid" time="0.28" steps="6708"/></proof>
               </goal>
               <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="set_valid_index">
                <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.3.0" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="0.79" steps="575547"/></proof>
                 </goal>
                 <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.3.0.1" expl="apply premises" proved="true">
                 <transf name="replace" proved="true" arg1="(rows
    (mat_sum (n_bvs x)
     (fun (bvx:bitvec) -&gt;
       (scal @ a) *.. make_ket l (fun (j:int) -&gt; get ((f @ a) @ bvx) j 0))))" arg2="(power 2 l)">
                  <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.3.0.1.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.68" steps="643703"/></proof>
                  </goal>
                  <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.3.0.1.1" expl="equality hypothesis" proved="true">
                  <transf name="apply" proved="true" arg1="rows_mat_sum">
                   <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.3.0.1.1.0" expl="apply premises" proved="true">
                   <proof prover="7"><result status="valid" time="0.27" steps="6705"/></proof>
                   </goal>
                   <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.3.0.1.1.1" expl="apply premises" proved="true">
                   <transf name="apply" proved="true" arg1="set_constant_size">
                    <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.3.0.1.1.1.0" expl="apply premises" proved="true">
                    <transf name="compute_specified" proved="true" >
                     <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.3.0.1.1.1.0.0" expl="apply premises" proved="true">
                     <proof prover="8"><result status="valid" time="1.94" steps="647652"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.3.0.1.1.1.1" expl="apply premises" proved="true">
                    <transf name="compute_specified" proved="true" >
                     <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.3.0.1.1.1.1.0" expl="apply premises" proved="true">
                     <proof prover="8"><result status="valid" time="1.88" steps="647949"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.3.0.1.1.2" expl="apply premises" proved="true">
                   <transf name="compute_specified" proved="true" >
                    <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.3.0.1.1.2.0" expl="apply premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.3.0.1.1.2.0.0" expl="apply premises" proved="true">
                     <proof prover="10"><result status="valid" time="1.14" steps="5723626"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.3.1" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.3.1.0" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="0.80" steps="575554"/></proof>
                 </goal>
                 <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.0.0.0.0.0.3.1.1" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.76" steps="645787"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="ket_sum_bin_comp_l&#39;vc.6.0.1.2.0.0.1.0.1" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="0.78" steps="575905"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ket_sum_bin_comp_l&#39;vc.6.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.65" steps="532615"/></proof>
   </goal>
   <goal name="ket_sum_bin_comp_l&#39;vc.6.2" expl="rewrite premises" proved="true">
   <proof prover="7"><result status="valid" time="0.25" steps="6656"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_bin_comp&#39;vc" expl="VC for ket_sum_bin_comp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_bin_comp&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.48" steps="411353"/></proof>
  </goal>
  <goal name="ket_sum_bin_comp&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.49" steps="411356"/></proof>
  </goal>
  <goal name="ket_sum_bin_comp&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.47" steps="411359"/></proof>
  </goal>
  <goal name="ket_sum_bin_comp&#39;vc.3" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ket_sum_l (n_bvs y)
  (fun (bvy:bitvec) -&gt;
    ket_sum_l (n_bvs x) (fun (bvx:bitvec) -&gt; (f @ bvy) @ bvx) l)
  l)" arg2="(ket_sum_l (n_bvs y)
  (fun (bvy:bitvec) -&gt;
    ((fun (bv:bitvec) -&gt; c_one) @ bvy)
    *.. ket_sum_l (n_bvs x) (fun (bvx:bitvec) -&gt; (f @ bvy) @ bvx) l)
  l)">
   <goal name="ket_sum_bin_comp&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures">
    <goal name="ket_sum_bin_comp&#39;vc.3.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="ket_sum_eq">
     <goal name="ket_sum_bin_comp&#39;vc.3.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="0.65" steps="460793"/></proof>
     </goal>
     <goal name="ket_sum_bin_comp&#39;vc.3.0.0.1" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="0.51" steps="460791"/></proof>
     </goal>
     <goal name="ket_sum_bin_comp&#39;vc.3.0.0.2" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="2.41" steps="784797"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ket_sum_bin_comp&#39;vc.3.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="ket_sum_eq">
    <goal name="ket_sum_bin_comp&#39;vc.3.1.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.62" steps="460793"/></proof>
    </goal>
    <goal name="ket_sum_bin_comp&#39;vc.3.1.1" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.65" steps="460791"/></proof>
    </goal>
    <goal name="ket_sum_bin_comp&#39;vc.3.1.2" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="2.23" steps="785925"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_bin_comp_rev&#39;vc" expl="VC for ket_sum_bin_comp_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_bin_comp_rev&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.57" steps="411756"/></proof>
  </goal>
  <goal name="ket_sum_bin_comp_rev&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.59" steps="411759"/></proof>
  </goal>
  <goal name="ket_sum_bin_comp_rev&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.57" steps="411762"/></proof>
  </goal>
  <goal name="ket_sum_bin_comp_rev&#39;vc.3" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ket_sum_l (n_bvs y)
    (fun (bvy:bitvec) -&gt;
      ket_sum_l (n_bvs x) (fun (bvx:bitvec) -&gt; (f @ bvy) @ bvx) l)
    l)" arg2="( ket_sum_l (n_bvs y)
  (fun (bvy:bitvec) -&gt;
    ((fun (bv:bitvec) -&gt; c_one) @ bvy)
    *.. ket_sum_l (n_bvs x) (fun (bvx:bitvec) -&gt; (f @ bvy) @ bvx) l)
  l)">
   <goal name="ket_sum_bin_comp_rev&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures">
    <goal name="ket_sum_bin_comp_rev&#39;vc.3.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="ket_sum_eq">
     <goal name="ket_sum_bin_comp_rev&#39;vc.3.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="0.66" steps="461129"/></proof>
     </goal>
     <goal name="ket_sum_bin_comp_rev&#39;vc.3.0.0.1" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="0.61" steps="461127"/></proof>
     </goal>
     <goal name="ket_sum_bin_comp_rev&#39;vc.3.0.0.2" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="2.38" steps="785071"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ket_sum_bin_comp_rev&#39;vc.3.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="ket_sum_eq">
    <goal name="ket_sum_bin_comp_rev&#39;vc.3.1.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.64" steps="461129"/></proof>
    </goal>
    <goal name="ket_sum_bin_comp_rev&#39;vc.3.1.1" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.64" steps="461127"/></proof>
    </goal>
    <goal name="ket_sum_bin_comp_rev&#39;vc.3.1.2" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="2.75" steps="786205"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_bin_comp_rev_&#39;vc" expl="VC for ket_sum_bin_comp_rev_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_bin_comp_rev_&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.57" steps="381147"/></proof>
  </goal>
  <goal name="ket_sum_bin_comp_rev_&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.55" steps="381150"/></proof>
  </goal>
  <goal name="ket_sum_bin_comp_rev_&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.60" steps="381153"/></proof>
  </goal>
  <goal name="ket_sum_bin_comp_rev_&#39;vc.3" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(x+y)" arg2="(y+x)">
   <goal name="ket_sum_bin_comp_rev_&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="Ensures">
   </transf>
   </goal>
   <goal name="ket_sum_bin_comp_rev_&#39;vc.3.1" expl="equality hypothesis" proved="true">
   <proof prover="8"><result status="valid" time="0.68" steps="431691"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_bv_to_ints&#39;vc" expl="VC for ket_sum_bv_to_ints" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_bv_to_ints&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ket_sum_l_to_fset">
   <goal name="ket_sum_bv_to_ints&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
    <goal name="ket_sum_bv_to_ints&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.73" steps="488442"/></proof>
    </goal>
    <goal name="ket_sum_bv_to_ints&#39;vc.0.0.1" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.76" steps="488440"/></proof>
    </goal>
    <goal name="ket_sum_bv_to_ints&#39;vc.0.0.2" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.77" steps="488440"/></proof>
    </goal>
    <goal name="ket_sum_bv_to_ints&#39;vc.0.0.3" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="ket_sum_bv_to_ints&#39;vc.0.0.3.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ket_sum_bv_to_ints&#39;vc.0.0.3.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="1.45" steps="609188"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ket_sum_bv_to_ints&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.73" steps="488442"/></proof>
   </goal>
   <goal name="ket_sum_bv_to_ints&#39;vc.0.2" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.73" steps="488442"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_sum_rev&#39;vc" expl="VC for ket_sum_sum_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_sum_rev&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.91" steps="406646"/></proof>
  </goal>
  <goal name="ket_sum_sum_rev&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.57" steps="381787"/></proof>
  </goal>
  <goal name="ket_sum_sum_rev&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.58" steps="381790"/></proof>
  </goal>
  <goal name="ket_sum_sum_rev&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.67" steps="432214"/></proof>
  </goal>
  <goal name="ket_sum_sum_rev&#39;vc.4" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.99" steps="458245"/></proof>
  </goal>
  <goal name="ket_sum_sum_rev&#39;vc.5" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.64" steps="432228"/></proof>
  </goal>
  <goal name="ket_sum_sum_rev&#39;vc.6" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ket_sum_l (n_bvs l1) (fun (x:bitvec) -&gt; ket_sum_l (n_bvs l2) (f @ x) l) l)" arg2="(ket_sum_l (n_bvs l1)
  (fun (bvy:bitvec) -&gt;
    ket_sum_l (n_bvs l2) (fun (bvx:bitvec) -&gt; (f @ bvy) @ bvx) l)
  l)">
   <goal name="ket_sum_sum_rev&#39;vc.6.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures1">
    <goal name="ket_sum_sum_rev&#39;vc.6.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(ket_sum_l (n_bvs l2) (fun (y:bitvec) -&gt; ket_sum_l (n_bvs l1) (f @ y) l) l
)" arg2="(ket_sum_l (n_bvs l2)
  (fun (bvy:bitvec) -&gt;
    ket_sum_l (n_bvs l1) (fun (bvx:bitvec) -&gt; (f @ bvy) @ bvx) l)
  l)">
     <goal name="ket_sum_sum_rev&#39;vc.6.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures">
      <goal name="ket_sum_sum_rev&#39;vc.6.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H">
       <goal name="ket_sum_sum_rev&#39;vc.6.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="compute_specified" proved="true" >
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ket_sum_sum_rev&#39;vc.6.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="ket_sum_eq">
      <goal name="ket_sum_sum_rev&#39;vc.6.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="0.62" steps="432389"/></proof>
      </goal>
      <goal name="ket_sum_sum_rev&#39;vc.6.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="0.62" steps="432387"/></proof>
      </goal>
      <goal name="ket_sum_sum_rev&#39;vc.6.0.0.1.2" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="1.55" steps="549787"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ket_sum_sum_rev&#39;vc.6.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="ket_sum_eq">
    <goal name="ket_sum_sum_rev&#39;vc.6.1.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.64" steps="432389"/></proof>
    </goal>
    <goal name="ket_sum_sum_rev&#39;vc.6.1.1" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.64" steps="432387"/></proof>
    </goal>
    <goal name="ket_sum_sum_rev&#39;vc.6.1.2" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="1.59" steps="549771"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Bin_ket_proj" proved="true">
 <goal name="bin_proj&#39;vc" expl="VC for bin_proj" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bin_proj&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.53" steps="377737"/></proof>
  </goal>
  <goal name="bin_proj&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.56" steps="382925"/></proof>
  </goal>
  <goal name="bin_proj&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.55" steps="382959"/></proof>
  </goal>
  <goal name="bin_proj&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.55" steps="382965"/></proof>
  </goal>
  <goal name="bin_proj&#39;vc.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bin_proj&#39;vc.4.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.55" steps="382963"/></proof>
   </goal>
   <goal name="bin_proj&#39;vc.4.1" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.53" steps="382983"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="bin_proj&#39;vc.5" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.55" steps="447868"/></proof>
  </goal>
  <goal name="bin_proj&#39;vc.6" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.81" steps="552394"/></proof>
  </goal>
  <goal name="bin_proj&#39;vc.7" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.77" steps="552400"/></proof>
  </goal>
  <goal name="bin_proj&#39;vc.8" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.80" steps="550922"/></proof>
  </goal>
  <goal name="bin_proj&#39;vc.9" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.78" steps="550950"/></proof>
  </goal>
  <goal name="bin_proj&#39;vc.10" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.79" steps="550956"/></proof>
  </goal>
  <goal name="bin_proj&#39;vc.11" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bin_proj&#39;vc.11.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.81" steps="550954"/></proof>
   </goal>
   <goal name="bin_proj&#39;vc.11.1" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.81" steps="550974"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="bin_proj&#39;vc.12" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.79" steps="552506"/></proof>
  </goal>
  <goal name="bin_proj&#39;vc.13" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="bin_proj&#39;vc.13.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="bin_proj&#39;vc.13.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="bin_proj&#39;vc.13.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="2.03" steps="670530"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="bin_proj&#39;vc.13.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="bin_proj&#39;vc.13.1.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="bin_proj&#39;vc.13.1.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.98" steps="668502"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="bin_proj&#39;vc.14" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.44" steps="624699"/></proof>
  </goal>
  <goal name="bin_proj&#39;vc.15" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures3">
   <goal name="bin_proj&#39;vc.15.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_s_rows">
    <goal name="bin_proj&#39;vc.15.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="bin_proj&#39;vc.15.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="bin_proj&#39;vc.15.0.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="bin_proj&#39;vc.15.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.91" steps="671798"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="bin_proj&#39;vc.15.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="bin_proj&#39;vc.15.0.0.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="bin_proj&#39;vc.15.0.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.96" steps="671589"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="bin_proj&#39;vc.15.0.1" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="bin_proj&#39;vc.15.0.1.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="scalar_rows">
      <goal name="bin_proj&#39;vc.15.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="2.30" steps="675166"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="bin_proj&#39;vc.16" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures3">
   <goal name="bin_proj&#39;vc.16.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_s_columns">
    <goal name="bin_proj&#39;vc.16.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="bin_proj&#39;vc.16.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="bin_proj&#39;vc.16.0.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="bin_proj&#39;vc.16.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.94" steps="671775"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="bin_proj&#39;vc.16.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="bin_proj&#39;vc.16.0.0.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="bin_proj&#39;vc.16.0.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="2.01" steps="671529"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="bin_proj&#39;vc.16.0.1" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="bin_proj&#39;vc.16.0.1.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="scalar_columns">
      <goal name="bin_proj&#39;vc.16.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="1.93" steps="667395"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="bin_proj&#39;vc.17" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="bin_proj&#39;vc.17.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="bin_proj&#39;vc.17.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="mat_sum_eq">
     <goal name="bin_proj&#39;vc.17.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.52" steps="624170"/></proof>
     </goal>
     <goal name="bin_proj&#39;vc.17.0.0.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="bin_proj&#39;vc.17.0.0.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="bin_proj&#39;vc.17.0.0.1.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="bin_proj&#39;vc.17.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.97" steps="670223"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="bin_proj&#39;vc.17.0.0.1.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="bin_proj&#39;vc.17.0.0.1.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="bin_proj&#39;vc.17.0.0.1.1.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="2.02" steps="670002"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="bin_proj&#39;vc.17.0.0.2" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.90" steps="667235"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="bin_proj&#39;vc.18" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="result" arg2="(mat_sum (to_fset 0 (power 2 (ket_length x)))
  (fun (j:int) -&gt;
    ((fun (j1:int) -&gt;
       if (0 &lt;= j1 /\ j1 &lt; power 2 (ket_length x)) /\
          (int_to_bin j1 (ket_length x) @ k) = i
       then get x j1 0 else c_zero)
     @ j)
    *.. ket (ket_length x) j))">
   <goal name="bin_proj&#39;vc.18.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures12">
    <goal name="bin_proj&#39;vc.18.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="bin_proj&#39;vc.18.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="assert_make">
      <goal name="bin_proj&#39;vc.18.0.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="bin_proj&#39;vc.18.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="8"><result status="valid" time="1.99" steps="669666"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="bin_proj&#39;vc.18.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.92" steps="667525"/></proof>
      </goal>
      <goal name="bin_proj&#39;vc.18.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.93" steps="667494"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="bin_proj&#39;vc.18.1" expl="equality hypothesis" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures">
    <goal name="bin_proj&#39;vc.18.1.0" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="mat_sum_eq">
     <goal name="bin_proj&#39;vc.18.1.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.51" steps="625063"/></proof>
     </goal>
     <goal name="bin_proj&#39;vc.18.1.0.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="bin_proj&#39;vc.18.1.0.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="bin_proj&#39;vc.18.1.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="2.03" steps="673475"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="bin_proj&#39;vc.18.1.0.1.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="bin_proj&#39;vc.18.1.0.1.1.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.71" steps="673181"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="bin_proj&#39;vc.18.1.0.2" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="bin_proj&#39;vc.18.1.0.2.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="1.70" steps="671017"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="bin_proj&#39;vc.19" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="2.00" steps="666788"/></proof>
  </goal>
  <goal name="bin_proj&#39;vc.20" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="2.01" steps="667137"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="proj_decomp&#39;vc" expl="VC for proj_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="proj_decomp&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.55" steps="378843"/></proof>
  </goal>
  <goal name="proj_decomp&#39;vc.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="proj_decomp&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.56" steps="378846"/></proof>
   </goal>
   <goal name="proj_decomp&#39;vc.1.1" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.57" steps="378861"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="proj_decomp&#39;vc.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="proj_decomp&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.55" steps="378867"/></proof>
   </goal>
   <goal name="proj_decomp&#39;vc.2.1" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.54" steps="378864"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="proj_decomp&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.70" steps="473584"/></proof>
  </goal>
  <goal name="proj_decomp&#39;vc.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="proj_decomp&#39;vc.4.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.71" steps="473587"/></proof>
   </goal>
   <goal name="proj_decomp&#39;vc.4.1" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.72" steps="473602"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="proj_decomp&#39;vc.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="proj_decomp&#39;vc.5.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.71" steps="473603"/></proof>
   </goal>
   <goal name="proj_decomp&#39;vc.5.1" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.68" steps="473605"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="proj_decomp&#39;vc.6" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.09" steps="501142"/></proof>
  </goal>
  <goal name="proj_decomp&#39;vc.7" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.74" steps="483015"/></proof>
  </goal>
  <goal name="proj_decomp&#39;vc.8" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.15" steps="501886"/></proof>
  </goal>
  <goal name="proj_decomp&#39;vc.9" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.14" steps="501805"/></proof>
  </goal>
  <goal name="proj_decomp&#39;vc.10" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="proj_decomp&#39;vc.10.0" expl="precondition" proved="true">
   <transf name="case" proved="true" arg1="(int_to_bin i (ket_length x) k = 0)">
    <goal name="proj_decomp&#39;vc.10.0.0" expl="true case (precondition)" proved="true">
    <transf name="replace" proved="true" arg1="j" arg2="0">
     <goal name="proj_decomp&#39;vc.10.0.0.0" expl="true case (precondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures3">
      <goal name="proj_decomp&#39;vc.10.0.0.0.0" expl="true case (precondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="Ensures9">
       <goal name="proj_decomp&#39;vc.10.0.0.0.0.0" expl="true case (precondition)" proved="true">
       <proof prover="8"><result status="valid" time="1.21" steps="501959"/></proof>
       </goal>
       <goal name="proj_decomp&#39;vc.10.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="1.54" steps="546174"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="proj_decomp&#39;vc.10.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.31" steps="546188"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="proj_decomp&#39;vc.10.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="8"><result status="valid" time="1.33" steps="545520"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="proj_decomp&#39;vc.10.0.1" expl="false case (precondition)" proved="true">
    <transf name="assert" proved="true" arg1="(int_to_bin i (ket_length x) k = 1)">
     <goal name="proj_decomp&#39;vc.10.0.1.0" expl="asserted formula" proved="true">
     <proof prover="8"><result status="valid" time="1.90" steps="552401"/></proof>
     </goal>
     <goal name="proj_decomp&#39;vc.10.0.1.1" expl="false case (precondition)" proved="true">
     <transf name="replace" proved="true" arg1="j" arg2="0">
      <goal name="proj_decomp&#39;vc.10.0.1.1.0" expl="false case (precondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="Ensures3">
       <goal name="proj_decomp&#39;vc.10.0.1.1.0.0" expl="false case (precondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="Ensures9">
        <goal name="proj_decomp&#39;vc.10.0.1.1.0.0.0" expl="false case (precondition)" proved="true">
        <proof prover="8"><result status="valid" time="1.20" steps="501971"/></proof>
        </goal>
        <goal name="proj_decomp&#39;vc.10.0.1.1.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="1.49" steps="546204"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="proj_decomp&#39;vc.10.0.1.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="1.54" steps="546218"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="proj_decomp&#39;vc.10.0.1.1.1" expl="equality hypothesis" proved="true">
      <proof prover="8"><result status="valid" time="1.52" steps="545534"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="proj_decomp&#39;vc.11" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.68" steps="473996"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Bv_to_ket" proved="true">
 <goal name="ket_to_bv&#39;vc" expl="VC for ket_to_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_to_bv&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.94" steps="406652"/></proof>
  </goal>
  <goal name="ket_to_bv&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.57" steps="385591"/></proof>
  </goal>
  <goal name="ket_to_bv&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.55" steps="384270"/></proof>
  </goal>
  <goal name="ket_to_bv&#39;vc.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ket_to_bv&#39;vc.3.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.57" steps="384273"/></proof>
   </goal>
   <goal name="ket_to_bv&#39;vc.3.1" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.55" steps="384275"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_to_bv&#39;vc.4" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.11" steps="479739"/></proof>
  </goal>
  <goal name="ket_to_bv&#39;vc.5" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.64" steps="452294"/></proof>
  </goal>
  <goal name="ket_to_bv&#39;vc.6" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.66" steps="452412"/></proof>
  </goal>
  <goal name="ket_to_bv&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.49" steps="553319"/></proof>
  </goal>
  <goal name="ket_to_bv&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.72" steps="482385"/></proof>
  </goal>
  <goal name="ket_to_bv&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.72" steps="482388"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ket_to_bv_length&#39;vc" expl="VC for ket_to_bv_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_to_bv_length&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.92" steps="406906"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_ket&#39;vc" expl="VC for bv_to_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_to_ket&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.95" steps="435141"/></proof>
  </goal>
  <goal name="bv_to_ket&#39;vc.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bv_to_ket&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.61" steps="409773"/></proof>
   </goal>
   <goal name="bv_to_ket&#39;vc.1.1" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="1.23" steps="474476"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="bv_to_ket&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.27" steps="475816"/></proof>
  </goal>
  <goal name="bv_to_ket&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.59" steps="412905"/></proof>
  </goal>
  <goal name="bv_to_ket&#39;vc.4" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.44" steps="481962"/></proof>
  </goal>
  <goal name="bv_to_ket&#39;vc.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bv_to_ket&#39;vc.5.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.62" steps="412919"/></proof>
   </goal>
   <goal name="bv_to_ket&#39;vc.5.1" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="1.34" steps="482085"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="bv_to_ket&#39;vc.6" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.35" steps="483273"/></proof>
  </goal>
  <goal name="bv_to_ket&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.33" steps="482966"/></proof>
  </goal>
  <goal name="bv_to_ket&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.35" steps="483584"/></proof>
  </goal>
  <goal name="bv_to_ket&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.07" steps="439756"/></proof>
  </goal>
  <goal name="bv_to_ket&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.60" steps="413369"/></proof>
  </goal>
  <goal name="bv_to_ket&#39;vc.11" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.61" steps="413372"/></proof>
  </goal>
  <goal name="bv_to_ket&#39;vc.12" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="bin_to_ket&#39;def">
   <goal name="bv_to_ket&#39;vc.12.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="bin_to_int&#39;def">
    <goal name="bv_to_ket&#39;vc.12.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(make_bv (getbv bv) (length bv))" arg2="bv">
     <goal name="bv_to_ket&#39;vc.12.0.0.0" expl="postcondition" proved="true">
     <proof prover="8"><result status="valid" time="0.61" steps="413373"/></proof>
     </goal>
     <goal name="bv_to_ket&#39;vc.12.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="set_equal_bv">
      <goal name="bv_to_ket&#39;vc.12.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="1.08" steps="441142"/></proof>
      </goal>
      <goal name="bv_to_ket&#39;vc.12.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="1.05" steps="441301"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="bv_to_ket&#39;vc.12.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.08" steps="483720"/></proof>
    </goal>
    <goal name="bv_to_ket&#39;vc.12.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.10" steps="483944"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="bv_to_ket&#39;vc.12.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="1.35" steps="483720"/></proof>
   </goal>
   <goal name="bv_to_ket&#39;vc.12.2" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="1.07" steps="439757"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_to_bv_ket_length&#39;vc" expl="VC for ket_to_bv_ket_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_to_bv_ket_length&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.29" steps="443380"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="is_a_ket_l_bv_to_ket&#39;vc" expl="VC for is_a_ket_l_bv_to_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="is_a_ket_l_bv_to_ket&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.01" steps="407179"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="is_a_ket_l_bv_to_ket_&#39;vc" expl="VC for is_a_ket_l_bv_to_ket_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="is_a_ket_l_bv_to_ket_&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="6.48" steps="1858503"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bin_to_ket_to_bv_to_ket&#39;vc" expl="VC for bin_to_ket_to_bv_to_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bin_to_ket_to_bv_to_ket&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="bin_to_ket_to_bv_to_ket&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="bin_to_ket&#39;def">
    <goal name="bin_to_ket_to_bv_to_ket&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="bv_to_ket&#39;def">
     <goal name="bin_to_ket_to_bv_to_ket&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="ket_eq">
      <goal name="bin_to_ket_to_bv_to_ket&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="0.59" steps="410048"/></proof>
      </goal>
      <goal name="bin_to_ket_to_bv_to_ket&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="5.50" steps="1632717"/></proof>
      </goal>
      <goal name="bin_to_ket_to_bv_to_ket&#39;vc.0.0.0.0.2" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="bin_to_int&#39;def">
       <goal name="bin_to_ket_to_bv_to_ket&#39;vc.0.0.0.0.2.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="0.55" steps="410046"/></proof>
       </goal>
       <goal name="bin_to_ket_to_bv_to_ket&#39;vc.0.0.0.0.2.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.53" steps="410048"/></proof>
       </goal>
       <goal name="bin_to_ket_to_bv_to_ket&#39;vc.0.0.0.0.2.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.90" steps="435820"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="bin_to_ket_to_bv_to_ket&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.60" steps="410055"/></proof>
    </goal>
    <goal name="bin_to_ket_to_bv_to_ket&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.60" steps="410048"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bin_to_ket_to_bv_to_ket_abs&#39;vc" expl="VC for bin_to_ket_to_bv_to_ket_abs" proved="true">
 <proof prover="8"><result status="valid" time="0.96" steps="435745"/></proof>
 </goal>
 <goal name="ket_to_int_to_bv_to_ket&#39;vc" expl="VC for ket_to_int_to_bv_to_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_to_int_to_bv_to_ket&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.91" steps="4473013"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ket_to_bv_ket&#39;vc" expl="VC for ket_to_bv_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_to_bv_ket&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.25" steps="442588"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_ket_length&#39;vc" expl="VC for bv_to_ket_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_to_ket_length&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.41" steps="448420"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_ket_bv_to_ket_length&#39;vc" expl="VC for get_ket_bv_to_ket_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_ket_bv_to_ket_length&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.52"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="is_a_ket_l_bvs&#39;vc" expl="VC for is_a_ket_l_bvs" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="is_a_ket_l_bvs&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="n" arg2="(length e)">
   <goal name="is_a_ket_l_bvs&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.15" steps="477375"/></proof>
   </goal>
   <goal name="is_a_ket_l_bvs&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <proof prover="7"><result status="valid" time="0.23" steps="6506"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="is_a_ket_l_scal_bvs&#39;vc" expl="VC for is_a_ket_l_scal_bvs" proved="true">
 <proof prover="7"><result status="valid" time="0.25" steps="6527"/></proof>
 </goal>
 <goal name="ket_to_bv_concat&#39;vc" expl="VC for ket_to_bv_concat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_to_bv_concat&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.34" steps="12493"/></proof>
  </goal>
  <goal name="ket_to_bv_concat&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.72" steps="422326"/></proof>
  </goal>
  <goal name="ket_to_bv_concat&#39;vc.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.57"/></proof>
  </goal>
  <goal name="ket_to_bv_concat&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.59" steps="413707"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_ket_concat_rev&#39;vc" expl="VC for bv_to_ket_concat_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_to_ket_concat_rev&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.95" steps="408035"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_ket_kronecker&#39;vc" expl="VC for bv_to_ket_kronecker" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_to_ket_kronecker&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bv_to_ket_kronecker&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.65" steps="411261"/></proof>
   </goal>
   <goal name="bv_to_ket_kronecker&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.56" steps="411261"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="bv_to_ket_kronecker&#39;vc.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bv_to_ket_kronecker&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="0.65" steps="411267"/></proof>
   </goal>
   <goal name="bv_to_ket_kronecker&#39;vc.1.1" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="1.17" steps="476288"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="bv_to_ket_kronecker&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.08" steps="438246"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_ket_kronecker_&#39;vc" expl="VC for bv_to_ket_kronecker_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_to_ket_kronecker_&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.55" steps="382334"/></proof>
  </goal>
  <goal name="bv_to_ket_kronecker_&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.19" steps="445178"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_ket_to_bv&#39;vc" expl="VC for bv_to_ket_to_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_to_ket_to_bv&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.54" steps="446252"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ket_to_bv_to_ket&#39;vc" expl="VC for ket_to_bv_to_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_to_bv_to_ket&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="ket_to_bv_to_ket&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="ket_to_bv_to_ket&#39;vc.0.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="bv_to_ket&#39;spec2">
     <goal name="ket_to_bv_to_ket&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="ket_to_bv&#39;spec1">
      <goal name="ket_to_bv_to_ket&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="1.40" steps="509664"/></proof>
      </goal>
      <goal name="ket_to_bv_to_ket&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.65" steps="440791"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ket_to_bv_to_ket&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.23" steps="447795"/></proof>
   </goal>
   <goal name="ket_to_bv_to_ket&#39;vc.0.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="ket_to_bv_to_ket&#39;vc.0.2.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="1.23" steps="445820"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_ket_eq&#39;vc" expl="VC for bv_to_ket_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_to_ket_eq&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.33" steps="476018"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ket_decomp_&#39;vc" expl="VC for ket_decomp_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_decomp_&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.54" steps="382753"/></proof>
  </goal>
  <goal name="ket_decomp_&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.57" steps="382756"/></proof>
  </goal>
  <goal name="ket_decomp_&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.58" steps="382759"/></proof>
  </goal>
  <goal name="ket_decomp_&#39;vc.3" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ket_sum_l (n_bvs n)
    (fun (bvx:bitvec) -&gt; get_ket m (bv_to_int bvx) *.. bv_to_ket bvx) n)" arg2="(ket_sum_l (n_bvs n)
    (fun (bvx:bitvec) -&gt; get m (bv_to_int bvx) 0 *.. ket n (bv_to_int bvx)) n)">
   <goal name="ket_decomp_&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="Ensures">
   </transf>
   </goal>
   <goal name="ket_decomp_&#39;vc.3.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="ket_sum_eq">
    <goal name="ket_decomp_&#39;vc.3.1.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.65" steps="432768"/></proof>
    </goal>
    <goal name="ket_decomp_&#39;vc.3.1.1" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.62" steps="432766"/></proof>
    </goal>
    <goal name="ket_decomp_&#39;vc.3.1.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="ket_decomp_&#39;vc.3.1.2.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="1.17" steps="4821806"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_bv_to_int_to_bv_to_ket&#39;vc" expl="VC for ket_bv_to_int_to_bv_to_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_bv_to_int_to_bv_to_ket&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.97" steps="408732"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ket_to_bv_kronecker&#39;vc" expl="VC for ket_to_bv_kronecker" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_to_bv_kronecker&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.46" steps="448191"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ket_decomp_bv_ket&#39;vc" expl="VC for ket_decomp_bv_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_decomp_bv_ket&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.55" steps="383198"/></proof>
  </goal>
  <goal name="ket_decomp_bv_ket&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.55" steps="383201"/></proof>
  </goal>
  <goal name="ket_decomp_bv_ket&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.56" steps="383204"/></proof>
  </goal>
  <goal name="ket_decomp_bv_ket&#39;vc.3" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="ket_decomp_bv_ket&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="ket_sum_eq">
    <goal name="ket_decomp_bv_ket&#39;vc.3.0.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.65" steps="433180"/></proof>
    </goal>
    <goal name="ket_decomp_bv_ket&#39;vc.3.0.1" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.64" steps="433178"/></proof>
    </goal>
    <goal name="ket_decomp_bv_ket&#39;vc.3.0.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="ket_decomp_bv_ket&#39;vc.3.0.2.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="ket_decomp_bv_ket&#39;vc.3.0.2.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(ket_sum_l (n_bvs n)
      (fun (bvx:bitvec) -&gt; get m (bv_to_int bvx) 0 *.. ket n (bv_to_int bvx))
      n)" arg2="m">
       <goal name="ket_decomp_bv_ket&#39;vc.3.0.2.0.0.0" expl="apply premises" proved="true">
       <transf name="eliminate_definition" proved="true" >
        <goal name="ket_decomp_bv_ket&#39;vc.3.0.2.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.19" steps="515728"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="ket_decomp_bv_ket&#39;vc.3.0.2.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="goal_comm">
        <goal name="ket_decomp_bv_ket&#39;vc.3.0.2.0.0.1.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.44" steps="550935"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_zero&#39;vc" expl="VC for ket_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_zero&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.20" steps="442886"/></proof>
  </goal>
  <goal name="ket_zero&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="5.08" steps="1732412"/></proof>
  </goal>
  <goal name="ket_zero&#39;vc.2" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_bv">
   <goal name="ket_zero&#39;vc.2.0" expl="apply premises" proved="true">
   <transf name="replace" proved="true" arg1="(length (ket_to_bv (ket n 0)))" arg2="n">
    <goal name="ket_zero&#39;vc.2.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="make_bv_length">
     <goal name="ket_zero&#39;vc.2.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="0.55" steps="383477"/></proof>
     </goal>
     <goal name="ket_zero&#39;vc.2.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.01" steps="439681"/></proof>
     </goal>
     <goal name="ket_zero&#39;vc.2.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.56" steps="383479"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="ket_zero&#39;vc.2.0.1" expl="equality hypothesis" proved="true">
    <proof prover="8"><result status="valid" time="1.20" steps="444778"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="ket_zero&#39;vc.2.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="ket_zero&#39;vc.2.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_to_bv&#39;def">
     <goal name="ket_zero&#39;vc.2.1.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="int_to_bv&#39;def">
      <goal name="ket_zero&#39;vc.2.1.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
       <goal name="ket_zero&#39;vc.2.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
        <goal name="ket_zero&#39;vc.2.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="ket_zero&#39;vc.2.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="eliminate_if" proved="true" >
          <goal name="ket_zero&#39;vc.2.1.0.0.0.0.0.0.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="ket_zero&#39;vc.2.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="(ket_length (ket n 0) )" arg2="n">
            <goal name="ket_zero&#39;vc.2.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="0.56"/></proof>
            </goal>
            <goal name="ket_zero&#39;vc.2.1.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
            <proof prover="8"><result status="valid" time="0.94" steps="412903"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="ket_zero&#39;vc.2.1.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="0.58" steps="387695"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="ket_zero&#39;vc.2.1.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="1.05" steps="439729"/></proof>
        </goal>
        <goal name="ket_zero&#39;vc.2.1.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="1.27" steps="444819"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="ket_zero&#39;vc.2.1.0.0.0.1" expl="rewrite premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="ket_zero&#39;vc.2.1.0.0.0.1.0" expl="rewrite premises" proved="true">
        <transf name="eliminate_if" proved="true" >
         <goal name="ket_zero&#39;vc.2.1.0.0.0.1.0.0" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="ket_zero&#39;vc.2.1.0.0.0.1.0.0.0" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="0.29" steps="7837"/></proof>
          </goal>
          <goal name="ket_zero&#39;vc.2.1.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="0.57" steps="387722"/></proof>
          </goal>
          <goal name="ket_zero&#39;vc.2.1.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
          <transf name="replace" proved="true" arg1="(ket_length (ket n 0) )" arg2="n">
           <goal name="ket_zero&#39;vc.2.1.0.0.0.1.0.0.2.0" expl="rewrite premises" proved="true">
           <proof prover="4"><result status="valid" time="0.42"/></proof>
           </goal>
           <goal name="ket_zero&#39;vc.2.1.0.0.0.1.0.0.2.1" expl="equality hypothesis" proved="true">
           <proof prover="8"><result status="valid" time="0.96" steps="412928"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="ket_zero&#39;vc.2.1.0.0.0.1.0.0.3" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="0.55" steps="387724"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="ket_zero&#39;vc.2.1.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.97" steps="410345"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="ket_zero&#39;vc.2.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.01" steps="410310"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="ket_zero&#39;vc.2.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.58" steps="383512"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ket_zero&#39;vc.3" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ket_to_bv&#39;def">
   <goal name="ket_zero&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ket_length (ket n 0))" arg2="n">
    <goal name="ket_zero&#39;vc.3.0.0" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="5.48" steps="1786141"/></proof>
    </goal>
    <goal name="ket_zero&#39;vc.3.0.1" expl="equality hypothesis" proved="true">
    <proof prover="8"><result status="valid" time="1.03" steps="438369"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="ket_zero&#39;vc.3.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.61" steps="412489"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="uniform_ket_norm_l&#39;vc" expl="VC for uniform_ket_norm_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="uniform_ket_norm_l&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ind_sum_ket_norm_l">
   <goal name="uniform_ket_norm_l&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ind_sum (fun (k:int) -&gt; modulus (get x k 0) *. modulus (get x k 0)) 0
  (power 2 n))" arg2="(ind_sum (fun (k:int) -&gt; pow_inv_2 n) 0
  (power 2 n))">
    <goal name="uniform_ket_norm_l&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(ind_sum (fun (k:int) -&gt; pow_inv_2 n) 0 (power 2 n))" arg2="c_one">
     <goal name="uniform_ket_norm_l&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="8"><result status="valid" time="0.75" steps="514093"/></proof>
     </goal>
     <goal name="uniform_ket_norm_l&#39;vc.0.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="replace" proved="true" arg1="c_one" arg2="(pow_inv_2 n *. i_to_c (power 2 n))">
      <goal name="uniform_ket_norm_l&#39;vc.0.0.0.1.0" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="ind_sum_constant_from_z">
       <goal name="uniform_ket_norm_l&#39;vc.0.0.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.68" steps="588669"/></proof>
       </goal>
       <goal name="uniform_ket_norm_l&#39;vc.0.0.0.1.0.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="uniform_ket_norm_l&#39;vc.0.0.0.1.0.1.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="uniform_ket_norm_l&#39;vc.0.0.0.1.1" expl="equality hypothesis" proved="true">
      <proof prover="8"><result status="valid" time="1.74" steps="588840"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="uniform_ket_norm_l&#39;vc.0.0.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="ind_sum_eq">
     <goal name="uniform_ket_norm_l&#39;vc.0.0.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="uniform_ket_norm_l&#39;vc.0.0.1.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="uniform_ket_norm_l&#39;vc.0.0.1.0.0.0" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(modulus(get x k 0))" arg2="(pow_inv_sqrt_2 n)">
        <goal name="uniform_ket_norm_l&#39;vc.0.0.1.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.69" steps="588294"/></proof>
        </goal>
        <goal name="uniform_ket_norm_l&#39;vc.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="rewrite" proved="true" arg1="Requires">
         <goal name="uniform_ket_norm_l&#39;vc.0.0.1.0.0.0.1.0" expl="equality hypothesis" proved="true">
         <transf name="rewrite" proved="true" arg1="scalar_values">
          <goal name="uniform_ket_norm_l&#39;vc.0.0.1.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
          <transf name="rewrite" proved="true" arg1="mult_modulus">
           <goal name="uniform_ket_norm_l&#39;vc.0.0.1.0.0.0.1.0.0.0" expl="equality hypothesis" proved="true">
           <transf name="rewrite" proved="true" arg1="modulus_real_pos">
            <goal name="uniform_ket_norm_l&#39;vc.0.0.1.0.0.0.1.0.0.0.0" expl="equality hypothesis" proved="true">
            <transf name="apply" proved="true" arg1="mult_one_t">
             <goal name="uniform_ket_norm_l&#39;vc.0.0.1.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="get_ket_rev">
              <goal name="uniform_ket_norm_l&#39;vc.0.0.1.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
               <goal name="uniform_ket_norm_l&#39;vc.0.0.1.0.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="compute_specified" proved="true" >
                <goal name="uniform_ket_norm_l&#39;vc.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="instantiate" proved="true" arg1="sum_null_but_maybe_one_elt" arg2="(fun (e:bitvec) -&gt; get_ket ((f @ e) *.. bv_to_ket e) k),(n_bvs n),(int_to_bv k n)">
                 <goal name="uniform_ket_norm_l&#39;vc.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="Hinst">
                  <goal name="uniform_ket_norm_l&#39;vc.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="compute_specified" proved="true" >
                   <goal name="uniform_ket_norm_l&#39;vc.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="get_ket_scalar">
                    <goal name="uniform_ket_norm_l&#39;vc.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="mult_modulus">
                     <goal name="uniform_ket_norm_l&#39;vc.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="one_mult_t">
                      <goal name="uniform_ket_norm_l&#39;vc.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                      <proof prover="8"><result status="valid" time="1.67" steps="593317"/></proof>
                      </goal>
                      <goal name="uniform_ket_norm_l&#39;vc.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                      <proof prover="8"><result status="valid" time="2.27" steps="597360"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="uniform_ket_norm_l&#39;vc.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.72" steps="589650"/></proof>
                  </goal>
                  <goal name="uniform_ket_norm_l&#39;vc.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                  <transf name="compute_specified" proved="true" >
                   <goal name="uniform_ket_norm_l&#39;vc.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="uniform_ket_norm_l&#39;vc.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="get_ket_scalar">
                     <goal name="uniform_ket_norm_l&#39;vc.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.2.0.0.0" expl="rewrite premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="mult_zero_t">
                      <goal name="uniform_ket_norm_l&#39;vc.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.2.0.0.0.0" expl="rewrite premises" proved="true">
                      <proof prover="8"><result status="valid" time="0.74" steps="514499"/></proof>
                      </goal>
                      <goal name="uniform_ket_norm_l&#39;vc.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
                      <transf name="eliminate_definition" proved="true" >
                       <goal name="uniform_ket_norm_l&#39;vc.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.2.0.0.0.1.0" expl="rewrite premises" proved="true">
                       <proof prover="8"><result status="valid" time="1.51" steps="591403"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="uniform_ket_norm_l&#39;vc.0.0.1.0.0.0.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="1.66" steps="587011"/></proof>
               </goal>
               <goal name="uniform_ket_norm_l&#39;vc.0.0.1.0.0.0.1.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="0.82" steps="514134"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="uniform_ket_norm_l&#39;vc.0.0.1.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="1.68" steps="587630"/></proof>
            </goal>
            <goal name="uniform_ket_norm_l&#39;vc.0.0.1.0.0.0.1.0.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="1.69" steps="587784"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="uniform_ket_norm_l&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.78" steps="514093"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_l_diag&#39;vc" expl="VC for ket_sum_l_diag" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_l_diag&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.58" steps="465752"/></proof>
  </goal>
  <goal name="ket_sum_l_diag&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.71" steps="525193"/></proof>
  </goal>
  <goal name="ket_sum_l_diag&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.81" steps="534995"/></proof>
  </goal>
  <goal name="ket_sum_l_diag&#39;vc.3" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures4">
   <goal name="ket_sum_l_diag&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="ket_sum_l_diag&#39;vc.3.0.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="sum_null_but_maybe_one_elt" arg2="(fun e -&gt; get_ket ((f @ e) *.. bv_to_ket e) i),(n_bvs l),(int_to_bv i l)
">
     <goal name="ket_sum_l_diag&#39;vc.3.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
      <goal name="ket_sum_l_diag&#39;vc.3.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="Hinst">
       <goal name="ket_sum_l_diag&#39;vc.3.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="scalar_ket_value">
        <goal name="ket_sum_l_diag&#39;vc.3.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="get_ket_bv_to_ket_length">
         <goal name="ket_sum_l_diag&#39;vc.3.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="eliminate_if" proved="true" >
          <goal name="ket_sum_l_diag&#39;vc.3.0.0.0.0.0.0.0.0" expl="VC for ket_sum_l_diag" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="ket_sum_l_diag&#39;vc.3.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <proof prover="8"><result status="valid" time="1.37" steps="570942"/></proof>
           </goal>
           <goal name="ket_sum_l_diag&#39;vc.3.0.0.0.0.0.0.0.0.1" expl="postcondition" proved="true">
           <proof prover="8"><result status="valid" time="1.80" steps="621041"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="ket_sum_l_diag&#39;vc.3.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="ket_sum_l_diag&#39;vc.3.0.0.0.0.0.0.1.0" proved="true">
          <proof prover="8"><result status="valid" time="0.81" steps="535261"/></proof>
          </goal>
          <goal name="ket_sum_l_diag&#39;vc.3.0.0.0.0.0.0.1.1" proved="true">
          <proof prover="8"><result status="valid" time="1.55" steps="618799"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="ket_sum_l_diag&#39;vc.3.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="1.84" steps="615592"/></proof>
       </goal>
       <goal name="ket_sum_l_diag&#39;vc.3.0.0.0.0.2" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="ket_sum_l_diag&#39;vc.3.0.0.0.0.2.0" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="scalar_ket_value">
         <goal name="ket_sum_l_diag&#39;vc.3.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
         <transf name="rewrite" proved="true" arg1="get_ket_bv_to_ket_length">
          <goal name="ket_sum_l_diag&#39;vc.3.0.0.0.0.2.0.0.0" expl="rewrite premises" proved="true">
          <transf name="eliminate_if" proved="true" >
           <goal name="ket_sum_l_diag&#39;vc.3.0.0.0.0.2.0.0.0.0" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="ket_sum_l_diag&#39;vc.3.0.0.0.0.2.0.0.0.0.0" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="1.55" steps="622897"/></proof>
            </goal>
            <goal name="ket_sum_l_diag&#39;vc.3.0.0.0.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="1.36" steps="571028"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="ket_sum_l_diag&#39;vc.3.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="ket_sum_l_diag&#39;vc.3.0.0.0.0.2.0.0.1.0" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="0.79" steps="535288"/></proof>
           </goal>
           <goal name="ket_sum_l_diag&#39;vc.3.0.0.0.0.2.0.0.1.1" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="(length k)" arg2="l">
            <goal name="ket_sum_l_diag&#39;vc.3.0.0.0.0.2.0.0.1.1.0" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="0.81" steps="535303"/></proof>
            </goal>
            <goal name="ket_sum_l_diag&#39;vc.3.0.0.0.0.2.0.0.1.1.1" expl="equality hypothesis" proved="true">
            <proof prover="8"><result status="valid" time="1.36" steps="566311"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ket_sum_l_diag&#39;vc.3.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="1.76" steps="613773"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_of_scalars&#39;vc" expl="VC for ket_sum_of_scalars" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_of_scalars&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.41" steps="507967"/></proof>
  </goal>
  <goal name="ket_sum_of_scalars&#39;vc.1" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ket_sum_l (n_bvs n) (fun (x:bitvec) -&gt; (f @ x) *.. bv_to_ket x) n)" arg2="(ket_sum_l_diag f n)">
   <goal name="ket_sum_of_scalars&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.49" steps="543377"/></proof>
   </goal>
   <goal name="ket_sum_of_scalars&#39;vc.1.1" expl="equality hypothesis" proved="true">
   <transf name="rewrite" proved="true" arg1="ket_sum_l_diag&#39;def">
    <goal name="ket_sum_of_scalars&#39;vc.1.1.0" expl="equality hypothesis" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
    <goal name="ket_sum_of_scalars&#39;vc.1.1.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.66" steps="439791"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="get_ket_sum&#39;vc" expl="VC for get_ket_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_ket_sum&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.61" steps="394923"/></proof>
  </goal>
  <goal name="get_ket_sum&#39;vc.1" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="get_ket_sum&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="get_ket&#39;def">
    <goal name="get_ket_sum&#39;vc.1.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="Ensures">
     <goal name="get_ket_sum&#39;vc.1.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="0.70" steps="476111"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="get_ket_scalar_zero&#39;vc" expl="VC for get_ket_scalar_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_ket_scalar_zero&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.58" steps="396599"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_sum_complex&#39;vc" expl="VC for ket_sum_sum_complex" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_sum_complex&#39;vc.0" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="1.55" steps="549520"/></proof>
  </goal>
  <goal name="ket_sum_sum_complex&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="8"><result status="valid" time="1.31" steps="551896"/></proof>
  </goal>
  <goal name="ket_sum_sum_complex&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.69" steps="479019"/></proof>
  </goal>
  <goal name="ket_sum_sum_complex&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.55" steps="553716"/></proof>
  </goal>
  <goal name="ket_sum_sum_complex&#39;vc.4" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.16" steps="509772"/></proof>
  </goal>
  <goal name="ket_sum_sum_complex&#39;vc.5" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.78" steps="558305"/></proof>
  </goal>
  <goal name="ket_sum_sum_complex&#39;vc.6" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.78" steps="509116"/></proof>
  </goal>
  <goal name="ket_sum_sum_complex&#39;vc.7" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.66" steps="581073"/></proof>
  </goal>
  <goal name="ket_sum_sum_complex&#39;vc.8" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.31" steps="538578"/></proof>
  </goal>
  <goal name="ket_sum_sum_complex&#39;vc.9" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="ket_sum_sum_complex&#39;vc.9.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="ket_sum_sum_complex&#39;vc.9.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_l&#39;def2">
     <goal name="ket_sum_sum_complex&#39;vc.9.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="set_equal_ket_l">
      <goal name="ket_sum_sum_complex&#39;vc.9.0.0.0.0" expl="apply premises" proved="true">
      <transf name="exists" proved="true" arg1="l">
       <goal name="ket_sum_sum_complex&#39;vc.9.0.0.0.0.0" proved="true">
       <proof prover="8"><result status="valid" time="2.01" steps="708206"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="ket_sum_sum_complex&#39;vc.9.0.0.0.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="ket_sum_sum_complex&#39;vc.9.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
        <goal name="ket_sum_sum_complex&#39;vc.9.0.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="sum_null_">
         <goal name="ket_sum_sum_complex&#39;vc.9.0.0.0.1.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="assert_make_ket_l">
          <goal name="ket_sum_sum_complex&#39;vc.9.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.54" steps="631273"/></proof>
          </goal>
          <goal name="ket_sum_sum_complex&#39;vc.9.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="0.92" steps="598036"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="ket_sum_sum_complex&#39;vc.9.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="ket_sum_sum_complex&#39;vc.9.0.0.0.1.0.0.1.0" expl="rewrite premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="ket_sum_sum_complex&#39;vc.9.0.0.0.1.0.0.1.0.0" expl="rewrite premises" proved="true">
           <transf name="rewrite" proved="true" arg1="scalar_ket_value">
            <goal name="ket_sum_sum_complex&#39;vc.9.0.0.0.1.0.0.1.0.0.0" expl="rewrite premises" proved="true">
            <transf name="rewrite" proved="true" arg1="zero_mult_t">
             <goal name="ket_sum_sum_complex&#39;vc.9.0.0.0.1.0.0.1.0.0.0.0" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="0.91" steps="598046"/></proof>
             </goal>
             <goal name="ket_sum_sum_complex&#39;vc.9.0.0.0.1.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="2.04" steps="712948"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="ket_sum_sum_complex&#39;vc.9.0.0.0.1.0.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="0.89" steps="598036"/></proof>
        </goal>
        <goal name="ket_sum_sum_complex&#39;vc.9.0.0.0.1.0.2" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="1.62" steps="676866"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ket_sum_sum_complex&#39;vc.9.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.83" steps="553879"/></proof>
     </goal>
     <goal name="ket_sum_sum_complex&#39;vc.9.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.82" steps="553879"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ket_sum_sum_complex&#39;vc.9.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="ket_sum_sum_complex&#39;vc.9.1.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="ket_sum_l_cardone">
       <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="apply" proved="true" arg1="set_equal_ket_l">
         <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="exists" proved="true" arg1="l">
          <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.0.0.0.0.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.0.0.0.0.0.0" proved="true">
           <proof prover="8"><result status="valid" time="1.30" steps="578925"/></proof>
           </goal>
           <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.0.0.0.0.0.1" proved="true">
           <proof prover="8"><result status="valid" time="1.41" steps="578945"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
           <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
            <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="sum_eq">
              <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.0.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="1.59" steps="639765"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="0.66" steps="507560"/></proof>
            </goal>
            <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="1.65" steps="587012"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="0.65" steps="507560"/></proof>
           </goal>
           <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="1.65" steps="587012"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.59" steps="478971"/></proof>
       </goal>
       <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.60" steps="478971"/></proof>
       </goal>
       <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.0.3" expl="rewrite premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.0.3.0" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="1.33" steps="578925"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0" expl="postcondition" proved="true">
       <transf name="replace" proved="true" arg1="(add (choose sx) (remove (choose sx) sx))" arg2="sx" arg3="in" arg4="Ensures">
        <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="Ensures">
         <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="Ensures1">
          <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0.0.0" expl="postcondition" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0.0.0.0" expl="postcondition" proved="true">
           <transf name="rewrite" proved="true" arg1="ket_sum_comp_l_rev">
            <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0.0.0.0.0" expl="postcondition" proved="true">
            <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
             <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="0.66" steps="509472"/></proof>
             </goal>
             <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="0.66" steps="509470"/></proof>
             </goal>
             <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0.0.0.0.0.2" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="0.65" steps="509470"/></proof>
             </goal>
             <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0.0.0.0.0.3" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0.0.0.0.0.3.0" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="set_equal_ket_l">
                <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
                <transf name="exists" proved="true" arg1="l">
                 <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0.0.0.0.0.3.0.0.0.0" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0.0.0.0.0.3.0.0.0.0.0" proved="true">
                  <proof prover="8"><result status="valid" time="1.59" steps="637459"/></proof>
                  </goal>
                  <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0.0.0.0.0.3.0.0.0.0.1" proved="true">
                  <proof prover="8"><result status="valid" time="1.51" steps="611435"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0.0.0.0.0.3.0.0.1" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0.0.0.0.0.3.0.0.1.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="add_ket_l_value">
                  <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0.0.0.0.0.3.0.0.1.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="scalar_ket_value">
                   <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0.0.0.0.0.3.0.0.1.0.0.0" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="scalar_ket_value">
                    <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0.0.0.0.0.3.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="scalar_ket_value">
                     <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0.0.0.0.0.3.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="assert" proved="true" arg1="(forall a b c. a*.c+.b*.c = (a+.b)*.c)">
                      <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0.0.0.0.0.3.0.0.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
                      <proof prover="8"><result status="valid" time="1.04" steps="591807"/></proof>
                      </goal>
                      <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0.0.0.0.0.3.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="h">
                       <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0.0.0.0.0.3.0.0.1.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                       <transf name="apply" proved="true" arg1="mult_eq_t">
                        <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0.0.0.0.0.3.0.0.1.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                        <transf name="apply" proved="true" arg1="goal_comm">
                         <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0.0.0.0.0.3.0.0.1.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                         <transf name="rewrite" proved="true" arg1="sum_plus_one">
                          <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0.0.0.0.0.3.0.0.1.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                          <transf name="compute_specified" proved="true" >
                           <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0.0.0.0.0.3.0.0.1.0.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                           <transf name="assert" proved="true" arg1="(forall a b. a+.b = b+.a)">
                            <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0.0.0.0.0.3.0.0.1.0.0.0.0.0.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
                            <proof prover="8"><result status="valid" time="1.03" steps="591852"/></proof>
                            </goal>
                            <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0.0.0.0.0.3.0.0.1.0.0.0.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
                            <transf name="apply" proved="true" arg1="h">
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0.0.0.0.0.3.0.0.1.0.0.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                          <proof prover="8"><result status="valid" time="0.65" steps="561640"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0.0.0.0.0.3.0.0.1.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
                        <proof prover="8"><result status="valid" time="0.64" steps="561636"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0.0.0.0.0.3.0.0.1.0.1" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.54" steps="640558"/></proof>
                  </goal>
                  <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0.0.0.0.0.3.0.0.1.0.2" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="0.74" steps="561575"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="0.65" steps="509472"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="ket_sum_sum_complex&#39;vc.9.1.0.0.1.0.1" expl="equality hypothesis" proved="true">
        <proof prover="8"><result status="valid" time="1.23" steps="582073"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_mult_ket_basis_bv_value&#39;vc" expl="VC for mat_mult_ket_basis_bv_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_mult_ket_basis_bv_value&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.63" steps="429070"/></proof>
  </goal>
  <goal name="mat_mult_ket_basis_bv_value&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.04" steps="455779"/></proof>
  </goal>
  <goal name="mat_mult_ket_basis_bv_value&#39;vc.2" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="mat_mult_ket_basis_bv_value&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="mat_mult_ket_basis_bv_value&#39;vc.2.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
     <goal name="mat_mult_ket_basis_bv_value&#39;vc.2.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="mat_mult_ket_basis_bv_value&#39;vc.2.0.0.0.0" expl="postcondition" proved="true">
      <transf name="instantiate" proved="true" arg1="sum_null_but_maybe_one_elt" arg2="(fun (e:bitvec) -&gt;
    get_ket
    (get m (bv_to_int e) (ket_to_int (bv_to_ket x))
     *.. ket (ket_length (bv_to_ket x)) (bv_to_int e))i),(n_bvs (ket_length (bv_to_ket x))),(int_to_bv i (length x))">
       <goal name="mat_mult_ket_basis_bv_value&#39;vc.2.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="Hinst">
        <goal name="mat_mult_ket_basis_bv_value&#39;vc.2.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="mat_mult_ket_basis_bv_value&#39;vc.2.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="scalar_ket_value">
          <goal name="mat_mult_ket_basis_bv_value&#39;vc.2.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="rewrite" proved="true" arg1="mult_one_t">
           <goal name="mat_mult_ket_basis_bv_value&#39;vc.2.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <proof prover="8"><result status="valid" time="1.57" steps="557085"/></proof>
           </goal>
           <goal name="mat_mult_ket_basis_bv_value&#39;vc.2.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="1.58" steps="558820"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="mat_mult_ket_basis_bv_value&#39;vc.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="1.69" steps="612417"/></proof>
        </goal>
        <goal name="mat_mult_ket_basis_bv_value&#39;vc.2.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_mult_ket_basis_bv_value&#39;vc.2.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="mat_mult_ket_basis_bv_value&#39;vc.2.0.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
          <transf name="rewrite" proved="true" arg1="scalar_ket_value">
           <goal name="mat_mult_ket_basis_bv_value&#39;vc.2.0.0.0.0.0.2.0.0.0" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="mult_zero_t">
            <goal name="mat_mult_ket_basis_bv_value&#39;vc.2.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="1.63" steps="617815"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_mult_ket_basis_bv_value&#39;vc.2.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.58" steps="554570"/></proof>
     </goal>
     <goal name="mat_mult_ket_basis_bv_value&#39;vc.2.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.21" steps="510499"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_mult_ket_basis_bv_value_gen&#39;vc" expl="VC for mat_mult_ket_basis_bv_value_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_mult_ket_basis_bv_value_gen&#39;vc.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="mat_mult_ket_basis_bv_value" arg2="m,x,i,l">
   <goal name="mat_mult_ket_basis_bv_value_gen&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="Hinst">
    <goal name="mat_mult_ket_basis_bv_value_gen&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.59" steps="400534"/></proof>
    </goal>
    <goal name="mat_mult_ket_basis_bv_value_gen&#39;vc.0.0.1" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.58" steps="400534"/></proof>
    </goal>
    <goal name="mat_mult_ket_basis_bv_value_gen&#39;vc.0.0.2" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.58" steps="400534"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_mult_ket_injec_eq_left&#39;vc" expl="VC for mat_mult_ket_injec_eq_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_mult_ket_injec_eq_left&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.96" steps="426917"/></proof>
  </goal>
  <goal name="mat_mult_ket_injec_eq_left&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.92" steps="425356"/></proof>
  </goal>
  <goal name="mat_mult_ket_injec_eq_left&#39;vc.2" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="(ket l i)" arg2="(bv_to_ket (int_to_bv i l))">
   <goal name="mat_mult_ket_injec_eq_left&#39;vc.2.0" expl="assertion" proved="true">
   <transf name="assert" proved="true" arg1="(get_ket (mat_mult m (bv_to_ket (int_to_bv i l))) j &lt;&gt; get_ket (mat_mult n (bv_to_ket (int_to_bv i l))) j)">
    <goal name="mat_mult_ket_injec_eq_left&#39;vc.2.0.0" expl="asserted formula" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures">
     <goal name="mat_mult_ket_injec_eq_left&#39;vc.2.0.0.0" expl="asserted formula" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures1">
      <goal name="mat_mult_ket_injec_eq_left&#39;vc.2.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="8"><result status="valid" time="1.29" steps="473001"/></proof>
      </goal>
      <goal name="mat_mult_ket_injec_eq_left&#39;vc.2.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.27" steps="471604"/></proof>
      </goal>
      <goal name="mat_mult_ket_injec_eq_left&#39;vc.2.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.02" steps="469542"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="mat_mult_ket_injec_eq_left&#39;vc.2.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.08" steps="471604"/></proof>
     </goal>
     <goal name="mat_mult_ket_injec_eq_left&#39;vc.2.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.08" steps="469542"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="mat_mult_ket_injec_eq_left&#39;vc.2.0.1" expl="assertion" proved="true">
    <proof prover="8"><result status="valid" time="0.80" steps="425090"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="mat_mult_ket_injec_eq_left&#39;vc.2.1" expl="equality hypothesis" proved="true">
   <proof prover="8"><result status="valid" time="1.35" steps="472254"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mat_mult_ket_injec_eq_left&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.79" steps="425049"/></proof>
  </goal>
  <goal name="mat_mult_ket_injec_eq_left&#39;vc.4" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.98" steps="425066"/></proof>
  </goal>
  <goal name="mat_mult_ket_injec_eq_left&#39;vc.5" expl="precondition" proved="true">
  <transf name="case" proved="true" arg1="(get m i j &lt;&gt; get n i j)">
   <goal name="mat_mult_ket_injec_eq_left&#39;vc.5.0" expl="true case (precondition)" proved="true">
   <transf name="assert" proved="true" arg1="(get_ket (mat_mult m (bv_to_ket(int_to_bv j l))) i &lt;&gt; get_ket (mat_mult n (bv_to_ket (int_to_bv j l))) i)">
    <goal name="mat_mult_ket_injec_eq_left&#39;vc.5.0.0" expl="asserted formula" proved="true">
    <proof prover="8"><result status="valid" time="1.09" steps="477774"/></proof>
    </goal>
    <goal name="mat_mult_ket_injec_eq_left&#39;vc.5.0.1" expl="true case (precondition)" proved="true">
    <proof prover="8"><result status="valid" time="1.01" steps="475203"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="mat_mult_ket_injec_eq_left&#39;vc.5.1" expl="false case (precondition)" proved="true">
   <proof prover="8"><result status="valid" time="0.62" steps="399079"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mat_mult_ket_injec_eq_left&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.54" steps="399021"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="int_to_bv_to_ket&#39;vc" expl="VC for int_to_bv_to_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_to_bv_to_ket&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.96" steps="466514"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
