(**************************************************************************)
(*  This file is part of QBRICKS.                                         *)
(*                                                                        *)
(*  Copyright (C) 2020-2022                                               *)
(*    CEA (Commissariat à l'énergie atomique et aux énergies              *)
(*         alternatives)                                                  *)
(*    Université Paris-Saclay                                             *)
(*                                                                        *)
(*  you can redistribute it and/or modify it under the terms of the GNU   *)
(*  Lesser General Public License as published by the Free Software       *)
(*  Foundation, version 2.1.                                              *)
(*                                                                        *)
(*  It is distributed in the hope that it will be useful,                 *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of        *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *)
(*  GNU Lesser General Public License for more details.                   *)
(*                                                                        *)
(*  See the GNU Lesser General Public License version 2.1                 *)
(*  for more details (enclosed in the file licenses/LGPLv2.1).            *)
(*                                                                        *)
(**************************************************************************)


module Ind_isum

         
         use p_int.Int_comp
         use fsum.Iterations
         use fsum.Set_iter
         use fsum.Int_iter
         use  functions.MapInjection
         use  p_set.Fset_comp
         use  p_set.IndexestoSet
         use  complex.Constant
         use  int.Int
     
let  rec function ind_isum  (f :int -> int) (i:int) (j:int)
                    variant{j-i}
                    ensures{result = int_iterate (+) f i j}
  = if (j<= i) then 0
    else if j = i+1 then f i
    else
       (f i) +  (ind_isum  f (i+1) j)
  
  
let lemma ind_isum_empty (f :int -> int) (i:int) (j:int) 
      requires{j <= i}
      ensures{ ind_isum  f i j =  0}
  =
  int_iterate_def_empty (+) f i j;
  ()
  
let lemma ind_isum_one (f :int -> int) (i:int) (j:int) 
      requires{j = i +1 }
      ensures{ ind_isum  f i j =  f i}
  =
  ()
  
let lemma ind_isum_plus_one (f :int -> int) (i:int) (j:int) 
      requires{i < j}
      ensures{ ind_isum  f i j =  (f i) + ( ind_isum  f (i+1) j)}
  =
  int_iterate_def_plus_one (+) f i j;
  ()
  
let lemma ind_isum_to_isum  (f :int -> int) (i:int) (j:int) 
      requires{i < j}
      ensures{ ind_isum  f i j =  isum (to_fset i j) f}
  =
  ()

let rec lemma ind_isum_const (k i j:int)
          requires{i < j}
          ensures{ind_isum (const k) i j = k* (j-i)}
          variant{j-i}
  = if (j= i+1) then ()
    else
      begin
        ind_isum_plus_one (const k) i j;
        ind_isum_const k (i+1) j
      end
  
let rec lemma ind_isum_null (f: int -> int) (i j :int)
          requires{i < j}
          requires{forall k:int. i <= k < j -> f k = 0}
          ensures{ind_isum f i j = 0}
          variant{j-i}
  = if (j= i+1) then ()
    else
      begin
        ind_isum_plus_one f i j;
        ind_isum_null f (i+1) j
      end
  
let lemma ind_isum_right_extension (f :int -> int) (i:int) (j:int)
      ensures{i<= j -> ind_isum f i (j+1) = ind_isum f i j + f j}
  =int_iterate_right_extension (+) f i (j+1);
   ()

let lemma ind_isum_re (f :int -> int) (i:int) (j:int)
      requires{i < j}
      ensures{ind_isum f i j = ind_isum f i (j-1) + f (j-1)}
  =ind_isum_right_extension f i (j-1);
   ()

let lemma ind_isum_re_null (f :int -> int) (i:int) (j:int)
      requires{i < j}
      requires{f j = 0}
      ensures{ind_isum f i (j+1) = ind_isum f i j }
  =ind_isum_right_extension f i (j-1);
   ()

let rec lemma ind_isum_null_but_maybe_one_elt  (l h :int) (t:  int -> int) (e: int)
      requires{l<= e < h}
      requires{forall a. l<= a < h ->  a <> e -> t a = 0}
      ensures{ind_isum   t l h = t e}
      variant{h-e}
  =
  if (h-l) = 1 then ind_isum_one t l h
  else
    if (h-e) = 1
    then
      begin
        ind_isum_re t l h;
        ind_isum_null t l (h-1);
      end
    else
      begin
        ind_isum_re t l h;
        ind_isum_null_but_maybe_one_elt  l (h-1) t e;
        end
   
let  lemma ind_isum_eq (f g : int -> int) i j
       requires{forall k : int. i <= k < j -> f k = g k}
       ensures{ ind_isum  f i j = ind_isum   g i j}
  =
  int_iterate_eq  (+)  f g i j 

let  lemma ind_isum_to_guard (f g: int -> int) (p: int-> bool) i j
       requires{forall k:int. i <= k < j -> p k}
       ensures{ ind_isum  ( fun k -> if p k then f k else g k) i j = ind_isum   f i j}
  =
  ind_isum_eq    f ( fun k -> if p k then f k else g k) i j 

let  lemma ind_isum_no_guard (f g: int -> int) (p: int-> bool) i j
       requires{forall k:int. i <= k < j -> not (p k)}
       ensures{ ind_isum  ( fun k -> if p k then g k else f k) i j = ind_isum   f i j}
  =
  ind_isum_eq    f ( fun k -> if p k then g k else f k) i j 

let  lemma ind_isum_eq_gen (f g : int -> int) (i i1 j j1:int)
       requires{forall k : int. i <= k < j -> f k = g k}
       requires{i = i1}
       requires{j = j1}
       ensures{ ind_isum  f i j = ind_isum   g i1 j1}
  =
  ind_isum_eq  f g i j 

let  lemma ind_isum_func_const (k:int) ( f: int->int)(  i j:int)
       requires{i <= j}
       requires{forall l:int. i<= l < j -> f l = k}
       ensures{ind_isum f i j = k* (j-i)}
  = if i = j then ()
    else begin
ind_isum_const k i j;
  ind_isum_eq f (const k) i j        
      end
  
let rec  lemma ind_isum_pos (f : int -> int) i j
           requires{i <=j}
           requires{forall k : int. i <= k < j -> f k >=0}
           ensures{0<= ind_isum  f i j}
           variant{j-i}
  = if (j-i = 0) then ()
    else
      begin
        ind_isum_right_extension f i (j-1);
        ind_isum_pos f i (j-1)
      end
  

  
let  lemma ind_isum_map_auto  (i j :int)(f: int -> int)(t: int -> int)
       requires{p_bijective f (to_fset i j)  (to_fset i j) }
       ensures{ind_isum t i j   = ind_isum  (fun b -> t (f b))  i j}
  = int_iterate_map_auto (+) i j  f t 
  
let  lemma ind_isum_rev  (i j :int)(f: int -> int)
       ensures{ind_isum f i j   = ind_isum  (fun k -> f (j-k-1+i))  i j}
  = ind_isum_map_auto i j (fun k -> j-k-1+i) f
  
let  lemma ind_isum_map  (i j k l :int)(f: int -> int)(t: int -> int)
       requires{p_bijective f (to_fset i j)  (to_fset k l) }
       ensures{ind_isum t k l   = ind_isum  (fun b -> t (f b))  i j}
  = int_iterate_map (+) i j k l  f t 
  
let  lemma ind_isum_map_auto_bij  (i j :int)(f: int -> int)(t: int -> int)
       requires{forall e:int.  i<= e < j ->  i<= f e < j}
       requires{    forall e e': int. i<= e < j -> i<= e' < j  -> e <> e' -> f e <> f e'}
       requires{    forall e' : int. i<= e' < j  -> exists e : int. i<= e < j  /\ f e = e'}
       ensures{ind_isum t i j   = ind_isum  (fun b -> t (f b))  i j}
  = set_bijective f  (to_fset i j) (to_fset i j);
    ind_isum_map_auto  i j  f t 
    
let  lemma ind_isum_map_bij  (i j k l :int)(f: int -> int)(t: int -> int)
       requires{forall e:int.  i<= e < j ->  k<= f e < l}
       requires{    forall e e': int. i<= e < j  -> i<= e' < j  -> e <> e' -> f e <> f e'}
       requires{    forall e' : int. k<= e' < l -> exists e : int. i<= e < j /\ f e = e'}
       ensures{ind_isum t k l   = ind_isum  (fun b -> t (f b))  i j}
  =  set_bijective f    (to_fset i j) (to_fset k l);
     ind_isum_map  i j k l  f t 

let rec lemma ind_isum_transl (f: int -> int)(i j k:int)
          ensures{ind_isum f i j  = ind_isum (fun b ->  f (b + k))  (i-k) (j-k)}
          variant{j-i}
  = int_iterate_transl (+) f i j k

let rec lemma ind_isum_transl_plus_one (f: int -> int)(i j:int)
          ensures{ind_isum f i j  = ind_isum (fun b ->  f (b -1))  (i+1) (j+1)}
          variant{j-i}
  = ind_isum_transl f i j (-1)

let rec lemma ind_isum_transl_minus_one (f: int -> int)(i j:int)
          ensures{ind_isum f i j  = ind_isum (fun b ->  f (b +1))  (i-1) (j-1)}
          variant{j-i}
  = ind_isum_transl f i j 1
  
let rec lemma ind_isum_scal  (f :int -> int) (i j:int) (a:int) 
          requires{i<= j}
          ensures{ind_isum  (fun i -> a* (f i)) i j = a* (ind_isum  f i j)}      
          variant{j-i}
  = if (j-i = 0) then ()
    else
      begin
        ind_isum_right_extension (fun i -> a* (f i)) i (j-1);
        ind_isum_right_extension f i (j-1);
        ind_isum_scal f  i (j-1)  a;
      end
  
let lemma minus_ind_isum  (f :int -> int) (i j:int) 
      requires{i<= j}
      ensures{ - (ind_isum  f i j) = ind_isum  (fun i ->  (-(f i))) i j}      
  = ind_isum_scal f i j (-1)
  
let lemma minus_ind_isum_rev  (f :int -> int) (i j:int) 
      requires{i<= j}
      ensures{ind_isum  (fun i ->  (-(f i))) i j =  - (ind_isum  f i j) }      
  = ()
  
let lemma ind_isum_scal_rev  (f :int -> int) (i j:int) (a:int) 
      requires{i<= j}
      ensures{ a* (ind_isum  f i j) = ind_isum  (fun i -> a* (f i)) i j}      
  = ind_isum_scal f i j a
  
let lemma ind_isum_scal_rev_right  (f :int -> int) (i j:int) (a:int) 
      requires{i<= j}
      ensures{ (ind_isum  f i j) * a = ind_isum  (fun i ->  (f i) * a) i j}      
  = ind_isum_scal f i j a
  
let lemma ind_isum_scal_right  (f :int -> int) (i j:int) (a:int) 
      requires{i<= j}
      ensures{ ind_isum  (fun i ->  (f i) * a) i j = (ind_isum  f i j) * a  }      
  = ind_isum_scal f i j a
  
let rec lemma ind_isum_bound  (f g  :int -> int) (i j:int) 
          requires{i< j}
          requires{forall k. i<= k <j -> f k < g k}
          ensures{ind_isum  f i j < ind_isum g i j}      
          variant{j-i}
  = if (j-i = 1) then ()
    else
      begin
        ind_isum_right_extension g i (j-1);
        ind_isum_right_extension f i (j-1);
        ind_isum_bound f g i (j-1);
      end

  
let rec lemma ind_isum_bound_eq  (f g  :int -> int) (i j:int) 
          requires{i<= j}
          requires{forall k. i<= k <j -> f k <= g k}
          ensures{ind_isum  f i j <= ind_isum g i j}      
          variant{j-i}
  = if (j-i = 0) then ()
    else
      if (j-i = 1) then ()
      else
        begin
          ind_isum_right_extension g i (j-1);
          ind_isum_right_extension f i (j-1);
          ind_isum_bound_eq f g i (j-1);
        end

let  lemma ind_isum_scal_gen  (f :int -> int) (i j :  int)  
       ensures{forall a: int. i <= a < j -> ind_isum  (fun i -> a* (f i)) i j = a* (ind_isum  f i j)}      
  = ()

let  lemma ind_isum_trans  (f : int -> int ) (i k j : int)
       requires {i <= k <= j}
       ensures  { ind_isum f i j =  ind_isum f i k +  ind_isum f k j  }
  =
  int_iterate_transitivity ( + ) f i k j

end

     
module From_int_iter                          
         use  complex.Complex
         use  complex_operations.Base_type
         use   complex_operations.FromInt
         use  int.Int
         use  p_int.Int_comp
         use Ind_isum
     
let rec lemma from_int_sum (f : int -> int) (i j :int)
          requires{i <= j}
          ensures{i_to_c (ind_isum f i j) = ind_sum (fun k -> i_to_c (f k)) i j}
          variant{j-i}
  = if (j = i) then ()
    else
      begin
        ind_sum_right_extension (fun k -> i_to_c (f k)) i j;
        ind_isum_right_extension f i (j-1);
        from_int_sum f i (j-1);
      end

   use p_set.Fset_comp

let rec lemma i_to_c_sum (s: set 'a) (f:'a-> int)(g:'a-> complex)
          requires{1<= cardinal s }
          requires{forall e. mem e s -> i_to_c (f e) = g e}
          ensures{i_to_c (isum s f) = sum s g}
      variant{cardinal s}
  = if cardinal s =  1 then ()
    else
      begin
        isum_add (remove (choose s) s) f (choose s);
        sum_plus_one s g;
        i_to_c_sum (remove (choose s) s) f g;
      end
  
let rec lemma from_int_product (f : int -> int) (i j :int)
          requires{i <= j}
          ensures{i_to_c (ind_iproduct f i j) = ind_product (fun k -> i_to_c (f k)) i j}
          variant{j-i}
  = if (j = i) then ()
    else
      begin
        ind_product_right_extension (fun k -> i_to_c (f k)) i j;
        ind_iproduct_right_extension f i j;
        from_int_product f i (j-1);
      end
end
     

     module P_minmax_b
         use export int.MinMax
         use  p_set.Fset
         use  int.Int
         use p_int.P_minmax
         use p_set.IndexestoSet
          
          
         let  rec function min_filter_b (i j :int) (p: int -> bool) : int
               requires{exists e. i<= e < j && p e}
               ensures{result = min_filter (to_fset i j) p}
               ensures{p result}
               ensures{i<= result < j}
               ensures{forall e.  i<= e < j -> p e -> result <= e}
               ensures{forall e.  i<= e < j ->e < result -> not (p e)}
               variant{j-i}
  =
  if p i then i
  else
    min_filter_b (i+1) j p

end
