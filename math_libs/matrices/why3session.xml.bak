<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="CVC3" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="7" name="Z3" version="4.8.6" alternative="counterexamples" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="9" name="Alt-Ergo" version="2.4.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="10" name="CVC4" version="1.7" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="matrices.mlw"/>
<theory name="Matrix" proved="true">
 <goal name="matrix&#39;vc" expl="VC for matrix" proved="true">
 <proof prover="10"><result status="valid" time="0.03" steps="20990"/></proof>
 </goal>
 <goal name="get&#39;vc" expl="VC for get" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="get&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.02" steps="21257"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="elts_eq&#39;vc" expl="VC for elts_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="elts_eq&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.03" steps="27777"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="elts_inst_eq&#39;vc" expl="VC for elts_inst_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="elts_inst_eq&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.04" steps="28320"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="make&#39;vc" expl="VC for make" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="make&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="make&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.02" steps="28849"/></proof>
   </goal>
   <goal name="make&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.03" steps="28849"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="make&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.04" steps="29212"/></proof>
  </goal>
  <goal name="make&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.03" steps="29215"/></proof>
  </goal>
  <goal name="make&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.06" steps="31328"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="make_value&#39;vc" expl="VC for make_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="make_value&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.04" steps="25758"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mat_indices&#39;vc" expl="VC for mat_indices" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_indices&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mat_indices&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.16" steps="84352"/></proof>
   </goal>
   <goal name="mat_indices&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.16" steps="84357"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mat_indices&#39;vc.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mat_indices&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.17" steps="84482"/></proof>
   </goal>
   <goal name="mat_indices&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.16" steps="84487"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mat_indices&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.17" steps="84937"/></proof>
  </goal>
  <goal name="mat_indices&#39;vc.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mat_indices&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.15" steps="74467"/></proof>
   </goal>
   <goal name="mat_indices&#39;vc.3.1" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.14" steps="74582"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set&#39;vc" expl="VC for set" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="set&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.05" steps="34785"/></proof>
   </goal>
   <goal name="set&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.05" steps="34751"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="set&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.03" steps="32585"/></proof>
  </goal>
  <goal name="set&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.04" steps="32588"/></proof>
  </goal>
  <goal name="set&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.06" steps="35466"/></proof>
  </goal>
  <goal name="set&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.07" steps="35371"/></proof>
  </goal>
  <goal name="set&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.05" steps="35791"/></proof>
  </goal>
  <goal name="set&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.06" steps="35971"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_valid_index&#39;vc" expl="VC for set_valid_index" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_valid_index&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.05" steps="29806"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_valid_index&#39;vc" expl="VC for get_valid_index" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_valid_index&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="get_valid_index&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.05" steps="30003"/></proof>
   </goal>
   <goal name="get_valid_index&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.06" steps="30116"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="get_valid_index&#39;vc.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="get_valid_index&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.05" steps="30157"/></proof>
   </goal>
   <goal name="get_valid_index&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.06" steps="30236"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="get_valid_index_params&#39;vc" expl="VC for get_valid_index_params" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_valid_index_params&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="get_valid_index_params&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.06" steps="31098"/></proof>
   </goal>
   <goal name="get_valid_index_params&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.06" steps="31211"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="get_valid_index_params&#39;vc.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="get_valid_index_params&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.05" steps="31264"/></proof>
   </goal>
   <goal name="get_valid_index_params&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.06" steps="31295"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_values&#39;vc" expl="VC for set_values" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_values&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.41" steps="172306"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_rows&#39;vc" expl="VC for set_rows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_rows&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.11" steps="59304"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_columns&#39;vc" expl="VC for set_columns" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_columns&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.12" steps="55406"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="make_func&#39;vc" expl="VC for make_func" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="make_func&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="make_func&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.03" steps="26199"/></proof>
   </goal>
   <goal name="make_func&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.03" steps="26199"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="make_func&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.03" steps="36523"/></proof>
  </goal>
  <goal name="make_func&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.05" steps="36526"/></proof>
  </goal>
  <goal name="make_func&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.05" steps="36529"/></proof>
  </goal>
  <goal name="make_func&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.06" steps="38352"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="make_f&#39;vc" expl="VC for make_f" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="make_f&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.03" steps="26596"/></proof>
  </goal>
  <goal name="make_f&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.03" steps="26602"/></proof>
  </goal>
  <goal name="make_f&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.05" steps="37978"/></proof>
  </goal>
  <goal name="make_f&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.04" steps="37981"/></proof>
  </goal>
  <goal name="make_f&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.05" steps="39364"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="assert_make&#39;vc" expl="VC for assert_make" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="assert_make&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.08" steps="39310"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="assert_make_r&#39;vc" expl="VC for assert_make_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="assert_make_r&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="9"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="assert_make_c&#39;vc" expl="VC for assert_make_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="assert_make_c&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="9"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="to_indexes&#39;vc" expl="VC for to_indexes" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="to_indexes&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="121"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_to_indexes_mem&#39;vc" expl="VC for set_to_indexes_mem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_to_indexes_mem&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.11" steps="59145"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_to_indexes_mem&#39;vc" expl="VC for get_to_indexes_mem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_to_indexes_mem&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="get_to_indexes_mem&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.39" steps="210876"/></proof>
   </goal>
   <goal name="get_to_indexes_mem&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.12" steps="59168"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="get_to_indexes_mem&#39;vc.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="get_to_indexes_mem&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.12" steps="59229"/></proof>
   </goal>
   <goal name="get_to_indexes_mem&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.11" steps="59363"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Matrix_equality" proved="true">
 <goal name="mat_equality&#39;vc" expl="VC for mat_equality" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_equality&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="m" arg2="n">
   <goal name="mat_equality&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.06" steps="35822"/></proof>
   </goal>
   <goal name="mat_equality&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <transf name="rewrite" proved="true" arg1="equality">
    <goal name="mat_equality&#39;vc.0.1.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_equality&#39;vc.0.1.0.0" proved="true">
     <proof prover="10"><result status="valid" time="0.05" steps="34626"/></proof>
     </goal>
     <goal name="mat_equality&#39;vc.0.1.0.1" proved="true">
     <proof prover="10"><result status="valid" time="0.04" steps="34626"/></proof>
     </goal>
     <goal name="mat_equality&#39;vc.0.1.0.2" proved="true">
     <proof prover="10"><result status="valid" time="0.07" steps="35813"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="equal_sym&#39;vc" expl="VC for equal_sym" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="equal_sym&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="equal_sym&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.04" steps="29851"/></proof>
   </goal>
   <goal name="equal_sym&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.06" steps="29869"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="equal_rex&#39;vc" expl="VC for equal_rex" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="equal_rex&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.05" steps="29909"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="equal_trans&#39;vc" expl="VC for equal_trans" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="equal_trans&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.05" steps="30057"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_equal_mat&#39;vc" expl="VC for set_equal_mat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_equal_mat&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(equal m n)">
   <goal name="set_equal_mat&#39;vc.0.0" expl="asserted formula" proved="true">
   <proof prover="10"><result status="valid" time="0.06" steps="38286"/></proof>
   </goal>
   <goal name="set_equal_mat&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.08" steps="38158"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_equal_mat_make&#39;vc" expl="VC for set_equal_mat_make" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_equal_mat_make&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.04" steps="37415"/></proof>
  </goal>
  <goal name="set_equal_mat_make&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.05" steps="37421"/></proof>
  </goal>
  <goal name="set_equal_mat_make&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.05" steps="42555"/></proof>
  </goal>
  <goal name="set_equal_mat_make&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.05" steps="42561"/></proof>
  </goal>
  <goal name="set_equal_mat_make&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.06" steps="44017"/></proof>
  </goal>
  <goal name="set_equal_mat_make&#39;vc.5" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.06" steps="44034"/></proof>
  </goal>
  <goal name="set_equal_mat_make&#39;vc.6" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.11" steps="49753"/></proof>
  </goal>
  <goal name="set_equal_mat_make&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.05" steps="42653"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_equal_mat_make_t&#39;vc" expl="VC for set_equal_mat_make_t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_equal_mat_make_t&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.04" steps="38462"/></proof>
  </goal>
  <goal name="set_equal_mat_make_t&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.05" steps="38468"/></proof>
  </goal>
  <goal name="set_equal_mat_make_t&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.04" steps="43580"/></proof>
  </goal>
  <goal name="set_equal_mat_make_t&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.04" steps="43586"/></proof>
  </goal>
  <goal name="set_equal_mat_make_t&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.06" steps="45175"/></proof>
  </goal>
  <goal name="set_equal_mat_make_t&#39;vc.5" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.07" steps="45192"/></proof>
  </goal>
  <goal name="set_equal_mat_make_t&#39;vc.6" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.09" steps="51363"/></proof>
  </goal>
  <goal name="set_equal_mat_make_t&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.05" steps="45196"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_equal_mat&#39;vc" expl="VC for get_equal_mat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_equal_mat&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.04" steps="35629"/></proof>
  </goal>
  <goal name="get_equal_mat&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.03" steps="35780"/></proof>
  </goal>
  <goal name="get_equal_mat&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.04" steps="36585"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="equal_functions&#39;vc" expl="VC for equal_functions" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="equal_functions&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.03" steps="40351"/></proof>
  </goal>
  <goal name="equal_functions&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.05" steps="40357"/></proof>
  </goal>
  <goal name="equal_functions&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.05" steps="45699"/></proof>
  </goal>
  <goal name="equal_functions&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.05" steps="45705"/></proof>
  </goal>
  <goal name="equal_functions&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.07" steps="47169"/></proof>
  </goal>
  <goal name="equal_functions&#39;vc.5" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.07" steps="47186"/></proof>
  </goal>
  <goal name="equal_functions&#39;vc.6" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.10" steps="53486"/></proof>
  </goal>
  <goal name="equal_functions&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.05" steps="45797"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="equal_functions_mat&#39;vc" expl="VC for equal_functions_mat" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="equal_functions_mat&#39;vc.0" expl="VC for equal_functions_mat" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="equal_functions_mat&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.09" steps="49335"/></proof>
   </goal>
   <goal name="equal_functions_mat&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.09" steps="49366"/></proof>
   </goal>
   <goal name="equal_functions_mat&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.05" steps="46654"/></proof>
   </goal>
   <goal name="equal_functions_mat&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.06" steps="46665"/></proof>
   </goal>
   <goal name="equal_functions_mat&#39;vc.0.4" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.08" steps="50218"/></proof>
   </goal>
   <goal name="equal_functions_mat&#39;vc.0.5" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.06" steps="46658"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 <transf name="split_vc" proved="true" >
  <goal name="equal_functions_mat&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.08" steps="49328"/></proof>
  </goal>
  <goal name="equal_functions_mat&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.09" steps="49359"/></proof>
  </goal>
  <goal name="equal_functions_mat&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.05" steps="46647"/></proof>
  </goal>
  <goal name="equal_functions_mat&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.05" steps="46658"/></proof>
  </goal>
  <goal name="equal_functions_mat&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.09" steps="50211"/></proof>
  </goal>
  <goal name="equal_functions_mat&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.05" steps="46651"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_null_mat&#39;vc" expl="VC for set_null_mat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_null_mat&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.14" steps="86380"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_null_mat&#39;vc" expl="VC for get_null_mat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_null_mat&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.13" steps="80706"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Kronecker_product" proved="true">
 <goal name="kronecker_neutral&#39;vc" expl="VC for kronecker_neutral" proved="true">
 <proof prover="10"><result status="valid" time="0.18" steps="174668"/></proof>
 </goal>
 <goal name="identity&#39;vc" expl="VC for identity" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="identity&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.66" steps="260915"/></proof>
  </goal>
  <goal name="identity&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.20" steps="234099"/></proof>
  </goal>
  <goal name="identity&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.28" steps="239506"/></proof>
  </goal>
  <goal name="identity&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.29" steps="239509"/></proof>
  </goal>
  <goal name="identity&#39;vc.4" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures2">
   <goal name="identity&#39;vc.4.0" expl="postcondition" proved="true">
   <transf name="compute_specified" proved="true" >
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="identity_rows&#39;vc" expl="VC for identity_rows" proved="true">
 <proof prover="10"><result status="valid" time="1.49" steps="453851"/></proof>
 </goal>
 <goal name="identity_columns&#39;vc" expl="VC for identity_columns" proved="true">
 <proof prover="10"><result status="valid" time="1.48" steps="454122"/></proof>
 </goal>
 <goal name="identity_values&#39;vc" expl="VC for identity_values" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="identity_values&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="1.57" steps="456762"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="kronecker&#39;vc" expl="VC for kronecker" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kronecker&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="kronecker&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="0.51" steps="209108"/></proof>
   </goal>
   <goal name="kronecker&#39;vc.0.1" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="set_valid_index">
    <goal name="kronecker&#39;vc.0.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="kronecker&#39;vc.0.1.0.0" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="0.13" steps="2325"/></proof>
     </goal>
     <goal name="kronecker&#39;vc.0.1.0.1" expl="apply premises" proved="true">
     <transf name="case" proved="true" arg1="(rows m &lt;= div i (rows n))">
      <goal name="kronecker&#39;vc.0.1.0.1.0" expl="true case (apply premises)" proved="true">
      <transf name="assert" proved="true" arg1="(rows m * rows n &lt;= div i (rows n) * rows n)">
       <goal name="kronecker&#39;vc.0.1.0.1.0.0" expl="asserted formula" proved="true">
       <proof prover="9"><result status="valid" time="1.25" steps="19371"/></proof>
       </goal>
       <goal name="kronecker&#39;vc.0.1.0.1.0.1" expl="true case (apply premises)" proved="true">
       <proof prover="9"><result status="valid" time="1.34" steps="19501"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="kronecker&#39;vc.0.1.0.1.1" expl="false case (apply premises)" proved="true">
      <proof prover="10"><result status="valid" time="0.24" steps="181681"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="kronecker&#39;vc.0.1.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="kronecker&#39;vc.0.1.1.0" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="0.12" steps="2325"/></proof>
     </goal>
     <goal name="kronecker&#39;vc.0.1.1.1" expl="apply premises" proved="true">
     <transf name="case" proved="true" arg1="(columns m &lt;= div j (columns n))">
      <goal name="kronecker&#39;vc.0.1.1.1.0" expl="true case (apply premises)" proved="true">
      <transf name="assert" proved="true" arg1="(columns m * columns n &lt;= div j (columns n) * columns n)">
       <goal name="kronecker&#39;vc.0.1.1.1.0.0" expl="asserted formula" proved="true">
       <proof prover="9"><result status="valid" time="1.08" steps="19371"/></proof>
       </goal>
       <goal name="kronecker&#39;vc.0.1.1.1.0.1" expl="true case (apply premises)" proved="true">
       <proof prover="9"><result status="valid" time="1.09" steps="19501"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="kronecker&#39;vc.0.1.1.1.1" expl="false case (apply premises)" proved="true">
      <proof prover="10"><result status="valid" time="0.23" steps="181681"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="kronecker&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.47" steps="207213"/></proof>
  </goal>
  <goal name="kronecker&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.53" steps="207248"/></proof>
  </goal>
  <goal name="kronecker&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.71" steps="267776"/></proof>
  </goal>
  <goal name="kronecker&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.67" steps="267776"/></proof>
  </goal>
  <goal name="kronecker&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.31" steps="18376"/></proof>
  </goal>
  <goal name="kronecker&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.35" steps="18691"/></proof>
  </goal>
  <goal name="kronecker&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.31" steps="240660"/></proof>
  </goal>
  <goal name="kronecker&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.32" steps="240663"/></proof>
  </goal>
  <goal name="kronecker&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="1.66" steps="504776"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="kronecker_eq&#39;vc" expl="VC for kronecker_eq" proved="true">
 <proof prover="10"><result status="valid" time="0.22" steps="176322"/></proof>
 </goal>
 <goal name="get_kronecker&#39;vc" expl="VC for get_kronecker" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_kronecker&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="get_kronecker&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="kronecker&#39;def">
    <goal name="get_kronecker&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="simplify_formula" proved="true" >
     <goal name="get_kronecker&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="10"><result status="valid" time="0.23" steps="177559"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="kronecker_values&#39;vc" expl="VC for kronecker_values" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kronecker_values&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.51" steps="210670"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="kronecker_rows&#39;vc" expl="VC for kronecker_rows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kronecker_rows&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.50" steps="208585"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="kronecker_columns&#39;vc" expl="VC for kronecker_columns" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kronecker_columns&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.51" steps="208594"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="kronecker_values_gen&#39;vc" expl="VC for kronecker_values_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kronecker_values_gen&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.51" steps="211025"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="kronecker_mod_values&#39;vc" expl="VC for kronecker_mod_values" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kronecker_mod_values&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.24" steps="181080"/></proof>
  </goal>
  <goal name="kronecker_mod_values&#39;vc.1" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.13" steps="3389"/></proof>
  </goal>
  <goal name="kronecker_mod_values&#39;vc.2" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.14" steps="3505"/></proof>
  </goal>
  <goal name="kronecker_mod_values&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.53" steps="212127"/></proof>
  </goal>
  <goal name="kronecker_mod_values&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.51" steps="212032"/></proof>
  </goal>
  <goal name="kronecker_mod_values&#39;vc.5" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.50" steps="212244"/></proof>
  </goal>
  <goal name="kronecker_mod_values&#39;vc.6" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.49" steps="212704"/></proof>
  </goal>
  <goal name="kronecker_mod_values&#39;vc.7" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.53" steps="212609"/></proof>
  </goal>
  <goal name="kronecker_mod_values&#39;vc.8" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.50" steps="212682"/></proof>
  </goal>
  <goal name="kronecker_mod_values&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="517"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="kronecker_indexes&#39;vc" expl="VC for kronecker_indexes" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kronecker_indexes&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.51" steps="209508"/></proof>
  </goal>
  <goal name="kronecker_indexes&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.49" steps="209811"/></proof>
  </goal>
  <goal name="kronecker_indexes&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.51" steps="209917"/></proof>
  </goal>
  <goal name="kronecker_indexes&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.51" steps="209969"/></proof>
  </goal>
  <goal name="kronecker_indexes&#39;vc.4" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="get_valid_index" arg2="n,k,l">
   <goal name="kronecker_indexes&#39;vc.4.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="get_valid_index" arg2="m,i,j">
    <goal name="kronecker_indexes&#39;vc.4.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="kronecker_indexes&#39;vc.4.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="set_valid_index">
      <goal name="kronecker_indexes&#39;vc.4.0.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="kronecker_indexes&#39;vc.4.0.0.0.0.0" proved="true">
       <transf name="assert" proved="true" arg1="(0&lt;= (i * rows n))">
        <goal name="kronecker_indexes&#39;vc.4.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="9"><result status="valid" time="0.54" steps="12841"/></proof>
        </goal>
        <goal name="kronecker_indexes&#39;vc.4.0.0.0.0.0.1" proved="true">
        <transf name="assert" proved="true" arg1="(0&lt;= k)">
         <goal name="kronecker_indexes&#39;vc.4.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
         <proof prover="10"><result status="valid" time="0.59" steps="238439"/></proof>
         </goal>
         <goal name="kronecker_indexes&#39;vc.4.0.0.0.0.0.1.1" proved="true">
         <proof prover="10"><result status="valid" time="0.45" steps="226501"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="kronecker_indexes&#39;vc.4.0.0.0.0.1" proved="true">
       <transf name="assert" proved="true" arg1="(i &lt;= rows m-1)">
        <goal name="kronecker_indexes&#39;vc.4.0.0.0.0.1.0" expl="asserted formula" proved="true">
        <proof prover="10"><result status="valid" time="0.57" steps="238443"/></proof>
        </goal>
        <goal name="kronecker_indexes&#39;vc.4.0.0.0.0.1.1" proved="true">
        <transf name="assert" proved="true" arg1="(i * rows n &lt;= (rows m-1) * rows n)">
         <goal name="kronecker_indexes&#39;vc.4.0.0.0.0.1.1.0" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="0.57" steps="13342"/></proof>
         </goal>
         <goal name="kronecker_indexes&#39;vc.4.0.0.0.0.1.1.1" proved="true">
         <proof prover="10"><result status="valid" time="0.53" steps="238778"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="kronecker_indexes&#39;vc.4.0.0.0.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="kronecker_indexes&#39;vc.4.0.0.0.1.0" proved="true">
       <transf name="assert" proved="true" arg1="(0&lt;= (j * columns n))">
        <goal name="kronecker_indexes&#39;vc.4.0.0.0.1.0.0" expl="asserted formula" proved="true">
        <proof prover="9"><result status="valid" time="0.56" steps="12841"/></proof>
        </goal>
        <goal name="kronecker_indexes&#39;vc.4.0.0.0.1.0.1" proved="true">
        <proof prover="10"><result status="valid" time="0.51" steps="238558"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="kronecker_indexes&#39;vc.4.0.0.0.1.1" proved="true">
       <transf name="assert" proved="true" arg1="(j * columns n &lt;= (columns m-1) * columns n)">
        <goal name="kronecker_indexes&#39;vc.4.0.0.0.1.1.0" expl="asserted formula" proved="true">
        <proof prover="9"><result status="valid" time="0.56" steps="13344"/></proof>
        </goal>
        <goal name="kronecker_indexes&#39;vc.4.0.0.0.1.1.1" proved="true">
        <proof prover="10"><result status="valid" time="0.51" steps="238825"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="kronecker_indexes_com&#39;vc" expl="VC for kronecker_indexes_com" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kronecker_indexes_com&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.45" steps="211958"/></proof>
  </goal>
  <goal name="kronecker_indexes_com&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.47" steps="211970"/></proof>
  </goal>
  <goal name="kronecker_indexes_com&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.44" steps="211984"/></proof>
  </goal>
  <goal name="kronecker_indexes_com&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.21" steps="184506"/></proof>
  </goal>
  <goal name="kronecker_indexes_com&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.47" steps="212610"/></proof>
  </goal>
  <goal name="kronecker_indexes_com&#39;vc.5" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.46" steps="212622"/></proof>
  </goal>
  <goal name="kronecker_indexes_com&#39;vc.6" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.46" steps="212636"/></proof>
  </goal>
  <goal name="kronecker_indexes_com&#39;vc.7" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.23" steps="184742"/></proof>
  </goal>
  <goal name="kronecker_indexes_com&#39;vc.8" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_valid_index">
   <goal name="kronecker_indexes_com&#39;vc.8.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="kronecker_indexes_com&#39;vc.8.0.0" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.14" steps="3836"/></proof>
    </goal>
    <goal name="kronecker_indexes_com&#39;vc.8.0.1" expl="apply premises" proved="true">
    <transf name="assert" proved="true" arg1="((div i (rows n)) * rows n &lt; (rows m) * rows n)">
     <goal name="kronecker_indexes_com&#39;vc.8.0.1.0" expl="asserted formula" proved="true">
     <proof prover="9"><result status="valid" time="1.28" steps="21794"/></proof>
     </goal>
     <goal name="kronecker_indexes_com&#39;vc.8.0.1.1" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="1.34" steps="21666"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="kronecker_indexes_com&#39;vc.8.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="kronecker_indexes_com&#39;vc.8.1.0" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.13" steps="3836"/></proof>
    </goal>
    <goal name="kronecker_indexes_com&#39;vc.8.1.1" expl="apply premises" proved="true">
    <transf name="assert" proved="true" arg1="((div j (columns n)) * columns n &lt; (columns m) * columns n)">
     <goal name="kronecker_indexes_com&#39;vc.8.1.1.0" expl="asserted formula" proved="true">
     <proof prover="9"><result status="valid" time="1.28" steps="21794"/></proof>
     </goal>
     <goal name="kronecker_indexes_com&#39;vc.8.1.1.1" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="1.28" steps="21666"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="kronecker_indexes_com&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.56" steps="214536"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="kronecker_assoc_pre&#39;vc" expl="VC for kronecker_assoc_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kronecker_assoc_pre&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="3.30" steps="54842"/></proof>
  </goal>
  <goal name="kronecker_assoc_pre&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="kronecker_assoc_pre&#39;vc.2" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures4">
   <goal name="kronecker_assoc_pre&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures">
    <goal name="kronecker_assoc_pre&#39;vc.2.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures1">
     <goal name="kronecker_assoc_pre&#39;vc.2.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures5">
      <goal name="kronecker_assoc_pre&#39;vc.2.0.0.0.0" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="(div (div i (rows o)) (rows n))" arg2="(div i (rows (kronecker n o)))">
       <goal name="kronecker_assoc_pre&#39;vc.2.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="replace" proved="true" arg1="(div (div j (columns o)) (columns n))" arg2="(div j (columns (kronecker n o)))">
        <goal name="kronecker_assoc_pre&#39;vc.2.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="mult_assoc_rev">
         <goal name="kronecker_assoc_pre&#39;vc.2.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="apply" proved="true" arg1="mult_eq_t">
          <goal name="kronecker_assoc_pre&#39;vc.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="mult_eq_t">
           <goal name="kronecker_assoc_pre&#39;vc.2.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="10"><result status="valid" time="0.19" steps="185535"/></proof>
           </goal>
           <goal name="kronecker_assoc_pre&#39;vc.2.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="9"><result status="valid" time="2.18" steps="44582"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="kronecker_assoc_pre&#39;vc.2.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="(rows (kronecker n o))" arg2="(rows o * rows n)">
           <goal name="kronecker_assoc_pre&#39;vc.2.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="(columns (kronecker n o))" arg2="(columns o * columns n)">
            <goal name="kronecker_assoc_pre&#39;vc.2.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="mod_mod_right">
             <goal name="kronecker_assoc_pre&#39;vc.2.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="mod_mod_right">
              <goal name="kronecker_assoc_pre&#39;vc.2.0.0.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="10"><result status="valid" time="0.20" steps="185535"/></proof>
              </goal>
              <goal name="kronecker_assoc_pre&#39;vc.2.0.0.0.0.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="10"><result status="valid" time="0.21" steps="185537"/></proof>
              </goal>
              <goal name="kronecker_assoc_pre&#39;vc.2.0.0.0.0.0.0.0.1.0.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="10"><result status="valid" time="0.45" steps="219930"/></proof>
              </goal>
              <goal name="kronecker_assoc_pre&#39;vc.2.0.0.0.0.0.0.0.1.0.0.0.3" expl="rewrite premises" proved="true">
              <proof prover="10"><result status="valid" time="0.46" steps="219945"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="kronecker_assoc_pre&#39;vc.2.0.0.0.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="10"><result status="valid" time="0.20" steps="185537"/></proof>
             </goal>
             <goal name="kronecker_assoc_pre&#39;vc.2.0.0.0.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
             <proof prover="10"><result status="valid" time="0.45" steps="219930"/></proof>
             </goal>
             <goal name="kronecker_assoc_pre&#39;vc.2.0.0.0.0.0.0.0.1.0.0.3" expl="rewrite premises" proved="true">
             <proof prover="10"><result status="valid" time="0.44" steps="219945"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="kronecker_assoc_pre&#39;vc.2.0.0.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
            <proof prover="10"><result status="valid" time="0.21" steps="185551"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="kronecker_assoc_pre&#39;vc.2.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
           <proof prover="10"><result status="valid" time="0.21" steps="185551"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="kronecker_assoc_pre&#39;vc.2.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="9"><result status="valid" time="0.34" steps="16230"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="kronecker_assoc_pre&#39;vc.2.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="9"><result status="valid" time="0.32" steps="16230"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="kronecker_assoc_pre&#39;vc.2.0.0.0.1" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="set_valid_index">
       <goal name="kronecker_assoc_pre&#39;vc.2.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="kronecker_assoc_pre&#39;vc.2.0.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="0.34" steps="15777"/></proof>
        </goal>
        <goal name="kronecker_assoc_pre&#39;vc.2.0.0.0.1.0.1" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="((div i (rows o)) * rows o &lt; (rows (kronecker m n)) * rows o)">
         <goal name="kronecker_assoc_pre&#39;vc.2.0.0.0.1.0.1.0" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="2.17" steps="44205"/></proof>
         </goal>
         <goal name="kronecker_assoc_pre&#39;vc.2.0.0.0.1.0.1.1" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="2.05" steps="44018"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="kronecker_assoc_pre&#39;vc.2.0.0.0.1.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="kronecker_assoc_pre&#39;vc.2.0.0.0.1.1.0" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="0.33" steps="15777"/></proof>
        </goal>
        <goal name="kronecker_assoc_pre&#39;vc.2.0.0.0.1.1.1" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="((div j (columns o)) * columns o &lt; (columns (kronecker m n)) * columns o)">
         <goal name="kronecker_assoc_pre&#39;vc.2.0.0.0.1.1.1.0" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="2.16" steps="44205"/></proof>
         </goal>
         <goal name="kronecker_assoc_pre&#39;vc.2.0.0.0.1.1.1.1" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="2.07" steps="44018"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="kronecker_assoc_pre&#39;vc.2.0.0.1" expl="rewrite premises" proved="true">
     <transf name="apply" proved="true" arg1="set_valid_index">
      <goal name="kronecker_assoc_pre&#39;vc.2.0.0.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="kronecker_assoc_pre&#39;vc.2.0.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.45" steps="219989"/></proof>
       </goal>
       <goal name="kronecker_assoc_pre&#39;vc.2.0.0.1.0.1" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="((div i (rows o)) * rows o &lt; (rows (kronecker m n)) * rows o)">
        <goal name="kronecker_assoc_pre&#39;vc.2.0.0.1.0.1.0" expl="asserted formula" proved="true">
        <proof prover="9"><result status="valid" time="2.05" steps="44205"/></proof>
        </goal>
        <goal name="kronecker_assoc_pre&#39;vc.2.0.0.1.0.1.1" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="0.47" steps="220202"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="kronecker_assoc_pre&#39;vc.2.0.0.1.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="kronecker_assoc_pre&#39;vc.2.0.0.1.1.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.47" steps="219989"/></proof>
       </goal>
       <goal name="kronecker_assoc_pre&#39;vc.2.0.0.1.1.1" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="((div j (columns o)) * columns o &lt; (columns (kronecker m n)) * columns o)">
        <goal name="kronecker_assoc_pre&#39;vc.2.0.0.1.1.1.0" expl="asserted formula" proved="true">
        <proof prover="9"><result status="valid" time="2.21" steps="44205"/></proof>
        </goal>
        <goal name="kronecker_assoc_pre&#39;vc.2.0.0.1.1.1.1" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="0.45" steps="220202"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="kronecker_assoc&#39;vc" expl="VC for kronecker_assoc" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kronecker_assoc&#39;vc.0" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="1.05" steps="15501"/></proof>
  </goal>
  <goal name="kronecker_assoc&#39;vc.1" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="1.10" steps="15890"/></proof>
  </goal>
  <goal name="kronecker_assoc&#39;vc.2" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="kronecker_assoc_pre">
   <goal name="kronecker_assoc&#39;vc.2.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="kronecker_assoc&#39;vc.2.0.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.41" steps="211632"/></proof>
    </goal>
    <goal name="kronecker_assoc&#39;vc.2.0.1" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="1.33" steps="19663"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="kronecker_assoc&#39;vc.2.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="kronecker_assoc&#39;vc.2.1.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.41" steps="211632"/></proof>
    </goal>
    <goal name="kronecker_assoc&#39;vc.2.1.1" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="1.13" steps="19755"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="kronecker_assoc&#39;vc.3" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="((kronecker (kronecker m n) o)  = (kronecker m (kronecker n o)))">
   <goal name="kronecker_assoc&#39;vc.3.0" expl="asserted formula" proved="true">
   <transf name="apply" proved="true" arg1="set_equal_mat">
    <goal name="kronecker_assoc&#39;vc.3.0.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.32" steps="199229"/></proof>
    </goal>
    <goal name="kronecker_assoc&#39;vc.3.0.1" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.31" steps="199229"/></proof>
    </goal>
    <goal name="kronecker_assoc&#39;vc.3.0.2" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.32" steps="199292"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="kronecker_assoc&#39;vc.3.1" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="0.32" steps="199566"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="kronecker_assoc&#39;vc.4" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="kronecker_assoc&#39;vc.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="op_assoc&#39;def">
    <goal name="kronecker_assoc&#39;vc.4.0.0" expl="VC for kronecker_assoc" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="kronecker_assoc&#39;vc.4.0.0.0" expl="VC for kronecker_assoc" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="kronecker_assoc&#39;vc.4.0.0.0.0" expl="VC for kronecker_assoc" proved="true">
      <transf name="apply" proved="true" arg1="set_equal_mat">
       <goal name="kronecker_assoc&#39;vc.4.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.34" steps="200836"/></proof>
       </goal>
       <goal name="kronecker_assoc&#39;vc.4.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.35" steps="200836"/></proof>
       </goal>
       <goal name="kronecker_assoc&#39;vc.4.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.37" steps="200898"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="kronecker_assoc_use&#39;vc" expl="VC for kronecker_assoc_use" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kronecker_assoc_use&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="kronecker_assoc_use&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="9"><result status="valid" time="0.93" steps="15669"/></proof>
   </goal>
   <goal name="kronecker_assoc_use&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="9"><result status="valid" time="0.94" steps="16059"/></proof>
   </goal>
   <goal name="kronecker_assoc_use&#39;vc.0.2" expl="apply premises" proved="true">
   <proof prover="9"><result status="valid" time="3.79" steps="60815"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="kronecker_assoc_use_rev&#39;vc" expl="VC for kronecker_assoc_use_rev" proved="true">
 <proof prover="10"><result status="valid" time="0.31" steps="192665"/></proof>
 </goal>
 <goal name="neutral_&#39;vc" expl="VC for neutral_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="neutral_&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="neutral_&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.91" steps="13350"/></proof>
   </goal>
   <goal name="neutral_&#39;vc.0.1" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="1.06" steps="13350"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="neutral_&#39;vc.1" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="neutral_&#39;vc.1.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.93" steps="13748"/></proof>
   </goal>
   <goal name="neutral_&#39;vc.1.1" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="1.06" steps="13748"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="neutral_&#39;vc.2" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="1.61" steps="462765"/></proof>
  </goal>
  <goal name="neutral_&#39;vc.3" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="neutral_&#39;vc.3.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="kronecker_values">
    <goal name="neutral_&#39;vc.3.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="mult_one_t">
     <goal name="neutral_&#39;vc.3.0.0.0" expl="assertion" proved="true">
     <transf name="replace" proved="true" arg1="(div i (rows kronecker_neutral))" arg2="i">
      <goal name="neutral_&#39;vc.3.0.0.0.0" expl="assertion" proved="true">
      <transf name="replace" proved="true" arg1="(div j (columns kronecker_neutral))" arg2="j">
       <goal name="neutral_&#39;vc.3.0.0.0.0.0" expl="assertion" proved="true">
       <proof prover="10"><result status="valid" time="0.19" steps="185285"/></proof>
       </goal>
       <goal name="neutral_&#39;vc.3.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="9"><result status="valid" time="1.49" steps="20774"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="neutral_&#39;vc.3.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="10"><result status="valid" time="0.21" steps="190198"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="neutral_&#39;vc.3.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.41" steps="213368"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="neutral_&#39;vc.3.0.1" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.41" steps="212303"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="neutral_&#39;vc.3.1" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="kronecker_values">
    <goal name="neutral_&#39;vc.3.1.0" expl="assertion" proved="true">
    <proof prover="0"><result status="valid" time="0.27"/></proof>
    </goal>
    <goal name="neutral_&#39;vc.3.1.1" expl="rewrite premises" proved="true">
    <transf name="replace" proved="true" arg1="(div i (rows m))" arg2="0">
     <goal name="neutral_&#39;vc.3.1.1.0" expl="rewrite premises" proved="true">
     <transf name="replace" proved="true" arg1="(div j (columns m))" arg2="0">
      <goal name="neutral_&#39;vc.3.1.1.0.0" expl="rewrite premises" proved="true">
      <transf name="replace" proved="true" arg1="(mod i (rows m))" arg2="i">
       <goal name="neutral_&#39;vc.3.1.1.0.0.0" expl="rewrite premises" proved="true">
       <transf name="replace" proved="true" arg1="(mod j (columns m))" arg2="j">
        <goal name="neutral_&#39;vc.3.1.1.0.0.0.0" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.44" steps="212303"/></proof>
        </goal>
        <goal name="neutral_&#39;vc.3.1.1.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="9"><result status="valid" time="0.12" steps="2397"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="neutral_&#39;vc.3.1.1.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="9"><result status="valid" time="0.13" steps="2397"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="neutral_&#39;vc.3.1.1.0.1" expl="equality hypothesis" proved="true">
      <proof prover="9"><result status="valid" time="0.13" steps="2409"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="neutral_&#39;vc.3.1.1.1" expl="equality hypothesis" proved="true">
     <proof prover="9"><result status="valid" time="0.12" steps="2409"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="neutral_&#39;vc.4" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.45" steps="214158"/></proof>
  </goal>
  <goal name="neutral_&#39;vc.5" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="(kronecker kronecker_neutral m)" arg2="m">
   <goal name="neutral_&#39;vc.5.0" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="0.33" steps="200160"/></proof>
   </goal>
   <goal name="neutral_&#39;vc.5.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="set_equal_mat">
    <goal name="neutral_&#39;vc.5.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="neutral_&#39;vc.5.1.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.20" steps="185604"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="neutral_&#39;vc.5.1.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="neutral_&#39;vc.5.1.1.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.21" steps="185604"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="neutral_&#39;vc.5.1.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="neutral_&#39;vc.5.1.2.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.62" steps="217025"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="neutral_&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.32" steps="200179"/></proof>
  </goal>
  <goal name="neutral_&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.33" steps="200209"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="neutral&#39;vc" expl="VC for neutral" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="neutral&#39;vc.0" expl="assertion" proved="true">
  <proof prover="7"><result status="valid" time="2.77" steps="4173768"/></proof>
  </goal>
  <goal name="neutral&#39;vc.1" expl="assertion" proved="true">
  <proof prover="7"><result status="valid" time="2.79" steps="4173171"/></proof>
  </goal>
  <goal name="neutral&#39;vc.2" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(assoc kronecker)">
   <goal name="neutral&#39;vc.2.0" expl="asserted formula" proved="true">
   <proof prover="10"><result status="valid" time="0.70" steps="250875"/></proof>
   </goal>
   <goal name="neutral&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.64" steps="253013"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="neutral&#39;vc.3" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="neutral&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="has_neutral&#39;def">
    <goal name="neutral&#39;vc.3.0.0" expl="VC for neutral" proved="true">
    <transf name="exists" proved="true" arg1="kronecker_neutral">
     <goal name="neutral&#39;vc.3.0.0.0" proved="true">
     <proof prover="10"><result status="valid" time="0.43" steps="242345"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="neutral&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.58" steps="245594"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="kronecker_equal&#39;vc" expl="VC for kronecker_equal" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kronecker_equal&#39;vc.0" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.35" steps="200329"/></proof>
  </goal>
  <goal name="kronecker_equal&#39;vc.1" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.34" steps="200360"/></proof>
  </goal>
  <goal name="kronecker_equal&#39;vc.2" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="kronecker_equal&#39;vc.2.0" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="0.34" steps="200591"/></proof>
   </goal>
   <goal name="kronecker_equal&#39;vc.2.1" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="0.33" steps="200591"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="kronecker_equal&#39;vc.3" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="kronecker_equal&#39;vc.3.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.12" steps="2977"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="kronecker_equal&#39;vc.4" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="kronecker_equal&#39;vc.4.0" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="0.44" steps="216068"/></proof>
   </goal>
   <goal name="kronecker_equal&#39;vc.4.1" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="0.44" steps="216171"/></proof>
   </goal>
   <goal name="kronecker_equal&#39;vc.4.2" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.11" steps="2533"/></proof>
   </goal>
   <goal name="kronecker_equal&#39;vc.4.3" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="1.45" steps="21393"/></proof>
   </goal>
   <goal name="kronecker_equal&#39;vc.4.4" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="0.34" steps="201487"/></proof>
   </goal>
   <goal name="kronecker_equal&#39;vc.4.5" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="0.34" steps="201431"/></proof>
   </goal>
   <goal name="kronecker_equal&#39;vc.4.6" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="0.35" steps="201797"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="kronecker_equal&#39;vc.5" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.61" steps="217545"/></proof>
  </goal>
  <goal name="kronecker_equal&#39;vc.6" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="kronecker_equal&#39;vc.6.0" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="0.45" steps="216774"/></proof>
   </goal>
   <goal name="kronecker_equal&#39;vc.6.1" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="0.44" steps="216778"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="kronecker_equal&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.33" steps="201889"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="kron_id&#39;vc" expl="VC for kron_id" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kron_id&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="kron_id&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="rewrite" proved="true" arg1="kronecker_rows">
    <goal name="kron_id&#39;vc.0.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="identity_rows">
     <goal name="kron_id&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="identity_rows">
      <goal name="kron_id&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="identity_rows">
       <goal name="kron_id&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="0.12" steps="3015"/></proof>
       </goal>
       <goal name="kron_id&#39;vc.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.32" steps="193108"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="kron_id&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.21" steps="179147"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="kron_id&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.19" steps="179147"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="kron_id&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="rewrite" proved="true" arg1="identity_columns">
    <goal name="kron_id&#39;vc.0.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="kronecker_columns">
     <goal name="kron_id&#39;vc.0.1.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="identity_columns">
      <goal name="kron_id&#39;vc.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="identity_columns">
       <goal name="kron_id&#39;vc.0.1.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="0.13" steps="3015"/></proof>
       </goal>
       <goal name="kron_id&#39;vc.0.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.20" steps="179147"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="kron_id&#39;vc.0.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.19" steps="179147"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="kron_id&#39;vc.0.1.1" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.31" steps="193108"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="kron_id&#39;vc.0.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="kron_id&#39;vc.0.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="kronecker_values">
     <goal name="kron_id&#39;vc.0.2.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="identity&#39;def">
      <goal name="kron_id&#39;vc.0.2.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="identity&#39;def">
       <goal name="kron_id&#39;vc.0.2.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="identity&#39;def">
        <goal name="kron_id&#39;vc.0.2.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="assert_make">
         <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="assert_make">
          <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="assert_make">
           <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="eliminate_if" proved="true" >
             <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="10"><result status="valid" time="0.63" steps="263106"/></proof>
              </goal>
              <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="assert_make_r" arg2="in" arg3="H1">
               <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="assert_make_r" arg2="in" arg3="H2">
                <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="assert_make_c" arg2="in" arg3="H2">
                 <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="assert_make_c" arg2="in" arg3="H1">
                  <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                  <proof prover="9"><result status="valid" time="0.14" steps="3183"/></proof>
                  </goal>
                  <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="10"><result status="valid" time="0.77" steps="277223"/></proof>
                  </goal>
                  <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.1.0.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="10"><result status="valid" time="0.78" steps="277223"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                 <proof prover="10"><result status="valid" time="0.61" steps="277632"/></proof>
                 </goal>
                 <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
                 <proof prover="10"><result status="valid" time="0.78" steps="277632"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                <proof prover="10"><result status="valid" time="0.76" steps="277807"/></proof>
                </goal>
                <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
                <proof prover="10"><result status="valid" time="0.76" steps="277807"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
               <proof prover="10"><result status="valid" time="0.82" steps="278129"/></proof>
               </goal>
               <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.1.2" expl="rewrite premises" proved="true">
               <proof prover="10"><result status="valid" time="0.80" steps="278129"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
              <proof prover="9"><result status="valid" time="3.09" steps="32768"/></proof>
              </goal>
              <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
              <proof prover="10"><result status="valid" time="0.66" steps="263199"/></proof>
              </goal>
              <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
              <proof prover="7"><result status="valid" time="0.17" steps="650916"/></proof>
              </goal>
              <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
              <proof prover="10"><result status="valid" time="0.66" steps="263199"/></proof>
              </goal>
              <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="assert_make_r" arg2="in" arg3="H1">
               <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.6.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="assert_make_c" arg2="in" arg3="H1">
                <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.6.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="assert_make_c" arg2="in" arg3="H2">
                 <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.6.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="assert_make_r" arg2="in" arg3="H2">
                  <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.6.0.0.0.0" expl="apply premises" proved="true">
                  <proof prover="10"><result status="valid" time="0.22" steps="189641"/></proof>
                  </goal>
                  <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.6.0.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="10"><result status="valid" time="0.30" steps="250974"/></proof>
                  </goal>
                  <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.6.0.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="10"><result status="valid" time="0.32" steps="250974"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.6.0.0.1" expl="rewrite premises" proved="true">
                 <proof prover="10"><result status="valid" time="0.31" steps="250922"/></proof>
                 </goal>
                 <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.6.0.0.2" expl="rewrite premises" proved="true">
                 <proof prover="10"><result status="valid" time="0.30" steps="250922"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.6.0.1" expl="rewrite premises" proved="true">
                <proof prover="10"><result status="valid" time="0.64" steps="277830"/></proof>
                </goal>
                <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.6.0.2" expl="rewrite premises" proved="true">
                <proof prover="10"><result status="valid" time="0.63" steps="277830"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.6.1" expl="rewrite premises" proved="true">
               <proof prover="10"><result status="valid" time="0.63" steps="278131"/></proof>
               </goal>
               <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.6.2" expl="rewrite premises" proved="true">
               <proof prover="10"><result status="valid" time="0.81" steps="278131"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
              <proof prover="10"><result status="valid" time="0.49" steps="263279"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="(power 2 (m + n))" arg2="(rows (kronecker (identity m) (identity n)))">
            <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
            <proof prover="10"><result status="valid" time="0.61" steps="212901"/></proof>
            </goal>
            <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
            <transf name="rewrite" proved="true" arg1="kronecker_rows">
             <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.1.1.0" expl="equality hypothesis" proved="true">
             <transf name="rewrite" proved="true" arg1="identity_rows">
              <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.1.1.0.0" expl="equality hypothesis" proved="true">
              <transf name="rewrite" proved="true" arg1="identity_rows">
               <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.1.1.0.0.0" expl="equality hypothesis" proved="true">
               <proof prover="9"><result status="valid" time="0.14" steps="3074"/></proof>
               </goal>
               <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.1.1.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="10"><result status="valid" time="0.19" steps="182866"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
              <proof prover="10"><result status="valid" time="0.20" steps="182866"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="(power 2 (m + n))" arg2="(columns (kronecker (identity m) (identity n)))">
            <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
            <proof prover="10"><result status="valid" time="0.44" steps="212921"/></proof>
            </goal>
            <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.2.1" expl="equality hypothesis" proved="true">
            <transf name="rewrite" proved="true" arg1="kronecker_columns">
             <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.2.1.0" expl="equality hypothesis" proved="true">
             <transf name="rewrite" proved="true" arg1="identity_columns">
              <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.2.1.0.0" expl="equality hypothesis" proved="true">
              <transf name="rewrite" proved="true" arg1="identity_columns">
               <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.2.1.0.0.0" expl="equality hypothesis" proved="true">
               <proof prover="9"><result status="valid" time="0.13" steps="3074"/></proof>
               </goal>
               <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.2.1.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="10"><result status="valid" time="0.19" steps="182866"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.0.2.1.0.1" expl="rewrite premises" proved="true">
              <proof prover="10"><result status="valid" time="0.22" steps="182866"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="1.89" steps="551195"/></proof>
          </goal>
          <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="1.88" steps="551192"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <transf name="rewrite" proved="true" arg1="assert_make_r">
          <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
           <proof prover="9"><result status="valid" time="0.09" steps="2523"/></proof>
           </goal>
           <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
           <transf name="instantiate" proved="true" arg1="get_valid_index_params" arg2="(kronecker (identity m) (identity n)),(power  2 (m+n)),(power  2 (m+n)),i,j">
            <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
            <transf name="assert" proved="true" arg1="(i &lt; power 2 (m+n))">
             <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.1.0.1.0.0" expl="asserted formula" proved="true">
             <transf name="split_all_full" proved="true" >
              <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.1.0.1.0.0.0" expl="asserted formula" proved="true">
              <transf name="apply" proved="true" arg1="Hinst2">
               <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="kronecker_rows">
                <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.1.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="9"><result status="valid" time="0.26" steps="8486"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.1.0.1.0.0.0.1" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="kronecker_columns">
                <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.1.0.1.0.0.0.1.0" expl="apply premises" proved="true">
                <proof prover="9"><result status="valid" time="0.40" steps="8545"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.1.0.1.0.0.0.2" expl="apply premises" proved="true">
               <proof prover="10"><result status="valid" time="0.22" steps="209594"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.1.0.1.0.1" expl="rewrite premises" proved="true">
             <transf name="assert" proved="true" arg1="(div i (power 2 n) * power 2 n &lt; power 2 m * power 2 n)">
              <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.1.0.1.0.1.0" expl="asserted formula" proved="true">
              <proof prover="9"><result status="valid" time="1.66" steps="24408"/></proof>
              </goal>
              <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.1.0.1.0.1.1" expl="rewrite premises" proved="true">
              <proof prover="9"><result status="valid" time="1.42" steps="24274"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="0.45" steps="210793"/></proof>
          </goal>
          <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.1.2" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="0.58" steps="210793"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
          <proof prover="9"><result status="valid" time="0.09" steps="2548"/></proof>
          </goal>
          <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.2.1" expl="rewrite premises" proved="true">
          <transf name="rewrite" proved="true" arg1="assert_make_c">
           <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.2.1.0" expl="rewrite premises" proved="true">
           <transf name="instantiate" proved="true" arg1="get_valid_index_params" arg2="(kronecker (identity m) (identity n)),(power  2 (m+n)),(power  2 (m+n)),i,j">
            <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.2.1.0.0" expl="rewrite premises" proved="true">
            <transf name="assert" proved="true" arg1="(i &lt; power 2 (m+n))">
             <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.2.1.0.0.0" expl="asserted formula" proved="true">
             <transf name="split_all_full" proved="true" >
              <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.2.1.0.0.0.0" expl="asserted formula" proved="true">
              <transf name="apply" proved="true" arg1="Hinst2">
               <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.2.1.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="kronecker_rows">
                <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.2.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="9"><result status="valid" time="0.29" steps="8486"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.2.1.0.0.0.0.1" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="kronecker_columns">
                <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.2.1.0.0.0.0.1.0" expl="apply premises" proved="true">
                <proof prover="9"><result status="valid" time="0.32" steps="8545"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.2.1.0.0.0.0.2" expl="apply premises" proved="true">
               <proof prover="10"><result status="valid" time="0.22" steps="209594"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.2.1.0.0.1" expl="rewrite premises" proved="true">
             <transf name="assert" proved="true" arg1="(div j (power 2 n) * power 2 n &lt; power 2 m * power 2 n)">
              <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.2.1.0.0.1.0" expl="asserted formula" proved="true">
              <proof prover="9"><result status="valid" time="1.50" steps="24409"/></proof>
              </goal>
              <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.2.1.0.0.1.1" expl="rewrite premises" proved="true">
              <proof prover="9"><result status="valid" time="1.48" steps="24275"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.2.1.1" expl="rewrite premises" proved="true">
           <proof prover="10"><result status="valid" time="0.42" steps="210793"/></proof>
           </goal>
           <goal name="kron_id&#39;vc.0.2.0.0.0.0.0.2.1.2" expl="rewrite premises" proved="true">
           <proof prover="10"><result status="valid" time="0.57" steps="210793"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="kron_id&#39;vc.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.46" steps="196938"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="kron_id&#39;vc.0.2.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.19" steps="182866"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="kron_id&#39;vc.0.2.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.21" steps="182866"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="kron_id&#39;vc.0.2.0.1" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.21" steps="182866"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="frows&#39;vc" expl="VC for frows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="frows&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.69" steps="237157"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="fcolumns&#39;vc" expl="VC for fcolumns" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="fcolumns&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.66" steps="237297"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="const_fcol&#39;vc" expl="VC for const_fcol" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="const_fcol&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.87" steps="292999"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="const_frows&#39;vc" expl="VC for const_frows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="const_frows&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.84" steps="293094"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Matrix_product" proved="true">
 <goal name="mat_mult_no_bound&#39;vc" expl="VC for mat_mult_no_bound" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_mult_no_bound&#39;vc.0" expl="assertion" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="mat_mult_no_bound&#39;vc.0.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="ind_sum&#39;def">
    <goal name="mat_mult_no_bound&#39;vc.0.0.0" expl="assertion" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mat_mult_no_bound&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.85" steps="322228"/></proof>
  </goal>
  <goal name="mat_mult_no_bound&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.85" steps="322250"/></proof>
  </goal>
  <goal name="mat_mult_no_bound&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.30" steps="291956"/></proof>
  </goal>
  <goal name="mat_mult_no_bound&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.44" steps="291962"/></proof>
  </goal>
  <goal name="mat_mult_no_bound&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.72" steps="309883"/></proof>
  </goal>
  <goal name="mat_mult_no_bound&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.74" steps="309907"/></proof>
  </goal>
  <goal name="mat_mult_no_bound&#39;vc.7" expl="postcondition" proved="true">
  <transf name="eliminate_if" proved="true" >
   <goal name="mat_mult_no_bound&#39;vc.7.0" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="H2">
    <goal name="mat_mult_no_bound&#39;vc.7.0.0" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(columns m = rows n)
">
     <goal name="mat_mult_no_bound&#39;vc.7.0.0.0" expl="true case (postcondition)" proved="true">
     <transf name="destruct" proved="true" arg1="H3">
      <goal name="mat_mult_no_bound&#39;vc.7.0.0.0.0" expl="destruct premise" proved="true">
      <proof prover="10"><result status="valid" time="0.33" steps="294248"/></proof>
      </goal>
      <goal name="mat_mult_no_bound&#39;vc.7.0.0.0.1" expl="true case (postcondition)" proved="true">
      <transf name="eliminate_let" proved="true" >
       <goal name="mat_mult_no_bound&#39;vc.7.0.0.0.1.0" expl="true case (postcondition)" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="mat_mult_no_bound&#39;vc.7.0.0.0.1.0.0" expl="true case (postcondition)" proved="true">
        <transf name="rewrite" proved="true" arg1="H8">
         <goal name="mat_mult_no_bound&#39;vc.7.0.0.0.1.0.0.0" expl="true case (postcondition)" proved="true">
         <transf name="rewrite" proved="true" arg1="H15">
          <goal name="mat_mult_no_bound&#39;vc.7.0.0.0.1.0.0.0.0" expl="true case (postcondition)" proved="true">
          <transf name="compute_specified" proved="true" >
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_mult_no_bound&#39;vc.7.0.0.1" expl="false case (postcondition)" proved="true">
     <proof prover="10"><result status="valid" time="0.33" steps="294604"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_mult&#39;vc" expl="VC for mat_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_mult&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="mat_mult&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="close_epsilon" proved="true" >
    <goal name="mat_mult&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="10"><result status="valid" time="0.37" steps="305891"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mat_mult&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.25" steps="215352"/></proof>
  </goal>
  <goal name="mat_mult&#39;vc.2" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures2">
   <goal name="mat_mult&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="compute_specified" proved="true" >
   </transf>
   </goal>
   <goal name="mat_mult&#39;vc.2.1" expl="rewrite premises" proved="true">
   <proof prover="10"><result status="valid" time="0.24" steps="215371"/></proof>
   </goal>
   <goal name="mat_mult&#39;vc.2.2" expl="rewrite premises" proved="true">
   <proof prover="10"><result status="valid" time="0.24" steps="215371"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="correct_mat_mult&#39;vc" expl="VC for correct_mat_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="correct_mat_mult&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mat_mult&#39;def">
   <goal name="correct_mat_mult&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="correct_mat_mult&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_if" proved="true" >
     <goal name="correct_mat_mult&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="correct_mat_mult&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_mult_no_bound&#39;def1">
       <goal name="correct_mat_mult&#39;vc.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="compute_specified" proved="true" >
       </transf>
       </goal>
       <goal name="correct_mat_mult&#39;vc.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.25" steps="222776"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="correct_mat_mult&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="10"><result status="valid" time="0.22" steps="187174"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_mult_values&#39;vc" expl="VC for mat_mult_values" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_mult_values&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="mat_mult_values&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="mat_mult&#39;spec">
    <goal name="mat_mult_values&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.24" steps="214727"/></proof>
    </goal>
    <goal name="mat_mult_values&#39;vc.0.0.1" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.24" steps="214727"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_mult_columns&#39;vc" expl="VC for mat_mult_columns" proved="true">
 <proof prover="10"><result status="valid" time="0.36" steps="202469"/></proof>
 </goal>
 <goal name="mat_mult_rows&#39;vc" expl="VC for mat_mult_rows" proved="true">
 <proof prover="10"><result status="valid" time="0.36" steps="202543"/></proof>
 </goal>
 <goal name="mat_mult_values_quant&#39;vc" expl="VC for mat_mult_values_quant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_mult_values_quant&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="mat_mult_values">
   <goal name="mat_mult_values_quant&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.21" steps="188078"/></proof>
   </goal>
   <goal name="mat_mult_values_quant&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.21" steps="188078"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="int_mat_prod&#39;vc" expl="VC for int_mat_prod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_mat_prod&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="10"><result status="valid" time="0.24" steps="214162"/></proof>
  </goal>
  <goal name="int_mat_prod&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.55" steps="228895"/></proof>
  </goal>
  <goal name="int_mat_prod&#39;vc.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="int_mat_prod&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.80" steps="488171"/></proof>
   </goal>
   <goal name="int_mat_prod&#39;vc.2.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.74" steps="241028"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="int_mat_prod&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.79" steps="275348"/></proof>
  </goal>
  <goal name="int_mat_prod&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.61" steps="275136"/></proof>
  </goal>
  <goal name="int_mat_prod&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.73" steps="273517"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="int_mat_prod_zero&#39;vc" expl="VC for int_mat_prod_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_mat_prod_zero&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.53" steps="242588"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="int_mat_prod_plus_one&#39;vc" expl="VC for int_mat_prod_plus_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_mat_prod_plus_one&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="int_mat_prod_plus_one&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="int_mat_prod&#39;def">
    <goal name="int_mat_prod_plus_one&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(columns (int_mat_prod f i (j - 1)) = rows (f j))">
     <goal name="int_mat_prod_plus_one&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="replace" proved="true" arg1="(rows (f j))" arg2="(rows(f i))">
      <goal name="int_mat_prod_plus_one&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="replace" proved="true" arg1="(rows (f i))" arg2="(columns (f i))">
       <goal name="int_mat_prod_plus_one&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="int_mat_prod&#39;spec1">
        <goal name="int_mat_prod_plus_one&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="0.28" steps="245485"/></proof>
        </goal>
        <goal name="int_mat_prod_plus_one&#39;vc.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="int_mat_prod_plus_one&#39;vc.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="0.76" steps="274335"/></proof>
         </goal>
         <goal name="int_mat_prod_plus_one&#39;vc.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
         <transf name="instantiate" proved="true" arg1="Requires" arg2="k,k&#39;">
          <goal name="int_mat_prod_plus_one&#39;vc.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="Hinst">
           <goal name="int_mat_prod_plus_one&#39;vc.0.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
           <proof prover="10"><result status="valid" time="0.58" steps="261404"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="int_mat_prod_plus_one&#39;vc.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="instantiate" proved="true" arg1="Requires" arg2="j,i">
        <goal name="int_mat_prod_plus_one&#39;vc.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
        <proof prover="10"><result status="valid" time="0.58" steps="261281"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="int_mat_prod_plus_one&#39;vc.0.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="10"><result status="valid" time="0.77" steps="273624"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="int_mat_prod_plus_one&#39;vc.0.0.0.1" expl="postcondition" proved="true">
     <proof prover="10"><result status="valid" time="0.62" steps="261730"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="int_mat_prod_plus_one&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.42" steps="261209"/></proof>
    </goal>
    <goal name="int_mat_prod_plus_one&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="int_mat_prod_plus_one&#39;vc.0.0.2.0" expl="rewrite premises" proved="true">
     <transf name="instantiate" proved="true" arg1="Requires" arg2="k,k&#39;">
      <goal name="int_mat_prod_plus_one&#39;vc.0.0.2.0.0" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.74" steps="273757"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="int_mat_prod_plus_one&#39;vc.0.0.2.1" expl="rewrite premises" proved="true">
     <transf name="instantiate" proved="true" arg1="Requires" arg2="k,k&#39;">
      <goal name="int_mat_prod_plus_one&#39;vc.0.0.2.1.0" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.26" steps="245582"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="int_mat_prod_plus_one&#39;vc.0.0.3" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.30" steps="250532"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="int_mat_prod_eq&#39;vc" expl="VC for int_mat_prod_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_mat_prod_eq&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.52" steps="230635"/></proof>
  </goal>
  <goal name="int_mat_prod_eq&#39;vc.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="int_mat_prod_eq&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.73" steps="490072"/></proof>
   </goal>
   <goal name="int_mat_prod_eq&#39;vc.1.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.66" steps="242757"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="int_mat_prod_eq&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.52" steps="230710"/></proof>
  </goal>
  <goal name="int_mat_prod_eq&#39;vc.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="int_mat_prod_eq&#39;vc.3.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.19" steps="676123"/></proof>
   </goal>
   <goal name="int_mat_prod_eq&#39;vc.3.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.69" steps="505291"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="int_mat_prod_eq&#39;vc.4" expl="variant decrease" proved="true">
  <proof prover="10"><result status="valid" time="0.24" steps="215835"/></proof>
  </goal>
  <goal name="int_mat_prod_eq&#39;vc.5" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.38" steps="230777"/></proof>
  </goal>
  <goal name="int_mat_prod_eq&#39;vc.6" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="int_mat_prod_eq&#39;vc.6.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.13" steps="2570"/></proof>
   </goal>
   <goal name="int_mat_prod_eq&#39;vc.6.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.71" steps="244129"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="int_mat_prod_eq&#39;vc.7" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.66" steps="246061"/></proof>
  </goal>
  <goal name="int_mat_prod_eq&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.69" steps="294092"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mat_mult_id&#39;vc" expl="VC for mat_mult_id" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_mult_id&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="mat_mult_id&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_mult_rows">
    <goal name="mat_mult_id&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.19" steps="190540"/></proof>
    </goal>
    <goal name="mat_mult_id&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="mat_mult_id&#39;vc.0.0.1.0" expl="rewrite premises" proved="true">
     <transf name="rewrite" proved="true" arg1="identity&#39;spec2">
      <goal name="mat_mult_id&#39;vc.0.0.1.0.0" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.23" steps="216406"/></proof>
      </goal>
      <goal name="mat_mult_id&#39;vc.0.0.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.23" steps="216406"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_mult_id&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.61" steps="217855"/></proof>
   </goal>
   <goal name="mat_mult_id&#39;vc.0.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="mat_mult_id&#39;vc.0.2.0" expl="apply premises" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="mat_mult_id&#39;vc.0.2.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="mat_mult_values">
      <goal name="mat_mult_id&#39;vc.0.2.0.0.0" expl="apply premises" proved="true">
      <transf name="instantiate" proved="true" arg1="ind_sum_null_but_maybe_one_elt" arg2="(fun (k:int) -&gt; get m i k *. get (identity n) k j),0,(columns m),j">
       <goal name="mat_mult_id&#39;vc.0.2.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="Hinst">
        <goal name="mat_mult_id&#39;vc.0.2.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="mat_mult_id&#39;vc.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="0.67" steps="252301"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="mat_mult_id&#39;vc.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_mult_id&#39;vc.0.2.0.0.0.0.1.0" proved="true">
         <proof prover="10"><result status="valid" time="0.49" steps="248076"/></proof>
         </goal>
         <goal name="mat_mult_id&#39;vc.0.2.0.0.0.0.1.1" proved="true">
         <proof prover="10"><result status="valid" time="0.65" steps="248400"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="mat_mult_id&#39;vc.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_mult_id&#39;vc.0.2.0.0.0.0.2.0" expl="rewrite premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="mat_mult_id&#39;vc.0.2.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="0.69" steps="252625"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="mat_mult_id&#39;vc.0.2.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.65" steps="246806"/></proof>
      </goal>
      <goal name="mat_mult_id&#39;vc.0.2.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.22" steps="218320"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="id_mat_mult&#39;vc" expl="VC for id_mat_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="id_mat_mult&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="id_mat_mult&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.60" steps="217936"/></proof>
   </goal>
   <goal name="id_mat_mult&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.58" steps="217658"/></proof>
   </goal>
   <goal name="id_mat_mult&#39;vc.0.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="id_mat_mult&#39;vc.0.2.0" expl="apply premises" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="id_mat_mult&#39;vc.0.2.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="mat_mult_values">
      <goal name="id_mat_mult&#39;vc.0.2.0.0.0" expl="apply premises" proved="true">
      <transf name="instantiate" proved="true" arg1="ind_sum_null_but_maybe_one_elt" arg2="(fun (k:int) -&gt; get (identity n) i k *. get m k j),0,(columns (identity n)),i">
       <goal name="id_mat_mult&#39;vc.0.2.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="Hinst">
        <goal name="id_mat_mult&#39;vc.0.2.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="id_mat_mult&#39;vc.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="0.71" steps="253006"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="id_mat_mult&#39;vc.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="id_mat_mult&#39;vc.0.2.0.0.0.0.1.0" proved="true">
         <proof prover="10"><result status="valid" time="0.68" steps="248568"/></proof>
         </goal>
         <goal name="id_mat_mult&#39;vc.0.2.0.0.0.0.1.1" proved="true">
         <proof prover="10"><result status="valid" time="0.63" steps="249076"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="id_mat_mult&#39;vc.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="id_mat_mult&#39;vc.0.2.0.0.0.0.2.0" expl="rewrite premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="id_mat_mult&#39;vc.0.2.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="0.69" steps="253159"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="id_mat_mult&#39;vc.0.2.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.64" steps="246927"/></proof>
      </goal>
      <goal name="id_mat_mult&#39;vc.0.2.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.23" steps="218456"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_mult_eq&#39;vc" expl="VC for mat_mult_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_mult_eq&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.23" steps="195498"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Matrix_addition" proved="true">
 <goal name="add_mat&#39;vc" expl="VC for add_mat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_mat&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="add_mat&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.58" steps="277074"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="add_mat&#39;vc.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="add_mat&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.58" steps="277091"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="add_mat&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="add_mat&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.27" steps="248831"/></proof>
   </goal>
   <goal name="add_mat&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.26" steps="248831"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="add_mat&#39;vc.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="add_mat&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.28" steps="248837"/></proof>
   </goal>
   <goal name="add_mat&#39;vc.3.1" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.26" steps="248837"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="add_mat&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.75" steps="278535"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_mat_equal&#39;vc" expl="VC for add_mat_equal" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_mat_equal&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.23" steps="196229"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_value&#39;vc" expl="VC for add_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_value&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.35" steps="206642"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_values&#39;vc" expl="VC for add_values" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_values&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.35" steps="206888"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_mat_null_left&#39;vc" expl="VC for add_mat_null_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_mat_null_left&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.21" steps="192125"/></proof>
  </goal>
  <goal name="add_mat_null_left&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.20" steps="192128"/></proof>
  </goal>
  <goal name="add_mat_null_left&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.31" steps="206720"/></proof>
  </goal>
  <goal name="add_mat_null_left&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.32" steps="206737"/></proof>
  </goal>
  <goal name="add_mat_null_left&#39;vc.4" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="add_mat_null_left&#39;vc.4.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="zero_add_t">
    <goal name="add_mat_null_left&#39;vc.4.0.0" expl="apply premises" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="add_mat_null_left&#39;vc.4.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="null_mat&#39;def" arg2="in" arg3="Requires2">
      <goal name="add_mat_null_left&#39;vc.4.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="Requires2">
       <goal name="add_mat_null_left&#39;vc.4.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.46" steps="221038"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="add_mat_null_left&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.22" steps="192496"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_mat_null_right&#39;vc" expl="VC for add_mat_null_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_mat_null_right&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.21" steps="192235"/></proof>
  </goal>
  <goal name="add_mat_null_right&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.22" steps="192238"/></proof>
  </goal>
  <goal name="add_mat_null_right&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.23" steps="192595"/></proof>
  </goal>
  <goal name="add_mat_null_right&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.22" steps="192598"/></proof>
  </goal>
  <goal name="add_mat_null_right&#39;vc.4" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="add_mat_null_right&#39;vc.4.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="add_zero_t">
    <goal name="add_mat_null_right&#39;vc.4.0.0" expl="apply premises" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="add_mat_null_right&#39;vc.4.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="null_mat&#39;def" arg2="in" arg3="Requires2">
      <goal name="add_mat_null_right&#39;vc.4.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="Requires2">
       <goal name="add_mat_null_right&#39;vc.4.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.60" steps="221167"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="add_mat_null_right&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.20" steps="192606"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_equal_columns_elt&#39;vc" expl="VC for set_equal_columns_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_equal_columns_elt&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.22" steps="192562"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_equal_rows_elt&#39;vc" expl="VC for set_equal_rows_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_equal_rows_elt&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.21" steps="192657"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_columns&#39;vc" expl="VC for add_columns" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_columns&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.34" steps="207139"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_rows&#39;vc" expl="VC for add_rows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_rows&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.33" steps="207239"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_equal_dim_elt&#39;vc" expl="VC for set_equal_dim_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_equal_dim_elt&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.20" steps="192683"/></proof>
  </goal>
  <goal name="set_equal_dim_elt&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.21" steps="192686"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_dim_add&#39;vc" expl="VC for set_dim_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_dim_add&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.36" steps="207595"/></proof>
  </goal>
  <goal name="set_dim_add&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.38" steps="207615"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_mat_eq&#39;vc" expl="VC for add_mat_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_mat_eq&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.23" steps="197954"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_mat_comm&#39;vc" expl="VC for add_mat_comm" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_mat_comm&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.20" steps="193282"/></proof>
  </goal>
  <goal name="add_mat_comm&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.21" steps="193293"/></proof>
  </goal>
  <goal name="add_mat_comm&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.22" steps="193651"/></proof>
  </goal>
  <goal name="add_mat_comm&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.22" steps="193654"/></proof>
  </goal>
  <goal name="add_mat_comm&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.33" steps="208024"/></proof>
  </goal>
  <goal name="add_mat_comm&#39;vc.5" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.34" steps="208041"/></proof>
  </goal>
  <goal name="add_mat_comm&#39;vc.6" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.47" steps="226475"/></proof>
  </goal>
  <goal name="add_mat_comm&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.21" steps="193767"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_mat_eq_rev&#39;vc" expl="VC for add_mat_eq_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_mat_eq_rev&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.35" steps="208051"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_neutral&#39;vc" expl="VC for add_neutral" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_neutral&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="add_neutral&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.59" steps="214319"/></proof>
   </goal>
   <goal name="add_neutral&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.43" steps="214319"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="add_neutral&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.45" steps="221569"/></proof>
  </goal>
  <goal name="add_neutral&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.46" steps="220552"/></proof>
  </goal>
  <goal name="add_neutral&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.58" steps="220701"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="distr_1_pre&#39;vc" expl="VC for distr_1_pre" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="distr_1_pre&#39;vc.0" expl="VC for distr_1_pre" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="distr_1_pre&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.33" steps="208170"/></proof>
   </goal>
   <goal name="distr_1_pre&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.25" steps="222080"/></proof>
   </goal>
   <goal name="distr_1_pre&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.24" steps="222267"/></proof>
   </goal>
   <goal name="distr_1_pre&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.24" steps="222270"/></proof>
   </goal>
   <goal name="distr_1_pre&#39;vc.0.4" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.37" steps="237832"/></proof>
   </goal>
   <goal name="distr_1_pre&#39;vc.0.5" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.39" steps="237849"/></proof>
   </goal>
   <goal name="distr_1_pre&#39;vc.0.6" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.22" steps="222394"/></proof>
   </goal>
   <goal name="distr_1_pre&#39;vc.0.7" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.22" steps="222564"/></proof>
   </goal>
   <goal name="distr_1_pre&#39;vc.0.8" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.70" steps="256206"/></proof>
   </goal>
   <goal name="distr_1_pre&#39;vc.0.9" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.51" steps="238102"/></proof>
   </goal>
   <goal name="distr_1_pre&#39;vc.0.10" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.72" steps="257764"/></proof>
   </goal>
   <goal name="distr_1_pre&#39;vc.0.11" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.53" steps="238205"/></proof>
   </goal>
   <goal name="distr_1_pre&#39;vc.0.12" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.70" steps="257807"/></proof>
   </goal>
   <goal name="distr_1_pre&#39;vc.0.13" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures1">
    <goal name="distr_1_pre&#39;vc.0.13.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures4">
     <goal name="distr_1_pre&#39;vc.0.13.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="( ind_sum (fun (k:int) -&gt; get (add_mat m n) i k *. get o k j) 0
  (columns (add_mat m n)))" arg2="(ind_sum
  (fun (k:int) -&gt;
    ((fun (k1:int) -&gt; get m i k1 *. get o k1 j) @ k)
    +. ((fun (k1:int) -&gt; get n i k1 *. get o k1 j) @ k))
  0 (columns m))">
      <goal name="distr_1_pre&#39;vc.0.13.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="Ensures">
       <goal name="distr_1_pre&#39;vc.0.13.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="add_eq_t">
        <goal name="distr_1_pre&#39;vc.0.13.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="goal_comm">
         <goal name="distr_1_pre&#39;vc.0.13.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="Ensures3">
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="distr_1_pre&#39;vc.0.13.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="Ensures2">
         <goal name="distr_1_pre&#39;vc.0.13.0.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="ind_sum_eq_gen">
          <goal name="distr_1_pre&#39;vc.0.13.0.0.0.0.1.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="distr_1_pre&#39;vc.0.13.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
           <proof prover="10"><result status="valid" time="0.25" steps="223160"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="distr_1_pre&#39;vc.0.13.0.0.0.0.1.0.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="distr_1_pre&#39;vc.0.13.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
           <proof prover="10"><result status="valid" time="0.24" steps="223162"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="distr_1_pre&#39;vc.0.13.0.0.0.0.1.0.2" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="distr_1_pre&#39;vc.0.13.0.0.0.0.1.0.2.0" expl="apply premises" proved="true">
           <proof prover="10"><result status="valid" time="0.73" steps="259935"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="distr_1_pre&#39;vc.0.13.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="ind_sum_eq_gen">
       <goal name="distr_1_pre&#39;vc.0.13.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.24" steps="223160"/></proof>
       </goal>
       <goal name="distr_1_pre&#39;vc.0.13.0.0.1.1" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.35" steps="223162"/></proof>
       </goal>
       <goal name="distr_1_pre&#39;vc.0.13.0.0.1.2" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="distr_1_pre&#39;vc.0.13.0.0.1.2.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="distr_1_pre&#39;vc.0.13.0.0.1.2.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="0.73" steps="265345"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="distr_1_pre&#39;vc.0.13.0.1" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.39" steps="238704"/></proof>
     </goal>
     <goal name="distr_1_pre&#39;vc.0.13.0.2" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.52" steps="238704"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="distr_l&#39;vc" expl="VC for distr_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="distr_l&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="distr_l&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.46" steps="208372"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="distr_l&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.25" steps="222313"/></proof>
  </goal>
  <goal name="distr_l&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.37" steps="237891"/></proof>
  </goal>
  <goal name="distr_l&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.37" steps="237908"/></proof>
  </goal>
  <goal name="distr_l&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.23" steps="222621"/></proof>
  </goal>
  <goal name="distr_l&#39;vc.5" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.25" steps="222624"/></proof>
  </goal>
  <goal name="distr_l&#39;vc.6" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.40" steps="238167"/></proof>
  </goal>
  <goal name="distr_l&#39;vc.7" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.38" steps="238373"/></proof>
  </goal>
  <goal name="distr_l&#39;vc.8" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="distr_l&#39;vc.8.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.39" steps="238395"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="distr_l&#39;vc.9" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.71" steps="263657"/></proof>
  </goal>
  <goal name="distr_l&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.24" steps="222924"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="distr_2_pre&#39;vc" expl="VC for distr_2_pre" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="distr_2_pre&#39;vc.0" expl="VC for distr_2_pre" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="distr_2_pre&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.21" steps="194321"/></proof>
   </goal>
   <goal name="distr_2_pre&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.22" steps="194324"/></proof>
   </goal>
   <goal name="distr_2_pre&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.21" steps="194652"/></proof>
   </goal>
   <goal name="distr_2_pre&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.38" steps="238067"/></proof>
   </goal>
   <goal name="distr_2_pre&#39;vc.0.4" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.36" steps="238265"/></proof>
   </goal>
   <goal name="distr_2_pre&#39;vc.0.5" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.39" steps="238272"/></proof>
   </goal>
   <goal name="distr_2_pre&#39;vc.0.6" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.25" steps="222828"/></proof>
   </goal>
   <goal name="distr_2_pre&#39;vc.0.7" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.25" steps="222998"/></proof>
   </goal>
   <goal name="distr_2_pre&#39;vc.0.8" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.69" steps="256437"/></proof>
   </goal>
   <goal name="distr_2_pre&#39;vc.0.9" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.49" steps="238551"/></proof>
   </goal>
   <goal name="distr_2_pre&#39;vc.0.10" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.69" steps="258017"/></proof>
   </goal>
   <goal name="distr_2_pre&#39;vc.0.11" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.38" steps="238633"/></proof>
   </goal>
   <goal name="distr_2_pre&#39;vc.0.12" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.68" steps="257997"/></proof>
   </goal>
   <goal name="distr_2_pre&#39;vc.0.13" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.62" steps="259956"/></proof>
   </goal>
   <goal name="distr_2_pre&#39;vc.0.14" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures2">
    <goal name="distr_2_pre&#39;vc.0.14.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures5">
     <goal name="distr_2_pre&#39;vc.0.14.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures4">
      <goal name="distr_2_pre&#39;vc.0.14.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="Ensures3">
       <goal name="distr_2_pre&#39;vc.0.14.0.0.0.0" expl="postcondition" proved="true">
       <transf name="replace" proved="true" arg1="(ind_sum (fun (k:int) -&gt; get m i k *. get (add_mat n o) k j) 0 (columns m))" arg2="(ind_sum
  (fun (k:int) -&gt;
    ((fun (k1:int) -&gt; get m i k1 *. get n k1 j) @ k)
    +. ((fun (k1:int) -&gt; get m i k1 *. get o k1 j) @ k))
  0 (columns m))
">
        <goal name="distr_2_pre&#39;vc.0.14.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="Ensures1">
         <goal name="distr_2_pre&#39;vc.0.14.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="apply" proved="true" arg1="add_eq_t">
          <goal name="distr_2_pre&#39;vc.0.14.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="ind_sum_eq">
           <goal name="distr_2_pre&#39;vc.0.14.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="distr_2_pre&#39;vc.0.14.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="ind_sum_eq">
           <goal name="distr_2_pre&#39;vc.0.14.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="distr_2_pre&#39;vc.0.14.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="ind_sum_eq">
         <goal name="distr_2_pre&#39;vc.0.14.0.0.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="3.04" steps="619694"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="distr_2_pre&#39;vc.0.14.0.1" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.38" steps="239160"/></proof>
     </goal>
     <goal name="distr_2_pre&#39;vc.0.14.0.2" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.39" steps="239160"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="distr_r&#39;vc" expl="VC for distr_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="distr_r&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="distr_r&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.33" steps="208867"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="distr_r&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.26" steps="222768"/></proof>
  </goal>
  <goal name="distr_r&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.38" steps="238353"/></proof>
  </goal>
  <goal name="distr_r&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.39" steps="238370"/></proof>
  </goal>
  <goal name="distr_r&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.24" steps="223076"/></proof>
  </goal>
  <goal name="distr_r&#39;vc.5" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.24" steps="223079"/></proof>
  </goal>
  <goal name="distr_r&#39;vc.6" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="distr_r&#39;vc.6.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.42" steps="238621"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="distr_r&#39;vc.7" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.40" steps="238835"/></proof>
  </goal>
  <goal name="distr_r&#39;vc.8" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.39" steps="238857"/></proof>
  </goal>
  <goal name="distr_r&#39;vc.9" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.57" steps="263074"/></proof>
  </goal>
  <goal name="distr_r&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.25" steps="223379"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Matrix_scalar" proved="true">
 <goal name="infix *..&#39;vc" expl="VC for infix *.." proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="infix *..&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.72" steps="281392"/></proof>
  </goal>
  <goal name="infix *..&#39;vc.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="infix *..&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.74" steps="280859"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="infix *..&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.29" steps="252485"/></proof>
  </goal>
  <goal name="infix *..&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.28" steps="252488"/></proof>
  </goal>
  <goal name="infix *..&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.79" steps="282903"/></proof>
  </goal>
  <goal name="infix *..&#39;vc.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="infix *..&#39;vc.5.0" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.79" steps="282048"/></proof>
   </goal>
   <goal name="infix *..&#39;vc.5.1" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.85" steps="282014"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="scalar_columns&#39;vc" expl="VC for scalar_columns" proved="true">
 <proof prover="10"><result status="valid" time="0.49" steps="209898"/></proof>
 </goal>
 <goal name="scalar_values&#39;vc" expl="VC for scalar_values" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="scalar_values&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="1.50" steps="444963"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="scalar_rows&#39;vc" expl="VC for scalar_rows" proved="true">
 <proof prover="10"><result status="valid" time="0.50" steps="210065"/></proof>
 </goal>
 <goal name="scalar_null&#39;vc" expl="VC for scalar_null" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="scalar_null&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="1.61" steps="467092"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="scalar_c_one&#39;vc" expl="VC for scalar_c_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="scalar_c_one&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="scalar_c_one&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.51" steps="210561"/></proof>
   </goal>
   <goal name="scalar_c_one&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.35" steps="210542"/></proof>
   </goal>
   <goal name="scalar_c_one&#39;vc.0.2" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.65" steps="223196"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="scalar_c_one_gen&#39;vc" expl="VC for scalar_c_one_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="scalar_c_one_gen&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.50" steps="204843"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="scalar_null_gen&#39;vc" expl="VC for scalar_null_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="scalar_null_gen&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.35" steps="204944"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="scalar_plus&#39;vc" expl="VC for scalar_plus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="scalar_plus&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="scalar_plus&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.60" steps="223938"/></proof>
   </goal>
   <goal name="scalar_plus&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.46" steps="223965"/></proof>
   </goal>
   <goal name="scalar_plus&#39;vc.0.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="scalar_plus&#39;vc.0.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="add_mat&#39;def">
     <goal name="scalar_plus&#39;vc.0.2.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="assert_make">
      <goal name="scalar_plus&#39;vc.0.2.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="scalar_plus&#39;vc.0.2.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.62" steps="224667"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="scalar_plus&#39;vc.0.2.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.44" steps="223897"/></proof>
      </goal>
      <goal name="scalar_plus&#39;vc.0.2.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.43" steps="223908"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="scalar_plus&#39;vc.0.2.0.1" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.43" steps="224049"/></proof>
     </goal>
     <goal name="scalar_plus&#39;vc.0.2.0.2" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.45" steps="224066"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="scalar_plus_rev&#39;vc" expl="VC for scalar_plus_rev" proved="true">
 <proof prover="10"><result status="valid" time="0.33" steps="204760"/></proof>
 </goal>
 <goal name="add_scal&#39;vc" expl="VC for add_scal" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="add_scal&#39;vc.0" expl="VC for add_scal" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="add_scal&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.34" steps="210335"/></proof>
   </goal>
   <goal name="add_scal&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.35" steps="210352"/></proof>
   </goal>
   <goal name="add_scal&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.21" steps="196026"/></proof>
   </goal>
   <goal name="add_scal&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.21" steps="196029"/></proof>
   </goal>
   <goal name="add_scal&#39;vc.0.4" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.34" steps="210797"/></proof>
   </goal>
   <goal name="add_scal&#39;vc.0.5" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.34" steps="210809"/></proof>
   </goal>
   <goal name="add_scal&#39;vc.0.6" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="scalar_values">
    <goal name="add_scal&#39;vc.0.6.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="add_values">
     <goal name="add_scal&#39;vc.0.6.0.0" expl="precondition" proved="true">
     <transf name="rewrite" proved="true" arg1="add_values">
      <goal name="add_scal&#39;vc.0.6.0.0.0" expl="precondition" proved="true">
      <transf name="rewrite" proved="true" arg1="scalar_values">
       <goal name="add_scal&#39;vc.0.6.0.0.0.0" expl="precondition" proved="true">
       <transf name="rewrite" proved="true" arg1="scalar_values">
        <goal name="add_scal&#39;vc.0.6.0.0.0.0.0" expl="precondition" proved="true">
        <proof prover="10"><result status="valid" time="0.35" steps="211259"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="add_scal&#39;vc.0.6.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.20" steps="196331"/></proof>
      </goal>
      <goal name="add_scal&#39;vc.0.6.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.20" steps="196331"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="add_scal&#39;vc.0.6.0.1" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.21" steps="196331"/></proof>
     </goal>
     <goal name="add_scal&#39;vc.0.6.0.2" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.22" steps="196331"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="add_scal&#39;vc.0.7" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.23" steps="196304"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="add_scal_rev&#39;vc" expl="VC for add_scal_rev" proved="true">
 <proof prover="10"><result status="valid" time="0.34" steps="210236"/></proof>
 </goal>
 <goal name="mat_mult_scal_values_l&#39;vc" expl="VC for mat_mult_scal_values_l" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="mat_mult_scal_values_l&#39;vc.0" expl="VC for mat_mult_scal_values_l" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mat_mult_scal_values_l&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_mult_values">
    <goal name="mat_mult_scal_values_l&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(fun (k:int) -&gt; (a *. get m i k) *. get n k j)" arg2="(fun (i1:int) -&gt; a *. ((fun (k:int) -&gt; get m i k *. get n k j) @ i1))">
     <goal name="mat_mult_scal_values_l&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures">
      <goal name="mat_mult_scal_values_l&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_mult_scal_values_l&#39;vc.0.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="10"><result status="valid" time="0.68" steps="257139"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="mat_mult_scal_values_l&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.26" steps="224667"/></proof>
    </goal>
    <goal name="mat_mult_scal_values_l&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.68" steps="255209"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_mult_scal_values_r&#39;vc" expl="VC for mat_mult_scal_values_r" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="mat_mult_scal_values_r&#39;vc.0" expl="VC for mat_mult_scal_values_r" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mat_mult_scal_values_r&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ind_sum (fun (k:int) -&gt; (a *. get m i k) *. get n k j) 0 (columns m))" arg2="(ind_sum
  (fun (i1:int) -&gt; a *. ((fun (k:int) -&gt; get m i k *. get n k j) @ i1)) 0
  (columns m))">
    <goal name="mat_mult_scal_values_r&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures">
     <goal name="mat_mult_scal_values_r&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="mat_mult_values">
      <goal name="mat_mult_scal_values_r&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="mult_eq_t_rev">
       <goal name="mat_mult_scal_values_r&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
       </transf>
       </goal>
       <goal name="mat_mult_scal_values_r&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.27" steps="225049"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="mat_mult_scal_values_r&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.23" steps="225058"/></proof>
      </goal>
      <goal name="mat_mult_scal_values_r&#39;vc.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.70" steps="255660"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_mult_scal_values_r&#39;vc.0.0.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="ind_sum_eq">
     <goal name="mat_mult_scal_values_r&#39;vc.0.0.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_mult_scal_values_r&#39;vc.0.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.80" steps="545962"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_mut_scal&#39;vc" expl="VC for mat_mut_scal" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_mut_scal&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="mat_mut_scal&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.45" steps="225010"/></proof>
   </goal>
   <goal name="mat_mut_scal&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.59" steps="224678"/></proof>
   </goal>
   <goal name="mat_mut_scal&#39;vc.0.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="mat_mut_scal&#39;vc.0.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="mat_mult_values">
     <goal name="mat_mut_scal&#39;vc.0.2.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="scalar_values">
      <goal name="mat_mut_scal&#39;vc.0.2.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="scalar_values">
       <goal name="mat_mut_scal&#39;vc.0.2.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="mat_mult_values">
        <goal name="mat_mut_scal&#39;vc.0.2.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="ind_sum_scal_rev">
         <goal name="mat_mut_scal&#39;vc.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="ind_sum_eq">
          <goal name="mat_mut_scal&#39;vc.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="mat_mut_scal&#39;vc.0.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="mat_mut_scal&#39;vc.0.2.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="0.46" steps="228462"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="mat_mut_scal&#39;vc.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.20" steps="196876"/></proof>
        </goal>
        <goal name="mat_mut_scal&#39;vc.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.61" steps="225213"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_mut_scal&#39;vc.0.2.0.1" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.48" steps="211726"/></proof>
     </goal>
     <goal name="mat_mut_scal&#39;vc.0.2.0.2" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.22" steps="196869"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="scal_mat_mut&#39;vc" expl="VC for scal_mat_mut" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="scal_mat_mut&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="scal_mat_mut&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.45" steps="225181"/></proof>
   </goal>
   <goal name="scal_mat_mut&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.58" steps="224843"/></proof>
   </goal>
   <goal name="scal_mat_mut&#39;vc.0.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="scal_mat_mut&#39;vc.0.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="mat_mult_values">
     <goal name="scal_mat_mut&#39;vc.0.2.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="scalar_values">
      <goal name="scal_mat_mut&#39;vc.0.2.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="scalar_values">
       <goal name="scal_mat_mut&#39;vc.0.2.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="mat_mult_values">
        <goal name="scal_mat_mut&#39;vc.0.2.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="ind_sum_scal_rev">
         <goal name="scal_mat_mut&#39;vc.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="scalar_columns">
          <goal name="scal_mat_mut&#39;vc.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="ind_sum_eq">
           <goal name="scal_mat_mut&#39;vc.0.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="10"><result status="valid" time="1.89" steps="528889"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="scal_mat_mut&#39;vc.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.21" steps="196965"/></proof>
        </goal>
        <goal name="scal_mat_mut&#39;vc.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.58" steps="225365"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="scal_mat_mut&#39;vc.0.2.0.1" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.36" steps="211780"/></proof>
     </goal>
     <goal name="scal_mat_mut&#39;vc.0.2.0.2" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.35" steps="196958"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_mut_scal_rev&#39;vc" expl="VC for mat_mut_scal_rev" proved="true">
 <proof prover="10"><result status="valid" time="0.47" steps="211325"/></proof>
 </goal>
 <goal name="scal_mat_mut_rev&#39;vc" expl="VC for scal_mat_mut_rev" proved="true">
 <proof prover="10"><result status="valid" time="0.35" steps="211420"/></proof>
 </goal>
 <goal name="ind_sum_commute_scal_r&#39;vc" expl="VC for ind_sum_commute_scal_r" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="ind_sum_commute_scal_r&#39;vc.0" expl="VC for ind_sum_commute_scal_r" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ind_sum_commute_scal_r&#39;vc.0.0" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="ind_sum_eq">
    <goal name="ind_sum_commute_scal_r&#39;vc.0.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="ind_sum_commute_scal_r&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="((fun (k11:int) -&gt; ind_sum (f @ k11) k1 l *. (g @ k11)) @ k)" arg2="(( ind_sum (f @ k) k1 l *. (g @ k)) )">
      <goal name="ind_sum_commute_scal_r&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="((fun (k11:int) -&gt;
       ind_sum (fun (k2:int) -&gt; ((f @ k11) @ k2) *. (g @ k11)) k1 l)
     @ k)" arg2="((       ind_sum (fun (k2:int) -&gt; ((f @ k) @ k2) *. (g @ k)) k1 l)
     )">
       <goal name="ind_sum_commute_scal_r&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="instantiate" proved="true" arg1="ind_sum_scal" arg2="(f k),k1,l,(g k)">
        <goal name="ind_sum_commute_scal_r&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(ind_sum (fun (k2:int) -&gt; ((f @ k) @ k2) *. (g @ k)) k1 l)" arg2="(  ind_sum (fun (i1:int) -&gt; (g @ k) *. ((f @ k) @ i1)) k1 l)">
         <goal name="ind_sum_commute_scal_r&#39;vc.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="0.74" steps="282760"/></proof>
         </goal>
         <goal name="ind_sum_commute_scal_r&#39;vc.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="ind_sum_eq">
          <goal name="ind_sum_commute_scal_r&#39;vc.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="ind_sum_commute_scal_r&#39;vc.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="ind_sum_commute_scal_r&#39;vc.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="0.65" steps="267623"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="ind_sum_commute_scal_r&#39;vc.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="compute_specified" proved="true" >
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="ind_sum_commute_scal_r&#39;vc.0.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="replace" proved="true" arg1="((fun (k11:int) -&gt;
       ind_sum (fun (k2:int) -&gt; ((f @ k11) @ k2) *. (g @ k11)) k1 l)
     @ k)" arg2="((       ind_sum (fun (k2:int) -&gt; ((f @ k) @ k2) *. (g @ k)) k1 l)
     )">
       <goal name="ind_sum_commute_scal_r&#39;vc.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
       <transf name="instantiate" proved="true" arg1="ind_sum_scal" arg2="(f k),k1,l,(g k)">
        <goal name="ind_sum_commute_scal_r&#39;vc.0.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
        <proof prover="10"><result status="valid" time="0.64" steps="267618"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="ind_sum_commute_scal_r&#39;vc.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
       <transf name="compute_specified" proved="true" >
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ind_sum_commute_scal_r&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.25" steps="222020"/></proof>
   </goal>
   <goal name="ind_sum_commute_scal_r&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.24" steps="222023"/></proof>
   </goal>
   <goal name="ind_sum_commute_scal_r&#39;vc.0.3" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Assert">
    <goal name="ind_sum_commute_scal_r&#39;vc.0.3.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(ind_sum
  (fun (k1:int) -&gt; ind_sum (fun (k2:int) -&gt; ((f @ k1) @ k2) *. (g @ k1)) k l)
  i j)" arg2="(ind_sum
  (fun (k1:int) -&gt;
    ind_sum ((fun (k11:int) (k2:int) -&gt; ((f @ k11) @ k2) *. (g @ k11)) @ k1)
    k l)
  i j)
">
     <goal name="ind_sum_commute_scal_r&#39;vc.0.3.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures">
      <goal name="ind_sum_commute_scal_r&#39;vc.0.3.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="ind_sum_eq">
       <goal name="ind_sum_commute_scal_r&#39;vc.0.3.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ind_sum_commute_scal_r&#39;vc.0.3.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="ind_sum_eq">
      <goal name="ind_sum_commute_scal_r&#39;vc.0.3.0.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_mult_assoc_pre&#39;vc" expl="VC for mat_mult_assoc_pre" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="mat_mult_assoc_pre&#39;vc.0" expl="VC for mat_mult_assoc_pre" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mat_mult_assoc_pre&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.21" steps="197696"/></proof>
   </goal>
   <goal name="mat_mult_assoc_pre&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.53" steps="241163"/></proof>
   </goal>
   <goal name="mat_mult_assoc_pre&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.78" steps="256587"/></proof>
   </goal>
   <goal name="mat_mult_assoc_pre&#39;vc.0.3" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_mult_values">
    <goal name="mat_mult_assoc_pre&#39;vc.0.3.0" expl="assertion" proved="true">
    <transf name="replace" proved="true" arg1="(columns (mat_mult m n))" arg2="(columns n)">
     <goal name="mat_mult_assoc_pre&#39;vc.0.3.0.0" expl="assertion" proved="true">
     <transf name="apply" proved="true" arg1="ind_sum_eq">
      <goal name="mat_mult_assoc_pre&#39;vc.0.3.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="mat_mult_assoc_pre&#39;vc.0.3.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="mat_mult_assoc_pre&#39;vc.0.3.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="mat_mult_values">
         <goal name="mat_mult_assoc_pre&#39;vc.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_hyp" proved="true" >
         </transf>
         </goal>
         <goal name="mat_mult_assoc_pre&#39;vc.0.3.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.25" steps="225724"/></proof>
         </goal>
         <goal name="mat_mult_assoc_pre&#39;vc.0.3.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.71" steps="258230"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_mult_assoc_pre&#39;vc.0.3.0.1" expl="equality hypothesis" proved="true">
     <proof prover="10"><result status="valid" time="0.26" steps="225699"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="mat_mult_assoc_pre&#39;vc.0.3.1" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.39" steps="241260"/></proof>
    </goal>
    <goal name="mat_mult_assoc_pre&#39;vc.0.3.2" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.70" steps="257364"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="mat_mult_assoc_pre&#39;vc.0.4" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.70" steps="257654"/></proof>
   </goal>
   <goal name="mat_mult_assoc_pre&#39;vc.0.5" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.72" steps="257671"/></proof>
   </goal>
   <goal name="mat_mult_assoc_pre&#39;vc.0.6" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_mult_values">
    <goal name="mat_mult_assoc_pre&#39;vc.0.6.0" expl="assertion" proved="true">
    <transf name="replace" proved="true" arg1="(columns (mat_mult m n))" arg2="(columns n)">
     <goal name="mat_mult_assoc_pre&#39;vc.0.6.0.0" expl="assertion" proved="true">
     <transf name="apply" proved="true" arg1="ind_sum_eq">
      <goal name="mat_mult_assoc_pre&#39;vc.0.6.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="mat_mult_assoc_pre&#39;vc.0.6.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="mat_mult_assoc_pre&#39;vc.0.6.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="mat_mult_values">
         <goal name="mat_mult_assoc_pre&#39;vc.0.6.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_hyp" proved="true" >
         </transf>
         </goal>
         <goal name="mat_mult_assoc_pre&#39;vc.0.6.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.26" steps="226349"/></proof>
         </goal>
         <goal name="mat_mult_assoc_pre&#39;vc.0.6.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.77" steps="258769"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_mult_assoc_pre&#39;vc.0.6.0.1" expl="equality hypothesis" proved="true">
     <proof prover="10"><result status="valid" time="0.24" steps="226324"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="mat_mult_assoc_pre&#39;vc.0.6.1" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.66" steps="242403"/></proof>
    </goal>
    <goal name="mat_mult_assoc_pre&#39;vc.0.6.2" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.77" steps="258928"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="mat_mult_assoc_pre&#39;vc.0.7" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Assert1">
    <goal name="mat_mult_assoc_pre&#39;vc.0.7.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Assert">
     <goal name="mat_mult_assoc_pre&#39;vc.0.7.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(ind_sum
  (fun (k1:int) -&gt;
    ind_sum (fun (k2:int) -&gt; get m i k2 *. get n k2 k1) 0 (columns m)
    *. get o k1 j)
  0 (columns n))" arg2="( ind_sum
  (fun (k1:int) -&gt;
    ind_sum ((fun (k11:int) (k2:int) -&gt; get m i k2 *. get n k2 k11) @ k1) 0
    (columns m) *. ((fun (k2:int) -&gt; get o k2 j) @ k1))
  0 (columns n))">
      <goal name="mat_mult_assoc_pre&#39;vc.0.7.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="Ensures">
       <goal name="mat_mult_assoc_pre&#39;vc.0.7.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="ind_sum_eq">
        <goal name="mat_mult_assoc_pre&#39;vc.0.7.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_mult_assoc_pre&#39;vc.0.7.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="mat_mult_assoc_pre&#39;vc.0.7.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="ind_sum_scal_rev">
           <goal name="mat_mult_assoc_pre&#39;vc.0.7.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="ind_sum_eq">
            <goal name="mat_mult_assoc_pre&#39;vc.0.7.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="mat_mult_assoc_pre&#39;vc.0.7.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="10"><result status="valid" time="2.01" steps="559666"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="mat_mult_assoc_pre&#39;vc.0.7.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="ind_sum_eq">
       <goal name="mat_mult_assoc_pre&#39;vc.0.7.0.0.1.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mat_mult_assoc_pre&#39;vc.0.7.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_mult_assoc&#39;vc" expl="VC for mat_mult_assoc" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="mat_mult_assoc&#39;vc.0" expl="VC for mat_mult_assoc" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mat_mult_assoc&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.21" steps="197925"/></proof>
   </goal>
   <goal name="mat_mult_assoc&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.56" steps="241312"/></proof>
   </goal>
   <goal name="mat_mult_assoc&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.26" steps="226006"/></proof>
   </goal>
   <goal name="mat_mult_assoc&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.40" steps="241731"/></proof>
   </goal>
   <goal name="mat_mult_assoc&#39;vc.0.4" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.51" steps="241932"/></proof>
   </goal>
   <goal name="mat_mult_assoc&#39;vc.0.5" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.40" steps="241954"/></proof>
   </goal>
   <goal name="mat_mult_assoc&#39;vc.0.6" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="mat_mult_assoc_pre">
    <goal name="mat_mult_assoc&#39;vc.0.6.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.25" steps="226418"/></proof>
    </goal>
    <goal name="mat_mult_assoc&#39;vc.0.6.1" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.24" steps="226418"/></proof>
    </goal>
    <goal name="mat_mult_assoc&#39;vc.0.6.2" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.76" steps="260860"/></proof>
    </goal>
    <goal name="mat_mult_assoc&#39;vc.0.6.3" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.77" steps="260858"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="mat_mult_assoc&#39;vc.0.7" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.26" steps="226391"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_mult_assoc_quant&#39;vc" expl="VC for mat_mult_assoc_quant" proved="true">
 <proof prover="10"><result status="valid" time="0.33" steps="212550"/></proof>
 </goal>
 <goal name="mat_mult_assoc_comm&#39;vc" expl="VC for mat_mult_assoc_comm" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_mult_assoc_comm&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.35" steps="213018"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="scalar_eq&#39;vc" expl="VC for scalar_eq" proved="true">
 <proof prover="10"><result status="valid" time="0.22" steps="198824"/></proof>
 </goal>
 <goal name="scalar_eq_gen&#39;vc" expl="VC for scalar_eq_gen" proved="true">
 <proof prover="10"><result status="valid" time="0.20" steps="199073"/></proof>
 </goal>
 <goal name="scalar_add&#39;vc" expl="VC for scalar_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="scalar_add&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.35" steps="213085"/></proof>
  </goal>
  <goal name="scalar_add&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.36" steps="213097"/></proof>
  </goal>
  <goal name="scalar_add&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.49" steps="213429"/></proof>
  </goal>
  <goal name="scalar_add&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.49" steps="213441"/></proof>
  </goal>
  <goal name="scalar_add&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.51" steps="217399"/></proof>
  </goal>
  <goal name="scalar_add&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.21" steps="198923"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="scalar_assoc&#39;vc" expl="VC for scalar_assoc" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="scalar_assoc&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.49" steps="213154"/></proof>
  </goal>
  <goal name="scalar_assoc&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.50" steps="213166"/></proof>
  </goal>
  <goal name="scalar_assoc&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.34" steps="213498"/></proof>
  </goal>
  <goal name="scalar_assoc&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.36" steps="213510"/></proof>
  </goal>
  <goal name="scalar_assoc&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.51" steps="217468"/></proof>
  </goal>
  <goal name="scalar_assoc&#39;vc.5" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="scalar_assoc&#39;vc.5.0" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.37" steps="216210"/></proof>
   </goal>
   <goal name="scalar_assoc&#39;vc.5.1" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.50" steps="216218"/></proof>
   </goal>
   <goal name="scalar_assoc&#39;vc.5.2" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.87" steps="285024"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="scalar_assoc_rev&#39;vc" expl="VC for scalar_assoc_rev" proved="true">
 <proof prover="10"><result status="valid" time="0.35" steps="208082"/></proof>
 </goal>
 <goal name="scalars_inv&#39;vc" expl="VC for scalars_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="scalars_inv&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.88" steps="293445"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="eq_scalar&#39;vc" expl="VC for eq_scalar" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="eq_scalar&#39;vc.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(a-. b &lt;&gt; c_zero)">
   <goal name="eq_scalar&#39;vc.0.0" expl="true case (postcondition)" proved="true">
   <transf name="replace" proved="true" arg1="a" arg2="((a-.b)+.b)" arg3="in" arg4="Requires">
    <goal name="eq_scalar&#39;vc.0.0.0" expl="true case (postcondition)" proved="true">
    <transf name="rewrite" proved="true" arg1="scalar_plus" arg2="in" arg3="Requires">
     <goal name="eq_scalar&#39;vc.0.0.0.0" expl="true case (postcondition)" proved="true">
     <transf name="destruct" proved="true" arg1="Requires1">
      <goal name="eq_scalar&#39;vc.0.0.0.0.0" expl="true case (postcondition)" proved="true">
      <transf name="destruct" proved="true" arg1="Requires1">
       <goal name="eq_scalar&#39;vc.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
       <transf name="assert" proved="true" arg1="(a*. (get m i j) = (a-. b) *.  (get m i j) +. b *. (get m i j))">
        <goal name="eq_scalar&#39;vc.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="replace" proved="true" arg1="(((a -. b) *. get m i j) +. (b *. get m i j))" arg2="(get (add_mat ((a -. b) *.. m) (b *.. m)) i j)">
         <goal name="eq_scalar&#39;vc.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="10"><result status="valid" time="0.59" steps="227490"/></proof>
         </goal>
         <goal name="eq_scalar&#39;vc.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="10"><result status="valid" time="0.45" steps="228538"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="eq_scalar&#39;vc.0.0.0.0.0.0.1" expl="true case (postcondition)" proved="true">
        <proof prover="10"><result status="valid" time="0.60" steps="228764"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="eq_scalar&#39;vc.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="10"><result status="valid" time="0.35" steps="213733"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="eq_scalar&#39;vc.0.1" expl="false case (postcondition)" proved="true">
   <transf name="replace" proved="true" arg1="a" arg2="((a-.b)+.b)">
    <goal name="eq_scalar&#39;vc.0.1.0" expl="false case (postcondition)" proved="true">
    <proof prover="10"><result status="valid" time="0.36" steps="213748"/></proof>
    </goal>
    <goal name="eq_scalar&#39;vc.0.1.1" expl="equality hypothesis" proved="true">
    <proof prover="10"><result status="valid" time="0.35" steps="213724"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_substr&#39;vc" expl="VC for mat_substr" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_substr&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.34" steps="213574"/></proof>
  </goal>
  <goal name="mat_substr&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.34" steps="213586"/></proof>
  </goal>
  <goal name="mat_substr&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.21" steps="199136"/></proof>
  </goal>
  <goal name="mat_substr&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.23" steps="199139"/></proof>
  </goal>
  <goal name="mat_substr&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.73" steps="271723"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="substr_rows&#39;vc" expl="VC for substr_rows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="substr_rows&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="1.59" steps="479694"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="substr_columns&#39;vc" expl="VC for substr_columns" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="substr_columns&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="1.62" steps="479282"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="substr_value&#39;vc" expl="VC for substr_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="substr_value&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.60" steps="228931"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="distr_l_substr&#39;vc" expl="VC for distr_l_substr" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="distr_l_substr&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.36" steps="214685"/></proof>
  </goal>
  <goal name="distr_l_substr&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.33" steps="214697"/></proof>
  </goal>
  <goal name="distr_l_substr&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.21" steps="200119"/></proof>
  </goal>
  <goal name="distr_l_substr&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.35" steps="214754"/></proof>
  </goal>
  <goal name="distr_l_substr&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.46" steps="231083"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="distr_r_substr&#39;vc" expl="VC for distr_r_substr" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="distr_r_substr&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.35" steps="214840"/></proof>
  </goal>
  <goal name="distr_r_substr&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.38" steps="214852"/></proof>
  </goal>
  <goal name="distr_r_substr&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.37" steps="214865"/></proof>
  </goal>
  <goal name="distr_r_substr&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.39" steps="200294"/></proof>
  </goal>
  <goal name="distr_r_substr&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.62" steps="231174"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mat_substr_eq&#39;vc" expl="VC for mat_substr_eq" proved="true">
 <proof prover="10"><result status="valid" time="0.22" steps="200669"/></proof>
 </goal>
 <goal name="substr_decomp&#39;vc" expl="VC for substr_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="substr_decomp&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.21" steps="200717"/></proof>
  </goal>
  <goal name="substr_decomp&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.21" steps="200720"/></proof>
  </goal>
  <goal name="substr_decomp&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.35" steps="215433"/></proof>
  </goal>
  <goal name="substr_decomp&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.36" steps="215445"/></proof>
  </goal>
  <goal name="substr_decomp&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.34" steps="215574"/></proof>
  </goal>
  <goal name="substr_decomp&#39;vc.5" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.34" steps="215581"/></proof>
  </goal>
  <goal name="substr_decomp&#39;vc.6" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="add_value">
   <goal name="substr_decomp&#39;vc.6.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="substr_value">
    <goal name="substr_decomp&#39;vc.6.0.0" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(forall a b. a+.(b-.a) = b)">
     <goal name="substr_decomp&#39;vc.6.0.0.0" expl="asserted formula" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="substr_decomp&#39;vc.6.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="replace" proved="true" arg1="(a +. (b -. a))" arg2="(a +. ((-. a)+.b))">
       <goal name="substr_decomp&#39;vc.6.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="10"><result status="valid" time="0.58" steps="233417"/></proof>
       </goal>
       <goal name="substr_decomp&#39;vc.6.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="10"><result status="valid" time="0.64" steps="232420"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="substr_decomp&#39;vc.6.0.0.1" expl="precondition" proved="true">
     <proof prover="10"><result status="valid" time="0.37" steps="215780"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="substr_decomp&#39;vc.6.0.1" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.22" steps="200805"/></proof>
    </goal>
    <goal name="substr_decomp&#39;vc.6.0.2" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.22" steps="200805"/></proof>
    </goal>
    <goal name="substr_decomp&#39;vc.6.0.3" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.43" steps="231022"/></proof>
    </goal>
    <goal name="substr_decomp&#39;vc.6.0.4" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.59" steps="231022"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="substr_decomp&#39;vc.6.1" expl="rewrite premises" proved="true">
   <proof prover="10"><result status="valid" time="0.20" steps="200805"/></proof>
   </goal>
   <goal name="substr_decomp&#39;vc.6.2" expl="rewrite premises" proved="true">
   <proof prover="10"><result status="valid" time="0.21" steps="200805"/></proof>
   </goal>
   <goal name="substr_decomp&#39;vc.6.3" expl="rewrite premises" proved="true">
   <proof prover="10"><result status="valid" time="0.21" steps="200805"/></proof>
   </goal>
   <goal name="substr_decomp&#39;vc.6.4" expl="rewrite premises" proved="true">
   <proof prover="10"><result status="valid" time="0.47" steps="231145"/></proof>
   </goal>
   <goal name="substr_decomp&#39;vc.6.5" expl="rewrite premises" proved="true">
   <proof prover="10"><result status="valid" time="0.45" steps="231145"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="substr_decomp&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.21" steps="201055"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="subtr_scal&#39;vc" expl="VC for subtr_scal" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="subtr_scal&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.33" steps="215391"/></proof>
  </goal>
  <goal name="subtr_scal&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.35" steps="215408"/></proof>
  </goal>
  <goal name="subtr_scal&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.21" steps="201069"/></proof>
  </goal>
  <goal name="subtr_scal&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.23" steps="201072"/></proof>
  </goal>
  <goal name="subtr_scal&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.35" steps="216057"/></proof>
  </goal>
  <goal name="subtr_scal&#39;vc.5" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.34" steps="216069"/></proof>
  </goal>
  <goal name="subtr_scal&#39;vc.6" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="scalar_values">
   <goal name="subtr_scal&#39;vc.6.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="substr_value">
    <goal name="subtr_scal&#39;vc.6.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="substr_value">
     <goal name="subtr_scal&#39;vc.6.0.0.0" expl="precondition" proved="true">
     <transf name="rewrite" proved="true" arg1="scalar_values">
      <goal name="subtr_scal&#39;vc.6.0.0.0.0" expl="precondition" proved="true">
      <transf name="rewrite" proved="true" arg1="scalar_values">
       <goal name="subtr_scal&#39;vc.6.0.0.0.0.0" expl="precondition" proved="true">
       <proof prover="10"><result status="valid" time="0.34" steps="216519"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="subtr_scal&#39;vc.6.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.34" steps="216088"/></proof>
     </goal>
     <goal name="subtr_scal&#39;vc.6.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.32" steps="216088"/></proof>
     </goal>
     <goal name="subtr_scal&#39;vc.6.0.0.3" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.46" steps="236354"/></proof>
     </goal>
     <goal name="subtr_scal&#39;vc.6.0.0.4" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.60" steps="236354"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="subtr_scal&#39;vc.6.0.1" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.21" steps="201491"/></proof>
    </goal>
    <goal name="subtr_scal&#39;vc.6.0.2" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.23" steps="201491"/></proof>
    </goal>
    <goal name="subtr_scal&#39;vc.6.0.3" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.49" steps="236352"/></proof>
    </goal>
    <goal name="subtr_scal&#39;vc.6.0.4" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.47" steps="236352"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="subtr_scal&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.21" steps="201464"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="subtr_scal_rev&#39;vc" expl="VC for subtr_scal_rev" proved="true">
 <proof prover="10"><result status="valid" time="0.33" steps="215485"/></proof>
 </goal>
 <goal name="get_equal_mat_to_substr&#39;vc" expl="VC for get_equal_mat_to_substr" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_equal_mat_to_substr&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.46" steps="228419"/></proof>
  </goal>
  <goal name="get_equal_mat_to_substr&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.21" steps="201224"/></proof>
  </goal>
  <goal name="get_equal_mat_to_substr&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.21" steps="201227"/></proof>
  </goal>
  <goal name="get_equal_mat_to_substr&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.35" steps="216115"/></proof>
  </goal>
  <goal name="get_equal_mat_to_substr&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.37" steps="216132"/></proof>
  </goal>
  <goal name="get_equal_mat_to_substr&#39;vc.5" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.60" steps="232749"/></proof>
  </goal>
  <goal name="get_equal_mat_to_substr&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.22" steps="201439"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_inequal_mat_by_substr&#39;vc" expl="VC for set_inequal_mat_by_substr" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_inequal_mat_by_substr&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="set_inequal_mat_by_substr&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(exists i j. 0&lt;= i &lt; rows m /\ 0&lt;= j &lt; columns m /\ get (mat_substr m n) i j &lt;&gt; c_zero)">
    <goal name="set_inequal_mat_by_substr&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="case" proved="true" arg1="(forall i j. 0&lt;= i &lt; rows m -&gt; 0&lt;= j &lt; columns m -&gt; get (mat_substr m n) i j = c_zero)">
     <goal name="set_inequal_mat_by_substr&#39;vc.0.0.0.0" expl="true case (asserted formula)" proved="true">
     <transf name="assert" proved="true" arg1="(m = n)">
      <goal name="set_inequal_mat_by_substr&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="set_equal_mat">
       <goal name="set_inequal_mat_by_substr&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.22" steps="201420"/></proof>
       </goal>
       <goal name="set_inequal_mat_by_substr&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.21" steps="201420"/></proof>
       </goal>
       <goal name="set_inequal_mat_by_substr&#39;vc.0.0.0.0.0.2" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="set_inequal_mat_by_substr&#39;vc.0.0.0.0.0.2.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(get m i j )" arg2="(get (mat_substr m n) i j +. get n i j)">
         <goal name="set_inequal_mat_by_substr&#39;vc.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="0.61" steps="232169"/></proof>
         </goal>
         <goal name="set_inequal_mat_by_substr&#39;vc.0.0.0.0.0.2.0.1" expl="equality hypothesis" proved="true">
         <proof prover="10"><result status="valid" time="0.61" steps="232491"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="set_inequal_mat_by_substr&#39;vc.0.0.0.0.1" expl="true case (asserted formula)" proved="true">
      <proof prover="10"><result status="valid" time="0.20" steps="201559"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="set_inequal_mat_by_substr&#39;vc.0.0.0.1" expl="false case (asserted formula)" proved="true">
     <proof prover="10"><result status="valid" time="0.34" steps="216171"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="set_inequal_mat_by_substr&#39;vc.0.0.1" expl="postcondition" proved="true">
    <proof prover="10"><result status="valid" time="0.45" steps="230716"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="set_inequal_mat_by_substr&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.37" steps="216396"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Matrix_sums" proved="true">
 <goal name="set_constant_size&#39;vc" expl="VC for set_constant_size" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_constant_size&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="set_constant_size&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="constant_size&#39;def">
    <goal name="set_constant_size&#39;vc.0.0.0" expl="VC for set_constant_size" proved="true">
    <proof prover="10"><result status="valid" time="0.85" steps="299533"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_constant_size_exists&#39;vc" expl="VC for set_constant_size_exists" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_constant_size_exists&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="set_constant_size_exists&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="set_constant_size_exists&#39;vc.0.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="set_constant_size_exists&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.65" steps="280246"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="set_constant_size_exists&#39;vc.0.0.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="set_constant_size_exists&#39;vc.0.0.1.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.64" steps="280246"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_constant_size_t&#39;vc" expl="VC for set_constant_size_t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_constant_size_t&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="set_constant_size_t&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.51" steps="280926"/></proof>
   </goal>
   <goal name="set_constant_size_t&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.50" steps="280926"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="guarded_set_constant_size&#39;vc" expl="VC for guarded_set_constant_size" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="guarded_set_constant_size&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="guarded_set_constant_size&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.81" steps="314408"/></proof>
   </goal>
   <goal name="guarded_set_constant_size&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.84" steps="314430"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_constant_size_set&#39;vc" expl="VC for set_constant_size_set" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_constant_size_set&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="set_constant_size_set&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="set_constant_size_set&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.62" steps="299212"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="set_constant_size_set&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="set_constant_size_set&#39;vc.0.1.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.78" steps="299244"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="get_constant_size&#39;vc" expl="VC for get_constant_size" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_constant_size&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.78" steps="296904"/></proof>
  </goal>
  <goal name="get_constant_size&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.79" steps="295949"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="s_rows&#39;vc" expl="VC for s_rows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="s_rows&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.68" steps="256699"/></proof>
  </goal>
  <goal name="s_rows&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.67" steps="286445"/></proof>
  </goal>
  <goal name="s_rows&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.51" steps="285790"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="s_columns&#39;vc" expl="VC for s_columns" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="s_columns&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.68" steps="257839"/></proof>
  </goal>
  <goal name="s_columns&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.51" steps="287355"/></proof>
  </goal>
  <goal name="s_columns&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.52" steps="286700"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_s_rows&#39;vc" expl="VC for set_s_rows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_s_rows&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.45" steps="245589"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_s_rows_elt&#39;vc" expl="VC for set_s_rows_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_s_rows_elt&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.64" steps="299646"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_s_columns&#39;vc" expl="VC for set_s_columns" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_s_columns&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.44" steps="246115"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_s_columns_elt&#39;vc" expl="VC for set_s_columns_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_s_columns_elt&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.62" steps="300269"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="s_rows_eq&#39;vc" expl="VC for s_rows_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="s_rows_eq&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.31" steps="268352"/></proof>
  </goal>
  <goal name="s_rows_eq&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.29" steps="268353"/></proof>
  </goal>
  <goal name="s_rows_eq&#39;vc.2" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="s_rows_eq&#39;vc.2.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="s_rows_eq&#39;vc.2.0.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.83" steps="308208"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="s_rows_eq&#39;vc.2.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="s_rows_eq&#39;vc.2.1.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.86" steps="306951"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="s_rows_eq&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.77" steps="307538"/></proof>
  </goal>
  <goal name="s_rows_eq&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.68" steps="291665"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_constant_size_give&#39;vc" expl="VC for set_constant_size_give" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_constant_size_give&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="set_constant_size_give&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.67" steps="291535"/></proof>
   </goal>
   <goal name="set_constant_size_give&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.67" steps="291535"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="set_constant_size_give&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.70" steps="290674"/></proof>
  </goal>
  <goal name="set_constant_size_give&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.74" steps="290742"/></proof>
  </goal>
  <goal name="set_constant_size_give&#39;vc.3" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_s_rows">
   <goal name="set_constant_size_give&#39;vc.3.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="set_constant_size_give&#39;vc.3.0.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.52" steps="290934"/></proof>
    </goal>
    <goal name="set_constant_size_give&#39;vc.3.0.1" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.68" steps="290934"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="set_constant_size_give&#39;vc.3.1" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.73" steps="306104"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="set_constant_size_give&#39;vc.4" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_s_columns">
   <goal name="set_constant_size_give&#39;vc.4.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="set_constant_size_give&#39;vc.4.0.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.71" steps="290953"/></proof>
    </goal>
    <goal name="set_constant_size_give&#39;vc.4.0.1" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.69" steps="290953"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="set_constant_size_give&#39;vc.4.1" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.75" steps="306060"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="s_columns_eq&#39;vc" expl="VC for s_columns_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="s_columns_eq&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.29" steps="269861"/></proof>
  </goal>
  <goal name="s_columns_eq&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.29" steps="269862"/></proof>
  </goal>
  <goal name="s_columns_eq&#39;vc.2" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="s_columns_eq&#39;vc.2.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="s_columns_eq&#39;vc.2.0.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.79" steps="308595"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="s_columns_eq&#39;vc.2.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="s_columns_eq&#39;vc.2.1.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.81" steps="309588"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="s_columns_eq&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.80" steps="309092"/></proof>
  </goal>
  <goal name="s_columns_eq&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.52" steps="293144"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="subset_constant_size&#39;vc" expl="VC for subset_constant_size" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="subset_constant_size&#39;vc.0" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.50" steps="285971"/></proof>
  </goal>
  <goal name="subset_constant_size&#39;vc.1" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="subset_constant_size&#39;vc.1.0" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.88" steps="307098"/></proof>
   </goal>
   <goal name="subset_constant_size&#39;vc.1.1" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.86" steps="307135"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="subset_constant_size&#39;vc.2" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(s_rows s&#39; f )" arg2="(rows (f (choose s&#39;)))">
   <goal name="subset_constant_size&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="1.94" steps="575145"/></proof>
   </goal>
   <goal name="subset_constant_size&#39;vc.2.1" expl="equality hypothesis" proved="true">
   <proof prover="10"><result status="valid" time="0.53" steps="292530"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="subset_constant_size&#39;vc.3" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(s_columns s&#39; f )" arg2="(columns (f (choose s&#39;)))">
   <goal name="subset_constant_size&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="1.98" steps="574744"/></proof>
   </goal>
   <goal name="subset_constant_size&#39;vc.3.1" expl="equality hypothesis" proved="true">
   <proof prover="10"><result status="valid" time="0.53" steps="292477"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_s_rows_rem&#39;vc" expl="VC for set_s_rows_rem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_s_rows_rem&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.26" steps="237034"/></proof>
  </goal>
  <goal name="set_s_rows_rem&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.82" steps="303356"/></proof>
  </goal>
  <goal name="set_s_rows_rem&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.26" steps="243608"/></proof>
  </goal>
  <goal name="set_s_rows_rem&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.78" steps="278748"/></proof>
  </goal>
  <goal name="set_s_rows_rem&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.47" steps="264618"/></proof>
  </goal>
  <goal name="set_s_rows_rem&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.28" steps="244766"/></proof>
  </goal>
  <goal name="set_s_rows_rem&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.45" steps="260637"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_s_columns_rem&#39;vc" expl="VC for set_s_columns_rem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_s_columns_rem&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.26" steps="237344"/></proof>
  </goal>
  <goal name="set_s_columns_rem&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.66" steps="303711"/></proof>
  </goal>
  <goal name="set_s_columns_rem&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.28" steps="243900"/></proof>
  </goal>
  <goal name="set_s_columns_rem&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.77" steps="279161"/></proof>
  </goal>
  <goal name="set_s_columns_rem&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.61" steps="264901"/></proof>
  </goal>
  <goal name="set_s_columns_rem&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.28" steps="245036"/></proof>
  </goal>
  <goal name="set_s_columns_rem&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.44" steps="260909"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_s_rows_add&#39;vc" expl="VC for set_s_rows_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_s_rows_add&#39;vc.0" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="set_s_rows_add&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="set_s_rows_add&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.99" steps="312183"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="set_s_rows_add&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="set_s_rows_add&#39;vc.0.1.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="1.00" steps="311397"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="set_s_rows_add&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.54" steps="293566"/></proof>
  </goal>
  <goal name="set_s_rows_add&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.45" steps="260829"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_s_columns_add&#39;vc" expl="VC for set_s_columns_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_s_columns_add&#39;vc.0" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="set_s_columns_add&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="set_s_columns_add&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.97" steps="312646"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="set_s_columns_add&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="set_s_columns_add&#39;vc.0.1.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.96" steps="311860"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="set_s_columns_add&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.55" steps="293935"/></proof>
  </goal>
  <goal name="set_s_columns_add&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.45" steps="261198"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_s_rows_columns_add&#39;vc" expl="VC for set_s_rows_columns_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_s_rows_columns_add&#39;vc.0" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="set_s_rows_columns_add&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="set_s_rows_columns_add&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="1.04" steps="313109"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="set_s_rows_columns_add&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="set_s_rows_columns_add&#39;vc.0.1.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.89" steps="312323"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="set_s_rows_columns_add&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.72" steps="294304"/></proof>
  </goal>
  <goal name="set_s_rows_columns_add&#39;vc.2" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="set_s_rows_columns_add&#39;vc.2.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="set_s_rows_columns_add&#39;vc.2.0.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.97" steps="313194"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="set_s_rows_columns_add&#39;vc.2.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="set_s_rows_columns_add&#39;vc.2.1.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.76" steps="312400"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="set_s_rows_columns_add&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.52" steps="294328"/></proof>
  </goal>
  <goal name="set_s_rows_columns_add&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.45" steps="261591"/></proof>
  </goal>
  <goal name="set_s_rows_columns_add&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.46" steps="261608"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum&#39;vc" expl="VC for mat_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sum&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.28" steps="238960"/></proof>
  </goal>
  <goal name="mat_sum&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.28" steps="238965"/></proof>
  </goal>
  <goal name="mat_sum&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.74" steps="275338"/></proof>
  </goal>
  <goal name="mat_sum&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.49" steps="261163"/></proof>
  </goal>
  <goal name="mat_sum&#39;vc.4" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mat_sum&#39;vc.4.0" expl="variant decrease" proved="true">
   <proof prover="10"><result status="valid" time="0.45" steps="257056"/></proof>
   </goal>
   <goal name="mat_sum&#39;vc.4.1" expl="variant decrease" proved="true">
   <proof prover="10"><result status="valid" time="0.60" steps="272615"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sum&#39;vc.5" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.31" steps="241306"/></proof>
  </goal>
  <goal name="mat_sum&#39;vc.6" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.60" steps="272622"/></proof>
  </goal>
  <goal name="mat_sum&#39;vc.7" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.69" steps="295669"/></proof>
  </goal>
  <goal name="mat_sum&#39;vc.8" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.68" steps="295695"/></proof>
  </goal>
  <goal name="mat_sum&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.52" steps="297226"/></proof>
  </goal>
  <goal name="mat_sum&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.67" steps="297260"/></proof>
  </goal>
  <goal name="mat_sum&#39;vc.11" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.67" steps="295921"/></proof>
  </goal>
  <goal name="mat_sum&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.52" steps="295984"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="columns_mat_sum&#39;vc" expl="VC for columns_mat_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="columns_mat_sum&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="columns_mat_sum&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_sum&#39;spec2">
    <goal name="columns_mat_sum&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="set_s_columns">
     <goal name="columns_mat_sum&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.37" steps="321127"/></proof>
     </goal>
     <goal name="columns_mat_sum&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.96" steps="356102"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="columns_mat_sum&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.36" steps="321127"/></proof>
    </goal>
    <goal name="columns_mat_sum&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.95" steps="354605"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="rows_mat_sum&#39;vc" expl="VC for rows_mat_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="rows_mat_sum&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="2.00" steps="599163"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum_cardone&#39;vc" expl="VC for mat_sum_cardone" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sum_cardone&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="mat_sum_cardone&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="mat_sum&#39;def1">
    <goal name="mat_sum_cardone&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.95" steps="335749"/></proof>
    </goal>
    <goal name="mat_sum_cardone&#39;vc.0.0.1" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.30" steps="253449"/></proof>
    </goal>
    <goal name="mat_sum_cardone&#39;vc.0.0.2" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.26" steps="248202"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum_to_sum_pre&#39;vc" expl="VC for mat_sum_to_sum_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sum_to_sum_pre&#39;vc.0" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.70" steps="274451"/></proof>
  </goal>
  <goal name="mat_sum_to_sum_pre&#39;vc.1" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="1.72" steps="544777"/></proof>
  </goal>
  <goal name="mat_sum_to_sum_pre&#39;vc.2" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mat_sum_to_sum_pre&#39;vc.2.0" expl="variant decrease" proved="true">
   <proof prover="10"><result status="valid" time="0.42" steps="262413"/></proof>
   </goal>
   <goal name="mat_sum_to_sum_pre&#39;vc.2.1" expl="variant decrease" proved="true">
   <proof prover="10"><result status="valid" time="0.72" steps="279463"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sum_to_sum_pre&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.60" steps="278715"/></proof>
  </goal>
  <goal name="mat_sum_to_sum_pre&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.77" steps="279612"/></proof>
  </goal>
  <goal name="mat_sum_to_sum_pre&#39;vc.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mat_sum_to_sum_pre&#39;vc.5.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.26" steps="246590"/></proof>
   </goal>
   <goal name="mat_sum_to_sum_pre&#39;vc.5.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.78" steps="278998"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sum_to_sum_pre&#39;vc.6" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mat_sum_to_sum_pre&#39;vc.6.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.27" steps="246613"/></proof>
   </goal>
   <goal name="mat_sum_to_sum_pre&#39;vc.6.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.60" steps="279017"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sum_to_sum_pre&#39;vc.7" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.76" steps="318423"/></proof>
  </goal>
  <goal name="mat_sum_to_sum_pre&#39;vc.8" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="mat_sum_to_sum_pre&#39;vc.8.0" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(cardinal s =1)">
    <goal name="mat_sum_to_sum_pre&#39;vc.8.0.0" expl="true case (postcondition)" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_to_sum_pre&#39;vc.8.0.0.0" expl="true case (postcondition)" proved="true">
     <proof prover="10"><result status="valid" time="1.00" steps="346020"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_to_sum_pre&#39;vc.8.0.1" expl="false case (postcondition)" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_to_sum_pre&#39;vc.8.0.1.0" expl="false case (postcondition)" proved="true">
     <transf name="eliminate_let" proved="true" >
      <goal name="mat_sum_to_sum_pre&#39;vc.8.0.1.0.0" expl="false case (postcondition)" proved="true">
      <transf name="destruct" proved="true" arg1="H3">
       <goal name="mat_sum_to_sum_pre&#39;vc.8.0.1.0.0.0" expl="false case (postcondition)" proved="true">
       <proof prover="10"><result status="valid" time="0.41" steps="311395"/></proof>
       </goal>
       <goal name="mat_sum_to_sum_pre&#39;vc.8.0.1.0.0.1" expl="false case (postcondition)" proved="true">
       <proof prover="10"><result status="valid" time="2.12" steps="599009"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum_to_sum&#39;vc" expl="VC for mat_sum_to_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sum_to_sum&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.48" steps="330668"/></proof>
  </goal>
  <goal name="mat_sum_to_sum&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.56" steps="362213"/></proof>
  </goal>
  <goal name="mat_sum_to_sum&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.51" steps="361248"/></proof>
  </goal>
  <goal name="mat_sum_to_sum&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.50" steps="361254"/></proof>
  </goal>
  <goal name="mat_sum_to_sum&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.40" steps="361214"/></proof>
  </goal>
  <goal name="mat_sum_to_sum&#39;vc.5" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.41" steps="361219"/></proof>
  </goal>
  <goal name="mat_sum_to_sum&#39;vc.6" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="mat_sum_to_sum&#39;vc.6.0" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="1.08" steps="398749"/></proof>
   </goal>
   <goal name="mat_sum_to_sum&#39;vc.6.1" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="1.08" steps="398678"/></proof>
   </goal>
   <goal name="mat_sum_to_sum&#39;vc.6.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="mat_sum_to_sum&#39;vc.6.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures4">
     <goal name="mat_sum_to_sum&#39;vc.6.2.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="mat_sum_to_sum&#39;vc.6.2.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_to_sum_pre">
       <goal name="mat_sum_to_sum&#39;vc.6.2.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="1.15" steps="398306"/></proof>
       </goal>
       <goal name="mat_sum_to_sum&#39;vc.6.2.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.38" steps="361048"/></proof>
       </goal>
       <goal name="mat_sum_to_sum&#39;vc.6.2.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.39" steps="361050"/></proof>
       </goal>
       <goal name="mat_sum_to_sum&#39;vc.6.2.0.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="1.05" steps="397580"/></proof>
       </goal>
       <goal name="mat_sum_to_sum&#39;vc.6.2.0.0.0.4" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="1.06" steps="397580"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sum_to_sum&#39;vc.7" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="mat_sum_to_sum&#39;vc.7.0" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="1.04" steps="399344"/></proof>
   </goal>
   <goal name="mat_sum_to_sum&#39;vc.7.1" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="1.08" steps="399275"/></proof>
   </goal>
   <goal name="mat_sum_to_sum&#39;vc.7.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="mat_sum_to_sum&#39;vc.7.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="mat_sum_to_sum_pre">
     <goal name="mat_sum_to_sum&#39;vc.7.2.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="assert_make">
      <goal name="mat_sum_to_sum&#39;vc.7.2.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
      </transf>
      </goal>
      <goal name="mat_sum_to_sum&#39;vc.7.2.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="1.08" steps="398364"/></proof>
      </goal>
      <goal name="mat_sum_to_sum&#39;vc.7.2.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="1.08" steps="398364"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_to_sum&#39;vc.7.2.0.1" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.38" steps="361523"/></proof>
     </goal>
     <goal name="mat_sum_to_sum&#39;vc.7.2.0.2" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.38" steps="361525"/></proof>
     </goal>
     <goal name="mat_sum_to_sum&#39;vc.7.2.0.3" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="1.09" steps="398364"/></proof>
     </goal>
     <goal name="mat_sum_to_sum&#39;vc.7.2.0.4" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="1.10" steps="398364"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum_value&#39;vc" expl="VC for mat_sum_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sum_value&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mat_sum_to_sum">
   <goal name="mat_sum_value&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="assert_make">
    <goal name="mat_sum_value&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
    <goal name="mat_sum_value&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="1.87" steps="559355"/></proof>
    </goal>
    <goal name="mat_sum_value&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="1.86" steps="559262"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_value&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="10"><result status="valid" time="0.27" steps="246223"/></proof>
   </goal>
   <goal name="mat_sum_value&#39;vc.0.2" expl="rewrite premises" proved="true">
   <proof prover="10"><result status="valid" time="0.29" steps="246225"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum_add&#39;vc" expl="VC for mat_sum_add" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="mat_sum_add&#39;vc.0" expl="VC for mat_sum_add" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mat_sum_add&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.30" steps="280753"/></proof>
   </goal>
   <goal name="mat_sum_add&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.31" steps="280757"/></proof>
   </goal>
   <goal name="mat_sum_add&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.31" steps="280760"/></proof>
   </goal>
   <goal name="mat_sum_add&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.30" steps="280763"/></proof>
   </goal>
   <goal name="mat_sum_add&#39;vc.0.4" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.31" steps="281456"/></proof>
   </goal>
   <goal name="mat_sum_add&#39;vc.0.5" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.88" steps="314856"/></proof>
   </goal>
   <goal name="mat_sum_add&#39;vc.0.6" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="mat_sum_add&#39;vc.0.6.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_add&#39;vc.0.6.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="1.01" steps="319355"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_add&#39;vc.0.6.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_add&#39;vc.0.6.1.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.89" steps="316930"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_add&#39;vc.0.7" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.53" steps="299337"/></proof>
   </goal>
   <goal name="mat_sum_add&#39;vc.0.8" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.28" steps="281596"/></proof>
   </goal>
   <goal name="mat_sum_add&#39;vc.0.9" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.89" steps="315282"/></proof>
   </goal>
   <goal name="mat_sum_add&#39;vc.0.10" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="mat_sum_add&#39;vc.0.10.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_add&#39;vc.0.10.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.89" steps="317752"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_add&#39;vc.0.10.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_add&#39;vc.0.10.1.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.88" steps="317374"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_add&#39;vc.0.11" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.54" steps="299511"/></proof>
   </goal>
   <goal name="mat_sum_add&#39;vc.0.12" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_equal_mat">
    <goal name="mat_sum_add&#39;vc.0.12.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.86" steps="316654"/></proof>
    </goal>
    <goal name="mat_sum_add&#39;vc.0.12.1" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.88" steps="316633"/></proof>
    </goal>
    <goal name="mat_sum_add&#39;vc.0.12.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_add&#39;vc.0.12.2.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="mat_sum_to_sum_pre">
      <goal name="mat_sum_add&#39;vc.0.12.2.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="add_value">
       <goal name="mat_sum_add&#39;vc.0.12.2.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="mat_sum_to_sum_pre">
        <goal name="mat_sum_add&#39;vc.0.12.2.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="sum_add">
         <goal name="mat_sum_add&#39;vc.0.12.2.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="0.94" steps="339686"/></proof>
         </goal>
         <goal name="mat_sum_add&#39;vc.0.12.2.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.32" steps="281895"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_add&#39;vc.0.12.2.0.0.0.1" expl="rewrite premises" proved="true">
        <transf name="inversion_arg_pr" proved="true" arg1="Ensures4">
         <goal name="mat_sum_add&#39;vc.0.12.2.0.0.0.1.0" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.31" steps="281900"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_add&#39;vc.0.12.2.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.31" steps="281899"/></proof>
        </goal>
        <goal name="mat_sum_add&#39;vc.0.12.2.0.0.0.3" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.84" steps="316283"/></proof>
        </goal>
        <goal name="mat_sum_add&#39;vc.0.12.2.0.0.0.4" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.71" steps="316283"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sum_add&#39;vc.0.12.2.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.88" steps="316500"/></proof>
       </goal>
       <goal name="mat_sum_add&#39;vc.0.12.2.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.85" steps="316524"/></proof>
       </goal>
       <goal name="mat_sum_add&#39;vc.0.12.2.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.86" steps="316500"/></proof>
       </goal>
       <goal name="mat_sum_add&#39;vc.0.12.2.0.0.4" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.88" steps="316289"/></proof>
       </goal>
       <goal name="mat_sum_add&#39;vc.0.12.2.0.0.5" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.88" steps="316289"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sum_add&#39;vc.0.12.2.0.1" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="set_constant_size">
       <goal name="mat_sum_add&#39;vc.0.12.2.0.1.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mat_sum_add&#39;vc.0.12.2.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="0.87" steps="318543"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sum_add&#39;vc.0.12.2.0.1.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mat_sum_add&#39;vc.0.12.2.0.1.1.0" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="0.85" steps="318273"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sum_add&#39;vc.0.12.2.0.2" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.67" steps="316424"/></proof>
      </goal>
      <goal name="mat_sum_add&#39;vc.0.12.2.0.3" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.87" steps="316289"/></proof>
      </goal>
      <goal name="mat_sum_add&#39;vc.0.12.2.0.4" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.67" steps="316289"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum_plus_one&#39;vc" expl="VC for mat_sum_plus_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sum_plus_one&#39;vc.0" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.74" steps="318957"/></proof>
  </goal>
  <goal name="mat_sum_plus_one&#39;vc.1" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.77" steps="317827"/></proof>
  </goal>
  <goal name="mat_sum_plus_one&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.71" steps="316004"/></proof>
  </goal>
  <goal name="mat_sum_plus_one&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.69" steps="315625"/></proof>
  </goal>
  <goal name="mat_sum_plus_one&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.71" steps="315874"/></proof>
  </goal>
  <goal name="mat_sum_plus_one&#39;vc.5" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.70" steps="315793"/></proof>
  </goal>
  <goal name="mat_sum_plus_one&#39;vc.6" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.54" steps="300137"/></proof>
  </goal>
  <goal name="mat_sum_plus_one&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.68" steps="316820"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum_comp_pre&#39;vc" expl="VC for mat_sum_comp_pre" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="mat_sum_comp_pre&#39;vc.0" expl="VC for mat_sum_comp_pre" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mat_sum_comp_pre&#39;vc.0.0" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="sum_eq">
    <goal name="mat_sum_comp_pre&#39;vc.0.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_comp_pre&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="compute_hyp" proved="true" >
      <goal name="mat_sum_comp_pre&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.09" steps="373960"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_comp_pre&#39;vc.0.1" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="(sum s (fun (k:b) -&gt; get (add_mat (f @ k) (g @ k)) i j))" arg2="(sum s
  (fun (k:b) -&gt;
    ((fun (k1:b) -&gt; get (f @ k1) i j) @ k)
    +. ((fun (k1:b) -&gt; get (g @ k1) i j) @ k)))">
    <goal name="mat_sum_comp_pre&#39;vc.0.1.0" expl="assertion" proved="true">
    <transf name="apply" proved="true" arg1="Ensures">
    </transf>
    </goal>
    <goal name="mat_sum_comp_pre&#39;vc.0.1.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="sum_eq">
     <goal name="mat_sum_comp_pre&#39;vc.0.1.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_comp_pre&#39;vc.0.1.1.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="mat_sum_comp_pre&#39;vc.0.1.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.91" steps="338982"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_comp_pre&#39;vc.0.2" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="set_s_rows">
    <goal name="mat_sum_comp_pre&#39;vc.0.2.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="mat_sum_comp_pre&#39;vc.0.2.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_comp_pre&#39;vc.0.2.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="mat_sum_comp_pre&#39;vc.0.2.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="1.02" steps="345111"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_comp_pre&#39;vc.0.2.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_comp_pre&#39;vc.0.2.0.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="mat_sum_comp_pre&#39;vc.0.2.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="1.04" steps="345200"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_comp_pre&#39;vc.0.2.1" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="mat_sum_comp_pre&#39;vc.0.2.1.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.69" steps="313633"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_comp_pre&#39;vc.0.3" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="set_s_columns">
    <goal name="mat_sum_comp_pre&#39;vc.0.3.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="mat_sum_comp_pre&#39;vc.0.3.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_comp_pre&#39;vc.0.3.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="mat_sum_comp_pre&#39;vc.0.3.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.97" steps="345349"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_comp_pre&#39;vc.0.3.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_comp_pre&#39;vc.0.3.0.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="mat_sum_comp_pre&#39;vc.0.3.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.99" steps="345450"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_comp_pre&#39;vc.0.3.1" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="mat_sum_comp_pre&#39;vc.0.3.1.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.82" steps="313823"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_comp_pre&#39;vc.0.4" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_sum_to_sum_pre">
    <goal name="mat_sum_comp_pre&#39;vc.0.4.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(sum s (fun (e:b) -&gt; get ((fun (k:b) -&gt; add_mat (f @ k) (g @ k)) @ e) i j))" arg2="( sum s (fun (k:b) -&gt; get (add_mat (f @ k) (g @ k)) i j))">
     <goal name="mat_sum_comp_pre&#39;vc.0.4.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Assert2">
      <goal name="mat_sum_comp_pre&#39;vc.0.4.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="add_values">
       <goal name="mat_sum_comp_pre&#39;vc.0.4.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="add_eq_t">
        <goal name="mat_sum_comp_pre&#39;vc.0.4.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="mat_sum_to_sum_pre">
         <goal name="mat_sum_comp_pre&#39;vc.0.4.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="0.20" steps="907778"/></proof>
         </goal>
         <goal name="mat_sum_comp_pre&#39;vc.0.4.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.36" steps="272481"/></proof>
         </goal>
         <goal name="mat_sum_comp_pre&#39;vc.0.4.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.41" steps="272483"/></proof>
         </goal>
         <goal name="mat_sum_comp_pre&#39;vc.0.4.0.0.0.0.0.3" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.46" steps="272490"/></proof>
         </goal>
         <goal name="mat_sum_comp_pre&#39;vc.0.4.0.0.0.0.0.4" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.30" steps="272490"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_comp_pre&#39;vc.0.4.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="mat_sum_to_sum_pre">
         <goal name="mat_sum_comp_pre&#39;vc.0.4.0.0.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="0.19" steps="907778"/></proof>
         </goal>
         <goal name="mat_sum_comp_pre&#39;vc.0.4.0.0.0.0.1.1" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.31" steps="272481"/></proof>
         </goal>
         <goal name="mat_sum_comp_pre&#39;vc.0.4.0.0.0.0.1.2" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.28" steps="272483"/></proof>
         </goal>
         <goal name="mat_sum_comp_pre&#39;vc.0.4.0.0.0.0.1.3" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.48" steps="289348"/></proof>
         </goal>
         <goal name="mat_sum_comp_pre&#39;vc.0.4.0.0.0.0.1.4" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.63" steps="289348"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sum_comp_pre&#39;vc.0.4.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="1.73" steps="598409"/></proof>
       </goal>
       <goal name="mat_sum_comp_pre&#39;vc.0.4.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="1.86" steps="598125"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_comp_pre&#39;vc.0.4.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="sum_eq">
      <goal name="mat_sum_comp_pre&#39;vc.0.4.0.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="mat_sum_comp_pre&#39;vc.0.4.0.1.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_comp_pre&#39;vc.0.4.1" expl="rewrite premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="mat_sum_comp_pre&#39;vc.0.4.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_comp_pre&#39;vc.0.4.1.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="mat_sum_comp_pre&#39;vc.0.4.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.79" steps="345583"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_comp_pre&#39;vc.0.4.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_comp_pre&#39;vc.0.4.1.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="mat_sum_comp_pre&#39;vc.0.4.1.1.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.84" steps="345670"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_comp_pre&#39;vc.0.4.2" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.31" steps="272483"/></proof>
    </goal>
    <goal name="mat_sum_comp_pre&#39;vc.0.4.3" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_comp_pre&#39;vc.0.4.3.0" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.32" steps="272481"/></proof>
     </goal>
     <goal name="mat_sum_comp_pre&#39;vc.0.4.3.1" expl="rewrite premises" proved="true">
     <transf name="rewrite" proved="true" arg1="Assert1">
      <goal name="mat_sum_comp_pre&#39;vc.0.4.3.1.0" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.33" steps="272496"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_comp_pre&#39;vc.0.4.4" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_comp_pre&#39;vc.0.4.4.0" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.31" steps="272481"/></proof>
     </goal>
     <goal name="mat_sum_comp_pre&#39;vc.0.4.4.1" expl="rewrite premises" proved="true">
     <transf name="rewrite" proved="true" arg1="Assert">
      <goal name="mat_sum_comp_pre&#39;vc.0.4.4.1.0" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.30" steps="272496"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum_comp&#39;vc" expl="VC for mat_sum_comp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sum_comp&#39;vc.0" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="mat_sum_comp&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="2.13" steps="666697"/></proof>
   </goal>
   <goal name="mat_sum_comp&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="1.93" steps="666204"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sum_comp&#39;vc.1" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="set_s_rows">
   <goal name="mat_sum_comp&#39;vc.1.0" expl="apply premises" proved="true">
   <transf name="replace" proved="true" arg1="(s_rows s f)" arg2="(rows (f(choose s)))">
    <goal name="mat_sum_comp&#39;vc.1.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="mat_sum_comp&#39;vc.1.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_comp&#39;vc.1.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="2.00" steps="682459"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_comp&#39;vc.1.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_comp&#39;vc.1.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.98" steps="681821"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_comp&#39;vc.1.0.1" expl="equality hypothesis" proved="true">
    <transf name="compute_hyp" proved="true" >
     <goal name="mat_sum_comp&#39;vc.1.0.1.0" expl="equality hypothesis" proved="true">
     <proof prover="10"><result status="valid" time="0.46" steps="267767"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_comp&#39;vc.1.1" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="mat_sum_comp&#39;vc.1.1.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.73" steps="284070"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sum_comp&#39;vc.2" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="set_s_columns">
   <goal name="mat_sum_comp&#39;vc.2.0" expl="apply premises" proved="true">
   <transf name="replace" proved="true" arg1="(s_columns s f)" arg2="(columns (f(choose s)))">
    <goal name="mat_sum_comp&#39;vc.2.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="mat_sum_comp&#39;vc.2.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_comp&#39;vc.2.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="2.05" steps="686588"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_comp&#39;vc.2.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_comp&#39;vc.2.0.0.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="mat_sum_comp&#39;vc.2.0.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.91" steps="321186"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_comp&#39;vc.2.0.1" expl="equality hypothesis" proved="true">
    <proof prover="10"><result status="valid" time="0.46" steps="267828"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_comp&#39;vc.2.1" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.71" steps="285215"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sum_comp&#39;vc.3" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="mat_sum_comp&#39;vc.3.0" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="1.96" steps="691091"/></proof>
   </goal>
   <goal name="mat_sum_comp&#39;vc.3.1" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="2.12" steps="690396"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sum_comp&#39;vc.4" expl="assertion" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="mat_sum_comp&#39;vc.4.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_sum&#39;spec3">
    <goal name="mat_sum_comp&#39;vc.4.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="add_mat&#39;spec2">
     <goal name="mat_sum_comp&#39;vc.4.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="Assert2">
      <goal name="mat_sum_comp&#39;vc.4.0.0.0.0" expl="assertion" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum&#39;spec3">
       <goal name="mat_sum_comp&#39;vc.4.0.0.0.0.0" expl="assertion" proved="true">
       <proof prover="10"><result status="valid" time="0.30" steps="276083"/></proof>
       </goal>
       <goal name="mat_sum_comp&#39;vc.4.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.31" steps="276085"/></proof>
       </goal>
       <goal name="mat_sum_comp&#39;vc.4.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.31" steps="276087"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_comp&#39;vc.4.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.66" steps="314116"/></proof>
     </goal>
     <goal name="mat_sum_comp&#39;vc.4.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.65" steps="314200"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_comp&#39;vc.4.0.1" expl="rewrite premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="mat_sum_comp&#39;vc.4.0.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="mat_sum_comp&#39;vc.4.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="0.95" steps="363710"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_comp&#39;vc.4.0.1.1" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="mat_sum_comp&#39;vc.4.0.1.1.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="0.96" steps="363779"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_comp&#39;vc.4.0.2" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.31" steps="276087"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sum_comp&#39;vc.5" expl="assertion" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="mat_sum_comp&#39;vc.5.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_sum&#39;spec2">
    <goal name="mat_sum_comp&#39;vc.5.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="add_mat&#39;spec4">
     <goal name="mat_sum_comp&#39;vc.5.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="mat_sum&#39;spec2">
      <goal name="mat_sum_comp&#39;vc.5.0.0.0.0" expl="assertion" proved="true">
      <proof prover="10"><result status="valid" time="0.82" steps="314751"/></proof>
      </goal>
      <goal name="mat_sum_comp&#39;vc.5.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.30" steps="280306"/></proof>
      </goal>
      <goal name="mat_sum_comp&#39;vc.5.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.30" steps="280308"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_comp&#39;vc.5.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.82" steps="314446"/></proof>
     </goal>
     <goal name="mat_sum_comp&#39;vc.5.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.66" steps="314440"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_comp&#39;vc.5.0.1" expl="rewrite premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="mat_sum_comp&#39;vc.5.0.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="mat_sum_comp&#39;vc.5.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="0.83" steps="364902"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_comp&#39;vc.5.0.1.1" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="mat_sum_comp&#39;vc.5.0.1.1.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="0.82" steps="365338"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_comp&#39;vc.5.0.2" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.31" steps="280308"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sum_comp&#39;vc.6" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="(s_rows s f)" arg2="(rows (mat_sum s (fun (k:b) -&gt; add_mat (f @ k) (g @ k))))">
   <goal name="mat_sum_comp&#39;vc.6.0" expl="assertion" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="mat_sum_comp&#39;vc.6.0.0" expl="VC for mat_sum_comp" proved="true">
    <proof prover="10"><result status="valid" time="0.69" steps="316010"/></proof>
    </goal>
    <goal name="mat_sum_comp&#39;vc.6.0.1" expl="VC for mat_sum_comp" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="mat_sum_comp&#39;vc.6.0.1.0" expl="VC for mat_sum_comp" proved="true">
     <transf name="rewrite" proved="true" arg1="valid_index&#39;def" arg2="in" arg3="H">
      <goal name="mat_sum_comp&#39;vc.6.0.1.0.0" expl="VC for mat_sum_comp" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="mat_sum_comp&#39;vc.6.0.1.0.0.0" expl="VC for mat_sum_comp" proved="true">
       <transf name="apply" proved="true" arg1="H2">
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_comp&#39;vc.6.1" expl="equality hypothesis" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="mat_sum_comp&#39;vc.6.1.0" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="Assert1">
     <goal name="mat_sum_comp&#39;vc.6.1.0.0" expl="equality hypothesis" proved="true">
     <proof prover="10"><result status="valid" time="0.77" steps="321062"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sum_comp&#39;vc.7" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="(s_columns s f)" arg2="(columns (mat_sum s (fun (k:b) -&gt; add_mat (f @ k) (g @ k))))">
   <goal name="mat_sum_comp&#39;vc.7.0" expl="assertion" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="mat_sum_comp&#39;vc.7.0.0" expl="VC for mat_sum_comp" proved="true">
    <proof prover="10"><result status="valid" time="0.67" steps="316267"/></proof>
    </goal>
    <goal name="mat_sum_comp&#39;vc.7.0.1" expl="VC for mat_sum_comp" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="mat_sum_comp&#39;vc.7.0.1.0" expl="VC for mat_sum_comp" proved="true">
     <transf name="rewrite" proved="true" arg1="valid_index&#39;def" arg2="in" arg3="H">
      <goal name="mat_sum_comp&#39;vc.7.0.1.0.0" expl="VC for mat_sum_comp" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="mat_sum_comp&#39;vc.7.0.1.0.0.0" expl="VC for mat_sum_comp" proved="true">
       <transf name="apply" proved="true" arg1="H">
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_comp&#39;vc.7.1" expl="equality hypothesis" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="mat_sum_comp&#39;vc.7.1.0" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="Assert2">
     <goal name="mat_sum_comp&#39;vc.7.1.0.0" expl="equality hypothesis" proved="true">
     <proof prover="10"><result status="valid" time="0.94" steps="321490"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sum_comp&#39;vc.8" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="mat_sum_comp&#39;vc.8.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="Assert3">
   </transf>
   </goal>
   <goal name="mat_sum_comp&#39;vc.8.1" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="Assert2">
   </transf>
   </goal>
   <goal name="mat_sum_comp&#39;vc.8.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="mat_sum_comp&#39;vc.8.2.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="mat_sum_comp_pre">
     <goal name="mat_sum_comp&#39;vc.8.2.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.30" steps="249895"/></proof>
     </goal>
     <goal name="mat_sum_comp&#39;vc.8.2.0.1" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.31" steps="249895"/></proof>
     </goal>
     <goal name="mat_sum_comp&#39;vc.8.2.0.2" expl="apply premises" proved="true">
     <transf name="instantiate" proved="true" arg1="Assert1" arg2="i,j">
      <goal name="mat_sum_comp&#39;vc.8.2.0.2.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="Hinst">
       <goal name="mat_sum_comp&#39;vc.8.2.0.2.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="H">
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_comp&#39;vc.8.2.0.3" expl="apply premises" proved="true">
     <transf name="instantiate" proved="true" arg1="Assert" arg2="i,j">
      <goal name="mat_sum_comp&#39;vc.8.2.0.3.0" expl="apply premises" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="mat_sum_comp&#39;vc.8.2.0.3.0.0" expl="destruct premise" proved="true">
       <transf name="apply" proved="true" arg1="H">
       </transf>
       </goal>
       <goal name="mat_sum_comp&#39;vc.8.2.0.3.0.1" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="Hinst">
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_comp&#39;vc.8.2.0.4" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.30" steps="249895"/></proof>
     </goal>
     <goal name="mat_sum_comp&#39;vc.8.2.0.5" expl="apply premises" proved="true">
     <transf name="instantiate" proved="true" arg1="Assert" arg2="i,j">
      <goal name="mat_sum_comp&#39;vc.8.2.0.5.0" expl="apply premises" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="mat_sum_comp&#39;vc.8.2.0.5.0.0" expl="destruct premise" proved="true">
       <transf name="apply" proved="true" arg1="H">
       </transf>
       </goal>
       <goal name="mat_sum_comp&#39;vc.8.2.0.5.0.1" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.29" steps="249922"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_comp&#39;vc.8.2.0.6" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.28" steps="249897"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sum_comp&#39;vc.9" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="Assert">
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum_comp_rec&#39;vc" expl="VC for mat_sum_comp_rec" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sum_comp_rec&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mat_sum_comp">
   <goal name="mat_sum_comp_rec&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.28" steps="245580"/></proof>
   </goal>
   <goal name="mat_sum_comp_rec&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="10"><result status="valid" time="0.30" steps="245582"/></proof>
   </goal>
   <goal name="mat_sum_comp_rec&#39;vc.0.2" expl="rewrite premises" proved="true">
   <proof prover="10"><result status="valid" time="0.29" steps="245582"/></proof>
   </goal>
   <goal name="mat_sum_comp_rec&#39;vc.0.3" expl="rewrite premises" proved="true">
   <proof prover="10"><result status="valid" time="0.30" steps="245582"/></proof>
   </goal>
   <goal name="mat_sum_comp_rec&#39;vc.0.4" expl="rewrite premises" proved="true">
   <proof prover="10"><result status="valid" time="0.28" steps="245582"/></proof>
   </goal>
   <goal name="mat_sum_comp_rec&#39;vc.0.5" expl="rewrite premises" proved="true">
   <proof prover="10"><result status="valid" time="0.29" steps="245584"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum_to_sum_fun&#39;vc" expl="VC for mat_sum_to_sum_fun" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sum_to_sum_fun&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="sum_eq">
   <goal name="mat_sum_to_sum_fun&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="mat_sum_to_sum_fun&#39;vc.0.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="mat_sum_to_sum_fun&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="mat_sum_to_sum_pre">
      <goal name="mat_sum_to_sum_fun&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.09" steps="435677"/></proof>
      </goal>
      <goal name="mat_sum_to_sum_fun&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="mat_sum_to_sum_fun&#39;vc.0.0.0.0.1.0" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="mat_sum_to_sum_fun&#39;vc.0.0.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_sum_to_sum_fun&#39;vc.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="0.76" steps="396665"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_to_sum_fun&#39;vc.0.0.0.0.1.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_sum_to_sum_fun&#39;vc.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="0.99" steps="396665"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sum_to_sum_fun&#39;vc.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.44" steps="374868"/></proof>
      </goal>
      <goal name="mat_sum_to_sum_fun&#39;vc.0.0.0.0.3" expl="rewrite premises" proved="true">
      <transf name="replace" proved="true" arg1="( s_rows s&#39; (f @ x))" arg2="r">
       <goal name="mat_sum_to_sum_fun&#39;vc.0.0.0.0.3.0" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.41" steps="374875"/></proof>
       </goal>
       <goal name="mat_sum_to_sum_fun&#39;vc.0.0.0.0.3.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="set_s_rows">
        <goal name="mat_sum_to_sum_fun&#39;vc.0.0.0.0.3.1.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="mat_sum_to_sum_fun&#39;vc.0.0.0.0.3.1.0.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="mat_sum_to_sum_fun&#39;vc.0.0.0.0.3.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="0.93" steps="396665"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sum_to_sum_fun&#39;vc.0.0.0.0.3.1.0.1" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="mat_sum_to_sum_fun&#39;vc.0.0.0.0.3.1.0.1.0" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="0.93" steps="396665"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_to_sum_fun&#39;vc.0.0.0.0.3.1.1" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="1.16" steps="414521"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sum_to_sum_fun&#39;vc.0.0.0.0.4" expl="rewrite premises" proved="true">
      <transf name="replace" proved="true" arg1="(s_columns s&#39; (f @ x))" arg2="c">
       <goal name="mat_sum_to_sum_fun&#39;vc.0.0.0.0.4.0" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.44" steps="374875"/></proof>
       </goal>
       <goal name="mat_sum_to_sum_fun&#39;vc.0.0.0.0.4.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="set_s_columns">
        <goal name="mat_sum_to_sum_fun&#39;vc.0.0.0.0.4.1.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="mat_sum_to_sum_fun&#39;vc.0.0.0.0.4.1.0.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="mat_sum_to_sum_fun&#39;vc.0.0.0.0.4.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="0.93" steps="396665"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sum_to_sum_fun&#39;vc.0.0.0.0.4.1.0.1" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="mat_sum_to_sum_fun&#39;vc.0.0.0.0.4.1.0.1.0" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="0.94" steps="396665"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_to_sum_fun&#39;vc.0.0.0.0.4.1.1" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="1.16" steps="414493"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum_to_sum_double_pre&#39;vc" expl="VC for mat_sum_to_sum_double_pre" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="mat_sum_to_sum_double_pre&#39;vc.0" expl="VC for mat_sum_to_sum_double_pre" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mat_sum_to_sum_double_pre&#39;vc.0.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="mat_sum_to_sum_double_pre&#39;vc.0.0.0" expl="assertion" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="mat_sum_to_sum_double_pre&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_to_sum_double_pre&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="0.93" steps="403647"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_to_sum_double_pre&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_to_sum_double_pre&#39;vc.0.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="0.97" steps="403647"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_to_sum_double_pre&#39;vc.0.0.1" expl="assertion" proved="true">
    <transf name="apply" proved="true" arg1="set_s_rows">
     <goal name="mat_sum_to_sum_double_pre&#39;vc.0.0.1.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="mat_sum_to_sum_double_pre&#39;vc.0.0.1.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="mat_sum_to_sum_double_pre&#39;vc.0.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.76" steps="403647"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sum_to_sum_double_pre&#39;vc.0.0.1.0.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="mat_sum_to_sum_double_pre&#39;vc.0.0.1.0.1.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.97" steps="403647"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_to_sum_double_pre&#39;vc.0.0.1.1" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="1.20" steps="421632"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_to_sum_double_pre&#39;vc.0.0.2" expl="assertion" proved="true">
    <transf name="apply" proved="true" arg1="set_s_columns">
     <goal name="mat_sum_to_sum_double_pre&#39;vc.0.0.2.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="mat_sum_to_sum_double_pre&#39;vc.0.0.2.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="mat_sum_to_sum_double_pre&#39;vc.0.0.2.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.99" steps="403647"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sum_to_sum_double_pre&#39;vc.0.0.2.0.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="mat_sum_to_sum_double_pre&#39;vc.0.0.2.0.1.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.99" steps="403647"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_to_sum_double_pre&#39;vc.0.0.2.1" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="1.23" steps="421604"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_to_sum_double_pre&#39;vc.0.1" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="mat_sum_to_sum_double_pre&#39;vc.0.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_to_sum_double_pre&#39;vc.0.1.0.0" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="0.27" steps="1187352"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_to_sum_double_pre&#39;vc.0.1.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_to_sum_double_pre&#39;vc.0.1.1.0" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="0.27" steps="1187058"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_to_sum_double_pre&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.01" steps="420928"/></proof>
   </goal>
   <goal name="mat_sum_to_sum_double_pre&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.50" steps="399827"/></proof>
   </goal>
   <goal name="mat_sum_to_sum_double_pre&#39;vc.0.4" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.48" steps="399820"/></proof>
   </goal>
   <goal name="mat_sum_to_sum_double_pre&#39;vc.0.5" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="mat_sum_to_sum_double_pre&#39;vc.0.5.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="mat_sum_to_sum_double_pre&#39;vc.0.5.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="1.25" steps="440550"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_to_sum_double_pre&#39;vc.0.5.1" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="mat_sum_to_sum_double_pre&#39;vc.0.5.1.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="1.24" steps="440382"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_to_sum_double_pre&#39;vc.0.6" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.46" steps="399886"/></proof>
   </goal>
   <goal name="mat_sum_to_sum_double_pre&#39;vc.0.7" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(s_rows s
    (fun (e:a) -&gt; if mem e s then mat_sum s&#39; (f @ e) else make 1 1 c_one))" arg2="r">
    <goal name="mat_sum_to_sum_double_pre&#39;vc.0.7.0" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.48" steps="399899"/></proof>
    </goal>
    <goal name="mat_sum_to_sum_double_pre&#39;vc.0.7.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="set_s_rows">
     <goal name="mat_sum_to_sum_double_pre&#39;vc.0.7.1.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="mat_sum_to_sum_double_pre&#39;vc.0.7.1.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="mat_sum_to_sum_double_pre&#39;vc.0.7.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="1.29" steps="441220"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sum_to_sum_double_pre&#39;vc.0.7.1.0.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="mat_sum_to_sum_double_pre&#39;vc.0.7.1.0.1.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="1.30" steps="441052"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_to_sum_double_pre&#39;vc.0.7.1.1" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="0.27" steps="1200083"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_to_sum_double_pre&#39;vc.0.8" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(s_columns s
    (fun (e:a) -&gt; if mem e s then mat_sum s&#39; (f @ e) else make 1 1 c_one))" arg2="c">
    <goal name="mat_sum_to_sum_double_pre&#39;vc.0.8.0" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.51" steps="399898"/></proof>
    </goal>
    <goal name="mat_sum_to_sum_double_pre&#39;vc.0.8.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="set_s_columns">
     <goal name="mat_sum_to_sum_double_pre&#39;vc.0.8.1.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="mat_sum_to_sum_double_pre&#39;vc.0.8.1.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="mat_sum_to_sum_double_pre&#39;vc.0.8.1.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="mat_sum_to_sum_double_pre&#39;vc.0.8.1.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="1.30" steps="441406"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sum_to_sum_double_pre&#39;vc.0.8.1.0.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="mat_sum_to_sum_double_pre&#39;vc.0.8.1.0.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="mat_sum_to_sum_double_pre&#39;vc.0.8.1.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="1.28" steps="441232"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_to_sum_double_pre&#39;vc.0.8.1.1" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="0.27" steps="1203465"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_sum_to_sum_pre">
    <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="sum_eq">
     <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="mat_sum_to_sum_pre">
        <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="1.42" steps="488940"/></proof>
        </goal>
        <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="1.07" steps="444198"/></proof>
        </goal>
        <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.48" steps="422474"/></proof>
        </goal>
        <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.0.0.0.0.3" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="1.28" steps="462813"/></proof>
        </goal>
        <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.0.0.0.0.4" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="1.31" steps="462813"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.1" expl="rewrite premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.1.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.31" steps="464393"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.1.1" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.1.1.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.35" steps="464228"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.2" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.51" steps="422462"/></proof>
    </goal>
    <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.3" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.3.0" expl="rewrite premises" proved="true">
     <transf name="replace" proved="true" arg1="(s_columns s (fun (e:a) -&gt; mat_sum s&#39; (f @ e)))" arg2="c">
      <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.3.0.0" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.50" steps="422460"/></proof>
      </goal>
      <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.3.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="set_s_columns">
       <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.3.0.1.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.3.0.1.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.3.0.1.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.3.0.1.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="1.05" steps="464305"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.3.0.1.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.3.0.1.0.1.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.3.0.1.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="1.05" steps="464140"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.3.0.1.1" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="0.28" steps="1254089"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.3.1" expl="rewrite premises" proved="true">
     <transf name="replace" proved="true" arg1="(s_rows s (fun (e:a) -&gt; mat_sum s&#39; (f @ e)))" arg2="r">
      <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.3.1.0" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.51" steps="422462"/></proof>
      </goal>
      <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.3.1.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="set_s_rows">
       <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.3.1.1.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.3.1.1.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.3.1.1.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.3.1.1.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="1.05" steps="464305"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.3.1.1.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.3.1.1.0.1.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.3.1.1.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="1.28" steps="464140"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.3.1.1.1" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="0.26" steps="1254103"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.4" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.4.0" expl="rewrite premises" proved="true">
     <transf name="replace" proved="true" arg1="(s_rows s (fun (e:a) -&gt; mat_sum s&#39; (f @ e)))" arg2="r">
      <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.4.0.0" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.49" steps="422460"/></proof>
      </goal>
      <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.4.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="set_s_rows">
       <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.4.0.1.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.4.0.1.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.4.0.1.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.4.0.1.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="1.29" steps="464305"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.4.0.1.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.4.0.1.0.1.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.4.0.1.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="1.30" steps="464140"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.4.0.1.1" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="0.25" steps="1254103"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.4.1" expl="rewrite premises" proved="true">
     <transf name="replace" proved="true" arg1="(s_columns s (fun (e:a) -&gt; mat_sum s&#39; (f @ e)))" arg2="c">
      <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.4.1.0" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.63" steps="422462"/></proof>
      </goal>
      <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.4.1.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="set_s_columns">
       <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.4.1.1.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.4.1.1.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.4.1.1.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.4.1.1.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="1.31" steps="464305"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.4.1.1.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.4.1.1.0.1.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.4.1.1.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="1.33" steps="464140"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sum_to_sum_double_pre&#39;vc.0.9.4.1.1.1" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="0.28" steps="1254089"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_mult_sum_out_l&#39;vc" expl="VC for mat_mult_sum_out_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_mult_sum_out_l&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.33" steps="290680"/></proof>
  </goal>
  <goal name="mat_mult_sum_out_l&#39;vc.1" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mat_mult_sum_out_l&#39;vc.1.0" expl="variant decrease" proved="true">
   <proof prover="10"><result status="valid" time="0.68" steps="307897"/></proof>
   </goal>
   <goal name="mat_mult_sum_out_l&#39;vc.1.1" expl="variant decrease" proved="true">
   <proof prover="10"><result status="valid" time="0.90" steps="325167"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mat_mult_sum_out_l&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.85" steps="325208"/></proof>
  </goal>
  <goal name="mat_mult_sum_out_l&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.84" steps="325496"/></proof>
  </goal>
  <goal name="mat_mult_sum_out_l&#39;vc.4" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.16" steps="769044"/></proof>
  </goal>
  <goal name="mat_mult_sum_out_l&#39;vc.5" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.85" steps="325680"/></proof>
  </goal>
  <goal name="mat_mult_sum_out_l&#39;vc.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mat_mult_sum_out_l&#39;vc.6.0" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.56" steps="309834"/></proof>
   </goal>
   <goal name="mat_mult_sum_out_l&#39;vc.6.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="mat_mult_sum_out_l&#39;vc.6.1.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="mat_sum_add" arg2="(remove (choose s) s),f,(choose s)">
     <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(add (choose s) (remove (choose s) s))" arg2="s" arg3="in" arg4="Hinst">
      <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="Hinst">
       <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="distr_l">
        <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="instantiate" proved="true" arg1="mat_sum_add" arg2="(remove (choose s) s),(fun (e:a) -&gt; mat_mult (f @ e) n),(choose s)">
         <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="replace" proved="true" arg1="(add (choose s) (remove (choose s) s))" arg2="s" arg3="in" arg4="Hinst">
          <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="rewrite" proved="true" arg1="Hinst">
           <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <transf name="apply" proved="true" arg1="add_mat_eq">
            <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="3.43" steps="1279530"/></proof>
            </goal>
            <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="3.40" steps="1267960"/></proof>
            </goal>
            <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="0.68" steps="311215"/></proof>
            </goal>
            <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="Ensures">
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="10"><result status="valid" time="0.85" steps="333013"/></proof>
           </goal>
           <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="set_constant_size">
            <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="4.39" steps="1531463"/></proof>
            </goal>
            <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.2.1" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="2.12" steps="717942"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.3.0" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="goal_comm">
             <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="set_s_rows">
              <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
              <transf name="apply" proved="true" arg1="set_constant_size">
               <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="10"><result status="valid" time="4.44" steps="1531463"/></proof>
               </goal>
               <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.3.0.0.0.1" expl="apply premises" proved="true">
               <proof prover="10"><result status="valid" time="2.14" steps="717942"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.3.0.0.1" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.3.0.0.1.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="mat_mult_rows">
                <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.3.0.0.1.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="mat_mult_rows">
                 <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.3.0.0.1.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="Requires">
                  <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.3.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="Requires">
                   <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.3.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                   <proof prover="10"><result status="valid" time="0.33" steps="293482"/></proof>
                   </goal>
                   <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.3.0.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
                   <proof prover="10"><result status="valid" time="0.54" steps="311173"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.3.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="10"><result status="valid" time="0.89" steps="333581"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.3.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                 <proof prover="10"><result status="valid" time="0.71" steps="333412"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.3.0.0.1.0.1" expl="rewrite premises" proved="true">
                <transf name="apply" proved="true" arg1="Requires1">
                 <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.3.0.0.1.0.1.0" expl="apply premises" proved="true">
                 <proof prover="10"><result status="valid" time="0.86" steps="333581"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.4" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="goal_comm">
            <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.4.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="set_s_columns">
             <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.4.0.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="set_constant_size">
              <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.4.0.0.0" expl="apply premises" proved="true">
              <proof prover="10"><result status="valid" time="4.37" steps="1531463"/></proof>
              </goal>
              <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.4.0.0.1" expl="apply premises" proved="true">
              <proof prover="10"><result status="valid" time="2.18" steps="717942"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.4.0.1" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.4.0.1.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="mat_mult_columns">
               <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.4.0.1.0.0" expl="apply premises" proved="true">
               <proof prover="10"><result status="valid" time="0.91" steps="333428"/></proof>
               </goal>
               <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.4.0.1.0.1" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="Requires1">
                <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.4.0.1.0.1.0" expl="apply premises" proved="true">
                <proof prover="10"><result status="valid" time="0.89" steps="333581"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.0.5" expl="rewrite premises" proved="true">
           <proof prover="10"><result status="valid" time="0.76" steps="311157"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="10"><result status="valid" time="0.36" steps="293484"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.1" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="Requires">
         <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.1.0" expl="rewrite premises" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
          <transf name="rewrite" proved="true" arg1="mat_sum&#39;spec3">
           <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.1.0.0.0" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="goal_comm">
            <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="set_s_rows">
             <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="set_constant_size">
              <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="10"><result status="valid" time="1.04" steps="373212"/></proof>
              </goal>
              <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
              <proof prover="10"><result status="valid" time="1.08" steps="373129"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="10"><result status="valid" time="1.21" steps="374890"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="10"><result status="valid" time="2.03" steps="642381"/></proof>
           </goal>
           <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="10"><result status="valid" time="1.03" steps="371955"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.1.1" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.58" steps="310653"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.2" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="Requires1">
         <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.2.0" expl="rewrite premises" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
          <transf name="rewrite" proved="true" arg1="mat_sum&#39;spec2">
           <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.2.0.0.0" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="goal_comm">
            <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="set_s_columns">
             <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="set_constant_size">
              <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="10"><result status="valid" time="1.00" steps="373212"/></proof>
              </goal>
              <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.2.0.0.0.0.0.1" expl="apply premises" proved="true">
              <proof prover="10"><result status="valid" time="0.98" steps="373129"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.2.0.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="10"><result status="valid" time="1.10" steps="375191"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="set_constant_size">
            <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.2.0.0.1.0" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="1.05" steps="373212"/></proof>
            </goal>
            <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.2.0.0.1.1" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="1.02" steps="373129"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.2.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="10"><result status="valid" time="1.03" steps="371955"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.2.1" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.74" steps="310653"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.0.3" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.92" steps="328991"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.91" steps="328450"/></proof>
       </goal>
       <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.2" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.2.0" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="0.92" steps="330249"/></proof>
        </goal>
        <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.2.1" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="0.89" steps="329928"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.3" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="goal_comm">
        <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.3.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_s_rows">
         <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.3.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_constant_size">
          <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.3.0.0.0" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="0.86" steps="330249"/></proof>
          </goal>
          <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.3.0.0.1" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="0.93" steps="329928"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.3.0.1" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="Requires">
          <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.3.0.1.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="Requires">
           <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.3.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="10"><result status="valid" time="0.47" steps="292976"/></proof>
           </goal>
           <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.3.0.1.0.1" expl="rewrite premises" proved="true">
           <proof prover="10"><result status="valid" time="0.76" steps="310653"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.3.0.1.1" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="0.91" steps="328828"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.4" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="goal_comm">
        <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.4.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_s_columns">
         <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.4.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_constant_size">
          <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.4.0.0.0" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="0.90" steps="330249"/></proof>
          </goal>
          <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.4.0.0.1" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="0.95" steps="329928"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.4.0.1" expl="apply premises" proved="true">
         <transf name="instantiate" proved="true" arg1="get_constant_size" arg2="s,f">
          <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.4.0.1.0" expl="apply premises" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.4.0.1.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="Hinst">
            <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.4.0.1.0.0.0" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="1.10" steps="374740"/></proof>
            </goal>
            <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.4.0.1.0.0.1" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="1.04" steps="372698"/></proof>
            </goal>
            <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.4.0.1.0.0.2" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="0.91" steps="354717"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.0.5" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.78" steps="310637"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="mat_mult_sum_out_l&#39;vc.6.1.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="10"><result status="valid" time="0.35" steps="292978"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum_dim&#39;vc" expl="VC for mat_sum_dim" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="mat_sum_dim&#39;vc.0" expl="VC for mat_sum_dim" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mat_sum_dim&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.35" steps="291541"/></proof>
   </goal>
   <goal name="mat_sum_dim&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.37" steps="291547"/></proof>
   </goal>
   <goal name="mat_sum_dim&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.43" steps="349988"/></proof>
   </goal>
   <goal name="mat_sum_dim&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.15" steps="387153"/></proof>
   </goal>
   <goal name="mat_sum_dim&#39;vc.0.4" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.14" steps="387463"/></proof>
   </goal>
   <goal name="mat_sum_dim&#39;vc.0.5" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="assert_make">
    <goal name="mat_sum_dim&#39;vc.0.5.0" expl="precondition" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="mat_sum_dim&#39;vc.0.5.0.0" expl="precondition" proved="true">
     <proof prover="10"><result status="valid" time="1.20" steps="412842"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_dim&#39;vc.0.5.1" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="1.12" steps="386594"/></proof>
    </goal>
    <goal name="mat_sum_dim&#39;vc.0.5.2" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="1.11" steps="386594"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_dim&#39;vc.0.6" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.40" steps="350308"/></proof>
   </goal>
   <goal name="mat_sum_dim&#39;vc.0.7" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="mat_sum_dim&#39;vc.0.7.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_dim&#39;vc.0.7.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.74" steps="310032"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_dim&#39;vc.0.7.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_dim&#39;vc.0.7.1.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.59" steps="310032"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_dim&#39;vc.0.8" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.73" steps="324319"/></proof>
   </goal>
   <goal name="mat_sum_dim&#39;vc.0.9" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="mat_sum_dim&#39;vc.0.9.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_dim&#39;vc.0.9.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.90" steps="371019"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_dim&#39;vc.0.9.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_dim&#39;vc.0.9.1.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.72" steps="371019"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_dim&#39;vc.0.10" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.11" steps="385123"/></proof>
   </goal>
   <goal name="mat_sum_dim&#39;vc.0.11" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.84" steps="370607"/></proof>
   </goal>
   <goal name="mat_sum_dim&#39;vc.0.12" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.38" steps="351431"/></proof>
   </goal>
   <goal name="mat_sum_dim&#39;vc.0.13" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(cardinal s = 0)">
    <goal name="mat_sum_dim&#39;vc.0.13.0" expl="true case (postcondition)" proved="true">
    <proof prover="10"><result status="valid" time="0.40" steps="351442"/></proof>
    </goal>
    <goal name="mat_sum_dim&#39;vc.0.13.1" expl="false case (postcondition)" proved="true">
    <transf name="destruct" proved="true" arg1="H">
     <goal name="mat_sum_dim&#39;vc.0.13.1.0" expl="false case (postcondition)" proved="true">
     <proof prover="10"><result status="valid" time="0.38" steps="351072"/></proof>
     </goal>
     <goal name="mat_sum_dim&#39;vc.0.13.1.1" expl="false case (postcondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures1">
      <goal name="mat_sum_dim&#39;vc.0.13.1.1.0" expl="false case (postcondition)" proved="true">
      <transf name="apply" proved="true" arg1="rows_mat_sum">
       <goal name="mat_sum_dim&#39;vc.0.13.1.1.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.52" steps="351247"/></proof>
       </goal>
       <goal name="mat_sum_dim&#39;vc.0.13.1.1.0.1" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="mat_sum_dim&#39;vc.0.13.1.1.0.1.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_sum_dim&#39;vc.0.13.1.1.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="0.91" steps="372305"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_dim&#39;vc.0.13.1.1.0.1.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_sum_dim&#39;vc.0.13.1.1.0.1.1.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="0.87" steps="372313"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sum_dim&#39;vc.0.13.1.1.0.2" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.87" steps="370826"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sum_dim&#39;vc.0.13.1.1.1" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="1.09" steps="386522"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_dim&#39;vc.0.14" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(cardinal s = 0)">
    <goal name="mat_sum_dim&#39;vc.0.14.0" expl="true case (postcondition)" proved="true">
    <proof prover="10"><result status="valid" time="0.38" steps="351445"/></proof>
    </goal>
    <goal name="mat_sum_dim&#39;vc.0.14.1" expl="false case (postcondition)" proved="true">
    <transf name="destruct" proved="true" arg1="H">
     <goal name="mat_sum_dim&#39;vc.0.14.1.0" expl="false case (postcondition)" proved="true">
     <proof prover="10"><result status="valid" time="0.39" steps="351075"/></proof>
     </goal>
     <goal name="mat_sum_dim&#39;vc.0.14.1.1" expl="false case (postcondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures2">
      <goal name="mat_sum_dim&#39;vc.0.14.1.1.0" expl="false case (postcondition)" proved="true">
      <transf name="apply" proved="true" arg1="columns_mat_sum">
       <goal name="mat_sum_dim&#39;vc.0.14.1.1.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.39" steps="351258"/></proof>
       </goal>
       <goal name="mat_sum_dim&#39;vc.0.14.1.1.0.1" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="mat_sum_dim&#39;vc.0.14.1.1.0.1.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_sum_dim&#39;vc.0.14.1.1.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="0.94" steps="372355"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_dim&#39;vc.0.14.1.1.0.1.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_sum_dim&#39;vc.0.14.1.1.0.1.1.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="0.94" steps="372355"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sum_dim&#39;vc.0.14.1.1.0.2" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.73" steps="370873"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sum_dim&#39;vc.0.14.1.1.1" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="1.16" steps="386560"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum_dim_to_mat_sum&#39;vc" expl="VC for mat_sum_dim_to_mat_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sum_dim_to_mat_sum&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.89" steps="326157"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum_dim_to_make_zero&#39;vc" expl="VC for mat_sum_dim_to_make_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sum_dim_to_make_zero&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.91" steps="326690"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum_dim_add&#39;vc" expl="VC for mat_sum_dim_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sum_dim_add&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mat_sum_dim_add&#39;vc.0.0" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="(mat_sum_dim s f r c)" arg2="(make r c c_zero)">
    <goal name="mat_sum_dim_add&#39;vc.0.0.0" expl="assertion" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="mat_sum_dim_add&#39;vc.0.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="mat_sum_dim&#39;def">
      <goal name="mat_sum_dim_add&#39;vc.0.0.0.0.0" expl="assertion" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_cardone">
       <goal name="mat_sum_dim_add&#39;vc.0.0.0.0.0.0" expl="assertion" proved="true">
       <proof prover="10"><result status="valid" time="1.11" steps="405372"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="1.08" steps="373948"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sum_dim_add&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.39" steps="339754"/></proof>
      </goal>
      <goal name="mat_sum_dim_add&#39;vc.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.40" steps="339754"/></proof>
      </goal>
      <goal name="mat_sum_dim_add&#39;vc.0.0.0.0.3" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.89" steps="358728"/></proof>
      </goal>
      <goal name="mat_sum_dim_add&#39;vc.0.0.0.0.4" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.80" steps="358728"/></proof>
      </goal>
      <goal name="mat_sum_dim_add&#39;vc.0.0.0.0.5" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="1.00" steps="373640"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_dim_add&#39;vc.0.0.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_mat">
     <goal name="mat_sum_dim_add&#39;vc.0.0.1.0" expl="apply premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="mat_sum_dim_add&#39;vc.0.0.1.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_dim&#39;spec1">
       <goal name="mat_sum_dim_add&#39;vc.0.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="1.08" steps="374178"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.0.0.1.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.40" steps="339754"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.0.0.1.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.40" steps="339754"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.0.0.1.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.99" steps="373918"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.0.0.1.0.0.4" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="1.07" steps="373946"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_dim_add&#39;vc.0.0.1.1" expl="apply premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="mat_sum_dim_add&#39;vc.0.0.1.1.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_dim&#39;spec">
       <goal name="mat_sum_dim_add&#39;vc.0.0.1.1.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="1.03" steps="374206"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.0.0.1.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.53" steps="339754"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.0.0.1.1.0.2" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.37" steps="339754"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.0.0.1.1.0.3" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.99" steps="373918"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.0.0.1.1.0.4" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.99" steps="373946"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_dim_add&#39;vc.0.0.1.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_dim_add&#39;vc.0.0.1.2.0" expl="apply premises" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="mat_sum_dim_add&#39;vc.0.0.1.2.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="mat_sum_dim&#39;spec2">
        <goal name="mat_sum_dim_add&#39;vc.0.0.1.2.0.0.0" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="0.39" steps="341301"/></proof>
        </goal>
        <goal name="mat_sum_dim_add&#39;vc.0.0.1.2.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.40" steps="341305"/></proof>
        </goal>
        <goal name="mat_sum_dim_add&#39;vc.0.0.1.2.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.52" steps="341305"/></proof>
        </goal>
        <goal name="mat_sum_dim_add&#39;vc.0.0.1.2.0.0.3" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="1.08" steps="376094"/></proof>
        </goal>
        <goal name="mat_sum_dim_add&#39;vc.0.0.1.2.0.0.4" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.99" steps="376112"/></proof>
        </goal>
        <goal name="mat_sum_dim_add&#39;vc.0.0.1.2.0.0.5" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.38" steps="341303"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_dim_add&#39;vc.0.1" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="set_equal_mat">
    <goal name="mat_sum_dim_add&#39;vc.0.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="add_rows">
     <goal name="mat_sum_dim_add&#39;vc.0.1.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.32" steps="295107"/></proof>
     </goal>
     <goal name="mat_sum_dim_add&#39;vc.0.1.0.1" expl="rewrite premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="mat_sum_dim_add&#39;vc.0.1.0.1.0" expl="rewrite premises" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_dim&#39;spec">
       <goal name="mat_sum_dim_add&#39;vc.0.1.0.1.0.0" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="1.03" steps="374890"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.0.1.0.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.49" steps="339754"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.0.1.0.1.0.2" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.36" steps="339754"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.0.1.0.1.0.3" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.96" steps="373918"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.0.1.0.1.0.4" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.98" steps="373946"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_dim_add&#39;vc.0.1.0.2" expl="rewrite premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="mat_sum_dim_add&#39;vc.0.1.0.2.0" expl="rewrite premises" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_dim&#39;spec1">
       <goal name="mat_sum_dim_add&#39;vc.0.1.0.2.0.0" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="1.03" steps="374862"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.0.1.0.2.0.1" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.51" steps="339754"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.0.1.0.2.0.2" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.39" steps="339754"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.0.1.0.2.0.3" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="1.00" steps="373918"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.0.1.0.2.0.4" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.98" steps="373946"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_dim_add&#39;vc.0.1.1" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="add_columns">
     <goal name="mat_sum_dim_add&#39;vc.0.1.1.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.31" steps="295107"/></proof>
     </goal>
     <goal name="mat_sum_dim_add&#39;vc.0.1.1.1" expl="rewrite premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="mat_sum_dim_add&#39;vc.0.1.1.1.0" expl="rewrite premises" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_dim&#39;spec">
       <goal name="mat_sum_dim_add&#39;vc.0.1.1.1.0.0" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="1.02" steps="374890"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.0.1.1.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.39" steps="339754"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.0.1.1.1.0.2" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.52" steps="339754"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.0.1.1.1.0.3" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="1.02" steps="373918"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.0.1.1.1.0.4" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="1.00" steps="373946"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_dim_add&#39;vc.0.1.1.2" expl="rewrite premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="mat_sum_dim_add&#39;vc.0.1.1.2.0" expl="rewrite premises" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_dim&#39;spec1">
       <goal name="mat_sum_dim_add&#39;vc.0.1.1.2.0.0" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="1.06" steps="374862"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.0.1.1.2.0.1" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.52" steps="339754"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.0.1.1.2.0.2" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.39" steps="339754"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.0.1.1.2.0.3" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.98" steps="373918"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.0.1.1.2.0.4" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="1.03" steps="373946"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_dim_add&#39;vc.0.1.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_dim_add&#39;vc.0.1.2.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="mat_sum_dim_to_make_zero">
      <goal name="mat_sum_dim_add&#39;vc.0.1.2.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="add_value">
       <goal name="mat_sum_dim_add&#39;vc.0.1.2.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.97" steps="330480"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.0.1.2.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.94" steps="330486"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.0.1.2.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.93" steps="330781"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.0.1.2.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="1.08" steps="330486"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.0.1.2.0.0.4" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.90" steps="328494"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.0.1.2.0.0.5" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.89" steps="328468"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sum_dim_add&#39;vc.0.1.2.0.1" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.33" steps="295237"/></proof>
      </goal>
      <goal name="mat_sum_dim_add&#39;vc.0.1.2.0.2" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.89" steps="328840"/></proof>
      </goal>
      <goal name="mat_sum_dim_add&#39;vc.0.1.2.0.3" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.89" steps="328814"/></proof>
      </goal>
      <goal name="mat_sum_dim_add&#39;vc.0.1.2.0.4" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.33" steps="295239"/></proof>
      </goal>
      <goal name="mat_sum_dim_add&#39;vc.0.1.2.0.5" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.34" steps="295239"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sum_dim_add&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.71" steps="312654"/></proof>
  </goal>
  <goal name="mat_sum_dim_add&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.33" steps="295136"/></proof>
  </goal>
  <goal name="mat_sum_dim_add&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.33" steps="295142"/></proof>
  </goal>
  <goal name="mat_sum_dim_add&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.93" steps="329989"/></proof>
  </goal>
  <goal name="mat_sum_dim_add&#39;vc.5" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.88" steps="330035"/></proof>
  </goal>
  <goal name="mat_sum_dim_add&#39;vc.6" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(cardinal s =0)">
   <goal name="mat_sum_dim_add&#39;vc.6.0" expl="true case (postcondition)" proved="true">
   <proof prover="10"><result status="valid" time="0.74" steps="312885"/></proof>
   </goal>
   <goal name="mat_sum_dim_add&#39;vc.6.1" expl="false case (postcondition)" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="mat_sum_dim_add&#39;vc.6.1.0" expl="false case (postcondition)" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_mat">
     <goal name="mat_sum_dim_add&#39;vc.6.1.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(rows (mat_sum_dim (add x s) f r c))" arg2="r">
      <goal name="mat_sum_dim_add&#39;vc.6.1.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="add_rows">
       <goal name="mat_sum_dim_add&#39;vc.6.1.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.87" steps="333244"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.6.1.0.0.0.1" expl="rewrite premises" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="mat_sum_dim_add&#39;vc.6.1.0.0.0.1.0" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="mat_sum_dim&#39;spec">
         <goal name="mat_sum_dim_add&#39;vc.6.1.0.0.0.1.0.0" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.97" steps="379215"/></proof>
         </goal>
         <goal name="mat_sum_dim_add&#39;vc.6.1.0.0.0.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.40" steps="343144"/></proof>
         </goal>
         <goal name="mat_sum_dim_add&#39;vc.6.1.0.0.0.1.0.2" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.53" steps="343144"/></proof>
         </goal>
         <goal name="mat_sum_dim_add&#39;vc.6.1.0.0.0.1.0.3" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="1.04" steps="380877"/></proof>
         </goal>
         <goal name="mat_sum_dim_add&#39;vc.6.1.0.0.0.1.0.4" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="1.12" steps="380915"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.6.1.0.0.0.2" expl="rewrite premises" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="mat_sum_dim_add&#39;vc.6.1.0.0.0.2.0" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="mat_sum_dim&#39;spec1">
         <goal name="mat_sum_dim_add&#39;vc.6.1.0.0.0.2.0.0" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.98" steps="379192"/></proof>
         </goal>
         <goal name="mat_sum_dim_add&#39;vc.6.1.0.0.0.2.0.1" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.51" steps="343144"/></proof>
         </goal>
         <goal name="mat_sum_dim_add&#39;vc.6.1.0.0.0.2.0.2" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.49" steps="343144"/></proof>
         </goal>
         <goal name="mat_sum_dim_add&#39;vc.6.1.0.0.0.2.0.3" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="1.02" steps="380877"/></proof>
         </goal>
         <goal name="mat_sum_dim_add&#39;vc.6.1.0.0.0.2.0.4" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="1.02" steps="380915"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sum_dim_add&#39;vc.6.1.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="10"><result status="valid" time="0.85" steps="331711"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_dim_add&#39;vc.6.1.0.1" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(columns (mat_sum_dim (add x s) f r c))" arg2="c">
      <goal name="mat_sum_dim_add&#39;vc.6.1.0.1.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="add_columns">
       <goal name="mat_sum_dim_add&#39;vc.6.1.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.84" steps="333216"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.6.1.0.1.0.1" expl="rewrite premises" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="mat_sum_dim_add&#39;vc.6.1.0.1.0.1.0" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="mat_sum_dim&#39;spec">
         <goal name="mat_sum_dim_add&#39;vc.6.1.0.1.0.1.0.0" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="1.19" steps="379215"/></proof>
         </goal>
         <goal name="mat_sum_dim_add&#39;vc.6.1.0.1.0.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.53" steps="343144"/></proof>
         </goal>
         <goal name="mat_sum_dim_add&#39;vc.6.1.0.1.0.1.0.2" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.38" steps="343144"/></proof>
         </goal>
         <goal name="mat_sum_dim_add&#39;vc.6.1.0.1.0.1.0.3" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="1.01" steps="380877"/></proof>
         </goal>
         <goal name="mat_sum_dim_add&#39;vc.6.1.0.1.0.1.0.4" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="1.20" steps="380915"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.6.1.0.1.0.2" expl="rewrite premises" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="mat_sum_dim_add&#39;vc.6.1.0.1.0.2.0" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="mat_sum_dim&#39;spec1">
         <goal name="mat_sum_dim_add&#39;vc.6.1.0.1.0.2.0.0" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="1.15" steps="379192"/></proof>
         </goal>
         <goal name="mat_sum_dim_add&#39;vc.6.1.0.1.0.2.0.1" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.53" steps="343144"/></proof>
         </goal>
         <goal name="mat_sum_dim_add&#39;vc.6.1.0.1.0.2.0.2" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.50" steps="343144"/></proof>
         </goal>
         <goal name="mat_sum_dim_add&#39;vc.6.1.0.1.0.2.0.3" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="1.01" steps="380877"/></proof>
         </goal>
         <goal name="mat_sum_dim_add&#39;vc.6.1.0.1.0.2.0.4" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="1.01" steps="380915"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sum_dim_add&#39;vc.6.1.0.1.1" expl="equality hypothesis" proved="true">
      <proof prover="10"><result status="valid" time="0.96" steps="331683"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_dim_add&#39;vc.6.1.0.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_dim_to_mat_sum">
       <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="mat_sum_dim_to_mat_sum">
        <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="mat_sum_add">
         <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="0.34" steps="297983"/></proof>
         </goal>
         <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.74" steps="315522"/></proof>
         </goal>
         <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0.0.2" expl="rewrite premises" proved="true">
         <transf name="replace" proved="true" arg1="(columns (f @ x))" arg2="c">
          <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0.0.2.0" expl="rewrite premises" proved="true">
          <transf name="assert" proved="true" arg1="(columns (f(choose s)) = c)">
           <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0.0.2.0.0" expl="asserted formula" proved="true">
           <proof prover="10"><result status="valid" time="0.90" steps="335374"/></proof>
           </goal>
           <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0.0.2.0.1" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="set_constant_size">
            <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0.0.2.0.1.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0.0.2.0.1.0.0" expl="apply premises" proved="true">
             <proof prover="10"><result status="valid" time="0.91" steps="336763"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0.0.2.0.1.1" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0.0.2.0.1.1.0" expl="apply premises" proved="true">
             <proof prover="10"><result status="valid" time="1.04" steps="336386"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0.0.2.1" expl="equality hypothesis" proved="true">
          <proof prover="10"><result status="valid" time="0.99" steps="333640"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0.0.3" expl="rewrite premises" proved="true">
         <transf name="replace" proved="true" arg1="( rows (f @ x) )" arg2="r">
          <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0.0.3.0" expl="rewrite premises" proved="true">
          <transf name="assert" proved="true" arg1="(rows (f(choose s)) = r)">
           <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0.0.3.0.0" expl="asserted formula" proved="true">
           <proof prover="10"><result status="valid" time="0.91" steps="335400"/></proof>
           </goal>
           <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0.0.3.0.1" expl="rewrite premises" proved="true">
           <transf name="rewrite" proved="true" arg1="s_rows&#39;def">
            <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0.0.3.0.1.0" expl="rewrite premises" proved="true">
            <proof prover="10"><result status="valid" time="0.32" steps="299058"/></proof>
            </goal>
            <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0.0.3.0.1.1" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="set_constant_size">
             <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0.0.3.0.1.1.0" expl="apply premises" proved="true">
             <proof prover="10"><result status="valid" time="0.93" steps="337048"/></proof>
             </goal>
             <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0.0.3.0.1.1.1" expl="apply premises" proved="true">
             <proof prover="10"><result status="valid" time="0.94" steps="336506"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0.0.3.1" expl="equality hypothesis" proved="true">
          <proof prover="10"><result status="valid" time="0.93" steps="333666"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0.0.4" expl="rewrite premises" proved="true">
         <transf name="replace" proved="true" arg1="(s_columns s f)" arg2="c">
          <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0.0.4.0" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="0.91" steps="333640"/></proof>
          </goal>
          <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0.0.4.1" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="set_s_columns">
           <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0.0.4.1.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="set_constant_size">
            <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0.0.4.1.0.0" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="0.96" steps="335582"/></proof>
            </goal>
            <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0.0.4.1.0.1" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="1.05" steps="335272"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0.0.4.1.1" expl="apply premises" proved="true">
           <proof prover="10"><result status="valid" time="0.91" steps="335374"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0.0.5" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.32" steps="297983"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.71" steps="315522"/></proof>
        </goal>
        <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.32" steps="297987"/></proof>
        </goal>
        <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0.3" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.31" steps="297987"/></proof>
        </goal>
        <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0.4" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.85" steps="334328"/></proof>
        </goal>
        <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.0.5" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.93" steps="334362"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.1" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.93" steps="332170"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.2" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.34" steps="297987"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.3" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.35" steps="297987"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.4" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.74" steps="315507"/></proof>
       </goal>
       <goal name="mat_sum_dim_add&#39;vc.6.1.0.2.0.5" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.73" steps="315507"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum_scalar&#39;vc" expl="VC for mat_sum_scalar" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sum_scalar&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.83" steps="292423"/></proof>
  </goal>
  <goal name="mat_sum_scalar&#39;vc.1" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="mat_sum_scalar&#39;vc.1.0" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.98" steps="334377"/></proof>
   </goal>
   <goal name="mat_sum_scalar&#39;vc.1.1" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.99" steps="334423"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sum_scalar&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.84" steps="297651"/></proof>
  </goal>
  <goal name="mat_sum_scalar&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.79" steps="296211"/></proof>
  </goal>
  <goal name="mat_sum_scalar&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.72" steps="314083"/></proof>
  </goal>
  <goal name="mat_sum_scalar&#39;vc.5" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.83" steps="296201"/></proof>
  </goal>
  <goal name="mat_sum_scalar&#39;vc.6" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="mat_sum_scalar&#39;vc.6.0" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="2.25" steps="753719"/></proof>
   </goal>
   <goal name="mat_sum_scalar&#39;vc.6.1" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="2.24" steps="753375"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sum_scalar&#39;vc.7" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="goal_comm">
   <goal name="mat_sum_scalar&#39;vc.7.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="set_s_rows">
    <goal name="mat_sum_scalar&#39;vc.7.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="mat_sum_scalar&#39;vc.7.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_scalar&#39;vc.7.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.10" steps="411762"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_scalar&#39;vc.7.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_scalar&#39;vc.7.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.19" steps="411746"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_scalar&#39;vc.7.0.1" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="2.29" steps="700332"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sum_scalar&#39;vc.8" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="goal_comm">
   <goal name="mat_sum_scalar&#39;vc.8.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="set_s_columns">
    <goal name="mat_sum_scalar&#39;vc.8.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="mat_sum_scalar&#39;vc.8.0.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="1.23" steps="415574"/></proof>
     </goal>
     <goal name="mat_sum_scalar&#39;vc.8.0.0.1" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="1.22" steps="413805"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_scalar&#39;vc.8.0.1" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="2.29" steps="715117"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sum_scalar&#39;vc.9" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.72" steps="315009"/></proof>
  </goal>
  <goal name="mat_sum_scalar&#39;vc.10" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mat_sum_scalar&#39;vc.10.0" expl="variant decrease" proved="true">
   <proof prover="10"><result status="valid" time="0.48" steps="279559"/></proof>
   </goal>
   <goal name="mat_sum_scalar&#39;vc.10.1" expl="variant decrease" proved="true">
   <proof prover="10"><result status="valid" time="0.67" steps="297023"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sum_scalar&#39;vc.11" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.65" steps="296230"/></proof>
  </goal>
  <goal name="mat_sum_scalar&#39;vc.12" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.66" steps="297177"/></proof>
  </goal>
  <goal name="mat_sum_scalar&#39;vc.13" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mat_sum_scalar&#39;vc.13.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.68" steps="296496"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sum_scalar&#39;vc.14" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.65" steps="297484"/></proof>
  </goal>
  <goal name="mat_sum_scalar&#39;vc.15" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.74" steps="332189"/></proof>
  </goal>
  <goal name="mat_sum_scalar&#39;vc.16" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.89" steps="332496"/></proof>
  </goal>
  <goal name="mat_sum_scalar&#39;vc.17" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="mat_sum_scalar&#39;vc.17.0" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="mat_sum_scalar&#39;vc.17.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="mat_sum_scalar&#39;vc.17.0.0.0" expl="postcondition" proved="true">
     <proof prover="10"><result status="valid" time="0.88" steps="325124"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_scalar&#39;vc.17.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="mat_sum_scalar&#39;vc.17.1.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="mat_sum_scalar&#39;vc.17.1.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(add (choose s) (remove (choose s) s))" arg2="s" arg3="in" arg4="H6">
      <goal name="mat_sum_scalar&#39;vc.17.1.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H6">
       <goal name="mat_sum_scalar&#39;vc.17.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="replace" proved="true" arg1="(add_mat (f @ choose s) (mat_sum (remove (choose s) s) f))" arg2="(mat_sum s f)" arg3="in" arg4="H">
        <goal name="mat_sum_scalar&#39;vc.17.1.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="H">
         <goal name="mat_sum_scalar&#39;vc.17.1.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="mat_sum_scalar&#39;vc.17.1.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="rewrite" proved="true" arg1="H5">
           <goal name="mat_sum_scalar&#39;vc.17.1.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <transf name="compute_specified" proved="true" >
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_scalar&#39;vc.17.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="10"><result status="valid" time="0.83" steps="379058"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sum_scalar&#39;vc.17.1.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="10"><result status="valid" time="1.03" steps="378079"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum_scalar_rev&#39;vc" expl="VC for mat_sum_scalar_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sum_scalar_rev&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.30" steps="258243"/></proof>
  </goal>
  <goal name="mat_sum_scalar_rev&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.29" steps="258248"/></proof>
  </goal>
  <goal name="mat_sum_scalar_rev&#39;vc.2" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="mat_sum_scalar_rev&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.29" steps="258548"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum_const&#39;vc" expl="VC for mat_sum_const" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sum_const&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.79" steps="298296"/></proof>
  </goal>
  <goal name="mat_sum_const&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="1.02" steps="375023"/></proof>
  </goal>
  <goal name="mat_sum_const&#39;vc.2" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="goal_comm">
   <goal name="mat_sum_const&#39;vc.2.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="set_s_rows">
    <goal name="mat_sum_const&#39;vc.2.0.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.66" steps="283844"/></proof>
    </goal>
    <goal name="mat_sum_const&#39;vc.2.0.1" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.52" steps="288557"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sum_const&#39;vc.3" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="goal_comm">
   <goal name="mat_sum_const&#39;vc.3.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="set_s_columns">
    <goal name="mat_sum_const&#39;vc.3.0.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.65" steps="289148"/></proof>
    </goal>
    <goal name="mat_sum_const&#39;vc.3.0.1" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.67" steps="287571"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sum_const&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.58" steps="320332"/></proof>
  </goal>
  <goal name="mat_sum_const&#39;vc.5" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mat_sum_const&#39;vc.5.0" expl="variant decrease" proved="true">
   <proof prover="10"><result status="valid" time="0.50" steps="284943"/></proof>
   </goal>
   <goal name="mat_sum_const&#39;vc.5.1" expl="variant decrease" proved="true">
   <proof prover="10"><result status="valid" time="0.67" steps="302470"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sum_const&#39;vc.6" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.83" steps="302460"/></proof>
  </goal>
  <goal name="mat_sum_const&#39;vc.7" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(cardinal s = 1)">
   <goal name="mat_sum_const&#39;vc.7.0" expl="true case (postcondition)" proved="true">
   <proof prover="10"><result status="valid" time="0.81" steps="301558"/></proof>
   </goal>
   <goal name="mat_sum_const&#39;vc.7.1" expl="false case (postcondition)" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="mat_sum_const&#39;vc.7.1.0" expl="false case (postcondition)" proved="true">
    <proof prover="10"><result status="valid" time="0.32" steps="263080"/></proof>
    </goal>
    <goal name="mat_sum_const&#39;vc.7.1.1" expl="false case (postcondition)" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="mat_sum_const&#39;vc.7.1.1.0" expl="false case (postcondition)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="mat_sum_const&#39;vc.7.1.1.0.0" expl="false case (postcondition)" proved="true">
      <transf name="replace" proved="true" arg1="(add (choose s) (remove (choose s) s))" arg2="s" arg3="in" arg4="H1">
       <goal name="mat_sum_const&#39;vc.7.1.1.0.0.0" expl="false case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="H1">
        <goal name="mat_sum_const&#39;vc.7.1.1.0.0.0.0" expl="false case (postcondition)" proved="true">
        <transf name="rewrite" proved="true" arg1="H">
         <goal name="mat_sum_const&#39;vc.7.1.1.0.0.0.0.0" expl="false case (postcondition)" proved="true">
         <transf name="replace" proved="true" arg1="((fun (_:a) -&gt; x) @ choose s)" arg2="(c_one *.. x)">
          <goal name="mat_sum_const&#39;vc.7.1.1.0.0.0.0.0.0" expl="false case (postcondition)" proved="true">
          <proof prover="10"><result status="valid" time="3.19" steps="842839"/></proof>
          </goal>
          <goal name="mat_sum_const&#39;vc.7.1.1.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="10"><result status="valid" time="0.70" steps="317804"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sum_const&#39;vc.7.1.1.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="10"><result status="valid" time="0.92" steps="338504"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum_quot&#39;vc" expl="VC for mat_sum_quot" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sum_quot&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.47" steps="258757"/></proof>
  </goal>
  <goal name="mat_sum_quot&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="1.04" steps="357761"/></proof>
  </goal>
  <goal name="mat_sum_quot&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.30" steps="263481"/></proof>
  </goal>
  <goal name="mat_sum_quot&#39;vc.3" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mat_sum_const">
   <goal name="mat_sum_quot&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="scalar_assoc">
    <goal name="mat_sum_quot&#39;vc.3.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="((c_one /. i_to_c (cardinal s)) *. i_to_c (cardinal s))" arg2="c_one">
     <goal name="mat_sum_quot&#39;vc.3.0.0.0" expl="postcondition" proved="true">
     <proof prover="10"><result status="valid" time="0.52" steps="280469"/></proof>
     </goal>
     <goal name="mat_sum_quot&#39;vc.3.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="10"><result status="valid" time="0.56" steps="283910"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_quot&#39;vc.3.1" expl="rewrite premises" proved="true">
   <proof prover="10"><result status="valid" time="0.32" steps="263527"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum_scalar_right&#39;vc" expl="VC for mat_sum_scalar_right" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="mat_sum_scalar_right&#39;vc.0" expl="VC for mat_sum_scalar_right" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mat_sum_scalar_right&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.68" steps="299440"/></proof>
   </goal>
   <goal name="mat_sum_scalar_right&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.64" steps="299152"/></proof>
   </goal>
   <goal name="mat_sum_scalar_right&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.85" steps="304920"/></proof>
   </goal>
   <goal name="mat_sum_scalar_right&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.86" steps="303736"/></proof>
   </goal>
   <goal name="mat_sum_scalar_right&#39;vc.0.4" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.60" steps="321060"/></proof>
   </goal>
   <goal name="mat_sum_scalar_right&#39;vc.0.5" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.67" steps="303078"/></proof>
   </goal>
   <goal name="mat_sum_scalar_right&#39;vc.0.6" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="mat_sum_scalar_right&#39;vc.0.6.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_scalar_right&#39;vc.0.6.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="2.71" steps="875742"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_scalar_right&#39;vc.0.6.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_scalar_right&#39;vc.0.6.1.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="2.75" steps="875806"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_scalar_right&#39;vc.0.7" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="mat_sum_scalar_right&#39;vc.0.7.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="scalar_rows">
     <goal name="mat_sum_scalar_right&#39;vc.0.7.0.0" expl="precondition" proved="true">
     <transf name="apply" proved="true" arg1="goal_comm">
      <goal name="mat_sum_scalar_right&#39;vc.0.7.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_s_rows">
       <goal name="mat_sum_scalar_right&#39;vc.0.7.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="mat_sum_scalar_right&#39;vc.0.7.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_sum_scalar_right&#39;vc.0.7.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="1.27" steps="429154"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_scalar_right&#39;vc.0.7.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_sum_scalar_right&#39;vc.0.7.0.0.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="1.27" steps="429155"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sum_scalar_right&#39;vc.0.7.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.90" steps="310513"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_scalar_right&#39;vc.0.8" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="mat_sum_scalar_right&#39;vc.0.8.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="scalar_columns">
     <goal name="mat_sum_scalar_right&#39;vc.0.8.0.0" expl="precondition" proved="true">
     <transf name="apply" proved="true" arg1="goal_comm">
      <goal name="mat_sum_scalar_right&#39;vc.0.8.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_s_columns">
       <goal name="mat_sum_scalar_right&#39;vc.0.8.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="mat_sum_scalar_right&#39;vc.0.8.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_sum_scalar_right&#39;vc.0.8.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="1.02" steps="432013"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_scalar_right&#39;vc.0.8.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_sum_scalar_right&#39;vc.0.8.0.0.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="1.29" steps="430359"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sum_scalar_right&#39;vc.0.8.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.76" steps="310322"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_scalar_right&#39;vc.0.9" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.78" steps="322028"/></proof>
   </goal>
   <goal name="mat_sum_scalar_right&#39;vc.0.10" expl="variant decrease" proved="true">
   <proof prover="10"><result status="valid" time="0.85" steps="303990"/></proof>
   </goal>
   <goal name="mat_sum_scalar_right&#39;vc.0.11" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.84" steps="303204"/></proof>
   </goal>
   <goal name="mat_sum_scalar_right&#39;vc.0.12" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.86" steps="304117"/></proof>
   </goal>
   <goal name="mat_sum_scalar_right&#39;vc.0.13" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.87" steps="303598"/></proof>
   </goal>
   <goal name="mat_sum_scalar_right&#39;vc.0.14" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.86" steps="303626"/></proof>
   </goal>
   <goal name="mat_sum_scalar_right&#39;vc.0.15" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.89" steps="306580"/></proof>
   </goal>
   <goal name="mat_sum_scalar_right&#39;vc.0.16" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.71" steps="307630"/></proof>
   </goal>
   <goal name="mat_sum_scalar_right&#39;vc.0.17" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="mat_sum_scalar_right&#39;vc.0.17.0" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(cardinal s = 1)">
     <goal name="mat_sum_scalar_right&#39;vc.0.17.0.0" expl="true case (postcondition)" proved="true">
     <proof prover="10"><result status="valid" time="0.71" steps="300494"/></proof>
     </goal>
     <goal name="mat_sum_scalar_right&#39;vc.0.17.0.1" expl="false case (postcondition)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="mat_sum_scalar_right&#39;vc.0.17.0.1.0" expl="false case (postcondition)" proved="true">
      <proof prover="10"><result status="valid" time="0.35" steps="300039"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_scalar_right&#39;vc.0.17.1" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(cardinal s = 1)">
     <goal name="mat_sum_scalar_right&#39;vc.0.17.1.0" expl="true case (postcondition)" proved="true">
     <proof prover="10"><result status="valid" time="1.16" steps="402665"/></proof>
     </goal>
     <goal name="mat_sum_scalar_right&#39;vc.0.17.1.1" expl="false case (postcondition)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="mat_sum_scalar_right&#39;vc.0.17.1.1.0" expl="false case (postcondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_plus_one">
       <goal name="mat_sum_scalar_right&#39;vc.0.17.1.1.0.0" expl="false case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="add_value">
        <goal name="mat_sum_scalar_right&#39;vc.0.17.1.1.0.0.0" expl="false case (postcondition)" proved="true">
        <transf name="apply" proved="true" arg1="goal_comm">
         <goal name="mat_sum_scalar_right&#39;vc.0.17.1.1.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="mat_sum_plus_one">
          <goal name="mat_sum_scalar_right&#39;vc.0.17.1.1.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="mat_sum_scalar_right&#39;vc.0.17.1.1.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="(mat_sum (remove (choose s) s) (fun (k:a) -&gt; get (f @ k) i j *.. m))" arg2="(get (mat_sum (remove (choose s) s) f) i j *.. m)">
            <goal name="mat_sum_scalar_right&#39;vc.0.17.1.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="0.47" steps="417933"/></proof>
            </goal>
            <goal name="mat_sum_scalar_right&#39;vc.0.17.1.1.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
            <transf name="rewrite" proved="true" arg1="H7">
             <goal name="mat_sum_scalar_right&#39;vc.0.17.1.1.0.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
             <transf name="compute_specified" proved="true" >
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="mat_sum_scalar_right&#39;vc.0.17.1.1.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="1.05" steps="439414"/></proof>
          </goal>
          <goal name="mat_sum_scalar_right&#39;vc.0.17.1.1.0.0.0.0.2" expl="rewrite premises" proved="true">
          <transf name="apply" proved="true" arg1="set_constant_size">
           <goal name="mat_sum_scalar_right&#39;vc.0.17.1.1.0.0.0.0.2.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="mat_sum_scalar_right&#39;vc.0.17.1.1.0.0.0.0.2.0.0" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="1.40" steps="462627"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="mat_sum_scalar_right&#39;vc.0.17.1.1.0.0.0.0.2.1" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="mat_sum_scalar_right&#39;vc.0.17.1.1.0.0.0.0.2.1.0" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="1.46" steps="462407"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_scalar_right&#39;vc.0.17.1.1.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="1.41" steps="458173"/></proof>
        </goal>
        <goal name="mat_sum_scalar_right&#39;vc.0.17.1.1.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="1.42" steps="458147"/></proof>
        </goal>
        <goal name="mat_sum_scalar_right&#39;vc.0.17.1.1.0.0.3" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="1.42" steps="458173"/></proof>
        </goal>
        <goal name="mat_sum_scalar_right&#39;vc.0.17.1.1.0.0.4" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="1.16" steps="440231"/></proof>
        </goal>
        <goal name="mat_sum_scalar_right&#39;vc.0.17.1.1.0.0.5" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="1.13" steps="440235"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sum_scalar_right&#39;vc.0.17.1.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="1.06" steps="439414"/></proof>
       </goal>
       <goal name="mat_sum_scalar_right&#39;vc.0.17.1.1.0.2" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.50" steps="417933"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum_eq&#39;vc" expl="VC for mat_sum_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sum_eq&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.92" steps="334601"/></proof>
  </goal>
  <goal name="mat_sum_eq&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.94" steps="334297"/></proof>
  </goal>
  <goal name="mat_sum_eq&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.90" steps="339888"/></proof>
  </goal>
  <goal name="mat_sum_eq&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.75" steps="338419"/></proof>
  </goal>
  <goal name="mat_sum_eq&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.79" steps="321809"/></proof>
  </goal>
  <goal name="mat_sum_eq&#39;vc.5" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.95" steps="335925"/></proof>
  </goal>
  <goal name="mat_sum_eq&#39;vc.6" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="mat_sum_eq&#39;vc.6.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="mat_sum_eq&#39;vc.6.0.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="1.06" steps="343771"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_eq&#39;vc.6.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="mat_sum_eq&#39;vc.6.1.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="1.06" steps="343812"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sum_eq&#39;vc.7" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="goal_comm">
   <goal name="mat_sum_eq&#39;vc.7.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="set_s_rows">
    <goal name="mat_sum_eq&#39;vc.7.0.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.35" steps="300252"/></proof>
    </goal>
    <goal name="mat_sum_eq&#39;vc.7.0.1" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="1.04" steps="343828"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sum_eq&#39;vc.8" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="3.86" steps="844844"/></proof>
  </goal>
  <goal name="mat_sum_eq&#39;vc.9" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.76" steps="322434"/></proof>
  </goal>
  <goal name="mat_sum_eq&#39;vc.10" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mat_sum_eq&#39;vc.10.0" expl="variant decrease" proved="true">
   <proof prover="10"><result status="valid" time="0.76" steps="318157"/></proof>
   </goal>
   <goal name="mat_sum_eq&#39;vc.10.1" expl="variant decrease" proved="true">
   <proof prover="10"><result status="valid" time="0.89" steps="336317"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sum_eq&#39;vc.11" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.94" steps="336307"/></proof>
  </goal>
  <goal name="mat_sum_eq&#39;vc.12" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.91" steps="335808"/></proof>
  </goal>
  <goal name="mat_sum_eq&#39;vc.13" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.93" steps="337035"/></proof>
  </goal>
  <goal name="mat_sum_eq&#39;vc.14" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.90" steps="335966"/></proof>
  </goal>
  <goal name="mat_sum_eq&#39;vc.15" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="1.13" steps="400681"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum_eq_gen&#39;vc" expl="VC for mat_sum_eq_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sum_eq_gen&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.36" steps="298684"/></proof>
  </goal>
  <goal name="mat_sum_eq_gen&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.35" steps="298688"/></proof>
  </goal>
  <goal name="mat_sum_eq_gen&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.83" steps="316999"/></proof>
  </goal>
  <goal name="mat_sum_eq_gen&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.78" steps="316817"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum_eq_gen_int&#39;vc" expl="VC for mat_sum_eq_gen_int" proved="true">
 <proof prover="10"><result status="valid" time="0.49" steps="308047"/></proof>
 </goal>
 <goal name="mat_sum_comp_eq&#39;vc" expl="VC for mat_sum_comp_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sum_comp_eq&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.35" steps="302457"/></proof>
  </goal>
  <goal name="mat_sum_comp_eq&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.34" steps="302460"/></proof>
  </goal>
  <goal name="mat_sum_comp_eq&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.35" steps="302463"/></proof>
  </goal>
  <goal name="mat_sum_comp_eq&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.37" steps="302466"/></proof>
  </goal>
  <goal name="mat_sum_comp_eq&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.36" steps="302471"/></proof>
  </goal>
  <goal name="mat_sum_comp_eq&#39;vc.5" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="mat_sum_comp_eq&#39;vc.5.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="mat_sum_eq">
    <goal name="mat_sum_comp_eq&#39;vc.5.0.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.34" steps="302673"/></proof>
    </goal>
    <goal name="mat_sum_comp_eq&#39;vc.5.0.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="mat_sum_comp_eq&#39;vc.5.0.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_comp_eq&#39;vc.5.0.1.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="mat_sum_comp_eq&#39;vc.5.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="1.09" steps="348109"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_comp_eq&#39;vc.5.0.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_comp_eq&#39;vc.5.0.1.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="mat_sum_comp_eq&#39;vc.5.0.1.1.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="1.10" steps="347236"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_comp_eq&#39;vc.5.0.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_comp_eq&#39;vc.5.0.2.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="mat_sum_comp_eq&#39;vc.5.0.2.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_equal_mat">
       <goal name="mat_sum_comp_eq&#39;vc.5.0.2.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="1.00" steps="342763"/></proof>
       </goal>
       <goal name="mat_sum_comp_eq&#39;vc.5.0.2.0.0.1" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.95" steps="342640"/></proof>
       </goal>
       <goal name="mat_sum_comp_eq&#39;vc.5.0.2.0.0.2" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.97" steps="342787"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum_dim_eq&#39;vc" expl="VC for mat_sum_dim_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sum_dim_eq&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.96" steps="339148"/></proof>
  </goal>
  <goal name="mat_sum_dim_eq&#39;vc.1" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="mat_sum_dim_eq&#39;vc.1.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="mat_sum_dim_eq&#39;vc.1.0.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.74" steps="324376"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_dim_eq&#39;vc.1.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="mat_sum_dim_eq&#39;vc.1.1.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.76" steps="324376"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sum_dim_eq&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.77" steps="323622"/></proof>
  </goal>
  <goal name="mat_sum_dim_eq&#39;vc.3" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(cardinal s = 0)">
   <goal name="mat_sum_dim_eq&#39;vc.3.0" expl="true case (postcondition)" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_sum_dim_to_make_zero">
    <goal name="mat_sum_dim_eq&#39;vc.3.0.0" expl="true case (postcondition)" proved="true">
    <transf name="rewrite" proved="true" arg1="mat_sum_dim_to_make_zero">
     <goal name="mat_sum_dim_eq&#39;vc.3.0.0.0" expl="true case (postcondition)" proved="true">
     <proof prover="10"><result status="valid" time="0.33" steps="305282"/></proof>
     </goal>
     <goal name="mat_sum_dim_eq&#39;vc.3.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.33" steps="305284"/></proof>
     </goal>
     <goal name="mat_sum_dim_eq&#39;vc.3.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.88" steps="339985"/></proof>
     </goal>
     <goal name="mat_sum_dim_eq&#39;vc.3.0.0.3" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.94" steps="339957"/></proof>
     </goal>
     <goal name="mat_sum_dim_eq&#39;vc.3.0.0.4" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.33" steps="305286"/></proof>
     </goal>
     <goal name="mat_sum_dim_eq&#39;vc.3.0.0.5" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.32" steps="305286"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_dim_eq&#39;vc.3.0.1" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.31" steps="305284"/></proof>
    </goal>
    <goal name="mat_sum_dim_eq&#39;vc.3.0.2" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.69" steps="323372"/></proof>
    </goal>
    <goal name="mat_sum_dim_eq&#39;vc.3.0.3" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.70" steps="323372"/></proof>
    </goal>
    <goal name="mat_sum_dim_eq&#39;vc.3.0.4" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.34" steps="305286"/></proof>
    </goal>
    <goal name="mat_sum_dim_eq&#39;vc.3.0.5" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.33" steps="305286"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_dim_eq&#39;vc.3.1" expl="false case (postcondition)" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_sum_dim_to_mat_sum">
    <goal name="mat_sum_dim_eq&#39;vc.3.1.0" expl="false case (postcondition)" proved="true">
    <transf name="rewrite" proved="true" arg1="mat_sum_dim_to_mat_sum">
     <goal name="mat_sum_dim_eq&#39;vc.3.1.0.0" expl="false case (postcondition)" proved="true">
     <proof prover="10"><result status="valid" time="0.47" steps="305289"/></proof>
     </goal>
     <goal name="mat_sum_dim_eq&#39;vc.3.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="1.00" steps="339541"/></proof>
     </goal>
     <goal name="mat_sum_dim_eq&#39;vc.3.1.0.2" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.32" steps="305291"/></proof>
     </goal>
     <goal name="mat_sum_dim_eq&#39;vc.3.1.0.3" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.31" steps="305291"/></proof>
     </goal>
     <goal name="mat_sum_dim_eq&#39;vc.3.1.0.4" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.85" steps="340345"/></proof>
     </goal>
     <goal name="mat_sum_dim_eq&#39;vc.3.1.0.5" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.96" steps="340322"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_dim_eq&#39;vc.3.1.1" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.95" steps="339541"/></proof>
    </goal>
    <goal name="mat_sum_dim_eq&#39;vc.3.1.2" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.35" steps="305291"/></proof>
    </goal>
    <goal name="mat_sum_dim_eq&#39;vc.3.1.3" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.33" steps="305291"/></proof>
    </goal>
    <goal name="mat_sum_dim_eq&#39;vc.3.1.4" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.72" steps="323370"/></proof>
    </goal>
    <goal name="mat_sum_dim_eq&#39;vc.3.1.5" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.73" steps="323370"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="constant_size_map&#39;vc" expl="VC for constant_size_map" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="constant_size_map&#39;vc.0" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="map_antec" arg2="t,s,e">
   <goal name="constant_size_map&#39;vc.0.0" expl="precondition" proved="true">
   <transf name="instantiate" proved="true" arg1="map_antec" arg2="t,s,e&#39;">
    <goal name="constant_size_map&#39;vc.0.0.0" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="1.15" steps="393086"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="constant_size_map&#39;vc.1" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="map_antec" arg2="t,s,e">
   <goal name="constant_size_map&#39;vc.1.0" expl="precondition" proved="true">
   <transf name="instantiate" proved="true" arg1="map_antec" arg2="t,s,e&#39;">
    <goal name="constant_size_map&#39;vc.1.0.0" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="1.10" steps="391513"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="constant_size_map&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.35" steps="305879"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="map_mat_sum&#39;vc" expl="VC for map_mat_sum" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="map_mat_sum&#39;vc.0" expl="VC for map_mat_sum" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="map_mat_sum&#39;vc.0.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="map_mat_sum&#39;vc.0.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="map_mat_sum&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="1.17" steps="397276"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="map_mat_sum&#39;vc.0.0.1" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="map_mat_sum&#39;vc.0.0.1.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="1.15" steps="397320"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="map_mat_sum&#39;vc.0.1" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="0.84" steps="348659"/></proof>
   </goal>
   <goal name="map_mat_sum&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.13" steps="386593"/></proof>
   </goal>
   <goal name="map_mat_sum&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.17" steps="388050"/></proof>
   </goal>
   <goal name="map_mat_sum&#39;vc.0.4" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="goal_comm">
    <goal name="map_mat_sum&#39;vc.0.4.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_s_rows">
     <goal name="map_mat_sum&#39;vc.0.4.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.39" steps="348204"/></proof>
     </goal>
     <goal name="map_mat_sum&#39;vc.0.4.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="(mem ( choose (remove (t @ choose s) (map t s))) (map t s))
">
      <goal name="map_mat_sum&#39;vc.0.4.0.1.0" expl="asserted formula" proved="true">
      <proof prover="10"><result status="valid" time="1.26" steps="422520"/></proof>
      </goal>
      <goal name="map_mat_sum&#39;vc.0.4.0.1.1" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.07" steps="394195"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="map_mat_sum&#39;vc.0.5" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="goal_comm">
    <goal name="map_mat_sum&#39;vc.0.5.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_s_columns">
     <goal name="map_mat_sum&#39;vc.0.5.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.39" steps="352987"/></proof>
     </goal>
     <goal name="map_mat_sum&#39;vc.0.5.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="(mem ( choose (remove (t @ choose s) (map t s))) (map t s))
">
      <goal name="map_mat_sum&#39;vc.0.5.0.1.0" expl="asserted formula" proved="true">
      <proof prover="10"><result status="valid" time="1.26" steps="427801"/></proof>
      </goal>
      <goal name="map_mat_sum&#39;vc.0.5.0.1.1" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.10" steps="392480"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="map_mat_sum&#39;vc.0.6" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.98" steps="403911"/></proof>
   </goal>
   <goal name="map_mat_sum&#39;vc.0.7" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="1.06" steps="373916"/></proof>
   </goal>
   <goal name="map_mat_sum&#39;vc.0.8" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.07" steps="373965"/></proof>
   </goal>
   <goal name="map_mat_sum&#39;vc.0.9" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="map_mat_sum&#39;vc.0.9.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="map_mat_sum&#39;vc.0.9.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="map_mat_sum&#39;vc.0.9.0.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.31" steps="416181"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="map_mat_sum&#39;vc.0.9.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="map_mat_sum&#39;vc.0.9.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="map_mat_sum&#39;vc.0.9.1.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.32" steps="416229"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="map_mat_sum&#39;vc.0.10" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="map_mat_sum&#39;vc.0.10.0" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="goal_comm">
     <goal name="map_mat_sum&#39;vc.0.10.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_s_rows">
      <goal name="map_mat_sum&#39;vc.0.10.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="Requires">
      </transf>
      </goal>
      <goal name="map_mat_sum&#39;vc.0.10.0.0.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="map_mat_sum&#39;vc.0.10.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="3.39" steps="989047"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="map_mat_sum&#39;vc.0.11" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="map_mat_sum&#39;vc.0.11.0" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="goal_comm">
     <goal name="map_mat_sum&#39;vc.0.11.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_s_columns">
      <goal name="map_mat_sum&#39;vc.0.11.0.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.10" steps="380341"/></proof>
      </goal>
      <goal name="map_mat_sum&#39;vc.0.11.0.0.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="map_mat_sum&#39;vc.0.11.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="3.51" steps="1006109"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="map_mat_sum&#39;vc.0.12" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.97" steps="391049"/></proof>
   </goal>
   <goal name="map_mat_sum&#39;vc.0.13" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="0.40" steps="339225"/></proof>
   </goal>
   <goal name="map_mat_sum&#39;vc.0.14" expl="variant decrease" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="map_mat_sum&#39;vc.0.14.0" expl="variant decrease" proved="true">
    <proof prover="10"><result status="valid" time="0.83" steps="357387"/></proof>
    </goal>
    <goal name="map_mat_sum&#39;vc.0.14.1" expl="variant decrease" proved="true">
    <proof prover="10"><result status="valid" time="1.09" steps="378338"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="map_mat_sum&#39;vc.0.15" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.10" steps="378314"/></proof>
   </goal>
   <goal name="map_mat_sum&#39;vc.0.16" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="3.59" steps="1022923"/></proof>
   </goal>
   <goal name="map_mat_sum&#39;vc.0.17" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.12" steps="381155"/></proof>
   </goal>
   <goal name="map_mat_sum&#39;vc.0.18" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(cardinal s = 1)">
    <goal name="map_mat_sum&#39;vc.0.18.0" expl="true case (postcondition)" proved="true">
    <transf name="replace" proved="true" arg1="( mat_sum s (fun (a1:a) -&gt; f @ (t @ a1)))" arg2="(f (t(choose s)))">
     <goal name="map_mat_sum&#39;vc.0.18.0.0" expl="true case (postcondition)" proved="true">
     <transf name="assert" proved="true" arg1="((map t s) = to_set (t (choose s)))">
      <goal name="map_mat_sum&#39;vc.0.18.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="set_equal">
       <goal name="map_mat_sum&#39;vc.0.18.0.0.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="map_mat_sum&#39;vc.0.18.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="1.36" steps="502245"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="map_mat_sum&#39;vc.0.18.0.0.0.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="map_mat_sum&#39;vc.0.18.0.0.0.1.0" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="1.28" steps="421198"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="map_mat_sum&#39;vc.0.18.0.0.1" expl="true case (postcondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_cardone">
       <goal name="map_mat_sum&#39;vc.0.18.0.0.1.0" expl="true case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="h">
        <goal name="map_mat_sum&#39;vc.0.18.0.0.1.0.0" expl="true case (postcondition)" proved="true">
        <transf name="replace" proved="true" arg1="(element (to_set (t @ choose s)))" arg2="(t (choose s))">
         <goal name="map_mat_sum&#39;vc.0.18.0.0.1.0.0.0" expl="true case (postcondition)" proved="true">
         <proof prover="10"><result status="valid" time="0.41" steps="339316"/></proof>
         </goal>
         <goal name="map_mat_sum&#39;vc.0.18.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="10"><result status="valid" time="1.16" steps="379688"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="map_mat_sum&#39;vc.0.18.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.88" steps="373852"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="map_mat_sum&#39;vc.0.18.0.1" expl="equality hypothesis" proved="true">
     <proof prover="10"><result status="valid" time="1.10" steps="376079"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="map_mat_sum&#39;vc.0.18.1" expl="false case (postcondition)" proved="true">
    <transf name="destruct" proved="true" arg1="H">
     <goal name="map_mat_sum&#39;vc.0.18.1.0" expl="false case (postcondition)" proved="true">
     <proof prover="10"><result status="valid" time="0.41" steps="326904"/></proof>
     </goal>
     <goal name="map_mat_sum&#39;vc.0.18.1.1" expl="false case (postcondition)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="map_mat_sum&#39;vc.0.18.1.1.0" expl="false case (postcondition)" proved="true">
      <transf name="replace" proved="true" arg1="(add (t @ choose s) (remove (t @ choose s) (map t s)))" arg2="(map t s)" arg3="in" arg4="H4
">
       <goal name="map_mat_sum&#39;vc.0.18.1.1.0.0" expl="false case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="H4">
        <goal name="map_mat_sum&#39;vc.0.18.1.1.0.0.0" expl="false case (postcondition)" proved="true">
        <transf name="apply" proved="true" arg1="goal_comm">
         <goal name="map_mat_sum&#39;vc.0.18.1.1.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="mat_sum_plus_one">
          <goal name="map_mat_sum&#39;vc.0.18.1.1.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="map_mat_sum&#39;vc.0.18.1.1.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="H1">
            <goal name="map_mat_sum&#39;vc.0.18.1.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="H5">
             <goal name="map_mat_sum&#39;vc.0.18.1.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="10"><result status="valid" time="3.33" steps="869987"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="map_mat_sum&#39;vc.0.18.1.1.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="0.92" steps="398455"/></proof>
          </goal>
          <goal name="map_mat_sum&#39;vc.0.18.1.1.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="1.11" steps="418631"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="map_mat_sum&#39;vc.0.18.1.1.0.1" expl="equality hypothesis" proved="true">
       <proof prover="10"><result status="valid" time="1.13" steps="422949"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="map_mat_sum_rec&#39;vc" expl="VC for map_mat_sum_rec" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="map_mat_sum_rec&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.35" steps="290386"/></proof>
  </goal>
  <goal name="map_mat_sum_rec&#39;vc.1" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="map_mat_sum_rec&#39;vc.1.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="map_mat_sum_rec&#39;vc.1.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="map_mat_sum_rec&#39;vc.1.0.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="1.15" steps="399829"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="map_mat_sum_rec&#39;vc.1.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="map_mat_sum_rec&#39;vc.1.1.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="map_mat_sum_rec&#39;vc.1.1.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="1.18" steps="399878"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="map_mat_sum_rec&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.32" steps="290459"/></proof>
  </goal>
  <goal name="map_mat_sum_rec&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="1.06" steps="365776"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum_id&#39;vc" expl="VC for mat_sum_id" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="mat_sum_id&#39;vc.0" expl="VC for mat_sum_id" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mat_sum_id&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.37" steps="318687"/></proof>
   </goal>
   <goal name="mat_sum_id&#39;vc.0.1" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="mat_sum_id&#39;vc.0.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_id&#39;vc.0.1.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="1.30" steps="463661"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_id&#39;vc.0.1.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_id&#39;vc.0.1.1.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="1.40" steps="463673"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_id&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.39" steps="318746"/></proof>
   </goal>
   <goal name="mat_sum_id&#39;vc.0.3" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures">
    <goal name="mat_sum_id&#39;vc.0.3.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="mat_sum_eq">
     <goal name="mat_sum_id&#39;vc.0.3.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.39" steps="323154"/></proof>
     </goal>
     <goal name="mat_sum_id&#39;vc.0.3.0.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="mat_sum_id&#39;vc.0.3.0.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="mat_sum_id&#39;vc.0.3.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="1.41" steps="470475"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sum_id&#39;vc.0.3.0.1.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="mat_sum_id&#39;vc.0.3.0.1.1.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="1.40" steps="470482"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_id&#39;vc.0.3.0.2" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="mat_sum_id&#39;vc.0.3.0.2.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="mat_sum_id&#39;vc.0.3.0.2.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.41" steps="356628"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="nonn_mat_subset&#39;vc" expl="VC for nonn_mat_subset" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="nonn_mat_subset&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.28" steps="256853"/></proof>
  </goal>
  <goal name="nonn_mat_subset&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.33" steps="306076"/></proof>
  </goal>
  <goal name="nonn_mat_subset&#39;vc.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="nonn_mat_subset&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.34" steps="304980"/></proof>
   </goal>
   <goal name="nonn_mat_subset&#39;vc.2.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.33" steps="304980"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="nonn_mat_subset&#39;vc.3" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_subset">
   <goal name="nonn_mat_subset&#39;vc.3.0" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.84" steps="339195"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="nonn_mat_subset&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.85" steps="339670"/></proof>
  </goal>
  <goal name="nonn_mat_subset&#39;vc.5" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="nonn_mat_subset&#39;vc.5.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="nonn_mat_subset&#39;vc.5.0.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="1.12" steps="363064"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="nonn_mat_subset&#39;vc.5.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="nonn_mat_subset&#39;vc.5.1.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="1.06" steps="363100"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="nonn_mat_subset&#39;vc.6" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(mem (choose result ) s)">
   <goal name="nonn_mat_subset&#39;vc.6.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="(forall e . mem e result -&gt; mem e s)">
    <goal name="nonn_mat_subset&#39;vc.6.0.0" expl="asserted formula" proved="true">
    <proof prover="10"><result status="valid" time="0.80" steps="341282"/></proof>
    </goal>
    <goal name="nonn_mat_subset&#39;vc.6.0.1" expl="asserted formula" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="nonn_mat_subset&#39;vc.6.0.1.0" expl="asserted formula" proved="true">
     <proof prover="10"><result status="valid" time="1.00" steps="361479"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="nonn_mat_subset&#39;vc.6.1" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_s_rows">
    <goal name="nonn_mat_subset&#39;vc.6.1.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.36" steps="322978"/></proof>
    </goal>
    <goal name="nonn_mat_subset&#39;vc.6.1.1" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.89" steps="348348"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="nonn_mat_subset&#39;vc.7" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_s_columns">
   <goal name="nonn_mat_subset&#39;vc.7.0" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.36" steps="322976"/></proof>
   </goal>
   <goal name="nonn_mat_subset&#39;vc.7.1" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="goal_comm">
    <goal name="nonn_mat_subset&#39;vc.7.1.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_s_columns">
     <goal name="nonn_mat_subset&#39;vc.7.1.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.35" steps="322976"/></proof>
     </goal>
     <goal name="nonn_mat_subset&#39;vc.7.1.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="(mem (choose result) s)">
      <goal name="nonn_mat_subset&#39;vc.7.1.0.1.0" expl="asserted formula" proved="true">
      <proof prover="10"><result status="valid" time="1.10" steps="361444"/></proof>
      </goal>
      <goal name="nonn_mat_subset&#39;vc.7.1.0.1.1" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="0.88" steps="349248"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_subset_elt&#39;vc" expl="VC for mat_subset_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_subset_elt&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.76" steps="320196"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mat_subset_nonn_elt&#39;vc" expl="VC for mat_subset_nonn_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_subset_nonn_elt&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="((fun e1 -&gt;
       not equal (f @ e1) (make (s_rows s f) (s_columns s f) c_zero)) e)">
   <goal name="mat_subset_nonn_elt&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="mat_subset_nonn_elt&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="rewrite" proved="true" arg1="nonn_mat_subset&#39;def" arg2="in" arg3="H">
     <goal name="mat_subset_nonn_elt&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <proof prover="10"><result status="valid" time="0.99" steps="357219"/></proof>
     </goal>
     <goal name="mat_subset_nonn_elt&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.34" steps="302264"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_subset_nonn_elt&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.94" steps="338587"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="nonn_mat_sum_cardzero&#39;vc" expl="VC for nonn_mat_sum_cardzero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="nonn_mat_sum_cardzero&#39;vc.0" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(is_empty  (nonn_mat_subset f s) )">
   <goal name="nonn_mat_sum_cardzero&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="nonn_mat_sum_cardzero&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="set_empty">
     <goal name="nonn_mat_sum_cardzero&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="nonn_mat_sum_cardzero&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="case" proved="true" arg1="(mem e (nonn_mat_subset f s))">
       <goal name="nonn_mat_sum_cardzero&#39;vc.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
       <transf name="case" proved="true" arg1="(mem e s)">
        <goal name="nonn_mat_sum_cardzero&#39;vc.0.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
        <proof prover="10"><result status="valid" time="1.08" steps="388791"/></proof>
        </goal>
        <goal name="nonn_mat_sum_cardzero&#39;vc.0.0.0.0.0.0.1" expl="false case (true case. apply premises)" proved="true">
        <transf name="assert" proved="true" arg1="(mem e s)">
         <goal name="nonn_mat_sum_cardzero&#39;vc.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
         <transf name="rewrite" proved="true" arg1="nonn_mat_subset&#39;def" arg2="in" arg3="h2">
          <goal name="nonn_mat_sum_cardzero&#39;vc.0.0.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
          <proof prover="10"><result status="valid" time="0.76" steps="349474"/></proof>
          </goal>
          <goal name="nonn_mat_sum_cardzero&#39;vc.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
          <transf name="apply" proved="true" arg1="set_constant_size">
           <goal name="nonn_mat_sum_cardzero&#39;vc.0.0.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="nonn_mat_sum_cardzero&#39;vc.0.0.0.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="1.09" steps="393936"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="nonn_mat_sum_cardzero&#39;vc.0.0.0.0.0.0.1.0.1.1" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="nonn_mat_sum_cardzero&#39;vc.0.0.0.0.0.0.1.0.1.1.0" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="1.04" steps="394018"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="nonn_mat_sum_cardzero&#39;vc.0.0.0.0.0.0.1.1" expl="false case (true case. apply premises)" proved="true">
         <proof prover="10"><result status="valid" time="0.39" steps="352938"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="nonn_mat_sum_cardzero&#39;vc.0.0.0.0.0.1" expl="false case (apply premises)" proved="true">
       <proof prover="10"><result status="valid" time="0.38" steps="352922"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="nonn_mat_sum_cardzero&#39;vc.0.1" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="0.52" steps="290727"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="nonn_mat_sum_cardzero&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.85" steps="307645"/></proof>
  </goal>
  <goal name="nonn_mat_sum_cardzero&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.35" steps="309574"/></proof>
  </goal>
  <goal name="nonn_mat_sum_cardzero&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.98" steps="351461"/></proof>
  </goal>
  <goal name="nonn_mat_sum_cardzero&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.99" steps="350136"/></proof>
  </goal>
  <goal name="nonn_mat_sum_cardzero&#39;vc.5" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.34" steps="313707"/></proof>
  </goal>
  <goal name="nonn_mat_sum_cardzero&#39;vc.6" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.35" steps="313713"/></proof>
  </goal>
  <goal name="nonn_mat_sum_cardzero&#39;vc.7" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.34" steps="310165"/></proof>
  </goal>
  <goal name="nonn_mat_sum_cardzero&#39;vc.8" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.99" steps="351815"/></proof>
  </goal>
  <goal name="nonn_mat_sum_cardzero&#39;vc.9" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.97" steps="350488"/></proof>
  </goal>
  <goal name="nonn_mat_sum_cardzero&#39;vc.10" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.35" steps="313889"/></proof>
  </goal>
  <goal name="nonn_mat_sum_cardzero&#39;vc.11" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.34" steps="313895"/></proof>
  </goal>
  <goal name="nonn_mat_sum_cardzero&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.77" steps="328345"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="nonn_mat_sum_cardone&#39;vc" expl="VC for nonn_mat_sum_cardone" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="nonn_mat_sum_cardone&#39;vc.0" expl="VC for nonn_mat_sum_cardone" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="nonn_mat_sum_cardone&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.09" steps="372441"/></proof>
   </goal>
   <goal name="nonn_mat_sum_cardone&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.27" steps="408145"/></proof>
   </goal>
   <goal name="nonn_mat_sum_cardone&#39;vc.0.2" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="nonn_mat_sum_cardone&#39;vc.0.2.0" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.34" steps="312875"/></proof>
    </goal>
    <goal name="nonn_mat_sum_cardone&#39;vc.0.2.1" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.49" steps="312875"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="nonn_mat_sum_cardone&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.05" steps="348590"/></proof>
   </goal>
   <goal name="nonn_mat_sum_cardone&#39;vc.0.4" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(is_empty  (nonn_mat_subset f s) )">
    <goal name="nonn_mat_sum_cardone&#39;vc.0.4.0" expl="asserted formula" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="nonn_mat_sum_cardone&#39;vc.0.4.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="set_empty">
      <goal name="nonn_mat_sum_cardone&#39;vc.0.4.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="nonn_mat_sum_cardone&#39;vc.0.4.0.0.0.0" expl="apply premises" proved="true">
       <transf name="case" proved="true" arg1="(mem e (nonn_mat_subset f s))">
        <goal name="nonn_mat_sum_cardone&#39;vc.0.4.0.0.0.0.0" expl="true case (apply premises)" proved="true">
        <transf name="case" proved="true" arg1="(mem e s)">
         <goal name="nonn_mat_sum_cardone&#39;vc.0.4.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
         <transf name="rewrite" proved="true" arg1="nonn_mat_subset&#39;def" arg2="in" arg3="h1">
          <goal name="nonn_mat_sum_cardone&#39;vc.0.4.0.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
          <proof prover="10"><result status="valid" time="1.25" steps="402893"/></proof>
          </goal>
          <goal name="nonn_mat_sum_cardone&#39;vc.0.4.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="1.15" steps="401933"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="nonn_mat_sum_cardone&#39;vc.0.4.0.0.0.0.0.1" expl="false case (true case. apply premises)" proved="true">
         <transf name="assert" proved="true" arg1="(mem e s)">
          <goal name="nonn_mat_sum_cardone&#39;vc.0.4.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
          <transf name="rewrite" proved="true" arg1="nonn_mat_subset&#39;def" arg2="in" arg3="h2">
           <goal name="nonn_mat_sum_cardone&#39;vc.0.4.0.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
           <proof prover="10"><result status="valid" time="0.92" steps="383436"/></proof>
           </goal>
           <goal name="nonn_mat_sum_cardone&#39;vc.0.4.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
           <proof prover="10"><result status="valid" time="0.94" steps="383453"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="nonn_mat_sum_cardone&#39;vc.0.4.0.0.0.0.0.1.1" expl="false case (true case. apply premises)" proved="true">
          <proof prover="10"><result status="valid" time="0.42" steps="363058"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="nonn_mat_sum_cardone&#39;vc.0.4.0.0.0.0.1" expl="false case (apply premises)" proved="true">
        <proof prover="10"><result status="valid" time="0.56" steps="363042"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="nonn_mat_sum_cardone&#39;vc.0.4.1" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.94" steps="333929"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="nonn_mat_sum_cardone&#39;vc.0.5" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.90" steps="335569"/></proof>
   </goal>
   <goal name="nonn_mat_sum_cardone&#39;vc.0.6" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.90" steps="335655"/></proof>
   </goal>
   <goal name="nonn_mat_sum_cardone&#39;vc.0.7" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.34" steps="315201"/></proof>
   </goal>
   <goal name="nonn_mat_sum_cardone&#39;vc.0.8" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.36" steps="315207"/></proof>
   </goal>
   <goal name="nonn_mat_sum_cardone&#39;vc.0.9" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="nonn_mat_subset&#39;def">
    <goal name="nonn_mat_sum_cardone&#39;vc.0.9.0" expl="assertion" proved="true">
    <proof prover="10"><result status="valid" time="0.97" steps="368407"/></proof>
    </goal>
    <goal name="nonn_mat_sum_cardone&#39;vc.0.9.1" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.89" steps="349087"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="nonn_mat_sum_cardone&#39;vc.0.10" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.96" steps="349402"/></proof>
   </goal>
   <goal name="nonn_mat_sum_cardone&#39;vc.0.11" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="nonn_mat_sum_cardone&#39;vc.0.11.0" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.98" steps="355452"/></proof>
    </goal>
    <goal name="nonn_mat_sum_cardone&#39;vc.0.11.1" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.81" steps="333515"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="nonn_mat_sum_cardone&#39;vc.0.12" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.87" steps="335437"/></proof>
   </goal>
   <goal name="nonn_mat_sum_cardone&#39;vc.0.13" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.35" steps="315102"/></proof>
   </goal>
   <goal name="nonn_mat_sum_cardone&#39;vc.0.14" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(is_empty s)">
    <goal name="nonn_mat_sum_cardone&#39;vc.0.14.0" expl="true case (postcondition)" proved="true">
    <proof prover="10"><result status="valid" time="0.78" steps="334927"/></proof>
    </goal>
    <goal name="nonn_mat_sum_cardone&#39;vc.0.14.1" expl="false case (postcondition)" proved="true">
    <transf name="eliminate_if" proved="true" >
     <goal name="nonn_mat_sum_cardone&#39;vc.0.14.1.0" expl="false case (postcondition)" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="nonn_mat_sum_cardone&#39;vc.0.14.1.0.0" expl="false case (postcondition)" proved="true">
      <transf name="case" proved="true" arg1="( equal (f @ choose s) (make (s_rows s f) (s_columns s f) c_zero) )">
       <goal name="nonn_mat_sum_cardone&#39;vc.0.14.1.0.0.0" expl="false case (true case. postcondition)" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="nonn_mat_sum_cardone&#39;vc.0.14.1.0.0.0.0" expl="false case (true case. postcondition)" proved="true">
        <transf name="rewrite" proved="true" arg1="H14">
         <goal name="nonn_mat_sum_cardone&#39;vc.0.14.1.0.0.0.0.0" expl="false case (true case. postcondition)" proved="true">
         <transf name="rewrite" proved="true" arg1="mat_sum_dim_to_mat_sum">
          <goal name="nonn_mat_sum_cardone&#39;vc.0.14.1.0.0.0.0.0.0" expl="false case (true case. postcondition)" proved="true">
          <proof prover="10"><result status="valid" time="1.06" steps="406697"/></proof>
          </goal>
          <goal name="nonn_mat_sum_cardone&#39;vc.0.14.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="0.45" steps="374270"/></proof>
          </goal>
          <goal name="nonn_mat_sum_cardone&#39;vc.0.14.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="0.41" steps="368193"/></proof>
          </goal>
          <goal name="nonn_mat_sum_cardone&#39;vc.0.14.1.0.0.0.0.0.3" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="0.56" steps="368193"/></proof>
          </goal>
          <goal name="nonn_mat_sum_cardone&#39;vc.0.14.1.0.0.0.0.0.4" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="0.95" steps="389361"/></proof>
          </goal>
          <goal name="nonn_mat_sum_cardone&#39;vc.0.14.1.0.0.0.0.0.5" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="0.96" steps="389356"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="nonn_mat_sum_cardone&#39;vc.0.14.1.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.53" steps="368186"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="nonn_mat_sum_cardone&#39;vc.0.14.1.0.0.1" expl="false case (postcondition)" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="nonn_mat_sum_cardone&#39;vc.0.14.1.0.0.1.0" expl="false case (postcondition)" proved="true">
        <transf name="rewrite" proved="true" arg1="mat_sum_dim_to_mat_sum">
         <goal name="nonn_mat_sum_cardone&#39;vc.0.14.1.0.0.1.0.0" expl="false case (postcondition)" proved="true">
         <transf name="rewrite" proved="true" arg1="mat_sum_dim_to_mat_sum">
          <goal name="nonn_mat_sum_cardone&#39;vc.0.14.1.0.0.1.0.0.0" expl="false case (postcondition)" proved="true">
          <transf name="rewrite" proved="true" arg1="H">
           <goal name="nonn_mat_sum_cardone&#39;vc.0.14.1.0.0.1.0.0.0.0" expl="false case (postcondition)" proved="true">
           <proof prover="10"><result status="valid" time="0.99" steps="389489"/></proof>
           </goal>
           <goal name="nonn_mat_sum_cardone&#39;vc.0.14.1.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="10"><result status="valid" time="0.40" steps="368189"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="nonn_mat_sum_cardone&#39;vc.0.14.1.0.0.1.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="0.45" steps="374253"/></proof>
          </goal>
          <goal name="nonn_mat_sum_cardone&#39;vc.0.14.1.0.0.1.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="0.40" steps="368193"/></proof>
          </goal>
          <goal name="nonn_mat_sum_cardone&#39;vc.0.14.1.0.0.1.0.0.3" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="0.40" steps="368193"/></proof>
          </goal>
          <goal name="nonn_mat_sum_cardone&#39;vc.0.14.1.0.0.1.0.0.4" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="0.90" steps="388967"/></proof>
          </goal>
          <goal name="nonn_mat_sum_cardone&#39;vc.0.14.1.0.0.1.0.0.5" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="0.92" steps="388967"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="nonn_mat_sum_cardone&#39;vc.0.14.1.0.0.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.46" steps="374253"/></proof>
         </goal>
         <goal name="nonn_mat_sum_cardone&#39;vc.0.14.1.0.0.1.0.2" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.41" steps="368193"/></proof>
         </goal>
         <goal name="nonn_mat_sum_cardone&#39;vc.0.14.1.0.0.1.0.3" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.44" steps="368193"/></proof>
         </goal>
         <goal name="nonn_mat_sum_cardone&#39;vc.0.14.1.0.0.1.0.4" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.95" steps="389653"/></proof>
         </goal>
         <goal name="nonn_mat_sum_cardone&#39;vc.0.14.1.0.0.1.0.5" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.93" steps="389653"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum_null_but_maybe_one_elt&#39;vc" expl="VC for mat_sum_null_but_maybe_one_elt" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="mat_sum_null_but_maybe_one_elt&#39;vc.0" expl="VC for mat_sum_null_but_maybe_one_elt" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mat_sum_null_but_maybe_one_elt&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.33" steps="308700"/></proof>
   </goal>
   <goal name="mat_sum_null_but_maybe_one_elt&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.57" steps="326807"/></proof>
   </goal>
   <goal name="mat_sum_null_but_maybe_one_elt&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.77" steps="332107"/></proof>
   </goal>
   <goal name="mat_sum_null_but_maybe_one_elt&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.78" steps="332123"/></proof>
   </goal>
   <goal name="mat_sum_null_but_maybe_one_elt&#39;vc.0.4" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_sum_to_sum_pre">
    <goal name="mat_sum_null_but_maybe_one_elt&#39;vc.0.4.0" expl="precondition" proved="true">
    <transf name="instantiate" proved="true" arg1="sum_null_but_maybe_one_elt" arg2="(fun (e1:a) -&gt; (get (f  e1) i  j)),s,e">
     <goal name="mat_sum_null_but_maybe_one_elt&#39;vc.0.4.0.0" expl="precondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Hinst">
      <goal name="mat_sum_null_but_maybe_one_elt&#39;vc.0.4.0.0.0" expl="precondition" proved="true">
      <proof prover="10"><result status="valid" time="0.82" steps="352045"/></proof>
      </goal>
      <goal name="mat_sum_null_but_maybe_one_elt&#39;vc.0.4.0.0.1" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="mat_sum_null_but_maybe_one_elt&#39;vc.0.4.0.0.1.0" expl="rewrite premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="mat_sum_null_but_maybe_one_elt&#39;vc.0.4.0.0.1.0.0" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.34" steps="313950"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sum_null_but_maybe_one_elt&#39;vc.0.4.0.0.2" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="mat_sum_null_but_maybe_one_elt&#39;vc.0.4.0.0.2.0" expl="rewrite premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="mat_sum_null_but_maybe_one_elt&#39;vc.0.4.0.0.2.0.0" expl="rewrite premises" proved="true">
        <transf name="apply" proved="true" arg1="get_null_mat">
         <goal name="mat_sum_null_but_maybe_one_elt&#39;vc.0.4.0.0.2.0.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="0.86" steps="332756"/></proof>
         </goal>
         <goal name="mat_sum_null_but_maybe_one_elt&#39;vc.0.4.0.0.2.0.0.1" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="1.12" steps="357858"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_null_but_maybe_one_elt&#39;vc.0.4.1" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.52" steps="313570"/></proof>
    </goal>
    <goal name="mat_sum_null_but_maybe_one_elt&#39;vc.0.4.2" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.76" steps="331846"/></proof>
    </goal>
    <goal name="mat_sum_null_but_maybe_one_elt&#39;vc.0.4.3" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_null_but_maybe_one_elt&#39;vc.0.4.3.0" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.98" steps="351835"/></proof>
     </goal>
     <goal name="mat_sum_null_but_maybe_one_elt&#39;vc.0.4.3.1" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.98" steps="351952"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_null_but_maybe_one_elt&#39;vc.0.4.4" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_null_but_maybe_one_elt&#39;vc.0.4.4.0" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.97" steps="351835"/></proof>
     </goal>
     <goal name="mat_sum_null_but_maybe_one_elt&#39;vc.0.4.4.1" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.99" steps="351952"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_null_but_maybe_one_elt&#39;vc.0.5" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.35" steps="313437"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="nonn_mat_sum_plus_one&#39;vc" expl="VC for nonn_mat_sum_plus_one" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="nonn_mat_sum_plus_one&#39;vc.0" expl="VC for nonn_mat_sum_plus_one" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.94" steps="349556"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.78" steps="332783"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.96" steps="351450"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.98" steps="351496"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.4" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.50" steps="314734"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.5" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.35" steps="314740"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.6" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.97" steps="352284"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.7" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.00" steps="352280"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.8" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.78" steps="334607"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.9" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.77" steps="334698"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.10" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.36" steps="314976"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.11" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.34" steps="315001"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.12" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="nonn_mat_sum_plus_one&#39;vc.0.12.0" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.47" steps="314976"/></proof>
    </goal>
    <goal name="nonn_mat_sum_plus_one&#39;vc.0.12.1" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.48" steps="314976"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.13" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="0.77" steps="333754"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.14" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.35" steps="315037"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.15" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.34" steps="315043"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.16" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.99" steps="353945"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.17" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.01" steps="353746"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.18" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.95" steps="354329"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.19" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.98" steps="354351"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.20" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.48" steps="315942"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.21" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.48" steps="316107"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.22" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.36" steps="316113"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.23" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.04" steps="356156"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.24" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.00" steps="356231"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.25" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.36" steps="316119"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.26" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.36" steps="316125"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.27" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.81" steps="334975"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.28" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.79" steps="335043"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.29" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.75" steps="334688"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.30" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.76" steps="334705"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.31" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(mat_sum_dim s f r c )" arg2="(add_mat (f @ choose s) (mat_sum_dim (remove (choose s) s) f r c))">
    <goal name="nonn_mat_sum_plus_one&#39;vc.0.31.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures8">
     <goal name="nonn_mat_sum_plus_one&#39;vc.0.31.0.0" expl="precondition" proved="true">
     <transf name="rewrite" proved="true" arg1="zero_add_t">
      <goal name="nonn_mat_sum_plus_one&#39;vc.0.31.0.0.0" expl="precondition" proved="true">
      <proof prover="10"><result status="valid" time="0.33" steps="315953"/></proof>
      </goal>
      <goal name="nonn_mat_sum_plus_one&#39;vc.0.31.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="1.22" steps="360569"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="nonn_mat_sum_plus_one&#39;vc.0.31.0.1" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="1.17" steps="358851"/></proof>
     </goal>
     <goal name="nonn_mat_sum_plus_one&#39;vc.0.31.0.2" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="1.14" steps="358729"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="nonn_mat_sum_plus_one&#39;vc.0.31.1" expl="equality hypothesis" proved="true">
    <proof prover="10"><result status="valid" time="0.81" steps="356016"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.32" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.38" steps="316237"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.33" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.36" steps="318008"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.34" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(mem e (remove (choose s) s))">
    <goal name="nonn_mat_sum_plus_one&#39;vc.0.34.0" expl="asserted formula" proved="true">
    <proof prover="10"><result status="valid" time="1.02" steps="360240"/></proof>
    </goal>
    <goal name="nonn_mat_sum_plus_one&#39;vc.0.34.1" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="nonn_mat_subset&#39;def">
     <goal name="nonn_mat_sum_plus_one&#39;vc.0.34.1.0" expl="precondition" proved="true">
     <transf name="apply" proved="true" arg1="set_filter">
      <goal name="nonn_mat_sum_plus_one&#39;vc.0.34.1.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="nonn_mat_sum_plus_one&#39;vc.0.34.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="1.05" steps="360968"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="nonn_mat_sum_plus_one&#39;vc.0.34.1.0.1" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="0.36" steps="318168"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="nonn_mat_sum_plus_one&#39;vc.0.34.1.1" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.33" steps="318168"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.35" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(mem e s)">
    <goal name="nonn_mat_sum_plus_one&#39;vc.0.35.0" expl="asserted formula" proved="true">
    <proof prover="10"><result status="valid" time="1.08" steps="362287"/></proof>
    </goal>
    <goal name="nonn_mat_sum_plus_one&#39;vc.0.35.1" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="nonn_mat_subset&#39;def">
     <goal name="nonn_mat_sum_plus_one&#39;vc.0.35.1.0" expl="precondition" proved="true">
     <transf name="rewrite" proved="true" arg1="nonn_mat_subset&#39;def" arg2="in" arg3="H">
      <goal name="nonn_mat_sum_plus_one&#39;vc.0.35.1.0.0" expl="precondition" proved="true">
      <proof prover="10"><result status="valid" time="3.88" steps="1126437"/></proof>
      </goal>
      <goal name="nonn_mat_sum_plus_one&#39;vc.0.35.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.35" steps="318215"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="nonn_mat_sum_plus_one&#39;vc.0.35.1.1" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.35" steps="318215"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.36" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="0.77" steps="333776"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.37" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="nonn_mat_subset&#39;def">
    <goal name="nonn_mat_sum_plus_one&#39;vc.0.37.0" expl="assertion" proved="true">
    <transf name="apply" proved="true" arg1="set_filter">
     <goal name="nonn_mat_sum_plus_one&#39;vc.0.37.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="nonn_mat_sum_plus_one&#39;vc.0.37.0.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="0.35" steps="315041"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="nonn_mat_sum_plus_one&#39;vc.0.37.0.1" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="1.00" steps="352869"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="nonn_mat_sum_plus_one&#39;vc.0.37.1" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.34" steps="315043"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.38" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.34" steps="315061"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.39" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.03" steps="356431"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.40" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.79" steps="335688"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.41" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.03" steps="358249"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.42" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.06" steps="358070"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.43" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.36" steps="316988"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.44" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.35" steps="316994"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.45" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.37" steps="316876"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.46" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.38" steps="316935"/></proof>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.47" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(mem e s)">
    <goal name="nonn_mat_sum_plus_one&#39;vc.0.47.0" expl="asserted formula" proved="true">
    <proof prover="10"><result status="valid" time="1.09" steps="362883"/></proof>
    </goal>
    <goal name="nonn_mat_sum_plus_one&#39;vc.0.47.1" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(mem e (nonn_mat_subset f s))">
     <goal name="nonn_mat_sum_plus_one&#39;vc.0.47.1.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="(mem e s)">
      <goal name="nonn_mat_sum_plus_one&#39;vc.0.47.1.0.0" expl="asserted formula" proved="true">
      <proof prover="10"><result status="valid" time="0.35" steps="317102"/></proof>
      </goal>
      <goal name="nonn_mat_sum_plus_one&#39;vc.0.47.1.0.1" expl="asserted formula" proved="true">
      <transf name="rewrite" proved="true" arg1="nonn_mat_subset&#39;def">
       <goal name="nonn_mat_sum_plus_one&#39;vc.0.47.1.0.1.0" expl="asserted formula" proved="true">
       <transf name="assert" proved="true" arg1="((fun (e1:a) -&gt;
     not equal (f @ e1) (make (s_rows s f) (s_columns s f) c_zero)) e)">
        <goal name="nonn_mat_sum_plus_one&#39;vc.0.47.1.0.1.0.0" expl="asserted formula" proved="true">
        <proof prover="10"><result status="valid" time="1.18" steps="381699"/></proof>
        </goal>
        <goal name="nonn_mat_sum_plus_one&#39;vc.0.47.1.0.1.0.1" expl="asserted formula" proved="true">
        <proof prover="10"><result status="valid" time="1.77" steps="557621"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="nonn_mat_sum_plus_one&#39;vc.0.47.1.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.35" steps="317105"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="nonn_mat_sum_plus_one&#39;vc.0.47.1.1" expl="precondition" proved="true">
     <proof prover="10"><result status="valid" time="1.06" steps="362037"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.48" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(mem e (remove (choose s) s))">
    <goal name="nonn_mat_sum_plus_one&#39;vc.0.48.0" expl="asserted formula" proved="true">
    <proof prover="10"><result status="valid" time="1.35" steps="365779"/></proof>
    </goal>
    <goal name="nonn_mat_sum_plus_one&#39;vc.0.48.1" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="nonn_mat_subset&#39;def">
     <goal name="nonn_mat_sum_plus_one&#39;vc.0.48.1.0" expl="precondition" proved="true">
     <transf name="assert" proved="true" arg1="((fun (e1:a) -&gt;
     not equal (f @ e1)
         (make (s_rows (remove (choose s) s) f)
          (s_columns (remove (choose s) s) f) c_zero)) e)">
      <goal name="nonn_mat_sum_plus_one&#39;vc.0.48.1.0.0" expl="asserted formula" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="nonn_mat_sum_plus_one&#39;vc.0.48.1.0.0.0" expl="asserted formula" proved="true">
       <transf name="rewrite" proved="true" arg1="nonn_mat_subset&#39;def" arg2="in" arg3="H">
        <goal name="nonn_mat_sum_plus_one&#39;vc.0.48.1.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="((fun (e1:a) -&gt;
      not equal (f @ e1) (make (s_rows s f) (s_columns s f) c_zero)) e)">
         <goal name="nonn_mat_sum_plus_one&#39;vc.0.48.1.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="(mem e (filter
    (fun (e1:a) -&gt;
      not equal (f @ e1) (make (s_rows s f) (s_columns s f) c_zero))
    s))">
          <goal name="nonn_mat_sum_plus_one&#39;vc.0.48.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="assert" proved="true" arg1="(forall e e&#39;:a. forall s : set1 a. 0&lt; cardinal s -&gt; mem e&#39; s -&gt;  mem e (remove e&#39; s)  -&gt; mem e s)
">
           <goal name="nonn_mat_sum_plus_one&#39;vc.0.48.1.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
           <proof prover="10"><result status="valid" time="0.85" steps="354903"/></proof>
           </goal>
           <goal name="nonn_mat_sum_plus_one&#39;vc.0.48.1.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
           <transf name="instantiate" proved="true" arg1="h1" arg2="e,(choose s),(filter
   (fun (e1:a) -&gt;
     not equal (f @ e1) (make (s_rows s f) (s_columns s f) c_zero))
   s)">
            <goal name="nonn_mat_sum_plus_one&#39;vc.0.48.1.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
            <transf name="apply" proved="true" arg1="Hinst">
             <goal name="nonn_mat_sum_plus_one&#39;vc.0.48.1.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
             <transf name="assert" proved="true" arg1="(mem (choose s) (filter
   (fun (e1:a) -&gt;
     not equal (f @ e1) (make (s_rows s f) (s_columns s f) c_zero))
   s))">
              <goal name="nonn_mat_sum_plus_one&#39;vc.0.48.1.0.0.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
              <proof prover="10"><result status="valid" time="2.48" steps="804262"/></proof>
              </goal>
              <goal name="nonn_mat_sum_plus_one&#39;vc.0.48.1.0.0.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
              <transf name="assert" proved="true" arg1="(forall e :a. forall s : set1 a. mem e s -&gt; 0&lt; cardinal s)
">
               <goal name="nonn_mat_sum_plus_one&#39;vc.0.48.1.0.0.0.0.0.0.1.0.0.1.0" expl="asserted formula" proved="true">
               <proof prover="10"><result status="valid" time="0.74" steps="354974"/></proof>
               </goal>
               <goal name="nonn_mat_sum_plus_one&#39;vc.0.48.1.0.0.0.0.0.0.1.0.0.1.1" expl="apply premises" proved="true">
               <transf name="instantiate" proved="true" arg1="h" arg2="(choose s),(filter
   (fun (e1:a) -&gt;
     not equal (f @ e1) (make (s_rows s f) (s_columns s f) c_zero))
   s)">
                <goal name="nonn_mat_sum_plus_one&#39;vc.0.48.1.0.0.0.0.0.0.1.0.0.1.1.0" expl="apply premises" proved="true">
                <transf name="apply" proved="true" arg1="Hinst">
                 <goal name="nonn_mat_sum_plus_one&#39;vc.0.48.1.0.0.0.0.0.0.1.0.0.1.1.0.0" expl="apply premises" proved="true">
                 <transf name="apply" proved="true" arg1="h1">
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="nonn_mat_sum_plus_one&#39;vc.0.48.1.0.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
             <proof prover="10"><result status="valid" time="2.50" steps="804262"/></proof>
             </goal>
             <goal name="nonn_mat_sum_plus_one&#39;vc.0.48.1.0.0.0.0.0.0.1.0.2" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="H">
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="nonn_mat_sum_plus_one&#39;vc.0.48.1.0.0.0.0.0.1" expl="asserted formula" proved="true">
          <proof prover="10"><result status="valid" time="1.69" steps="540720"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="nonn_mat_sum_plus_one&#39;vc.0.48.1.0.0.0.0.1" expl="asserted formula" proved="true">
         <proof prover="10"><result status="valid" time="1.06" steps="379580"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="nonn_mat_sum_plus_one&#39;vc.0.48.1.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.36" steps="317149"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="nonn_mat_sum_plus_one&#39;vc.0.48.1.0.1" expl="precondition" proved="true">
      <proof prover="10"><result status="valid" time="1.77" steps="542703"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="nonn_mat_sum_plus_one&#39;vc.0.48.1.1" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.54" steps="317149"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="nonn_mat_sum_plus_one&#39;vc.0.49" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="nonn_mat_sum_plus_one&#39;vc.0.49.0" expl="postcondition" proved="true">
    <proof prover="10"><result status="valid" time="0.78" steps="336880"/></proof>
    </goal>
    <goal name="nonn_mat_sum_plus_one&#39;vc.0.49.1" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="nonn_mat_sum_plus_one&#39;vc.0.49.1.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(add (choose s) (remove (choose s) s))" arg2="s" arg3="in" arg4="Ensures11">
      <goal name="nonn_mat_sum_plus_one&#39;vc.0.49.1.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="Ensures11">
       <goal name="nonn_mat_sum_plus_one&#39;vc.0.49.1.0.0.0" expl="postcondition" proved="true">
       <proof prover="10"><result status="valid" time="0.88" steps="385993"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="nonn_mat_sum_plus_one&#39;vc.0.49.1.0.1" expl="equality hypothesis" proved="true">
      <proof prover="10"><result status="valid" time="1.17" steps="406818"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="nonn_mat_sum&#39;vc" expl="VC for nonn_mat_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="nonn_mat_sum&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.58" steps="313587"/></proof>
  </goal>
  <goal name="nonn_mat_sum&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.35" steps="313592"/></proof>
  </goal>
  <goal name="nonn_mat_sum&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.48" steps="313598"/></proof>
  </goal>
  <goal name="nonn_mat_sum&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.35" steps="313625"/></proof>
  </goal>
  <goal name="nonn_mat_sum&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.35" steps="313630"/></proof>
  </goal>
  <goal name="nonn_mat_sum&#39;vc.5" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.34" steps="313636"/></proof>
  </goal>
  <goal name="nonn_mat_sum&#39;vc.6" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="1.04" steps="349625"/></proof>
  </goal>
  <goal name="nonn_mat_sum&#39;vc.7" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="1.02" steps="349782"/></proof>
  </goal>
  <goal name="nonn_mat_sum&#39;vc.8" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="nonn_mat_sum&#39;vc.8.0" expl="variant decrease" proved="true">
   <proof prover="10"><result status="valid" time="0.96" steps="347990"/></proof>
   </goal>
   <goal name="nonn_mat_sum&#39;vc.8.1" expl="variant decrease" proved="true">
   <proof prover="10"><result status="valid" time="0.97" steps="349636"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="nonn_mat_sum&#39;vc.9" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.35" steps="313632"/></proof>
  </goal>
  <goal name="nonn_mat_sum&#39;vc.10" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.35" steps="313638"/></proof>
  </goal>
  <goal name="nonn_mat_sum&#39;vc.11" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.97" steps="349995"/></proof>
  </goal>
  <goal name="nonn_mat_sum&#39;vc.12" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.97" steps="350021"/></proof>
  </goal>
  <goal name="nonn_mat_sum&#39;vc.13" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.97" steps="350206"/></proof>
  </goal>
  <goal name="nonn_mat_sum&#39;vc.14" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.35" steps="314901"/></proof>
  </goal>
  <goal name="nonn_mat_sum&#39;vc.15" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.37" steps="314907"/></proof>
  </goal>
  <goal name="nonn_mat_sum&#39;vc.16" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.64" steps="333611"/></proof>
  </goal>
  <goal name="nonn_mat_sum&#39;vc.17" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.78" steps="333679"/></proof>
  </goal>
  <goal name="nonn_mat_sum&#39;vc.18" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.36" steps="315035"/></proof>
  </goal>
  <goal name="nonn_mat_sum&#39;vc.19" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.59" steps="333214"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum_map_map&#39;vc" expl="VC for mat_sum_map_map" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sum_map_map&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.44" steps="381078"/></proof>
  </goal>
  <goal name="mat_sum_map_map&#39;vc.1" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="mat_sum_map_map&#39;vc.1.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="mat_sum_map_map&#39;vc.1.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="mat_sum_map_map&#39;vc.1.0.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="1.48" steps="500798"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_map_map&#39;vc.1.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="mat_sum_map_map&#39;vc.1.1.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="mat_sum_map_map&#39;vc.1.1.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="1.47" steps="500848"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sum_map_map&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.45" steps="381151"/></proof>
  </goal>
  <goal name="mat_sum_map_map&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.55" steps="426792"/></proof>
  </goal>
  <goal name="mat_sum_map_map&#39;vc.4" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="mat_sum_map_map&#39;vc.4.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="mat_sum_map_map&#39;vc.4.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="mat_sum_map_map&#39;vc.4.0.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="1.61" steps="509661"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_map_map&#39;vc.4.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="mat_sum_map_map&#39;vc.4.1.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="mat_sum_map_map&#39;vc.4.1.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="1.59" steps="509731"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sum_map_map&#39;vc.5" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.67" steps="426851"/></proof>
  </goal>
  <goal name="mat_sum_map_map&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="1.10" steps="449174"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum_disjoint_transitivity&#39;vc" expl="VC for mat_sum_disjoint_transitivity" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="mat_sum_disjoint_transitivity&#39;vc.0" expl="VC for mat_sum_disjoint_transitivity" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mat_sum_disjoint_transitivity&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.32" steps="284405"/></proof>
   </goal>
   <goal name="mat_sum_disjoint_transitivity&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.75" steps="304948"/></proof>
   </goal>
   <goal name="mat_sum_disjoint_transitivity&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.75" steps="304931"/></proof>
   </goal>
   <goal name="mat_sum_disjoint_transitivity&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.31" steps="284206"/></proof>
   </goal>
   <goal name="mat_sum_disjoint_transitivity&#39;vc.0.4" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.75" steps="304770"/></proof>
   </goal>
   <goal name="mat_sum_disjoint_transitivity&#39;vc.0.5" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.76" steps="304745"/></proof>
   </goal>
   <goal name="mat_sum_disjoint_transitivity&#39;vc.0.6" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.31" steps="284253"/></proof>
   </goal>
   <goal name="mat_sum_disjoint_transitivity&#39;vc.0.7" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.32" steps="284258"/></proof>
   </goal>
   <goal name="mat_sum_disjoint_transitivity&#39;vc.0.8" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.41" steps="349101"/></proof>
   </goal>
   <goal name="mat_sum_disjoint_transitivity&#39;vc.0.9" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.40" steps="349106"/></proof>
   </goal>
   <goal name="mat_sum_disjoint_transitivity&#39;vc.0.10" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.41" steps="349283"/></proof>
   </goal>
   <goal name="mat_sum_disjoint_transitivity&#39;vc.0.11" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.17" steps="388105"/></proof>
   </goal>
   <goal name="mat_sum_disjoint_transitivity&#39;vc.0.12" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.41" steps="349465"/></proof>
   </goal>
   <goal name="mat_sum_disjoint_transitivity&#39;vc.0.13" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.22" steps="388352"/></proof>
   </goal>
   <goal name="mat_sum_disjoint_transitivity&#39;vc.0.14" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.62" steps="383163"/></proof>
   </goal>
   <goal name="mat_sum_disjoint_transitivity&#39;vc.0.15" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.45" steps="383168"/></proof>
   </goal>
   <goal name="mat_sum_disjoint_transitivity&#39;vc.0.16" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.44" steps="383317"/></proof>
   </goal>
   <goal name="mat_sum_disjoint_transitivity&#39;vc.0.17" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.44" steps="383322"/></proof>
   </goal>
   <goal name="mat_sum_disjoint_transitivity&#39;vc.0.18" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.01" steps="404341"/></proof>
   </goal>
   <goal name="mat_sum_disjoint_transitivity&#39;vc.0.19" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.01" steps="404363"/></proof>
   </goal>
   <goal name="mat_sum_disjoint_transitivity&#39;vc.0.20" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.03" steps="403679"/></proof>
   </goal>
   <goal name="mat_sum_disjoint_transitivity&#39;vc.0.21" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.05" steps="403696"/></proof>
   </goal>
   <goal name="mat_sum_disjoint_transitivity&#39;vc.0.22" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures">
    <goal name="mat_sum_disjoint_transitivity&#39;vc.0.22.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures13">
     <goal name="mat_sum_disjoint_transitivity&#39;vc.0.22.0.0" expl="precondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures14">
      <goal name="mat_sum_disjoint_transitivity&#39;vc.0.22.0.0.0" expl="precondition" proved="true">
      <transf name="rewrite" proved="true" arg1="Ensures15">
       <goal name="mat_sum_disjoint_transitivity&#39;vc.0.22.0.0.0.0" expl="precondition" proved="true">
       <transf name="rewrite" proved="true" arg1="assert_make">
        <goal name="mat_sum_disjoint_transitivity&#39;vc.0.22.0.0.0.0.0" expl="precondition" proved="true">
        <transf name="rewrite" proved="true" arg1="assert_make">
         <goal name="mat_sum_disjoint_transitivity&#39;vc.0.22.0.0.0.0.0.0" expl="precondition" proved="true">
         <transf name="rewrite" proved="true" arg1="assert_make">
          <goal name="mat_sum_disjoint_transitivity&#39;vc.0.22.0.0.0.0.0.0.0" expl="precondition" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="mat_sum_disjoint_transitivity&#39;vc.0.22.0.0.0.0.0.0.0.0" expl="precondition" proved="true">
           <transf name="instantiate" proved="true" arg1="sum_disjoint_transitivity" arg2="s1,s2,(fun (e:a) -&gt; get (f @ e) i j)">
            <goal name="mat_sum_disjoint_transitivity&#39;vc.0.22.0.0.0.0.0.0.0.0.0" expl="precondition" proved="true">
            <transf name="destruct" proved="true" arg1="Hinst">
             <goal name="mat_sum_disjoint_transitivity&#39;vc.0.22.0.0.0.0.0.0.0.0.0.0" expl="destruct premise" proved="true">
             <proof prover="10"><result status="valid" time="0.62" steps="382478"/></proof>
             </goal>
             <goal name="mat_sum_disjoint_transitivity&#39;vc.0.22.0.0.0.0.0.0.0.0.0.1" expl="precondition" proved="true">
             <transf name="replace" proved="true" arg1="s" arg2="(union s1 s2)">
              <goal name="mat_sum_disjoint_transitivity&#39;vc.0.22.0.0.0.0.0.0.0.0.0.1.0" expl="precondition" proved="true">
              <transf name="rewrite" proved="true" arg1="Hinst">
               <goal name="mat_sum_disjoint_transitivity&#39;vc.0.22.0.0.0.0.0.0.0.0.0.1.0.0" expl="precondition" proved="true">
               <transf name="compute_specified" proved="true" >
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="mat_sum_disjoint_transitivity&#39;vc.0.22.0.0.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
              <proof prover="10"><result status="valid" time="0.43" steps="382732"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="mat_sum_disjoint_transitivity&#39;vc.0.22.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="mat_sum_disjoint_transitivity&#39;vc.0.22.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
           <proof prover="10"><result status="valid" time="1.30" steps="424738"/></proof>
           </goal>
           <goal name="mat_sum_disjoint_transitivity&#39;vc.0.22.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
           <proof prover="10"><result status="valid" time="1.26" steps="424898"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="mat_sum_disjoint_transitivity&#39;vc.0.22.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="mat_sum_disjoint_transitivity&#39;vc.0.22.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
           <proof prover="10"><result status="valid" time="1.29" steps="424738"/></proof>
           </goal>
           <goal name="mat_sum_disjoint_transitivity&#39;vc.0.22.0.0.0.0.0.0.2.1" expl="rewrite premises" proved="true">
           <proof prover="10"><result status="valid" time="1.29" steps="424898"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sum_disjoint_transitivity&#39;vc.0.22.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="mat_sum_disjoint_transitivity&#39;vc.0.22.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="1.28" steps="424738"/></proof>
          </goal>
          <goal name="mat_sum_disjoint_transitivity&#39;vc.0.22.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="1.12" steps="424876"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sum_disjoint_transitivity&#39;vc.0.22.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="mat_sum_disjoint_transitivity&#39;vc.0.22.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="1.29" steps="424738"/></proof>
          </goal>
          <goal name="mat_sum_disjoint_transitivity&#39;vc.0.22.0.0.0.0.0.2.1" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="1.34" steps="424876"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_disjoint_transitivity&#39;vc.0.22.0.0.0.0.1" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_sum_disjoint_transitivity&#39;vc.0.22.0.0.0.0.1.0" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="1.32" steps="424738"/></proof>
         </goal>
         <goal name="mat_sum_disjoint_transitivity&#39;vc.0.22.0.0.0.0.1.1" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="1.32" steps="424885"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_disjoint_transitivity&#39;vc.0.22.0.0.0.0.2" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_sum_disjoint_transitivity&#39;vc.0.22.0.0.0.0.2.0" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="1.35" steps="424738"/></proof>
         </goal>
         <goal name="mat_sum_disjoint_transitivity&#39;vc.0.22.0.0.0.0.2.1" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="1.35" steps="424885"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_disjoint_transitivity&#39;vc.0.23" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.44" steps="382756"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum_null&#39;vc" expl="VC for mat_sum_null" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sum_null&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.50" steps="317866"/></proof>
  </goal>
  <goal name="mat_sum_null&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.79" steps="336144"/></proof>
  </goal>
  <goal name="mat_sum_null&#39;vc.2" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mat_sum_to_sum">
   <goal name="mat_sum_null&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="assert_make">
    <goal name="mat_sum_null&#39;vc.2.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="mat_sum_null&#39;vc.2.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="sum_null_forall">
      <goal name="mat_sum_null&#39;vc.2.0.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="mat_sum_null&#39;vc.2.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mat_sum_null&#39;vc.2.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="Requires">
         <goal name="mat_sum_null&#39;vc.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="0.60" steps="381006"/></proof>
         </goal>
         <goal name="mat_sum_null&#39;vc.2.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.47" steps="381008"/></proof>
         </goal>
         <goal name="mat_sum_null&#39;vc.2.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="1.02" steps="419956"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_null&#39;vc.2.0.1" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="2.84" steps="830505"/></proof>
    </goal>
    <goal name="mat_sum_null&#39;vc.2.0.2" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="2.80" steps="830505"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_null&#39;vc.2.1" expl="rewrite premises" proved="true">
   <proof prover="10"><result status="valid" time="0.47" steps="380996"/></proof>
   </goal>
   <goal name="mat_sum_null&#39;vc.2.2" expl="rewrite premises" proved="true">
   <proof prover="10"><result status="valid" time="0.76" steps="400999"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum_null_b&#39;vc" expl="VC for mat_sum_null_b" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sum_null_b&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.38" steps="317249"/></proof>
  </goal>
  <goal name="mat_sum_null_b&#39;vc.1" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="mat_sum_null_b&#39;vc.1.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="mat_sum_null_b&#39;vc.1.0.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.61" steps="336871"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_null_b&#39;vc.1.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="mat_sum_null_b&#39;vc.1.1.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.64" steps="336871"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sum_null_b&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.66" steps="336550"/></proof>
  </goal>
  <goal name="mat_sum_null_b&#39;vc.3" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="mat_sum_null">
   <goal name="mat_sum_null_b&#39;vc.3.0" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.39" steps="319528"/></proof>
   </goal>
   <goal name="mat_sum_null_b&#39;vc.3.1" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="mat_sum_null_b&#39;vc.3.1.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.69" steps="339278"/></proof>
    </goal>
    <goal name="mat_sum_null_b&#39;vc.3.1.1" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.76" steps="339278"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_null_b&#39;vc.3.2" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.72" steps="338098"/></proof>
   </goal>
   <goal name="mat_sum_null_b&#39;vc.3.3" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="set_valid_index">
    <goal name="mat_sum_null_b&#39;vc.3.3.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_null_b&#39;vc.3.3.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.44" steps="319526"/></proof>
     </goal>
     <goal name="mat_sum_null_b&#39;vc.3.3.0.1" expl="apply premises" proved="true">
     <transf name="instantiate" proved="true" arg1="rows_mat_sum" arg2="s,f,r">
      <goal name="mat_sum_null_b&#39;vc.3.3.0.1.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.00" steps="428916"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_null_b&#39;vc.3.3.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_null_b&#39;vc.3.3.1.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.37" steps="319526"/></proof>
     </goal>
     <goal name="mat_sum_null_b&#39;vc.3.3.1.1" expl="apply premises" proved="true">
     <transf name="instantiate" proved="true" arg1="columns_mat_sum" arg2="s,f,r">
      <goal name="mat_sum_null_b&#39;vc.3.3.1.1.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="3.15" steps="946625"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="map_add_mat_sum_t&#39;vc" expl="VC for map_add_mat_sum_t" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="map_add_mat_sum_t&#39;vc.0" expl="VC for map_add_mat_sum_t" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="map_add_mat_sum_t&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.37" steps="327016"/></proof>
   </goal>
   <goal name="map_add_mat_sum_t&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.08" steps="367057"/></proof>
   </goal>
   <goal name="map_add_mat_sum_t&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.69" steps="349462"/></proof>
   </goal>
   <goal name="map_add_mat_sum_t&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.43" steps="326817"/></proof>
   </goal>
   <goal name="map_add_mat_sum_t&#39;vc.0.4" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.00" steps="365933"/></proof>
   </goal>
   <goal name="map_add_mat_sum_t&#39;vc.0.5" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.79" steps="349276"/></proof>
   </goal>
   <goal name="map_add_mat_sum_t&#39;vc.0.6" expl="assertion" proved="true">
   <transf name="assert" proved="true" arg1="(mem ((injo @ e)) s&#39;)">
    <goal name="map_add_mat_sum_t&#39;vc.0.6.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="(mem ((injo @ e)) (map injo s))
">
     <goal name="map_add_mat_sum_t&#39;vc.0.6.0.0" expl="asserted formula" proved="true">
     <proof prover="10"><result status="valid" time="1.07" steps="437268"/></proof>
     </goal>
     <goal name="map_add_mat_sum_t&#39;vc.0.6.0.1" expl="asserted formula" proved="true">
     <proof prover="10"><result status="valid" time="1.06" steps="437295"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="map_add_mat_sum_t&#39;vc.0.6.1" expl="assertion" proved="true">
    <proof prover="10"><result status="valid" time="0.85" steps="390540"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="map_add_mat_sum_t&#39;vc.0.7" expl="assertion" proved="true">
   <transf name="assert" proved="true" arg1="(mem ((injz @ e)) s&#39;)">
    <goal name="map_add_mat_sum_t&#39;vc.0.7.0" expl="asserted formula" proved="true">
    <proof prover="10"><result status="valid" time="1.29" steps="464089"/></proof>
    </goal>
    <goal name="map_add_mat_sum_t&#39;vc.0.7.1" expl="assertion" proved="true">
    <proof prover="10"><result status="valid" time="0.85" steps="390636"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="map_add_mat_sum_t&#39;vc.0.8" expl="assertion" proved="true">
   <transf name="assert" proved="true" arg1="(mem ((injo @ e)) s&#39;)">
    <goal name="map_add_mat_sum_t&#39;vc.0.8.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="(mem ((injo @ e)) (map injo s))
">
     <goal name="map_add_mat_sum_t&#39;vc.0.8.0.0" expl="asserted formula" proved="true">
     <proof prover="10"><result status="valid" time="0.99" steps="442732"/></proof>
     </goal>
     <goal name="map_add_mat_sum_t&#39;vc.0.8.0.1" expl="asserted formula" proved="true">
     <proof prover="10"><result status="valid" time="1.02" steps="442759"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="map_add_mat_sum_t&#39;vc.0.8.1" expl="assertion" proved="true">
    <proof prover="10"><result status="valid" time="0.85" steps="389548"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="map_add_mat_sum_t&#39;vc.0.9" expl="assertion" proved="true">
   <transf name="assert" proved="true" arg1="(mem ((injz @ e)) s&#39;)">
    <goal name="map_add_mat_sum_t&#39;vc.0.9.0" expl="asserted formula" proved="true">
    <proof prover="10"><result status="valid" time="1.42" steps="462895"/></proof>
    </goal>
    <goal name="map_add_mat_sum_t&#39;vc.0.9.1" expl="assertion" proved="true">
    <proof prover="10"><result status="valid" time="0.78" steps="389644"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="map_add_mat_sum_t&#39;vc.0.10" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.46" steps="368813"/></proof>
   </goal>
   <goal name="map_add_mat_sum_t&#39;vc.0.11" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.41" steps="464432"/></proof>
   </goal>
   <goal name="map_add_mat_sum_t&#39;vc.0.12" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.79" steps="392932"/></proof>
   </goal>
   <goal name="map_add_mat_sum_t&#39;vc.0.13" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="map_add_mat_sum_t&#39;vc.0.13.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="map_add_mat_sum_t&#39;vc.0.13.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="map_add_mat_sum_t&#39;vc.0.13.0.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(rows (f @ (injz @ e)))" arg2="(s_rows  s&#39; f)">
       <goal name="map_add_mat_sum_t&#39;vc.0.13.0.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="(mem  ( (injz @ e&#39;)) s&#39;)">
        <goal name="map_add_mat_sum_t&#39;vc.0.13.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="10"><result status="valid" time="1.44" steps="464251"/></proof>
        </goal>
        <goal name="map_add_mat_sum_t&#39;vc.0.13.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="0.79" steps="389747"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="map_add_mat_sum_t&#39;vc.0.13.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="10"><result status="valid" time="0.95" steps="389722"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="map_add_mat_sum_t&#39;vc.0.13.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="map_add_mat_sum_t&#39;vc.0.13.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="map_add_mat_sum_t&#39;vc.0.13.1.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(columns (f @ (injz @ e)))" arg2="(s_columns  s&#39; f)">
       <goal name="map_add_mat_sum_t&#39;vc.0.13.1.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="(mem  ( (injz @ e&#39;)) s&#39;)">
        <goal name="map_add_mat_sum_t&#39;vc.0.13.1.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="10"><result status="valid" time="1.17" steps="464251"/></proof>
        </goal>
        <goal name="map_add_mat_sum_t&#39;vc.0.13.1.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="0.79" steps="389747"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="map_add_mat_sum_t&#39;vc.0.13.1.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="10"><result status="valid" time="1.01" steps="389722"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="map_add_mat_sum_t&#39;vc.0.14" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="map_add_mat_sum_t&#39;vc.0.14.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="map_add_mat_sum_t&#39;vc.0.14.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="map_add_mat_sum_t&#39;vc.0.14.0.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(rows (f @ (injo @ e)))" arg2="(s_rows  s&#39; f)">
       <goal name="map_add_mat_sum_t&#39;vc.0.14.0.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="(mem  ( (injo @ e&#39;)) s&#39;)">
        <goal name="map_add_mat_sum_t&#39;vc.0.14.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="10"><result status="valid" time="1.54" steps="488686"/></proof>
        </goal>
        <goal name="map_add_mat_sum_t&#39;vc.0.14.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="0.85" steps="411915"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="map_add_mat_sum_t&#39;vc.0.14.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="10"><result status="valid" time="1.00" steps="411890"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="map_add_mat_sum_t&#39;vc.0.14.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="map_add_mat_sum_t&#39;vc.0.14.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="map_add_mat_sum_t&#39;vc.0.14.1.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(columns (f @ (injo @ e)))" arg2="(s_columns  s&#39; f)">
       <goal name="map_add_mat_sum_t&#39;vc.0.14.1.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="(mem  ( (injo @ e&#39;)) s&#39;)">
        <goal name="map_add_mat_sum_t&#39;vc.0.14.1.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="10"><result status="valid" time="1.55" steps="488686"/></proof>
        </goal>
        <goal name="map_add_mat_sum_t&#39;vc.0.14.1.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="1.03" steps="411915"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="map_add_mat_sum_t&#39;vc.0.14.1.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="10"><result status="valid" time="1.01" steps="411890"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="map_add_mat_sum_t&#39;vc.0.15" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_s_rows">
    <goal name="map_add_mat_sum_t&#39;vc.0.15.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="1.17" steps="431667"/></proof>
    </goal>
    <goal name="map_add_mat_sum_t&#39;vc.0.15.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="goal_comm">
     <goal name="map_add_mat_sum_t&#39;vc.0.15.1.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_s_rows">
      <goal name="map_add_mat_sum_t&#39;vc.0.15.1.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.20" steps="431667"/></proof>
      </goal>
      <goal name="map_add_mat_sum_t&#39;vc.0.15.1.0.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="map_add_mat_sum_t&#39;vc.0.15.1.0.1.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="1.22" steps="434447"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="map_add_mat_sum_t&#39;vc.0.16" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_s_columns">
    <goal name="map_add_mat_sum_t&#39;vc.0.16.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="1.32" steps="431870"/></proof>
    </goal>
    <goal name="map_add_mat_sum_t&#39;vc.0.16.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="goal_comm">
     <goal name="map_add_mat_sum_t&#39;vc.0.16.1.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_s_columns">
      <goal name="map_add_mat_sum_t&#39;vc.0.16.1.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.19" steps="431870"/></proof>
      </goal>
      <goal name="map_add_mat_sum_t&#39;vc.0.16.1.0.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="map_add_mat_sum_t&#39;vc.0.16.1.0.1.0" expl="apply premises" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="map_add_mat_sum_t&#39;vc.0.16.1.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="1.35" steps="491615"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="map_add_mat_sum_t&#39;vc.0.17" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.47" steps="390379"/></proof>
   </goal>
   <goal name="map_add_mat_sum_t&#39;vc.0.18" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.48" steps="394185"/></proof>
   </goal>
   <goal name="map_add_mat_sum_t&#39;vc.0.19" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="map_add_mat_sum_t&#39;vc.0.19.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="map_add_mat_sum_t&#39;vc.0.19.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="map_add_mat_sum_t&#39;vc.0.19.0.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="0.92" steps="417468"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="map_add_mat_sum_t&#39;vc.0.19.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="map_add_mat_sum_t&#39;vc.0.19.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="map_add_mat_sum_t&#39;vc.0.19.1.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.10" steps="417468"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="map_add_mat_sum_t&#39;vc.0.20" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.49" steps="394711"/></proof>
   </goal>
   <goal name="map_add_mat_sum_t&#39;vc.0.21" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.50" steps="398366"/></proof>
   </goal>
   <goal name="map_add_mat_sum_t&#39;vc.0.22" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="map_add_mat_sum_t&#39;vc.0.22.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="map_add_mat_sum_t&#39;vc.0.22.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="map_add_mat_sum_t&#39;vc.0.22.0.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.11" steps="420845"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="map_add_mat_sum_t&#39;vc.0.22.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="map_add_mat_sum_t&#39;vc.0.22.1.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(rows ((fun (a1:a) -&gt; f @ (injz @ a1)) @ e))" arg2="(s_rows s&#39; f)">
      <goal name="map_add_mat_sum_t&#39;vc.0.22.1.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="map_add_mat_sum_t&#39;vc.0.22.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="1.09" steps="420845"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="map_add_mat_sum_t&#39;vc.0.22.1.0.1" expl="equality hypothesis" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="map_add_mat_sum_t&#39;vc.0.22.1.0.1.0" expl="equality hypothesis" proved="true">
       <proof prover="10"><result status="valid" time="1.11" steps="419854"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="map_add_mat_sum_t&#39;vc.0.23" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.49" steps="398882"/></proof>
   </goal>
   <goal name="map_add_mat_sum_t&#39;vc.0.24" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.49" steps="398433"/></proof>
   </goal>
   <goal name="map_add_mat_sum_t&#39;vc.0.25" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.48" steps="398436"/></proof>
   </goal>
   <goal name="map_add_mat_sum_t&#39;vc.0.26" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.50" steps="398439"/></proof>
   </goal>
   <goal name="map_add_mat_sum_t&#39;vc.0.27" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.14" steps="437366"/></proof>
   </goal>
   <goal name="map_add_mat_sum_t&#39;vc.0.28" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.15" steps="437428"/></proof>
   </goal>
   <goal name="map_add_mat_sum_t&#39;vc.0.29" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="( mat_sum s (fun (e:a) -&gt; add_mat (f @ (injz @ e)) (f @ (injo @ e))))" arg2="(mat_sum s
  (fun (k:a) -&gt;
    add_mat ((fun (e:a) -&gt; f @ (injz @ e)) @ k)
    ((fun (e:a) -&gt; f @ (injo @ e)) @ k)))">
    <goal name="map_add_mat_sum_t&#39;vc.0.29.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures3">
     <goal name="map_add_mat_sum_t&#39;vc.0.29.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(mat_sum s (fun (e:a) -&gt; f @ (injz @ e)))" arg2="(mat_sum (map injz s) f)
">
      <goal name="map_add_mat_sum_t&#39;vc.0.29.0.0.0" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="(mat_sum s (fun (e:a) -&gt; f @ (injo @ e)))" arg2="(mat_sum (map injo s) f)
">
       <goal name="map_add_mat_sum_t&#39;vc.0.29.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="10"><result status="valid" time="0.62" steps="398458"/></proof>
       </goal>
       <goal name="map_add_mat_sum_t&#39;vc.0.29.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="rewrite" proved="true" arg1="Ensures2">
        <goal name="map_add_mat_sum_t&#39;vc.0.29.0.0.0.1.0" expl="equality hypothesis" proved="true">
        <transf name="compute_specified" proved="true" >
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="map_add_mat_sum_t&#39;vc.0.29.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="rewrite" proved="true" arg1="Ensures1">
       <goal name="map_add_mat_sum_t&#39;vc.0.29.0.0.1.0" expl="equality hypothesis" proved="true">
       <transf name="compute_specified" proved="true" >
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="map_add_mat_sum_t&#39;vc.0.29.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="mat_sum_eq">
     <goal name="map_add_mat_sum_t&#39;vc.0.29.1.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.51" steps="398460"/></proof>
     </goal>
     <goal name="map_add_mat_sum_t&#39;vc.0.29.1.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="map_add_mat_sum_t&#39;vc.0.29.1.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="map_add_mat_sum_t&#39;vc.0.29.1.1.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="map_add_mat_sum_t&#39;vc.0.29.1.1.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="add_rows">
         <goal name="map_add_mat_sum_t&#39;vc.0.29.1.1.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="add_rows">
          <goal name="map_add_mat_sum_t&#39;vc.0.29.1.1.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="0.95" steps="420944"/></proof>
          </goal>
          <goal name="map_add_mat_sum_t&#39;vc.0.29.1.1.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="0.94" steps="420828"/></proof>
          </goal>
          <goal name="map_add_mat_sum_t&#39;vc.0.29.1.1.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="0.90" steps="420828"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="map_add_mat_sum_t&#39;vc.0.29.1.1.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="1.10" steps="420828"/></proof>
         </goal>
         <goal name="map_add_mat_sum_t&#39;vc.0.29.1.1.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="1.10" steps="420828"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="map_add_mat_sum_t&#39;vc.0.29.1.1.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="map_add_mat_sum_t&#39;vc.0.29.1.1.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="map_add_mat_sum_t&#39;vc.0.29.1.1.1.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="add_columns">
         <goal name="map_add_mat_sum_t&#39;vc.0.29.1.1.1.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="add_columns">
          <goal name="map_add_mat_sum_t&#39;vc.0.29.1.1.1.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="1.11" steps="420944"/></proof>
          </goal>
          <goal name="map_add_mat_sum_t&#39;vc.0.29.1.1.1.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="0.90" steps="420828"/></proof>
          </goal>
          <goal name="map_add_mat_sum_t&#39;vc.0.29.1.1.1.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="1.12" steps="420828"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="map_add_mat_sum_t&#39;vc.0.29.1.1.1.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.90" steps="420828"/></proof>
         </goal>
         <goal name="map_add_mat_sum_t&#39;vc.0.29.1.1.1.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.92" steps="420828"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="map_add_mat_sum_t&#39;vc.0.29.1.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="map_add_mat_sum_t&#39;vc.0.29.1.2.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.54" steps="502435"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="map_add_mat_sum&#39;vc" expl="VC for map_add_mat_sum" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="map_add_mat_sum&#39;vc.0" expl="VC for map_add_mat_sum" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="map_add_mat_sum&#39;vc.0.0" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="map_add_mat_sum&#39;vc.0.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="map_add_mat_sum&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="map_add_mat_sum&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.21" steps="372976"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="map_add_mat_sum&#39;vc.0.0.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="map_add_mat_sum&#39;vc.0.0.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="map_add_mat_sum&#39;vc.0.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.26" steps="373054"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="map_add_mat_sum&#39;vc.0.1" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="set_s_rows">
    <goal name="map_add_mat_sum&#39;vc.0.1.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="map_add_mat_sum&#39;vc.0.1.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="map_add_mat_sum&#39;vc.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="map_add_mat_sum&#39;vc.0.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="add_rows">
        <goal name="map_add_mat_sum&#39;vc.0.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="add_rows">
         <goal name="map_add_mat_sum&#39;vc.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="0.91" steps="348675"/></proof>
         </goal>
         <goal name="map_add_mat_sum&#39;vc.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.86" steps="349995"/></proof>
         </goal>
         <goal name="map_add_mat_sum&#39;vc.0.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.86" steps="349996"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="map_add_mat_sum&#39;vc.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.86" steps="349995"/></proof>
        </goal>
        <goal name="map_add_mat_sum&#39;vc.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.86" steps="349996"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="map_add_mat_sum&#39;vc.0.1.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="map_add_mat_sum&#39;vc.0.1.0.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="map_add_mat_sum&#39;vc.0.1.0.1.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="add_columns">
        <goal name="map_add_mat_sum&#39;vc.0.1.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="add_columns">
         <goal name="map_add_mat_sum&#39;vc.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="0.87" steps="348674"/></proof>
         </goal>
         <goal name="map_add_mat_sum&#39;vc.0.1.0.1.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.88" steps="349995"/></proof>
         </goal>
         <goal name="map_add_mat_sum&#39;vc.0.1.0.1.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.91" steps="349996"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="map_add_mat_sum&#39;vc.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.86" steps="349995"/></proof>
        </goal>
        <goal name="map_add_mat_sum&#39;vc.0.1.0.1.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.88" steps="349996"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="map_add_mat_sum&#39;vc.0.1.1" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="map_add_mat_sum&#39;vc.0.1.1.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.96" steps="336830"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="map_add_mat_sum&#39;vc.0.2" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="set_s_columns">
    <goal name="map_add_mat_sum&#39;vc.0.2.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="map_add_mat_sum&#39;vc.0.2.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="map_add_mat_sum&#39;vc.0.2.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="map_add_mat_sum&#39;vc.0.2.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="add_rows">
        <goal name="map_add_mat_sum&#39;vc.0.2.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="add_rows">
         <goal name="map_add_mat_sum&#39;vc.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="0.86" steps="348761"/></proof>
         </goal>
         <goal name="map_add_mat_sum&#39;vc.0.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.85" steps="350081"/></proof>
         </goal>
         <goal name="map_add_mat_sum&#39;vc.0.2.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.87" steps="350082"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="map_add_mat_sum&#39;vc.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.86" steps="350081"/></proof>
        </goal>
        <goal name="map_add_mat_sum&#39;vc.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.65" steps="350082"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="map_add_mat_sum&#39;vc.0.2.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="map_add_mat_sum&#39;vc.0.2.0.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="map_add_mat_sum&#39;vc.0.2.0.1.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="add_columns">
        <goal name="map_add_mat_sum&#39;vc.0.2.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="add_columns">
         <goal name="map_add_mat_sum&#39;vc.0.2.0.1.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="0.85" steps="348760"/></proof>
         </goal>
         <goal name="map_add_mat_sum&#39;vc.0.2.0.1.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.85" steps="350081"/></proof>
         </goal>
         <goal name="map_add_mat_sum&#39;vc.0.2.0.1.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.86" steps="350082"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="map_add_mat_sum&#39;vc.0.2.0.1.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.86" steps="350081"/></proof>
        </goal>
        <goal name="map_add_mat_sum&#39;vc.0.2.0.1.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.67" steps="350082"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="map_add_mat_sum&#39;vc.0.2.1" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="map_add_mat_sum&#39;vc.0.2.1.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.99" steps="337043"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="map_add_mat_sum&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.35" steps="292746"/></proof>
   </goal>
   <goal name="map_add_mat_sum&#39;vc.0.4" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.33" steps="292749"/></proof>
   </goal>
   <goal name="map_add_mat_sum&#39;vc.0.5" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.33" steps="292752"/></proof>
   </goal>
   <goal name="map_add_mat_sum&#39;vc.0.6" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.77" steps="329853"/></proof>
   </goal>
   <goal name="map_add_mat_sum&#39;vc.0.7" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.26" steps="426719"/></proof>
   </goal>
   <goal name="map_add_mat_sum&#39;vc.0.8" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.34" steps="294795"/></proof>
   </goal>
   <goal name="map_add_mat_sum&#39;vc.0.9" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="map_add_mat_sum&#39;vc.0.9.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="map_add_mat_sum&#39;vc.0.9.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="1.46" steps="465196"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="map_add_mat_sum&#39;vc.0.9.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="map_add_mat_sum&#39;vc.0.9.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="map_add_mat_sum&#39;vc.0.9.1.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="0.88" steps="352095"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="map_add_mat_sum&#39;vc.0.10" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.35" steps="294868"/></proof>
   </goal>
   <goal name="map_add_mat_sum&#39;vc.0.11" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.55" steps="348937"/></proof>
   </goal>
   <goal name="map_add_mat_sum&#39;vc.0.12" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="map_add_mat_sum&#39;vc.0.12.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="map_add_mat_sum&#39;vc.0.12.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="1.82" steps="526358"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="map_add_mat_sum&#39;vc.0.12.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="map_add_mat_sum&#39;vc.0.12.1.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="1.80" steps="526373"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="map_add_mat_sum&#39;vc.0.13" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.42" steps="348996"/></proof>
   </goal>
   <goal name="map_add_mat_sum&#39;vc.0.14" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.60" steps="483037"/></proof>
   </goal>
   <goal name="map_add_mat_sum&#39;vc.0.15" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="map_add_mat_sum&#39;vc.0.15.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="map_add_mat_sum&#39;vc.0.15.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="map_add_mat_sum&#39;vc.0.15.0.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="0.85" steps="405892"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="map_add_mat_sum&#39;vc.0.15.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="map_add_mat_sum&#39;vc.0.15.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="map_add_mat_sum&#39;vc.0.15.1.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.13" steps="405898"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="map_add_mat_sum&#39;vc.0.16" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.42" steps="349083"/></proof>
   </goal>
   <goal name="map_add_mat_sum&#39;vc.0.17" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.15" steps="389580"/></proof>
   </goal>
   <goal name="map_add_mat_sum&#39;vc.0.18" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="map_add_mat_sum&#39;vc.0.18.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="map_add_mat_sum&#39;vc.0.18.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="map_add_mat_sum&#39;vc.0.18.0.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_definition" proved="true" >
       <goal name="map_add_mat_sum&#39;vc.0.18.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="1.46" steps="433262"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="map_add_mat_sum&#39;vc.0.18.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="map_add_mat_sum&#39;vc.0.18.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="map_add_mat_sum&#39;vc.0.18.1.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_definition" proved="true" >
       <goal name="map_add_mat_sum&#39;vc.0.18.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="1.49" steps="433310"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="map_add_mat_sum&#39;vc.0.19" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_injective">
    <goal name="map_add_mat_sum&#39;vc.0.19.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="map_add_mat_sum&#39;vc.0.19.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="(mem e s&#39;)">
      <goal name="map_add_mat_sum&#39;vc.0.19.0.0.0" expl="asserted formula" proved="true">
      <proof prover="10"><result status="valid" time="1.07" steps="400879"/></proof>
      </goal>
      <goal name="map_add_mat_sum&#39;vc.0.19.0.0.1" expl="apply premises" proved="true">
      <transf name="eliminate_definition" proved="true" >
       <goal name="map_add_mat_sum&#39;vc.0.19.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="6.02" steps="1507880"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="map_add_mat_sum&#39;vc.0.20" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.31" steps="486742"/></proof>
   </goal>
   <goal name="map_add_mat_sum&#39;vc.0.21" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="map_add_mat_sum&#39;vc.0.21.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="map_add_mat_sum&#39;vc.0.21.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="map_add_mat_sum&#39;vc.0.21.0.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_definition" proved="true" >
       <goal name="map_add_mat_sum&#39;vc.0.21.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="1.39" steps="433488"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="map_add_mat_sum&#39;vc.0.21.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="map_add_mat_sum&#39;vc.0.21.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="map_add_mat_sum&#39;vc.0.21.1.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_definition" proved="true" >
       <goal name="map_add_mat_sum&#39;vc.0.21.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="1.36" steps="433536"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="map_add_mat_sum&#39;vc.0.22" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_injective">
    <goal name="map_add_mat_sum&#39;vc.0.22.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="map_add_mat_sum&#39;vc.0.22.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="(mem e s&#39;)">
      <goal name="map_add_mat_sum&#39;vc.0.22.0.0.0" expl="asserted formula" proved="true">
      <proof prover="10"><result status="valid" time="0.98" steps="400950"/></proof>
      </goal>
      <goal name="map_add_mat_sum&#39;vc.0.22.0.0.1" expl="apply premises" proved="true">
      <transf name="eliminate_definition" proved="true" >
       <goal name="map_add_mat_sum&#39;vc.0.22.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="6.27" steps="1507987"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="map_add_mat_sum&#39;vc.0.23" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.41" steps="349218"/></proof>
   </goal>
   <goal name="map_add_mat_sum&#39;vc.0.24" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.45" steps="349221"/></proof>
   </goal>
   <goal name="map_add_mat_sum&#39;vc.0.25" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.42" steps="349224"/></proof>
   </goal>
   <goal name="map_add_mat_sum&#39;vc.0.26" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.43" steps="349227"/></proof>
   </goal>
   <goal name="map_add_mat_sum&#39;vc.0.27" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.45" steps="349232"/></proof>
   </goal>
   <goal name="map_add_mat_sum&#39;vc.0.28" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="map_add_mat_sum&#39;vc.0.28.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures">
     <goal name="map_add_mat_sum&#39;vc.0.28.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures4">
      <goal name="map_add_mat_sum&#39;vc.0.28.0.0.0" expl="assertion" proved="true">
      <transf name="rewrite" proved="true" arg1="Ensures5">
       <goal name="map_add_mat_sum&#39;vc.0.28.0.0.0.0" expl="assertion" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="map_add_mat_sum&#39;vc.0.28.0.0.0.0.0" expl="assertion" proved="true">
        <proof prover="10"><result status="valid" time="0.42" steps="349306"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="map_add_mat_sum&#39;vc.0.28.1" expl="assertion" proved="true">
    <proof prover="10"><result status="valid" time="0.93" steps="368551"/></proof>
    </goal>
    <goal name="map_add_mat_sum&#39;vc.0.28.2" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures1">
     <goal name="map_add_mat_sum&#39;vc.0.28.2.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures2">
      <goal name="map_add_mat_sum&#39;vc.0.28.2.0.0" expl="assertion" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="map_add_mat_sum&#39;vc.0.28.2.0.0.0" expl="assertion" proved="true">
       <proof prover="10"><result status="valid" time="0.43" steps="349308"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="map_add_mat_sum&#39;vc.0.29" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="map_add_mat_sum&#39;vc.0.29.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(mat_sum s&#39; (fun (e:a) -&gt; h @ e))" arg2="(add_mat (mat_sum (map h s1) (fun (y0:matrix complex) -&gt; p_id y0))
  (mat_sum (map h s2) (fun (y0:matrix complex) -&gt; p_id y0)))
">
     <goal name="map_add_mat_sum&#39;vc.0.29.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Assert2">
      <goal name="map_add_mat_sum&#39;vc.0.29.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="Assert1">
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="map_add_mat_sum&#39;vc.0.29.0.1" expl="equality hypothesis" proved="true">
     <proof prover="10"><result status="valid" time="0.59" steps="390763"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Mat_sums_comp" proved="true">
 <goal name="mat_sum_sum_cartesian_product_pre&#39;vc" expl="VC for mat_sum_sum_cartesian_product_pre" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0" expl="VC for mat_sum_sum_cartesian_product_pre" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="1.17" steps="455977"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.0.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.0.1.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.96" steps="455977"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.56" steps="434044"/></proof>
   </goal>
   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.56" steps="432531"/></proof>
   </goal>
   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.3" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.3.0" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="1.85" steps="595019"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.4" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.4.0" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="1.91" steps="618383"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.5" expl="precondition" proved="true">
   <transf name="compute_hyp" proved="true" >
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.5.0" expl="precondition" proved="true">
    <transf name="eliminate_if" proved="true" >
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.5.0.0" expl="VC for mat_sum_sum_cartesian_product_pre" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.5.0.0.0" expl="precondition" proved="true">
      <transf name="apply" proved="true" arg1="rows_mat_sum">
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.5.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="1.48" steps="600466"/></proof>
       </goal>
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.5.0.0.0.1" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.5.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.5.0.0.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="1.57" steps="602185"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.5.0.0.0.1.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.5.0.0.0.1.1.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="1.59" steps="602185"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.5.0.0.0.2" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.5.0.0.0.2.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="goal_comm">
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.5.0.0.0.2.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="rows_mat_sum">
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.5.0.0.0.2.0.0.0" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="1.53" steps="600479"/></proof>
          </goal>
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.5.0.0.0.2.0.0.1" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="set_constant_size">
           <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.5.0.0.0.2.0.0.1.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.5.0.0.0.2.0.0.1.0.0" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="1.54" steps="602451"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.5.0.0.0.2.0.0.1.1" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.5.0.0.0.2.0.0.1.1.0" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="1.57" steps="602451"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.5.0.0.0.2.0.0.2" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.5.0.0.0.2.0.0.2.0" expl="apply premises" proved="true">
           <proof prover="10"><result status="valid" time="1.57" steps="602238"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.5.0.0.1" expl="precondition" proved="true">
      <transf name="apply" proved="true" arg1="rows_mat_sum">
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.5.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.92" steps="574222"/></proof>
       </goal>
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.5.0.0.1.1" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.74" steps="576289"/></proof>
       </goal>
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.5.0.0.1.2" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.91" steps="574420"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.5.0.0.2" expl="precondition" proved="true">
      <proof prover="10"><result status="valid" time="0.77" steps="582374"/></proof>
      </goal>
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.5.0.0.3" expl="precondition" proved="true">
      <proof prover="10"><result status="valid" time="0.93" steps="574218"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.6" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.6.0" expl="precondition" proved="true">
    <transf name="eliminate_if" proved="true" >
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.6.0.0" expl="VC for mat_sum_sum_cartesian_product_pre" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.6.0.0.0" expl="precondition" proved="true">
      <transf name="apply" proved="true" arg1="columns_mat_sum">
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.6.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="1.50" steps="626133"/></proof>
       </goal>
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.6.0.0.0.1" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.6.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.6.0.0.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="1.62" steps="627849"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.6.0.0.0.1.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.6.0.0.0.1.1.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="1.64" steps="627849"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.6.0.0.0.2" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.6.0.0.0.2.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="goal_comm">
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.6.0.0.0.2.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="columns_mat_sum">
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.6.0.0.0.2.0.0.0" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="1.57" steps="626146"/></proof>
          </goal>
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.6.0.0.0.2.0.0.1" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="set_constant_size">
           <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.6.0.0.0.2.0.0.1.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.6.0.0.0.2.0.0.1.0.0" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="1.65" steps="628115"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.6.0.0.0.2.0.0.1.1" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.6.0.0.0.2.0.0.1.1.0" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="1.66" steps="628115"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.6.0.0.0.2.0.0.2" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="1.65" steps="627956"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.6.0.0.1" expl="precondition" proved="true">
      <transf name="apply" proved="true" arg1="columns_mat_sum">
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.6.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.96" steps="599184"/></proof>
       </goal>
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.6.0.0.1.1" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.98" steps="601251"/></proof>
       </goal>
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.6.0.0.1.2" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.96" steps="599366"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.6.0.0.2" expl="precondition" proved="true">
      <proof prover="10"><result status="valid" time="1.02" steps="607302"/></proof>
      </goal>
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.6.0.0.3" expl="precondition" proved="true">
      <proof prover="10"><result status="valid" time="0.95" steps="599180"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.7" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.7.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.7.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="1.98" steps="649219"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.7.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.7.1.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="1.94" steps="649045"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.8" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.91" steps="597473"/></proof>
   </goal>
   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.9" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="rows_mat_sum">
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.9.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.9.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.9.0.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.9.0.0.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.9.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="1.56" steps="635649"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.9.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.9.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.9.1.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="2.00" steps="658374"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.9.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.9.1.1.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.99" steps="658091"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.9.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.9.2.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.9.2.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.9.2.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.9.2.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="rows_mat_sum">
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.9.2.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="1.60" steps="635666"/></proof>
         </goal>
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.9.2.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_constant_size">
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.9.2.0.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.9.2.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="10"><result status="valid" time="1.38" steps="637359"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.9.2.0.0.0.0.1.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.9.2.0.0.0.0.1.1.0" expl="apply premises" proved="true">
           <proof prover="10"><result status="valid" time="1.66" steps="637359"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.9.2.0.0.0.0.2" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.9.2.0.0.0.0.2.0" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="1.63" steps="636076"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.9.2.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="1.00" steps="608554"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.10" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.10.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.10.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="2.09" steps="658887"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.10.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.10.1.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="2.10" steps="658724"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.11" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.75" steps="604605"/></proof>
   </goal>
   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.12" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="columns_mat_sum">
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.12.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.12.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.12.0.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.12.0.0.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.12.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="1.55" steps="637542"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.12.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.12.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.12.1.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="2.01" steps="661096"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.12.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.12.1.1.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="2.03" steps="660926"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.12.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.12.2.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.12.2.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.12.2.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.12.2.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="columns_mat_sum">
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.12.2.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="1.60" steps="637559"/></proof>
         </goal>
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.12.2.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_constant_size">
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.12.2.0.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.12.2.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="10"><result status="valid" time="1.66" steps="639288"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.12.2.0.0.0.0.1.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.12.2.0.0.0.0.1.1.0" expl="apply premises" proved="true">
           <proof prover="10"><result status="valid" time="1.62" steps="639260"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.12.2.0.0.0.0.2" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.12.2.0.0.0.0.2.0" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="1.64" steps="637969"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.12.2.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="0.96" steps="609880"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.13" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.13.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.13.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.13.0.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.13.0.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.13.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="2.00" steps="673626"/></proof>
        </goal>
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.13.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="0.76" steps="617928"/></proof>
        </goal>
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.13.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="0.93" steps="617928"/></proof>
        </goal>
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.13.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="0.81" steps="609909"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.13.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.13.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.13.1.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.13.1.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.13.1.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="2.14" steps="673302"/></proof>
        </goal>
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.13.1.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="1.00" steps="617928"/></proof>
        </goal>
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.13.1.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="0.98" steps="617928"/></proof>
        </goal>
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.13.1.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="1.00" steps="609909"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.14" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.14.0" expl="precondition" proved="true">
    <transf name="eliminate_if" proved="true" >
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.14.0.0" expl="VC for mat_sum_sum_cartesian_product_pre" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.14.0.0.0" expl="precondition" proved="true">
      <transf name="apply" proved="true" arg1="columns_mat_sum">
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.14.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="1.72" steps="639985"/></proof>
       </goal>
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.14.0.0.0.1" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.14.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.14.0.0.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="1.82" steps="641856"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.14.0.0.0.1.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.14.0.0.0.1.1.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="1.71" steps="641856"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.14.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="1.70" steps="640476"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.14.0.0.1" expl="precondition" proved="true">
      <proof prover="10"><result status="valid" time="1.95" steps="665324"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.15" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.15.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.15.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="1.73" steps="662072"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.15.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.15.1.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="2.00" steps="661805"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.16" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.16.0" expl="precondition" proved="true">
    <transf name="eliminate_if" proved="true" >
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.16.0.0" expl="VC for mat_sum_sum_cartesian_product_pre" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.16.0.0.0" expl="precondition" proved="true">
      <transf name="apply" proved="true" arg1="rows_mat_sum">
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.16.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="1.62" steps="640177"/></proof>
       </goal>
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.16.0.0.0.1" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.16.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.16.0.0.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="1.69" steps="642048"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.16.0.0.0.1.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.16.0.0.0.1.1.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="1.71" steps="642048"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.16.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="1.77" steps="640668"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.16.0.0.1" expl="precondition" proved="true">
      <proof prover="10"><result status="valid" time="2.15" steps="665708"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.17" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.17.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.17.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.17.0.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="2.23" steps="670452"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.17.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.17.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.17.1.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="2.17" steps="670201"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.18" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.81" steps="605709"/></proof>
   </goal>
   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.19" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="rows_mat_sum">
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.19.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.19.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.19.0.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.19.0.0.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.19.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="1.41" steps="639807"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.19.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.19.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.19.1.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.79" steps="664796"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.19.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.19.1.1.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="2.02" steps="664537"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.19.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.19.2.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.19.2.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.19.2.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.19.2.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="rows_mat_sum">
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.19.2.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="1.71" steps="639824"/></proof>
         </goal>
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.19.2.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_constant_size">
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.19.2.0.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.19.2.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="10"><result status="valid" time="1.76" steps="641561"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.19.2.0.0.0.0.1.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.19.2.0.0.0.0.1.1.0" expl="apply premises" proved="true">
           <proof prover="10"><result status="valid" time="1.73" steps="641561"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.19.2.0.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="1.63" steps="640315"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.19.2.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="0.97" steps="611490"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(columns
  (mat_sum s1
   (fun (a1:a) -&gt; if mem a1 s1 then mat_sum s2 (f @ a1) else make r c c_zero)))" arg2="c">
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.0" expl="precondition" proved="true">
    <transf name="replace" proved="true" arg1="(columns
    (mat_sum (cartesian_product s1 s2)
     (fun (o:(a, b)) -&gt; (f @ fir o) @ sec o)))" arg2="c">
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.0.0" expl="precondition" proved="true">
     <proof prover="10"><result status="valid" time="0.95" steps="606528"/></proof>
     </goal>
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="columns_mat_sum">
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.0.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.0.1.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="0.11" steps="689"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.0.1.1" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_constant_size">
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.0.1.1.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.0.1.1.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.0.1.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="2.01" steps="665689"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.0.1.1.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.0.1.1.1.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.0.1.1.1.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="1.98" steps="665556"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.0.1.2" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.0.1.2.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.0.1.2.0.0" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="1.91" steps="663041"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="columns_mat_sum">
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.1.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.1.0.0.0" expl="apply premises" proved="true">
       <transf name="eliminate_if" proved="true" >
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.1.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="1.70" steps="640003"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.1.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.1.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.1.1.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="2.13" steps="665271"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.1.1.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.1.1.1.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="2.16" steps="665104"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.1.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.1.2.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.1.2.0.0" expl="apply premises" proved="true">
       <transf name="eliminate_if" proved="true" >
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.1.2.0.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.1.2.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="columns_mat_sum">
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.1.2.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="1.48" steps="640020"/></proof>
          </goal>
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.1.2.0.0.0.0.1" expl="apply premises" proved="true">
          <transf name="instantiate" proved="true" arg1="set_constant_size_give" arg2="s2,(f e),r,c">
           <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.1.2.0.0.0.0.1.0" expl="apply premises" proved="true">
           <transf name="split_all_full" proved="true" >
            <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.1.2.0.0.0.0.1.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="Hinst4">
             <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.1.2.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
             <proof prover="10"><result status="valid" time="1.14" steps="698238"/></proof>
             </goal>
             <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.1.2.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
             <proof prover="10"><result status="valid" time="1.83" steps="730408"/></proof>
             </goal>
             <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.1.2.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
             <proof prover="10"><result status="valid" time="1.94" steps="730487"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.1.2.0.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="1.78" steps="640511"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.20.1.2.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="1.02" steps="611636"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.21" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.21.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.21.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.21.0.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="2.05" steps="665045"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.21.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.21.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.21.1.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="2.02" steps="664808"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.22" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.10" steps="676"/></proof>
   </goal>
   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.23" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.23.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.23.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="2.17" steps="674110"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.23.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.23.1.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="2.24" steps="674007"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.24" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.77" steps="613861"/></proof>
   </goal>
   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.25" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(rows
  (mat_sum s1
   (fun (a1:a) -&gt; if mem a1 s1 then mat_sum s2 (f @ a1) else make r c c_zero)))" arg2="r">
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.25.0" expl="precondition" proved="true">
    <transf name="replace" proved="true" arg1="(rows
    (mat_sum (cartesian_product s1 s2)
     (fun (o:(a, b)) -&gt;
       (f @ match o with
        | x, _ -&gt; x
        end) @ match o with
       | _, y -&gt; y
       end))
)" arg2="r">
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.25.0.0" expl="precondition" proved="true">
     <proof prover="10"><result status="valid" time="0.78" steps="614580"/></proof>
     </goal>
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.25.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="rows_mat_sum">
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.25.0.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.25.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="0.10" steps="735"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.25.0.1.1" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_constant_size">
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.25.0.1.1.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.25.0.1.1.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.25.0.1.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="2.09" steps="676677"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.25.0.1.1.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.25.0.1.1.1.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.25.0.1.1.1.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="2.12" steps="676601"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.25.0.1.2" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.25.0.1.2.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.25.0.1.2.0.0" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="1.75" steps="673409"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.25.1" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures3">
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.25.1.0" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="set_s_rows">
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.25.1.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.75" steps="670849"/></proof>
      </goal>
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.25.1.0.1" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="4.08" steps="1392492"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="columns_mat_sum">
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26.0.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26.0.0.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="1.35" steps="649288"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26.1.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.79" steps="679000"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26.1.1.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.73" steps="678812"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26.2.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26.2.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26.2.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26.2.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="columns_mat_sum">
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26.2.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="1.34" steps="649305"/></proof>
         </goal>
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26.2.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_constant_size">
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26.2.0.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26.2.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="10"><result status="valid" time="1.37" steps="651042"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26.2.0.0.0.0.1.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26.2.0.0.0.0.1.1.0" expl="apply premises" proved="true">
           <proof prover="10"><result status="valid" time="1.40" steps="651042"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26.2.0.0.0.0.2" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26.2.0.0.0.0.2.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="goal_comm">
           <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26.2.0.0.0.0.2.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="columns_mat_sum">
            <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26.2.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
            <proof prover="9"><result status="valid" time="0.10" steps="801"/></proof>
            </goal>
            <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26.2.0.0.0.0.2.0.0.1" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="set_constant_size">
             <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26.2.0.0.0.0.2.0.0.1.0" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26.2.0.0.0.0.2.0.0.1.0.0" expl="apply premises" proved="true">
              <proof prover="10"><result status="valid" time="1.91" steps="685473"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26.2.0.0.0.0.2.0.0.1.1" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26.2.0.0.0.0.2.0.0.1.1.0" expl="apply premises" proved="true">
              <proof prover="10"><result status="valid" time="2.54" steps="1033761"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26.2.0.0.0.0.2.0.0.2" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26.2.0.0.0.0.2.0.0.2.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26.2.0.0.0.0.2.0.0.2.0.0" expl="apply premises" proved="true">
              <proof prover="10"><result status="valid" time="1.79" steps="681321"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.26.2.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="0.82" steps="620394"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(0&lt;= i &lt; r)">
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.0" expl="asserted formula" proved="true">
    <proof prover="10"><result status="valid" time="4.68" steps="1408589"/></proof>
    </goal>
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(0 &lt;= j &lt; c)">
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.0" expl="asserted formula" proved="true">
     <transf name="instantiate" proved="true" arg1="Ensures11" arg2="i,j">
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="Hinst">
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="4.92" steps="1477624"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1" expl="precondition" proved="true">
     <transf name="rewrite" proved="true" arg1="mat_sum_to_sum_pre">
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0" expl="precondition" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_to_sum_pre">
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0" expl="precondition" proved="true">
       <transf name="instantiate" proved="true" arg1="sum_from_cartesian_product" arg2="s1,s2,(fun a b -&gt; get (f a b) i j)">
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0" expl="precondition" proved="true">
        <transf name="replace" proved="true" arg1="(sum (cartesian_product s1 s2)
    (fun (e:(a, b)) -&gt;
      get
      ((fun (o:(a, b)) -&gt;
         (f @ match o with
          | x, _ -&gt; x
          end) @ match o with
         | _, y -&gt; y
         end)
       @ e)
      i j))" arg2="(sum (cartesian_product s1 s2)
  (fun (o:(a, b)) -&gt;
    ((fun (a1:a) (b1:b) -&gt; get ((f @ a1) @ b1) i j) @ fir o) @ sec o))">
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0" expl="precondition" proved="true">
         <transf name="rewrite" proved="true" arg1="Hinst">
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0" expl="precondition" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0" expl="precondition" proved="true">
           <transf name="apply" proved="true" arg1="sum_eq">
            <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="eliminate_if" proved="true" >
               <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="mat_sum_to_sum_pre">
                 <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="compute_specified" proved="true" >
                 </transf>
                 </goal>
                 <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                 <transf name="replace" proved="true" arg1="(s_columns s2 (f @ x))" arg2="c">
                  <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                  <transf name="apply" proved="true" arg1="set_constant_size">
                   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                    <proof prover="10"><result status="valid" time="1.59" steps="652122"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
                    <proof prover="10"><result status="valid" time="1.70" steps="652122"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
                  <transf name="apply" proved="true" arg1="set_s_columns">
                   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                   <transf name="apply" proved="true" arg1="set_constant_size">
                    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
                     <proof prover="10"><result status="valid" time="1.73" steps="652122"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.1.1.0.1" expl="apply premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.1.1.0.1.0" expl="apply premises" proved="true">
                     <proof prover="10"><result status="valid" time="1.61" steps="652122"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.1.1.1" expl="apply premises" proved="true">
                   <proof prover="10"><result status="valid" time="1.98" steps="684222"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                 <transf name="replace" proved="true" arg1="(s_rows s2 (f @ x))" arg2="r">
                  <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
                  <proof prover="10"><result status="valid" time="0.77" steps="621057"/></proof>
                  </goal>
                  <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.2.1" expl="equality hypothesis" proved="true">
                  <transf name="apply" proved="true" arg1="set_s_rows">
                   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.2.1.0" expl="apply premises" proved="true">
                   <transf name="apply" proved="true" arg1="set_constant_size">
                    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.2.1.0.0" expl="apply premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.2.1.0.0.0" expl="apply premises" proved="true">
                     <proof prover="10"><result status="valid" time="1.33" steps="652122"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.2.1.0.1" expl="apply premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.2.1.0.1.0" expl="apply premises" proved="true">
                     <proof prover="10"><result status="valid" time="1.38" steps="652122"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.2.1.1" expl="apply premises" proved="true">
                   <proof prover="10"><result status="valid" time="1.66" steps="684250"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.3.0" expl="rewrite premises" proved="true">
                  <proof prover="10"><result status="valid" time="0.92" steps="621055"/></proof>
                  </goal>
                  <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.3.1" expl="rewrite premises" proved="true">
                  <transf name="replace" proved="true" arg1="(s_rows s2 (f @ x) )" arg2="r">
                   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.3.1.0" expl="rewrite premises" proved="true">
                   <proof prover="10"><result status="valid" time="0.94" steps="621057"/></proof>
                   </goal>
                   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.3.1.1" expl="equality hypothesis" proved="true">
                   <transf name="apply" proved="true" arg1="set_s_rows">
                    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.3.1.1.0" expl="apply premises" proved="true">
                    <transf name="apply" proved="true" arg1="set_constant_size">
                     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.3.1.1.0.0" expl="apply premises" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.3.1.1.0.0.0" expl="apply premises" proved="true">
                      <proof prover="10"><result status="valid" time="1.56" steps="652122"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.3.1.1.0.1" expl="apply premises" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.3.1.1.0.1.0" expl="apply premises" proved="true">
                      <proof prover="10"><result status="valid" time="1.64" steps="652122"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.3.1.1.1" expl="apply premises" proved="true">
                    <proof prover="10"><result status="valid" time="2.06" steps="684250"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.4" expl="rewrite premises" proved="true">
                 <transf name="replace" proved="true" arg1="(s_columns s2 (f @ x) )" arg2="c">
                  <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.4.0" expl="rewrite premises" proved="true">
                  <proof prover="10"><result status="valid" time="1.02" steps="621055"/></proof>
                  </goal>
                  <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.4.1" expl="equality hypothesis" proved="true">
                  <transf name="apply" proved="true" arg1="set_s_columns">
                   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.4.1.0" expl="apply premises" proved="true">
                   <transf name="instantiate" proved="true" arg1="set_constant_size_give" arg2="s2,(f x),r,c">
                    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.4.1.0.0" expl="apply premises" proved="true">
                    <transf name="split_all_full" proved="true" >
                     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.4.1.0.0.0" expl="apply premises" proved="true">
                     <transf name="apply" proved="true" arg1="Hinst4">
                      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.4.1.0.0.0.0" expl="apply premises" proved="true">
                      <proof prover="10"><result status="valid" time="1.13" steps="710620"/></proof>
                      </goal>
                      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.4.1.0.0.0.1" expl="apply premises" proved="true">
                      <proof prover="10"><result status="valid" time="1.93" steps="743352"/></proof>
                      </goal>
                      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.4.1.0.0.0.2" expl="apply premises" proved="true">
                      <proof prover="10"><result status="valid" time="1.95" steps="743431"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.4.1.1" expl="apply premises" proved="true">
                   <proof prover="10"><result status="valid" time="1.96" steps="684222"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                <proof prover="10"><result status="valid" time="0.91" steps="642988"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.0.0.1" expl="equality hypothesis" proved="true">
         <transf name="compute_hyp" proved="true" >
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.1" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.1.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="2.21" steps="681946"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.1.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.1.1.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="2.55" steps="825750"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.2" expl="rewrite premises" proved="true">
       <proof prover="9"><result status="valid" time="0.10" steps="774"/></proof>
       </goal>
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.3" expl="rewrite premises" proved="true">
       <transf name="replace" proved="true" arg1="(s_rows (cartesian_product s1 s2)
    (fun (o:(a, b)) -&gt;
      (f @ match o with
       | x, _ -&gt; x
       end) @ match o with
      | _, y -&gt; y
      end))" arg2="r">
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.3.0" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.76" steps="615093"/></proof>
        </goal>
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.3.1" expl="equality hypothesis" proved="true">
        <transf name="replace" proved="true" arg1="( s_rows (cartesian_product s1 s2)
    (fun (o:(a, b)) -&gt;
      (f @ match o with
       | x, _ -&gt; x
       end) @ match o with
      | _, y -&gt; y
      end))" arg2="(rows
  (mat_sum (cartesian_product s1 s2)
   (fun (o:(a, b)) -&gt;
     (f @ match o with
      | x, _ -&gt; x
      end) @ match o with
     | _, y -&gt; y
     end)))">
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.3.1.0" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="rows_mat_sum">
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.3.1.0.0" expl="apply premises" proved="true">
          <proof prover="9"><result status="valid" time="0.09" steps="784"/></proof>
          </goal>
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.3.1.0.1" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="1.96" steps="673846"/></proof>
          </goal>
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.3.1.0.2" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="1.89" steps="679457"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.3.1.1" expl="equality hypothesis" proved="true">
         <proof prover="10"><result status="valid" time="4.38" steps="1407731"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.4" expl="rewrite premises" proved="true">
       <transf name="replace" proved="true" arg1="(s_columns (cartesian_product s1 s2)
    (fun (o:(a, b)) -&gt;
      (f @ match o with
       | x, _ -&gt; x
       end) @ match o with
      | _, y -&gt; y
      end))" arg2="c">
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.4.0" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.82" steps="615093"/></proof>
        </goal>
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.4.1" expl="equality hypothesis" proved="true">
        <transf name="replace" proved="true" arg1="( s_columns (cartesian_product s1 s2)
    (fun (o:(a, b)) -&gt;
      (f @ match o with
       | x, _ -&gt; x
       end) @ match o with
      | _, y -&gt; y
      end))" arg2="(columns
  (mat_sum (cartesian_product s1 s2)
   (fun (o:(a, b)) -&gt;
     (f @ match o with
      | x, _ -&gt; x
      end) @ match o with
     | _, y -&gt; y
     end)))">
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.4.1.0" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="columns_mat_sum">
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.4.1.0.0" expl="apply premises" proved="true">
          <proof prover="9"><result status="valid" time="0.11" steps="784"/></proof>
          </goal>
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.4.1.0.1" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="1.90" steps="673846"/></proof>
          </goal>
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.4.1.0.2" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="2.07" steps="679461"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.4.1.1" expl="equality hypothesis" proved="true">
         <transf name="rewrite" proved="true" arg1="Ensures6">
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.0.4.1.1.0" expl="equality hypothesis" proved="true">
          <transf name="compute_specified" proved="true" >
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.1" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="set_constant_size">
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.1.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.1.0.0" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="2.08" steps="680918"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.1.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.1.1.0" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="2.06" steps="680738"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.2" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.82" steps="615095"/></proof>
      </goal>
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3" expl="rewrite premises" proved="true">
      <transf name="replace" proved="true" arg1="(s_rows (cartesian_product s1 s2)
    (fun (o:(a, b)) -&gt; (f @ fir o) @ sec o))" arg2="r">
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.0" expl="rewrite premises" proved="true">
       <transf name="replace" proved="true" arg1="(s_rows s1
    (fun (a1:a) -&gt; if mem a1 s1 then mat_sum s2 (f @ a1) else make r c c_zero))" arg2="r">
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.0.0" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.87" steps="615093"/></proof>
        </goal>
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.0.1" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="set_s_rows">
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.0.1.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_constant_size">
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.0.1.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.0.1.0.0.0" expl="apply premises" proved="true">
           <proof prover="10"><result status="valid" time="2.10" steps="680918"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.0.1.0.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.0.1.0.1.0" expl="apply premises" proved="true">
           <proof prover="10"><result status="valid" time="2.04" steps="680738"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.0.1.1" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.0.1.1.0" expl="apply premises" proved="true">
          <transf name="eliminate_if" proved="true" >
           <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.0.1.1.0.0" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.0.1.1.0.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="rows_mat_sum">
             <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.0.1.1.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="10"><result status="valid" time="1.65" steps="651838"/></proof>
             </goal>
             <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.0.1.1.0.0.0.1" expl="apply premises" proved="true">
             <transf name="instantiate" proved="true" arg1="set_constant_size_give" arg2="s2,(f (choose s1)),r,c">
              <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.0.1.1.0.0.0.1.0" expl="apply premises" proved="true">
              <transf name="split_all_full" proved="true" >
               <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.0.1.1.0.0.0.1.0.0" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="Hinst4">
                <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.0.1.1.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                <proof prover="10"><result status="valid" time="0.96" steps="712121"/></proof>
                </goal>
                <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.0.1.1.0.0.0.1.0.0.1" expl="apply premises" proved="true">
                <proof prover="10"><result status="valid" time="1.93" steps="744901"/></proof>
                </goal>
                <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.0.1.1.0.0.0.1.0.0.2" expl="apply premises" proved="true">
                <proof prover="10"><result status="valid" time="1.97" steps="744980"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.0.1.1.0.0.0.2" expl="apply premises" proved="true">
             <proof prover="10"><result status="valid" time="1.41" steps="652343"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.0.1.1.0.0.1" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="1.78" steps="680278"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="set_s_rows">
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.1.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.1.0.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.1.0.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.1.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="10"><result status="valid" time="1.73" steps="681237"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.1.0.1" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.1.0.1.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.1.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="10"><result status="valid" time="1.77" steps="681084"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.1.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.1.1.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="Requires5">
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.1.1.0.0" expl="apply premises" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.1.1.0.0.0" expl="apply premises" proved="true">
           <transf name="instantiate" proved="true" arg1="cartesian_product&#39;spec2" arg2="s1,s2,(choose (cartesian_product s1 s2))">
            <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.1.1.0.0.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="Hinst">
             <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.1.1.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="9"><result status="valid" time="0.75" steps="23807"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.1.1.0.1" expl="apply premises" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.1.1.0.1.0" expl="apply premises" proved="true">
           <transf name="instantiate" proved="true" arg1="cartesian_product&#39;spec1" arg2="s1,s2,(choose (cartesian_product s1 s2))">
            <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.1.1.0.1.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="Hinst">
             <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.3.1.1.0.1.0.0.0" expl="apply premises" proved="true">
             <proof prover="9"><result status="valid" time="0.74" steps="23807"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.4" expl="rewrite premises" proved="true">
      <transf name="replace" proved="true" arg1="(s_columns s1
    (fun (a1:a) -&gt; if mem a1 s1 then mat_sum s2 (f @ a1) else make r c c_zero))" arg2="c">
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.4.0" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.83" steps="615093"/></proof>
       </goal>
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.4.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="set_s_columns">
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.4.1.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.4.1.0.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.4.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="1.68" steps="680918"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.4.1.0.1" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.4.1.0.1.0" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="1.73" steps="680738"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.4.1.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.4.1.1.0" expl="apply premises" proved="true">
         <transf name="eliminate_if" proved="true" >
          <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.4.1.1.0.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.4.1.1.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="columns_mat_sum">
            <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.4.1.1.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="1.32" steps="651838"/></proof>
            </goal>
            <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.4.1.1.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="3.16" steps="1288658"/></proof>
            </goal>
            <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.4.1.1.0.0.0.2" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="1.40" steps="652343"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.27.1.1.4.1.1.0.0.1" expl="apply premises" proved="true">
           <proof prover="10"><result status="valid" time="1.74" steps="680250"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.28" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="mat_sum_eq">
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.28.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.78" steps="614739"/></proof>
    </goal>
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.28.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.28.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.28.1.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="2.14" steps="676524"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.28.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.28.1.1.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="2.09" steps="676289"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.28.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.28.2.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.28.2.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.28.2.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.28.2.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="1.00" steps="620191"/></proof>
        </goal>
        <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.28.2.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="0.80" steps="628060"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.29" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="( mat_sum s1 (fun (a1:a) -&gt; mat_sum s2 (f @ a1)))" arg2="(mat_sum s1
  (fun (a1:a) -&gt; if mem a1 s1 then mat_sum s2 (f @ a1) else make r c c_zero))">
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.29.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures">
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.29.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="mat_sum_eq">
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.29.0.0.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.07" steps="753"/></proof>
      </goal>
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.29.0.0.1" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="2.04" steps="670777"/></proof>
      </goal>
      <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.29.0.0.2" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.78" steps="671618"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.29.1" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="Assert">
     <goal name="mat_sum_sum_cartesian_product_pre&#39;vc.0.29.1.0" expl="equality hypothesis" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Matrix_decomp" proved="true">
 <goal name="ind_basis_mat&#39;vc" expl="VC for ind_basis_mat" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="ind_basis_mat&#39;vc.0" expl="VC for ind_basis_mat" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ind_basis_mat&#39;vc.0.0" expl="assertion" proved="true">
   <transf name="assert" proved="true" arg1="(mem o (mat_indices (make_f r c (fun (k:int) (l:int) -&gt; indic_2 k i l j))))">
    <goal name="ind_basis_mat&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <proof prover="10"><result status="valid" time="1.20" steps="407187"/></proof>
    </goal>
    <goal name="ind_basis_mat&#39;vc.0.0.1" expl="assertion" proved="true">
    <transf name="replace" proved="true" arg1="(match o with
   | x, _ -&gt; x
   end)" arg2="(fir o)">
     <goal name="ind_basis_mat&#39;vc.0.0.1.0" expl="assertion" proved="true">
     <transf name="replace" proved="true" arg1="(match o with
         | _, y -&gt; y
         end )" arg2="(sec o)">
      <goal name="ind_basis_mat&#39;vc.0.0.1.0.0" expl="assertion" proved="true">
      <proof prover="10"><result status="valid" time="1.19" steps="408972"/></proof>
      </goal>
      <goal name="ind_basis_mat&#39;vc.0.0.1.0.1" expl="equality hypothesis" proved="true">
      <proof prover="10"><result status="valid" time="2.29" steps="794864"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="ind_basis_mat&#39;vc.0.0.1.1" expl="equality hypothesis" proved="true">
     <proof prover="10"><result status="valid" time="2.25" steps="794961"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ind_basis_mat&#39;vc.0.1" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="ind_basis_mat&#39;vc.0.1.0" expl="assertion" proved="true">
    <transf name="assert" proved="true" arg1="((fun (x:(int, int)) -&gt;
     eq_t
     (get (make_f r c (fun (k:int) (l:int) -&gt; indic_2 k i l j)) (fir x)
      (sec x))
     c_one) o)">
     <goal name="ind_basis_mat&#39;vc.0.1.0.0" expl="asserted formula" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="ind_basis_mat&#39;vc.0.1.0.0.0" expl="asserted formula" proved="true">
      <transf name="rewrite" proved="true" arg1="assert_make">
       <goal name="ind_basis_mat&#39;vc.0.1.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="ind_basis_mat&#39;vc.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="((fun (x:(int, int)) -&gt;
     eq_t
     (get (make_f r c (fun (k:int) (l:int) -&gt; indic_2 k i l j)) (fir x)
      (sec x))
     c_one)o)">
         <goal name="ind_basis_mat&#39;vc.0.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="instantiate" proved="true" arg1="in_my_filter_filter" arg2="(mat_indices (make_f r c (fun (k:int) (l:int) -&gt; indic_2 k i l j))),(fun (x:(int, int)) -&gt;
     eq_t
     (get (make_f r c (fun (k:int) (l:int) -&gt; indic_2 k i l j)) (fir x)
      (sec x))
     c_one),o">
          <goal name="ind_basis_mat&#39;vc.0.1.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="Hinst">
           <goal name="ind_basis_mat&#39;vc.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="(fun (x:(int, int)) -&gt;
     eq_t
     (get (make_f r c (fun (k:int) (l:int) -&gt; indic_2 k i l j))
    (  match x with
      | x1, _ -&gt; x1
      end) (match x with
      | _, y -&gt; y
      end))
     c_one)" arg2="(fun (x:(int, int)) -&gt;
     eq_t
     (get (make_f r c (fun (k:int) (l:int) -&gt; indic_2 k i l j)) (fir x)
      (sec x))
     c_one)" arg3="in" arg4="H">
            <goal name="ind_basis_mat&#39;vc.0.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="H">
            </transf>
            </goal>
            <goal name="ind_basis_mat&#39;vc.0.1.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
            <transf name="apply" proved="true" arg1="set_equal_func">
             <goal name="ind_basis_mat&#39;vc.0.1.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="ind_basis_mat&#39;vc.0.1.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="ind_basis_mat&#39;vc.0.1.0.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
               <transf name="replace" proved="true" arg1="( match e with
       | x1, _ -&gt; x1
       end )" arg2="(fir e)">
                <goal name="ind_basis_mat&#39;vc.0.1.0.0.0.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                <transf name="replace" proved="true" arg1="(match e with
       | _, y -&gt; y
       end)" arg2="(sec e)">
                 <goal name="ind_basis_mat&#39;vc.0.1.0.0.0.0.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                 <proof prover="10"><result status="valid" time="2.70" steps="858607"/></proof>
                 </goal>
                 <goal name="ind_basis_mat&#39;vc.0.1.0.0.0.0.0.0.0.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
                 <proof prover="10"><result status="valid" time="1.07" steps="410273"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="ind_basis_mat&#39;vc.0.1.0.0.0.0.0.0.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
                <proof prover="10"><result status="valid" time="1.21" steps="410310"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="ind_basis_mat&#39;vc.0.1.0.0.0.0.0.1" expl="asserted formula" proved="true">
         <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="h1">
          <goal name="ind_basis_mat&#39;vc.0.1.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
          <proof prover="10"><result status="valid" time="2.36" steps="816998"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="ind_basis_mat&#39;vc.0.1.0.0.0.1" expl="rewrite premises" proved="true">
       <transf name="assert" proved="true" arg1="(mem o (mat_indices (make_f r c (fun (k:int) (l:int) -&gt; indic_2 k i l j))))">
        <goal name="ind_basis_mat&#39;vc.0.1.0.0.0.1.0" expl="asserted formula" proved="true">
        <proof prover="10"><result status="valid" time="1.01" steps="407771"/></proof>
        </goal>
        <goal name="ind_basis_mat&#39;vc.0.1.0.0.0.1.1" expl="rewrite premises" proved="true">
        <transf name="eliminate_definition" proved="true" >
         <goal name="ind_basis_mat&#39;vc.0.1.0.0.0.1.1.0" expl="rewrite premises" proved="true">
         <transf name="rewrite" proved="true" arg1="mat_indices&#39;def" arg2="in" arg3="h">
          <goal name="ind_basis_mat&#39;vc.0.1.0.0.0.1.1.0.0" expl="rewrite premises" proved="true">
          <transf name="assert" proved="true" arg1="(mem (fir o) (to_fset 0 (rows (make_f r c (fun (k:int) (l:int) -&gt; indic_2 k i l j)))))
">
           <goal name="ind_basis_mat&#39;vc.0.1.0.0.0.1.1.0.0.0" expl="asserted formula" proved="true">
           <proof prover="10"><result status="valid" time="1.34" steps="492523"/></proof>
           </goal>
           <goal name="ind_basis_mat&#39;vc.0.1.0.0.0.1.1.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="10"><result status="valid" time="1.35" steps="414956"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="ind_basis_mat&#39;vc.0.1.0.0.0.2" expl="rewrite premises" proved="true">
       <transf name="assert" proved="true" arg1="(mem o (mat_indices (make_f r c (fun (k:int) (l:int) -&gt; indic_2 k i l j))))">
        <goal name="ind_basis_mat&#39;vc.0.1.0.0.0.2.0" expl="asserted formula" proved="true">
        <proof prover="10"><result status="valid" time="1.05" steps="407771"/></proof>
        </goal>
        <goal name="ind_basis_mat&#39;vc.0.1.0.0.0.2.1" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="ind_basis_mat&#39;vc.0.1.0.0.0.2.1.0" proved="true">
         <proof prover="10"><result status="valid" time="1.01" steps="409479"/></proof>
         </goal>
         <goal name="ind_basis_mat&#39;vc.0.1.0.0.0.2.1.1" proved="true">
         <proof prover="10"><result status="valid" time="1.24" steps="409537"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ind_basis_mat&#39;vc.0.1.0.1" expl="assertion" proved="true">
     <transf name="assert" proved="true" arg1="(indic_2 (fir o) i (sec o) j = c_one)">
      <goal name="ind_basis_mat&#39;vc.0.1.0.1.0" expl="asserted formula" proved="true">
      <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="h1">
       <goal name="ind_basis_mat&#39;vc.0.1.0.1.0.0" expl="asserted formula" proved="true">
       <proof prover="10"><result status="valid" time="2.39" steps="816998"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="ind_basis_mat&#39;vc.0.1.0.1.1" expl="assertion" proved="true">
      <proof prover="10"><result status="valid" time="1.21" steps="469256"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="ind_basis_mat&#39;vc.0.1.1" expl="assertion" proved="true">
    <transf name="apply" proved="true" arg1="in_my_filter">
     <goal name="ind_basis_mat&#39;vc.0.1.1.0" expl="apply premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="ind_basis_mat&#39;vc.0.1.1.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="mat_indices&#39;spec2">
       <goal name="ind_basis_mat&#39;vc.0.1.1.0.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="ind_basis_mat&#39;vc.0.1.1.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="1.14" steps="448110"/></proof>
        </goal>
        <goal name="ind_basis_mat&#39;vc.0.1.1.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="1.36" steps="467079"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="ind_basis_mat&#39;vc.0.1.1.0.0.1" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="1.41" steps="467156"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ind_basis_mat&#39;vc.0.1.1.1" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="ind_basis_mat&#39;vc.0.1.1.1.0" expl="apply premises" proved="true">
      <transf name="eliminate_definition" proved="true" >
       <goal name="ind_basis_mat&#39;vc.0.1.1.1.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="eq_t&#39;def">
        <goal name="ind_basis_mat&#39;vc.0.1.1.1.0.0.0" proved="true">
        <transf name="rewrite" proved="true" arg1="assert_make">
         <goal name="ind_basis_mat&#39;vc.0.1.1.1.0.0.0.0" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="ind_basis_mat&#39;vc.0.1.1.1.0.0.0.0.0" proved="true">
          <proof prover="10"><result status="valid" time="1.03" steps="409166"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="ind_basis_mat&#39;vc.0.1.1.1.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.88" steps="393418"/></proof>
         </goal>
         <goal name="ind_basis_mat&#39;vc.0.1.1.1.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="1.04" steps="393418"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ind_basis_mat&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.96" steps="391406"/></proof>
   </goal>
   <goal name="ind_basis_mat&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.96" steps="391427"/></proof>
   </goal>
   <goal name="ind_basis_mat&#39;vc.0.4" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.99" steps="391404"/></proof>
   </goal>
   <goal name="ind_basis_mat&#39;vc.0.5" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.99" steps="391425"/></proof>
   </goal>
   <goal name="ind_basis_mat&#39;vc.0.6" expl="precondition" proved="true">
   <transf name="exists" proved="true" arg1="(i,j)">
    <goal name="ind_basis_mat&#39;vc.0.6.0" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="ind_basis_mat&#39;vc.0.6.0.0" proved="true">
     <transf name="apply" proved="true" arg1="Ensures2">
      <goal name="ind_basis_mat&#39;vc.0.6.0.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.46" steps="488499"/></proof>
      </goal>
      <goal name="ind_basis_mat&#39;vc.0.6.0.0.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="ind_basis_mat&#39;vc.0.6.0.0.1.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="assert_make">
        <goal name="ind_basis_mat&#39;vc.0.6.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="ind_basis_mat&#39;vc.0.6.0.0.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="1.40" steps="488202"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="ind_basis_mat&#39;vc.0.6.0.0.1.0.1" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.56" steps="446448"/></proof>
        </goal>
        <goal name="ind_basis_mat&#39;vc.0.6.0.0.1.0.2" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.61" steps="446448"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ind_basis_mat&#39;vc.0.7" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.88" steps="410018"/></proof>
   </goal>
   <goal name="ind_basis_mat&#39;vc.0.8" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.83" steps="410039"/></proof>
   </goal>
   <goal name="ind_basis_mat&#39;vc.0.9" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.84" steps="410016"/></proof>
   </goal>
   <goal name="ind_basis_mat&#39;vc.0.10" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.82" steps="410037"/></proof>
   </goal>
   <goal name="ind_basis_mat&#39;vc.0.11" expl="precondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="ind_basis_mat&#39;vc.0.11.0" expl="VC for ind_basis_mat" proved="true">
    <transf name="instantiate" proved="true" arg1="Ensures1" arg2="b">
     <goal name="ind_basis_mat&#39;vc.0.11.0.0" expl="VC for ind_basis_mat" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ind_basis_mat&#39;vc.0.11.0.0.0" expl="VC for ind_basis_mat" proved="true">
      <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
       <goal name="ind_basis_mat&#39;vc.0.11.0.0.0.0" expl="VC for ind_basis_mat" proved="true">
       <transf name="assert" proved="true" arg1="(eq_t
  (get (make_f r c (fun (k:int) (l:int) -&gt; indic_2 k i l j)) (fir b) (sec b))
  c_one)">
        <goal name="ind_basis_mat&#39;vc.0.11.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="replace" proved="true" arg1="( match b with
   | x, _ -&gt; x
   end)" arg2="(fir b)" arg3="in" arg4="Hinst">
         <goal name="ind_basis_mat&#39;vc.0.11.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="replace" proved="true" arg1="(match b with
   | _, y -&gt; y
   end)" arg2="(sec b)" arg3="in" arg4="Hinst">
          <goal name="ind_basis_mat&#39;vc.0.11.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="Hinst">
           <goal name="ind_basis_mat&#39;vc.0.11.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="10"><result status="valid" time="3.05" steps="962343"/></proof>
           </goal>
           <goal name="ind_basis_mat&#39;vc.0.11.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="H">
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="ind_basis_mat&#39;vc.0.11.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="10"><result status="valid" time="1.25" steps="506128"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="ind_basis_mat&#39;vc.0.11.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="10"><result status="valid" time="1.50" steps="506281"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="ind_basis_mat&#39;vc.0.11.0.0.0.0.1" expl="VC for ind_basis_mat" proved="true">
        <transf name="rewrite" proved="true" arg1="assert_make" arg2="in" arg3="h">
         <goal name="ind_basis_mat&#39;vc.0.11.0.0.0.0.1.0" expl="VC for ind_basis_mat" proved="true">
         <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="h">
          <goal name="ind_basis_mat&#39;vc.0.11.0.0.0.0.1.0.0" expl="VC for ind_basis_mat" proved="true">
          <proof prover="10"><result status="valid" time="1.73" steps="554839"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="ind_basis_mat&#39;vc.0.11.0.0.0.0.1.1" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="3.46" steps="1021551"/></proof>
         </goal>
         <goal name="ind_basis_mat&#39;vc.0.11.0.0.0.0.1.2" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="3.36" steps="1021601"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="ind_basis_mat&#39;vc.0.11.1" expl="VC for ind_basis_mat" proved="true">
    <transf name="instantiate" proved="true" arg1="Ensures2" arg2="b">
     <goal name="ind_basis_mat&#39;vc.0.11.1.0" expl="VC for ind_basis_mat" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ind_basis_mat&#39;vc.0.11.1.0.0" expl="VC for ind_basis_mat" proved="true">
      <transf name="apply" proved="true" arg1="Hinst">
       <goal name="ind_basis_mat&#39;vc.0.11.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="1.44" steps="501632"/></proof>
       </goal>
       <goal name="ind_basis_mat&#39;vc.0.11.1.0.0.1" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="ind_basis_mat&#39;vc.0.11.1.0.0.1.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="assert_make">
         <goal name="ind_basis_mat&#39;vc.0.11.1.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="ind_basis_mat&#39;vc.0.11.1.0.0.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="1.51" steps="503620"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="ind_basis_mat&#39;vc.0.11.1.0.0.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="1.23" steps="479165"/></proof>
         </goal>
         <goal name="ind_basis_mat&#39;vc.0.11.1.0.0.1.0.2" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="1.23" steps="479165"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ind_basis_mat&#39;vc.0.12" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.85" steps="413661"/></proof>
   </goal>
   <goal name="ind_basis_mat&#39;vc.0.13" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.89" steps="413682"/></proof>
   </goal>
   <goal name="ind_basis_mat&#39;vc.0.14" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="1.14" steps="436959"/></proof>
   </goal>
   <goal name="ind_basis_mat&#39;vc.0.15" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="1.27" steps="440648"/></proof>
   </goal>
   <goal name="ind_basis_mat&#39;vc.0.16" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="2.97" steps="994522"/></proof>
   </goal>
   <goal name="ind_basis_mat&#39;vc.0.17" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures3">
    <goal name="ind_basis_mat&#39;vc.0.17.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="ind_basis_mat&#39;vc.0.17.0.0" expl="postcondition" proved="true">
     <proof prover="10"><result status="valid" time="1.27" steps="440557"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ind_basis_mat_values&#39;vc" expl="VC for ind_basis_mat_values" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ind_basis_mat_values&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.21" steps="782491"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="unic_ind_basis_mat&#39;vc" expl="VC for unic_ind_basis_mat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="unic_ind_basis_mat&#39;vc.0" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.43" steps="247981"/></proof>
  </goal>
  <goal name="unic_ind_basis_mat&#39;vc.1" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.41" steps="248584"/></proof>
  </goal>
  <goal name="unic_ind_basis_mat&#39;vc.2" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ind_basis_mat_values" arg2="in" arg3="Assert">
   <goal name="unic_ind_basis_mat&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ind_basis_mat_values" arg2="in" arg3="Assert">
    <goal name="unic_ind_basis_mat&#39;vc.2.0.0" expl="postcondition" proved="true">
    <proof prover="10"><result status="valid" time="0.53" steps="263682"/></proof>
    </goal>
    <goal name="unic_ind_basis_mat&#39;vc.2.0.1" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.27" steps="233297"/></proof>
    </goal>
    <goal name="unic_ind_basis_mat&#39;vc.2.0.2" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.27" steps="233297"/></proof>
    </goal>
    <goal name="unic_ind_basis_mat&#39;vc.2.0.3" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.24" steps="233297"/></proof>
    </goal>
    <goal name="unic_ind_basis_mat&#39;vc.2.0.4" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.25" steps="233297"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="unic_ind_basis_mat&#39;vc.2.1" expl="rewrite premises" proved="true">
   <proof prover="10"><result status="valid" time="0.27" steps="232894"/></proof>
   </goal>
   <goal name="unic_ind_basis_mat&#39;vc.2.2" expl="rewrite premises" proved="true">
   <proof prover="10"><result status="valid" time="0.28" steps="232894"/></proof>
   </goal>
   <goal name="unic_ind_basis_mat&#39;vc.2.3" expl="rewrite premises" proved="true">
   <proof prover="10"><result status="valid" time="0.26" steps="232894"/></proof>
   </goal>
   <goal name="unic_ind_basis_mat&#39;vc.2.4" expl="rewrite premises" proved="true">
   <proof prover="10"><result status="valid" time="0.27" steps="232894"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="basis_mat&#39;vc" expl="VC for basis_mat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="basis_mat&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="basis_mat&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.95" steps="413093"/></proof>
   </goal>
   <goal name="basis_mat&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.97" steps="413092"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="basis_mat&#39;vc.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="basis_mat&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.79" steps="413104"/></proof>
   </goal>
   <goal name="basis_mat&#39;vc.1.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.94" steps="413101"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="basis_mat&#39;vc.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="basis_mat&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.47" steps="392245"/></proof>
   </goal>
   <goal name="basis_mat&#39;vc.2.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.47" steps="392245"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="basis_mat&#39;vc.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="basis_mat&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (o:(int, int)) -&gt;
    match o with
    | i, j -&gt;
        if (0 &lt;= i /\ i &lt; r) /\ 0 &lt;= j /\ j &lt; c then ind_basis_mat i j r c
        else make r c c_zero
    end),(cartesian_product (to_fset 0 r) (to_fset 0 c)),m">
    <goal name="basis_mat&#39;vc.3.0.0" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="basis_mat&#39;vc.3.0.0.0" expl="destruct premise" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="basis_mat&#39;vc.3.0.0.0.0" expl="destruct premise" proved="true">
      <transf name="rewrite" proved="true" arg1="result&#39;def" arg2="in" arg3="H">
       <goal name="basis_mat&#39;vc.3.0.0.0.0.0" expl="destruct premise" proved="true">
       <proof prover="10"><result status="valid" time="1.55" steps="551209"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="basis_mat&#39;vc.3.0.0.1" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="basis_mat&#39;vc.3.0.0.1.0" expl="postcondition" proved="true">
      <transf name="exists" proved="true" arg1="(fir a)">
       <goal name="basis_mat&#39;vc.3.0.0.1.0.0" proved="true">
       <transf name="exists" proved="true" arg1="(sec a)">
        <goal name="basis_mat&#39;vc.3.0.0.1.0.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="basis_mat&#39;vc.3.0.0.1.0.0.0.0" proved="true">
         <proof prover="10"><result status="valid" time="3.21" steps="1089436"/></proof>
         </goal>
         <goal name="basis_mat&#39;vc.3.0.0.1.0.0.0.1" proved="true">
         <proof prover="10"><result status="valid" time="3.37" steps="1089538"/></proof>
         </goal>
         <goal name="basis_mat&#39;vc.3.0.0.1.0.0.0.2" proved="true">
         <proof prover="10"><result status="valid" time="4.01" steps="1089662"/></proof>
         </goal>
         <goal name="basis_mat&#39;vc.3.0.0.1.0.0.0.3" proved="true">
         <proof prover="10"><result status="valid" time="3.94" steps="1089457"/></proof>
         </goal>
         <goal name="basis_mat&#39;vc.3.0.0.1.0.0.0.4" proved="true">
         <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
          <goal name="basis_mat&#39;vc.3.0.0.1.0.0.0.4.0" proved="true">
          <proof prover="10"><result status="valid" time="1.75" steps="552743"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="basis_mat&#39;vc.3.1" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="basis_mat&#39;vc.3.1.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="result&#39;def">
     <goal name="basis_mat&#39;vc.3.1.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="set_map_mem">
      <goal name="basis_mat&#39;vc.3.1.0.0.0" expl="apply premises" proved="true">
      <transf name="exists" proved="true" arg1="(i,j)">
       <goal name="basis_mat&#39;vc.3.1.0.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="basis_mat&#39;vc.3.1.0.0.0.0.0" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="basis_mat&#39;vc.3.1.0.0.0.0.0.0" proved="true">
         <transf name="apply" proved="true" arg1="Ensures">
          <goal name="basis_mat&#39;vc.3.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="basis_mat&#39;vc.3.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="10"><result status="valid" time="1.52" steps="540109"/></proof>
           </goal>
           <goal name="basis_mat&#39;vc.3.1.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="10"><result status="valid" time="1.33" steps="540091"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="basis_mat&#39;vc.3.1.0.0.0.0.1" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="basis_mat&#39;vc.3.1.0.0.0.0.1.0" proved="true">
         <transf name="rewrite" proved="true" arg1="ind_basis_mat&#39;def" arg2="in" arg3="H">
          <goal name="basis_mat&#39;vc.3.1.0.0.0.0.1.0.0" proved="true">
          <transf name="rewrite" proved="true" arg1="H">
           <goal name="basis_mat&#39;vc.3.1.0.0.0.0.1.0.0.0" proved="true">
           <transf name="apply" proved="true" arg1="set_equal_mat">
            <goal name="basis_mat&#39;vc.3.1.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="3.22" steps="960059"/></proof>
            </goal>
            <goal name="basis_mat&#39;vc.3.1.0.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="3.69" steps="959980"/></proof>
            </goal>
            <goal name="basis_mat&#39;vc.3.1.0.0.0.0.1.0.0.0.2" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="basis_mat&#39;vc.3.1.0.0.0.0.1.0.0.0.2.0" expl="apply premises" proved="true">
             <transf name="eliminate_if" proved="true" >
              <goal name="basis_mat&#39;vc.3.1.0.0.0.0.1.0.0.0.2.0.0" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="basis_mat&#39;vc.3.1.0.0.0.0.1.0.0.0.2.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="ind_basis_mat&#39;def">
                <goal name="basis_mat&#39;vc.3.1.0.0.0.0.1.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="10"><result status="valid" time="3.97" steps="1756154"/></proof>
                </goal>
                <goal name="basis_mat&#39;vc.3.1.0.0.0.0.1.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="10"><result status="valid" time="0.63" steps="483662"/></proof>
                </goal>
                <goal name="basis_mat&#39;vc.3.1.0.0.0.0.1.0.0.0.2.0.0.0.2" expl="rewrite premises" proved="true">
                <proof prover="10"><result status="valid" time="0.61" steps="483662"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="basis_mat&#39;vc.3.1.0.0.0.0.1.0.0.0.2.0.0.1" expl="apply premises" proved="true">
               <proof prover="10"><result status="valid" time="0.60" steps="482116"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="basis_mat&#39;vc.3.1.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="0.52" steps="419564"/></proof>
          </goal>
          <goal name="basis_mat&#39;vc.3.1.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="0.55" steps="419564"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="basis_mat&#39;vc.4" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="basis_mat&#39;vc.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="basis_mat&#39;vc.4.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="map_eq">
     <goal name="basis_mat&#39;vc.4.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="basis_mat&#39;vc.4.0.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="basis_mat&#39;vc.4.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="4.10" steps="1064110"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="basis_mat&#39;vc.5" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="basis_mat&#39;vc.5.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="basis_mat&#39;vc.5.0.0" expl="apply premises" proved="true">
    <proof prover="7"><result status="valid" time="0.44" steps="1716177"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="basis_mat&#39;vc.5.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="basis_mat&#39;vc.5.1.0" expl="apply premises" proved="true">
    <proof prover="7"><result status="valid" time="0.43" steps="1716714"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="basis_mat&#39;vc.6" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_s_columns">
   <goal name="basis_mat&#39;vc.6.0" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="basis_mat&#39;vc.6.0.0" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(p_id (choose result))" arg2="(choose result)">
     <goal name="basis_mat&#39;vc.6.0.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.94" steps="536901"/></proof>
     </goal>
     <goal name="basis_mat&#39;vc.6.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="assert" proved="true" arg1="(exists i:int, j:int.
     (0 &lt;= i /\ i &lt; r) &amp;&amp; (0 &lt;= j /\ j &lt; c) &amp;&amp; choose result = ind_basis_mat i j r c)">
      <goal name="basis_mat&#39;vc.6.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="destruct" proved="true" arg1="h">
       <goal name="basis_mat&#39;vc.6.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="basis_mat&#39;vc.6.0.0.1.0.0.0" expl="asserted formula" proved="true">
        <transf name="instantiate" proved="true" arg1="Ensures3" arg2="(choose result)">
         <goal name="basis_mat&#39;vc.6.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="Hinst">
          <goal name="basis_mat&#39;vc.6.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="assert" proved="true" arg1="(not (result = empty))">
           <goal name="basis_mat&#39;vc.6.0.0.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
           <proof prover="0"><result status="valid" time="0.70"/></proof>
           </goal>
           <goal name="basis_mat&#39;vc.6.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="10"><result status="valid" time="4.33" steps="1096965"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="basis_mat&#39;vc.6.0.0.1.1" expl="equality hypothesis" proved="true">
      <proof prover="10"><result status="valid" time="0.83" steps="537088"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="basis_mat&#39;vc.6.1" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="basis_mat&#39;vc.6.1.0" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(p_id (choose result))" arg2="(choose result)">
     <goal name="basis_mat&#39;vc.6.1.0.0" expl="apply premises" proved="true">
     <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (o:(int, int)) -&gt; ind_basis_mat (fir o) (sec o) r c),(cartesian_product (to_fset 0 r) (to_fset 0 c)),(choose result)">
      <goal name="basis_mat&#39;vc.6.1.0.0.0" expl="apply premises" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="basis_mat&#39;vc.6.1.0.0.0.0" expl="destruct premise" proved="true">
       <transf name="replace" proved="true" arg1="(map (fun (o:(int, int)) -&gt; ind_basis_mat (fir o) (sec o) r c)
   (cartesian_product (to_fset 0 r) (to_fset 0 c)))" arg2="result">
        <goal name="basis_mat&#39;vc.6.1.0.0.0.0.0" expl="destruct premise" proved="true">
        <proof prover="0"><result status="valid" time="4.22"/></proof>
        </goal>
        <goal name="basis_mat&#39;vc.6.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="replace" proved="true" arg1="(fun (o:(int, int)) -&gt;
      ind_basis_mat (match o with
      | x, _ -&gt; x
      end) (match o with
      | _, y -&gt; y
      end) r c)" arg2="(fun (o:(int, int)) -&gt; ind_basis_mat (fir o) (sec o) r c)" arg3="in" arg4="Ensures1">
         <goal name="basis_mat&#39;vc.6.1.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
         <proof prover="10"><result status="valid" time="2.02" steps="586174"/></proof>
         </goal>
         <goal name="basis_mat&#39;vc.6.1.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
         <proof prover="10"><result status="valid" time="2.25" steps="654157"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="basis_mat&#39;vc.6.1.0.0.0.1" expl="apply premises" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="basis_mat&#39;vc.6.1.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="basis_mat&#39;vc.6.1.0.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="Hinst">
          <goal name="basis_mat&#39;vc.6.1.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="basis_mat&#39;vc.6.1.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="ind_basis_mat&#39;def">
            <goal name="basis_mat&#39;vc.6.1.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="2.09" steps="741052"/></proof>
            </goal>
            <goal name="basis_mat&#39;vc.6.1.0.0.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="10"><result status="valid" time="3.77" steps="1103665"/></proof>
            </goal>
            <goal name="basis_mat&#39;vc.6.1.0.0.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="10"><result status="valid" time="3.76" steps="1103669"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="basis_mat&#39;vc.6.1.0.1" expl="equality hypothesis" proved="true">
     <proof prover="10"><result status="valid" time="0.71" steps="536899"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="basis_mat&#39;vc.7" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_s_rows">
   <goal name="basis_mat&#39;vc.7.0" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.70" steps="536782"/></proof>
   </goal>
   <goal name="basis_mat&#39;vc.7.1" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="basis_mat&#39;vc.7.1.0" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(p_id (choose result))" arg2="(choose result)">
     <goal name="basis_mat&#39;vc.7.1.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="(mem (choose result )  result)">
      <goal name="basis_mat&#39;vc.7.1.0.0.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="3.82"/></proof>
      </goal>
      <goal name="basis_mat&#39;vc.7.1.0.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="4.48"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="basis_mat&#39;vc.7.1.0.1" expl="equality hypothesis" proved="true">
     <proof prover="10"><result status="valid" time="0.71" steps="536780"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="basis_mat&#39;vc.8" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (o:(int, int)) -&gt; ind_basis_mat (fir o) (sec o) r c),(cartesian_product (to_fset 0 r) (to_fset 0 c)),m">
   <goal name="basis_mat&#39;vc.8.0" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="Hinst">
    <goal name="basis_mat&#39;vc.8.0.0" expl="destruct premise" proved="true">
    <transf name="replace" proved="true" arg1="(fun (o:(int, int)) -&gt;
      ind_basis_mat (match o with
      | x, _ -&gt; x
      end) (match o with
      | _, y -&gt; y
      end) r c)" arg2="(fun (o:(int, int)) -&gt; ind_basis_mat (fir o) (sec o) r c)" arg3="in" arg4="Ensures3">
     <goal name="basis_mat&#39;vc.8.0.0.0" expl="destruct premise" proved="true">
     <proof prover="10"><result status="valid" time="1.53" steps="587060"/></proof>
     </goal>
     <goal name="basis_mat&#39;vc.8.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="10"><result status="valid" time="1.90" steps="662629"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="basis_mat&#39;vc.8.0.1" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="basis_mat&#39;vc.8.0.1.0" expl="postcondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="basis_mat&#39;vc.8.0.1.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="Hinst">
       <goal name="basis_mat&#39;vc.8.0.1.0.0.0" expl="postcondition" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="basis_mat&#39;vc.8.0.1.0.0.0.0" expl="postcondition" proved="true">
        <transf name="instantiate" proved="true" arg1="set_cardone_elt_" arg2="(filter
   (fun (x:(int, int)) -&gt;
     eq_t (get (ind_basis_mat (fir a) (sec a) r c) (fir x) (sec x)) c_one)
   (mat_indices (ind_basis_mat (fir a) (sec a) r c))),a">
         <goal name="basis_mat&#39;vc.8.0.1.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="instantiate" proved="true" arg1="set_cardone_elt_" arg2="(my_filter (mat_indices (ind_basis_mat (fir a) (sec a) r c))
   (fun (x:(int, int)) -&gt;
     eq_t (get (ind_basis_mat (fir a) (sec a) r c) (fir x) (sec x)) c_one)),a">
          <goal name="basis_mat&#39;vc.8.0.1.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="replace" proved="true" arg1="(fun (x:(int, int)) -&gt;
     eq_t
     (get (ind_basis_mat (fir a) (sec a) r c) (match x with
      | x1, _ -&gt; x1
      end) (match x with
      | _, y -&gt; y
      end))
     c_one)" arg2="(fun (x:(int, int)) -&gt;
     eq_t (get (ind_basis_mat (fir a) (sec a) r c) (fir x) (sec x)) c_one)">
           <goal name="basis_mat&#39;vc.8.0.1.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <transf name="apply" proved="true" arg1="Hinst">
            <goal name="basis_mat&#39;vc.8.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="basis_mat&#39;vc.8.0.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="eliminate_definition" proved="true" >
              <goal name="basis_mat&#39;vc.8.0.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="eq_t&#39;def" arg2="in" arg3="H">
               <goal name="basis_mat&#39;vc.8.0.1.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="split_all_full" proved="true" >
                <goal name="basis_mat&#39;vc.8.0.1.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="assert" proved="true" arg1="((fun (x:(int, int)) -&gt;
     get (ind_basis_mat (fir a) (sec a) r c) (fir x) (sec x) = c_one) b)
">
                 <goal name="basis_mat&#39;vc.8.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                 <proof prover="10"><result status="valid" time="2.14" steps="763638"/></proof>
                 </goal>
                 <goal name="basis_mat&#39;vc.8.0.1.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                 <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="h">
                  <goal name="basis_mat&#39;vc.8.0.1.0.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="ind_basis_mat&#39;spec3" arg2="in" arg3="h">
                   <goal name="basis_mat&#39;vc.8.0.1.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                   <proof prover="10"><result status="valid" time="1.98" steps="718042"/></proof>
                   </goal>
                   <goal name="basis_mat&#39;vc.8.0.1.0.0.0.0.0.0.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                   <proof prover="10"><result status="valid" time="4.12" steps="1149655"/></proof>
                   </goal>
                   <goal name="basis_mat&#39;vc.8.0.1.0.0.0.0.0.0.0.0.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
                   <proof prover="10"><result status="valid" time="4.15" steps="1149768"/></proof>
                   </goal>
                   <goal name="basis_mat&#39;vc.8.0.1.0.0.0.0.0.0.0.0.0.0.0.0.1.0.3" expl="rewrite premises" proved="true">
                   <proof prover="10"><result status="valid" time="1.92" steps="722310"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="basis_mat&#39;vc.8.0.1.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
             <transf name="assert" proved="true" arg1="((fun (x:(int, int)) -&gt;
     eq_t (get (ind_basis_mat (fir a) (sec a) r c) (fir x) (sec x)) c_one) b)">
              <goal name="basis_mat&#39;vc.8.0.1.0.0.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="basis_mat&#39;vc.8.0.1.0.0.0.0.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
               <transf name="rewrite" proved="true" arg1="ind_basis_mat&#39;spec3">
                <goal name="basis_mat&#39;vc.8.0.1.0.0.0.0.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
                <proof prover="10"><result status="valid" time="1.77" steps="671974"/></proof>
                </goal>
                <goal name="basis_mat&#39;vc.8.0.1.0.0.0.0.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="10"><result status="valid" time="4.05" steps="1143006"/></proof>
                </goal>
                <goal name="basis_mat&#39;vc.8.0.1.0.0.0.0.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
                <proof prover="10"><result status="valid" time="4.10" steps="1143130"/></proof>
                </goal>
                <goal name="basis_mat&#39;vc.8.0.1.0.0.0.0.0.0.0.0.1.0.0.3" expl="rewrite premises" proved="true">
                <transf name="apply" proved="true" arg1="set_valid_index">
                 <goal name="basis_mat&#39;vc.8.0.1.0.0.0.0.0.0.0.0.1.0.0.3.0" expl="apply premises" proved="true">
                 <proof prover="10"><result status="valid" time="4.13" steps="1145251"/></proof>
                 </goal>
                 <goal name="basis_mat&#39;vc.8.0.1.0.0.0.0.0.0.0.0.1.0.0.3.1" expl="apply premises" proved="true">
                 <proof prover="10"><result status="valid" time="4.17" steps="1145305"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="basis_mat&#39;vc.8.0.1.0.0.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
              <proof prover="10"><result status="valid" time="1.96" steps="740522"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="basis_mat&#39;vc.8.0.1.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="10"><result status="valid" time="2.28" steps="746007"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="basis_mat_indexes&#39;vc" expl="VC for basis_mat_indexes" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="basis_mat_indexes&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="1.19" steps="410779"/></proof>
  </goal>
  <goal name="basis_mat_indexes&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="1.18" steps="410845"/></proof>
  </goal>
  <goal name="basis_mat_indexes&#39;vc.2" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="basis_mat&#39;spec" arg2="(rows m),(columns m)">
   <goal name="basis_mat_indexes&#39;vc.2.0" expl="precondition" proved="true">
   <transf name="destruct" proved="true" arg1="Hinst">
    <goal name="basis_mat_indexes&#39;vc.2.0.0" expl="destruct premise" proved="true">
    <proof prover="10"><result status="valid" time="1.04" steps="442650"/></proof>
    </goal>
    <goal name="basis_mat_indexes&#39;vc.2.0.1" expl="precondition" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="basis_mat_indexes&#39;vc.2.0.1.0" expl="destruct premise" proved="true">
     <proof prover="10"><result status="valid" time="1.06" steps="442650"/></proof>
     </goal>
     <goal name="basis_mat_indexes&#39;vc.2.0.1.1" expl="precondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="basis_mat_indexes&#39;vc.2.0.1.1.0" expl="precondition" proved="true">
      <transf name="instantiate" proved="true" arg1="Hinst6" arg2="m">
       <goal name="basis_mat_indexes&#39;vc.2.0.1.1.0.0" expl="precondition" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="basis_mat_indexes&#39;vc.2.0.1.1.0.0.0" expl="destruct premise" proved="true">
        <proof prover="10"><result status="valid" time="0.61" steps="465043"/></proof>
        </goal>
        <goal name="basis_mat_indexes&#39;vc.2.0.1.1.0.0.1" expl="precondition" proved="true">
        <transf name="destruct" proved="true" arg1="Hinst">
         <goal name="basis_mat_indexes&#39;vc.2.0.1.1.0.0.1.0" expl="precondition" proved="true">
         <transf name="destruct" proved="true" arg1="Hinst">
          <goal name="basis_mat_indexes&#39;vc.2.0.1.1.0.0.1.0.0" expl="precondition" proved="true">
          <transf name="exists" proved="true" arg1="(i,j)">
           <goal name="basis_mat_indexes&#39;vc.2.0.1.1.0.0.1.0.0.0" proved="true">
           <transf name="eliminate_definition" proved="true" >
            <goal name="basis_mat_indexes&#39;vc.2.0.1.1.0.0.1.0.0.0.0" proved="true">
            <transf name="rewrite" proved="true" arg1="fil&#39;def">
             <goal name="basis_mat_indexes&#39;vc.2.0.1.1.0.0.1.0.0.0.0.0" proved="true">
             <transf name="apply" proved="true" arg1="in_my_filter">
              <goal name="basis_mat_indexes&#39;vc.2.0.1.1.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="10"><result status="valid" time="1.25" steps="510716"/></proof>
              </goal>
              <goal name="basis_mat_indexes&#39;vc.2.0.1.1.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
              <transf name="compute_in_goal" proved="true" >
               <goal name="basis_mat_indexes&#39;vc.2.0.1.1.0.0.1.0.0.0.0.0.1.0" expl="apply premises" proved="true">
               <proof prover="10"><result status="valid" time="1.25" steps="510967"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="basis_mat_indexes&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.53" steps="403601"/></proof>
  </goal>
  <goal name="basis_mat_indexes&#39;vc.4" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="basis_mat&#39;spec" arg2="(rows m),(columns m)">
   <goal name="basis_mat_indexes&#39;vc.4.0" expl="precondition" proved="true">
   <transf name="destruct" proved="true" arg1="Hinst">
    <goal name="basis_mat_indexes&#39;vc.4.0.0" expl="destruct premise" proved="true">
    <proof prover="10"><result status="valid" time="1.06" steps="444553"/></proof>
    </goal>
    <goal name="basis_mat_indexes&#39;vc.4.0.1" expl="precondition" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="basis_mat_indexes&#39;vc.4.0.1.0" expl="destruct premise" proved="true">
     <proof prover="10"><result status="valid" time="1.07" steps="444553"/></proof>
     </goal>
     <goal name="basis_mat_indexes&#39;vc.4.0.1.1" expl="precondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="basis_mat_indexes&#39;vc.4.0.1.1.0" expl="precondition" proved="true">
      <transf name="instantiate" proved="true" arg1="Hinst6" arg2="m">
       <goal name="basis_mat_indexes&#39;vc.4.0.1.1.0.0" expl="precondition" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="basis_mat_indexes&#39;vc.4.0.1.1.0.0.0" expl="destruct premise" proved="true">
        <proof prover="10"><result status="valid" time="0.57" steps="467333"/></proof>
        </goal>
        <goal name="basis_mat_indexes&#39;vc.4.0.1.1.0.0.1" expl="precondition" proved="true">
        <transf name="destruct" proved="true" arg1="Hinst">
         <goal name="basis_mat_indexes&#39;vc.4.0.1.1.0.0.1.0" expl="precondition" proved="true">
         <transf name="destruct" proved="true" arg1="Hinst">
          <goal name="basis_mat_indexes&#39;vc.4.0.1.1.0.0.1.0.0" expl="precondition" proved="true">
          <transf name="exists" proved="true" arg1="(i,j)">
           <goal name="basis_mat_indexes&#39;vc.4.0.1.1.0.0.1.0.0.0" proved="true">
           <transf name="intros" proved="true" arg1="b">
            <goal name="basis_mat_indexes&#39;vc.4.0.1.1.0.0.1.0.0.0.0" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="basis_mat_indexes&#39;vc.4.0.1.1.0.0.1.0.0.0.0.0" proved="true">
             <transf name="eliminate_definition" proved="true" >
              <goal name="basis_mat_indexes&#39;vc.4.0.1.1.0.0.1.0.0.0.0.0.0" proved="true">
              <transf name="split_all_full" proved="true" >
               <goal name="basis_mat_indexes&#39;vc.4.0.1.1.0.0.1.0.0.0.0.0.0.0" proved="true">
               <transf name="rewrite" proved="true" arg1="fil&#39;def" arg2="in" arg3="H">
                <goal name="basis_mat_indexes&#39;vc.4.0.1.1.0.0.1.0.0.0.0.0.0.0.0" proved="true">
                <transf name="assert" proved="true" arg1="(mem b (mat_indices m))">
                 <goal name="basis_mat_indexes&#39;vc.4.0.1.1.0.0.1.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                 <transf name="assert" proved="true" arg1="((fun (x:(int, int)) -&gt;
     mem x (mat_indices m) /\
     equal m (ind_basis_mat (fir x) (sec x) (rows m) (columns m))) b)
">
                  <goal name="basis_mat_indexes&#39;vc.4.0.1.1.0.0.1.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                  <transf name="compute_specified" proved="true" >
                   <goal name="basis_mat_indexes&#39;vc.4.0.1.1.0.0.1.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                   <proof prover="10"><result status="valid" time="1.82" steps="608442"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="basis_mat_indexes&#39;vc.4.0.1.1.0.0.1.0.0.0.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
                  <proof prover="10"><result status="valid" time="1.06" steps="507608"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="basis_mat_indexes&#39;vc.4.0.1.1.0.0.1.0.0.0.0.0.0.0.0.1" proved="true">
                 <transf name="assert" proved="true" arg1="((fun (x:(int, int)) -&gt;
     mem x (mat_indices m) /\
     equal m (ind_basis_mat (fir x) (sec x) (rows m) (columns m))) b)
">
                  <goal name="basis_mat_indexes&#39;vc.4.0.1.1.0.0.1.0.0.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
                  <transf name="compute_specified" proved="true" >
                   <goal name="basis_mat_indexes&#39;vc.4.0.1.1.0.0.1.0.0.0.0.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="basis_mat_indexes&#39;vc.4.0.1.1.0.0.1.0.0.0.0.0.0.0.0.1.0.0.0" proved="true">
                    <proof prover="10"><result status="valid" time="0.73" steps="483356"/></proof>
                    </goal>
                    <goal name="basis_mat_indexes&#39;vc.4.0.1.1.0.0.1.0.0.0.0.0.0.0.0.1.0.0.1" proved="true">
                    <proof prover="10"><result status="valid" time="1.72" steps="608337"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="basis_mat_indexes&#39;vc.4.0.1.1.0.0.1.0.0.0.0.0.0.0.0.1.1" proved="true">
                  <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="h">
                   <goal name="basis_mat_indexes&#39;vc.4.0.1.1.0.0.1.0.0.0.0.0.0.0.0.1.1.0" proved="true">
                   <proof prover="10"><result status="valid" time="3.31" steps="934757"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="basis_mat_indexes&#39;vc.4.0.1.1.0.0.1.0.0.0.0.1" proved="true">
             <transf name="instantiate" proved="true" arg1="get_filter" arg2="(fun (x:(int, int)) -&gt;
     mem x (mat_indices m) /\
     equal m (ind_basis_mat (fir x) (sec x) (rows m) (columns m))),(mat_indices m),(i,j)">
              <goal name="basis_mat_indexes&#39;vc.4.0.1.1.0.0.1.0.0.0.0.1.0" proved="true">
              <proof prover="10"><result status="valid" time="1.30" steps="516528"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="basis_mat_indexes&#39;vc.5" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.53" steps="403610"/></proof>
  </goal>
  <goal name="basis_mat_indexes&#39;vc.6" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="basis_mat_indexes&#39;vc.6.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="((fun (x:(int, int)) -&gt;
      mem x (mat_indices m) /\
      equal m (ind_basis_mat (fir x) (sec x) (rows m) (columns m)))result)">
    <goal name="basis_mat_indexes&#39;vc.6.0.0" expl="asserted formula" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="basis_mat_indexes&#39;vc.6.0.0.0" expl="asserted formula" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="basis_mat_indexes&#39;vc.6.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="10"><result status="valid" time="1.25" steps="508281"/></proof>
      </goal>
      <goal name="basis_mat_indexes&#39;vc.6.0.0.0.1" expl="asserted formula" proved="true">
      <transf name="instantiate" proved="true" arg1="Ensures4" arg2="result">
       <goal name="basis_mat_indexes&#39;vc.6.0.0.0.1.0" expl="asserted formula" proved="true">
       <proof prover="10"><result status="valid" time="1.63" steps="551939"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="basis_mat_indexes&#39;vc.6.0.1" expl="postcondition" proved="true">
    <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="h">
     <goal name="basis_mat_indexes&#39;vc.6.0.1.0" expl="postcondition" proved="true">
     <proof prover="10"><result status="valid" time="1.37" steps="510164"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="basis_mat_indexes&#39;vc.7" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ind_basis_mat&#39;def" arg2="in" arg3="Ensures">
   <goal name="basis_mat_indexes&#39;vc.7.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures">
    <goal name="basis_mat_indexes&#39;vc.7.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_mat">
     <goal name="basis_mat_indexes&#39;vc.7.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="assert_make_r">
      <goal name="basis_mat_indexes&#39;vc.7.0.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="assert_make_r">
       <goal name="basis_mat_indexes&#39;vc.7.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.61" steps="465171"/></proof>
       </goal>
       <goal name="basis_mat_indexes&#39;vc.7.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="1.28" steps="508107"/></proof>
       </goal>
       <goal name="basis_mat_indexes&#39;vc.7.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="3.30" steps="992279"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="basis_mat_indexes&#39;vc.7.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="1.28" steps="508107"/></proof>
      </goal>
      <goal name="basis_mat_indexes&#39;vc.7.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="1.25" steps="508107"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="basis_mat_indexes&#39;vc.7.0.0.1" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="1.16" steps="19224"/></proof>
     </goal>
     <goal name="basis_mat_indexes&#39;vc.7.0.0.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="basis_mat_indexes&#39;vc.7.0.0.2.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="assert_make">
       <goal name="basis_mat_indexes&#39;vc.7.0.0.2.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="assert_make">
        <goal name="basis_mat_indexes&#39;vc.7.0.0.2.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="basis_mat_indexes&#39;vc.7.0.0.2.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="1.21" steps="489503"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="basis_mat_indexes&#39;vc.7.0.0.2.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="3.57" steps="1053699"/></proof>
        </goal>
        <goal name="basis_mat_indexes&#39;vc.7.0.0.2.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="3.59" steps="1049498"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="basis_mat_indexes&#39;vc.7.0.0.2.0.1" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="3.11" steps="1042470"/></proof>
       </goal>
       <goal name="basis_mat_indexes&#39;vc.7.0.0.2.0.2" expl="rewrite premises" proved="true">
       <transf name="assert" proved="true" arg1="(mem result (mat_indices m))
">
        <goal name="basis_mat_indexes&#39;vc.7.0.0.2.0.2.0" expl="asserted formula" proved="true">
        <proof prover="10"><result status="valid" time="1.55" steps="508833"/></proof>
        </goal>
        <goal name="basis_mat_indexes&#39;vc.7.0.0.2.0.2.1" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="3.61" steps="1082378"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="basis_mat_indexes&#39;vc.7.1" expl="rewrite premises" proved="true">
   <proof prover="10"><result status="valid" time="1.28" steps="446114"/></proof>
   </goal>
   <goal name="basis_mat_indexes&#39;vc.7.2" expl="rewrite premises" proved="true">
   <proof prover="10"><result status="valid" time="1.25" steps="446140"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="basis_mat_indexes&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="3.38" steps="1012342"/></proof>
  </goal>
  <goal name="basis_mat_indexes&#39;vc.9" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures1">
   <goal name="basis_mat_indexes&#39;vc.9.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="assert_make">
    <goal name="basis_mat_indexes&#39;vc.9.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="basis_mat_indexes&#39;vc.9.0.0.0" expl="postcondition" proved="true">
     <proof prover="10"><result status="valid" time="1.22" steps="508402"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="basis_mat_indexes&#39;vc.9.0.1" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="1.43" steps="507803"/></proof>
    </goal>
    <goal name="basis_mat_indexes&#39;vc.9.0.2" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="1.30" steps="507784"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="basis_mat_indexes&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="1.51" steps="508861"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_basis_mat_indexes&#39;vc" expl="VC for get_basis_mat_indexes" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_basis_mat_indexes&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.49" steps="21363"/></proof>
  </goal>
  <goal name="get_basis_mat_indexes&#39;vc.1" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="get_basis_mat_indexes&#39;vc.1.0" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.91" steps="391557"/></proof>
   </goal>
   <goal name="get_basis_mat_indexes&#39;vc.1.1" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.92" steps="391443"/></proof>
   </goal>
   <goal name="get_basis_mat_indexes&#39;vc.1.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="get_basis_mat_indexes&#39;vc.1.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="assert_make">
     <goal name="get_basis_mat_indexes&#39;vc.1.2.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="get_basis_mat_indexes&#39;vc.1.2.0.0.0" expl="apply premises" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="get_basis_mat_indexes&#39;vc.1.2.0.0.0.0" expl="apply premises" proved="true">
       <transf name="instantiate" proved="true" arg1="ind_basis_mat&#39;spec1" arg2="i,j,(rows m),(columns m)">
        <goal name="get_basis_mat_indexes&#39;vc.1.2.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="2.25" steps="788786"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="get_basis_mat_indexes&#39;vc.1.2.0.1" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.71" steps="328260"/></proof>
     </goal>
     <goal name="get_basis_mat_indexes&#39;vc.1.2.0.2" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.72" steps="328260"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="get_basis_mat_indexes&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="2.09" steps="783066"/></proof>
  </goal>
  <goal name="get_basis_mat_indexes&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="2.25" steps="825646"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_basis_mat_indexes&#39;vc" expl="VC for set_basis_mat_indexes" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_basis_mat_indexes&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.34" steps="292932"/></proof>
  </goal>
  <goal name="set_basis_mat_indexes&#39;vc.1" expl="assertion" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="set_basis_mat_indexes&#39;vc.1.0" expl="assertion" proved="true">
   <transf name="case" proved="true" arg1="( basis_mat_indexes m &lt;&gt; (i, j))">
    <goal name="set_basis_mat_indexes&#39;vc.1.0.0" expl="true case (assertion)" proved="true">
    <transf name="instantiate" proved="true" arg1="get_basis_mat_indexes" arg2="m">
     <goal name="set_basis_mat_indexes&#39;vc.1.0.0.0" expl="true case (assertion)" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="set_basis_mat_indexes&#39;vc.1.0.0.0.0" expl="destruct premise" proved="true">
      <proof prover="10"><result status="valid" time="0.51" steps="411860"/></proof>
      </goal>
      <goal name="set_basis_mat_indexes&#39;vc.1.0.0.0.1" expl="true case (assertion)" proved="true">
      <transf name="instantiate" proved="true" arg1="Hinst" arg2="i,j">
       <goal name="set_basis_mat_indexes&#39;vc.1.0.0.0.1.0" expl="true case (assertion)" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="set_basis_mat_indexes&#39;vc.1.0.0.0.1.0.0" expl="destruct premise" proved="true">
        <proof prover="10"><result status="valid" time="0.52" steps="411954"/></proof>
        </goal>
        <goal name="set_basis_mat_indexes&#39;vc.1.0.0.0.1.0.1" expl="true case (assertion)" proved="true">
        <proof prover="10"><result status="valid" time="0.84" steps="433480"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="set_basis_mat_indexes&#39;vc.1.0.1" expl="false case (assertion)" proved="true">
    <proof prover="10"><result status="valid" time="0.52" steps="411856"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="set_basis_mat_indexes&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.44" steps="357134"/></proof>
  </goal>
  <goal name="set_basis_mat_indexes&#39;vc.3" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="set_basis_mat_indexes&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.89" steps="434115"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="set_basis_mat_indexes&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="1.03" steps="395958"/></proof>
  </goal>
  <goal name="set_basis_mat_indexes&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.98" steps="397315"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="basis_projection&#39;vc" expl="VC for basis_projection" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="basis_projection&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.67" steps="315404"/></proof>
  </goal>
  <goal name="basis_projection&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.69" steps="315425"/></proof>
  </goal>
  <goal name="basis_projection&#39;vc.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="basis_projection&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.40" steps="297702"/></proof>
   </goal>
   <goal name="basis_projection&#39;vc.2.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.41" steps="297717"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="basis_projection&#39;vc.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="basis_projection&#39;vc.3.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.39" steps="297711"/></proof>
   </goal>
   <goal name="basis_projection&#39;vc.3.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.40" steps="297726"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="basis_projection&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="1.05" steps="399075"/></proof>
  </goal>
  <goal name="basis_projection&#39;vc.5" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="1.04" steps="399387"/></proof>
  </goal>
  <goal name="basis_projection&#39;vc.6" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="scalar_values">
   <goal name="basis_projection&#39;vc.6.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="assert_make">
    <goal name="basis_projection&#39;vc.6.0.0" expl="precondition" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="basis_projection&#39;vc.6.0.0.0" expl="precondition" proved="true">
     <proof prover="10"><result status="valid" time="0.95" steps="401679"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="basis_projection&#39;vc.6.0.1" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.94" steps="399029"/></proof>
    </goal>
    <goal name="basis_projection&#39;vc.6.0.2" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.96" steps="399029"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="basis_projection&#39;vc.7" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="basis_projection&#39;vc.7.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.43" steps="357116"/></proof>
   </goal>
   <goal name="basis_projection&#39;vc.7.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.45" steps="357131"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="basis_projection&#39;vc.8" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="basis_projection&#39;vc.8.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.45" steps="357125"/></proof>
   </goal>
   <goal name="basis_projection&#39;vc.8.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.45" steps="357140"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="basis_projection&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.70" steps="377653"/></proof>
  </goal>
  <goal name="basis_projection&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.72" steps="377665"/></proof>
  </goal>
  <goal name="basis_projection&#39;vc.11" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="basis_projection&#39;vc.11.0" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.97" steps="398311"/></proof>
   </goal>
   <goal name="basis_projection&#39;vc.11.1" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.97" steps="398191"/></proof>
   </goal>
   <goal name="basis_projection&#39;vc.11.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="basis_projection&#39;vc.11.2.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="2.95" steps="911344"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="basis_projection&#39;vc.12" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="basis_projection&#39;vc.12.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="assert_make">
    <goal name="basis_projection&#39;vc.12.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="basis_projection&#39;vc.12.0.0.0" expl="postcondition" proved="true">
     <proof prover="10"><result status="valid" time="0.96" steps="399542"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="basis_projection&#39;vc.12.0.1" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.44" steps="357557"/></proof>
    </goal>
    <goal name="basis_projection&#39;vc.12.0.2" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.45" steps="357557"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="basis_projection&#39;vc.13" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(indic_2 i&#39; i j&#39; j = c_zero)">
   <goal name="basis_projection&#39;vc.13.0" expl="asserted formula" proved="true">
   <proof prover="10"><result status="valid" time="0.96" steps="398677"/></proof>
   </goal>
   <goal name="basis_projection&#39;vc.13.1" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.99" steps="400206"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="basis_projection&#39;vc.14" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(indic_2 i&#39; i j&#39; j = c_zero)">
   <goal name="basis_projection&#39;vc.14.0" expl="asserted formula" proved="true">
   <proof prover="10"><result status="valid" time="0.97" steps="398810"/></proof>
   </goal>
   <goal name="basis_projection&#39;vc.14.1" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="1.00" steps="400581"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="basis_projection_null&#39;vc" expl="VC for basis_projection_null" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="basis_projection_null&#39;vc.0" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="1.99" steps="709809"/></proof>
  </goal>
  <goal name="basis_projection_null&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.61" steps="270847"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="basis_projections&#39;vc" expl="VC for basis_projections" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="basis_projections&#39;vc.0" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.14" steps="2406"/></proof>
  </goal>
  <goal name="basis_projections&#39;vc.1" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.14" steps="2418"/></proof>
  </goal>
  <goal name="basis_projections&#39;vc.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="basis_projections&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.87" steps="304306"/></proof>
   </goal>
   <goal name="basis_projections&#39;vc.2.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.71" steps="304305"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="basis_projections&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.72" steps="304380"/></proof>
  </goal>
  <goal name="basis_projections&#39;vc.4" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="basis_projections&#39;vc.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="basis_projections&#39;vc.4.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="map_eq">
     <goal name="basis_projections&#39;vc.4.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="basis_projections&#39;vc.4.0.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="basis_projections&#39;vc.4.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="1.48" steps="474063"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="basis_projections&#39;vc.5" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="basis_projections&#39;vc.5.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def" arg2="in" arg3="Ensures">
    <goal name="basis_projections&#39;vc.5.0.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (o:(int, int)) -&gt;
     if valid_index m (fir o) (sec o) then basis_projection m (fir o) (sec o)
     else m),(to_indexes m),e">
     <goal name="basis_projections&#39;vc.5.0.0.0" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="basis_projections&#39;vc.5.0.0.0.0" expl="destruct premise" proved="true">
      <transf name="rewrite" proved="true" arg1="result&#39;def" arg2="in" arg3="H">
       <goal name="basis_projections&#39;vc.5.0.0.0.0.0" expl="destruct premise" proved="true">
       <transf name="rewrite" proved="true" arg1="Ensures" arg2="in" arg3="H">
        <goal name="basis_projections&#39;vc.5.0.0.0.0.0.0" expl="destruct premise" proved="true">
        <transf name="replace" proved="true" arg1="(map
   (fun (o:(int, int)) -&gt;
     if valid_index m (fir o) (sec o) then basis_projection m (fir o) (sec o)
     else m)
   (to_indexes m))" arg2="(map
   ((fun (y0:int -&gt; int -&gt; matrix complex) (y1:(int, int)) -&gt; couple y0 y1)
    @ ((fun (y0:matrix complex) (y1:int) (y2:int) -&gt;
         basis_projection y0 y1 y2)
       @ m))
   (to_indexes m))">
         <goal name="basis_projections&#39;vc.5.0.0.0.0.0.0.0" expl="destruct premise" proved="true">
         <proof prover="10"><result status="valid" time="0.80" steps="482738"/></proof>
         </goal>
         <goal name="basis_projections&#39;vc.5.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="basis_projections&#39;vc.5.0.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="set_map_eq">
           <goal name="basis_projections&#39;vc.5.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="basis_projections&#39;vc.5.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="basis_projections&#39;vc.5.0.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
             <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (y1:(int, int)) -&gt;
     couple (fun (y11:int) (y2:int) -&gt; basis_projection m y11 y2) y1),(to_indexes m),b">
              <goal name="basis_projections&#39;vc.5.0.0.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="destruct" proved="true" arg1="Hinst">
               <goal name="basis_projections&#39;vc.5.0.0.0.0.0.0.1.0.0.0.0.0.0" expl="destruct premise" proved="true">
               <transf name="apply" proved="true" arg1="H">
               </transf>
               </goal>
               <goal name="basis_projections&#39;vc.5.0.0.0.0.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
               <transf name="destruct" proved="true" arg1="Hinst">
                <goal name="basis_projections&#39;vc.5.0.0.0.0.0.0.1.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                <transf name="exists" proved="true" arg1="a">
                 <goal name="basis_projections&#39;vc.5.0.0.0.0.0.0.1.0.0.0.0.0.1.0.0" proved="true">
                 <proof prover="10"><result status="valid" time="1.52" steps="571818"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="basis_projections&#39;vc.5.0.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="basis_projections&#39;vc.5.0.0.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="basis_projections&#39;vc.5.0.0.0.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
             <proof prover="10"><result status="valid" time="3.78" steps="1107526"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="basis_projections&#39;vc.5.0.0.0.1" expl="postcondition" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="basis_projections&#39;vc.5.0.0.0.1.0" expl="postcondition" proved="true">
       <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
        <goal name="basis_projections&#39;vc.5.0.0.0.1.0.0" expl="postcondition" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="basis_projections&#39;vc.5.0.0.0.1.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="Hinst">
          <goal name="basis_projections&#39;vc.5.0.0.0.1.0.0.0.0" expl="postcondition" proved="true">
          <transf name="eliminate_if" proved="true" >
           <goal name="basis_projections&#39;vc.5.0.0.0.1.0.0.0.0.0" expl="VC for basis_projections" proved="true">
           <proof prover="10"><result status="valid" time="1.30" steps="588302"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="basis_projections&#39;vc.6" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(exists o. mem o (to_indexes m) /\ e = ((fun (y0:int -&gt; int -&gt; matrix complex) (y1:(int, int)) -&gt; couple y0 y1)
       @ ((fun (y0:matrix complex) (y1:int) (y2:int) -&gt; basis_projection y0 y1 y2)
          @ m)) o)">
   <goal name="basis_projections&#39;vc.6.0" expl="asserted formula" proved="true">
   <transf name="instantiate" proved="true" arg1="map_antec" arg2="((fun (y0:int -&gt; int -&gt; matrix complex) (y1:(int, int)) -&gt; couple y0 y1)
     @ ((fun (y0:matrix complex) (y1:int) (y2:int) -&gt; basis_projection y0 y1 y2)
        @ m)),(to_indexes m),e">
    <goal name="basis_projections&#39;vc.6.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="Hinst">
     <goal name="basis_projections&#39;vc.6.0.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="1.03" steps="504636"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="basis_projections&#39;vc.6.1" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="h">
    <goal name="basis_projections&#39;vc.6.1.0" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="h">
     <goal name="basis_projections&#39;vc.6.1.0.0" expl="postcondition" proved="true">
     <transf name="assert" proved="true" arg1="(e = basis_projection m (fir o)(sec o))">
      <goal name="basis_projections&#39;vc.6.1.0.0.0" expl="asserted formula" proved="true">
      <proof prover="10"><result status="valid" time="1.61" steps="527357"/></proof>
      </goal>
      <goal name="basis_projections&#39;vc.6.1.0.0.1" expl="postcondition" proved="true">
      <proof prover="10"><result status="valid" time="3.81" steps="1138813"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="basis_projections&#39;vc.7" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="basis_projections&#39;vc.7.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="basis_projections&#39;vc.7.0.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="1.35" steps="528295"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="basis_projections&#39;vc.7.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="basis_projections&#39;vc.7.1.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="1.33" steps="528303"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="rewrite_basis_projections&#39;vc" expl="VC for rewrite_basis_projections" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="rewrite_basis_projections&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="rewrite_basis_projections&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="basis_projections&#39;def">
    <goal name="rewrite_basis_projections&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="rewrite_basis_projections&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="set_map_eq">
      <goal name="rewrite_basis_projections&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="rewrite_basis_projections&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="rewrite_basis_projections&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (y1:(int, int)) -&gt;
     couple (fun (y11:int) (y2:int) -&gt; basis_projection m y11 y2) y1),(to_indexes m),b">
         <goal name="rewrite_basis_projections&#39;vc.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (o:(int, int)) -&gt;
     if valid_index m (match o with
        | x, _ -&gt; x
        end) (match o with
        | _, y -&gt; y
        end)
     then basis_projection m (match o with
          | x, _ -&gt; x
          end) (match o with
          | _, y -&gt; y
          end)
     else m),(to_indexes m),b">
          <goal name="rewrite_basis_projections&#39;vc.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="destruct" proved="true" arg1="Hinst">
           <goal name="rewrite_basis_projections&#39;vc.0.0.0.0.0.0.0.0.0.0" expl="destruct premise" proved="true">
           <proof prover="10"><result status="valid" time="0.87" steps="373656"/></proof>
           </goal>
           <goal name="rewrite_basis_projections&#39;vc.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <transf name="destruct" proved="true" arg1="Hinst">
            <goal name="rewrite_basis_projections&#39;vc.0.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
            <transf name="exists" proved="true" arg1="a">
             <goal name="rewrite_basis_projections&#39;vc.0.0.0.0.0.0.0.0.0.1.0.0" proved="true">
             <proof prover="10"><result status="valid" time="2.93" steps="1081448"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="rewrite_basis_projections&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="rewrite_basis_projections&#39;vc.0.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="rewrite_basis_projections&#39;vc.0.0.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="2.62" steps="935825"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="indexes_decomp&#39;vc" expl="VC for indexes_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="indexes_decomp&#39;vc.0" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="((fun (o:(int, int)) -&gt;
     if mem o (to_indexes m)
     then basis_projection m (match o with
          | x, _ -&gt; x
          end) (match o with
          | _, y -&gt; y
          end
)     else m)
   @ e)" arg2="(basis_projection m (fir e) (sec e))">
   <goal name="indexes_decomp&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.14" steps="2547"/></proof>
   </goal>
   <goal name="indexes_decomp&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="indexes_decomp&#39;vc.0.1.0" expl="equality hypothesis" proved="true">
    <proof prover="10"><result status="valid" time="0.85" steps="380108"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="indexes_decomp&#39;vc.1" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="((fun (o:(int, int)) -&gt;
     if mem o (to_indexes m)
     then basis_projection m (match o with
          | x, _ -&gt; x
          end) (match o with
          | _, y -&gt; y
          end
)     else m)
   @ e)" arg2="(basis_projection m (fir e) (sec e))">
   <goal name="indexes_decomp&#39;vc.1.0" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="2.15" steps="794660"/></proof>
   </goal>
   <goal name="indexes_decomp&#39;vc.1.1" expl="equality hypothesis" proved="true">
   <proof prover="10"><result status="valid" time="2.05" steps="723275"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="indexes_decomp&#39;vc.2" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="s_columns&#39;def">
   <goal name="indexes_decomp&#39;vc.2.0" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="2.18" steps="802878"/></proof>
   </goal>
   <goal name="indexes_decomp&#39;vc.2.1" expl="rewrite premises" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="indexes_decomp&#39;vc.2.1.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.83" steps="359023"/></proof>
    </goal>
    <goal name="indexes_decomp&#39;vc.2.1.1" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.84" steps="358864"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="indexes_decomp&#39;vc.3" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="s_rows&#39;def">
   <goal name="indexes_decomp&#39;vc.3.0" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="2.19" steps="811030"/></proof>
   </goal>
   <goal name="indexes_decomp&#39;vc.3.1" expl="rewrite premises" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="indexes_decomp&#39;vc.3.1.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.81" steps="362220"/></proof>
    </goal>
    <goal name="indexes_decomp&#39;vc.3.1.1" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.83" steps="361917"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="indexes_decomp&#39;vc.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="indexes_decomp&#39;vc.4.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.07" steps="370628"/></proof>
   </goal>
   <goal name="indexes_decomp&#39;vc.4.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.83" steps="370636"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="indexes_decomp&#39;vc.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="indexes_decomp&#39;vc.5.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.02" steps="370669"/></proof>
   </goal>
   <goal name="indexes_decomp&#39;vc.5.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.84" steps="370677"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="indexes_decomp&#39;vc.6" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="indexes_decomp&#39;vc.6.0" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="indexes_decomp&#39;vc.6.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="indexes_decomp&#39;vc.6.0.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.89" steps="371092"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="indexes_decomp&#39;vc.6.1" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="indexes_decomp&#39;vc.6.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="indexes_decomp&#39;vc.6.1.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="1.08" steps="370789"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="indexes_decomp&#39;vc.7" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.36" steps="22423"/></proof>
  </goal>
  <goal name="indexes_decomp&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="1.00" steps="373305"/></proof>
  </goal>
  <goal name="indexes_decomp&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.99" steps="373290"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="rewrite_indexes_decomp&#39;vc" expl="VC for rewrite_indexes_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="rewrite_indexes_decomp&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="rewrite_indexes_decomp&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="indexes_decomp&#39;def">
    <goal name="rewrite_indexes_decomp&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="to_indexes&#39;def">
     <goal name="rewrite_indexes_decomp&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="assert" proved="true" arg1="(mem (0,0) (to_indexes m))
">
      <goal name="rewrite_indexes_decomp&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="10"><result status="valid" time="2.11" steps="726216"/></proof>
      </goal>
      <goal name="rewrite_indexes_decomp&#39;vc.0.0.0.0.1" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="mat_sum_eq">
       <goal name="rewrite_indexes_decomp&#39;vc.0.0.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="0.89" steps="310144"/></proof>
       </goal>
       <goal name="rewrite_indexes_decomp&#39;vc.0.0.0.0.1.1" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="rewrite_indexes_decomp&#39;vc.0.0.0.0.1.1.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="rewrite_indexes_decomp&#39;vc.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="rewrite_indexes_decomp&#39;vc.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
          <transf name="eliminate_if" proved="true" >
           <goal name="rewrite_indexes_decomp&#39;vc.0.0.0.0.1.1.0.0.0.0" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="rewrite_indexes_decomp&#39;vc.0.0.0.0.1.1.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="1.39"/></proof>
            </goal>
            <goal name="rewrite_indexes_decomp&#39;vc.0.0.0.0.1.1.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="0.36" steps="304544"/></proof>
            </goal>
            <goal name="rewrite_indexes_decomp&#39;vc.0.0.0.0.1.1.0.0.0.0.2" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="0.37" steps="304544"/></proof>
            </goal>
            <goal name="rewrite_indexes_decomp&#39;vc.0.0.0.0.1.1.0.0.0.0.3" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="0.36" steps="303874"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="rewrite_indexes_decomp&#39;vc.0.0.0.0.1.1.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="rewrite_indexes_decomp&#39;vc.0.0.0.0.1.1.1.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="rewrite_indexes_decomp&#39;vc.0.0.0.0.1.1.1.0.0" expl="apply premises" proved="true">
          <transf name="eliminate_if" proved="true" >
           <goal name="rewrite_indexes_decomp&#39;vc.0.0.0.0.1.1.1.0.0.0" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="rewrite_indexes_decomp&#39;vc.0.0.0.0.1.1.1.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="1.41"/></proof>
            </goal>
            <goal name="rewrite_indexes_decomp&#39;vc.0.0.0.0.1.1.1.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="0.35" steps="304544"/></proof>
            </goal>
            <goal name="rewrite_indexes_decomp&#39;vc.0.0.0.0.1.1.1.0.0.0.2" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="0.35" steps="304544"/></proof>
            </goal>
            <goal name="rewrite_indexes_decomp&#39;vc.0.0.0.0.1.1.1.0.0.0.3" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="0.35" steps="303874"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="rewrite_indexes_decomp&#39;vc.0.0.0.0.1.2" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="rewrite_indexes_decomp&#39;vc.0.0.0.0.1.2.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="rewrite_indexes_decomp&#39;vc.0.0.0.0.1.2.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="1.20" steps="414282"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="indexes_decomp_pre&#39;vc" expl="VC for indexes_decomp_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="indexes_decomp_pre&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="indexes_decomp_pre&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.00" steps="348984"/></proof>
   </goal>
   <goal name="indexes_decomp_pre&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.00" steps="348987"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="indexes_decomp_pre&#39;vc.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="indexes_decomp_pre&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.99" steps="349030"/></proof>
   </goal>
   <goal name="indexes_decomp_pre&#39;vc.1.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="1.06" steps="349033"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="indexes_decomp_pre&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="1.00" steps="369819"/></proof>
  </goal>
  <goal name="indexes_decomp_pre&#39;vc.3" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="sum_eq">
   <goal name="indexes_decomp_pre&#39;vc.3.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="indexes_decomp_pre&#39;vc.3.0.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.96" steps="374701"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="indexes_decomp_pre&#39;vc.4" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Assert">
   <goal name="indexes_decomp_pre&#39;vc.4.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(sum (to_indexes m)
    (fun (o:(int, int)) -&gt;
      if mem o (to_indexes m)
      then get
           (basis_projection m (match o with
            | x, _ -&gt; x
            end) (match o with
            | _, y -&gt; y
            end))
           i j
      else c_zero))" arg2="( sum (to_indexes m)
  (fun (e:(int, int)) -&gt;
    ((fun (o:(int, int)) -&gt;
       if mem o (to_indexes m)
       then get
            (basis_projection m (match o with
             | x, _ -&gt; x
             end) (match o with
             | _, y -&gt; y
             end)
  )          i j
       else c_zero)
     @ e)
    *. indic (i, j) e))">
    <goal name="indexes_decomp_pre&#39;vc.4.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures">
     <goal name="indexes_decomp_pre&#39;vc.4.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="indexes_decomp_pre&#39;vc.4.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="10"><result status="valid" time="2.80" steps="896971"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="indexes_decomp_pre&#39;vc.4.0.1" expl="equality hypothesis" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="indexes_decomp_pre&#39;vc.4.0.1.0" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="sum_eq">
      <goal name="indexes_decomp_pre&#39;vc.4.0.1.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="indexes_decomp_pre&#39;vc.4.0.1.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="indexes_decomp_pre&#39;vc.4.0.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="eliminate_if" proved="true" >
         <goal name="indexes_decomp_pre&#39;vc.4.0.1.0.0.0.0.0" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="indexes_decomp_pre&#39;vc.4.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="1.10" steps="383073"/></proof>
          </goal>
          <goal name="indexes_decomp_pre&#39;vc.4.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="0.40" steps="340124"/></proof>
          </goal>
          <goal name="indexes_decomp_pre&#39;vc.4.0.1.0.0.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="0.40" steps="340124"/></proof>
          </goal>
          <goal name="indexes_decomp_pre&#39;vc.4.0.1.0.0.0.0.0.3" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="0.42" steps="340096"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="indexes_decomp_pre_gen&#39;vc" expl="VC for indexes_decomp_pre_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="indexes_decomp_pre_gen&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="indexes_decomp_pre">
   <goal name="indexes_decomp_pre_gen&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="sum_eq">
    <goal name="indexes_decomp_pre_gen&#39;vc.0.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="indexes_decomp_pre_gen&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="indexes_decomp_pre_gen&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.07" steps="408838"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="indexes_decomp_pre_gen&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="10"><result status="valid" time="0.26" steps="239063"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_to_indexes_decomp&#39;vc" expl="VC for mat_to_indexes_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_to_indexes_decomp&#39;vc.0" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="mat_to_indexes_decomp&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.94" steps="334599"/></proof>
   </goal>
   <goal name="mat_to_indexes_decomp&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.80" steps="334509"/></proof>
   </goal>
   <goal name="mat_to_indexes_decomp&#39;vc.0.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="mat_to_indexes_decomp&#39;vc.0.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="indexes_decomp_pre">
     <goal name="mat_to_indexes_decomp&#39;vc.0.2.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="assert_make">
      <goal name="mat_to_indexes_decomp&#39;vc.0.2.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_hyp" proved="true" >
      </transf>
      </goal>
      <goal name="mat_to_indexes_decomp&#39;vc.0.2.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.79" steps="272742"/></proof>
      </goal>
      <goal name="mat_to_indexes_decomp&#39;vc.0.2.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.77" steps="272770"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="mat_to_indexes_decomp&#39;vc.0.2.0.1" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.28" steps="239305"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mat_to_indexes_decomp&#39;vc.1" expl="assertion" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="mat_to_indexes_decomp&#39;vc.1.0" expl="assertion" proved="true">
   <transf name="assert" proved="true" arg1="(mem (choose (to_indexes m)) (to_indexes m))">
    <goal name="mat_to_indexes_decomp&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.47"/></proof>
    </goal>
    <goal name="mat_to_indexes_decomp&#39;vc.1.0.1" expl="assertion" proved="true">
    <proof prover="10"><result status="valid" time="2.67" steps="806371"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mat_to_indexes_decomp&#39;vc.2" expl="assertion" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="mat_to_indexes_decomp&#39;vc.2.0" expl="assertion" proved="true">
   <transf name="assert" proved="true" arg1="(mem (choose (to_indexes m)) (to_indexes m))">
    <goal name="mat_to_indexes_decomp&#39;vc.2.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="(exists x. (mem x (to_indexes m)))">
     <goal name="mat_to_indexes_decomp&#39;vc.2.0.0.0" expl="asserted formula" proved="true">
     <transf name="exists" proved="true" arg1="(0,0)">
      <goal name="mat_to_indexes_decomp&#39;vc.2.0.0.0.0" proved="true">
      <proof prover="10"><result status="valid" time="1.21" steps="460530"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="mat_to_indexes_decomp&#39;vc.2.0.0.1" expl="asserted formula" proved="true">
     <proof prover="10"><result status="valid" time="1.14" steps="459134"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="mat_to_indexes_decomp&#39;vc.2.0.1" expl="assertion" proved="true">
    <proof prover="10"><result status="valid" time="2.60" steps="805967"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mat_to_indexes_decomp&#39;vc.3" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="set_s_rows">
   <goal name="mat_to_indexes_decomp&#39;vc.3.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="mat_to_indexes_decomp&#39;vc.3.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_to_indexes_decomp&#39;vc.3.0.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="((fun (o:(int, int)) -&gt;
     basis_projection m (match o with
     | x, _ -&gt; x
     end) (match o with
     | _, y -&gt; y
     end))
   @ e)" arg2="(basis_projection m (fir e) (sec e))">
      <goal name="mat_to_indexes_decomp&#39;vc.3.0.0.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="((fun (o:(int, int)) -&gt;
     basis_projection m (match o with
     | x, _ -&gt; x
     end) (match o with
     | _, y -&gt; y
     end))
   @ e&#39;)" arg2="(basis_projection m (fir e&#39;) (sec e&#39;))">
       <goal name="mat_to_indexes_decomp&#39;vc.3.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="2.75" steps="958061"/></proof>
       </goal>
       <goal name="mat_to_indexes_decomp&#39;vc.3.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="10"><result status="valid" time="1.18" steps="490073"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="mat_to_indexes_decomp&#39;vc.3.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="10"><result status="valid" time="1.27" steps="490073"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_to_indexes_decomp&#39;vc.3.0.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_to_indexes_decomp&#39;vc.3.0.1.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="((fun (o:(int, int)) -&gt;
     basis_projection m (match o with
     | x, _ -&gt; x
     end) (match o with
     | _, y -&gt; y
     end))
   @ e)" arg2="(basis_projection m (fir e) (sec e))">
      <goal name="mat_to_indexes_decomp&#39;vc.3.0.1.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="((fun (o:(int, int)) -&gt;
     basis_projection m (match o with
     | x, _ -&gt; x
     end) (match o with
     | _, y -&gt; y
     end))
   @ e&#39;)" arg2="(basis_projection m (fir e&#39;) (sec e&#39;))">
       <goal name="mat_to_indexes_decomp&#39;vc.3.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="1.18" steps="17887"/></proof>
       </goal>
       <goal name="mat_to_indexes_decomp&#39;vc.3.0.1.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="10"><result status="valid" time="1.16" steps="490073"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="mat_to_indexes_decomp&#39;vc.3.0.1.0.1" expl="equality hypothesis" proved="true">
      <proof prover="10"><result status="valid" time="1.38" steps="490073"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_to_indexes_decomp&#39;vc.3.1" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="mat_to_indexes_decomp&#39;vc.3.1.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.38" steps="306763"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mat_to_indexes_decomp&#39;vc.4" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="set_s_columns">
   <goal name="mat_to_indexes_decomp&#39;vc.4.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="mat_to_indexes_decomp&#39;vc.4.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_to_indexes_decomp&#39;vc.4.0.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="((fun (o:(int, int)) -&gt;
     basis_projection m (match o with
     | x, _ -&gt; x
     end) (match o with
     | _, y -&gt; y
     end))
   @ e)" arg2="(basis_projection m (fir e) (sec e))">
      <goal name="mat_to_indexes_decomp&#39;vc.4.0.0.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="((fun (o:(int, int)) -&gt;
     basis_projection m (match o with
     | x, _ -&gt; x
     end) (match o with
     | _, y -&gt; y
     end))
   @ e&#39;)" arg2="(basis_projection m (fir e&#39;) (sec e&#39;))">
       <goal name="mat_to_indexes_decomp&#39;vc.4.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="2.70" steps="981206"/></proof>
       </goal>
       <goal name="mat_to_indexes_decomp&#39;vc.4.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="10"><result status="valid" time="1.16" steps="492866"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="mat_to_indexes_decomp&#39;vc.4.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="10"><result status="valid" time="1.38" steps="492866"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_to_indexes_decomp&#39;vc.4.0.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_to_indexes_decomp&#39;vc.4.0.1.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="((fun (o:(int, int)) -&gt;
     basis_projection m (match o with
     | x, _ -&gt; x
     end) (match o with
     | _, y -&gt; y
     end))
   @ e)" arg2="(basis_projection m (fir e) (sec e))">
      <goal name="mat_to_indexes_decomp&#39;vc.4.0.1.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="((fun (o:(int, int)) -&gt;
     basis_projection m (match o with
     | x, _ -&gt; x
     end) (match o with
     | _, y -&gt; y
     end))
   @ e&#39;)" arg2="(basis_projection m (fir e&#39;) (sec e&#39;))">
       <goal name="mat_to_indexes_decomp&#39;vc.4.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="1.21" steps="17998"/></proof>
       </goal>
       <goal name="mat_to_indexes_decomp&#39;vc.4.0.1.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="10"><result status="valid" time="1.51" steps="492866"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="mat_to_indexes_decomp&#39;vc.4.0.1.0.1" expl="equality hypothesis" proved="true">
      <proof prover="10"><result status="valid" time="1.35" steps="492866"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_to_indexes_decomp&#39;vc.4.1" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="mat_to_indexes_decomp&#39;vc.4.1.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.41" steps="343393"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mat_to_indexes_decomp&#39;vc.5" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="mat_sum_to_sum">
   <goal name="mat_to_indexes_decomp&#39;vc.5.0" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="(make_f
    (s_rows (to_indexes m)
     ((fun (y0:int -&gt; int -&gt; matrix complex) (y1:(int, int)) -&gt; couple y0 y1)
      @ ((fun (y0:matrix complex) (y1:int) (y2:int) -&gt; basis_projection y0 y1 y2)
         @ m)))
    (s_columns (to_indexes m)
     ((fun (y0:int -&gt; int -&gt; matrix complex) (y1:(int, int)) -&gt; couple y0 y1)
      @ ((fun (y0:matrix complex) (y1:int) (y2:int) -&gt; basis_projection y0 y1 y2)
         @ m)))
    (fun (i:int) (j:int) -&gt;
      sum (to_indexes m)
      (fun (e:(int, int)) -&gt;
        get
        (((fun (y0:int -&gt; int -&gt; matrix complex) (y1:(int, int)) -&gt; couple y0 y1)
          @ ((fun (y0:matrix complex) (y1:int) (y2:int) -&gt;
               basis_projection y0 y1 y2)
             @ m))
         @ e)
        i j)))" arg2="(make_f (rows m) (columns m)
    (fun (i:int) (j:int) -&gt;
      sum (to_indexes m)
      (fun (o:(int, int)) -&gt; get (basis_projection m (fir o) (sec o)) i j)))">
    <goal name="mat_to_indexes_decomp&#39;vc.5.0.0" expl="assertion" proved="true">
    <transf name="replace" proved="true" arg1="( make_f (rows m) (columns m)
    (fun (i:int) (j:int) -&gt;
      sum (to_indexes m)
      (fun (o:(int, int)) -&gt; get (basis_projection m (fir o) (sec o)) i j)))" arg2="(make_f (rows m) (columns m)
    (fun (i:int) (j:int) -&gt;
      sum (to_indexes m)
      (fun (o:(int, int)) -&gt;
        get
        (basis_projection m (match o with
         | x, _ -&gt; x
         end) (match o with
         | _, y -&gt; y
         end))
        i j)))">
     <goal name="mat_to_indexes_decomp&#39;vc.5.0.0.0" expl="assertion" proved="true">
     <transf name="apply" proved="true" arg1="Assert4">
     </transf>
     </goal>
     <goal name="mat_to_indexes_decomp&#39;vc.5.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="set_equal_mat_make">
      <goal name="mat_to_indexes_decomp&#39;vc.5.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="0.91" steps="379597"/></proof>
      </goal>
      <goal name="mat_to_indexes_decomp&#39;vc.5.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="0.91" steps="379597"/></proof>
      </goal>
      <goal name="mat_to_indexes_decomp&#39;vc.5.0.0.1.2" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="mat_to_indexes_decomp&#39;vc.5.0.0.1.2.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="mat_to_indexes_decomp&#39;vc.5.0.0.1.2.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="sum_eq">
         <goal name="mat_to_indexes_decomp&#39;vc.5.0.0.1.2.0.0.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="mat_to_indexes_decomp&#39;vc.5.0.0.1.2.0.0.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="mat_to_indexes_decomp&#39;vc.5.0.0.1.2.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="10"><result status="valid" time="1.35" steps="505074"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_to_indexes_decomp&#39;vc.5.0.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_mat_make_t">
     <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="(s_rows (to_indexes m)
  ((fun (y0:int -&gt; int -&gt; matrix complex) (y1:(int, int)) -&gt; couple y0 y1)
   @ ((fun (y0:matrix complex) (y1:int) (y2:int) -&gt; basis_projection y0 y1 y2) @ m))
  = rows m)">
      <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.0.0" expl="asserted formula" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="set_s_rows">
        <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="10"><result status="valid" time="3.70" steps="1079992"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.0.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="couple_value">
            <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="couple_value">
             <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="9"><result status="valid" time="1.09" steps="18110"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.0.0.0.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.0.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="1.67" steps="545885"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.0.1" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="(s_columns (to_indexes m)
  ((fun (y0:int -&gt; int -&gt; matrix complex) (y1:(int, int)) -&gt; couple y0 y1)
   @ ((fun (y0:matrix complex) (y1:int) (y2:int) -&gt; basis_projection y0 y1 y2) @ m))
  = columns m)
">
       <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.0.1.0" expl="asserted formula" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.0.1.0.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="set_s_columns">
         <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.0.1.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_constant_size">
          <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.0.1.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="couple_value">
             <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="couple_value">
              <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.0.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="10"><result status="valid" time="2.91" steps="1047390"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.0.1.0.0.0.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.0.1.0.0.0.1.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.0.1.0.0.0.1.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="couple_value">
             <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.0.1.0.0.0.1.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="couple_value">
              <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.0.1.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.0.1.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="9"><result status="valid" time="1.11" steps="18191"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.0.1.0.0.1" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.0.1.0.0.1.0" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="1.36" steps="549888"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.0.1.1" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="1.33" steps="508499"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="(s_columns (to_indexes m)
  ((fun (y0:int -&gt; int -&gt; matrix complex) (y1:(int, int)) -&gt; couple y0 y1)
   @ ((fun (y0:matrix complex) (y1:int) (y2:int) -&gt; basis_projection y0 y1 y2) @ m))
  = columns m)">
      <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.1.0" expl="asserted formula" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="set_s_columns">
        <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.1.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.1.0.0.0.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.1.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.1.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="couple_value">
            <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="couple_value">
             <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="10"><result status="valid" time="2.70" steps="981661"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.1.0.0.0.1" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.1.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.1.0.0.0.1.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="couple_value">
            <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.1.0.0.0.1.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="couple_value">
             <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.1.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.1.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="9"><result status="valid" time="1.09" steps="18110"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.1.0.0.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.1.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="1.47" steps="545859"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.1.1" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.34" steps="508464"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.2" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.2.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_s_rows">
       <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.2.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.2.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.2.0.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.2.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="couple_value">
           <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.2.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="couple_value">
            <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="10"><result status="valid" time="3.36" steps="981661"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.2.0.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.2.0.0.1.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.2.0.0.1.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="couple_value">
           <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.2.0.0.1.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="couple_value">
            <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.2.0.0.1.0.0.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.2.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="9"><result status="valid" time="1.30" steps="18110"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.2.0.1" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.2.0.1.0" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="1.51" steps="545885"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.3" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.3.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_s_columns">
       <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.3.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.3.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.3.0.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.3.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="couple_value">
           <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.3.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="couple_value">
            <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.3.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.3.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="10"><result status="valid" time="2.93" steps="981661"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.3.0.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.3.0.0.1.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.3.0.0.1.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="couple_value">
           <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.3.0.0.1.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="couple_value">
            <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.3.0.0.1.0.0.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.3.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="9"><result status="valid" time="1.35" steps="18110"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.3.0.1" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.3.0.1.0" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="1.44" steps="545859"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.4" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.4.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.4.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="sum_eq">
        <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.4.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.4.0.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="mat_to_indexes_decomp&#39;vc.5.0.1.4.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="1.35" steps="558670"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_to_indexes_decomp&#39;vc.5.1" expl="rewrite premises" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="mat_to_indexes_decomp&#39;vc.5.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_to_indexes_decomp&#39;vc.5.1.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="mat_to_indexes_decomp&#39;vc.5.1.0.0.0" expl="apply premises" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="mat_to_indexes_decomp&#39;vc.5.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="eliminate_definition" proved="true" >
        <goal name="mat_to_indexes_decomp&#39;vc.5.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(couple (fun (y1:int) (y2:int) -&gt; basis_projection m y1 y2) e)" arg2="(basis_projection m (fir e) (sec e))">
         <goal name="mat_to_indexes_decomp&#39;vc.5.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(couple (fun (y1:int) (y2:int) -&gt; basis_projection m y1 y2) e&#39;)" arg2="(basis_projection m (fir e&#39;) (sec e&#39;))">
          <goal name="mat_to_indexes_decomp&#39;vc.5.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="1.14" steps="490334"/></proof>
          </goal>
          <goal name="mat_to_indexes_decomp&#39;vc.5.1.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="10"><result status="valid" time="1.58" steps="609693"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="mat_to_indexes_decomp&#39;vc.5.1.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="10"><result status="valid" time="1.44" steps="609693"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_to_indexes_decomp&#39;vc.5.1.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_to_indexes_decomp&#39;vc.5.1.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="mat_to_indexes_decomp&#39;vc.5.1.1.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="couple_value">
       <goal name="mat_to_indexes_decomp&#39;vc.5.1.1.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="couple_value">
        <goal name="mat_to_indexes_decomp&#39;vc.5.1.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="mat_to_indexes_decomp&#39;vc.5.1.1.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="1.13" steps="18110"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_to_indexes_decomp&#39;vc.5.2" expl="rewrite premises" proved="true">
   <proof prover="9"><result status="valid" time="1.36" steps="21417"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mat_to_indexes_decomp&#39;vc.6" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="mat_to_indexes_decomp&#39;vc.6.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="indexes_decomp&#39;def">
    <goal name="mat_to_indexes_decomp&#39;vc.6.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(mat_sum (to_indexes m)
    (fun (o:(int, int)) -&gt;
      if mem o (to_indexes m) then basis_projection m (fir o) (sec o) else m))" arg2="(mat_sum (to_indexes m)
    ((fun (y0:int -&gt; int -&gt; matrix complex) (y1:(int, int)) -&gt; couple y0 y1)
     @ ((fun (y0:matrix complex) (y1:int) (y2:int) -&gt; basis_projection y0 y1 y2)
        @ m)))">
     <goal name="mat_to_indexes_decomp&#39;vc.6.0.0.0" expl="postcondition" proved="true">
     <proof prover="10"><result status="valid" time="0.66" steps="475455"/></proof>
     </goal>
     <goal name="mat_to_indexes_decomp&#39;vc.6.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="mat_sum_eq">
      <goal name="mat_to_indexes_decomp&#39;vc.6.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="1.91" steps="20918"/></proof>
      </goal>
      <goal name="mat_to_indexes_decomp&#39;vc.6.0.0.1.1" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_constant_size">
       <goal name="mat_to_indexes_decomp&#39;vc.6.0.0.1.1.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="3.32" steps="1128200"/></proof>
       </goal>
       <goal name="mat_to_indexes_decomp&#39;vc.6.0.0.1.1.1" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="mat_to_indexes_decomp&#39;vc.6.0.0.1.1.1.0" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="1.78" steps="20704"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="mat_to_indexes_decomp&#39;vc.6.0.0.1.2" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="mat_to_indexes_decomp&#39;vc.6.0.0.1.2.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="mat_to_indexes_decomp&#39;vc.6.0.0.1.2.0.0" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="1.58" steps="564104"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="basis_decomp&#39;vc" expl="VC for basis_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="basis_decomp&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.70" steps="485806"/></proof>
  </goal>
  <goal name="basis_decomp&#39;vc.1" expl="precondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="basis_decomp&#39;vc.1.0" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="( mem (basis_projection m 0 0) (basis_projections m))">
    <goal name="basis_decomp&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="rewrite" proved="true" arg1="rewrite_basis_projections">
     <goal name="basis_decomp&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="set_map_mem">
      <goal name="basis_decomp&#39;vc.1.0.0.0.0" expl="apply premises" proved="true">
      <transf name="exists" proved="true" arg1="(0,0)">
       <goal name="basis_decomp&#39;vc.1.0.0.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="basis_decomp&#39;vc.1.0.0.0.0.0.0" proved="true">
        <proof prover="10"><result status="valid" time="3.91" steps="1088257"/></proof>
        </goal>
        <goal name="basis_decomp&#39;vc.1.0.0.0.0.0.1" proved="true">
        <proof prover="10"><result status="valid" time="3.73" steps="1036801"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="basis_decomp&#39;vc.1.0.1" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="1.62" steps="605711"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="basis_decomp&#39;vc.2" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures3">
   <goal name="basis_decomp&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_s_rows">
    <goal name="basis_decomp&#39;vc.2.0.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.64" steps="488755"/></proof>
    </goal>
    <goal name="basis_decomp&#39;vc.2.0.1" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="basis_decomp&#39;vc.2.0.1.0" expl="apply premises" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="basis_decomp&#39;vc.2.0.1.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="p_id&#39;def">
       <goal name="basis_decomp&#39;vc.2.0.1.0.0.0" expl="apply premises" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="basis_decomp&#39;vc.2.0.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="basis_projections&#39;spec2">
         <goal name="basis_decomp&#39;vc.2.0.1.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="assert" proved="true" arg1="( mem (basis_projection m 0 0) (basis_projections m))
">
          <goal name="basis_decomp&#39;vc.2.0.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="rewrite" proved="true" arg1="rewrite_basis_projections">
           <goal name="basis_decomp&#39;vc.2.0.1.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
           <transf name="apply" proved="true" arg1="set_map_mem">
            <goal name="basis_decomp&#39;vc.2.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="exists" proved="true" arg1="(0,0)">
             <goal name="basis_decomp&#39;vc.2.0.1.0.0.0.0.0.0.0.0.0" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="basis_decomp&#39;vc.2.0.1.0.0.0.0.0.0.0.0.0.0" proved="true">
              <proof prover="10"><result status="valid" time="3.87" steps="1069218"/></proof>
              </goal>
              <goal name="basis_decomp&#39;vc.2.0.1.0.0.0.0.0.0.0.0.0.1" proved="true">
              <proof prover="10"><result status="valid" time="3.63" steps="1012001"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="basis_decomp&#39;vc.2.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="1.92" steps="624073"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="basis_decomp&#39;vc.3" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures3">
   <goal name="basis_decomp&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_s_columns">
    <goal name="basis_decomp&#39;vc.3.0.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.76" steps="488766"/></proof>
    </goal>
    <goal name="basis_decomp&#39;vc.3.0.1" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="basis_decomp&#39;vc.3.0.1.0" expl="apply premises" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="basis_decomp&#39;vc.3.0.1.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="p_id&#39;def">
       <goal name="basis_decomp&#39;vc.3.0.1.0.0.0" expl="apply premises" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="basis_decomp&#39;vc.3.0.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="basis_projections&#39;spec1">
         <goal name="basis_decomp&#39;vc.3.0.1.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="assert" proved="true" arg1="( mem (basis_projection m 0 0) (basis_projections m))
">
          <goal name="basis_decomp&#39;vc.3.0.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="rewrite" proved="true" arg1="rewrite_basis_projections">
           <goal name="basis_decomp&#39;vc.3.0.1.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
           <transf name="apply" proved="true" arg1="set_map_mem">
            <goal name="basis_decomp&#39;vc.3.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="exists" proved="true" arg1="(0,0)">
             <goal name="basis_decomp&#39;vc.3.0.1.0.0.0.0.0.0.0.0.0" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="basis_decomp&#39;vc.3.0.1.0.0.0.0.0.0.0.0.0.0" proved="true">
              <proof prover="10"><result status="valid" time="2.06" steps="694631"/></proof>
              </goal>
              <goal name="basis_decomp&#39;vc.3.0.1.0.0.0.0.0.0.0.0.0.1" proved="true">
              <proof prover="10"><result status="valid" time="3.30" steps="1021932"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="basis_decomp&#39;vc.3.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="1.54" steps="624469"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="indexes_basis_decomp_equal_pre&#39;vc" expl="VC for indexes_basis_decomp_equal_pre" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="indexes_basis_decomp_equal_pre&#39;vc.0" expl="VC for indexes_basis_decomp_equal_pre" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.67" steps="273033"/></proof>
   </goal>
   <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.75" steps="271928"/></proof>
   </goal>
   <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.2" expl="precondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.2.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="basis_projections&#39;def">
     <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.2.0.0" expl="precondition" proved="true">
     <transf name="apply" proved="true" arg1="set_map_mem">
      <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.2.0.0.0" expl="apply premises" proved="true">
      <transf name="exists" proved="true" arg1="(i,j)">
       <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.2.0.0.0.0" proved="true">
       <proof prover="10"><result status="valid" time="1.97" steps="661005"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.3" expl="precondition" proved="true">
   <transf name="compute_hyp" proved="true" >
    <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.3.0" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(exists i1 j1. valid_index m i1 j1 &amp;&amp; k = basis_projection m i1 j1 &amp;&amp; (i1 = i -&gt; j1 &lt;&gt; j))">
     <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.3.0.0" expl="asserted formula" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.3.0.0.0" expl="asserted formula" proved="true">
      <transf name="rewrite" proved="true" arg1="basis_projections&#39;def" arg2="in" arg3="H1">
       <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.3.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (o:(int, int)) -&gt;
     if valid_index m (fir o) (sec o) then basis_projection m (fir o) (sec o)
     else m),(to_indexes m),k">
        <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.3.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="destruct" proved="true" arg1="Hinst">
         <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.3.0.0.0.0.0.0" expl="destruct premise" proved="true">
         <transf name="apply" proved="true" arg1="H1">
         </transf>
         </goal>
         <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.3.0.0.0.0.0.1" expl="asserted formula" proved="true">
         <transf name="destruct" proved="true" arg1="Hinst">
          <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.3.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
          <transf name="exists" proved="true" arg1="(fir a)">
           <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.3.0.0.0.0.0.1.0.0" proved="true">
           <transf name="exists" proved="true" arg1="(sec a)">
            <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.3.0.0.0.0.0.1.0.0.0" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.3.0.0.0.0.0.1.0.0.0.0" proved="true">
             <proof prover="10"><result status="valid" time="1.59" steps="603720"/></proof>
             </goal>
             <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.3.0.0.0.0.0.1.0.0.0.1" proved="true">
             <proof prover="10"><result status="valid" time="1.56" steps="604209"/></proof>
             </goal>
             <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.3.0.0.0.0.0.1.0.0.0.2" proved="true">
             <proof prover="10"><result status="valid" time="1.20" steps="579467"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.3.0.1" expl="precondition" proved="true">
     <proof prover="10"><result status="valid" time="1.62" steps="602741"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.4" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.4.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="basis_decomp&#39;def">
     <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.4.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="mat_sum_to_sum_pre">
      <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.4.0.0.0" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="(sum (basis_projections m)
    (fun (e:matrix complex) -&gt; get ((fun (y0:matrix complex) -&gt; p_id y0) @ e) i j))" arg2="(sum (basis_projections m) (fun (mat:matrix complex) -&gt; get mat i j))
">
       <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.4.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="Ensures">
        <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.4.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.4.0.0.0.0.0.0" expl="postcondition" proved="true">
         <proof prover="10"><result status="valid" time="1.25" steps="602042"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.4.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="sum_eq">
        <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.4.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.4.0.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.4.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="1.28" steps="604136"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.4.0.0.1" expl="rewrite premises" proved="true">
      <transf name="assert" proved="true" arg1="(rows m &gt;0)">
       <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.4.0.0.1.0" expl="asserted formula" proved="true">
       <proof prover="10"><result status="valid" time="1.61" steps="623981"/></proof>
       </goal>
       <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.4.0.0.1.1" expl="rewrite premises" proved="true">
       <transf name="assert" proved="true" arg1="(columns m &gt;0)">
        <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.4.0.0.1.1.0" expl="asserted formula" proved="true">
        <proof prover="10"><result status="valid" time="1.63" steps="623998"/></proof>
        </goal>
        <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.4.0.0.1.1.1" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.90" steps="577563"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.4.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="4.04" steps="1217095"/></proof>
      </goal>
      <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.4.0.0.3" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.4.0.0.3.0" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="1.61" steps="623985"/></proof>
       </goal>
       <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.4.0.0.3.1" expl="rewrite premises" proved="true">
       <transf name="replace" proved="true" arg1="(s_rows (basis_projections m) (fun (y0:matrix complex) -&gt; p_id y0))" arg2="(rows m)
">
        <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.4.0.0.3.1.0" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="1.94" steps="623981"/></proof>
        </goal>
        <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.4.0.0.3.1.1" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="set_s_rows">
         <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.4.0.0.3.1.1.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="0.87" steps="577523"/></proof>
         </goal>
         <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.4.0.0.3.1.1.1" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="4.76" steps="1266314"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.4.0.0.4" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.4.0.0.4.0" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="1.85" steps="623985"/></proof>
       </goal>
       <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.4.0.0.4.1" expl="rewrite premises" proved="true">
       <transf name="replace" proved="true" arg1="(s_columns (basis_projections m) (fun (y0:matrix complex) -&gt; p_id y0))" arg2="(columns m)
">
        <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.4.0.0.4.1.0" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="1.88" steps="623981"/></proof>
        </goal>
        <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.4.0.0.4.1.1" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="set_s_columns">
         <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.4.0.0.4.1.1.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="0.89" steps="577523"/></proof>
         </goal>
         <goal name="indexes_basis_decomp_equal_pre&#39;vc.0.4.0.0.4.1.1.1" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="4.30" steps="1266354"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="indexes_basis_decomp_equal&#39;vc" expl="VC for indexes_basis_decomp_equal" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="indexes_basis_decomp_equal&#39;vc.0" expl="VC for indexes_basis_decomp_equal" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="indexes_basis_decomp_equal&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.53" steps="256693"/></proof>
   </goal>
   <goal name="indexes_basis_decomp_equal&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.53" steps="256710"/></proof>
   </goal>
   <goal name="indexes_basis_decomp_equal&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.58" steps="258374"/></proof>
   </goal>
   <goal name="indexes_basis_decomp_equal&#39;vc.0.3" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(indexes_decomp m)" arg2="m">
    <goal name="indexes_basis_decomp_equal&#39;vc.0.3.0" expl="postcondition" proved="true">
    <proof prover="10"><result status="valid" time="0.57" steps="257098"/></proof>
    </goal>
    <goal name="indexes_basis_decomp_equal&#39;vc.0.3.1" expl="equality hypothesis" proved="true">
    <proof prover="10"><result status="valid" time="0.56" steps="257094"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_to_basis_decomp&#39;vc" expl="VC for mat_to_basis_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_to_basis_decomp&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.31" steps="236059"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="product_mat_sum_r_pre&#39;vc" expl="VC for product_mat_sum_r_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="product_mat_sum_r_pre&#39;vc.0" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.89" steps="340428"/></proof>
  </goal>
  <goal name="product_mat_sum_r_pre&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.80" steps="353462"/></proof>
  </goal>
  <goal name="product_mat_sum_r_pre&#39;vc.2" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="product_mat_sum_r_pre&#39;vc.2.0" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="1.15" steps="457977"/></proof>
   </goal>
   <goal name="product_mat_sum_r_pre&#39;vc.2.1" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="1.18" steps="456982"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="product_mat_sum_r_pre&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.75" steps="356614"/></proof>
  </goal>
  <goal name="product_mat_sum_r_pre&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.44" steps="335674"/></proof>
  </goal>
  <goal name="product_mat_sum_r_pre&#39;vc.5" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.84" steps="353742"/></proof>
  </goal>
  <goal name="product_mat_sum_r_pre&#39;vc.6" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="product_mat_sum_r_pre&#39;vc.6.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="product_mat_sum_r_pre&#39;vc.6.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="product_mat_sum_r_pre&#39;vc.6.0.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.87" steps="375753"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="product_mat_sum_r_pre&#39;vc.6.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="product_mat_sum_r_pre&#39;vc.6.1.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="2.92" steps="1047212"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="product_mat_sum_r_pre&#39;vc.7" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.96" steps="376148"/></proof>
  </goal>
  <goal name="product_mat_sum_r_pre&#39;vc.8" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.76" steps="357197"/></proof>
  </goal>
  <goal name="product_mat_sum_r_pre&#39;vc.9" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.80" steps="355196"/></proof>
  </goal>
  <goal name="product_mat_sum_r_pre&#39;vc.10" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.97" steps="376447"/></proof>
  </goal>
  <goal name="product_mat_sum_r_pre&#39;vc.11" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="product_mat_sum_r_pre&#39;vc.11.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="product_mat_sum_r_pre&#39;vc.11.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="product_mat_sum_r_pre&#39;vc.11.0.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="1.09" steps="379494"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="product_mat_sum_r_pre&#39;vc.11.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="product_mat_sum_r_pre&#39;vc.11.1.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="3.91" steps="1261074"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="product_mat_sum_r_pre&#39;vc.12" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="product_mat_sum_r_pre&#39;vc.12.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="goal_comm">
    <goal name="product_mat_sum_r_pre&#39;vc.12.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_s_rows">
     <goal name="product_mat_sum_r_pre&#39;vc.12.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="product_mat_sum_r_pre&#39;vc.12.0.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="product_mat_sum_r_pre&#39;vc.12.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="product_mat_sum_r_pre&#39;vc.12.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="1.11" steps="380527"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="product_mat_sum_r_pre&#39;vc.12.0.0.0.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="product_mat_sum_r_pre&#39;vc.12.0.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="4.28" steps="1368482"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="product_mat_sum_r_pre&#39;vc.12.0.0.1" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="product_mat_sum_r_pre&#39;vc.12.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.05" steps="379441"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="product_mat_sum_r_pre&#39;vc.13" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="product_mat_sum_r_pre&#39;vc.13.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="goal_comm">
    <goal name="product_mat_sum_r_pre&#39;vc.13.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_s_columns">
     <goal name="product_mat_sum_r_pre&#39;vc.13.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="product_mat_sum_r_pre&#39;vc.13.0.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="product_mat_sum_r_pre&#39;vc.13.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="product_mat_sum_r_pre&#39;vc.13.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="1.04" steps="381706"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="product_mat_sum_r_pre&#39;vc.13.0.0.0.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="product_mat_sum_r_pre&#39;vc.13.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="product_mat_sum_r_pre&#39;vc.13.0.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="1.07" steps="380975"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="product_mat_sum_r_pre&#39;vc.13.0.0.1" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="product_mat_sum_r_pre&#39;vc.13.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="3.89" steps="1189495"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="product_mat_sum_r_pre&#39;vc.14" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.84" steps="355584"/></proof>
  </goal>
  <goal name="product_mat_sum_r_pre&#39;vc.15" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="product_mat_sum_r_pre&#39;vc.15.0" expl="variant decrease" proved="true">
   <proof prover="10"><result status="valid" time="0.74" steps="358192"/></proof>
   </goal>
   <goal name="product_mat_sum_r_pre&#39;vc.15.1" expl="variant decrease" proved="true">
   <proof prover="10"><result status="valid" time="0.93" steps="379732"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="product_mat_sum_r_pre&#39;vc.16" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.44" steps="338823"/></proof>
  </goal>
  <goal name="product_mat_sum_r_pre&#39;vc.17" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.43" steps="338826"/></proof>
  </goal>
  <goal name="product_mat_sum_r_pre&#39;vc.18" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="1.00" steps="380732"/></proof>
  </goal>
  <goal name="product_mat_sum_r_pre&#39;vc.19" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.95" steps="379852"/></proof>
  </goal>
  <goal name="product_mat_sum_r_pre&#39;vc.20" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="product_mat_sum_r_pre&#39;vc.20.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="product_mat_sum_r_pre&#39;vc.20.0.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="1.14" steps="389709"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="product_mat_sum_r_pre&#39;vc.20.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="product_mat_sum_r_pre&#39;vc.20.1.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="1.04" steps="388378"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="product_mat_sum_r_pre&#39;vc.21" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.94" steps="380727"/></proof>
  </goal>
  <goal name="product_mat_sum_r_pre&#39;vc.22" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="1.02" steps="383918"/></proof>
  </goal>
  <goal name="product_mat_sum_r_pre&#39;vc.23" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="1.10" steps="385265"/></proof>
  </goal>
  <goal name="product_mat_sum_r_pre&#39;vc.24" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.79" steps="357368"/></proof>
  </goal>
  <goal name="product_mat_sum_r_pre&#39;vc.25" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="(add_mat (f @ choose s&#39;) (mat_sum (remove (choose s&#39;) s&#39;) f))" arg2="(mat_sum s&#39; f)" arg3="in" arg4="Ensures">
   <goal name="product_mat_sum_r_pre&#39;vc.25.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures">
    <goal name="product_mat_sum_r_pre&#39;vc.25.0.0" expl="assertion" proved="true">
    <transf name="replace" proved="true" arg1="(add (choose s&#39;) (remove (choose s&#39;) s&#39;))" arg2="s&#39;" arg3="in" arg4="Ensures11">
     <goal name="product_mat_sum_r_pre&#39;vc.25.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures11">
      <goal name="product_mat_sum_r_pre&#39;vc.25.0.0.0.0" expl="assertion" proved="true">
      <transf name="rewrite" proved="true" arg1="Ensures9">
       <goal name="product_mat_sum_r_pre&#39;vc.25.0.0.0.0.0" expl="assertion" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="product_mat_sum_r_pre&#39;vc.25.0.0.0.0.0.0" expl="assertion" proved="true">
        <transf name="replace" proved="true" arg1="(mat_sum (remove (choose s&#39;) s&#39;)
     (fun (a1:a) -&gt; if mem a1 s then mat_mult m (f @ a1) else m))" arg2="(mat_sum (remove (choose s&#39;) s&#39;) (fun (a1:a) -&gt; mat_mult m (f @ a1)))
">
         <goal name="product_mat_sum_r_pre&#39;vc.25.0.0.0.0.0.0.0" expl="assertion" proved="true">
         <transf name="replace" proved="true" arg1="(if mem (choose s&#39;) s then mat_mult m (f @ choose s&#39;) else m)" arg2="(mat_mult m (f @ choose s&#39;))">
          <goal name="product_mat_sum_r_pre&#39;vc.25.0.0.0.0.0.0.0.0" expl="assertion" proved="true">
          <transf name="compute_specified" proved="true" >
          </transf>
          </goal>
          <goal name="product_mat_sum_r_pre&#39;vc.25.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="10"><result status="valid" time="1.17" steps="385558"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="product_mat_sum_r_pre&#39;vc.25.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="mat_sum_eq">
          <goal name="product_mat_sum_r_pre&#39;vc.25.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="1.07" steps="381754"/></proof>
          </goal>
          <goal name="product_mat_sum_r_pre&#39;vc.25.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="1.05" steps="381549"/></proof>
          </goal>
          <goal name="product_mat_sum_r_pre&#39;vc.25.0.0.0.0.0.0.1.2" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="product_mat_sum_r_pre&#39;vc.25.0.0.0.0.0.0.1.2.0" expl="apply premises" proved="true">
           <proof prover="10"><result status="valid" time="1.26" steps="388697"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="product_mat_sum_r_pre&#39;vc.25.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="10"><result status="valid" time="0.90" steps="381257"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="product_mat_sum_r_pre&#39;vc.25.1" expl="equality hypothesis" proved="true">
   <proof prover="10"><result status="valid" time="1.16" steps="384861"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="product_mat_sum_r_pre&#39;vc.26" expl="postcondition" proved="true">
  <transf name="eliminate_let" proved="true" >
   <goal name="product_mat_sum_r_pre&#39;vc.26.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="product_mat_sum_r_pre&#39;vc.26.0.0" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(cardinal s&#39; =1)">
     <goal name="product_mat_sum_r_pre&#39;vc.26.0.0.0" expl="true case (postcondition)" proved="true">
     <proof prover="10"><result status="valid" time="1.22" steps="430426"/></proof>
     </goal>
     <goal name="product_mat_sum_r_pre&#39;vc.26.0.0.1" expl="false case (postcondition)" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="product_mat_sum_r_pre&#39;vc.26.0.0.1.0" expl="destruct premise" proved="true">
      <proof prover="10"><result status="valid" time="0.54" steps="387441"/></proof>
      </goal>
      <goal name="product_mat_sum_r_pre&#39;vc.26.0.0.1.1" expl="false case (postcondition)" proved="true">
      <transf name="destruct" proved="true" arg1="H">
       <goal name="product_mat_sum_r_pre&#39;vc.26.0.0.1.1.0" expl="false case (postcondition)" proved="true">
       <proof prover="10"><result status="valid" time="0.51" steps="387531"/></proof>
       </goal>
       <goal name="product_mat_sum_r_pre&#39;vc.26.0.0.1.1.1" expl="false case (postcondition)" proved="true">
       <transf name="apply" proved="true" arg1="H">
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="product_mat_sum_r_pre&#39;vc.27" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="product_mat_sum_r_pre&#39;vc.27.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="mat_sum_eq">
    <goal name="product_mat_sum_r_pre&#39;vc.27.0.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.47" steps="337346"/></proof>
    </goal>
    <goal name="product_mat_sum_r_pre&#39;vc.27.0.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="product_mat_sum_r_pre&#39;vc.27.0.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="product_mat_sum_r_pre&#39;vc.27.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="0.90" steps="365759"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="product_mat_sum_r_pre&#39;vc.27.0.1.1" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="product_mat_sum_r_pre&#39;vc.27.0.1.1.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.28" steps="395897"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="product_mat_sum_r_pre&#39;vc.27.0.2" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="product_mat_sum_r_pre&#39;vc.27.0.2.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.85" steps="359413"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="product_mat_sum_r_pre&#39;vc.28" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="product_mat_sum_r_pre&#39;vc.28.0" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.91" steps="340737"/></proof>
   </goal>
   <goal name="product_mat_sum_r_pre&#39;vc.28.1" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="5.93" steps="1140198"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="product_mat_sum_r_pre&#39;vc.29" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="product_mat_sum_r_pre&#39;vc.29.0" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.92" steps="340916"/></proof>
   </goal>
   <goal name="product_mat_sum_r_pre&#39;vc.29.1" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="5.88" steps="1145436"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="product_mat_sum_r_pre&#39;vc.30" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.83" steps="357365"/></proof>
  </goal>
  <goal name="product_mat_sum_r_pre&#39;vc.31" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.82" steps="357446"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="product_mat_sum_r&#39;vc" expl="VC for product_mat_sum_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="product_mat_sum_r&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.42" steps="301367"/></proof>
  </goal>
  <goal name="product_mat_sum_r&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.42" steps="301370"/></proof>
  </goal>
  <goal name="product_mat_sum_r&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.75" steps="320381"/></proof>
  </goal>
  <goal name="product_mat_sum_r&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.44" steps="302232"/></proof>
  </goal>
  <goal name="product_mat_sum_r&#39;vc.4" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="mat_sum_eq">
   <goal name="product_mat_sum_r&#39;vc.4.0" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.45" steps="302208"/></proof>
   </goal>
   <goal name="product_mat_sum_r&#39;vc.4.1" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="product_mat_sum_r&#39;vc.4.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="product_mat_sum_r&#39;vc.4.1.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="product_mat_sum_r&#39;vc.4.1.0.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="0.83" steps="360046"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="product_mat_sum_r&#39;vc.4.1.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="product_mat_sum_r&#39;vc.4.1.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="product_mat_sum_r&#39;vc.4.1.1.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.05" steps="378394"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="product_mat_sum_r&#39;vc.4.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="product_mat_sum_r&#39;vc.4.2.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="1.07" steps="374886"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="product_mat_sum_r&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="2.43" steps="844178"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="product_mat_sum_r_rev&#39;vc" expl="VC for product_mat_sum_r_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="product_mat_sum_r_rev&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.42" steps="301892"/></proof>
  </goal>
  <goal name="product_mat_sum_r_rev&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.42" steps="301895"/></proof>
  </goal>
  <goal name="product_mat_sum_r_rev&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.44" steps="301900"/></proof>
  </goal>
  <goal name="product_mat_sum_r_rev&#39;vc.3" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="product_mat_sum_r_rev&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="compute_specified" proved="true" >
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="p_injective_proj&#39;vc" expl="VC for p_injective_proj" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="p_injective_proj&#39;vc.0" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(mem o (to_indexes m))">
   <goal name="p_injective_proj&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="rewrite" proved="true" arg1="nonn_mat_subset&#39;def" arg2="in" arg3="H">
    <goal name="p_injective_proj&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <proof prover="10"><result status="valid" time="0.76" steps="336471"/></proof>
    </goal>
    <goal name="p_injective_proj&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="p_injective_proj&#39;vc.0.0.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="p_injective_proj&#39;vc.0.0.1.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="p_injective_proj&#39;vc.0.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="0.49" steps="1484329"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="p_injective_proj&#39;vc.0.0.1.1" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="p_injective_proj&#39;vc.0.0.1.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="p_injective_proj&#39;vc.0.0.1.1.0.0" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="0.47" steps="1487536"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="p_injective_proj&#39;vc.0.1" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="1.60" steps="550843"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="p_injective_proj&#39;vc.1" expl="assertion" proved="true">
  <transf name="case" proved="true" arg1="(get (basis_projection m (fir o) (sec o)) (fir o) (sec o) = c_zero)">
   <goal name="p_injective_proj&#39;vc.1.0" expl="true case (assertion)" proved="true">
   <transf name="assert" proved="true" arg1="((basis_projection m (fir o) (sec o))  = make (rows m) (columns m) c_zero)">
    <goal name="p_injective_proj&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_mat">
     <goal name="p_injective_proj&#39;vc.1.0.0.0" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="3.54" steps="1004268"/></proof>
     </goal>
     <goal name="p_injective_proj&#39;vc.1.0.0.1" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="3.50" steps="1000470"/></proof>
     </goal>
     <goal name="p_injective_proj&#39;vc.1.0.0.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="p_injective_proj&#39;vc.1.0.0.2.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="3.44" steps="1017539"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="p_injective_proj&#39;vc.1.0.1" expl="true case (assertion)" proved="true">
    <transf name="assert" proved="true" arg1="false">
     <goal name="p_injective_proj&#39;vc.1.0.1.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="(not (basis_projection m (fir o) (sec o) = make (rows m) (columns m) c_zero))">
      <goal name="p_injective_proj&#39;vc.1.0.1.0.0" expl="asserted formula" proved="true">
      <transf name="instantiate" proved="true" arg1="mat_subset_nonn_elt" arg2="((fun (y0:int -&gt; int -&gt; matrix complex) (y1:(int, int)) -&gt; couple y0 y1)
    @ ((fun (y0:matrix complex) (y1:int) (y2:int) -&gt; basis_projection y0 y1 y2) @ m)),(to_indexes m)
">
       <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0" expl="asserted formula" proved="true">
       <transf name="replace" proved="true" arg1="(s_rows (to_indexes m)
           ((fun (y0:int -&gt; int -&gt; matrix complex) (y1:(int, int)) -&gt; couple y0 y1)
            @ ((fun (y0:matrix complex) (y1:int) (y2:int) -&gt;
                 basis_projection y0 y1 y2)
               @ m)))" arg2="(rows m)" arg3="in" arg4="Hinst">
        <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="replace" proved="true" arg1="(s_columns (to_indexes m)
           ((fun (y0:int -&gt; int -&gt; matrix complex) (y1:(int, int)) -&gt; couple y0 y1)
            @ ((fun (y0:matrix complex) (y1:int) (y2:int) -&gt;
                 basis_projection y0 y1 y2)
               @ m)))" arg2="(columns m)" arg3="in" arg4="Hinst">
         <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="destruct" proved="true" arg1="Hinst">
          <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.0.0.0" expl="destruct premise" proved="true">
          <transf name="apply" proved="true" arg1="set_constant_size">
           <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="7"><result status="valid" time="0.51" steps="1554509"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
            <proof prover="7"><result status="valid" time="0.51" steps="1544584"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.0.0.1" expl="asserted formula" proved="true">
          <proof prover="10"><result status="valid" time="3.37" steps="956481"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="set_s_columns">
          <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="set_constant_size">
           <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
             <transf name="eliminate_definition" proved="true" >
              <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="split_all_full" proved="true" >
               <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="10"><result status="valid" time="3.83" steps="1006729"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.0.1.0.1" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
             <proof prover="7"><result status="valid" time="0.51" steps="1544126"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.0.1.1" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.0.1.1.0" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="(couple (fun (y1:int) (y2:int) -&gt; basis_projection m y1 y2)
   (choose (to_indexes m)))" arg2="(basis_projection m (fir (choose (to_indexes m)))(sec (choose (to_indexes m))))">
            <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
            <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
             <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="basis_projection&#39;def">
              <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="10"><result status="valid" time="3.67" steps="1318395"/></proof>
              </goal>
              <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.0.1.1.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="10"><result status="valid" time="4.00" steps="1346326"/></proof>
              </goal>
              <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.0.1.1.0.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="10"><result status="valid" time="4.11" steps="1341552"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.0.1.1.0.1" expl="equality hypothesis" proved="true">
            <proof prover="10"><result status="valid" time="1.45" steps="493232"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0" expl="equality hypothesis" proved="true">
         <transf name="replace" proved="true" arg1="(s_columns (to_indexes m)
           ((fun (y0:int -&gt; int -&gt; matrix complex) (y1:(int, int)) -&gt; couple y0 y1)
            @ ((fun (y0:matrix complex) (y1:int) (y2:int) -&gt;
                 basis_projection y0 y1 y2)
               @ m)))" arg2="(columns m)" arg3="in" arg4="Hinst">
          <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
          <transf name="destruct" proved="true" arg1="Hinst">
           <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.0.0" expl="destruct premise" proved="true">
           <transf name="apply" proved="true" arg1="set_constant_size">
            <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="7"><result status="valid" time="0.49" steps="1554509"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.0.0.1.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.0.0.1.0.0" expl="apply premises" proved="true">
              <transf name="replace" proved="true" arg1="(couple (fun (y1:int) (y2:int) -&gt; basis_projection m y1 y2) e&#39;)" arg2="(basis_projection m (fir e&#39;) (sec e&#39;))">
               <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.0.0.1.0.0.0" expl="apply premises" proved="true">
               <transf name="replace" proved="true" arg1="(couple (fun (y1:int) (y2:int) -&gt; basis_projection m y1 y2) e)" arg2="(basis_projection m (fir e) (sec e))">
                <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="9"><result status="valid" time="1.12" steps="18312"/></proof>
                </goal>
                <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
                <proof prover="10"><result status="valid" time="1.42" steps="490185"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
               <proof prover="10"><result status="valid" time="1.38" steps="490185"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
           <transf name="apply" proved="true" arg1="set_s_rows">
            <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.0.1.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="set_constant_size">
             <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.0.1.0.0" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
              <proof prover="7"><result status="valid" time="0.49" steps="1556657"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.0.1.0.1" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.0.1.0.1.0" expl="apply premises" proved="true">
              <proof prover="7"><result status="valid" time="0.50" steps="1546609"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.0.1.1" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(couple (fun (y1:int) (y2:int) -&gt; basis_projection m y1 y2)
   (choose (to_indexes m)))" arg2="(basis_projection m (fir (choose (to_indexes m)))(sec (choose (to_indexes m))))">
             <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.0.1.1.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.0.1.1.0.0" expl="apply premises" proved="true">
              <transf name="replace" proved="true" arg1="(couple (fun (y1:int) (y2:int) -&gt; basis_projection m y1 y2)
   (choose (to_indexes m)))" arg2="(basis_projection m (fir (choose (to_indexes m)))(sec (choose (to_indexes m))))">
               <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.0.1.1.0.0.0" expl="apply premises" proved="true">
               <transf name="split_all_full" proved="true" >
                <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="10"><result status="valid" time="3.91" steps="1024357"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.0.1.1.0.0.1" expl="equality hypothesis" proved="true">
               <proof prover="10"><result status="valid" time="1.44" steps="491891"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.0.1.1.1" expl="equality hypothesis" proved="true">
             <proof prover="10"><result status="valid" time="1.44" steps="491891"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="set_s_columns">
           <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.1.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="set_constant_size">
            <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
              <transf name="replace" proved="true" arg1="(couple (fun (y1:int) (y2:int) -&gt; basis_projection m y1 y2) e&#39;)" arg2="(basis_projection m (fir e&#39;) (sec e&#39;))">
               <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.1.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="replace" proved="true" arg1="(couple (fun (y1:int) (y2:int) -&gt; basis_projection m y1 y2) e)" arg2="(basis_projection m (fir e) (sec e))">
                <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="9"><result status="valid" time="1.12" steps="18314"/></proof>
                </goal>
                <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.1.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                <proof prover="10"><result status="valid" time="1.41" steps="491750"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
               <proof prover="10"><result status="valid" time="1.36" steps="491750"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.1.0.1" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.1.0.1.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.1.0.1.0.0" expl="apply premises" proved="true">
              <transf name="replace" proved="true" arg1="(couple (fun (y1:int) (y2:int) -&gt; basis_projection m y1 y2) e)" arg2="(basis_projection m (fir e) (sec e))">
               <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.1.0.1.0.0.0" expl="apply premises" proved="true">
               <transf name="replace" proved="true" arg1="(couple (fun (y1:int) (y2:int) -&gt; basis_projection m y1 y2) e&#39;)" arg2="(basis_projection m (fir e&#39;) (sec e&#39;))">
                <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="9"><result status="valid" time="1.04" steps="18489"/></proof>
                </goal>
                <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.1.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
                <proof prover="10"><result status="valid" time="1.46" steps="491750"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.1.0.1.0.0.1" expl="equality hypothesis" proved="true">
               <proof prover="10"><result status="valid" time="1.40" steps="491750"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.1.1" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.1.1.0" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(couple (fun (y1:int) (y2:int) -&gt; basis_projection m y1 y2)
   (choose (to_indexes m)))" arg2="(basis_projection m (fir (choose (to_indexes m)))(sec (choose (to_indexes m))))">
             <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.1.1.0.0" expl="apply premises" proved="true">
             <transf name="split_all_full" proved="true" >
              <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.1.1.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="basis_projection&#39;spec4">
               <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.1.1.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="10"><result status="valid" time="0.77" steps="512997"/></proof>
               </goal>
               <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.1.1.0.0.0.1" expl="rewrite premises" proved="true">
               <transf name="eliminate_definition" proved="true" >
                <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.1.1.0.0.0.1.0" expl="rewrite premises" proved="true">
                <transf name="assert" proved="true" arg1="(mem ( fir (choose (to_indexes m))) (to_fset 0 (rows m)))">
                 <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.1.1.0.0.0.1.0.0" expl="asserted formula" proved="true">
                 <proof prover="10"><result status="valid" time="2.00" steps="634800"/></proof>
                 </goal>
                 <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.1.1.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                 <proof prover="10"><result status="valid" time="1.66" steps="563708"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.1.1.0.0.0.2" expl="rewrite premises" proved="true">
               <transf name="assert" proved="true" arg1="(mem ( sec (choose (to_indexes m))) (to_fset 0 (columns m)))">
                <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.1.1.0.0.0.2.0" expl="asserted formula" proved="true">
                <proof prover="10"><result status="valid" time="1.66" steps="633562"/></proof>
                </goal>
                <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.1.1.0.0.0.2.1" expl="rewrite premises" proved="true">
                <proof prover="10"><result status="valid" time="1.31" steps="561906"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="p_injective_proj&#39;vc.1.0.1.0.0.0.1.0.1.1.0.1" expl="equality hypothesis" proved="true">
             <proof prover="10"><result status="valid" time="1.23" steps="493242"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="p_injective_proj&#39;vc.1.0.1.0.1" expl="asserted formula" proved="true">
      <proof prover="10"><result status="valid" time="0.72" steps="446313"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="p_injective_proj&#39;vc.1.0.1.1" expl="true case (assertion)" proved="true">
     <proof prover="10"><result status="valid" time="0.71" steps="446500"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="p_injective_proj&#39;vc.1.1" expl="false case (assertion)" proved="true">
   <proof prover="10"><result status="valid" time="1.89" steps="629920"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="p_injective_proj&#39;vc.2" expl="assertion" proved="true">
  <transf name="case" proved="true" arg1="(fir o = fir o&#39;)">
   <goal name="p_injective_proj&#39;vc.2.0" expl="true case (assertion)" proved="true">
   <proof prover="10"><result status="valid" time="1.43" steps="487814"/></proof>
   </goal>
   <goal name="p_injective_proj&#39;vc.2.1" expl="false case (assertion)" proved="true">
   <proof prover="10"><result status="valid" time="1.34" steps="487857"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="p_injective_proj&#39;vc.3" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_injective">
   <goal name="p_injective_proj&#39;vc.3.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="p_injective_proj&#39;vc.3.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="p_injective_proj&#39;vc.3.0.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(couple (fun (y1:int) (y2:int) -&gt; basis_projection m y1 y2)
   e)" arg2="(basis_projection m (fir e)(sec e))">
      <goal name="p_injective_proj&#39;vc.3.0.0.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(couple (fun (y1:int) (y2:int) -&gt; basis_projection m y1 y2)
   e&#39;)" arg2="(basis_projection m (fir e&#39;)(sec e&#39;))">
       <goal name="p_injective_proj&#39;vc.3.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="10"><result status="valid" time="1.71" steps="546227"/></proof>
       </goal>
       <goal name="p_injective_proj&#39;vc.3.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="10"><result status="valid" time="1.42" steps="488325"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="p_injective_proj&#39;vc.3.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="10"><result status="valid" time="1.45" steps="488325"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_decomp_equal_indexes&#39;vc" expl="VC for mat_decomp_equal_indexes" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_decomp_equal_indexes&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.53" steps="253811"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Diag_mat" proved="true">
 <goal name="diag_mat&#39;vc" expl="VC for diag_mat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="diag_mat&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.28" steps="255875"/></proof>
  </goal>
  <goal name="diag_mat&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.26" steps="255881"/></proof>
  </goal>
  <goal name="diag_mat&#39;vc.2" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="diag_mat&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="is_diagonal&#39;def">
    <goal name="diag_mat&#39;vc.2.0.0" expl="VC for diag_mat" proved="true">
    <transf name="exists" proved="true" arg1="f">
     <goal name="diag_mat&#39;vc.2.0.0.0" proved="true">
     <transf name="apply" proved="true" arg1="set_equal_mat">
      <goal name="diag_mat&#39;vc.2.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="0.77" steps="290749"/></proof>
      </goal>
      <goal name="diag_mat&#39;vc.2.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="0.79" steps="290686"/></proof>
      </goal>
      <goal name="diag_mat&#39;vc.2.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="0.74" steps="290917"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="diag_mat&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.33" steps="258917"/></proof>
  </goal>
  <goal name="diag_mat&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.37" steps="258920"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="diag_mat_rows&#39;vc" expl="VC for diag_mat_rows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="diag_mat_rows&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.65" steps="259797"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="diag_mat_columns&#39;vc" expl="VC for diag_mat_columns" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="diag_mat_columns&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.65" steps="259919"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="diag_mat_values&#39;vc" expl="VC for diag_mat_values" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="diag_mat_values&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="diag_mat&#39;def">
   <goal name="diag_mat_values&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="assert_make">
    <goal name="diag_mat_values&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
    <goal name="diag_mat_values&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.26" steps="197572"/></proof>
    </goal>
    <goal name="diag_mat_values&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.26" steps="197572"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="diag_mat_values&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="10"><result status="valid" time="0.27" steps="197565"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="diagonal&#39;vc" expl="VC for diagonal" proved="true">
 <proof prover="10"><result status="valid" time="0.20" steps="197740"/></proof>
 </goal>
 <goal name="diag_mat_add&#39;vc" expl="VC for diag_mat_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="diag_mat_add&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.34" steps="227512"/></proof>
  </goal>
  <goal name="diag_mat_add&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.33" steps="230876"/></proof>
  </goal>
  <goal name="diag_mat_add&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.31" steps="230921"/></proof>
  </goal>
  <goal name="diag_mat_add&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.52" steps="246715"/></proof>
  </goal>
  <goal name="diag_mat_add&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.51" steps="246732"/></proof>
  </goal>
  <goal name="diag_mat_add&#39;vc.5" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.51" steps="246407"/></proof>
  </goal>
  <goal name="diag_mat_add&#39;vc.6" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.54" steps="246419"/></proof>
  </goal>
  <goal name="diag_mat_add&#39;vc.7" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="add_value">
   <goal name="diag_mat_add&#39;vc.7.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="diag_mat&#39;def">
    <goal name="diag_mat_add&#39;vc.7.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="diag_mat&#39;def">
     <goal name="diag_mat_add&#39;vc.7.0.0.0" expl="precondition" proved="true">
     <transf name="rewrite" proved="true" arg1="assert_make">
      <goal name="diag_mat_add&#39;vc.7.0.0.0.0" expl="precondition" proved="true">
      <transf name="rewrite" proved="true" arg1="assert_make">
       <goal name="diag_mat_add&#39;vc.7.0.0.0.0.0" expl="precondition" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="diag_mat_add&#39;vc.7.0.0.0.0.0.0" expl="precondition" proved="true">
        <transf name="rewrite" proved="true" arg1="diag_mat&#39;def">
         <goal name="diag_mat_add&#39;vc.7.0.0.0.0.0.0.0" expl="precondition" proved="true">
         <transf name="rewrite" proved="true" arg1="assert_make">
          <goal name="diag_mat_add&#39;vc.7.0.0.0.0.0.0.0.0" expl="precondition" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="diag_mat_add&#39;vc.7.0.0.0.0.0.0.0.0.0" expl="precondition" proved="true">
           <proof prover="10"><result status="valid" time="0.72" steps="265245"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="diag_mat_add&#39;vc.7.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="0.64" steps="263365"/></proof>
          </goal>
          <goal name="diag_mat_add&#39;vc.7.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="0.69" steps="263365"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="diag_mat_add&#39;vc.7.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.32" steps="230367"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="diag_mat_add&#39;vc.7.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.64" steps="263365"/></proof>
       </goal>
       <goal name="diag_mat_add&#39;vc.7.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.68" steps="263365"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="diag_mat_add&#39;vc.7.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.66" steps="263365"/></proof>
      </goal>
      <goal name="diag_mat_add&#39;vc.7.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.68" steps="263365"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="diag_mat_add&#39;vc.7.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.32" steps="230367"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="diag_mat_add&#39;vc.7.0.1" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.31" steps="230367"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="diag_mat_add&#39;vc.7.1" expl="rewrite premises" proved="true">
   <proof prover="10"><result status="valid" time="0.31" steps="230365"/></proof>
   </goal>
   <goal name="diag_mat_add&#39;vc.7.2" expl="rewrite premises" proved="true">
   <proof prover="10"><result status="valid" time="0.32" steps="230365"/></proof>
   </goal>
   <goal name="diag_mat_add&#39;vc.7.3" expl="rewrite premises" proved="true">
   <proof prover="10"><result status="valid" time="0.32" steps="230365"/></proof>
   </goal>
   <goal name="diag_mat_add&#39;vc.7.4" expl="rewrite premises" proved="true">
   <proof prover="10"><result status="valid" time="0.66" steps="263362"/></proof>
   </goal>
   <goal name="diag_mat_add&#39;vc.7.5" expl="rewrite premises" proved="true">
   <proof prover="10"><result status="valid" time="0.67" steps="263362"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="diag_mat_add&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.32" steps="230615"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="diag_mat_subst&#39;vc" expl="VC for diag_mat_subst" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="diag_mat_subst&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="diag_mat_subst&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="9"><result status="valid" time="2.82" steps="47996"/></proof>
   </goal>
   <goal name="diag_mat_subst&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="9"><result status="valid" time="2.82" steps="47965"/></proof>
   </goal>
   <goal name="diag_mat_subst&#39;vc.0.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="diag_mat_subst&#39;vc.0.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="substr_value">
     <goal name="diag_mat_subst&#39;vc.0.2.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="diag_mat&#39;def">
      <goal name="diag_mat_subst&#39;vc.0.2.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="assert_make">
       <goal name="diag_mat_subst&#39;vc.0.2.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="diag_mat_subst&#39;vc.0.2.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="diag_mat&#39;def">
         <goal name="diag_mat_subst&#39;vc.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="diag_mat&#39;def">
          <goal name="diag_mat_subst&#39;vc.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="assert_make">
           <goal name="diag_mat_subst&#39;vc.0.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="assert_make">
            <goal name="diag_mat_subst&#39;vc.0.2.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="diag_mat_subst&#39;vc.0.2.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="10"><result status="valid" time="0.70" steps="262393"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="diag_mat_subst&#39;vc.0.2.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="10"><result status="valid" time="0.65" steps="260640"/></proof>
            </goal>
            <goal name="diag_mat_subst&#39;vc.0.2.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="10"><result status="valid" time="0.66" steps="260640"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="diag_mat_subst&#39;vc.0.2.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="10"><result status="valid" time="0.65" steps="260640"/></proof>
           </goal>
           <goal name="diag_mat_subst&#39;vc.0.2.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="10"><result status="valid" time="0.68" steps="260640"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="diag_mat_subst&#39;vc.0.2.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="0.32" steps="231419"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="diag_mat_subst&#39;vc.0.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.32" steps="231419"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="diag_mat_subst&#39;vc.0.2.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.69" steps="260640"/></proof>
       </goal>
       <goal name="diag_mat_subst&#39;vc.0.2.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.71" steps="260640"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="diag_mat_subst&#39;vc.0.2.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.34" steps="231419"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="diag_mat_subst&#39;vc.0.2.0.1" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="1.71" steps="528549"/></proof>
     </goal>
     <goal name="diag_mat_subst&#39;vc.0.2.0.2" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="1.64" steps="528469"/></proof>
     </goal>
     <goal name="diag_mat_subst&#39;vc.0.2.0.3" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.66" steps="261655"/></proof>
     </goal>
     <goal name="diag_mat_subst&#39;vc.0.2.0.4" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.64" steps="261686"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="diag_mat_scal&#39;vc" expl="VC for diag_mat_scal" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="diag_mat_scal&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="diag_mat&#39;def">
   <goal name="diag_mat_scal&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="diag_mat&#39;def">
    <goal name="diag_mat_scal&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_mat">
     <goal name="diag_mat_scal&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="assert_make_r">
      <goal name="diag_mat_scal&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="scalar_rows">
       <goal name="diag_mat_scal&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="assert_make_r">
        <goal name="diag_mat_scal&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="0.32" steps="227937"/></proof>
        </goal>
        <goal name="diag_mat_scal&#39;vc.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.31" steps="227941"/></proof>
        </goal>
        <goal name="diag_mat_scal&#39;vc.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.30" steps="227941"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="diag_mat_scal&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.32" steps="227941"/></proof>
      </goal>
      <goal name="diag_mat_scal&#39;vc.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.31" steps="227941"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="diag_mat_scal&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="10"><result status="valid" time="0.78" steps="292309"/></proof>
     </goal>
     <goal name="diag_mat_scal&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="diag_mat_scal&#39;vc.0.0.0.2.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="assert_make">
       <goal name="diag_mat_scal&#39;vc.0.0.0.2.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="scalar_values">
        <goal name="diag_mat_scal&#39;vc.0.0.0.2.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="assert_make">
         <goal name="diag_mat_scal&#39;vc.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="diag_mat_scal&#39;vc.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="10"><result status="valid" time="0.77" steps="292068"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="diag_mat_scal&#39;vc.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.77" steps="290904"/></proof>
         </goal>
         <goal name="diag_mat_scal&#39;vc.0.0.0.2.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.77" steps="290904"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="diag_mat_scal&#39;vc.0.0.0.2.0.1" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.77" steps="290904"/></proof>
       </goal>
       <goal name="diag_mat_scal&#39;vc.0.0.0.2.0.2" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.76" steps="290904"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="diag_mat_scal&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.33" steps="227941"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="diag_mat_scal&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="10"><result status="valid" time="0.32" steps="227941"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="diag_mat_eq&#39;vc" expl="VC for diag_mat_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="diag_mat_eq&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="diag_mat_eq&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.69" steps="262048"/></proof>
   </goal>
   <goal name="diag_mat_eq&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.71" steps="262094"/></proof>
   </goal>
   <goal name="diag_mat_eq&#39;vc.0.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="diag_mat_eq&#39;vc.0.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="diag_mat&#39;def">
     <goal name="diag_mat_eq&#39;vc.0.2.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="diag_mat&#39;def">
      <goal name="diag_mat_eq&#39;vc.0.2.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="assert_make">
       <goal name="diag_mat_eq&#39;vc.0.2.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="assert_make">
        <goal name="diag_mat_eq&#39;vc.0.2.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="diag_mat_eq&#39;vc.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="10"><result status="valid" time="0.66" steps="261560"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="diag_mat_eq&#39;vc.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.68" steps="261206"/></proof>
        </goal>
        <goal name="diag_mat_eq&#39;vc.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="10"><result status="valid" time="0.72" steps="261206"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="diag_mat_eq&#39;vc.0.2.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.71" steps="261215"/></proof>
       </goal>
       <goal name="diag_mat_eq&#39;vc.0.2.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.67" steps="261215"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="diag_mat_eq&#39;vc.0.2.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.54" steps="247572"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="diag_mat_eq&#39;vc.0.2.0.1" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.30" steps="231838"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="id_mat&#39;vc" expl="VC for id_mat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="id_mat&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.26" steps="228349"/></proof>
  </goal>
  <goal name="id_mat&#39;vc.1" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="id_mat&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="diagonal&#39;def">
    <goal name="id_mat&#39;vc.1.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="result&#39;def">
     <goal name="id_mat&#39;vc.1.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="diag_mat&#39;def">
      <goal name="id_mat&#39;vc.1.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="assert_make">
       <goal name="id_mat&#39;vc.1.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="compute_specified" proved="true" >
       </transf>
       </goal>
       <goal name="id_mat&#39;vc.1.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.33" steps="232893"/></proof>
       </goal>
       <goal name="id_mat&#39;vc.1.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.34" steps="232893"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="id_mat&#39;vc.1.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.32" steps="232896"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="id_mat&#39;vc.1.0.1" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.52" steps="248724"/></proof>
    </goal>
    <goal name="id_mat&#39;vc.1.0.2" expl="rewrite premises" proved="true">
    <proof prover="10"><result status="valid" time="0.33" steps="232884"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="id_mat&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.31" steps="231841"/></proof>
  </goal>
  <goal name="id_mat&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.33" steps="231844"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_id_mat&#39;vc" expl="VC for set_id_mat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_id_mat&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="set_id_mat&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_equal_mat">
    <goal name="set_id_mat&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.76" steps="295147"/></proof>
    </goal>
    <goal name="set_id_mat&#39;vc.0.0.1" expl="apply premises" proved="true">
    <proof prover="10"><result status="valid" time="0.77" steps="295221"/></proof>
    </goal>
    <goal name="set_id_mat&#39;vc.0.0.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="set_id_mat&#39;vc.0.0.2.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="id_mat&#39;def">
      <goal name="set_id_mat&#39;vc.0.0.2.0.0" expl="apply premises" proved="true">
      <proof prover="10"><result status="valid" time="1.72" steps="544240"/></proof>
      </goal>
      <goal name="set_id_mat&#39;vc.0.0.2.0.1" expl="rewrite premises" proved="true">
      <proof prover="10"><result status="valid" time="0.36" steps="265678"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="id_mat_prod_r&#39;vc" expl="VC for id_mat_prod_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="id_mat_prod_r&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="id_mat_prod_r&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="1.53" steps="485368"/></proof>
   </goal>
   <goal name="id_mat_prod_r&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="1.50" steps="483158"/></proof>
   </goal>
   <goal name="id_mat_prod_r&#39;vc.0.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="id_mat_prod_r&#39;vc.0.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="mat_mult_values">
     <goal name="id_mat_prod_r&#39;vc.0.2.0.0" expl="apply premises" proved="true">
     <transf name="instantiate" proved="true" arg1="ind_sum_null_but_maybe_one_elt" arg2="(fun (k:int) -&gt; get (id_mat n) i k *. get m k j),0,(columns (id_mat n)),i">
      <goal name="id_mat_prod_r&#39;vc.0.2.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="Hinst">
       <goal name="id_mat_prod_r&#39;vc.0.2.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="id_mat_prod_r&#39;vc.0.2.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="2.13" steps="647582"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="id_mat_prod_r&#39;vc.0.2.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="1.68" steps="538448"/></proof>
       </goal>
       <goal name="id_mat_prod_r&#39;vc.0.2.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="1.61" steps="542613"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="id_mat_prod_r&#39;vc.0.2.0.1" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="1.51" steps="498001"/></proof>
     </goal>
     <goal name="id_mat_prod_r&#39;vc.0.2.0.2" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.27" steps="205199"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="id_mat_prod_l&#39;vc" expl="VC for id_mat_prod_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="id_mat_prod_l&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.27" steps="205065"/></proof>
  </goal>
  <goal name="id_mat_prod_l&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.42" steps="219167"/></proof>
  </goal>
  <goal name="id_mat_prod_l&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.30" steps="231857"/></proof>
  </goal>
  <goal name="id_mat_prod_l&#39;vc.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="id_mat_prod_l&#39;vc.3.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.51" steps="247875"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="id_mat_prod_l&#39;vc.4" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="id_mat_prod_l&#39;vc.4.0" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.31" steps="232039"/></proof>
   </goal>
   <goal name="id_mat_prod_l&#39;vc.4.1" expl="apply premises" proved="true">
   <proof prover="10"><result status="valid" time="0.49" steps="248085"/></proof>
   </goal>
   <goal name="id_mat_prod_l&#39;vc.4.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="id_mat_prod_l&#39;vc.4.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="mat_mult_values">
     <goal name="id_mat_prod_l&#39;vc.4.2.0.0" expl="apply premises" proved="true">
     <transf name="instantiate" proved="true" arg1="ind_sum_null_but_maybe_one_elt" arg2="(fun (k:int) -&gt; get m i k *. get (id_mat n) k j),0,(columns m),j">
      <goal name="id_mat_prod_l&#39;vc.4.2.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="Hinst">
       <goal name="id_mat_prod_l&#39;vc.4.2.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="id_mat_prod_l&#39;vc.4.2.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="id_mat&#39;def">
         <goal name="id_mat_prod_l&#39;vc.4.2.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="diag_mat_values">
          <goal name="id_mat_prod_l&#39;vc.4.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="id_mat_prod_l&#39;vc.4.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="eliminate_if" proved="true" >
            <goal name="id_mat_prod_l&#39;vc.4.2.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="10"><result status="valid" time="0.53" steps="251283"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="id_mat_prod_l&#39;vc.4.2.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="0.29" steps="232421"/></proof>
          </goal>
          <goal name="id_mat_prod_l&#39;vc.4.2.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="0.62" steps="264290"/></proof>
          </goal>
          <goal name="id_mat_prod_l&#39;vc.4.2.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
          <proof prover="10"><result status="valid" time="0.64" steps="264290"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="id_mat_prod_l&#39;vc.4.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="0.32" steps="232405"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="id_mat_prod_l&#39;vc.4.2.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="10"><result status="valid" time="0.65" steps="264244"/></proof>
       </goal>
       <goal name="id_mat_prod_l&#39;vc.4.2.0.0.0.2" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="id_mat_prod_l&#39;vc.4.2.0.0.0.2.0" expl="rewrite premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="id_mat_prod_l&#39;vc.4.2.0.0.0.2.0.0" expl="rewrite premises" proved="true">
         <proof prover="10"><result status="valid" time="1.57" steps="575535"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="id_mat_prod_l&#39;vc.4.2.0.1" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.49" steps="248102"/></proof>
     </goal>
     <goal name="id_mat_prod_l&#39;vc.4.2.0.2" expl="rewrite premises" proved="true">
     <proof prover="10"><result status="valid" time="0.28" steps="232055"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
