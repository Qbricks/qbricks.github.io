<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="CVC3" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="6" name="Alt-Ergo" version="2.4.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="7" name="CVC4" version="1.7" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="9" name="Z3" version="4.8.6" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml">
<path name=".."/><path name="binary.mlw"/>
<theory name="Binary_Op" proved="true">
 <goal name="set_binary_l&#39;vc" expl="VC for set_binary_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_binary_l&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.34" steps="457852"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_binary_l&#39;vc" expl="VC for get_binary_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_binary_l&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.36" steps="457976"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_binary_one&#39;vc" expl="VC for get_binary_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_binary_one&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.56" steps="220331"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_binary_zero&#39;vc" expl="VC for get_binary_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_binary_zero&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.61" steps="220434"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="binary_is_binary_l&#39;vc" expl="VC for binary_is_binary_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="binary_is_binary_l&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.44" steps="458638"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="binary_leq&#39;vc" expl="VC for binary_leq" proved="true">
 <proof prover="7"><result status="valid" time="1.27" steps="459962"/></proof>
 </goal>
 <goal name="set_binary&#39;vc" expl="VC for set_binary" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_binary&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.54" steps="220531"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_binary&#39;vc" expl="VC for get_binary" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_binary&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="get_binary&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="1.43" steps="458594"/></proof>
   </goal>
   <goal name="get_binary&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="1.49" steps="458584"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="head_bit&#39;vc" expl="VC for head_bit" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="head_bit&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.48" steps="194085"/></proof>
  </goal>
  <goal name="head_bit&#39;vc.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="head_bit&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="3.20"/></proof>
   </goal>
   <goal name="head_bit&#39;vc.1.1" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(result &lt;= 1)">
    <goal name="head_bit&#39;vc.1.1.0" expl="true case (postcondition)" proved="true">
    <proof prover="7"><result status="valid" time="0.20" steps="168664"/></proof>
    </goal>
    <goal name="head_bit&#39;vc.1.1.1" expl="false case (postcondition)" proved="true">
    <transf name="assert" proved="true" arg1="(power 2 k &lt;= i)">
     <goal name="head_bit&#39;vc.1.1.1.0" expl="asserted formula" proved="true">
     <transf name="replace" proved="true" arg1="i" arg2="(result * power 2 (k-1) + mod i (power 2 (k-1)))">
      <goal name="head_bit&#39;vc.1.1.1.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="(power 2 k &lt;= (result * power 2 (k - 1)))">
       <goal name="head_bit&#39;vc.1.1.1.0.0.0" expl="asserted formula" proved="true">
       <proof prover="7"><result status="valid" time="0.40" steps="194614"/></proof>
       </goal>
       <goal name="head_bit&#39;vc.1.1.1.0.0.1" expl="asserted formula" proved="true">
       <proof prover="7"><result status="valid" time="0.41" steps="195028"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="head_bit&#39;vc.1.1.1.0.1" expl="equality hypothesis" proved="true">
      <proof prover="7"><result status="valid" time="0.39" steps="194972"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="head_bit&#39;vc.1.1.1.1" expl="false case (postcondition)" proved="true">
     <proof prover="7"><result status="valid" time="0.19" steps="168674"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="tail_bits&#39;vc" expl="VC for tail_bits" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="tail_bits&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.38" steps="194494"/></proof>
  </goal>
  <goal name="tail_bits&#39;vc.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="tail_bits&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.51" steps="194931"/></proof>
   </goal>
   <goal name="tail_bits&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.37" steps="194975"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ht_to_int&#39;vc" expl="VC for ht_to_int" proved="true">
 <proof prover="7"><result status="valid" time="0.19" steps="169293"/></proof>
 </goal>
 <goal name="head_tail_inv&#39;vc" expl="VC for head_tail_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="head_tail_inv&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ht_to_int&#39;def">
   <goal name="head_tail_inv&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="head_bit&#39;def">
    <goal name="head_tail_inv&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="3.79"/></proof>
    </goal>
    <goal name="head_tail_inv&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.17" steps="169578"/></proof>
    </goal>
    <goal name="head_tail_inv&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="head_tail_inv&#39;vc.0.0.2.0" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.19" steps="169576"/></proof>
     </goal>
     <goal name="head_tail_inv&#39;vc.0.0.2.1" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.17" steps="169591"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="head_tail_inv&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="7"><result status="valid" time="0.19" steps="169578"/></proof>
   </goal>
   <goal name="head_tail_inv&#39;vc.0.2" expl="rewrite premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="head_tail_inv&#39;vc.0.2.0" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.36" steps="194489"/></proof>
    </goal>
    <goal name="head_tail_inv&#39;vc.0.2.1" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.49" steps="194483"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="head_tail_inv&#39;vc.0.3" expl="rewrite premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="head_tail_inv&#39;vc.0.3.0" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.36" steps="194517"/></proof>
    </goal>
    <goal name="head_tail_inv&#39;vc.0.3.1" expl="rewrite premises" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="head_tail_inv&#39;vc.0.3.1.0" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.51" steps="219302"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ht_to_int_head&#39;vc" expl="VC for ht_to_int_head" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ht_to_int_head&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.30" steps="183296"/></proof>
  </goal>
  <goal name="ht_to_int_head&#39;vc.1" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="head_bit&#39;def">
   <goal name="ht_to_int_head&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="goal_comm">
    <goal name="ht_to_int_head&#39;vc.1.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="head_bit&#39;def">
     <goal name="ht_to_int_head&#39;vc.1.0.0.0" expl="apply premises" proved="true">
     <transf name="instantiate" proved="true" arg1="decomp" arg2="i,(power 2 (k - 1))">
      <goal name="ht_to_int_head&#39;vc.1.0.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="ht_to_int&#39;def">
       <goal name="ht_to_int_head&#39;vc.1.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="get_div">
        <goal name="ht_to_int_head&#39;vc.1.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="0.19" steps="169860"/></proof>
        </goal>
        <goal name="ht_to_int_head&#39;vc.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="0.29" steps="183748"/></proof>
        </goal>
        <goal name="ht_to_int_head&#39;vc.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="0.19" steps="169871"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="ht_to_int_head&#39;vc.1.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="0.18" steps="169864"/></proof>
       </goal>
       <goal name="ht_to_int_head&#39;vc.1.0.0.0.0.2" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="ht_to_int_head&#39;vc.1.0.0.0.0.2.0" proved="true">
        <proof prover="0"><result status="valid" time="0.17"/></proof>
        </goal>
        <goal name="ht_to_int_head&#39;vc.1.0.0.0.0.2.1" proved="true">
        <transf name="case" proved="true" arg1="(div i (power 2 (k - 1)) &lt; 2)">
         <goal name="ht_to_int_head&#39;vc.1.0.0.0.0.2.1.0" expl="true case" proved="true">
         <proof prover="7"><result status="valid" time="0.17" steps="169904"/></proof>
         </goal>
         <goal name="ht_to_int_head&#39;vc.1.0.0.0.0.2.1.1" expl="false case" proved="true">
         <transf name="assert" proved="true" arg1="(power 2 k &lt;= i)">
          <goal name="ht_to_int_head&#39;vc.1.0.0.0.0.2.1.1.0" expl="asserted formula" proved="true">
          <transf name="replace" proved="true" arg1="(power 2 k)" arg2="(2 * power 2 (k-1))">
           <goal name="ht_to_int_head&#39;vc.1.0.0.0.0.2.1.1.0.0" expl="asserted formula" proved="true">
           <transf name="instantiate" proved="true" arg1="decomp" arg2="i">
            <goal name="ht_to_int_head&#39;vc.1.0.0.0.0.2.1.1.0.0.0" expl="asserted formula" proved="true">
            <transf name="instantiate" proved="true" arg1="Hinst" arg2="(power 2 k)">
             <goal name="ht_to_int_head&#39;vc.1.0.0.0.0.2.1.1.0.0.0.0" expl="asserted formula" proved="true">
             <transf name="rewrite" proved="true" arg1="Hinst">
              <goal name="ht_to_int_head&#39;vc.1.0.0.0.0.2.1.1.0.0.0.0.0" expl="asserted formula" proved="true">
              <proof prover="7"><result status="valid" time="0.51" steps="196846"/></proof>
              </goal>
              <goal name="ht_to_int_head&#39;vc.1.0.0.0.0.2.1.1.0.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="7"><result status="valid" time="0.29" steps="183981"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="ht_to_int_head&#39;vc.1.0.0.0.0.2.1.1.0.1" expl="equality hypothesis" proved="true">
           <proof prover="7"><result status="valid" time="0.37" steps="196285"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="ht_to_int_head&#39;vc.1.0.0.0.0.2.1.1.1" expl="false case" proved="true">
          <proof prover="7"><result status="valid" time="0.18" steps="169912"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="ht_to_int_head&#39;vc.1.0.0.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="0.18" steps="169871"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ht_to_int_head&#39;vc.1.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.18" steps="169842"/></proof>
     </goal>
     <goal name="ht_to_int_head&#39;vc.1.0.0.2" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ht_to_int_head&#39;vc.1.0.0.2.0" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.19" steps="169840"/></proof>
      </goal>
      <goal name="ht_to_int_head&#39;vc.1.0.0.2.1" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.18" steps="169855"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ht_to_int_head&#39;vc.1.1" expl="rewrite premises" proved="true">
   <proof prover="7"><result status="valid" time="0.18" steps="169842"/></proof>
   </goal>
   <goal name="ht_to_int_head&#39;vc.1.2" expl="rewrite premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="ht_to_int_head&#39;vc.1.2.0" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="0.18"/></proof>
    </goal>
    <goal name="ht_to_int_head&#39;vc.1.2.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="3.55" steps="55877"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ht_to_int_tail&#39;vc" expl="VC for ht_to_int_tail" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ht_to_int_tail&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.42" steps="195660"/></proof>
  </goal>
  <goal name="ht_to_int_tail&#39;vc.1" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ht_to_int&#39;def">
   <goal name="ht_to_int_tail&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="tail_bits&#39;def">
    <goal name="ht_to_int_tail&#39;vc.1.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.27"/></proof>
    </goal>
    <goal name="ht_to_int_tail&#39;vc.1.0.1" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.18" steps="170076"/></proof>
    </goal>
    <goal name="ht_to_int_tail&#39;vc.1.0.2" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="ht_to_int_tail&#39;vc.1.0.2.0" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="1.42" steps="23853"/></proof>
     </goal>
     <goal name="ht_to_int_tail&#39;vc.1.0.2.1" expl="rewrite premises" proved="true">
     <transf name="assert" proved="true" arg1="((hi * power 2 (k - 1)) &lt;= power 2 (k-1))">
      <goal name="ht_to_int_tail&#39;vc.1.0.2.1.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="3.45"/></proof>
      </goal>
      <goal name="ht_to_int_tail&#39;vc.1.0.2.1.1" expl="rewrite premises" proved="true">
      <transf name="assert" proved="true" arg1="(tail_bits i k &lt; power 2 (k-1))">
       <goal name="ht_to_int_tail&#39;vc.1.0.2.1.1.0" expl="asserted formula" proved="true">
       <proof prover="7"><result status="valid" time="0.40" steps="196752"/></proof>
       </goal>
       <goal name="ht_to_int_tail&#39;vc.1.0.2.1.1.1" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="0.41" steps="196755"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ht_to_int_tail&#39;vc.1.1" expl="rewrite premises" proved="true">
   <proof prover="7"><result status="valid" time="0.19" steps="170076"/></proof>
   </goal>
   <goal name="ht_to_int_tail&#39;vc.1.2" expl="rewrite premises" proved="true">
   <proof prover="7"><result status="valid" time="0.18" steps="170083"/></proof>
   </goal>
   <goal name="ht_to_int_tail&#39;vc.1.3" expl="rewrite premises" proved="true">
   <proof prover="7"><result status="valid" time="0.42" steps="196793"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="concat_fun_bin_i&#39;vc" expl="VC for concat_fun_bin_i" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="concat_fun_bin_i&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="concat_fun_bin_i&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="1.69" steps="467833"/></proof>
   </goal>
   <goal name="concat_fun_bin_i&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="1.57" steps="467804"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="shift_bin_i&#39;vc" expl="VC for shift_bin_i" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="shift_bin_i&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="shift_bin_i&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="1.56" steps="468009"/></proof>
   </goal>
   <goal name="shift_bin_i&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="1.62" steps="467999"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="concat_fun_bin&#39;vc" expl="VC for concat_fun_bin" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="concat_fun_bin&#39;vc.0" expl="postcondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="concat_fun_bin&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="concat_fun_bin&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="concat_fun_value">
     <goal name="concat_fun_bin&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="binary&#39;def">
      <goal name="concat_fun_bin&#39;vc.0.0.0.0.0" expl="VC for concat_fun_bin" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="concat_fun_bin&#39;vc.0.0.0.0.0.0" expl="VC for concat_fun_bin" proved="true">
       <proof prover="7"><result status="valid" time="1.41" steps="487447"/></proof>
       </goal>
       <goal name="concat_fun_bin&#39;vc.0.0.0.0.0.1" expl="VC for concat_fun_bin" proved="true">
       <proof prover="7"><result status="valid" time="1.41" steps="487506"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mod_func_bin&#39;vc" expl="VC for mod_func_bin" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mod_func_bin&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="mod_func_bin&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="binary&#39;def">
    <goal name="mod_func_bin&#39;vc.0.0.0" expl="VC for mod_func_bin" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="mod_func_bin&#39;vc.0.0.0.0" expl="VC for mod_func_bin" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mod_func_bin&#39;vc.0.0.0.0.0" expl="VC for mod_func_bin" proved="true">
      <transf name="rewrite" proved="true" arg1="mod_func&#39;def">
       <goal name="mod_func_bin&#39;vc.0.0.0.0.0.0" expl="VC for mod_func_bin" proved="true">
       <proof prover="7"><result status="valid" time="0.50" steps="229370"/></proof>
       </goal>
       <goal name="mod_func_bin&#39;vc.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="0.23" steps="200241"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="mod_func_bin&#39;vc.0.0.0.0.1" expl="VC for mod_func_bin" proved="true">
      <transf name="rewrite" proved="true" arg1="mod_func&#39;def">
       <goal name="mod_func_bin&#39;vc.0.0.0.0.1.0" expl="VC for mod_func_bin" proved="true">
       <proof prover="7"><result status="valid" time="0.51" steps="229367"/></proof>
       </goal>
       <goal name="mod_func_bin&#39;vc.0.0.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="0.23" steps="200241"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="shift_bin&#39;vc" expl="VC for shift_bin" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="shift_bin&#39;vc.0" expl="postcondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="shift_bin&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="shift_bin&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="binary&#39;def">
     <goal name="shift_bin&#39;vc.0.0.0.0" expl="VC for shift_bin" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="shift_bin&#39;vc.0.0.0.0.0" expl="VC for shift_bin" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="shift_bin&#39;vc.0.0.0.0.0.0" expl="VC for shift_bin" proved="true">
       <proof prover="7"><result status="valid" time="0.48" steps="229494"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="shift_bin&#39;vc.0.0.0.0.1" expl="VC for shift_bin" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="shift_bin&#39;vc.0.0.0.0.1.0" expl="VC for shift_bin" proved="true">
       <proof prover="7"><result status="valid" time="0.48" steps="229488"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="binary_comp&#39;vc" expl="VC for binary_comp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="binary_comp&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="binary_comp&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="binary&#39;def">
    <goal name="binary_comp&#39;vc.0.0.0" expl="VC for binary_comp" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="binary_comp&#39;vc.0.0.0.0" expl="VC for binary_comp" proved="true">
     <proof prover="7"><result status="valid" time="1.46" steps="487340"/></proof>
     </goal>
     <goal name="binary_comp&#39;vc.0.0.0.1" expl="VC for binary_comp" proved="true">
     <proof prover="7"><result status="valid" time="1.58" steps="487344"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_is_all_binary&#39;vc" expl="VC for set_is_all_binary" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_is_all_binary&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.46" steps="228136"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="nary_length&#39;vc" expl="VC for nary_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="nary_length&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="nary_length&#39;vc.1" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="(div i (power n (j + 1)))" arg2="((div (div i n) (power n j) ))">
   <goal name="nary_length&#39;vc.1.0" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="compat_order_div">
    <goal name="nary_length&#39;vc.1.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.16"/></proof>
    </goal>
    <goal name="nary_length&#39;vc.1.0.1" expl="apply premises" proved="true">
    <proof prover="7"><result status="valid" time="0.52" steps="197363"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="nary_length&#39;vc.1.1" expl="equality hypothesis" proved="true">
   <proof prover="6"><result status="valid" time="1.34" steps="20856"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="nary_length&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="nary_length&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.33" steps="186219"/></proof>
   </goal>
   <goal name="nary_length&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.42" steps="186203"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="nary_length&#39;vc.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
  </transf>
  </goal>
  <goal name="nary_length&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.19" steps="171749"/></proof>
  </goal>
  <goal name="nary_length&#39;vc.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="nary_length&#39;vc.5.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="4.16"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="nary_length&#39;vc.6" expl="loop invariant init" proved="true">
  <proof prover="7"><result status="valid" time="0.19" steps="171698"/></proof>
  </goal>
  <goal name="nary_length&#39;vc.7" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="nary_length&#39;vc.8" expl="loop invariant init" proved="true">
  <proof prover="7"><result status="valid" time="0.31" steps="186384"/></proof>
  </goal>
  <goal name="nary_length&#39;vc.9" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.40" steps="197971"/></proof>
  </goal>
  <goal name="nary_length&#39;vc.10" expl="loop variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="nary_length&#39;vc.10.0" expl="loop variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.19"/></proof>
   </goal>
   <goal name="nary_length&#39;vc.10.1" expl="loop variant decrease" proved="true">
   <transf name="replace" proved="true" arg1="kp" arg2="(div kp1 n)">
    <goal name="nary_length&#39;vc.10.1.0" expl="loop variant decrease" proved="true">
    <proof prover="0"><result status="valid" time="0.18"/></proof>
    </goal>
    <goal name="nary_length&#39;vc.10.1.1" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="4.53"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="nary_length&#39;vc.11" expl="loop invariant preservation" proved="true">
  <proof prover="7"><result status="valid" time="0.29" steps="185473"/></proof>
  </goal>
  <goal name="nary_length&#39;vc.12" expl="loop invariant preservation" proved="true">
  <proof prover="7"><result status="valid" time="0.17" steps="171848"/></proof>
  </goal>
  <goal name="nary_length&#39;vc.13" expl="loop invariant preservation" proved="true">
  <proof prover="7"><result status="valid" time="0.32" steps="185490"/></proof>
  </goal>
  <goal name="nary_length&#39;vc.14" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.19" steps="171843"/></proof>
  </goal>
  <goal name="nary_length&#39;vc.15" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.19" steps="171863"/></proof>
  </goal>
  <goal name="nary_length&#39;vc.16" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.19" steps="171877"/></proof>
  </goal>
  <goal name="nary_length&#39;vc.17" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="4.57"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="binary_length&#39;vc" expl="VC for binary_length" proved="true">
 <transf name="compute_specified" proved="true" >
 </transf>
 </goal>
 <goal name="set_binary_length&#39;vc" expl="VC for set_binary_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_binary_length&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="set_binary_length&#39;vc.0.0" expl="assertion" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="set_binary_length&#39;vc.0.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="H">
     <goal name="set_binary_length&#39;vc.0.0.0.0" expl="assertion" proved="true">
     <transf name="case" proved="true" arg1="(binary_length i &lt;= k)">
      <goal name="set_binary_length&#39;vc.0.0.0.0.0" expl="true case (assertion)" proved="true">
      <proof prover="7"><result status="valid" time="0.21" steps="195550"/></proof>
      </goal>
      <goal name="set_binary_length&#39;vc.0.0.0.0.1" expl="false case (assertion)" proved="true">
      <transf name="assert" proved="true" arg1="(power 2 k &lt;= i)">
       <goal name="set_binary_length&#39;vc.0.0.0.0.1.0" expl="asserted formula" proved="true">
       <transf name="assert" proved="true" arg1="(power 2 (binary_length i -1) &lt;=i)">
        <goal name="set_binary_length&#39;vc.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
        <proof prover="7"><result status="valid" time="0.45" steps="223906"/></proof>
        </goal>
        <goal name="set_binary_length&#39;vc.0.0.0.0.1.0.1" expl="asserted formula" proved="true">
        <proof prover="7"><result status="valid" time="0.43" steps="223728"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="set_binary_length&#39;vc.0.0.0.0.1.1" expl="false case (assertion)" proved="true">
       <proof prover="7"><result status="valid" time="0.34" steps="210602"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="set_binary_length&#39;vc.0.1" expl="assertion" proved="true">
   <transf name="case" proved="true" arg1="( k &lt;= k&#39;)">
    <goal name="set_binary_length&#39;vc.0.1.0" expl="true case (assertion)" proved="true">
    <proof prover="7"><result status="valid" time="0.19" steps="172148"/></proof>
    </goal>
    <goal name="set_binary_length&#39;vc.0.1.1" expl="false case (assertion)" proved="true">
    <transf name="assert" proved="true" arg1="(i &lt; power 2 (k-1))">
     <goal name="set_binary_length&#39;vc.0.1.1.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="(power 2 k&#39; &lt;= power 2 (k-1))">
      <goal name="set_binary_length&#39;vc.0.1.1.0.0" expl="asserted formula" proved="true">
      <proof prover="7"><result status="valid" time="0.53" steps="199314"/></proof>
      </goal>
      <goal name="set_binary_length&#39;vc.0.1.1.0.1" expl="asserted formula" proved="true">
      <proof prover="7"><result status="valid" time="0.38" steps="199642"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="set_binary_length&#39;vc.0.1.1.1" expl="false case (assertion)" proved="true">
     <proof prover="7"><result status="valid" time="0.39" steps="198711"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="set_binary_length&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.27" steps="185902"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_binary_length_b&#39;vc" expl="VC for set_binary_length_b" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_binary_length_b&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="set_binary_length_b&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="7"><result status="valid" time="0.52" steps="198511"/></proof>
   </goal>
   <goal name="set_binary_length_b&#39;vc.0.1" expl="assertion" proved="true">
   <proof prover="7"><result status="valid" time="0.37" steps="198315"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="set_binary_length_b&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.38" steps="199467"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Bit_vector" proved="true">
 <goal name="bitvec&#39;vc" expl="VC for bitvec" proved="true">
 <transf name="exists" proved="true" arg1="(fun (i:int) -&gt; 0)">
  <goal name="bitvec&#39;vc.0" proved="true">
  <transf name="exists" proved="true" arg1="0">
   <goal name="bitvec&#39;vc.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="bitvec&#39;vc.0.0.0" expl="type invariant" proved="true">
    <proof prover="7"><result status="valid" time="0.17" steps="172364"/></proof>
    </goal>
    <goal name="bitvec&#39;vc.0.0.1" expl="type invariant" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="bitvec&#39;vc.0.0.1.0" expl="type invariant" proved="true">
     <proof prover="7"><result status="valid" time="0.22" steps="200489"/></proof>
     </goal>
     <goal name="bitvec&#39;vc.0.0.1.1" expl="type invariant" proved="true">
     <proof prover="7"><result status="valid" time="0.23" steps="200491"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="bitvec&#39;vc.0.0.2" expl="type invariant" proved="true">
    <proof prover="7"><result status="valid" time="0.39" steps="214947"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="binary_mult&#39;vc" expl="VC for binary_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="binary_mult&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.19" steps="172835"/></proof>
  </goal>
  <goal name="binary_mult&#39;vc.1" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.19" steps="172875"/></proof>
  </goal>
  <goal name="binary_mult&#39;vc.2" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.20" steps="172880"/></proof>
  </goal>
  <goal name="binary_mult&#39;vc.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="binary_mult&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.07" steps="610"/></proof>
   </goal>
   <goal name="binary_mult&#39;vc.3.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.16" steps="5254"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="getbv&#39;vc" expl="VC for getbv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="getbv&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_binary">
   <goal name="getbv&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="getbv&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="7"><result status="valid" time="1.56" steps="475461"/></proof>
    </goal>
    <goal name="getbv&#39;vc.0.0.1" expl="apply premises" proved="true">
    <proof prover="7"><result status="valid" time="1.58" steps="475455"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="getbv&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.23" steps="201203"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="to_bool&#39;vc" expl="VC for to_bool" proved="true">
 <proof prover="7"><result status="valid" time="0.19" steps="173210"/></proof>
 </goal>
 <goal name="getbv_bound&#39;vc" expl="VC for getbv_bound" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="getbv_bound&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="getbv_bound&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.48" steps="230268"/></proof>
   </goal>
   <goal name="getbv_bound&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.48" steps="230262"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="getbv_eq&#39;vc" expl="VC for getbv_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="getbv_eq&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.23" steps="206028"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="getbv_eq_gen&#39;vc" expl="VC for getbv_eq_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="getbv_eq_gen&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.20" steps="173553"/></proof>
  </goal>
  <goal name="getbv_eq_gen&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.24" steps="206150"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="setbv&#39;vc" expl="VC for setbv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="setbv&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.63" steps="230786"/></proof>
  </goal>
  <goal name="setbv&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.50" steps="230732"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="setbv_int&#39;vc" expl="VC for setbv_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="setbv_int&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.50" steps="231188"/></proof>
  </goal>
  <goal name="setbv_int&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.52" steps="231305"/></proof>
  </goal>
  <goal name="setbv_int&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.50" steps="231406"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_bvlength&#39;vc" expl="VC for set_bvlength" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_bvlength&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="set_bvlength&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="set_bvlength&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="bvlength&#39;def">
     <goal name="set_bvlength&#39;vc.0.0.0.0" expl="VC for set_bvlength" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="set_bvlength&#39;vc.0.0.0.0.0" expl="VC for set_bvlength" proved="true">
      <proof prover="7"><result status="valid" time="0.56" steps="263040"/></proof>
      </goal>
      <goal name="set_bvlength&#39;vc.0.0.0.0.1" expl="VC for set_bvlength" proved="true">
      <proof prover="7"><result status="valid" time="0.71" steps="263034"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="null_product_bitvec&#39;vc" expl="VC for null_product_bitvec" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="null_product_bitvec&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.53" steps="232563"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="non_null_product_bitvec&#39;vc" expl="VC for non_null_product_bitvec" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="non_null_product_bitvec&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(mem m (to_fset 0 n))">
   <goal name="non_null_product_bitvec&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="(exists i. mem i  (my_filter (to_fset 0 n) (fun (i:int) -&gt; (getbv x @ i) = 0)))">
    <goal name="non_null_product_bitvec&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="(exists i:int. 0 &lt;= i /\ i &lt; n /\ (getbv x @ i) = 0)">
     <goal name="non_null_product_bitvec&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.73" steps="301824"/></proof>
     </goal>
     <goal name="non_null_product_bitvec&#39;vc.0.0.0.1" expl="asserted formula" proved="true">
     <transf name="destruct" proved="true" arg1="h1">
      <goal name="non_null_product_bitvec&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="exists" proved="true" arg1="i">
       <goal name="non_null_product_bitvec&#39;vc.0.0.0.1.0.0" proved="true">
       <transf name="apply" proved="true" arg1="in_my_filter">
        <goal name="non_null_product_bitvec&#39;vc.0.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="0.74" steps="302116"/></proof>
        </goal>
        <goal name="non_null_product_bitvec&#39;vc.0.0.0.1.0.0.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="non_null_product_bitvec&#39;vc.0.0.0.1.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="0.31" steps="267781"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="non_null_product_bitvec&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="( mem m  (my_filter (to_fset 0 n) (fun (i:int) -&gt; (getbv x @ i) = 0)))">
     <goal name="non_null_product_bitvec&#39;vc.0.0.1.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="(forall s: set int. (exists e. mem e s) -&gt; mem (choose s) s)">
      <goal name="non_null_product_bitvec&#39;vc.0.0.1.0.0" expl="asserted formula" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="non_null_product_bitvec&#39;vc.0.0.1.0.0.0" expl="asserted formula" proved="true">
       <proof prover="7"><result status="valid" time="0.73" steps="303512"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="non_null_product_bitvec&#39;vc.0.0.1.0.1" expl="asserted formula" proved="true">
      <transf name="eliminate_definition" proved="true" >
       <goal name="non_null_product_bitvec&#39;vc.0.0.1.0.1.0" expl="asserted formula" proved="true">
       <transf name="rewrite" proved="true" arg1="m&#39;def">
        <goal name="non_null_product_bitvec&#39;vc.0.0.1.0.1.0.0" expl="asserted formula" proved="true">
        <transf name="instantiate" proved="true" arg1="h1" arg2="(my_filter (to_fset 0 n) (fun (i:int) -&gt; (getbv x @ i) = 0))">
         <goal name="non_null_product_bitvec&#39;vc.0.0.1.0.1.0.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="Hinst">
          <goal name="non_null_product_bitvec&#39;vc.0.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="h1">
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="non_null_product_bitvec&#39;vc.0.0.1.1" expl="asserted formula" proved="true">
     <transf name="instantiate" proved="true" arg1="in_my_filter_set" arg2="(to_fset 0 n),(fun (i:int) -&gt; (getbv x @ i) = 0),m">
      <goal name="non_null_product_bitvec&#39;vc.0.0.1.1.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="Hinst">
       <goal name="non_null_product_bitvec&#39;vc.0.0.1.1.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="h">
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="non_null_product_bitvec&#39;vc.0.1" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="to_fset_bounds">
    <goal name="non_null_product_bitvec&#39;vc.0.1.0" expl="apply premises" proved="true">
    <proof prover="7"><result status="valid" time="0.55" steps="284666"/></proof>
    </goal>
    <goal name="non_null_product_bitvec&#39;vc.0.1.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="h">
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="non_null_product_bitvec&#39;vc.1" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="((fun (i:int) -&gt; (getbv x @ i) = 0) m)">
   <goal name="non_null_product_bitvec&#39;vc.1.0" expl="asserted formula" proved="true">
   <transf name="instantiate" proved="true" arg1="in_my_filter_filter" arg2="(to_fset 0 n),(fun (i:int) -&gt; (getbv x @ i) = 0),m">
    <goal name="non_null_product_bitvec&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="Hinst">
     <goal name="non_null_product_bitvec&#39;vc.1.0.0.0" expl="apply premises" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="non_null_product_bitvec&#39;vc.1.0.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="m&#39;def">
       <goal name="non_null_product_bitvec&#39;vc.1.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="(forall s:(set &#39;a). not (is_empty s) -&gt; mem (choose s ) s)">
        <goal name="non_null_product_bitvec&#39;vc.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="7"><result status="valid" time="0.75" steps="351834"/></proof>
        </goal>
        <goal name="non_null_product_bitvec&#39;vc.1.0.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="h">
         <goal name="non_null_product_bitvec&#39;vc.1.0.0.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="assert" proved="true" arg1="(exists i. mem i (to_fset 0 n)/\ getbv x i = 0)">
          <goal name="non_null_product_bitvec&#39;vc.1.0.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
          <proof prover="7"><result status="valid" time="2.35" steps="702259"/></proof>
          </goal>
          <goal name="non_null_product_bitvec&#39;vc.1.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
          <transf name="assert" proved="true" arg1="(exists i. mem i (my_filter (to_fset 0 n) (fun (i:int) -&gt; (getbv x @ i) = 0)))">
           <goal name="non_null_product_bitvec&#39;vc.1.0.0.0.0.0.1.0.1.0" expl="asserted formula" proved="true">
           <transf name="destruct" proved="true" arg1="h1">
            <goal name="non_null_product_bitvec&#39;vc.1.0.0.0.0.0.1.0.1.0.0" expl="asserted formula" proved="true">
            <transf name="exists" proved="true" arg1="i">
             <goal name="non_null_product_bitvec&#39;vc.1.0.0.0.0.0.1.0.1.0.0.0" proved="true">
             <proof prover="7"><result status="valid" time="1.77" steps="536405"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="non_null_product_bitvec&#39;vc.1.0.0.0.0.0.1.0.1.1" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="2.50" steps="761792"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="non_null_product_bitvec&#39;vc.1.1" expl="postcondition" proved="true">
   <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="h">
    <goal name="non_null_product_bitvec&#39;vc.1.1.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="h">
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="non_null_product_bitvec&#39;vc.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="non_null_product_bitvec&#39;vc.2.0" expl="precondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="non_null_product_bitvec&#39;vc.2.0.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="2.12" steps="596434"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="non_null_product_bitvec&#39;vc.2.1" expl="precondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="non_null_product_bitvec&#39;vc.2.1.0" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(forall m n. m&lt;n -&gt; m&lt;=n)">
     <goal name="non_null_product_bitvec&#39;vc.2.1.0.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.69" steps="329091"/></proof>
     </goal>
     <goal name="non_null_product_bitvec&#39;vc.2.1.0.1" expl="precondition" proved="true">
     <transf name="apply" proved="true" arg1="h">
      <goal name="non_null_product_bitvec&#39;vc.2.1.0.1.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="H">
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="non_null_product_bitvec&#39;vc.3" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="ind_iproduct_plus_one">
   <goal name="non_null_product_bitvec&#39;vc.3.0" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="(getbv x @ m)" arg2="0">
    <goal name="non_null_product_bitvec&#39;vc.3.0.0" expl="assertion" proved="true">
    <proof prover="7"><result status="valid" time="0.33" steps="268772"/></proof>
    </goal>
    <goal name="non_null_product_bitvec&#39;vc.3.0.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="Ensures3">
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="non_null_product_bitvec&#39;vc.3.1" expl="rewrite premises" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="non_null_product_bitvec&#39;vc.3.1.0" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="2.16" steps="612040"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="non_null_product_bitvec&#39;vc.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="non_null_product_bitvec&#39;vc.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures">
    <goal name="non_null_product_bitvec&#39;vc.4.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Assert">
     <goal name="non_null_product_bitvec&#39;vc.4.0.0.0" expl="postcondition" proved="true">
     <proof prover="7"><result status="valid" time="0.34" steps="268805"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="null_product_bitvec_inv&#39;vc" expl="VC for null_product_bitvec_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="null_product_bitvec_inv&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="7"><result status="valid" time="0.26" steps="203269"/></proof>
  </goal>
  <goal name="null_product_bitvec_inv&#39;vc.1" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.45" steps="217676"/></proof>
  </goal>
  <goal name="null_product_bitvec_inv&#39;vc.2" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(k=0)">
   <goal name="null_product_bitvec_inv&#39;vc.2.0" expl="true case (postcondition)" proved="true">
   <proof prover="7"><result status="valid" time="0.53" steps="233423"/></proof>
   </goal>
   <goal name="null_product_bitvec_inv&#39;vc.2.1" expl="false case (postcondition)" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="null_product_bitvec_inv&#39;vc.2.1.0" expl="false case (postcondition)" proved="true">
    <proof prover="7"><result status="valid" time="0.25" steps="203309"/></proof>
    </goal>
    <goal name="null_product_bitvec_inv&#39;vc.2.1.1" expl="false case (postcondition)" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="null_product_bitvec_inv&#39;vc.2.1.1.0" expl="false case (postcondition)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="null_product_bitvec_inv&#39;vc.2.1.1.0.0" expl="false case (postcondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="H">
       <goal name="null_product_bitvec_inv&#39;vc.2.1.1.0.0.0" expl="false case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="one_mult">
        <goal name="null_product_bitvec_inv&#39;vc.2.1.1.0.0.0.0" expl="false case (postcondition)" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="null_product_bitvec_inv&#39;vc.2.1.1.0.0.0.0.0" expl="false case (postcondition)" proved="true">
         <proof prover="7"><result status="valid" time="0.65" steps="264918"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="null_product_bitvec_inv&#39;vc.2.1.1.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="0.68" steps="266447"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="null_product_bitvec_inv&#39;vc.2.1.1.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="0.43" steps="247866"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="null_product_bitvec_inv&#39;vc.3" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.48" steps="232666"/></proof>
  </goal>
  <goal name="null_product_bitvec_inv&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.62" steps="235006"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="non_null_product_bitvec_inv&#39;vc" expl="VC for non_null_product_bitvec_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="non_null_product_bitvec_inv&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(exists i. mem i  (my_filter (to_fset 0 n) (fun (i:int) -&gt; (getbv x @ i) = 1)))">
   <goal name="non_null_product_bitvec_inv&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="((exists i:int. 0 &lt;= i /\ i &lt; n /\ not (getbv x @ i) = 0))">
    <goal name="non_null_product_bitvec_inv&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="non_null_product_bitvec_inv&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.70" steps="302447"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="non_null_product_bitvec_inv&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <transf name="destruct" proved="true" arg1="h1">
     <goal name="non_null_product_bitvec_inv&#39;vc.0.0.1.0" expl="asserted formula" proved="true">
     <transf name="exists" proved="true" arg1="i">
      <goal name="non_null_product_bitvec_inv&#39;vc.0.0.1.0.0" proved="true">
      <transf name="apply" proved="true" arg1="in_my_filter">
       <goal name="non_null_product_bitvec_inv&#39;vc.0.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="0.86" steps="303001"/></proof>
       </goal>
       <goal name="non_null_product_bitvec_inv&#39;vc.0.0.1.0.0.1" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="non_null_product_bitvec_inv&#39;vc.0.0.1.0.0.1.0" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="0.74" steps="302794"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="non_null_product_bitvec_inv&#39;vc.0.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="( mem m  (my_filter (to_fset 0 n) (fun (i:int) -&gt; (getbv x @ i) = 1)))">
    <goal name="non_null_product_bitvec_inv&#39;vc.0.1.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="(forall s: set int. (exists e. mem e s) -&gt; mem (choose s) s)">
     <goal name="non_null_product_bitvec_inv&#39;vc.0.1.0.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.86" steps="304402"/></proof>
     </goal>
     <goal name="non_null_product_bitvec_inv&#39;vc.0.1.0.1" expl="asserted formula" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="non_null_product_bitvec_inv&#39;vc.0.1.0.1.0" expl="asserted formula" proved="true">
      <transf name="rewrite" proved="true" arg1="m&#39;def">
       <goal name="non_null_product_bitvec_inv&#39;vc.0.1.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="instantiate" proved="true" arg1="h1" arg2="(my_filter (to_fset 0 n) (fun (i:int) -&gt; (getbv x @ i) = 1))">
        <goal name="non_null_product_bitvec_inv&#39;vc.0.1.0.1.0.0.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="Hinst">
         <goal name="non_null_product_bitvec_inv&#39;vc.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="h1">
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="non_null_product_bitvec_inv&#39;vc.0.1.1" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="in_my_filter_set" arg2="(to_fset 0 n),(fun (i:int) -&gt; (getbv x @ i) = 1),m">
     <goal name="non_null_product_bitvec_inv&#39;vc.0.1.1.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="Hinst">
      <goal name="non_null_product_bitvec_inv&#39;vc.0.1.1.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="h">
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="non_null_product_bitvec_inv&#39;vc.1" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="to_fset_bounds">
   <goal name="non_null_product_bitvec_inv&#39;vc.1.0" expl="apply premises" proved="true">
   <proof prover="7"><result status="valid" time="0.56" steps="285880"/></proof>
   </goal>
   <goal name="non_null_product_bitvec_inv&#39;vc.1.1" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="Ensures">
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="non_null_product_bitvec_inv&#39;vc.2" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="in_my_filter_filter" arg2="(to_fset 0 n),(fun (i:int) -&gt; (getbv x @ i) = 1),m">
   <goal name="non_null_product_bitvec_inv&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(((fun (i:int) -&gt; (getbv x @ i) = 1) @ m) = True)">
    <goal name="non_null_product_bitvec_inv&#39;vc.2.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="Hinst">
     <goal name="non_null_product_bitvec_inv&#39;vc.2.0.0.0" expl="apply premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="non_null_product_bitvec_inv&#39;vc.2.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="Ensures5">
       <goal name="non_null_product_bitvec_inv&#39;vc.2.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="2.21" steps="602212"/></proof>
       </goal>
       <goal name="non_null_product_bitvec_inv&#39;vc.2.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="non_null_product_bitvec_inv&#39;vc.2.0.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="eliminate_definition" proved="true" >
         <goal name="non_null_product_bitvec_inv&#39;vc.2.0.0.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="assert" proved="true" arg1="( ((fun (i:int) -&gt; (getbv x @ i) = 1) @ m) = True)">
          <goal name="non_null_product_bitvec_inv&#39;vc.2.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="Hinst">
           <goal name="non_null_product_bitvec_inv&#39;vc.2.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="m&#39;def">
            <goal name="non_null_product_bitvec_inv&#39;vc.2.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="assert" proved="true" arg1="(forall s:(set &#39;a). not (is_empty s) -&gt; mem (choose s ) s)">
             <goal name="non_null_product_bitvec_inv&#39;vc.2.0.0.0.0.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
             <proof prover="7"><result status="valid" time="0.84" steps="406503"/></proof>
             </goal>
             <goal name="non_null_product_bitvec_inv&#39;vc.2.0.0.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="h">
              <goal name="non_null_product_bitvec_inv&#39;vc.2.0.0.0.0.1.0.0.0.0.0.1.0" expl="apply premises" proved="true">
              <transf name="assert" proved="true" arg1="(exists i. mem i (my_filter (to_fset 0 n) (fun (i:int) -&gt; (getbv x @ i) = 1)))
">
               <goal name="non_null_product_bitvec_inv&#39;vc.2.0.0.0.0.1.0.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
               <transf name="assert" proved="true" arg1="(exists i. 0 &lt;= i /\ i &lt; n /\ (getbv x @ i) = 1)">
                <goal name="non_null_product_bitvec_inv&#39;vc.2.0.0.0.0.1.0.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
                <proof prover="7"><result status="valid" time="1.03" steps="349468"/></proof>
                </goal>
                <goal name="non_null_product_bitvec_inv&#39;vc.2.0.0.0.0.1.0.0.0.0.0.1.0.0.1" expl="asserted formula" proved="true">
                <transf name="destruct" proved="true" arg1="h1">
                 <goal name="non_null_product_bitvec_inv&#39;vc.2.0.0.0.0.1.0.0.0.0.0.1.0.0.1.0" expl="asserted formula" proved="true">
                 <transf name="exists" proved="true" arg1="i">
                  <goal name="non_null_product_bitvec_inv&#39;vc.2.0.0.0.0.1.0.0.0.0.0.1.0.0.1.0.0" proved="true">
                  <transf name="apply" proved="true" arg1="in_my_filter">
                   <goal name="non_null_product_bitvec_inv&#39;vc.2.0.0.0.0.1.0.0.0.0.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
                   <proof prover="7"><result status="valid" time="1.01" steps="349947"/></proof>
                   </goal>
                   <goal name="non_null_product_bitvec_inv&#39;vc.2.0.0.0.0.1.0.0.0.0.0.1.0.0.1.0.0.1" expl="apply premises" proved="true">
                   <transf name="compute_specified" proved="true" >
                    <goal name="non_null_product_bitvec_inv&#39;vc.2.0.0.0.0.1.0.0.0.0.0.1.0.0.1.0.0.1.0" expl="apply premises" proved="true">
                    <proof prover="7"><result status="valid" time="0.39" steps="312736"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="non_null_product_bitvec_inv&#39;vc.2.0.0.0.0.1.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
               <proof prover="7"><result status="valid" time="2.43" steps="655154"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="non_null_product_bitvec_inv&#39;vc.2.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="0.69" steps="331732"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="non_null_product_bitvec_inv&#39;vc.2.0.1" expl="postcondition" proved="true">
    <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="h">
     <goal name="non_null_product_bitvec_inv&#39;vc.2.0.1.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="h">
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="non_null_product_bitvec_inv&#39;vc.3" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(mem m (to_fset 0 n))">
   <goal name="non_null_product_bitvec_inv&#39;vc.3.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="(exists i. mem i  (my_filter (to_fset 0 n) (fun (i:int) -&gt; (getbv x @ i) = 1)))">
    <goal name="non_null_product_bitvec_inv&#39;vc.3.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="((exists i:int. 0 &lt;= i /\ i &lt; n /\ not (getbv x @ i) = 0))">
     <goal name="non_null_product_bitvec_inv&#39;vc.3.0.0.0" expl="asserted formula" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="non_null_product_bitvec_inv&#39;vc.3.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="7"><result status="valid" time="0.75" steps="305029"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="non_null_product_bitvec_inv&#39;vc.3.0.0.1" expl="asserted formula" proved="true">
     <transf name="destruct" proved="true" arg1="h1">
      <goal name="non_null_product_bitvec_inv&#39;vc.3.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="exists" proved="true" arg1="i">
       <goal name="non_null_product_bitvec_inv&#39;vc.3.0.0.1.0.0" proved="true">
       <transf name="apply" proved="true" arg1="in_my_filter">
        <goal name="non_null_product_bitvec_inv&#39;vc.3.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="0.75" steps="305624"/></proof>
        </goal>
        <goal name="non_null_product_bitvec_inv&#39;vc.3.0.0.1.0.0.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="non_null_product_bitvec_inv&#39;vc.3.0.0.1.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="0.74" steps="305456"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="non_null_product_bitvec_inv&#39;vc.3.0.1" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="( mem m  (my_filter (to_fset 0 n) (fun (i:int) -&gt; (getbv x @ i) = 1)))">
     <goal name="non_null_product_bitvec_inv&#39;vc.3.0.1.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="(forall s: set int. (exists e. mem e s) -&gt; mem (choose s) s)">
      <goal name="non_null_product_bitvec_inv&#39;vc.3.0.1.0.0" expl="asserted formula" proved="true">
      <proof prover="7"><result status="valid" time="0.91" steps="306744"/></proof>
      </goal>
      <goal name="non_null_product_bitvec_inv&#39;vc.3.0.1.0.1" expl="asserted formula" proved="true">
      <transf name="eliminate_definition" proved="true" >
       <goal name="non_null_product_bitvec_inv&#39;vc.3.0.1.0.1.0" expl="asserted formula" proved="true">
       <transf name="rewrite" proved="true" arg1="m&#39;def">
        <goal name="non_null_product_bitvec_inv&#39;vc.3.0.1.0.1.0.0" expl="asserted formula" proved="true">
        <transf name="instantiate" proved="true" arg1="h1" arg2="(my_filter (to_fset 0 n) (fun (i:int) -&gt; (getbv x @ i) = 1))">
         <goal name="non_null_product_bitvec_inv&#39;vc.3.0.1.0.1.0.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="Hinst">
          <goal name="non_null_product_bitvec_inv&#39;vc.3.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="h1">
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="non_null_product_bitvec_inv&#39;vc.3.0.1.1" expl="asserted formula" proved="true">
     <transf name="instantiate" proved="true" arg1="in_my_filter_set" arg2="(to_fset 0 n),(fun (i:int) -&gt; (getbv x @ i) = 1),m">
      <goal name="non_null_product_bitvec_inv&#39;vc.3.0.1.1.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="Hinst">
       <goal name="non_null_product_bitvec_inv&#39;vc.3.0.1.1.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="h">
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="non_null_product_bitvec_inv&#39;vc.3.1" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="( 0 &lt;= m /\ m &lt; n)">
    <goal name="non_null_product_bitvec_inv&#39;vc.3.1.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="to_fset_bounds">
     <goal name="non_null_product_bitvec_inv&#39;vc.3.1.0.0" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="0.56" steps="286388"/></proof>
     </goal>
     <goal name="non_null_product_bitvec_inv&#39;vc.3.1.0.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="h">
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="non_null_product_bitvec_inv&#39;vc.3.1.1" expl="precondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="non_null_product_bitvec_inv&#39;vc.3.1.1.0" expl="VC for non_null_product_bitvec_inv" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="non_null_product_bitvec_inv&#39;vc.3.1.1.0.0" expl="VC for non_null_product_bitvec_inv" proved="true">
      <transf name="apply" proved="true" arg1="h1">
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="non_null_product_bitvec_inv&#39;vc.3.1.1.1" expl="VC for non_null_product_bitvec_inv" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="non_null_product_bitvec_inv&#39;vc.3.1.1.1.0" expl="VC for non_null_product_bitvec_inv" proved="true">
      <transf name="assert" proved="true" arg1="(forall a b. a&lt;b -&gt; a&lt;=b)">
       <goal name="non_null_product_bitvec_inv&#39;vc.3.1.1.1.0.0" expl="asserted formula" proved="true">
       <proof prover="7"><result status="valid" time="0.64" steps="330293"/></proof>
       </goal>
       <goal name="non_null_product_bitvec_inv&#39;vc.3.1.1.1.0.1" expl="VC for non_null_product_bitvec_inv" proved="true">
       <transf name="apply" proved="true" arg1="h">
        <goal name="non_null_product_bitvec_inv&#39;vc.3.1.1.1.0.1.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="h1">
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="non_null_product_bitvec_inv&#39;vc.4" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="ind_iproduct_plus_one">
   <goal name="non_null_product_bitvec_inv&#39;vc.4.0" expl="assertion" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="non_null_product_bitvec_inv&#39;vc.4.0.0" expl="assertion" proved="true">
    <transf name="replace" proved="true" arg1="(getbv x @ m)" arg2="1">
     <goal name="non_null_product_bitvec_inv&#39;vc.4.0.0.0" expl="assertion" proved="true">
     <proof prover="7"><result status="valid" time="0.33" steps="269713"/></proof>
     </goal>
     <goal name="non_null_product_bitvec_inv&#39;vc.4.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="instantiate" proved="true" arg1="in_my_filter_filter" arg2="(to_fset 0 n),(fun (i:int) -&gt; (getbv x @ i) = 1),m">
      <goal name="non_null_product_bitvec_inv&#39;vc.4.0.0.1.0" expl="equality hypothesis" proved="true">
      <transf name="assert" proved="true" arg1="(((fun (i:int) -&gt; (getbv x @ i) = 1) @ m) = True)">
       <goal name="non_null_product_bitvec_inv&#39;vc.4.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="Hinst">
        <goal name="non_null_product_bitvec_inv&#39;vc.4.0.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="non_null_product_bitvec_inv&#39;vc.4.0.0.1.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="Ensures7">
          <goal name="non_null_product_bitvec_inv&#39;vc.4.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="2.34" steps="633481"/></proof>
          </goal>
          <goal name="non_null_product_bitvec_inv&#39;vc.4.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="2.42" steps="634820"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="non_null_product_bitvec_inv&#39;vc.4.0.0.1.0.1" expl="equality hypothesis" proved="true">
       <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="h">
        <goal name="non_null_product_bitvec_inv&#39;vc.4.0.0.1.0.1.0" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="h">
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="non_null_product_bitvec_inv&#39;vc.4.1" expl="rewrite premises" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="non_null_product_bitvec_inv&#39;vc.4.1.0" expl="rewrite premises" proved="true">
    <transf name="apply" proved="true" arg1="Ensures2">
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="non_null_product_bitvec_inv&#39;vc.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="non_null_product_bitvec_inv&#39;vc.5.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(forall a b. b =0 -&gt; a*b=0)">
    <goal name="non_null_product_bitvec_inv&#39;vc.5.0.0" expl="asserted formula" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="non_null_product_bitvec_inv&#39;vc.5.0.0.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.35" steps="274858"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="non_null_product_bitvec_inv&#39;vc.5.0.1" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures">
     <goal name="non_null_product_bitvec_inv&#39;vc.5.0.1.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="h">
      <goal name="non_null_product_bitvec_inv&#39;vc.5.0.1.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="Assert">
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="null_product_bitvec_rev&#39;vc" expl="VC for null_product_bitvec_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="null_product_bitvec_rev&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.51" steps="234211"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="non_null_product_bitvec_rev&#39;vc" expl="VC for non_null_product_bitvec_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="non_null_product_bitvec_rev&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.52" steps="234298"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="null_product_bitvec_inv_rev&#39;vc" expl="VC for null_product_bitvec_inv_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="null_product_bitvec_inv_rev&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="7"><result status="valid" time="0.22" steps="204486"/></proof>
  </goal>
  <goal name="null_product_bitvec_inv_rev&#39;vc.1" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.51" steps="218898"/></proof>
  </goal>
  <goal name="null_product_bitvec_inv_rev&#39;vc.2" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H2">
   <goal name="null_product_bitvec_inv_rev&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="null_product_bitvec_inv_rev&#39;vc.2.0.0" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="0.35" steps="218841"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="null_product_bitvec_inv_rev&#39;vc.2.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="null_product_bitvec_inv_rev&#39;vc.2.1.0" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="((getbv x @ i) &lt;&gt; 0)">
     <goal name="null_product_bitvec_inv_rev&#39;vc.2.1.0.0" expl="true case (postcondition)" proved="true">
     <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="H2">
      <goal name="null_product_bitvec_inv_rev&#39;vc.2.1.0.0.0" expl="true case (postcondition)" proved="true">
      <transf name="case" proved="true" arg1="(i &lt;k-1)">
       <goal name="null_product_bitvec_inv_rev&#39;vc.2.1.0.0.0.0" expl="true case (postcondition)" proved="true">
       <proof prover="7"><result status="valid" time="0.67" steps="236388"/></proof>
       </goal>
       <goal name="null_product_bitvec_inv_rev&#39;vc.2.1.0.0.0.1" expl="false case (true case. postcondition)" proved="true">
       <transf name="replace" proved="true" arg1="(1 - (getbv x @ (k - 1)))" arg2="0" arg3="in" arg4="H2">
        <goal name="null_product_bitvec_inv_rev&#39;vc.2.1.0.0.0.1.0" expl="false case (true case. postcondition)" proved="true">
        <transf name="replace" proved="true" arg1="((ind_iproduct (fun (i1:int) -&gt; 1 - (getbv x @ i1)) 0 (k - 1) * 0))" arg2="0" arg3="in" arg4="H2">
         <goal name="null_product_bitvec_inv_rev&#39;vc.2.1.0.0.0.1.0.0" expl="false case (true case. postcondition)" proved="true">
         <transf name="instantiate" proved="true" arg1="ind_iproduct_trans" arg2="(fun (i1:int) -&gt; 1 - (getbv x @ i1)),0,k,n">
          <goal name="null_product_bitvec_inv_rev&#39;vc.2.1.0.0.0.1.0.0.0" expl="false case (true case. postcondition)" proved="true">
          <transf name="replace" proved="true" arg1="(ind_iproduct (fun (i1:int) -&gt; 1 - (getbv x @ i1)) 0 k
     * ind_iproduct (fun (i1:int) -&gt; 1 - (getbv x @ i1)) k n)" arg2="0" arg3="in" arg4="Hinst">
           <goal name="null_product_bitvec_inv_rev&#39;vc.2.1.0.0.0.1.0.0.0.0" expl="false case (true case. postcondition)" proved="true">
           <proof prover="7"><result status="valid" time="0.61" steps="238102"/></proof>
           </goal>
           <goal name="null_product_bitvec_inv_rev&#39;vc.2.1.0.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="0"><result status="valid" time="0.60"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="null_product_bitvec_inv_rev&#39;vc.2.1.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
         <proof prover="7"><result status="valid" time="0.23" steps="204859"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="null_product_bitvec_inv_rev&#39;vc.2.1.0.0.0.1.1" expl="equality hypothesis" proved="true">
        <proof prover="0"><result status="valid" time="0.28"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="null_product_bitvec_inv_rev&#39;vc.2.1.0.1" expl="false case (postcondition)" proved="true">
     <proof prover="7"><result status="valid" time="0.23" steps="204834"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="null_product_bitvec_inv_rev&#39;vc.3" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.52" steps="234712"/></proof>
  </goal>
  <goal name="null_product_bitvec_inv_rev&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.64" steps="235209"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inter&#39;vc" expl="VC for inter" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inter&#39;vc.0" expl="assertion" proved="true">
  <proof prover="7"><result status="valid" time="0.40" steps="219371"/></proof>
  </goal>
  <goal name="inter&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="7"><result status="valid" time="0.26" steps="204965"/></proof>
  </goal>
  <goal name="inter&#39;vc.2" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.28" steps="204937"/></proof>
  </goal>
  <goal name="inter&#39;vc.3" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.63" steps="236854"/></proof>
  </goal>
  <goal name="inter&#39;vc.4" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.43" steps="219482"/></proof>
  </goal>
  <goal name="inter&#39;vc.5" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.52" steps="236411"/></proof>
  </goal>
  <goal name="inter&#39;vc.6" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="inter&#39;vc.6.0" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.51" steps="235073"/></proof>
   </goal>
   <goal name="inter&#39;vc.6.1" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="inter&#39;vc.6.1.0" expl="postcondition" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="inter&#39;vc.6.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H">
      <goal name="inter&#39;vc.6.1.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="mult_one">
       <goal name="inter&#39;vc.6.1.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="7"><result status="valid" time="0.68" steps="268403"/></proof>
       </goal>
       <goal name="inter&#39;vc.6.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="1.77" steps="510267"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="inter&#39;vc.6.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.28" steps="234327"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="non_null_product_bitvec_inv_rev&#39;vc" expl="VC for non_null_product_bitvec_inv_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="non_null_product_bitvec_inv_rev&#39;vc.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(forall i:int. 0 &lt;= i /\ i &lt; n -&gt; (getbv x @ i) = 0)">
   <goal name="non_null_product_bitvec_inv_rev&#39;vc.0.0" expl="true case (postcondition)" proved="true">
   <transf name="instantiate" proved="true" arg1="null_product_bitvec_inv" arg2="x,n">
    <goal name="non_null_product_bitvec_inv_rev&#39;vc.0.0.0" expl="true case (postcondition)" proved="true">
    <proof prover="7"><result status="valid" time="0.60" steps="237503"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="non_null_product_bitvec_inv_rev&#39;vc.0.1" expl="false case (postcondition)" proved="true">
   <proof prover="7"><result status="valid" time="0.43" steps="219872"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_flength&#39;vc" expl="VC for set_flength" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_flength&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="set_flength&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="bvlength&#39;def">
    <goal name="set_flength&#39;vc.0.0.0" expl="VC for set_flength" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="set_flength&#39;vc.0.0.0.0" expl="VC for set_flength" proved="true">
     <proof prover="7"><result status="valid" time="0.54" steps="236311"/></proof>
     </goal>
     <goal name="set_flength&#39;vc.0.0.0.1" expl="VC for set_flength" proved="true">
     <proof prover="7"><result status="valid" time="0.48" steps="236315"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="get_bvlength&#39;vc" expl="VC for get_bvlength" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_bvlength&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="get_bvlength&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="1.55" steps="474335"/></proof>
   </goal>
   <goal name="get_bvlength&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="1.54" steps="474278"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_bv_to&#39;vc" expl="VC for set_bv_to" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_bv_to&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.52" steps="474669"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_in_range_val&#39;vc" expl="VC for set_in_range_val" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_in_range_val&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="set_in_range_val&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.49" steps="236089"/></proof>
   </goal>
   <goal name="set_in_range_val&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.62" steps="236088"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bvlengthm&#39;vc" expl="VC for bvlengthm" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bvlengthm&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.57" steps="479765"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="binary_bv&#39;vc" expl="VC for binary_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="binary_bv&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.49" steps="236327"/></proof>
  </goal>
  <goal name="binary_bv&#39;vc.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="binary_bv&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.62" steps="236499"/></proof>
   </goal>
   <goal name="binary_bv&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.47" steps="236496"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_equal_bv&#39;vc" expl="VC for set_equal_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_equal_bv&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.56" steps="484828"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_equal_bv&#39;vc" expl="VC for get_equal_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_equal_bv&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.23" steps="184287"/></proof>
  </goal>
  <goal name="get_equal_bv&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.27" steps="211473"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="make_bv&#39;vc" expl="VC for make_bv" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="make_bv&#39;vc.0" expl="VC for make_bv" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="make_bv&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.23" steps="207174"/></proof>
   </goal>
   <goal name="make_bv&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.49" steps="236812"/></proof>
   </goal>
   <goal name="make_bv&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.40" steps="221812"/></proof>
   </goal>
   <goal name="make_bv&#39;vc.0.3" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.23" steps="207288"/></proof>
   </goal>
   <goal name="make_bv&#39;vc.0.4" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.53" steps="237993"/></proof>
   </goal>
   <goal name="make_bv&#39;vc.0.5" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.55" steps="238291"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="make_bv_m&#39;vc" expl="VC for make_bv_m" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="make_bv_m&#39;vc.0" expl="VC for make_bv_m" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="make_bv_m&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.19" steps="180587"/></proof>
   </goal>
   <goal name="make_bv_m&#39;vc.0.1" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="make_bv_m&#39;vc.0.1.0" expl="precondition" proved="true">
    <proof prover="6"><result status="valid" time="1.31" steps="18858"/></proof>
    </goal>
    <goal name="make_bv_m&#39;vc.0.1.1" expl="precondition" proved="true">
    <proof prover="6"><result status="valid" time="1.32" steps="19130"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="make_bv_m&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.25" steps="208016"/></proof>
   </goal>
   <goal name="make_bv_m&#39;vc.0.3" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="make_bv_m&#39;vc.0.3.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="make_bv&#39;spec3">
     <goal name="make_bv_m&#39;vc.0.3.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="make_bv_m&#39;vc.0.3.0.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.44" steps="10989"/></proof>
      </goal>
      <goal name="make_bv_m&#39;vc.0.3.0.0.1" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.45" steps="11226"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="make_bv_m&#39;vc.0.3.0.1" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="0.28" steps="239015"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="make_bv_m&#39;vc.0.4" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="1.57" steps="484323"/></proof>
   </goal>
   <goal name="make_bv_m&#39;vc.0.5" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(k &lt;0)">
    <goal name="make_bv_m&#39;vc.0.5.0" expl="true case (postcondition)" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="make_bv_m&#39;vc.0.5.0.0" expl="true case (postcondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="make_bv&#39;spec1">
      <goal name="make_bv_m&#39;vc.0.5.0.0.0" expl="true case (postcondition)" proved="true">
      <proof prover="7"><result status="valid" time="0.28" steps="239461"/></proof>
      </goal>
      <goal name="make_bv_m&#39;vc.0.5.0.0.1" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="make_bv_m&#39;vc.0.5.0.0.1.0" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="0.29" steps="239655"/></proof>
       </goal>
       <goal name="make_bv_m&#39;vc.0.5.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="0.28" steps="239657"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="make_bv_m&#39;vc.0.5.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.26" steps="239445"/></proof>
      </goal>
      <goal name="make_bv_m&#39;vc.0.5.0.0.3" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.28" steps="239445"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="make_bv_m&#39;vc.0.5.1" expl="false case (postcondition)" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="make_bv_m&#39;vc.0.5.1.0" expl="false case (postcondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="make_bv&#39;spec2">
      <goal name="make_bv_m&#39;vc.0.5.1.0.0" expl="false case (postcondition)" proved="true">
      <proof prover="0"><result status="valid" time="0.25"/></proof>
      </goal>
      <goal name="make_bv_m&#39;vc.0.5.1.0.1" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="make_bv_m&#39;vc.0.5.1.0.1.0" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.44" steps="11104"/></proof>
       </goal>
       <goal name="make_bv_m&#39;vc.0.5.1.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.46" steps="11343"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="make_bv_m&#39;vc.0.5.1.0.2" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.26" steps="239449"/></proof>
      </goal>
      <goal name="make_bv_m&#39;vc.0.5.1.0.3" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="make_bv_m&#39;vc.0.5.1.0.3.0" proved="true">
       <proof prover="7"><result status="valid" time="0.25" steps="239449"/></proof>
       </goal>
       <goal name="make_bv_m&#39;vc.0.5.1.0.3.1" proved="true">
       <proof prover="7"><result status="valid" time="0.26" steps="239451"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="make_bv_m&#39;vc.0.6" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="make_bv_m&#39;vc.0.6.0" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(k &lt; 0)">
     <goal name="make_bv_m&#39;vc.0.6.0.0" expl="true case (postcondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="make_bv&#39;spec1">
      <goal name="make_bv_m&#39;vc.0.6.0.0.0" expl="true case (postcondition)" proved="true">
      <proof prover="7"><result status="valid" time="0.27" steps="239849"/></proof>
      </goal>
      <goal name="make_bv_m&#39;vc.0.6.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.78" steps="20835"/></proof>
      </goal>
      <goal name="make_bv_m&#39;vc.0.6.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.30" steps="239851"/></proof>
      </goal>
      <goal name="make_bv_m&#39;vc.0.6.0.0.3" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.28" steps="239851"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="make_bv_m&#39;vc.0.6.0.1" expl="false case (postcondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="make_bv&#39;spec">
      <goal name="make_bv_m&#39;vc.0.6.0.1.0" expl="false case (postcondition)" proved="true">
      <proof prover="7"><result status="valid" time="0.31" steps="239853"/></proof>
      </goal>
      <goal name="make_bv_m&#39;vc.0.6.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.77" steps="20835"/></proof>
      </goal>
      <goal name="make_bv_m&#39;vc.0.6.0.1.2" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.29" steps="239855"/></proof>
      </goal>
      <goal name="make_bv_m&#39;vc.0.6.0.1.3" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.29" steps="239857"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bitvec_null&#39;vc" expl="VC for bitvec_null" proved="true">
 <transf name="compute_specified" proved="true" >
 </transf>
 </goal>
 <goal name="assert_make_bv_no_bound&#39;vc" expl="VC for assert_make_bv_no_bound" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="assert_make_bv_no_bound&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="assert_make_bv_no_bound&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="make_bv&#39;spec">
    <goal name="assert_make_bv_no_bound&#39;vc.0.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="assert_make_bv_no_bound&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="0.36" steps="239350"/></proof>
     </goal>
     <goal name="assert_make_bv_no_bound&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="0.28" steps="239352"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="assert_make_bv_no_bound&#39;vc.0.0.1" expl="apply premises" proved="true">
    <proof prover="7"><result status="valid" time="0.27" steps="239318"/></proof>
    </goal>
    <goal name="assert_make_bv_no_bound&#39;vc.0.0.2" expl="apply premises" proved="true">
    <proof prover="7"><result status="valid" time="0.58" steps="254752"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="make_bv_length&#39;vc" expl="VC for make_bv_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="make_bv_length&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="make_bv_length&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="1.65" steps="502664"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="assert_make_bv&#39;vc" expl="VC for assert_make_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="assert_make_bv&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="assert_make_bv&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="1.91" steps="505809"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="assert_make_m&#39;vc" expl="VC for assert_make_m" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="assert_make_m&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.20"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="make_bv_eq&#39;vc" expl="VC for make_bv_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="make_bv_eq&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_bv">
   <goal name="make_bv_eq&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="rewrite" proved="true" arg1="make_bv_length">
    <goal name="make_bv_eq&#39;vc.0.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="make_bv_length">
     <goal name="make_bv_eq&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="0.28" steps="209705"/></proof>
     </goal>
     <goal name="make_bv_eq&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="make_bv_eq&#39;vc.0.0.0.1.0" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="1.62" steps="479542"/></proof>
      </goal>
      <goal name="make_bv_eq&#39;vc.0.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="1.71" steps="479512"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="make_bv_eq&#39;vc.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.40" steps="224562"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="make_bv_eq&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="make_bv_eq&#39;vc.0.0.1.0" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.57" steps="239839"/></proof>
     </goal>
     <goal name="make_bv_eq&#39;vc.0.0.1.1" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.66" steps="239828"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="make_bv_eq&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.23" steps="209705"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="make_bv_eq&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="make_bv_eq&#39;vc.0.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="assert_make_bv">
     <goal name="make_bv_eq&#39;vc.0.1.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="assert_make_bv">
      <goal name="make_bv_eq&#39;vc.0.1.0.0.0" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="0.51" steps="240788"/></proof>
      </goal>
      <goal name="make_bv_eq&#39;vc.0.1.0.0.1" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="make_bv_eq&#39;vc.0.1.0.0.1.0" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="1.43" steps="484270"/></proof>
       </goal>
       <goal name="make_bv_eq&#39;vc.0.1.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="1.57" steps="484387"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="make_bv_eq&#39;vc.0.1.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.40" steps="224601"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="make_bv_eq&#39;vc.0.1.0.1" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="make_bv_eq&#39;vc.0.1.0.1.0" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.56" steps="240319"/></proof>
      </goal>
      <goal name="make_bv_eq&#39;vc.0.1.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.54" steps="240308"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="make_bv_eq&#39;vc.0.1.0.2" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.23" steps="209741"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="assert_make_bv_b&#39;vc" expl="VC for assert_make_bv_b" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="assert_make_bv_b&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.66" steps="485920"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="assert_make_m_b&#39;vc" expl="VC for assert_make_m_b" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="assert_make_m_b&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.22"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="make_m_bv_length&#39;vc" expl="VC for make_m_bv_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="make_m_bv_length&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="make_bv_m&#39;def">
   <goal name="make_m_bv_length&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_bvlength">
    <goal name="make_m_bv_length&#39;vc.0.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="make_m_bv_length&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="assert_make_bv">
      <goal name="make_m_bv_length&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="3.02"/></proof>
      </goal>
      <goal name="make_m_bv_length&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="make_m_bv_length&#39;vc.0.0.0.0.1.0" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="1.26" steps="19056"/></proof>
       </goal>
       <goal name="make_m_bv_length&#39;vc.0.0.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="1.34" steps="19329"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="make_m_bv_length&#39;vc.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.19" steps="183885"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="make_m_bv_length&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="assert_make_bv">
      <goal name="make_m_bv_length&#39;vc.0.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="3.32"/></proof>
      </goal>
      <goal name="make_m_bv_length&#39;vc.0.0.0.1.1" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="make_m_bv_length&#39;vc.0.0.0.1.1.0" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="1.33" steps="19056"/></proof>
       </goal>
       <goal name="make_m_bv_length&#39;vc.0.0.0.1.1.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="1.30" steps="19329"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="make_m_bv_length&#39;vc.0.0.0.1.2" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.19" steps="183885"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="make_m_bv_length&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="7"><result status="valid" time="0.20" steps="183845"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="make_m_length&#39;vc" expl="VC for make_m_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="make_m_length&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.22"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_equal_bv_make&#39;vc" expl="VC for set_equal_bv_make" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="set_equal_bv_make&#39;vc.0" expl="VC for set_equal_bv_make" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="set_equal_bv_make&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.85" steps="480774"/></proof>
   </goal>
   <goal name="set_equal_bv_make&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.25" steps="210823"/></proof>
   </goal>
   <goal name="set_equal_bv_make&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.53" steps="241236"/></proof>
   </goal>
   <goal name="set_equal_bv_make&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.25" steps="211044"/></proof>
   </goal>
   <goal name="set_equal_bv_make&#39;vc.0.4" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.38" steps="225740"/></proof>
   </goal>
   <goal name="set_equal_bv_make&#39;vc.0.5" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.46" steps="227405"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_equal_bv_make_&#39;vc" expl="VC for set_equal_bv_make_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_equal_bv_make_&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="1.56" steps="481163"/></proof>
  </goal>
  <goal name="set_equal_bv_make_&#39;vc.1" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.27" steps="211132"/></proof>
  </goal>
  <goal name="set_equal_bv_make_&#39;vc.2" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.54" steps="241543"/></proof>
  </goal>
  <goal name="set_equal_bv_make_&#39;vc.3" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.25" steps="211353"/></proof>
  </goal>
  <goal name="set_equal_bv_make_&#39;vc.4" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.36" steps="226042"/></proof>
  </goal>
  <goal name="set_equal_bv_make_&#39;vc.5" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="1.64" steps="502897"/></proof>
  </goal>
  <goal name="set_equal_bv_make_&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.25" steps="211466"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_equal_bv_m_make&#39;vc" expl="VC for set_equal_bv_m_make" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="set_equal_bv_m_make&#39;vc.0" expl="VC for set_equal_bv_m_make" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="set_equal_bv_m_make&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.25" steps="211353"/></proof>
   </goal>
   <goal name="set_equal_bv_m_make&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.26" steps="211733"/></proof>
   </goal>
   <goal name="set_equal_bv_m_make&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.40" steps="226697"/></proof>
   </goal>
   <goal name="set_equal_bv_m_make&#39;vc.0.3" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures1">
    <goal name="set_equal_bv_m_make&#39;vc.0.3.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Requires1">
     <goal name="set_equal_bv_m_make&#39;vc.0.3.0.0" expl="precondition" proved="true">
     <proof prover="0"><result status="valid" time="0.23"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="set_equal_bv_m_make&#39;vc.0.3.1" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.46" steps="226834"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="make_bv_itself&#39;vc" expl="VC for make_bv_itself" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="make_bv_itself&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_bv">
   <goal name="make_bv_itself&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="7"><result status="valid" time="0.50" steps="242128"/></proof>
   </goal>
   <goal name="make_bv_itself&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="make_bv_itself&#39;vc.0.1.0" expl="apply premises" proved="true">
    <proof prover="7"><result status="valid" time="0.51" steps="243533"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="head&#39;vc" expl="VC for head" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="head&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="head&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.50" steps="242173"/></proof>
   </goal>
   <goal name="head&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.51" steps="242165"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="makes_bv&#39;vc" expl="VC for makes_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="makes_bv&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="makes_bv&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.67" steps="242763"/></proof>
   </goal>
   <goal name="makes_bv&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.65" steps="242754"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="makes_bv&#39;vc.1" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.24" steps="212058"/></proof>
  </goal>
  <goal name="makes_bv&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.24" steps="212165"/></proof>
  </goal>
  <goal name="makes_bv&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.50" steps="243757"/></proof>
  </goal>
  <goal name="makes_bv&#39;vc.4" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="makes_bv&#39;vc.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="makes_bv&#39;vc.4.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_bv">
     <goal name="makes_bv&#39;vc.4.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="make_bv_length">
      <goal name="makes_bv&#39;vc.4.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="1.68" steps="515246"/></proof>
      </goal>
      <goal name="makes_bv&#39;vc.4.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.52" steps="246238"/></proof>
      </goal>
      <goal name="makes_bv&#39;vc.4.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.25" steps="213677"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="makes_bv&#39;vc.4.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="makes_bv&#39;vc.4.0.0.1.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="assert_make_bv">
       <goal name="makes_bv&#39;vc.4.0.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.33"/></proof>
       </goal>
       <goal name="makes_bv&#39;vc.4.0.0.1.0.1" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="makes_bv&#39;vc.4.0.0.1.0.1.0" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="0.52" steps="245871"/></proof>
        </goal>
        <goal name="makes_bv&#39;vc.4.0.0.1.0.1.1" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="0.55" steps="245857"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="makes_bv&#39;vc.4.0.0.1.0.2" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="0.25" steps="213800"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="makes_bv&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.67" steps="244931"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="assert_makes_bv_c&#39;vc" expl="VC for assert_makes_bv_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="assert_makes_bv_c&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.22"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="assert_makes_bv_b&#39;vc" expl="VC for assert_makes_bv_b" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="assert_makes_bv_b&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.59" steps="489563"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="assert_makes_bv&#39;vc" expl="VC for assert_makes_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="assert_makes_bv&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.58" steps="489765"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="makes_bv_length&#39;vc" expl="VC for makes_bv_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="makes_bv_length&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.21"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="tail&#39;vc" expl="VC for tail" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="tail&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="tail&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.56" steps="488687"/></proof>
   </goal>
   <goal name="tail&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.54" steps="488715"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="tail&#39;vc.1" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.23" steps="213666"/></proof>
  </goal>
  <goal name="tail&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.24" steps="213761"/></proof>
  </goal>
  <goal name="tail&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.59" steps="499552"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="concat_l&#39;vc" expl="VC for concat_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="concat_l&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="concat_l&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.56" steps="490085"/></proof>
   </goal>
   <goal name="concat_l&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.59" steps="489817"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="concat_l&#39;vc.1" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.66" steps="244834"/></proof>
  </goal>
  <goal name="concat_l&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.24" steps="214249"/></proof>
  </goal>
  <goal name="concat_l&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.71" steps="498118"/></proof>
  </goal>
  <goal name="concat_l&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.82" steps="514384"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="concat_l_value&#39;vc" expl="VC for concat_l_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="concat_l_value&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="concat_l_value&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="concat_l&#39;def">
    <goal name="concat_l_value&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="assert_make_bv">
     <goal name="concat_l_value&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="concat_l_value&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="7"><result status="valid" time="1.70" steps="515346"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="concat_l_value&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="concat_l_value&#39;vc.0.0.0.1.0" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="1.69" steps="512094"/></proof>
      </goal>
      <goal name="concat_l_value&#39;vc.0.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="1.69" steps="512136"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="concat_l_value&#39;vc.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.63" steps="242402"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="concat_l_value&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.23" steps="214999"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="concat_l_value_b&#39;vc" expl="VC for concat_l_value_b" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="concat_l_value_b&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.53" steps="247865"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="concat_ht&#39;vc" expl="VC for concat_ht" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="concat_ht&#39;vc.0" expl="VC for concat_ht" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="concat_ht&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.20" steps="188788"/></proof>
   </goal>
   <goal name="concat_ht&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.22" steps="188821"/></proof>
   </goal>
   <goal name="concat_ht&#39;vc.0.2" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="concat_ht&#39;vc.0.2.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.25" steps="214867"/></proof>
    </goal>
    <goal name="concat_ht&#39;vc.0.2.1" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.25" steps="214867"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="concat_ht&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.42" steps="230675"/></proof>
   </goal>
   <goal name="concat_ht&#39;vc.0.4" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="concat_l&#39;def">
    <goal name="concat_ht&#39;vc.0.4.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="assert_make_bv">
     <goal name="concat_ht&#39;vc.0.4.0.0" expl="precondition" proved="true">
     <transf name="case" proved="true" arg1="(0 &lt;= i /\ i &lt; (length (tail bv) + 1))">
      <goal name="concat_ht&#39;vc.0.4.0.0.0" expl="true case (precondition)" proved="true">
      <transf name="replace" proved="true" arg1="(if 0 &lt;= i /\ i &lt; (length (tail bv) + 1)
     then (fun (k:int) -&gt; if k = 0 then head bv else getbv (tail bv) (k - 1))
          @ i
     else 0)
" arg2="((fun (k:int) -&gt; if k = 0 then head bv else getbv (tail bv) (k - 1))
          @ i)">
       <goal name="concat_ht&#39;vc.0.4.0.0.0.0" expl="true case (precondition)" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="concat_ht&#39;vc.0.4.0.0.0.0.0" expl="true case (precondition)" proved="true">
        <transf name="eliminate_if" proved="true" >
         <goal name="concat_ht&#39;vc.0.4.0.0.0.0.0.0" expl="VC for concat_ht" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="concat_ht&#39;vc.0.4.0.0.0.0.0.0.0" expl="true case (precondition)" proved="true">
          <proof prover="7"><result status="valid" time="0.53" steps="249819"/></proof>
          </goal>
          <goal name="concat_ht&#39;vc.0.4.0.0.0.0.0.0.1" expl="true case (precondition)" proved="true">
          <proof prover="7"><result status="valid" time="2.38" steps="949764"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="concat_ht&#39;vc.0.4.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="7"><result status="valid" time="0.72" steps="247915"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="concat_ht&#39;vc.0.4.0.0.1" expl="false case (precondition)" proved="true">
      <proof prover="7"><result status="valid" time="0.39" steps="230077"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="concat_ht&#39;vc.0.4.0.1" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="concat_ht&#39;vc.0.4.0.1.0" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="1.70" steps="509786"/></proof>
      </goal>
      <goal name="concat_ht&#39;vc.0.4.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="1.59" steps="510213"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="concat_ht&#39;vc.0.4.0.2" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.41" steps="229805"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="concat_ht&#39;vc.0.4.1" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.23" steps="215041"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="concat_ht&#39;vc.0.5" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.25" steps="215009"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="concat_ht_union&#39;vc" expl="VC for concat_ht_union" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="concat_ht_union&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.35" steps="202876"/></proof>
  </goal>
  <goal name="concat_ht_union&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="2.47" steps="35892"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_int&#39;vc" expl="VC for bv_to_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_to_int&#39;vc.0" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="ind_isum_eq">
   <goal name="bv_to_int&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="bv_to_int&#39;vc.0.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="bv_to_int&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="0.69" steps="246989"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="bv_to_int&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.74" steps="538634"/></proof>
  </goal>
  <goal name="bv_to_int&#39;vc.2" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="bv_to_int&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="ind_isum_pos">
    <goal name="bv_to_int&#39;vc.2.0.0" expl="apply premises" proved="true">
    <proof prover="7"><result status="valid" time="0.77" steps="277235"/></proof>
    </goal>
    <goal name="bv_to_int&#39;vc.2.0.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="bv_to_int&#39;vc.2.0.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="bv_to_int&#39;vc.2.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.26"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_int_eq&#39;vc" expl="VC for bv_to_int_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_to_int_eq&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.23" steps="193947"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_int_sum&#39;vc" expl="VC for bv_to_int_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_to_int_sum&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="bv_to_int_sum&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="bv_to_int&#39;spec1">
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_int_sum_inv&#39;vc" expl="VC for bv_to_int_sum_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_to_int_sum_inv&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
   <goal name="bv_to_int_sum_inv&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ind_isum_rev">
    <goal name="bv_to_int_sum_inv&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="bv_to_int_sum_inv&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="7"><result status="valid" time="0.63" steps="249033"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_int_sum_opp&#39;vc" expl="VC for bv_to_int_sum_opp" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="bv_to_int_sum_opp&#39;vc.0" expl="VC for bv_to_int_sum_opp" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bv_to_int_sum_opp&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.45" steps="216749"/></proof>
   </goal>
   <goal name="bv_to_int_sum_opp&#39;vc.0.1" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="bv_to_int_sum_opp&#39;vc.0.1.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ind_isum_empty">
     <goal name="bv_to_int_sum_opp&#39;vc.0.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
      <goal name="bv_to_int_sum_opp&#39;vc.0.1.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="ind_isum_empty">
       <goal name="bv_to_int_sum_opp&#39;vc.0.1.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="7"><result status="valid" time="0.20" steps="189743"/></proof>
       </goal>
       <goal name="bv_to_int_sum_opp&#39;vc.0.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="0.24" steps="194331"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="bv_to_int_sum_opp&#39;vc.0.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.23" steps="194331"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="bv_to_int_sum_opp&#39;vc.0.1.1" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(ind_isum
    (fun (k:int) -&gt; (- (getbv bv @ k)) * power 2 ((length bv - 1) - k)) 0
    (length bv))" arg2="(ind_isum
  (fun (i:int) -&gt;
    (- 1)
    * (if 0 &lt;= i /\ i &lt; length bv
       then (getbv bv @ i) * power 2 ((length bv - 1) - i) else 0))
  0 (length bv))">
     <goal name="bv_to_int_sum_opp&#39;vc.0.1.1.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(- bv_to_int bv)" arg2="((-1) * bv_to_int bv)">
      <goal name="bv_to_int_sum_opp&#39;vc.0.1.1.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H">
       <goal name="bv_to_int_sum_opp&#39;vc.0.1.1.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="mult_eq">
        <goal name="bv_to_int_sum_opp&#39;vc.0.1.1.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="0.25" steps="215791"/></proof>
        </goal>
        <goal name="bv_to_int_sum_opp&#39;vc.0.1.1.0.0.0.1" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
         <goal name="bv_to_int_sum_opp&#39;vc.0.1.1.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="ind_isum_eq">
          <goal name="bv_to_int_sum_opp&#39;vc.0.1.1.0.0.0.1.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="bv_to_int_sum_opp&#39;vc.0.1.1.0.0.0.1.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="bv_to_int_sum_opp&#39;vc.0.1.1.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="7"><result status="valid" time="0.39" steps="230774"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="bv_to_int_sum_opp&#39;vc.0.1.1.0.1" expl="equality hypothesis" proved="true">
      <proof prover="7"><result status="valid" time="0.25" steps="215817"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="bv_to_int_sum_opp&#39;vc.0.1.1.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="ind_isum_eq">
      <goal name="bv_to_int_sum_opp&#39;vc.0.1.1.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="bv_to_int_sum_opp&#39;vc.0.1.1.1.0.0" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="0.22" steps="215973"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_int_onebit&#39;vc" expl="VC for bv_to_int_onebit" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_to_int_onebit&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
   <goal name="bv_to_int_onebit&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ind_isum_one">
    <goal name="bv_to_int_onebit&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="bv_to_int_onebit&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="6"><result status="valid" time="0.11" steps="2794"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="bv_to_int_onebit&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.21" steps="189920"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ind_isum_bv_rev&#39;vc" expl="VC for ind_isum_bv_rev" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="ind_isum_bv_rev&#39;vc.0" expl="VC for ind_isum_bv_rev" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ind_isum_bv_rev&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.93" steps="318774"/></proof>
   </goal>
   <goal name="ind_isum_bv_rev&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.93" steps="319643"/></proof>
   </goal>
   <goal name="ind_isum_bv_rev&#39;vc.0.2" expl="precondition" proved="true">
   <transf name="exists" proved="true" arg1="(length bv -1 - e&#39;)
">
    <goal name="ind_isum_bv_rev&#39;vc.0.2.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="ind_isum_bv_rev&#39;vc.0.2.0.0" proved="true">
     <proof prover="7"><result status="valid" time="0.77" steps="318646"/></proof>
     </goal>
     <goal name="ind_isum_bv_rev&#39;vc.0.2.0.1" proved="true">
     <proof prover="7"><result status="valid" time="0.90" steps="318637"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ind_isum_bv_rev&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.31" steps="282197"/></proof>
   </goal>
   <goal name="ind_isum_bv_rev&#39;vc.0.4" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ind_isum (fun (l:int) -&gt; getbv bv l * power 2 ((length bv - 1) - l)) i
  (length bv))" arg2="(ind_isum
  (fun (l:int) -&gt;
    if 0 &lt;= l /\ l &lt; length bv
    then getbv bv l * power 2 ((length bv - 1) - l) else 0)
  i (length bv))">
    <goal name="ind_isum_bv_rev&#39;vc.0.4.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures">
     <goal name="ind_isum_bv_rev&#39;vc.0.4.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="ind_isum_eq">
      <goal name="ind_isum_bv_rev&#39;vc.0.4.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="ind_isum_bv_rev&#39;vc.0.4.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="ind_isum_bv_rev&#39;vc.0.4.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="0.53" steps="300208"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="ind_isum_bv_rev&#39;vc.0.4.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="ind_isum_eq">
     <goal name="ind_isum_bv_rev&#39;vc.0.4.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ind_isum_bv_rev&#39;vc.0.4.1.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="ind_isum_bv_rev&#39;vc.0.4.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="0.66" steps="300180"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ind_isum_bin_rev&#39;vc" expl="VC for ind_isum_bin_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ind_isum_bin_rev&#39;vc.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="ind_isum_bv_rev" arg2="(make_bv f n)">
   <goal name="ind_isum_bin_rev&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ind_isum (fun (l:int) -&gt; (f @ l) * power 2 ((n - 1) - l)) i n)" arg2="( ind_isum
   (fun (l:int) -&gt;
     (getbv (make_bv f n) @ l) * power 2 ((length (make_bv f n) - 1) - l))
   i (length (make_bv f n)))">
    <goal name="ind_isum_bin_rev&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Hinst">
     <goal name="ind_isum_bin_rev&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
      <goal name="ind_isum_bin_rev&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="ind_isum_bin_rev&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="ind_isum_bin_rev&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="assert_make_bv">
         <goal name="ind_isum_bin_rev&#39;vc.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="eliminate_if" proved="true" >
          <goal name="ind_isum_bin_rev&#39;vc.0.0.0.0.0.0.0.0.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="ind_isum_bin_rev&#39;vc.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="make_bv_length">
            <goal name="ind_isum_bin_rev&#39;vc.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
            </transf>
            </goal>
            <goal name="ind_isum_bin_rev&#39;vc.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="ind_isum_bin_rev&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
             <proof prover="7"><result status="valid" time="0.56" steps="250338"/></proof>
             </goal>
             <goal name="ind_isum_bin_rev&#39;vc.0.0.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
             <proof prover="7"><result status="valid" time="0.69" steps="250332"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="ind_isum_bin_rev&#39;vc.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="7"><result status="valid" time="0.38" steps="233767"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="ind_isum_bin_rev&#39;vc.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="2.33" steps="944519"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="ind_isum_bin_rev&#39;vc.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="ind_isum_bin_rev&#39;vc.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="0.53" steps="248270"/></proof>
          </goal>
          <goal name="ind_isum_bin_rev&#39;vc.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="0.54" steps="248254"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="ind_isum_bin_rev&#39;vc.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="0.41" steps="231369"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="ind_isum_bin_rev&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="0.26" steps="216378"/></proof>
      </goal>
      <goal name="ind_isum_bin_rev&#39;vc.0.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="1.72" steps="498734"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="ind_isum_bin_rev&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ind_isum_bin_rev&#39;vc.0.0.0.1.0" proved="true">
      <proof prover="7"><result status="valid" time="0.27" steps="216380"/></proof>
      </goal>
      <goal name="ind_isum_bin_rev&#39;vc.0.0.0.1.1" proved="true">
      <proof prover="7"><result status="valid" time="1.74" steps="498591"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="ind_isum_bin_rev&#39;vc.0.0.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
     <goal name="ind_isum_bin_rev&#39;vc.0.0.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ind_isum_bin_rev&#39;vc.0.0.1.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="ind_isum_bin_rev&#39;vc.0.0.1.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="make_bv_length">
        <goal name="ind_isum_bin_rev&#39;vc.0.0.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="assert_make_bv">
         <goal name="ind_isum_bin_rev&#39;vc.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="eliminate_if" proved="true" >
          <goal name="ind_isum_bin_rev&#39;vc.0.0.1.0.0.0.0.0.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="ind_isum_bin_rev&#39;vc.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="0.26" steps="218944"/></proof>
           </goal>
           <goal name="ind_isum_bin_rev&#39;vc.0.0.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="0.42" steps="233822"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="ind_isum_bin_rev&#39;vc.0.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="ind_isum_bin_rev&#39;vc.0.0.1.0.0.0.0.1.0" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="0.54" steps="247537"/></proof>
          </goal>
          <goal name="ind_isum_bin_rev&#39;vc.0.0.1.0.0.0.0.1.1" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="0.55" steps="247531"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="ind_isum_bin_rev&#39;vc.0.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="0.42" steps="231368"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="ind_isum_bin_rev&#39;vc.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="ind_isum_bin_rev&#39;vc.0.0.1.0.0.0.1.0" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="0.59" steps="247537"/></proof>
         </goal>
         <goal name="ind_isum_bin_rev&#39;vc.0.0.1.0.0.0.1.1" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="0.56" steps="247531"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="ind_isum_bin_rev&#39;vc.0.0.1.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="0.42" steps="231368"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ind_isum_bin_rev&#39;vc.0.0.1.1" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="0.26" steps="216378"/></proof>
     </goal>
     <goal name="ind_isum_bin_rev&#39;vc.0.0.1.2" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="1.45" steps="498721"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ind_isum_bin_rev_z&#39;vc" expl="VC for ind_isum_bin_rev_z" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ind_isum_bin_rev_z&#39;vc.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(n=0)">
   <goal name="ind_isum_bin_rev_z&#39;vc.0.0" expl="true case (postcondition)" proved="true">
   <proof prover="7"><result status="valid" time="0.55" steps="249601"/></proof>
   </goal>
   <goal name="ind_isum_bin_rev_z&#39;vc.0.1" expl="false case (postcondition)" proved="true">
   <transf name="rewrite" proved="true" arg1="ind_isum_bin_rev">
    <goal name="ind_isum_bin_rev_z&#39;vc.0.1.0" expl="false case (postcondition)" proved="true">
    <proof prover="7"><result status="valid" time="0.64" steps="250080"/></proof>
    </goal>
    <goal name="ind_isum_bin_rev_z&#39;vc.0.1.1" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="ind_isum_bin_rev_z&#39;vc.0.1.1.0" proved="true">
     <proof prover="7"><result status="valid" time="0.28" steps="216421"/></proof>
     </goal>
     <goal name="ind_isum_bin_rev_z&#39;vc.0.1.1.1" proved="true">
     <proof prover="7"><result status="valid" time="0.45" steps="231374"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="ind_isum_bin_rev_z&#39;vc.0.1.2" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.29" steps="216414"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_int_sum_rev&#39;vc" expl="VC for bv_to_int_sum_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_to_int_sum_rev&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bv_to_int_sum_rev&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.32" steps="216756"/></proof>
   </goal>
   <goal name="bv_to_int_sum_rev&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.67" steps="249391"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="bv_to_int_sum_rev&#39;vc.1" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures1">
   <goal name="bv_to_int_sum_rev&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures">
    <goal name="bv_to_int_sum_rev&#39;vc.1.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ind_isum_bv_bound_growing&#39;vc" expl="VC for ind_isum_bv_bound_growing" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="ind_isum_bv_bound_growing&#39;vc.0" expl="VC for ind_isum_bv_bound_growing" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ind_isum_bv_bound_growing&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.27" steps="191306"/></proof>
   </goal>
   <goal name="ind_isum_bv_bound_growing&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.53" steps="258909"/></proof>
   </goal>
   <goal name="ind_isum_bv_bound_growing&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.27"/></proof>
   </goal>
   <goal name="ind_isum_bv_bound_growing&#39;vc.0.3" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(ind_isum (fun (l:int) -&gt; (getbv bv @ l) * power 2 l) 0 i &lt;= ind_isum (fun (k:int) -&gt; power 2 k) 0 i )">
    <goal name="ind_isum_bv_bound_growing&#39;vc.0.3.0" expl="asserted formula" proved="true">
    <transf name="replace" proved="true" arg1="( ind_isum (fun (l:int) -&gt; (getbv bv @ l) * power 2 l) 0 i)" arg2="(  ind_isum
  (fun (l:int) -&gt; if 0 &lt;= l /\ l &lt; i then (getbv bv @ l) * power 2 l else 1)
  0 i)">
     <goal name="ind_isum_bv_bound_growing&#39;vc.0.3.0.0" expl="asserted formula" proved="true">
     <transf name="replace" proved="true" arg1="(ind_isum (fun (k:int) -&gt; power 2 k) 0 i)" arg2="(ind_isum (fun (k:int) -&gt; if 0 &lt;= k /\ k &lt; i then power 2 k else 1) 0 i)">
      <goal name="ind_isum_bv_bound_growing&#39;vc.0.3.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="Ensures">
      </transf>
      </goal>
      <goal name="ind_isum_bv_bound_growing&#39;vc.0.3.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="ind_isum_eq">
       <goal name="ind_isum_bv_bound_growing&#39;vc.0.3.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="0.69" steps="279221"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ind_isum_bv_bound_growing&#39;vc.0.3.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="ind_isum_eq">
      <goal name="ind_isum_bv_bound_growing&#39;vc.0.3.0.1.0" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="0.79" steps="279126"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="ind_isum_bv_bound_growing&#39;vc.0.3.1" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(forall a  c. a&lt;= (ind_isum (fun (k:int) -&gt; power 2 k) 0 i)&lt; c -&gt; a &lt; c)">
     <goal name="ind_isum_bv_bound_growing&#39;vc.0.3.1.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.48" steps="259586"/></proof>
     </goal>
     <goal name="ind_isum_bv_bound_growing&#39;vc.0.3.1.1" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="h">
      <goal name="ind_isum_bv_bound_growing&#39;vc.0.3.1.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="ind_isum_bv_bound_growing&#39;vc.0.3.1.1.0.0" proved="true">
       <transf name="apply" proved="true" arg1="ind_isum_bound_eq">
        <goal name="ind_isum_bv_bound_growing&#39;vc.0.3.1.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="0.46" steps="259491"/></proof>
        </goal>
        <goal name="ind_isum_bv_bound_growing&#39;vc.0.3.1.1.0.0.1" expl="apply premises" proved="true">
        <transf name="compute_hyp_specified" proved="true" >
         <goal name="ind_isum_bv_bound_growing&#39;vc.0.3.1.1.0.0.1.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="ind_isum_bv_bound_growing&#39;vc.0.3.1.1.0.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.27"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="ind_isum_bv_bound_growing&#39;vc.0.3.1.1.0.1" proved="true">
       <proof prover="7"><result status="valid" time="0.26" steps="243623"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ind_isum_bv_bound&#39;vc" expl="VC for ind_isum_bv_bound" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="ind_isum_bv_bound&#39;vc.0" expl="VC for ind_isum_bv_bound" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ind_isum_bv_bound&#39;vc.0.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="ind_isum_bv_bound&#39;vc.0.0.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.22" steps="191525"/></proof>
    </goal>
    <goal name="ind_isum_bv_bound&#39;vc.0.0.1" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.34" steps="206162"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="ind_isum_bv_bound&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.40" steps="232247"/></proof>
   </goal>
   <goal name="ind_isum_bv_bound&#39;vc.0.2" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="ind_isum_bv_bound&#39;vc.0.2.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="0.24"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="ind_isum_bv_bound&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.28" steps="217435"/></proof>
   </goal>
   <goal name="ind_isum_bv_bound&#39;vc.0.4" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="Ensures3">
   </transf>
   </goal>
   <goal name="ind_isum_bv_bound&#39;vc.0.5" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="( ind_isum (fun (l:int) -&gt; if 0 &lt;= l then power 2 l else 0) 0 (length bv - i))" arg2="( ind_isum (fun (k:int) -&gt; power 2 k) 0 (length bv - i))">
    <goal name="ind_isum_bv_bound&#39;vc.0.5.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.29" steps="245904"/></proof>
    </goal>
    <goal name="ind_isum_bv_bound&#39;vc.0.5.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="ind_isum_eq">
     <goal name="ind_isum_bv_bound&#39;vc.0.5.1.0" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="0.67" steps="284746"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ind_isum_bv_bound&#39;vc.0.6" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures5">
    <goal name="ind_isum_bv_bound&#39;vc.0.6.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="( ind_isum (fun (l:int) -&gt; (getbv bv @ ((length bv - 1) - l)) * power 2 l) 0
  (length bv - i) )" arg2="( ind_isum
  (fun (l:int) -&gt;
    if 0 &lt;= l then (getbv bv @ ((length bv - 1) - l)) * power 2 l else 0)
  0 (length bv - i))">
     <goal name="ind_isum_bv_bound&#39;vc.0.6.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="Ensures">
     </transf>
     </goal>
     <goal name="ind_isum_bv_bound&#39;vc.0.6.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="ind_isum_eq">
      <goal name="ind_isum_bv_bound&#39;vc.0.6.0.1.0" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="0.64" steps="284257"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ind_isum_bin_bound&#39;vc" expl="VC for ind_isum_bin_bound" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ind_isum_bin_bound&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ind_isum_bin_bound&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.59" steps="248696"/></proof>
   </goal>
   <goal name="ind_isum_bin_bound&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.60" steps="248690"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ind_isum_bin_bound&#39;vc.1" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.48" steps="232428"/></proof>
  </goal>
  <goal name="ind_isum_bin_bound&#39;vc.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ind_isum_bin_bound&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.28" steps="217480"/></proof>
   </goal>
   <goal name="ind_isum_bin_bound&#39;vc.2.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.45" steps="232544"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ind_isum_bin_bound&#39;vc.3" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ind_isum (fun (l:int) -&gt; (f @ l) * power 2 ((n - 1) - l)) i n)" arg2="(ind_isum
  (fun (l:int) -&gt;
    (getbv (make_bv f n) @ l) * power 2 ((length (make_bv f n) - 1) - l))
  i (length (make_bv f n)))">
   <goal name="ind_isum_bin_bound&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="Ensures">
    <goal name="ind_isum_bin_bound&#39;vc.3.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="make_bv_length">
     <goal name="ind_isum_bin_bound&#39;vc.3.0.0.0" expl="postcondition" proved="true">
     <proof prover="7"><result status="valid" time="0.60" steps="252757"/></proof>
     </goal>
     <goal name="ind_isum_bin_bound&#39;vc.3.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.60" steps="251526"/></proof>
     </goal>
     <goal name="ind_isum_bin_bound&#39;vc.3.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.43" steps="232701"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="ind_isum_bin_bound&#39;vc.3.0.1" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.64" steps="251488"/></proof>
    </goal>
    <goal name="ind_isum_bin_bound&#39;vc.3.0.2" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.43" steps="232710"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="ind_isum_bin_bound&#39;vc.3.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
    <goal name="ind_isum_bin_bound&#39;vc.3.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="ind_isum_bin_bound&#39;vc.3.1.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="ind_isum_bin_bound&#39;vc.3.1.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.27"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="ind_isum_bin_bound&#39;vc.3.1.1" expl="apply premises" proved="true">
    <proof prover="7"><result status="valid" time="0.25" steps="217584"/></proof>
    </goal>
    <goal name="ind_isum_bin_bound&#39;vc.3.1.2" expl="apply premises" proved="true">
    <proof prover="7"><result status="valid" time="0.26" steps="217593"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_int_bound&#39;vc" expl="VC for bv_to_int_bound" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_to_int_bound&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bv_to_int_bound&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.21" steps="192059"/></proof>
   </goal>
   <goal name="bv_to_int_bound&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.22" steps="192068"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="bv_to_int_bound&#39;vc.1" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
   <goal name="bv_to_int_bound&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.67" steps="252680"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_int_bound_gen&#39;vc" expl="VC for bv_to_int_bound_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_to_int_bound_gen&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.56" steps="483888"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Int_to_bv" proved="true">
 <goal name="int_to_bv&#39;vc" expl="VC for int_to_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_to_bv&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.53" steps="221831"/></proof>
  </goal>
  <goal name="int_to_bv&#39;vc.1" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.55" steps="221907"/></proof>
  </goal>
  <goal name="int_to_bv&#39;vc.2" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="int_to_bv&#39;vc.2.0" expl="precondition" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="int_to_bv&#39;vc.2.0.0" expl="precondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="int_to_bv&#39;vc.2.0.0.0" expl="precondition" proved="true">
     <proof prover="0"><result status="valid" time="0.21"/></proof>
     </goal>
     <goal name="int_to_bv&#39;vc.2.0.0.1" expl="precondition" proved="true">
     <proof prover="7"><result status="valid" time="0.23" steps="220550"/></proof>
     </goal>
     <goal name="int_to_bv&#39;vc.2.0.0.2" expl="precondition" proved="true">
     <proof prover="0"><result status="valid" time="0.22"/></proof>
     </goal>
     <goal name="int_to_bv&#39;vc.2.0.0.3" expl="precondition" proved="true">
     <proof prover="7"><result status="valid" time="0.26" steps="220552"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="int_to_bv&#39;vc.3" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.27" steps="218460"/></proof>
  </goal>
  <goal name="int_to_bv&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.29" steps="218567"/></proof>
  </goal>
  <goal name="int_to_bv&#39;vc.5" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="int_to_bv&#39;vc.5.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="int_to_bv&#39;vc.5.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_bv_make_">
     <goal name="int_to_bv&#39;vc.5.0.0.0" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="0.29" steps="219784"/></proof>
     </goal>
     <goal name="int_to_bv&#39;vc.5.0.0.1" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="int_to_bv&#39;vc.5.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.38"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="int_to_bv&#39;vc.5.0.0.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="int_to_bv&#39;vc.5.0.0.2.0" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="0.64" steps="253473"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Bit_vector_decomp" proved="true">
 <goal name="ind_isum_mod_div&#39;vc" expl="VC for ind_isum_mod_div" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="ind_isum_mod_div&#39;vc.0" expl="VC for ind_isum_mod_div" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ind_isum_mod_div&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.77" steps="335746"/></proof>
   </goal>
   <goal name="ind_isum_mod_div&#39;vc.0.1" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="ind_isum_mod_div&#39;vc.0.1.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="0.34"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="ind_isum_mod_div&#39;vc.0.2" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="ind_isum_mod_div&#39;vc.0.2.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.80" steps="335792"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="ind_isum_mod_div&#39;vc.0.3" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="ind_isum_mod_div&#39;vc.0.3.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="0.38"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="ind_isum_mod_div&#39;vc.0.4" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.40" steps="316870"/></proof>
   </goal>
   <goal name="ind_isum_mod_div&#39;vc.0.5" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="ind_isum_mod_div&#39;vc.0.5.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="0.36"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="ind_isum_mod_div&#39;vc.0.6" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="ind_isum_mod_div&#39;vc.0.6.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.37" steps="317021"/></proof>
    </goal>
    <goal name="ind_isum_mod_div&#39;vc.0.6.1" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.82" steps="336028"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="ind_isum_mod_div&#39;vc.0.7" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.39" steps="317426"/></proof>
   </goal>
   <goal name="ind_isum_mod_div&#39;vc.0.8" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="ind_isum_mod_div&#39;vc.0.8.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.39" steps="317786"/></proof>
    </goal>
    <goal name="ind_isum_mod_div&#39;vc.0.8.1" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.38" steps="317801"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="ind_isum_mod_div&#39;vc.0.9" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.97" steps="365456"/></proof>
   </goal>
   <goal name="ind_isum_mod_div&#39;vc.0.10" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="( ind_isum
  (fun (k:int) -&gt;
    if 1 &lt;= k /\ k &lt; (length bv + 1)
    then getbv bv k * power 2 (length bv - k) else 0)
  1 (length bv + 1))" arg2="(ind_isum
  (fun (k:int) -&gt;
    if 1 &lt;= k /\ k &lt;= length bv then getbv bv k * power 2 (length bv - k)
    else 0)
  1 (length bv + 1))">
    <goal name="ind_isum_mod_div&#39;vc.0.10.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures2">
     <goal name="ind_isum_mod_div&#39;vc.0.10.0.0" expl="precondition" proved="true">
     <transf name="apply" proved="true" arg1="add_eq">
      <goal name="ind_isum_mod_div&#39;vc.0.10.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="ind_isum_scal_rev_right">
       <goal name="ind_isum_mod_div&#39;vc.0.10.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="ind_isum_eq">
        <goal name="ind_isum_mod_div&#39;vc.0.10.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="ind_isum_mod_div&#39;vc.0.10.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="ind_isum_mod_div&#39;vc.0.10.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="eliminate_if" proved="true" >
           <goal name="ind_isum_mod_div&#39;vc.0.10.0.0.0.0.0.0.0.0" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="ind_isum_mod_div&#39;vc.0.10.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="mul_assoc">
             <goal name="ind_isum_mod_div&#39;vc.0.10.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="mult_eq">
              <goal name="ind_isum_mod_div&#39;vc.0.10.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="7"><result status="valid" time="0.48" steps="322123"/></proof>
              </goal>
              <goal name="ind_isum_mod_div&#39;vc.0.10.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
              <proof prover="7"><result status="valid" time="4.11" steps="1598607"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="ind_isum_mod_div&#39;vc.0.10.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="7"><result status="valid" time="0.49" steps="322171"/></proof>
            </goal>
            <goal name="ind_isum_mod_div&#39;vc.0.10.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
            <proof prover="7"><result status="valid" time="0.79" steps="340574"/></proof>
            </goal>
            <goal name="ind_isum_mod_div&#39;vc.0.10.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
            <proof prover="7"><result status="valid" time="0.51" steps="322151"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="ind_isum_mod_div&#39;vc.0.10.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="0.49" steps="317899"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="ind_isum_mod_div&#39;vc.0.10.0.0.1" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="ind_isum_eq">
       <goal name="ind_isum_mod_div&#39;vc.0.10.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="1.04" steps="365249"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="ind_isum_mod_div&#39;vc.0.10.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="ind_isum_eq">
     <goal name="ind_isum_mod_div&#39;vc.0.10.1.0" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="1.07" steps="364767"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ind_isum_mod_div&#39;vc.0.11" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="ind_isum_mod_div&#39;vc.0.11.0" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="ind_isum_pos">
     <goal name="ind_isum_mod_div&#39;vc.0.11.0.0" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="0.67" steps="337307"/></proof>
     </goal>
     <goal name="ind_isum_mod_div&#39;vc.0.11.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ind_isum_mod_div&#39;vc.0.11.0.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="ind_isum_mod_div&#39;vc.0.11.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.39"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="ind_isum_mod_div&#39;vc.0.11.1" expl="precondition" proved="true">
    <transf name="replace" proved="true" arg1="(ind_isum
  (fun (k:int) -&gt;
    if i &lt;= k /\ k &lt; length bv
    then (getbv bv @ k) * power 2 ((length bv - 1) - k) else 0)
  i (length bv))" arg2="(ind_isum (fun (l:int) -&gt; (getbv bv @ l) * power 2 ((length bv - 1) - l)) i
  (length bv))">
     <goal name="ind_isum_mod_div&#39;vc.0.11.1.0" expl="precondition" proved="true">
     <transf name="apply" proved="true" arg1="Ensures">
     </transf>
     </goal>
     <goal name="ind_isum_mod_div&#39;vc.0.11.1.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="ind_isum_eq">
      <goal name="ind_isum_mod_div&#39;vc.0.11.1.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="ind_isum_mod_div&#39;vc.0.11.1.1.0.0" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="0.41" steps="318498"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ind_isum_mod_div&#39;vc.0.12" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="ind_isum_mod_div&#39;vc.0.12.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="bound_eq_rev">
     <goal name="ind_isum_mod_div&#39;vc.0.12.0.0" expl="postcondition" proved="true">
     <proof prover="7"><result status="valid" time="0.87" steps="325304"/></proof>
     </goal>
     <goal name="ind_isum_mod_div&#39;vc.0.12.0.1" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ind_isum_mod_div&#39;vc.0.12.0.1.0" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="ind_isum_pos">
       <goal name="ind_isum_mod_div&#39;vc.0.12.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="0.58" steps="272647"/></proof>
       </goal>
       <goal name="ind_isum_mod_div&#39;vc.0.12.0.1.0.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="ind_isum_mod_div&#39;vc.0.12.0.1.0.1.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="ind_isum_mod_div&#39;vc.0.12.0.1.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.32"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="ind_isum_mod_div&#39;vc.0.12.0.1.1" expl="rewrite premises" proved="true">
      <transf name="instantiate" proved="true" arg1="ind_isum_bv_bound" arg2="bv,i">
       <goal name="ind_isum_mod_div&#39;vc.0.12.0.1.1.0" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="0.85" steps="326077"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="ind_isum_mod_div&#39;vc.0.12.1" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="ind_isum_mod_div&#39;vc.0.12.1.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(ind_isum (fun (k:int) -&gt; (getbv bv @ k) * power 2 ((length bv - 1) - k))
    i (length bv))" arg2="(ind_isum
  (fun (k:int) -&gt;
    if i &lt;= k /\ k &lt; length bv
    then (getbv bv @ k) * power 2 ((length bv - 1) - k) else 0)
  i (length bv))">
      <goal name="ind_isum_mod_div&#39;vc.0.12.1.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H">
       <goal name="ind_isum_mod_div&#39;vc.0.12.1.0.0.0" expl="postcondition" proved="true">
       <transf name="replace" proved="true" arg1="(ind_isum (fun (k:int) -&gt; (getbv bv @ k) * power 2 ((length bv - 1) - k)) 0
   (length bv))" arg2="(ind_isum
     (fun (k:int) -&gt;
       if 0 &lt;= k /\ k &lt; length bv
       then (getbv bv @ k) * power 2 ((length bv - 1) - k) else 0)
     0 (length bv))">
        <goal name="ind_isum_mod_div&#39;vc.0.12.1.0.0.0.0" expl="postcondition" proved="true">
        <transf name="apply" proved="true" arg1="mod_eq">
         <goal name="ind_isum_mod_div&#39;vc.0.12.1.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="ind_isum_eq">
          <goal name="ind_isum_mod_div&#39;vc.0.12.1.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="ind_isum_mod_div&#39;vc.0.12.1.0.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="ind_isum_eq">
         <goal name="ind_isum_mod_div&#39;vc.0.12.1.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="ind_isum_mod_div&#39;vc.0.12.1.0.0.0.1.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="ind_isum_mod_div&#39;vc.0.12.1.0.0.0.1.0.0.0" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="0.89" steps="383758"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="ind_isum_mod_div&#39;vc.0.12.1.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="ind_isum_eq">
       <goal name="ind_isum_mod_div&#39;vc.0.12.1.0.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="ind_isum_mod_div&#39;vc.0.12.1.0.1.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="ind_isum_mod_div&#39;vc.0.12.1.0.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="0.76" steps="383764"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ind_isum_mod_div&#39;vc.0.13" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="ind_isum_mod_div&#39;vc.0.13.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(ind_isum (fun (k:int) -&gt; (getbv bv @ k) * power 2 ((length bv - 1) - k)) 0
   (length bv))" arg2="(bv_to_int bv)">
     <goal name="ind_isum_mod_div&#39;vc.0.13.0.0" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="0.33"/></proof>
     </goal>
     <goal name="ind_isum_mod_div&#39;vc.0.13.0.1" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
      <goal name="ind_isum_mod_div&#39;vc.0.13.0.1.0" expl="equality hypothesis" proved="true">
      <transf name="compute_specified" proved="true" >
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="ind_isum_mod_div&#39;vc.0.13.1" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="ind_isum_mod_div&#39;vc.0.13.1.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(ind_isum (fun (k:int) -&gt; (getbv bv @ k) * power 2 ((i - 1) - k)) 0 i)" arg2="(ind_isum
  (fun (k:int) -&gt;
    if 0 &lt;= k /\ k &lt; i then (getbv bv @ k) * power 2 ((i - 1) - k) else 0)
  0 i)">
      <goal name="ind_isum_mod_div&#39;vc.0.13.1.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H1">
       <goal name="ind_isum_mod_div&#39;vc.0.13.1.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="e_div_eq">
        <goal name="ind_isum_mod_div&#39;vc.0.13.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="ind_isum_eq">
         <goal name="ind_isum_mod_div&#39;vc.0.13.1.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="ind_isum_mod_div&#39;vc.0.13.1.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="1.08" steps="415577"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="ind_isum_mod_div&#39;vc.0.13.1.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="ind_isum_eq">
       <goal name="ind_isum_mod_div&#39;vc.0.13.1.0.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="ind_isum_mod_div&#39;vc.0.13.1.0.1.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="ind_isum_mod_div&#39;vc.0.13.1.0.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="0.80" steps="384110"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mod_ind_isum&#39;vc" expl="VC for mod_ind_isum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mod_ind_isum&#39;vc.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="(ind_isum (fun (k:int) -&gt; (f @ k) * power 2 ((l - 1) - k)) 0 l),(power 2 i),(ind_isum (fun (k:int) -&gt; (f @ k) * power 2 ((l - 1) - k-i)) 0 (l-i)),(ind_isum (fun (k:int) -&gt; (f @ k) * power 2 ((l - 1) - k)) (l - i) l)">
   <goal name="mod_ind_isum&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="mod_ind_isum&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Hinst">
     <goal name="mod_ind_isum&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
     <goal name="mod_ind_isum&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.92" steps="380499"/></proof>
     </goal>
     <goal name="mod_ind_isum&#39;vc.0.0.0.2" expl="rewrite premises" proved="true">
     <transf name="instantiate" proved="true" arg1="ind_isum_trans" arg2="(fun (k:int) -&gt; (f @ k) * power 2 ((l - 1) - k)),0,(l-i),l">
      <goal name="mod_ind_isum&#39;vc.0.0.0.2.0" expl="rewrite premises" proved="true">
      <transf name="rewrite" proved="true" arg1="Hinst">
       <goal name="mod_ind_isum&#39;vc.0.0.0.2.0.0" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="add_eq">
        <goal name="mod_ind_isum&#39;vc.0.0.0.2.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="ind_isum_scal_rev_right">
         <goal name="mod_ind_isum&#39;vc.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="ind_isum_eq">
          <goal name="mod_ind_isum&#39;vc.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="mod_ind_isum&#39;vc.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="mod_ind_isum&#39;vc.0.0.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="((f @ k) * power 2 ((l - 1) - k))" arg2="((f @ k) * power 2 ((((l - 1) - k) -i)+i))">
             <goal name="mod_ind_isum&#39;vc.0.0.0.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="power_sum">
              <goal name="mod_ind_isum&#39;vc.0.0.0.2.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="7"><result status="valid" time="0.47" steps="326750"/></proof>
              </goal>
              <goal name="mod_ind_isum&#39;vc.0.0.0.2.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="7"><result status="valid" time="0.46" steps="326721"/></proof>
              </goal>
              <goal name="mod_ind_isum&#39;vc.0.0.0.2.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="7"><result status="valid" time="0.45" steps="326683"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="mod_ind_isum&#39;vc.0.0.0.2.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
             <proof prover="7"><result status="valid" time="0.43" steps="326750"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="mod_ind_isum&#39;vc.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="0.45" steps="326658"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="mod_ind_isum&#39;vc.0.0.0.2.0.0.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mod_ind_isum&#39;vc.0.0.0.2.0.1" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mod_ind_isum&#39;vc.0.0.0.2.0.1.0" proved="true">
        <proof prover="7"><result status="valid" time="0.42" steps="326658"/></proof>
        </goal>
        <goal name="mod_ind_isum&#39;vc.0.0.0.2.0.1.1" proved="true">
        <proof prover="7"><result status="valid" time="0.43" steps="326658"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mod_ind_isum&#39;vc.0.0.0.3" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mod_ind_isum&#39;vc.0.0.0.3.0" proved="true">
      <transf name="apply" proved="true" arg1="ind_isum_pos">
       <goal name="mod_ind_isum&#39;vc.0.0.0.3.0.0" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="0.45" steps="326403"/></proof>
       </goal>
       <goal name="mod_ind_isum&#39;vc.0.0.0.3.0.1" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="mod_ind_isum&#39;vc.0.0.0.3.0.1.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mod_ind_isum&#39;vc.0.0.0.3.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.39"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="mod_ind_isum&#39;vc.0.0.0.3.1" proved="true">
      <transf name="instantiate" proved="true" arg1="ind_isum_bin_bound" arg2="f,l,(l-i)">
       <goal name="mod_ind_isum&#39;vc.0.0.0.3.1.0" proved="true">
       <proof prover="7"><result status="valid" time="3.34" steps="924989"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mod_ind_isum_z&#39;vc" expl="VC for mod_ind_isum_z" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mod_ind_isum_z&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mod_ind_isum">
   <goal name="mod_ind_isum_z&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="ind_isum_transl" arg2="(fun (k:int) -&gt; (f @ k) * power 2 ((l - 1) - k)),(l-i),l,(l-i)">
    <goal name="mod_ind_isum_z&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Hinst">
     <goal name="mod_ind_isum_z&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
      <goal name="mod_ind_isum_z&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="mod_ind_isum_z&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="mod_ind_isum_z&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="0.42" steps="285558"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="mod_ind_isum_z&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="0.43" steps="285430"/></proof>
      </goal>
      <goal name="mod_ind_isum_z&#39;vc.0.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="0.38" steps="285430"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mod_ind_isum_z&#39;vc.0.1" expl="rewrite premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="mod_ind_isum_z&#39;vc.0.1.0" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.40" steps="285192"/></proof>
    </goal>
    <goal name="mod_ind_isum_z&#39;vc.0.1.1" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.39" steps="285192"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="mod_ind_isum_z&#39;vc.0.2" expl="rewrite premises" proved="true">
   <proof prover="7"><result status="valid" time="0.41" steps="285192"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="div_ind_isum&#39;vc" expl="VC for div_ind_isum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="div_ind_isum&#39;vc.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="(ind_isum (fun (k:int) -&gt; (f @ k) * power 2 ((l - 1) - k)) 0 l),(power 2 i),(ind_isum (fun (k:int) -&gt; (f @ k) * power 2 ((l - 1) - k-i)) 0 (l-i)),(ind_isum (fun (k:int) -&gt; (f @ k) * power 2 ((l - 1) - k)) (l - i) l)">
   <goal name="div_ind_isum&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="div_ind_isum&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Hinst1">
     <goal name="div_ind_isum&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
     <goal name="div_ind_isum&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.94" steps="381311"/></proof>
     </goal>
     <goal name="div_ind_isum&#39;vc.0.0.0.2" expl="rewrite premises" proved="true">
     <transf name="instantiate" proved="true" arg1="ind_isum_trans" arg2="(fun (k:int) -&gt; (f @ k) * power 2 ((l - 1) - k)),0,(l-i),l">
      <goal name="div_ind_isum&#39;vc.0.0.0.2.0" expl="rewrite premises" proved="true">
      <transf name="rewrite" proved="true" arg1="Hinst">
       <goal name="div_ind_isum&#39;vc.0.0.0.2.0.0" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="add_eq">
        <goal name="div_ind_isum&#39;vc.0.0.0.2.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="ind_isum_scal_rev_right">
         <goal name="div_ind_isum&#39;vc.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="ind_isum_eq">
          <goal name="div_ind_isum&#39;vc.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="div_ind_isum&#39;vc.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="div_ind_isum&#39;vc.0.0.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="((f @ k) * power 2 ((l - 1) - k))" arg2="((f @ k) * power 2 ((((l - 1) - k) -i)+i))">
             <goal name="div_ind_isum&#39;vc.0.0.0.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="power_sum">
              <goal name="div_ind_isum&#39;vc.0.0.0.2.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="7"><result status="valid" time="0.50" steps="327530"/></proof>
              </goal>
              <goal name="div_ind_isum&#39;vc.0.0.0.2.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="7"><result status="valid" time="0.50" steps="327501"/></proof>
              </goal>
              <goal name="div_ind_isum&#39;vc.0.0.0.2.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="7"><result status="valid" time="0.54" steps="327463"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="div_ind_isum&#39;vc.0.0.0.2.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
             <proof prover="7"><result status="valid" time="0.57" steps="327530"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="div_ind_isum&#39;vc.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="0.52" steps="327438"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="div_ind_isum&#39;vc.0.0.0.2.0.0.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="div_ind_isum&#39;vc.0.0.0.2.0.1" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="div_ind_isum&#39;vc.0.0.0.2.0.1.0" proved="true">
        <proof prover="7"><result status="valid" time="0.50" steps="327438"/></proof>
        </goal>
        <goal name="div_ind_isum&#39;vc.0.0.0.2.0.1.1" proved="true">
        <proof prover="7"><result status="valid" time="0.37" steps="327438"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="div_ind_isum&#39;vc.0.0.0.3" expl="rewrite premises" proved="true">
     <transf name="case" proved="true" arg1="(i = 0)">
      <goal name="div_ind_isum&#39;vc.0.0.0.3.0" expl="rewrite premises (true case)" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="div_ind_isum&#39;vc.0.0.0.3.0.0" proved="true">
       <proof prover="7"><result status="valid" time="3.14" steps="818733"/></proof>
       </goal>
       <goal name="div_ind_isum&#39;vc.0.0.0.3.0.1" proved="true">
       <proof prover="7"><result status="valid" time="3.14" steps="820370"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="div_ind_isum&#39;vc.0.0.0.3.1" expl="rewrite premises (false case)" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="div_ind_isum&#39;vc.0.0.0.3.1.0" proved="true">
       <transf name="apply" proved="true" arg1="ind_isum_pos">
        <goal name="div_ind_isum&#39;vc.0.0.0.3.1.0.0" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="0.51" steps="327198"/></proof>
        </goal>
        <goal name="div_ind_isum&#39;vc.0.0.0.3.1.0.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="div_ind_isum&#39;vc.0.0.0.3.1.0.1.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.30"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="div_ind_isum&#39;vc.0.0.0.3.1.1" proved="true">
       <transf name="instantiate" proved="true" arg1="ind_isum_bin_bound" arg2="f,l,(l-i)">
        <goal name="div_ind_isum&#39;vc.0.0.0.3.1.1.0" proved="true">
        <transf name="replace" proved="true" arg1="(l - (l - i))" arg2="i" arg3="in" arg4="Hinst">
         <goal name="div_ind_isum&#39;vc.0.0.0.3.1.1.0.0" proved="true">
         <proof prover="7"><result status="valid" time="3.61" steps="924368"/></proof>
         </goal>
         <goal name="div_ind_isum&#39;vc.0.0.0.3.1.1.0.1" expl="equality hypothesis" proved="true">
         <proof prover="7"><result status="valid" time="0.35" steps="327366"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ind_isum_mod&#39;vc" expl="VC for ind_isum_mod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ind_isum_mod&#39;vc.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="(ind_isum (fun l -&gt; getbv bv l * power 2 (i -1 -l)) 0 (i+1)),2,(ind_isum (fun l -&gt; getbv bv l * power 2 (i -1 -l)) 0 i),(getbv bv i )">
   <goal name="ind_isum_mod&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="ind_isum_mod&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="(ind_isum (fun l -&gt; getbv bv l * power 2 (i  -l)) 0 (i+1)),2,(ind_isum (fun l -&gt; getbv bv l * power 2 (i -1 -l)) 0 i),(getbv bv i )">
     <goal name="ind_isum_mod&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Hinst">
      <goal name="ind_isum_mod&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
      </transf>
      </goal>
      <goal name="ind_isum_mod&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.38" steps="294392"/></proof>
      </goal>
      <goal name="ind_isum_mod&#39;vc.0.0.0.0.2" expl="rewrite premises" proved="true">
      <transf name="rewrite" proved="true" arg1="ind_isum_right_extension">
       <goal name="ind_isum_mod&#39;vc.0.0.0.0.2.0" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="add_eq">
        <goal name="ind_isum_mod&#39;vc.0.0.0.0.2.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="ind_isum_scal_rev_right">
         <goal name="ind_isum_mod&#39;vc.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="ind_isum_mod&#39;vc.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="ind_isum_eq">
           <goal name="ind_isum_mod&#39;vc.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="ind_isum_mod&#39;vc.0.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="ind_isum_mod&#39;vc.0.0.0.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="0.36"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="ind_isum_mod&#39;vc.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="0.39" steps="294390"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="ind_isum_mod&#39;vc.0.0.0.0.2.0.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="ind_isum_mod&#39;vc.0.0.0.0.2.0.1.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.22" steps="5286"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="ind_isum_mod&#39;vc.0.0.0.0.2.1" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="0.41" steps="294390"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="ind_isum_mod&#39;vc.0.0.0.0.3" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="1.00" steps="373793"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mod_ind_isum_&#39;vc" expl="VC for mod_ind_isum_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mod_ind_isum_&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(mod (ind_isum (fun (k:int) -&gt; (f @ k) * power 2 ((l - 1) - k)) 0 l)
  (power 2 i))" arg2="( mod (ind_isum (fun (k:int) -&gt; (f @ k) * power 2 ((l - 1) - k)) 0 l)
   (power 2 i))">
   <goal name="mod_ind_isum_&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="mod_ind_isum">
    <goal name="mod_ind_isum_&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="0.88" steps="327775"/></proof>
    </goal>
    <goal name="mod_ind_isum_&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.39" steps="286359"/></proof>
    </goal>
    <goal name="mod_ind_isum_&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.35" steps="286352"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="mod_ind_isum_&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <transf name="rewrite" proved="true" arg1="mod_ind_isum">
    <goal name="mod_ind_isum_&#39;vc.0.1.0" expl="equality hypothesis" proved="true">
    <proof prover="7"><result status="valid" time="0.97" steps="327775"/></proof>
    </goal>
    <goal name="mod_ind_isum_&#39;vc.0.1.1" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.31" steps="286359"/></proof>
    </goal>
    <goal name="mod_ind_isum_&#39;vc.0.1.2" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.37" steps="286352"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mod_ind_isum_z_&#39;vc" expl="VC for mod_ind_isum_z_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mod_ind_isum_z_&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(mod (ind_isum (fun (k:int) -&gt; (f @ k) * power 2 ((l - 1) - k)) 0 l)
  (power 2 i))" arg2="(mod (ind_isum (fun (k:int) -&gt; (f @ k) * power 2 ((l - 1) - k)) 0 l)
  (power 2 i))">
   <goal name="mod_ind_isum_z_&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="mod_ind_isum_z">
    <goal name="mod_ind_isum_z_&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="0.89" steps="328234"/></proof>
    </goal>
    <goal name="mod_ind_isum_z_&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.32" steps="286746"/></proof>
    </goal>
    <goal name="mod_ind_isum_z_&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.33" steps="286739"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="mod_ind_isum_z_&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <transf name="compute_specified" proved="true" >
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="div_ind_isum_&#39;vc" expl="VC for div_ind_isum_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="div_ind_isum_&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="div_ind_isum">
   <goal name="div_ind_isum_&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.97" steps="328931"/></proof>
   </goal>
   <goal name="div_ind_isum_&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="7"><result status="valid" time="0.44" steps="287139"/></proof>
   </goal>
   <goal name="div_ind_isum_&#39;vc.0.2" expl="rewrite premises" proved="true">
   <proof prover="7"><result status="valid" time="0.30" steps="287132"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ind_isum_mod_&#39;vc" expl="VC for ind_isum_mod_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ind_isum_mod_&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ind_isum (fun (l:int) -&gt; (getbv bv @ l) * power 2 (i - l)) 0 (i + 1))" arg2="(ind_isum (fun (l:int) -&gt; (getbv bv @ l) * power 2 (i - l)) 0 (i + 1))">
   <goal name="ind_isum_mod_&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="ind_isum_mod">
    <goal name="ind_isum_mod_&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="7"><result status="valid" time="0.26" steps="258934"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="ind_isum_mod_&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="ind_isum_eq">
    <goal name="ind_isum_mod_&#39;vc.0.1.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_int_kth_pre&#39;vc" expl="VC for bv_to_int_kth_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_to_int_kth_pre&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="div_ind_isum">
   <goal name="bv_to_int_kth_pre&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(length bv - ((length bv - k) - 1))" arg2="(k+1)">
    <goal name="bv_to_int_kth_pre&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(fun (k1:int) -&gt;
       (getbv bv @ k1)
       * power 2 (((length bv - 1) - k1) - ((length bv - k) - 1)))" arg2="(fun (k1:int) -&gt;
       (getbv bv @ k1)
       * power 2 (k-k1))">
     <goal name="bv_to_int_kth_pre&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="ind_isum_mod">
      <goal name="bv_to_int_kth_pre&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="7"><result status="valid" time="0.39" steps="259345"/></proof>
      </goal>
      <goal name="bv_to_int_kth_pre&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="bv_to_int_kth_pre&#39;vc.0.0.0.0.1.0" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="0.30" steps="259347"/></proof>
       </goal>
       <goal name="bv_to_int_kth_pre&#39;vc.0.0.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="0.62" steps="276628"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="bv_to_int_kth_pre&#39;vc.0.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="7"><result status="valid" time="0.67" steps="305867"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="bv_to_int_kth_pre&#39;vc.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="7"><result status="valid" time="0.40" steps="259390"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="bv_to_int_kth_pre&#39;vc.0.1" expl="rewrite premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="bv_to_int_kth_pre&#39;vc.0.1.0" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.56" steps="276644"/></proof>
    </goal>
    <goal name="bv_to_int_kth_pre&#39;vc.0.1.1" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.55" steps="276649"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="bv_to_int_kth_pre&#39;vc.0.2" expl="rewrite premises" proved="true">
   <proof prover="7"><result status="valid" time="0.65" steps="306030"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="bv_to_int_kth_pre&#39;vc.1" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mod_ind_isum">
   <goal name="bv_to_int_kth_pre&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(length bv - (length bv - k))" arg2="k">
    <goal name="bv_to_int_kth_pre&#39;vc.1.0.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="ind_isum_transl" arg2="(fun (k1:int) -&gt; (getbv bv @ k1) * power 2 ((length bv - 1) - k1)),k,(length bv),k">
     <goal name="bv_to_int_kth_pre&#39;vc.1.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Hinst">
      <goal name="bv_to_int_kth_pre&#39;vc.1.0.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="bv_to_int_kth_pre&#39;vc.1.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="instantiate" proved="true" arg1="div_ind_isum" arg2="(fun b -&gt; getbv bv (b+k)),(length bv - k-1),(length bv - k)">
        <goal name="bv_to_int_kth_pre&#39;vc.1.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="replace" proved="true" arg1="(ind_isum
     (fun (b:int) -&gt;
       (getbv bv @ (b + k)) * power 2 ((length bv - 1) - (b + k)))
     (k - k) (length bv - k))" arg2="(ind_isum
   (fun (k1:int) -&gt;
     ((fun (b:int) -&gt; getbv bv @ (b + k)) @ k1)
     * power 2 (((length bv - k) - 1) - k1))
   0 (length bv - k))">
         <goal name="bv_to_int_kth_pre&#39;vc.1.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="Hinst">
          <goal name="bv_to_int_kth_pre&#39;vc.1.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="rewrite" proved="true" arg1="ind_isum_one">
           <goal name="bv_to_int_kth_pre&#39;vc.1.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="bv_to_int_kth_pre&#39;vc.1.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
            <proof prover="0"><result status="valid" time="0.35"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="bv_to_int_kth_pre&#39;vc.1.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="bv_to_int_kth_pre&#39;vc.1.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
            <proof prover="7"><result status="valid" time="0.38" steps="288631"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="bv_to_int_kth_pre&#39;vc.1.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="bv_to_int_kth_pre&#39;vc.1.0.0.0.0.0.0.0.1.0" proved="true">
           <proof prover="7"><result status="valid" time="0.62" steps="307023"/></proof>
           </goal>
           <goal name="bv_to_int_kth_pre&#39;vc.1.0.0.0.0.0.0.0.1.1" proved="true">
           <proof prover="7"><result status="valid" time="0.36" steps="288624"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="bv_to_int_kth_pre&#39;vc.1.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <transf name="eliminate_definition" proved="true" >
           <goal name="bv_to_int_kth_pre&#39;vc.1.0.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
           <transf name="rewrite" proved="true" arg1="binary&#39;def">
            <goal name="bv_to_int_kth_pre&#39;vc.1.0.0.0.0.0.0.0.2.0.0" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="bv_to_int_kth_pre&#39;vc.1.0.0.0.0.0.0.0.2.0.0.0" proved="true">
             <proof prover="7"><result status="valid" time="2.80" steps="736663"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="bv_to_int_kth_pre&#39;vc.1.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
          <goal name="bv_to_int_kth_pre&#39;vc.1.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="bv_to_int_kth_pre&#39;vc.1.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="bv_to_int_kth_pre&#39;vc.1.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
            <proof prover="7"><result status="valid" time="0.35" steps="288720"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="bv_to_int_kth_pre&#39;vc.1.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="0.36" steps="288631"/></proof>
          </goal>
          <goal name="bv_to_int_kth_pre&#39;vc.1.0.0.0.0.0.0.1.2" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="0.34" steps="288622"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="bv_to_int_kth_pre&#39;vc.1.0.1" expl="equality hypothesis" proved="true">
    <proof prover="7"><result status="valid" time="0.39" steps="288060"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="bv_to_int_kth_pre&#39;vc.1.1" expl="rewrite premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="bv_to_int_kth_pre&#39;vc.1.1.0" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.63" steps="306097"/></proof>
    </goal>
    <goal name="bv_to_int_kth_pre&#39;vc.1.1.1" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.39" steps="288049"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="bv_to_int_kth_pre&#39;vc.1.2" expl="rewrite premises" proved="true">
   <proof prover="7"><result status="valid" time="0.66" steps="306468"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="int_to_bv_sum_pre&#39;vc" expl="VC for int_to_bv_sum_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_to_bv_sum_pre&#39;vc.0" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="( (mod i (power 2 (k - 1))) &lt; (power 2 k) )">
   <goal name="int_to_bv_sum_pre&#39;vc.0.0" expl="asserted formula" proved="true">
   <proof prover="7"><result status="valid" time="0.72" steps="298310"/></proof>
   </goal>
   <goal name="int_to_bv_sum_pre&#39;vc.0.1" expl="assertion" proved="true">
   <transf name="assert" proved="true" arg1="( (mod i (power 2 (k - 1))) &lt; (power 2 (k-1)) )">
    <goal name="int_to_bv_sum_pre&#39;vc.0.1.0" expl="asserted formula" proved="true">
    <proof prover="7"><result status="valid" time="0.74" steps="298359"/></proof>
    </goal>
    <goal name="int_to_bv_sum_pre&#39;vc.0.1.1" expl="assertion" proved="true">
    <proof prover="0"><result status="valid" time="0.28"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="int_to_bv_sum_pre&#39;vc.1" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="int_to_bv_sum_pre&#39;vc.1.0" expl="variant decrease" proved="true">
   <proof prover="7"><result status="valid" time="0.35" steps="260245"/></proof>
   </goal>
   <goal name="int_to_bv_sum_pre&#39;vc.1.1" expl="variant decrease" proved="true">
   <proof prover="7"><result status="valid" time="0.36" steps="260254"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="int_to_bv_sum_pre&#39;vc.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="int_to_bv_sum_pre&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.60" steps="277947"/></proof>
   </goal>
   <goal name="int_to_bv_sum_pre&#39;vc.2.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.56" steps="278005"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="int_to_bv_sum_pre&#39;vc.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="int_to_bv_sum_pre&#39;vc.3.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.34" steps="260267"/></proof>
   </goal>
   <goal name="int_to_bv_sum_pre&#39;vc.3.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.35" steps="260282"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="int_to_bv_sum_pre&#39;vc.4" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="int_to_bv_sum_pre&#39;vc.4.0" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.82" steps="330772"/></proof>
   </goal>
   <goal name="int_to_bv_sum_pre&#39;vc.4.1" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(k=0)">
    <goal name="int_to_bv_sum_pre&#39;vc.4.1.0" expl="true case (postcondition)" proved="true">
    <proof prover="7"><result status="valid" time="0.89" steps="333925"/></proof>
    </goal>
    <goal name="int_to_bv_sum_pre&#39;vc.4.1.1" expl="false case (postcondition)" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="int_to_bv_sum_pre&#39;vc.4.1.1.0" expl="false case (postcondition)" proved="true">
     <transf name="instantiate" proved="true" arg1="decomp" arg2="( mod i (power 2 k)),(power 2 (k-1))">
      <goal name="int_to_bv_sum_pre&#39;vc.4.1.1.0.0" expl="false case (postcondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="ind_isum_plus_one">
       <goal name="int_to_bv_sum_pre&#39;vc.4.1.1.0.0.0" expl="false case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="Hinst">
        <goal name="int_to_bv_sum_pre&#39;vc.4.1.1.0.0.0.0" expl="false case (postcondition)" proved="true">
        <transf name="apply" proved="true" arg1="add_eq">
         <goal name="int_to_bv_sum_pre&#39;vc.4.1.1.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="int_to_bv_sum_pre&#39;vc.4.1.1.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="mult_eq_inv">
           <goal name="int_to_bv_sum_pre&#39;vc.4.1.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="0.40" steps="288966"/></proof>
           </goal>
           <goal name="int_to_bv_sum_pre&#39;vc.4.1.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <transf name="split_all_full" proved="true" >
            <goal name="int_to_bv_sum_pre&#39;vc.4.1.1.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="int_to_bv&#39;spec">
             <goal name="int_to_bv_sum_pre&#39;vc.4.1.1.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="assert_make_bv">
              <goal name="int_to_bv_sum_pre&#39;vc.4.1.1.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
              <transf name="eliminate_if" proved="true" >
               <goal name="int_to_bv_sum_pre&#39;vc.4.1.1.0.0.0.0.0.0.1.0.0.0.0" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="int_to_bv_sum_pre&#39;vc.4.1.1.0.0.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="7"><result status="valid" time="0.97" steps="378189"/></proof>
                </goal>
                <goal name="int_to_bv_sum_pre&#39;vc.4.1.1.0.0.0.0.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
                <proof prover="7"><result status="valid" time="0.71" steps="351458"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="int_to_bv_sum_pre&#39;vc.4.1.1.0.0.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="int_to_bv_sum_pre&#39;vc.4.1.1.0.0.0.0.0.0.1.0.0.1.0" expl="rewrite premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="int_to_bv_sum_pre&#39;vc.4.1.1.0.0.0.0.0.0.1.0.0.1.0.0" expl="rewrite premises" proved="true">
                <proof prover="0"><result status="valid" time="0.37"/></proof>
                </goal>
                <goal name="int_to_bv_sum_pre&#39;vc.4.1.1.0.0.0.0.0.0.1.0.0.1.0.1" expl="rewrite premises" proved="true">
                <proof prover="0"><result status="valid" time="0.38"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="int_to_bv_sum_pre&#39;vc.4.1.1.0.0.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="7"><result status="valid" time="0.75" steps="349418"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="int_to_bv_sum_pre&#39;vc.4.1.1.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
             <proof prover="7"><result status="valid" time="0.71" steps="349418"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="int_to_bv_sum_pre&#39;vc.4.1.1.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(  mod (mod i (power 2 k)) (power 2 (k - 1)))" arg2="(mod i (power 2 (k-1)))">
          <goal name="int_to_bv_sum_pre&#39;vc.4.1.1.0.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="int_to_bv_sum_pre&#39;vc.4.1.1.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="H">
            <goal name="int_to_bv_sum_pre&#39;vc.4.1.1.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
             <goal name="int_to_bv_sum_pre&#39;vc.4.1.1.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
             </transf>
             </goal>
             <goal name="int_to_bv_sum_pre&#39;vc.4.1.1.0.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="7"><result status="valid" time="0.44" steps="329351"/></proof>
             </goal>
             <goal name="int_to_bv_sum_pre&#39;vc.4.1.1.0.0.0.0.1.0.0.0.2" expl="apply premises" proved="true">
             <proof prover="7"><result status="valid" time="0.47" steps="329324"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="int_to_bv_sum_pre&#39;vc.4.1.1.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
          <proof prover="0"><result status="valid" time="0.34"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="int_to_bv_sum_pre&#39;vc.4.1.1.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="0.84" steps="333604"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="int_to_bv_sum_pre&#39;vc.4.1.1.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="0.61" steps="308233"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="int_to_bv_sum&#39;vc" expl="VC for int_to_bv_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_to_bv_sum&#39;vc.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="int_to_bv_sum_pre" arg2="i,n,n">
   <goal name="int_to_bv_sum&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ind_isum
    (fun (k:int) -&gt; (getbv (int_to_bv i n) @ k) * power 2 ((n - 1) - k)) 0 n)" arg2="(mod i (power 2 n))">
    <goal name="int_to_bv_sum&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.27"/></proof>
    </goal>
    <goal name="int_to_bv_sum&#39;vc.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="7"><result status="valid" time="0.89" steps="333108"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="int_to_bv_sum_rev&#39;vc" expl="VC for int_to_bv_sum_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_to_bv_sum_rev&#39;vc.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="int_to_bv_sum" arg2="i,n">
   <goal name="int_to_bv_sum_rev&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ind_isum
  (fun (k:int) -&gt; (getbv (int_to_bv i n) @ k) * power 2 ((n - k) - 1)) 0 n)" arg2="(ind_isum
  (fun (k:int) -&gt; (getbv (int_to_bv i n) @ k) * power 2 ((n - 1) - k)) 0 n)">
    <goal name="int_to_bv_sum_rev&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="0.87" steps="332041"/></proof>
    </goal>
    <goal name="int_to_bv_sum_rev&#39;vc.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="7"><result status="valid" time="2.43" steps="683616"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="int_to_bv_mod_div&#39;vc" expl="VC for int_to_bv_mod_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_to_bv_mod_div&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_bv">
   <goal name="int_to_bv_mod_div&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="int_to_bv_mod_div&#39;vc.0.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="int_to_bv&#39;spec">
     <goal name="int_to_bv_mod_div&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="make_bv_length">
      <goal name="int_to_bv_mod_div&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="make_bv_length">
       <goal name="int_to_bv_mod_div&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="0.42" steps="297129"/></proof>
       </goal>
       <goal name="int_to_bv_mod_div&#39;vc.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="int_to_bv_mod_div&#39;vc.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="3.49"/></proof>
        </goal>
        <goal name="int_to_bv_mod_div&#39;vc.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="int_to_bv_mod_div&#39;vc.0.0.0.0.0.1.1.0" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="0.64" steps="316089"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="int_to_bv_mod_div&#39;vc.0.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="0.43" steps="297131"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="int_to_bv_mod_div&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="int_to_bv_mod_div&#39;vc.0.0.0.0.1.0" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="int_to_bv_mod_div&#39;vc.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.32"/></proof>
        </goal>
        <goal name="int_to_bv_mod_div&#39;vc.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.34"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="int_to_bv_mod_div&#39;vc.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.45" steps="297131"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="int_to_bv_mod_div&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.43" steps="297131"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="int_to_bv_mod_div&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="int_to_bv_mod_div&#39;vc.0.1.0" expl="apply premises" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="int_to_bv_mod_div&#39;vc.0.1.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="int_to_bv&#39;spec">
      <goal name="int_to_bv_mod_div&#39;vc.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
       <goal name="int_to_bv_mod_div&#39;vc.0.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
        <goal name="int_to_bv_mod_div&#39;vc.0.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="int_to_bv_mod_div&#39;vc.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.34"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="int_to_bv_mod_div&#39;vc.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="int_to_bv_mod_div&#39;vc.0.1.0.0.0.0.1.0" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="3.24"/></proof>
         </goal>
         <goal name="int_to_bv_mod_div&#39;vc.0.1.0.0.0.0.1.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="3.69"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="int_to_bv_mod_div&#39;vc.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="int_to_bv_mod_div&#39;vc.0.1.0.0.0.0.2.0" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="0.42" steps="297167"/></proof>
         </goal>
         <goal name="int_to_bv_mod_div&#39;vc.0.1.0.0.0.0.2.1" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="0.86" steps="335824"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="int_to_bv_mod_div&#39;vc.0.1.0.0.0.1" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="int_to_bv_mod_div&#39;vc.0.1.0.0.0.1.0" expl="rewrite premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="int_to_bv_mod_div&#39;vc.0.1.0.0.0.1.0.0" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.29"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="int_to_bv_mod_div&#39;vc.0.1.0.0.0.1.1" expl="rewrite premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="int_to_bv_mod_div&#39;vc.0.1.0.0.0.1.1.0" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.30"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="int_to_bv_mod_div&#39;vc.0.1.0.0.0.2" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="int_to_bv_mod_div&#39;vc.0.1.0.0.0.2.0" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="0.42" steps="297167"/></proof>
        </goal>
        <goal name="int_to_bv_mod_div&#39;vc.0.1.0.0.0.2.1" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="0.80" steps="335824"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="int_to_bv_mod_div&#39;vc.0.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.40" steps="297167"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mod_isum&#39;vc" expl="VC for mod_isum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mod_isum&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(mod i (power 2 k))" arg2="(mod (ind_isum
     (fun (k:int) -&gt;
       (getbv (int_to_bv i n) @ k) * power 2 ((n - 1) - k))
     0 n) (power 2 k))">
   <goal name="mod_isum&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="mod_ind_isum">
    <goal name="mod_isum&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="0.82" steps="332849"/></proof>
    </goal>
    <goal name="mod_isum&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mod_isum&#39;vc.0.0.1.0" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.34" steps="261425"/></proof>
     </goal>
     <goal name="mod_isum&#39;vc.0.0.1.1" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.54" steps="278861"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="mod_isum&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.65" steps="308069"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="mod_isum&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <transf name="replace" proved="true" arg1="((ind_isum
     (fun (k1:int) -&gt; (getbv (int_to_bv i n) @ k1) * power 2 ((n - 1) - k1))
     0 n))" arg2="i">
    <goal name="mod_isum&#39;vc.0.1.0" expl="equality hypothesis" proved="true">
    <proof prover="7"><result status="valid" time="0.35" steps="261423"/></proof>
    </goal>
    <goal name="mod_isum&#39;vc.0.1.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="goal_comm">
     <goal name="mod_isum&#39;vc.0.1.1.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="int_to_bv_sum">
      <goal name="mod_isum&#39;vc.0.1.1.0.0" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="0.38" steps="261425"/></proof>
      </goal>
      <goal name="mod_isum&#39;vc.0.1.1.0.1" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="0.36" steps="261434"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mod_isum_z&#39;vc" expl="VC for mod_isum_z" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mod_isum_z&#39;vc.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="mod_isum" arg2="i,k,n">
   <goal name="mod_isum_z&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="ind_isum_transl" arg2="(fun (l:int) -&gt; (getbv (int_to_bv i n) @ l) * power 2 ((n - 1) - l)),(n-k),n,(n-k)">
    <goal name="mod_isum_z&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Hinst1">
     <goal name="mod_isum_z&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Hinst">
      <goal name="mod_isum_z&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
       <goal name="mod_isum_z&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mod_isum_z&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="mod_isum_z&#39;vc.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="mult_eq">
          <goal name="mod_isum_z&#39;vc.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="0.36" steps="262365"/></proof>
          </goal>
          <goal name="mod_isum_z&#39;vc.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="0.34" steps="262416"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mod_isum_z&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="0.34" steps="262334"/></proof>
       </goal>
       <goal name="mod_isum_z&#39;vc.0.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="0.37" steps="262334"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mod_isum_z&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.33" steps="262327"/></proof>
     </goal>
     <goal name="mod_isum_z&#39;vc.0.0.0.2" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mod_isum_z&#39;vc.0.0.0.2.0" proved="true">
      <proof prover="7"><result status="valid" time="0.39" steps="262327"/></proof>
      </goal>
      <goal name="mod_isum_z&#39;vc.0.0.0.2.1" proved="true">
      <proof prover="7"><result status="valid" time="0.34" steps="262342"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="mod_isum_z&#39;vc.0.0.0.3" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mod_isum_z&#39;vc.0.0.0.3.0" proved="true">
      <proof prover="7"><result status="valid" time="0.36" steps="262327"/></proof>
      </goal>
      <goal name="mod_isum_z&#39;vc.0.0.0.3.1" proved="true">
      <proof prover="7"><result status="valid" time="0.36" steps="262342"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="div_isum&#39;vc" expl="VC for div_isum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="div_isum&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="div_isum&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(div i (power 2 k))" arg2="(div (ind_isum
     (fun (k:int) -&gt;
       (getbv (int_to_bv i n) @ k) * power 2 ((n - 1) - k))
     0 n) (power 2 k))">
    <goal name="div_isum&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="div_ind_isum">
     <goal name="div_isum&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="div_isum&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="7"><result status="valid" time="1.08" steps="375878"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="div_isum&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.70" steps="317093"/></proof>
     </goal>
     <goal name="div_isum&#39;vc.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.85" steps="350635"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="div_isum&#39;vc.0.0.1" expl="equality hypothesis" proved="true">
    <transf name="assert" proved="true" arg1="((ind_isum
     (fun (k1:int) -&gt; (getbv (int_to_bv i n) @ k1) * power 2 ((n - 1) - k1))
     0 n) = i)">
     <goal name="div_isum&#39;vc.0.0.1.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="goal_comm">
      <goal name="div_isum&#39;vc.0.0.1.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="int_to_bv_sum">
       <goal name="div_isum&#39;vc.0.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="0.32" steps="298359"/></proof>
       </goal>
       <goal name="div_isum&#39;vc.0.0.1.0.0.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="div_isum&#39;vc.0.0.1.0.0.1.0" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="0.34" steps="298359"/></proof>
        </goal>
        <goal name="div_isum&#39;vc.0.0.1.0.0.1.1" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="0.46" steps="298374"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="div_isum&#39;vc.0.0.1.1" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="h">
      <goal name="div_isum&#39;vc.0.0.1.1.0" expl="equality hypothesis" proved="true">
      <proof prover="7"><result status="valid" time="0.44" steps="298490"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="int_to_bv_div_mod&#39;vc" expl="VC for int_to_bv_div_mod" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="int_to_bv_div_mod&#39;vc.0" expl="VC for int_to_bv_div_mod" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="int_to_bv_div_mod&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="int_to_bv_div_mod&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="int_to_bv&#39;spec">
     <goal name="int_to_bv_div_mod&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
     <goal name="int_to_bv_div_mod&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.44" steps="298772"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="int_to_bv_value&#39;vc" expl="VC for int_to_bv_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_to_bv_value&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="int_to_bv_value&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="int_to_bv_mod_div">
    <goal name="int_to_bv_value&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="assert_make_bv">
     <goal name="int_to_bv_value&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="0.31"/></proof>
     </goal>
     <goal name="int_to_bv_value&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="int_to_bv_value&#39;vc.0.0.0.1.0" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="3.39"/></proof>
      </goal>
      <goal name="int_to_bv_value&#39;vc.0.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="3.45"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="int_to_bv_value&#39;vc.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.65" steps="317935"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="int_to_bv_value&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.62" steps="317935"/></proof>
    </goal>
    <goal name="int_to_bv_value&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="int_to_bv_value&#39;vc.0.0.2.0" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.38" steps="299191"/></proof>
     </goal>
     <goal name="int_to_bv_value&#39;vc.0.0.2.1" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.42" steps="299206"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="int_to_bv_value_zero&#39;vc" expl="VC for int_to_bv_value_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_to_bv_value_zero&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_if" proved="true" >
   <goal name="int_to_bv_value_zero&#39;vc.0.0" expl="VC for int_to_bv_value_zero" proved="true">
   <transf name="rewrite" proved="true" arg1="int_to_bv_value">
    <goal name="int_to_bv_value_zero&#39;vc.0.0.0" expl="VC for int_to_bv_value_zero" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="int_to_bv_value_zero&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="0.29"/></proof>
     </goal>
     <goal name="int_to_bv_value_zero&#39;vc.0.0.0.1" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(div  i (power 2 ((n - 0) - 1)))" arg2="1">
      <goal name="int_to_bv_value_zero&#39;vc.0.0.0.1.0" expl="postcondition" proved="true">
      <transf name="assert" proved="true" arg1="(forall a b c. 0&lt;= a -&gt; 0&lt;= b -&gt; 0&lt;= c -&gt; a*b &lt;= c &lt; a* (b+1)-&gt; div c a = b)">
       <goal name="int_to_bv_value_zero&#39;vc.0.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="int_to_bv_value_zero&#39;vc.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
        <proof prover="9"><result status="valid" time="0.40" steps="2492254"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="int_to_bv_value_zero&#39;vc.0.0.0.1.0.1" expl="postcondition" proved="true">
       <proof prover="7"><result status="valid" time="0.28" steps="266440"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="int_to_bv_value_zero&#39;vc.0.0.0.1.1" expl="equality hypothesis" proved="true">
      <proof prover="0"><result status="valid" time="3.80"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="int_to_bv_value_zero&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.35" steps="266120"/></proof>
    </goal>
    <goal name="int_to_bv_value_zero&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="int_to_bv_value_zero&#39;vc.0.0.2.0" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.38" steps="266118"/></proof>
     </goal>
     <goal name="int_to_bv_value_zero&#39;vc.0.0.2.1" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.35" steps="266133"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="int_to_bv_value_zero&#39;vc.0.0.3" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="int_to_bv_value_zero&#39;vc.0.0.3.0" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.33" steps="266125"/></proof>
     </goal>
     <goal name="int_to_bv_value_zero&#39;vc.0.0.3.1" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.36" steps="266120"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="int_to_bv_mod_div_&#39;vc" expl="VC for int_to_bv_mod_div_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_to_bv_mod_div_&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="int_to_bv_mod_div">
   <goal name="int_to_bv_mod_div_&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_equal_bv">
    <goal name="int_to_bv_mod_div_&#39;vc.0.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="make_bv_length">
     <goal name="int_to_bv_mod_div_&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="0.37" steps="263680"/></proof>
     </goal>
     <goal name="int_to_bv_mod_div_&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="4.88"/></proof>
     </goal>
     <goal name="int_to_bv_mod_div_&#39;vc.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.33" steps="263682"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="int_to_bv_mod_div_&#39;vc.0.0.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="int_to_bv_mod_div_&#39;vc.0.0.1.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
      <goal name="int_to_bv_mod_div_&#39;vc.0.0.1.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
      </transf>
      </goal>
      <goal name="int_to_bv_mod_div_&#39;vc.0.0.1.0.1" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="int_to_bv_mod_div_&#39;vc.0.0.1.0.1.0" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="0.64" steps="310804"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="int_to_bv_mod_div_&#39;vc.0.0.1.0.2" expl="rewrite premises" proved="true">
      <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
       <goal name="int_to_bv_mod_div_&#39;vc.0.0.1.0.2.0" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="0.36" steps="263731"/></proof>
       </goal>
       <goal name="int_to_bv_mod_div_&#39;vc.0.0.1.0.2.1" expl="rewrite premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="int_to_bv_mod_div_&#39;vc.0.0.1.0.2.1.0" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="0.65" steps="310804"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="int_to_bv_mod_div_&#39;vc.0.0.1.0.2.2" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="0.40" steps="292144"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="int_to_bv_mod_div_&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="7"><result status="valid" time="0.35" steps="263682"/></proof>
   </goal>
   <goal name="int_to_bv_mod_div_&#39;vc.0.2" expl="rewrite premises" proved="true">
   <proof prover="7"><result status="valid" time="0.36" steps="263691"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mod_isum_&#39;vc" expl="VC for mod_isum_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mod_isum_&#39;vc.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="mod_isum" arg2="i,k,n">
   <goal name="mod_isum_&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Hinst">
    <goal name="mod_isum_&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="ind_isum_eq">
     <goal name="mod_isum_&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mod_isum_&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.36" steps="264332"/></proof>
    </goal>
    <goal name="mod_isum_&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.37" steps="264332"/></proof>
    </goal>
    <goal name="mod_isum_&#39;vc.0.0.3" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.38" steps="264332"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mod_isum_z_&#39;vc" expl="VC for mod_isum_z_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mod_isum_z_&#39;vc.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="mod_isum_z" arg2="i,k,n">
   <goal name="mod_isum_z_&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.92" steps="338940"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="div_isum_&#39;vc" expl="VC for div_isum_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="div_isum_&#39;vc.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="div_isum" arg2="i,k,n">
   <goal name="div_isum_&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.93" steps="338951"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="int_to_bv_div_mod_&#39;vc" expl="VC for int_to_bv_div_mod_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_to_bv_div_mod_&#39;vc.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="int_to_bv_div_mod" arg2="i,k,n">
   <goal name="int_to_bv_div_mod_&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Hinst">
    <goal name="int_to_bv_div_mod_&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_bv">
     <goal name="int_to_bv_div_mod_&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="make_bv_length">
      <goal name="int_to_bv_div_mod_&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="0.38" steps="265565"/></proof>
      </goal>
      <goal name="int_to_bv_div_mod_&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="int_to_bv_div_mod_&#39;vc.0.0.0.0.1.0" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="int_to_bv_div_mod_&#39;vc.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.30"/></proof>
        </goal>
        <goal name="int_to_bv_div_mod_&#39;vc.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.29"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="int_to_bv_div_mod_&#39;vc.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.38" steps="265567"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="int_to_bv_div_mod_&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="int_to_bv_div_mod_&#39;vc.0.0.0.1.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
       <goal name="int_to_bv_div_mod_&#39;vc.0.0.0.1.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
       </transf>
       </goal>
       <goal name="int_to_bv_div_mod_&#39;vc.0.0.0.1.0.1" expl="rewrite premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="int_to_bv_div_mod_&#39;vc.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.33"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="int_to_bv_div_mod_&#39;vc.0.0.0.1.0.2" expl="rewrite premises" proved="true">
       <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
        <goal name="int_to_bv_div_mod_&#39;vc.0.0.0.1.0.2.0" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="0.36" steps="265616"/></proof>
        </goal>
        <goal name="int_to_bv_div_mod_&#39;vc.0.0.0.1.0.2.1" expl="rewrite premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="int_to_bv_div_mod_&#39;vc.0.0.0.1.0.2.1.0" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.33"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="int_to_bv_div_mod_&#39;vc.0.0.0.1.0.2.2" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="0.42" steps="293825"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="int_to_bv_div_mod_&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.38" steps="265567"/></proof>
    </goal>
    <goal name="int_to_bv_div_mod_&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.37" steps="265567"/></proof>
    </goal>
    <goal name="int_to_bv_div_mod_&#39;vc.0.0.3" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.36" steps="265567"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="int_to_bv_value_&#39;vc" expl="VC for int_to_bv_value_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_to_bv_value_&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.32"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="int_to_bv_value_zero_&#39;vc" expl="VC for int_to_bv_value_zero_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_to_bv_value_zero_&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.89" steps="338135"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="int_to_bv_zero&#39;vc" expl="VC for int_to_bv_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_to_bv_zero&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="int_to_bv_value">
   <goal name="int_to_bv_zero&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.31"/></proof>
   </goal>
   <goal name="int_to_bv_zero&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="7"><result status="valid" time="0.58" steps="284058"/></proof>
   </goal>
   <goal name="int_to_bv_zero&#39;vc.0.2" expl="rewrite premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="int_to_bv_zero&#39;vc.0.2.0" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.38" steps="266385"/></proof>
    </goal>
    <goal name="int_to_bv_zero&#39;vc.0.2.1" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.77" steps="303829"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="int_to_bv_zero&#39;vc.0.3" expl="rewrite premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="int_to_bv_zero&#39;vc.0.3.0" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.36" steps="266378"/></proof>
    </goal>
    <goal name="int_to_bv_zero&#39;vc.0.3.1" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.37" steps="266380"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="int_to_sum&#39;vc" expl="VC for int_to_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_to_sum&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="int_to_sum&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="int_to_bv_sum" arg2="i,n">
    <goal name="int_to_sum&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(ind_isum
    (fun (k:int) -&gt; (getbv (int_to_bv i n) @ k) * power 2 ((n - k) - 1)) 0 n)" arg2="(ind_isum
    (fun (k:int) -&gt; (getbv (int_to_bv i n) @ k) * power 2 ((n - 1) - k)) 0 n)">
     <goal name="int_to_sum&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="7"><result status="valid" time="1.08" steps="380458"/></proof>
     </goal>
     <goal name="int_to_sum&#39;vc.0.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="7"><result status="valid" time="2.99" steps="801693"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="int_to_bv_transl&#39;vc" expl="VC for int_to_bv_transl" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_to_bv_transl&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="int_to_bv_value_">
   <goal name="int_to_bv_transl&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="int_to_bv_value_">
    <goal name="int_to_bv_transl&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="mod_isum_z_" arg2="i,(n-t),n">
     <goal name="int_to_bv_transl&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Hinst">
      <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="instantiate" proved="true" arg1="div_ind_isum_" arg2="(fun (l:int) -&gt;
       (getbv (int_to_bv i n) @ (l + (n - (n - t))))),(n - t-k-1),(n-t)">
       <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
        <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="replace" proved="true" arg1="(ind_isum
    (fun (l:int) -&gt;
      (getbv (int_to_bv i n) @ (l + (n - (n - t))))
      * power 2 (((n - t) - l) - 1))
    0 (n - t))" arg2="(ind_isum
   (fun (k1:int) -&gt;
     (getbv (int_to_bv i n) @ (k1 + (n - (n - t))))
     * power 2 (((n - t) - 1) - k1))
   0 (n - t))">
         <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="Hinst">
          <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="replace" proved="true" arg1="(fun (k1:int) -&gt;
     (getbv (int_to_bv i n) @ (k1 + (n - (n - t))))
     * power 2 ((((n - t) - 1) - k1) - (((n - t) - k) - 1)))" arg2="(fun (k1:int) -&gt;
     (getbv (int_to_bv i n) @ (k1 + (n - (n - t))))
     * power 2 (k-k1))">
           <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <transf name="replace" proved="true" arg1="((n - t) - (((n - t) - k) - 1))" arg2="(k+1)">
            <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
            <transf name="instantiate" proved="true" arg1="mod_ind_isum_" arg2="(fun (k1:int) -&gt;
     (getbv (int_to_bv i n) @ (k1 + (n - (n - t))))),1,(k+1)">
             <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
             <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
              <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
              <transf name="replace" proved="true" arg1="( mod
  (ind_isum
   (fun (k1:int) -&gt;
     (getbv (int_to_bv i n) @ (k1 + (n - (n - t))))
     * power 2 (((k + 1) - 1) - k1))
   0 (k + 1))
  (power 2 1))" arg2="(mod
  (ind_isum
   (fun (k1:int) -&gt;
     (getbv (int_to_bv i n) @ (k1 + (n - (n - t)))) * power 2 (k - k1))
   0 (k + 1))
  2)" arg3="in" arg4="Hinst">
               <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
               <transf name="rewrite" proved="true" arg1="Hinst">
                <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
                <transf name="instantiate" proved="true" arg1="div_isum_" arg2="i,((n - (k + t)) - 1),n">
                 <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
                 <transf name="rewrite" proved="true" arg1="Hinst">
                  <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
                  <transf name="replace" proved="true" arg1="((n - 1) - ((n - (k + t)) - 1))" arg2="(k+t)">
                   <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
                   <transf name="replace" proved="true" arg1="(n - (n - t))" arg2="t">
                    <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
                    <transf name="rewrite" proved="true" arg1="ind_isum_one">
                     <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
                     <transf name="compute_specified" proved="true" >
                      <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
                      <transf name="instantiate" proved="true" arg1="ind_isum_mod_" arg2="(int_to_bv i n),(k+t)">
                       <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
                       <transf name="replace" proved="true" arg1="(n - ((n - (k + t)) - 1))" arg2="(k+t+1)">
                        <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
                        <transf name="rewrite" proved="true" arg1="Hinst">
                         <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
                         <transf name="rewrite" proved="true" arg1="mult_one">
                          <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
                          <proof prover="7"><result status="valid" time="0.39" steps="296028"/></proof>
                          </goal>
                          <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                          <proof prover="7"><result status="valid" time="0.61" steps="287703"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                         <transf name="split_vc" proved="true" >
                          <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0" proved="true">
                          <proof prover="7"><result status="valid" time="0.58" steps="287255"/></proof>
                          </goal>
                          <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1" proved="true">
                          <transf name="replace" proved="true" arg1="(length (int_to_bv i n))" arg2="n">
                           <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1.0" proved="true">
                           <proof prover="7"><result status="valid" time="0.36" steps="268332"/></proof>
                           </goal>
                           <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1.1" expl="equality hypothesis" proved="true">
                           <proof prover="7"><result status="valid" time="0.83" steps="319276"/></proof>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                        <proof prover="7"><result status="valid" time="0.39" steps="268330"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                     <proof prover="7"><result status="valid" time="0.36" steps="268155"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                    <proof prover="7"><result status="valid" time="0.37" steps="268148"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                   <proof prover="7"><result status="valid" time="0.37" steps="268148"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="7"><result status="valid" time="0.59" steps="286942"/></proof>
                  </goal>
                  <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="7"><result status="valid" time="0.35" steps="268141"/></proof>
                  </goal>
                  <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
                  <proof prover="7"><result status="valid" time="0.57" steps="286937"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="7"><result status="valid" time="0.39" steps="267894"/></proof>
                </goal>
                <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                <transf name="apply" proved="true" arg1="set_binary">
                 <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
                 <transf name="compute_specified" proved="true" >
                  <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
                  <proof prover="7"><result status="valid" time="2.57" steps="748457"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
               <transf name="replace" proved="true" arg1="(power 2 1)" arg2="2">
                <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
                <transf name="apply" proved="true" arg1="mod_eq">
                 <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                 <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
                  <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                  <transf name="compute_specified" proved="true" >
                   <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                   <proof prover="7"><result status="valid" time="0.40" steps="295791"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
                  <proof prover="7"><result status="valid" time="0.36" steps="267920"/></proof>
                  </goal>
                  <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
                  <proof prover="7"><result status="valid" time="0.35" steps="267920"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
                <proof prover="7"><result status="valid" time="0.67" steps="287069"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
            <proof prover="7"><result status="valid" time="0.37" steps="267553"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="7"><result status="valid" time="0.71" steps="315528"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="0.59" steps="285875"/></proof>
          </goal>
          <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <transf name="apply" proved="true" arg1="set_binary">
           <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
            <proof prover="7"><result status="valid" time="2.52" steps="732488"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="ind_isum_eq">
          <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="int_to_bv_transl&#39;vc.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="0.30" steps="295517"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="int_to_bv_transl&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.62" steps="285140"/></proof>
      </goal>
      <goal name="int_to_bv_transl&#39;vc.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.36" steps="267096"/></proof>
      </goal>
      <goal name="int_to_bv_transl&#39;vc.0.0.0.0.3" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.38" steps="267096"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="int_to_bv_transl&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.60" steps="284613"/></proof>
    </goal>
    <goal name="int_to_bv_transl&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.38" steps="266855"/></proof>
    </goal>
    <goal name="int_to_bv_transl&#39;vc.0.0.3" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.61" steps="284635"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="int_to_bv_transl&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="7"><result status="valid" time="0.61" steps="284609"/></proof>
   </goal>
   <goal name="int_to_bv_transl&#39;vc.0.2" expl="rewrite premises" proved="true">
   <proof prover="7"><result status="valid" time="0.75" steps="306890"/></proof>
   </goal>
   <goal name="int_to_bv_transl&#39;vc.0.3" expl="rewrite premises" proved="true">
   <proof prover="7"><result status="valid" time="0.36" steps="266855"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="int_to_bv_transl_div&#39;vc" expl="VC for int_to_bv_transl_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_to_bv_transl_div&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="int_to_bv_value_">
   <goal name="int_to_bv_transl_div&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="int_to_bv_transl_div&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="div_div">
     <goal name="int_to_bv_transl_div&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="int_to_bv_value_">
      <goal name="int_to_bv_transl_div&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="Requires">
       <goal name="int_to_bv_transl_div&#39;vc.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="mod_eq">
        <goal name="int_to_bv_transl_div&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="power_sum_rev">
         <goal name="int_to_bv_transl_div&#39;vc.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="0.43" steps="303507"/></proof>
         </goal>
         <goal name="int_to_bv_transl_div&#39;vc.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="0.44" steps="303429"/></proof>
         </goal>
         <goal name="int_to_bv_transl_div&#39;vc.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="0.43" steps="303407"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="int_to_bv_transl_div&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.70" steps="322365"/></proof>
      </goal>
      <goal name="int_to_bv_transl_div&#39;vc.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.43" steps="303398"/></proof>
      </goal>
      <goal name="int_to_bv_transl_div&#39;vc.0.0.0.0.3" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.66" steps="322390"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="int_to_bv_transl_div&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.41" steps="303389"/></proof>
     </goal>
     <goal name="int_to_bv_transl_div&#39;vc.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.90" steps="343296"/></proof>
     </goal>
     <goal name="int_to_bv_transl_div&#39;vc.0.0.0.3" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.88" steps="343156"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="int_to_bv_transl_div&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="7"><result status="valid" time="0.62" steps="284959"/></proof>
   </goal>
   <goal name="int_to_bv_transl_div&#39;vc.0.2" expl="rewrite premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="int_to_bv_transl_div&#39;vc.0.2.0" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="0.30"/></proof>
    </goal>
    <goal name="int_to_bv_transl_div&#39;vc.0.2.1" expl="rewrite premises" proved="true">
    <transf name="rewrite" proved="true" arg1="Requires">
     <goal name="int_to_bv_transl_div&#39;vc.0.2.1.0" expl="rewrite premises" proved="true">
     <transf name="assert" proved="true" arg1="(div i (power 2 (n - t)) * power 2 (n-t) &lt; power 2 n)">
      <goal name="int_to_bv_transl_div&#39;vc.0.2.1.0.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.31"/></proof>
      </goal>
      <goal name="int_to_bv_transl_div&#39;vc.0.2.1.0.1" expl="rewrite premises" proved="true">
      <transf name="case" proved="true" arg1="(power  2 t &lt;= div i (power 2 (n - t)) )">
       <goal name="int_to_bv_transl_div&#39;vc.0.2.1.0.1.0" expl="rewrite premises (true case)" proved="true">
       <proof prover="6"><result status="valid" time="0.20" steps="3760"/></proof>
       </goal>
       <goal name="int_to_bv_transl_div&#39;vc.0.2.1.0.1.1" expl="rewrite premises (false case)" proved="true">
       <proof prover="7"><result status="valid" time="0.39" steps="267390"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="int_to_bv_transl_div&#39;vc.0.3" expl="rewrite premises" proved="true">
   <proof prover="7"><result status="valid" time="0.56" steps="284966"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="product_int_to_bv_inv&#39;vc" expl="VC for product_int_to_bv_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="product_int_to_bv_inv&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_if" proved="true" >
   <goal name="product_int_to_bv_inv&#39;vc.0.0" expl="VC for product_int_to_bv_inv" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="product_int_to_bv_inv&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="ind_iproduct_one">
     <goal name="product_int_to_bv_inv&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="product_int_to_bv_inv&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="product_int_to_bv_inv&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(getbv (int_to_bv i n) @ k)" arg2="0">
        <goal name="product_int_to_bv_inv&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="0.28" steps="270390"/></proof>
        </goal>
        <goal name="product_int_to_bv_inv&#39;vc.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="7"><result status="valid" time="0.97" steps="341438"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="product_int_to_bv_inv&#39;vc.0.0.1" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="non_null_product_bitvec_inv">
     <goal name="product_int_to_bv_inv&#39;vc.0.0.1.0" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="0.83" steps="308356"/></proof>
     </goal>
     <goal name="product_int_to_bv_inv&#39;vc.0.0.1.1" expl="apply premises" proved="true">
     <transf name="case" proved="true" arg1="(forall i1:int. 0 &lt;= i1 /\ i1 &lt; n -&gt; (getbv (int_to_bv i n) @ i1) = 0)
">
      <goal name="product_int_to_bv_inv&#39;vc.0.0.1.1.0" expl="apply premises (true case)" proved="true">
      <transf name="assert" proved="true" arg1="(i = 0)">
       <goal name="product_int_to_bv_inv&#39;vc.0.0.1.1.0.0" expl="asserted formula" proved="true">
       <transf name="instantiate" proved="true" arg1="int_to_sum" arg2="i,n">
        <goal name="product_int_to_bv_inv&#39;vc.0.0.1.1.0.0.0" expl="asserted formula" proved="true">
        <transf name="rewrite" proved="true" arg1="Hinst">
         <goal name="product_int_to_bv_inv&#39;vc.0.0.1.1.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="ind_isum_null">
          <goal name="product_int_to_bv_inv&#39;vc.0.0.1.1.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="0.67" steps="289137"/></proof>
          </goal>
          <goal name="product_int_to_bv_inv&#39;vc.0.0.1.1.0.0.0.0.1" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="product_int_to_bv_inv&#39;vc.0.0.1.1.0.0.0.0.1.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.39"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="product_int_to_bv_inv&#39;vc.0.0.1.1.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="0.69" steps="289137"/></proof>
         </goal>
         <goal name="product_int_to_bv_inv&#39;vc.0.0.1.1.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="0.29" steps="270624"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="product_int_to_bv_inv&#39;vc.0.0.1.1.0.1" expl="apply premises (true case)" proved="true">
       <proof prover="7"><result status="valid" time="0.32" steps="298732"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="product_int_to_bv_inv&#39;vc.0.0.1.1.1" expl="apply premises (false case)" proved="true">
      <proof prover="7"><result status="valid" time="0.73" steps="317382"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bin_to_int&#39;vc" expl="VC for bin_to_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bin_to_int&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bin_to_int&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.83" steps="337595"/></proof>
   </goal>
   <goal name="bin_to_int&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.87" steps="337584"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="bin_to_int&#39;vc.1" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.40" steps="295864"/></proof>
  </goal>
  <goal name="bin_to_int&#39;vc.2" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures1">
   <goal name="bin_to_int&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
    <goal name="bin_to_int&#39;vc.2.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="bin_to_int&#39;vc.2.0.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="bin_to_int&#39;vc.2.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.38"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="bin_to_int&#39;vc.2.0.1" expl="apply premises" proved="true">
    <proof prover="7"><result status="valid" time="0.41" steps="296069"/></proof>
    </goal>
    <goal name="bin_to_int&#39;vc.2.0.2" expl="apply premises" proved="true">
    <proof prover="7"><result status="valid" time="0.42" steps="296071"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="bin_to_int&#39;vc.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bin_to_int&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.41" steps="296161"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="int_to_bin&#39;vc" expl="VC for int_to_bin" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_to_bin&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.39" steps="268227"/></proof>
  </goal>
  <goal name="int_to_bin&#39;vc.1" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="int_to_bin&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="int_to_bin&#39;vc.1.0.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="int_to_bv_sum" arg2="i,n">
     <goal name="int_to_bin&#39;vc.1.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(ind_isum
    (fun (k:int) -&gt; (getbv (int_to_bv i n) @ k) * power 2 ((n - 1) - k)) 0 n)" arg2="(ind_isum
    (fun (k:int) -&gt; (getbv (int_to_bv i n) @ k) * power 2 ((n - 1) - k)) 0 n)">
      <goal name="int_to_bin&#39;vc.1.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="Hinst">
       <goal name="int_to_bin&#39;vc.1.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="0.37" steps="297588"/></proof>
       </goal>
       <goal name="int_to_bin&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="0.48" steps="297588"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="int_to_bin&#39;vc.1.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="ind_isum_eq">
       <goal name="int_to_bin&#39;vc.1.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="int_to_bin&#39;vc.1.0.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="int_to_bin&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.40" steps="296358"/></proof>
  </goal>
  <goal name="int_to_bin&#39;vc.3" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="int_to_bin&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="int_to_bin&#39;vc.3.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="int_to_bin&#39;vc.3.0.0.0" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="2.91"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="int_to_bv_tail&#39;vc" expl="VC for int_to_bv_tail" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_to_bv_tail&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.58" steps="286907"/></proof>
  </goal>
  <goal name="int_to_bv_tail&#39;vc.1" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.69" steps="315914"/></proof>
  </goal>
  <goal name="int_to_bv_tail&#39;vc.2" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.68" steps="315948"/></proof>
  </goal>
  <goal name="int_to_bv_tail&#39;vc.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="int_to_bv_tail&#39;vc.3.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.37" steps="297228"/></proof>
   </goal>
   <goal name="int_to_bv_tail&#39;vc.3.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.37" steps="297243"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="int_to_bv_tail&#39;vc.4" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.66" steps="315990"/></proof>
  </goal>
  <goal name="int_to_bv_tail&#39;vc.5" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.66" steps="316294"/></proof>
  </goal>
  <goal name="int_to_bv_tail&#39;vc.6" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="tail_bits&#39;def">
   <goal name="int_to_bv_tail&#39;vc.6.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures2">
    <goal name="int_to_bv_tail&#39;vc.6.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="int_to_bv_transl">
     <goal name="int_to_bv_tail&#39;vc.6.0.0.0" expl="precondition" proved="true">
     <proof prover="7"><result status="valid" time="0.38" steps="297511"/></proof>
     </goal>
     <goal name="int_to_bv_tail&#39;vc.6.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.37" steps="297522"/></proof>
     </goal>
     <goal name="int_to_bv_tail&#39;vc.6.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.64" steps="316262"/></proof>
     </goal>
     <goal name="int_to_bv_tail&#39;vc.6.0.0.3" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.65" steps="316216"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="int_to_bv_tail&#39;vc.6.0.1" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.90" steps="343833"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="int_to_bv_tail&#39;vc.6.1" expl="rewrite premises" proved="true">
   <proof prover="7"><result status="valid" time="0.65" steps="316194"/></proof>
   </goal>
   <goal name="int_to_bv_tail&#39;vc.6.2" expl="rewrite premises" proved="true">
   <proof prover="7"><result status="valid" time="0.50" steps="297522"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="int_to_bv_tail&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.39" steps="297488"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bound_sum_dec&#39;vc" expl="VC for bound_sum_dec" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="bound_sum_dec&#39;vc.0" expl="VC for bound_sum_dec" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bound_sum_dec&#39;vc.0.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="bound_sum_dec&#39;vc.0.0.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="1.03" steps="339243"/></proof>
    </goal>
    <goal name="bound_sum_dec&#39;vc.0.0.1" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="1.04" steps="339249"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="bound_sum_dec&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.07" steps="339818"/></proof>
   </goal>
   <goal name="bound_sum_dec&#39;vc.0.2" expl="precondition" proved="true">
   <transf name="exists" proved="true" arg1="(length bv - e&#39; +1)">
    <goal name="bound_sum_dec&#39;vc.0.2.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="bound_sum_dec&#39;vc.0.2.0.0" proved="true">
     <proof prover="7"><result status="valid" time="0.43" steps="297676"/></proof>
     </goal>
     <goal name="bound_sum_dec&#39;vc.0.2.0.1" proved="true">
     <proof prover="7"><result status="valid" time="0.41" steps="297667"/></proof>
     </goal>
     <goal name="bound_sum_dec&#39;vc.0.2.0.2" proved="true">
     <proof prover="7"><result status="valid" time="0.86" steps="339663"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="bound_sum_dec&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.67" steps="316106"/></proof>
   </goal>
   <goal name="bound_sum_dec&#39;vc.0.4" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.65" steps="316261"/></proof>
   </goal>
   <goal name="bound_sum_dec&#39;vc.0.5" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="bound_sum_dec&#39;vc.0.5.0" expl="precondition" proved="true">
    <transf name="eliminate_if" proved="true" >
     <goal name="bound_sum_dec&#39;vc.0.5.0.0" expl="VC for bound_sum_dec" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="bound_sum_dec&#39;vc.0.5.0.0.0" expl="precondition" proved="true">
      <proof prover="0"><result status="valid" time="0.36"/></proof>
      </goal>
      <goal name="bound_sum_dec&#39;vc.0.5.0.0.1" expl="precondition" proved="true">
      <proof prover="7"><result status="valid" time="0.40" steps="301101"/></proof>
      </goal>
      <goal name="bound_sum_dec&#39;vc.0.5.0.0.2" expl="precondition" proved="true">
      <proof prover="7"><result status="valid" time="0.42" steps="301039"/></proof>
      </goal>
      <goal name="bound_sum_dec&#39;vc.0.5.0.0.3" expl="precondition" proved="true">
      <proof prover="7"><result status="valid" time="0.43" steps="301022"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="bound_sum_dec&#39;vc.0.6" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures4">
    <goal name="bound_sum_dec&#39;vc.0.6.0" expl="precondition" proved="true">
    <transf name="replace" proved="true" arg1="(ind_isum
  (fun (b:int) -&gt;
    (fun (l:int) -&gt;
      if 1 &lt;= l /\ l &lt;= length bv then getbv bv l * power 2 (length bv - l)
      else 0)
    @ ((fun (l:int) -&gt; (length bv - l) + 1) @ b))
  1 ((length bv - i) + 2))" arg2="(ind_isum
  (fun (l:int) -&gt;
    if 1 &lt;= l /\ l &lt;= length bv
    then getbv bv ((length bv - l) + 1) * power 2 (l - 1) else 0)
  1 ((length bv - i) + 2))">
     <goal name="bound_sum_dec&#39;vc.0.6.0.0" expl="precondition" proved="true">
     <transf name="apply" proved="true" arg1="Ensures2">
     </transf>
     </goal>
     <goal name="bound_sum_dec&#39;vc.0.6.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="ind_isum_eq">
      <goal name="bound_sum_dec&#39;vc.0.6.0.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="bound_sum_dec&#39;vc.0.6.0.1.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="bound_sum_dec&#39;vc.0.6.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="0.74" steps="350049"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="bound_sum_dec&#39;vc.0.7" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="((length bv - i) + 1)" arg2="(((length bv - i) + 2) - 1)">
    <goal name="bound_sum_dec&#39;vc.0.7.0" expl="precondition" proved="true">
    <transf name="replace" proved="true" arg1="(ind_isum
  (fun (l:int) -&gt; if 1 &lt;= l /\ l &lt;= length bv then power 2 (l - 1) else 0) 1
  ((length bv - i) + 2))" arg2="( ind_isum
  (fun (k:int) -&gt;
    if 1 &lt;= k /\ k &lt; (((length bv - i) + 2) + 1) then power 2 (k - 1) else 0)
  1 ((length bv - i) + 2))">
     <goal name="bound_sum_dec&#39;vc.0.7.0.0" expl="precondition" proved="true">
     <transf name="apply" proved="true" arg1="Ensures3">
     </transf>
     </goal>
     <goal name="bound_sum_dec&#39;vc.0.7.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="ind_isum_eq">
      <goal name="bound_sum_dec&#39;vc.0.7.0.1.0" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="1.14" steps="381256"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="bound_sum_dec&#39;vc.0.7.1" expl="equality hypothesis" proved="true">
    <proof prover="7"><result status="valid" time="0.50" steps="330291"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="bound_sum_dec&#39;vc.0.8" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ind_isum (fun (l:int) -&gt; getbv bv l * power 2 (length bv - l)) i
  (length bv + 1))" arg2="( ind_isum
  (fun (l:int) -&gt;
    if 1 &lt;= l /\ l &lt;= length bv then getbv bv l * power 2 (length bv - l)
    else 0)
  i (length bv + 1))">
    <goal name="bound_sum_dec&#39;vc.0.8.0" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="3.09" steps="764964"/></proof>
    </goal>
    <goal name="bound_sum_dec&#39;vc.0.8.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="ind_isum_eq">
     <goal name="bound_sum_dec&#39;vc.0.8.1.0" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="1.19" steps="379544"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_int_to_bv&#39;vc" expl="VC for bv_to_int_to_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_to_int_to_bv&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.59" steps="287496"/></proof>
  </goal>
  <goal name="bv_to_int_to_bv&#39;vc.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bv_to_int_to_bv&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.38" steps="269635"/></proof>
   </goal>
   <goal name="bv_to_int_to_bv&#39;vc.1.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.37" steps="269650"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="bv_to_int_to_bv&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="bv_to_int_to_bv&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
    <goal name="bv_to_int_to_bv&#39;vc.2.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(ind_isum
  (fun (k:int) -&gt;
    getbv (int_to_bv i n) k * power 2 (length (int_to_bv i n) - k))
  1 (length (int_to_bv i n) + 1))" arg2="(ind_isum (fun (k:int) -&gt; getbv (int_to_bv i n) k * power 2 (n - k)) 1
    (n + 1))">
     <goal name="bv_to_int_to_bv&#39;vc.2.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(ind_isum
  (fun (k:int) -&gt;
    (getbv (int_to_bv i n) @ k) * power 2 ((length (int_to_bv i n) - 1) - k))
  0 (length (int_to_bv i n)) )" arg2="(ind_isum
    (fun (k:int) -&gt; (getbv (int_to_bv i n) @ k) * power 2 ((n - k) - 1)) 0 n)">
      <goal name="bv_to_int_to_bv&#39;vc.2.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="7"><result status="valid" time="1.26" steps="426287"/></proof>
      </goal>
      <goal name="bv_to_int_to_bv&#39;vc.2.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
       <goal name="bv_to_int_to_bv&#39;vc.2.0.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.37"/></proof>
       </goal>
       <goal name="bv_to_int_to_bv&#39;vc.2.0.0.0.1.1" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="0.52" steps="338156"/></proof>
       </goal>
       <goal name="bv_to_int_to_bv&#39;vc.2.0.0.0.1.2" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="1.07" steps="383444"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="bv_to_int_to_bv&#39;vc.2.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
      <goal name="bv_to_int_to_bv&#39;vc.2.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.39"/></proof>
      </goal>
      <goal name="bv_to_int_to_bv&#39;vc.2.0.0.1.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="bv_to_int_to_bv&#39;vc.2.0.0.1.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="bv_to_int_to_bv&#39;vc.2.0.0.1.2" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="1.08" steps="383458"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_int_to_bv_&#39;vc" expl="VC for bv_to_int_to_bv_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_to_int_to_bv_&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.54" steps="287632"/></proof>
  </goal>
  <goal name="bv_to_int_to_bv_&#39;vc.1" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.36" steps="269779"/></proof>
  </goal>
  <goal name="bv_to_int_to_bv_&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.88" steps="341042"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="tail_bits_sum&#39;vc" expl="VC for tail_bits_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="tail_bits_sum&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="tail_bits&#39;def">
   <goal name="tail_bits_sum&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="mod_isum" arg2="i,(n-1),n">
    <goal name="tail_bits_sum&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Hinst">
     <goal name="tail_bits_sum&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="tail_bits_sum&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="7"><result status="valid" time="2.54" steps="706143"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="tail_bits_sum&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.63" steps="288186"/></proof>
     </goal>
     <goal name="tail_bits_sum&#39;vc.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.36" steps="270103"/></proof>
     </goal>
     <goal name="tail_bits_sum&#39;vc.0.0.0.3" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.63" steps="288184"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="tail_bits_sum&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="7"><result status="valid" time="0.58" steps="287675"/></proof>
   </goal>
   <goal name="tail_bits_sum&#39;vc.0.2" expl="rewrite premises" proved="true">
   <proof prover="7"><result status="valid" time="0.37" steps="269868"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="int_to_bv_to_int&#39;vc" expl="VC for int_to_bv_to_int" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="int_to_bv_to_int&#39;vc.0" expl="VC for int_to_bv_to_int" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="int_to_bv_to_int&#39;vc.0.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="int_to_bv_to_int&#39;vc.0.0.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.36" steps="270111"/></proof>
    </goal>
    <goal name="int_to_bv_to_int&#39;vc.0.0.1" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.36" steps="270104"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="int_to_bv_to_int&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.60" steps="316580"/></proof>
   </goal>
   <goal name="int_to_bv_to_int&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.40" steps="298229"/></proof>
   </goal>
   <goal name="int_to_bv_to_int&#39;vc.0.3" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="int_to_bv_value">
    <goal name="int_to_bv_to_int&#39;vc.0.3.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures3">
     <goal name="int_to_bv_to_int&#39;vc.0.3.0.0" expl="precondition" proved="true">
     <transf name="rewrite" proved="true" arg1="div_ind_isum">
      <goal name="int_to_bv_to_int&#39;vc.0.3.0.0.0" expl="precondition" proved="true">
      <transf name="replace" proved="true" arg1="(ind_isum
   (fun (k:int) -&gt;
     (getbv bv @ k) * power 2 (((length bv - 1) - k) - ((length bv - i) - 1)))
   0 (length bv - ((length bv - i) - 1)))" arg2="(ind_isum
   (fun (k:int) -&gt;
     (getbv bv @ k) * power 2 (i-k))
   0 (i+1))">
       <goal name="int_to_bv_to_int&#39;vc.0.3.0.0.0.0" expl="precondition" proved="true">
       <transf name="instantiate" proved="true" arg1="mod_ind_isum" arg2="(getbv bv),1,(i+1)">
        <goal name="int_to_bv_to_int&#39;vc.0.3.0.0.0.0.0" expl="precondition" proved="true">
        <transf name="replace" proved="true" arg1="((i + 1) - 1)" arg2="i" arg3="in" arg4="Hinst">
         <goal name="int_to_bv_to_int&#39;vc.0.3.0.0.0.0.0.0" expl="precondition" proved="true">
         <transf name="replace" proved="true" arg1="(power 2 1)" arg2="2" arg3="in" arg4="Hinst">
          <goal name="int_to_bv_to_int&#39;vc.0.3.0.0.0.0.0.0.0" expl="precondition" proved="true">
          <transf name="rewrite" proved="true" arg1="Hinst">
           <goal name="int_to_bv_to_int&#39;vc.0.3.0.0.0.0.0.0.0.0" expl="precondition" proved="true">
           <transf name="rewrite" proved="true" arg1="ind_isum_one">
            <goal name="int_to_bv_to_int&#39;vc.0.3.0.0.0.0.0.0.0.0.0" expl="precondition" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="int_to_bv_to_int&#39;vc.0.3.0.0.0.0.0.0.0.0.0.0" expl="precondition" proved="true">
             <proof prover="0"><result status="valid" time="0.36"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="int_to_bv_to_int&#39;vc.0.3.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="7"><result status="valid" time="0.39" steps="298468"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="int_to_bv_to_int&#39;vc.0.3.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="7"><result status="valid" time="0.42" steps="298470"/></proof>
           </goal>
           <goal name="int_to_bv_to_int&#39;vc.0.3.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="7"><result status="valid" time="0.65" steps="317497"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="int_to_bv_to_int&#39;vc.0.3.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="7"><result status="valid" time="0.64" steps="317690"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="int_to_bv_to_int&#39;vc.0.3.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="7"><result status="valid" time="0.37" steps="298512"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="int_to_bv_to_int&#39;vc.0.3.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
        <goal name="int_to_bv_to_int&#39;vc.0.3.0.0.0.1.0" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="0.97" steps="344364"/></proof>
        </goal>
        <goal name="int_to_bv_to_int&#39;vc.0.3.0.0.0.1.1" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="0.37" steps="298255"/></proof>
        </goal>
        <goal name="int_to_bv_to_int&#39;vc.0.3.0.0.0.1.2" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="int_to_bv_to_int&#39;vc.0.3.0.0.0.1.2.0" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="0.35" steps="298300"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="int_to_bv_to_int&#39;vc.0.3.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.64" steps="316896"/></proof>
      </goal>
      <goal name="int_to_bv_to_int&#39;vc.0.3.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.70" steps="317146"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="int_to_bv_to_int&#39;vc.0.3.1" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.42" steps="298273"/></proof>
    </goal>
    <goal name="int_to_bv_to_int&#39;vc.0.3.2" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="int_to_bv_to_int&#39;vc.0.3.2.0" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.42" steps="298257"/></proof>
     </goal>
     <goal name="int_to_bv_to_int&#39;vc.0.3.2.1" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.90" steps="343778"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="int_to_bv_to_int&#39;vc.0.3.3" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="int_to_bv_to_int&#39;vc.0.3.3.0" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.43" steps="298257"/></proof>
     </goal>
     <goal name="int_to_bv_to_int&#39;vc.0.3.3.1" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.70" steps="316845"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="int_to_bv_to_int&#39;vc.0.4" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.42" steps="298240"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="int_to_bv_to_int_&#39;vc" expl="VC for int_to_bv_to_int_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_to_bv_to_int_&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.60" steps="288023"/></proof>
  </goal>
  <goal name="int_to_bv_to_int_&#39;vc.1" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_bv">
   <goal name="int_to_bv_to_int_&#39;vc.1.0" expl="apply premises" proved="true">
   <proof prover="7"><result status="valid" time="0.78" steps="309428"/></proof>
   </goal>
   <goal name="int_to_bv_to_int_&#39;vc.1.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="int_to_bv_to_int_&#39;vc.1.1.0" expl="apply premises" proved="true">
    <proof prover="7"><result status="valid" time="0.87" steps="343278"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="int_to_bv_to_int_rev&#39;vc" expl="VC for int_to_bv_to_int_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_to_bv_to_int_rev&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.77" steps="308680"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="concat_to_int&#39;vc" expl="VC for concat_to_int" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="concat_to_int&#39;vc.0" expl="VC for concat_to_int" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="concat_to_int&#39;vc.0.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="concat_to_int&#39;vc.0.0.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.40" steps="298250"/></proof>
    </goal>
    <goal name="concat_to_int&#39;vc.0.0.1" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.40" steps="298250"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="concat_to_int&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.10" steps="412076"/></proof>
   </goal>
   <goal name="concat_to_int&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.11" steps="412994"/></proof>
   </goal>
   <goal name="concat_to_int&#39;vc.0.3" expl="precondition" proved="true">
   <transf name="exists" proved="true" arg1="(e&#39;+1)">
    <goal name="concat_to_int&#39;vc.0.3.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="concat_to_int&#39;vc.0.3.0.0" proved="true">
     <proof prover="7"><result status="valid" time="1.10" steps="412069"/></proof>
     </goal>
     <goal name="concat_to_int&#39;vc.0.3.0.1" proved="true">
     <proof prover="7"><result status="valid" time="1.11" steps="411913"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="concat_to_int&#39;vc.0.4" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.25" steps="414930"/></proof>
   </goal>
   <goal name="concat_to_int&#39;vc.0.5" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="(ind_isum (fun (k:int) -&gt; getbv bv k * power 2 (length bv - k)) 1
  (length bv + 1))" arg2="(ind_isum
  (fun (k:int) -&gt;
    if 0 &lt;= k /\ k &lt;= length bv then getbv bv k * power 2 (length bv - k)
    else 0)1 (length bv + 1) )">
    <goal name="concat_to_int&#39;vc.0.5.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures">
     <goal name="concat_to_int&#39;vc.0.5.0.0" expl="assertion" proved="true">
     <transf name="apply" proved="true" arg1="ind_isum_eq">
      <goal name="concat_to_int&#39;vc.0.5.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="concat_to_int&#39;vc.0.5.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="concat_to_int&#39;vc.0.5.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.39"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="concat_to_int&#39;vc.0.5.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="ind_isum_eq">
     <goal name="concat_to_int&#39;vc.0.5.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="concat_to_int&#39;vc.0.5.1.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="concat_to_int&#39;vc.0.5.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="0.79" steps="384841"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="concat_to_int&#39;vc.0.6" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="concat_to_int&#39;vc.0.6.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.53" steps="364140"/></proof>
    </goal>
    <goal name="concat_to_int&#39;vc.0.6.1" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.53" steps="364140"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="concat_to_int&#39;vc.0.7" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="concat_to_int&#39;vc.0.7.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.50" steps="364226"/></proof>
    </goal>
    <goal name="concat_to_int&#39;vc.0.7.1" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.52" steps="364226"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="concat_to_int&#39;vc.0.8" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.15" steps="416504"/></proof>
   </goal>
   <goal name="concat_to_int&#39;vc.0.9" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
    <goal name="concat_to_int&#39;vc.0.9.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
     <goal name="concat_to_int&#39;vc.0.9.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(length (concat_l bv i))" arg2="(length bv + 1)">
      <goal name="concat_to_int&#39;vc.0.9.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="ind_isum_plus_one">
       <goal name="concat_to_int&#39;vc.0.9.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="add_eq_inv">
        <goal name="concat_to_int&#39;vc.0.9.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="concat_to_int&#39;vc.0.9.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.45"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="concat_to_int&#39;vc.0.9.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="goal_comm">
         <goal name="concat_to_int&#39;vc.0.9.0.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="ind_isum_transl_plus_one">
          <goal name="concat_to_int&#39;vc.0.9.0.0.0.0.1.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="ind_isum_eq">
           <goal name="concat_to_int&#39;vc.0.9.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="concat_to_int&#39;vc.0.9.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="concat_to_int&#39;vc.0.9.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="0.38"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="concat_to_int&#39;vc.0.9.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="1.17" steps="418178"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="concat_to_int&#39;vc.0.9.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="7"><result status="valid" time="0.45" steps="364536"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bounded_to_int&#39;vc" expl="VC for bounded_to_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bounded_to_int&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.78" steps="308703"/></proof>
  </goal>
  <goal name="bounded_to_int&#39;vc.1" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.78" steps="308745"/></proof>
  </goal>
  <goal name="bounded_to_int&#39;vc.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bounded_to_int&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.42" steps="298430"/></proof>
   </goal>
   <goal name="bounded_to_int&#39;vc.2.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.44" steps="298430"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="bounded_to_int&#39;vc.3" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.88" steps="342056"/></proof>
  </goal>
  <goal name="bounded_to_int&#39;vc.4" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bounded_to_int&#39;vc.4.0" expl="variant decrease" proved="true">
   <proof prover="7"><result status="valid" time="0.89" steps="342148"/></proof>
   </goal>
   <goal name="bounded_to_int&#39;vc.4.1" expl="variant decrease" proved="true">
   <proof prover="7"><result status="valid" time="0.68" steps="317005"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="bounded_to_int&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.91" steps="343067"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="int_to_bv_to_int_value&#39;vc" expl="VC for int_to_bv_to_int_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_to_bv_to_int_value&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_if" proved="true" >
   <goal name="int_to_bv_to_int_value&#39;vc.0.0" expl="VC for int_to_bv_to_int_value" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="int_to_bv_to_int_value&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="0.90" steps="345365"/></proof>
    </goal>
    <goal name="int_to_bv_to_int_value&#39;vc.0.0.1" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="3.74" steps="1535394"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="int_to_bv_to_int_gen&#39;vc" expl="VC for int_to_bv_to_int_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_to_bv_to_int_gen&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.37" steps="270802"/></proof>
  </goal>
  <goal name="int_to_bv_to_int_gen&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.61" steps="288677"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_int_mod&#39;vc" expl="VC for bv_to_int_mod" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="bv_to_int_mod&#39;vc.0" expl="VC for bv_to_int_mod" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bv_to_int_mod&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
    <goal name="bv_to_int_mod&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="mod_ind_isum">
     <goal name="bv_to_int_mod&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="7"><result status="valid" time="0.94" steps="342957"/></proof>
     </goal>
     <goal name="bv_to_int_mod&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="bv_to_int_mod&#39;vc.0.0.0.1.0" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.61" steps="288814"/></proof>
      </goal>
      <goal name="bv_to_int_mod&#39;vc.0.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.37" steps="270950"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="bv_to_int_mod&#39;vc.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.71" steps="317382"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_int_mod_rev&#39;vc" expl="VC for bv_to_int_mod_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_to_int_mod_rev&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bv_to_int_mod_rev&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.37" steps="271235"/></proof>
   </goal>
   <goal name="bv_to_int_mod_rev&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.37" steps="271250"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="bv_to_int_mod_rev&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.81" steps="345116"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_int_mod_gen&#39;vc" expl="VC for bv_to_int_mod_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_to_int_mod_gen&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="bv_to_int_mod">
   <goal name="bv_to_int_mod_gen&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="bv_to_int_mod_gen&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="7"><result status="valid" time="0.36" steps="271557"/></proof>
    </goal>
    <goal name="bv_to_int_mod_gen&#39;vc.0.0.1" expl="apply premises" proved="true">
    <proof prover="7"><result status="valid" time="0.57" steps="289470"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="to_int_head_tail&#39;vc" expl="VC for to_int_head_tail" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="to_int_head_tail&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.36" steps="271995"/></proof>
  </goal>
  <goal name="to_int_head_tail&#39;vc.1" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.37" steps="272028"/></proof>
  </goal>
  <goal name="to_int_head_tail&#39;vc.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="to_int_head_tail&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.43" steps="299723"/></proof>
   </goal>
   <goal name="to_int_head_tail&#39;vc.2.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.43" steps="299723"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="to_int_head_tail&#39;vc.3" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.43" steps="299770"/></proof>
  </goal>
  <goal name="to_int_head_tail&#39;vc.4" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.44" steps="299954"/></proof>
  </goal>
  <goal name="to_int_head_tail&#39;vc.5" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.91" steps="346790"/></proof>
  </goal>
  <goal name="to_int_head_tail&#39;vc.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.33"/></proof>
  </goal>
  <goal name="to_int_head_tail&#39;vc.7" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="to_int_head_tail&#39;vc.7.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.44" steps="300118"/></proof>
   </goal>
   <goal name="to_int_head_tail&#39;vc.7.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.97" steps="347006"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="to_int_head_tail&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.31"/></proof>
  </goal>
  <goal name="to_int_head_tail&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.42" steps="300156"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="my_map&#39;vc" expl="VC for my_map" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="my_map&#39;vc.0" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="my_map&#39;vc.0.0" expl="variant decrease" proved="true">
   <proof prover="7"><result status="valid" time="0.88" steps="344385"/></proof>
   </goal>
   <goal name="my_map&#39;vc.0.1" expl="variant decrease" proved="true">
   <proof prover="7"><result status="valid" time="0.96" steps="348219"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="my_map&#39;vc.1" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal">
   <goal name="my_map&#39;vc.1.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="my_map&#39;vc.1.0.0" expl="apply premises" proved="true">
    <proof prover="7"><result status="valid" time="0.85" steps="414616"/></proof>
    </goal>
    <goal name="my_map&#39;vc.1.0.1" expl="apply premises" proved="true">
    <proof prover="7"><result status="valid" time="1.33" steps="440306"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="my_map&#39;vc.1.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="my_map&#39;vc.1.1.0" expl="apply premises" proved="true">
    <proof prover="7"><result status="valid" time="1.17" steps="437957"/></proof>
    </goal>
    <goal name="my_map&#39;vc.1.1.1" expl="apply premises" proved="true">
    <proof prover="7"><result status="valid" time="1.26" steps="440485"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="my_map_to_map&#39;vc" expl="VC for my_map_to_map" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="my_map_to_map&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.70" steps="316215"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="map_to_my_map&#39;vc" expl="VC for map_to_my_map" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="map_to_my_map&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.71" steps="316331"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mapz_pre&#39;vc" expl="VC for mapz_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mapz_pre&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.47" steps="330952"/></proof>
  </goal>
  <goal name="mapz_pre&#39;vc.1" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="mapz_pre&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="mapz_pre&#39;vc.1.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="my_map&#39;spec">
     <goal name="mapz_pre&#39;vc.1.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="set_map_mem">
      <goal name="mapz_pre&#39;vc.1.0.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_in_goal" proved="true" >
       <goal name="mapz_pre&#39;vc.1.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="exists" proved="true" arg1="( make_bv (fun (i:int) -&gt; 0) (n-1))">
        <goal name="mapz_pre&#39;vc.1.0.0.0.0.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mapz_pre&#39;vc.1.0.0.0.0.0.0.0" proved="true">
         <proof prover="7"><result status="valid" time="1.48" steps="492550"/></proof>
         </goal>
         <goal name="mapz_pre&#39;vc.1.0.0.0.0.0.0.1" proved="true">
         <transf name="rewrite" proved="true" arg1="concat_l&#39;def">
          <goal name="mapz_pre&#39;vc.1.0.0.0.0.0.0.1.0" proved="true">
          <transf name="apply" proved="true" arg1="set_equal_bv">
           <goal name="mapz_pre&#39;vc.1.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="make_bv_length">
            <goal name="mapz_pre&#39;vc.1.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="make_bv_length">
             <goal name="mapz_pre&#39;vc.1.0.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="make_bv_length">
              <goal name="mapz_pre&#39;vc.1.0.0.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="7"><result status="valid" time="0.48" steps="355367"/></proof>
              </goal>
              <goal name="mapz_pre&#39;vc.1.0.0.0.0.0.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="7"><result status="valid" time="0.89" steps="408795"/></proof>
              </goal>
              <goal name="mapz_pre&#39;vc.1.0.0.0.0.0.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="7"><result status="valid" time="0.45" steps="355360"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="mapz_pre&#39;vc.1.0.0.0.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="mapz_pre&#39;vc.1.0.0.0.0.0.0.1.0.0.0.1.0" expl="rewrite premises" proved="true">
              <proof prover="7"><result status="valid" time="1.50" steps="497055"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="mapz_pre&#39;vc.1.0.0.0.0.0.0.1.0.0.0.2" expl="rewrite premises" proved="true">
             <proof prover="7"><result status="valid" time="1.24" steps="433750"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="mapz_pre&#39;vc.1.0.0.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="7"><result status="valid" time="0.88" steps="408796"/></proof>
            </goal>
            <goal name="mapz_pre&#39;vc.1.0.0.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="7"><result status="valid" time="0.88" steps="376819"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="mapz_pre&#39;vc.1.0.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="mapz_pre&#39;vc.1.0.0.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
             <goal name="mapz_pre&#39;vc.1.0.0.0.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
              <goal name="mapz_pre&#39;vc.1.0.0.0.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="mapz_pre&#39;vc.1.0.0.0.0.0.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="7"><result status="valid" time="1.50" steps="496571"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="mapz_pre&#39;vc.1.0.0.0.0.0.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="7"><result status="valid" time="3.14" steps="907966"/></proof>
              </goal>
              <goal name="mapz_pre&#39;vc.1.0.0.0.0.0.0.1.0.1.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="7"><result status="valid" time="1.52" steps="499764"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="mapz_pre&#39;vc.1.0.0.0.0.0.0.1.0.1.0.1" expl="rewrite premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="mapz_pre&#39;vc.1.0.0.0.0.0.0.1.0.1.0.1.0" expl="rewrite premises" proved="true">
              <proof prover="7"><result status="valid" time="0.88" steps="408711"/></proof>
              </goal>
              <goal name="mapz_pre&#39;vc.1.0.0.0.0.0.0.1.0.1.0.1.1" expl="rewrite premises" proved="true">
              <proof prover="7"><result status="valid" time="0.84" steps="408705"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="mapz_pre&#39;vc.1.0.0.0.0.0.0.1.0.1.0.2" expl="rewrite premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="mapz_pre&#39;vc.1.0.0.0.0.0.0.1.0.1.0.2.0" expl="rewrite premises" proved="true">
              <proof prover="7"><result status="valid" time="0.47" steps="386382"/></proof>
              </goal>
              <goal name="mapz_pre&#39;vc.1.0.0.0.0.0.0.1.0.1.0.2.1" expl="rewrite premises" proved="true">
              <proof prover="7"><result status="valid" time="1.46" steps="494020"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="mapz_pre&#39;vc.1.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="0.50" steps="355374"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mapz_pre&#39;vc.2" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(exists f. mem f s /\ e = concat_l f 0)">
   <goal name="mapz_pre&#39;vc.2.0" expl="asserted formula" proved="true">
   <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (bv:bitvec) -&gt; concat_l bv 0),s,e">
    <goal name="mapz_pre&#39;vc.2.0.0" expl="asserted formula" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="mapz_pre&#39;vc.2.0.0.0" expl="destruct premise" proved="true">
     <proof prover="7"><result status="valid" time="1.21" steps="433398"/></proof>
     </goal>
     <goal name="mapz_pre&#39;vc.2.0.0.1" expl="asserted formula" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="mapz_pre&#39;vc.2.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="exists" proved="true" arg1="a">
       <goal name="mapz_pre&#39;vc.2.0.0.1.0.0" proved="true">
       <proof prover="7"><result status="valid" time="1.00" steps="406953"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mapz_pre&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="1.22" steps="435172"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mapz_pre&#39;vc.3" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (bv:bitvec) -&gt; concat_l bv 0),s,e">
   <goal name="mapz_pre&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="Hinst">
    <goal name="mapz_pre&#39;vc.3.0.0" expl="destruct premise" proved="true">
    <proof prover="7"><result status="valid" time="1.29" steps="433520"/></proof>
    </goal>
    <goal name="mapz_pre&#39;vc.3.0.1" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="mapz_pre&#39;vc.3.0.1.0" expl="postcondition" proved="true">
     <transf name="exists" proved="true" arg1="a">
      <goal name="mapz_pre&#39;vc.3.0.1.0.0" proved="true">
      <proof prover="7"><result status="valid" time="0.93" steps="407027"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mapz_pre&#39;vc.4" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(exists bv:bitvec. mem bv s /\ e = concat_l bv 0)">
   <goal name="mapz_pre&#39;vc.4.0" expl="asserted formula" proved="true">
   <proof prover="7"><result status="valid" time="1.19" steps="433128"/></proof>
   </goal>
   <goal name="mapz_pre&#39;vc.4.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="1.40" steps="22967"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mapz_pre&#39;vc.5" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures4">
   <goal name="mapz_pre&#39;vc.5.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_map_mem">
    <goal name="mapz_pre&#39;vc.5.0.0" expl="apply premises" proved="true">
    <transf name="exists" proved="true" arg1="(make_bv (fun i -&gt; getbv e (i+1)) (n-1))">
     <goal name="mapz_pre&#39;vc.5.0.0.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mapz_pre&#39;vc.5.0.0.0.0" proved="true">
      <transf name="assert" proved="true" arg1="(length (make_bv (fun (i:int) -&gt; getbv e @ (i + 1)) (n - 1)) = n-1)">
       <goal name="mapz_pre&#39;vc.5.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="rewrite" proved="true" arg1="make_bv_length">
        <goal name="mapz_pre&#39;vc.5.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="7"><result status="valid" time="0.52" steps="385673"/></proof>
        </goal>
        <goal name="mapz_pre&#39;vc.5.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="3.24" steps="893238"/></proof>
        </goal>
        <goal name="mapz_pre&#39;vc.5.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="0.54" steps="385682"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="mapz_pre&#39;vc.5.0.0.0.0.1" proved="true">
       <proof prover="7"><result status="valid" time="3.49" steps="963709"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="mapz_pre&#39;vc.5.0.0.0.1" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="mapz_pre&#39;vc.5.0.0.0.1.0" proved="true">
       <transf name="apply" proved="true" arg1="set_equal_bv">
        <goal name="mapz_pre&#39;vc.5.0.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="mapz_pre&#39;vc.5.0.0.0.1.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="concat_l&#39;spec2">
          <goal name="mapz_pre&#39;vc.5.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="make_bv_length">
           <goal name="mapz_pre&#39;vc.5.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="0.60" steps="439406"/></proof>
           </goal>
           <goal name="mapz_pre&#39;vc.5.0.0.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="7"><result status="valid" time="3.50" steps="925573"/></proof>
           </goal>
           <goal name="mapz_pre&#39;vc.5.0.0.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="7"><result status="valid" time="0.65" steps="439399"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="mapz_pre&#39;vc.5.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="0.61" steps="439418"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="mapz_pre&#39;vc.5.0.0.0.1.0.1" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="concat_l_value">
         <goal name="mapz_pre&#39;vc.5.0.0.0.1.0.1.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="mapz_pre&#39;vc.5.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="make_bv_length">
           <goal name="mapz_pre&#39;vc.5.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
           <transf name="eliminate_if" proved="true" >
            <goal name="mapz_pre&#39;vc.5.0.0.0.1.0.1.0.0.0.0" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="mapz_pre&#39;vc.5.0.0.0.1.0.1.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="7"><result status="valid" time="0.63" steps="395428"/></proof>
             </goal>
             <goal name="mapz_pre&#39;vc.5.0.0.0.1.0.1.0.0.0.0.1" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
              <goal name="mapz_pre&#39;vc.5.0.0.0.1.0.1.0.0.0.0.1.0" expl="apply premises" proved="true">
              <proof prover="7"><result status="valid" time="1.31" steps="438607"/></proof>
              </goal>
              <goal name="mapz_pre&#39;vc.5.0.0.0.1.0.1.0.0.0.0.1.1" expl="rewrite premises" proved="true">
              <proof prover="7"><result status="valid" time="4.82" steps="1759235"/></proof>
              </goal>
              <goal name="mapz_pre&#39;vc.5.0.0.0.1.0.1.0.0.0.0.1.2" expl="rewrite premises" proved="true">
              <proof prover="7"><result status="valid" time="0.95" steps="410555"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="mapz_pre&#39;vc.5.0.0.0.1.0.1.0.0.0.0.2" expl="apply premises" proved="true">
             <proof prover="7"><result status="valid" time="1.02" steps="410610"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="mapz_pre&#39;vc.5.0.0.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="mapz_pre&#39;vc.5.0.0.0.1.0.1.0.0.1.0" expl="rewrite premises" proved="true">
            <proof prover="7"><result status="valid" time="3.18" steps="892133"/></proof>
            </goal>
            <goal name="mapz_pre&#39;vc.5.0.0.0.1.0.1.0.0.1.1" expl="rewrite premises" proved="true">
            <proof prover="7"><result status="valid" time="3.36" steps="892118"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="mapz_pre&#39;vc.5.0.0.0.1.0.1.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="7"><result status="valid" time="0.56" steps="385707"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="mapz_pre&#39;vc.5.0.0.0.1.0.1.1" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="mapz_pre&#39;vc.5.0.0.0.1.0.1.1.0" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="0.54" steps="385682"/></proof>
          </goal>
          <goal name="mapz_pre&#39;vc.5.0.0.0.1.0.1.1.1" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="0.52" steps="385684"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mapo_pre&#39;vc" expl="VC for mapo_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mapo_pre&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.55" steps="331833"/></proof>
  </goal>
  <goal name="mapo_pre&#39;vc.1" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="mapo_pre&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="mapo_pre&#39;vc.1.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="my_map&#39;spec">
     <goal name="mapo_pre&#39;vc.1.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="set_map_mem">
      <goal name="mapo_pre&#39;vc.1.0.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_in_goal" proved="true" >
       <goal name="mapo_pre&#39;vc.1.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="exists" proved="true" arg1="( make_bv (fun (i:int) -&gt; 1) (n-1))">
        <goal name="mapo_pre&#39;vc.1.0.0.0.0.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mapo_pre&#39;vc.1.0.0.0.0.0.0.0" proved="true">
         <proof prover="7"><result status="valid" time="1.61" steps="493329"/></proof>
         </goal>
         <goal name="mapo_pre&#39;vc.1.0.0.0.0.0.0.1" proved="true">
         <transf name="rewrite" proved="true" arg1="concat_l&#39;def">
          <goal name="mapo_pre&#39;vc.1.0.0.0.0.0.0.1.0" proved="true">
          <transf name="apply" proved="true" arg1="set_equal_bv">
           <goal name="mapo_pre&#39;vc.1.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="make_bv_length">
            <goal name="mapo_pre&#39;vc.1.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="make_bv_length">
             <goal name="mapo_pre&#39;vc.1.0.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="make_bv_length">
              <goal name="mapo_pre&#39;vc.1.0.0.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="7"><result status="valid" time="0.49" steps="356216"/></proof>
              </goal>
              <goal name="mapo_pre&#39;vc.1.0.0.0.0.0.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="mapo_pre&#39;vc.1.0.0.0.0.0.0.1.0.0.0.0.1.0" expl="rewrite premises" proved="true">
               <proof prover="7"><result status="valid" time="1.03" steps="409445"/></proof>
               </goal>
               <goal name="mapo_pre&#39;vc.1.0.0.0.0.0.0.1.0.0.0.0.1.1" expl="rewrite premises" proved="true">
               <proof prover="7"><result status="valid" time="0.99" steps="409439"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="mapo_pre&#39;vc.1.0.0.0.0.0.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="7"><result status="valid" time="0.52" steps="356209"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="mapo_pre&#39;vc.1.0.0.0.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="mapo_pre&#39;vc.1.0.0.0.0.0.0.1.0.0.0.1.0" expl="rewrite premises" proved="true">
              <proof prover="7"><result status="valid" time="1.55" steps="497306"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="mapo_pre&#39;vc.1.0.0.0.0.0.0.1.0.0.0.2" expl="rewrite premises" proved="true">
             <proof prover="7"><result status="valid" time="1.26" steps="434588"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="mapo_pre&#39;vc.1.0.0.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="7"><result status="valid" time="1.05" steps="409620"/></proof>
            </goal>
            <goal name="mapo_pre&#39;vc.1.0.0.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="7"><result status="valid" time="0.86" steps="377505"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="mapo_pre&#39;vc.1.0.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="mapo_pre&#39;vc.1.0.0.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
             <goal name="mapo_pre&#39;vc.1.0.0.0.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
              <goal name="mapo_pre&#39;vc.1.0.0.0.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="mapo_pre&#39;vc.1.0.0.0.0.0.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="assert_make_bv">
                <goal name="mapo_pre&#39;vc.1.0.0.0.0.0.0.1.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="7"><result status="valid" time="1.48" steps="494855"/></proof>
                </goal>
                <goal name="mapo_pre&#39;vc.1.0.0.0.0.0.0.1.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="7"><result status="valid" time="1.05" steps="409721"/></proof>
                </goal>
                <goal name="mapo_pre&#39;vc.1.0.0.0.0.0.0.1.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
                <proof prover="7"><result status="valid" time="0.56" steps="387176"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="mapo_pre&#39;vc.1.0.0.0.0.0.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="7"><result status="valid" time="3.25" steps="907661"/></proof>
              </goal>
              <goal name="mapo_pre&#39;vc.1.0.0.0.0.0.0.1.0.1.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="7"><result status="valid" time="1.51" steps="500178"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="mapo_pre&#39;vc.1.0.0.0.0.0.0.1.0.1.0.1" expl="rewrite premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="mapo_pre&#39;vc.1.0.0.0.0.0.0.1.0.1.0.1.0" expl="rewrite premises" proved="true">
              <proof prover="7"><result status="valid" time="1.00" steps="409544"/></proof>
              </goal>
              <goal name="mapo_pre&#39;vc.1.0.0.0.0.0.0.1.0.1.0.1.1" expl="rewrite premises" proved="true">
              <proof prover="7"><result status="valid" time="0.80" steps="409538"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="mapo_pre&#39;vc.1.0.0.0.0.0.0.1.0.1.0.2" expl="rewrite premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="mapo_pre&#39;vc.1.0.0.0.0.0.0.1.0.1.0.2.0" expl="rewrite premises" proved="true">
              <proof prover="7"><result status="valid" time="0.56" steps="387169"/></proof>
              </goal>
              <goal name="mapo_pre&#39;vc.1.0.0.0.0.0.0.1.0.1.0.2.1" expl="rewrite premises" proved="true">
              <proof prover="7"><result status="valid" time="1.48" steps="494501"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="mapo_pre&#39;vc.1.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="0.52" steps="356223"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mapo_pre&#39;vc.2" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(exists f. mem f s /\ e = concat_l f 1)">
   <goal name="mapo_pre&#39;vc.2.0" expl="asserted formula" proved="true">
   <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (bv:bitvec) -&gt; concat_l bv 1),s,e">
    <goal name="mapo_pre&#39;vc.2.0.0" expl="asserted formula" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="mapo_pre&#39;vc.2.0.0.0" expl="destruct premise" proved="true">
     <proof prover="7"><result status="valid" time="1.22" steps="434236"/></proof>
     </goal>
     <goal name="mapo_pre&#39;vc.2.0.0.1" expl="asserted formula" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="mapo_pre&#39;vc.2.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="exists" proved="true" arg1="a">
       <goal name="mapo_pre&#39;vc.2.0.0.1.0.0" proved="true">
       <proof prover="7"><result status="valid" time="0.79" steps="407786"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mapo_pre&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="1.23" steps="435990"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mapo_pre&#39;vc.3" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (bv:bitvec) -&gt; concat_l bv 1),s,e">
   <goal name="mapo_pre&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="Hinst">
    <goal name="mapo_pre&#39;vc.3.0.0" expl="destruct premise" proved="true">
    <proof prover="7"><result status="valid" time="1.13" steps="434358"/></proof>
    </goal>
    <goal name="mapo_pre&#39;vc.3.0.1" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="mapo_pre&#39;vc.3.0.1.0" expl="postcondition" proved="true">
     <transf name="exists" proved="true" arg1="a">
      <goal name="mapo_pre&#39;vc.3.0.1.0.0" proved="true">
      <proof prover="7"><result status="valid" time="0.97" steps="407860"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mapo_pre&#39;vc.4" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(exists bv:bitvec. mem bv s /\ e = concat_l bv 1)">
   <goal name="mapo_pre&#39;vc.4.0" expl="asserted formula" proved="true">
   <proof prover="7"><result status="valid" time="1.22" steps="433966"/></proof>
   </goal>
   <goal name="mapo_pre&#39;vc.4.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="1.55" steps="22969"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mapo_pre&#39;vc.5" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures4">
   <goal name="mapo_pre&#39;vc.5.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_map_mem">
    <goal name="mapo_pre&#39;vc.5.0.0" expl="apply premises" proved="true">
    <transf name="exists" proved="true" arg1="(make_bv (fun i -&gt; getbv e (i+1)) (n-1))">
     <goal name="mapo_pre&#39;vc.5.0.0.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mapo_pre&#39;vc.5.0.0.0.0" proved="true">
      <transf name="assert" proved="true" arg1="(length (make_bv (fun (i:int) -&gt; getbv e @ (i + 1)) (n - 1)) = n-1)">
       <goal name="mapo_pre&#39;vc.5.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="rewrite" proved="true" arg1="make_bv_length">
        <goal name="mapo_pre&#39;vc.5.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="7"><result status="valid" time="0.55" steps="386460"/></proof>
        </goal>
        <goal name="mapo_pre&#39;vc.5.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="3.18" steps="896351"/></proof>
        </goal>
        <goal name="mapo_pre&#39;vc.5.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="0.50" steps="386469"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="mapo_pre&#39;vc.5.0.0.0.0.1" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="mapo_pre&#39;vc.5.0.0.0.0.1.0" proved="true">
        <transf name="apply" proved="true" arg1="Requires">
         <goal name="mapo_pre&#39;vc.5.0.0.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="make_bv_length">
          <goal name="mapo_pre&#39;vc.5.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="0.62" steps="440815"/></proof>
          </goal>
          <goal name="mapo_pre&#39;vc.5.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="3.62" steps="949684"/></proof>
          </goal>
          <goal name="mapo_pre&#39;vc.5.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="0.65" steps="440824"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="mapo_pre&#39;vc.5.0.0.0.1" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="mapo_pre&#39;vc.5.0.0.0.1.0" proved="true">
       <transf name="apply" proved="true" arg1="set_equal_bv">
        <goal name="mapo_pre&#39;vc.5.0.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="mapo_pre&#39;vc.5.0.0.0.1.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="concat_l&#39;spec2">
          <goal name="mapo_pre&#39;vc.5.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="make_bv_length">
           <goal name="mapo_pre&#39;vc.5.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="0.63" steps="440765"/></proof>
           </goal>
           <goal name="mapo_pre&#39;vc.5.0.0.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="7"><result status="valid" time="3.69" steps="927914"/></proof>
           </goal>
           <goal name="mapo_pre&#39;vc.5.0.0.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="7"><result status="valid" time="0.63" steps="440758"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="mapo_pre&#39;vc.5.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="0.80" steps="440777"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="mapo_pre&#39;vc.5.0.0.0.1.0.1" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="concat_l_value">
         <goal name="mapo_pre&#39;vc.5.0.0.0.1.0.1.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="mapo_pre&#39;vc.5.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="make_bv_length">
           <goal name="mapo_pre&#39;vc.5.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
           <transf name="eliminate_if" proved="true" >
            <goal name="mapo_pre&#39;vc.5.0.0.0.1.0.1.0.0.0.0" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="mapo_pre&#39;vc.5.0.0.0.1.0.1.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="7"><result status="valid" time="0.60" steps="396215"/></proof>
             </goal>
             <goal name="mapo_pre&#39;vc.5.0.0.0.1.0.1.0.0.0.0.1" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
              <goal name="mapo_pre&#39;vc.5.0.0.0.1.0.1.0.0.0.0.1.0" expl="apply premises" proved="true">
              <proof prover="7"><result status="valid" time="1.32" steps="439450"/></proof>
              </goal>
              <goal name="mapo_pre&#39;vc.5.0.0.0.1.0.1.0.0.0.0.1.1" expl="rewrite premises" proved="true">
              <proof prover="7"><result status="valid" time="4.82" steps="1761452"/></proof>
              </goal>
              <goal name="mapo_pre&#39;vc.5.0.0.0.1.0.1.0.0.0.0.1.2" expl="rewrite premises" proved="true">
              <proof prover="7"><result status="valid" time="0.92" steps="411388"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="mapo_pre&#39;vc.5.0.0.0.1.0.1.0.0.0.0.2" expl="apply premises" proved="true">
             <proof prover="7"><result status="valid" time="0.93" steps="411443"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="mapo_pre&#39;vc.5.0.0.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="7"><result status="valid" time="3.26" steps="896064"/></proof>
           </goal>
           <goal name="mapo_pre&#39;vc.5.0.0.0.1.0.1.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="7"><result status="valid" time="0.52" steps="386494"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="mapo_pre&#39;vc.5.0.0.0.1.0.1.1" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="mapo_pre&#39;vc.5.0.0.0.1.0.1.1.0" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="0.54" steps="386469"/></proof>
          </goal>
          <goal name="mapo_pre&#39;vc.5.0.0.0.1.0.1.1.1" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="0.53" steps="386471"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="n_bvs&#39;vc" expl="VC for n_bvs" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="n_bvs&#39;vc.0" expl="VC for n_bvs" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="n_bvs&#39;vc.0.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="n_bvs&#39;vc.0.0.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.37" steps="302598"/></proof>
    </goal>
    <goal name="n_bvs&#39;vc.0.0.1" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.37" steps="302600"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="n_bvs&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.36" steps="302683"/></proof>
   </goal>
   <goal name="n_bvs&#39;vc.0.2" expl="variant decrease" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="n_bvs&#39;vc.0.2.0" expl="variant decrease" proved="true">
    <proof prover="7"><result status="valid" time="0.32" steps="274936"/></proof>
    </goal>
    <goal name="n_bvs&#39;vc.0.2.1" expl="variant decrease" proved="true">
    <proof prover="7"><result status="valid" time="0.32" steps="274952"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="n_bvs&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.66" steps="293089"/></proof>
   </goal>
   <goal name="n_bvs&#39;vc.0.4" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="1.09" steps="391140"/></proof>
   </goal>
   <goal name="n_bvs&#39;vc.0.5" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="n_bvs&#39;vc.0.5.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.73" steps="367717"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="n_bvs&#39;vc.0.6" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.99" steps="391210"/></proof>
   </goal>
   <goal name="n_bvs&#39;vc.0.7" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.99" steps="398308"/></proof>
   </goal>
   <goal name="n_bvs&#39;vc.0.8" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="Ensures3" arg2="e">
    <goal name="n_bvs&#39;vc.0.8.0" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="n_bvs&#39;vc.0.8.0.0" expl="destruct premise" proved="true">
     <proof prover="7"><result status="valid" time="0.61" steps="376850"/></proof>
     </goal>
     <goal name="n_bvs&#39;vc.0.8.0.1" expl="postcondition" proved="true">
     <proof prover="7"><result status="valid" time="0.96" steps="398070"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="n_bvs&#39;vc.0.9" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.99" steps="398489"/></proof>
   </goal>
   <goal name="n_bvs&#39;vc.0.10" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.95" steps="398865"/></proof>
   </goal>
   <goal name="n_bvs&#39;vc.0.11" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.90" steps="398257"/></proof>
   </goal>
   <goal name="n_bvs&#39;vc.0.12" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.18" steps="426084"/></proof>
   </goal>
   <goal name="n_bvs&#39;vc.0.13" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="1.01" steps="398965"/></proof>
   </goal>
   <goal name="n_bvs&#39;vc.0.14" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="1.21" steps="426165"/></proof>
   </goal>
   <goal name="n_bvs&#39;vc.0.15" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.97" steps="399175"/></proof>
   </goal>
   <goal name="n_bvs&#39;vc.0.16" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.98" steps="399766"/></proof>
   </goal>
   <goal name="n_bvs&#39;vc.0.17" expl="assertion" proved="true">
   <proof prover="7"><result status="valid" time="1.29" steps="427579"/></proof>
   </goal>
   <goal name="n_bvs&#39;vc.0.18" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="H2">
    <goal name="n_bvs&#39;vc.0.18.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="n_bvs&#39;vc.0.18.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="s" arg2="res">
      <goal name="n_bvs&#39;vc.0.18.0.0.0" expl="postcondition" proved="true">
      <proof prover="7"><result status="valid" time="0.74" steps="439197"/></proof>
      </goal>
      <goal name="n_bvs&#39;vc.0.18.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="7"><result status="valid" time="0.60" steps="438137"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="n_bvs&#39;vc.0.18.1" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="n_bvs&#39;vc.0.18.1.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="s" arg2="res">
      <goal name="n_bvs&#39;vc.0.18.1.0.0" expl="postcondition" proved="true">
      <proof prover="7"><result status="valid" time="0.66" steps="431768"/></proof>
      </goal>
      <goal name="n_bvs&#39;vc.0.18.1.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="set_equal">
       <goal name="n_bvs&#39;vc.0.18.1.0.1.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="n_bvs&#39;vc.0.18.1.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="1.46" steps="481882"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="n_bvs&#39;vc.0.18.1.0.1.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="n_bvs&#39;vc.0.18.1.0.1.1.0" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="1.33" steps="481873"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="n_bvs&#39;vc.0.19" expl="postcondition" proved="true">
   <transf name="induction_arg_pr" proved="true" arg1="H1">
    <goal name="n_bvs&#39;vc.0.19.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="n_bvs&#39;vc.0.19.0.0" expl="postcondition" proved="true">
     <proof prover="7"><result status="valid" time="1.03" steps="401994"/></proof>
     </goal>
     <goal name="n_bvs&#39;vc.0.19.0.1" expl="postcondition" proved="true">
     <proof prover="7"><result status="valid" time="1.29" steps="428099"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="n_bvs&#39;vc.0.20" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="n_bvs&#39;vc.0.20.0" expl="postcondition" proved="true">
    <transf name="induction_arg_pr" proved="true" arg1="H1">
     <goal name="n_bvs&#39;vc.0.20.0.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="n_bvs&#39;vc.0.20.0.0.0" expl="postcondition" proved="true">
      <proof prover="7"><result status="valid" time="1.05" steps="400037"/></proof>
      </goal>
      <goal name="n_bvs&#39;vc.0.20.0.0.1" expl="postcondition" proved="true">
      <proof prover="7"><result status="valid" time="1.01" steps="399654"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="n_bvs&#39;vc.0.20.1" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="1.82" steps="586592"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="n_bvs&#39;vc.0.21" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(mem (make_bv (fun _ -&gt; 0) n) result)">
    <goal name="n_bvs&#39;vc.0.21.0" expl="asserted formula" proved="true">
    <proof prover="7"><result status="valid" time="2.13" steps="708038"/></proof>
    </goal>
    <goal name="n_bvs&#39;vc.0.21.1" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="1.35" steps="432118"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="in_n_bvs&#39;vc" expl="VC for in_n_bvs" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="in_n_bvs&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.36"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_in_n_bvs&#39;vc" expl="VC for get_in_n_bvs" proved="true">
 <proof prover="0"><result status="valid" time="0.34"/></proof>
 </goal>
 <goal name="mapz&#39;vc" expl="VC for mapz" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mapz&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.45" steps="275647"/></proof>
  </goal>
  <goal name="mapz&#39;vc.1" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.41" steps="347646"/></proof>
  </goal>
  <goal name="mapz&#39;vc.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mapz&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.19" steps="391758"/></proof>
   </goal>
   <goal name="mapz&#39;vc.2.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.97" steps="368804"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mapz&#39;vc.3" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="mapz&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="mapz&#39;vc.3.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="mapz_pre&#39;def">
     <goal name="mapz&#39;vc.3.0.0.0" expl="postcondition" proved="true">
     <proof prover="7"><result status="valid" time="1.27" steps="449996"/></proof>
     </goal>
     <goal name="mapz&#39;vc.3.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.64" steps="378501"/></proof>
     </goal>
     <goal name="mapz&#39;vc.3.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.91" steps="399633"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mapz&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.41" steps="448576"/></proof>
  </goal>
  <goal name="mapz&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.01" steps="422184"/></proof>
  </goal>
  <goal name="mapz&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.28" steps="449152"/></proof>
  </goal>
  <goal name="mapz&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.03" steps="422344"/></proof>
  </goal>
  <goal name="mapz&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.05" steps="423931"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mapo&#39;vc" expl="VC for mapo" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mapo&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.29" steps="276479"/></proof>
  </goal>
  <goal name="mapo&#39;vc.1" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.52" steps="348423"/></proof>
  </goal>
  <goal name="mapo&#39;vc.2" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="1.05" steps="392599"/></proof>
  </goal>
  <goal name="mapo&#39;vc.3" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="mapo&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="mapo&#39;vc.3.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="mapo_pre&#39;def">
     <goal name="mapo&#39;vc.3.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
     <goal name="mapo&#39;vc.3.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.57" steps="379230"/></proof>
     </goal>
     <goal name="mapo&#39;vc.3.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.94" steps="400408"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mapo&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.22" steps="449305"/></proof>
  </goal>
  <goal name="mapo&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.97" steps="423952"/></proof>
  </goal>
  <goal name="mapo&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.27" steps="450961"/></proof>
  </goal>
  <goal name="mapo&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.03" steps="424141"/></proof>
  </goal>
  <goal name="mapo&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.06" steps="424558"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="n_bvs_node&#39;vc" expl="VC for n_bvs_node" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="n_bvs_node&#39;vc.0" expl="VC for n_bvs_node" proved="true">
  <proof prover="7"><result status="valid" time="3.92" steps="1071614"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="n_bvsz&#39;vc" expl="VC for n_bvsz" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="n_bvsz&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.31" steps="277418"/></proof>
  </goal>
  <goal name="n_bvsz&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.90" steps="370246"/></proof>
  </goal>
  <goal name="n_bvsz&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="2.99" steps="817876"/></proof>
  </goal>
  <goal name="n_bvsz&#39;vc.3" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal">
   <goal name="n_bvsz&#39;vc.3.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="n_bvsz&#39;vc.3.0.0" expl="apply premises" proved="true">
    <proof prover="7"><result status="valid" time="0.91" steps="403752"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="n_bvsz&#39;vc.3.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="n_bvsz&#39;vc.3.1.0" expl="apply premises" proved="true">
    <proof prover="7"><result status="valid" time="1.15" steps="427921"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="n_bvsz&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.46" steps="486713"/></proof>
  </goal>
  <goal name="n_bvsz&#39;vc.5" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mat_sum_cardone">
   <goal name="n_bvsz&#39;vc.5.0" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="1.09" steps="426949"/></proof>
   </goal>
   <goal name="n_bvsz&#39;vc.5.1" expl="rewrite premises" proved="true">
   <proof prover="7"><result status="valid" time="0.97" steps="403012"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="n_bvso&#39;vc" expl="VC for n_bvso" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="n_bvso&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.46" steps="278020"/></proof>
  </goal>
  <goal name="n_bvso&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.79" steps="370718"/></proof>
  </goal>
  <goal name="n_bvso&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.90" steps="370761"/></proof>
  </goal>
  <goal name="n_bvso&#39;vc.3" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="n_bvso&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="n_bvso&#39;vc.3.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="n_bvso&#39;vc.3.0.0.0" expl="postcondition" proved="true">
     <transf name="instantiate" proved="true" arg1="n_bvs&#39;spec4" arg2="1">
      <goal name="n_bvso&#39;vc.3.0.0.0.0" expl="postcondition" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="n_bvso&#39;vc.3.0.0.0.0.0" expl="destruct premise" proved="true">
       <proof prover="7"><result status="valid" time="0.65" steps="411722"/></proof>
       </goal>
       <goal name="n_bvso&#39;vc.3.0.0.0.0.1" expl="postcondition" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="n_bvso&#39;vc.3.0.0.0.0.1.0" expl="destruct premise" proved="true">
        <proof prover="7"><result status="valid" time="0.65" steps="411715"/></proof>
        </goal>
        <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1" expl="postcondition" proved="true">
        <transf name="instantiate" proved="true" arg1="Hinst" arg2="(n_bvs 0)">
         <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="Hinst">
          <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0" expl="postcondition" proved="true">
          <transf name="apply" proved="true" arg1="set_equal">
           <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
            <transf name="case" proved="true" arg1="(e = (make_bv (fun (_:int) -&gt; 0) 1) )">
             <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.0.0.0" expl="apply premises (true case)" proved="true">
             <transf name="assert" proved="true" arg1="(mem e (mapz_pre 1 (n_bvs 0)) )">
              <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
              <transf name="apply" proved="true" arg1="mapz_pre&#39;spec">
               <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="7"><result status="valid" time="0.55" steps="411977"/></proof>
               </goal>
               <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
               <proof prover="7"><result status="valid" time="3.02" steps="854573"/></proof>
               </goal>
               <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.0.0.0.0.2" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="h">
                <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
                <transf name="apply" proved="true" arg1="make_bv_length">
                 <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
                 <proof prover="7"><result status="valid" time="1.17" steps="472807"/></proof>
                 </goal>
                 <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.0.0.0.0.2.0.1" expl="apply premises" proved="true">
                 <proof prover="7"><result status="valid" time="0.63" steps="411977"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.0.0.0.0.3" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="h">
                <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.0.0.0.0.3.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                 <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
                 <proof prover="7"><result status="valid" time="1.09" steps="472438"/></proof>
                 </goal>
                 <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.0.0.0.0.3.0.1" expl="rewrite premises" proved="true">
                 <proof prover="7"><result status="valid" time="1.12" steps="472807"/></proof>
                 </goal>
                 <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.0.0.0.0.3.0.2" expl="rewrite premises" proved="true">
                 <proof prover="7"><result status="valid" time="0.62" steps="412000"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.0.0.0.1" expl="apply premises (true case)" proved="true">
              <proof prover="7"><result status="valid" time="1.16" steps="474541"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.0.0.1" expl="apply premises (false case)" proved="true">
             <transf name="replace" proved="true" arg1="e" arg2="( make_bv (fun (_:int) -&gt; 1) 1)">
              <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.0.0.1.0" expl="apply premises (false case)" proved="true">
              <proof prover="7"><result status="valid" time="1.85" steps="547806"/></proof>
              </goal>
              <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
              <transf name="apply" proved="true" arg1="set_equal_bv">
               <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.0.0.1.1.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="make_bv_length">
                <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                <proof prover="7"><result status="valid" time="4.26" steps="883294"/></proof>
                </goal>
                <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
                <proof prover="7"><result status="valid" time="1.51" steps="472796"/></proof>
                </goal>
                <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.0.0.1.1.0.2" expl="rewrite premises" proved="true">
                <proof prover="7"><result status="valid" time="0.78" steps="411981"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.0.0.1.1.1" expl="apply premises" proved="true">
               <proof prover="7"><result status="valid" time="4.54" steps="995726"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.1" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.1.0" expl="apply premises" proved="true">
            <transf name="case" proved="true" arg1="(e = (make_bv (fun (_:int) -&gt; 0) 1) )">
             <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.1.0.0" expl="apply premises (true case)" proved="true">
             <transf name="assert" proved="true" arg1="(mem e (mapz_pre 1 (n_bvs 0)) )">
              <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.1.0.0.0" expl="asserted formula" proved="true">
              <transf name="apply" proved="true" arg1="mapz_pre&#39;spec">
               <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.1.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="7"><result status="valid" time="0.67" steps="449953"/></proof>
               </goal>
               <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.1.0.0.0.1" expl="apply premises" proved="true">
               <proof prover="7"><result status="valid" time="3.45" steps="890841"/></proof>
               </goal>
               <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.1.0.0.0.2" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="h">
                <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.1.0.0.0.2.0" expl="apply premises" proved="true">
                <transf name="apply" proved="true" arg1="make_bv_length">
                 <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.1.0.0.0.2.0.0" expl="apply premises" proved="true">
                 <proof prover="7"><result status="valid" time="1.12" steps="473736"/></proof>
                 </goal>
                 <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.1.0.0.0.2.0.1" expl="apply premises" proved="true">
                 <proof prover="7"><result status="valid" time="0.72" steps="449953"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.1.0.0.0.3" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="h">
                <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.1.0.0.0.3.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                 <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.1.0.0.0.3.0.0" expl="apply premises" proved="true">
                 <proof prover="7"><result status="valid" time="1.10" steps="473367"/></proof>
                 </goal>
                 <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.1.0.0.0.3.0.1" expl="rewrite premises" proved="true">
                 <proof prover="7"><result status="valid" time="1.04" steps="473736"/></proof>
                 </goal>
                 <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.1.0.0.0.3.0.2" expl="rewrite premises" proved="true">
                 <proof prover="7"><result status="valid" time="0.61" steps="449976"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.1.0.0.1" expl="apply premises (true case)" proved="true">
              <proof prover="7"><result status="valid" time="1.10" steps="473327"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.0.1.0.1" expl="apply premises (false case)" proved="true">
             <proof prover="7"><result status="valid" time="3.69" steps="900089"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="n_bvso&#39;vc.3.0.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="3.44" steps="845254"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="n_bvso&#39;vc.4" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="n_bvso&#39;vc.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_sum_add">
    <goal name="n_bvso&#39;vc.4.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="mat_sum_cardone">
     <goal name="n_bvso&#39;vc.4.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="add_mat_eq">
      <goal name="n_bvso&#39;vc.4.0.0.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(rows (f @ make_bv (fun (_:int) -&gt; 0) 1))" arg2="(s_rows (n_bvs 1) f)
">
       <goal name="n_bvso&#39;vc.4.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_s_rows_elt">
        <goal name="n_bvso&#39;vc.4.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="0.61" steps="402564"/></proof>
        </goal>
        <goal name="n_bvso&#39;vc.4.0.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="in_n_bvs">
         <goal name="n_bvso&#39;vc.4.0.0.0.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="0.62" steps="402571"/></proof>
         </goal>
         <goal name="n_bvso&#39;vc.4.0.0.0.0.0.1.1" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(element (to_set (make_bv (fun (_:int) -&gt; 1) 1)))" arg2="( ( (make_bv (fun (_:int) -&gt; 1) 1)))
">
          <goal name="n_bvso&#39;vc.4.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="2.23" steps="612236"/></proof>
          </goal>
          <goal name="n_bvso&#39;vc.4.0.0.0.0.0.1.1.1" expl="equality hypothesis" proved="true">
          <transf name="rewrite" proved="true" arg1="element&#39;def">
           <goal name="n_bvso&#39;vc.4.0.0.0.0.0.1.1.1.0" expl="equality hypothesis" proved="true">
           <proof prover="7"><result status="valid" time="2.44" steps="649147"/></proof>
           </goal>
           <goal name="n_bvso&#39;vc.4.0.0.0.0.0.1.1.1.1" expl="rewrite premises" proved="true">
           <proof prover="7"><result status="valid" time="1.15" steps="425382"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="n_bvso&#39;vc.4.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="goal_comm">
        <goal name="n_bvso&#39;vc.4.0.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_s_rows_elt">
         <goal name="n_bvso&#39;vc.4.0.0.0.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="0.62" steps="402564"/></proof>
         </goal>
         <goal name="n_bvso&#39;vc.4.0.0.0.0.1.0.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="in_n_bvs">
          <goal name="n_bvso&#39;vc.4.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="0.59" steps="402571"/></proof>
          </goal>
          <goal name="n_bvso&#39;vc.4.0.0.0.0.1.0.1.1" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="1.84" steps="539030"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="n_bvso&#39;vc.4.0.0.0.1" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(columns (f @ make_bv (fun (_:int) -&gt; 0) 1))" arg2="(s_columns (n_bvs 1) f)
">
       <goal name="n_bvso&#39;vc.4.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_s_columns_elt">
        <goal name="n_bvso&#39;vc.4.0.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="0.67" steps="402564"/></proof>
        </goal>
        <goal name="n_bvso&#39;vc.4.0.0.0.1.0.1" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="in_n_bvs">
         <goal name="n_bvso&#39;vc.4.0.0.0.1.0.1.0" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="0.50" steps="402571"/></proof>
         </goal>
         <goal name="n_bvso&#39;vc.4.0.0.0.1.0.1.1" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(element (to_set (make_bv (fun (_:int) -&gt; 1) 1)))" arg2="( ( (make_bv (fun (_:int) -&gt; 1) 1)))
">
          <goal name="n_bvso&#39;vc.4.0.0.0.1.0.1.1.0" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="1.88" steps="612236"/></proof>
          </goal>
          <goal name="n_bvso&#39;vc.4.0.0.0.1.0.1.1.1" expl="equality hypothesis" proved="true">
          <transf name="rewrite" proved="true" arg1="element&#39;def">
           <goal name="n_bvso&#39;vc.4.0.0.0.1.0.1.1.1.0" expl="equality hypothesis" proved="true">
           <proof prover="7"><result status="valid" time="2.12" steps="649147"/></proof>
           </goal>
           <goal name="n_bvso&#39;vc.4.0.0.0.1.0.1.1.1.1" expl="rewrite premises" proved="true">
           <proof prover="7"><result status="valid" time="1.00" steps="425382"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="n_bvso&#39;vc.4.0.0.0.1.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="goal_comm">
        <goal name="n_bvso&#39;vc.4.0.0.0.1.1.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_s_columns_elt">
         <goal name="n_bvso&#39;vc.4.0.0.0.1.1.0.0" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="0.65" steps="402564"/></proof>
         </goal>
         <goal name="n_bvso&#39;vc.4.0.0.0.1.1.0.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="in_n_bvs">
          <goal name="n_bvso&#39;vc.4.0.0.0.1.1.0.1.0" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="0.64" steps="402571"/></proof>
          </goal>
          <goal name="n_bvso&#39;vc.4.0.0.0.1.1.0.1.1" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="1.77" steps="539030"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="n_bvso&#39;vc.4.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="1.18" steps="427760"/></proof>
      </goal>
      <goal name="n_bvso&#39;vc.4.0.0.0.3" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(element (to_set (make_bv (fun (_:int) -&gt; 1) 1)))" arg2="(make_bv (fun (_:int) -&gt; 1) 1)
">
       <goal name="n_bvso&#39;vc.4.0.0.0.3.0" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="1.21" steps="427981"/></proof>
       </goal>
       <goal name="n_bvso&#39;vc.4.0.0.0.3.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="set_equal_bv">
        <goal name="n_bvso&#39;vc.4.0.0.0.3.1.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="make_bv_length">
         <goal name="n_bvso&#39;vc.4.0.0.0.3.1.0.0" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(element (to_set (make_bv (fun (_:int) -&gt; 1) 1)))" arg2="( ( (make_bv (fun (_:int) -&gt; 1) 1)))
">
          <goal name="n_bvso&#39;vc.4.0.0.0.3.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="1.86" steps="612236"/></proof>
          </goal>
          <goal name="n_bvso&#39;vc.4.0.0.0.3.1.0.0.1" expl="equality hypothesis" proved="true">
          <transf name="rewrite" proved="true" arg1="element&#39;def">
           <goal name="n_bvso&#39;vc.4.0.0.0.3.1.0.0.1.0" expl="equality hypothesis" proved="true">
           <proof prover="7"><result status="valid" time="2.41" steps="649147"/></proof>
           </goal>
           <goal name="n_bvso&#39;vc.4.0.0.0.3.1.0.0.1.1" expl="rewrite premises" proved="true">
           <proof prover="7"><result status="valid" time="1.09" steps="425382"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="n_bvso&#39;vc.4.0.0.0.3.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="1.16" steps="426111"/></proof>
         </goal>
         <goal name="n_bvso&#39;vc.4.0.0.0.3.1.0.2" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="0.63" steps="402571"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="n_bvso&#39;vc.4.0.0.0.3.1.1" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(element (to_set (make_bv (fun (_:int) -&gt; 1) 1)))" arg2="( ( (make_bv (fun (_:int) -&gt; 1) 1)))
">
         <goal name="n_bvso&#39;vc.4.0.0.0.3.1.1.0" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="1.17" steps="428530"/></proof>
         </goal>
         <goal name="n_bvso&#39;vc.4.0.0.0.3.1.1.1" expl="equality hypothesis" proved="true">
         <transf name="rewrite" proved="true" arg1="element&#39;def">
          <goal name="n_bvso&#39;vc.4.0.0.0.3.1.1.1.0" expl="equality hypothesis" proved="true">
          <proof prover="7"><result status="valid" time="2.15" steps="649147"/></proof>
          </goal>
          <goal name="n_bvso&#39;vc.4.0.0.0.3.1.1.1.1" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="1.02" steps="425382"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="n_bvso&#39;vc.4.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="1.07" steps="425382"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="n_bvso&#39;vc.4.0.1" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="1.13" steps="425986"/></proof>
    </goal>
    <goal name="n_bvso&#39;vc.4.0.2" expl="rewrite premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="n_bvso&#39;vc.4.0.2.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="n_bvso&#39;vc.4.0.2.0.0" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="1.22" steps="433308"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="n_bvso&#39;vc.4.0.2.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="n_bvso&#39;vc.4.0.2.1.0" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="1.21" steps="433307"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="n_bvso&#39;vc.4.0.3" expl="rewrite premises" proved="true">
    <transf name="apply" proved="true" arg1="goal_comm">
     <goal name="n_bvso&#39;vc.4.0.3.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_s_rows">
      <goal name="n_bvso&#39;vc.4.0.3.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_constant_size">
       <goal name="n_bvso&#39;vc.4.0.3.0.0.0" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="1.30" steps="433553"/></proof>
       </goal>
       <goal name="n_bvso&#39;vc.4.0.3.0.0.1" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="1.32" steps="433552"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="n_bvso&#39;vc.4.0.3.0.1" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(choose (to_set (make_bv (fun (_:int) -&gt; 1) 1)))" arg2="(make_bv (fun (_:int) -&gt; 1) 1)
">
       <goal name="n_bvso&#39;vc.4.0.3.0.1.0" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(rows (f @ make_bv (fun (_:int) -&gt; 1) 1))" arg2="(s_rows (n_bvs 1) f)
">
        <goal name="n_bvso&#39;vc.4.0.3.0.1.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_s_rows_elt">
         <goal name="n_bvso&#39;vc.4.0.3.0.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="0.59" steps="402564"/></proof>
         </goal>
         <goal name="n_bvso&#39;vc.4.0.3.0.1.0.0.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="in_n_bvs">
          <goal name="n_bvso&#39;vc.4.0.3.0.1.0.0.1.0" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="0.59" steps="402571"/></proof>
          </goal>
          <goal name="n_bvso&#39;vc.4.0.3.0.1.0.0.1.1" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="1.62" steps="539030"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="n_bvso&#39;vc.4.0.3.0.1.0.1" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="goal_comm">
         <goal name="n_bvso&#39;vc.4.0.3.0.1.0.1.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_s_rows_elt">
          <goal name="n_bvso&#39;vc.4.0.3.0.1.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="0.63" steps="402564"/></proof>
          </goal>
          <goal name="n_bvso&#39;vc.4.0.3.0.1.0.1.0.1" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="in_n_bvs">
           <goal name="n_bvso&#39;vc.4.0.3.0.1.0.1.0.1.0" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="0.65" steps="402571"/></proof>
           </goal>
           <goal name="n_bvso&#39;vc.4.0.3.0.1.0.1.0.1.1" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="1.96" steps="612236"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="n_bvso&#39;vc.4.0.3.0.1.1" expl="equality hypothesis" proved="true">
       <proof prover="7"><result status="valid" time="2.15" steps="649147"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="n_bvso&#39;vc.4.0.4" expl="rewrite premises" proved="true">
    <transf name="apply" proved="true" arg1="goal_comm">
     <goal name="n_bvso&#39;vc.4.0.4.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_s_columns">
      <goal name="n_bvso&#39;vc.4.0.4.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_constant_size">
       <goal name="n_bvso&#39;vc.4.0.4.0.0.0" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="1.12" steps="433553"/></proof>
       </goal>
       <goal name="n_bvso&#39;vc.4.0.4.0.0.1" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="1.11" steps="433552"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="n_bvso&#39;vc.4.0.4.0.1" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(choose (to_set (make_bv (fun (_:int) -&gt; 1) 1)))" arg2="(make_bv (fun (_:int) -&gt; 1) 1)
">
       <goal name="n_bvso&#39;vc.4.0.4.0.1.0" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(columns (f @ make_bv (fun (_:int) -&gt; 1) 1))" arg2="(s_columns (n_bvs 1) f)
">
        <goal name="n_bvso&#39;vc.4.0.4.0.1.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_s_columns_elt">
         <goal name="n_bvso&#39;vc.4.0.4.0.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="0.65" steps="402564"/></proof>
         </goal>
         <goal name="n_bvso&#39;vc.4.0.4.0.1.0.0.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="in_n_bvs">
          <goal name="n_bvso&#39;vc.4.0.4.0.1.0.0.1.0" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="0.62" steps="402571"/></proof>
          </goal>
          <goal name="n_bvso&#39;vc.4.0.4.0.1.0.0.1.1" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="1.80" steps="539030"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="n_bvso&#39;vc.4.0.4.0.1.0.1" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="goal_comm">
         <goal name="n_bvso&#39;vc.4.0.4.0.1.0.1.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_s_columns_elt">
          <goal name="n_bvso&#39;vc.4.0.4.0.1.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="0.65" steps="402564"/></proof>
          </goal>
          <goal name="n_bvso&#39;vc.4.0.4.0.1.0.1.0.1" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="in_n_bvs">
           <goal name="n_bvso&#39;vc.4.0.4.0.1.0.1.0.1.0" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="0.64" steps="402571"/></proof>
           </goal>
           <goal name="n_bvso&#39;vc.4.0.4.0.1.0.1.0.1.1" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="2.08" steps="612236"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="n_bvso&#39;vc.4.0.4.0.1.1" expl="equality hypothesis" proved="true">
       <proof prover="7"><result status="valid" time="2.31" steps="649147"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="n_bvso&#39;vc.4.0.5" expl="rewrite premises" proved="true">
    <transf name="assert" proved="true" arg1="(forall a b:&#39;a. a&lt;&gt; b -&gt; not (mem a (to_set b)))
">
     <goal name="n_bvso&#39;vc.4.0.5.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="1.17" steps="509973"/></proof>
     </goal>
     <goal name="n_bvso&#39;vc.4.0.5.1" expl="rewrite premises" proved="true">
     <transf name="apply" proved="true" arg1="h">
      <goal name="n_bvso&#39;vc.4.0.5.1.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="(forall x y:bitvec. forall i. 0&lt;= i &lt; length x -&gt; getbv x i &lt;&gt; getbv y i -&gt; x &lt;&gt;y)
">
       <goal name="n_bvso&#39;vc.4.0.5.1.0.0" expl="asserted formula" proved="true">
       <proof prover="7"><result status="valid" time="0.53" steps="402914"/></proof>
       </goal>
       <goal name="n_bvso&#39;vc.4.0.5.1.0.1" expl="apply premises" proved="true">
       <transf name="instantiate" proved="true" arg1="h" arg2="(make_bv (fun (_:int) -&gt; 0) 1),(make_bv (fun (_:int) -&gt; 1) 1),0">
        <goal name="n_bvso&#39;vc.4.0.5.1.0.1.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="Hinst">
         <goal name="n_bvso&#39;vc.4.0.5.1.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="2.20" steps="614119"/></proof>
         </goal>
         <goal name="n_bvso&#39;vc.4.0.5.1.0.1.0.1" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="assert_make_bv">
          <goal name="n_bvso&#39;vc.4.0.5.1.0.1.0.1.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="assert_make_bv">
           <goal name="n_bvso&#39;vc.4.0.5.1.0.1.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="1.20" steps="426510"/></proof>
           </goal>
           <goal name="n_bvso&#39;vc.4.0.5.1.0.1.0.1.0.1" expl="rewrite premises" proved="true">
           <proof prover="7"><result status="valid" time="1.03" steps="426590"/></proof>
           </goal>
           <goal name="n_bvso&#39;vc.4.0.5.1.0.1.0.1.0.2" expl="rewrite premises" proved="true">
           <proof prover="7"><result status="valid" time="0.56" steps="403206"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="n_bvso&#39;vc.4.0.5.1.0.1.0.1.1" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="1.00" steps="426609"/></proof>
          </goal>
          <goal name="n_bvso&#39;vc.4.0.5.1.0.1.0.1.2" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="0.54" steps="403206"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="injective_node&#39;vc" expl="VC for injective_node" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="injective_node&#39;vc.0" expl="VC for injective_node" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="injective_node&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.33" steps="278538"/></proof>
   </goal>
   <goal name="injective_node&#39;vc.0.1" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="injective_node&#39;vc.0.1.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.57" steps="350222"/></proof>
    </goal>
    <goal name="injective_node&#39;vc.0.1.1" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.58" steps="350222"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="injective_node&#39;vc.0.2" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="injective_node&#39;vc.0.2.0" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(exists i. 1&lt;= i &lt; n+1 /\ getbv (concat_l e 1) i &lt;&gt; getbv (concat_l e&#39; 1) i)">
     <goal name="injective_node&#39;vc.0.2.0.0" expl="asserted formula" proved="true">
     <transf name="case" proved="true" arg1="(exists i. 0&lt;= i &lt; n &amp;&amp; getbv e i &lt;&gt; getbv e&#39; i)">
      <goal name="injective_node&#39;vc.0.2.0.0.0" expl="asserted formula (true case)" proved="true">
      <transf name="destruct" proved="true" arg1="h1">
       <goal name="injective_node&#39;vc.0.2.0.0.0.0" expl="asserted formula (true case)" proved="true">
       <transf name="exists" proved="true" arg1="(i+1)">
        <goal name="injective_node&#39;vc.0.2.0.0.0.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="injective_node&#39;vc.0.2.0.0.0.0.0.0" proved="true">
         <proof prover="7"><result status="valid" time="0.49" steps="350380"/></proof>
         </goal>
         <goal name="injective_node&#39;vc.0.2.0.0.0.0.0.1" proved="true">
         <proof prover="7"><result status="valid" time="0.45" steps="350389"/></proof>
         </goal>
         <goal name="injective_node&#39;vc.0.2.0.0.0.0.0.2" proved="true">
         <proof prover="7"><result status="valid" time="1.32" steps="436049"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="injective_node&#39;vc.0.2.0.0.1" expl="asserted formula (false case)" proved="true">
      <transf name="assert" proved="true" arg1="(e = e&#39;)">
       <goal name="injective_node&#39;vc.0.2.0.0.1.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="set_equal_bv">
        <goal name="injective_node&#39;vc.0.2.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="0.82" steps="372525"/></proof>
        </goal>
        <goal name="injective_node&#39;vc.0.2.0.0.1.0.1" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="1.18" steps="433324"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="injective_node&#39;vc.0.2.0.0.1.1" expl="asserted formula (false case)" proved="true">
       <proof prover="7"><result status="valid" time="0.59" steps="379648"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="injective_node&#39;vc.0.2.0.1" expl="precondition" proved="true">
     <proof prover="7"><result status="valid" time="4.18" steps="1204148"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="injective_node&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.63" steps="372326"/></proof>
   </goal>
   <goal name="injective_node&#39;vc.0.4" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="injective_node&#39;vc.0.4.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.59" steps="372550"/></proof>
    </goal>
    <goal name="injective_node&#39;vc.0.4.1" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.60" steps="372555"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="injective_node&#39;vc.0.5" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="injective_node&#39;vc.0.5.0" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(exists i. 1&lt;= i &lt; n+1 /\ getbv (concat_l e 1) i &lt;&gt; getbv (concat_l e&#39; 1) i)">
     <goal name="injective_node&#39;vc.0.5.0.0" expl="asserted formula" proved="true">
     <transf name="case" proved="true" arg1="(exists i. 0&lt;= i &lt; n &amp;&amp; getbv e i &lt;&gt; getbv e&#39; i)">
      <goal name="injective_node&#39;vc.0.5.0.0.0" expl="asserted formula (true case)" proved="true">
      <transf name="destruct" proved="true" arg1="h1">
       <goal name="injective_node&#39;vc.0.5.0.0.0.0" expl="asserted formula (true case)" proved="true">
       <transf name="exists" proved="true" arg1="(i+1)">
        <goal name="injective_node&#39;vc.0.5.0.0.0.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="injective_node&#39;vc.0.5.0.0.0.0.0.0" proved="true">
         <proof prover="7"><result status="valid" time="0.54" steps="372713"/></proof>
         </goal>
         <goal name="injective_node&#39;vc.0.5.0.0.0.0.0.1" proved="true">
         <proof prover="7"><result status="valid" time="0.52" steps="372722"/></proof>
         </goal>
         <goal name="injective_node&#39;vc.0.5.0.0.0.0.0.2" proved="true">
         <proof prover="7"><result status="valid" time="1.50" steps="461928"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="injective_node&#39;vc.0.5.0.0.1" expl="asserted formula (false case)" proved="true">
      <transf name="assert" proved="true" arg1="(e = e&#39;)">
       <goal name="injective_node&#39;vc.0.5.0.0.1.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="set_equal_bv">
        <goal name="injective_node&#39;vc.0.5.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="0.93" steps="395365"/></proof>
        </goal>
        <goal name="injective_node&#39;vc.0.5.0.0.1.0.1" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="1.47" steps="459522"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="injective_node&#39;vc.0.5.0.0.1.1" expl="asserted formula (false case)" proved="true">
       <proof prover="7"><result status="valid" time="0.59" steps="404308"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="injective_node&#39;vc.0.5.0.1" expl="precondition" proved="true">
     <proof prover="7"><result status="valid" time="1.06" steps="393986"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="injective_node&#39;vc.0.6" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="1.27" steps="418302"/></proof>
   </goal>
   <goal name="injective_node&#39;vc.0.7" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="1.12" steps="418624"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum_n_bvs_pos&#39;vc" expl="VC for mat_sum_n_bvs_pos" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="mat_sum_n_bvs_pos&#39;vc.0" expl="VC for mat_sum_n_bvs_pos" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mat_sum_n_bvs_pos&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.39" steps="321266"/></proof>
   </goal>
   <goal name="mat_sum_n_bvs_pos&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.53" steps="327357"/></proof>
   </goal>
   <goal name="mat_sum_n_bvs_pos&#39;vc.0.2" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="mat_sum_n_bvs_pos&#39;vc.0.2.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.43" steps="355888"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_n_bvs_pos&#39;vc.0.3" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="mat_sum_n_bvs_pos&#39;vc.0.3.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.70" steps="426321"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_n_bvs_pos&#39;vc.0.4" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.03" steps="449900"/></proof>
   </goal>
   <goal name="mat_sum_n_bvs_pos&#39;vc.0.5" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.70" steps="426947"/></proof>
   </goal>
   <goal name="mat_sum_n_bvs_pos&#39;vc.0.6" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.54" steps="426950"/></proof>
   </goal>
   <goal name="mat_sum_n_bvs_pos&#39;vc.0.7" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.55" steps="426953"/></proof>
   </goal>
   <goal name="mat_sum_n_bvs_pos&#39;vc.0.8" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.68" steps="426958"/></proof>
   </goal>
   <goal name="mat_sum_n_bvs_pos&#39;vc.0.9" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.66" steps="426964"/></proof>
   </goal>
   <goal name="mat_sum_n_bvs_pos&#39;vc.0.10" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="mat_sum_n_bvs_pos&#39;vc.0.10.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.71" steps="427710"/></proof>
    </goal>
    <goal name="mat_sum_n_bvs_pos&#39;vc.0.10.1" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.72" steps="427710"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_n_bvs_pos&#39;vc.0.11" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.67" steps="427709"/></proof>
   </goal>
   <goal name="mat_sum_n_bvs_pos&#39;vc.0.12" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.69" steps="427983"/></proof>
   </goal>
   <goal name="mat_sum_n_bvs_pos&#39;vc.0.13" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="mat_sum_n_bvs_pos&#39;vc.0.13.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_n_bvs_pos&#39;vc.0.13.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="mat_sum_n_bvs_pos&#39;vc.0.13.0.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(rows (f @ concat_l e 0) )" arg2="(s_rows (n_bvs n) f)">
       <goal name="mat_sum_n_bvs_pos&#39;vc.0.13.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_s_rows_elt">
        <goal name="mat_sum_n_bvs_pos&#39;vc.0.13.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="mat_sum_n_bvs_pos&#39;vc.0.13.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="mat_sum_n_bvs_pos&#39;vc.0.13.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="1.26" steps="457026"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sum_n_bvs_pos&#39;vc.0.13.0.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="mat_sum_n_bvs_pos&#39;vc.0.13.0.0.0.0.0.1.0" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="1.23" steps="457025"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_n_bvs_pos&#39;vc.0.13.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.50"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sum_n_bvs_pos&#39;vc.0.13.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="goal_comm">
        <goal name="mat_sum_n_bvs_pos&#39;vc.0.13.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_s_rows_elt">
         <goal name="mat_sum_n_bvs_pos&#39;vc.0.13.0.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_constant_size">
          <goal name="mat_sum_n_bvs_pos&#39;vc.0.13.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="mat_sum_n_bvs_pos&#39;vc.0.13.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="1.24" steps="457026"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="mat_sum_n_bvs_pos&#39;vc.0.13.0.0.0.1.0.0.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="mat_sum_n_bvs_pos&#39;vc.0.13.0.0.0.1.0.0.1.0" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="1.11" steps="457025"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sum_n_bvs_pos&#39;vc.0.13.0.0.0.1.0.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.51"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sum_n_bvs_pos&#39;vc.0.13.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="mat_sum_n_bvs_pos&#39;vc.0.13.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="mat_sum_n_bvs_pos&#39;vc.0.13.1.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(columns (f @ concat_l e 0))" arg2="(s_columns (n_bvs n) f)">
       <goal name="mat_sum_n_bvs_pos&#39;vc.0.13.1.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_s_columns_elt">
        <goal name="mat_sum_n_bvs_pos&#39;vc.0.13.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="mat_sum_n_bvs_pos&#39;vc.0.13.1.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="1.12" steps="457103"/></proof>
         </goal>
         <goal name="mat_sum_n_bvs_pos&#39;vc.0.13.1.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="1.15" steps="457102"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_n_bvs_pos&#39;vc.0.13.1.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.50"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sum_n_bvs_pos&#39;vc.0.13.1.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="goal_comm">
        <goal name="mat_sum_n_bvs_pos&#39;vc.0.13.1.0.0.1.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_s_columns_elt">
         <goal name="mat_sum_n_bvs_pos&#39;vc.0.13.1.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_constant_size">
          <goal name="mat_sum_n_bvs_pos&#39;vc.0.13.1.0.0.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="1.26" steps="457103"/></proof>
          </goal>
          <goal name="mat_sum_n_bvs_pos&#39;vc.0.13.1.0.0.1.0.0.1" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="1.22" steps="457102"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sum_n_bvs_pos&#39;vc.0.13.1.0.0.1.0.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.51"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_n_bvs_pos&#39;vc.0.14" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.30" steps="481766"/></proof>
   </goal>
   <goal name="mat_sum_n_bvs_pos&#39;vc.0.15" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="mat_sum_n_bvs_pos&#39;vc.0.15.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.64" steps="428280"/></proof>
    </goal>
    <goal name="mat_sum_n_bvs_pos&#39;vc.0.15.1" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.52" steps="428285"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_n_bvs_pos&#39;vc.0.16" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.67" steps="428284"/></proof>
   </goal>
   <goal name="mat_sum_n_bvs_pos&#39;vc.0.17" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.53" steps="428524"/></proof>
   </goal>
   <goal name="mat_sum_n_bvs_pos&#39;vc.0.18" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="mat_sum_n_bvs_pos&#39;vc.0.18.0" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="mat_sum_n_bvs_pos&#39;vc.0.18.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_n_bvs_pos&#39;vc.0.18.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="mat_sum_n_bvs_pos&#39;vc.0.18.0.0.0.0" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(rows (f @ concat_l e 1))" arg2="(s_rows (n_bvs n) f)">
        <goal name="mat_sum_n_bvs_pos&#39;vc.0.18.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_s_rows_elt">
         <goal name="mat_sum_n_bvs_pos&#39;vc.0.18.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_constant_size">
          <goal name="mat_sum_n_bvs_pos&#39;vc.0.18.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="1.07" steps="457714"/></proof>
          </goal>
          <goal name="mat_sum_n_bvs_pos&#39;vc.0.18.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="1.11" steps="457713"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sum_n_bvs_pos&#39;vc.0.18.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="1.55" steps="489473"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_n_bvs_pos&#39;vc.0.18.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="goal_comm">
         <goal name="mat_sum_n_bvs_pos&#39;vc.0.18.0.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_s_rows_elt">
          <goal name="mat_sum_n_bvs_pos&#39;vc.0.18.0.0.0.0.1.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="set_constant_size">
           <goal name="mat_sum_n_bvs_pos&#39;vc.0.18.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="1.21" steps="457714"/></proof>
           </goal>
           <goal name="mat_sum_n_bvs_pos&#39;vc.0.18.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="1.13" steps="457713"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="mat_sum_n_bvs_pos&#39;vc.0.18.0.0.0.0.1.0.1" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="1.52" steps="488908"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_n_bvs_pos&#39;vc.0.18.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sum_n_bvs_pos&#39;vc.0.18.0.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="mat_sum_n_bvs_pos&#39;vc.0.18.0.1.0.0" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(columns (f @ concat_l e 1))" arg2="(s_columns (n_bvs n) f)">
        <goal name="mat_sum_n_bvs_pos&#39;vc.0.18.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_s_columns_elt">
         <goal name="mat_sum_n_bvs_pos&#39;vc.0.18.0.1.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_constant_size">
          <goal name="mat_sum_n_bvs_pos&#39;vc.0.18.0.1.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="1.12" steps="457714"/></proof>
          </goal>
          <goal name="mat_sum_n_bvs_pos&#39;vc.0.18.0.1.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="1.09" steps="457713"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sum_n_bvs_pos&#39;vc.0.18.0.1.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="1.50" steps="489473"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_n_bvs_pos&#39;vc.0.18.0.1.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="goal_comm">
         <goal name="mat_sum_n_bvs_pos&#39;vc.0.18.0.1.0.0.1.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_s_columns_elt">
          <goal name="mat_sum_n_bvs_pos&#39;vc.0.18.0.1.0.0.1.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="set_constant_size">
           <goal name="mat_sum_n_bvs_pos&#39;vc.0.18.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="1.20" steps="457714"/></proof>
           </goal>
           <goal name="mat_sum_n_bvs_pos&#39;vc.0.18.0.1.0.0.1.0.0.1" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="1.09" steps="457713"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="mat_sum_n_bvs_pos&#39;vc.0.18.0.1.0.0.1.0.1" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="1.49" steps="488908"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_n_bvs_pos&#39;vc.0.19" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.54" steps="483029"/></proof>
   </goal>
   <goal name="mat_sum_n_bvs_pos&#39;vc.0.20" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="H">
     <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(n_bvs n)" arg2="(n_bvso())">
      <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0" expl="postcondition" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="n_bvso&#39;spec">
        <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="apply" proved="true" arg1="add_mat_eq">
         <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(rows (f @ make_bv (fun (_:int) -&gt; 0) 1))" arg2="(s_rows (n_bvso()) f)
">
          <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="set_s_rows_elt">
           <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="1.00" steps="397580"/></proof>
           </goal>
           <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="n_bvso&#39;spec3">
            <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="make_bv_length">
             <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
             <proof prover="7"><result status="valid" time="1.02" steps="433442"/></proof>
             </goal>
             <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
             <proof prover="7"><result status="valid" time="0.60" steps="376348"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="7"><result status="valid" time="1.85" steps="543238"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(columns (f @ make_bv (fun (_:int) -&gt; 0) 1))" arg2="(s_columns (n_bvso()) f)
">
          <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="set_s_columns_elt">
           <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="0.92" steps="397580"/></proof>
           </goal>
           <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="n_bvso&#39;spec1">
            <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
            <transf name="assert" proved="true" arg1="( forall e s: bitvec. mem e (add s (to_set e)))
">
             <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.1.0.1.0.0" expl="asserted formula" proved="true">
             <proof prover="7"><result status="valid" time="1.28" steps="474756"/></proof>
             </goal>
             <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.1.0.1.0.1" expl="apply premises" proved="true">
             <proof prover="7"><result status="valid" time="1.19" steps="491055"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="goal_comm">
           <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="set_s_columns_elt">
            <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
            <proof prover="7"><result status="valid" time="0.94" steps="397580"/></proof>
            </goal>
            <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.1.1.0.1" expl="apply premises" proved="true">
            <proof prover="7"><result status="valid" time="1.64" steps="557157"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(n_bvs (n - 1))" arg2="(n_bvsz())
">
          <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="n_bvsz&#39;spec">
           <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(make_bv (fun (_:int) -&gt; 0) 1)" arg2="(concat_l (make_bv (fun (_:int) -&gt; 0) 0) 0)
">
             <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="concat_l&#39;def">
              <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="make_bv_length">
               <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="replace" proved="true" arg1="(make_bv
       (fun (k:int) -&gt;
         if k = 0 then 1 else getbv (make_bv (fun (_:int) -&gt; 0) 0) @ (k - 1))
       (0 + 1))" arg2="(make_bv (fun (_:int) -&gt; 1) 1)">
                <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="compute_specified" proved="true" >
                </transf>
                </goal>
                <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                <transf name="apply" proved="true" arg1="set_equal_bv">
                 <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                 <proof prover="7"><result status="valid" time="3.37" steps="871018"/></proof>
                 </goal>
                 <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                   <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                   <transf name="compute_specified" proved="true" >
                    <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
                    <proof prover="7"><result status="valid" time="4.36" steps="939134"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
                   <transf name="compute_specified" proved="true" >
                    <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.0.0.0.1.1.0.1.0" expl="rewrite premises" proved="true">
                    <proof prover="7"><result status="valid" time="1.22" steps="433270"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.0.0.0.1.1.0.2" expl="rewrite premises" proved="true">
                   <transf name="compute_specified" proved="true" >
                    <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.0.0.0.1.1.0.2.0" expl="rewrite premises" proved="true">
                    <proof prover="7"><result status="valid" time="2.92" steps="844755"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="7"><result status="valid" time="0.67" steps="411588"/></proof>
               </goal>
               <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.0.0.2" expl="rewrite premises" proved="true">
               <proof prover="7"><result status="valid" time="0.63" steps="376346"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="7"><result status="valid" time="0.59" steps="376369"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.1" expl="equality hypothesis" proved="true">
             <transf name="rewrite" proved="true" arg1="concat_l&#39;def">
              <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.1.0" expl="equality hypothesis" proved="true">
              <transf name="apply" proved="true" arg1="set_equal_bv">
               <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.1.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="make_bv_length">
                <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="make_bv_length">
                 <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="make_bv_length">
                  <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                  <proof prover="7"><result status="valid" time="0.56" steps="376362"/></proof>
                  </goal>
                  <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="7"><result status="valid" time="0.58" steps="411588"/></proof>
                  </goal>
                  <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="7"><result status="valid" time="0.55" steps="376346"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                 <proof prover="7"><result status="valid" time="1.26" steps="461349"/></proof>
                 </goal>
                 <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.1.0.0.0.2" expl="rewrite premises" proved="true">
                 <proof prover="7"><result status="valid" time="1.26" steps="458825"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="7"><result status="valid" time="0.98" steps="433451"/></proof>
                </goal>
                <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
                <proof prover="7"><result status="valid" time="0.54" steps="376348"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.1.0.1" expl="apply premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.1.0.1.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                 <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                  <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
                  <proof prover="7"><result status="valid" time="1.47" steps="503111"/></proof>
                  </goal>
                  <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="7"><result status="valid" time="1.32" steps="463229"/></proof>
                  </goal>
                  <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.1.0.1.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="7"><result status="valid" time="1.37" steps="503905"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.1.0.1.0.1" expl="rewrite premises" proved="true">
                 <proof prover="7"><result status="valid" time="1.00" steps="433543"/></proof>
                 </goal>
                 <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.1.0.1.0.2" expl="rewrite premises" proved="true">
                 <proof prover="7"><result status="valid" time="1.45" steps="501798"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.0.0.0.1.1" expl="rewrite premises" proved="true">
              <proof prover="7"><result status="valid" time="0.52" steps="376369"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.2.1" expl="equality hypothesis" proved="true">
          <proof prover="7"><result status="valid" time="0.93" steps="397464"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(n_bvs (n - 1))" arg2="(n_bvsz())
">
          <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="n_bvsz&#39;spec">
           <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(make_bv (fun (_:int) -&gt; 1) 1)" arg2="(concat_l (make_bv (fun (_:int) -&gt; 0) 0) 1)
">
             <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="concat_l&#39;def">
              <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="replace" proved="true" arg1="(make_bv
       (fun (k:int) -&gt;
         if k = 0 then 0 else getbv (make_bv (fun (_:int) -&gt; 0) 0) @ (k - 1))
       (length (make_bv (fun (_:int) -&gt; 0) 0) + 1))" arg2="(make_bv (fun (_:int) -&gt; 0) 1)">
               <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="compute_specified" proved="true" >
               </transf>
               </goal>
               <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
               <transf name="apply" proved="true" arg1="set_equal_bv">
                <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="make_bv_length">
                 <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="make_bv_length">
                  <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="make_bv_length">
                   <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                   <proof prover="7"><result status="valid" time="0.56" steps="376362"/></proof>
                   </goal>
                   <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                   <proof prover="7"><result status="valid" time="1.01" steps="433451"/></proof>
                   </goal>
                   <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.0.0.1.0.0.0.2" expl="rewrite premises" proved="true">
                   <proof prover="7"><result status="valid" time="0.54" steps="376348"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="7"><result status="valid" time="0.61" steps="411588"/></proof>
                  </goal>
                  <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="7"><result status="valid" time="0.55" steps="376346"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                 <proof prover="7"><result status="valid" time="1.30" steps="461349"/></proof>
                 </goal>
                 <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
                 <proof prover="7"><result status="valid" time="1.27" steps="458825"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.0.0.1.1" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                  <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                  <transf name="compute_specified" proved="true" >
                   <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
                   <proof prover="7"><result status="valid" time="1.50" steps="510781"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
                  <proof prover="7"><result status="valid" time="1.47" steps="505523"/></proof>
                  </goal>
                  <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.0.0.1.1.0.2" expl="rewrite premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.0.0.1.1.0.2.0" expl="rewrite premises" proved="true">
                   <proof prover="7"><result status="valid" time="0.59" steps="411649"/></proof>
                   </goal>
                   <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.0.0.1.1.0.2.1" expl="rewrite premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="make_bv_length">
                    <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.0.0.1.1.0.2.1.0" expl="rewrite premises" proved="true">
                    <proof prover="7"><result status="valid" time="4.19" steps="918775"/></proof>
                    </goal>
                    <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.0.0.1.1.0.2.1.1" expl="rewrite premises" proved="true">
                    <proof prover="7"><result status="valid" time="0.62" steps="411792"/></proof>
                    </goal>
                    <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.0.0.1.1.0.2.1.2" expl="rewrite premises" proved="true">
                    <proof prover="7"><result status="valid" time="0.61" steps="411643"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="7"><result status="valid" time="0.59" steps="376369"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.1" expl="equality hypothesis" proved="true">
             <transf name="rewrite" proved="true" arg1="concat_l&#39;def">
              <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.1.0" expl="equality hypothesis" proved="true">
              <transf name="apply" proved="true" arg1="set_equal_bv">
               <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.1.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="make_bv_length">
                <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="make_bv_length">
                 <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="make_bv_length">
                  <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                  <proof prover="7"><result status="valid" time="0.56" steps="376362"/></proof>
                  </goal>
                  <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="7"><result status="valid" time="0.64" steps="411588"/></proof>
                  </goal>
                  <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="7"><result status="valid" time="0.60" steps="376346"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                 <proof prover="7"><result status="valid" time="1.29" steps="461349"/></proof>
                 </goal>
                 <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.1.0.0.0.2" expl="rewrite premises" proved="true">
                 <proof prover="7"><result status="valid" time="1.27" steps="458825"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="7"><result status="valid" time="1.06" steps="433442"/></proof>
                </goal>
                <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
                <proof prover="7"><result status="valid" time="0.57" steps="376348"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.1.0.1" expl="apply premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.1.0.1.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                 <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                  <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
                  <proof prover="7"><result status="valid" time="1.59" steps="502635"/></proof>
                  </goal>
                  <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="7"><result status="valid" time="1.42" steps="463229"/></proof>
                  </goal>
                  <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.1.0.1.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="7"><result status="valid" time="1.70" steps="503890"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.1.0.1.0.1" expl="rewrite premises" proved="true">
                 <proof prover="7"><result status="valid" time="1.08" steps="433534"/></proof>
                 </goal>
                 <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.1.0.1.0.2" expl="rewrite premises" proved="true">
                 <proof prover="7"><result status="valid" time="1.55" steps="501788"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.0.0.0.1.1" expl="rewrite premises" proved="true">
              <proof prover="7"><result status="valid" time="0.59" steps="376369"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.0.3.1" expl="equality hypothesis" proved="true">
          <proof prover="7"><result status="valid" time="1.01" steps="397464"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="0.95" steps="397580"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="7"><result status="valid" time="0.81" steps="342167"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.1" expl="postcondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.1.0" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="( mat_sum (n_bvs n) f)" arg2="(add_mat (mat_sum (mapz n) f) (mat_sum (mapo n) f))">
       <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.1.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="add_mat_eq">
        <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="1.91" steps="616666"/></proof>
        </goal>
        <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.1.0.0.1" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="1.89" steps="616783"/></proof>
        </goal>
        <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.1.0.0.2" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="((mapz n))" arg2="(map (fun (bv:bitvec) -&gt; concat_l bv 0) (n_bvs (n - 1)))
">
         <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.1.0.0.2.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="H5">
          <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.1.0.0.2.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.1.0.0.2.1" expl="equality hypothesis" proved="true">
         <transf name="rewrite" proved="true" arg1="mapz&#39;spec5">
          <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.1.0.0.2.1.0" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="my_map&#39;spec">
          </transf>
          </goal>
          <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.1.0.0.2.1.1" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="0.87" steps="509445"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.1.0.0.3" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="((mapo n))" arg2="(map (fun (bv:bitvec) -&gt; concat_l bv 1) (n_bvs (n - 1)))
">
         <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.1.0.0.3.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="H">
          <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.1.0.0.3.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.1.0.0.3.1" expl="equality hypothesis" proved="true">
         <transf name="rewrite" proved="true" arg1="mapo&#39;spec5">
          <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.1.0.0.3.1.0" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="my_map&#39;spec">
          </transf>
          </goal>
          <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.1.0.0.3.1.1" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="0.80" steps="509445"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sum_n_bvs_pos&#39;vc.0.20.0.1.0.1" expl="equality hypothesis" proved="true">
       <proof prover="7"><result status="valid" time="0.82" steps="509452"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum_n_bvs_null&#39;vc" expl="VC for mat_sum_n_bvs_null" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sum_n_bvs_null&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mat_sum_cardone">
   <goal name="mat_sum_n_bvs_null&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="mat_sum_n_bvs_null&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(element (n_bvs 0))" arg2="(make_bv (fun (y1:int) -&gt; const 0 y1) 0)">
     <goal name="mat_sum_n_bvs_null&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
     <goal name="mat_sum_n_bvs_null&#39;vc.0.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="replace" proved="true" arg1="(n_bvs 0)" arg2="(to_set (make_bv (fun i -&gt; 0) 0))">
      <goal name="mat_sum_n_bvs_null&#39;vc.0.0.0.1.0" expl="equality hypothesis" proved="true">
      <proof prover="7"><result status="valid" time="1.72" steps="487137"/></proof>
      </goal>
      <goal name="mat_sum_n_bvs_null&#39;vc.0.0.0.1.1" expl="equality hypothesis" proved="true">
      <proof prover="7"><result status="valid" time="0.79" steps="337433"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sum_n_bvs_null&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="7"><result status="valid" time="0.85" steps="329978"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sum_n_bvs_null_eq&#39;vc" expl="VC for mat_sum_n_bvs_null_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sum_n_bvs_null_eq&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mat_sum_n_bvs_null">
   <goal name="mat_sum_n_bvs_null_eq&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="1.05" steps="396075"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="get_n_bvs&#39;vc" expl="VC for get_n_bvs" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_n_bvs&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.03" steps="381628"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_n_bvs_gen&#39;vc" expl="VC for get_n_bvs_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_n_bvs_gen&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.82" steps="357603"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_n_bvs&#39;vc" expl="VC for set_n_bvs" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_n_bvs&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="3.64" steps="1083276"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="int_to_bv_n_bvs&#39;vc" expl="VC for int_to_bv_n_bvs" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="int_to_bv_n_bvs&#39;vc.0" expl="VC for int_to_bv_n_bvs" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="int_to_bv_n_bvs&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.34" steps="279829"/></proof>
   </goal>
   <goal name="int_to_bv_n_bvs&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.38" steps="307357"/></proof>
   </goal>
   <goal name="int_to_bv_n_bvs&#39;vc.0.2" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.43" steps="365506"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="n_bvs_def_pos&#39;vc" expl="VC for n_bvs_def_pos" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="n_bvs_def_pos&#39;vc.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(n = 0)">
   <goal name="n_bvs_def_pos&#39;vc.0.0" expl="true case (postcondition)" proved="true">
   <proof prover="7"><result status="valid" time="0.80" steps="335340"/></proof>
   </goal>
   <goal name="n_bvs_def_pos&#39;vc.0.1" expl="false case (postcondition)" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="n_bvs_def_pos&#39;vc.0.1.0" expl="false case (postcondition)" proved="true">
    <transf name="instantiate" proved="true" arg1="n_bvs_node" arg2="n">
     <goal name="n_bvs_def_pos&#39;vc.0.1.0.0" expl="false case (postcondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="mapz&#39;spec5" arg2="in" arg3="Hinst">
      <goal name="n_bvs_def_pos&#39;vc.0.1.0.0.0" expl="false case (postcondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="mapo&#39;spec5" arg2="in" arg3="Hinst">
       <goal name="n_bvs_def_pos&#39;vc.0.1.0.0.0.0" expl="false case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="my_map&#39;spec" arg2="in" arg3="Hinst">
        <goal name="n_bvs_def_pos&#39;vc.0.1.0.0.0.0.0" expl="false case (postcondition)" proved="true">
        <transf name="rewrite" proved="true" arg1="my_map&#39;spec" arg2="in" arg3="Hinst">
         <goal name="n_bvs_def_pos&#39;vc.0.1.0.0.0.0.0.0" expl="false case (postcondition)" proved="true">
         <transf name="rewrite" proved="true" arg1="Hinst">
          <goal name="n_bvs_def_pos&#39;vc.0.1.0.0.0.0.0.0.0" expl="false case (postcondition)" proved="true">
          <proof prover="7"><result status="valid" time="0.53" steps="319183"/></proof>
          </goal>
          <goal name="n_bvs_def_pos&#39;vc.0.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="0.54" steps="319187"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="n_bvs_def_pos&#39;vc.0.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="0.54" steps="319132"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="n_bvs_def_pos&#39;vc.0.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.51" steps="319057"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="map_n_bvs&#39;vc" expl="VC for map_n_bvs" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="map_n_bvs&#39;vc.0" expl="VC for map_n_bvs" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="map_n_bvs&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.73" steps="298520"/></proof>
   </goal>
   <goal name="map_n_bvs&#39;vc.0.1" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_map_mem">
    <goal name="map_n_bvs&#39;vc.0.1.0" expl="apply premises" proved="true">
    <transf name="exists" proved="true" arg1="(int_to_bv e n)">
     <goal name="map_n_bvs&#39;vc.0.1.0.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="map_n_bvs&#39;vc.0.1.0.0.0" proved="true">
      <transf name="apply" proved="true" arg1="get_n_bvs_gen">
       <goal name="map_n_bvs&#39;vc.0.1.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="1.51" steps="530647"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="map_n_bvs&#39;vc.0.1.0.0.1" proved="true">
      <proof prover="7"><result status="valid" time="1.49" steps="530006"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="map_n_bvs&#39;vc.0.2" expl="precondition" proved="true">
   <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (y0:bitvec) -&gt; bv_to_int y0),(n_bvs n),e">
    <goal name="map_n_bvs&#39;vc.0.2.0" expl="precondition" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="map_n_bvs&#39;vc.0.2.0.0" expl="destruct premise" proved="true">
     <transf name="apply" proved="true" arg1="H">
     </transf>
     </goal>
     <goal name="map_n_bvs&#39;vc.0.2.0.1" expl="precondition" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="map_n_bvs&#39;vc.0.2.0.1.0" expl="precondition" proved="true">
      <transf name="assert" proved="true" arg1="(0&lt;= e &lt; power 2 n)">
       <goal name="map_n_bvs&#39;vc.0.2.0.1.0.0" expl="asserted formula" proved="true">
       <proof prover="7"><result status="valid" time="4.28" steps="1199844"/></proof>
       </goal>
       <goal name="map_n_bvs&#39;vc.0.2.0.1.0.1" expl="precondition" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="map_n_bvs&#39;vc.0.2.0.1.0.1.0" expl="precondition" proved="true">
        <transf name="replace" proved="true" arg1="n" arg2="(length a)">
         <goal name="map_n_bvs&#39;vc.0.2.0.1.0.1.0.0" expl="precondition" proved="true">
         <proof prover="7"><result status="valid" time="1.64" steps="534281"/></proof>
         </goal>
         <goal name="map_n_bvs&#39;vc.0.2.0.1.0.1.0.1" expl="equality hypothesis" proved="true">
         <proof prover="7"><result status="valid" time="1.11" steps="499943"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="map_n_bvs&#39;vc.0.3" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.79" steps="475174"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ind_sum_bv&#39;vc" expl="VC for ind_sum_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ind_sum_bv&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.84" steps="371212"/></proof>
  </goal>
  <goal name="ind_sum_bv&#39;vc.1" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_injective">
   <goal name="ind_sum_bv&#39;vc.1.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="ind_sum_bv&#39;vc.1.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="ind_sum_bv&#39;vc.1.0.0.0" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="1.40" steps="491859"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ind_sum_bv&#39;vc.2" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(map (fun (i:int) -&gt; int_to_bv i n) (to_fset 0 (power 2 n)))" arg2="(n_bvs n)" arg3="in" arg4="Ensures
">
   <goal name="ind_sum_bv&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures">
    <goal name="ind_sum_bv&#39;vc.2.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ind_sum_to_sum">
     <goal name="ind_sum_bv&#39;vc.2.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="sum_eq_gen">
      <goal name="ind_sum_bv&#39;vc.2.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="0.62" steps="450629"/></proof>
      </goal>
      <goal name="ind_sum_bv&#39;vc.2.0.0.0.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="ind_sum_bv&#39;vc.2.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="ind_sum_bv&#39;vc.2.0.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="1.33" steps="503931"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ind_sum_bv&#39;vc.2.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="set_equal">
    <goal name="ind_sum_bv&#39;vc.2.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="ind_sum_bv&#39;vc.2.1.0.0" expl="apply premises" proved="true">
     <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (i:int) -&gt; int_to_bv i n),(to_fset 0 (power 2 n)),e">
      <goal name="ind_sum_bv&#39;vc.2.1.0.0.0" expl="apply premises" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="ind_sum_bv&#39;vc.2.1.0.0.0.0" expl="destruct premise" proved="true">
       <proof prover="7"><result status="valid" time="5.12" steps="1436644"/></proof>
       </goal>
       <goal name="ind_sum_bv&#39;vc.2.1.0.0.0.1" expl="apply premises" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="ind_sum_bv&#39;vc.2.1.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
         <goal name="ind_sum_bv&#39;vc.2.1.0.0.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="1.64" steps="567013"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="ind_sum_bv&#39;vc.2.1.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="ind_sum_bv&#39;vc.2.1.1.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_map_mem">
      <goal name="ind_sum_bv&#39;vc.2.1.1.0.0" expl="apply premises" proved="true">
      <transf name="exists" proved="true" arg1="(bv_to_int e)">
       <goal name="ind_sum_bv&#39;vc.2.1.1.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="ind_sum_bv&#39;vc.2.1.1.0.0.0.0" proved="true">
        <proof prover="7"><result status="valid" time="1.50" steps="566089"/></proof>
        </goal>
        <goal name="ind_sum_bv&#39;vc.2.1.1.0.0.0.1" proved="true">
        <proof prover="7"><result status="valid" time="1.72" steps="565793"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="first_div&#39;vc" expl="VC for first_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="first_div&#39;vc.0" expl="loop invariant init" proved="true">
  <proof prover="7"><result status="valid" time="0.31" steps="280816"/></proof>
  </goal>
  <goal name="first_div&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="7"><result status="valid" time="0.93" steps="323592"/></proof>
  </goal>
  <goal name="first_div&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="7"><result status="valid" time="0.47" steps="280829"/></proof>
  </goal>
  <goal name="first_div&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="7"><result status="valid" time="0.50" steps="308205"/></proof>
  </goal>
  <goal name="first_div&#39;vc.4" expl="loop invariant init" proved="true">
  <proof prover="7"><result status="valid" time="1.01" steps="354428"/></proof>
  </goal>
  <goal name="first_div&#39;vc.5" expl="loop variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="first_div&#39;vc.5.0" expl="loop variant decrease" proved="true">
   <proof prover="7"><result status="valid" time="0.76" steps="327685"/></proof>
   </goal>
   <goal name="first_div&#39;vc.5.1" expl="loop variant decrease" proved="true">
   <proof prover="7"><result status="valid" time="0.40" steps="314033"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="first_div&#39;vc.6" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="first_div&#39;vc.6.0" expl="loop invariant preservation" proved="true">
   <proof prover="7"><result status="valid" time="0.75" steps="327667"/></proof>
   </goal>
   <goal name="first_div&#39;vc.6.1" expl="loop invariant preservation" proved="true">
   <proof prover="7"><result status="valid" time="0.40" steps="308566"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="first_div&#39;vc.7" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="first_div&#39;vc.7.0" expl="loop invariant preservation" proved="true">
   <proof prover="7"><result status="valid" time="0.36" steps="308564"/></proof>
   </goal>
   <goal name="first_div&#39;vc.7.1" expl="loop invariant preservation" proved="true">
   <proof prover="7"><result status="valid" time="0.38" steps="308570"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="first_div&#39;vc.8" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="first_div&#39;vc.8.0" expl="loop invariant preservation" proved="true">
   <proof prover="7"><result status="valid" time="0.36" steps="308621"/></proof>
   </goal>
   <goal name="first_div&#39;vc.8.1" expl="loop invariant preservation" proved="true">
   <proof prover="7"><result status="valid" time="0.41" steps="308627"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="first_div&#39;vc.9" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="first_div&#39;vc.9.0" expl="loop invariant preservation" proved="true">
   <proof prover="0"><result status="valid" time="0.41"/></proof>
   </goal>
   <goal name="first_div&#39;vc.9.1" expl="loop invariant preservation" proved="true">
   <proof prover="7"><result status="valid" time="0.40" steps="308692"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="first_div&#39;vc.10" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="first_div&#39;vc.10.0" expl="loop invariant preservation" proved="true">
   <proof prover="7"><result status="valid" time="0.93" steps="360575"/></proof>
   </goal>
   <goal name="first_div&#39;vc.10.1" expl="loop invariant preservation" proved="true">
   <proof prover="7"><result status="valid" time="0.39" steps="308857"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="first_div&#39;vc.11" expl="loop variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="first_div&#39;vc.11.0" expl="loop variant decrease" proved="true">
   <proof prover="7"><result status="valid" time="0.78" steps="327696"/></proof>
   </goal>
   <goal name="first_div&#39;vc.11.1" expl="loop variant decrease" proved="true">
   <proof prover="7"><result status="valid" time="0.40" steps="314043"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="first_div&#39;vc.12" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="first_div&#39;vc.12.0" expl="loop invariant preservation" proved="true">
   <proof prover="7"><result status="valid" time="0.75" steps="327679"/></proof>
   </goal>
   <goal name="first_div&#39;vc.12.1" expl="loop invariant preservation" proved="true">
   <proof prover="7"><result status="valid" time="0.40" steps="308571"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="first_div&#39;vc.13" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="first_div&#39;vc.13.0" expl="loop invariant preservation" proved="true">
   <proof prover="7"><result status="valid" time="0.74" steps="327691"/></proof>
   </goal>
   <goal name="first_div&#39;vc.13.1" expl="loop invariant preservation" proved="true">
   <proof prover="7"><result status="valid" time="0.41" steps="308582"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="first_div&#39;vc.14" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="first_div&#39;vc.14.0" expl="loop invariant preservation" proved="true">
   <proof prover="7"><result status="valid" time="0.75" steps="327845"/></proof>
   </goal>
   <goal name="first_div&#39;vc.14.1" expl="loop invariant preservation" proved="true">
   <proof prover="7"><result status="valid" time="0.40" steps="308672"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="first_div&#39;vc.15" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="first_div&#39;vc.15.0" expl="loop invariant preservation" proved="true">
   <proof prover="7"><result status="valid" time="0.94" steps="361458"/></proof>
   </goal>
   <goal name="first_div&#39;vc.15.1" expl="loop invariant preservation" proved="true">
   <proof prover="7"><result status="valid" time="0.41" steps="308737"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="first_div&#39;vc.16" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="first_div&#39;vc.16.0" expl="loop invariant preservation" proved="true">
   <proof prover="7"><result status="valid" time="0.97" steps="360324"/></proof>
   </goal>
   <goal name="first_div&#39;vc.16.1" expl="loop invariant preservation" proved="true">
   <proof prover="7"><result status="valid" time="0.38" steps="308897"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="first_div&#39;vc.17" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="first_div&#39;vc.17.0" expl="assertion" proved="true">
   <proof prover="7"><result status="valid" time="0.35" steps="308472"/></proof>
   </goal>
   <goal name="first_div&#39;vc.17.1" expl="assertion" proved="true">
   <proof prover="7"><result status="valid" time="0.64" steps="327602"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="first_div&#39;vc.18" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="first_div&#39;vc.18.0" expl="assertion" proved="true">
   <proof prover="7"><result status="valid" time="0.38" steps="308474"/></proof>
   </goal>
   <goal name="first_div&#39;vc.18.1" expl="assertion" proved="true">
   <proof prover="7"><result status="valid" time="0.65" steps="327540"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="first_div&#39;vc.19" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="first_div&#39;vc.19.0" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.97" steps="359034"/></proof>
   </goal>
   <goal name="first_div&#39;vc.19.1" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.85" steps="359085"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="first_div&#39;vc.20" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="first_div&#39;vc.20.0" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.36" steps="308595"/></proof>
   </goal>
   <goal name="first_div&#39;vc.20.1" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.25" steps="308597"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="first_div&#39;vc.21" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="first_div&#39;vc.21.0" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.55" steps="308630"/></proof>
   </goal>
   <goal name="first_div&#39;vc.21.1" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.64" steps="327842"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="injective_concat&#39;vc" expl="VC for injective_concat" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="injective_concat&#39;vc.0" expl="VC for injective_concat" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="injective_concat&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.32" steps="281227"/></proof>
   </goal>
   <goal name="injective_concat&#39;vc.0.1" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="injective_concat&#39;vc.0.1.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.58" steps="352592"/></proof>
    </goal>
    <goal name="injective_concat&#39;vc.0.1.1" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.43" steps="352592"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="injective_concat&#39;vc.0.2" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="injective_concat&#39;vc.0.2.0" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(getbv (concat_l e i) (first_div e e&#39;+1) &lt;&gt; getbv (concat_l e&#39; i) ((first_div e e&#39;)+1))">
     <goal name="injective_concat&#39;vc.0.2.0.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="3.77" steps="1220143"/></proof>
     </goal>
     <goal name="injective_concat&#39;vc.0.2.0.1" expl="precondition" proved="true">
     <proof prover="7"><result status="valid" time="0.88" steps="373590"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="injective_concat&#39;vc.0.3" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="1.07" steps="420140"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="inf_first_div&#39;vc" expl="VC for inf_first_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inf_first_div&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.00" steps="356718"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="first_div_diff&#39;vc" expl="VC for first_div_diff" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="first_div_diff&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.86" steps="357262"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="exists_first_div&#39;vc" expl="VC for exists_first_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="exists_first_div&#39;vc.0" expl="postcondition" proved="true">
  <transf name="exists" proved="true" arg1="(first_div bv1 bv2)">
   <goal name="exists_first_div&#39;vc.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="exists_first_div&#39;vc.0.0.0" proved="true">
    <proof prover="7"><result status="valid" time="3.21" steps="978427"/></proof>
    </goal>
    <goal name="exists_first_div&#39;vc.0.0.1" proved="true">
    <proof prover="7"><result status="valid" time="3.23" steps="978562"/></proof>
    </goal>
    <goal name="exists_first_div&#39;vc.0.0.2" proved="true">
    <proof prover="7"><result status="valid" time="0.30" steps="281819"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_diff_length&#39;vc" expl="VC for set_diff_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_diff_length&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.36" steps="287468"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_diff_val&#39;vc" expl="VC for set_diff_val" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_diff_val&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.38" steps="314790"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="kth_decomp&#39;vc" expl="VC for kth_decomp" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="kth_decomp&#39;vc.0" expl="VC for kth_decomp" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="kth_decomp&#39;vc.0.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="kth_decomp&#39;vc.0.0.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.36" steps="309583"/></proof>
    </goal>
    <goal name="kth_decomp&#39;vc.0.0.1" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.80" steps="328571"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="kth_decomp&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.49" steps="309961"/></proof>
   </goal>
   <goal name="kth_decomp&#39;vc.0.2" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures2">
    <goal name="kth_decomp&#39;vc.0.2.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="( ind_isum (fun (k1:int) -&gt; (getbv bv @ k1) * power 2 ((length bv - 1) - k1))
  0 (length bv))" arg2="(ind_isum
  (fun (l:int) -&gt;
    if l &lt; length bv then (getbv bv @ l) * power 2 ((length bv - 1) - l)
    else 0)
  0 (length bv))
">
     <goal name="kth_decomp&#39;vc.0.2.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures1">
      <goal name="kth_decomp&#39;vc.0.2.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="Ensures">
       <goal name="kth_decomp&#39;vc.0.2.0.0.0.0" expl="postcondition" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="kth_decomp&#39;vc.0.2.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="add_assoc">
         <goal name="kth_decomp&#39;vc.0.2.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="apply" proved="true" arg1="add_eq">
          <goal name="kth_decomp&#39;vc.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
          </transf>
          </goal>
          <goal name="kth_decomp&#39;vc.0.2.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="3.58" steps="1032169"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="kth_decomp&#39;vc.0.2.0.1" expl="equality hypothesis" proved="true">
     <proof prover="7"><result status="valid" time="3.39" steps="1019524"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="kth_decomp&#39;vc.0.3" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures">
    <goal name="kth_decomp&#39;vc.0.3.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="add_eq">
     <goal name="kth_decomp&#39;vc.0.3.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="add_eq">
      <goal name="kth_decomp&#39;vc.0.3.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="ind_isum_eq">
       <goal name="kth_decomp&#39;vc.0.3.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="0.89" steps="362646"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="kth_decomp&#39;vc.0.3.0.0.1" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="0.40" steps="310596"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="kth_decomp&#39;vc.0.3.0.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="ind_isum_eq">
      <goal name="kth_decomp&#39;vc.0.3.0.1.0" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="0.91" steps="361886"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="int_to_bv_prod&#39;vc" expl="VC for int_to_bv_prod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_to_bv_prod&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.56" steps="302005"/></proof>
  </goal>
  <goal name="int_to_bv_prod&#39;vc.1" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.76" steps="329610"/></proof>
  </goal>
  <goal name="int_to_bv_prod&#39;vc.2" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.80" steps="329837"/></proof>
  </goal>
  <goal name="int_to_bv_prod&#39;vc.3" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="1.00" steps="358222"/></proof>
  </goal>
  <goal name="int_to_bv_prod&#39;vc.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="int_to_bv_prod&#39;vc.4.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.72" steps="329921"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="int_to_bv_prod&#39;vc.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="int_to_bv_prod&#39;vc.5.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.78" steps="330122"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="int_to_bv_prod&#39;vc.6" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="int_to_bv_prod&#39;vc.6.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.80" steps="330321"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="int_to_bv_prod&#39;vc.7" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="int_to_bv_prod&#39;vc.7.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.98" steps="358898"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="int_to_bv_prod&#39;vc.8" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="int_to_bv_prod&#39;vc.8.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.60" steps="330504"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="int_to_bv_prod&#39;vc.9" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="int_to_bv_prod&#39;vc.9.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.74" steps="330715"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="int_to_bv_prod&#39;vc.10" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="int_to_bv_prod&#39;vc.10.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.90" steps="368386"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="int_to_bv_prod&#39;vc.11" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="int_to_bv_prod&#39;vc.11.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.55" steps="346802"/></proof>
   </goal>
   <goal name="int_to_bv_prod&#39;vc.11.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.90" steps="368509"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="int_to_bv_prod&#39;vc.12" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="int_to_bv_prod&#39;vc.12.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.01" steps="406023"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="int_to_bv_prod&#39;vc.13" expl="assertion" proved="true">
  <proof prover="7"><result status="valid" time="0.98" steps="358490"/></proof>
  </goal>
  <goal name="int_to_bv_prod&#39;vc.14" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.78" steps="330595"/></proof>
  </goal>
  <goal name="int_to_bv_prod&#39;vc.15" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.76" steps="330827"/></proof>
  </goal>
  <goal name="int_to_bv_prod&#39;vc.16" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.74" steps="367613"/></proof>
  </goal>
  <goal name="int_to_bv_prod&#39;vc.17" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="int_to_bv_prod&#39;vc.17.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="int_to_bv_prod&#39;vc.17.0.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="1.05" steps="396073"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="int_to_bv_prod&#39;vc.18" expl="postcondition" proved="true">
  <transf name="eliminate_if" proved="true" >
   <goal name="int_to_bv_prod&#39;vc.18.0" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="int_to_bv_prod&#39;vc.18.0.0" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(i = j)">
     <goal name="int_to_bv_prod&#39;vc.18.0.0.0" expl="true case (postcondition)" proved="true">
     <proof prover="7"><result status="valid" time="1.04" steps="399410"/></proof>
     </goal>
     <goal name="int_to_bv_prod&#39;vc.18.0.0.1" expl="false case (postcondition)" proved="true">
     <proof prover="7"><result status="valid" time="1.26" steps="410771"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="int_to_bv_prod_gen&#39;vc" expl="VC for int_to_bv_prod_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_to_bv_prod_gen&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="int_to_bv_prod">
   <goal name="int_to_bv_prod_gen&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="int_to_bv_prod_gen&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="7"><result status="valid" time="0.33" steps="283599"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="int_to_bv_prod_gen&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="int_to_bv_prod_gen&#39;vc.0.1.0" expl="apply premises" proved="true">
    <proof prover="7"><result status="valid" time="0.32" steps="283597"/></proof>
    </goal>
    <goal name="int_to_bv_prod_gen&#39;vc.0.1.1" expl="apply premises" proved="true">
    <proof prover="7"><result status="valid" time="0.34" steps="283612"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="int_to_bv_prod_gen&#39;vc.0.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="int_to_bv_prod_gen&#39;vc.0.2.0" expl="apply premises" proved="true">
    <proof prover="7"><result status="valid" time="0.31" steps="283597"/></proof>
    </goal>
    <goal name="int_to_bv_prod_gen&#39;vc.0.2.1" expl="apply premises" proved="true">
    <proof prover="7"><result status="valid" time="0.33" steps="283612"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="kth_decomp_bound_zero&#39;vc" expl="VC for kth_decomp_bound_zero" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="kth_decomp_bound_zero&#39;vc.0" expl="VC for kth_decomp_bound_zero" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="kth_decomp_bound_zero&#39;vc.0.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="kth_decomp_bound_zero&#39;vc.0.0.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.36" steps="310970"/></proof>
    </goal>
    <goal name="kth_decomp_bound_zero&#39;vc.0.0.1" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.35" steps="310985"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="kth_decomp_bound_zero&#39;vc.0.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(forall a b c. 0&lt;= b -&gt; 0&lt;= c -&gt; a &lt;= a+b+c)">
    <goal name="kth_decomp_bound_zero&#39;vc.0.1.0" expl="asserted formula" proved="true">
    <proof prover="7"><result status="valid" time="0.82" steps="330922"/></proof>
    </goal>
    <goal name="kth_decomp_bound_zero&#39;vc.0.1.1" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures">
     <goal name="kth_decomp_bound_zero&#39;vc.0.1.1.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="h">
      <goal name="kth_decomp_bound_zero&#39;vc.0.1.1.0.0" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="0.51" steps="317034"/></proof>
      </goal>
      <goal name="kth_decomp_bound_zero&#39;vc.0.1.1.0.1" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="ind_isum_pos">
       <goal name="kth_decomp_bound_zero&#39;vc.0.1.1.0.1.0" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="0.50" steps="311575"/></proof>
       </goal>
       <goal name="kth_decomp_bound_zero&#39;vc.0.1.1.0.1.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="kth_decomp_bound_zero&#39;vc.0.1.1.0.1.1.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="kth_decomp_bound_zero&#39;vc.0.1.1.0.1.1.0.0" expl="apply premises" proved="true">
         <transf name="assert" proved="true" arg1="(forall a. 0&lt;= a -&gt; a&gt;=0)">
          <goal name="kth_decomp_bound_zero&#39;vc.0.1.1.0.1.1.0.0.0" expl="asserted formula" proved="true">
          <proof prover="7"><result status="valid" time="0.42" steps="311591"/></proof>
          </goal>
          <goal name="kth_decomp_bound_zero&#39;vc.0.1.1.0.1.1.0.0.1" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="h">
           <goal name="kth_decomp_bound_zero&#39;vc.0.1.1.0.1.1.0.0.1.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.37"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="kth_decomp_bound_zero&#39;vc.0.2" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures1">
    <goal name="kth_decomp_bound_zero&#39;vc.0.2.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="add_assoc">
     <goal name="kth_decomp_bound_zero&#39;vc.0.2.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(((getbv bv @ k) * power 2 ((length bv - 1) - k))
      + ind_isum
        (fun (l:int) -&gt; (getbv bv @ l) * power 2 ((length bv - 1) - l))
        (k + 1) (length bv))" arg2="(mod (bv_to_int bv) (power 2 ((length bv - k) - 1)) )
">
      <goal name="kth_decomp_bound_zero&#39;vc.0.2.0.0.0" expl="postcondition" proved="true">
      <transf name="assert" proved="true" arg1="(forall a b c. b&lt;c -&gt; a+b&lt;a+c)">
       <goal name="kth_decomp_bound_zero&#39;vc.0.2.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="7"><result status="valid" time="0.50" steps="311577"/></proof>
       </goal>
       <goal name="kth_decomp_bound_zero&#39;vc.0.2.0.0.0.1" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="h">
        <goal name="kth_decomp_bound_zero&#39;vc.0.2.0.0.0.1.0" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="1.00" steps="362379"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="kth_decomp_bound_zero&#39;vc.0.2.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="instantiate" proved="true" arg1="mod_isum" arg2="(bv_to_int bv),(length bv -k -1),(length bv)">
       <goal name="kth_decomp_bound_zero&#39;vc.0.2.0.0.1.0" expl="equality hypothesis" proved="true">
       <transf name="rewrite" proved="true" arg1="zero_add">
        <goal name="kth_decomp_bound_zero&#39;vc.0.2.0.0.1.0.0" expl="equality hypothesis" proved="true">
        <transf name="rewrite" proved="true" arg1="Hinst">
         <goal name="kth_decomp_bound_zero&#39;vc.0.2.0.0.1.0.0.0" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
          <goal name="kth_decomp_bound_zero&#39;vc.0.2.0.0.1.0.0.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="kth_decomp_bound_zero&#39;vc.0.2.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="kth_decomp_bound_zero&#39;vc.0.2.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="int_to_bv_to_int">
             <goal name="kth_decomp_bound_zero&#39;vc.0.2.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
             </transf>
             </goal>
             <goal name="kth_decomp_bound_zero&#39;vc.0.2.0.0.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="7"><result status="valid" time="0.67" steps="331443"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="kth_decomp_bound_zero&#39;vc.0.2.0.0.1.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="0.39" steps="311780"/></proof>
          </goal>
          <goal name="kth_decomp_bound_zero&#39;vc.0.2.0.0.1.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="0.39" steps="311771"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="kth_decomp_bound_zero&#39;vc.0.2.0.0.1.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="0.70" steps="331371"/></proof>
         </goal>
         <goal name="kth_decomp_bound_zero&#39;vc.0.2.0.0.1.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="0.96" steps="364474"/></proof>
         </goal>
         <goal name="kth_decomp_bound_zero&#39;vc.0.2.0.0.1.0.0.3" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="0.41" steps="311773"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="kth_decomp_bound_zero&#39;vc.0.2.0.0.1.0.1" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="0.48" steps="317254"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="kth_decomp_bound_one&#39;vc" expl="VC for kth_decomp_bound_one" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="kth_decomp_bound_one&#39;vc.0" expl="VC for kth_decomp_bound_one" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="kth_decomp_bound_one&#39;vc.0.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="kth_decomp_bound_one&#39;vc.0.0.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.53" steps="311390"/></proof>
    </goal>
    <goal name="kth_decomp_bound_one&#39;vc.0.0.1" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.35" steps="311405"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="kth_decomp_bound_one&#39;vc.0.1" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures">
    <goal name="kth_decomp_bound_one&#39;vc.0.1.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(ind_isum (fun (l:int) -&gt; (getbv bv @ l) * power 2 ((length bv - 1) - l)) 0
   k + power 2 ((length bv - k) - 1))" arg2="(ind_isum
       (fun (l:int) -&gt; (getbv bv @ l) * power 2 ((length bv - 1) - l)) 0 k
       + ((getbv bv @ k) * power 2 ((length bv - 1) - k)))
">
     <goal name="kth_decomp_bound_one&#39;vc.0.1.0.0" expl="postcondition" proved="true">
     <transf name="assert" proved="true" arg1="(0&lt;=ind_isum
        (fun (l:int) -&gt; (getbv bv @ l) * power 2 ((length bv - 1) - l))
        (k + 1) (length bv))">
      <goal name="kth_decomp_bound_one&#39;vc.0.1.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="ind_isum_pos">
       <goal name="kth_decomp_bound_one&#39;vc.0.1.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="0.37" steps="311875"/></proof>
       </goal>
       <goal name="kth_decomp_bound_one&#39;vc.0.1.0.0.0.1" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="kth_decomp_bound_one&#39;vc.0.1.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="kth_decomp_bound_one&#39;vc.0.1.0.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="assert" proved="true" arg1="(forall a. 0&lt;= a -&gt; a&gt;=0)">
          <goal name="kth_decomp_bound_one&#39;vc.0.1.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
          <proof prover="7"><result status="valid" time="0.40" steps="311891"/></proof>
          </goal>
          <goal name="kth_decomp_bound_one&#39;vc.0.1.0.0.0.1.0.0.1" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.29"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="kth_decomp_bound_one&#39;vc.0.1.0.0.1" expl="postcondition" proved="true">
      <transf name="assert" proved="true" arg1="(forall a b. 0&lt;=b -&gt; a&lt;= a+b)">
       <goal name="kth_decomp_bound_one&#39;vc.0.1.0.0.1.0" expl="asserted formula" proved="true">
       <proof prover="7"><result status="valid" time="0.32" steps="311983"/></proof>
       </goal>
       <goal name="kth_decomp_bound_one&#39;vc.0.1.0.0.1.1" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="h">
        <goal name="kth_decomp_bound_one&#39;vc.0.1.0.0.1.1.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="ind_isum_pos">
         <goal name="kth_decomp_bound_one&#39;vc.0.1.0.0.1.1.0.0" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="0.35" steps="312009"/></proof>
         </goal>
         <goal name="kth_decomp_bound_one&#39;vc.0.1.0.0.1.1.0.1" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="kth_decomp_bound_one&#39;vc.0.1.0.0.1.1.0.1.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="kth_decomp_bound_one&#39;vc.0.1.0.0.1.1.0.1.0.0" expl="apply premises" proved="true">
           <transf name="assert" proved="true" arg1="(forall a. 0&lt;= a -&gt; a&gt;=0)">
            <goal name="kth_decomp_bound_one&#39;vc.0.1.0.0.1.1.0.1.0.0.0" expl="asserted formula" proved="true">
            <proof prover="7"><result status="valid" time="0.35" steps="312025"/></proof>
            </goal>
            <goal name="kth_decomp_bound_one&#39;vc.0.1.0.0.1.1.0.1.0.0.1" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="h">
             <goal name="kth_decomp_bound_one&#39;vc.0.1.0.0.1.1.0.1.0.0.1.0" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="0.41"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="kth_decomp_bound_one&#39;vc.0.1.0.1" expl="equality hypothesis" proved="true">
     <transf name="assert" proved="true" arg1="(0&lt;=ind_isum
        (fun (l:int) -&gt; (getbv bv @ l) * power 2 ((length bv - 1) - l))
        (k + 1) (length bv))">
      <goal name="kth_decomp_bound_one&#39;vc.0.1.0.1.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="ind_isum_pos">
       <goal name="kth_decomp_bound_one&#39;vc.0.1.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="0.50" steps="311875"/></proof>
       </goal>
       <goal name="kth_decomp_bound_one&#39;vc.0.1.0.1.0.1" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="kth_decomp_bound_one&#39;vc.0.1.0.1.0.1.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="kth_decomp_bound_one&#39;vc.0.1.0.1.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.40"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="kth_decomp_bound_one&#39;vc.0.1.0.1.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="add_eq">
       <goal name="kth_decomp_bound_one&#39;vc.0.1.0.1.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
       </transf>
       </goal>
       <goal name="kth_decomp_bound_one&#39;vc.0.1.0.1.1.1" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="0.53" steps="317456"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="kth_decomp_bound_one&#39;vc.0.2" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures1">
    <goal name="kth_decomp_bound_one&#39;vc.0.2.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="add_assoc">
     <goal name="kth_decomp_bound_one&#39;vc.0.2.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(((getbv bv @ k) * power 2 ((length bv - 1) - k))
      + ind_isum
        (fun (l:int) -&gt; (getbv bv @ l) * power 2 ((length bv - 1) - l))
        (k + 1) (length bv))" arg2="((ind_isum (fun (l:int) -&gt; (getbv bv @ l) * power 2 ((length bv - 1) - l)) k   (length bv)))
">
      <goal name="kth_decomp_bound_one&#39;vc.0.2.0.0.0" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="(ind_isum (fun (l:int) -&gt; (getbv bv @ l) * power 2 ((length bv - 1) - l))
     k (length bv) )" arg2="(mod (bv_to_int bv) (power 2 (length bv -k)))
">
       <goal name="kth_decomp_bound_one&#39;vc.0.2.0.0.0.0" expl="postcondition" proved="true">
       <transf name="assert" proved="true" arg1="(forall a b c. b&lt;c -&gt; a+b&lt;a+c)">
        <goal name="kth_decomp_bound_one&#39;vc.0.2.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="7"><result status="valid" time="0.39" steps="312025"/></proof>
        </goal>
        <goal name="kth_decomp_bound_one&#39;vc.0.2.0.0.0.0.1" expl="postcondition" proved="true">
        <transf name="replace" proved="true" arg1="(ind_isum (fun (l:int) -&gt; (getbv bv @ l) * power 2 ((length bv - l) - 1))
     0 k)" arg2="(ind_isum (fun (l:int) -&gt; (getbv bv @ l) * power 2 ((length bv - 1) - l))
     0 k)">
         <goal name="kth_decomp_bound_one&#39;vc.0.2.0.0.0.0.1.0" expl="postcondition" proved="true">
         <transf name="apply" proved="true" arg1="h">
          <goal name="kth_decomp_bound_one&#39;vc.0.2.0.0.0.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="0.92" steps="364498"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="kth_decomp_bound_one&#39;vc.0.2.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="ind_isum_eq">
          <goal name="kth_decomp_bound_one&#39;vc.0.2.0.0.0.0.1.1.0" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="0.87" steps="362738"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="kth_decomp_bound_one&#39;vc.0.2.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="instantiate" proved="true" arg1="mod_isum" arg2="(bv_to_int bv),(length bv -k),(length bv)">
        <goal name="kth_decomp_bound_one&#39;vc.0.2.0.0.0.1.0" expl="equality hypothesis" proved="true">
        <transf name="case" proved="true" arg1="(k=0)">
         <goal name="kth_decomp_bound_one&#39;vc.0.2.0.0.0.1.0.0" expl="equality hypothesis (true case)" proved="true">
         <transf name="replace" proved="true" arg1="( mod (bv_to_int bv) (power 2 (length bv - k)))" arg2="(bv_to_int bv)">
          <goal name="kth_decomp_bound_one&#39;vc.0.2.0.0.0.1.0.0.0" expl="equality hypothesis (true case)" proved="true">
          <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
           <goal name="kth_decomp_bound_one&#39;vc.0.2.0.0.0.1.0.0.0.0" expl="equality hypothesis (true case)" proved="true">
           <transf name="rewrite" proved="true" arg1="h">
            <goal name="kth_decomp_bound_one&#39;vc.0.2.0.0.0.1.0.0.0.0.0" expl="equality hypothesis (true case)" proved="true">
            <proof prover="7"><result status="valid" time="1.02" steps="364888"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="kth_decomp_bound_one&#39;vc.0.2.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="6"><result status="valid" time="2.78" steps="44549"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="kth_decomp_bound_one&#39;vc.0.2.0.0.0.1.0.1" expl="equality hypothesis (false case)" proved="true">
         <transf name="rewrite" proved="true" arg1="Hinst">
          <goal name="kth_decomp_bound_one&#39;vc.0.2.0.0.0.1.0.1.0" expl="equality hypothesis (false case)" proved="true">
          <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
           <goal name="kth_decomp_bound_one&#39;vc.0.2.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="kth_decomp_bound_one&#39;vc.0.2.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="kth_decomp_bound_one&#39;vc.0.2.0.0.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="0.42"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="kth_decomp_bound_one&#39;vc.0.2.0.0.0.1.0.1.0.1" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="0.41" steps="312229"/></proof>
           </goal>
           <goal name="kth_decomp_bound_one&#39;vc.0.2.0.0.0.1.0.1.0.2" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="0.41" steps="312220"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="kth_decomp_bound_one&#39;vc.0.2.0.0.0.1.0.1.1" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="0.79" steps="331942"/></proof>
          </goal>
          <goal name="kth_decomp_bound_one&#39;vc.0.2.0.0.0.1.0.1.2" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="0.94" steps="365676"/></proof>
          </goal>
          <goal name="kth_decomp_bound_one&#39;vc.0.2.0.0.0.1.0.1.3" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="0.79" steps="331940"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="kth_decomp_bound_one&#39;vc.0.2.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="goal_comm">
       <goal name="kth_decomp_bound_one&#39;vc.0.2.0.0.1.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="ind_isum_plus_one">
        <goal name="kth_decomp_bound_one&#39;vc.0.2.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="add_eq">
         <goal name="kth_decomp_bound_one&#39;vc.0.2.0.0.1.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
         <goal name="kth_decomp_bound_one&#39;vc.0.2.0.0.1.0.0.1" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="kth_decomp_bound_one&#39;vc.0.2.0.0.1.0.1" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="0.36" steps="311979"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_int_length_2&#39;vc" expl="VC for bv_to_int_length_2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_to_int_length_2&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="3.13" steps="996619"/></proof>
  </goal>
  <goal name="bv_to_int_length_2&#39;vc.1" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="x" arg2="(int_to_bv (bv_to_int x ) 2)">
   <goal name="bv_to_int_length_2&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="int_to_bv_value">
    <goal name="bv_to_int_length_2&#39;vc.1.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="int_to_bv_to_int_">
     <goal name="bv_to_int_length_2&#39;vc.1.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(power 2 ((2 - 1) - 1))" arg2="1">
      <goal name="bv_to_int_length_2&#39;vc.1.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="7"><result status="valid" time="0.50" steps="311849"/></proof>
      </goal>
      <goal name="bv_to_int_length_2&#39;vc.1.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="7"><result status="valid" time="0.84" steps="331436"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="bv_to_int_length_2&#39;vc.1.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.35" steps="311832"/></proof>
     </goal>
     <goal name="bv_to_int_length_2&#39;vc.1.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.50" steps="311825"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="bv_to_int_length_2&#39;vc.1.0.1" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.48" steps="311834"/></proof>
    </goal>
    <goal name="bv_to_int_length_2&#39;vc.1.0.2" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.97" steps="360422"/></proof>
    </goal>
    <goal name="bv_to_int_length_2&#39;vc.1.0.3" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.35" steps="311848"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="bv_to_int_length_2&#39;vc.1.1" expl="equality hypothesis" proved="true">
   <proof prover="7"><result status="valid" time="1.00" steps="359903"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_int_length_2_gen&#39;vc" expl="VC for bv_to_int_length_2_gen" proved="true">
 <proof prover="0"><result status="valid" time="0.31"/></proof>
 </goal>
</theory>
<theory name="Bv_int_op" proved="true">
 <goal name="pre_injective_bv_to_int&#39;vc" expl="VC for pre_injective_bv_to_int" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="pre_injective_bv_to_int&#39;vc.0" expl="VC for pre_injective_bv_to_int" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_injective_bv_to_int&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.32" steps="290361"/></proof>
   </goal>
   <goal name="pre_injective_bv_to_int&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.32" steps="290362"/></proof>
   </goal>
   <goal name="pre_injective_bv_to_int&#39;vc.0.2" expl="assertion" proved="true">
   <proof prover="7"><result status="valid" time="1.05" steps="371660"/></proof>
   </goal>
   <goal name="pre_injective_bv_to_int&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.37" steps="320869"/></proof>
   </goal>
   <goal name="pre_injective_bv_to_int&#39;vc.0.4" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.36" steps="320870"/></proof>
   </goal>
   <goal name="pre_injective_bv_to_int&#39;vc.0.5" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.35" steps="320982"/></proof>
   </goal>
   <goal name="pre_injective_bv_to_int&#39;vc.0.6" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.48" steps="320986"/></proof>
   </goal>
   <goal name="pre_injective_bv_to_int&#39;vc.0.7" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.36" steps="321191"/></proof>
   </goal>
   <goal name="pre_injective_bv_to_int&#39;vc.0.8" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.35" steps="321192"/></proof>
   </goal>
   <goal name="pre_injective_bv_to_int&#39;vc.0.9" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.80" steps="340808"/></proof>
   </goal>
   <goal name="pre_injective_bv_to_int&#39;vc.0.10" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.36" steps="321326"/></proof>
   </goal>
   <goal name="pre_injective_bv_to_int&#39;vc.0.11" expl="assertion" proved="true">
   <proof prover="7"><result status="valid" time="1.04" steps="371862"/></proof>
   </goal>
   <goal name="pre_injective_bv_to_int&#39;vc.0.12" expl="assertion" proved="true">
   <proof prover="7"><result status="valid" time="1.05" steps="371709"/></proof>
   </goal>
   <goal name="pre_injective_bv_to_int&#39;vc.0.13" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.50" steps="320884"/></proof>
   </goal>
   <goal name="pre_injective_bv_to_int&#39;vc.0.14" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.36" steps="320885"/></proof>
   </goal>
   <goal name="pre_injective_bv_to_int&#39;vc.0.15" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.35" steps="320997"/></proof>
   </goal>
   <goal name="pre_injective_bv_to_int&#39;vc.0.16" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.36" steps="321001"/></proof>
   </goal>
   <goal name="pre_injective_bv_to_int&#39;vc.0.17" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.38" steps="321239"/></proof>
   </goal>
   <goal name="pre_injective_bv_to_int&#39;vc.0.18" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.36" steps="321240"/></proof>
   </goal>
   <goal name="pre_injective_bv_to_int&#39;vc.0.19" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.81" steps="340850"/></proof>
   </goal>
   <goal name="pre_injective_bv_to_int&#39;vc.0.20" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.38" steps="321374"/></proof>
   </goal>
   <goal name="pre_injective_bv_to_int&#39;vc.0.21" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="1.07" steps="389834"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 <transf name="split_vc" proved="true" >
  <goal name="pre_injective_bv_to_int&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.32" steps="290361"/></proof>
  </goal>
  <goal name="pre_injective_bv_to_int&#39;vc.1" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.33" steps="290362"/></proof>
  </goal>
  <goal name="pre_injective_bv_to_int&#39;vc.2" expl="assertion" proved="true">
  <proof prover="7"><result status="valid" time="1.08" steps="371685"/></proof>
  </goal>
  <goal name="pre_injective_bv_to_int&#39;vc.3" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.37" steps="320891"/></proof>
  </goal>
  <goal name="pre_injective_bv_to_int&#39;vc.4" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.50" steps="320892"/></proof>
  </goal>
  <goal name="pre_injective_bv_to_int&#39;vc.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_injective_bv_to_int&#39;vc.5.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.36" steps="320995"/></proof>
   </goal>
   <goal name="pre_injective_bv_to_int&#39;vc.5.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.35" steps="320997"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="pre_injective_bv_to_int&#39;vc.6" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_injective_bv_to_int&#39;vc.6.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.38" steps="321004"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="pre_injective_bv_to_int&#39;vc.7" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.38" steps="321213"/></proof>
  </goal>
  <goal name="pre_injective_bv_to_int&#39;vc.8" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.38" steps="321214"/></proof>
  </goal>
  <goal name="pre_injective_bv_to_int&#39;vc.9" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_injective_bv_to_int&#39;vc.9.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.38" steps="321317"/></proof>
   </goal>
   <goal name="pre_injective_bv_to_int&#39;vc.9.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.62" steps="340815"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="pre_injective_bv_to_int&#39;vc.10" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_injective_bv_to_int&#39;vc.10.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.40" steps="321344"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="pre_injective_bv_to_int&#39;vc.11" expl="assertion" proved="true">
  <proof prover="7"><result status="valid" time="1.04" steps="371877"/></proof>
  </goal>
  <goal name="pre_injective_bv_to_int&#39;vc.12" expl="assertion" proved="true">
  <proof prover="7"><result status="valid" time="1.07" steps="371739"/></proof>
  </goal>
  <goal name="pre_injective_bv_to_int&#39;vc.13" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.37" steps="320907"/></proof>
  </goal>
  <goal name="pre_injective_bv_to_int&#39;vc.14" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.36" steps="320908"/></proof>
  </goal>
  <goal name="pre_injective_bv_to_int&#39;vc.15" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_injective_bv_to_int&#39;vc.15.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.37" steps="321011"/></proof>
   </goal>
   <goal name="pre_injective_bv_to_int&#39;vc.15.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.35" steps="321013"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="pre_injective_bv_to_int&#39;vc.16" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_injective_bv_to_int&#39;vc.16.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.37" steps="321020"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="pre_injective_bv_to_int&#39;vc.17" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.36" steps="321262"/></proof>
  </goal>
  <goal name="pre_injective_bv_to_int&#39;vc.18" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.38" steps="321263"/></proof>
  </goal>
  <goal name="pre_injective_bv_to_int&#39;vc.19" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_injective_bv_to_int&#39;vc.19.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.35" steps="321366"/></proof>
   </goal>
   <goal name="pre_injective_bv_to_int&#39;vc.19.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.76" steps="340857"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="pre_injective_bv_to_int&#39;vc.20" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_injective_bv_to_int&#39;vc.20.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.35" steps="321393"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="pre_injective_bv_to_int&#39;vc.21" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_injective_bv_to_int&#39;vc.21.0" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="1.08" steps="376419"/></proof>
   </goal>
   <goal name="pre_injective_bv_to_int&#39;vc.21.1" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="1.07" steps="376550"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="injective_bv_to_int&#39;vc" expl="VC for injective_bv_to_int" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="injective_bv_to_int&#39;vc.0" expl="VC for injective_bv_to_int" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="injective_bv_to_int&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.34" steps="290434"/></proof>
   </goal>
   <goal name="injective_bv_to_int&#39;vc.0.1" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="injective_bv_to_int&#39;vc.0.1.0" expl="precondition" proved="true">
    <transf name="case" proved="true" arg1="(bv_to_int e = bv_to_int e&#39;)">
     <goal name="injective_bv_to_int&#39;vc.0.1.0.0" expl="true case (precondition)" proved="true">
     <proof prover="7"><result status="valid" time="1.35" steps="477403"/></proof>
     </goal>
     <goal name="injective_bv_to_int&#39;vc.0.1.0.1" expl="false case (precondition)" proved="true">
     <proof prover="7"><result status="valid" time="0.51" steps="421737"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="injective_bv_to_int&#39;vc.0.2" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.51" steps="424068"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bijective_to_int&#39;vc" expl="VC for bijective_to_int" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="bijective_to_int&#39;vc.0" expl="VC for bijective_to_int" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bijective_to_int&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.54" steps="309754"/></proof>
   </goal>
   <goal name="bijective_to_int&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.85" steps="389880"/></proof>
   </goal>
   <goal name="bijective_to_int&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.10" steps="459247"/></proof>
   </goal>
   <goal name="bijective_to_int&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.71" steps="435617"/></proof>
   </goal>
   <goal name="bijective_to_int&#39;vc.0.4" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.27" steps="453594"/></proof>
   </goal>
   <goal name="bijective_to_int&#39;vc.0.5" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="bijective_to_int&#39;vc.0.5.0" expl="precondition" proved="true">
    <transf name="eliminate_if" proved="true" >
     <goal name="bijective_to_int&#39;vc.0.5.0.0" expl="VC for bijective_to_int" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="bijective_to_int&#39;vc.0.5.0.0.0" expl="precondition" proved="true">
      <proof prover="7"><result status="valid" time="1.51" steps="549945"/></proof>
      </goal>
      <goal name="bijective_to_int&#39;vc.0.5.0.0.1" expl="precondition" proved="true">
      <transf name="apply" proved="true" arg1="in_n_bvs">
       <goal name="bijective_to_int&#39;vc.0.5.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="1.17" steps="516765"/></proof>
       </goal>
       <goal name="bijective_to_int&#39;vc.0.5.0.0.1.1" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="false">
        <goal name="bijective_to_int&#39;vc.0.5.0.0.1.1.0" expl="asserted formula" proved="true">
        <transf name="replace" proved="true" arg1="(map (fun (y0:bitvec) -&gt; bv_to_int y0) (n_bvs n))" arg2="(to_fset 0 (power 2 n))" arg3="in" arg4="H1
">
         <goal name="bijective_to_int&#39;vc.0.5.0.0.1.1.0.0" expl="asserted formula" proved="true">
         <proof prover="7"><result status="valid" time="1.48" steps="533642"/></proof>
         </goal>
         <goal name="bijective_to_int&#39;vc.0.5.0.0.1.1.0.1" expl="equality hypothesis" proved="true">
         <proof prover="7"><result status="valid" time="1.49" steps="549565"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="bijective_to_int&#39;vc.0.5.0.0.1.1.1" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="0.79" steps="526947"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="bijective_to_int&#39;vc.0.5.1" expl="precondition" proved="true">
    <transf name="eliminate_if" proved="true" >
     <goal name="bijective_to_int&#39;vc.0.5.1.0" expl="VC for bijective_to_int" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="bijective_to_int&#39;vc.0.5.1.0.0" expl="precondition" proved="true">
      <proof prover="7"><result status="valid" time="1.50" steps="550117"/></proof>
      </goal>
      <goal name="bijective_to_int&#39;vc.0.5.1.0.1" expl="precondition" proved="true">
      <transf name="assert" proved="true" arg1="false">
       <goal name="bijective_to_int&#39;vc.0.5.1.0.1.0" expl="asserted formula" proved="true">
       <transf name="replace" proved="true" arg1="(map (fun (y0:bitvec) -&gt; bv_to_int y0) (n_bvs n))" arg2="(to_fset 0 (power 2 n))" arg3="in" arg4="H1
">
        <goal name="bijective_to_int&#39;vc.0.5.1.0.1.0.0" expl="asserted formula" proved="true">
        <proof prover="7"><result status="valid" time="1.46" steps="533642"/></proof>
        </goal>
        <goal name="bijective_to_int&#39;vc.0.5.1.0.1.0.1" expl="equality hypothesis" proved="true">
        <proof prover="7"><result status="valid" time="1.50" steps="549565"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="bijective_to_int&#39;vc.0.5.1.0.1.1" expl="precondition" proved="true">
       <proof prover="7"><result status="valid" time="0.63" steps="526947"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="bijective_to_int&#39;vc.0.6" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.84" steps="547502"/></proof>
   </goal>
   <goal name="bijective_to_int&#39;vc.0.7" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="1.29" steps="573413"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="injective_int_to_bv&#39;vc" expl="VC for injective_int_to_bv" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="injective_int_to_bv&#39;vc.0" expl="VC for injective_int_to_bv" proved="true">
  <proof prover="7"><result status="valid" time="1.14" steps="418293"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="n_bvs_card&#39;vc" expl="VC for n_bvs_card" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="n_bvs_card&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.42" steps="368287"/></proof>
  </goal>
  <goal name="n_bvs_card&#39;vc.1" expl="precondition" proved="true">
  <transf name="case" proved="true" arg1="(n=0)">
   <goal name="n_bvs_card&#39;vc.1.0" expl="true case (precondition)" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="n_bvs_card&#39;vc.1.0.0" expl="true case (precondition)" proved="true">
    <transf name="apply" proved="true" arg1="set_bijective1">
     <goal name="n_bvs_card&#39;vc.1.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="n_bvs_card&#39;vc.1.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="4.23" steps="1090919"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="n_bvs_card&#39;vc.1.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="n_bvs_card&#39;vc.1.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="1.41" steps="611159"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="n_bvs_card&#39;vc.1.0.0.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="n_bvs_card&#39;vc.1.0.0.2.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="e&#39;" arg2="0">
       <goal name="n_bvs_card&#39;vc.1.0.0.2.0.0" expl="apply premises" proved="true">
       <transf name="exists" proved="true" arg1="(make_bv (fun _ -&gt; 0) 0)">
        <goal name="n_bvs_card&#39;vc.1.0.0.2.0.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="n_bvs_card&#39;vc.1.0.0.2.0.0.0.0" proved="true">
         <proof prover="7"><result status="valid" time="1.46" steps="612020"/></proof>
         </goal>
         <goal name="n_bvs_card&#39;vc.1.0.0.2.0.0.0.1" proved="true">
         <proof prover="0"><result status="valid" time="6.21"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="n_bvs_card&#39;vc.1.0.0.2.0.1" expl="equality hypothesis" proved="true">
       <proof prover="7"><result status="valid" time="1.71" steps="643914"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="n_bvs_card&#39;vc.1.1" expl="false case (precondition)" proved="true">
   <proof prover="7"><result status="valid" time="1.58" steps="562694"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="n_bvs_card&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.29" steps="531369"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="concat_first_term_zero&#39;vc" expl="VC for concat_first_term_zero" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="concat_first_term_zero&#39;vc.0" expl="VC for concat_first_term_zero" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="concat_first_term_zero&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.43" steps="379059"/></proof>
   </goal>
   <goal name="concat_first_term_zero&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.06" steps="440473"/></proof>
   </goal>
   <goal name="concat_first_term_zero&#39;vc.0.2" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="1.34" steps="481882"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="concat_first_term_one&#39;vc" expl="VC for concat_first_term_one" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="concat_first_term_one&#39;vc.0" expl="VC for concat_first_term_one" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="concat_first_term_one&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.43" steps="379205"/></proof>
   </goal>
   <goal name="concat_first_term_one&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.24" steps="440611"/></proof>
   </goal>
   <goal name="concat_first_term_one&#39;vc.0.2" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="1.42" steps="481997"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bv_sum_to_int_sum&#39;vc" expl="VC for bv_sum_to_int_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_sum_to_int_sum&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.51" steps="429260"/></proof>
  </goal>
  <goal name="bv_sum_to_int_sum&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.61"/></proof>
  </goal>
  <goal name="bv_sum_to_int_sum&#39;vc.2" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(to_fset 0 (power 2 n))" arg2="(map (fun (y0:bitvec) -&gt; bv_to_int y0) (n_bvs n))
">
   <goal name="bv_sum_to_int_sum&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures">
    <goal name="bv_sum_to_int_sum&#39;vc.2.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="sum_eq">
     <goal name="bv_sum_to_int_sum&#39;vc.2.0.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="bv_sum_to_int_sum&#39;vc.2.0.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="bv_sum_to_int_sum&#39;vc.2.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="1.79" steps="585946"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="bv_sum_to_int_sum&#39;vc.2.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="set_equal">
    <goal name="bv_sum_to_int_sum&#39;vc.2.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="bv_sum_to_int_sum&#39;vc.2.1.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_map_mem">
      <goal name="bv_sum_to_int_sum&#39;vc.2.1.0.0.0" expl="apply premises" proved="true">
      <transf name="exists" proved="true" arg1="(int_to_bv e n)">
       <goal name="bv_sum_to_int_sum&#39;vc.2.1.0.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="bv_sum_to_int_sum&#39;vc.2.1.0.0.0.0.0" proved="true">
        <proof prover="7"><result status="valid" time="1.83" steps="640482"/></proof>
        </goal>
        <goal name="bv_sum_to_int_sum&#39;vc.2.1.0.0.0.0.1" proved="true">
        <proof prover="7"><result status="valid" time="1.76" steps="640476"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="bv_sum_to_int_sum&#39;vc.2.1.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="bv_sum_to_int_sum&#39;vc.2.1.1.0" expl="apply premises" proved="true">
     <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (y0:bitvec) -&gt; bv_to_int y0),(n_bvs n),e">
      <goal name="bv_sum_to_int_sum&#39;vc.2.1.1.0.0" expl="apply premises" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="bv_sum_to_int_sum&#39;vc.2.1.1.0.0.0" expl="destruct premise" proved="true">
       <transf name="apply" proved="true" arg1="H">
       </transf>
       </goal>
       <goal name="bv_sum_to_int_sum&#39;vc.2.1.1.0.0.1" expl="apply premises" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="bv_sum_to_int_sum&#39;vc.2.1.1.0.0.1.0" expl="apply premises" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="bv_sum_to_int_sum&#39;vc.2.1.1.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
          <goal name="bv_sum_to_int_sum&#39;vc.2.1.1.0.0.1.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="Hinst">
           <goal name="bv_sum_to_int_sum&#39;vc.2.1.1.0.0.1.0.0.0.0" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="n" arg2="(length a)">
            <goal name="bv_sum_to_int_sum&#39;vc.2.1.1.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="7"><result status="valid" time="2.15" steps="734500"/></proof>
            </goal>
            <goal name="bv_sum_to_int_sum&#39;vc.2.1.1.0.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
            <proof prover="7"><result status="valid" time="1.79" steps="691604"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="sum_concat&#39;vc" expl="VC for sum_concat" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="sum_concat&#39;vc.0" expl="VC for sum_concat" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sum_concat&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.86" steps="372229"/></proof>
   </goal>
   <goal name="sum_concat&#39;vc.0.1" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="sum_concat&#39;vc.0.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="sum_concat&#39;vc.0.1.0.0" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="1.03" steps="425926"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="sum_concat&#39;vc.0.1.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="sum_concat&#39;vc.0.1.1.0" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="1.05" steps="425926"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="sum_concat&#39;vc.0.2" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures">
    <goal name="sum_concat&#39;vc.0.2.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="mat_sum_comp" arg2="(n_bvs i),(fun bv -&gt; f @ concat_l bv 0),(fun bv -&gt; f @ concat_l bv 1)">
     <goal name="sum_concat&#39;vc.0.2.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="( mat_sum (n_bvs i)
  (fun (bv:bitvec) -&gt; add_mat (f @ concat_l bv 0) (f @ concat_l bv 1)))" arg2="(mat_sum (n_bvs i)
  (fun (k:bitvec) -&gt;
    add_mat ((fun (bv:bitvec) -&gt; f @ concat_l bv 0) @ k)
    ((fun (bv:bitvec) -&gt; f @ concat_l bv 1) @ k)))
">
      <goal name="sum_concat&#39;vc.0.2.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="Hinst">
       <goal name="sum_concat&#39;vc.0.2.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="add_mat_eq">
        <goal name="sum_concat&#39;vc.0.2.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="rows_mat_sum">
         <goal name="sum_concat&#39;vc.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.47"/></proof>
         </goal>
         <goal name="sum_concat&#39;vc.0.2.0.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_constant_size">
          <goal name="sum_concat&#39;vc.0.2.0.0.0.0.0.1.0" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="2.87" steps="932645"/></proof>
          </goal>
          <goal name="sum_concat&#39;vc.0.2.0.0.0.0.0.1.1" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="2.83" steps="930159"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="sum_concat&#39;vc.0.2.0.0.0.0.0.2" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="sum_concat&#39;vc.0.2.0.0.0.0.0.2.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="sum_concat&#39;vc.0.2.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="goal_comm">
            <goal name="sum_concat&#39;vc.0.2.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="rows_mat_sum">
             <goal name="sum_concat&#39;vc.0.2.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="7"><result status="valid" time="1.34" steps="471400"/></proof>
             </goal>
             <goal name="sum_concat&#39;vc.0.2.0.0.0.0.0.2.0.0.0.1" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="set_constant_size">
              <goal name="sum_concat&#39;vc.0.2.0.0.0.0.0.2.0.0.0.1.0" expl="apply premises" proved="true">
              <proof prover="7"><result status="valid" time="2.93" steps="946720"/></proof>
              </goal>
              <goal name="sum_concat&#39;vc.0.2.0.0.0.0.0.2.0.0.0.1.1" expl="apply premises" proved="true">
              <proof prover="7"><result status="valid" time="3.01" steps="944122"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="sum_concat&#39;vc.0.2.0.0.0.0.0.2.0.0.0.2" expl="apply premises" proved="true">
             <proof prover="7"><result status="valid" time="1.44" steps="478242"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="sum_concat&#39;vc.0.2.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="columns_mat_sum">
         <goal name="sum_concat&#39;vc.0.2.0.0.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.49"/></proof>
         </goal>
         <goal name="sum_concat&#39;vc.0.2.0.0.0.0.1.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_constant_size">
          <goal name="sum_concat&#39;vc.0.2.0.0.0.0.1.1.0" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="2.93" steps="932645"/></proof>
          </goal>
          <goal name="sum_concat&#39;vc.0.2.0.0.0.0.1.1.1" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="2.92" steps="930159"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="sum_concat&#39;vc.0.2.0.0.0.0.1.2" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="sum_concat&#39;vc.0.2.0.0.0.0.1.2.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="sum_concat&#39;vc.0.2.0.0.0.0.1.2.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="goal_comm">
            <goal name="sum_concat&#39;vc.0.2.0.0.0.0.1.2.0.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="columns_mat_sum">
             <goal name="sum_concat&#39;vc.0.2.0.0.0.0.1.2.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="7"><result status="valid" time="1.32" steps="471400"/></proof>
             </goal>
             <goal name="sum_concat&#39;vc.0.2.0.0.0.0.1.2.0.0.0.1" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="set_constant_size">
              <goal name="sum_concat&#39;vc.0.2.0.0.0.0.1.2.0.0.0.1.0" expl="apply premises" proved="true">
              <proof prover="7"><result status="valid" time="2.82" steps="946720"/></proof>
              </goal>
              <goal name="sum_concat&#39;vc.0.2.0.0.0.0.1.2.0.0.0.1.1" expl="apply premises" proved="true">
              <proof prover="7"><result status="valid" time="2.86" steps="944122"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="sum_concat&#39;vc.0.2.0.0.0.0.1.2.0.0.0.2" expl="apply premises" proved="true">
             <proof prover="7"><result status="valid" time="1.22" steps="477905"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="sum_concat&#39;vc.0.2.0.0.0.0.2" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="((i + 1) - 1)" arg2="i">
         <goal name="sum_concat&#39;vc.0.2.0.0.0.0.2.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
         <goal name="sum_concat&#39;vc.0.2.0.0.0.0.2.1" expl="equality hypothesis" proved="true">
         <proof prover="7"><result status="valid" time="0.43" steps="356997"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="sum_concat&#39;vc.0.2.0.0.0.0.3" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="((i + 1) - 1)" arg2="i">
         <goal name="sum_concat&#39;vc.0.2.0.0.0.0.3.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
         <goal name="sum_concat&#39;vc.0.2.0.0.0.0.3.1" expl="equality hypothesis" proved="true">
         <proof prover="7"><result status="valid" time="0.42" steps="356997"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="sum_concat&#39;vc.0.2.0.0.0.1" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="sum_concat&#39;vc.0.2.0.0.0.1.0" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="2.93" steps="932645"/></proof>
        </goal>
        <goal name="sum_concat&#39;vc.0.2.0.0.0.1.1" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="2.83" steps="930159"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="sum_concat&#39;vc.0.2.0.0.0.2" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="sum_concat&#39;vc.0.2.0.0.0.2.0" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="2.85" steps="932667"/></proof>
        </goal>
        <goal name="sum_concat&#39;vc.0.2.0.0.0.2.1" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="2.86" steps="930181"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="sum_concat&#39;vc.0.2.0.0.0.3" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_s_rows">
        <goal name="sum_concat&#39;vc.0.2.0.0.0.3.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="sum_concat&#39;vc.0.2.0.0.0.3.0.0" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="2.83" steps="932645"/></proof>
         </goal>
         <goal name="sum_concat&#39;vc.0.2.0.0.0.3.0.1" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="2.86" steps="930159"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="sum_concat&#39;vc.0.2.0.0.0.3.1" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="goal_comm">
         <goal name="sum_concat&#39;vc.0.2.0.0.0.3.1.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="sum_concat&#39;vc.0.2.0.0.0.3.1.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="set_s_rows">
           <goal name="sum_concat&#39;vc.0.2.0.0.0.3.1.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="set_constant_size">
            <goal name="sum_concat&#39;vc.0.2.0.0.0.3.1.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="7"><result status="valid" time="2.88" steps="932667"/></proof>
            </goal>
            <goal name="sum_concat&#39;vc.0.2.0.0.0.3.1.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="7"><result status="valid" time="2.88" steps="930181"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="sum_concat&#39;vc.0.2.0.0.0.3.1.0.0.1" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="1.24" steps="427168"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="sum_concat&#39;vc.0.2.0.0.0.4" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_s_columns">
        <goal name="sum_concat&#39;vc.0.2.0.0.0.4.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="sum_concat&#39;vc.0.2.0.0.0.4.0.0" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="2.87" steps="932645"/></proof>
         </goal>
         <goal name="sum_concat&#39;vc.0.2.0.0.0.4.0.1" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="2.85" steps="930159"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="sum_concat&#39;vc.0.2.0.0.0.4.1" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="goal_comm">
         <goal name="sum_concat&#39;vc.0.2.0.0.0.4.1.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_s_columns">
          <goal name="sum_concat&#39;vc.0.2.0.0.0.4.1.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="set_constant_size">
           <goal name="sum_concat&#39;vc.0.2.0.0.0.4.1.0.0.0" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="2.89" steps="932667"/></proof>
           </goal>
           <goal name="sum_concat&#39;vc.0.2.0.0.0.4.1.0.0.1" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="2.90" steps="930181"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="sum_concat&#39;vc.0.2.0.0.0.4.1.0.1" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="2.67" steps="786249"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="sum_concat&#39;vc.0.2.0.0.0.5" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.48"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="sum_concat&#39;vc.0.2.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="mat_sum_eq">
       <goal name="sum_concat&#39;vc.0.2.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.48"/></proof>
       </goal>
       <goal name="sum_concat&#39;vc.0.2.0.0.1.1" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="sum_concat&#39;vc.0.2.0.0.1.1.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="sum_concat&#39;vc.0.2.0.0.1.1.0.0" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="1.36" steps="475229"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="sum_concat&#39;vc.0.2.0.0.1.1.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="sum_concat&#39;vc.0.2.0.0.1.1.1.0" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="1.35" steps="475057"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="sum_concat&#39;vc.0.2.0.0.1.2" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="sum_concat&#39;vc.0.2.0.0.1.2.0" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="2.93" steps="909628"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="geometric_series_bv&#39;vc" expl="VC for geometric_series_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="geometric_series_bv&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.94" steps="398824"/></proof>
  </goal>
  <goal name="geometric_series_bv&#39;vc.1" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="1.28" steps="430404"/></proof>
  </goal>
  <goal name="geometric_series_bv&#39;vc.2" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="1.33" steps="451275"/></proof>
  </goal>
  <goal name="geometric_series_bv&#39;vc.3" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.47" steps="393052"/></proof>
  </goal>
  <goal name="geometric_series_bv&#39;vc.4" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures1">
   <goal name="geometric_series_bv&#39;vc.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures">
    <goal name="geometric_series_bv&#39;vc.4.0.0" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="0.46" steps="393129"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="geometric_series_bv_init_one&#39;vc" expl="VC for geometric_series_bv_init_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="geometric_series_bv_init_one&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.36" steps="304808"/></proof>
  </goal>
  <goal name="geometric_series_bv_init_one&#39;vc.1" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.34" steps="304809"/></proof>
  </goal>
  <goal name="geometric_series_bv_init_one&#39;vc.2" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(sum (n_bvs n) (fun (i:bitvec) -&gt; cpower q (bv_to_int i)))" arg2="(sum (n_bvs n) (fun (i:bitvec) -&gt; c_one *.  cpower q (bv_to_int i)))
">
   <goal name="geometric_series_bv_init_one&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.99" steps="400672"/></proof>
   </goal>
   <goal name="geometric_series_bv_init_one&#39;vc.2.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="sum_eq">
    <goal name="geometric_series_bv_init_one&#39;vc.2.1.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="geometric_series_bv_init_one&#39;vc.2.1.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="geometric_series_bv_init_one&#39;vc.2.1.0.0.0" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="0.99" steps="422743"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Bit_vector_inversions" proved="true">
 <goal name="bv_inversion&#39;vc" expl="VC for bv_inversion" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_inversion&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bv_inversion&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="3.34" steps="948745"/></proof>
   </goal>
   <goal name="bv_inversion&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="3.36" steps="948616"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="bv_inversion&#39;vc.1" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.82" steps="358844"/></proof>
  </goal>
  <goal name="bv_inversion&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.39" steps="312843"/></proof>
  </goal>
  <goal name="bv_inversion&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="3.57" steps="1034408"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bv_inversion_value&#39;vc" expl="VC for bv_inversion_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_inversion_value&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="bv_inversion_value&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="2.69" steps="786447"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bv_inversion_invol&#39;vc" expl="VC for bv_inversion_invol" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_inversion_invol&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_bv">
   <goal name="bv_inversion_invol&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="7"><result status="valid" time="0.91" steps="331482"/></proof>
   </goal>
   <goal name="bv_inversion_invol&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="bv_inversion_invol&#39;vc.0.1.0" expl="apply premises" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="bv_inversion_invol&#39;vc.0.1.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="bv_inversion&#39;def">
      <goal name="bv_inversion_invol&#39;vc.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="bv_inversion&#39;def">
       <goal name="bv_inversion_invol&#39;vc.0.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
        <goal name="bv_inversion_invol&#39;vc.0.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="bv_inversion_invol&#39;vc.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
          <goal name="bv_inversion_invol&#39;vc.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="make_bv_length">
           <goal name="bv_inversion_invol&#39;vc.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="1.02" steps="361141"/></proof>
           </goal>
           <goal name="bv_inversion_invol&#39;vc.0.1.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="7"><result status="valid" time="2.78" steps="797312"/></proof>
           </goal>
           <goal name="bv_inversion_invol&#39;vc.0.1.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="7"><result status="valid" time="0.93" steps="329842"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="bv_inversion_invol&#39;vc.0.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="2.77" steps="797312"/></proof>
          </goal>
          <goal name="bv_inversion_invol&#39;vc.0.1.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <transf name="rewrite" proved="true" arg1="make_bv_length">
           <goal name="bv_inversion_invol&#39;vc.0.1.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
           <proof prover="7"><result status="valid" time="0.73" steps="330037"/></proof>
           </goal>
           <goal name="bv_inversion_invol&#39;vc.0.1.0.0.0.0.0.0.2.1" expl="rewrite premises" proved="true">
           <proof prover="7"><result status="valid" time="2.74" steps="797312"/></proof>
           </goal>
           <goal name="bv_inversion_invol&#39;vc.0.1.0.0.0.0.0.0.2.2" expl="rewrite premises" proved="true">
           <proof prover="7"><result status="valid" time="0.88" steps="329842"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="bv_inversion_invol&#39;vc.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="2.91" steps="834240"/></proof>
        </goal>
        <goal name="bv_inversion_invol&#39;vc.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="make_bv_length">
         <goal name="bv_inversion_invol&#39;vc.0.1.0.0.0.0.2.0" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="0.73" steps="330014"/></proof>
         </goal>
         <goal name="bv_inversion_invol&#39;vc.0.1.0.0.0.0.2.1" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="2.72" steps="797312"/></proof>
         </goal>
         <goal name="bv_inversion_invol&#39;vc.0.1.0.0.0.0.2.2" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="0.72" steps="329842"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="int_bit_inversion&#39;vc" expl="VC for int_bit_inversion" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_bit_inversion&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.53" steps="305915"/></proof>
  </goal>
  <goal name="int_bit_inversion&#39;vc.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="int_bit_inversion&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.38" steps="313290"/></proof>
   </goal>
   <goal name="int_bit_inversion&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.82" steps="362929"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="int_bit_inversion_ext&#39;vc" expl="VC for int_bit_inversion_ext" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_bit_inversion_ext&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.53" steps="306093"/></proof>
  </goal>
  <goal name="int_bit_inversion_ext&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.82" steps="363769"/></proof>
  </goal>
  <goal name="int_bit_inversion_ext&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.40" steps="319198"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="int_bit_inversion_invol&#39;vc" expl="VC for int_bit_inversion_invol" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_bit_inversion_invol&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="int_bit_inversion_invol&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="int_bit_inversion&#39;def">
    <goal name="int_bit_inversion_invol&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="int_bit_inversion&#39;def">
     <goal name="int_bit_inversion_invol&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="7"><result status="valid" time="0.89" steps="384672"/></proof>
     </goal>
     <goal name="int_bit_inversion_invol&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.34" steps="287990"/></proof>
     </goal>
     <goal name="int_bit_inversion_invol&#39;vc.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.35" steps="287997"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="int_bit_inversion_invol&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.36" steps="287990"/></proof>
    </goal>
    <goal name="int_bit_inversion_invol&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.70" steps="329965"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="int_bit_inversion_inj&#39;vc" expl="VC for int_bit_inversion_inj" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_bit_inversion_inj&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.34"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="int_bit_inversion_ext_invol&#39;vc" expl="VC for int_bit_inversion_ext_invol" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_bit_inversion_ext_invol&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="int_bit_inversion_ext_invol&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="int_bit_inversion_ext_invol&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(i = power 2 n)">
     <goal name="int_bit_inversion_ext_invol&#39;vc.0.0.0.0" expl="true case (postcondition)" proved="true">
     <proof prover="7"><result status="valid" time="1.05" steps="378729"/></proof>
     </goal>
     <goal name="int_bit_inversion_ext_invol&#39;vc.0.0.0.1" expl="false case (postcondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="int_bit_inversion_ext&#39;def">
      <goal name="int_bit_inversion_ext_invol&#39;vc.0.0.0.1.0" expl="false case (postcondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="int_bit_inversion_ext&#39;def">
       <goal name="int_bit_inversion_ext_invol&#39;vc.0.0.0.1.0.0" expl="false case (postcondition)" proved="true">
       <proof prover="7"><result status="valid" time="1.21" steps="421833"/></proof>
       </goal>
       <goal name="int_bit_inversion_ext_invol&#39;vc.0.0.0.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="0.39" steps="336590"/></proof>
       </goal>
       <goal name="int_bit_inversion_ext_invol&#39;vc.0.0.0.1.0.2" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="0.50" steps="336595"/></proof>
       </goal>
       <goal name="int_bit_inversion_ext_invol&#39;vc.0.0.0.1.0.3" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="0.37" steps="336586"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="int_bit_inversion_ext_invol&#39;vc.0.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.36" steps="336590"/></proof>
      </goal>
      <goal name="int_bit_inversion_ext_invol&#39;vc.0.0.0.1.2" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="1.03" steps="378546"/></proof>
      </goal>
      <goal name="int_bit_inversion_ext_invol&#39;vc.0.0.0.1.3" expl="rewrite premises" proved="true">
      <transf name="case" proved="true" arg1="(int_bit_inversion_ext i n = power 2 n)
">
       <goal name="int_bit_inversion_ext_invol&#39;vc.0.0.0.1.3.0" expl="rewrite premises (true case)" proved="true">
       <transf name="assert" proved="true" arg1="(i = power 2 n)">
        <goal name="int_bit_inversion_ext_invol&#39;vc.0.0.0.1.3.0.0" expl="asserted formula" proved="true">
        <proof prover="7"><result status="valid" time="2.68" steps="752450"/></proof>
        </goal>
        <goal name="int_bit_inversion_ext_invol&#39;vc.0.0.0.1.3.0.1" expl="rewrite premises (true case)" proved="true">
        <proof prover="7"><result status="valid" time="0.38" steps="336609"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="int_bit_inversion_ext_invol&#39;vc.0.0.0.1.3.1" expl="rewrite premises (false case)" proved="true">
       <proof prover="7"><result status="valid" time="0.40" steps="336608"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="int_bit_inversion_onebit&#39;vc" expl="VC for int_bit_inversion_onebit" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_bit_inversion_onebit&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="int_bit_inversion&#39;def">
   <goal name="int_bit_inversion_onebit&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
    <goal name="int_bit_inversion_onebit&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ind_isum_one">
     <goal name="int_bit_inversion_onebit&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="int_bit_inversion_onebit&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="mult_one">
       <goal name="int_bit_inversion_onebit&#39;vc.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="bv_inversion_value">
        <goal name="int_bit_inversion_onebit&#39;vc.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <proof prover="7"><result status="valid" time="3.38" steps="965981"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="int_bit_inversion_onebit&#39;vc.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="1.21" steps="418811"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="int_bit_inversion_onebit&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.93" steps="331565"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="int_bit_inversion_onebit&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="7"><result status="valid" time="0.32" steps="287421"/></proof>
   </goal>
   <goal name="int_bit_inversion_onebit&#39;vc.0.2" expl="rewrite premises" proved="true">
   <proof prover="7"><result status="valid" time="0.74" steps="307497"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="int_bit_inversion_zero&#39;vc" expl="VC for int_bit_inversion_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_bit_inversion_zero&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="int_bit_inversion&#39;def">
   <goal name="int_bit_inversion_zero&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(bv_inversion (int_to_bv i n))" arg2="( (int_to_bv i n))
">
    <goal name="int_bit_inversion_zero&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="0.92" steps="331687"/></proof>
    </goal>
    <goal name="int_bit_inversion_zero&#39;vc.0.0.1" expl="equality hypothesis" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="int_bit_inversion_zero&#39;vc.0.0.1.0" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="bv_inversion&#39;def">
      <goal name="int_bit_inversion_zero&#39;vc.0.0.1.0.0" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="set_equal_bv">
       <goal name="int_bit_inversion_zero&#39;vc.0.0.1.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="make_bv_length">
        <goal name="int_bit_inversion_zero&#39;vc.0.0.1.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="0.33" steps="288548"/></proof>
        </goal>
        <goal name="int_bit_inversion_zero&#39;vc.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="2.60" steps="757129"/></proof>
        </goal>
        <goal name="int_bit_inversion_zero&#39;vc.0.0.1.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="0.91" steps="330993"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="int_bit_inversion_zero&#39;vc.0.0.1.0.0.1" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="make_bv_length">
        <goal name="int_bit_inversion_zero&#39;vc.0.0.1.0.0.1.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="int_bit_inversion_zero&#39;vc.0.0.1.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="assert_make_bv">
          <goal name="int_bit_inversion_zero&#39;vc.0.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="2.74" steps="774285"/></proof>
          </goal>
          <goal name="int_bit_inversion_zero&#39;vc.0.0.1.0.0.1.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="2.67" steps="757343"/></proof>
          </goal>
          <goal name="int_bit_inversion_zero&#39;vc.0.0.1.0.0.1.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="0.57" steps="308109"/></proof>
          </goal>
         </transf>
         <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
          <goal name="int_bit_inversion_zero&#39;vc.0.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="int_bit_inversion_zero&#39;vc.0.0.1.0.0.1.0.0.0.0" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="i1" arg2="0">
            <goal name="int_bit_inversion_zero&#39;vc.0.0.1.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="int_to_bv_zero">
             <goal name="int_bit_inversion_zero&#39;vc.0.0.1.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="int_to_bv_zero">
              <goal name="int_bit_inversion_zero&#39;vc.0.0.1.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="7"><result status="valid" time="0.34" steps="288584"/></proof>
              </goal>
              <goal name="int_bit_inversion_zero&#39;vc.0.0.1.0.0.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="7"><result status="valid" time="0.96" steps="331932"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="int_bit_inversion_zero&#39;vc.0.0.1.0.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="7"><result status="valid" time="0.91" steps="331933"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="int_bit_inversion_zero&#39;vc.0.0.1.0.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
            <proof prover="7"><result status="valid" time="0.34" steps="288593"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="int_bit_inversion_zero&#39;vc.0.0.1.0.0.1.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="2.42" steps="757343"/></proof>
          </goal>
          <goal name="int_bit_inversion_zero&#39;vc.0.0.1.0.0.1.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="0.35" steps="288595"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="int_bit_inversion_zero&#39;vc.0.0.1.0.0.1.1" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="2.66" steps="757129"/></proof>
        </goal>
        <goal name="int_bit_inversion_zero&#39;vc.0.0.1.0.0.1.2" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="0.72" steps="330993"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="int_bit_inversion_zero&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="7"><result status="valid" time="0.33" steps="287503"/></proof>
   </goal>
   <goal name="int_bit_inversion_zero&#39;vc.0.2" expl="rewrite premises" proved="true">
   <proof prover="7"><result status="valid" time="0.92" steps="330816"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_int_sum_inversion&#39;vc" expl="VC for bv_to_int_sum_inversion" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_to_int_sum_inversion&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.38" steps="314463"/></proof>
  </goal>
  <goal name="bv_to_int_sum_inversion&#39;vc.1" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="int_bit_inversion&#39;def">
   <goal name="bv_to_int_sum_inversion&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
    <goal name="bv_to_int_sum_inversion&#39;vc.1.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
     <goal name="bv_to_int_sum_inversion&#39;vc.1.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="bv_to_int_sum_inversion&#39;vc.1.0.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="bv_to_int_sum_inversion&#39;vc.1.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.33" steps="7327"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="bv_to_int_sum_inversion&#39;vc.1.0.0.1" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="0.37" steps="314476"/></proof>
     </goal>
     <goal name="bv_to_int_sum_inversion&#39;vc.1.0.0.2" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="0.62" steps="333798"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="bv_to_int_sum_inversion&#39;vc.1.1" expl="rewrite premises" proved="true">
   <proof prover="7"><result status="valid" time="0.37" steps="314480"/></proof>
   </goal>
   <goal name="bv_to_int_sum_inversion&#39;vc.1.2" expl="rewrite premises" proved="true">
   <proof prover="7"><result status="valid" time="0.83" steps="363991"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_int_sum_inversion_inc&#39;vc" expl="VC for bv_to_int_sum_inversion_inc" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="bv_to_int_sum_inversion_inc&#39;vc.0" expl="VC for bv_to_int_sum_inversion_inc" proved="true">
  <proof prover="7"><result status="valid" time="3.53" steps="1028601"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inversion_to_int_comm&#39;vc" expl="VC for inversion_to_int_comm" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="inversion_to_int_comm&#39;vc.0" expl="VC for inversion_to_int_comm" proved="true">
  <proof prover="7"><result status="valid" time="1.30" steps="434073"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bv_inversion_sum&#39;vc" expl="VC for bv_inversion_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_inversion_sum&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.69" steps="307068"/></proof>
  </goal>
  <goal name="bv_inversion_sum&#39;vc.1" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.76" steps="334272"/></proof>
  </goal>
  <goal name="bv_inversion_sum&#39;vc.2" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(int_bit_inversion i n)" arg2="(int_bit_inversion (bv_to_int (int_to_bv i n))  (length (int_to_bv i n)))">
   <goal name="bv_inversion_sum&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures">
    <goal name="bv_inversion_sum&#39;vc.2.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
     <goal name="bv_inversion_sum&#39;vc.2.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="bv_inversion_sum&#39;vc.2.0.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="bv_inversion_sum&#39;vc.2.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.38"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="bv_inversion_sum&#39;vc.2.0.0.1" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="0.36" steps="314998"/></proof>
     </goal>
     <goal name="bv_inversion_sum&#39;vc.2.0.0.2" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="0.37" steps="315000"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="bv_inversion_sum&#39;vc.2.1" expl="equality hypothesis" proved="true">
   <proof prover="7"><result status="valid" time="1.00" steps="364309"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_int_inversion_sum&#39;vc" expl="VC for bv_to_int_inversion_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_to_int_inversion_sum&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="bv_to_int_inversion_sum&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
    <goal name="bv_to_int_inversion_sum&#39;vc.0.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="bv_to_int_inversion_sum&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="bv_to_int_inversion_sum&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.41"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="bv_to_int_inversion_sum&#39;vc.0.0.1" expl="apply premises" proved="true">
    <proof prover="7"><result status="valid" time="0.38" steps="315097"/></proof>
    </goal>
    <goal name="bv_to_int_inversion_sum&#39;vc.0.0.2" expl="apply premises" proved="true">
    <proof prover="7"><result status="valid" time="0.38" steps="315099"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_int_bit_inversion&#39;vc" expl="VC for bv_to_int_bit_inversion" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="bv_to_int_bit_inversion&#39;vc.0" expl="VC for bv_to_int_bit_inversion" proved="true">
  <proof prover="7"><result status="valid" time="0.97" steps="366099"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_int_inversion_sum_inc&#39;vc" expl="VC for bv_to_int_inversion_sum_inc" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="bv_to_int_inversion_sum_inc&#39;vc.0" expl="VC for bv_to_int_inversion_sum_inc" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bv_to_int_inversion_sum_inc&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.34" steps="288645"/></proof>
   </goal>
   <goal name="bv_to_int_inversion_sum_inc&#39;vc.0.1" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="bv_to_int_bit_inversion">
    <goal name="bv_to_int_inversion_sum_inc&#39;vc.0.1.0" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="1.01" steps="364576"/></proof>
    </goal>
    <goal name="bv_to_int_inversion_sum_inc&#39;vc.0.1.1" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.38" steps="315225"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bv_m_to_int_bit_inversion&#39;vc" expl="VC for bv_m_to_int_bit_inversion" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_m_to_int_bit_inversion&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.70" steps="307717"/></proof>
  </goal>
  <goal name="bv_m_to_int_bit_inversion&#39;vc.1" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.76" steps="335064"/></proof>
  </goal>
  <goal name="bv_m_to_int_bit_inversion&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.78" steps="335088"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="int_bit_inversion_tail_bits&#39;vc" expl="VC for int_bit_inversion_tail_bits" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="int_bit_inversion_tail_bits&#39;vc.0" expl="VC for int_bit_inversion_tail_bits" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="int_bit_inversion_tail_bits&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.54" steps="307866"/></proof>
   </goal>
   <goal name="int_bit_inversion_tail_bits&#39;vc.0.1" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="int_bit_inversion_tail_bits&#39;vc.0.1.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.35" steps="288955"/></proof>
    </goal>
    <goal name="int_bit_inversion_tail_bits&#39;vc.0.1.1" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.35" steps="288970"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="int_bit_inversion_tail_bits&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.32" steps="289010"/></proof>
   </goal>
   <goal name="int_bit_inversion_tail_bits&#39;vc.0.3" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="int_bit_inversion_tail_bits&#39;vc.0.3.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.35" steps="289014"/></proof>
    </goal>
    <goal name="int_bit_inversion_tail_bits&#39;vc.0.3.1" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.90" steps="333992"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="int_bit_inversion_tail_bits&#39;vc.0.4" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.35" steps="315581"/></proof>
   </goal>
   <goal name="int_bit_inversion_tail_bits&#39;vc.0.5" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="int_bit_inversion_tail_bits&#39;vc.0.5.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.37" steps="315585"/></proof>
    </goal>
    <goal name="int_bit_inversion_tail_bits&#39;vc.0.5.1" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.38" steps="315600"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="int_bit_inversion_tail_bits&#39;vc.0.6" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures1">
    <goal name="int_bit_inversion_tail_bits&#39;vc.0.6.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ind_isum_transl_plus_one">
     <goal name="int_bit_inversion_tail_bits&#39;vc.0.6.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
      <goal name="int_bit_inversion_tail_bits&#39;vc.0.6.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="int_bit_inversion_tail_bits&#39;vc.0.6.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="int_to_bv_tail">
        <goal name="int_bit_inversion_tail_bits&#39;vc.0.6.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="tail&#39;def">
         <goal name="int_bit_inversion_tail_bits&#39;vc.0.6.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(length (int_to_bv i n))" arg2="n
">
          <goal name="int_bit_inversion_tail_bits&#39;vc.0.6.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="int_bit_inversion_tail_bits&#39;vc.0.6.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
            <goal name="int_bit_inversion_tail_bits&#39;vc.0.6.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="int_bit_inversion_tail_bits&#39;vc.0.6.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="7"><result status="valid" time="0.38" steps="315757"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="int_bit_inversion_tail_bits&#39;vc.0.6.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="7"><result status="valid" time="3.64" steps="1013952"/></proof>
            </goal>
            <goal name="int_bit_inversion_tail_bits&#39;vc.0.6.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="7"><result status="valid" time="0.38" steps="315710"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="int_bit_inversion_tail_bits&#39;vc.0.6.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="7"><result status="valid" time="1.07" steps="366450"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="int_bit_inversion_tail_bits&#39;vc.0.6.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="1.01" steps="366735"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="int_bit_inversion_tail_bits&#39;vc.0.6.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="0.37" steps="315657"/></proof>
        </goal>
        <goal name="int_bit_inversion_tail_bits&#39;vc.0.6.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="0.37" steps="315664"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="int_bit_inversion_tail_bits&#39;vc.0.6.0.0.1" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="0.36" steps="315615"/></proof>
      </goal>
      <goal name="int_bit_inversion_tail_bits&#39;vc.0.6.0.0.2" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="0.49" steps="315615"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="tail_bits_int_bit_inversion&#39;vc" expl="VC for tail_bits_int_bit_inversion" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="tail_bits_int_bit_inversion&#39;vc.0" expl="VC for tail_bits_int_bit_inversion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="tail_bits_int_bit_inversion&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.69" steps="308152"/></proof>
   </goal>
   <goal name="tail_bits_int_bit_inversion&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.47" steps="316112"/></proof>
   </goal>
   <goal name="tail_bits_int_bit_inversion&#39;vc.0.2" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="tail_bits_int_bit_inversion&#39;vc.0.2.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.36" steps="316116"/></proof>
    </goal>
    <goal name="tail_bits_int_bit_inversion&#39;vc.0.2.1" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.99" steps="364892"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="tail_bits_int_bit_inversion&#39;vc.0.3" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="tail_bits_sum">
    <goal name="tail_bits_int_bit_inversion&#39;vc.0.3.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="int_bit_inversion&#39;def">
     <goal name="tail_bits_int_bit_inversion&#39;vc.0.3.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="ind_isum_eq">
      <goal name="tail_bits_int_bit_inversion&#39;vc.0.3.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="tail_bits_int_bit_inversion&#39;vc.0.3.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="tail_bits_int_bit_inversion&#39;vc.0.3.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="int_to_bv_to_int_gen">
         <goal name="tail_bits_int_bit_inversion&#39;vc.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="int_to_bv_to_int_gen">
          <goal name="tail_bits_int_bit_inversion&#39;vc.0.3.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.38"/></proof>
          </goal>
          <goal name="tail_bits_int_bit_inversion&#39;vc.0.3.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="0.74" steps="335793"/></proof>
          </goal>
          <goal name="tail_bits_int_bit_inversion&#39;vc.0.3.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="0.36" steps="316279"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="tail_bits_int_bit_inversion&#39;vc.0.3.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="0.99" steps="367577"/></proof>
         </goal>
         <goal name="tail_bits_int_bit_inversion&#39;vc.0.3.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="0.97" steps="367409"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="tail_bits_int_bit_inversion&#39;vc.0.3.0.1" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.72" steps="335706"/></proof>
     </goal>
     <goal name="tail_bits_int_bit_inversion&#39;vc.0.3.0.2" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.98" steps="366418"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="tail_bits_int_bit_inversion&#39;vc.0.3.1" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.35" steps="316234"/></proof>
    </goal>
    <goal name="tail_bits_int_bit_inversion&#39;vc.0.3.2" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.94" steps="367095"/></proof>
    </goal>
    <goal name="tail_bits_int_bit_inversion&#39;vc.0.3.3" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="tail_bits_int_bit_inversion&#39;vc.0.3.3.0" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="1.03" steps="367095"/></proof>
     </goal>
     <goal name="tail_bits_int_bit_inversion&#39;vc.0.3.3.1" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.99" steps="367813"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="int_bit_inversion_ht&#39;vc" expl="VC for int_bit_inversion_ht" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_bit_inversion_ht&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="int_bit_inversion_ht&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.33" steps="289629"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="int_bit_inversion_ht&#39;vc.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="int_bit_inversion_ht&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.33" steps="289633"/></proof>
   </goal>
   <goal name="int_bit_inversion_ht&#39;vc.1.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.32" steps="289648"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="int_bit_inversion_ht&#39;vc.2" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.71" steps="335586"/></proof>
  </goal>
  <goal name="int_bit_inversion_ht&#39;vc.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="int_bit_inversion_ht&#39;vc.3.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.48" steps="316140"/></proof>
   </goal>
   <goal name="int_bit_inversion_ht&#39;vc.3.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.36" steps="316155"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="int_bit_inversion_ht&#39;vc.4" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.76" steps="335765"/></proof>
  </goal>
  <goal name="int_bit_inversion_ht&#39;vc.5" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.78" steps="335879"/></proof>
  </goal>
  <goal name="int_bit_inversion_ht&#39;vc.6" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures2">
   <goal name="int_bit_inversion_ht&#39;vc.6.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures1">
    <goal name="int_bit_inversion_ht&#39;vc.6.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(ind_isum
  (fun (k:int) -&gt;
    (getbv (int_to_bv i n) @ ((n - k) - 1)) * power 2 ((n - 1) - k))
  0 n)" arg2="(ind_isum
  (fun (k:int) -&gt;
    (getbv (int_to_bv i n) @ ((n - k) - 1)) * power 2 ((n - 1) - k))
  0 ((n-1)+1))">
     <goal name="int_bit_inversion_ht&#39;vc.6.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="ind_isum_right_extension">
      <goal name="int_bit_inversion_ht&#39;vc.6.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="add_eq">
       <goal name="int_bit_inversion_ht&#39;vc.6.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="ind_isum_transl_plus_one">
        <goal name="int_bit_inversion_ht&#39;vc.6.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="ind_isum_scal_rev">
         <goal name="int_bit_inversion_ht&#39;vc.6.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
          <goal name="int_bit_inversion_ht&#39;vc.6.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="int_bit_inversion_ht&#39;vc.6.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="int_bit_inversion_ht&#39;vc.6.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="0.40"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="int_bit_inversion_ht&#39;vc.6.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="0.51" steps="316731"/></proof>
          </goal>
          <goal name="int_bit_inversion_ht&#39;vc.6.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="0.50" steps="316731"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="int_bit_inversion_ht&#39;vc.6.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="0.76" steps="336285"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="int_bit_inversion_ht&#39;vc.6.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="int_bit_inversion_ht&#39;vc.6.0.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="((n - (n - 1)) - 1)" arg2="0">
         <goal name="int_bit_inversion_ht&#39;vc.6.0.0.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="mult_one">
          <goal name="int_bit_inversion_ht&#39;vc.6.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="2.52" steps="39906"/></proof>
          </goal>
          <goal name="int_bit_inversion_ht&#39;vc.6.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="0.81" steps="336657"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="int_bit_inversion_ht&#39;vc.6.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
         <proof prover="7"><result status="valid" time="0.36" steps="316742"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="int_bit_inversion_ht&#39;vc.6.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.74" steps="336285"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="int_bit_inversion_ht&#39;vc.6.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="7"><result status="valid" time="3.12" steps="964161"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bv_inversion_ht&#39;vc" expl="VC for bv_inversion_ht" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_inversion_ht&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.68" steps="308732"/></proof>
  </goal>
  <goal name="bv_inversion_ht&#39;vc.1" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.36" steps="316645"/></proof>
  </goal>
  <goal name="bv_inversion_ht&#39;vc.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bv_inversion_ht&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.39" steps="316649"/></proof>
   </goal>
   <goal name="bv_inversion_ht&#39;vc.2.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.03" steps="365554"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="bv_inversion_ht&#39;vc.3" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
   <goal name="bv_inversion_ht&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(length (bv_inversion (make_bv_m f n)))" arg2="(n-1+1)">
    <goal name="bv_inversion_ht&#39;vc.3.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ind_isum_right_extension">
     <goal name="bv_inversion_ht&#39;vc.3.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(head (make_bv_m f n)
     + (2 * bv_to_int (bv_inversion (tail (make_bv_m f n)))))" arg2="( (2 * bv_to_int (bv_inversion (tail (make_bv_m f n)))) + head (make_bv_m f n)
     )">
      <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="add_eq">
       <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
        <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="ind_isum_scal_rev">
         <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
          <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(length (bv_inversion (tail (make_bv_m f n))) - 1)" arg2="(n-2)">
             <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="eliminate_definition" proved="true" >
              <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="bv_inversion&#39;def">
               <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="bv_inversion&#39;def">
                <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="assert_make_bv">
                 <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="assert_make_bv">
                  <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="eliminate_if" proved="true" >
                   <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="compute_specified" proved="true" >
                     <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="split_all_full" proved="true" >
                      <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                      <transf name="replace" proved="true" arg1="(((n - 1) + 1) - 1)" arg2="(n-1)">
                       <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                       <transf name="rewrite" proved="true" arg1="tail&#39;spec">
                        <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                        <transf name="replace" proved="true" arg1="(power 2 ((n - 1) - k))" arg2="(2 * power 2 (n-2-k))">
                         <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                         <proof prover="0"><result status="valid" time="3.09"/></proof>
                         </goal>
                         <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                         <proof prover="7"><result status="valid" time="1.16" steps="432081"/></proof>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                        <proof prover="7"><result status="valid" time="0.99" steps="401095"/></proof>
                        </goal>
                        <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                        <proof prover="7"><result status="valid" time="1.08" steps="429917"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                       <proof prover="7"><result status="valid" time="0.43" steps="380401"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                    <proof prover="7"><result status="valid" time="4.12" steps="1668601"/></proof>
                    </goal>
                    <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                    <proof prover="7"><result status="valid" time="0.62" steps="340823"/></proof>
                    </goal>
                    <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
                    <proof prover="7"><result status="valid" time="0.36" steps="321369"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                   <proof prover="7"><result status="valid" time="2.87" steps="821474"/></proof>
                   </goal>
                   <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                   <proof prover="7"><result status="valid" time="2.77" steps="821488"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="7"><result status="valid" time="1.03" steps="366363"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                  <proof prover="7"><result status="valid" time="2.68" steps="779886"/></proof>
                  </goal>
                  <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                  <proof prover="7"><result status="valid" time="2.83" steps="779906"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                 <proof prover="7"><result status="valid" time="0.79" steps="337369"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
             <transf name="split_all_full" proved="true" >
              <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
              <proof prover="7"><result status="valid" time="1.02" steps="417913"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="0.35" steps="316701"/></proof>
          </goal>
          <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="1.24" steps="417861"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="0.96" steps="367150"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="bv_inversion_ht&#39;vc.3.0.0.0.0.1.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.38"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="bv_inversion_ht&#39;vc.3.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="7"><result status="valid" time="0.48" steps="316747"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="bv_inversion_ht&#39;vc.3.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.75" steps="336161"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="bv_inversion_ht&#39;vc.3.0.1" expl="equality hypothesis" proved="true">
    <proof prover="7"><result status="valid" time="0.80" steps="336547"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bv_inversion_ht_bv&#39;vc" expl="VC for bv_inversion_ht_bv" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="bv_inversion_ht_bv&#39;vc.0" expl="VC for bv_inversion_ht_bv" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bv_inversion_ht_bv&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.37" steps="316285"/></proof>
   </goal>
   <goal name="bv_inversion_ht_bv&#39;vc.0.1" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(make_bv_m ((fun (y0:bitvec) (y1:int) -&gt; getbv y0 y1) @ bv)
             (length bv))" arg2="bv" arg3="in" arg4="Ensures">
    <goal name="bv_inversion_ht_bv&#39;vc.0.1.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(make_bv_m (getbv bv) (length bv))" arg2="bv" arg3="in" arg4="Ensures">
     <goal name="bv_inversion_ht_bv&#39;vc.0.1.0.0" expl="postcondition" proved="true">
     <proof prover="7"><result status="valid" time="0.36" steps="316332"/></proof>
     </goal>
     <goal name="bv_inversion_ht_bv&#39;vc.0.1.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="set_equal_bv">
      <goal name="bv_inversion_ht_bv&#39;vc.0.1.0.1.0" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="0.96" steps="365513"/></proof>
      </goal>
      <goal name="bv_inversion_ht_bv&#39;vc.0.1.0.1.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="bv_inversion_ht_bv&#39;vc.0.1.0.1.1.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="make_bv_m&#39;def">
        <goal name="bv_inversion_ht_bv&#39;vc.0.1.0.1.1.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
         <goal name="bv_inversion_ht_bv&#39;vc.0.1.0.1.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="1.69" steps="30110"/></proof>
         </goal>
         <goal name="bv_inversion_ht_bv&#39;vc.0.1.0.1.1.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="4.71" steps="72847"/></proof>
         </goal>
         <goal name="bv_inversion_ht_bv&#39;vc.0.1.0.1.1.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="0.97" steps="365792"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="bv_inversion_ht_bv&#39;vc.0.1.0.1.1.0.1" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="0.74" steps="335793"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="bv_inversion_ht_bv&#39;vc.0.1.1" expl="equality hypothesis" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="bv_inversion_ht_bv&#39;vc.0.1.1.0" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="set_equal_bv">
      <goal name="bv_inversion_ht_bv&#39;vc.0.1.1.0.0" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="0.98" steps="365513"/></proof>
      </goal>
      <goal name="bv_inversion_ht_bv&#39;vc.0.1.1.0.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="bv_inversion_ht_bv&#39;vc.0.1.1.0.1.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="make_bv_m&#39;def">
        <goal name="bv_inversion_ht_bv&#39;vc.0.1.1.0.1.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
         <goal name="bv_inversion_ht_bv&#39;vc.0.1.1.0.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="1.84" steps="30110"/></proof>
         </goal>
         <goal name="bv_inversion_ht_bv&#39;vc.0.1.1.0.1.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="4.54" steps="72847"/></proof>
         </goal>
         <goal name="bv_inversion_ht_bv&#39;vc.0.1.1.0.1.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="1.04" steps="365792"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="bv_inversion_ht_bv&#39;vc.0.1.1.0.1.0.1" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="0.80" steps="335793"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_int_ht&#39;vc" expl="VC for bv_to_int_ht" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_to_int_ht&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.36"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bv_inversion_mult_ht&#39;vc" expl="VC for bv_inversion_mult_ht" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_inversion_mult_ht&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.34" steps="290116"/></proof>
  </goal>
  <goal name="bv_inversion_mult_ht&#39;vc.1" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.36" steps="316543"/></proof>
  </goal>
  <goal name="bv_inversion_mult_ht&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.34"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bv_inversion_mult_ht_bv&#39;vc" expl="VC for bv_inversion_mult_ht_bv" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="bv_inversion_mult_ht_bv&#39;vc.0" expl="VC for bv_inversion_mult_ht_bv" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bv_inversion_mult_ht_bv&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.36" steps="316738"/></proof>
   </goal>
   <goal name="bv_inversion_mult_ht_bv&#39;vc.0.1" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(make_bv_m (getbv bvx) (length bvx))" arg2="bvx" arg3="in" arg4="Ensures">
    <goal name="bv_inversion_mult_ht_bv&#39;vc.0.1.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(make_bv_m (getbv bvy) (length bvx))" arg2="bvy" arg3="in" arg4="Ensures">
     <goal name="bv_inversion_mult_ht_bv&#39;vc.0.1.0.0" expl="postcondition" proved="true">
     <proof prover="7"><result status="valid" time="0.38" steps="316848"/></proof>
     </goal>
     <goal name="bv_inversion_mult_ht_bv&#39;vc.0.1.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="set_equal_bv">
      <goal name="bv_inversion_mult_ht_bv&#39;vc.0.1.0.1.0" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="1.04" steps="368726"/></proof>
      </goal>
      <goal name="bv_inversion_mult_ht_bv&#39;vc.0.1.0.1.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="bv_inversion_mult_ht_bv&#39;vc.0.1.0.1.1.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="assert_make_m">
        <goal name="bv_inversion_mult_ht_bv&#39;vc.0.1.0.1.1.0.0" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="1.10" steps="375962"/></proof>
        </goal>
        <goal name="bv_inversion_mult_ht_bv&#39;vc.0.1.0.1.1.0.1" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="0.62" steps="336353"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="bv_inversion_mult_ht_bv&#39;vc.0.1.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_bv">
     <goal name="bv_inversion_mult_ht_bv&#39;vc.0.1.1.0" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="0.85" steps="369643"/></proof>
     </goal>
     <goal name="bv_inversion_mult_ht_bv&#39;vc.0.1.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="bv_inversion_mult_ht_bv&#39;vc.0.1.1.1.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="assert_make_m">
       <goal name="bv_inversion_mult_ht_bv&#39;vc.0.1.1.1.0.0" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="1.09" steps="376962"/></proof>
       </goal>
       <goal name="bv_inversion_mult_ht_bv&#39;vc.0.1.1.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="0.59" steps="336360"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Bv_concat" proved="true">
 <goal name="concat&#39;vc" expl="VC for concat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="concat&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="concat&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="3.75" steps="1021764"/></proof>
   </goal>
   <goal name="concat&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="3.70" steps="1021689"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="concat&#39;vc.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="concat&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="3.85" steps="1022448"/></proof>
   </goal>
   <goal name="concat&#39;vc.1.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="3.83" steps="1022518"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="concat&#39;vc.2" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.97" steps="360836"/></proof>
  </goal>
  <goal name="concat&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.37" steps="313207"/></proof>
  </goal>
  <goal name="concat&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.98" steps="365760"/></proof>
  </goal>
  <goal name="concat&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.09" steps="365858"/></proof>
  </goal>
  <goal name="concat&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="3.47" steps="1010052"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="concat_length&#39;vc" expl="VC for concat_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="concat_length&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.88" steps="333091"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="hpart&#39;vc" expl="VC for hpart" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="hpart&#39;vc.0" expl="VC for hpart" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="hpart&#39;vc.0.0" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="hpart&#39;vc.0.0.0" expl="precondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="hpart&#39;vc.0.0.0.0" expl="precondition" proved="true">
     <proof prover="7"><result status="valid" time="1.01" steps="359948"/></proof>
     </goal>
     <goal name="hpart&#39;vc.0.0.0.1" expl="precondition" proved="true">
     <proof prover="7"><result status="valid" time="0.96" steps="359937"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="hpart&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.34" steps="313245"/></proof>
   </goal>
   <goal name="hpart&#39;vc.0.2" expl="postcondition" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="hpart&#39;vc.0.2.0" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="0.49" steps="316793"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="hpart&#39;vc.0.3" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.84" steps="333097"/></proof>
   </goal>
   <goal name="hpart&#39;vc.0.4" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="1.07" steps="366021"/></proof>
   </goal>
   <goal name="hpart&#39;vc.0.5" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="1.01" steps="363212"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="hpart_value&#39;vc" expl="VC for hpart_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="hpart_value&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.04" steps="362563"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="hpart_length&#39;vc" expl="VC for hpart_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="hpart_length&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.93" steps="331248"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="hpart_value_b&#39;vc" expl="VC for hpart_value_b" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="hpart_value_b&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.95" steps="362549"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="tpart&#39;vc" expl="VC for tpart" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="tpart&#39;vc.0" expl="VC for tpart" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="tpart&#39;vc.0.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="tpart&#39;vc.0.0.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="3.11" steps="949965"/></proof>
    </goal>
    <goal name="tpart&#39;vc.0.0.1" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="3.14" steps="949818"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="tpart&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.52" steps="314244"/></proof>
   </goal>
   <goal name="tpart&#39;vc.0.2" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="tpart&#39;vc.0.2.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.53" steps="314100"/></proof>
    </goal>
    <goal name="tpart&#39;vc.0.2.1" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.38" steps="314102"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="tpart&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.38" steps="314199"/></proof>
   </goal>
   <goal name="tpart&#39;vc.0.4" expl="postcondition" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="tpart&#39;vc.0.4.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="tpart&#39;vc.0.4.0.0" expl="postcondition" proved="true">
     <proof prover="7"><result status="valid" time="0.53" steps="318120"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="tpart&#39;vc.0.5" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="tpart&#39;vc.0.5.0" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="0.52" steps="314372"/></proof>
    </goal>
    <goal name="tpart&#39;vc.0.5.1" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="0.54" steps="314324"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="tpart&#39;vc.0.6" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="tpart&#39;vc.0.6.0" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="4.25" steps="1058654"/></proof>
    </goal>
    <goal name="tpart&#39;vc.0.6.1" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="0.88" steps="333801"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bv_tail&#39;vc" expl="VC for bv_tail" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_tail&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.80" steps="307472"/></proof>
  </goal>
  <goal name="bv_tail&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.55" steps="314877"/></proof>
  </goal>
  <goal name="bv_tail&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.02" steps="365906"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="last&#39;vc" expl="VC for last" proved="true">
 <proof prover="7"><result status="valid" time="0.37" steps="288787"/></proof>
 </goal>
 <goal name="bv_head&#39;vc" expl="VC for bv_head" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_head&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.46" steps="288967"/></proof>
  </goal>
  <goal name="bv_head&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.51" steps="315477"/></proof>
  </goal>
  <goal name="bv_head&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.11" steps="366482"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="htpart&#39;vc" expl="VC for htpart" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="htpart&#39;vc.0" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="htpart&#39;vc.0.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="htpart&#39;vc.0.0.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.97" steps="363244"/></proof>
    </goal>
    <goal name="htpart&#39;vc.0.0.1" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.96" steps="363243"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="htpart&#39;vc.1" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.49" steps="315880"/></proof>
  </goal>
  <goal name="htpart&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.50" steps="315987"/></proof>
  </goal>
  <goal name="htpart&#39;vc.3" expl="postcondition" proved="true">
  <transf name="eliminate_if" proved="true" >
   <goal name="htpart&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="1.58" steps="26762"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="tpart_value&#39;vc" expl="VC for tpart_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="tpart_value&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.18" steps="370960"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="tpart_value_b&#39;vc" expl="VC for tpart_value_b" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="tpart_value_b&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.04" steps="366677"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="tpart_length&#39;vc" expl="VC for tpart_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="tpart_length&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="3.20" steps="1021472"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="htpart_value&#39;vc" expl="VC for htpart_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="htpart_value&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.23" steps="369685"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="htpart_value_b&#39;vc" expl="VC for htpart_value_b" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="htpart_value_b&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.99" steps="366191"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="htpart_product_&#39;vc" expl="VC for htpart_product_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="htpart_product_&#39;vc.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="ind_iproduct_map" arg2="k,n,0,(n-k),(fun i -&gt; i-k),(getbv (htpart x k n&#39;))">
   <goal name="htpart_product_&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="Hinst">
    <goal name="htpart_product_&#39;vc.0.0.0" expl="destruct premise" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="htpart_product_&#39;vc.0.0.0.0" expl="destruct premise" proved="true">
     <transf name="apply" proved="true" arg1="set_bijective1">
      <goal name="htpart_product_&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="htpart_product_&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="1.31" steps="471315"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="htpart_product_&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="htpart_product_&#39;vc.0.0.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="1.28" steps="470492"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="htpart_product_&#39;vc.0.0.0.0.2" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="htpart_product_&#39;vc.0.0.0.0.2.0" expl="apply premises" proved="true">
       <transf name="exists" proved="true" arg1="(e&#39;+k)">
        <goal name="htpart_product_&#39;vc.0.0.0.0.2.0.0" proved="true">
        <proof prover="7"><result status="valid" time="1.26" steps="470181"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="htpart_product_&#39;vc.0.0.1" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Hinst">
     <goal name="htpart_product_&#39;vc.0.0.1.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="ind_iproduct_eq">
      <goal name="htpart_product_&#39;vc.0.0.1.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="htpart_product_&#39;vc.0.0.1.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="htpart_product_&#39;vc.0.0.1.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="1.12" steps="368806"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="htpart_product_one&#39;vc" expl="VC for htpart_product_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="htpart_product_one&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.39" steps="317341"/></proof>
  </goal>
  <goal name="htpart_product_one&#39;vc.1" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.51" steps="317345"/></proof>
  </goal>
  <goal name="htpart_product_one&#39;vc.2" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.51" steps="317432"/></proof>
  </goal>
  <goal name="htpart_product_one&#39;vc.3" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.78" steps="336867"/></proof>
  </goal>
  <goal name="htpart_product_one&#39;vc.4" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.80" steps="337084"/></proof>
  </goal>
  <goal name="htpart_product_one&#39;vc.5" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="3.61" steps="1051851"/></proof>
  </goal>
  <goal name="htpart_product_one&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.53" steps="317594"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="htpart_product_zero&#39;vc" expl="VC for htpart_product_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="htpart_product_zero&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.38" steps="317854"/></proof>
  </goal>
  <goal name="htpart_product_zero&#39;vc.1" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="1.02" steps="367109"/></proof>
  </goal>
  <goal name="htpart_product_zero&#39;vc.2" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.40" steps="317944"/></proof>
  </goal>
  <goal name="htpart_product_zero&#39;vc.3" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.79" steps="337445"/></proof>
  </goal>
  <goal name="htpart_product_zero&#39;vc.4" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.74" steps="337662"/></proof>
  </goal>
  <goal name="htpart_product_zero&#39;vc.5" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(exists i.  0 &lt;= i /\ i &lt; (n - k) /\ not (getbv (htpart x k n&#39;) @ i) = 1)">
   <goal name="htpart_product_zero&#39;vc.5.0" expl="asserted formula" proved="true">
   <transf name="destruct" proved="true" arg1="Requires1">
    <goal name="htpart_product_zero&#39;vc.5.0.0" expl="asserted formula" proved="true">
    <transf name="exists" proved="true" arg1="(j-k)">
     <goal name="htpart_product_zero&#39;vc.5.0.0.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="htpart_product_zero&#39;vc.5.0.0.0.0" proved="true">
      <proof prover="7"><result status="valid" time="0.51" steps="318023"/></proof>
      </goal>
      <goal name="htpart_product_zero&#39;vc.5.0.0.0.1" proved="true">
      <proof prover="7"><result status="valid" time="0.53" steps="318025"/></proof>
      </goal>
      <goal name="htpart_product_zero&#39;vc.5.0.0.0.2" proved="true">
      <proof prover="7"><result status="valid" time="1.03" steps="370586"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="htpart_product_zero&#39;vc.5.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.80" steps="337997"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="htpart_product_zero&#39;vc.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="htpart_product_zero&#39;vc.6.0" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.38" steps="318019"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="htpart_product&#39;vc" expl="VC for htpart_product" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="htpart_product&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_if" proved="true" >
   <goal name="htpart_product&#39;vc.0.0" expl="VC for htpart_product" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="htpart_product&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="null_product_bitvec">
     <goal name="htpart_product&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.24" steps="3279"/></proof>
     </goal>
     <goal name="htpart_product&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="6.80" steps="2583969"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="htpart_product&#39;vc.0.0.1" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="htpart_product_zero">
     <goal name="htpart_product&#39;vc.0.0.1.0" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="0.57" steps="321964"/></proof>
     </goal>
     <goal name="htpart_product&#39;vc.0.0.1.1" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="0.51" steps="321955"/></proof>
     </goal>
     <goal name="htpart_product&#39;vc.0.0.1.2" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="0.53" steps="321955"/></proof>
     </goal>
     <goal name="htpart_product&#39;vc.0.0.1.3" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="1.13" steps="369435"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="htpart_length&#39;vc" expl="VC for htpart_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="htpart_length&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="3.27" steps="939140"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="tpart_length_gen&#39;vc" expl="VC for tpart_length_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="tpart_length_gen&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.04" steps="338652"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="concat_value_left&#39;vc" expl="VC for concat_value_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="concat_value_left&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.11" steps="369094"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="concat_value&#39;vc" expl="VC for concat_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="concat_value&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="concat_value&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="concat_value&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="1.27" steps="422881"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="concat_value_b&#39;vc" expl="VC for concat_value_b" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="concat_value_b&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.06" steps="373271"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="concat_value_right&#39;vc" expl="VC for concat_value_right" proved="true">
 <transf name="split_all_full" proved="true" >
  <goal name="concat_value_right&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="concat_value_right&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="1.19" steps="420024"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="concat_value_out&#39;vc" expl="VC for concat_value_out" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="concat_value_out&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.03" steps="371673"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="concat_value_tpart&#39;vc" expl="VC for concat_value_tpart" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="concat_value_tpart&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="concat_value_tpart&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.48" steps="294409"/></proof>
   </goal>
   <goal name="concat_value_tpart&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.97" steps="340183"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="concat_value_tpart&#39;vc.1" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="concat_value_right">
   <goal name="concat_value_tpart&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="1.11" steps="375262"/></proof>
   </goal>
   <goal name="concat_value_tpart&#39;vc.1.1" expl="rewrite premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="concat_value_tpart&#39;vc.1.1.0" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.35" steps="320138"/></proof>
    </goal>
    <goal name="concat_value_tpart&#39;vc.1.1.1" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="1.09" steps="374554"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="concat_value_ht&#39;vc" expl="VC for concat_value_ht" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="concat_value_ht&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="concat_value_ht&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.51" steps="320354"/></proof>
   </goal>
   <goal name="concat_value_ht&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.48" steps="320369"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="concat_value_ht&#39;vc.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="concat_value_ht&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.52" steps="320371"/></proof>
   </goal>
   <goal name="concat_value_ht&#39;vc.1.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.52" steps="320386"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="concat_value_ht&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="concat_value_ht&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.84" steps="339813"/></proof>
   </goal>
   <goal name="concat_value_ht&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.96" steps="339822"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="concat_ht&#39;vc" expl="VC for concat_ht" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="concat_ht&#39;vc.0" expl="VC for concat_ht" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="concat_ht&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.80" steps="340988"/></proof>
   </goal>
   <goal name="concat_ht&#39;vc.0.1" expl="precondition" proved="true">
   <transf name="instantiate" proved="true" arg1="concat_value_ht" arg2="bv1,bv2,bv3,bv4,i">
    <goal name="concat_ht&#39;vc.0.1.0" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="Hinst">
     <goal name="concat_ht&#39;vc.0.1.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="concat_ht&#39;vc.0.1.0.0.0" proved="true">
      <proof prover="7"><result status="valid" time="0.36" steps="321291"/></proof>
      </goal>
      <goal name="concat_ht&#39;vc.0.1.0.0.1" proved="true">
      <proof prover="7"><result status="valid" time="0.79" steps="340985"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="concat_ht&#39;vc.0.1.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="concat_ht&#39;vc.0.1.0.1.0" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="1.09" steps="379036"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="concat_ht&#39;vc.0.1.0.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="concat_ht&#39;vc.0.1.0.2.0" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="1.08" steps="379025"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="concat_ht&#39;vc.0.1.0.3" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="concat_ht&#39;vc.0.1.0.3.0" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="0.37" steps="321291"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="concat_ht&#39;vc.0.2" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.38" steps="321132"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_concat&#39;vc" expl="VC for set_concat" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="set_concat&#39;vc.0" expl="VC for set_concat" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="set_concat&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.82" steps="341203"/></proof>
   </goal>
   <goal name="set_concat&#39;vc.0.1" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="concat_value">
    <goal name="set_concat&#39;vc.0.1.0" expl="precondition" proved="true">
    <transf name="eliminate_if" proved="true" >
     <goal name="set_concat&#39;vc.0.1.0.0" expl="VC for set_concat" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="set_concat&#39;vc.0.1.0.0.0" expl="precondition" proved="true">
      <proof prover="7"><result status="valid" time="1.03" steps="378741"/></proof>
      </goal>
      <goal name="set_concat&#39;vc.0.1.0.0.1" expl="precondition" proved="true">
      <proof prover="7"><result status="valid" time="1.04" steps="378376"/></proof>
      </goal>
      <goal name="set_concat&#39;vc.0.1.0.0.2" expl="precondition" proved="true">
      <proof prover="7"><result status="valid" time="0.61" steps="344961"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="set_concat&#39;vc.0.2" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.37" steps="321526"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="concat_m&#39;vc" expl="VC for concat_m" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="concat_m&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_bv">
   <goal name="concat_m&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="concat_m&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="7"><result status="valid" time="1.07" steps="375243"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="concat_m&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="concat_m&#39;vc.0.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="concat_value">
     <goal name="concat_m&#39;vc.0.1.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="make_m_length">
      <goal name="concat_m&#39;vc.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="make_m_length">
       <goal name="concat_m&#39;vc.0.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="assert_make_m">
        <goal name="concat_m&#39;vc.0.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="assert_make_m">
         <goal name="concat_m&#39;vc.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="assert_make_m">
          <goal name="concat_m&#39;vc.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="eliminate_if" proved="true" >
           <goal name="concat_m&#39;vc.0.1.0.0.0.0.0.0.0.0" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="concat_m&#39;vc.0.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="7"><result status="valid" time="1.23" steps="385482"/></proof>
            </goal>
            <goal name="concat_m&#39;vc.0.1.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="7"><result status="valid" time="0.38" steps="325475"/></proof>
            </goal>
            <goal name="concat_m&#39;vc.0.1.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
            <proof prover="7"><result status="valid" time="0.36" steps="325485"/></proof>
            </goal>
            <goal name="concat_m&#39;vc.0.1.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
            <proof prover="7"><result status="valid" time="0.38" steps="325459"/></proof>
            </goal>
            <goal name="concat_m&#39;vc.0.1.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
            <proof prover="7"><result status="valid" time="1.17" steps="382443"/></proof>
            </goal>
            <goal name="concat_m&#39;vc.0.1.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
            <proof prover="7"><result status="valid" time="0.79" steps="345014"/></proof>
            </goal>
            <goal name="concat_m&#39;vc.0.1.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
            <proof prover="7"><result status="valid" time="0.39" steps="325483"/></proof>
            </goal>
            <goal name="concat_m&#39;vc.0.1.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
            <proof prover="7"><result status="valid" time="0.37" steps="325457"/></proof>
            </goal>
            <goal name="concat_m&#39;vc.0.1.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
            <proof prover="7"><result status="valid" time="0.38" steps="325474"/></proof>
            </goal>
            <goal name="concat_m&#39;vc.0.1.0.0.0.0.0.0.0.0.9" expl="apply premises" proved="true">
            <proof prover="7"><result status="valid" time="0.38" steps="325448"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="concat_m&#39;vc.0.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="0.78" steps="340867"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="concat_m&#39;vc.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="0.62" steps="340817"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="concat_m&#39;vc.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="0.75" steps="340817"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="concat_m&#39;vc.0.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="0.78" steps="340817"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="concat_m&#39;vc.0.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.78" steps="340817"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="concat_comm&#39;vc" expl="VC for concat_comm" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="concat_comm&#39;vc.0" expl="VC for concat_comm" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="concat_comm&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.04" steps="371603"/></proof>
   </goal>
   <goal name="concat_comm&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.38" steps="322159"/></proof>
   </goal>
   <goal name="concat_comm&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.16" steps="378329"/></proof>
   </goal>
   <goal name="concat_comm&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.09" steps="372256"/></proof>
   </goal>
   <goal name="concat_comm&#39;vc.0.4" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.09" steps="374397"/></proof>
   </goal>
   <goal name="concat_comm&#39;vc.0.5" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="4.61" steps="1227972"/></proof>
   </goal>
   <goal name="concat_comm&#39;vc.0.6" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.39" steps="322633"/></proof>
   </goal>
   <goal name="concat_comm&#39;vc.0.7" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.52" steps="322636"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="concat_and_rec&#39;vc" expl="VC for concat_and_rec" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="concat_and_rec&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.35" steps="296265"/></proof>
  </goal>
  <goal name="concat_and_rec&#39;vc.1" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.52" steps="321906"/></proof>
  </goal>
  <goal name="concat_and_rec&#39;vc.2" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.88" steps="342295"/></proof>
  </goal>
  <goal name="concat_and_rec&#39;vc.3" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="1.06" steps="382502"/></proof>
  </goal>
  <goal name="concat_and_rec&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.54" steps="322486"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bv_decomp_ht&#39;vc" expl="VC for bv_decomp_ht" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_decomp_ht&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.99" steps="341225"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bv_decomp_hhtt&#39;vc" expl="VC for bv_decomp_hhtt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_decomp_hhtt&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_bv">
   <goal name="bv_decomp_hhtt&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="rewrite" proved="true" arg1="concat_length">
    <goal name="bv_decomp_hhtt&#39;vc.0.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="concat_length">
     <goal name="bv_decomp_hhtt&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="hpart_length">
      <goal name="bv_decomp_hhtt&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="htpart_length">
       <goal name="bv_decomp_hhtt&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="tpart_length">
        <goal name="bv_decomp_hhtt&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="0.38" steps="296580"/></proof>
        </goal>
        <goal name="bv_decomp_hhtt&#39;vc.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="0.42" steps="296560"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="bv_decomp_hhtt&#39;vc.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="0.42" steps="296553"/></proof>
       </goal>
       <goal name="bv_decomp_hhtt&#39;vc.0.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="0.35" steps="296553"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="bv_decomp_hhtt&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.38" steps="296553"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="bv_decomp_hhtt&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="bv_decomp_hhtt&#39;vc.0.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="concat_value">
     <goal name="bv_decomp_hhtt&#39;vc.0.1.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="concat_value">
      <goal name="bv_decomp_hhtt&#39;vc.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="bv_decomp_hhtt&#39;vc.0.1.0.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="bv_decomp_hhtt&#39;vc.0.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="concat_length">
         <goal name="bv_decomp_hhtt&#39;vc.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="hpart_length">
          <goal name="bv_decomp_hhtt&#39;vc.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="htpart_length">
           <goal name="bv_decomp_hhtt&#39;vc.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="1.09" steps="379188"/></proof>
           </goal>
           <goal name="bv_decomp_hhtt&#39;vc.0.1.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="7"><result status="valid" time="0.48" steps="300276"/></proof>
           </goal>
           <goal name="bv_decomp_hhtt&#39;vc.0.1.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="7"><result status="valid" time="0.39" steps="300276"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="bv_decomp_hhtt&#39;vc.0.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="0.47" steps="300276"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="bv_decomp_hhtt&#39;vc.0.1.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="htpart_value_b">
         <goal name="bv_decomp_hhtt&#39;vc.0.1.0.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="hpart_length">
          <goal name="bv_decomp_hhtt&#39;vc.0.1.0.0.0.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="0.39" steps="326128"/></proof>
          </goal>
          <goal name="bv_decomp_hhtt&#39;vc.0.1.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="0.37" steps="300338"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="bv_decomp_hhtt&#39;vc.0.1.0.0.0.0.1.1" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="0.37" steps="300338"/></proof>
         </goal>
         <goal name="bv_decomp_hhtt&#39;vc.0.1.0.0.0.0.1.2" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="0.40" steps="300338"/></proof>
         </goal>
         <goal name="bv_decomp_hhtt&#39;vc.0.1.0.0.0.0.1.3" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="0.99" steps="350924"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="bv_decomp_hhtt&#39;vc.0.1.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="1.07" steps="381093"/></proof>
        </goal>
        <goal name="bv_decomp_hhtt&#39;vc.0.1.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="1.13" steps="379427"/></proof>
        </goal>
        <goal name="bv_decomp_hhtt&#39;vc.0.1.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="0.95" steps="377009"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bv_decomp_hhtt_rev&#39;vc" expl="VC for bv_decomp_hhtt_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_decomp_hhtt_rev&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="3248"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="concat_int_bv&#39;vc" expl="VC for concat_int_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="concat_int_bv&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.58" steps="316100"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="concat_int_to_bv_value&#39;vc" expl="VC for concat_int_to_bv_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="concat_int_to_bv_value&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.55" steps="316349"/></proof>
  </goal>
  <goal name="concat_int_to_bv_value&#39;vc.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="concat_int_to_bv_value&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.34" steps="297407"/></proof>
   </goal>
   <goal name="concat_int_to_bv_value&#39;vc.1.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.36" steps="297422"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="concat_int_to_bv_value&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="3.98" steps="1117179"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_int_concat&#39;vc" expl="VC for bv_to_int_concat" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="bv_to_int_concat&#39;vc.0" expl="VC for bv_to_int_concat" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bv_to_int_concat&#39;vc.0.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="bv_to_int_concat&#39;vc.0.0.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="1.07" steps="375751"/></proof>
    </goal>
    <goal name="bv_to_int_concat&#39;vc.0.0.1" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="1.09" steps="375893"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="bv_to_int_concat&#39;vc.0.1" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures7">
    <goal name="bv_to_int_concat&#39;vc.0.1.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="( ind_isum
  (fun (k:int) -&gt;
    (getbv (concat bvx bvy) @ k)
    * power 2 ((length (concat bvx bvy) - 1) - k))
  0 (length (concat bvx bvy)))" arg2="(ind_isum
  (fun (k:int) -&gt;
    if 0 &lt;= k /\ k &lt; length (concat bvx bvy)
    then (getbv (concat bvx bvy) @ k)
         * power 2 ((length (concat bvx bvy) - 1) - k)
    else 1)
  0 (length (concat bvx bvy)))">
     <goal name="bv_to_int_concat&#39;vc.0.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures">
      <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="add_eq">
       <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="concat_value">
        <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="Ensures6">
         <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="ind_isum_scal_rev">
          <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
           <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="eliminate_if" proved="true" >
              <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.0.0.0.0.0.0.0.0" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="7"><result status="valid" time="0.46" steps="328568"/></proof>
               </goal>
               <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="concat_length">
                <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                <transf name="replace" proved="true" arg1="(power 2 (((length bvx + length bvy) - 1) - k))" arg2="(power 2 ((length bvx - 1) - k) * power 2 (length bvy))">
                 <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                 <proof prover="7"><result status="valid" time="0.45" steps="328563"/></proof>
                 </goal>
                 <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.0.0.0.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
                 <proof prover="6"><result status="valid" time="0.25" steps="6011"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
               <proof prover="7"><result status="valid" time="0.44" steps="328566"/></proof>
               </goal>
               <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
               <proof prover="7"><result status="valid" time="1.03" steps="384920"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="0.39" steps="324277"/></proof>
           </goal>
           <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="7"><result status="valid" time="1.07" steps="377263"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.1" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="concat_value">
        <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="Ensures5">
         <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="instantiate" proved="true" arg1="ind_isum_transl" arg2="(fun (k:int) -&gt;
    if 0 &lt;= k /\ k &lt; length (concat bvx bvy)
    then (if length bvx &lt;= k /\ k &lt; (length bvx + length bvy)
          then getbv bvy @ (k - length bvx)
          else if 0 &lt;= k /\ k &lt; length bvx then getbv bvx @ k else 0)
         * power 2 ((length (concat bvx bvy) - 1) - k)
    else 1),(length bvx),(length (concat bvx bvy)),(length bvx)">
          <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="Hinst">
           <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
            <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="eliminate_if" proved="true" >
               <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.1.0.0.0.0.0.0.0.0" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="6"><result status="valid" time="0.11" steps="627"/></proof>
                </goal>
                <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.1.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="concat_length">
                 <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.1.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                 <transf name="replace" proved="true" arg1="(power 2 (((length bvx + length bvy) - 1) - k))" arg2="(power 2 ((length bvx - 1) - k) * power 2 (length bvy))">
                  <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.1.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                  <proof prover="7"><result status="valid" time="0.52" steps="329455"/></proof>
                  </goal>
                  <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.1.0.0.0.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
                  <proof prover="7"><result status="valid" time="0.54" steps="329437"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.1.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                <proof prover="7"><result status="valid" time="0.79" steps="349070"/></proof>
                </goal>
                <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.1.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
                <proof prover="7"><result status="valid" time="1.14" steps="385662"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="7"><result status="valid" time="0.48" steps="324851"/></proof>
            </goal>
            <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.1.0.0.0.0.2" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.1.0.0.0.0.2.0" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="bv_to_int_concat&#39;vc.0.1.0.0.0.1.0.0.0.0.2.0.0" expl="apply premises" proved="true">
              <proof prover="7"><result status="valid" time="0.53" steps="324851"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="bv_to_int_concat&#39;vc.0.1.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
      <goal name="bv_to_int_concat&#39;vc.0.1.0.1.0" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="1.19" steps="377995"/></proof>
      </goal>
      <goal name="bv_to_int_concat&#39;vc.0.1.0.1.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="bv_to_int_concat&#39;vc.0.1.0.1.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="bv_to_int_concat&#39;vc.0.1.0.1.2" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="0.52" steps="324277"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="concat_fin&#39;vc" expl="VC for concat_fin" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="concat_fin&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="concat_fin&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.13" steps="369589"/></proof>
   </goal>
   <goal name="concat_fin&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.15" steps="369583"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="concat_fin&#39;vc.1" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.53" steps="323214"/></proof>
  </goal>
  <goal name="concat_fin&#39;vc.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="concat_fin&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.08" steps="371029"/></proof>
   </goal>
   <goal name="concat_fin&#39;vc.2.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.08" steps="371023"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="concat_fin&#39;vc.3" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.50" steps="323440"/></proof>
  </goal>
  <goal name="concat_fin&#39;vc.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="concat_fin&#39;vc.4.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.14" steps="448222"/></proof>
   </goal>
   <goal name="concat_fin&#39;vc.4.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.34" steps="448216"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="concat_fin&#39;vc.5" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="1.07" steps="416941"/></proof>
  </goal>
  <goal name="concat_fin&#39;vc.6" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="1.11" steps="417340"/></proof>
  </goal>
  <goal name="concat_fin&#39;vc.7" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="concat_fin&#39;vc.7.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="assert_make_bv">
    <goal name="concat_fin&#39;vc.7.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="concat_value">
     <goal name="concat_fin&#39;vc.7.0.0.0" expl="precondition" proved="true">
     <transf name="eliminate_if" proved="true" >
      <goal name="concat_fin&#39;vc.7.0.0.0.0" expl="VC for concat_fin" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="concat_fin&#39;vc.7.0.0.0.0.0" expl="precondition" proved="true">
       <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
        <goal name="concat_fin&#39;vc.7.0.0.0.0.0.0" expl="precondition" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="concat_fin&#39;vc.7.0.0.0.0.0.0.0" expl="precondition" proved="true">
         <transf name="replace" proved="true" arg1="(length (make_bv f1 l1))" arg2="l1">
          <goal name="concat_fin&#39;vc.7.0.0.0.0.0.0.0.0" expl="precondition" proved="true">
          <transf name="instantiate" proved="true" arg1="concat_fun_value" arg2="f1,f2,l1,i">
           <goal name="concat_fin&#39;vc.7.0.0.0.0.0.0.0.0.0" expl="precondition" proved="true">
           <transf name="split_all_full" proved="true" >
            <goal name="concat_fin&#39;vc.7.0.0.0.0.0.0.0.0.0.0" expl="precondition" proved="true">
            <proof prover="7"><result status="valid" time="1.20" steps="484194"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="concat_fin&#39;vc.7.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="7"><result status="valid" time="0.53" steps="399981"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="concat_fin&#39;vc.7.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="concat_fin&#39;vc.7.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="1.39" steps="457074"/></proof>
         </goal>
         <goal name="concat_fin&#39;vc.7.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="1.24" steps="457063"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="concat_fin&#39;vc.7.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="concat_fin&#39;vc.7.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="0.59" steps="399995"/></proof>
         </goal>
         <goal name="concat_fin&#39;vc.7.0.0.0.0.0.2.1" expl="rewrite premises" proved="true">
         <proof prover="7"><result status="valid" time="0.94" steps="422126"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="concat_fin&#39;vc.7.0.0.0.0.1" expl="precondition" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="concat_fin&#39;vc.7.0.0.0.0.1.0" expl="precondition" proved="true">
        <proof prover="7"><result status="valid" time="1.42" steps="456341"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="concat_fin&#39;vc.7.0.0.0.0.2" expl="precondition" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="concat_fin&#39;vc.7.0.0.0.0.2.0" expl="precondition" proved="true">
        <proof prover="7"><result status="valid" time="0.95" steps="422126"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="concat_fin&#39;vc.7.0.0.0.0.3" expl="precondition" proved="true">
       <proof prover="7"><result status="valid" time="1.02" steps="422181"/></proof>
       </goal>
       <goal name="concat_fin&#39;vc.7.0.0.0.0.4" expl="precondition" proved="true">
       <proof prover="7"><result status="valid" time="1.07" steps="422230"/></proof>
       </goal>
       <goal name="concat_fin&#39;vc.7.0.0.0.0.5" expl="precondition" proved="true">
       <proof prover="7"><result status="valid" time="0.61" steps="400018"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="concat_fin&#39;vc.7.0.1" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="concat_fin&#39;vc.7.0.1.0" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="1.37" steps="452595"/></proof>
     </goal>
     <goal name="concat_fin&#39;vc.7.0.1.1" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="1.39" steps="452584"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="concat_fin&#39;vc.7.0.2" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="1.02" steps="417129"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="concat_fin&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.61" steps="395395"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bin_to_int_concat&#39;vc" expl="VC for bin_to_int_concat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bin_to_int_concat&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="1.00" steps="369946"/></proof>
  </goal>
  <goal name="bin_to_int_concat&#39;vc.1" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.47" steps="323418"/></proof>
  </goal>
  <goal name="bin_to_int_concat&#39;vc.2" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="1.01" steps="371266"/></proof>
  </goal>
  <goal name="bin_to_int_concat&#39;vc.3" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.47" steps="323644"/></proof>
  </goal>
  <goal name="bin_to_int_concat&#39;vc.4" expl="postcondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="bin_to_int_concat&#39;vc.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="bin_to_int&#39;def">
    <goal name="bin_to_int_concat&#39;vc.4.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="bin_to_int&#39;def">
     <goal name="bin_to_int_concat&#39;vc.4.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="bin_to_int&#39;def">
      <goal name="bin_to_int_concat&#39;vc.4.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="Ensures">
       <goal name="bin_to_int_concat&#39;vc.4.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="replace" proved="true" arg1="(make_bv (fun (y3:int) -&gt; concat_fun f1 f2 l1 y3) (l1 + l2))" arg2="(concat (make_bv f1 l1) (make_bv f2 l2))">
        <goal name="bin_to_int_concat&#39;vc.4.0.0.0.0.0.0" expl="postcondition" proved="true">
        <proof prover="7"><result status="valid" time="0.47" steps="323797"/></proof>
        </goal>
        <goal name="bin_to_int_concat&#39;vc.4.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="set_equal_bv">
         <goal name="bin_to_int_concat&#39;vc.4.0.0.0.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="1.74" steps="28008"/></proof>
         </goal>
         <goal name="bin_to_int_concat&#39;vc.4.0.0.0.0.0.1.1" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="bin_to_int_concat&#39;vc.4.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="2.57" steps="43006"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="bin_to_int_concat&#39;vc.4.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="1.16" steps="376544"/></proof>
       </goal>
       <goal name="bin_to_int_concat&#39;vc.4.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="7"><result status="valid" time="0.41" steps="323797"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="bin_to_int_concat&#39;vc.4.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.42" steps="323797"/></proof>
      </goal>
      <goal name="bin_to_int_concat&#39;vc.4.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.85" steps="343768"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="bin_to_int_concat&#39;vc.4.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.41" steps="323797"/></proof>
     </goal>
     <goal name="bin_to_int_concat&#39;vc.4.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.94" steps="343768"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="bin_to_int_concat&#39;vc.4.0.1" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="0.86" steps="343471"/></proof>
    </goal>
    <goal name="bin_to_int_concat&#39;vc.4.0.2" expl="rewrite premises" proved="true">
    <proof prover="7"><result status="valid" time="1.49" steps="447303"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bijective_concat&#39;vc" expl="VC for bijective_concat" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="bijective_concat&#39;vc.0" expl="VC for bijective_concat" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bijective_concat&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.40" steps="302735"/></proof>
   </goal>
   <goal name="bijective_concat&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.52" steps="380992"/></proof>
   </goal>
   <goal name="bijective_concat&#39;vc.0.2" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="bijective_concat&#39;vc.0.2.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="1.65" steps="580893"/></proof>
    </goal>
    <goal name="bijective_concat&#39;vc.0.2.1" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="1.64" steps="580882"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="bijective_concat&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.56" steps="579871"/></proof>
   </goal>
   <goal name="bijective_concat&#39;vc.0.4" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.38" steps="302756"/></proof>
   </goal>
   <goal name="bijective_concat&#39;vc.0.5" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.43" steps="331926"/></proof>
   </goal>
   <goal name="bijective_concat&#39;vc.0.6" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="bijective_concat&#39;vc.0.6.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.84" steps="387839"/></proof>
    </goal>
    <goal name="bijective_concat&#39;vc.0.6.1" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.84" steps="387833"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="bijective_concat&#39;vc.0.7" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.49" steps="366491"/></proof>
   </goal>
   <goal name="bijective_concat&#39;vc.0.8" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="bijective_concat&#39;vc.0.8.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.86" steps="388319"/></proof>
    </goal>
    <goal name="bijective_concat&#39;vc.0.8.1" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.86" steps="388313"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="bijective_concat&#39;vc.0.9" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.52" steps="366923"/></proof>
   </goal>
   <goal name="bijective_concat&#39;vc.0.10" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.67" steps="321741"/></proof>
   </goal>
   <goal name="bijective_concat&#39;vc.0.11" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.51" steps="381007"/></proof>
   </goal>
   <goal name="bijective_concat&#39;vc.0.12" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.51" steps="381264"/></proof>
   </goal>
   <goal name="bijective_concat&#39;vc.0.13" expl="precondition" proved="true">
   <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (o:(bitvec, bitvec)) -&gt;
     if mem o (cartesian_product (n_bvs i) (n_bvs j))
     then concat (fir o) (sec o)
     else make_bv ((fun (y0:int) (y1:int) -&gt; const y0 y1) @ 0) (i + j)),(cartesian_product (n_bvs i) (n_bvs j)),e">
    <goal name="bijective_concat&#39;vc.0.13.0" expl="precondition" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="bijective_concat&#39;vc.0.13.0.0" expl="destruct premise" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="bijective_concat&#39;vc.0.13.0.0.0" expl="destruct premise" proved="true">
      <transf name="replace" proved="true" arg1="(fun (o:(bitvec, bitvec)) -&gt;
     if mem o (cartesian_product (n_bvs i) (n_bvs j))
     then concat (match o with
          | x, _ -&gt; x
          end) (match o with
          | _, y -&gt; y
          end)
     else make_bv ((fun (y0:int) (y1:int) -&gt; const y0 y1) @ 0) (i + j))" arg2="(fun (o:(bitvec, bitvec)) -&gt;
     if mem o (cartesian_product (n_bvs i) (n_bvs j))
     then concat (fir o) (sec o)
     else make_bv ((fun (y0:int) (y1:int) -&gt; const y0 y1) @ 0) (i + j))" arg3="in" arg4="H">
       <goal name="bijective_concat&#39;vc.0.13.0.0.0.0" expl="destruct premise" proved="true">
       <proof prover="7"><result status="valid" time="1.52" steps="558109"/></proof>
       </goal>
       <goal name="bijective_concat&#39;vc.0.13.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="7"><result status="valid" time="2.11" steps="714601"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="bijective_concat&#39;vc.0.13.0.1" expl="precondition" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="bijective_concat&#39;vc.0.13.0.1.0" expl="precondition" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="bijective_concat&#39;vc.0.13.0.1.0.0" expl="precondition" proved="true">
       <transf name="rewrite" proved="true" arg1="Hinst">
        <goal name="bijective_concat&#39;vc.0.13.0.1.0.0.0" expl="precondition" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="bijective_concat&#39;vc.0.13.0.1.0.0.0.0" expl="precondition" proved="true">
         <transf name="apply" proved="true" arg1="get_n_bvs_gen">
          <goal name="bijective_concat&#39;vc.0.13.0.1.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="2.57" steps="761929"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="bijective_concat&#39;vc.0.14" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_map_mem">
    <goal name="bijective_concat&#39;vc.0.14.0" expl="apply premises" proved="true">
    <transf name="exists" proved="true" arg1="(hpart e i, tpart e i)">
     <goal name="bijective_concat&#39;vc.0.14.0.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="bijective_concat&#39;vc.0.14.0.0.0" proved="true">
      <transf name="assert" proved="true" arg1="(mem (hpart e i) (n_bvs i) )">
       <goal name="bijective_concat&#39;vc.0.14.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="get_n_bvs_gen">
        <goal name="bijective_concat&#39;vc.0.14.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="1.74" steps="559222"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="bijective_concat&#39;vc.0.14.0.0.0.1" proved="true">
       <transf name="assert" proved="true" arg1="(mem (tpart e i) (n_bvs j) )">
        <goal name="bijective_concat&#39;vc.0.14.0.0.0.1.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="in_n_bvs">
         <goal name="bijective_concat&#39;vc.0.14.0.0.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="0.69" steps="501905"/></proof>
         </goal>
         <goal name="bijective_concat&#39;vc.0.14.0.0.0.1.0.1" expl="apply premises" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="bijective_concat&#39;vc.0.14.0.0.0.1.0.1.0" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="1.73" steps="644699"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="bijective_concat&#39;vc.0.14.0.0.0.1.1" proved="true">
        <proof prover="7"><result status="valid" time="1.13" steps="527862"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="bijective_concat&#39;vc.0.14.0.0.1" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="bijective_concat&#39;vc.0.14.0.0.1.0" proved="true">
       <transf name="eliminate_if" proved="true" >
        <goal name="bijective_concat&#39;vc.0.14.0.0.1.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="bijective_concat&#39;vc.0.14.0.0.1.0.0.0" proved="true">
         <transf name="apply" proved="true" arg1="set_equal_bv">
          <goal name="bijective_concat&#39;vc.0.14.0.0.1.0.0.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="bijective_concat&#39;vc.0.14.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="1.44" steps="565337"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="bijective_concat&#39;vc.0.14.0.0.1.0.0.0.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="bijective_concat&#39;vc.0.14.0.0.1.0.0.0.1.0" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="1.62" steps="605682"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="bijective_concat&#39;vc.0.14.0.0.1.0.0.1" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="bijective_concat&#39;vc.0.14.0.0.1.0.0.1.0" proved="true">
          <proof prover="7"><result status="valid" time="3.19" steps="1083927"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="bijective_concat&#39;vc.0.15" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures">
    <goal name="bijective_concat&#39;vc.0.15.0" expl="assertion" proved="true">
    <proof prover="7"><result status="valid" time="3.94" steps="1257153"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="bijective_concat&#39;vc.0.16" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.71" steps="502073"/></proof>
   </goal>
   <goal name="bijective_concat&#39;vc.0.17" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.70" steps="502294"/></proof>
   </goal>
   <goal name="bijective_concat&#39;vc.0.18" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="bijective_concat&#39;vc.0.18.0" expl="precondition" proved="true">
    <transf name="case" proved="true" arg1="(fir e = fir e&#39;)">
     <goal name="bijective_concat&#39;vc.0.18.0.0" expl="true case (precondition)" proved="true">
     <transf name="case" proved="true" arg1="(sec e &lt;&gt; sec e&#39;)">
      <goal name="bijective_concat&#39;vc.0.18.0.0.0" expl="true case (precondition)" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="bijective_concat&#39;vc.0.18.0.0.0.0" expl="true case (precondition)" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="bijective_concat&#39;vc.0.18.0.0.0.0.0" expl="true case (precondition)" proved="true">
        <transf name="assert" proved="true" arg1="(not (concat (fir e) (sec e) = concat (fir e&#39;) (sec e&#39;)))">
         <goal name="bijective_concat&#39;vc.0.18.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="case" proved="true" arg1="(concat (fir e) (sec e) = concat (fir e&#39;) (sec e&#39;))">
          <goal name="bijective_concat&#39;vc.0.18.0.0.0.0.0.0.0" expl="asserted formula (true case)" proved="true">
          <proof prover="7"><result status="valid" time="1.81" steps="564276"/></proof>
          </goal>
          <goal name="bijective_concat&#39;vc.0.18.0.0.0.0.0.0.1" expl="asserted formula (false case)" proved="true">
          <proof prover="7"><result status="valid" time="0.72" steps="508153"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="bijective_concat&#39;vc.0.18.0.0.0.0.0.1" expl="true case (precondition)" proved="true">
         <proof prover="7"><result status="valid" time="4.19" steps="1515779"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="bijective_concat&#39;vc.0.18.0.0.0.0.1" expl="true case (precondition)" proved="true">
        <proof prover="7"><result status="valid" time="0.82" steps="574791"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="bijective_concat&#39;vc.0.18.0.0.1" expl="false case (true case. precondition)" proved="true">
      <proof prover="7"><result status="valid" time="2.08" steps="633094"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="bijective_concat&#39;vc.0.18.0.1" expl="false case (precondition)" proved="true">
     <transf name="assert" proved="true" arg1="(not (concat (fir e) (sec e) = concat (fir e&#39;) (sec e&#39;)))">
      <goal name="bijective_concat&#39;vc.0.18.0.1.0" expl="asserted formula" proved="true">
      <transf name="case" proved="true" arg1="(concat (fir e) (sec e) = concat (fir e&#39;) (sec e&#39;))">
       <goal name="bijective_concat&#39;vc.0.18.0.1.0.0" expl="asserted formula (true case)" proved="true">
       <proof prover="7"><result status="valid" time="2.25" steps="686359"/></proof>
       </goal>
       <goal name="bijective_concat&#39;vc.0.18.0.1.0.1" expl="asserted formula (false case)" proved="true">
       <proof prover="7"><result status="valid" time="0.88" steps="503355"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="bijective_concat&#39;vc.0.18.0.1.1" expl="false case (precondition)" proved="true">
      <proof prover="7"><result status="valid" time="2.69" steps="797657"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="bijective_concat&#39;vc.0.19" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(length e&#39; = i+j)">
    <goal name="bijective_concat&#39;vc.0.19.0" expl="asserted formula" proved="true">
    <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (o:(bitvec, bitvec)) -&gt;
     if mem o (cartesian_product (n_bvs i) (n_bvs j))
     then concat (fir o) (sec o)
     else make_bv ((fun (y0:int) (y1:int) -&gt; const y0 y1) @ 0) (i + j)),(cartesian_product (n_bvs i) (n_bvs j)),e&#39;">
     <goal name="bijective_concat&#39;vc.0.19.0.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="5.33" steps="1540219"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="bijective_concat&#39;vc.0.19.1" expl="precondition" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="bijective_concat&#39;vc.0.19.1.0" expl="precondition" proved="true">
     <transf name="replace" proved="true" arg1="(concat
        (match if length e&#39; = (i + j) then (hpart e&#39; i, tpart e&#39; i)
              else (make_bv ((fun (y0:int) (y1:int) -&gt; const y0 y1) @ 0) i,
              make_bv ((fun (y0:int) (y1:int) -&gt; const y0 y1) @ 0) j) with
        | x, _ -&gt; x
        end
)     (   match if length e&#39; = (i + j) then (hpart e&#39; i, tpart e&#39; i)
              else (make_bv ((fun (y0:int) (y1:int) -&gt; const y0 y1) @ 0) i,
              make_bv ((fun (y0:int) (y1:int) -&gt; const y0 y1) @ 0) j) with
        | _, y -&gt; y
        end))" arg2="e&#39;">
      <goal name="bijective_concat&#39;vc.0.19.1.0.0" expl="precondition" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="bijective_concat&#39;vc.0.19.1.0.0.0" expl="precondition" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="bijective_concat&#39;vc.0.19.1.0.0.0.0" expl="VC for bijective_concat" proved="true">
        <transf name="apply" proved="true" arg1="mem_cartesian_product">
         <goal name="bijective_concat&#39;vc.0.19.1.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="1.54" steps="567136"/></proof>
         </goal>
         <goal name="bijective_concat&#39;vc.0.19.1.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="1.61" steps="567095"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="bijective_concat&#39;vc.0.19.1.0.0.0.1" expl="VC for bijective_concat" proved="true">
        <proof prover="7"><result status="valid" time="0.91" steps="575209"/></proof>
        </goal>
        <goal name="bijective_concat&#39;vc.0.19.1.0.0.0.2" expl="VC for bijective_concat" proved="true">
        <proof prover="7"><result status="valid" time="0.89" steps="575256"/></proof>
        </goal>
        <goal name="bijective_concat&#39;vc.0.19.1.0.0.0.3" expl="VC for bijective_concat" proved="true">
        <transf name="assert" proved="true" arg1="((length e&#39; = (i + j) -&gt;
        mem (hpart e&#39; i, tpart e&#39; i) (cartesian_product (n_bvs i) (n_bvs j))) /\
       (not length e&#39; = (i + j) -&gt;
        mem (make_bv ((fun (y0:int) (y1:int) -&gt; const y0 y1) @ 0) i,
        make_bv ((fun (y0:int) (y1:int) -&gt; const y0 y1) @ 0) j)
        (cartesian_product (n_bvs i) (n_bvs j))))">
         <goal name="bijective_concat&#39;vc.0.19.1.0.0.0.3.0" expl="asserted formula" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="bijective_concat&#39;vc.0.19.1.0.0.0.3.0.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="mem_cartesian_product">
           <goal name="bijective_concat&#39;vc.0.19.1.0.0.0.3.0.0.0" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="1.84" steps="640284"/></proof>
           </goal>
           <goal name="bijective_concat&#39;vc.0.19.1.0.0.0.3.0.0.1" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="1.84" steps="640308"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="bijective_concat&#39;vc.0.19.1.0.0.0.3.0.1" expl="asserted formula" proved="true">
          <proof prover="7"><result status="valid" time="0.88" steps="575387"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="bijective_concat&#39;vc.0.19.1.0.0.0.3.1" expl="VC for bijective_concat" proved="true">
         <proof prover="7"><result status="valid" time="0.88" steps="575463"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="bijective_concat&#39;vc.0.19.1.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="set_equal_bv">
       <goal name="bijective_concat&#39;vc.0.19.1.0.1.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="concat_length">
        <goal name="bijective_concat&#39;vc.0.19.1.0.1.0.0" expl="apply premises" proved="true">
        <transf name="eliminate_if" proved="true" >
         <goal name="bijective_concat&#39;vc.0.19.1.0.1.0.0.0" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="bijective_concat&#39;vc.0.19.1.0.1.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="1.73" steps="570965"/></proof>
          </goal>
          <goal name="bijective_concat&#39;vc.0.19.1.0.1.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="0.93" steps="575173"/></proof>
          </goal>
          <goal name="bijective_concat&#39;vc.0.19.1.0.1.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="0.96" steps="575173"/></proof>
          </goal>
          <goal name="bijective_concat&#39;vc.0.19.1.0.1.0.0.0.3" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="bijective_concat&#39;vc.0.19.1.0.1.0.0.0.3.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="make_bv_length">
            <goal name="bijective_concat&#39;vc.0.19.1.0.1.0.0.0.3.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="make_bv_length">
             <goal name="bijective_concat&#39;vc.0.19.1.0.1.0.0.0.3.0.0.0" expl="apply premises" proved="true">
             <proof prover="7"><result status="valid" time="0.74" steps="508188"/></proof>
             </goal>
             <goal name="bijective_concat&#39;vc.0.19.1.0.1.0.0.0.3.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="7"><result status="valid" time="0.80" steps="540638"/></proof>
             </goal>
             <goal name="bijective_concat&#39;vc.0.19.1.0.1.0.0.0.3.0.0.2" expl="rewrite premises" proved="true">
             <proof prover="7"><result status="valid" time="0.74" steps="508181"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="bijective_concat&#39;vc.0.19.1.0.1.0.0.0.3.0.1" expl="rewrite premises" proved="true">
            <proof prover="7"><result status="valid" time="0.81" steps="540638"/></proof>
            </goal>
            <goal name="bijective_concat&#39;vc.0.19.1.0.1.0.0.0.3.0.2" expl="rewrite premises" proved="true">
            <proof prover="7"><result status="valid" time="0.76" steps="508181"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="bijective_concat&#39;vc.0.19.1.0.1.1" expl="apply premises" proved="true">
       <proof prover="7"><result status="valid" time="1.96" steps="641329"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="bijective_concat&#39;vc.0.20" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.17" steps="542965"/></proof>
   </goal>
   <goal name="bijective_concat&#39;vc.0.21" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.75" steps="517550"/></proof>
   </goal>
   <goal name="bijective_concat&#39;vc.0.22" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.75" steps="517771"/></proof>
   </goal>
   <goal name="bijective_concat&#39;vc.0.23" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(fun (o:(bitvec, bitvec)) -&gt;
     if mem o (cartesian_product (n_bvs i) (n_bvs j))
     then concat (match o with
          | x, _ -&gt; x
          end) (match o with
          | _, y -&gt; y
          end)
     else make_bv ((fun (y0:int) (y1:int) -&gt; const y0 y1) @ 0) (i + j))" arg2="(fun (o:(bitvec, bitvec)) -&gt;
     if mem o (cartesian_product (n_bvs i) (n_bvs j))
     then concat (fir o) (sec o)
     else make_bv ((fun (y0:int) (y1:int) -&gt; const y0 y1) @ 0) (i + j))">
    <goal name="bijective_concat&#39;vc.0.23.0" expl="precondition" proved="true">
    <transf name="replace" proved="true" arg1="(fun (o:(bitvec, bitvec)) -&gt;
    if mem o (cartesian_product (n_bvs i) (n_bvs j))
    then concat (match o with
         | x, _ -&gt; x
         end) ( match o with
         | _, y -&gt; y
         end)
    else make_bv ((fun (y0:int) (y1:int) -&gt; const y0 y1) @ 0) (i + j))" arg2="(fun (o:(bitvec, bitvec)) -&gt;
    if mem o (cartesian_product (n_bvs i) (n_bvs j))
    then concat (fir o) (sec o)
    else make_bv ((fun (y0:int) (y1:int) -&gt; const y0 y1) @ 0) (i + j))" arg3="in" arg4="Ensures17">
     <goal name="bijective_concat&#39;vc.0.23.0.0" expl="precondition" proved="true">
     <transf name="replace" proved="true" arg1="(fun (o:(bitvec, bitvec)) -&gt;
    if mem o (cartesian_product (n_bvs i) (n_bvs j))
    then concat (match o with
         | x, _ -&gt; x
         end) ( match o with
         | _, y -&gt; y
         end)
    else make_bv ((fun (y0:int) (y1:int) -&gt; const y0 y1) @ 0) (i + j))" arg2="(fun (o:(bitvec, bitvec)) -&gt;
    if mem o (cartesian_product (n_bvs i) (n_bvs j))
    then concat (fir o) (sec o)
    else make_bv ((fun (y0:int) (y1:int) -&gt; const y0 y1) @ 0) (i + j))" arg3="in" arg4="Ensures29">
      <goal name="bijective_concat&#39;vc.0.23.0.0.0" expl="precondition" proved="true">
      <transf name="rewrite" proved="true" arg1="Ensures29" arg2="in" arg3="Ensures17">
       <goal name="bijective_concat&#39;vc.0.23.0.0.0.0" expl="precondition" proved="true">
       <transf name="apply" proved="true" arg1="Ensures17">
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="bijective_concat&#39;vc.0.23.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="set_equal_func">
       <goal name="bijective_concat&#39;vc.0.23.0.0.1.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="bijective_concat&#39;vc.0.23.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="bijective_concat&#39;vc.0.23.0.0.1.0.0.0" expl="apply premises" proved="true">
         <transf name="eliminate_if" proved="true" >
          <goal name="bijective_concat&#39;vc.0.23.0.0.1.0.0.0.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="bijective_concat&#39;vc.0.23.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="2.81" steps="1085903"/></proof>
           </goal>
           <goal name="bijective_concat&#39;vc.0.23.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="0.82" steps="590170"/></proof>
           </goal>
           <goal name="bijective_concat&#39;vc.0.23.0.0.1.0.0.0.0.2" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="0.82" steps="591229"/></proof>
           </goal>
           <goal name="bijective_concat&#39;vc.0.23.0.0.1.0.0.0.0.3" expl="apply premises" proved="true">
           <proof prover="7"><result status="valid" time="1.66" steps="620535"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="bijective_concat&#39;vc.0.23.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="set_equal_func">
      <goal name="bijective_concat&#39;vc.0.23.0.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="bijective_concat&#39;vc.0.23.0.1.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="bijective_concat&#39;vc.0.23.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="eliminate_if" proved="true" >
         <goal name="bijective_concat&#39;vc.0.23.0.1.0.0.0.0" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="bijective_concat&#39;vc.0.23.0.1.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="3.15" steps="1086343"/></proof>
          </goal>
          <goal name="bijective_concat&#39;vc.0.23.0.1.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="0.77" steps="590122"/></proof>
          </goal>
          <goal name="bijective_concat&#39;vc.0.23.0.1.0.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="0.97" steps="591229"/></proof>
          </goal>
          <goal name="bijective_concat&#39;vc.0.23.0.1.0.0.0.0.3" expl="apply premises" proved="true">
          <proof prover="7"><result status="valid" time="1.68" steps="620487"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="bijective_concat&#39;vc.0.23.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_func">
     <goal name="bijective_concat&#39;vc.0.23.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="bijective_concat&#39;vc.0.23.1.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="bijective_concat&#39;vc.0.23.1.0.0.0" expl="apply premises" proved="true">
       <transf name="eliminate_if" proved="true" >
        <goal name="bijective_concat&#39;vc.0.23.1.0.0.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="bijective_concat&#39;vc.0.23.1.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="3.18" steps="1086343"/></proof>
         </goal>
         <goal name="bijective_concat&#39;vc.0.23.1.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="0.89" steps="590122"/></proof>
         </goal>
         <goal name="bijective_concat&#39;vc.0.23.1.0.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="0.86" steps="591229"/></proof>
         </goal>
         <goal name="bijective_concat&#39;vc.0.23.1.0.0.0.0.3" expl="apply premises" proved="true">
         <proof prover="7"><result status="valid" time="1.55" steps="620487"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="bijective_concat&#39;vc.0.24" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.74" steps="518381"/></proof>
   </goal>
   <goal name="bijective_concat&#39;vc.0.25" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.73" steps="518602"/></proof>
   </goal>
   <goal name="bijective_concat&#39;vc.0.26" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.15" steps="544817"/></proof>
   </goal>
   <goal name="bijective_concat&#39;vc.0.27" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures45" arg2="in" arg3="Ensures32">
    <goal name="bijective_concat&#39;vc.0.27.0" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="Ensures32">
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="bijective_concat&#39;vc.0.28" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="bijective_concat&#39;vc.0.28.0" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="4.54" steps="1179296"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="bijective_concat&#39;vc.0.29" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="bijective_concat&#39;vc.0.29.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="Ensures1">
     <goal name="bijective_concat&#39;vc.0.29.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="bijective_concat&#39;vc.0.29.0.0.0" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="1.77" steps="667208"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_int_hpart&#39;vc" expl="VC for bv_to_int_hpart" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_to_int_hpart&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
   <goal name="bv_to_int_hpart&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
    <goal name="bv_to_int_hpart&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="div_ind_isum">
     <goal name="bv_to_int_hpart&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
      <goal name="bv_to_int_hpart&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="bv_to_int_hpart&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="bv_to_int_hpart&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(((length bv - 1) - k) - (length bv - l))" arg2="((length (hpart bv l) - 1) - k)">
         <goal name="bv_to_int_hpart&#39;vc.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="2.27" steps="37622"/></proof>
         </goal>
         <goal name="bv_to_int_hpart&#39;vc.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="7"><result status="valid" time="0.86" steps="350282"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="bv_to_int_hpart&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="0.41" steps="303671"/></proof>
      </goal>
      <goal name="bv_to_int_hpart&#39;vc.0.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="0.87" steps="350204"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="bv_to_int_hpart&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="bv_to_int_hpart&#39;vc.0.0.0.1.0" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.40" steps="303691"/></proof>
      </goal>
      <goal name="bv_to_int_hpart&#39;vc.0.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.40" steps="303691"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="bv_to_int_hpart&#39;vc.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.70" steps="353688"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_int_tpart&#39;vc" expl="VC for bv_to_int_tpart" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_to_int_tpart&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
   <goal name="bv_to_int_tpart&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
    <goal name="bv_to_int_tpart&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="mod_ind_isum_z">
     <goal name="bv_to_int_tpart&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
      <goal name="bv_to_int_tpart&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="bv_to_int_tpart&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="bv_to_int_tpart&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="bv_to_int_tpart&#39;vc.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="4.80" steps="109403"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="bv_to_int_tpart&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="0.37" steps="303868"/></proof>
      </goal>
      <goal name="bv_to_int_tpart&#39;vc.0.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="7"><result status="valid" time="0.85" steps="350384"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="bv_to_int_tpart&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="bv_to_int_tpart&#39;vc.0.0.0.1.0" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.39" steps="303888"/></proof>
      </goal>
      <goal name="bv_to_int_tpart&#39;vc.0.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="0.41" steps="303888"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="bv_to_int_tpart&#39;vc.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.73" steps="353806"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_int_hpart_rev&#39;vc" expl="VC for bv_to_int_hpart_rev" proved="true">
 <proof prover="7"><result status="valid" time="0.87" steps="351182"/></proof>
 </goal>
 <goal name="bv_to_int_tpart_rev&#39;vc" expl="VC for bv_to_int_tpart_rev" proved="true">
 <proof prover="7"><result status="valid" time="0.84" steps="351872"/></proof>
 </goal>
</theory>
<theory name="Bv_op" proved="true">
 <goal name="bin_and&#39;vc" expl="VC for bin_and" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bin_and&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bin_and&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="bin_and&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="0.40" steps="291281"/></proof>
    </goal>
    <goal name="bin_and&#39;vc.0.0.1" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="0.41" steps="291303"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="bin_and&#39;vc.0.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="bin_and&#39;vc.0.1.0" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="0.40" steps="291265"/></proof>
    </goal>
    <goal name="bin_and&#39;vc.0.1.1" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="0.40" steps="291287"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="bin_and&#39;vc.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bin_and&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="bin_and&#39;vc.1.0.0" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="0.53" steps="305474"/></proof>
    </goal>
    <goal name="bin_and&#39;vc.1.0.1" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="0.39" steps="291318"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="bin_and&#39;vc.1.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="bin_and&#39;vc.1.1.0" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="0.53" steps="305477"/></proof>
    </goal>
    <goal name="bin_and&#39;vc.1.1.1" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="0.41" steps="291322"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="bin_and&#39;vc.1.2" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="bin_and&#39;vc.1.2.0" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="0.35" steps="285860"/></proof>
    </goal>
    <goal name="bin_and&#39;vc.1.2.1" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="0.38" steps="285889"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="bin_and&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bin_and&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="bin_and&#39;vc.2.0.0" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="0.41" steps="291339"/></proof>
    </goal>
    <goal name="bin_and&#39;vc.2.0.1" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="0.64" steps="305682"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="bin_and&#39;vc.2.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="bin_and&#39;vc.2.1.0" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="0.56" steps="305493"/></proof>
    </goal>
    <goal name="bin_and&#39;vc.2.1.1" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="0.35" steps="285925"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bin_andv&#39;vc" expl="VC for bin_andv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bin_andv&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.93" steps="360422"/></proof>
  </goal>
  <goal name="bin_andv&#39;vc.1" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="3.55" steps="1053670"/></proof>
  </goal>
  <goal name="bin_andv&#39;vc.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bin_andv&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.06" steps="361761"/></proof>
   </goal>
   <goal name="bin_andv&#39;vc.2.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.87" steps="361755"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="bin_andv&#39;vc.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bin_andv&#39;vc.3.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.07" steps="363071"/></proof>
   </goal>
   <goal name="bin_andv&#39;vc.3.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.88" steps="363065"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="bin_andv&#39;vc.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bin_andv&#39;vc.4.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="3.36" steps="998592"/></proof>
   </goal>
   <goal name="bin_andv&#39;vc.4.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="3.42" steps="998481"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="bin_andv&#39;vc.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bin_andv&#39;vc.5.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.87" steps="362282"/></proof>
   </goal>
   <goal name="bin_andv&#39;vc.5.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.86" steps="362286"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="bin_andv&#39;vc.6" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bin_andv&#39;vc.6.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.88" steps="363599"/></proof>
   </goal>
   <goal name="bin_andv&#39;vc.6.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.06" steps="363593"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="bin_andv&#39;vc.7" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bin_andv&#39;vc.7.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="3.44" steps="999678"/></proof>
   </goal>
   <goal name="bin_andv&#39;vc.7.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="3.65" steps="999609"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="bin_andv&#39;vc.8" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.89" steps="361425"/></proof>
  </goal>
  <goal name="bin_andv&#39;vc.9" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bin_andv&#39;vc.9.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.88" steps="363548"/></proof>
   </goal>
   <goal name="bin_andv&#39;vc.9.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.88" steps="363542"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="bin_andv&#39;vc.10" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bin_andv&#39;vc.10.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.90" steps="364867"/></proof>
   </goal>
   <goal name="bin_andv&#39;vc.10.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.90" steps="364861"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="bin_andv&#39;vc.11" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bin_andv&#39;vc.11.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="3.52" steps="1001095"/></proof>
   </goal>
   <goal name="bin_andv&#39;vc.11.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="3.52" steps="1001044"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="bin_andv&#39;vc.12" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bin_andv&#39;vc.12.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.88" steps="364021"/></proof>
   </goal>
   <goal name="bin_andv&#39;vc.12.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.87" steps="364025"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="bin_andv&#39;vc.13" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bin_andv&#39;vc.13.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.87" steps="365342"/></proof>
   </goal>
   <goal name="bin_andv&#39;vc.13.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.89" steps="365336"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="bin_andv&#39;vc.14" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="bin_andv&#39;vc.14.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="3.51" steps="1002310"/></proof>
   </goal>
   <goal name="bin_andv&#39;vc.14.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="3.43" steps="1002278"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="bin_andv&#39;vc.15" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.91" steps="363213"/></proof>
  </goal>
  <goal name="bin_andv&#39;vc.16" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.42" steps="314219"/></proof>
  </goal>
  <goal name="bin_andv&#39;vc.17" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_bv">
   <goal name="bin_andv&#39;vc.17.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="bin_andv&#39;vc.17.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="make_bv_length">
     <goal name="bin_andv&#39;vc.17.0.0.0" expl="apply premises" proved="true">
     <proof prover="7"><result status="valid" time="0.44" steps="314222"/></proof>
     </goal>
     <goal name="bin_andv&#39;vc.17.0.0.1" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="bin_andv&#39;vc.17.0.0.1.0" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="3.46" steps="1003709"/></proof>
      </goal>
      <goal name="bin_andv&#39;vc.17.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="3.44" steps="1003625"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="bin_andv&#39;vc.17.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="1.08" steps="363420"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="bin_andv&#39;vc.17.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="bin_andv&#39;vc.17.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures2">
     <goal name="bin_andv&#39;vc.17.1.0.0" expl="apply premises" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="bin_andv&#39;vc.17.1.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="bin_andv&#39;vc.17.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="assert_make_bv">
        <goal name="bin_andv&#39;vc.17.1.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="7"><result status="valid" time="0.85" steps="335798"/></proof>
        </goal>
        <goal name="bin_andv&#39;vc.17.1.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="2.89" steps="832322"/></proof>
        </goal>
        <goal name="bin_andv&#39;vc.17.1.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="7"><result status="valid" time="0.83" steps="335075"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="bin_andv&#39;vc.17.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="0.69" steps="333896"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="bin_andv&#39;vc.18" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="3.79" steps="1140822"/></proof>
  </goal>
  <goal name="bin_andv&#39;vc.19" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="3.73" steps="1063660"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bin_andv_values&#39;vc" expl="VC for bin_andv_values" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bin_andv_values&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.91" steps="367176"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="int_bin_and_seq&#39;vc" expl="VC for int_bin_and_seq" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="int_bin_and_seq&#39;vc.0" expl="VC for int_bin_and_seq" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="int_bin_and_seq&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.73" steps="306371"/></proof>
   </goal>
   <goal name="int_bin_and_seq&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.65" steps="333217"/></proof>
   </goal>
   <goal name="int_bin_and_seq&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.64" steps="333444"/></proof>
   </goal>
   <goal name="int_bin_and_seq&#39;vc.0.3" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="1.10" steps="365514"/></proof>
   </goal>
   <goal name="int_bin_and_seq&#39;vc.0.4" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="0.84" steps="333865"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="int_bin_and_seq_inst&#39;vc" expl="VC for int_bin_and_seq_inst" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_bin_and_seq_inst&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.07" steps="364370"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="int_bin_and_seq_zero&#39;vc" expl="VC for int_bin_and_seq_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_bin_and_seq_zero&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="3.68" steps="974382"/></proof>
  </goal>
  <goal name="int_bin_and_seq_zero&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="3.75" steps="974432"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="popcount&#39;vc" expl="VC for popcount" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="popcount&#39;vc.0" expl="VC for popcount" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="popcount&#39;vc.0.0" expl="variant decrease" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="popcount&#39;vc.0.0.0" expl="variant decrease" proved="true">
    <proof prover="7"><result status="valid" time="0.41" steps="315166"/></proof>
    </goal>
    <goal name="popcount&#39;vc.0.0.1" expl="variant decrease" proved="true">
    <proof prover="7"><result status="valid" time="0.41" steps="315186"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="popcount&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.83" steps="334467"/></proof>
   </goal>
   <goal name="popcount&#39;vc.0.2" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="popcount&#39;vc.0.2.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="1.08" steps="360700"/></proof>
    </goal>
    <goal name="popcount&#39;vc.0.2.1" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="1.08" steps="360694"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="popcount&#39;vc.0.3" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="popcount&#39;vc.0.3.0" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="0.88" steps="361706"/></proof>
    </goal>
    <goal name="popcount&#39;vc.0.3.1" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="0.92" steps="362673"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="popcount&#39;vc.0.4" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="popcount&#39;vc.0.4.0" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="0.91" steps="361557"/></proof>
    </goal>
    <goal name="popcount&#39;vc.0.4.1" expl="postcondition" proved="true">
    <proof prover="7"><result status="valid" time="1.12" steps="362692"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="and_bin&#39;vc" expl="VC for and_bin" proved="true">
 <proof prover="7"><result status="valid" time="0.37" steps="289199"/></proof>
 </goal>
 <goal name="positive_popcount&#39;vc" expl="VC for positive_popcount" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="positive_popcount&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="3.18" steps="919430"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="popcount_right_extension&#39;vc" expl="VC for popcount_right_extension" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="popcount_right_extension&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="popcount_right_extension&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="7"><result status="valid" time="3.26" steps="854015"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="popcount_left_extension&#39;vc" expl="VC for popcount_left_extension" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="popcount_left_extension&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="3.18" steps="923588"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="popcount_zero&#39;vc" expl="VC for popcount_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="popcount_zero&#39;vc.0" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.66" steps="335901"/></proof>
  </goal>
  <goal name="popcount_zero&#39;vc.1" expl="precondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="popcount_zero&#39;vc.1.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="popcount_zero&#39;vc.1.0.0" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.90" steps="361643"/></proof>
    </goal>
    <goal name="popcount_zero&#39;vc.1.0.1" expl="precondition" proved="true">
    <proof prover="7"><result status="valid" time="0.87" steps="361637"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="popcount_zero&#39;vc.2" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="popcount_zero&#39;vc.2.0" expl="variant decrease" proved="true">
   <proof prover="7"><result status="valid" time="0.41" steps="316663"/></proof>
   </goal>
   <goal name="popcount_zero&#39;vc.2.1" expl="variant decrease" proved="true">
   <proof prover="7"><result status="valid" time="0.40" steps="316672"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="popcount_zero&#39;vc.3" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.88" steps="363535"/></proof>
  </goal>
  <goal name="popcount_zero&#39;vc.4" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.68" steps="336083"/></proof>
  </goal>
  <goal name="popcount_zero&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="3.19" steps="926957"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="popcount_one&#39;vc" expl="VC for popcount_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="popcount_one&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.09" steps="364814"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="popcount_right_extension_comm&#39;vc" expl="VC for popcount_right_extension_comm" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="popcount_right_extension_comm&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="2.84" steps="925963"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="popcount_eq&#39;vc" expl="VC for popcount_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="popcount_eq&#39;vc.0" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="popcount_eq&#39;vc.0.0" expl="variant decrease" proved="true">
   <proof prover="7"><result status="valid" time="0.42" steps="317490"/></proof>
   </goal>
   <goal name="popcount_eq&#39;vc.0.1" expl="variant decrease" proved="true">
   <proof prover="7"><result status="valid" time="0.43" steps="317506"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="popcount_eq&#39;vc.1" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.90" steps="363302"/></proof>
  </goal>
  <goal name="popcount_eq&#39;vc.2" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.70" steps="336903"/></proof>
  </goal>
  <goal name="popcount_eq&#39;vc.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="popcount_eq&#39;vc.3.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.91" steps="363411"/></proof>
   </goal>
   <goal name="popcount_eq&#39;vc.3.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.89" steps="363400"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="popcount_eq&#39;vc.4" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.66" steps="336847"/></proof>
  </goal>
  <goal name="popcount_eq&#39;vc.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="popcount_eq&#39;vc.5.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="1.08" steps="364760"/></proof>
   </goal>
   <goal name="popcount_eq&#39;vc.5.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="0.87" steps="364749"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="popcount_eq&#39;vc.6" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.66" steps="336900"/></proof>
  </goal>
  <goal name="popcount_eq&#39;vc.7" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="popcount_eq&#39;vc.7.0" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="3.23" steps="931514"/></proof>
   </goal>
   <goal name="popcount_eq&#39;vc.7.1" expl="precondition" proved="true">
   <proof prover="7"><result status="valid" time="2.85" steps="931473"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="popcount_eq&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="2.83" steps="937486"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Binary_inversion_op">
 <goal name="head_bv_to_int_inversion&#39;vc" expl="VC for head_bv_to_int_inversion">
 <transf name="eliminate_let" >
  <goal name="head_bv_to_int_inversion&#39;vc.0" expl="VC for head_bv_to_int_inversion">
  <transf name="split_vc" >
   <goal name="head_bv_to_int_inversion&#39;vc.0.0" expl="precondition">
   <proof prover="7" obsolete="true"><result status="valid" time="0.60" steps="309493"/></proof>
   </goal>
   <goal name="head_bv_to_int_inversion&#39;vc.0.1" expl="precondition">
   <proof prover="7" obsolete="true"><result status="valid" time="0.40" steps="317414"/></proof>
   </goal>
   <goal name="head_bv_to_int_inversion&#39;vc.0.2" expl="precondition">
   <transf name="split_vc" >
    <goal name="head_bv_to_int_inversion&#39;vc.0.2.0" expl="precondition">
    <proof prover="7" obsolete="true"><result status="valid" time="0.40" steps="317413"/></proof>
    </goal>
    <goal name="head_bv_to_int_inversion&#39;vc.0.2.1" expl="precondition">
    <proof prover="7" obsolete="true"><result status="valid" time="0.42" steps="317413"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="head_bv_to_int_inversion&#39;vc.0.3" expl="precondition">
   <transf name="apply" arg1="set_binary">
    <goal name="head_bv_to_int_inversion&#39;vc.0.3.0" expl="apply premises">
    <transf name="split_vc" >
     <goal name="head_bv_to_int_inversion&#39;vc.0.3.0.0" expl="apply premises">
     <proof prover="6" obsolete="true"><result status="valid" time="1.40" steps="24913"/></proof>
     </goal>
     <goal name="head_bv_to_int_inversion&#39;vc.0.3.0.1" expl="apply premises">
     <proof prover="6" obsolete="true"><result status="valid" time="1.50" steps="25119"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="head_bv_to_int_inversion&#39;vc.0.4" expl="precondition">
   <proof prover="7" obsolete="true"><result status="valid" time="0.41" steps="317996"/></proof>
   </goal>
   <goal name="head_bv_to_int_inversion&#39;vc.0.5" expl="precondition">
   <transf name="split_vc" >
    <goal name="head_bv_to_int_inversion&#39;vc.0.5.0" expl="precondition">
    <proof prover="7" obsolete="true"><result status="valid" time="0.41" steps="317995"/></proof>
    </goal>
    <goal name="head_bv_to_int_inversion&#39;vc.0.5.1" expl="precondition">
    <proof prover="7" obsolete="true"><result status="valid" time="0.41" steps="317995"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="head_bv_to_int_inversion&#39;vc.0.6" expl="precondition">
   <transf name="apply" arg1="set_binary">
    <goal name="head_bv_to_int_inversion&#39;vc.0.6.0" expl="apply premises">
    <transf name="split_vc" >
     <goal name="head_bv_to_int_inversion&#39;vc.0.6.0.0" expl="apply premises">
     <proof prover="6" obsolete="true"><result status="valid" time="1.68" steps="28197"/></proof>
     </goal>
     <goal name="head_bv_to_int_inversion&#39;vc.0.6.0.1" expl="apply premises">
     <proof prover="6" obsolete="true"><result status="valid" time="1.67" steps="28375"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="head_bv_to_int_inversion&#39;vc.0.7" expl="postcondition">
   <transf name="rewrite" arg1="Ensures2">
    <goal name="head_bv_to_int_inversion&#39;vc.0.7.0" expl="postcondition">
    <transf name="replace" arg1="(ind_isum
   (fun (k:int) -&gt;
     (getbv (make_bv_m f n) @ ((length (make_bv_m f n) - k) - 1))
     * power 2 ((length (make_bv_m f n) - 1) - k))
   0 (length (make_bv_m f n)))" arg2="(ind_isum
   (fun (k:int) -&gt;
     ((fun (k1:int) -&gt; mod (f @ ((n - k1) - 1)) 2) @ k)
     * power 2 ((n - 1) - k))
   0 n)">
     <goal name="head_bv_to_int_inversion&#39;vc.0.7.0.0" expl="postcondition">
     <transf name="replace" arg1="(power 2 1)" arg2="2" arg3="in" arg4="Ensures">
      <goal name="head_bv_to_int_inversion&#39;vc.0.7.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="Ensures">
       <goal name="head_bv_to_int_inversion&#39;vc.0.7.0.0.0.0" expl="postcondition">
       <transf name="rewrite" arg1="ind_isum_one">
        <goal name="head_bv_to_int_inversion&#39;vc.0.7.0.0.0.0.0" expl="postcondition">
        <transf name="compute_specified" >
         <goal name="head_bv_to_int_inversion&#39;vc.0.7.0.0.0.0.0.0" expl="postcondition">
         <proof prover="0" obsolete="true"><result status="valid" time="0.39"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="head_bv_to_int_inversion&#39;vc.0.7.0.0.0.0.1" expl="rewrite premises">
        <transf name="compute_specified" >
         <goal name="head_bv_to_int_inversion&#39;vc.0.7.0.0.0.0.1.0" expl="rewrite premises">
         <proof prover="7" obsolete="true"><result status="valid" time="0.39" steps="318542"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="head_bv_to_int_inversion&#39;vc.0.7.0.0.1" expl="equality hypothesis">
      <proof prover="7" obsolete="true"><result status="valid" time="0.68" steps="338774"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="head_bv_to_int_inversion&#39;vc.0.7.0.1" expl="equality hypothesis">
     <transf name="replace" arg1="(power 2 1)" arg2="2" arg3="in" arg4="Ensures">
      <goal name="head_bv_to_int_inversion&#39;vc.0.7.0.1.0" expl="equality hypothesis">
      <transf name="apply" arg1="ind_isum_eq_gen">
       <goal name="head_bv_to_int_inversion&#39;vc.0.7.0.1.0.0" expl="apply premises">
       <transf name="split_vc" >
        <goal name="head_bv_to_int_inversion&#39;vc.0.7.0.1.0.0.0" expl="apply premises">
        <transf name="compute_specified" >
         <goal name="head_bv_to_int_inversion&#39;vc.0.7.0.1.0.0.0.0" expl="apply premises">
         <proof prover="0" obsolete="true"><result status="valid" time="0.39"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="head_bv_to_int_inversion&#39;vc.0.7.0.1.0.1" expl="apply premises">
       <proof prover="7" obsolete="true"><result status="valid" time="0.45" steps="318526"/></proof>
       </goal>
       <goal name="head_bv_to_int_inversion&#39;vc.0.7.0.1.0.2" expl="apply premises">
       <proof prover="7" obsolete="true"><result status="valid" time="0.45" steps="318528"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="head_bv_to_int_inversion&#39;vc.0.7.0.1.1" expl="equality hypothesis">
      <proof prover="7" obsolete="true"><result status="valid" time="0.71" steps="338774"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="head_bv_to_int_inversion&#39;vc.0.8" expl="postcondition">
   <transf name="rewrite" arg1="Ensures3">
    <goal name="head_bv_to_int_inversion&#39;vc.0.8.0" expl="postcondition">
    <transf name="replace" arg1="(ind_isum
     (fun (k:int) -&gt;
       (getbv (make_bv_m f n) @ ((length (make_bv_m f n) - k) - 1))
       * power 2 ((length (make_bv_m f n) - 1) - k))
     0 (length (make_bv_m f n)))" arg2="(ind_isum
   (fun (k:int) -&gt;
     ((fun (k1:int) -&gt; mod (f @ ((n - k1) - 1)) 2) @ k)
     * power 2 ((n - 1) - k))
   0 n)
">
     <goal name="head_bv_to_int_inversion&#39;vc.0.8.0.0" expl="postcondition">
     <transf name="replace" arg1="(power 2 1)" arg2="2" arg3="in" arg4="Ensures2">
      <goal name="head_bv_to_int_inversion&#39;vc.0.8.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="Ensures2">
       <goal name="head_bv_to_int_inversion&#39;vc.0.8.0.0.0.0" expl="postcondition">
       <transf name="apply" arg1="ind_isum_eq_gen">
        <goal name="head_bv_to_int_inversion&#39;vc.0.8.0.0.0.0.0" expl="apply premises">
        <transf name="split_vc" >
         <goal name="head_bv_to_int_inversion&#39;vc.0.8.0.0.0.0.0.0" expl="apply premises">
         <transf name="compute_specified" >
          <goal name="head_bv_to_int_inversion&#39;vc.0.8.0.0.0.0.0.0.0" expl="apply premises">
          <proof prover="7" obsolete="true"><result status="valid" time="0.43" steps="318687"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="head_bv_to_int_inversion&#39;vc.0.8.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="head_bv_to_int_inversion&#39;vc.0.8.0.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="head_bv_to_int_inversion&#39;vc.0.8.0.0.0.0.2" expl="apply premises">
        <proof prover="7" obsolete="true"><result status="valid" time="0.44" steps="318558"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="head_bv_to_int_inversion&#39;vc.0.8.0.0.1" expl="equality hypothesis">
      <proof prover="7" obsolete="true"><result status="valid" time="0.72" steps="338970"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="head_bv_to_int_inversion&#39;vc.0.8.0.1" expl="equality hypothesis">
     <transf name="apply" arg1="ind_isum_eq_gen">
      <goal name="head_bv_to_int_inversion&#39;vc.0.8.0.1.0" expl="apply premises">
      <transf name="split_vc" >
       <goal name="head_bv_to_int_inversion&#39;vc.0.8.0.1.0.0" expl="apply premises">
       <transf name="compute_specified" >
        <goal name="head_bv_to_int_inversion&#39;vc.0.8.0.1.0.0.0" expl="apply premises">
        <proof prover="0" obsolete="true"><result status="valid" time="0.41"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="head_bv_to_int_inversion&#39;vc.0.8.0.1.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="head_bv_to_int_inversion&#39;vc.0.8.0.1.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="head_bv_to_int_inversion&#39;vc.0.8.0.1.2" expl="apply premises">
      <proof prover="7" obsolete="true"><result status="valid" time="0.45" steps="318574"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cond_mod_sum&#39;vc" expl="VC for cond_mod_sum">
 <transf name="eliminate_let" >
  <goal name="cond_mod_sum&#39;vc.0" expl="VC for cond_mod_sum">
  <transf name="split_vc" >
   <goal name="cond_mod_sum&#39;vc.0.0" expl="precondition">
   <proof prover="7" obsolete="true"><result status="valid" time="0.39" steps="291318"/></proof>
   </goal>
   <goal name="cond_mod_sum&#39;vc.0.1" expl="precondition">
   <transf name="split_vc" >
    <goal name="cond_mod_sum&#39;vc.0.1.0" expl="precondition">
    <proof prover="7" obsolete="true"><result status="valid" time="0.38" steps="291324"/></proof>
    </goal>
    <goal name="cond_mod_sum&#39;vc.0.1.1" expl="precondition">
    <proof prover="7" obsolete="true"><result status="valid" time="0.38" steps="291324"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="cond_mod_sum&#39;vc.0.2" expl="precondition">
   <transf name="split_vc" >
    <goal name="cond_mod_sum&#39;vc.0.2.0" expl="precondition">
    <transf name="apply" arg1="set_binary">
     <goal name="cond_mod_sum&#39;vc.0.2.0.0" expl="apply premises">
     <transf name="compute_specified" >
      <goal name="cond_mod_sum&#39;vc.0.2.0.0.0" expl="apply premises">
      <proof prover="7" obsolete="true"><result status="valid" time="0.41" steps="317877"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="cond_mod_sum&#39;vc.0.3" expl="postcondition">
   <transf name="destruct" arg1="H">
    <goal name="cond_mod_sum&#39;vc.0.3.0" expl="postcondition">
    <transf name="rewrite" arg1="bv_to_int_sum">
     <goal name="cond_mod_sum&#39;vc.0.3.0.0" expl="postcondition">
     <transf name="replace" arg1="(length (make_bv_m bvx n))" arg2="n" arg3="in" arg4="H">
      <goal name="cond_mod_sum&#39;vc.0.3.0.0.0" expl="postcondition">
      <transf name="replace" arg1="(length (make_bv_m bvx n))" arg2="n">
       <goal name="cond_mod_sum&#39;vc.0.3.0.0.0.0" expl="postcondition">
       <transf name="split_all_full" >
        <goal name="cond_mod_sum&#39;vc.0.3.0.0.0.0.0" expl="postcondition">
        <transf name="split_vc" >
         <goal name="cond_mod_sum&#39;vc.0.3.0.0.0.0.0.0" expl="postcondition">
         <proof prover="7" obsolete="true"><result status="valid" time="1.02" steps="414404"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="cond_mod_sum&#39;vc.0.3.0.0.0.1" expl="equality hypothesis">
       <proof prover="7" obsolete="true"><result status="valid" time="0.88" steps="365186"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="cond_mod_sum&#39;vc.0.3.0.0.1" expl="equality hypothesis">
      <proof prover="7" obsolete="true"><result status="valid" time="0.86" steps="365186"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="cond_mod_sum&#39;vc.0.3.1" expl="postcondition">
    <transf name="rewrite" arg1="bv_to_int_sum">
     <goal name="cond_mod_sum&#39;vc.0.3.1.0" expl="postcondition">
     <transf name="replace" arg1="(ind_isum
     (fun (k:int) -&gt;
       (getbv (make_bv_m bvx n) @ k)
       * power 2 ((length (make_bv_m bvx n) - 1) - k))
     0 (length (make_bv_m bvx n)))" arg2="(ind_isum
   (fun (k:int) -&gt;
     ((fun (k1:int) -&gt; mod (bvx @ k1) 2) @ k) * power 2 ((n - 1) - k))
   0 n)">
      <goal name="cond_mod_sum&#39;vc.0.3.1.0.0" expl="postcondition">
      <transf name="rewrite" arg1="H">
       <goal name="cond_mod_sum&#39;vc.0.3.1.0.0.0" expl="postcondition">
       <transf name="apply" arg1="ind_isum_eq_gen">
        <goal name="cond_mod_sum&#39;vc.0.3.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="cond_mod_sum&#39;vc.0.3.1.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="cond_mod_sum&#39;vc.0.3.1.0.0.0.1" expl="apply premises">
        <transf name="split_vc" >
         <goal name="cond_mod_sum&#39;vc.0.3.1.0.0.0.1.0" expl="apply premises">
         <proof prover="7" obsolete="true"><result status="valid" time="0.41" steps="318145"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="cond_mod_sum&#39;vc.0.3.1.0.0.0.2" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="cond_mod_sum&#39;vc.0.3.1.0.0.0.2.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="cond_mod_sum&#39;vc.0.3.1.0.1" expl="equality hypothesis">
      <transf name="apply" arg1="ind_isum_eq_gen">
       <goal name="cond_mod_sum&#39;vc.0.3.1.0.1.0" expl="apply premises">
       <transf name="split_vc" >
        <goal name="cond_mod_sum&#39;vc.0.3.1.0.1.0.0" expl="apply premises">
        <transf name="compute_specified" >
         <goal name="cond_mod_sum&#39;vc.0.3.1.0.1.0.0.0" expl="apply premises">
         <transf name="split_all_full" >
          <goal name="cond_mod_sum&#39;vc.0.3.1.0.1.0.0.0.0" expl="apply premises">
          <transf name="rewrite" arg1="make_bv_m&#39;spec2">
           <goal name="cond_mod_sum&#39;vc.0.3.1.0.1.0.0.0.0.0" expl="apply premises">
           <proof prover="0" obsolete="true"><result status="valid" time="0.44"/></proof>
           </goal>
           <goal name="cond_mod_sum&#39;vc.0.3.1.0.1.0.0.0.0.1" expl="rewrite premises">
           <proof prover="7" obsolete="true"><result status="valid" time="0.82" steps="383867"/></proof>
           </goal>
           <goal name="cond_mod_sum&#39;vc.0.3.1.0.1.0.0.0.0.2" expl="rewrite premises">
           <proof prover="7" obsolete="true"><result status="valid" time="1.05" steps="417725"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="cond_mod_sum&#39;vc.0.3.1.0.1.1" expl="apply premises">
       <transf name="split_vc" >
        <goal name="cond_mod_sum&#39;vc.0.3.1.0.1.1.0" expl="apply premises">
        <proof prover="7" obsolete="true"><result status="valid" time="0.43" steps="318136"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="cond_mod_sum&#39;vc.0.3.1.0.1.2" expl="apply premises">
       <transf name="split_vc" >
        <goal name="cond_mod_sum&#39;vc.0.3.1.0.1.2.0" expl="apply premises">
        <proof prover="7" obsolete="true"><result status="valid" time="0.91" steps="369295"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cond_mod_sum_gen&#39;vc" expl="VC for cond_mod_sum_gen">
 <transf name="split_vc" >
  <goal name="cond_mod_sum_gen&#39;vc.0" expl="postcondition">
  <transf name="apply" arg1="cond_mod_sum">
   <goal name="cond_mod_sum_gen&#39;vc.0.0" expl="apply premises">
   <proof prover="7" obsolete="true"><result status="valid" time="0.35" steps="291718"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cond_mod_sum_gen&#39;vc.1" expl="postcondition">
  <transf name="rewrite" arg1="Ensures">
   <goal name="cond_mod_sum_gen&#39;vc.1.0" expl="postcondition">
   <proof prover="7" obsolete="true"><result status="valid" time="0.41" steps="318323"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cond_mod_sum_inversion&#39;vc" expl="VC for cond_mod_sum_inversion">
 <transf name="eliminate_let" >
  <goal name="cond_mod_sum_inversion&#39;vc.0" expl="VC for cond_mod_sum_inversion">
  <transf name="split_vc" >
   <goal name="cond_mod_sum_inversion&#39;vc.0.0" expl="precondition">
   <proof prover="7" obsolete="true"><result status="valid" time="0.60" steps="311593"/></proof>
   </goal>
   <goal name="cond_mod_sum_inversion&#39;vc.0.1" expl="precondition">
   <proof prover="7" obsolete="true"><result status="valid" time="0.44" steps="319353"/></proof>
   </goal>
   <goal name="cond_mod_sum_inversion&#39;vc.0.2" expl="precondition">
   <transf name="split_vc" >
    <goal name="cond_mod_sum_inversion&#39;vc.0.2.0" expl="precondition">
    <proof prover="7" obsolete="true"><result status="valid" time="0.41" steps="319359"/></proof>
    </goal>
    <goal name="cond_mod_sum_inversion&#39;vc.0.2.1" expl="precondition">
    <proof prover="7" obsolete="true"><result status="valid" time="0.42" steps="319359"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="cond_mod_sum_inversion&#39;vc.0.3" expl="precondition">
   <transf name="apply" arg1="set_binary">
    <goal name="cond_mod_sum_inversion&#39;vc.0.3.0" expl="apply premises">
    <transf name="split_vc" >
     <goal name="cond_mod_sum_inversion&#39;vc.0.3.0.0" expl="apply premises">
     <proof prover="6" obsolete="true"><result status="valid" time="1.41" steps="25287"/></proof>
     </goal>
     <goal name="cond_mod_sum_inversion&#39;vc.0.3.0.1" expl="apply premises">
     <proof prover="6" obsolete="true"><result status="valid" time="1.45" steps="25495"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="cond_mod_sum_inversion&#39;vc.0.4" expl="precondition">
   <proof prover="7" obsolete="true"><result status="valid" time="0.41" steps="319946"/></proof>
   </goal>
   <goal name="cond_mod_sum_inversion&#39;vc.0.5" expl="precondition">
   <transf name="split_vc" >
    <goal name="cond_mod_sum_inversion&#39;vc.0.5.0" expl="precondition">
    <proof prover="7" obsolete="true"><result status="valid" time="0.40" steps="319945"/></proof>
    </goal>
    <goal name="cond_mod_sum_inversion&#39;vc.0.5.1" expl="precondition">
    <proof prover="7" obsolete="true"><result status="valid" time="0.40" steps="319945"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="cond_mod_sum_inversion&#39;vc.0.6" expl="precondition">
   <transf name="apply" arg1="set_binary">
    <goal name="cond_mod_sum_inversion&#39;vc.0.6.0" expl="apply premises">
    <transf name="split_vc" >
     <goal name="cond_mod_sum_inversion&#39;vc.0.6.0.0" expl="apply premises">
     <proof prover="6" obsolete="true"><result status="valid" time="1.91" steps="30149"/></proof>
     </goal>
     <goal name="cond_mod_sum_inversion&#39;vc.0.6.0.1" expl="apply premises">
     <proof prover="6" obsolete="true"><result status="valid" time="1.91" steps="30011"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="cond_mod_sum_inversion&#39;vc.0.7" expl="postcondition">
   <transf name="rewrite" arg1="Ensures2">
    <goal name="cond_mod_sum_inversion&#39;vc.0.7.0" expl="postcondition">
    <transf name="replace" arg1="(ind_isum
     (fun (k:int) -&gt;
       (getbv (make_bv_m f n) @ ((length (make_bv_m f n) - k) - 1))
       * power 2 ((length (make_bv_m f n) - 1) - k))
     0 (length (make_bv_m f n)))" arg2="(ind_isum
   (fun (k:int) -&gt;
     ((fun (k1:int) -&gt; mod (f @ ((n - k1) - 1)) 2) @ k)
     * power 2 ((n - 1) - k))
   0 n)">
     <goal name="cond_mod_sum_inversion&#39;vc.0.7.0.0" expl="postcondition">
     <transf name="rewrite" arg1="Ensures">
      <goal name="cond_mod_sum_inversion&#39;vc.0.7.0.0.0" expl="postcondition">
      <transf name="apply" arg1="ind_isum_eq_gen">
       <goal name="cond_mod_sum_inversion&#39;vc.0.7.0.0.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="cond_mod_sum_inversion&#39;vc.0.7.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="cond_mod_sum_inversion&#39;vc.0.7.0.0.0.1" expl="apply premises">
       <proof prover="7" obsolete="true"><result status="valid" time="0.32" steps="320499"/></proof>
       </goal>
       <goal name="cond_mod_sum_inversion&#39;vc.0.7.0.0.0.2" expl="apply premises">
       <proof prover="7" obsolete="true"><result status="valid" time="0.41" steps="320490"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="cond_mod_sum_inversion&#39;vc.0.7.0.1" expl="equality hypothesis">
     <transf name="apply" arg1="ind_isum_eq_gen">
      <goal name="cond_mod_sum_inversion&#39;vc.0.7.0.1.0" expl="apply premises">
      <transf name="split_vc" >
       <goal name="cond_mod_sum_inversion&#39;vc.0.7.0.1.0.0" expl="apply premises">
       <transf name="compute_specified" >
        <goal name="cond_mod_sum_inversion&#39;vc.0.7.0.1.0.0.0" expl="apply premises">
        <transf name="split_all_full" >
         <goal name="cond_mod_sum_inversion&#39;vc.0.7.0.1.0.0.0.0" expl="apply premises">
         <transf name="rewrite" arg1="make_bv_m&#39;spec2">
          <goal name="cond_mod_sum_inversion&#39;vc.0.7.0.1.0.0.0.0.0" expl="apply premises">
          <proof prover="0" obsolete="true"><result status="valid" time="0.43"/></proof>
          </goal>
          <goal name="cond_mod_sum_inversion&#39;vc.0.7.0.1.0.0.0.0.1" expl="rewrite premises">
          <proof prover="7" obsolete="true"><result status="valid" time="0.83" steps="386529"/></proof>
          </goal>
          <goal name="cond_mod_sum_inversion&#39;vc.0.7.0.1.0.0.0.0.2" expl="rewrite premises">
          <proof prover="7" obsolete="true"><result status="valid" time="0.80" steps="386617"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="cond_mod_sum_inversion&#39;vc.0.7.0.1.1" expl="apply premises">
      <proof prover="7" obsolete="true"><result status="valid" time="0.42" steps="320490"/></proof>
      </goal>
      <goal name="cond_mod_sum_inversion&#39;vc.0.7.0.1.2" expl="apply premises">
      <proof prover="7" obsolete="true"><result status="valid" time="0.35" steps="320492"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="cond_mod_sum_inversion&#39;vc.0.8" expl="postcondition">
   <transf name="rewrite" arg1="Ensures">
    <goal name="cond_mod_sum_inversion&#39;vc.0.8.0" expl="postcondition">
    <proof prover="7" obsolete="true"><result status="valid" time="0.42" steps="320758"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cond_mod_sum_inversion_gen&#39;vc" expl="VC for cond_mod_sum_inversion_gen">
 <transf name="split_vc" >
  <goal name="cond_mod_sum_inversion_gen&#39;vc.0" expl="postcondition">
  <transf name="split_all_full" >
   <goal name="cond_mod_sum_inversion_gen&#39;vc.0.0" expl="postcondition">
   <transf name="apply" arg1="cond_mod_sum_inversion1">
    <goal name="cond_mod_sum_inversion_gen&#39;vc.0.0.0" expl="apply premises">
    <transf name="split_vc" >
     <goal name="cond_mod_sum_inversion_gen&#39;vc.0.0.0.0" expl="apply premises">
     <proof prover="7" obsolete="true"><result status="valid" time="0.46" steps="334089"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="cond_mod_sum_inversion_gen&#39;vc.1" expl="postcondition">
  <transf name="rewrite" arg1="Ensures">
   <goal name="cond_mod_sum_inversion_gen&#39;vc.1.0" expl="postcondition">
   <proof prover="7" obsolete="true"><result status="valid" time="0.40" steps="319911"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ht_inv_decomp_mod&#39;vc" expl="VC for ht_inv_decomp_mod">
 <transf name="split_vc" >
  <goal name="ht_inv_decomp_mod&#39;vc.0" expl="precondition">
  <proof prover="7" obsolete="true"><result status="valid" time="0.82" steps="340069"/></proof>
  </goal>
  <goal name="ht_inv_decomp_mod&#39;vc.1" expl="precondition">
  <proof prover="7" obsolete="true"><result status="valid" time="0.36" steps="294570"/></proof>
  </goal>
  <goal name="ht_inv_decomp_mod&#39;vc.2" expl="precondition">
  <proof prover="7" obsolete="true"><result status="valid" time="0.42" steps="294609"/></proof>
  </goal>
  <goal name="ht_inv_decomp_mod&#39;vc.3" expl="precondition">
  <proof prover="7" obsolete="true"><result status="valid" time="0.39" steps="294609"/></proof>
  </goal>
  <goal name="ht_inv_decomp_mod&#39;vc.4" expl="precondition">
  <proof prover="7" obsolete="true"><result status="valid" time="0.85" steps="341306"/></proof>
  </goal>
  <goal name="ht_inv_decomp_mod&#39;vc.5" expl="precondition">
  <proof prover="7" obsolete="true"><result status="valid" time="0.84" steps="341306"/></proof>
  </goal>
  <goal name="ht_inv_decomp_mod&#39;vc.6" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.35"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ht_inv_decomp_mod_rev&#39;vc" expl="VC for ht_inv_decomp_mod_rev">
 <transf name="split_vc" >
  <goal name="ht_inv_decomp_mod_rev&#39;vc.0" expl="precondition">
  <proof prover="7" obsolete="true"><result status="valid" time="0.38" steps="295091"/></proof>
  </goal>
  <goal name="ht_inv_decomp_mod_rev&#39;vc.1" expl="precondition">
  <transf name="split_vc" >
   <goal name="ht_inv_decomp_mod_rev&#39;vc.1.0" expl="precondition">
   <proof prover="7" obsolete="true"><result status="valid" time="0.41" steps="295095"/></proof>
   </goal>
   <goal name="ht_inv_decomp_mod_rev&#39;vc.1.1" expl="precondition">
   <proof prover="7" obsolete="true"><result status="valid" time="0.38" steps="295110"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ht_inv_decomp_mod_rev&#39;vc.2" expl="precondition">
  <transf name="split_vc" >
   <goal name="ht_inv_decomp_mod_rev&#39;vc.2.0" expl="precondition">
   <proof prover="7" obsolete="true"><result status="valid" time="0.39" steps="295104"/></proof>
   </goal>
   <goal name="ht_inv_decomp_mod_rev&#39;vc.2.1" expl="precondition">
   <proof prover="7" obsolete="true"><result status="valid" time="0.41" steps="295119"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ht_inv_decomp_mod_rev&#39;vc.3" expl="postcondition">
  <proof prover="7" obsolete="true"><result status="valid" time="0.38" steps="295245"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ht_inv_decomp_mod_bv_gen&#39;vc" expl="VC for ht_inv_decomp_mod_bv_gen">
 <transf name="split_vc" >
  <goal name="ht_inv_decomp_mod_bv_gen&#39;vc.0" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.37"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Bv_to_int_ext">
 <goal name="bv_to_int_zero&#39;vc" expl="VC for bv_to_int_zero">
 <transf name="split_vc" >
  <goal name="bv_to_int_zero&#39;vc.0" expl="postcondition">
  <transf name="rewrite" arg1="bv_to_int_sum">
   <goal name="bv_to_int_zero&#39;vc.0.0" expl="postcondition">
   <transf name="apply" arg1="ind_isum_null">
    <goal name="bv_to_int_zero&#39;vc.0.0.0" expl="apply premises">
    <proof prover="7" obsolete="true"><result status="valid" time="0.44" steps="232908"/></proof>
    </goal>
    <goal name="bv_to_int_zero&#39;vc.0.0.1" expl="apply premises">
    <transf name="compute_specified" >
     <goal name="bv_to_int_zero&#39;vc.0.0.1.0" expl="apply premises">
     <proof prover="0" obsolete="true"><result status="valid" time="0.25"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_int_all_one&#39;vc" expl="VC for bv_to_int_all_one">
 <transf name="split_vc" >
  <goal name="bv_to_int_all_one&#39;vc.0" expl="assertion">
  <proof prover="7" obsolete="true"><result status="valid" time="0.44" steps="233367"/></proof>
  </goal>
  <goal name="bv_to_int_all_one&#39;vc.1" expl="variant decrease">
  <proof prover="7" obsolete="true"><result status="valid" time="0.42" steps="233360"/></proof>
  </goal>
  <goal name="bv_to_int_all_one&#39;vc.2" expl="precondition">
  <proof prover="7" obsolete="true"><result status="valid" time="0.39" steps="233384"/></proof>
  </goal>
  <goal name="bv_to_int_all_one&#39;vc.3" expl="postcondition">
  <transf name="destruct" arg1="H">
   <goal name="bv_to_int_all_one&#39;vc.3.0" expl="postcondition">
   <transf name="rewrite" arg1="ind_isum_one">
    <goal name="bv_to_int_all_one&#39;vc.3.0.0" expl="postcondition">
    <transf name="compute_specified" >
     <goal name="bv_to_int_all_one&#39;vc.3.0.0.0" expl="postcondition">
     <proof prover="0" obsolete="true"><result status="valid" time="0.26"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="bv_to_int_all_one&#39;vc.3.0.1" expl="rewrite premises">
    <proof prover="7" obsolete="true"><result status="valid" time="0.27" steps="218190"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="bv_to_int_all_one&#39;vc.3.1" expl="postcondition">
   <transf name="destruct" arg1="H">
    <goal name="bv_to_int_all_one&#39;vc.3.1.0" expl="postcondition">
    <transf name="eliminate_let" >
     <goal name="bv_to_int_all_one&#39;vc.3.1.0.0" expl="postcondition">
     <transf name="rewrite" arg1="ind_isum_re">
      <goal name="bv_to_int_all_one&#39;vc.3.1.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="H">
       <goal name="bv_to_int_all_one&#39;vc.3.1.0.0.0.0" expl="postcondition">
       <transf name="compute_specified" >
        <goal name="bv_to_int_all_one&#39;vc.3.1.0.0.0.0.0" expl="postcondition">
        <proof prover="6" obsolete="true"><result status="valid" time="1.53" steps="24659"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="bv_to_int_all_one&#39;vc.3.1.0.0.1" expl="rewrite premises">
      <proof prover="7" obsolete="true"><result status="valid" time="0.26" steps="218313"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="bv_to_int_all_one&#39;vc.4" expl="precondition">
  <transf name="split_vc" >
   <goal name="bv_to_int_all_one&#39;vc.4.0" expl="precondition">
   <proof prover="7" obsolete="true"><result status="valid" time="0.28" steps="218299"/></proof>
   </goal>
   <goal name="bv_to_int_all_one&#39;vc.4.1" expl="precondition">
   <proof prover="7" obsolete="true"><result status="valid" time="0.27" steps="218304"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="bv_to_int_all_one&#39;vc.5" expl="postcondition">
  <transf name="rewrite" arg1="bv_to_int_sum">
   <goal name="bv_to_int_all_one&#39;vc.5.0" expl="postcondition">
   <transf name="rewrite" arg1="ind_isum_bin_rev_z">
    <goal name="bv_to_int_all_one&#39;vc.5.0.0" expl="postcondition">
    <transf name="replace" arg1="( ind_isum (fun (l:int) -&gt; (getbv x @ ((length x - 1) - l)) * power 2 l) 0
  (length x))" arg2="(ind_isum (fun (k:int) -&gt; (getbv x @ ((n - 1) - k)) * power 2 k) 0 n)">
     <goal name="bv_to_int_all_one&#39;vc.5.0.0.0" expl="postcondition">
     <transf name="apply" arg1="H">
      <goal name="bv_to_int_all_one&#39;vc.5.0.0.0.0" expl="apply premises">
      <proof prover="7" obsolete="true"><result status="valid" time="0.26" steps="218410"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="bv_to_int_all_one&#39;vc.5.0.0.1" expl="equality hypothesis">
     <transf name="apply" arg1="ind_isum_eq_gen">
      <goal name="bv_to_int_all_one&#39;vc.5.0.0.1.0" expl="apply premises">
      <transf name="compute_specified" >
       <goal name="bv_to_int_all_one&#39;vc.5.0.0.1.0.0" expl="apply premises">
       <transf name="split_vc" >
        <goal name="bv_to_int_all_one&#39;vc.5.0.0.1.0.0.0" expl="apply premises">
        <proof prover="7" obsolete="true"><result status="valid" time="0.28" steps="223301"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="bv_to_int_all_one&#39;vc.5.0.0.1.1" expl="apply premises">
      <proof prover="7" obsolete="true"><result status="valid" time="0.27" steps="218392"/></proof>
      </goal>
      <goal name="bv_to_int_all_one&#39;vc.5.0.0.1.2" expl="apply premises">
      <proof prover="7" obsolete="true"><result status="valid" time="0.26" steps="218394"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="bv_to_int_all_one&#39;vc.5.0.1" expl="rewrite premises">
    <proof prover="7" obsolete="true"><result status="valid" time="0.43" steps="233668"/></proof>
    </goal>
    <goal name="bv_to_int_all_one&#39;vc.5.0.2" expl="rewrite premises">
    <proof prover="7" obsolete="true"><result status="valid" time="0.43" steps="234012"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_int_zero_gen&#39;vc" expl="VC for bv_to_int_zero_gen">
 <transf name="split_vc" >
  <goal name="bv_to_int_zero_gen&#39;vc.0" expl="postcondition">
  <transf name="instantiate" arg1="bv_to_int_zero" arg2="x,n">
   <goal name="bv_to_int_zero_gen&#39;vc.0.0" expl="postcondition">
   <transf name="apply" arg1="Hinst">
    <goal name="bv_to_int_zero_gen&#39;vc.0.0.0" expl="apply premises">
    <proof prover="7" obsolete="true"><result status="valid" time="0.27" steps="218558"/></proof>
    </goal>
    <goal name="bv_to_int_zero_gen&#39;vc.0.0.1" expl="apply premises">
    <proof prover="7" obsolete="true"><result status="valid" time="0.29" steps="218556"/></proof>
    </goal>
    <goal name="bv_to_int_zero_gen&#39;vc.0.0.2" expl="apply premises">
    <proof prover="7" obsolete="true"><result status="valid" time="0.43" steps="233844"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_int_zero_gen_rev&#39;vc" expl="VC for bv_to_int_zero_gen_rev">
 <transf name="split_vc" >
  <goal name="bv_to_int_zero_gen_rev&#39;vc.0" expl="postcondition">
  <transf name="case" arg1="(getbv x i &lt;&gt; 0)">
   <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0" expl="true case (postcondition)">
   <transf name="assert" arg1="(getbv x i = 1)">
    <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0.0" expl="asserted formula">
    <proof prover="7" obsolete="true"><result status="valid" time="0.58" steps="251736"/></proof>
    </goal>
    <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0.1" expl="true case (postcondition)">
    <transf name="assert" arg1="( 1 &lt;= bv_to_int x )">
     <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0.1.0" expl="asserted formula">
     <transf name="rewrite" arg1="bv_to_int_sum">
      <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0.1.0.0" expl="asserted formula">
      <transf name="instantiate" arg1="ind_isum_trans" arg2="(fun (k:int) -&gt; (getbv x @ k) * power 2 ((length x - 1) - k)),0,i,(length x)">
       <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0.1.0.0.0" expl="asserted formula">
       <transf name="rewrite" arg1="Hinst">
        <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0.1.0.0.0.0" expl="asserted formula">
        <transf name="assert" arg1="(1&lt;= ind_isum
        (fun (k:int) -&gt; (getbv x @ k) * power 2 ((length x - 1) - k)) i
        (length x))">
         <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0.1.0.0.0.0.0" expl="asserted formula">
         <transf name="rewrite" arg1="ind_isum_plus_one">
          <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0.1.0.0.0.0.0.0" expl="asserted formula">
          <transf name="compute_specified" >
           <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0.1.0.0.0.0.0.0.0" expl="asserted formula">
           <transf name="assert" arg1="( 1 +0  &lt;= (((getbv x @ i) * power 2 ((length x - 1) - i))
      + ind_isum
        (fun (k:int) -&gt; (getbv x @ k) * power 2 ((length x - 1) - k)) (
        i + 1) (length x)))">
            <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0.1.0.0.0.0.0.0.0.0" expl="asserted formula">
            <transf name="apply" arg1="leq_trans_add">
             <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0.1.0.0.0.0.0.0.0.0.0" expl="apply premises">
             <transf name="assert" arg1="(1*1 &lt;= ((getbv x @ i) * power 2 ((length x - 1) - i)))">
              <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0.1.0.0.0.0.0.0.0.0.0.0" expl="asserted formula">
              <transf name="apply" arg1="compat_int_order_mult">
               <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0.1.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises">
               <proof prover="7" obsolete="true"><result status="valid" time="0.30" steps="223736"/></proof>
               </goal>
               <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0.1.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises">
               <proof prover="7" obsolete="true"><result status="valid" time="0.50" steps="226375"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0.1.0.0.0.0.0.0.0.0.0.1" expl="apply premises">
              <proof prover="7" obsolete="true"><result status="valid" time="0.28" steps="219092"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0.1.0.0.0.0.0.0.0.0.1" expl="apply premises">
             <transf name="apply" arg1="ind_isum_pos">
              <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0.1.0.0.0.0.0.0.0.0.1.0" expl="apply premises">
              <proof prover="7" obsolete="true"><result status="valid" time="0.37" steps="208940"/></proof>
              </goal>
              <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0.1.0.0.0.0.0.0.0.0.1.1" expl="apply premises">
              <transf name="compute_specified" >
               <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0.1.0.0.0.0.0.0.0.0.1.1.0" expl="apply premises">
               <transf name="split_vc" >
                <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0.1.0.0.0.0.0.0.0.0.1.1.0.0" expl="apply premises">
                <proof prover="0" obsolete="true"><result status="valid" time="0.26"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0.1.0.0.0.0.0.0.0.1" expl="asserted formula">
            <proof prover="7" obsolete="true"><result status="valid" time="0.64" steps="257183"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0.1.0.0.0.0.0.1" expl="rewrite premises">
          <proof prover="7" obsolete="true"><result status="valid" time="0.38" steps="208954"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0.1.0.0.0.0.1" expl="asserted formula">
         <transf name="assert" arg1="(0+1
  &lt;= (ind_isum (fun (k:int) -&gt; (getbv x @ k) * power 2 ((length x - 1) - k))
      0 i
      + ind_isum
        (fun (k:int) -&gt; (getbv x @ k) * power 2 ((length x - 1) - k)) i
        (length x)))">
          <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0.1.0.0.0.0.1.0" expl="asserted formula">
          <transf name="apply" arg1="leq_trans_add">
           <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0.1.0.0.0.0.1.0.0" expl="apply premises">
           <transf name="apply" arg1="ind_isum_pos">
            <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0.1.0.0.0.0.1.0.0.0" expl="apply premises">
            <proof prover="7" obsolete="true"><result status="valid" time="0.23" steps="193907"/></proof>
            </goal>
            <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0.1.0.0.0.0.1.0.0.1" expl="apply premises">
            <transf name="compute_specified" >
             <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0.1.0.0.0.0.1.0.0.1.0" expl="apply premises">
             <proof prover="0" obsolete="true"><result status="valid" time="0.30"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0.1.0.0.0.0.1.0.1" expl="apply premises">
           <proof prover="7" obsolete="true"><result status="valid" time="1.51" steps="533666"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0.1.0.0.0.0.1.1" expl="asserted formula">
          <transf name="replace" arg1="(0 + 1)" arg2="1" arg3="in" arg4="h1">
           <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0.1.0.0.0.0.1.1.0" expl="asserted formula" proved="true">
           <transf name="apply" proved="true" arg1="h1">
           </transf>
           </goal>
           <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0.1.0.0.0.0.1.1.1" expl="equality hypothesis">
           <proof prover="7" obsolete="true"><result status="valid" time="0.22" steps="194139"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0.1.0.0.0.1" expl="rewrite premises">
        <proof prover="7" obsolete="true"><result status="valid" time="0.39" steps="208955"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="bv_to_int_zero_gen_rev&#39;vc.0.0.1.1" expl="true case (postcondition)">
     <proof prover="7" obsolete="true"><result status="valid" time="0.32" steps="223422"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="bv_to_int_zero_gen_rev&#39;vc.0.1" expl="false case (postcondition)">
   <proof prover="7" obsolete="true"><result status="valid" time="0.27" steps="218758"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_int_all_one_gen&#39;vc" expl="VC for bv_to_int_all_one_gen">
 <transf name="split_vc" >
  <goal name="bv_to_int_all_one_gen&#39;vc.0" expl="postcondition">
  <proof prover="7" obsolete="true"><result status="valid" time="0.58" steps="252108"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_int_all_one_gen_rev&#39;vc" expl="VC for bv_to_int_all_one_gen_rev">
 <transf name="split_vc" >
  <goal name="bv_to_int_all_one_gen_rev&#39;vc.0" expl="assertion">
  <transf name="rewrite" arg1="H">
   <goal name="bv_to_int_all_one_gen_rev&#39;vc.0.0" expl="assertion">
   <transf name="instantiate" arg1="bv_to_int_all_one" arg2="(make_bv (fun (_:int) -&gt; 1) n),n">
    <goal name="bv_to_int_all_one_gen_rev&#39;vc.0.0.0" expl="assertion">
    <transf name="rewrite" arg1="Hinst">
     <goal name="bv_to_int_all_one_gen_rev&#39;vc.0.0.0.0" expl="assertion">
     <proof prover="7" obsolete="true"><result status="valid" time="0.39" steps="307265"/></proof>
     </goal>
     <goal name="bv_to_int_all_one_gen_rev&#39;vc.0.0.0.1" expl="rewrite premises">
     <proof prover="7" obsolete="true"><result status="valid" time="0.39" steps="307269"/></proof>
     </goal>
     <goal name="bv_to_int_all_one_gen_rev&#39;vc.0.0.0.2" expl="rewrite premises">
     <transf name="rewrite" arg1="make_bv_length">
      <goal name="bv_to_int_all_one_gen_rev&#39;vc.0.0.0.2.0" expl="rewrite premises">
      <proof prover="7" obsolete="true"><result status="valid" time="0.38" steps="307265"/></proof>
      </goal>
      <goal name="bv_to_int_all_one_gen_rev&#39;vc.0.0.0.2.1" expl="rewrite premises">
      <proof prover="7" obsolete="true"><result status="valid" time="0.76" steps="362941"/></proof>
      </goal>
      <goal name="bv_to_int_all_one_gen_rev&#39;vc.0.0.0.2.2" expl="rewrite premises">
      <proof prover="7" obsolete="true"><result status="valid" time="0.64" steps="329208"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="bv_to_int_all_one_gen_rev&#39;vc.0.0.0.3" expl="rewrite premises">
     <transf name="split_vc" >
      <goal name="bv_to_int_all_one_gen_rev&#39;vc.0.0.0.3.0" expl="rewrite premises">
      <transf name="rewrite" arg1="assert_make_bv">
       <goal name="bv_to_int_all_one_gen_rev&#39;vc.0.0.0.3.0.0" expl="rewrite premises">
       <proof prover="7" obsolete="true"><result status="valid" time="0.76" steps="361058"/></proof>
       </goal>
       <goal name="bv_to_int_all_one_gen_rev&#39;vc.0.0.0.3.0.1" expl="rewrite premises">
       <transf name="split_vc" >
        <goal name="bv_to_int_all_one_gen_rev&#39;vc.0.0.0.3.0.1.0" expl="rewrite premises">
        <proof prover="7" obsolete="true"><result status="valid" time="0.77" steps="362815"/></proof>
        </goal>
        <goal name="bv_to_int_all_one_gen_rev&#39;vc.0.0.0.3.0.1.1" expl="rewrite premises">
        <proof prover="7" obsolete="true"><result status="valid" time="0.75" steps="362809"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="bv_to_int_all_one_gen_rev&#39;vc.0.0.0.3.0.2" expl="rewrite premises">
       <proof prover="7" obsolete="true"><result status="valid" time="0.66" steps="329275"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="bv_to_int_all_one_gen_rev&#39;vc.1" expl="precondition">
  <proof prover="7" obsolete="true"><result status="valid" time="0.70" steps="359714"/></proof>
  </goal>
  <goal name="bv_to_int_all_one_gen_rev&#39;vc.2" expl="assertion">
  <transf name="assert" arg1="(int_to_bv (bv_to_int x) n  = int_to_bv (bv_to_int (make_bv (fun (_:int) -&gt; 1) n)) n )">
   <goal name="bv_to_int_all_one_gen_rev&#39;vc.2.0" expl="asserted formula">
   <proof prover="7" obsolete="true"><result status="valid" time="0.74" steps="390742"/></proof>
   </goal>
   <goal name="bv_to_int_all_one_gen_rev&#39;vc.2.1" expl="assertion">
   <transf name="rewrite" arg1="int_to_bv_to_int_gen" arg2="in" arg3="h">
    <goal name="bv_to_int_all_one_gen_rev&#39;vc.2.1.0" expl="assertion">
    <transf name="rewrite" arg1="int_to_bv_to_int_gen" arg2="in" arg3="h">
     <goal name="bv_to_int_all_one_gen_rev&#39;vc.2.1.0.0" expl="assertion" proved="true">
     <transf name="apply" proved="true" arg1="h">
     </transf>
     </goal>
     <goal name="bv_to_int_all_one_gen_rev&#39;vc.2.1.0.1" expl="rewrite premises">
     <transf name="rewrite" arg1="make_bv_length">
      <goal name="bv_to_int_all_one_gen_rev&#39;vc.2.1.0.1.0" expl="rewrite premises">
      <proof prover="7" obsolete="true"><result status="valid" time="0.47" steps="364179"/></proof>
      </goal>
      <goal name="bv_to_int_all_one_gen_rev&#39;vc.2.1.0.1.1" expl="rewrite premises">
      <proof prover="7" obsolete="true"><result status="valid" time="0.84" steps="388937"/></proof>
      </goal>
      <goal name="bv_to_int_all_one_gen_rev&#39;vc.2.1.0.1.2" expl="rewrite premises">
      <proof prover="7" obsolete="true"><result status="valid" time="0.77" steps="387227"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="bv_to_int_all_one_gen_rev&#39;vc.2.1.0.2" expl="rewrite premises">
     <transf name="rewrite" arg1="make_bv_length">
      <goal name="bv_to_int_all_one_gen_rev&#39;vc.2.1.0.2.0" expl="rewrite premises">
      <proof prover="7" obsolete="true"><result status="valid" time="0.47" steps="364170"/></proof>
      </goal>
      <goal name="bv_to_int_all_one_gen_rev&#39;vc.2.1.0.2.1" expl="rewrite premises">
      <proof prover="7" obsolete="true"><result status="valid" time="0.85" steps="388937"/></proof>
      </goal>
      <goal name="bv_to_int_all_one_gen_rev&#39;vc.2.1.0.2.2" expl="rewrite premises">
      <proof prover="7" obsolete="true"><result status="valid" time="0.80" steps="387227"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="bv_to_int_all_one_gen_rev&#39;vc.2.1.1" expl="rewrite premises">
    <proof prover="7" obsolete="true"><result status="valid" time="0.80" steps="387232"/></proof>
    </goal>
    <goal name="bv_to_int_all_one_gen_rev&#39;vc.2.1.2" expl="rewrite premises">
    <proof prover="7" obsolete="true"><result status="valid" time="0.47" steps="364186"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="bv_to_int_all_one_gen_rev&#39;vc.3" expl="postcondition">
  <transf name="rewrite" arg1="Assert">
   <goal name="bv_to_int_all_one_gen_rev&#39;vc.3.0" expl="postcondition">
   <transf name="rewrite" arg1="assert_make_bv">
    <goal name="bv_to_int_all_one_gen_rev&#39;vc.3.0.0" expl="postcondition">
    <proof prover="7" obsolete="true"><result status="valid" time="0.85" steps="387899"/></proof>
    </goal>
    <goal name="bv_to_int_all_one_gen_rev&#39;vc.3.0.1" expl="rewrite premises">
    <proof prover="7" obsolete="true"><result status="valid" time="0.87" steps="389138"/></proof>
    </goal>
    <goal name="bv_to_int_all_one_gen_rev&#39;vc.3.0.2" expl="rewrite premises">
    <proof prover="7" obsolete="true"><result status="valid" time="0.82" steps="387401"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="bv_to_int_all_one_gen_rev&#39;vc.3.1" expl="rewrite premises">
   <proof prover="7" obsolete="true"><result status="valid" time="0.50" steps="364276"/></proof>
   </goal>
   <goal name="bv_to_int_all_one_gen_rev&#39;vc.3.2" expl="rewrite premises">
   <proof prover="7" obsolete="true"><result status="valid" time="0.52" steps="364276"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
