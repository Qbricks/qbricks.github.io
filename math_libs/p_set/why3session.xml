<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="CVC4" version="1.7" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="7" name="Alt-Ergo" version="2.4.0" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="p_set.mlw"/>
<theory name="Fset_comp" proved="true">
 <goal name="set_equal&#39;vc" expl="VC for set_equal" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_equal&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="11325"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="8"/></proof>
  </goal>
  <goal name="set_equal&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="11437"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="15"/></proof>
  </goal>
  <goal name="set_equal&#39;vc.2" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="11602"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="7"/></proof>
  </goal>
  <goal name="set_equal&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="10909"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="8"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_equal_eqq&#39;vc" expl="VC for set_equal_eqq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_equal_eqq&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(s=s&#39;)">
   <goal name="set_equal_eqq&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="apply" proved="true" arg1="set_equal">
    <goal name="set_equal_eqq&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.03" steps="10611"/></proof>
    <proof prover="7"><result status="valid" time="0.00" steps="4"/></proof>
    </goal>
    <goal name="set_equal_eqq&#39;vc.0.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.02" steps="10611"/></proof>
    <proof prover="7"><result status="valid" time="0.00" steps="4"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="set_equal_eqq&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.02" steps="10704"/></proof>
   <proof prover="7"><result status="valid" time="0.00" steps="4"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="union_exchange&#39;vc" expl="VC for union_exchange" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="union_exchange&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal">
   <goal name="union_exchange&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.04" steps="13179"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="97"/></proof>
   </goal>
   <goal name="union_exchange&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.03" steps="12813"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="65"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="get_filter&#39;vc" expl="VC for get_filter" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_filter&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="11598"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="4"/></proof>
  </goal>
  <goal name="get_filter&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="11506"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="6"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_filter&#39;vc" expl="VC for set_filter" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_filter&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="11841"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="6"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inter_empty&#39;vc" expl="VC for inter_empty" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inter_empty&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="inter_empty&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.03" steps="12089"/></proof>
   <proof prover="7"><result status="valid" time="0.00" steps="6"/></proof>
   </goal>
   <goal name="inter_empty&#39;vc.0.1" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.03" steps="12089"/></proof>
   <proof prover="7"><result status="valid" time="0.00" steps="6"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="inter_empty&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="14479"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="28"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inter_empty_comm&#39;vc" expl="VC for inter_empty_comm" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inter_empty_comm&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="11269"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="31"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inter_empty_elts&#39;vc" expl="VC for inter_empty_elts" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inter_empty_elts&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="14703"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="69"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inter_sym&#39;vc" expl="VC for inter_sym" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inter_sym&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal">
   <goal name="inter_sym&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="inter_sym&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.04" steps="13697"/></proof>
    <proof prover="7"><result status="valid" time="0.01" steps="5"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="inter_sym&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="inter_sym&#39;vc.0.1.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.04" steps="13697"/></proof>
    <proof prover="7"><result status="valid" time="0.01" steps="5"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="union_sym&#39;vc" expl="VC for union_sym" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="union_sym&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal">
   <goal name="union_sym&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="union_sym&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.03" steps="13174"/></proof>
    <proof prover="7"><result status="valid" time="0.00" steps="4"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="union_sym&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="union_sym&#39;vc.0.1.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.04" steps="13174"/></proof>
    <proof prover="7"><result status="valid" time="0.00" steps="4"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="union_empty&#39;vc" expl="VC for union_empty" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="union_empty&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="union_empty&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.03" steps="13715"/></proof>
   <proof prover="7"><result status="valid" time="0.00" steps="23"/></proof>
   </goal>
   <goal name="union_empty&#39;vc.0.1" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.02" steps="12572"/></proof>
   <proof prover="7"><result status="valid" time="0.00" steps="6"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="union_empty&#39;vc.1" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(union s s&#39; = s&#39;)">
   <goal name="union_empty&#39;vc.1.0" expl="asserted formula" proved="true">
   <transf name="apply" proved="true" arg1="set_equal">
    <goal name="union_empty&#39;vc.1.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.03" steps="12652"/></proof>
    <proof prover="7"><result status="valid" time="0.01" steps="6"/></proof>
    </goal>
    <goal name="union_empty&#39;vc.1.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.03" steps="12660"/></proof>
    <proof prover="7"><result status="valid" time="0.00" steps="6"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="union_empty&#39;vc.1.1" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.03" steps="12653"/></proof>
   <proof prover="7"><result status="valid" time="0.00" steps="6"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="union_empty&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="12647"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="6"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="union_comm&#39;vc" expl="VC for union_comm" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="union_comm&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="union_comm&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.03" steps="12890"/></proof>
   <proof prover="7"><result status="valid" time="0.00" steps="6"/></proof>
   </goal>
   <goal name="union_comm&#39;vc.0.1" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.03" steps="12890"/></proof>
   <proof prover="7"><result status="valid" time="0.00" steps="6"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="union_comm&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="12912"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="4"/></proof>
  </goal>
  <goal name="union_comm&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="12904"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="6"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="union_members&#39;vc" expl="VC for union_members" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="union_members&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="12603"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="6"/></proof>
  </goal>
  <goal name="union_members&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="12671"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="6"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="union_alt&#39;vc" expl="VC for union_alt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="union_alt&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="13019"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="6"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="union_empty_comm&#39;vc" expl="VC for union_empty_comm" proved="true">
 <proof prover="0"><result status="valid" time="0.03" steps="13802"/></proof>
 <proof prover="7"><result status="valid" time="0.01" steps="20"/></proof>
 </goal>
 <goal name="set_subset&#39;vc" expl="VC for set_subset" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_subset&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="13969"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="8"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_empty&#39;vc" expl="VC for set_empty" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_empty&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="14785"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="13"/></proof>
  </goal>
  <goal name="set_empty&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="14844"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="10"/></proof>
  </goal>
  <goal name="set_empty&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="14557"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="8"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_empty&#39;vc" expl="VC for get_empty" proved="true">
 <proof prover="0"><result status="valid" time="0.04" steps="14990"/></proof>
 <proof prover="7"><result status="valid" time="0.00" steps="15"/></proof>
 </goal>
 <goal name="get_non_empty&#39;vc" expl="VC for get_non_empty" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_non_empty&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="13074"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="6"/></proof>
  </goal>
  <goal name="get_non_empty&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="15891"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="20"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_non_empty&#39;vc" expl="VC for set_non_empty" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_non_empty&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="14546"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="14"/></proof>
  </goal>
  <goal name="set_non_empty&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="16342"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="9"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_pos_card_elt&#39;vc" expl="VC for set_pos_card_elt" proved="true">
 <proof prover="0"><result status="valid" time="0.04" steps="16062"/></proof>
 <proof prover="7"><result status="valid" time="0.01" steps="15"/></proof>
 </goal>
 <goal name="union_add&#39;vc" expl="VC for union_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="union_add&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="42053"/></proof>
  <proof prover="7"><result status="valid" time="0.15" steps="914"/></proof>
  </goal>
  <goal name="union_add&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="14852"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="9"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="union_add_mem&#39;vc" expl="VC for union_add_mem" proved="true">
 <proof prover="0"><result status="valid" time="0.04" steps="16783"/></proof>
 <proof prover="7"><result status="valid" time="0.01" steps="49"/></proof>
 </goal>
 <goal name="union_add_comm&#39;vc" expl="VC for union_add_comm" proved="true">
 <proof prover="0"><result status="valid" time="0.03" steps="15272"/></proof>
 <proof prover="7"><result status="valid" time="0.00" steps="7"/></proof>
 </goal>
 <goal name="set_map_mem&#39;vc" expl="VC for set_map_mem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_map_mem&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="21666"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="8"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="map_add&#39;vc" expl="VC for map_add" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="map_add&#39;vc.0" expl="VC for map_add" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="58197"/></proof>
  <proof prover="7"><result status="valid" time="0.09" steps="1428"/></proof>
  </goal>
 </transf>
 <transf name="split_vc" proved="true" >
  <goal name="map_add&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="29152"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="45"/></proof>
  </goal>
  <goal name="map_add&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="42658"/></proof>
  <proof prover="7"><result status="valid" time="0.03" steps="381"/></proof>
  </goal>
  <goal name="map_add&#39;vc.2" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal">
   <goal name="map_add&#39;vc.2.0" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.05" steps="23917"/></proof>
   <proof prover="7"><result status="valid" time="0.00" steps="6"/></proof>
   </goal>
   <goal name="map_add&#39;vc.2.1" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.05" steps="23917"/></proof>
   <proof prover="7"><result status="valid" time="0.00" steps="6"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="map_eq&#39;vc" expl="VC for map_eq" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="map_eq&#39;vc.0" expl="VC for map_eq" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="40427"/></proof>
  <proof prover="7"><result status="valid" time="0.03" steps="664"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="remove_mem&#39;vc" expl="VC for remove_mem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="remove_mem&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="17098"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="7"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="injective_map_cardinal&#39;vc" expl="VC for injective_map_cardinal" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="injective_map_cardinal&#39;vc.0" expl="VC for injective_map_cardinal" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="28258"/></proof>
  <proof prover="7"><result status="valid" time="0.05" steps="887"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_map_mem_el&#39;vc" expl="VC for set_map_mem_el" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_map_mem_el&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="25082"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="8"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_map_mem_el_gen&#39;vc" expl="VC for set_map_mem_el_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_map_mem_el_gen&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="26514"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="8"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="map_antec&#39;vc" expl="VC for map_antec" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="map_antec&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="29680"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="16"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="map_antec_gen&#39;vc" expl="VC for map_antec_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="map_antec_gen&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="31130"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="20"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="map_remove_choose&#39;vc" expl="VC for map_remove_choose" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="map_remove_choose&#39;vc.0" expl="VC for map_remove_choose" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="32039"/></proof>
  <proof prover="7"><result status="valid" time="0.12" steps="889"/></proof>
  </goal>
 </transf>
 <transf name="eliminate_let" proved="true" >
  <goal name="map_remove_choose&#39;vc.0" expl="VC for map_remove_choose" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="map_remove_choose&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.06" steps="28747"/></proof>
   <proof prover="7"><result status="valid" time="0.06" steps="252"/></proof>
   </goal>
   <goal name="map_remove_choose&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.08" steps="28715"/></proof>
   <proof prover="7"><result status="valid" time="0.06" steps="446"/></proof>
   </goal>
   <goal name="map_remove_choose&#39;vc.0.2" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.03" steps="14669"/></proof>
   <proof prover="7"><result status="valid" time="0.00" steps="4"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 <transf name="split_vc" proved="true" >
  <goal name="map_remove_choose&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="28747"/></proof>
  <proof prover="7"><result status="valid" time="0.06" steps="252"/></proof>
  </goal>
  <goal name="map_remove_choose&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="28715"/></proof>
  <proof prover="7"><result status="valid" time="0.06" steps="446"/></proof>
  </goal>
  <goal name="map_remove_choose&#39;vc.2" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal">
   <goal name="map_remove_choose&#39;vc.2.0" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.04" steps="22973"/></proof>
   <proof prover="7"><result status="valid" time="0.00" steps="6"/></proof>
   </goal>
   <goal name="map_remove_choose&#39;vc.2.1" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.04" steps="22973"/></proof>
   <proof prover="7"><result status="valid" time="0.00" steps="6"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="antec_set&#39;vc" expl="VC for antec_set" proved="true">
 <proof prover="0"><result status="valid" time="0.01" steps="11392"/></proof>
 </goal>
 <goal name="remove_s&#39;vc" expl="VC for remove_s" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="remove_s&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_s&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.04" steps="23678"/></proof>
   <proof prover="7"><result status="valid" time="0.00" steps="9"/></proof>
   </goal>
   <goal name="remove_s&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.06" steps="25432"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="13"/></proof>
   </goal>
   <goal name="remove_s&#39;vc.0.2" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.06" steps="25188"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="13"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="remove_antecs&#39;vc" expl="VC for remove_antecs" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="remove_antecs&#39;vc.0" expl="VC for remove_antecs" proved="true">
  <proof prover="7"><result status="valid" time="0.12" steps="1598"/></proof>
  </goal>
 </transf>
 <transf name="split_vc" proved="true" >
  <goal name="remove_antecs&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="22791"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="2"/></proof>
  </goal>
  <goal name="remove_antecs&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="28891"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="44"/></proof>
  </goal>
  <goal name="remove_antecs&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_antecs&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.07" steps="33440"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="9"/></proof>
   </goal>
   <goal name="remove_antecs&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.99" steps="1042487"/></proof>
   <proof prover="7"><result status="valid" time="0.02" steps="162"/></proof>
   </goal>
   <goal name="remove_antecs&#39;vc.2.2" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.00" steps="360735"/></proof>
   <proof prover="7"><result status="valid" time="0.02" steps="157"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_antecs&#39;vc.3" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(subset result s)">
   <goal name="remove_antecs&#39;vc.3.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.07" steps="35920"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="45"/></proof>
   </goal>
   <goal name="remove_antecs&#39;vc.3.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.08" steps="37260"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="57"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="map_remove_antec&#39;vc" expl="VC for map_remove_antec" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="map_remove_antec&#39;vc.0" expl="VC for map_remove_antec" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="117537"/></proof>
  <proof prover="7"><result status="valid" time="0.13" steps="1485"/></proof>
  </goal>
 </transf>
 <transf name="split_vc" proved="true" >
  <goal name="map_remove_antec&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="24661"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="2"/></proof>
  </goal>
  <goal name="map_remove_antec&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="46407"/></proof>
  <proof prover="7"><result status="valid" time="0.02" steps="220"/></proof>
  </goal>
  <goal name="map_remove_antec&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="77530"/></proof>
  <proof prover="7"><result status="valid" time="0.14" steps="1636"/></proof>
  </goal>
  <goal name="map_remove_antec&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="36678"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="6"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="map_non_empty&#39;vc" expl="VC for map_non_empty" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="map_non_empty&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="30053"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="27"/></proof>
  </goal>
  <goal name="map_non_empty&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="31984"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="10"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="non_empty_map&#39;vc" expl="VC for non_empty_map" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="non_empty_map&#39;vc.0" expl="VC for non_empty_map" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="42842"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="13"/></proof>
  </goal>
 </transf>
 <transf name="split_vc" proved="true" >
  <goal name="non_empty_map&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="29279"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="9"/></proof>
  </goal>
  <goal name="non_empty_map&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="33017"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="11"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="right_injections&#39;vc" expl="VC for right_injections" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="right_injections&#39;vc.0" expl="VC for right_injections" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="70881"/></proof>
  <proof prover="7"><result status="valid" time="0.16" steps="2855"/></proof>
  </goal>
 </transf>
 <transf name="split_vc" proved="true" >
  <goal name="right_injections&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="25517"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="46"/></proof>
  </goal>
  <goal name="right_injections&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="50053"/></proof>
  <proof prover="7"><result status="valid" time="0.02" steps="356"/></proof>
  </goal>
  <goal name="right_injections&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="50120"/></proof>
  <proof prover="7"><result status="valid" time="0.02" steps="496"/></proof>
  </goal>
  <goal name="right_injections&#39;vc.3" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="48565"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="143"/></proof>
  </goal>
  <goal name="right_injections&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="49332"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="356"/></proof>
  </goal>
  <goal name="right_injections&#39;vc.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="right_injections&#39;vc.5.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.11" steps="49405"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="122"/></proof>
   </goal>
   <goal name="right_injections&#39;vc.5.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.11" steps="50042"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="463"/></proof>
   </goal>
   <goal name="right_injections&#39;vc.5.2" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.11" steps="49608"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="125"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="right_injections&#39;vc.6" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal">
   <goal name="right_injections&#39;vc.6.0" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.10" steps="46521"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="44"/></proof>
   </goal>
   <goal name="right_injections&#39;vc.6.1" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.08" steps="49791"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="60"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="left_injections&#39;vc" expl="VC for left_injections" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="left_injections&#39;vc.0" expl="VC for left_injections" proved="true">
  <proof prover="7"><result status="valid" time="1.36" steps="19838"/></proof>
  </goal>
 </transf>
 <transf name="split_vc" proved="true" >
  <goal name="left_injections&#39;vc.0" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="left_injections&#39;vc.0.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.05" steps="19573"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="6"/></proof>
   </goal>
   <goal name="left_injections&#39;vc.0.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.03" steps="21083"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="41"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="left_injections&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="57292"/></proof>
  <proof prover="7"><result status="valid" time="0.19" steps="1911"/></proof>
  </goal>
  <goal name="left_injections&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="58140"/></proof>
  <proof prover="7"><result status="valid" time="0.06" steps="691"/></proof>
  </goal>
  <goal name="left_injections&#39;vc.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="left_injections&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.10" steps="49473"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="307"/></proof>
   </goal>
   <goal name="left_injections&#39;vc.3.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.10" steps="48719"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="96"/></proof>
   </goal>
   <goal name="left_injections&#39;vc.3.2" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.10" steps="48904"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="113"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="left_injections&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="48823"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="231"/></proof>
  </goal>
  <goal name="left_injections&#39;vc.5" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal">
   <goal name="left_injections&#39;vc.5.0" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.11" steps="49360"/></proof>
   <proof prover="7"><result status="valid" time="0.20" steps="2079"/></proof>
   </goal>
   <goal name="left_injections&#39;vc.5.1" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.11" steps="49367"/></proof>
   <proof prover="7"><result status="valid" time="0.13" steps="2520"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_map_eq&#39;vc" expl="VC for set_map_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_map_eq&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal">
   <goal name="set_map_eq&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="set_map_eq&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.07" steps="42494"/></proof>
    <proof prover="7"><result status="valid" time="0.01" steps="50"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="set_map_eq&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="set_map_eq&#39;vc.0.1.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.08" steps="42093"/></proof>
    <proof prover="7"><result status="valid" time="0.01" steps="34"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="right_injections_l&#39;vc" expl="VC for right_injections_l" proved="true">
 <proof prover="0"><result status="valid" time="0.08" steps="51274"/></proof>
 <proof prover="7"><result status="valid" time="0.01" steps="56"/></proof>
 </goal>
 <goal name="left_injections_l&#39;vc" expl="VC for left_injections_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="left_injections_l&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="left_injections_l&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.07" steps="45150"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="9"/></proof>
   </goal>
   <goal name="left_injections_l&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.05" steps="30107"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="7"/></proof>
   </goal>
   <goal name="left_injections_l&#39;vc.0.2" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.09" steps="45179"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="12"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="left_injections_l&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="49405"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="9"/></proof>
  </goal>
  <goal name="left_injections_l&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="151636"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="181"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="disjoint_injections&#39;vc" expl="VC for disjoint_injections" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="disjoint_injections&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.02" steps="89"/></proof>
  </goal>
  <goal name="disjoint_injections&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.01" steps="165"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="induction&#39;vc" expl="VC for induction" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="induction&#39;vc.0" expl="VC for induction" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="39888"/></proof>
  <proof prover="7"><result status="valid" time="0.03" steps="315"/></proof>
  </goal>
 </transf>
 <transf name="split_vc" proved="true" >
  <goal name="induction&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="36211"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="37"/></proof>
  </goal>
  <goal name="induction&#39;vc.1" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="induction&#39;vc.1.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.07" steps="36261"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="14"/></proof>
   </goal>
   <goal name="induction&#39;vc.1.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.05" steps="35119"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="7"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="induction&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="35286"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="16"/></proof>
  </goal>
  <goal name="induction&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="35414"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="66"/></proof>
  </goal>
  <goal name="induction&#39;vc.4" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="33922"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="8"/></proof>
  </goal>
  <goal name="induction&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="37541"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="55"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="cardinal_sum&#39;vc" expl="VC for cardinal_sum" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="cardinal_sum&#39;vc.0" expl="VC for cardinal_sum" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="37768"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="76"/></proof>
  </goal>
 </transf>
 <transf name="split_vc" proved="true" >
  <goal name="cardinal_sum&#39;vc.0" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(union s1 s = s1)">
   <goal name="cardinal_sum&#39;vc.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.03" steps="27244"/></proof>
   <proof prover="7"><result status="valid" time="0.00" steps="4"/></proof>
   </goal>
   <goal name="cardinal_sum&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.06" steps="28566"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="76"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cardinal_sum&#39;vc.1" expl="precondition" proved="true">
  <transf name="case" proved="true" arg1="(mem t s1)">
   <goal name="cardinal_sum&#39;vc.1.0" expl="true case (precondition)" proved="true">
   <transf name="assert" proved="true" arg1="(cardinal (union s1 (add t s)) =  cardinal (union s1 s))">
    <goal name="cardinal_sum&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="replace" proved="true" arg1="(union s1 (add t s))" arg2="(add t (union s1 s))">
     <goal name="cardinal_sum&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.07" steps="37202"/></proof>
     <proof prover="7"><result status="valid" time="0.01" steps="78"/></proof>
     </goal>
     <goal name="cardinal_sum&#39;vc.1.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="0"><result status="valid" time="0.06" steps="35283"/></proof>
     <proof prover="7"><result status="valid" time="0.01" steps="12"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="cardinal_sum&#39;vc.1.0.1" expl="true case (precondition)" proved="true">
    <transf name="assert" proved="true" arg1="(cardinal (inter s1 (add t s)) =  1 + cardinal (inter s1 s))">
     <goal name="cardinal_sum&#39;vc.1.0.1.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="( (inter s1 (add t s)) =  add t (inter s1 s))">
      <goal name="cardinal_sum&#39;vc.1.0.1.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="( (inter s1 (add t s)) ==  add t (inter s1 s))">
       <goal name="cardinal_sum&#39;vc.1.0.1.0.0.0" expl="asserted formula" proved="true">
       <proof prover="7"><result status="valid" time="0.17" steps="1630"/></proof>
       </goal>
       <goal name="cardinal_sum&#39;vc.1.0.1.0.0.1" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.08" steps="37838"/></proof>
       <proof prover="7"><result status="valid" time="0.01" steps="24"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="cardinal_sum&#39;vc.1.0.1.0.1" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.12" steps="40162"/></proof>
      <proof prover="7"><result status="valid" time="0.02" steps="40"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="cardinal_sum&#39;vc.1.0.1.1" expl="true case (precondition)" proved="true">
     <proof prover="0"><result status="valid" time="0.09" steps="38189"/></proof>
     <proof prover="7"><result status="valid" time="0.01" steps="32"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="cardinal_sum&#39;vc.1.1" expl="false case (precondition)" proved="true">
   <transf name="assert" proved="true" arg1="(cardinal (union s1 (add t s)) =  1 + cardinal (union s1 s))">
    <goal name="cardinal_sum&#39;vc.1.1.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.29" steps="92967"/></proof>
    <proof prover="7"><result status="valid" time="0.02" steps="320"/></proof>
    </goal>
    <goal name="cardinal_sum&#39;vc.1.1.1" expl="false case (precondition)" proved="true">
    <transf name="assert" proved="true" arg1="(cardinal (inter s1 (add t s)) =   cardinal (inter s1 s))">
     <goal name="cardinal_sum&#39;vc.1.1.1.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="( (inter s1 (add t s)) ==   (inter s1 s))">
      <goal name="cardinal_sum&#39;vc.1.1.1.0.0" expl="asserted formula" proved="true">
      <proof prover="7"><result status="valid" time="0.27" steps="2873"/></proof>
      </goal>
      <goal name="cardinal_sum&#39;vc.1.1.1.0.1" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.09" steps="37962"/></proof>
      <proof prover="7"><result status="valid" time="0.01" steps="35"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="cardinal_sum&#39;vc.1.1.1.1" expl="false case (precondition)" proved="true">
     <proof prover="0"><result status="valid" time="0.09" steps="38087"/></proof>
     <proof prover="7"><result status="valid" time="0.01" steps="32"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="cardinal_sum&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="28471"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="18"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="cardinal_eq&#39;vc" expl="VC for cardinal_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cardinal_eq&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.02" steps="127"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="cardinal_sum_empty_inter&#39;vc" expl="VC for cardinal_sum_empty_inter" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="cardinal_sum_empty_inter&#39;vc.0" expl="VC for cardinal_sum_empty_inter" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="38014"/></proof>
  <proof prover="7"><result status="valid" time="0.02" steps="1124"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="cartesian_product&#39;vc" expl="VC for cartesian_product" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cartesian_product&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="40946"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="30"/></proof>
  </goal>
  <goal name="cartesian_product&#39;vc.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="cartesian_product&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.12" steps="61754"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="87"/></proof>
   </goal>
   <goal name="cartesian_product&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.15" steps="62272"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="89"/></proof>
   </goal>
   <goal name="cartesian_product&#39;vc.1.2" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.14" steps="77542"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="100"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cartesian_product&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="cartesian_product&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.14" steps="77568"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="72"/></proof>
   </goal>
   <goal name="cartesian_product&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.16" steps="77568"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="75"/></proof>
   </goal>
   <goal name="cartesian_product&#39;vc.2.2" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.14" steps="77557"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="84"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cartesian_product&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="19591"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="6"/></proof>
  </goal>
  <goal name="cartesian_product&#39;vc.4" expl="loop invariant init" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="cartesian_product&#39;vc.4.0" expl="loop invariant init" proved="true">
   <proof prover="0"><result status="valid" time="0.10" steps="50513"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="40"/></proof>
   </goal>
   <goal name="cartesian_product&#39;vc.4.1" expl="loop invariant init" proved="true">
   <proof prover="0"><result status="valid" time="0.09" steps="51594"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="39"/></proof>
   </goal>
   <goal name="cartesian_product&#39;vc.4.2" expl="loop invariant init" proved="true">
   <proof prover="0"><result status="valid" time="0.09" steps="50518"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="42"/></proof>
   </goal>
   <goal name="cartesian_product&#39;vc.4.3" expl="loop invariant init" proved="true">
   <proof prover="0"><result status="valid" time="0.08" steps="67926"/></proof>
   <proof prover="7"><result status="valid" time="0.00" steps="10"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cartesian_product&#39;vc.5" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="77941"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="15"/></proof>
  </goal>
  <goal name="cartesian_product&#39;vc.6" expl="loop variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="cartesian_product&#39;vc.6.0" expl="loop variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.14" steps="81914"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="30"/></proof>
   </goal>
   <goal name="cartesian_product&#39;vc.6.1" expl="loop variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.18" steps="85651"/></proof>
   <proof prover="7"><result status="valid" time="0.02" steps="862"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cartesian_product&#39;vc.7" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="86017"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="198"/></proof>
  </goal>
  <goal name="cartesian_product&#39;vc.8" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="cartesian_product&#39;vc.8.0" expl="loop invariant preservation" proved="true">
   <proof prover="0"><result status="valid" time="0.19" steps="87381"/></proof>
   <proof prover="7"><result status="valid" time="0.06" steps="1282"/></proof>
   </goal>
   <goal name="cartesian_product&#39;vc.8.1" expl="loop invariant preservation" proved="true">
   <proof prover="0"><result status="valid" time="0.19" steps="86504"/></proof>
   <proof prover="7"><result status="valid" time="0.02" steps="230"/></proof>
   </goal>
   <goal name="cartesian_product&#39;vc.8.2" expl="loop invariant preservation" proved="true">
   <proof prover="0"><result status="valid" time="0.18" steps="86664"/></proof>
   <proof prover="7"><result status="valid" time="0.02" steps="240"/></proof>
   </goal>
   <goal name="cartesian_product&#39;vc.8.3" expl="loop invariant preservation" proved="true">
   <proof prover="0"><result status="valid" time="0.19" steps="87012"/></proof>
   <proof prover="7"><result status="valid" time="0.05" steps="1330"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cartesian_product&#39;vc.9" expl="loop invariant preservation" proved="true">
  <proof prover="7"><result status="valid" time="1.54" steps="43783"/></proof>
  </goal>
  <goal name="cartesian_product&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.01" steps="97"/></proof>
  </goal>
  <goal name="cartesian_product&#39;vc.11" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="cartesian_product&#39;vc.11.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.13" steps="77707"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="304"/></proof>
   </goal>
   <goal name="cartesian_product&#39;vc.11.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.13" steps="77707"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="313"/></proof>
   </goal>
   <goal name="cartesian_product&#39;vc.11.2" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.17" steps="88644"/></proof>
   <proof prover="7"><result status="valid" time="0.02" steps="716"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cartesian_product&#39;vc.12" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="cartesian_product&#39;vc.12.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.16" steps="81722"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="302"/></proof>
   </goal>
   <goal name="cartesian_product&#39;vc.12.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.16" steps="81707"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="311"/></proof>
   </goal>
   <goal name="cartesian_product&#39;vc.12.2" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.16" steps="81998"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="339"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="commute_inj&#39;vc" expl="VC for commute_inj" proved="true">
 <proof prover="7"><result status="valid" time="0.01" steps="23"/></proof>
 </goal>
 <goal name="mem_cartesian_product&#39;vc" expl="VC for mem_cartesian_product" proved="true">
 <proof prover="0"><result status="valid" time="0.12" steps="76734"/></proof>
 <proof prover="7"><result status="valid" time="0.01" steps="12"/></proof>
 </goal>
 <goal name="commute_inj_gen&#39;vc" expl="VC for commute_inj_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="commute_inj_gen&#39;vc.0" expl="assertion" proved="true">
  <proof prover="7"><result status="valid" time="0.01" steps="9"/></proof>
  </goal>
  <goal name="commute_inj_gen&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="24564"/></proof>
  <proof prover="7"><result status="valid" time="0.02" steps="307"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="commute_product&#39;vc" expl="VC for commute_product" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="commute_product&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="commute_product&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.10" steps="55634"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="14"/></proof>
   </goal>
   <goal name="commute_product&#39;vc.0.1" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.11" steps="55634"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="14"/></proof>
   </goal>
   <goal name="commute_product&#39;vc.0.2" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.14" steps="79043"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="17"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="commute_product&#39;vc.1" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="commute_product&#39;vc.1.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.22" steps="116611"/></proof>
   <proof prover="7"><result status="valid" time="0.02" steps="559"/></proof>
   </goal>
   <goal name="commute_product&#39;vc.1.1" expl="assertion" proved="true">
   <proof prover="7"><result status="valid" time="0.08" steps="2630"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="commute_product&#39;vc.2" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="commute_product&#39;vc.2.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.25" steps="116228"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="23"/></proof>
   </goal>
   <goal name="commute_product&#39;vc.2.1" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.24" steps="116234"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="25"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="commute_product&#39;vc.3" expl="assertion" proved="true">
  <proof prover="7"><result status="valid" time="0.03" steps="663"/></proof>
  </goal>
  <goal name="commute_product&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="120391"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="63"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="commute_product_el&#39;vc" expl="VC for commute_product_el" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="commute_product_el&#39;vc.0" expl="VC for commute_product_el" proved="true">
  <proof prover="0"><result status="valid" time="0.51" steps="151428"/></proof>
  <proof prover="7"><result status="valid" time="0.09" steps="3494"/></proof>
  </goal>
 </transf>
 <transf name="split_vc" proved="true" >
  <goal name="commute_product_el&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="commute_product_el&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.15" steps="90382"/></proof>
   <proof prover="7"><result status="valid" time="0.10" steps="107"/></proof>
   </goal>
   <goal name="commute_product_el&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.16" steps="90382"/></proof>
   <proof prover="7"><result status="valid" time="0.10" steps="107"/></proof>
   </goal>
   <goal name="commute_product_el&#39;vc.0.2" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.14" steps="90392"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="120"/></proof>
   </goal>
   <goal name="commute_product_el&#39;vc.0.3" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.29" steps="142931"/></proof>
   <proof prover="7"><result status="valid" time="0.03" steps="848"/></proof>
   </goal>
   <goal name="commute_product_el&#39;vc.0.4" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.28" steps="142948"/></proof>
   <proof prover="7"><result status="valid" time="0.14" steps="3831"/></proof>
   </goal>
   <goal name="commute_product_el&#39;vc.0.5" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.30" steps="142960"/></proof>
   <proof prover="7"><result status="valid" time="0.11" steps="3849"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cartesian_product_union&#39;vc" expl="VC for cartesian_product_union" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cartesian_product_union&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="cartesian_product_union&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.11" steps="60086"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="15"/></proof>
   </goal>
   <goal name="cartesian_product_union&#39;vc.0.1" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.10" steps="59218"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="15"/></proof>
   </goal>
   <goal name="cartesian_product_union&#39;vc.0.2" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.15" steps="83425"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="18"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cartesian_product_union&#39;vc.1" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="cartesian_product_union&#39;vc.1.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.15" steps="83476"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="15"/></proof>
   </goal>
   <goal name="cartesian_product_union&#39;vc.1.1" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.16" steps="87439"/></proof>
   <proof prover="7"><result status="valid" time="0.02" steps="414"/></proof>
   </goal>
   <goal name="cartesian_product_union&#39;vc.1.2" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.18" steps="88034"/></proof>
   <proof prover="7"><result status="valid" time="0.02" steps="395"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cartesian_product_union&#39;vc.2" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="cartesian_product_union&#39;vc.2.0" expl="assertion" proved="true">
   <transf name="assert" proved="true" arg1="(let (i,j) = o in mem o (cartesian_product s1 (union s2 s3)))">
    <goal name="cartesian_product_union&#39;vc.2.0.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.10" steps="80493"/></proof>
    <proof prover="7"><result status="valid" time="0.01" steps="8"/></proof>
    </goal>
    <goal name="cartesian_product_union&#39;vc.2.0.1" expl="assertion" proved="true">
    <proof prover="0"><result status="valid" time="0.14" steps="83693"/></proof>
    <proof prover="7"><result status="valid" time="0.01" steps="18"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="cartesian_product_union&#39;vc.2.1" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.14" steps="83600"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="19"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cartesian_product_union&#39;vc.3" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="cartesian_product_union&#39;vc.3.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.17" steps="87735"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="23"/></proof>
   </goal>
   <goal name="cartesian_product_union&#39;vc.3.1" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.17" steps="87800"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="209"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cartesian_product_union&#39;vc.4" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="2.59" steps="1508354"/></proof>
  <proof prover="7"><result status="valid" time="0.29" steps="9940"/></proof>
  </goal>
  <goal name="cartesian_product_union&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="84706"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="10"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="cartesian_union_product&#39;vc" expl="VC for cartesian_union_product" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cartesian_union_product&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="cartesian_union_product&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.14" steps="59528"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="15"/></proof>
   </goal>
   <goal name="cartesian_union_product&#39;vc.0.1" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.13" steps="60396"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="15"/></proof>
   </goal>
   <goal name="cartesian_union_product&#39;vc.0.2" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.14" steps="83735"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="18"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cartesian_union_product&#39;vc.1" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="cartesian_union_product&#39;vc.1.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.19" steps="87728"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="424"/></proof>
   </goal>
   <goal name="cartesian_union_product&#39;vc.1.1" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.15" steps="83786"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="15"/></proof>
   </goal>
   <goal name="cartesian_union_product&#39;vc.1.2" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.19" steps="88365"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="389"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cartesian_union_product&#39;vc.2" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="cartesian_union_product&#39;vc.2.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.14" steps="83916"/></proof>
   <proof prover="7"><result status="valid" time="0.02" steps="18"/></proof>
   </goal>
   <goal name="cartesian_union_product&#39;vc.2.1" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.14" steps="83909"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="16"/></proof>
   </goal>
   <goal name="cartesian_union_product&#39;vc.2.2" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.14" steps="83940"/></proof>
   <proof prover="7"><result status="valid" time="0.02" steps="19"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cartesian_union_product&#39;vc.3" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_eqq">
   <goal name="cartesian_union_product&#39;vc.3.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="cartesian_union_product&#39;vc.3.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.20" steps="108166"/></proof>
    <proof prover="7"><result status="valid" time="0.06" steps="2740"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="cartesian_union_product&#39;vc.3.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="cartesian_union_product&#39;vc.3.1.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.22" steps="107353"/></proof>
    <proof prover="7"><result status="valid" time="0.05" steps="4594"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="cartesian_union_product&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="85099"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="10"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="cartesian_product_cardone_r&#39;vc" expl="VC for cartesian_product_cardone_r" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="cartesian_product_cardone_r&#39;vc.0" expl="VC for cartesian_product_cardone_r" proved="true">
  <proof prover="7"><result status="valid" time="0.04" steps="839"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="cartesian_product_cardone_l&#39;vc" expl="VC for cartesian_product_cardone_l" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="cartesian_product_cardone_l&#39;vc.0" expl="VC for cartesian_product_cardone_l" proved="true">
  <proof prover="7"><result status="valid" time="0.22" steps="2694"/></proof>
  </goal>
 </transf>
 <transf name="split_vc" proved="true" >
  <goal name="cartesian_product_cardone_l&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.06" steps="640"/></proof>
  </goal>
  <goal name="cartesian_product_cardone_l&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="79373"/></proof>
  <proof prover="7"><result status="valid" time="0.03" steps="304"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="disjoint_cartesian_product_l&#39;vc" expl="VC for disjoint_cartesian_product_l" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="disjoint_cartesian_product_l&#39;vc.0" expl="VC for disjoint_cartesian_product_l" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="120991"/></proof>
  <proof prover="7"><result status="valid" time="0.93" steps="41750"/></proof>
  </goal>
 </transf>
 <transf name="split_vc" proved="true" >
  <goal name="disjoint_cartesian_product_l&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="132674"/></proof>
  <proof prover="7"><result status="valid" time="0.73" steps="32523"/></proof>
  </goal>
  <goal name="disjoint_cartesian_product_l&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="91345"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="47"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="disjoint_cartesian_product_r&#39;vc" expl="VC for disjoint_cartesian_product_r" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="disjoint_cartesian_product_r&#39;vc.0" expl="VC for disjoint_cartesian_product_r" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="121398"/></proof>
  <proof prover="7"><result status="valid" time="1.16" steps="41740"/></proof>
  </goal>
 </transf>
 <transf name="split_vc" proved="true" >
  <goal name="disjoint_cartesian_product_r&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="133150"/></proof>
  <proof prover="7"><result status="valid" time="0.93" steps="32520"/></proof>
  </goal>
  <goal name="disjoint_cartesian_product_r&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="91825"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="47"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="iter_union&#39;vc" expl="VC for iter_union" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="iter_union&#39;vc.0" expl="VC for iter_union" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="30389"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="50"/></proof>
  </goal>
 </transf>
 <transf name="split_vc" proved="true" >
  <goal name="iter_union&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="30303"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="49"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_mem_union&#39;vc" expl="VC for get_mem_union" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_mem_union&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="35876"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="10"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_mem_union&#39;&#39;vc" expl="VC for get_mem_union&#39;" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_mem_union&#39;&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="36067"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="10"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_mem_union&#39;vc" expl="VC for set_mem_union" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_mem_union&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="36246"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="8"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_mem_union&#39;&#39;vc" expl="VC for set_mem_union&#39;" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_mem_union&#39;&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="36384"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="8"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="My_map" proved="true">
 <goal name="my_map&#39;vc" expl="VC for my_map" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="my_map&#39;vc.0" expl="VC for my_map" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="63029"/></proof>
  <proof prover="7"><result status="valid" time="0.02" steps="296"/></proof>
  </goal>
 </transf>
 <transf name="split_vc" proved="true" >
  <goal name="my_map&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="29461"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="49"/></proof>
  </goal>
  <goal name="my_map&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="40360"/></proof>
  <proof prover="7"><result status="valid" time="0.02" steps="185"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Card_one_set" proved="true">
 <goal name="element&#39;vc" expl="VC for element" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="19341"/></proof>
 </goal>
 <goal name="cardone&#39;vc" expl="VC for cardone" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cardone&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="42128"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="38"/></proof>
  </goal>
  <goal name="cardone&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="40671"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="52"/></proof>
  </goal>
  <goal name="cardone&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="42429"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="42"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_cardone&#39;vc" expl="VC for set_cardone" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_cardone&#39;vc.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="cardone" arg2="s,(choose s)">
   <goal name="set_cardone&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="Hinst">
    <goal name="set_cardone&#39;vc.0.0.0" expl="destruct premise" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="set_cardone&#39;vc.0.0.0.0" expl="destruct premise" proved="true">
     <proof prover="0"><result status="valid" time="0.07" steps="40480"/></proof>
     <proof prover="7"><result status="valid" time="0.00" steps="42"/></proof>
     </goal>
     <goal name="set_cardone&#39;vc.0.0.0.1" expl="destruct premise" proved="true">
     <proof prover="0"><result status="valid" time="0.09" steps="40190"/></proof>
     <proof prover="7"><result status="valid" time="0.00" steps="12"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="set_cardone&#39;vc.0.0.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.04" steps="36955"/></proof>
    <proof prover="7"><result status="valid" time="0.00" steps="10"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="get_cardone&#39;vc" expl="VC for get_cardone" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_cardone&#39;vc.0" expl="postcondition" proved="true">
  <transf name="exists" proved="true" arg1="(choose s)">
   <goal name="get_cardone&#39;vc.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="get_cardone&#39;vc.0.0.0" proved="true">
    <proof prover="0"><result status="valid" time="0.07" steps="39145"/></proof>
    <proof prover="7"><result status="valid" time="0.01" steps="19"/></proof>
    </goal>
    <goal name="get_cardone&#39;vc.0.0.1" proved="true">
    <proof prover="0"><result status="valid" time="0.10" steps="40576"/></proof>
    <proof prover="7"><result status="valid" time="0.01" steps="11"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="get_cardone_elt&#39;vc" expl="VC for get_cardone_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_cardone_elt&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="40452"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="23"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_cardone_elt&#39;vc" expl="VC for set_cardone_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_cardone_elt&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_cardone">
   <goal name="set_cardone_elt&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="7"><result status="valid" time="0.00" steps="8"/></proof>
   </goal>
   <goal name="set_cardone_elt&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="exists" proved="true" arg1="a">
    <goal name="set_cardone_elt&#39;vc.0.1.0" proved="true">
    <proof prover="0"><result status="valid" time="0.07" steps="36812"/></proof>
    <proof prover="7"><result status="valid" time="0.01" steps="8"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="set_cardone_elt&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="41985"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="9"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_cardone_elt_&#39;vc" expl="VC for set_cardone_elt_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_cardone_elt_&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="37187"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="8"/></proof>
  </goal>
  <goal name="set_cardone_elt_&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="38016"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="6"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="cardzero&#39;vc" expl="VC for cardzero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cardzero&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="42284"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="29"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_choose_cardone&#39;vc" expl="VC for get_choose_cardone" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_choose_cardone&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="40347"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="10"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="IndexestoSet" proved="true">
 <goal name="to_set&#39;vc" expl="VC for to_set" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="to_set&#39;vc.0" expl="VC for to_set" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="40959"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="58"/></proof>
  </goal>
 </transf>
 <transf name="split_vc" proved="true" >
  <goal name="to_set&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="36783"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="6"/></proof>
  </goal>
  <goal name="to_set&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="40403"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="34"/></proof>
  </goal>
  <goal name="to_set&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="38972"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="11"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="to_fset&#39;vc" expl="VC for to_fset" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="to_fset&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="27258"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="2"/></proof>
  </goal>
  <goal name="to_fset&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="28541"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="6"/></proof>
  </goal>
  <goal name="to_fset&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="to_fset&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.07" steps="39412"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="11"/></proof>
   </goal>
   <goal name="to_fset&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.07" steps="39414"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="11"/></proof>
   </goal>
   <goal name="to_fset&#39;vc.2.2" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.07" steps="39424"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="7"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="to_fset&#39;vc.3" expl="loop invariant init" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="to_fset&#39;vc.3.0" expl="loop invariant init" proved="true">
   <proof prover="0"><result status="valid" time="0.07" steps="36731"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="14"/></proof>
   </goal>
   <goal name="to_fset&#39;vc.3.1" expl="loop invariant init" proved="true">
   <proof prover="0"><result status="valid" time="0.08" steps="36733"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="14"/></proof>
   </goal>
   <goal name="to_fset&#39;vc.3.2" expl="loop invariant init" proved="true">
   <proof prover="0"><result status="valid" time="0.05" steps="35424"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="4"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="to_fset&#39;vc.4" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="38944"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="8"/></proof>
  </goal>
  <goal name="to_fset&#39;vc.5" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="37506"/></proof>
  <proof prover="7"><result status="valid" time="0.00" steps="4"/></proof>
  </goal>
  <goal name="to_fset&#39;vc.6" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="38925"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="5"/></proof>
  </goal>
  <goal name="to_fset&#39;vc.7" expl="loop variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="to_fset&#39;vc.7.0" expl="loop variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.04" steps="37188"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="17"/></proof>
   </goal>
   <goal name="to_fset&#39;vc.7.1" expl="loop variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.04" steps="37243"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="17"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="to_fset&#39;vc.8" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="to_fset&#39;vc.8.0" expl="loop invariant preservation" proved="true">
   <proof prover="0"><result status="valid" time="0.12" steps="43216"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="63"/></proof>
   </goal>
   <goal name="to_fset&#39;vc.8.1" expl="loop invariant preservation" proved="true">
   <proof prover="0"><result status="valid" time="0.10" steps="43224"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="63"/></proof>
   </goal>
   <goal name="to_fset&#39;vc.8.2" expl="loop invariant preservation" proved="true">
   <proof prover="0"><result status="valid" time="0.11" steps="42604"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="55"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="to_fset&#39;vc.9" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="43459"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="56"/></proof>
  </goal>
  <goal name="to_fset&#39;vc.10" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="37418"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="18"/></proof>
  </goal>
  <goal name="to_fset&#39;vc.11" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="38936"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="19"/></proof>
  </goal>
  <goal name="to_fset&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="38257"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="14"/></proof>
  </goal>
  <goal name="to_fset&#39;vc.13" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="37314"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="14"/></proof>
  </goal>
  <goal name="to_fset&#39;vc.14" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="to_fset&#39;vc.14.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.09" steps="40377"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="23"/></proof>
   </goal>
   <goal name="to_fset&#39;vc.14.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.08" steps="40362"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="23"/></proof>
   </goal>
   <goal name="to_fset&#39;vc.14.2" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.10" steps="40297"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="23"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="to_fset_bounds&#39;vc" expl="VC for to_fset_bounds" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="to_fset_bounds&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="37440"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="8"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="to_fset_unit_ext&#39;vc" expl="VC for to_fset_unit_ext" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="to_fset_unit_ext&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="to_fset_unit_ext&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.08" steps="37527"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="8"/></proof>
   </goal>
   <goal name="to_fset_unit_ext&#39;vc.0.1" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.07" steps="37507"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="8"/></proof>
   </goal>
   <goal name="to_fset_unit_ext&#39;vc.0.2" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.08" steps="37381"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="8"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="to_fset_unit_ext&#39;vc.1" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="to_fset_unit_ext&#39;vc.1.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.09" steps="41941"/></proof>
   <proof prover="7"><result status="valid" time="0.02" steps="87"/></proof>
   </goal>
   <goal name="to_fset_unit_ext&#39;vc.1.1" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.09" steps="42714"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="39"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="to_fset_unit_ext&#39;vc.2" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="to_fset_unit_ext&#39;vc.2.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.09" steps="38576"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="14"/></proof>
   </goal>
   <goal name="to_fset_unit_ext&#39;vc.2.1" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.08" steps="38565"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="25"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="to_fset_unit_ext&#39;vc.3" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="38097"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="41"/></proof>
  </goal>
  <goal name="to_fset_unit_ext&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="36919"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="9"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="to_fset_ext&#39;vc" expl="VC for to_fset_ext" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="to_fset_ext&#39;vc.0" expl="VC for to_fset_ext" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="48262"/></proof>
  <proof prover="7"><result status="valid" time="0.07" steps="1676"/></proof>
  </goal>
 </transf>
 <transf name="split_vc" proved="true" >
  <goal name="to_fset_ext&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="24617"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="25"/></proof>
  </goal>
  <goal name="to_fset_ext&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="23627"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="16"/></proof>
  </goal>
  <goal name="to_fset_ext&#39;vc.2" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="to_fset_ext&#39;vc.2.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.03" steps="22758"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="12"/></proof>
   </goal>
   <goal name="to_fset_ext&#39;vc.2.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.04" steps="22771"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="12"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="to_fset_ext&#39;vc.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="to_fset_ext&#39;vc.3.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.05" steps="23639"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="12"/></proof>
   </goal>
   <goal name="to_fset_ext&#39;vc.3.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.03" steps="22740"/></proof>
   <proof prover="7"><result status="valid" time="0.01" steps="12"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="to_fset_ext&#39;vc.4" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="25586"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="14"/></proof>
  </goal>
  <goal name="to_fset_ext&#39;vc.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="43748"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="38"/></proof>
  </goal>
  <goal name="to_fset_ext&#39;vc.6" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="47471"/></proof>
  <proof prover="7"><result status="valid" time="0.04" steps="230"/></proof>
  </goal>
  <goal name="to_fset_ext&#39;vc.7" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="40433"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="44"/></proof>
  </goal>
  <goal name="to_fset_ext&#39;vc.8" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="43178"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="48"/></proof>
  </goal>
  <goal name="to_fset_ext&#39;vc.9" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="40423"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="23"/></proof>
  </goal>
  <goal name="to_fset_ext&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="43412"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="28"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="card_fset&#39;vc" expl="VC for card_fset" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="card_fset&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="28992"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="22"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="card_fset_gen&#39;vc" expl="VC for card_fset_gen" proved="true">
 <proof prover="0"><result status="valid" time="0.05" steps="29141"/></proof>
 <proof prover="7"><result status="valid" time="0.01" steps="22"/></proof>
 </goal>
 <goal name="set_mem_to_fset&#39;vc" expl="VC for set_mem_to_fset" proved="true">
 <proof prover="0"><result status="valid" time="0.08" steps="38036"/></proof>
 <proof prover="7"><result status="valid" time="0.01" steps="10"/></proof>
 </goal>
</theory>
<theory name="Choose_filter" proved="true">
 <goal name="choose_filter&#39;vc" expl="VC for choose_filter" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="choose_filter&#39;vc.0" expl="VC for choose_filter" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="48607"/></proof>
  <proof prover="7"><result status="valid" time="0.02" steps="142"/></proof>
  </goal>
 </transf>
 <transf name="split_vc" proved="true" >
  <goal name="choose_filter&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="44927"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="55"/></proof>
  </goal>
  <goal name="choose_filter&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="43857"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="34"/></proof>
  </goal>
  <goal name="choose_filter&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="41035"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="6"/></proof>
  </goal>
  <goal name="choose_filter&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="43131"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="57"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="my_filter&#39;vc" expl="VC for my_filter" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="my_filter&#39;vc.0" expl="VC for my_filter" proved="true">
  <proof prover="0"><result status="valid" time="2.10" steps="1132725"/></proof>
  <proof prover="7"><result status="valid" time="0.35" steps="7022"/></proof>
  </goal>
 </transf>
 <transf name="split_vc" proved="true" >
  <goal name="my_filter&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="35466"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="51"/></proof>
  </goal>
  <goal name="my_filter&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="35473"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="52"/></proof>
  </goal>
  <goal name="my_filter&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="63194"/></proof>
  <proof prover="7"><result status="valid" time="0.03" steps="422"/></proof>
  </goal>
  <goal name="my_filter&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="63138"/></proof>
  <proof prover="7"><result status="valid" time="0.04" steps="410"/></proof>
  </goal>
  <goal name="my_filter&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="47535"/></proof>
  <proof prover="7"><result status="valid" time="0.03" steps="253"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="my_filter_int&#39;vc" expl="VC for my_filter_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="my_filter_int&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="26889"/></proof>
  </goal>
  <goal name="my_filter_int&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="26896"/></proof>
  </goal>
  <goal name="my_filter_int&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="my_filter_int&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.07" steps="29938"/></proof>
   </goal>
   <goal name="my_filter_int&#39;vc.2.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="my_filter_int&#39;vc.2.1.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="my_filter_int&#39;vc.2.1.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="set_equal">
      <goal name="my_filter_int&#39;vc.2.1.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.14" steps="64818"/></proof>
      </goal>
      <goal name="my_filter_int&#39;vc.2.1.0.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.15" steps="65004"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="my_filter_int&#39;vc.2.2" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="my_filter_int&#39;vc.2.2.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="my_filter_int&#39;vc.2.2.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="set_equal">
      <goal name="my_filter_int&#39;vc.2.2.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.12" steps="60610"/></proof>
      </goal>
      <goal name="my_filter_int&#39;vc.2.2.0.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.14" steps="61217"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="my_filter_int&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="58288"/></proof>
  </goal>
  <goal name="my_filter_int&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="61343"/></proof>
  </goal>
  <goal name="my_filter_int&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="48984"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="in_my_filter&#39;vc" expl="VC for in_my_filter" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="in_my_filter&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="42901"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="10"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="not_in_my_filter_set&#39;vc" expl="VC for not_in_my_filter_set" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="not_in_my_filter_set&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="42655"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="8"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="not_in_my_filter_filter&#39;vc" expl="VC for not_in_my_filter_filter" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="not_in_my_filter_filter&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="44524"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="7"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="in_my_filter_set&#39;vc" expl="VC for in_my_filter_set" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="in_my_filter_set&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="42975"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="8"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="in_my_filter_filter&#39;vc" expl="VC for in_my_filter_filter" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="in_my_filter_filter&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="43446"/></proof>
  <proof prover="7"><result status="valid" time="0.01" steps="7"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="my_filter_inter&#39;vc" expl="VC for my_filter_inter" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="my_filter_inter&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.73" steps="385457"/></proof>
  <proof prover="7"><result status="valid" time="0.04" steps="327"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="my_filter_union&#39;vc" expl="VC for my_filter_union" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="my_filter_union&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal">
   <goal name="my_filter_union&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="my_filter_union&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.10" steps="47223"/></proof>
    <proof prover="7"><result status="valid" time="0.01" steps="95"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="my_filter_union&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="my_filter_union&#39;vc.0.1.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.08" steps="50182"/></proof>
    <proof prover="7"><result status="valid" time="0.02" steps="50"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
