(**************************************************************************)
(*  This file is part of QBRICKS.                                         *)
(*                                                                        *)
(*  Copyright (C) 2020-2022                                               *)
(*    CEA (Commissariat à l'énergie atomique et aux énergies              *)
(*         alternatives)                                                  *)
(*    Université Paris-Saclay                                             *)
(*                                                                        *)
(*  you can redistribute it and/or modify it under the terms of the GNU   *)
(*  Lesser General Public License as published by the Free Software       *)
(*  Foundation, version 2.1.                                              *)
(*                                                                        *)
(*  It is distributed in the hope that it will be useful,                 *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of        *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *)
(*  GNU Lesser General Public License for more details.                   *)
(*                                                                        *)
(*  See the GNU Lesser General Public License version 2.1                 *)
(*  for more details (enclosed in the file licenses/LGPLv2.1).            *)
(*                                                                        *)
(**************************************************************************)

module Shor 
         use multiplier.Multiplier
         use p_int.P_minmax
         use qpe.Phase_estim
         use matrices.Matrix
         use matrices.Matrix_scalar
         use p_set.IndexestoSet
         use qdata.Bv_to_ket
         use complex.Complex
         use qdata.Ket_basis
         use complex_operations.FromInt
         use qdata.Sqrt_two
         use qdata.Qreg
         use kets.Superpositions
         use qft.Rev_qft
         use arit.Inverse
         use wired_circuits.Circuit_c
         use binary.Bit_vector_decomp
         use int.EuclideanDivision
         use  qbricks.Circuit_semantics
         use   binary.Bit_vector
         use  p_int.Int_comp
         use  qft.Qft
         use  int_expo.Int_Exponentiation
         use  qbricks.Circuit_macros
         use wired_circuits.Qbricks_prim
         use int.Int
         use qdata.Kronecker_Qbit
         use matrices.Kronecker_product
         use  arit.Divisors
         use extr_int.Ind_isum
     
let function create_superposition (k n:int) (ghost y:matrix complex) : circuit
      requires{0<k <n}
      requires{is_a_ket_l y (n-k)}
      ensures{width result = n}
      ensures{path_sem result (kronecker (ket k 0) y) =   (kronecker  ( pow_inv_sqrt_2 k *.. ket_sum_l  (n_bvs k) (fun x ->   (bv_to_ket x)) k) y)}
  = sum_ket_zero k;
    place_kron_left (repeat_had k) n (ket k 0) (pow_inv_sqrt_2 k *..  ket_sum_l  (n_bvs k) (fun e ->   (bv_to_ket e)) k) y;
    place (repeat_had k) 0 n
     
let rec function modular_expo (a bound n:int):circuit
     requires{0<n}
     requires{0<= a < power 2 n}
     requires{power 2 (n-1)< bound < power 2 n}
     requires{a < bound}
     requires{co_prime a bound}
     ensures{width result = 3*n}
     ensures{forall x:bitvec. length x = 2*n ->
                      path_sem result (kronecker (bv_to_ket x) (ket n 1))
                      =  kronecker (bv_to_ket x) (ket n (mod (power  a  (bv_to_int x)) bound))} 
  = let rec function modular_expo_pre (k : int)
         requires{0<= k < 2*n}
         variant{k}
         ensures{width result = 3*n}
         ensures{forall x:bitvec. length x = 2*n ->
                          path_sem result (kronecker (bv_to_ket x) (ket n 1))
                                    =  kronecker (bv_to_ket x) (ket n (mod 
                                                                         (power  a  (ind_isum (fun l -> getbv x l * power 2 (2*n-l-1)) 0 (k+1))) bound))} 
      = if k = 0    then begin
            cont_kron_pat_right_gen (modular_multiplier  (power a (power 2 (2*n-1))) bound n) 0 (2*n) (3*n);
            cont (modular_multiplier (power a (power 2 (2*n-1))) bound n) 0 (2*n) (3*n)
          end
        else let o = (modular_expo_pre (k-1)) in
             begin
             cont_kron_pat_right_gen (modular_multiplier (power  a (power 2 (2*n-k-1))) bound n)  k (2*n) (3*n);
              o -- (cont (modular_multiplier (power  a (power 2 (2*n-k-1))) bound n) k (2*n) (3*n))
             end
    in
    modular_expo_pre (2*n-1)
    
let function shor_circ_pre  (a bound n:int):circuit
               requires{0<n}
               requires{0<= a < power 2 n}
               requires{power 2 (n-1)< bound < power 2 n}
               requires{a < bound}
               requires{co_prime a bound}
               ensures{width result = 3*n}
               ensures{path_sem result (kronecker (ket (2*n) 0) (ket n 1))
                           =  pow_inv_sqrt_2 (2*n) *.. ket_sum_l (n_bvs (2*n))(fun i -> kronecker (ket (2*n) (bv_to_int i)) (ket n (mod (power a (bv_to_int i))bound))) (3*n)} 
  =
  path_sem_comp (create_superposition (2*n) (3*n) (ket n 1)) (modular_expo a bound n)
    (kronecker (ket (2*n) 0) (ket n 1))   (kronecker  ( pow_inv_sqrt_2 (2*n) *.. ket_sum_l  (n_bvs (2*n)) (fun x ->   (bv_to_ket x)) (2*n)) (ket n 1))
    (pow_inv_sqrt_2 (2*n) *.. ket_sum_l (n_bvs (2*n))(fun i -> kronecker (ket (2*n) (bv_to_int  i)) (ket n ( mod( power a (bv_to_int i)) bound))) (3*n));
     (create_superposition (2*n) (3*n) (ket n 1))-- (modular_expo a bound n)
     
let ghost function shor_ket   (a bound n i j:int) 
          requires{0<n}
          requires{0<= a < power 2 n}
          requires{power 2 (n-1)< bound < power 2 n}
          requires{a < bound}
          requires{co_prime a bound}
          ensures{is_a_ket_l result (3*n)}
                 ensures{result = kronecker (int_qft_coeff i (-j)  (2*n)
               *.. ket (2*n) j) (ket n (mod (power a i) bound))}
  = kronecker (int_qft_coeff  (-i) j  (2*n)
               *.. ket (2*n) j) (ket n (mod (power a i) bound))
  
let function shor_circ   (a bound n:int):circuit
          requires{0<n}
          requires{0<= a < power 2 n}
          requires{power 2 (n-1)< bound < power 2 n}
          requires{a < bound}
          requires{co_prime a bound}
          ensures{width result = 3*n}
          ensures{path_sem result (kronecker (ket (2*n) 0) (ket n 1))
                  =  pow_inv_2 (2*n) *.. ket_sum_l (n_bvs (2*n))(fun i -> ket_sum_l (n_bvs (2*n))(fun j ->
                                                                              shor_ket a bound n (bv_to_int i) (bv_to_int j))(3*n)) (3*n)}
  =
  place_kron_left_path (qft_rev (2*n)) (3*n);
  path_sem_comp (shor_circ_pre a bound n) (place (qft_rev (2*n)) 0 (3*n))
    (kronecker (ket (2*n) 0) (ket n 1))
    (pow_inv_sqrt_2 (2*n) *.. ket_sum_l (n_bvs (2*n))(fun i -> kronecker (bv_to_ket i) (ket n (mod (power a (bv_to_int i))bound))) (3*n))
    (pow_inv_sqrt_2 (2*n) *..(pow_inv_sqrt_2 (2*n) *.. ket_sum_l (n_bvs (2*n))(fun i -> ket_sum_l (n_bvs (2*n))(fun j ->    if length i = length j &&  length i = 2* n then                                           kronecker (int_qft_coeff  (- bv_to_int j) (bv_to_int i) (2*n) *.. bv_to_ket j) (ket n (mod (power a (bv_to_int i ))bound)) else ket (3*n) 0 )(3*n))(3*n)));
   (shor_circ_pre a bound n) -- (place (qft_rev (2*n)) 0 (3*n))

let lemma k_bound (k a bound n i:int)
               requires{0<n}
               requires{0<= a < power 2 n}
               requires{power 2 (n-1)< bound < power 2 n}
               requires{a < bound}
               requires{co_prime a bound}
               requires{0<= k <= div (power 2 (2*n)) (multi_order a bound)}
               requires{0<= i < mod (power 2 (2*n)) (multi_order a bound)}
               ensures{((i_to_c k *. i_to_c (multi_order a bound) +. i_to_c i) *. pow_inv_2 (2 * n)) <=. c_one}
               ensures{(i_to_c k *. i_to_c (multi_order a bound) +. i_to_c i)  <=. i_to_c (power 2 (2 * n))}
               ensures{i_to_c (k * multi_order a bound+i) *. pow_inv_2 (2 * n) <=. c_one}
               ensures{i_to_c (k * multi_order a bound+i)  <=. i_to_c (power 2 (2 * n))}
  = mult_leq_c_one_expl (i_to_c k *. i_to_c (multi_order a bound)+. i_to_c i) (pow_inv_2 (2 * n)) (i_to_c (div (power 2 (2*n)) (multi_order a bound) * (multi_order a bound) +i )) ;
    mult_leq_c_one_rev (i_to_c k *. i_to_c (multi_order a bound)+. i_to_c i) (pow_inv_2 (2 * n))
    
let ghost function best_appr_  (k a bound n:int):int
               requires{0<n}
               requires{0<= a < power 2 n}
               requires{power 2 (n-1)< bound < power 2 n}
               requires{a < bound}
               requires{co_prime a bound}
               requires{0<= k < multi_order a bound}
               ensures{0<= result <= power 2 (2*n)}               
               ensures{modulus (((i_to_c  k) /. (i_to_c(multi_order a bound))) -. pow_inv_2 (2*n) *. i_to_c  result) <=. pow_inv_2 (2*n+1)}
               ensures{forall b. 0< b ->  b*  multi_order a bound   <= power 2 (2*n) ->
                       modulus (i_to_c k -. (pow_inv_2 (2 * n) *. i_to_c ((result * multi_order a bound))))
                         <=. (c_one /. (ttwo *. i_to_c b))}
  =    modulus_simpl_leq_rev (pow_inv_2 (2*n) *. i_to_c   (best_appr ((i_to_c  k ) /. (i_to_c(multi_order a bound))) (2*n))
                                 -. ((i_to_c  k) /. (i_to_c(multi_order a bound)))) (c_one/. i_to_c (power 2 (2*n+1)))  (i_to_c(multi_order a bound));                          
       best_appr ((i_to_c  k ) /. (i_to_c(multi_order a bound))) (2*n)

let lemma best_appr_orders  (k a bound n:int)
               requires{0<n}
               requires{0<= a < power 2 n}
               requires{power 2 (n-1)< bound < power 2 n}
               requires{a < bound}
               requires{co_prime a bound}
               requires{0<= k < multi_order a bound}
               ensures{(i_to_c  (k * power 2 (2*n)) /. (i_to_c(multi_order a bound))) -. c_one /. ttwo <=. i_to_c (best_appr_ k a bound n)
                       <=. (i_to_c  (k * power 2 (2*n)) /. (i_to_c(multi_order a bound))) +. c_one /. ttwo}
                 ensures{0<= best_appr_ k a bound n < power 2 (2*n)}
  =  modulus_real_minus_bound (i_to_c  (k * power 2 (2*n)) /. (i_to_c(multi_order a bound))) (i_to_c (best_appr_ k a bound n)) (c_one /. ttwo)
   
let function greatest_factor (a bound n i:int)
               requires{0<n}
               requires{0<= a < power 2 n}
               requires{power 2 (n-1)< bound < power 2 n}
               requires{a < bound}
               requires{co_prime a bound}
               requires{0<= i < multi_order a bound}
               ensures{1<=result}
               ensures{forall j. 0<= j < result -> j * (multi_order a bound) + mod i (multi_order a bound) <  power 2 (2*n)}
           ensures{forall j. 0<= j < power 2 (2*n) -> mod j (multi_order a bound) = i <-> exists k. 0<= k < result && j =  k * (multi_order a bound) + i}
           ensures{i_to_c (result-1) <=. i_to_c (power 2 (2*n) -i) /. i_to_c (multi_order a bound)}
           ensures{div i (multi_order a bound) < result}
  = greatest_factor_in_n (multi_order a bound) (2*n) i

      use complex_operations.Base_type
      use complex_expo.Complex_Exponentiation
  
let ghost function min_mod_sum (a bound n :int)
               requires{0<n}
               requires{0<= a < power 2 n}
               requires{power 2 (n-1)< bound < power 2 n}
               requires{a < bound}
               requires{co_prime a bound}
               ensures{c_zero<=.result}
               ensures{real_ result}
          ensures{forall i k. 0<= i < multi_order a bound ->  0<= k < multi_order a bound -> 
                  result <=. cpower (modulus (ind_sum  (fun y -> (int_qft_coeff (y  * multi_order a bound+ mod i (multi_order a bound))
                                                                    (-  (best_appr_ k a bound n) ) (2*n))) 0 (greatest_factor a bound n i)))2
                /. ( cpower (i_to_c (greatest_factor a bound n i)) 2)}
          ensures{forall i k. 0<= i < multi_order a bound ->  0<= k < multi_order a bound -> 
                  ( cpower (i_to_c (greatest_factor a bound n i)) 2) *. result <=.
                    cpower (modulus (ind_sum  (fun y -> (int_qft_coeff (y  * multi_order a bound+mod i (multi_order a bound))
                                                           (-  (best_appr_ k a bound n) ) (2*n))) 0 (greatest_factor a bound n i)))2}
  = let min_mod_sum_pre (k:int)
               ensures{c_zero<=.result}
          ensures{real_ result}
          ensures{0<= k < (multi_order a bound) -> forall i. 0<= i < multi_order a bound -> 
                  result <=.  cpower (modulus (ind_sum  (fun y -> (int_qft_coeff (y  * multi_order a bound+mod i (multi_order a bound))
                                                                     (-  (best_appr_ k a bound n) ) (2*n))) 0 (greatest_factor a bound n i)))2
              /.( cpower (i_to_c (greatest_factor a bound n i)) 2)}
      = if 0<= k < (multi_order a bound) then
      min_set_complex (to_fset 0 (multi_order a bound))
        (fun i -> if 0<= i < multi_order a bound then
                    cpower (modulus (ind_sum  (fun y -> (int_qft_coeff (y  * multi_order a bound+mod i (multi_order a bound))
                                                           (-  (best_appr_ k a bound n) ) (2*n))) 0 (greatest_factor a bound n i)))2
                    /. ( cpower (i_to_c (greatest_factor a bound n i)) 2) else c_zero) else c_zero
    in min_set_complex (to_fset 0 (multi_order a bound)) min_mod_sum_pre
  
let lemma separated_best_appr (k k' a bound n:int)
               requires{0<n}
               requires{0<= a < power 2 n}
               requires{power 2 (n-1)< bound < power 2 n}
               requires{a < bound}
               requires{co_prime a bound}
               requires{0<= k < k' < (multi_order a bound)}
               ensures{best_appr_ k a bound n < best_appr_ k' a bound n }
               ensures{forall l. (best_appr_ k a bound n)  * power 2 n + l <>
                          (best_appr_ k' a bound n)  * power 2 n + l }
    =
    assert{  ((i_to_c  (k' * power 2 (2*n)) /. (i_to_c(multi_order a bound))) -. c_one /. ttwo) -.
               ((i_to_c  (k * power 2 (2*n)) /. (i_to_c(multi_order a bound))) +. c_one /. ttwo)
             = (i_to_c  (k'-k) *. (i_to_c ( power 2 (2*n)) /. (i_to_c(multi_order a bound))) -. c_one )};
    assert{((i_to_c  (k * power 2 (2*n)) /. (i_to_c(multi_order a bound))) +. c_one /. ttwo) <. ((i_to_c  (k' * power 2 (2*n)) /. (i_to_c(multi_order a bound))) -. c_one /. ttwo) };
 best_appr_orders  k a bound n;
 best_appr_orders  k' a bound n;
transitive_infeq_inf (i_to_c (best_appr_ k a bound n))
  ((i_to_c  (k * power 2 (2*n)) /. (i_to_c(multi_order a bound))) +. c_one /. ttwo)
  ((i_to_c  (k' * power 2 (2*n)) /. (i_to_c(multi_order a bound))) -. c_one /. ttwo);
transitive_inf_infeq (i_to_c (best_appr_ k a bound n))
  ((i_to_c (k' * power 2 (2*n)) /. (i_to_c(multi_order a bound))) -. c_one /. ttwo)
  (i_to_c (best_appr_ k' a bound n))

end                   

