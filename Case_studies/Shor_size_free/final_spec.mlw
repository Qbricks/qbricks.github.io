(**************************************************************************)
(*  This file is part of QBRICKS.                                         *)
(*                                                                        *)
(*  Copyright (C) 2020-2022                                               *)
(*    CEA (Commissariat à l'énergie atomique et aux énergies              *)
(*         alternatives)                                                  *)
(*    Université Paris-Saclay                                             *)
(*                                                                        *)
(*  you can redistribute it and/or modify it under the terms of the GNU   *)
(*  Lesser General Public License as published by the Free Software       *)
(*  Foundation, version 2.1.                                              *)
(*                                                                        *)
(*  It is distributed in the hope that it will be useful,                 *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of        *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *)
(*  GNU Lesser General Public License for more details.                   *)
(*                                                                        *)
(*  See the GNU Lesser General Public License version 2.1                 *)
(*  for more details (enclosed in the file licenses/LGPLv2.1).            *)
(*                                                                        *)
(**************************************************************************)

module Shor_spec
         
         use circuit.Shor
         use qft.Qft
         use wired_circuits.Circuit_c
         use wired_circuits.Qbricks_prim
         use measure.Measure
         use qdata.Sqrt_two
         use qdata.Kronecker_Qbit
         use matrices.Kronecker_product
         use arit.Inverse
         use arit.Div_Mod
         use  arit.Divisors
         use  complex_expo.Complex_Exponentiation
         use complex_operations.FromInt
         use  complex_operations.Base_type
         use  int_expo.Int_Exponentiation
         use p_int.Int_comp
         use p_set.IndexestoSet
         use complex.Complex
         use int.EuclideanDivision
         use int.Int
     
let lemma shor_meas_j_k    (a bound n i  k:int)
      requires{0<n}
      requires{0<= a < power 2 n}
      requires{power 2 (n-1)< bound < power 2 n}
      requires{a < bound}
      requires{co_prime a bound}
      requires{0<= k < (multi_order a bound)}
      requires{0<= i < multi_order a bound}
      ensures{cpower (pow_inv_2 (2*n)) 2 *.  cpower (i_to_c (greatest_factor a bound n i)) 2 *. (min_mod_sum a bound n)<=.
                proba_measure (path_sem (shor_circ a bound n) (kronecker (ket (2*n) 0) (ket n 1)))
                  ((best_appr_  k a bound n)  * (power 2 n) +  mod (power a i ) bound) (3*n)}
  =
  transitive_inf_int   bound  (power 2 n) (power 2 (2*n));
  transitive_inf_int  (multi_order a bound) bound (power 2 (2*n));
  transitive_inf_leq_int i (multi_order a bound) (power 2 (2*n));
  kronecker_ket_l_sum (ket (2*n) 0) (ket n 1) (2*n) n (width (shor_circ a bound n));
  div_mod_sim_bound  (best_appr_  k a bound n)  (mod (power a i) bound)  (power 2 n) (power 2 (2*n));
  transitive_infeq (cpower (pow_inv_2 (2*n)) 2 *.  (cpower (i_to_c (greatest_factor a bound n i)) 2 *.  (min_mod_sum a bound n)))
    (proba_measure_from_scal_sum_sum_fun (path_sem (shor_circ a bound n) (kronecker (ket (2*n) 0) (ket n 1)))
       i  (best_appr_  k a bound n) (greatest_factor a bound n i) (3*n)  n  (2*n) (fun i1 j1 -> int_qft_coeff  i1 (-j1) (2*n)) (fun i1 -> i1 * (multi_order a bound) + mod i (multi_order a bound))
       (fun l -> mod (power a l) bound)  (pow_inv_2 (2*n)))
    (proba_measure (path_sem (shor_circ a bound n) (kronecker (ket (2*n) 0) (ket n 1)))
       (best_appr_  k a bound n  * (power 2 n) + mod (power a i ) bound) (3*n))
  
let lemma greatest_factor_sum (a bound n:int)(cst:complex)
      requires{0<n}
      requires{0<= a < power 2 n}
      requires{power 2 (n-1)< bound < power 2 n}
      requires{a < bound}
      requires{co_prime a bound}
      ensures{sum (to_fset 0 (multi_order a bound)) (fun i -> i_to_c (greatest_factor a bound n i) *. cst) = i_to_c (power 2 (2*n)) *. cst }
      ensures{ cpower  (i_to_c (power 2 (2*n)))2 <=. sum (to_fset 0 (multi_order a bound)) (fun i -> cpower (i_to_c (greatest_factor a bound n i))2) *. i_to_c (multi_order a bound)}
  =
  greatest_factor_sum_in_n (multi_order a bound) (2*n) cst
  
let lemma  shor_meas_i    (a bound n  k:int)
      requires{0<n}
      requires{0<= a < power 2 n}
      requires{power 2 (n-1)< bound < power 2 n}
      requires{a < bound}
      requires{co_prime a bound}
      requires{0<= k < multi_order a bound}
      ensures{cpower ( pow_inv_2 (2*n)) 2 *. (min_mod_sum a bound n) *. (sum (to_fset 0 (multi_order a bound))
                                                                           (fun  i -> if 0 <= i < multi_order a bound then cpower ( i_to_c (greatest_factor a bound n i)) 2 else c_zero))
              <=. proba_measure_cond (path_sem (shor_circ a bound n) (kronecker (ket (2*n) 0) (ket n 1)))  (3*n)
                    (fun y1 ->  div y1 (power 2 n) =  (best_appr_  k a bound n))}
  = div_mod_sim_bound_gen_r   (best_appr_  k a bound n)   (power 2 n) (power 2 (2*n))
  
let lemma  shor_meas_spec    (a bound n  :int)
      requires{0<n}
      requires{0<= a < power 2 n}
      requires{power 2 (n-1)< bound < power 2 n}
      requires{a < bound}
      requires{co_prime a bound}
      ensures{  min_mod_sum a bound n
                <=.   proba_measure_cond (path_sem (shor_circ a bound n) (kronecker (ket (2*n) 0) (ket n 1)))  (3*n)
                        (fun y1 -> exists k. 0<= k < multi_order a bound && div y1 (power 2 n) =   (best_appr_  k a bound n) )}
      ensures{ (i_to_c (euler_phi (multi_order a bound ))/. i_to_c (multi_order a bound) ) *.  (min_mod_sum a bound n)
               <=.   proba_measure_cond (path_sem (shor_circ a bound n) (kronecker (ket (2*n) 0) (ket n 1)))  (3*n)
                       (fun y1 -> exists k. 0<= k < multi_order a bound && co_prime k (multi_order a bound) && div y1 (power 2 n) =   (best_appr_  k a bound n) )}
  = 
  kronecker_ket_l_sum (ket (2*n) 0) (ket n 1) (2*n) n (width (shor_circ a bound n));
  proba_measure_sum_of_conds (to_fset 0  (multi_order a bound)) (path_sem (shor_circ a bound n) (kronecker (ket (2*n) 0) (ket n 1))) (3*n)
    (fun k i -> if 0 <= k < multi_order a bound then div i (power 2 n) =   (best_appr_  k a bound n)  else true)
    (cpower ( pow_inv_2 (2*n)) 2 *. (min_mod_sum a bound n) *. (sum (to_fset 0 (multi_order a bound))
                                                                  (fun  i -> if 0 <= i < multi_order a bound then cpower ( i_to_c (greatest_factor a bound n i)) 2else c_zero)))
    (min_mod_sum a bound n);
  proba_measure_sum_of_conds (co_primes (multi_order a bound) ) (path_sem (shor_circ a bound n) (kronecker (ket (2*n) 0) (ket n 1))) (3*n)
    (fun k i -> if 0 <= k < multi_order a bound then  div i (power 2 n) =   (best_appr_  k a bound n)  else true)
    (cpower ( pow_inv_2 (2*n)) 2 *. (min_mod_sum a bound n) *. (sum (to_fset 0 (multi_order a bound))
                                                                  (fun  i -> if 0 <= i < multi_order a bound then cpower ( i_to_c (greatest_factor a bound n i)) 2 else c_zero)))
    ((i_to_c (euler_phi (multi_order a bound ))/. i_to_c (multi_order a bound) ) *.  (min_mod_sum a bound n))

(* It is assumed by Shor in his original article, available at
 *   https://arxiv.org/abs/quant-ph/9508027, that min_mod_sum is asymptotically
 *   bounded below by 4/pi^2. Then so is 
 * proba_measure_cond (path_sem (shor_circ a bound n) (kronecker (ket (2*n) 0) (ket n 1)))  (3*n)
 *                                (fun y1 -> exists k. 0<= k < multi_order a bound && div y1 (power 2 n) =   (best_appr_  k a bound n) )
 * Furthermore,  ((euler_phi (multi_order a bound )) /. i_to_c (multi_order a bound)) is proved to be lower bounded by c_one /. log n 
 * (see, eg.Artur Ekert and Richard Jozsa 1996: Quantum computation and Shor's factoring algorithm ), making 
 * proba_measure_cond (path_sem (shor_circ a bound n) (kronecker (ket (2*n) 0) (ket n 1)))  (3*n)
 *   (fun y1 -> exists k. 0<= k < multi_order a bound && co_prime k (multi_order a bound) && div y1 (power 2 n) =   (best_appr_  k a bound n) )
 * asymptotically bounded below by 4/(log n * pi^2) *)  
  
end


