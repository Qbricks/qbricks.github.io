<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="CVC3" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.4.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC4" version="1.7" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="5" name="CVC4" version="1.7" alternative="counterexamples" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="multiplier.mlw"/>
<theory name="Multiplier" proved="true">
 <goal name="multiplier_pre&#39;vc" expl="VC for multiplier_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="multiplier_pre&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.97" steps="23010"/></proof>
  </goal>
  <goal name="multiplier_pre&#39;vc.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_pre&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.94" steps="23010"/></proof>
   </goal>
   <goal name="multiplier_pre&#39;vc.1.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.01" steps="23010"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_pre&#39;vc.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_pre&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.99" steps="23062"/></proof>
   </goal>
   <goal name="multiplier_pre&#39;vc.2.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.95" steps="23062"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_pre&#39;vc.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_pre&#39;vc.3.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.97" steps="23062"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_pre&#39;vc.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.95" steps="23062"/></proof>
  </goal>
  <goal name="multiplier_pre&#39;vc.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_pre&#39;vc.5.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.96" steps="23062"/></proof>
   </goal>
   <goal name="multiplier_pre&#39;vc.5.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.98" steps="23062"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_pre&#39;vc.6" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_pre&#39;vc.6.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.97" steps="23062"/></proof>
   </goal>
   <goal name="multiplier_pre&#39;vc.6.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.97" steps="23062"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_pre&#39;vc.7" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_pre&#39;vc.7.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.94" steps="23062"/></proof>
   </goal>
   <goal name="multiplier_pre&#39;vc.7.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.96" steps="23062"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_pre&#39;vc.8" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_pre&#39;vc.8.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.99" steps="23064"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_pre&#39;vc.9" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.96" steps="22975"/></proof>
  </goal>
  <goal name="multiplier_pre&#39;vc.10" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_pre&#39;vc.10.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.94" steps="22975"/></proof>
   </goal>
   <goal name="multiplier_pre&#39;vc.10.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.93" steps="22975"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_pre&#39;vc.11" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_pre&#39;vc.11.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.96" steps="23027"/></proof>
   </goal>
   <goal name="multiplier_pre&#39;vc.11.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.96" steps="23027"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_pre&#39;vc.12" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_pre&#39;vc.12.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.97" steps="23027"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_pre&#39;vc.13" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.96" steps="23027"/></proof>
  </goal>
  <goal name="multiplier_pre&#39;vc.14" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_pre&#39;vc.14.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.94" steps="23027"/></proof>
   </goal>
   <goal name="multiplier_pre&#39;vc.14.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.98" steps="23027"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_pre&#39;vc.15" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_pre&#39;vc.15.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.96" steps="23027"/></proof>
   </goal>
   <goal name="multiplier_pre&#39;vc.15.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.99" steps="23027"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_pre&#39;vc.16" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_pre&#39;vc.16.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.97" steps="23028"/></proof>
   </goal>
   <goal name="multiplier_pre&#39;vc.16.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.96" steps="23028"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_pre&#39;vc.17" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_pre&#39;vc.17.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.97" steps="23029"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_pre&#39;vc.18" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_pre&#39;vc.18.0" expl="variant decrease" proved="true">
   <proof prover="1"><result status="valid" time="0.97" steps="23288"/></proof>
   </goal>
   <goal name="multiplier_pre&#39;vc.18.1" expl="variant decrease" proved="true">
   <proof prover="1"><result status="valid" time="0.96" steps="23288"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_pre&#39;vc.19" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_pre&#39;vc.19.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.99" steps="23288"/></proof>
   </goal>
   <goal name="multiplier_pre&#39;vc.19.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.95" steps="23288"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_pre&#39;vc.20" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.97" steps="23343"/></proof>
  </goal>
  <goal name="multiplier_pre&#39;vc.21" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_pre&#39;vc.21.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="multiplier_pre&#39;vc.21.0.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.98" steps="23372"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="multiplier_pre&#39;vc.21.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="multiplier_pre&#39;vc.21.1.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.98" steps="23667"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_pre&#39;vc.22" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_pre&#39;vc.22.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="multiplier_pre&#39;vc.22.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ind_isum_one">
     <goal name="multiplier_pre&#39;vc.22.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H4">
      <goal name="multiplier_pre&#39;vc.22.0.0.0.0" expl="postcondition" proved="true">
      <transf name="case" proved="true" arg1="(getbv (int_to_bv i n) @ 0 = 0)
">
       <goal name="multiplier_pre&#39;vc.22.0.0.0.0.0" expl="true case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="Ensures12">
        <goal name="multiplier_pre&#39;vc.22.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="multiplier_pre&#39;vc.22.0.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
         <transf name="rewrite" proved="true" arg1="mod_inf">
          <goal name="multiplier_pre&#39;vc.22.0.0.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
          <proof prover="1"><result status="valid" time="0.98" steps="23487"/></proof>
          </goal>
          <goal name="multiplier_pre&#39;vc.22.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="1"><result status="valid" time="0.98" steps="23452"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="multiplier_pre&#39;vc.22.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <transf name="apply" proved="true" arg1="ket_l_apply" arg2="with" arg3="n">
         <goal name="multiplier_pre&#39;vc.22.0.0.0.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="2.20"/></proof>
         </goal>
         <goal name="multiplier_pre&#39;vc.22.0.0.0.0.0.1.1" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.98" steps="23434"/></proof>
         </goal>
         <goal name="multiplier_pre&#39;vc.22.0.0.0.0.0.1.2" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.97" steps="23434"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="multiplier_pre&#39;vc.22.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="2.23"/></proof>
        </goal>
        <goal name="multiplier_pre&#39;vc.22.0.0.0.0.0.3" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="2.24"/></proof>
        </goal>
        <goal name="multiplier_pre&#39;vc.22.0.0.0.0.0.4" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="2.19"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="multiplier_pre&#39;vc.22.0.0.0.0.1" expl="false case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="Ensures11">
        <goal name="multiplier_pre&#39;vc.22.0.0.0.0.1.0" expl="false case (postcondition)" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="multiplier_pre&#39;vc.22.0.0.0.0.1.0.0" expl="false case (postcondition)" proved="true">
         <transf name="apply" proved="true" arg1="kronecker_eq">
          <goal name="multiplier_pre&#39;vc.22.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.94" steps="23397"/></proof>
          </goal>
          <goal name="multiplier_pre&#39;vc.22.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="(b + (pick * ((getbv (int_to_bv i n) @ 0) * power 2 (n - 1))))" arg2="((pick * ( power 2 (n - 1)))+b)
">
           <goal name="multiplier_pre&#39;vc.22.0.0.0.0.1.0.0.1.0" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="(apply_qft (n + 1) b)" arg2="(apply_qft (n + 1) (mod1 b bound))
">
            <goal name="multiplier_pre&#39;vc.22.0.0.0.0.1.0.0.1.0.0" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="1.94"/></proof>
            </goal>
            <goal name="multiplier_pre&#39;vc.22.0.0.0.0.1.0.0.1.0.1" expl="equality hypothesis" proved="true">
            <proof prover="0"><result status="valid" time="2.07"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="multiplier_pre&#39;vc.22.0.0.0.0.1.0.0.1.1" expl="equality hypothesis" proved="true">
           <proof prover="0"><result status="valid" time="2.03"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="multiplier_pre&#39;vc.22.0.0.0.0.1.1" expl="rewrite premises" proved="true">
        <transf name="apply" proved="true" arg1="ket_l_apply" arg2="with" arg3="n">
         <goal name="multiplier_pre&#39;vc.22.0.0.0.0.1.1.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="2.06"/></proof>
         </goal>
         <goal name="multiplier_pre&#39;vc.22.0.0.0.0.1.1.1" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.89" steps="23397"/></proof>
         </goal>
         <goal name="multiplier_pre&#39;vc.22.0.0.0.0.1.1.2" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="1.01" steps="23397"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="multiplier_pre&#39;vc.22.0.0.0.0.1.2" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.97"/></proof>
        </goal>
        <goal name="multiplier_pre&#39;vc.22.0.0.0.0.1.3" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="2.01"/></proof>
        </goal>
        <goal name="multiplier_pre&#39;vc.22.0.0.0.0.1.4" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="2.38"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="multiplier_pre&#39;vc.22.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="1"><result status="valid" time="0.92" steps="23376"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="multiplier_pre&#39;vc.22.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="multiplier_pre&#39;vc.22.1.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H4">
     <goal name="multiplier_pre&#39;vc.22.1.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="path_sem_comp" arg2="with" arg3="(kronecker (ket n i)
    (kronecker
     (apply_qft (n + 1)
      (mod1
       (b
        + (pick
           * ind_isum
             (fun (k:int) -&gt;
               (getbv (int_to_bv i n) @ k) * power 2 ((n - k) - 1))
             0 ((j - 1) + 1)))
       bound))
     (ket 1 0)))">
      <goal name="multiplier_pre&#39;vc.22.1.0.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(width multiplier_pre_ind&#39;result&#39;unused&#39;unused)" arg2="(n + (n+2))">
       <goal name="multiplier_pre&#39;vc.22.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="kronecker_ket_l">
        <goal name="multiplier_pre&#39;vc.22.1.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.02" steps="23673"/></proof>
        </goal>
        <goal name="multiplier_pre&#39;vc.22.1.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.00" steps="23673"/></proof>
        </goal>
        <goal name="multiplier_pre&#39;vc.22.1.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="2.07"/></proof>
        </goal>
        <goal name="multiplier_pre&#39;vc.22.1.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="4.65" steps="1387734"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="multiplier_pre&#39;vc.22.1.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="1"><result status="valid" time="0.93" steps="23673"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="multiplier_pre&#39;vc.22.1.0.0.1" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="Ensures8">
       <goal name="multiplier_pre&#39;vc.22.1.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.90" steps="23673"/></proof>
       </goal>
       <goal name="multiplier_pre&#39;vc.22.1.0.0.1.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="1.13" steps="23673"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="multiplier_pre&#39;vc.22.1.0.0.2" expl="apply premises" proved="true">
      <transf name="case" proved="true" arg1="(getbv (int_to_bv i n) @ j = 0)
">
       <goal name="multiplier_pre&#39;vc.22.1.0.0.2.0" expl="apply premises (true case)" proved="true">
       <transf name="rewrite" proved="true" arg1="Ensures21">
        <goal name="multiplier_pre&#39;vc.22.1.0.0.2.0.0" expl="apply premises (true case)" proved="true">
        <transf name="replace" proved="true" arg1="(ind_isum
             (fun (k:int) -&gt;
               (getbv (int_to_bv i n) @ k) * power 2 ((n - k) - 1))
             0 (j + 1))" arg2="(ind_isum
             (fun (k:int) -&gt;
               (getbv (int_to_bv i n) @ k) * power 2 ((n - k) - 1))
             0 (j -1 + 1))">
         <goal name="multiplier_pre&#39;vc.22.1.0.0.2.0.0.0" expl="apply premises (true case)" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
         <goal name="multiplier_pre&#39;vc.22.1.0.0.2.0.0.1" expl="equality hypothesis" proved="true">
         <transf name="rewrite" proved="true" arg1="ind_isum_re">
          <goal name="multiplier_pre&#39;vc.22.1.0.0.2.0.0.1.0" expl="equality hypothesis" proved="true">
          <transf name="rewrite" proved="true" arg1="add_zero">
           <goal name="multiplier_pre&#39;vc.22.1.0.0.2.0.0.1.0.0" expl="equality hypothesis" proved="true">
           <proof prover="3"><result status="valid" time="4.70" steps="1390741"/></proof>
           </goal>
           <goal name="multiplier_pre&#39;vc.22.1.0.0.2.0.0.1.0.1" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="2.38"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="multiplier_pre&#39;vc.22.1.0.0.2.0.0.1.1" expl="rewrite premises" proved="true">
          <proof prover="1"><result status="valid" time="0.92" steps="23731"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="multiplier_pre&#39;vc.22.1.0.0.2.0.1" expl="rewrite premises" proved="true">
        <transf name="apply" proved="true" arg1="ket_l_apply" arg2="with" arg3="n">
         <goal name="multiplier_pre&#39;vc.22.1.0.0.2.0.1.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="2.34"/></proof>
         </goal>
         <goal name="multiplier_pre&#39;vc.22.1.0.0.2.0.1.1" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="1.02" steps="23731"/></proof>
         </goal>
         <goal name="multiplier_pre&#39;vc.22.1.0.0.2.0.1.2" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="1.01" steps="23731"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="multiplier_pre&#39;vc.22.1.0.0.2.0.2" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="2.33"/></proof>
        </goal>
        <goal name="multiplier_pre&#39;vc.22.1.0.0.2.0.3" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="2.35"/></proof>
        </goal>
        <goal name="multiplier_pre&#39;vc.22.1.0.0.2.0.4" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="2.51"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="multiplier_pre&#39;vc.22.1.0.0.2.1" expl="apply premises (false case)" proved="true">
       <transf name="rewrite" proved="true" arg1="Ensures20">
        <goal name="multiplier_pre&#39;vc.22.1.0.0.2.1.0" expl="apply premises (false case)" proved="true">
        <transf name="apply" proved="true" arg1="kronecker_eq">
         <goal name="multiplier_pre&#39;vc.22.1.0.0.2.1.0.0" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.93" steps="23692"/></proof>
         </goal>
         <goal name="multiplier_pre&#39;vc.22.1.0.0.2.1.0.1" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(b
      + (pick
         * ind_isum
           (fun (k:int) -&gt;
             (getbv (int_to_bv i n) @ k) * power 2 ((n - k) - 1))
           0 (j + 1)))" arg2="((pick * power 2 ((n - j) - 1))  +(b
      + (pick
         * ind_isum
           (fun (k:int) -&gt;
             (getbv (int_to_bv i n) @ k) * power 2 ((n - k) - 1))
           0 (j - 1+1))) )
">
          <goal name="multiplier_pre&#39;vc.22.1.0.0.2.1.0.1.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="Ensures22">
          </transf>
          </goal>
          <goal name="multiplier_pre&#39;vc.22.1.0.0.2.1.0.1.1" expl="equality hypothesis" proved="true">
          <transf name="rewrite" proved="true" arg1="ind_isum_re">
           <goal name="multiplier_pre&#39;vc.22.1.0.0.2.1.0.1.1.0" expl="equality hypothesis" proved="true">
           <transf name="assert" proved="true" arg1="(forall a p i i&#39; r r&#39;. r = r&#39; -&gt; i = i&#39; -&gt; a+ (p * (i+r)) = p*r&#39; + (a + p*i&#39;))
">
            <goal name="multiplier_pre&#39;vc.22.1.0.0.2.1.0.1.1.0.0" expl="asserted formula" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="multiplier_pre&#39;vc.22.1.0.0.2.1.0.1.1.0.0.0" expl="asserted formula" proved="true">
             <proof prover="1"><result status="valid" time="0.93" steps="23801"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="multiplier_pre&#39;vc.22.1.0.0.2.1.0.1.1.0.1" expl="equality hypothesis" proved="true">
            <transf name="apply" proved="true" arg1="h">
             <goal name="multiplier_pre&#39;vc.22.1.0.0.2.1.0.1.1.0.1.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="multiplier_pre&#39;vc.22.1.0.0.2.1.0.1.1.0.1.0.0" expl="apply premises" proved="true">
              <proof prover="0"><result status="valid" time="4.90"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="multiplier_pre&#39;vc.22.1.0.0.2.1.0.1.1.0.1.1" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="4.55" steps="1391432"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="multiplier_pre&#39;vc.22.1.0.0.2.1.0.1.1.1" expl="rewrite premises" proved="true">
           <proof prover="1"><result status="valid" time="0.98" steps="23692"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="multiplier_pre&#39;vc.22.1.0.0.2.1.1" expl="rewrite premises" proved="true">
        <transf name="apply" proved="true" arg1="ket_l_apply" arg2="with" arg3="n">
         <goal name="multiplier_pre&#39;vc.22.1.0.0.2.1.1.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="2.24"/></proof>
         </goal>
         <goal name="multiplier_pre&#39;vc.22.1.0.0.2.1.1.1" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.98" steps="23692"/></proof>
         </goal>
         <goal name="multiplier_pre&#39;vc.22.1.0.0.2.1.1.2" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.97" steps="23692"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="multiplier_pre&#39;vc.22.1.0.0.2.1.2" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.99"/></proof>
        </goal>
        <goal name="multiplier_pre&#39;vc.22.1.0.0.2.1.3" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="2.01"/></proof>
        </goal>
        <goal name="multiplier_pre&#39;vc.22.1.0.0.2.1.4" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="3.98"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="multiplier_pre&#39;vc.22.1.0.0.3" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.93" steps="23673"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_pre&#39;vc.23" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_pre&#39;vc.23.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.85" steps="22856"/></proof>
   </goal>
   <goal name="multiplier_pre&#39;vc.23.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.98" steps="22857"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_pre&#39;vc.24" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(pick * i)" arg2="(pick
           * ind_isum
             (fun (k:int) -&gt;
               (getbv (int_to_bv i n) @ k) * power 2 ((n - k) - 1))
             0 ((n - 1) + 1))">
   <goal name="multiplier_pre&#39;vc.24.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="Ensures">
    <goal name="multiplier_pre&#39;vc.24.0.0" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="1.00" steps="22913"/></proof>
    </goal>
    <goal name="multiplier_pre&#39;vc.24.0.1" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="0.94" steps="22913"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="multiplier_pre&#39;vc.24.1" expl="equality hypothesis" proved="true">
   <transf name="replace" proved="true" arg1="(pick * i)" arg2="(pick * bv_to_int (int_to_bv i n))
">
    <goal name="multiplier_pre&#39;vc.24.1.0" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
     <goal name="multiplier_pre&#39;vc.24.1.0.0" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="mult_eq">
      <goal name="multiplier_pre&#39;vc.24.1.0.0.0" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="1.01" steps="22913"/></proof>
      </goal>
      <goal name="multiplier_pre&#39;vc.24.1.0.0.1" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
       <goal name="multiplier_pre&#39;vc.24.1.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.85"/></proof>
       </goal>
       <goal name="multiplier_pre&#39;vc.24.1.0.0.1.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.96" steps="22913"/></proof>
       </goal>
       <goal name="multiplier_pre&#39;vc.24.1.0.0.1.2" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="2.10"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="multiplier_pre&#39;vc.24.1.1" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="1.86"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_pre&#39;vc.25" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.88" steps="22909"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="multiplier_qft_pre&#39;vc" expl="VC for multiplier_qft_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="multiplier_qft_pre&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.87" steps="22857"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_qft_pre&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.86" steps="22856"/></proof>
   </goal>
   <goal name="multiplier_qft_pre&#39;vc.1.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.87" steps="22857"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_qft_pre&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.87" steps="22857"/></proof>
   </goal>
   <goal name="multiplier_qft_pre&#39;vc.2.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.90" steps="22857"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.92" steps="22909"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.89" steps="22909"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.90" steps="22909"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.6" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.90" steps="22909"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.88" steps="23013"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.8" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="multiplier_qft_pre&#39;vc.8.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="multiplier_qft_pre&#39;vc.8.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="multiplier_qft_pre&#39;vc.8.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="apply_function_in_qft_basis_gen&#39;spec" arg2="with" arg3="(fun h -&gt; (mod1 (h + (pick * i)) bound))">
      <goal name="multiplier_qft_pre&#39;vc.8.0.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
      </transf>
      </goal>
      <goal name="multiplier_qft_pre&#39;vc.8.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="1"><result status="valid" time="1.24" steps="31366"/></proof>
      </goal>
      <goal name="multiplier_qft_pre&#39;vc.8.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="1"><result status="valid" time="1.24" steps="31366"/></proof>
      </goal>
      <goal name="multiplier_qft_pre&#39;vc.8.0.0.0.3" expl="rewrite premises" proved="true">
      <proof prover="1"><result status="valid" time="1.22" steps="31366"/></proof>
      </goal>
      <goal name="multiplier_qft_pre&#39;vc.8.0.0.0.4" expl="rewrite premises" proved="true">
      <proof prover="1"><result status="valid" time="1.26" steps="31366"/></proof>
      </goal>
      <goal name="multiplier_qft_pre&#39;vc.8.0.0.0.5" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="5.26" steps="1585769"/></proof>
      </goal>
      <goal name="multiplier_qft_pre&#39;vc.8.0.0.0.6" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="5.22" steps="1582910"/></proof>
      </goal>
      <goal name="multiplier_qft_pre&#39;vc.8.0.0.0.7" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="4.17" steps="1405731"/></proof>
      </goal>
      <goal name="multiplier_qft_pre&#39;vc.8.0.0.0.8" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="5.00" steps="1609450"/></proof>
      </goal>
      <goal name="multiplier_qft_pre&#39;vc.8.0.0.0.9" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="multiplier_qft_pre&#39;vc.8.0.0.0.9.0" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="7.01"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.9" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(kronecker (ket 1 0) (ket n b))" arg2="(ket (n+1) b)">
   <goal name="multiplier_qft_pre&#39;vc.9.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="3.62"/></proof>
   </goal>
   <goal name="multiplier_qft_pre&#39;vc.9.1" expl="equality hypothesis" proved="true">
   <proof prover="0"><result status="valid" time="2.22"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="multiplier_qft_swap&#39;vc" expl="VC for multiplier_qft_swap" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="multiplier_qft_swap&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.94" steps="22857"/></proof>
  </goal>
  <goal name="multiplier_qft_swap&#39;vc.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_qft_swap&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.90" steps="22857"/></proof>
   </goal>
   <goal name="multiplier_qft_swap&#39;vc.1.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.88" steps="22857"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_swap&#39;vc.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_qft_swap&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.95" steps="22856"/></proof>
   </goal>
   <goal name="multiplier_qft_swap&#39;vc.2.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.90" steps="22857"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_swap&#39;vc.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_qft_swap&#39;vc.3.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.09" steps="22857"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_swap&#39;vc.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_qft_swap&#39;vc.4.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.91" steps="22857"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_swap&#39;vc.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_qft_swap&#39;vc.5.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.89" steps="22857"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_swap&#39;vc.6" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_qft_swap&#39;vc.6.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.91" steps="22892"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_swap&#39;vc.7" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.91" steps="22962"/></proof>
  </goal>
  <goal name="multiplier_qft_swap&#39;vc.8" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_qft_swap&#39;vc.8.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.91" steps="22962"/></proof>
   </goal>
   <goal name="multiplier_qft_swap&#39;vc.8.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.92" steps="22962"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_swap&#39;vc.9" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_qft_swap&#39;vc.9.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.17" steps="22962"/></proof>
   </goal>
   <goal name="multiplier_qft_swap&#39;vc.9.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.18" steps="22962"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_swap&#39;vc.10" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.30" steps="23015"/></proof>
  </goal>
  <goal name="multiplier_qft_swap&#39;vc.11" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="1.23" steps="23271"/></proof>
  </goal>
  <goal name="multiplier_qft_swap&#39;vc.12" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="multiplier_qft_swap&#39;vc.12.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="multiplier_qft_swap&#39;vc.12.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="path_sem_comp" arg2="with" arg3="( kronecker (ket n i)  (kronecker(kronecker (ket 1 0) (ket n (mod1   (pick * i) bound))) (ket 1 0)))
">
     <goal name="multiplier_qft_swap&#39;vc.12.0.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(width (multiplier_qft_pre pick bound n))" arg2="(n+ (n+1+1))">
      <goal name="multiplier_qft_swap&#39;vc.12.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="kronecker_ket_l">
       <goal name="multiplier_qft_swap&#39;vc.12.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="1.65" steps="31715"/></proof>
       </goal>
       <goal name="multiplier_qft_swap&#39;vc.12.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="1.61" steps="31715"/></proof>
       </goal>
       <goal name="multiplier_qft_swap&#39;vc.12.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="6.52"/></proof>
       </goal>
       <goal name="multiplier_qft_swap&#39;vc.12.0.0.0.0.3" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="kronecker_ket_l">
        <goal name="multiplier_qft_swap&#39;vc.12.0.0.0.0.3.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.35" steps="31716"/></proof>
        </goal>
        <goal name="multiplier_qft_swap&#39;vc.12.0.0.0.0.3.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.39" steps="31715"/></proof>
        </goal>
        <goal name="multiplier_qft_swap&#39;vc.12.0.0.0.0.3.2" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="4.14" steps="1279259"/></proof>
        </goal>
        <goal name="multiplier_qft_swap&#39;vc.12.0.0.0.0.3.3" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="6.88"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="multiplier_qft_swap&#39;vc.12.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="1"><result status="valid" time="1.56" steps="31715"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="multiplier_qft_swap&#39;vc.12.0.0.1" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures9">
      <goal name="multiplier_qft_swap&#39;vc.12.0.0.1.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="kronecker_eq">
       <goal name="multiplier_qft_swap&#39;vc.12.0.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="1.31" steps="31715"/></proof>
       </goal>
       <goal name="multiplier_qft_swap&#39;vc.12.0.0.1.0.1" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="kronecker_eq">
        <goal name="multiplier_qft_swap&#39;vc.12.0.0.1.0.1.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="kronecker_kets">
         <goal name="multiplier_qft_swap&#39;vc.12.0.0.1.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="1.34" steps="31762"/></proof>
         </goal>
         <goal name="multiplier_qft_swap&#39;vc.12.0.0.1.0.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="1.35" steps="31715"/></proof>
         </goal>
         <goal name="multiplier_qft_swap&#39;vc.12.0.0.1.0.1.0.2" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="1.33" steps="31715"/></proof>
         </goal>
         <goal name="multiplier_qft_swap&#39;vc.12.0.0.1.0.1.0.3" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="3.15" steps="1126423"/></proof>
         </goal>
         <goal name="multiplier_qft_swap&#39;vc.12.0.0.1.0.1.0.4" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="2.74" steps="1111728"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="multiplier_qft_swap&#39;vc.12.0.0.1.0.1.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.33" steps="31715"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="multiplier_qft_swap&#39;vc.12.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="1"><result status="valid" time="1.59" steps="31715"/></proof>
      </goal>
      <goal name="multiplier_qft_swap&#39;vc.12.0.0.1.2" expl="rewrite premises" proved="true">
      <proof prover="1"><result status="valid" time="1.31" steps="31715"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="multiplier_qft_swap&#39;vc.12.0.0.2" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures14">
      <goal name="multiplier_qft_swap&#39;vc.12.0.0.2.0" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="1.30" steps="31715"/></proof>
      </goal>
      <goal name="multiplier_qft_swap&#39;vc.12.0.0.2.1" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="3.14" steps="1126688"/></proof>
      </goal>
      <goal name="multiplier_qft_swap&#39;vc.12.0.0.2.2" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="4.06" steps="1289869"/></proof>
      </goal>
      <goal name="multiplier_qft_swap&#39;vc.12.0.0.2.3" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="3.94" steps="1286821"/></proof>
      </goal>
      <goal name="multiplier_qft_swap&#39;vc.12.0.0.2.4" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="5.56"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="multiplier_qft_swap&#39;vc.12.0.0.3" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.30" steps="31715"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="restricted_modular_multiplier&#39;vc" expl="VC for restricted_modular_multiplier" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="restricted_modular_multiplier&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="restricted_modular_multiplier&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.83"/></proof>
   </goal>
   <goal name="restricted_modular_multiplier&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.96" steps="22906"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="restricted_modular_multiplier&#39;vc.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="restricted_modular_multiplier&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.94" steps="22907"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="restricted_modular_multiplier&#39;vc.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.96" steps="22996"/></proof>
  </goal>
  <goal name="restricted_modular_multiplier&#39;vc.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.93" steps="22962"/></proof>
  </goal>
  <goal name="restricted_modular_multiplier&#39;vc.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="restricted_modular_multiplier&#39;vc.4.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.90"/></proof>
   </goal>
   <goal name="restricted_modular_multiplier&#39;vc.4.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.16"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="restricted_modular_multiplier&#39;vc.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="restricted_modular_multiplier&#39;vc.5.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.98" steps="22964"/></proof>
   </goal>
   <goal name="restricted_modular_multiplier&#39;vc.5.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.98" steps="22964"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="restricted_modular_multiplier&#39;vc.6" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.98" steps="23013"/></proof>
  </goal>
  <goal name="restricted_modular_multiplier&#39;vc.7" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="restricted_modular_multiplier&#39;vc.7.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.98" steps="23013"/></proof>
   </goal>
   <goal name="restricted_modular_multiplier&#39;vc.7.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.99" steps="23013"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="restricted_modular_multiplier&#39;vc.8" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="restricted_modular_multiplier&#39;vc.8.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.98" steps="23013"/></proof>
   </goal>
   <goal name="restricted_modular_multiplier&#39;vc.8.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.97" steps="23013"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="restricted_modular_multiplier&#39;vc.9" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.99" steps="23066"/></proof>
  </goal>
  <goal name="restricted_modular_multiplier&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.98" steps="23320"/></proof>
  </goal>
  <goal name="restricted_modular_multiplier&#39;vc.11" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="restricted_modular_multiplier&#39;vc.11.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="restricted_modular_multiplier&#39;vc.11.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="path_sem_comp" arg2="with" arg3="(kronecker (ket n (mod1   (pick * i) bound))  (kronecker(kronecker (ket 1 0) (ket n i))(ket 1 0)) )">
     <goal name="restricted_modular_multiplier&#39;vc.11.0.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="4.46"/></proof>
     </goal>
     <goal name="restricted_modular_multiplier&#39;vc.11.0.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="4.78"/></proof>
     </goal>
     <goal name="restricted_modular_multiplier&#39;vc.11.0.0.2" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures10">
      <goal name="restricted_modular_multiplier&#39;vc.11.0.0.2.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(mod1
      (i
       + (mod1 (- modular_inverse pick bound) bound * mod1 (pick * i) bound))
      bound)" arg2="0">
       <goal name="restricted_modular_multiplier&#39;vc.11.0.0.2.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
       </transf>
       </goal>
       <goal name="restricted_modular_multiplier&#39;vc.11.0.0.2.0.1" expl="equality hypothesis" proved="true">
       <transf name="replace" proved="true" arg1="(mod1
  (i + (mod1 (- modular_inverse pick bound) bound * mod1 (pick * i) bound))
  bound)" arg2="(mod1
  (mod1 i bound + mod1 ((mod1 (- modular_inverse pick bound) bound * mod1 (pick * i) bound))
  bound)bound)
">
        <goal name="restricted_modular_multiplier&#39;vc.11.0.0.2.0.1.0" expl="equality hypothesis" proved="true">
        <transf name="rewrite" proved="true" arg1="mod_mod_mult">
         <goal name="restricted_modular_multiplier&#39;vc.11.0.0.2.0.1.0.0" expl="equality hypothesis" proved="true">
         <transf name="assert" proved="true" arg1="(forall a b c. -a * (b*c) = a*b* -c)
">
          <goal name="restricted_modular_multiplier&#39;vc.11.0.0.2.0.1.0.0.0" expl="asserted formula" proved="true">
          <proof prover="1"><result status="valid" time="1.32" steps="31853"/></proof>
          </goal>
          <goal name="restricted_modular_multiplier&#39;vc.11.0.0.2.0.1.0.0.1" expl="equality hypothesis" proved="true">
          <transf name="rewrite" proved="true" arg1="h">
           <goal name="restricted_modular_multiplier&#39;vc.11.0.0.2.0.1.0.0.1.0" expl="equality hypothesis" proved="true">
           <transf name="rewrite" proved="true" arg1="mod_mod_mult_rev">
            <goal name="restricted_modular_multiplier&#39;vc.11.0.0.2.0.1.0.0.1.0.0" expl="equality hypothesis" proved="true">
            <transf name="rewrite" proved="true" arg1="one_mult">
             <goal name="restricted_modular_multiplier&#39;vc.11.0.0.2.0.1.0.0.1.0.0.0" expl="equality hypothesis" proved="true">
             <proof prover="5"><result status="valid" time="3.29" steps="1477951"/></proof>
             </goal>
             <goal name="restricted_modular_multiplier&#39;vc.11.0.0.2.0.1.0.0.1.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="1"><result status="valid" time="1.29" steps="31852"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="restricted_modular_multiplier&#39;vc.11.0.0.2.0.1.0.0.1.0.1" expl="rewrite premises" proved="true">
            <proof prover="1"><result status="valid" time="1.32" steps="31853"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="restricted_modular_multiplier&#39;vc.11.0.0.2.0.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="1.31" steps="31853"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="restricted_modular_multiplier&#39;vc.11.0.0.2.0.1.1" expl="equality hypothesis" proved="true">
        <transf name="rewrite" proved="true" arg1="add_mod_left">
         <goal name="restricted_modular_multiplier&#39;vc.11.0.0.2.0.1.1.0" expl="equality hypothesis" proved="true">
         <transf name="rewrite" proved="true" arg1="add_mod_right">
          <goal name="restricted_modular_multiplier&#39;vc.11.0.0.2.0.1.1.0.0" expl="equality hypothesis" proved="true">
          <proof prover="1"><result status="valid" time="1.32" steps="31852"/></proof>
          </goal>
          <goal name="restricted_modular_multiplier&#39;vc.11.0.0.2.0.1.1.0.1" expl="rewrite premises" proved="true">
          <proof prover="1"><result status="valid" time="1.36" steps="31853"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="restricted_modular_multiplier&#39;vc.11.0.0.2.0.1.1.1" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="1.33" steps="31853"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="restricted_modular_multiplier&#39;vc.11.0.0.2.1" expl="rewrite premises" proved="true">
      <proof prover="1"><result status="valid" time="1.33" steps="31852"/></proof>
      </goal>
      <goal name="restricted_modular_multiplier&#39;vc.11.0.0.2.2" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="3.04" steps="1115339"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="restricted_modular_multiplier&#39;vc.11.0.0.3" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.32" steps="31852"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="restricted_modular_multiplier&#39;vc.12" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ket (n + 2) 0)" arg2="(kronecker (ket (n + 1) 0) (ket 1 0))">
   <goal name="restricted_modular_multiplier&#39;vc.12.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures">
    <goal name="restricted_modular_multiplier&#39;vc.12.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(ket (n + 1) 0)" arg2="(kronecker (ket 1 0) (ket n 0))">
     <goal name="restricted_modular_multiplier&#39;vc.12.0.0.0" expl="postcondition" proved="true">
     <proof prover="1"><result status="valid" time="0.99" steps="23322"/></proof>
     </goal>
     <goal name="restricted_modular_multiplier&#39;vc.12.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="0"><result status="valid" time="2.35"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="restricted_modular_multiplier&#39;vc.12.0.1" expl="rewrite premises" proved="true">
    <proof prover="1"><result status="valid" time="0.98" steps="23322"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="restricted_modular_multiplier&#39;vc.12.1" expl="equality hypothesis" proved="true">
   <proof prover="3"><result status="valid" time="4.46" steps="1366677"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="check_first_bit_is_one_for_multiplier&#39;vc" expl="VC for check_first_bit_is_one_for_multiplier" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="check_first_bit_is_one_for_multiplier&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.96" steps="22852"/></proof>
  </goal>
  <goal name="check_first_bit_is_one_for_multiplier&#39;vc.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.20" steps="22956"/></proof>
  </goal>
  <goal name="check_first_bit_is_one_for_multiplier&#39;vc.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="check_first_bit_is_one_for_multiplier&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.15" steps="22957"/></proof>
   </goal>
   <goal name="check_first_bit_is_one_for_multiplier&#39;vc.2.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.14" steps="22957"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="check_first_bit_is_one_for_multiplier&#39;vc.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="check_first_bit_is_one_for_multiplier&#39;vc.3.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.90" steps="22957"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="check_first_bit_is_one_for_multiplier&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.90" steps="23112"/></proof>
  </goal>
  <goal name="check_first_bit_is_one_for_multiplier&#39;vc.5" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="check_first_bit_is_one_for_multiplier&#39;vc.5.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="check_first_bit_is_one_for_multiplier&#39;vc.5.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="insert_qbits_path_sem_basis">
     <goal name="check_first_bit_is_one_for_multiplier&#39;vc.5.0.0.0" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.44" steps="31502"/></proof>
     </goal>
     <goal name="check_first_bit_is_one_for_multiplier&#39;vc.5.0.0.1" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.49" steps="31524"/></proof>
     </goal>
     <goal name="check_first_bit_is_one_for_multiplier&#39;vc.5.0.0.2" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.49" steps="31502"/></proof>
     </goal>
     <goal name="check_first_bit_is_one_for_multiplier&#39;vc.5.0.0.3" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="5.29"/></proof>
     </goal>
     <goal name="check_first_bit_is_one_for_multiplier&#39;vc.5.0.0.4" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="5.40"/></proof>
     </goal>
     <goal name="check_first_bit_is_one_for_multiplier&#39;vc.5.0.0.5" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="4.78"/></proof>
     </goal>
     <goal name="check_first_bit_is_one_for_multiplier&#39;vc.5.0.0.6" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="2.99" steps="1045887"/></proof>
     </goal>
     <goal name="check_first_bit_is_one_for_multiplier&#39;vc.5.0.0.7" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="3.92" steps="1193637"/></proof>
     </goal>
     <goal name="check_first_bit_is_one_for_multiplier&#39;vc.5.0.0.8" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="3.85" steps="1193682"/></proof>
     </goal>
     <goal name="check_first_bit_is_one_for_multiplier&#39;vc.5.0.0.9" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="3.07" steps="1045881"/></proof>
     </goal>
     <goal name="check_first_bit_is_one_for_multiplier&#39;vc.5.0.0.10" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="3.04" steps="1045881"/></proof>
     </goal>
     <goal name="check_first_bit_is_one_for_multiplier&#39;vc.5.0.0.11" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="5.37"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="check_first_bit_is_one_for_multiplier&#39;vc.6" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="check_first_bit_is_one_for_multiplier&#39;vc.6.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="check_first_bit_is_one_for_multiplier&#39;vc.6.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="insert_qbits_path_sem_basis">
     <goal name="check_first_bit_is_one_for_multiplier&#39;vc.6.0.0.0" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.44" steps="31502"/></proof>
     </goal>
     <goal name="check_first_bit_is_one_for_multiplier&#39;vc.6.0.0.1" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.23" steps="31524"/></proof>
     </goal>
     <goal name="check_first_bit_is_one_for_multiplier&#39;vc.6.0.0.2" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.52" steps="31502"/></proof>
     </goal>
     <goal name="check_first_bit_is_one_for_multiplier&#39;vc.6.0.0.3" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="5.50"/></proof>
     </goal>
     <goal name="check_first_bit_is_one_for_multiplier&#39;vc.6.0.0.4" expl="apply premises" proved="true">
     <proof prover="5"><result status="valid" time="3.19" steps="1205422"/></proof>
     </goal>
     <goal name="check_first_bit_is_one_for_multiplier&#39;vc.6.0.0.5" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="5.24"/></proof>
     </goal>
     <goal name="check_first_bit_is_one_for_multiplier&#39;vc.6.0.0.6" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="2.60" steps="1046055"/></proof>
     </goal>
     <goal name="check_first_bit_is_one_for_multiplier&#39;vc.6.0.0.7" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="5.64"/></proof>
     </goal>
     <goal name="check_first_bit_is_one_for_multiplier&#39;vc.6.0.0.8" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="5.60"/></proof>
     </goal>
     <goal name="check_first_bit_is_one_for_multiplier&#39;vc.6.0.0.9" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="5.63"/></proof>
     </goal>
     <goal name="check_first_bit_is_one_for_multiplier&#39;vc.6.0.0.10" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="5.69"/></proof>
     </goal>
     <goal name="check_first_bit_is_one_for_multiplier&#39;vc.6.0.0.11" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="5.62"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="check_first_bit_is_one_for_multiplier&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="1.16" steps="23112"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="check_order_pre&#39;vc" expl="VC for check_order_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="check_order_pre&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.91" steps="22855"/></proof>
  </goal>
  <goal name="check_order_pre&#39;vc.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.11" steps="22958"/></proof>
  </goal>
  <goal name="check_order_pre&#39;vc.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.11" steps="22958"/></proof>
  </goal>
  <goal name="check_order_pre&#39;vc.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.12" steps="23061"/></proof>
  </goal>
  <goal name="check_order_pre&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="1.14" steps="23316"/></proof>
  </goal>
  <goal name="check_order_pre&#39;vc.5" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="check_order_pre&#39;vc.5.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="check_order_pre&#39;vc.5.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="path_sem_comp" arg2="with" arg3="(kronecker  (ket (n+1) (i-bound))  (kronecker(ket (n+2) 0)(ket 1 0)))">
     <goal name="check_order_pre&#39;vc.5.0.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(width (place_substract_in_comput_basis bound n ((2 * n) + 4)))" arg2="(n+ 1 +(n+2+1))">
      <goal name="check_order_pre&#39;vc.5.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="kronecker_ket_l">
       <goal name="check_order_pre&#39;vc.5.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="1.49" steps="31780"/></proof>
       </goal>
       <goal name="check_order_pre&#39;vc.5.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="1.52" steps="31780"/></proof>
       </goal>
       <goal name="check_order_pre&#39;vc.5.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="5.53"/></proof>
       </goal>
       <goal name="check_order_pre&#39;vc.5.0.0.0.0.3" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="kronecker_ket_l">
        <goal name="check_order_pre&#39;vc.5.0.0.0.0.3.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.24" steps="31780"/></proof>
        </goal>
        <goal name="check_order_pre&#39;vc.5.0.0.0.0.3.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.47" steps="31780"/></proof>
        </goal>
        <goal name="check_order_pre&#39;vc.5.0.0.0.0.3.2" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="5.90"/></proof>
        </goal>
        <goal name="check_order_pre&#39;vc.5.0.0.0.0.3.3" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="5.71"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="check_order_pre&#39;vc.5.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="1"><result status="valid" time="1.31" steps="31780"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="check_order_pre&#39;vc.5.0.0.1" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures10">
      <goal name="check_order_pre&#39;vc.5.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="5.96"/></proof>
      </goal>
      <goal name="check_order_pre&#39;vc.5.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="4.15" steps="1283183"/></proof>
      </goal>
      <goal name="check_order_pre&#39;vc.5.0.0.1.2" expl="rewrite premises" proved="true">
      <transf name="replace" proved="true" arg1="((((2 * n) + 4) - n) - 1)" arg2="(n+2+1)">
       <goal name="check_order_pre&#39;vc.5.0.0.1.2.0" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="8.36"/></proof>
       </goal>
       <goal name="check_order_pre&#39;vc.5.0.0.1.2.1" expl="equality hypothesis" proved="true">
       <proof prover="1"><result status="valid" time="1.33" steps="31780"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="check_order_pre&#39;vc.5.0.0.2" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="5.59"/></proof>
     </goal>
     <goal name="check_order_pre&#39;vc.5.0.0.3" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.40" steps="31780"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="check_order_pre&#39;vc.6" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="check_order_pre&#39;vc.6.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="check_order_pre&#39;vc.6.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="path_sem_comp" arg2="with" arg3="(kronecker  (ket (n+1) (mod1 (i-bound) (power 2 (n+1))))  (kronecker(ket (n+2) 0)(ket 1 0)))
">
     <goal name="check_order_pre&#39;vc.6.0.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(width (place_substract_in_comput_basis bound n ((2 * n) + 4)))" arg2="(n+ 1 +(n+2+1))">
      <goal name="check_order_pre&#39;vc.6.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="kronecker_ket_l">
       <goal name="check_order_pre&#39;vc.6.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="1.38" steps="31780"/></proof>
       </goal>
       <goal name="check_order_pre&#39;vc.6.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="1.39" steps="31780"/></proof>
       </goal>
       <goal name="check_order_pre&#39;vc.6.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="5.48"/></proof>
       </goal>
       <goal name="check_order_pre&#39;vc.6.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="8.91"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="check_order_pre&#39;vc.6.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="1"><result status="valid" time="1.31" steps="31780"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="check_order_pre&#39;vc.6.0.0.1" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures11">
      <goal name="check_order_pre&#39;vc.6.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="1.31" steps="31780"/></proof>
      </goal>
      <goal name="check_order_pre&#39;vc.6.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="5.16"/></proof>
      </goal>
      <goal name="check_order_pre&#39;vc.6.0.0.1.2" expl="rewrite premises" proved="true">
      <transf name="replace" proved="true" arg1="((((2 * n) + 4) - n) - 1)" arg2="(n+2+1)">
       <goal name="check_order_pre&#39;vc.6.0.0.1.2.0" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="kronecker_ket_l">
        <goal name="check_order_pre&#39;vc.6.0.0.1.2.0.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.32" steps="31780"/></proof>
        </goal>
        <goal name="check_order_pre&#39;vc.6.0.0.1.2.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.31" steps="31780"/></proof>
        </goal>
        <goal name="check_order_pre&#39;vc.6.0.0.1.2.0.2" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="6.04"/></proof>
        </goal>
        <goal name="check_order_pre&#39;vc.6.0.0.1.2.0.3" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="5.79"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="check_order_pre&#39;vc.6.0.0.1.2.1" expl="equality hypothesis" proved="true">
       <proof prover="1"><result status="valid" time="1.33" steps="31780"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="check_order_pre&#39;vc.6.0.0.2" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="Ensures14">
      <goal name="check_order_pre&#39;vc.6.0.0.2.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="check_order_pre&#39;vc.6.0.0.2.0.0" expl="apply premises" proved="true">
       <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="(i-bound),power 2 (n+1), (-1),(power 2 (n + 1) + (i - bound))">
        <goal name="check_order_pre&#39;vc.6.0.0.2.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="5.84"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="check_order_pre&#39;vc.6.0.0.2.0.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="5.66"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="check_order_pre&#39;vc.6.0.0.3" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.37" steps="31780"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="check_order_pre&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="4.06" steps="1341714"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="check_order&#39;vc" expl="VC for check_order" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="check_order&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.04" steps="22855"/></proof>
  </goal>
  <goal name="check_order&#39;vc.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.06" steps="22855"/></proof>
  </goal>
  <goal name="check_order&#39;vc.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.00" steps="22958"/></proof>
  </goal>
  <goal name="check_order&#39;vc.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="check_order&#39;vc.3.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.16" steps="22958"/></proof>
   </goal>
   <goal name="check_order&#39;vc.3.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.97" steps="22958"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="check_order&#39;vc.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.98" steps="23061"/></proof>
  </goal>
  <goal name="check_order&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="1.00" steps="23316"/></proof>
  </goal>
  <goal name="check_order&#39;vc.6" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="check_order&#39;vc.6.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="check_order&#39;vc.6.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="path_sem_comp" arg2="with" arg3="(kronecker  (ket (n+1) (i-bound))  (kronecker(ket (n+2) 0)(ket 1 0)))">
     <goal name="check_order&#39;vc.6.0.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(width (check_order_pre n bound))" arg2="(n+1+ (n+2+1))">
      <goal name="check_order&#39;vc.6.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="kronecker_ket_l">
       <goal name="check_order&#39;vc.6.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="1.58" steps="31780"/></proof>
       </goal>
       <goal name="check_order&#39;vc.6.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="1.56" steps="31780"/></proof>
       </goal>
       <goal name="check_order&#39;vc.6.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="5.25"/></proof>
       </goal>
       <goal name="check_order&#39;vc.6.0.0.0.0.3" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="kronecker_ket_l">
        <goal name="check_order&#39;vc.6.0.0.0.0.3.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.49" steps="31780"/></proof>
        </goal>
        <goal name="check_order&#39;vc.6.0.0.0.0.3.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.31" steps="31780"/></proof>
        </goal>
        <goal name="check_order&#39;vc.6.0.0.0.0.3.2" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="4.99"/></proof>
        </goal>
        <goal name="check_order&#39;vc.6.0.0.0.0.3.3" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="5.16"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="check_order&#39;vc.6.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="1"><result status="valid" time="1.45" steps="31780"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="check_order&#39;vc.6.0.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="5.72"/></proof>
     </goal>
     <goal name="check_order&#39;vc.6.0.0.2" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures14">
      <goal name="check_order&#39;vc.6.0.0.2.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="6.53"/></proof>
      </goal>
      <goal name="check_order&#39;vc.6.0.0.2.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="5.45"/></proof>
      </goal>
      <goal name="check_order&#39;vc.6.0.0.2.2" expl="rewrite premises" proved="true">
      <transf name="replace" proved="true" arg1="((((2 * n) + 4) - n) - 1)" arg2="(n+2+1)">
       <goal name="check_order&#39;vc.6.0.0.2.2.0" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="kronecker_ket_l">
        <goal name="check_order&#39;vc.6.0.0.2.2.0.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.45" steps="31780"/></proof>
        </goal>
        <goal name="check_order&#39;vc.6.0.0.2.2.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.50" steps="31780"/></proof>
        </goal>
        <goal name="check_order&#39;vc.6.0.0.2.2.0.2" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="5.37"/></proof>
        </goal>
        <goal name="check_order&#39;vc.6.0.0.2.2.0.3" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="5.34"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="check_order&#39;vc.6.0.0.2.2.1" expl="equality hypothesis" proved="true">
       <proof prover="1"><result status="valid" time="1.46" steps="31780"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="check_order&#39;vc.6.0.0.3" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.47" steps="31780"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="check_order&#39;vc.7" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="check_order&#39;vc.7.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="check_order&#39;vc.7.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="path_sem_comp" arg2="with" arg3="(kronecker  (ket (n+1) (mod1 (i-bound) (power 2 (n+1))))  (kronecker(ket (n+2) 0)(ket 1 1)))
">
     <goal name="check_order&#39;vc.7.0.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(width (check_order_pre n bound))" arg2="(n+1+ (n+2+1))">
      <goal name="check_order&#39;vc.7.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="kronecker_ket_l">
       <goal name="check_order&#39;vc.7.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="1.44" steps="31780"/></proof>
       </goal>
       <goal name="check_order&#39;vc.7.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="1.50" steps="31780"/></proof>
       </goal>
       <goal name="check_order&#39;vc.7.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="4.65"/></proof>
       </goal>
       <goal name="check_order&#39;vc.7.0.0.0.0.3" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="kronecker_ket_l">
        <goal name="check_order&#39;vc.7.0.0.0.0.3.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.44" steps="31780"/></proof>
        </goal>
        <goal name="check_order&#39;vc.7.0.0.0.0.3.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.44" steps="31780"/></proof>
        </goal>
        <goal name="check_order&#39;vc.7.0.0.0.0.3.2" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="5.54"/></proof>
        </goal>
        <goal name="check_order&#39;vc.7.0.0.0.0.3.3" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="5.24"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="check_order&#39;vc.7.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="1"><result status="valid" time="1.48" steps="31780"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="check_order&#39;vc.7.0.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="5.86"/></proof>
     </goal>
     <goal name="check_order&#39;vc.7.0.0.2" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures15">
      <goal name="check_order&#39;vc.7.0.0.2.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(mod1 (i - bound) (power 2 (n + 1)))" arg2="(power 2 (n + 1) + (i-bound) )">
       <goal name="check_order&#39;vc.7.0.0.2.0.0" expl="apply premises" proved="true">
       <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="((power 2 (n + 1) + (i - bound)) + bound),power 2 (n+1), 1,i">
        <goal name="check_order&#39;vc.7.0.0.2.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="5.37"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="check_order&#39;vc.7.0.0.2.0.1" expl="equality hypothesis" proved="true">
       <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="((i - bound)) ,power 2 (n+1), (-1),(power 2 (n + 1) + (i - bound))">
        <goal name="check_order&#39;vc.7.0.0.2.0.1.0" expl="equality hypothesis" proved="true">
        <proof prover="0"><result status="valid" time="5.63"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="check_order&#39;vc.7.0.0.2.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="5.45"/></proof>
      </goal>
      <goal name="check_order&#39;vc.7.0.0.2.2" expl="rewrite premises" proved="true">
      <transf name="replace" proved="true" arg1="((((2 * n) + 4) - n) - 1)" arg2="(n+2+1)">
       <goal name="check_order&#39;vc.7.0.0.2.2.0" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="kronecker_ket_l">
        <goal name="check_order&#39;vc.7.0.0.2.2.0.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.54" steps="31780"/></proof>
        </goal>
        <goal name="check_order&#39;vc.7.0.0.2.2.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.51" steps="31780"/></proof>
        </goal>
        <goal name="check_order&#39;vc.7.0.0.2.2.0.2" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="5.99"/></proof>
        </goal>
        <goal name="check_order&#39;vc.7.0.0.2.2.0.3" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="5.79"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="check_order&#39;vc.7.0.0.2.2.1" expl="equality hypothesis" proved="true">
       <proof prover="1"><result status="valid" time="1.45" steps="31780"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="check_order&#39;vc.7.0.0.3" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.46" steps="31780"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="check_order&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="4.10" steps="1342588"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="uncheck_order&#39;vc" expl="VC for uncheck_order" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="uncheck_order&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.03" steps="22855"/></proof>
  </goal>
  <goal name="uncheck_order&#39;vc.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="uncheck_order&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.08" steps="22855"/></proof>
   </goal>
   <goal name="uncheck_order&#39;vc.1.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.04" steps="22855"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="uncheck_order&#39;vc.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="2.47" steps="1028789"/></proof>
  </goal>
  <goal name="uncheck_order&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="1.05" steps="23110"/></proof>
  </goal>
  <goal name="uncheck_order&#39;vc.4" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="uncheck_order&#39;vc.4.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="Ensures2">
    <goal name="uncheck_order&#39;vc.4.0.0" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(width (check_order n bound))" arg2="(n+1 + (n+2+1))">
     <goal name="uncheck_order&#39;vc.4.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="kronecker_ket_l">
      <goal name="uncheck_order&#39;vc.4.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="1.20" steps="23112"/></proof>
      </goal>
      <goal name="uncheck_order&#39;vc.4.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="1.10" steps="23112"/></proof>
      </goal>
      <goal name="uncheck_order&#39;vc.4.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.81"/></proof>
      </goal>
      <goal name="uncheck_order&#39;vc.4.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="4.83" steps="1594315"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="uncheck_order&#39;vc.4.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="1"><result status="valid" time="1.08" steps="23112"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="uncheck_order&#39;vc.4.0.1" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(width (check_order n bound))" arg2="(n+1 + (n+2+1))">
     <goal name="uncheck_order&#39;vc.4.0.1.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="kronecker_ket_l">
      <goal name="uncheck_order&#39;vc.4.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="1.09" steps="23112"/></proof>
      </goal>
      <goal name="uncheck_order&#39;vc.4.0.1.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="1.11" steps="23112"/></proof>
      </goal>
      <goal name="uncheck_order&#39;vc.4.0.1.0.2" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.72"/></proof>
      </goal>
      <goal name="uncheck_order&#39;vc.4.0.1.0.3" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="4.83" steps="1594315"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="uncheck_order&#39;vc.4.0.1.1" expl="equality hypothesis" proved="true">
     <proof prover="1"><result status="valid" time="1.08" steps="23112"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="uncheck_order&#39;vc.4.0.2" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="5.03" steps="1594914"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="uncheck_order&#39;vc.5" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="uncheck_order&#39;vc.5.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="Ensures3">
    <goal name="uncheck_order&#39;vc.5.0.0" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(width (check_order n bound))" arg2="(n+1 + (n+2+1))">
     <goal name="uncheck_order&#39;vc.5.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="kronecker_ket_l">
      <goal name="uncheck_order&#39;vc.5.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="1.08" steps="23112"/></proof>
      </goal>
      <goal name="uncheck_order&#39;vc.5.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="1.08" steps="23112"/></proof>
      </goal>
      <goal name="uncheck_order&#39;vc.5.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.83"/></proof>
      </goal>
      <goal name="uncheck_order&#39;vc.5.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="4.95" steps="1594386"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="uncheck_order&#39;vc.5.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="1"><result status="valid" time="1.07" steps="23112"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="uncheck_order&#39;vc.5.0.1" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(width (check_order n bound))" arg2="(n+1 + (n+2+1))">
     <goal name="uncheck_order&#39;vc.5.0.1.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="kronecker_ket_l">
      <goal name="uncheck_order&#39;vc.5.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="1.03" steps="23112"/></proof>
      </goal>
      <goal name="uncheck_order&#39;vc.5.0.1.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="1.13" steps="23112"/></proof>
      </goal>
      <goal name="uncheck_order&#39;vc.5.0.1.0.2" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.85"/></proof>
      </goal>
      <goal name="uncheck_order&#39;vc.5.0.1.0.3" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="4.44" steps="1594167"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="uncheck_order&#39;vc.5.0.1.1" expl="equality hypothesis" proved="true">
     <proof prover="1"><result status="valid" time="1.14" steps="23112"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="uncheck_order&#39;vc.5.0.2" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="4.39" steps="1595475"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cont_restricted_modular_multiplier&#39;vc" expl="VC for cont_restricted_modular_multiplier" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cont_restricted_modular_multiplier&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.06" steps="22906"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="cont_restricted_modular_multiplier&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.05" steps="22906"/></proof>
   </goal>
   <goal name="cont_restricted_modular_multiplier&#39;vc.1.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.07" steps="22906"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="cont_restricted_modular_multiplier&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.08" steps="22906"/></proof>
   </goal>
   <goal name="cont_restricted_modular_multiplier&#39;vc.2.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.05" steps="22906"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="cont_restricted_modular_multiplier&#39;vc.3.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.06" steps="22906"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="1.02" steps="23112"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.5" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="kronecker_assoc_use">
   <goal name="cont_restricted_modular_multiplier&#39;vc.5.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="kronecker_assoc_use">
    <goal name="cont_restricted_modular_multiplier&#39;vc.5.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="Ensures2">
     <goal name="cont_restricted_modular_multiplier&#39;vc.5.0.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.75"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.6" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="kronecker_assoc_use">
   <goal name="cont_restricted_modular_multiplier&#39;vc.6.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="Ensures2">
    <goal name="cont_restricted_modular_multiplier&#39;vc.6.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="2.01"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.7" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.07" steps="22959"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.8" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.10" steps="22959"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="1.12" steps="23212"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.10" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ket (n + 1) i)" arg2="(kronecker (ket 1 0) (ket n i))
">
   <goal name="cont_restricted_modular_multiplier&#39;vc.10.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="cont_restricted_modular_multiplier&#39;vc.10.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="result&#39;def">
     <goal name="cont_restricted_modular_multiplier&#39;vc.10.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="kronecker_assoc_use_rev">
      <goal name="cont_restricted_modular_multiplier&#39;vc.10.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="place_kron_right">
       <goal name="cont_restricted_modular_multiplier&#39;vc.10.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="Ensures9">
        <goal name="cont_restricted_modular_multiplier&#39;vc.10.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="kronecker_assoc_use">
         <goal name="cont_restricted_modular_multiplier&#39;vc.10.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="apply" proved="true" arg1="kronecker_eq">
          <goal name="cont_restricted_modular_multiplier&#39;vc.10.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="kronecker_kets">
           <goal name="cont_restricted_modular_multiplier&#39;vc.10.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="1.50" steps="31728"/></proof>
           </goal>
           <goal name="cont_restricted_modular_multiplier&#39;vc.10.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="1"><result status="valid" time="1.53" steps="31705"/></proof>
           </goal>
           <goal name="cont_restricted_modular_multiplier&#39;vc.10.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="1"><result status="valid" time="1.53" steps="31705"/></proof>
           </goal>
           <goal name="cont_restricted_modular_multiplier&#39;vc.10.0.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
           <proof prover="3"><result status="valid" time="2.53" steps="1048775"/></proof>
           </goal>
           <goal name="cont_restricted_modular_multiplier&#39;vc.10.0.0.0.0.0.0.0.0.4" expl="rewrite premises" proved="true">
           <proof prover="3"><result status="valid" time="2.48" steps="1034167"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="cont_restricted_modular_multiplier&#39;vc.10.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="1.64" steps="31705"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="cont_restricted_modular_multiplier&#39;vc.10.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="1"><result status="valid" time="1.58" steps="31705"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="cont_restricted_modular_multiplier&#39;vc.10.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="1"><result status="valid" time="1.44" steps="31705"/></proof>
       </goal>
       <goal name="cont_restricted_modular_multiplier&#39;vc.10.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="1"><result status="valid" time="1.57" steps="31705"/></proof>
       </goal>
       <goal name="cont_restricted_modular_multiplier&#39;vc.10.0.0.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="5.27"/></proof>
       </goal>
       <goal name="cont_restricted_modular_multiplier&#39;vc.10.0.0.0.0.4" expl="rewrite premises" proved="true">
       <transf name="replace" proved="true" arg1="(((2 * n) + 4) - 1)" arg2="(n+ (n+2+1))">
        <goal name="cont_restricted_modular_multiplier&#39;vc.10.0.0.0.0.4.0" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="5.09"/></proof>
        </goal>
        <goal name="cont_restricted_modular_multiplier&#39;vc.10.0.0.0.0.4.1" expl="equality hypothesis" proved="true">
        <proof prover="1"><result status="valid" time="1.62" steps="31705"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="cont_restricted_modular_multiplier&#39;vc.10.1" expl="equality hypothesis" proved="true">
   <proof prover="0"><result status="valid" time="2.24"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.11" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ket (n + 1) i)" arg2="(kronecker (ket 1 0) (ket n i))
">
   <goal name="cont_restricted_modular_multiplier&#39;vc.11.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="cont_restricted_modular_multiplier&#39;vc.11.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="result&#39;def">
     <goal name="cont_restricted_modular_multiplier&#39;vc.11.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="kronecker_assoc_use_rev">
      <goal name="cont_restricted_modular_multiplier&#39;vc.11.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="place_kron_right">
       <goal name="cont_restricted_modular_multiplier&#39;vc.11.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="0"><result status="valid" time="5.55"/></proof>
       </goal>
       <goal name="cont_restricted_modular_multiplier&#39;vc.11.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="1"><result status="valid" time="1.53" steps="31705"/></proof>
       </goal>
       <goal name="cont_restricted_modular_multiplier&#39;vc.11.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="1"><result status="valid" time="1.59" steps="31705"/></proof>
       </goal>
       <goal name="cont_restricted_modular_multiplier&#39;vc.11.0.0.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="2.65" steps="1049269"/></proof>
       </goal>
       <goal name="cont_restricted_modular_multiplier&#39;vc.11.0.0.0.0.4" expl="rewrite premises" proved="true">
       <transf name="replace" proved="true" arg1="(((2 * n) + 4) - 1)" arg2="(n+ (n+2+1))">
        <goal name="cont_restricted_modular_multiplier&#39;vc.11.0.0.0.0.4.0" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="7.61"/></proof>
        </goal>
        <goal name="cont_restricted_modular_multiplier&#39;vc.11.0.0.0.0.4.1" expl="equality hypothesis" proved="true">
        <proof prover="1"><result status="valid" time="1.61" steps="31705"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="cont_restricted_modular_multiplier&#39;vc.11.1" expl="equality hypothesis" proved="true">
   <proof prover="0"><result status="valid" time="2.10"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="modular_multiplier_with_ancillas&#39;vc" expl="VC for modular_multiplier_with_ancillas" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="modular_multiplier_with_ancillas&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.19" steps="22906"/></proof>
  </goal>
  <goal name="modular_multiplier_with_ancillas&#39;vc.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier_with_ancillas&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.13" steps="22906"/></proof>
   </goal>
   <goal name="modular_multiplier_with_ancillas&#39;vc.1.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.14" steps="22906"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier_with_ancillas&#39;vc.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier_with_ancillas&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.10" steps="22906"/></proof>
   </goal>
   <goal name="modular_multiplier_with_ancillas&#39;vc.2.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.10" steps="22906"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier_with_ancillas&#39;vc.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier_with_ancillas&#39;vc.3.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.12" steps="22906"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier_with_ancillas&#39;vc.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.08" steps="22959"/></proof>
  </goal>
  <goal name="modular_multiplier_with_ancillas&#39;vc.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier_with_ancillas&#39;vc.5.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.10" steps="22959"/></proof>
   </goal>
   <goal name="modular_multiplier_with_ancillas&#39;vc.5.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.08" steps="22958"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier_with_ancillas&#39;vc.6" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.11" steps="23062"/></proof>
  </goal>
  <goal name="modular_multiplier_with_ancillas&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="1.12" steps="23317"/></proof>
  </goal>
  <goal name="modular_multiplier_with_ancillas&#39;vc.8" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="modular_multiplier_with_ancillas&#39;vc.8.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="modular_multiplier_with_ancillas&#39;vc.8.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="path_sem_comp" arg2="with" arg3="(kronecker  (ket (n+1) i)  (kronecker(ket (n+2) 0)(ket 1 1)))">
     <goal name="modular_multiplier_with_ancillas&#39;vc.8.0.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(width (check_order n bound))" arg2="(n+1 + (n+2+1))">
      <goal name="modular_multiplier_with_ancillas&#39;vc.8.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="kronecker_ket_l">
       <goal name="modular_multiplier_with_ancillas&#39;vc.8.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="1.55" steps="31780"/></proof>
       </goal>
       <goal name="modular_multiplier_with_ancillas&#39;vc.8.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="1.56" steps="31780"/></proof>
       </goal>
       <goal name="modular_multiplier_with_ancillas&#39;vc.8.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="4.88"/></proof>
       </goal>
       <goal name="modular_multiplier_with_ancillas&#39;vc.8.0.0.0.0.3" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="kronecker_ket_l">
        <goal name="modular_multiplier_with_ancillas&#39;vc.8.0.0.0.0.3.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.51" steps="31780"/></proof>
        </goal>
        <goal name="modular_multiplier_with_ancillas&#39;vc.8.0.0.0.0.3.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.48" steps="31780"/></proof>
        </goal>
        <goal name="modular_multiplier_with_ancillas&#39;vc.8.0.0.0.0.3.2" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="5.85"/></proof>
        </goal>
        <goal name="modular_multiplier_with_ancillas&#39;vc.8.0.0.0.0.3.3" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="5.81"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="modular_multiplier_with_ancillas&#39;vc.8.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="1"><result status="valid" time="1.50" steps="31780"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="modular_multiplier_with_ancillas&#39;vc.8.0.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="5.99"/></proof>
     </goal>
     <goal name="modular_multiplier_with_ancillas&#39;vc.8.0.0.2" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="5.56"/></proof>
     </goal>
     <goal name="modular_multiplier_with_ancillas&#39;vc.8.0.0.3" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.45" steps="31780"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier_with_ancillas&#39;vc.9" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="modular_multiplier_with_ancillas&#39;vc.9.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="modular_multiplier_with_ancillas&#39;vc.9.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="path_sem_comp" arg2="with" arg3="(kronecker  (ket (n+1) i)  (kronecker(ket (n+2) 0)(ket 1 0)))
">
     <goal name="modular_multiplier_with_ancillas&#39;vc.9.0.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(width (check_order n bound))" arg2="(n+1 + (n+2+1))">
      <goal name="modular_multiplier_with_ancillas&#39;vc.9.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="kronecker_ket_l">
       <goal name="modular_multiplier_with_ancillas&#39;vc.9.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="1.45" steps="31780"/></proof>
       </goal>
       <goal name="modular_multiplier_with_ancillas&#39;vc.9.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="1.45" steps="31780"/></proof>
       </goal>
       <goal name="modular_multiplier_with_ancillas&#39;vc.9.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="5.81"/></proof>
       </goal>
       <goal name="modular_multiplier_with_ancillas&#39;vc.9.0.0.0.0.3" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="kronecker_ket_l">
        <goal name="modular_multiplier_with_ancillas&#39;vc.9.0.0.0.0.3.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.51" steps="31780"/></proof>
        </goal>
        <goal name="modular_multiplier_with_ancillas&#39;vc.9.0.0.0.0.3.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.43" steps="31780"/></proof>
        </goal>
        <goal name="modular_multiplier_with_ancillas&#39;vc.9.0.0.0.0.3.2" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="5.36"/></proof>
        </goal>
        <goal name="modular_multiplier_with_ancillas&#39;vc.9.0.0.0.0.3.3" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="6.00"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="modular_multiplier_with_ancillas&#39;vc.9.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="1"><result status="valid" time="1.49" steps="31780"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="modular_multiplier_with_ancillas&#39;vc.9.0.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="5.75"/></proof>
     </goal>
     <goal name="modular_multiplier_with_ancillas&#39;vc.9.0.0.2" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="5.95"/></proof>
     </goal>
     <goal name="modular_multiplier_with_ancillas&#39;vc.9.0.0.3" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.47" steps="31780"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier_with_ancillas&#39;vc.10" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.05" steps="22906"/></proof>
  </goal>
  <goal name="modular_multiplier_with_ancillas&#39;vc.11" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier_with_ancillas&#39;vc.11.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.08" steps="22906"/></proof>
   </goal>
   <goal name="modular_multiplier_with_ancillas&#39;vc.11.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.10" steps="22906"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier_with_ancillas&#39;vc.12" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.05" steps="23009"/></proof>
  </goal>
  <goal name="modular_multiplier_with_ancillas&#39;vc.13" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="1.05" steps="23263"/></proof>
  </goal>
  <goal name="modular_multiplier_with_ancillas&#39;vc.14" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="modular_multiplier_with_ancillas&#39;vc.14.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="modular_multiplier_with_ancillas&#39;vc.14.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="path_sem_comp" arg2="with" arg3="(kronecker  (ket (n+1) (mod1 (pick * i) bound))  (kronecker(ket (n+2) 0)(ket 1 1)))
">
     <goal name="modular_multiplier_with_ancillas&#39;vc.14.0.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(width o)" arg2="(n+1 + (n+2+1))">
      <goal name="modular_multiplier_with_ancillas&#39;vc.14.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="kronecker_ket_l">
       <goal name="modular_multiplier_with_ancillas&#39;vc.14.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="1.42" steps="31777"/></proof>
       </goal>
       <goal name="modular_multiplier_with_ancillas&#39;vc.14.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="1.44" steps="31777"/></proof>
       </goal>
       <goal name="modular_multiplier_with_ancillas&#39;vc.14.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="5.28"/></proof>
       </goal>
       <goal name="modular_multiplier_with_ancillas&#39;vc.14.0.0.0.0.3" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="kronecker_ket_l">
        <goal name="modular_multiplier_with_ancillas&#39;vc.14.0.0.0.0.3.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.44" steps="31777"/></proof>
        </goal>
        <goal name="modular_multiplier_with_ancillas&#39;vc.14.0.0.0.0.3.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.44" steps="31777"/></proof>
        </goal>
        <goal name="modular_multiplier_with_ancillas&#39;vc.14.0.0.0.0.3.2" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="5.92"/></proof>
        </goal>
        <goal name="modular_multiplier_with_ancillas&#39;vc.14.0.0.0.0.3.3" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="5.76"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="modular_multiplier_with_ancillas&#39;vc.14.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="1"><result status="valid" time="1.42" steps="31777"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="modular_multiplier_with_ancillas&#39;vc.14.0.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="6.16"/></proof>
     </goal>
     <goal name="modular_multiplier_with_ancillas&#39;vc.14.0.0.2" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="6.25"/></proof>
     </goal>
     <goal name="modular_multiplier_with_ancillas&#39;vc.14.0.0.3" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.27" steps="31777"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier_with_ancillas&#39;vc.15" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="modular_multiplier_with_ancillas&#39;vc.15.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="modular_multiplier_with_ancillas&#39;vc.15.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="path_sem_comp" arg2="with" arg3="(kronecker  (ket (n+1) i)  (kronecker(ket (n+2) 0)(ket 1 0)))
">
     <goal name="modular_multiplier_with_ancillas&#39;vc.15.0.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(width o)" arg2="(n+1 + (n+2+1))">
      <goal name="modular_multiplier_with_ancillas&#39;vc.15.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="kronecker_ket_l">
       <goal name="modular_multiplier_with_ancillas&#39;vc.15.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="1.27" steps="31777"/></proof>
       </goal>
       <goal name="modular_multiplier_with_ancillas&#39;vc.15.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="1.28" steps="31777"/></proof>
       </goal>
       <goal name="modular_multiplier_with_ancillas&#39;vc.15.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="6.13"/></proof>
       </goal>
       <goal name="modular_multiplier_with_ancillas&#39;vc.15.0.0.0.0.3" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="kronecker_ket_l">
        <goal name="modular_multiplier_with_ancillas&#39;vc.15.0.0.0.0.3.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.29" steps="31777"/></proof>
        </goal>
        <goal name="modular_multiplier_with_ancillas&#39;vc.15.0.0.0.0.3.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.22" steps="31777"/></proof>
        </goal>
        <goal name="modular_multiplier_with_ancillas&#39;vc.15.0.0.0.0.3.2" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="6.28"/></proof>
        </goal>
        <goal name="modular_multiplier_with_ancillas&#39;vc.15.0.0.0.0.3.3" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="5.89"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="modular_multiplier_with_ancillas&#39;vc.15.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="1"><result status="valid" time="1.30" steps="31777"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="modular_multiplier_with_ancillas&#39;vc.15.0.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="5.84"/></proof>
     </goal>
     <goal name="modular_multiplier_with_ancillas&#39;vc.15.0.0.2" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="5.88"/></proof>
     </goal>
     <goal name="modular_multiplier_with_ancillas&#39;vc.15.0.0.3" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.40" steps="31777"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier_with_ancillas&#39;vc.16" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="modular_multiplier_with_ancillas&#39;vc.16.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="path_sem_comp" arg2="with" arg3="(kronecker  (ket (n+1) (mod1 (pick * i) bound))  (kronecker(ket (n+2) 0)(ket 1 1)))">
     <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(width o)" arg2="(1 + (n+ (n+3)))">
      <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="kronecker_ket_l">
       <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="1.38" steps="31777"/></proof>
       </goal>
       <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="1.37" steps="31777"/></proof>
       </goal>
       <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="5.86"/></proof>
       </goal>
       <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="5.85"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="1"><result status="valid" time="1.21" steps="31777"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.1" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(kronecker (ket 1 0) (kronecker (ket n i) (ket (n + 3) 0)))" arg2="(kronecker (ket (n + 1) i) (kronecker (ket (n + 2) 0) (ket 1 0)))">
      <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="5.73"/></proof>
      </goal>
      <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.1.1" expl="equality hypothesis" proved="true">
      <transf name="rewrite" proved="true" arg1="kronecker_assoc_use">
       <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.1.1.0" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="kronecker_eq">
        <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.1.1.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="kronecker_kets">
         <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.1.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="1.29" steps="31799"/></proof>
         </goal>
         <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.1.1.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="1.31" steps="31777"/></proof>
         </goal>
         <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.1.1.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="1.33" steps="31777"/></proof>
         </goal>
         <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.1.1.0.0.3" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="2.83" steps="1133097"/></proof>
         </goal>
         <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.1.1.0.0.4" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="1.41" steps="31778"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.1.1.0.1" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="kronecker_kets">
         <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.1.1.0.1.0" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="1.38" steps="31799"/></proof>
         </goal>
         <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.1.1.0.1.1" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="1.33" steps="31777"/></proof>
         </goal>
         <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.1.1.0.1.2" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="1.26" steps="31777"/></proof>
         </goal>
         <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.1.1.0.1.3" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="3.34" steps="1288982"/></proof>
         </goal>
         <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.1.1.0.1.4" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="2.59" steps="1133097"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.2" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures13">
      <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.2.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="goal_comm">
       <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.2.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="kronecker_assoc_use">
        <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.2.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="kronecker_eq">
         <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.2.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="kronecker_kets">
          <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="1.26" steps="31800"/></proof>
          </goal>
          <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="1"><result status="valid" time="1.32" steps="31777"/></proof>
          </goal>
          <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="1"><result status="valid" time="1.32" steps="31777"/></proof>
          </goal>
          <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.2.0.0.0.0.3" expl="rewrite premises" proved="true">
          <proof prover="3"><result status="valid" time="2.84" steps="1133097"/></proof>
          </goal>
          <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.2.0.0.0.0.4" expl="rewrite premises" proved="true">
          <proof prover="3"><result status="valid" time="2.70" steps="1118388"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.2.0.0.0.1" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="kronecker_kets">
          <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.2.0.0.0.1.0" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="1.50" steps="31799"/></proof>
          </goal>
          <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.2.0.0.0.1.1" expl="rewrite premises" proved="true">
          <proof prover="1"><result status="valid" time="1.24" steps="31777"/></proof>
          </goal>
          <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.2.0.0.0.1.2" expl="rewrite premises" proved="true">
          <proof prover="1"><result status="valid" time="1.25" steps="31777"/></proof>
          </goal>
          <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.2.0.0.0.1.3" expl="rewrite premises" proved="true">
          <proof prover="3"><result status="valid" time="3.75" steps="1288982"/></proof>
          </goal>
          <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.2.0.0.0.1.4" expl="rewrite premises" proved="true">
          <proof prover="3"><result status="valid" time="2.89" steps="1133097"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.2.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="5.76"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="modular_multiplier_with_ancillas&#39;vc.16.0.0.3" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.29" steps="31777"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier_with_ancillas&#39;vc.17" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="modular_multiplier_with_ancillas&#39;vc.17.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="modular_multiplier_with_ancillas&#39;vc.17.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="path_sem_comp" arg2="with" arg3="(kronecker  (ket (n+1) i)  (kronecker(ket (n+2) 0)(ket 1 0)))">
     <goal name="modular_multiplier_with_ancillas&#39;vc.17.0.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(width o)" arg2="(1 + (n+ (n+3)))">
      <goal name="modular_multiplier_with_ancillas&#39;vc.17.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="kronecker_ket_l">
       <goal name="modular_multiplier_with_ancillas&#39;vc.17.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="1.29" steps="31777"/></proof>
       </goal>
       <goal name="modular_multiplier_with_ancillas&#39;vc.17.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="1.27" steps="31777"/></proof>
       </goal>
       <goal name="modular_multiplier_with_ancillas&#39;vc.17.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="2.81" steps="1133620"/></proof>
       </goal>
       <goal name="modular_multiplier_with_ancillas&#39;vc.17.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="5.59"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="modular_multiplier_with_ancillas&#39;vc.17.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="1"><result status="valid" time="1.26" steps="31777"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="modular_multiplier_with_ancillas&#39;vc.17.0.0.1" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="kronecker_assoc_use">
      <goal name="modular_multiplier_with_ancillas&#39;vc.17.0.0.1.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(kronecker (ket 1 0) (ket n i))" arg2="(ket (n+1) i)">
       <goal name="modular_multiplier_with_ancillas&#39;vc.17.0.0.1.0.0" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(ket (n + 3) 0)" arg2="(kronecker (ket (n + 2) 0) (ket 1 0))">
        <goal name="modular_multiplier_with_ancillas&#39;vc.17.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="3.35" steps="1289996"/></proof>
        </goal>
        <goal name="modular_multiplier_with_ancillas&#39;vc.17.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="rewrite" proved="true" arg1="kronecker_kets">
         <goal name="modular_multiplier_with_ancillas&#39;vc.17.0.0.1.0.0.1.0" expl="equality hypothesis" proved="true">
         <proof prover="1"><result status="valid" time="1.29" steps="31800"/></proof>
         </goal>
         <goal name="modular_multiplier_with_ancillas&#39;vc.17.0.0.1.0.0.1.1" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="1.41" steps="31777"/></proof>
         </goal>
         <goal name="modular_multiplier_with_ancillas&#39;vc.17.0.0.1.0.0.1.2" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="1.38" steps="31777"/></proof>
         </goal>
         <goal name="modular_multiplier_with_ancillas&#39;vc.17.0.0.1.0.0.1.3" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="3.38" steps="1289377"/></proof>
         </goal>
         <goal name="modular_multiplier_with_ancillas&#39;vc.17.0.0.1.0.0.1.4" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="2.63" steps="1133378"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="modular_multiplier_with_ancillas&#39;vc.17.0.0.1.0.1" expl="equality hypothesis" proved="true">
       <proof prover="3"><result status="valid" time="4.13" steps="1289770"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="modular_multiplier_with_ancillas&#39;vc.17.0.0.2" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures15">
      <goal name="modular_multiplier_with_ancillas&#39;vc.17.0.0.2.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="goal_comm">
       <goal name="modular_multiplier_with_ancillas&#39;vc.17.0.0.2.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="kronecker_assoc_use">
        <goal name="modular_multiplier_with_ancillas&#39;vc.17.0.0.2.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="kronecker_eq">
         <goal name="modular_multiplier_with_ancillas&#39;vc.17.0.0.2.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="3.62" steps="1289770"/></proof>
         </goal>
         <goal name="modular_multiplier_with_ancillas&#39;vc.17.0.0.2.0.0.0.1" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="kronecker_kets">
          <goal name="modular_multiplier_with_ancillas&#39;vc.17.0.0.2.0.0.0.1.0" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="1.34" steps="31800"/></proof>
          </goal>
          <goal name="modular_multiplier_with_ancillas&#39;vc.17.0.0.2.0.0.0.1.1" expl="rewrite premises" proved="true">
          <proof prover="1"><result status="valid" time="1.35" steps="31777"/></proof>
          </goal>
          <goal name="modular_multiplier_with_ancillas&#39;vc.17.0.0.2.0.0.0.1.2" expl="rewrite premises" proved="true">
          <proof prover="1"><result status="valid" time="1.30" steps="31777"/></proof>
          </goal>
          <goal name="modular_multiplier_with_ancillas&#39;vc.17.0.0.2.0.0.0.1.3" expl="rewrite premises" proved="true">
          <proof prover="3"><result status="valid" time="3.73" steps="1289377"/></proof>
          </goal>
          <goal name="modular_multiplier_with_ancillas&#39;vc.17.0.0.2.0.0.0.1.4" expl="rewrite premises" proved="true">
          <proof prover="3"><result status="valid" time="2.81" steps="1133378"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="modular_multiplier_with_ancillas&#39;vc.17.0.0.2.1" expl="rewrite premises" proved="true">
      <proof prover="1"><result status="valid" time="1.33" steps="31777"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="modular_multiplier_with_ancillas&#39;vc.17.0.0.3" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.33" steps="31777"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="permut_modular_multiplier&#39;vc" expl="VC for permut_modular_multiplier" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="permut_modular_multiplier&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.96" steps="22906"/></proof>
  </goal>
  <goal name="permut_modular_multiplier&#39;vc.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="permut_modular_multiplier&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.95" steps="22906"/></proof>
   </goal>
   <goal name="permut_modular_multiplier&#39;vc.1.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.97" steps="22906"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="permut_modular_multiplier&#39;vc.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="permut_modular_multiplier&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.95" steps="22906"/></proof>
   </goal>
   <goal name="permut_modular_multiplier&#39;vc.2.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.96" steps="22906"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="permut_modular_multiplier&#39;vc.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="permut_modular_multiplier&#39;vc.3.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.93" steps="22906"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="permut_modular_multiplier&#39;vc.4" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_bijective_auto">
   <goal name="permut_modular_multiplier&#39;vc.4.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="permut_modular_multiplier&#39;vc.4.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="3.19"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="permut_modular_multiplier&#39;vc.4.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="permut_modular_multiplier&#39;vc.4.1.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="permut_modular_multiplier&#39;vc.4.1.0.0" expl="apply premises" proved="true">
     <transf name="exists" proved="true" arg1="(if e&#39; = ((2 * n) + 4) - 1 then 0 else e&#39; + 1)">
      <goal name="permut_modular_multiplier&#39;vc.4.1.0.0.0" proved="true">
      <proof prover="0"><result status="valid" time="3.07"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="permut_modular_multiplier&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.98" steps="23262"/></proof>
  </goal>
  <goal name="permut_modular_multiplier&#39;vc.6" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="permut_modular_multiplier&#39;vc.6.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="permut_modular_multiplier&#39;vc.6.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="permut_modular_multiplier&#39;vc.6.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(kronecker (ket n i) (ket (n + 4) 0))" arg2="(kronecker(kronecker (ket n i) (ket (n + 3) 0)) (ket 1 0))">
      <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="(kronecker (ket n (mod1 (pick * i) bound)) (ket (n + 4) 0))" arg2="(kronecker(kronecker (ket n (mod1 (pick * i) bound)) (ket (n + 3) 0)) (ket 1 0))">
       <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="with_permutation_kronecker_gen">
        <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.35" steps="31638"/></proof>
        </goal>
        <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.35" steps="31639"/></proof>
        </goal>
        <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="3.61" steps="1416949"/></proof>
        </goal>
        <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0.0.3" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(((2 * n) + 4) - 1)" arg2="(n+ (n+3))">
         <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0.0.3.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="kronecker_ket_l">
          <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="1.35" steps="31639"/></proof>
          </goal>
          <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0.0.3.0.1" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="1.33" steps="31639"/></proof>
          </goal>
          <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0.0.3.0.2" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="4.28" steps="1599634"/></proof>
          </goal>
          <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0.0.3.0.3" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="4.66" steps="1598582"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0.0.3.1" expl="equality hypothesis" proved="true">
         <proof prover="1"><result status="valid" time="1.34" steps="31638"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="3.60" steps="1416949"/></proof>
        </goal>
        <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0.0.5" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(((2 * n) + 4) - 1)" arg2="(n+ (n+3))">
         <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0.0.5.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="kronecker_ket_l">
          <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0.0.5.0.0" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="1.36" steps="31639"/></proof>
          </goal>
          <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0.0.5.0.1" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="1.29" steps="31639"/></proof>
          </goal>
          <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0.0.5.0.2" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="4.46" steps="1601422"/></proof>
          </goal>
          <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0.0.5.0.3" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="5.08" steps="1598582"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0.0.5.1" expl="equality hypothesis" proved="true">
         <proof prover="1"><result status="valid" time="1.31" steps="31638"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0.0.6" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="3.85" steps="1416946"/></proof>
        </goal>
        <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0.0.7" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="kronecker_is_a_ket_basis_elt">
         <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0.0.7.0" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="4.53" steps="1601457"/></proof>
         </goal>
         <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0.0.7.1" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="4.69" steps="1598563"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0.0.8" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="Ensures11">
         <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0.0.8.0" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="1.48" steps="31638"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="rewrite" proved="true" arg1="kronecker_assoc_use_rev">
        <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="kronecker_eq">
         <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="1.47" steps="31638"/></proof>
         </goal>
         <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0.1.0.1" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="kronecker_kets">
          <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="1.46" steps="31662"/></proof>
          </goal>
          <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0.1.0.1.1" expl="rewrite premises" proved="true">
          <proof prover="1"><result status="valid" time="1.48" steps="31639"/></proof>
          </goal>
          <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0.1.0.1.2" expl="rewrite premises" proved="true">
          <proof prover="1"><result status="valid" time="1.49" steps="31638"/></proof>
          </goal>
          <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0.1.0.1.3" expl="rewrite premises" proved="true">
          <proof prover="3"><result status="valid" time="4.90" steps="1599129"/></proof>
          </goal>
          <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.0.1.0.1.4" expl="rewrite premises" proved="true">
          <proof prover="3"><result status="valid" time="3.76" steps="1416971"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="rewrite" proved="true" arg1="kronecker_assoc_use_rev">
       <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.1.0" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="kronecker_eq">
        <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.47" steps="31638"/></proof>
        </goal>
        <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.1.0.1" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="kronecker_kets">
         <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.1.0.1.0" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="1.48" steps="31662"/></proof>
         </goal>
         <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.1.0.1.1" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="1.51" steps="31639"/></proof>
         </goal>
         <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.1.0.1.2" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="1.49" steps="31638"/></proof>
         </goal>
         <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.1.0.1.3" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="4.54" steps="1599129"/></proof>
         </goal>
         <goal name="permut_modular_multiplier&#39;vc.6.0.0.0.1.0.1.4" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="3.58" steps="1416971"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="permut_modular_multiplier&#39;vc.7" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="permut_modular_multiplier&#39;vc.7.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="permut_modular_multiplier&#39;vc.7.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="permut_modular_multiplier&#39;vc.7.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(kronecker (ket n i) (ket (n + 4) 0))" arg2="(kronecker(kronecker (ket n i) (ket (n + 3) 0)) (ket 1 0))">
      <goal name="permut_modular_multiplier&#39;vc.7.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="with_permutation_kronecker_gen">
       <goal name="permut_modular_multiplier&#39;vc.7.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="1.37" steps="31638"/></proof>
       </goal>
       <goal name="permut_modular_multiplier&#39;vc.7.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="1.36" steps="31639"/></proof>
       </goal>
       <goal name="permut_modular_multiplier&#39;vc.7.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="3.65" steps="1417223"/></proof>
       </goal>
       <goal name="permut_modular_multiplier&#39;vc.7.0.0.0.0.3" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(((2 * n) + 4) - 1)" arg2="(n+ (n+3))">
        <goal name="permut_modular_multiplier&#39;vc.7.0.0.0.0.3.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="kronecker_ket_l">
         <goal name="permut_modular_multiplier&#39;vc.7.0.0.0.0.3.0.0" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="1.35" steps="31639"/></proof>
         </goal>
         <goal name="permut_modular_multiplier&#39;vc.7.0.0.0.0.3.0.1" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="1.32" steps="31639"/></proof>
         </goal>
         <goal name="permut_modular_multiplier&#39;vc.7.0.0.0.0.3.0.2" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="4.52" steps="1599957"/></proof>
         </goal>
         <goal name="permut_modular_multiplier&#39;vc.7.0.0.0.0.3.0.3" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="4.45" steps="1598961"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="permut_modular_multiplier&#39;vc.7.0.0.0.0.3.1" expl="equality hypothesis" proved="true">
        <proof prover="1"><result status="valid" time="1.29" steps="31639"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="permut_modular_multiplier&#39;vc.7.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="3.69" steps="1417223"/></proof>
       </goal>
       <goal name="permut_modular_multiplier&#39;vc.7.0.0.0.0.5" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(((2 * n) + 4) - 1)" arg2="(n+ (n+3))">
        <goal name="permut_modular_multiplier&#39;vc.7.0.0.0.0.5.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="kronecker_ket_l">
         <goal name="permut_modular_multiplier&#39;vc.7.0.0.0.0.5.0.0" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="1.32" steps="31639"/></proof>
         </goal>
         <goal name="permut_modular_multiplier&#39;vc.7.0.0.0.0.5.0.1" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="1.34" steps="31639"/></proof>
         </goal>
         <goal name="permut_modular_multiplier&#39;vc.7.0.0.0.0.5.0.2" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="4.66" steps="1599957"/></proof>
         </goal>
         <goal name="permut_modular_multiplier&#39;vc.7.0.0.0.0.5.0.3" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="4.63" steps="1598961"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="permut_modular_multiplier&#39;vc.7.0.0.0.0.5.1" expl="equality hypothesis" proved="true">
        <proof prover="1"><result status="valid" time="1.44" steps="31639"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="permut_modular_multiplier&#39;vc.7.0.0.0.0.6" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="3.60" steps="1417220"/></proof>
       </goal>
       <goal name="permut_modular_multiplier&#39;vc.7.0.0.0.0.7" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="kronecker_is_a_ket_basis_elt">
        <goal name="permut_modular_multiplier&#39;vc.7.0.0.0.0.7.0" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="4.54" steps="1601619"/></proof>
        </goal>
        <goal name="permut_modular_multiplier&#39;vc.7.0.0.0.0.7.1" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="4.56" steps="1599014"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="permut_modular_multiplier&#39;vc.7.0.0.0.0.8" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="4.58" steps="1599373"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="permut_modular_multiplier&#39;vc.7.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="rewrite" proved="true" arg1="kronecker_assoc_use_rev">
       <goal name="permut_modular_multiplier&#39;vc.7.0.0.0.1.0" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="kronecker_eq">
        <goal name="permut_modular_multiplier&#39;vc.7.0.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.47" steps="31638"/></proof>
        </goal>
        <goal name="permut_modular_multiplier&#39;vc.7.0.0.0.1.0.1" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="kronecker_kets">
         <goal name="permut_modular_multiplier&#39;vc.7.0.0.0.1.0.1.0" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="1.45" steps="31662"/></proof>
         </goal>
         <goal name="permut_modular_multiplier&#39;vc.7.0.0.0.1.0.1.1" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="1.46" steps="31639"/></proof>
         </goal>
         <goal name="permut_modular_multiplier&#39;vc.7.0.0.0.1.0.1.2" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="1.45" steps="31638"/></proof>
         </goal>
         <goal name="permut_modular_multiplier&#39;vc.7.0.0.0.1.0.1.3" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="4.54" steps="1599512"/></proof>
         </goal>
         <goal name="permut_modular_multiplier&#39;vc.7.0.0.0.1.0.1.4" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="3.63" steps="1417245"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="modular_multiplier&#39;vc" expl="VC for modular_multiplier" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="modular_multiplier&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.17"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.05" steps="22905"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="3.38" steps="1262232"/></proof>
   </goal>
   <goal name="modular_multiplier&#39;vc.2.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="3.41" steps="1262376"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier&#39;vc.3.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.05" steps="22906"/></proof>
   </goal>
   <goal name="modular_multiplier&#39;vc.3.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.01" steps="22906"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier&#39;vc.4.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.83"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.97" steps="22956"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.6" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.00" steps="22957"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.7" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="x" arg2="(ket n (ket_to_int x))">
   <goal name="modular_multiplier&#39;vc.7.0" expl="precondition" proved="true">
   <transf name="case" proved="true" arg1="(ket_to_int x &lt; bound)">
    <goal name="modular_multiplier&#39;vc.7.0.0" expl="true case (precondition)" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures1">
     <goal name="modular_multiplier&#39;vc.7.0.0.0" expl="true case (precondition)" proved="true">
     <transf name="exists" proved="true" arg1="(ket n (mod1 (mod1 pick bound * ket_to_int x) bound))">
      <goal name="modular_multiplier&#39;vc.7.0.0.0.0" proved="true">
      <proof prover="1"><result status="valid" time="0.95" steps="23057"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="modular_multiplier&#39;vc.7.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="2.20"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="modular_multiplier&#39;vc.7.0.1" expl="false case (precondition)" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures">
     <goal name="modular_multiplier&#39;vc.7.0.1.0" expl="false case (precondition)" proved="true">
     <transf name="exists" proved="true" arg1="(ket n (ket_to_int x))">
      <goal name="modular_multiplier&#39;vc.7.0.1.0.0" proved="true">
      <proof prover="1"><result status="valid" time="1.03" steps="23057"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="modular_multiplier&#39;vc.7.0.1.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="2.20"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="modular_multiplier&#39;vc.7.1" expl="equality hypothesis" proved="true">
   <proof prover="0"><result status="valid" time="2.19"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.91" steps="23210"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.9" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="Ensures8">
   <goal name="modular_multiplier&#39;vc.9.0" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="1.99"/></proof>
   </goal>
   <goal name="modular_multiplier&#39;vc.9.1" expl="apply premises" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures11">
    <goal name="modular_multiplier&#39;vc.9.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="mult_mod_left">
     <goal name="modular_multiplier&#39;vc.9.1.0.0" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.03" steps="23212"/></proof>
     </goal>
     <goal name="modular_multiplier&#39;vc.9.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="1"><result status="valid" time="0.95" steps="23212"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="modular_multiplier&#39;vc.9.1.1" expl="rewrite premises" proved="true">
    <proof prover="1"><result status="valid" time="1.00" steps="23212"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.10" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="Ensures9">
   <goal name="modular_multiplier&#39;vc.10.0" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="1.98"/></proof>
   </goal>
   <goal name="modular_multiplier&#39;vc.10.1" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="2.41"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
