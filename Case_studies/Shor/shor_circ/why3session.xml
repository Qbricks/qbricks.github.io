<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.4.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="1" name="CVC3" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.7" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="5" name="Z3" version="4.8.6" alternative="counterexamples" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="6" name="CVC4" version="1.7" alternative="counterexamples" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="shor_circ.mlw"/>
<theory name="Circuit" proved="true">
 <goal name="shor_&#39;vc" expl="VC for shor_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="shor_&#39;vc.0" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="shor_&#39;vc.0.0" expl="VC for shor_" proved="true">
   <proof prover="0"><result status="valid" time="0.85" steps="22852"/></proof>
   </goal>
   <goal name="shor_&#39;vc.0.1" expl="VC for shor_" proved="true">
   <proof prover="0"><result status="valid" time="0.80" steps="22852"/></proof>
   </goal>
   <goal name="shor_&#39;vc.0.2" expl="VC for shor_" proved="true">
   <proof prover="0"><result status="valid" time="0.76" steps="22852"/></proof>
   </goal>
   <goal name="shor_&#39;vc.0.3" expl="VC for shor_" proved="true">
   <proof prover="2"><result status="valid" time="3.40" steps="1269100"/></proof>
   </goal>
   <goal name="shor_&#39;vc.0.4" expl="VC for shor_" proved="true">
   <proof prover="1"><result status="valid" time="1.60"/></proof>
   </goal>
   <goal name="shor_&#39;vc.0.5" expl="VC for shor_" proved="true">
   <transf name="apply" proved="true" arg1="set_co_prime">
    <goal name="shor_&#39;vc.0.5.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.81" steps="22852"/></proof>
    </goal>
    <goal name="shor_&#39;vc.0.5.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.94" steps="22852"/></proof>
    </goal>
    <goal name="shor_&#39;vc.0.5.2" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.93" steps="22852"/></proof>
    </goal>
    <goal name="shor_&#39;vc.0.5.3" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="2.20"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="shor_&#39;vc.0.6" expl="VC for shor_" proved="true">
   <proof prover="0"><result status="valid" time="0.92" steps="22852"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bound_inf&#39;vc" expl="VC for bound_inf" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bound_inf&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="1.75"/></proof>
  </goal>
  <goal name="bound_inf&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="1.67"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pre_adder_const_&#39;vc" expl="VC for pre_adder_const_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pre_adder_const_&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.73"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="2.31"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="2.33"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="1.13" steps="23163"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.4" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="1.11" steps="23163"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.5" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="1.10" steps="23163"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.6" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="2.34"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.15" steps="23323"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.8" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="2.51"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.9" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="2.13"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.10" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="1.20" steps="23323"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.11" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="1.23" steps="23323"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.12" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="1.20" steps="23323"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.13" expl="loop invariant init" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_adder_const_&#39;vc.13.0" expl="loop invariant init" proved="true">
   <proof prover="0"><result status="valid" time="1.17" steps="23323"/></proof>
   </goal>
   <goal name="pre_adder_const_&#39;vc.13.1" expl="loop invariant init" proved="true">
   <proof prover="0"><result status="valid" time="1.14" steps="23323"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="pre_adder_const_&#39;vc.14" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_adder_const_&#39;vc.14.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.91" steps="23586"/></proof>
   </goal>
   <goal name="pre_adder_const_&#39;vc.14.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.89" steps="23587"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="pre_adder_const_&#39;vc.15" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.89" steps="23801"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.16" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.91" steps="23801"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.17" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.89" steps="23801"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.18" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.28"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.19" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_adder_const_&#39;vc.19.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="2.62"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="pre_adder_const_&#39;vc.20" expl="loop variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_adder_const_&#39;vc.20.0" expl="loop variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.20" steps="24109"/></proof>
   </goal>
   <goal name="pre_adder_const_&#39;vc.20.1" expl="loop variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.21" steps="24109"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="pre_adder_const_&#39;vc.21" expl="loop invariant preservation" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="pre_adder_const_&#39;vc.21.0" expl="loop invariant preservation" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures1">
    <goal name="pre_adder_const_&#39;vc.21.0.0" expl="loop invariant preservation" proved="true">
    <transf name="rewrite" proved="true" arg1="ang_sum_re">
     <goal name="pre_adder_const_&#39;vc.21.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="apply" proved="true" arg1="ang_add_eq">
      <goal name="pre_adder_const_&#39;vc.21.0.0.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(i + 1 -1)" arg2="(i1+1)">
       <goal name="pre_adder_const_&#39;vc.21.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="LoopInvariant4">
        <goal name="pre_adder_const_&#39;vc.21.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="4.91" steps="1319630"/></proof>
        </goal>
        <goal name="pre_adder_const_&#39;vc.21.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.22" steps="24158"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="pre_adder_const_&#39;vc.21.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="0"><result status="valid" time="1.28" steps="24158"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="pre_adder_const_&#39;vc.21.0.0.0.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="pre_adder_const_&#39;vc.21.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="Ensures8">
        <goal name="pre_adder_const_&#39;vc.21.0.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="case" proved="true" arg1="(getbv y @ (i - 1) = 0)">
         <goal name="pre_adder_const_&#39;vc.21.0.0.0.1.0.0.0" expl="true case (apply premises)" proved="true">
         <proof prover="1"><result status="valid" time="2.70"/></proof>
         </goal>
         <goal name="pre_adder_const_&#39;vc.21.0.0.0.1.0.0.1" expl="false case (apply premises)" proved="true">
         <transf name="replace" proved="true" arg1="(getbv y @ (i - 1) )" arg2="1">
          <goal name="pre_adder_const_&#39;vc.21.0.0.0.1.0.0.1.0" expl="false case (apply premises)" proved="true">
          <proof prover="0"><result status="valid" time="1.20" steps="24212"/></proof>
          </goal>
          <goal name="pre_adder_const_&#39;vc.21.0.0.0.1.0.0.1.1" expl="equality hypothesis" proved="true">
          <proof prover="1"><result status="valid" time="4.30"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="pre_adder_const_&#39;vc.21.0.0.0.1.0.1" expl="rewrite premises" proved="true">
        <proof prover="1"><result status="valid" time="4.26"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="pre_adder_const_&#39;vc.21.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="1.22" steps="24158"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="pre_adder_const_&#39;vc.21.0.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="1.23" steps="24176"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="pre_adder_const_&#39;vc.22" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="2.66"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.23" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="1.23" steps="24129"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.24" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="1.26" steps="24165"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.25" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="5.31" steps="1316441"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.26" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="1.27" steps="24323"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.27" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.25" steps="23525"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.28" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.25" steps="23525"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.29" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.28" steps="23525"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.30" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.70"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.31" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_adder_const_&#39;vc.31.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="2.46"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="pre_adder_const_&#39;vc.32" expl="loop variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_adder_const_&#39;vc.32.0" expl="loop variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.27" steps="23884"/></proof>
   </goal>
   <goal name="pre_adder_const_&#39;vc.32.1" expl="loop variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.31" steps="23884"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="pre_adder_const_&#39;vc.33" expl="loop invariant preservation" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures1">
   <goal name="pre_adder_const_&#39;vc.33.0" expl="loop invariant preservation" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures2">
    <goal name="pre_adder_const_&#39;vc.33.0.0" expl="loop invariant preservation" proved="true">
    <transf name="rewrite" proved="true" arg1="ang_sum_re">
     <goal name="pre_adder_const_&#39;vc.33.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="pre_adder_const_&#39;vc.33.0.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="apply" proved="true" arg1="ang_add_eq">
       <goal name="pre_adder_const_&#39;vc.33.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(k-1)" arg2="k1">
        <goal name="pre_adder_const_&#39;vc.33.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="LoopInvariant9">
         <goal name="pre_adder_const_&#39;vc.33.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="1.31" steps="23934"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="pre_adder_const_&#39;vc.33.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="0"><result status="valid" time="1.30" steps="23934"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="pre_adder_const_&#39;vc.33.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(k-1)" arg2="k1">
        <goal name="pre_adder_const_&#39;vc.33.0.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="LoopInvariant4">
         <goal name="pre_adder_const_&#39;vc.33.0.0.0.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="5.24" steps="1319081"/></proof>
         </goal>
         <goal name="pre_adder_const_&#39;vc.33.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="1.28" steps="23934"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="pre_adder_const_&#39;vc.33.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
        <proof prover="0"><result status="valid" time="1.30" steps="23934"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="pre_adder_const_&#39;vc.33.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="1.29" steps="23934"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="pre_adder_const_&#39;vc.33.0.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="1.31" steps="23950"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="pre_adder_const_&#39;vc.34" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="2.43"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.35" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="1.27" steps="23903"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.36" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="1.25" steps="23939"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.37" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="5.05" steps="1313826"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.38" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="1.20" steps="24096"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.39" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.27"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.40" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.20" steps="23361"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.41" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="LoopInvariant4">
   <goal name="pre_adder_const_&#39;vc.41.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(n+1)" arg2="k">
    <goal name="pre_adder_const_&#39;vc.41.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
    <goal name="pre_adder_const_&#39;vc.41.0.1" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="1.21" steps="23410"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="pre_adder_const_&#39;vc.41.1" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="1.22" steps="23410"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="pre_adder_const_&#39;vc.42" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_adder_const_&#39;vc.42.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures">
    <goal name="pre_adder_const_&#39;vc.42.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(ang_sum
  (fun (target:int) -&gt;
    ang_sum
    (fun (k1:int) -&gt;
      (((getbv y @ k1) * (getbv x @ target))
       * power 2 ((n - k1) + (n - target)))
      /./ (n + 1))
    (n - target) (n + 1))
  0 (n + 1))" arg2="(ang_sum
   (fun (target:int) -&gt;
     ang_sum
     (fun (k1:int) -&gt;
       (((getbv y @ k1) * (getbv x @ target))
        * power 2 ((((n + 1) - k1) - 1) + (((n + 1) - target) - 1)))
       /./ (n + 1))
     (((n + 1) - target) - 1) (n + 1))
   0 (n + 1))">
     <goal name="pre_adder_const_&#39;vc.42.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="Ensures2">
      <goal name="pre_adder_const_&#39;vc.42.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.24" steps="23413"/></proof>
      </goal>
      <goal name="pre_adder_const_&#39;vc.42.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.22" steps="23413"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="pre_adder_const_&#39;vc.42.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="ang_sum_eq">
      <goal name="pre_adder_const_&#39;vc.42.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.18" steps="23413"/></proof>
      </goal>
      <goal name="pre_adder_const_&#39;vc.42.0.0.1.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="pre_adder_const_&#39;vc.42.0.0.1.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="pre_adder_const_&#39;vc.42.0.0.1.1.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="5.04" steps="1316219"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="pre_adder_const_&#39;vc.42.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="5.01" steps="1312370"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="pre_adder_const_&#39;vc.43" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_adder_const_&#39;vc.43.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="2.31"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="pre_adder_const_&#39;vc.44" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_adder_const_&#39;vc.44.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.17" steps="23360"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="pre_adder_const_&#39;vc.45" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_adder_const_&#39;vc.45.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="path_sem_diag_apply">
    <goal name="pre_adder_const_&#39;vc.45.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.21" steps="23413"/></proof>
    </goal>
    <goal name="pre_adder_const_&#39;vc.45.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.18" steps="23413"/></proof>
    </goal>
    <goal name="pre_adder_const_&#39;vc.45.0.2" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="6.35" steps="260376"/></proof>
    </goal>
    <goal name="pre_adder_const_&#39;vc.45.0.3" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="2.17"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="pre_adder_const_&#39;vc.46" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_adder_const_&#39;vc.46.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.10" steps="23360"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="add_in_qft&#39;vc" expl="VC for add_in_qft" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_in_qft&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.12"/></proof>
  </goal>
  <goal name="add_in_qft&#39;vc.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.17"/></proof>
  </goal>
  <goal name="add_in_qft&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.24" steps="22955"/></proof>
  </goal>
  <goal name="add_in_qft&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.23" steps="23110"/></proof>
  </goal>
  <goal name="add_in_qft&#39;vc.4" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="apply_qft&#39;def">
   <goal name="add_in_qft&#39;vc.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="apply_qft&#39;def">
    <goal name="add_in_qft&#39;vc.4.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="path_sem_scal">
     <goal name="add_in_qft&#39;vc.4.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="path_sem_sum_">
      <goal name="add_in_qft&#39;vc.4.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="scalar_eq">
       <goal name="add_in_qft&#39;vc.4.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="ket_sum_eq">
        <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="2.41"/></proof>
        </goal>
        <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.94" steps="23110"/></proof>
        </goal>
        <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.2" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.2.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="path_sem_scal">
           <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="Ensures2">
            <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="scalar_assoc">
             <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="bv_to_int_to_bv">
              <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="replace" proved="true" arg1="(int_qft_coeff (mod1 added (power 2 (n + 1))) (bv_to_int a) (n + 1))" arg2="(int_qft_coeff ( added ) (bv_to_int a) (n + 1))">
               <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="1"><result status="valid" time="1.62"/></proof>
               </goal>
               <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.2.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
               <transf name="apply" proved="true" arg1="int_qft_coeff_eq" arg2="with" arg3="(n+1)">
                <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.2.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                <proof prover="0"><result status="valid" time="1.31" steps="23160"/></proof>
                </goal>
                <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.2.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
                <proof prover="1"><result status="valid" time="2.59"/></proof>
                </goal>
                <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.2.0.0.0.0.0.0.1.2" expl="apply premises" proved="true">
                <proof prover="1"><result status="valid" time="2.61"/></proof>
                </goal>
                <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.2.0.0.0.0.0.0.1.3" expl="apply premises" proved="true">
                <proof prover="0"><result status="valid" time="1.27" steps="23160"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="1"><result status="valid" time="2.46"/></proof>
              </goal>
              <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.2.0.0.0.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="1"><result status="valid" time="2.76"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="1"><result status="valid" time="2.47"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="1"><result status="valid" time="2.35"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="add_in_qft&#39;vc.4.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="1"><result status="valid" time="2.10"/></proof>
      </goal>
      <goal name="add_in_qft&#39;vc.4.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="1.14" steps="23110"/></proof>
      </goal>
      <goal name="add_in_qft&#39;vc.4.0.0.0.3" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="add_in_qft&#39;vc.4.0.0.0.3.0" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="add_in_qft&#39;vc.4.0.0.0.3.0.0" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="5.42" steps="1490681"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="add_in_qft&#39;vc.4.0.0.1" expl="rewrite premises" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures">
      <goal name="add_in_qft&#39;vc.4.0.0.1.0" expl="rewrite premises" proved="true">
      <proof prover="1"><result status="valid" time="2.36"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="add_in_qft&#39;vc.4.0.1" expl="rewrite premises" proved="true">
    <proof prover="1"><result status="valid" time="1.92"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="add_in_qft&#39;vc.4.1" expl="rewrite premises" proved="true">
   <proof prover="1"><result status="valid" time="1.97"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="add_in_qft&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.89" steps="23110"/></proof>
  </goal>
  <goal name="add_in_qft&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.90" steps="23110"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="place_add_in_qft&#39;vc" expl="VC for place_add_in_qft" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="place_add_in_qft&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.88" steps="22959"/></proof>
  </goal>
  <goal name="place_add_in_qft&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.91" steps="22959"/></proof>
  </goal>
  <goal name="place_add_in_qft&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.89" steps="23215"/></proof>
  </goal>
  <goal name="place_add_in_qft&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="1.79"/></proof>
  </goal>
  <goal name="place_add_in_qft&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.88" steps="23215"/></proof>
  </goal>
  <goal name="place_add_in_qft&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.91" steps="23215"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="place_add_in_comput_basis&#39;vc" expl="VC for place_add_in_comput_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="place_add_in_comput_basis&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.74"/></proof>
  </goal>
  <goal name="place_add_in_comput_basis&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.91" steps="22855"/></proof>
  </goal>
  <goal name="place_add_in_comput_basis&#39;vc.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.78"/></proof>
  </goal>
  <goal name="place_add_in_comput_basis&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.16" steps="22960"/></proof>
  </goal>
  <goal name="place_add_in_comput_basis&#39;vc.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.14" steps="22960"/></proof>
  </goal>
  <goal name="place_add_in_comput_basis&#39;vc.5" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="4.92" steps="1278318"/></proof>
  </goal>
  <goal name="place_add_in_comput_basis&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.19" steps="23164"/></proof>
  </goal>
  <goal name="place_add_in_comput_basis&#39;vc.7" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(kronecker (ket (n + 1) (mod1 (b + added) (power 2 (n + 1)))) z)" arg2="(kronecker
     (ket (n + 1) ((fun (i1:int) -&gt; mod1 (i1 + added) (power 2 (n + 1))) @ b))
     z)
">
   <goal name="place_add_in_comput_basis&#39;vc.7.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="Ensures2">
    <goal name="place_add_in_comput_basis&#39;vc.7.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.27" steps="23216"/></proof>
    </goal>
    <goal name="place_add_in_comput_basis&#39;vc.7.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.28" steps="23232"/></proof>
    </goal>
    <goal name="place_add_in_comput_basis&#39;vc.7.0.2" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures9">
     <goal name="place_add_in_comput_basis&#39;vc.7.0.2.0" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="2.60"/></proof>
     </goal>
     <goal name="place_add_in_comput_basis&#39;vc.7.0.2.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="1.26" steps="23216"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="place_add_in_comput_basis&#39;vc.7.1" expl="equality hypothesis" proved="true">
   <proof prover="2"><result status="valid" time="3.94" steps="1287186"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="place_add_in_comput_basis&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.21" steps="23163"/></proof>
  </goal>
  <goal name="place_add_in_comput_basis&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.88" steps="23163"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="div_bound&#39;vc" expl="VC for div_bound" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="div_bound&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.92" steps="22892"/></proof>
  </goal>
  <goal name="div_bound&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="5.07" steps="1274202"/></proof>
  </goal>
  <goal name="div_bound&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.18" steps="23026"/></proof>
  </goal>
  <goal name="div_bound&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="5.21" steps="1277050"/></proof>
  </goal>
  <goal name="div_bound&#39;vc.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.28" steps="22979"/></proof>
  </goal>
  <goal name="div_bound&#39;vc.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.26" steps="22979"/></proof>
  </goal>
  <goal name="div_bound&#39;vc.6" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.85"/></proof>
  </goal>
  <goal name="div_bound&#39;vc.7" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="5.25" steps="1277697"/></proof>
  </goal>
  <goal name="div_bound&#39;vc.8" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.33" steps="23103"/></proof>
  </goal>
  <goal name="div_bound&#39;vc.9" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="5.09" steps="1278622"/></proof>
  </goal>
  <goal name="div_bound&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.32" steps="23650"/></proof>
  </goal>
  <goal name="div_bound&#39;vc.11" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.32" steps="23713"/></proof>
  </goal>
  <goal name="div_bound&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="4.83" steps="1353600"/></proof>
  </goal>
  <goal name="div_bound&#39;vc.13" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.27" steps="23687"/></proof>
  </goal>
  <goal name="div_bound&#39;vc.14" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="div_bound&#39;vc.14.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.21" steps="23232"/></proof>
   </goal>
   <goal name="div_bound&#39;vc.14.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.21" steps="23258"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="div_bound&#39;vc.15" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="2.11"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ket_l_two_n_plus_two&#39;vc" expl="VC for ket_l_two_n_plus_two" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_l_two_n_plus_two&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.15"/></proof>
  </goal>
  <goal name="ket_l_two_n_plus_two&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.96" steps="23003"/></proof>
  </goal>
  <goal name="ket_l_two_n_plus_two&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.97" steps="23003"/></proof>
  </goal>
  <goal name="ket_l_two_n_plus_two&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.97" steps="23003"/></proof>
  </goal>
  <goal name="ket_l_two_n_plus_two&#39;vc.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.88"/></proof>
  </goal>
  <goal name="ket_l_two_n_plus_two&#39;vc.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.95" steps="23164"/></proof>
  </goal>
  <goal name="ket_l_two_n_plus_two&#39;vc.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.18" steps="23164"/></proof>
  </goal>
  <goal name="ket_l_two_n_plus_two&#39;vc.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.22" steps="23182"/></proof>
  </goal>
  <goal name="ket_l_two_n_plus_two&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.97" steps="23237"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ket_l_two_n_plus_four&#39;vc" expl="VC for ket_l_two_n_plus_four" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_l_two_n_plus_four&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.13"/></proof>
  </goal>
  <goal name="ket_l_two_n_plus_four&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.96" steps="23003"/></proof>
  </goal>
  <goal name="ket_l_two_n_plus_four&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.27" steps="23003"/></proof>
  </goal>
  <goal name="ket_l_two_n_plus_four&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.23" steps="23003"/></proof>
  </goal>
  <goal name="ket_l_two_n_plus_four&#39;vc.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.91"/></proof>
  </goal>
  <goal name="ket_l_two_n_plus_four&#39;vc.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.96" steps="23164"/></proof>
  </goal>
  <goal name="ket_l_two_n_plus_four&#39;vc.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.97" steps="23164"/></proof>
  </goal>
  <goal name="ket_l_two_n_plus_four&#39;vc.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.96" steps="23182"/></proof>
  </goal>
  <goal name="ket_l_two_n_plus_four&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.97" steps="23237"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="modular_adder&#39;vc" expl="VC for modular_adder" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="modular_adder&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.96" steps="22888"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="2.09"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.95" steps="22857"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.94" steps="22857"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.88" steps="23077"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.75"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="5.34" steps="1496601"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.21" steps="23708"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.8" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.22"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.9" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.21" steps="24044"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.10" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.21" steps="24185"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.11" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.20"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.12" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="5.73" steps="1584603"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.13" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.20"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.14" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="3.07"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.15" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="5.47" steps="1509004"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.16" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.20"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.17" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.22" steps="24319"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.18" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.25"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.19" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.02"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.20" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.20" steps="24998"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.21" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.33"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.22" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.32"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.23" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.25" steps="25339"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.24" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.26" steps="25339"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.25" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.24" steps="25482"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.26" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="3.38" steps="1030048"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.27" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="3.37" steps="1030051"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.28" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.54"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.29" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.25" steps="25567"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.30" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.32"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.31" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.29"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.32" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.27" steps="25551"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.33" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.23" steps="25550"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.34" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.28" steps="25549"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.35" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="5.66" steps="1556325"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.36" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures25">
   <goal name="modular_adder&#39;vc.36.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures40">
    <goal name="modular_adder&#39;vc.36.0.0" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="Ensures">
     <goal name="modular_adder&#39;vc.36.0.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.28" steps="25616"/></proof>
     </goal>
     <goal name="modular_adder&#39;vc.36.0.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.28" steps="25766"/></proof>
     </goal>
     <goal name="modular_adder&#39;vc.36.0.0.2" expl="apply premises" proved="true">
     <transf name="case" proved="true" arg1="((1 - div_bound) = 0)">
      <goal name="modular_adder&#39;vc.36.0.0.2.0" expl="true case (apply premises)" proved="true">
      <transf name="replace" proved="true" arg1="(n+2-1)" arg2="(n+1)" arg3="in" arg4="Ensures38">
       <goal name="modular_adder&#39;vc.36.0.0.2.0.0" expl="true case (apply premises)" proved="true">
       <transf name="rewrite" proved="true" arg1="Ensures38">
        <goal name="modular_adder&#39;vc.36.0.0.2.0.0.0" expl="true case (apply premises)" proved="true">
        <proof prover="0"><result status="valid" time="1.27" steps="25760"/></proof>
        </goal>
        <goal name="modular_adder&#39;vc.36.0.0.2.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="5"><result status="valid" time="1.30" steps="4406973"/></proof>
        </goal>
        <goal name="modular_adder&#39;vc.36.0.0.2.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="1"><result status="valid" time="2.57"/></proof>
        </goal>
        <goal name="modular_adder&#39;vc.36.0.0.2.0.0.3" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.25" steps="25744"/></proof>
        </goal>
        <goal name="modular_adder&#39;vc.36.0.0.2.0.0.4" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="ket_to_bv_ket">
         <goal name="modular_adder&#39;vc.36.0.0.2.0.0.4.0" expl="rewrite premises" proved="true">
         <transf name="rewrite" proved="true" arg1="int_to_bv_value_zero">
          <goal name="modular_adder&#39;vc.36.0.0.2.0.0.4.0.0" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="1.04" steps="25993"/></proof>
          </goal>
          <goal name="modular_adder&#39;vc.36.0.0.2.0.0.4.0.1" expl="rewrite premises" proved="true">
          <proof prover="1"><result status="valid" time="2.71"/></proof>
          </goal>
          <goal name="modular_adder&#39;vc.36.0.0.2.0.0.4.0.2" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="1.21" steps="25867"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="modular_adder&#39;vc.36.0.0.2.0.0.4.1" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="2.34"/></proof>
         </goal>
         <goal name="modular_adder&#39;vc.36.0.0.2.0.0.4.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="1.08" steps="25867"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="modular_adder&#39;vc.36.0.0.2.0.1" expl="equality hypothesis" proved="true">
       <proof prover="0"><result status="valid" time="1.09" steps="25744"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="modular_adder&#39;vc.36.0.0.2.1" expl="false case (apply premises)" proved="true">
      <transf name="replace" proved="true" arg1="((n + 2) - 1)" arg2="(n+1)" arg3="in" arg4="Ensures39">
       <goal name="modular_adder&#39;vc.36.0.0.2.1.0" expl="false case (apply premises)" proved="true">
       <transf name="rewrite" proved="true" arg1="Ensures39">
        <goal name="modular_adder&#39;vc.36.0.0.2.1.0.0" expl="false case (apply premises)" proved="true">
        <proof prover="0"><result status="valid" time="0.99" steps="25744"/></proof>
        </goal>
        <goal name="modular_adder&#39;vc.36.0.0.2.1.0.1" expl="rewrite premises" proved="true">
        <proof prover="5"><result status="valid" time="0.90" steps="4436650"/></proof>
        </goal>
        <goal name="modular_adder&#39;vc.36.0.0.2.1.0.2" expl="rewrite premises" proved="true">
        <proof prover="1"><result status="valid" time="2.18"/></proof>
        </goal>
        <goal name="modular_adder&#39;vc.36.0.0.2.1.0.3" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.01" steps="25711"/></proof>
        </goal>
        <goal name="modular_adder&#39;vc.36.0.0.2.1.0.4" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="ket_to_bv_ket">
         <goal name="modular_adder&#39;vc.36.0.0.2.1.0.4.0" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="3.80"/></proof>
         </goal>
         <goal name="modular_adder&#39;vc.36.0.0.2.1.0.4.1" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="2.40"/></proof>
         </goal>
         <goal name="modular_adder&#39;vc.36.0.0.2.1.0.4.2" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="2.79"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="modular_adder&#39;vc.36.0.0.2.1.1" expl="equality hypothesis" proved="true">
       <proof prover="0"><result status="valid" time="0.96" steps="25711"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.37" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.98" steps="25699"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.38" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.01" steps="25951"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.39" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.18" steps="26053"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.40" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.17"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.41" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.23" steps="26733"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.42" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.26" steps="26768"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.43" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="3.38" steps="1032715"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.44" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.28" steps="26780"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.45" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.27" steps="26797"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.46" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures34">
   <goal name="modular_adder&#39;vc.46.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures65">
    <goal name="modular_adder&#39;vc.46.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures21">
     <goal name="modular_adder&#39;vc.46.0.0.0" expl="precondition" proved="true">
     <transf name="case" proved="true" arg1="((1 - div_bound) = 0)">
      <goal name="modular_adder&#39;vc.46.0.0.0.0" expl="true case (precondition)" proved="true">
      <proof prover="1"><result status="valid" time="2.65"/></proof>
      </goal>
      <goal name="modular_adder&#39;vc.46.0.0.0.1" expl="false case (precondition)" proved="true">
      <transf name="replace" proved="true" arg1="((1 - div_bound) )" arg2="1">
       <goal name="modular_adder&#39;vc.46.0.0.0.1.0" expl="false case (precondition)" proved="true">
       <transf name="apply" proved="true" arg1="Ensures12">
        <goal name="modular_adder&#39;vc.46.0.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="1.30" steps="26926"/></proof>
        </goal>
        <goal name="modular_adder&#39;vc.46.0.0.0.1.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="3.89"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="modular_adder&#39;vc.46.0.0.0.1.1" expl="equality hypothesis" proved="true">
       <proof prover="0"><result status="valid" time="1.32" steps="26909"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.47" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.32" steps="26917"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.48" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.32" steps="27183"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.49" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.31" steps="27286"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.50" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.44"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.51" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.31" steps="27590"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.52" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.32" steps="27754"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.53" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.23" steps="27791"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.54" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="3.18" steps="1034699"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.55" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.02" steps="27801"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.56" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.26" steps="27801"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.57" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.27" steps="27818"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.58" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures22">
   <goal name="modular_adder&#39;vc.58.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures49">
    <goal name="modular_adder&#39;vc.58.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures2">
     <goal name="modular_adder&#39;vc.58.0.0.0" expl="precondition" proved="true">
     <proof prover="0"><result status="valid" time="1.29" steps="27868"/></proof>
     </goal>
     <goal name="modular_adder&#39;vc.58.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="1.26" steps="27986"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.59" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.27" steps="27939"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.60" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.42"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.61" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.29" steps="28206"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.62" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.33" steps="28309"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.63" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.47"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.64" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.42"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.65" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.32" steps="28499"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.66" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.43"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.67" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.55"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.68" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.38" steps="28776"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.69" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.39" steps="28776"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.70" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.39" steps="28941"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.71" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.38" steps="28978"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.72" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="3.53" steps="1037154"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.73" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.26"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.74" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.38" steps="29007"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.75" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.56"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.76" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.51"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.77" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.40" steps="28989"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.78" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.41" steps="28989"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.79" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.43" steps="28987"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.80" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.43" steps="29004"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.81" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures23">
   <goal name="modular_adder&#39;vc.81.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures40">
    <goal name="modular_adder&#39;vc.81.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures55">
     <goal name="modular_adder&#39;vc.81.0.0.0" expl="precondition" proved="true">
     <transf name="apply" proved="true" arg1="Ensures">
      <goal name="modular_adder&#39;vc.81.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.44" steps="29173"/></proof>
      </goal>
      <goal name="modular_adder&#39;vc.81.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.41" steps="29021"/></proof>
      </goal>
      <goal name="modular_adder&#39;vc.81.0.0.0.2" expl="apply premises" proved="true">
      <transf name="case" proved="true" arg1="(div_bound =0)">
       <goal name="modular_adder&#39;vc.81.0.0.0.2.0" expl="true case (apply premises)" proved="true">
       <proof prover="1"><result status="valid" time="3.02"/></proof>
       </goal>
       <goal name="modular_adder&#39;vc.81.0.0.0.2.1" expl="false case (apply premises)" proved="true">
       <transf name="replace" proved="true" arg1="(n + 2)" arg2="(n + 1+1)">
        <goal name="modular_adder&#39;vc.81.0.0.0.2.1.0" expl="false case (apply premises)" proved="true">
        <transf name="replace" proved="true" arg1="(1 - div_bound)" arg2="0">
         <goal name="modular_adder&#39;vc.81.0.0.0.2.1.0.0" expl="false case (apply premises)" proved="true">
         <transf name="apply" proved="true" arg1="Ensures38">
          <goal name="modular_adder&#39;vc.81.0.0.0.2.1.0.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="modular_adder&#39;vc.81.0.0.0.2.1.0.0.0.0" proved="true">
           <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="(mod1 (pre + mod_post) bound - mod_post),(power 2 (n + 1)),(-1),(power 2 (n + 1)+mod1 (pre + mod_post) bound - mod_post)">
            <goal name="modular_adder&#39;vc.81.0.0.0.2.1.0.0.0.0.0" proved="true">
            <proof prover="2"><result status="valid" time="6.05" steps="1618100"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="modular_adder&#39;vc.81.0.0.0.2.1.0.0.0.1" proved="true">
           <proof prover="2"><result status="valid" time="3.42" steps="1037572"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="modular_adder&#39;vc.81.0.0.0.2.1.0.1" expl="equality hypothesis" proved="true">
         <proof prover="0"><result status="valid" time="1.36" steps="29172"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="modular_adder&#39;vc.81.0.0.0.2.1.1" expl="equality hypothesis" proved="true">
        <proof prover="0"><result status="valid" time="1.42" steps="29171"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.82" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.40" steps="29126"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.83" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.38" steps="29393"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.84" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.37" steps="29497"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.85" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.83"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.86" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.39" steps="29669"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.87" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.40" steps="29836"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.88" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.44" steps="29874"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.89" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="3.50" steps="1039417"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.90" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.42" steps="29881"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.91" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.44" steps="29881"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.92" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.41" steps="29899"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.93" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="5.93" steps="1623129"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.94" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.41" steps="30021"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.95" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.42" steps="30312"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.96" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(mod1 (pre + post) bound)" arg2="(mod1 (pre + mod_post) bound)">
   <goal name="modular_adder&#39;vc.96.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.42" steps="30349"/></proof>
   </goal>
   <goal name="modular_adder&#39;vc.96.1" expl="equality hypothesis" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="modular_adder&#39;vc.96.1.0" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="mod_post&#39;def">
     <goal name="modular_adder&#39;vc.96.1.0.0" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="add_mod_right">
      <goal name="modular_adder&#39;vc.96.1.0.0.0" expl="equality hypothesis" proved="true">
      <proof prover="0"><result status="valid" time="2.19" steps="47651"/></proof>
      </goal>
      <goal name="modular_adder&#39;vc.96.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="2.21" steps="47651"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.97" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.44" steps="30502"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.98" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.40" steps="30587"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.99" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.17" steps="22856"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.100" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.14" steps="23128"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.101" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="result" arg2="(modular_adder_ (mod1 pre bound))">
   <goal name="modular_adder&#39;vc.101.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="modular_adder&#39;vc.101.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H2">
     <goal name="modular_adder&#39;vc.101.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="add_mod_left">
      <goal name="modular_adder&#39;vc.101.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="0.83" steps="23127"/></proof>
      </goal>
      <goal name="modular_adder&#39;vc.101.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.99" steps="23127"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="modular_adder&#39;vc.101.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="1"><result status="valid" time="1.80"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="modular_adder&#39;vc.101.1" expl="equality hypothesis" proved="true">
   <proof prover="1"><result status="valid" time="2.02"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.102" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.93" steps="23127"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="multiplier_qft_pre&#39;vc" expl="VC for multiplier_qft_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="multiplier_qft_pre&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.87" steps="22860"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_qft_pre&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="2.22"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.2" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="multiplier_qft_pre&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="multiplier_qft_pre&#39;vc.2.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="j" arg2="n">
     <goal name="multiplier_qft_pre&#39;vc.2.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="int_to_bv_sum_rev">
      <goal name="multiplier_qft_pre&#39;vc.2.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="1.63" steps="31583"/></proof>
      </goal>
      <goal name="multiplier_qft_pre&#39;vc.2.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="1.68" steps="31583"/></proof>
      </goal>
      <goal name="multiplier_qft_pre&#39;vc.2.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="1.67" steps="31583"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="multiplier_qft_pre&#39;vc.2.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="0"><result status="valid" time="1.53" steps="31583"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.3" expl="assertion" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="multiplier_qft_pre&#39;vc.3.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="H8">
    <goal name="multiplier_qft_pre&#39;vc.3.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="ind_isum_re">
     <goal name="multiplier_qft_pre&#39;vc.3.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="H8">
      <goal name="multiplier_qft_pre&#39;vc.3.0.0.0.0" expl="assertion" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="multiplier_qft_pre&#39;vc.3.0.0.0.0.0" expl="assertion" proved="true">
       <transf name="assert" proved="true" arg1="(forall i1 i2 i21 i22. i21 = i2*i22 -&gt;b+ (p * (i1+i21)) = b+p*i1+p*i2*i22)
">
        <goal name="multiplier_qft_pre&#39;vc.3.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="0"><result status="valid" time="0.96" steps="22915"/></proof>
        </goal>
        <goal name="multiplier_qft_pre&#39;vc.3.0.0.0.0.0.1" expl="assertion" proved="true">
        <transf name="replace" proved="true" arg1="((j + 1) - 1)" arg2="j">
         <goal name="multiplier_qft_pre&#39;vc.3.0.0.0.0.0.1.0" expl="assertion" proved="true">
         <transf name="apply" proved="true" arg1="h">
          <goal name="multiplier_qft_pre&#39;vc.3.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.97" steps="22860"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="multiplier_qft_pre&#39;vc.3.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
         <proof prover="0"><result status="valid" time="0.97" steps="22860"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="multiplier_qft_pre&#39;vc.3.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.97" steps="22860"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="multiplier_qft_pre&#39;vc.3.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.98" steps="22860"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="multiplier_qft_pre&#39;vc.3.0.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="0.97" steps="22876"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_qft_pre&#39;vc.4.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.08" steps="22860"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.97" steps="23084"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.15" steps="23084"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.12" steps="23084"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.8" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.13" steps="23218"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.9" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.91" steps="23184"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="6.38" steps="1590045"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.11" expl="assertion" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="multiplier_qft_pre&#39;vc.11.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="H8">
    <goal name="multiplier_qft_pre&#39;vc.11.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="modular_adder&#39;spec1">
     <goal name="multiplier_qft_pre&#39;vc.11.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="H8">
      <goal name="multiplier_qft_pre&#39;vc.11.0.0.0.0" expl="assertion" proved="true">
      <transf name="rewrite" proved="true" arg1="Assert">
       <goal name="multiplier_qft_pre&#39;vc.11.0.0.0.0.0" expl="assertion" proved="true">
       <proof prover="0"><result status="valid" time="1.19" steps="22966"/></proof>
       </goal>
       <goal name="multiplier_qft_pre&#39;vc.11.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="1.28" steps="22915"/></proof>
       </goal>
       <goal name="multiplier_qft_pre&#39;vc.11.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="1.30" steps="22915"/></proof>
       </goal>
       <goal name="multiplier_qft_pre&#39;vc.11.0.0.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="1.35" steps="22914"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="multiplier_qft_pre&#39;vc.11.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="1.43" steps="22932"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="multiplier_qft_pre&#39;vc.11.0.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="1.51" steps="22915"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.12" expl="assertion" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="multiplier_qft_pre&#39;vc.12.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="H8">
    <goal name="multiplier_qft_pre&#39;vc.12.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="Assert1">
     <goal name="multiplier_qft_pre&#39;vc.12.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="H8">
      <goal name="multiplier_qft_pre&#39;vc.12.0.0.0.0" expl="assertion" proved="true">
      <proof prover="2"><result status="valid" time="4.60" steps="1545923"/></proof>
      </goal>
      <goal name="multiplier_qft_pre&#39;vc.12.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="7.20" steps="1605648"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="multiplier_qft_pre&#39;vc.12.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="1.54" steps="22914"/></proof>
     </goal>
     <goal name="multiplier_qft_pre&#39;vc.12.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="1.63" steps="22914"/></proof>
     </goal>
     <goal name="multiplier_qft_pre&#39;vc.12.0.0.3" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="1.71" steps="22914"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="multiplier_qft_pre&#39;vc.12.0.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="1.88" steps="22932"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.13" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.61" steps="22860"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.14" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.64" steps="22860"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.15" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.67" steps="22860"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.16" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.45" steps="22910"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.17" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="b" arg2="(mod1 b bound)">
   <goal name="multiplier_qft_pre&#39;vc.17.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="multiplier_qft_pre&#39;vc.17.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="multiplier_qft_pre&#39;vc.17.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="result&#39;def">
      <goal name="multiplier_qft_pre&#39;vc.17.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H10">
       <goal name="multiplier_qft_pre&#39;vc.17.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="H12">
        <goal name="multiplier_qft_pre&#39;vc.17.0.0.0.0.0.0" expl="postcondition" proved="true">
        <proof prover="0"><result status="valid" time="1.99" steps="32137"/></proof>
        </goal>
        <goal name="multiplier_qft_pre&#39;vc.17.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.91" steps="32137"/></proof>
        </goal>
        <goal name="multiplier_qft_pre&#39;vc.17.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.87" steps="32137"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="multiplier_qft_pre&#39;vc.17.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="1.63" steps="32137"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="multiplier_qft_pre&#39;vc.17.1" expl="equality hypothesis" proved="true">
   <proof prover="1"><result status="valid" time="2.71"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.18" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_qft_pre&#39;vc.18.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="multiplier_qft_pre&#39;vc.18.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="multiplier_qft_pre&#39;vc.18.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="result&#39;def">
      <goal name="multiplier_qft_pre&#39;vc.18.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H10">
       <goal name="multiplier_qft_pre&#39;vc.18.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="H11">
        <goal name="multiplier_qft_pre&#39;vc.18.0.0.0.0.0.0" expl="postcondition" proved="true">
        <proof prover="0"><result status="valid" time="1.77" steps="32205"/></proof>
        </goal>
        <goal name="multiplier_qft_pre&#39;vc.18.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.83" steps="32205"/></proof>
        </goal>
        <goal name="multiplier_qft_pre&#39;vc.18.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.88" steps="32205"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="multiplier_qft_pre&#39;vc.18.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="1.74" steps="32205"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.19" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="6.80" steps="1577502"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.20" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.83"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.21" expl="loop invariant init" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_qft_pre&#39;vc.21.0" expl="loop invariant init" proved="true">
   <proof prover="0"><result status="valid" time="1.35" steps="23112"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.22" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="4.90" steps="1256328"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.23" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="3.09"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.24" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="3.03"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.25" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.30" steps="23318"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.26" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.35" steps="23335"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.27" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.37" steps="23319"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.28" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.37" steps="23578"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.29" expl="loop variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="1.37" steps="23975"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.30" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="1.35" steps="23975"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.31" expl="loop invariant preservation" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures1">
   <goal name="multiplier_qft_pre&#39;vc.31.0" expl="loop invariant preservation" proved="true">
   <transf name="apply" proved="true" arg1="ancilla_free_seq">
    <goal name="multiplier_qft_pre&#39;vc.31.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.31" steps="23995"/></proof>
    </goal>
    <goal name="multiplier_qft_pre&#39;vc.31.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.26" steps="23994"/></proof>
    </goal>
    <goal name="multiplier_qft_pre&#39;vc.31.0.2" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="4.43" steps="1374782"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.32" expl="loop invariant preservation" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="multiplier_qft_pre&#39;vc.32.0" expl="loop invariant preservation" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures1">
    <goal name="multiplier_qft_pre&#39;vc.32.0.0" expl="loop invariant preservation" proved="true">
    <transf name="apply" proved="true" arg1="path_sem_comp" arg2="with" arg3="(regs b i (j-1))">
     <goal name="multiplier_qft_pre&#39;vc.32.0.0.0" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="3.09"/></proof>
     </goal>
     <goal name="multiplier_qft_pre&#39;vc.32.0.0.1" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="3.18"/></proof>
     </goal>
     <goal name="multiplier_qft_pre&#39;vc.32.0.0.2" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="H10">
      <goal name="multiplier_qft_pre&#39;vc.32.0.0.2.0" expl="apply premises" proved="true">
      <transf name="case" proved="true" arg1="((getbv (ket_to_bv (ket n i)) @ j1) = 1)">
       <goal name="multiplier_qft_pre&#39;vc.32.0.0.2.0.0" expl="true case (apply premises)" proved="true">
       <transf name="rewrite" proved="true" arg1="cont_kron_pat_right">
        <goal name="multiplier_qft_pre&#39;vc.32.0.0.2.0.0.0" expl="true case (apply premises)" proved="true">
        <proof prover="1"><result status="valid" time="3.33"/></proof>
        </goal>
        <goal name="multiplier_qft_pre&#39;vc.32.0.0.2.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.35" steps="24108"/></proof>
        </goal>
        <goal name="multiplier_qft_pre&#39;vc.32.0.0.2.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.37" steps="24108"/></proof>
        </goal>
        <goal name="multiplier_qft_pre&#39;vc.32.0.0.2.0.0.3" expl="rewrite premises" proved="true">
        <proof prover="1"><result status="valid" time="3.24"/></proof>
        </goal>
        <goal name="multiplier_qft_pre&#39;vc.32.0.0.2.0.0.4" expl="rewrite premises" proved="true">
        <proof prover="1"><result status="valid" time="3.45"/></proof>
        </goal>
        <goal name="multiplier_qft_pre&#39;vc.32.0.0.2.0.0.5" expl="rewrite premises" proved="true">
        <proof prover="1"><result status="valid" time="3.60"/></proof>
        </goal>
        <goal name="multiplier_qft_pre&#39;vc.32.0.0.2.0.0.6" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.44" steps="24108"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="multiplier_qft_pre&#39;vc.32.0.0.2.0.1" expl="false case (apply premises)" proved="true">
       <transf name="rewrite" proved="true" arg1="cont_kron_pat_right1">
        <goal name="multiplier_qft_pre&#39;vc.32.0.0.2.0.1.0" expl="false case (apply premises)" proved="true">
        <proof prover="1"><result status="valid" time="4.20"/></proof>
        </goal>
        <goal name="multiplier_qft_pre&#39;vc.32.0.0.2.0.1.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.34" steps="24071"/></proof>
        </goal>
        <goal name="multiplier_qft_pre&#39;vc.32.0.0.2.0.1.2" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.31" steps="24071"/></proof>
        </goal>
        <goal name="multiplier_qft_pre&#39;vc.32.0.0.2.0.1.3" expl="rewrite premises" proved="true">
        <proof prover="1"><result status="valid" time="3.11"/></proof>
        </goal>
        <goal name="multiplier_qft_pre&#39;vc.32.0.0.2.0.1.4" expl="rewrite premises" proved="true">
        <proof prover="1"><result status="valid" time="3.07"/></proof>
        </goal>
        <goal name="multiplier_qft_pre&#39;vc.32.0.0.2.0.1.5" expl="rewrite premises" proved="true">
        <proof prover="1"><result status="valid" time="3.13"/></proof>
        </goal>
        <goal name="multiplier_qft_pre&#39;vc.32.0.0.2.0.1.6" expl="rewrite premises" proved="true">
        <proof prover="1"><result status="valid" time="4.20"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="multiplier_qft_pre&#39;vc.32.0.0.2.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="1.36" steps="24069"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="multiplier_qft_pre&#39;vc.32.0.0.3" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.34" steps="24052"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.33" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="1.33" steps="24066"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.34" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.32" steps="23255"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.35" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.84"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.36" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.34" steps="23256"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.37" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.31" steps="23256"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.38" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="1.24" steps="23424"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.39" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="multiplier_qft_pre&#39;vc.39.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures1" arg2="with" arg3="(fun b -&gt; mod1   (b+(p * i)) bound)">
    <goal name="multiplier_qft_pre&#39;vc.39.0.0" expl="assertion" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="multiplier_qft_pre&#39;vc.39.0.0.0" expl="assertion" proved="true">
     <proof prover="1"><result status="valid" time="3.77"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="multiplier_qft_pre&#39;vc.39.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="6.39" steps="1563864"/></proof>
    </goal>
    <goal name="multiplier_qft_pre&#39;vc.39.0.2" expl="rewrite premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="multiplier_qft_pre&#39;vc.39.0.2.0" expl="rewrite premises" proved="true">
     <transf name="replace" proved="true" arg1="(kronecker (ket n i) (kronecker (apply_qft (n + 1) b) (ket 1 0)))" arg2="(regs b i 0)">
      <goal name="multiplier_qft_pre&#39;vc.39.0.2.0.0" expl="rewrite premises" proved="true">
      <transf name="replace" proved="true" arg1="(kronecker (ket n i)
  (kronecker (apply_qft (n + 1) (mod1 (b + (p * i)) bound)) (ket 1 0)))" arg2="(regs b i n)">
       <goal name="multiplier_qft_pre&#39;vc.39.0.2.0.0.0" expl="rewrite premises" proved="true">
       <proof prover="1"><result status="valid" time="2.91"/></proof>
       </goal>
       <goal name="multiplier_qft_pre&#39;vc.39.0.2.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="1"><result status="valid" time="2.96"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="multiplier_qft_pre&#39;vc.39.0.2.0.1" expl="equality hypothesis" proved="true">
      <proof prover="1"><result status="valid" time="2.45"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="multiplier_qft_pre&#39;vc.39.0.3" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="1.28" steps="23463"/></proof>
    </goal>
    <goal name="multiplier_qft_pre&#39;vc.39.0.4" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="multiplier_qft_pre&#39;vc.39.0.4.0" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="multiplier_qft_pre&#39;vc.39.0.4.0.0" expl="rewrite premises" proved="true">
      <proof prover="1"><result status="valid" time="2.89"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="multiplier_qft_pre&#39;vc.39.0.4.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="6.46" steps="1591168"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="multiplier_qft_pre&#39;vc.39.0.5" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="multiplier_qft_pre&#39;vc.39.0.5.0" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="multiplier_qft_pre&#39;vc.39.0.5.0.0" expl="rewrite premises" proved="true">
      <transf name="replace" proved="true" arg1="(kronecker (ket n i) (kronecker (apply_qft (n + 1) b) (ket 1 0)))" arg2="(regs b i 0)">
       <goal name="multiplier_qft_pre&#39;vc.39.0.5.0.0.0" expl="rewrite premises" proved="true">
       <transf name="replace" proved="true" arg1="(kronecker (ket n i)
  (kronecker (apply_qft (n + 1) (mod1 (b + (p * i)) bound)) (ket 1 0)))" arg2="(regs b i n)">
        <goal name="multiplier_qft_pre&#39;vc.39.0.5.0.0.0.0" expl="rewrite premises" proved="true">
        <proof prover="1"><result status="valid" time="2.13"/></proof>
        </goal>
        <goal name="multiplier_qft_pre&#39;vc.39.0.5.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="1"><result status="valid" time="2.83"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="multiplier_qft_pre&#39;vc.39.0.5.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="1"><result status="valid" time="2.27"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.40" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="4.04" steps="1295885"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.41" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="2.65"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.42" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.20" steps="23492"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.43" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.18" steps="23492"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="cont_restricted_modular_multiplier&#39;vc" expl="VC for cont_restricted_modular_multiplier" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cont_restricted_modular_multiplier&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.28" steps="22907"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.54"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.45"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="6.55" steps="1301458"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.91"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.11" steps="23023"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.6" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.97"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.7" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="4.10"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.8" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.41" steps="23008"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.9" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.71" steps="23008"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.10" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.45" steps="23044"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.11" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.40" steps="23112"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.12" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="cont_restricted_modular_multiplier&#39;vc.12.0" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="path_sem_comp" arg2="with" arg3="(kronecker (ket n i)  (kronecker( (ket (n+1) (mod1   (p * i ) bound)) ) (ket 1 0)))
">
    <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.0" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="3.16"/></proof>
    </goal>
    <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.1" expl="apply premises" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.1.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="H3">
      <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.1.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="Ensures14">
       <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="3.09"/></proof>
       </goal>
       <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.1.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="1.45" steps="23418"/></proof>
       </goal>
       <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.1.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="1.70" steps="23418"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="1.47" steps="23418"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.2" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(ket (n + 1) (mod1 (p * i) bound))" arg2="(kronecker (ket 1 0) (ket n (mod1 (p * i) bound)))
">
     <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.2.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="swap_lists_kets">
      <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.2.0.0" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="3.07"/></proof>
      </goal>
      <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.2.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="3.08"/></proof>
      </goal>
      <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.2.0.2" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.43" steps="23434"/></proof>
      </goal>
      <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.2.0.3" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="3.09"/></proof>
      </goal>
      <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.2.0.4" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="3.05"/></proof>
      </goal>
      <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.2.0.5" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.38" steps="23434"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.2.1" expl="equality hypothesis" proved="true">
     <proof prover="1"><result status="valid" time="4.77"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.3" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.46" steps="23418"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.13" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="cont_restricted_modular_multiplier&#39;vc.13.0" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="ancilla_free_seq">
    <goal name="cont_restricted_modular_multiplier&#39;vc.13.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.82" steps="23415"/></proof>
    </goal>
    <goal name="cont_restricted_modular_multiplier&#39;vc.13.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.47" steps="23415"/></proof>
    </goal>
    <goal name="cont_restricted_modular_multiplier&#39;vc.13.0.2" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="4.72" steps="1174826"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.14" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.69" steps="23465"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.15" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.59" steps="23465"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.16" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.41" steps="23556"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.17" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.36" steps="23640"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.18" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="cont_restricted_modular_multiplier&#39;vc.18.0" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="path_sem_comp" arg2="with" arg3="(kronecker (ket n (mod1 (p * i) bound))
   (kronecker (kronecker (ket 1 0) (ket n i)) (ket 1 0)))">
    <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.0" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="5.92" steps="1452797"/></proof>
    </goal>
    <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.1" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="2.83"/></proof>
    </goal>
    <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(kronecker (ket 1 0) (ket n i))" arg2="(ket (n+1) i)">
     <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures10">
      <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(mod1
      (i
       + (mod1 (- modular_inverse p bound) bound * mod1 (p* i) bound))
      bound)" arg2="0
">
       <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.28" steps="24278"/></proof>
       </goal>
       <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="replace" proved="true" arg1="(mod1
  (i + (mod1 (- modular_inverse p bound) bound * mod1 (p * i) bound))
  bound)" arg2="(mod1
  (mod1 i bound + mod1 ((mod1 (- modular_inverse p bound) bound * mod1 (p * i) bound))
  bound)bound)">
        <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0.1.0" expl="equality hypothesis" proved="true">
        <transf name="rewrite" proved="true" arg1="mod_mod_mult">
         <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0.1.0.0" expl="equality hypothesis" proved="true">
         <transf name="assert" proved="true" arg1="(forall a b c. -a * (b*c) = a*b* -c)

">
          <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0.1.0.0.0" expl="asserted formula" proved="true">
          <proof prover="0"><result status="valid" time="1.30" steps="24278"/></proof>
          </goal>
          <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
          <transf name="rewrite" proved="true" arg1="h">
           <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0.1.0.0.1.0" expl="equality hypothesis" proved="true">
           <transf name="rewrite" proved="true" arg1="mod_mod_mult_rev">
            <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0.1.0.0.1.0.0" expl="equality hypothesis" proved="true">
            <transf name="rewrite" proved="true" arg1="one_mult">
             <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0.1.0.0.1.0.0.0" expl="equality hypothesis" proved="true">
             <proof prover="1"><result status="valid" time="3.74"/></proof>
             </goal>
             <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0.1.0.0.1.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="0"><result status="valid" time="1.25" steps="24279"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0.1.0.0.1.0.1" expl="rewrite premises" proved="true">
            <proof prover="0"><result status="valid" time="1.24" steps="24279"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="1.21" steps="24278"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0.1.1" expl="equality hypothesis" proved="true">
        <transf name="rewrite" proved="true" arg1="add_mod_left">
         <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0.1.1.0" expl="equality hypothesis" proved="true">
         <transf name="rewrite" proved="true" arg1="add_mod_right">
          <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0.1.1.0.0" expl="equality hypothesis" proved="true">
          <proof prover="0"><result status="valid" time="1.22" steps="24278"/></proof>
          </goal>
          <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0.1.1.0.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="1.22" steps="24278"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0.1.1.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="1.24" steps="24278"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="1.24" steps="24278"/></proof>
      </goal>
      <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.2" expl="rewrite premises" proved="true">
      <proof prover="1"><result status="valid" time="2.57"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.1" expl="equality hypothesis" proved="true">
     <proof prover="1"><result status="valid" time="2.58"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.3" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.00" steps="24278"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.19" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.53"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.20" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="kronecker_assoc_use">
   <goal name="cont_restricted_modular_multiplier&#39;vc.20.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="kronecker_assoc_use">
    <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures">
     <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0" expl="assertion" proved="true">
     <transf name="apply" proved="true" arg1="Ensures2">
      <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(width c1)" arg2="(n+ (n+2))">
       <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="3.27"/></proof>
       </goal>
       <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="0"><result status="valid" time="1.21" steps="24816"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.1" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(kronecker (ket n i) (ket (n + 2) 0))" arg2="(reg_init i)">
       <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="Assert1">
        <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="kronecker_eq">
         <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="1.25" steps="24816"/></proof>
         </goal>
         <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.1.0.0.1" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="kronecker_kets">
          <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.1.0.0.1.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="kronecker_kets">
           <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.1.0.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="1.22" steps="24834"/></proof>
           </goal>
           <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.1.0.0.1.0.1" expl="rewrite premises" proved="true">
           <proof prover="1"><result status="valid" time="2.61"/></proof>
           </goal>
           <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.1.0.0.1.0.2" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="1.19" steps="24816"/></proof>
           </goal>
           <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.1.0.0.1.0.3" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="5.46" steps="1457383"/></proof>
           </goal>
           <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.1.0.0.1.0.4" expl="rewrite premises" proved="true">
           <proof prover="1"><result status="valid" time="2.51"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.1.0.0.1.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="1.21" steps="24816"/></proof>
          </goal>
          <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.1.0.0.1.2" expl="rewrite premises" proved="true">
          <proof prover="1"><result status="valid" time="2.53"/></proof>
          </goal>
          <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.1.0.0.1.3" expl="rewrite premises" proved="true">
          <proof prover="1"><result status="valid" time="2.76"/></proof>
          </goal>
          <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.1.0.0.1.4" expl="rewrite premises" proved="true">
          <proof prover="1"><result status="valid" time="2.61"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.1.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.22" steps="24816"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.1.1" expl="equality hypothesis" proved="true">
       <transf name="replace" proved="true" arg1="(ket (n + 2) 0)" arg2="(kronecker (ket (n + 1) 0) (ket 1 0))">
        <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.1.1.0" expl="equality hypothesis" proved="true">
        <proof prover="1"><result status="valid" time="2.78"/></proof>
        </goal>
        <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.1.1.1" expl="equality hypothesis" proved="true">
        <transf name="rewrite" proved="true" arg1="kronecker_kets">
         <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.1.1.1.0" expl="equality hypothesis" proved="true">
         <proof prover="0"><result status="valid" time="1.24" steps="24833"/></proof>
         </goal>
         <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.1.1.1.1" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="2.62"/></proof>
         </goal>
         <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.1.1.1.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="1.23" steps="24816"/></proof>
         </goal>
         <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.1.1.1.3" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="5.56" steps="1457294"/></proof>
         </goal>
         <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.1.1.1.4" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="2.61"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.21" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="(ket (n + 1) i)" arg2="(kronecker (ket 1 0) (ket (n ) i))">
   <goal name="cont_restricted_modular_multiplier&#39;vc.21.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="kronecker_assoc_use">
    <goal name="cont_restricted_modular_multiplier&#39;vc.21.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures">
     <goal name="cont_restricted_modular_multiplier&#39;vc.21.0.0.0" expl="assertion" proved="true">
     <transf name="apply" proved="true" arg1="Ensures1">
      <goal name="cont_restricted_modular_multiplier&#39;vc.21.0.0.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(width c1)" arg2="(n+(n+2))">
       <goal name="cont_restricted_modular_multiplier&#39;vc.21.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="3.94"/></proof>
       </goal>
       <goal name="cont_restricted_modular_multiplier&#39;vc.21.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="0"><result status="valid" time="1.04" steps="24816"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="cont_restricted_modular_multiplier&#39;vc.21.1" expl="equality hypothesis" proved="true">
   <proof prover="1"><result status="valid" time="2.63"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.22" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="1.23" steps="24832"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.23" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="4.08" steps="1218841"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.24" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.26" steps="24900"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.25" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.27" steps="24900"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.26" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.28" steps="25432"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.27" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ket (n + 1) i)" arg2="(kronecker (ket 1 0) (ket (n ) i))">
   <goal name="cont_restricted_modular_multiplier&#39;vc.27.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="kronecker_assoc_use_rev">
    <goal name="cont_restricted_modular_multiplier&#39;vc.27.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(ket (n + 1) (mod1 (pick * i) bound))" arg2="(kronecker (ket 1 0) (ket (n ) (mod1 (pick * i) bound)))">
     <goal name="cont_restricted_modular_multiplier&#39;vc.27.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures1">
      <goal name="cont_restricted_modular_multiplier&#39;vc.27.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="place_kron_right">
       <goal name="cont_restricted_modular_multiplier&#39;vc.27.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="Assert3">
        <goal name="cont_restricted_modular_multiplier&#39;vc.27.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="kronecker_assoc_use">
         <goal name="cont_restricted_modular_multiplier&#39;vc.27.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="apply" proved="true" arg1="kronecker_eq">
          <goal name="cont_restricted_modular_multiplier&#39;vc.27.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="2.74"/></proof>
          </goal>
          <goal name="cont_restricted_modular_multiplier&#39;vc.27.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="1.27" steps="25451"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="cont_restricted_modular_multiplier&#39;vc.27.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.02" steps="25451"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="cont_restricted_modular_multiplier&#39;vc.27.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="1.29" steps="25451"/></proof>
       </goal>
       <goal name="cont_restricted_modular_multiplier&#39;vc.27.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="1.29" steps="25452"/></proof>
       </goal>
       <goal name="cont_restricted_modular_multiplier&#39;vc.27.0.0.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="1.19" steps="25451"/></proof>
       </goal>
       <goal name="cont_restricted_modular_multiplier&#39;vc.27.0.0.0.0.4" expl="rewrite premises" proved="true">
       <proof prover="1"><result status="valid" time="3.68"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="cont_restricted_modular_multiplier&#39;vc.27.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="1"><result status="valid" time="3.32"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="cont_restricted_modular_multiplier&#39;vc.27.1" expl="equality hypothesis" proved="true">
   <proof prover="1"><result status="valid" time="2.56"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.28" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ket (n + 1) i)" arg2="(kronecker (ket 1 0) (ket (n ) i))">
   <goal name="cont_restricted_modular_multiplier&#39;vc.28.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="kronecker_assoc_use_rev">
    <goal name="cont_restricted_modular_multiplier&#39;vc.28.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(ket (n + 1) (mod1 (pick * i) bound))" arg2="(kronecker (ket 1 0) (ket (n ) (mod1 (pick * i) bound)))">
     <goal name="cont_restricted_modular_multiplier&#39;vc.28.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures2">
      <goal name="cont_restricted_modular_multiplier&#39;vc.28.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="place_kron_right">
       <goal name="cont_restricted_modular_multiplier&#39;vc.28.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="1"><result status="valid" time="2.56"/></proof>
       </goal>
       <goal name="cont_restricted_modular_multiplier&#39;vc.28.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="1.27" steps="25451"/></proof>
       </goal>
       <goal name="cont_restricted_modular_multiplier&#39;vc.28.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="1.23" steps="25451"/></proof>
       </goal>
       <goal name="cont_restricted_modular_multiplier&#39;vc.28.0.0.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="1.21" steps="25451"/></proof>
       </goal>
       <goal name="cont_restricted_modular_multiplier&#39;vc.28.0.0.0.0.4" expl="rewrite premises" proved="true">
       <transf name="replace" proved="true" arg1="(((2 * n) + 4) - 1)" arg2="(n + (n+2+1) )">
        <goal name="cont_restricted_modular_multiplier&#39;vc.28.0.0.0.0.4.0" expl="rewrite premises" proved="true">
        <transf name="apply" proved="true" arg1="kronecker_ket_l">
         <goal name="cont_restricted_modular_multiplier&#39;vc.28.0.0.0.0.4.0.0" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="2.48"/></proof>
         </goal>
         <goal name="cont_restricted_modular_multiplier&#39;vc.28.0.0.0.0.4.0.1" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="2.15"/></proof>
         </goal>
         <goal name="cont_restricted_modular_multiplier&#39;vc.28.0.0.0.0.4.0.2" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="2.29"/></proof>
         </goal>
         <goal name="cont_restricted_modular_multiplier&#39;vc.28.0.0.0.0.4.0.3" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="5.17" steps="1466811"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="cont_restricted_modular_multiplier&#39;vc.28.0.0.0.0.4.1" expl="equality hypothesis" proved="true">
        <proof prover="0"><result status="valid" time="0.99" steps="25451"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="cont_restricted_modular_multiplier&#39;vc.28.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="1"><result status="valid" time="2.73"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="cont_restricted_modular_multiplier&#39;vc.28.1" expl="equality hypothesis" proved="true">
   <proof prover="1"><result status="valid" time="2.15"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.29" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="3.22" steps="1219842"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="modular_multiplier&#39;vc" expl="VC for modular_multiplier" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="modular_multiplier&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="3.92" steps="1302001"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="3.98" steps="1348595"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.2" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="modular_multiplier&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="mod_inf" arg2="in" arg3="result&#39;def">
    <goal name="modular_multiplier&#39;vc.2.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="1.33" steps="31502"/></proof>
    </goal>
    <goal name="modular_multiplier&#39;vc.2.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="4.28" steps="1191498"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="(j-bound),(power 2 (n+1)),(-1),(power 2 (n+1)+j-bound)">
    <goal name="modular_multiplier&#39;vc.3.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="4.58" steps="1308320"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="modular_multiplier&#39;vc.3.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.95" steps="22928"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.96" steps="22907"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.94" steps="22979"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="2.23"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="1.81"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.94" steps="23181"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.9" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ket_to_bv_ket">
   <goal name="modular_multiplier&#39;vc.9.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="2.29"/></proof>
   </goal>
   <goal name="modular_multiplier&#39;vc.9.1" expl="rewrite premises" proved="true">
   <proof prover="1"><result status="valid" time="1.89"/></proof>
   </goal>
   <goal name="modular_multiplier&#39;vc.9.2" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="0.95" steps="23071"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.10" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier&#39;vc.10.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.80"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.11" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.96"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.12" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures2">
   <goal name="modular_multiplier&#39;vc.12.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="2.17"/></proof>
   </goal>
   <goal name="modular_multiplier&#39;vc.12.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="4.35" steps="1297479"/></proof>
   </goal>
   <goal name="modular_multiplier&#39;vc.12.2" expl="rewrite premises" proved="true">
   <proof prover="1"><result status="valid" time="2.59"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.13" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.04"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.14" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.96" steps="23026"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.15" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.03"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.16" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.93" steps="23269"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.17" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.83"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.18" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.97" steps="23272"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.19" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.97" steps="23428"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.20" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="modular_multiplier&#39;vc.20.0" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="path_sem_comp" arg2="with" arg3="(kronecker (ket (n + 1) (modib @ i)) (kronecker (ket (n + 2) 0) (ket 1 0)))">
    <goal name="modular_multiplier&#39;vc.20.0.0" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="2.96"/></proof>
    </goal>
    <goal name="modular_multiplier&#39;vc.20.0.1" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="2.08"/></proof>
    </goal>
    <goal name="modular_multiplier&#39;vc.20.0.2" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="insert_qbits_path_sem_basis">
     <goal name="modular_multiplier&#39;vc.20.0.2.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.01" steps="23734"/></proof>
     </goal>
     <goal name="modular_multiplier&#39;vc.20.0.2.1" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="2.06"/></proof>
     </goal>
     <goal name="modular_multiplier&#39;vc.20.0.2.2" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="2.22"/></proof>
     </goal>
     <goal name="modular_multiplier&#39;vc.20.0.2.3" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="2.19"/></proof>
     </goal>
     <goal name="modular_multiplier&#39;vc.20.0.2.4" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="2.49"/></proof>
     </goal>
     <goal name="modular_multiplier&#39;vc.20.0.2.5" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="2.39"/></proof>
     </goal>
     <goal name="modular_multiplier&#39;vc.20.0.2.6" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.00" steps="23734"/></proof>
     </goal>
     <goal name="modular_multiplier&#39;vc.20.0.2.7" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.99"/></proof>
     </goal>
     <goal name="modular_multiplier&#39;vc.20.0.2.8" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.97"/></proof>
     </goal>
     <goal name="modular_multiplier&#39;vc.20.0.2.9" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.97" steps="23750"/></proof>
     </goal>
     <goal name="modular_multiplier&#39;vc.20.0.2.10" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="2.20"/></proof>
     </goal>
     <goal name="modular_multiplier&#39;vc.20.0.2.11" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="4.33" steps="1399618"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="modular_multiplier&#39;vc.20.0.3" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.98" steps="23734"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.21" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.97" steps="23749"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.22" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="4.22" steps="1369642"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.23" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.95"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.24" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.97" steps="23922"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.25" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="modular_multiplier&#39;vc.25.0" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="path_sem_comp" arg2="with" arg3="(kronecker (ket (n + 1) (modib @ i))
   (kronecker (ket (n + 2) 0) (ket 1 (g @ i))))">
    <goal name="modular_multiplier&#39;vc.25.0.0" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="4.29" steps="1404186"/></proof>
    </goal>
    <goal name="modular_multiplier&#39;vc.25.0.1" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="2.02"/></proof>
    </goal>
    <goal name="modular_multiplier&#39;vc.25.0.2" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures10">
     <goal name="modular_multiplier&#39;vc.25.0.2.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(mod1 ((modib @ i) + bound) (power 2 (n + 1)))" arg2="i">
      <goal name="modular_multiplier&#39;vc.25.0.2.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.00" steps="24523"/></proof>
      </goal>
      <goal name="modular_multiplier&#39;vc.25.0.2.0.1" expl="equality hypothesis" proved="true">
      <transf name="case" proved="true" arg1="(i&lt;bound)">
       <goal name="modular_multiplier&#39;vc.25.0.2.0.1.0" expl="true case (equality hypothesis)" proved="true">
       <transf name="replace" proved="true" arg1="((modib @ i) )" arg2="(mod1 (i - bound) (power 2 (n + 1)))">
        <goal name="modular_multiplier&#39;vc.25.0.2.0.1.0.0" expl="true case (equality hypothesis)" proved="true">
        <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="(i-bound),(power 2 (n+1)),(-1),(power 2 (n+1)+i-bound)">
         <goal name="modular_multiplier&#39;vc.25.0.2.0.1.0.0.0" expl="true case (equality hypothesis)" proved="true">
         <transf name="replace" proved="true" arg1="(mod1 (i - bound) (power 2 (n + 1)))" arg2="((power 2 (n + 1) + i) - bound)">
          <goal name="modular_multiplier&#39;vc.25.0.2.0.1.0.0.0.0" expl="true case (equality hypothesis)" proved="true">
          <transf name="replace" proved="true" arg1="(((power 2 (n + 1) + i) - bound) + bound)" arg2="(((1*power 2 (n + 1) + i)  ))">
           <goal name="modular_multiplier&#39;vc.25.0.2.0.1.0.0.0.0.0" expl="true case (equality hypothesis)" proved="true">
           <transf name="rewrite" proved="true" arg1="mod_plus_fact_gen_mod">
            <goal name="modular_multiplier&#39;vc.25.0.2.0.1.0.0.0.0.0.0" expl="true case (equality hypothesis)" proved="true">
            <transf name="apply" proved="true" arg1="mod_inf">
             <goal name="modular_multiplier&#39;vc.25.0.2.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="4.26" steps="1452884"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="modular_multiplier&#39;vc.25.0.2.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="2"><result status="valid" time="4.45" steps="1452844"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="modular_multiplier&#39;vc.25.0.2.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="0"><result status="valid" time="1.01" steps="24594"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="modular_multiplier&#39;vc.25.0.2.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="2"><result status="valid" time="4.43" steps="1453665"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="modular_multiplier&#39;vc.25.0.2.0.1.0.1" expl="equality hypothesis" proved="true">
        <proof prover="1"><result status="valid" time="1.98"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="modular_multiplier&#39;vc.25.0.2.0.1.1" expl="false case (equality hypothesis)" proved="true">
       <transf name="replace" proved="true" arg1="((modib @ i) )" arg2="(mod1 (i - bound) (power 2 (n + 1)))">
        <goal name="modular_multiplier&#39;vc.25.0.2.0.1.1.0" expl="false case (equality hypothesis)" proved="true">
        <transf name="rewrite" proved="true" arg1="mod_inf">
         <goal name="modular_multiplier&#39;vc.25.0.2.0.1.1.0.0" expl="false case (equality hypothesis)" proved="true">
         <transf name="rewrite" proved="true" arg1="mod_inf">
          <goal name="modular_multiplier&#39;vc.25.0.2.0.1.1.0.0.0" expl="false case (equality hypothesis)" proved="true">
          <proof prover="0"><result status="valid" time="1.00" steps="24525"/></proof>
          </goal>
          <goal name="modular_multiplier&#39;vc.25.0.2.0.1.1.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="4.59" steps="1439024"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="modular_multiplier&#39;vc.25.0.2.0.1.1.0.1" expl="rewrite premises" proved="true">
         <transf name="rewrite" proved="true" arg1="mod_inf">
          <goal name="modular_multiplier&#39;vc.25.0.2.0.1.1.0.1.0" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="4.68" steps="1439017"/></proof>
          </goal>
          <goal name="modular_multiplier&#39;vc.25.0.2.0.1.1.0.1.1" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="4.61" steps="1439024"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="modular_multiplier&#39;vc.25.0.2.0.1.1.1" expl="equality hypothesis" proved="true">
        <proof prover="1"><result status="valid" time="2.17"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="modular_multiplier&#39;vc.25.0.2.1" expl="rewrite premises" proved="true">
     <proof prover="1"><result status="valid" time="2.44"/></proof>
     </goal>
     <goal name="modular_multiplier&#39;vc.25.0.2.2" expl="rewrite premises" proved="true">
     <proof prover="1"><result status="valid" time="3.27"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="modular_multiplier&#39;vc.25.0.3" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.01" steps="24523"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.26" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.94" steps="24539"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.27" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="3.01" steps="1145618"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.28" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="2.34"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.29" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.97" steps="24606"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.30" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.99" steps="24606"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.31" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.00" steps="24609"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.32" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.01" steps="25059"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.33" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="2.12"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.34" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.99" steps="24606"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.35" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.98" steps="24606"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.36" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.99" steps="24708"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.37" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="path_sem_comp" arg2="with" arg3="(kronecker (ket (n + 1) i) (kronecker (ket (n + 2) 0) (ket 1 (g @ i))))">
   <goal name="modular_multiplier&#39;vc.37.0" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="4.37" steps="1409878"/></proof>
   </goal>
   <goal name="modular_multiplier&#39;vc.37.1" expl="apply premises" proved="true">
   <proof prover="1"><result status="valid" time="2.04"/></proof>
   </goal>
   <goal name="modular_multiplier&#39;vc.37.2" expl="apply premises" proved="true">
   <proof prover="1"><result status="valid" time="3.71"/></proof>
   </goal>
   <goal name="modular_multiplier&#39;vc.37.3" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="1.02" steps="25262"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.38" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="1.02" steps="25261"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.39" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="ancilla_free_seq">
   <goal name="modular_multiplier&#39;vc.39.0" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.99" steps="25261"/></proof>
   </goal>
   <goal name="modular_multiplier&#39;vc.39.1" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.98" steps="25261"/></proof>
   </goal>
   <goal name="modular_multiplier&#39;vc.39.2" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.97" steps="25261"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.40" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.99" steps="25311"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.41" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.03" steps="25464"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.42" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="modular_multiplier&#39;vc.42.0" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="path_sem_comp" arg2="with" arg3="(kronecker (ket (n + 1) (i_image @ i))
   (kronecker (ket (n + 2) 0) (ket 1 (g @ i))))">
    <goal name="modular_multiplier&#39;vc.42.0.0" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="4.14" steps="1405269"/></proof>
    </goal>
    <goal name="modular_multiplier&#39;vc.42.0.1" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="2.12"/></proof>
    </goal>
    <goal name="modular_multiplier&#39;vc.42.0.2" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="path_sem_reverse">
     <goal name="modular_multiplier&#39;vc.42.0.2.0" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="4.24" steps="1405600"/></proof>
     </goal>
     <goal name="modular_multiplier&#39;vc.42.0.2.1" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures25">
      <goal name="modular_multiplier&#39;vc.42.0.2.1.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="5.11" steps="1430373"/></proof>
      </goal>
      <goal name="modular_multiplier&#39;vc.42.0.2.1.1" expl="rewrite premises" proved="true">
      <proof prover="1"><result status="valid" time="2.43"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="modular_multiplier&#39;vc.42.0.2.2" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.03" steps="25773"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="modular_multiplier&#39;vc.42.0.3" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.04" steps="25773"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.43" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="1.03" steps="25789"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.44" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.21"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.45" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_bijective_auto">
   <goal name="modular_multiplier&#39;vc.45.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="modular_multiplier&#39;vc.45.0.0" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="4.87" steps="1488881"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="modular_multiplier&#39;vc.45.1" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="modular_multiplier&#39;vc.45.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="modular_multiplier&#39;vc.45.1.0.0" expl="apply premises" proved="true">
     <transf name="exists" proved="true" arg1="(if e&#39; &lt; ((2 * n) + 4) -1 then e&#39; +1 else 0)">
      <goal name="modular_multiplier&#39;vc.45.1.0.0.0" proved="true">
      <proof prover="2"><result status="valid" time="4.37" steps="1459401"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.46" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="modular_multiplier&#39;vc.46.0" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="with_permutation_kronecker_gen">
    <goal name="modular_multiplier&#39;vc.46.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.05" steps="26403"/></proof>
    </goal>
    <goal name="modular_multiplier&#39;vc.46.0.1" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="2.15"/></proof>
    </goal>
    <goal name="modular_multiplier&#39;vc.46.0.2" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.05" steps="26403"/></proof>
    </goal>
    <goal name="modular_multiplier&#39;vc.46.0.3" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="2.44"/></proof>
    </goal>
    <goal name="modular_multiplier&#39;vc.46.0.4" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.07" steps="26403"/></proof>
    </goal>
    <goal name="modular_multiplier&#39;vc.46.0.5" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="2.30"/></proof>
    </goal>
    <goal name="modular_multiplier&#39;vc.46.0.6" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.02" steps="26404"/></proof>
    </goal>
    <goal name="modular_multiplier&#39;vc.46.0.7" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="2.16"/></proof>
    </goal>
    <goal name="modular_multiplier&#39;vc.46.0.8" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(kronecker (ket 1 0) (kronecker (ket n i) (ket (n + 3) 0)))" arg2="(kronecker (ket (n + 1) i) (kronecker (ket (n + 2) 0) (ket 1 0)))">
     <goal name="modular_multiplier&#39;vc.46.0.8.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="Assert2">
      <goal name="modular_multiplier&#39;vc.46.0.8.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="goal_comm">
       <goal name="modular_multiplier&#39;vc.46.0.8.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="kronecker_assoc_use">
        <goal name="modular_multiplier&#39;vc.46.0.8.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="kronecker_eq">
         <goal name="modular_multiplier&#39;vc.46.0.8.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="2.21"/></proof>
         </goal>
         <goal name="modular_multiplier&#39;vc.46.0.8.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="kronecker_kets">
          <goal name="modular_multiplier&#39;vc.46.0.8.0.0.0.0.1.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="1.07" steps="26420"/></proof>
          </goal>
          <goal name="modular_multiplier&#39;vc.46.0.8.0.0.0.0.1.1" expl="rewrite premises" proved="true">
          <proof prover="1"><result status="valid" time="2.39"/></proof>
          </goal>
          <goal name="modular_multiplier&#39;vc.46.0.8.0.0.0.0.1.2" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="1.07" steps="26403"/></proof>
          </goal>
          <goal name="modular_multiplier&#39;vc.46.0.8.0.0.0.0.1.3" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="4.19" steps="1408408"/></proof>
          </goal>
          <goal name="modular_multiplier&#39;vc.46.0.8.0.0.0.0.1.4" expl="rewrite premises" proved="true">
          <proof prover="1"><result status="valid" time="2.10"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="modular_multiplier&#39;vc.46.0.8.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="1.06" steps="26403"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="modular_multiplier&#39;vc.46.0.8.1" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="kronecker_assoc_use">
      <goal name="modular_multiplier&#39;vc.46.0.8.1.0" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="kronecker_eq">
       <goal name="modular_multiplier&#39;vc.46.0.8.1.0.0" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="2.45"/></proof>
       </goal>
       <goal name="modular_multiplier&#39;vc.46.0.8.1.0.1" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="kronecker_kets">
        <goal name="modular_multiplier&#39;vc.46.0.8.1.0.1.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="1.05" steps="26420"/></proof>
        </goal>
        <goal name="modular_multiplier&#39;vc.46.0.8.1.0.1.1" expl="rewrite premises" proved="true">
        <proof prover="1"><result status="valid" time="2.03"/></proof>
        </goal>
        <goal name="modular_multiplier&#39;vc.46.0.8.1.0.1.2" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.04" steps="26403"/></proof>
        </goal>
        <goal name="modular_multiplier&#39;vc.46.0.8.1.0.1.3" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="4.31" steps="1408408"/></proof>
        </goal>
        <goal name="modular_multiplier&#39;vc.46.0.8.1.0.1.4" expl="rewrite premises" proved="true">
        <proof prover="1"><result status="valid" time="2.05"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.47" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="modular_multiplier&#39;vc.47.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures6">
    <goal name="modular_multiplier&#39;vc.47.0.0" expl="assertion" proved="true">
    <proof prover="0"><result status="valid" time="1.06" steps="26401"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.48" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="set_ancilla_free">
   <goal name="modular_multiplier&#39;vc.48.0" expl="apply premises" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures">
    <goal name="modular_multiplier&#39;vc.48.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures7">
     <goal name="modular_multiplier&#39;vc.48.0.0.0" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="2.99" steps="1111494"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.49" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.30"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.50" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.41"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.51" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="x" arg2="(ket n (ket_to_int x))">
   <goal name="modular_multiplier&#39;vc.51.0" expl="precondition" proved="true">
   <transf name="exists" proved="true" arg1="(ket n (i_image (ket_to_int x)))">
    <goal name="modular_multiplier&#39;vc.51.0.0" proved="true">
    <transf name="replace" proved="true" arg1="((ket (n + 4) 0))" arg2="(kronecker (ket (n + 3) 0) (ket 1 0))">
     <goal name="modular_multiplier&#39;vc.51.0.0.0" proved="true">
     <transf name="rewrite" proved="true" arg1="kronecker_assoc_use">
      <goal name="modular_multiplier&#39;vc.51.0.0.0.0" proved="true">
      <transf name="rewrite" proved="true" arg1="kronecker_assoc_use">
       <goal name="modular_multiplier&#39;vc.51.0.0.0.0.0" proved="true">
       <transf name="apply" proved="true" arg1="Assert2">
        <goal name="modular_multiplier&#39;vc.51.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="2.50"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="modular_multiplier&#39;vc.51.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="kronecker_kets">
      <goal name="modular_multiplier&#39;vc.51.0.0.1.0" expl="equality hypothesis" proved="true">
      <proof prover="0"><result status="valid" time="1.05" steps="26625"/></proof>
      </goal>
      <goal name="modular_multiplier&#39;vc.51.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="1.02" steps="26608"/></proof>
      </goal>
      <goal name="modular_multiplier&#39;vc.51.0.0.1.2" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="1.04" steps="26607"/></proof>
      </goal>
      <goal name="modular_multiplier&#39;vc.51.0.0.1.3" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="4.22" steps="1397755"/></proof>
      </goal>
      <goal name="modular_multiplier&#39;vc.51.0.0.1.4" expl="rewrite premises" proved="true">
      <proof prover="1"><result status="valid" time="2.48"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="modular_multiplier&#39;vc.51.1" expl="equality hypothesis" proved="true">
   <proof prover="1"><result status="valid" time="2.63"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.52" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.03" steps="26837"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.53" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures1">
   <goal name="modular_multiplier&#39;vc.53.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="Ensures9">
    <goal name="modular_multiplier&#39;vc.53.0.0" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="2.46"/></proof>
    </goal>
    <goal name="modular_multiplier&#39;vc.53.0.1" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(kronecker (ket n i) (ket (n + 4) 0))" arg2="(kronecker (kronecker (ket n i) (ket (n + 3) 0)) (ket 1 0))">
     <goal name="modular_multiplier&#39;vc.53.0.1.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="Assert2">
      <goal name="modular_multiplier&#39;vc.53.0.1.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="kronecker_assoc_use_rev">
       <goal name="modular_multiplier&#39;vc.53.0.1.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="kronecker_eq">
        <goal name="modular_multiplier&#39;vc.53.0.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="(g i = 1)">
         <goal name="modular_multiplier&#39;vc.53.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="1"><result status="valid" time="2.57"/></proof>
         </goal>
         <goal name="modular_multiplier&#39;vc.53.0.1.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="2.18"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="modular_multiplier&#39;vc.53.0.1.0.0.0.1" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="kronecker_kets">
         <goal name="modular_multiplier&#39;vc.53.0.1.0.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="1.02" steps="26881"/></proof>
         </goal>
         <goal name="modular_multiplier&#39;vc.53.0.1.0.0.0.1.1" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="2.46"/></proof>
         </goal>
         <goal name="modular_multiplier&#39;vc.53.0.1.0.0.0.1.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="1.03" steps="26865"/></proof>
         </goal>
         <goal name="modular_multiplier&#39;vc.53.0.1.0.0.0.1.3" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="4.73" steps="1400608"/></proof>
         </goal>
         <goal name="modular_multiplier&#39;vc.53.0.1.0.0.0.1.4" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="2.10"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="modular_multiplier&#39;vc.53.0.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="1"><result status="valid" time="2.59"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="modular_multiplier&#39;vc.53.0.1.1" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="kronecker_assoc_use_rev">
      <goal name="modular_multiplier&#39;vc.53.0.1.1.0" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="kronecker_eq">
       <goal name="modular_multiplier&#39;vc.53.0.1.1.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.05" steps="26865"/></proof>
       </goal>
       <goal name="modular_multiplier&#39;vc.53.0.1.1.0.1" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="kronecker_kets">
        <goal name="modular_multiplier&#39;vc.53.0.1.1.0.1.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="1.04" steps="26881"/></proof>
        </goal>
        <goal name="modular_multiplier&#39;vc.53.0.1.1.0.1.1" expl="rewrite premises" proved="true">
        <proof prover="1"><result status="valid" time="2.10"/></proof>
        </goal>
        <goal name="modular_multiplier&#39;vc.53.0.1.1.0.1.2" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.06" steps="26865"/></proof>
        </goal>
        <goal name="modular_multiplier&#39;vc.53.0.1.1.0.1.3" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="4.20" steps="1400608"/></proof>
        </goal>
        <goal name="modular_multiplier&#39;vc.53.0.1.1.0.1.4" expl="rewrite premises" proved="true">
        <proof prover="1"><result status="valid" time="2.17"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.54" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures2">
   <goal name="modular_multiplier&#39;vc.54.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="Ensures10">
    <goal name="modular_multiplier&#39;vc.54.0.0" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="2.12"/></proof>
    </goal>
    <goal name="modular_multiplier&#39;vc.54.0.1" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(kronecker (ket n i) (ket (n + 4) 0))" arg2="(kronecker (kronecker (ket n i) (ket (n + 3) 0)) (ket 1 0))
">
     <goal name="modular_multiplier&#39;vc.54.0.1.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="Assert2">
      <goal name="modular_multiplier&#39;vc.54.0.1.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="kronecker_eq">
       <goal name="modular_multiplier&#39;vc.54.0.1.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="kronecker_eq">
        <goal name="modular_multiplier&#39;vc.54.0.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="(g i = 0)">
         <goal name="modular_multiplier&#39;vc.54.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="1"><result status="valid" time="2.18"/></proof>
         </goal>
         <goal name="modular_multiplier&#39;vc.54.0.1.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="2.23"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="modular_multiplier&#39;vc.54.0.1.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="1.05" steps="26865"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="modular_multiplier&#39;vc.54.0.1.0.0.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.04" steps="26865"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="modular_multiplier&#39;vc.54.0.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="1.06" steps="26865"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="modular_multiplier&#39;vc.54.0.1.1" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="kronecker_assoc_use_rev">
      <goal name="modular_multiplier&#39;vc.54.0.1.1.0" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="kronecker_eq">
       <goal name="modular_multiplier&#39;vc.54.0.1.1.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.04" steps="26865"/></proof>
       </goal>
       <goal name="modular_multiplier&#39;vc.54.0.1.1.0.1" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="kronecker_kets">
        <goal name="modular_multiplier&#39;vc.54.0.1.1.0.1.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="1.05" steps="26881"/></proof>
        </goal>
        <goal name="modular_multiplier&#39;vc.54.0.1.1.0.1.1" expl="rewrite premises" proved="true">
        <proof prover="1"><result status="valid" time="2.19"/></proof>
        </goal>
        <goal name="modular_multiplier&#39;vc.54.0.1.1.0.1.2" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.07" steps="26865"/></proof>
        </goal>
        <goal name="modular_multiplier&#39;vc.54.0.1.1.0.1.3" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="4.51" steps="1462901"/></proof>
        </goal>
        <goal name="modular_multiplier&#39;vc.54.0.1.1.0.1.4" expl="rewrite premises" proved="true">
        <proof prover="1"><result status="valid" time="2.17"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="reg_final&#39;vc" expl="VC for reg_final" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="reg_final&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.96" steps="22940"/></proof>
  </goal>
  <goal name="reg_final&#39;vc.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.02"/></proof>
  </goal>
  <goal name="reg_final&#39;vc.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.84"/></proof>
  </goal>
  <goal name="reg_final&#39;vc.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.80"/></proof>
  </goal>
  <goal name="reg_final&#39;vc.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.84"/></proof>
  </goal>
  <goal name="reg_final&#39;vc.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.91"/></proof>
  </goal>
  <goal name="reg_final&#39;vc.6" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.81"/></proof>
  </goal>
  <goal name="reg_final&#39;vc.7" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.93"/></proof>
  </goal>
  <goal name="reg_final&#39;vc.8" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.97"/></proof>
  </goal>
  <goal name="reg_final&#39;vc.9" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="reg_final&#39;vc.9.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="result&#39;def">
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="reg_final&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="1.88"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="shor_circuit&#39;vc" expl="VC for shor_circuit" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="shor_circuit&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.72"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.79"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.81"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.04"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.08"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.10"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.6" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.13"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.7" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="3.24"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.8" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.11"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.9" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.18"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.10" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.39"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.11" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.99"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.12" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.33" steps="23987"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.13" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.20"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.14" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="2.65" steps="1277825"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.15" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.00" steps="24315"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.16" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="shor_circuit&#39;vc.16.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="shor_circuit&#39;vc.16.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(3*n)" arg2="(2*n+n)">
     <goal name="shor_circuit&#39;vc.16.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="kronecker_ket_l">
      <goal name="shor_circuit&#39;vc.16.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.66" steps="34778"/></proof>
      </goal>
      <goal name="shor_circuit&#39;vc.16.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.41" steps="34778"/></proof>
      </goal>
      <goal name="shor_circuit&#39;vc.16.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.41" steps="34803"/></proof>
      </goal>
      <goal name="shor_circuit&#39;vc.16.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="3.90"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="shor_circuit&#39;vc.16.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="0"><result status="valid" time="1.40" steps="34777"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shor_circuit&#39;vc.17" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="shor_circuit&#39;vc.17.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="shor_circuit&#39;vc.17.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ind_isum_empty">
     <goal name="shor_circuit&#39;vc.17.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Power_zero">
      <goal name="shor_circuit&#39;vc.17.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="1"><result status="valid" time="8.48"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="shor_circuit&#39;vc.17.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="2.21" steps="34956"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shor_circuit&#39;vc.18" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="shor_circuit&#39;vc.18.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="shor_circuit&#39;vc.18.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
     <goal name="shor_circuit&#39;vc.18.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(ind_isum (fun (l:int) -&gt; (getbv x @ l) * power 2 (((2 * n) - l) - 1)) 0
      k)" arg2="(ind_isum
      (fun (k1:int) -&gt; (getbv x @ k1) * power 2 ((x.length1 - 1) - k1)) 0
      (x.length1))">
      <goal name="shor_circuit&#39;vc.18.0.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
      </transf>
      </goal>
      <goal name="shor_circuit&#39;vc.18.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
       <goal name="shor_circuit&#39;vc.18.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="shor_circuit&#39;vc.18.0.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="shor_circuit&#39;vc.18.0.0.0.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="1.42" steps="35056"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="shor_circuit&#39;vc.18.0.0.0.1.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.42" steps="35028"/></proof>
       </goal>
       <goal name="shor_circuit&#39;vc.18.0.0.0.1.2" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.42" steps="35028"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shor_circuit&#39;vc.19" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="3.04"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.20" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="3.10"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.21" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="3.86"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.22" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="3.56"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.23" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.96"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.24" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="1.27" steps="25050"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.25" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="2.62"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.26" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="2.81"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.27" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.68" steps="25107"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.28" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.77"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.29" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="4.10"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.30" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.52" steps="25161"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.31" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="3.01"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.32" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.40" steps="25214"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.33" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.00" steps="25250"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.34" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.38" steps="25234"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.35" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.42" steps="25251"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.36" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="5.65" steps="1388098"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.37" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="co_prime_mod">
   <goal name="shor_circuit&#39;vc.37.0" expl="apply premises" proved="true">
   <proof prover="1"><result status="valid" time="2.56"/></proof>
   </goal>
   <goal name="shor_circuit&#39;vc.37.1" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="1.01" steps="25215"/></proof>
   </goal>
   <goal name="shor_circuit&#39;vc.37.2" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.95" steps="25215"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="shor_circuit&#39;vc.38" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.97" steps="25271"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.39" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.35" steps="25290"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.40" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.22" steps="25274"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.41" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.63" steps="25550"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.42" expl="loop variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="1.02" steps="25970"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.43" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="1.02" steps="25972"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.44" expl="loop invariant preservation" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures1">
   <goal name="shor_circuit&#39;vc.44.0" expl="loop invariant preservation" proved="true">
   <transf name="apply" proved="true" arg1="path_sem_comp" arg2="with" arg3="(regs (k-1) x)">
    <goal name="shor_circuit&#39;vc.44.0.0" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(width c1)" arg2="(3*n)">
     <goal name="shor_circuit&#39;vc.44.0.0.0" expl="apply premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="shor_circuit&#39;vc.44.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="H9">
       <goal name="shor_circuit&#39;vc.44.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.45" steps="26051"/></proof>
       </goal>
       <goal name="shor_circuit&#39;vc.44.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.40" steps="26050"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="shor_circuit&#39;vc.44.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="0"><result status="valid" time="1.24" steps="26051"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="shor_circuit&#39;vc.44.0.1" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="2.98"/></proof>
    </goal>
    <goal name="shor_circuit&#39;vc.44.0.2" expl="apply premises" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="shor_circuit&#39;vc.44.0.2.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="H10">
      <goal name="shor_circuit&#39;vc.44.0.2.0.0" expl="apply premises" proved="true">
      <transf name="case" proved="true" arg1="(getbv x (k-1) =1)">
       <goal name="shor_circuit&#39;vc.44.0.2.0.0.0" expl="true case (apply premises)" proved="true">
       <transf name="rewrite" proved="true" arg1="cont_kron_pat_right">
        <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0" expl="true case (apply premises)" proved="true">
        <transf name="rewrite" proved="true" arg1="H10">
         <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.0" expl="true case (apply premises)" proved="true">
         <transf name="apply" proved="true" arg1="kronecker_eq">
          <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="1.08" steps="26110"/></proof>
          </goal>
          <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.0.1" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="modular_multiplier&#39;spec1">
           <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.0.1.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="ket_eq">
            <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="1.50" steps="26110"/></proof>
            </goal>
            <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="1.06" steps="26110"/></proof>
            </goal>
            <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.0.1.0.2" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="mod_mod_mult">
             <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.0.1.0.2.0" expl="apply premises" proved="true">
             <transf name="replace" proved="true" arg1="(ind_isum (fun (l:int) -&gt; (getbv x @ l) * power 2 (((2 * n) - l) - 1)) 0 k)" arg2="(ind_isum (fun (l:int) -&gt; (getbv x @ l) * power 2 (((2 * n) - l) - 1)) 0 (k-1+1))
">
              <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.0.1.0.2.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="ind_isum_right_extension">
               <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.0.1.0.2.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="power_sum">
                <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.0.1.0.2.0.0.0.0" expl="apply premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.0.1.0.2.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="apply" proved="true" arg1="mod_eq">
                  <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.0.1.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="assert" proved="true" arg1="(forall a b c. a= c -&gt; a*b = b*c )">
                   <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.0.1.0.2.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                   <proof prover="0"><result status="valid" time="1.33" steps="26169"/></proof>
                   </goal>
                   <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.0.1.0.2.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                   <transf name="apply" proved="true" arg1="h">
                    <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.0.1.0.2.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                    <proof prover="0"><result status="valid" time="1.28" steps="26149"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.0.1.0.2.0.0.0.1" expl="rewrite premises" proved="true">
                <transf name="apply" proved="true" arg1="ind_isum_pos">
                 <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.0.1.0.2.0.0.0.1.0" expl="apply premises" proved="true">
                 <proof prover="0"><result status="valid" time="1.29" steps="26110"/></proof>
                 </goal>
                 <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.0.1.0.2.0.0.0.1.1" expl="apply premises" proved="true">
                 <transf name="compute_specified" proved="true" >
                  <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.0.1.0.2.0.0.0.1.1.0" expl="apply premises" proved="true">
                  <proof prover="1"><result status="valid" time="3.66"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.0.1.0.2.0.0.0.2" expl="rewrite premises" proved="true">
                <proof prover="1"><result status="valid" time="3.56"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.0.1.0.2.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="0"><result status="valid" time="1.43" steps="26110"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.0.1.0.2.0.1" expl="equality hypothesis" proved="true">
              <transf name="replace" proved="true" arg1="((k - 1) + 1)" arg2="k">
               <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.0.1.0.2.0.1.0" expl="equality hypothesis" proved="true">
               <transf name="compute_specified" proved="true" >
               </transf>
               </goal>
               <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.0.1.0.2.0.1.1" expl="equality hypothesis" proved="true">
               <proof prover="0"><result status="valid" time="1.77" steps="26110"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.0.1.0.2.1" expl="rewrite premises" proved="true">
             <proof prover="0"><result status="valid" time="1.06" steps="26110"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.0.1.1.0" proved="true">
            <proof prover="0"><result status="valid" time="1.23" steps="26110"/></proof>
            </goal>
            <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.0.1.1.1" proved="true">
            <proof prover="2"><result status="valid" time="6.05" steps="1864036"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.0.1.2" expl="rewrite premises" proved="true">
           <proof prover="1"><result status="valid" time="3.17"/></proof>
           </goal>
           <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.0.1.3" expl="rewrite premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.0.1.3.0" proved="true">
            <transf name="apply" proved="true" arg1="bound_mod1">
             <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.0.1.3.0.0" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="1.83" steps="26110"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.0.1.3.1" proved="true">
            <proof prover="1"><result status="valid" time="3.85"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="1.67" steps="26129"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.77" steps="26110"/></proof>
        </goal>
        <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.07" steps="26110"/></proof>
        </goal>
        <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.3" expl="rewrite premises" proved="true">
        <proof prover="1"><result status="valid" time="3.19"/></proof>
        </goal>
        <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.4" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="7.18" steps="1864817"/></proof>
        </goal>
        <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.5" expl="rewrite premises" proved="true">
        <proof prover="1"><result status="valid" time="3.69"/></proof>
        </goal>
        <goal name="shor_circuit&#39;vc.44.0.2.0.0.0.6" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="7.59" steps="1881209"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="shor_circuit&#39;vc.44.0.2.0.0.1" expl="false case (apply premises)" proved="true">
       <transf name="rewrite" proved="true" arg1="cont_kron_pat_right1">
        <goal name="shor_circuit&#39;vc.44.0.2.0.0.1.0" expl="false case (apply premises)" proved="true">
        <transf name="rewrite" proved="true" arg1="H10">
         <goal name="shor_circuit&#39;vc.44.0.2.0.0.1.0.0" expl="false case (apply premises)" proved="true">
         <transf name="replace" proved="true" arg1="(ind_isum (fun (l:int) -&gt; (getbv x @ l) * power 2 (((2 * n) - l) - 1)) 0
      k)" arg2="((ind_isum (fun (l:int) -&gt; (getbv x @ l) * power 2 (((2 * n) - l) - 1)) 0
      (k-1)))">
          <goal name="shor_circuit&#39;vc.44.0.2.0.0.1.0.0.0" expl="false case (apply premises)" proved="true">
          <transf name="compute_specified" proved="true" >
          </transf>
          </goal>
          <goal name="shor_circuit&#39;vc.44.0.2.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
          <transf name="rewrite" proved="true" arg1="ind_isum_re">
           <goal name="shor_circuit&#39;vc.44.0.2.0.0.1.0.0.1.0" expl="equality hypothesis" proved="true">
           <transf name="apply" proved="true" arg1="add_zero">
            <goal name="shor_circuit&#39;vc.44.0.2.0.0.1.0.0.1.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="shor_circuit&#39;vc.44.0.2.0.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="5.30"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="shor_circuit&#39;vc.44.0.2.0.0.1.0.0.1.1" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="1.60" steps="26070"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="shor_circuit&#39;vc.44.0.2.0.0.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="1.05" steps="26089"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="shor_circuit&#39;vc.44.0.2.0.0.1.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.06" steps="26070"/></proof>
        </goal>
        <goal name="shor_circuit&#39;vc.44.0.2.0.0.1.2" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.06" steps="26070"/></proof>
        </goal>
        <goal name="shor_circuit&#39;vc.44.0.2.0.0.1.3" expl="rewrite premises" proved="true">
        <proof prover="1"><result status="valid" time="4.26"/></proof>
        </goal>
        <goal name="shor_circuit&#39;vc.44.0.2.0.0.1.4" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="6.84" steps="1907450"/></proof>
        </goal>
        <goal name="shor_circuit&#39;vc.44.0.2.0.0.1.5" expl="rewrite premises" proved="true">
        <proof prover="1"><result status="valid" time="3.90"/></proof>
        </goal>
        <goal name="shor_circuit&#39;vc.44.0.2.0.0.1.6" expl="rewrite premises" proved="true">
        <transf name="apply" proved="true" arg1="get_binary_zero" arg2="with" arg3="(2*n)">
         <goal name="shor_circuit&#39;vc.44.0.2.0.0.1.6.0" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="3.16"/></proof>
         </goal>
         <goal name="shor_circuit&#39;vc.44.0.2.0.0.1.6.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="1.03" steps="26070"/></proof>
         </goal>
         <goal name="shor_circuit&#39;vc.44.0.2.0.0.1.6.2" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="7.53" steps="1881211"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="shor_circuit&#39;vc.44.0.2.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="1.07" steps="26069"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="shor_circuit&#39;vc.44.0.3" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.04" steps="26050"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shor_circuit&#39;vc.45" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="1.32" steps="26010"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.46" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.01" steps="25145"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.47" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.53" steps="25180"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.48" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(3*n)" arg2="(2*n+n)">
   <goal name="shor_circuit&#39;vc.48.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="kronecker_ket_l">
    <goal name="shor_circuit&#39;vc.48.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.01" steps="25397"/></proof>
    </goal>
    <goal name="shor_circuit&#39;vc.48.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.02" steps="25397"/></proof>
    </goal>
    <goal name="shor_circuit&#39;vc.48.0.2" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="2.74"/></proof>
    </goal>
    <goal name="shor_circuit&#39;vc.48.0.3" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="2.53"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="shor_circuit&#39;vc.48.1" expl="equality hypothesis" proved="true">
   <proof prover="0"><result status="valid" time="1.01" steps="25397"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="shor_circuit&#39;vc.49" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.02" steps="25456"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.50" expl="precondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="shor_circuit&#39;vc.50.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="reg_sup&#39;def">
    <goal name="shor_circuit&#39;vc.50.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="reg_controlled&#39;def">
     <goal name="shor_circuit&#39;vc.50.0.0.0" expl="precondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="shor_circuit&#39;vc.50.0.0.0.0" expl="precondition" proved="true">
      <transf name="rewrite" proved="true" arg1="superposition_state&#39;spec2">
       <goal name="shor_circuit&#39;vc.50.0.0.0.0.0" expl="precondition" proved="true">
       <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr">
        <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0" expl="precondition" proved="true">
        <transf name="rewrite" proved="true" arg1="path_sem_scal">
         <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0" expl="precondition" proved="true">
         <transf name="rewrite" proved="true" arg1="kronecker_ket_sum_distr_l_rew">
          <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.0" expl="precondition" proved="true">
          <transf name="rewrite" proved="true" arg1="path_sem_sum_">
           <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.0.0" expl="precondition" proved="true">
           <transf name="apply" proved="true" arg1="scalar_eq_gen">
            <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
             <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="1.45" steps="35702"/></proof>
             </goal>
             <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="1.44" steps="35702"/></proof>
             </goal>
             <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="1.43" steps="35701"/></proof>
             </goal>
             <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.0.0.0.3.0" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
               <transf name="replace" proved="true" arg1="(kronecker (bv_to_ket a) (ket n 1))" arg2="(regs 0 a)">
                <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
                <transf name="replace" proved="true" arg1="(2*n)" arg2="k">
                 <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="apply" proved="true" arg1="LoopInvariant">
                  <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="6.84" steps="1829737"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.0.0.0.3.0.0.0.1" expl="equality hypothesis" proved="true">
                 <proof prover="0"><result status="valid" time="1.46" steps="35779"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.0.0.0.3.0.0.1" expl="equality hypothesis" proved="true">
                <transf name="rewrite" proved="true" arg1="H8">
                 <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.0.0.0.3.0.0.1.0" expl="equality hypothesis" proved="true">
                 <proof prover="0"><result status="valid" time="2.14" steps="35779"/></proof>
                 </goal>
                 <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.0.0.0.3.0.0.1.1" expl="rewrite premises" proved="true">
                 <proof prover="0"><result status="valid" time="1.79" steps="35780"/></proof>
                 </goal>
                 <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.0.0.0.3.0.0.1.2" expl="rewrite premises" proved="true">
                 <proof prover="2"><result status="valid" time="8.12" steps="1829737"/></proof>
                 </goal>
                 <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.0.0.0.3.0.0.1.3" expl="rewrite premises" proved="true">
                 <proof prover="0"><result status="valid" time="1.47" steps="35779"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="1.47" steps="35702"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="1.46" steps="35702"/></proof>
           </goal>
           <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="1.48" steps="35701"/></proof>
           </goal>
           <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.0.3.0" expl="rewrite premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.0.3.0.0" expl="rewrite premises" proved="true">
             <transf name="replace" proved="true" arg1="(width c)" arg2="(2*n+n)">
              <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.0.3.0.0.0" expl="rewrite premises" proved="true">
              <transf name="apply" proved="true" arg1="kronecker_ket_l">
               <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="0"><result status="valid" time="1.46" steps="35779"/></proof>
               </goal>
               <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.0.3.0.0.0.1" expl="apply premises" proved="true">
               <proof prover="0"><result status="valid" time="1.48" steps="35779"/></proof>
               </goal>
               <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.0.3.0.0.0.2" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
                <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.0.3.0.0.0.2.0" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="7.96" steps="1829737"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.0.3.0.0.0.3" expl="apply premises" proved="true">
               <proof prover="6"><result status="valid" time="6.54" steps="1849352"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.0.3.0.0.1" expl="equality hypothesis" proved="true">
              <proof prover="0"><result status="valid" time="1.50" steps="35779"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
             <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="6.56" steps="1829737"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="1.48" steps="35701"/></proof>
          </goal>
          <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="1.46" steps="35701"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <transf name="replace" proved="true" arg1="(width c)" arg2="(2*n+n)">
          <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
          <transf name="apply" proved="true" arg1="kronecker_ket_l">
           <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="2.18" steps="35702"/></proof>
           </goal>
           <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="1.47" steps="35702"/></proof>
           </goal>
           <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.1.0.2" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="ket_sum_ket_l">
            <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.1.0.2.0" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="2.37" steps="35702"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.1.0.3" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="5.76" steps="1849333"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="shor_circuit&#39;vc.50.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
          <proof prover="0"><result status="valid" time="1.82" steps="35701"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="shor_circuit&#39;vc.50.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="7.66" steps="2078919"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shor_circuit&#39;vc.51" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.04" steps="25515"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.52" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.04" steps="25694"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.53" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.03" steps="25733"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.54" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.79"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.55" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.04" steps="25896"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.56" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.58" steps="25896"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.57" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(3*n)" arg2="(2*n+n)">
   <goal name="shor_circuit&#39;vc.57.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="kronecker_ket_l">
    <goal name="shor_circuit&#39;vc.57.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.86" steps="26201"/></proof>
    </goal>
    <goal name="shor_circuit&#39;vc.57.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.03" steps="26201"/></proof>
    </goal>
    <goal name="shor_circuit&#39;vc.57.0.2" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="3.12"/></proof>
    </goal>
    <goal name="shor_circuit&#39;vc.57.0.3" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="3.90"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="shor_circuit&#39;vc.57.1" expl="equality hypothesis" proved="true">
   <proof prover="0"><result status="valid" time="1.27" steps="26201"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="shor_circuit&#39;vc.58" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.91" steps="26280"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.59" expl="precondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="shor_circuit&#39;vc.59.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="reg_controlled&#39;def">
    <goal name="shor_circuit&#39;vc.59.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="path_sem_scal">
     <goal name="shor_circuit&#39;vc.59.0.0.0" expl="precondition" proved="true">
     <transf name="rewrite" proved="true" arg1="path_sem_sum_">
      <goal name="shor_circuit&#39;vc.59.0.0.0.0" expl="precondition" proved="true">
      <transf name="rewrite" proved="true" arg1="reg_final&#39;def">
       <goal name="shor_circuit&#39;vc.59.0.0.0.0.0" expl="precondition" proved="true">
       <transf name="rewrite" proved="true" arg1="pow_inv_2_scal">
        <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0" expl="precondition" proved="true">
        <transf name="apply" proved="true" arg1="scalar_eq_gen">
         <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="ket_sum_scalar_rev_l">
          <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="ket_sum_eq">
           <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="1.46" steps="36830"/></proof>
           </goal>
           <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="1.29" steps="36829"/></proof>
           </goal>
           <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
           <transf name="assert" proved="true" arg1="(0 &lt; 2* n &lt; 3*n)">
            <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.0" expl="asserted formula" proved="true">
            <proof prover="2"><result status="valid" time="6.32" steps="1685639"/></proof>
            </goal>
            <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0" expl="apply premises" proved="true">
              <transf name="split_all_full" proved="true" >
               <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="H7">
                <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="place_kron_left_path">
                 <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="path_sem_rev_qft_unit">
                  <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr">
                   <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="apply" proved="true" arg1="scalar_eq_gen">
                    <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="kronecker_ket_sum_distr_l_rew">
                     <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
                      <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="ket&#39;spec5">
                       <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                       <proof prover="0"><result status="valid" time="1.48" steps="36908"/></proof>
                       </goal>
                       <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                       <proof prover="0"><result status="valid" time="1.87" steps="36908"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                      <proof prover="0"><result status="valid" time="1.67" steps="36908"/></proof>
                      </goal>
                      <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="ket&#39;spec5">
                       <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
                       <proof prover="0"><result status="valid" time="1.88" steps="36908"/></proof>
                       </goal>
                       <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.0.0.0.0.0.2.1" expl="rewrite premises" proved="true">
                       <proof prover="0"><result status="valid" time="1.49" steps="36908"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
                      <transf name="split_vc" proved="true" >
                       <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.0.0.0.0.0.3.0" expl="apply premises" proved="true">
                       <transf name="compute_specified" proved="true" >
                        <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
                        <transf name="apply" proved="true" arg1="kronecker_eq">
                         <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
                         <transf name="apply" proved="true" arg1="scalar_eq_gen">
                          <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
                          <proof prover="6"><result status="valid" time="7.95" steps="2237733"/></proof>
                          </goal>
                          <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.0.0.0.0.0.3.0.0.0.1" expl="apply premises" proved="true">
                          <proof prover="5"><result status="valid" time="1.19" steps="5126511"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.0.0.0.0.0.3.0.0.1" expl="apply premises" proved="true">
                         <proof prover="0"><result status="valid" time="2.42" steps="36986"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                     <transf name="compute_specified" proved="true" >
                      <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                      <transf name="split_vc" proved="true" >
                       <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                       <transf name="apply" proved="true" arg1="scalar_ket_l">
                        <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                        <proof prover="5"><result status="valid" time="1.26" steps="4985932"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                     <transf name="apply" proved="true" arg1="ket&#39;spec6">
                      <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
                      <proof prover="0"><result status="valid" time="1.45" steps="36908"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
                     <proof prover="0"><result status="valid" time="1.44" steps="36908"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                    <proof prover="0"><result status="valid" time="2.02" steps="36908"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="0"><result status="valid" time="1.79" steps="36908"/></proof>
                  </goal>
                  <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="5"><result status="valid" time="1.35" steps="4986044"/></proof>
                  </goal>
                  <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.0.3" expl="rewrite premises" proved="true">
                  <proof prover="6"><result status="valid" time="5.77" steps="1853828"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.1" expl="rewrite premises" proved="true">
                 <proof prover="0"><result status="valid" time="1.66" steps="36908"/></proof>
                 </goal>
                 <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.2" expl="rewrite premises" proved="true">
                 <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
                  <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.2.0" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="6.43" steps="1832083"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.3" expl="rewrite premises" proved="true">
                 <transf name="replace" proved="true" arg1="((3 * n) - width (qft_rev (2 * n)))" arg2="n">
                  <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.3.0" expl="rewrite premises" proved="true">
                  <proof prover="1"><result status="valid" time="9.24"/></proof>
                  </goal>
                  <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.0.3.1" expl="equality hypothesis" proved="true">
                  <proof prover="0"><result status="valid" time="1.55" steps="36908"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="0"><result status="valid" time="1.54" steps="36935"/></proof>
                </goal>
                <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.2" expl="rewrite premises" proved="true">
                <proof prover="6"><result status="valid" time="6.80" steps="1853026"/></proof>
                </goal>
                <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.0.2.1.0.0.0.3" expl="rewrite premises" proved="true">
                <proof prover="0"><result status="valid" time="1.50" steps="36908"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="1.74" steps="36830"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="1.44" steps="36829"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="shor_circuit&#39;vc.59.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.66" steps="36829"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="shor_circuit&#39;vc.59.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="1.45" steps="36829"/></proof>
      </goal>
      <goal name="shor_circuit&#39;vc.59.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="1.44" steps="36829"/></proof>
      </goal>
      <goal name="shor_circuit&#39;vc.59.0.0.0.3" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="shor_circuit&#39;vc.59.0.0.0.3.0" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="6.82" steps="1833462"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="shor_circuit&#39;vc.59.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="1.61" steps="36856"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shor_circuit&#39;vc.60" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.22" steps="26380"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.61" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="shor_circuit&#39;vc.61.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="Ensures4">
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shor_circuit&#39;vc.62" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures1">
   <goal name="shor_circuit&#39;vc.62.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="Ensures4">
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
