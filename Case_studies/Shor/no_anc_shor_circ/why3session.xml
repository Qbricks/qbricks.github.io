<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="CVC3" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.4.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.7" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="Z3" version="4.8.6" alternative="counterexamples" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="8" name="CVC4" version="1.7" alternative="counterexamples" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="no_anc_shor_circ.mlw"/>
<theory name="Circuit" proved="true">
 <goal name="bound_inf&#39;vc" expl="VC for bound_inf" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bound_inf&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.73"/></proof>
  </goal>
  <goal name="bound_inf&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.69"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pre_adder_const_&#39;vc" expl="VC for pre_adder_const_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pre_adder_const_&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.70"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="1.98"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="1.88"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="1.92"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.4" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="1.81"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.5" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="1.87"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.6" expl="loop invariant init" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_adder_const_&#39;vc.6.0" expl="loop invariant init" proved="true">
   <proof prover="0"><result status="valid" time="2.08"/></proof>
   </goal>
   <goal name="pre_adder_const_&#39;vc.6.1" expl="loop invariant init" proved="true">
   <proof prover="0"><result status="valid" time="2.07"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="pre_adder_const_&#39;vc.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.05"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.8" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="1.90"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.9" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="2.16"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.10" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="1.98"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.11" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="1.82"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.12" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="1.85"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.13" expl="loop invariant init" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_adder_const_&#39;vc.13.0" expl="loop invariant init" proved="true">
   <proof prover="0"><result status="valid" time="1.86"/></proof>
   </goal>
   <goal name="pre_adder_const_&#39;vc.13.1" expl="loop invariant init" proved="true">
   <proof prover="0"><result status="valid" time="1.85"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="pre_adder_const_&#39;vc.14" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_adder_const_&#39;vc.14.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.89"/></proof>
   </goal>
   <goal name="pre_adder_const_&#39;vc.14.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.87"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="pre_adder_const_&#39;vc.15" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.24"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.16" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.10"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.17" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.96"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.18" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.97"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.19" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_adder_const_&#39;vc.19.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.95"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="pre_adder_const_&#39;vc.20" expl="loop variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_adder_const_&#39;vc.20.0" expl="loop variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.92"/></proof>
   </goal>
   <goal name="pre_adder_const_&#39;vc.20.1" expl="loop variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.98"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="pre_adder_const_&#39;vc.21" expl="loop invariant preservation" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="pre_adder_const_&#39;vc.21.0" expl="loop invariant preservation" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures1">
    <goal name="pre_adder_const_&#39;vc.21.0.0" expl="loop invariant preservation" proved="true">
    <transf name="rewrite" proved="true" arg1="ang_sum_re">
     <goal name="pre_adder_const_&#39;vc.21.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="apply" proved="true" arg1="ang_add_eq">
      <goal name="pre_adder_const_&#39;vc.21.0.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="LoopInvariant4">
       <goal name="pre_adder_const_&#39;vc.21.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="3.98" steps="1325347"/></proof>
       </goal>
       <goal name="pre_adder_const_&#39;vc.21.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="2.01"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="pre_adder_const_&#39;vc.21.0.0.0.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="pre_adder_const_&#39;vc.21.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="Ensures8">
        <goal name="pre_adder_const_&#39;vc.21.0.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="case" proved="true" arg1="(getbv y (i-1) = 0)">
         <goal name="pre_adder_const_&#39;vc.21.0.0.0.1.0.0.0" expl="true case (apply premises)" proved="true">
         <proof prover="0"><result status="valid" time="1.94"/></proof>
         </goal>
         <goal name="pre_adder_const_&#39;vc.21.0.0.0.1.0.0.1" expl="false case (apply premises)" proved="true">
         <proof prover="0"><result status="valid" time="3.80"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="pre_adder_const_&#39;vc.21.0.0.0.1.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="3.87"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="pre_adder_const_&#39;vc.21.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="1.96"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="pre_adder_const_&#39;vc.21.0.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="1.97"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="pre_adder_const_&#39;vc.22" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="2.15"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.23" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="2.23"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.24" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="1.95"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.25" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="3.92" steps="1323075"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.26" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_adder_const_&#39;vc.26.0" expl="loop invariant preservation" proved="true">
   <proof prover="0"><result status="valid" time="1.95"/></proof>
   </goal>
   <goal name="pre_adder_const_&#39;vc.26.1" expl="loop invariant preservation" proved="true">
   <proof prover="0"><result status="valid" time="1.99"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="pre_adder_const_&#39;vc.27" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.18"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.28" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.83"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.29" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.82"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.30" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.83"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.31" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_adder_const_&#39;vc.31.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.85"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="pre_adder_const_&#39;vc.32" expl="loop variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_adder_const_&#39;vc.32.0" expl="loop variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="2.15"/></proof>
   </goal>
   <goal name="pre_adder_const_&#39;vc.32.1" expl="loop variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.93"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="pre_adder_const_&#39;vc.33" expl="loop invariant preservation" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures1">
   <goal name="pre_adder_const_&#39;vc.33.0" expl="loop invariant preservation" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures2">
    <goal name="pre_adder_const_&#39;vc.33.0.0" expl="loop invariant preservation" proved="true">
    <transf name="rewrite" proved="true" arg1="ang_sum_re">
     <goal name="pre_adder_const_&#39;vc.33.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="pre_adder_const_&#39;vc.33.0.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="apply" proved="true" arg1="ang_add_eq">
       <goal name="pre_adder_const_&#39;vc.33.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(k-1)" arg2="k1">
        <goal name="pre_adder_const_&#39;vc.33.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="LoopInvariant9">
         <goal name="pre_adder_const_&#39;vc.33.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="1.94"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="pre_adder_const_&#39;vc.33.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="0"><result status="valid" time="1.95"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="pre_adder_const_&#39;vc.33.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(k-1)" arg2="k1">
        <goal name="pre_adder_const_&#39;vc.33.0.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="LoopInvariant4">
         <goal name="pre_adder_const_&#39;vc.33.0.0.0.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="4.14" steps="1325000"/></proof>
         </goal>
         <goal name="pre_adder_const_&#39;vc.33.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="2.19"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="pre_adder_const_&#39;vc.33.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
        <proof prover="0"><result status="valid" time="1.88"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="pre_adder_const_&#39;vc.33.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="2.22"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="pre_adder_const_&#39;vc.33.0.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="1.93"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="pre_adder_const_&#39;vc.34" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="1.98"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.35" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="1.92"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.36" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="1.96"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.37" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="3.88" steps="1319539"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.38" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_adder_const_&#39;vc.38.0" expl="loop invariant preservation" proved="true">
   <proof prover="0"><result status="valid" time="1.95"/></proof>
   </goal>
   <goal name="pre_adder_const_&#39;vc.38.1" expl="loop invariant preservation" proved="true">
   <proof prover="0"><result status="valid" time="1.91"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="pre_adder_const_&#39;vc.39" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.75"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.40" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.12"/></proof>
  </goal>
  <goal name="pre_adder_const_&#39;vc.41" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="LoopInvariant4">
   <goal name="pre_adder_const_&#39;vc.41.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(n+1)" arg2="k">
    <goal name="pre_adder_const_&#39;vc.41.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
    <goal name="pre_adder_const_&#39;vc.41.0.1" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="1.86"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="pre_adder_const_&#39;vc.41.1" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="1.86"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="pre_adder_const_&#39;vc.42" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_adder_const_&#39;vc.42.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures">
    <goal name="pre_adder_const_&#39;vc.42.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(ang_sum
  (fun (target:int) -&gt;
    ang_sum
    (fun (k1:int) -&gt;
      (((getbv y @ k1) * (getbv x @ target))
       * power 2 ((n - k1) + (n - target)))
      /./ (n + 1))
    (n - target) (n + 1))
  0 (n + 1))" arg2="(ang_sum
   (fun (target:int) -&gt;
     ang_sum
     (fun (k1:int) -&gt;
       (((getbv y @ k1) * (getbv x @ target))
        * power 2 ((((n + 1) - k1) - 1) + (((n + 1) - target) - 1)))
       /./ (n + 1))
     (((n + 1) - target) - 1) (n + 1))
   0 (n + 1))">
     <goal name="pre_adder_const_&#39;vc.42.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="Ensures2">
      <goal name="pre_adder_const_&#39;vc.42.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.89"/></proof>
      </goal>
      <goal name="pre_adder_const_&#39;vc.42.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.91"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="pre_adder_const_&#39;vc.42.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="ang_sum_eq">
      <goal name="pre_adder_const_&#39;vc.42.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.87"/></proof>
      </goal>
      <goal name="pre_adder_const_&#39;vc.42.0.0.1.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="pre_adder_const_&#39;vc.42.0.0.1.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="pre_adder_const_&#39;vc.42.0.0.1.1.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="3.84" steps="1320681"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="pre_adder_const_&#39;vc.42.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="3.88" steps="1315864"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="pre_adder_const_&#39;vc.43" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_adder_const_&#39;vc.43.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="2.08"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="pre_adder_const_&#39;vc.44" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_adder_const_&#39;vc.44.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.89"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="pre_adder_const_&#39;vc.45" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_adder_const_&#39;vc.45.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="path_sem_diag_apply">
    <goal name="pre_adder_const_&#39;vc.45.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.95"/></proof>
    </goal>
    <goal name="pre_adder_const_&#39;vc.45.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="2.12"/></proof>
    </goal>
    <goal name="pre_adder_const_&#39;vc.45.0.2" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="4.32" steps="1357130"/></proof>
    </goal>
    <goal name="pre_adder_const_&#39;vc.45.0.3" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="2.15"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="pre_adder_const_&#39;vc.46" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pre_adder_const_&#39;vc.46.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.85"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="add_in_qft&#39;vc" expl="VC for add_in_qft" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_in_qft&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.74"/></proof>
  </goal>
  <goal name="add_in_qft&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.80"/></proof>
  </goal>
  <goal name="add_in_qft&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.85"/></proof>
  </goal>
  <goal name="add_in_qft&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.71"/></proof>
  </goal>
  <goal name="add_in_qft&#39;vc.4" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="apply_qft&#39;def">
   <goal name="add_in_qft&#39;vc.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="apply_qft&#39;def">
    <goal name="add_in_qft&#39;vc.4.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="path_sem_scal">
     <goal name="add_in_qft&#39;vc.4.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="path_sem_sum_">
      <goal name="add_in_qft&#39;vc.4.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="scalar_eq">
       <goal name="add_in_qft&#39;vc.4.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="ket_sum_eq">
        <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="1.92"/></proof>
        </goal>
        <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="1.63"/></proof>
        </goal>
        <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.2" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.2.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="path_sem_scal">
           <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="Ensures2">
            <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="scalar_assoc">
             <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="bv_to_int_to_bv">
              <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="replace" proved="true" arg1="(int_qft_coeff (mod1 added (power 2 (n + 1))) (bv_to_int a) (n + 1))" arg2="(int_qft_coeff ( added ) (bv_to_int a) (n + 1))
">
               <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="0"><result status="valid" time="1.78"/></proof>
               </goal>
               <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.2.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
               <transf name="apply" proved="true" arg1="int_qft_coeff_eq" arg2="with" arg3="(n+1)">
                <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.2.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                <proof prover="0"><result status="valid" time="1.86"/></proof>
                </goal>
                <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.2.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
                <proof prover="0"><result status="valid" time="1.89"/></proof>
                </goal>
                <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.2.0.0.0.0.0.0.1.2" expl="apply premises" proved="true">
                <proof prover="0"><result status="valid" time="2.08"/></proof>
                </goal>
                <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.2.0.0.0.0.0.0.1.3" expl="apply premises" proved="true">
                <proof prover="0"><result status="valid" time="1.57"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="0"><result status="valid" time="2.14"/></proof>
              </goal>
              <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.2.0.0.0.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="0"><result status="valid" time="2.06"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="0"><result status="valid" time="1.80"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="add_in_qft&#39;vc.4.0.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="1.78"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="add_in_qft&#39;vc.4.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="2.03"/></proof>
      </goal>
      <goal name="add_in_qft&#39;vc.4.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="1.64"/></proof>
      </goal>
      <goal name="add_in_qft&#39;vc.4.0.0.0.3" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="add_in_qft&#39;vc.4.0.0.0.3.0" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="add_in_qft&#39;vc.4.0.0.0.3.0.0" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="4.70" steps="1493344"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="add_in_qft&#39;vc.4.0.0.1" expl="rewrite premises" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures">
      <goal name="add_in_qft&#39;vc.4.0.0.1.0" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="2.17"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="add_in_qft&#39;vc.4.0.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="1.96"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="add_in_qft&#39;vc.4.1" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="1.94"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="add_in_qft&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.89"/></proof>
  </goal>
  <goal name="add_in_qft&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.71"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="place_add_in_qft&#39;vc" expl="VC for place_add_in_qft" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="place_add_in_qft&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.85"/></proof>
  </goal>
  <goal name="place_add_in_qft&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.90"/></proof>
  </goal>
  <goal name="place_add_in_qft&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.66"/></proof>
  </goal>
  <goal name="place_add_in_qft&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.64"/></proof>
  </goal>
  <goal name="place_add_in_qft&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.79"/></proof>
  </goal>
  <goal name="place_add_in_qft&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.66"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="place_add_in_comput_basis&#39;vc" expl="VC for place_add_in_comput_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="place_add_in_comput_basis&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.61"/></proof>
  </goal>
  <goal name="place_add_in_comput_basis&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.64"/></proof>
  </goal>
  <goal name="place_add_in_comput_basis&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.63"/></proof>
  </goal>
  <goal name="place_add_in_comput_basis&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.91"/></proof>
  </goal>
  <goal name="place_add_in_comput_basis&#39;vc.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.58"/></proof>
  </goal>
  <goal name="place_add_in_comput_basis&#39;vc.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="place_add_in_comput_basis&#39;vc.5.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="3.67" steps="1282387"/></proof>
   </goal>
   <goal name="place_add_in_comput_basis&#39;vc.5.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="3.61" steps="1282385"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="place_add_in_comput_basis&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.66"/></proof>
  </goal>
  <goal name="place_add_in_comput_basis&#39;vc.7" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(kronecker (ket (n + 1) (mod1 (b + added) (power 2 (n + 1)))) z)" arg2="(kronecker
     (ket (n + 1) ((fun (i1:int) -&gt; mod1 (i1 + added) (power 2 (n + 1))) @ b))
     z)
">
   <goal name="place_add_in_comput_basis&#39;vc.7.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="Ensures2">
    <goal name="place_add_in_comput_basis&#39;vc.7.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.67"/></proof>
    </goal>
    <goal name="place_add_in_comput_basis&#39;vc.7.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.64"/></proof>
    </goal>
    <goal name="place_add_in_comput_basis&#39;vc.7.0.2" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures9">
     <goal name="place_add_in_comput_basis&#39;vc.7.0.2.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.65"/></proof>
     </goal>
     <goal name="place_add_in_comput_basis&#39;vc.7.0.2.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="1.98"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="place_add_in_comput_basis&#39;vc.7.1" expl="equality hypothesis" proved="true">
   <proof prover="2"><result status="valid" time="3.84" steps="1294276"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="place_add_in_comput_basis&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.95"/></proof>
  </goal>
  <goal name="place_add_in_comput_basis&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.61"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="div_bound&#39;vc" expl="VC for div_bound" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="div_bound&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.61"/></proof>
  </goal>
  <goal name="div_bound&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="3.75" steps="1277076"/></proof>
  </goal>
  <goal name="div_bound&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.64"/></proof>
  </goal>
  <goal name="div_bound&#39;vc.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="div_bound&#39;vc.3.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="3.80" steps="1278017"/></proof>
   </goal>
   <goal name="div_bound&#39;vc.3.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.70"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="div_bound&#39;vc.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.73"/></proof>
  </goal>
  <goal name="div_bound&#39;vc.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.72"/></proof>
  </goal>
  <goal name="div_bound&#39;vc.6" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="div_bound&#39;vc.6.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.00"/></proof>
   </goal>
   <goal name="div_bound&#39;vc.6.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.71"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="div_bound&#39;vc.7" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="3.80" steps="1281079"/></proof>
  </goal>
  <goal name="div_bound&#39;vc.8" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.69"/></proof>
  </goal>
  <goal name="div_bound&#39;vc.9" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="div_bound&#39;vc.9.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.68"/></proof>
   </goal>
   <goal name="div_bound&#39;vc.9.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="3.89" steps="1281846"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="div_bound&#39;vc.10" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="div_bound&#39;vc.10.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="2.12"/></proof>
   </goal>
   <goal name="div_bound&#39;vc.10.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="2.11"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="div_bound&#39;vc.11" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="div_bound&#39;vc.11.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.77"/></proof>
   </goal>
   <goal name="div_bound&#39;vc.11.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.62"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="div_bound&#39;vc.12" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="div_bound&#39;vc.12.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="4.06" steps="1356224"/></proof>
   </goal>
   <goal name="div_bound&#39;vc.12.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.84"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="div_bound&#39;vc.13" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="div_bound&#39;vc.13.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.66"/></proof>
   </goal>
   <goal name="div_bound&#39;vc.13.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.90"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="div_bound&#39;vc.14" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="div_bound&#39;vc.14.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.65"/></proof>
   </goal>
   <goal name="div_bound&#39;vc.14.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.80"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="div_bound&#39;vc.15" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="div_bound&#39;vc.15.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="2.16"/></proof>
   </goal>
   <goal name="div_bound&#39;vc.15.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="2.20"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_l_two_n_plus_two&#39;vc" expl="VC for ket_l_two_n_plus_two" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_l_two_n_plus_two&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.86"/></proof>
  </goal>
  <goal name="ket_l_two_n_plus_two&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.67"/></proof>
  </goal>
  <goal name="ket_l_two_n_plus_two&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.90"/></proof>
  </goal>
  <goal name="ket_l_two_n_plus_two&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.94"/></proof>
  </goal>
  <goal name="ket_l_two_n_plus_two&#39;vc.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.96"/></proof>
  </goal>
  <goal name="ket_l_two_n_plus_two&#39;vc.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.94"/></proof>
  </goal>
  <goal name="ket_l_two_n_plus_two&#39;vc.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.98"/></proof>
  </goal>
  <goal name="ket_l_two_n_plus_two&#39;vc.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.95"/></proof>
  </goal>
  <goal name="ket_l_two_n_plus_two&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.97"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ket_l_two_n_plus_four&#39;vc" expl="VC for ket_l_two_n_plus_four" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_l_two_n_plus_four&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.93"/></proof>
  </goal>
  <goal name="ket_l_two_n_plus_four&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.97"/></proof>
  </goal>
  <goal name="ket_l_two_n_plus_four&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.97"/></proof>
  </goal>
  <goal name="ket_l_two_n_plus_four&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.98"/></proof>
  </goal>
  <goal name="ket_l_two_n_plus_four&#39;vc.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.97"/></proof>
  </goal>
  <goal name="ket_l_two_n_plus_four&#39;vc.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.00"/></proof>
  </goal>
  <goal name="ket_l_two_n_plus_four&#39;vc.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.69"/></proof>
  </goal>
  <goal name="ket_l_two_n_plus_four&#39;vc.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.02"/></proof>
  </goal>
  <goal name="ket_l_two_n_plus_four&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.09"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="modular_adder&#39;vc" expl="VC for modular_adder" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="modular_adder&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.80"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.82"/></proof>
   </goal>
   <goal name="modular_adder&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.80"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.58"/></proof>
   </goal>
   <goal name="modular_adder&#39;vc.2.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.56"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.3.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.57"/></proof>
   </goal>
   <goal name="modular_adder&#39;vc.3.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.54"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.4.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.57"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.5.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.77"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.6.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="4.36" steps="1497359"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.7" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.7.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.81"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.8" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.78"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.9" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.77"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.10" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.10.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.85"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.11" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.11.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.85"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.12" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.12.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="4.71" steps="1592270"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.13" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.13.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.15"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.14" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.14.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.37"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.15" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.15.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="4.41" steps="1517241"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.16" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.16.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.60"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.17" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.17.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.14"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.18" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.18.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.10"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.19" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.19.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.18"/></proof>
   </goal>
   <goal name="modular_adder&#39;vc.19.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.90"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.20" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.20.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.93"/></proof>
   </goal>
   <goal name="modular_adder&#39;vc.20.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.89"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.21" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.21.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.88"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.22" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.22.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.09"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.23" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.93"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.24" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.97"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.25" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.71"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.26" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="2.64" steps="1032816"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.27" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="2.73" steps="1032819"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.28" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.15"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.29" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.23"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.30" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.18"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.31" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.31.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.03"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.32" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.32.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.27"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.33" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.33.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.71"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.34" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.34.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.96"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.35" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.35.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="4.58" steps="1560443"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.36" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures25">
   <goal name="modular_adder&#39;vc.36.0" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(apply_qft (n + 1) ( (pre + mod_post)  - bound))" arg2="(apply_qft (n + 1) (mod1( (pre + mod_post)  - bound)(power 2 (n+1))))">
    <goal name="modular_adder&#39;vc.36.0.0" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="Ensures13">
     <goal name="modular_adder&#39;vc.36.0.0.0" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="1.22" steps="960607"/></proof>
     </goal>
     <goal name="modular_adder&#39;vc.36.0.0.1" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="1.25" steps="960598"/></proof>
     </goal>
     <goal name="modular_adder&#39;vc.36.0.0.2" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="2.07" steps="1033366"/></proof>
     </goal>
     <goal name="modular_adder&#39;vc.36.0.0.3" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="mod_inf">
      <goal name="modular_adder&#39;vc.36.0.0.3.0" expl="apply premises" proved="true">
      <transf name="case" proved="true" arg1="(1 - div_bound = 0)">
       <goal name="modular_adder&#39;vc.36.0.0.3.0.0" expl="true case (apply premises)" proved="true">
       <transf name="replace" proved="true" arg1="((n + 2) - 1)" arg2="(n+1)" arg3="in" arg4="Ensures38">
        <goal name="modular_adder&#39;vc.36.0.0.3.0.0.0" expl="true case (apply premises)" proved="true">
        <transf name="rewrite" proved="true" arg1="Ensures38">
         <goal name="modular_adder&#39;vc.36.0.0.3.0.0.0.0" expl="true case (apply premises)" proved="true">
         <proof prover="0"><result status="valid" time="1.80"/></proof>
         </goal>
         <goal name="modular_adder&#39;vc.36.0.0.3.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="0.68" steps="3631848"/></proof>
         </goal>
         <goal name="modular_adder&#39;vc.36.0.0.3.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="2.06"/></proof>
         </goal>
         <goal name="modular_adder&#39;vc.36.0.0.3.0.0.0.3" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="1.91"/></proof>
         </goal>
         <goal name="modular_adder&#39;vc.36.0.0.3.0.0.0.4" expl="rewrite premises" proved="true">
         <transf name="rewrite" proved="true" arg1="ket_to_bv_ket">
          <goal name="modular_adder&#39;vc.36.0.0.3.0.0.0.4.0" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="4.73" steps="1561573"/></proof>
          </goal>
          <goal name="modular_adder&#39;vc.36.0.0.3.0.0.0.4.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="2.26"/></proof>
          </goal>
          <goal name="modular_adder&#39;vc.36.0.0.3.0.0.0.4.2" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="2.25"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="modular_adder&#39;vc.36.0.0.3.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="0"><result status="valid" time="2.02"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="modular_adder&#39;vc.36.0.0.3.0.1" expl="false case (apply premises)" proved="true">
       <transf name="replace" proved="true" arg1="((n + 2) - 1)" arg2="(n+1)" arg3="in" arg4="Ensures39">
        <goal name="modular_adder&#39;vc.36.0.0.3.0.1.0" expl="false case (apply premises)" proved="true">
        <transf name="rewrite" proved="true" arg1="Ensures39">
         <goal name="modular_adder&#39;vc.36.0.0.3.0.1.0.0" expl="false case (apply premises)" proved="true">
         <proof prover="0"><result status="valid" time="2.61"/></proof>
         </goal>
         <goal name="modular_adder&#39;vc.36.0.0.3.0.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="0.86" steps="4347906"/></proof>
         </goal>
         <goal name="modular_adder&#39;vc.36.0.0.3.0.1.0.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="1.83"/></proof>
         </goal>
         <goal name="modular_adder&#39;vc.36.0.0.3.0.1.0.3" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="1.90"/></proof>
         </goal>
         <goal name="modular_adder&#39;vc.36.0.0.3.0.1.0.4" expl="rewrite premises" proved="true">
         <transf name="rewrite" proved="true" arg1="ket_to_bv_ket">
          <goal name="modular_adder&#39;vc.36.0.0.3.0.1.0.4.0" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="4.74" steps="1402446"/></proof>
          </goal>
          <goal name="modular_adder&#39;vc.36.0.0.3.0.1.0.4.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="2.08"/></proof>
          </goal>
          <goal name="modular_adder&#39;vc.36.0.0.3.0.1.0.4.2" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="2.08"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="modular_adder&#39;vc.36.0.0.3.0.1.1" expl="equality hypothesis" proved="true">
        <proof prover="0"><result status="valid" time="1.61"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="modular_adder&#39;vc.36.0.0.3.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="1.45" steps="960607"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="modular_adder&#39;vc.36.0.1" expl="equality hypothesis" proved="true">
    <proof prover="2"><result status="valid" time="1.17" steps="960598"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.37" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.37.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.98"/></proof>
   </goal>
   <goal name="modular_adder&#39;vc.37.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.03"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.38" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.38.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.07"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.39" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.39.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.94"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.40" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.04"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.41" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.14"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.42" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.19"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.43" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="3.05" steps="1035308"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.44" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.44.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.20"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.45" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.45.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.25"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.46" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.46.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures34">
    <goal name="modular_adder&#39;vc.46.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures65">
     <goal name="modular_adder&#39;vc.46.0.0.0" expl="precondition" proved="true">
     <transf name="case" proved="true" arg1="(1-div_bound =0)">
      <goal name="modular_adder&#39;vc.46.0.0.0.0" expl="true case (precondition)" proved="true">
      <proof prover="0"><result status="valid" time="2.29"/></proof>
      </goal>
      <goal name="modular_adder&#39;vc.46.0.0.0.1" expl="false case (precondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="Ensures21">
       <goal name="modular_adder&#39;vc.46.0.0.0.1.0" expl="false case (precondition)" proved="true">
       <transf name="replace" proved="true" arg1="(1 - div_bound)" arg2="1">
        <goal name="modular_adder&#39;vc.46.0.0.0.1.0.0" expl="false case (precondition)" proved="true">
        <transf name="apply" proved="true" arg1="Ensures12">
         <goal name="modular_adder&#39;vc.46.0.0.0.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="2.05"/></proof>
         </goal>
         <goal name="modular_adder&#39;vc.46.0.0.0.1.0.0.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="3.15"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="modular_adder&#39;vc.46.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
        <proof prover="0"><result status="valid" time="2.43"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.47" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.47.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.84"/></proof>
   </goal>
   <goal name="modular_adder&#39;vc.47.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.86"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.48" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.48.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.89"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.49" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.49.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.19"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.50" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.50.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.04"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.51" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.51.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.17"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.52" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.23"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.53" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.83"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.54" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="2.50" steps="1037524"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.55" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.19"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.56" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.56.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.23"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.57" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.57.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.23"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.58" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.58.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures22">
    <goal name="modular_adder&#39;vc.58.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures49">
     <goal name="modular_adder&#39;vc.58.0.0.0" expl="precondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures2">
      <goal name="modular_adder&#39;vc.58.0.0.0.0" expl="precondition" proved="true">
      <proof prover="0"><result status="valid" time="2.09"/></proof>
      </goal>
      <goal name="modular_adder&#39;vc.58.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="2.16"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.59" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.59.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.17"/></proof>
   </goal>
   <goal name="modular_adder&#39;vc.59.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.17"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.60" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.60.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.87"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.61" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.61.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.91"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.62" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.62.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.90"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.63" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.63.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.95"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.64" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.64.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.26"/></proof>
   </goal>
   <goal name="modular_adder&#39;vc.64.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.22"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.65" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.65.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.93"/></proof>
   </goal>
   <goal name="modular_adder&#39;vc.65.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.99"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.66" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.66.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.01"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.67" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.67.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.85"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.68" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.08"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.69" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.43"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.70" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.21"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.71" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.43"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.72" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="3.05" steps="1042663"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.73" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.03"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.74" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.15"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.75" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.03"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.76" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.76.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.83"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.77" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.77.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.26"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.78" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.78.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.23"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.79" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.79.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.11"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.80" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.80.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.20"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.81" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.81.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures40">
    <goal name="modular_adder&#39;vc.81.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures55">
     <goal name="modular_adder&#39;vc.81.0.0.0" expl="precondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures23">
      <goal name="modular_adder&#39;vc.81.0.0.0.0" expl="precondition" proved="true">
      <transf name="replace" proved="true" arg1="(apply_qft (n + 1) (mod1 (pre + mod_post) bound - mod_post))" arg2="(apply_qft (n + 1) (mod1(mod1 (pre + mod_post) bound - mod_post) (power 2 (n+1))))">
       <goal name="modular_adder&#39;vc.81.0.0.0.0.0" expl="precondition" proved="true">
       <transf name="apply" proved="true" arg1="Ensures">
        <goal name="modular_adder&#39;vc.81.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="2.21" steps="1043535"/></proof>
        </goal>
        <goal name="modular_adder&#39;vc.81.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="2.29" steps="1043562"/></proof>
        </goal>
        <goal name="modular_adder&#39;vc.81.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="1.29" steps="966048"/></proof>
        </goal>
        <goal name="modular_adder&#39;vc.81.0.0.0.0.0.3" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(mod1 (mod1 (mod1 (pre + mod_post) bound - mod_post) (power 2 (n + 1)))
     (power 2 (n + 1)))" arg2="( (mod1 (mod1 (pre + mod_post) bound - mod_post) (power 2 (n + 1)))
     )">
         <goal name="modular_adder&#39;vc.81.0.0.0.0.0.3.0" expl="apply premises" proved="true">
         <transf name="case" proved="true" arg1="(div_bound =0)">
          <goal name="modular_adder&#39;vc.81.0.0.0.0.0.3.0.0" expl="true case (apply premises)" proved="true">
          <proof prover="0"><result status="valid" time="2.35"/></proof>
          </goal>
          <goal name="modular_adder&#39;vc.81.0.0.0.0.0.3.0.1" expl="false case (apply premises)" proved="true">
          <transf name="replace" proved="true" arg1="(n+2)" arg2="(n+1+1)">
           <goal name="modular_adder&#39;vc.81.0.0.0.0.0.3.0.1.0" expl="false case (apply premises)" proved="true">
           <transf name="replace" proved="true" arg1="(1- div_bound)" arg2="0">
            <goal name="modular_adder&#39;vc.81.0.0.0.0.0.3.0.1.0.0" expl="false case (apply premises)" proved="true">
            <transf name="apply" proved="true" arg1="Ensures38">
             <goal name="modular_adder&#39;vc.81.0.0.0.0.0.3.0.1.0.0.0" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="modular_adder&#39;vc.81.0.0.0.0.0.3.0.1.0.0.0.0" proved="true">
              <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="(mod1 (pre + mod_post) bound - mod_post),(power 2 (n + 1)),(-1),(power 2 (n + 1)+mod1 (pre + mod_post) bound - mod_post)
">
               <goal name="modular_adder&#39;vc.81.0.0.0.0.0.3.0.1.0.0.0.0.0" proved="true">
               <proof prover="2"><result status="valid" time="4.47" steps="1625670"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="modular_adder&#39;vc.81.0.0.0.0.0.3.0.1.0.0.0.1" proved="true">
              <proof prover="2"><result status="valid" time="2.25" steps="1043225"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="modular_adder&#39;vc.81.0.0.0.0.0.3.0.1.0.1" expl="equality hypothesis" proved="true">
            <proof prover="0"><result status="valid" time="2.50"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="modular_adder&#39;vc.81.0.0.0.0.0.3.0.1.1" expl="equality hypothesis" proved="true">
           <proof prover="0"><result status="valid" time="1.69"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="modular_adder&#39;vc.81.0.0.0.0.0.3.1" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="mod_inf">
          <goal name="modular_adder&#39;vc.81.0.0.0.0.0.3.1.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="modular_adder&#39;vc.81.0.0.0.0.0.3.1.0.0" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="2.10" steps="1043130"/></proof>
           </goal>
           <goal name="modular_adder&#39;vc.81.0.0.0.0.0.3.1.0.1" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="2.07" steps="1043184"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="modular_adder&#39;vc.81.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="2"><result status="valid" time="4.59" steps="1861794"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.82" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.82.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.16"/></proof>
   </goal>
   <goal name="modular_adder&#39;vc.82.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.15"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.83" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.83.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.16"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.84" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.84.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.10"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.85" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.85.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.85"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.86" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.86.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.17"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.87" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.17"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.88" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.39"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.89" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="3.03" steps="1045666"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.90" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.90.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.25"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.91" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.91.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.31"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.92" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.92.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.28"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.93" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.93.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="4.78" steps="1633582"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.94" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.94.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.25"/></proof>
   </goal>
   <goal name="modular_adder&#39;vc.94.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.28"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.95" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.95.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="2.37"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.96" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.96.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(mod1 (pre + post) bound)" arg2="(mod1 (pre + mod_post) bound)
">
    <goal name="modular_adder&#39;vc.96.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="2.41"/></proof>
    </goal>
    <goal name="modular_adder&#39;vc.96.0.1" expl="equality hypothesis" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="modular_adder&#39;vc.96.0.1.0" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="mod_post&#39;def">
      <goal name="modular_adder&#39;vc.96.0.1.0.0" expl="equality hypothesis" proved="true">
      <transf name="rewrite" proved="true" arg1="add_mod_right">
       <goal name="modular_adder&#39;vc.96.0.1.0.0.0" expl="equality hypothesis" proved="true">
       <proof prover="2"><result status="valid" time="1.55" steps="969337"/></proof>
       </goal>
       <goal name="modular_adder&#39;vc.96.0.1.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="1.59" steps="969348"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.97" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.20"/></proof>
  </goal>
  <goal name="modular_adder&#39;vc.98" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.98.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="2.58"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.99" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.99.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.99"/></proof>
   </goal>
   <goal name="modular_adder&#39;vc.99.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.97"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.100" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.100.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.99"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.101" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_adder&#39;vc.101.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="result" arg2="(modular_adder_ (mod1 pre bound))
">
    <goal name="modular_adder&#39;vc.101.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="modular_adder&#39;vc.101.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H2">
      <goal name="modular_adder&#39;vc.101.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="add_mod_left">
       <goal name="modular_adder&#39;vc.101.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="0"><result status="valid" time="1.79"/></proof>
       </goal>
       <goal name="modular_adder&#39;vc.101.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="1.88"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="modular_adder&#39;vc.101.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="1.86"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="modular_adder&#39;vc.101.0.1" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="2.11"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_adder&#39;vc.102" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.96"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="multiplier_qft_pre&#39;vc" expl="VC for multiplier_qft_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="multiplier_qft_pre&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.95"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.88"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.2" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="multiplier_qft_pre&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="multiplier_qft_pre&#39;vc.2.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="j" arg2="n">
     <goal name="multiplier_qft_pre&#39;vc.2.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="int_to_bv_sum_rev">
      <goal name="multiplier_qft_pre&#39;vc.2.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="1.64" steps="992381"/></proof>
      </goal>
      <goal name="multiplier_qft_pre&#39;vc.2.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="2.66" steps="1056600"/></proof>
      </goal>
      <goal name="multiplier_qft_pre&#39;vc.2.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="1.64" steps="992392"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="multiplier_qft_pre&#39;vc.2.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="2"><result status="valid" time="1.63" steps="992383"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.3" expl="assertion" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="multiplier_qft_pre&#39;vc.3.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="H8">
    <goal name="multiplier_qft_pre&#39;vc.3.0.0" expl="assertion" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="multiplier_qft_pre&#39;vc.3.0.0.0" expl="assertion" proved="true">
     <transf name="assert" proved="true" arg1="(forall i1 i2 i21 i22. i21 = i2*i22 -&gt;b+ (p * (i1+i21)) = b+p*i1+p*i2*i22)
">
      <goal name="multiplier_qft_pre&#39;vc.3.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="2.04"/></proof>
      </goal>
      <goal name="multiplier_qft_pre&#39;vc.3.0.0.0.1" expl="assertion" proved="true">
      <transf name="rewrite" proved="true" arg1="ind_isum_re">
       <goal name="multiplier_qft_pre&#39;vc.3.0.0.0.1.0" expl="assertion" proved="true">
       <transf name="replace" proved="true" arg1="(j+1-1)" arg2="j">
        <goal name="multiplier_qft_pre&#39;vc.3.0.0.0.1.0.0" expl="assertion" proved="true">
        <transf name="rewrite" proved="true" arg1="H8">
         <goal name="multiplier_qft_pre&#39;vc.3.0.0.0.1.0.0.0" expl="assertion" proved="true">
         <transf name="apply" proved="true" arg1="h">
          <goal name="multiplier_qft_pre&#39;vc.3.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="2.51"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="multiplier_qft_pre&#39;vc.3.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="2.53"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="multiplier_qft_pre&#39;vc.3.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
        <proof prover="0"><result status="valid" time="2.20"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="multiplier_qft_pre&#39;vc.3.0.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="2.30"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="multiplier_qft_pre&#39;vc.3.0.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="1.96"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.89"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_qft_pre&#39;vc.5.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.14"/></proof>
   </goal>
   <goal name="multiplier_qft_pre&#39;vc.5.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.90"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.6" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_qft_pre&#39;vc.6.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.88"/></proof>
   </goal>
   <goal name="multiplier_qft_pre&#39;vc.6.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.92"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.7" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_qft_pre&#39;vc.7.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.90"/></proof>
   </goal>
   <goal name="multiplier_qft_pre&#39;vc.7.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.30"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.8" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.95"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.9" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.85"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="5.34" steps="1593353"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.11" expl="assertion" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="multiplier_qft_pre&#39;vc.11.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="H8">
    <goal name="multiplier_qft_pre&#39;vc.11.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="modular_adder&#39;spec1">
     <goal name="multiplier_qft_pre&#39;vc.11.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="H8">
      <goal name="multiplier_qft_pre&#39;vc.11.0.0.0.0" expl="assertion" proved="true">
      <transf name="rewrite" proved="true" arg1="Assert">
       <goal name="multiplier_qft_pre&#39;vc.11.0.0.0.0.0" expl="assertion" proved="true">
       <proof prover="0"><result status="valid" time="2.42"/></proof>
       </goal>
       <goal name="multiplier_qft_pre&#39;vc.11.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="2.41"/></proof>
       </goal>
       <goal name="multiplier_qft_pre&#39;vc.11.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="2.44"/></proof>
       </goal>
       <goal name="multiplier_qft_pre&#39;vc.11.0.0.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="2.47"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="multiplier_qft_pre&#39;vc.11.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="2.31"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="multiplier_qft_pre&#39;vc.11.0.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="2.31"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.12" expl="assertion" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="multiplier_qft_pre&#39;vc.12.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="H8">
    <goal name="multiplier_qft_pre&#39;vc.12.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="Assert1">
     <goal name="multiplier_qft_pre&#39;vc.12.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="H8">
      <goal name="multiplier_qft_pre&#39;vc.12.0.0.0.0" expl="assertion" proved="true">
      <proof prover="0"><result status="valid" time="2.34"/></proof>
      </goal>
      <goal name="multiplier_qft_pre&#39;vc.12.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="2.36"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="multiplier_qft_pre&#39;vc.12.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="2.43"/></proof>
     </goal>
     <goal name="multiplier_qft_pre&#39;vc.12.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="2.45"/></proof>
     </goal>
     <goal name="multiplier_qft_pre&#39;vc.12.0.0.3" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="2.39"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="multiplier_qft_pre&#39;vc.12.0.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="2.42"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.13" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_qft_pre&#39;vc.13.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.13"/></proof>
   </goal>
   <goal name="multiplier_qft_pre&#39;vc.13.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.95"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.14" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_qft_pre&#39;vc.14.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.16"/></proof>
   </goal>
   <goal name="multiplier_qft_pre&#39;vc.14.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.16"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.15" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_qft_pre&#39;vc.15.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.32"/></proof>
   </goal>
   <goal name="multiplier_qft_pre&#39;vc.15.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.32"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.16" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.37"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.17" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="b" arg2="(mod1 b bound)">
   <goal name="multiplier_qft_pre&#39;vc.17.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="multiplier_qft_pre&#39;vc.17.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="multiplier_qft_pre&#39;vc.17.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="result&#39;def">
      <goal name="multiplier_qft_pre&#39;vc.17.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H10">
       <goal name="multiplier_qft_pre&#39;vc.17.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="H12">
        <goal name="multiplier_qft_pre&#39;vc.17.0.0.0.0.0.0" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="2.73" steps="1535671"/></proof>
        </goal>
        <goal name="multiplier_qft_pre&#39;vc.17.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="2.69" steps="1535703"/></proof>
        </goal>
        <goal name="multiplier_qft_pre&#39;vc.17.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="2.63" steps="1535673"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="multiplier_qft_pre&#39;vc.17.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="2.62" steps="1535703"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="multiplier_qft_pre&#39;vc.17.1" expl="equality hypothesis" proved="true">
   <proof prover="0"><result status="valid" time="2.03"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.18" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="multiplier_qft_pre&#39;vc.18.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="multiplier_qft_pre&#39;vc.18.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="result&#39;def">
     <goal name="multiplier_qft_pre&#39;vc.18.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H10">
      <goal name="multiplier_qft_pre&#39;vc.18.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H11">
       <goal name="multiplier_qft_pre&#39;vc.18.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="2.58" steps="1535717"/></proof>
       </goal>
       <goal name="multiplier_qft_pre&#39;vc.18.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="2.61" steps="1535749"/></proof>
       </goal>
       <goal name="multiplier_qft_pre&#39;vc.18.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="2.65" steps="1535719"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="multiplier_qft_pre&#39;vc.18.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="2.71" steps="1535749"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.19" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="5.07" steps="1581948"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.20" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.96"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.21" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="1.94"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.22" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="2.99" steps="1259631"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.23" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="1.99"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.24" expl="loop invariant init" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_qft_pre&#39;vc.24.0" expl="loop invariant init" proved="true">
   <proof prover="0"><result status="valid" time="2.11"/></proof>
   </goal>
   <goal name="multiplier_qft_pre&#39;vc.24.1" expl="loop invariant init" proved="true">
   <proof prover="0"><result status="valid" time="2.26"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.25" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_qft_pre&#39;vc.25.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.97"/></proof>
   </goal>
   <goal name="multiplier_qft_pre&#39;vc.25.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.18"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.26" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_qft_pre&#39;vc.26.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.25"/></proof>
   </goal>
   <goal name="multiplier_qft_pre&#39;vc.26.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.25"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.27" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_qft_pre&#39;vc.27.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.74"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.28" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.50"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.29" expl="loop variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_qft_pre&#39;vc.29.0" expl="loop variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="2.37"/></proof>
   </goal>
   <goal name="multiplier_qft_pre&#39;vc.29.1" expl="loop variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="2.75"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.30" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_qft_pre&#39;vc.30.0" expl="loop invariant preservation" proved="true">
   <proof prover="0"><result status="valid" time="2.44"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.31" expl="loop invariant preservation" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures1">
   <goal name="multiplier_qft_pre&#39;vc.31.0" expl="loop invariant preservation" proved="true">
   <transf name="apply" proved="true" arg1="ancilla_free_seq">
    <goal name="multiplier_qft_pre&#39;vc.31.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="2.38"/></proof>
    </goal>
    <goal name="multiplier_qft_pre&#39;vc.31.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="2.36"/></proof>
    </goal>
    <goal name="multiplier_qft_pre&#39;vc.31.0.2" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="3.87" steps="1378705"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.32" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_qft_pre&#39;vc.32.0" expl="loop invariant preservation" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="multiplier_qft_pre&#39;vc.32.0.0" expl="loop invariant preservation" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures1">
     <goal name="multiplier_qft_pre&#39;vc.32.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="apply" proved="true" arg1="path_sem_comp" arg2="with" arg3="(regs b i (j-1))
">
      <goal name="multiplier_qft_pre&#39;vc.32.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="2.34"/></proof>
      </goal>
      <goal name="multiplier_qft_pre&#39;vc.32.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="2.37"/></proof>
      </goal>
      <goal name="multiplier_qft_pre&#39;vc.32.0.0.0.2" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="H10">
       <goal name="multiplier_qft_pre&#39;vc.32.0.0.0.2.0" expl="apply premises" proved="true">
       <transf name="case" proved="true" arg1="((getbv (ket_to_bv (ket n i)) @ j1) = 1)">
        <goal name="multiplier_qft_pre&#39;vc.32.0.0.0.2.0.0" expl="true case (apply premises)" proved="true">
        <transf name="rewrite" proved="true" arg1="cont_kron_pat_right">
         <goal name="multiplier_qft_pre&#39;vc.32.0.0.0.2.0.0.0" expl="true case (apply premises)" proved="true">
         <proof prover="0"><result status="valid" time="2.41"/></proof>
         </goal>
         <goal name="multiplier_qft_pre&#39;vc.32.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="2.34"/></proof>
         </goal>
         <goal name="multiplier_qft_pre&#39;vc.32.0.0.0.2.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="2.30"/></proof>
         </goal>
         <goal name="multiplier_qft_pre&#39;vc.32.0.0.0.2.0.0.3" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="2.41"/></proof>
         </goal>
         <goal name="multiplier_qft_pre&#39;vc.32.0.0.0.2.0.0.4" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="2.40"/></proof>
         </goal>
         <goal name="multiplier_qft_pre&#39;vc.32.0.0.0.2.0.0.5" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="2.27"/></proof>
         </goal>
         <goal name="multiplier_qft_pre&#39;vc.32.0.0.0.2.0.0.6" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="2.31"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="multiplier_qft_pre&#39;vc.32.0.0.0.2.0.1" expl="false case (apply premises)" proved="true">
        <transf name="rewrite" proved="true" arg1="cont_kron_pat_right1">
         <goal name="multiplier_qft_pre&#39;vc.32.0.0.0.2.0.1.0" expl="false case (apply premises)" proved="true">
         <proof prover="0"><result status="valid" time="2.89"/></proof>
         </goal>
         <goal name="multiplier_qft_pre&#39;vc.32.0.0.0.2.0.1.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="2.20"/></proof>
         </goal>
         <goal name="multiplier_qft_pre&#39;vc.32.0.0.0.2.0.1.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="2.23"/></proof>
         </goal>
         <goal name="multiplier_qft_pre&#39;vc.32.0.0.0.2.0.1.3" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="2.22"/></proof>
         </goal>
         <goal name="multiplier_qft_pre&#39;vc.32.0.0.0.2.0.1.4" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="2.57"/></proof>
         </goal>
         <goal name="multiplier_qft_pre&#39;vc.32.0.0.0.2.0.1.5" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="2.15"/></proof>
         </goal>
         <goal name="multiplier_qft_pre&#39;vc.32.0.0.0.2.0.1.6" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="2.85"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="multiplier_qft_pre&#39;vc.32.0.0.0.2.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="2.61"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="multiplier_qft_pre&#39;vc.32.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="2.22"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.33" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_qft_pre&#39;vc.33.0" expl="loop invariant preservation" proved="true">
   <proof prover="0"><result status="valid" time="2.49"/></proof>
   </goal>
   <goal name="multiplier_qft_pre&#39;vc.33.1" expl="loop invariant preservation" proved="true">
   <proof prover="0"><result status="valid" time="2.45"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.34" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.13"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.35" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.95"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.36" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.29"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.37" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.18"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.38" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="1.95"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.39" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="multiplier_qft_pre&#39;vc.39.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures1" arg2="with" arg3="(fun b -&gt; mod1   (b+(p * i)) bound)
">
    <goal name="multiplier_qft_pre&#39;vc.39.0.0" expl="assertion" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="multiplier_qft_pre&#39;vc.39.0.0.0" expl="assertion" proved="true">
     <proof prover="0"><result status="valid" time="3.15"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="multiplier_qft_pre&#39;vc.39.0.1" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="multiplier_qft_pre&#39;vc.39.0.1.0" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="1.96"/></proof>
     </goal>
     <goal name="multiplier_qft_pre&#39;vc.39.0.1.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="4.96" steps="1567545"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="multiplier_qft_pre&#39;vc.39.0.2" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="2.23"/></proof>
    </goal>
    <goal name="multiplier_qft_pre&#39;vc.39.0.3" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="2.24"/></proof>
    </goal>
    <goal name="multiplier_qft_pre&#39;vc.39.0.4" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="multiplier_qft_pre&#39;vc.39.0.4.0" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="multiplier_qft_pre&#39;vc.39.0.4.0.0" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="2.23"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="multiplier_qft_pre&#39;vc.39.0.4.1" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="multiplier_qft_pre&#39;vc.39.0.4.1.0" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="4.93" steps="1572032"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="multiplier_qft_pre&#39;vc.39.0.5" expl="rewrite premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="multiplier_qft_pre&#39;vc.39.0.5.0" expl="rewrite premises" proved="true">
     <transf name="replace" proved="true" arg1="(kronecker (ket n i) (kronecker (apply_qft (n + 1) b) (ket 1 0)))" arg2="(regs b i 0)
">
      <goal name="multiplier_qft_pre&#39;vc.39.0.5.0.0" expl="rewrite premises" proved="true">
      <transf name="replace" proved="true" arg1="(kronecker (ket n i)
  (kronecker (apply_qft (n + 1) (mod1 (b + (p * i)) bound)) (ket 1 0)))" arg2="(regs b i n)">
       <goal name="multiplier_qft_pre&#39;vc.39.0.5.0.0.0" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="1.93"/></proof>
       </goal>
       <goal name="multiplier_qft_pre&#39;vc.39.0.5.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="0"><result status="valid" time="2.18"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="multiplier_qft_pre&#39;vc.39.0.5.0.1" expl="equality hypothesis" proved="true">
      <proof prover="0"><result status="valid" time="2.16"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.40" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="3.15" steps="1299525"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.41" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.19"/></proof>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.42" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiplier_qft_pre&#39;vc.42.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.94"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="multiplier_qft_pre&#39;vc.43" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.19"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="cont_restricted_modular_multiplier&#39;vc" expl="VC for cont_restricted_modular_multiplier" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cont_restricted_modular_multiplier&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="cont_restricted_modular_multiplier&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.92"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.58"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.73"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="3.96" steps="1307974"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.68"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="cont_restricted_modular_multiplier&#39;vc.5.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.86"/></proof>
   </goal>
   <goal name="cont_restricted_modular_multiplier&#39;vc.5.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.85"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.6" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="cont_restricted_modular_multiplier&#39;vc.6.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.88"/></proof>
   </goal>
   <goal name="cont_restricted_modular_multiplier&#39;vc.6.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.87"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.7" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="cont_restricted_modular_multiplier&#39;vc.7.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.64"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.8" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="cont_restricted_modular_multiplier&#39;vc.8.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.86"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.9" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="cont_restricted_modular_multiplier&#39;vc.9.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.88"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.10" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="cont_restricted_modular_multiplier&#39;vc.10.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.93"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.11" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.91"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.12" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="cont_restricted_modular_multiplier&#39;vc.12.0" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="path_sem_comp" arg2="with" arg3="(kronecker (ket n i)  (kronecker( (ket (n+1) (mod1   (p * i ) bound)) ) (ket 1 0)))

">
    <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.78"/></proof>
    </goal>
    <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.1" expl="apply premises" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.1.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="H3">
      <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.1.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="Ensures14">
       <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="2.11"/></proof>
       </goal>
       <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.1.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="2.12"/></proof>
       </goal>
       <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.1.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="1.80"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="2.04"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.2" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(ket (n + 1) (mod1 (p * i) bound))" arg2="(kronecker (ket 1 0) (ket n (mod1 (p * i) bound)))

">
     <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.2.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="swap_lists_kets">
      <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.2.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="2.06"/></proof>
      </goal>
      <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.2.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="2.10"/></proof>
      </goal>
      <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.2.0.2" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="2.11"/></proof>
      </goal>
      <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.2.0.3" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="2.09"/></proof>
      </goal>
      <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.2.0.4" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="2.10"/></proof>
      </goal>
      <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.2.0.5" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="2.14"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.2.1" expl="equality hypothesis" proved="true">
     <proof prover="0"><result status="valid" time="2.69"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="cont_restricted_modular_multiplier&#39;vc.12.0.3" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="2.22"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.13" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="3.83" steps="1440824"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.14" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="cont_restricted_modular_multiplier&#39;vc.14.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.96"/></proof>
   </goal>
   <goal name="cont_restricted_modular_multiplier&#39;vc.14.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.05"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.15" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="cont_restricted_modular_multiplier&#39;vc.15.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.06"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.16" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.04"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.17" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.07"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.18" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="cont_restricted_modular_multiplier&#39;vc.18.0" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="path_sem_comp" arg2="with" arg3="(kronecker (ket n (mod1 (p * i) bound))
   (kronecker (kronecker (ket 1 0) (ket n i)) (ket 1 0)))">
    <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.0" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="4.49" steps="1461568"/></proof>
    </goal>
    <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="2.19"/></proof>
    </goal>
    <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(kronecker (ket 1 0) (ket n i))" arg2="(ket (n+1) i)
">
     <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures10">
      <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(mod1
      (i
       + (mod1 (- modular_inverse p bound) bound * mod1 (p* i) bound))
      bound)" arg2="0">
       <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.83"/></proof>
       </goal>
       <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="replace" proved="true" arg1="(mod1
  (i + (mod1 (- modular_inverse p bound) bound * mod1 (p * i) bound))
  bound)" arg2="(mod1
  (mod1 i bound + mod1 ((mod1 (- modular_inverse p bound) bound * mod1 (p * i) bound))
  bound)bound)">
        <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0.1.0" expl="equality hypothesis" proved="true">
        <transf name="rewrite" proved="true" arg1="mod_mod_mult">
         <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0.1.0.0" expl="equality hypothesis" proved="true">
         <transf name="assert" proved="true" arg1="(forall a b c. -a * (b*c) = a*b* -c)
">
          <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0.1.0.0.0" expl="asserted formula" proved="true">
          <proof prover="0"><result status="valid" time="2.09"/></proof>
          </goal>
          <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
          <transf name="rewrite" proved="true" arg1="h">
           <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0.1.0.0.1.0" expl="equality hypothesis" proved="true">
           <transf name="rewrite" proved="true" arg1="mod_mod_mult_rev">
            <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0.1.0.0.1.0.0" expl="equality hypothesis" proved="true">
            <transf name="rewrite" proved="true" arg1="one_mult">
             <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0.1.0.0.1.0.0.0" expl="equality hypothesis" proved="true">
             <proof prover="0"><result status="valid" time="2.97"/></proof>
             </goal>
             <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0.1.0.0.1.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="0"><result status="valid" time="2.04"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0.1.0.0.1.0.1" expl="rewrite premises" proved="true">
            <proof prover="0"><result status="valid" time="2.17"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="1.89"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0.1.1" expl="equality hypothesis" proved="true">
        <transf name="rewrite" proved="true" arg1="add_mod_left">
         <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0.1.1.0" expl="equality hypothesis" proved="true">
         <transf name="rewrite" proved="true" arg1="add_mod_right">
          <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0.1.1.0.0" expl="equality hypothesis" proved="true">
          <proof prover="0"><result status="valid" time="1.70"/></proof>
          </goal>
          <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0.1.1.0.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="2.13"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.0.1.1.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="2.06"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="2.14"/></proof>
      </goal>
      <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.0.2" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="1.89"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.2.1" expl="equality hypothesis" proved="true">
     <proof prover="0"><result status="valid" time="2.14"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="cont_restricted_modular_multiplier&#39;vc.18.0.3" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="2.13"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.19" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="2.26"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.20" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="cont_restricted_modular_multiplier&#39;vc.20.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="kronecker_assoc_use">
    <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="kronecker_assoc_use">
     <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures">
      <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.0" expl="assertion" proved="true">
      <transf name="apply" proved="true" arg1="Ensures2">
       <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(width c1)" arg2="(n+ (n+2))
">
        <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="2.66"/></proof>
        </goal>
        <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="0"><result status="valid" time="2.19"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(kronecker (ket n i) (ket (n + 2) 0))" arg2="(reg_init i)
">
        <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="Assert1">
         <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="kronecker_eq">
          <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="1.80"/></proof>
          </goal>
          <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="3.74"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="2.37"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
        <transf name="replace" proved="true" arg1="(ket (n + 2) 0)" arg2="(kronecker (ket (n + 1) 0) (ket 1 0))
">
         <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.0.1.1.0" expl="equality hypothesis" proved="true">
         <proof prover="0"><result status="valid" time="1.89"/></proof>
         </goal>
         <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.0.1.1.1" expl="equality hypothesis" proved="true">
         <transf name="rewrite" proved="true" arg1="kronecker_kets">
          <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.0.1.1.1.0" expl="equality hypothesis" proved="true">
          <proof prover="0"><result status="valid" time="2.39"/></proof>
          </goal>
          <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.0.1.1.1.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="1.88"/></proof>
          </goal>
          <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.0.1.1.1.2" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="2.50"/></proof>
          </goal>
          <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.0.1.1.1.3" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="4.53" steps="1466759"/></proof>
          </goal>
          <goal name="cont_restricted_modular_multiplier&#39;vc.20.0.0.0.0.1.1.1.4" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="2.36"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.21" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="cont_restricted_modular_multiplier&#39;vc.21.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="2.17"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.22" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.83" steps="1221656"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.23" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.11"/></proof>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.24" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="cont_restricted_modular_multiplier&#39;vc.24.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.13"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.25" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="cont_restricted_modular_multiplier&#39;vc.25.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="2.10"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.26" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="cont_restricted_modular_multiplier&#39;vc.26.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ket (n + 1) i)" arg2="(kronecker (ket 1 0) (ket (n ) i))
">
    <goal name="cont_restricted_modular_multiplier&#39;vc.26.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="kronecker_assoc_use_rev">
     <goal name="cont_restricted_modular_multiplier&#39;vc.26.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(ket (n + 1) (mod1 (pick * i) bound))" arg2="(kronecker (ket 1 0) (ket (n ) (mod1 (pick * i) bound)))
">
      <goal name="cont_restricted_modular_multiplier&#39;vc.26.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="Ensures1">
       <goal name="cont_restricted_modular_multiplier&#39;vc.26.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="place_kron_right">
        <goal name="cont_restricted_modular_multiplier&#39;vc.26.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="Assert2">
         <goal name="cont_restricted_modular_multiplier&#39;vc.26.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="kronecker_assoc_use">
          <goal name="cont_restricted_modular_multiplier&#39;vc.26.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <proof prover="0"><result status="valid" time="2.39"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="cont_restricted_modular_multiplier&#39;vc.26.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="2.15"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="cont_restricted_modular_multiplier&#39;vc.26.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.92"/></proof>
        </goal>
        <goal name="cont_restricted_modular_multiplier&#39;vc.26.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="2.20"/></proof>
        </goal>
        <goal name="cont_restricted_modular_multiplier&#39;vc.26.0.0.0.0.0.3" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="2.20"/></proof>
        </goal>
        <goal name="cont_restricted_modular_multiplier&#39;vc.26.0.0.0.0.0.4" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="3.07"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="cont_restricted_modular_multiplier&#39;vc.26.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="0"><result status="valid" time="3.14"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="cont_restricted_modular_multiplier&#39;vc.26.0.1" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="2.12"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="cont_restricted_modular_multiplier&#39;vc.27" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="3.23" steps="1222494"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ket_with_ancs&#39;vc" expl="VC for ket_with_ancs" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_with_ancs&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.84"/></proof>
  </goal>
  <goal name="ket_with_ancs&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.87"/></proof>
  </goal>
  <goal name="ket_with_ancs&#39;vc.2" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="((2 * n) + 4)" arg2="(n+(n+4))">
   <goal name="ket_with_ancs&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="ket_with_ancs&#39;vc.2.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="result&#39;def">
     <goal name="ket_with_ancs&#39;vc.2.0.0.0" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="4.14"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ket_with_ancs&#39;vc.2.1" expl="equality hypothesis" proved="true">
   <proof prover="0"><result status="valid" time="1.86"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ket_with_ancs&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.88"/></proof>
  </goal>
  <goal name="ket_with_ancs&#39;vc.4" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="kronecker_assoc_use_rev">
   <goal name="ket_with_ancs&#39;vc.4.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="ket_with_ancs&#39;vc.4.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="result&#39;def">
     <goal name="ket_with_ancs&#39;vc.4.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="kronecker_eq">
      <goal name="ket_with_ancs&#39;vc.4.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="4.01"/></proof>
      </goal>
      <goal name="ket_with_ancs&#39;vc.4.0.0.0.1" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="kronecker_kets">
       <goal name="ket_with_ancs&#39;vc.4.0.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="1.51" steps="952928"/></proof>
       </goal>
       <goal name="ket_with_ancs&#39;vc.4.0.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="3.44" steps="1203860"/></proof>
       </goal>
       <goal name="ket_with_ancs&#39;vc.4.0.0.0.1.2" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="1.42" steps="952899"/></proof>
       </goal>
       <goal name="ket_with_ancs&#39;vc.4.0.0.0.1.3" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="3.38" steps="1220592"/></proof>
       </goal>
       <goal name="ket_with_ancs&#39;vc.4.0.0.0.1.4" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="2.47" steps="1034858"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="modular_multiplier&#39;vc" expl="VC for modular_multiplier" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="modular_multiplier&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="3.81" steps="1317795"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="3.82" steps="1322743"/></proof>
   </goal>
   <goal name="modular_multiplier&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="3.86" steps="1322550"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="(j-bound),(power 2 (n+1)),(-1),(power 2 (n+1)+j-bound)">
    <goal name="modular_multiplier&#39;vc.2.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="3.84" steps="1306080"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="modular_multiplier&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.80"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.3" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="(j-bound),(power 2 (n+1)),(-1),(power 2 (n+1)+j-bound)">
   <goal name="modular_multiplier&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="2.49"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier&#39;vc.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ket_to_bv_ket">
    <goal name="modular_multiplier&#39;vc.4.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="4.02" steps="1334262"/></proof>
    </goal>
    <goal name="modular_multiplier&#39;vc.4.0.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="1.55"/></proof>
    </goal>
    <goal name="modular_multiplier&#39;vc.4.0.2" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="1.86"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.80"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.01"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.7" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures2">
   <goal name="modular_multiplier&#39;vc.7.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.59"/></proof>
   </goal>
   <goal name="modular_multiplier&#39;vc.7.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="3.96" steps="1289778"/></proof>
   </goal>
   <goal name="modular_multiplier&#39;vc.7.2" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="2.01"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="2.66" steps="1024131"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.9" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier&#39;vc.9.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.83"/></proof>
   </goal>
   <goal name="modular_multiplier&#39;vc.9.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.79"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.10" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier&#39;vc.10.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.88"/></proof>
   </goal>
   <goal name="modular_multiplier&#39;vc.10.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.84"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.11" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier&#39;vc.11.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.61"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.12" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.82"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.13" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier&#39;vc.13.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.82"/></proof>
   </goal>
   <goal name="modular_multiplier&#39;vc.13.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.15"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.14" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier&#39;vc.14.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.83"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.15" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.84"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.16" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="modular_multiplier&#39;vc.16.0" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="path_sem_comp" arg2="with" arg3="(kronecker (ket (n + 1) (modib @ i)) (kronecker (ket (n + 2) 0) (ket 1 0)))
">
    <goal name="modular_multiplier&#39;vc.16.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="2.93"/></proof>
    </goal>
    <goal name="modular_multiplier&#39;vc.16.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.72"/></proof>
    </goal>
    <goal name="modular_multiplier&#39;vc.16.0.2" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="insert_qbits_path_sem_basis">
     <goal name="modular_multiplier&#39;vc.16.0.2.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="2.01"/></proof>
     </goal>
     <goal name="modular_multiplier&#39;vc.16.0.2.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="2.01"/></proof>
     </goal>
     <goal name="modular_multiplier&#39;vc.16.0.2.2" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.99"/></proof>
     </goal>
     <goal name="modular_multiplier&#39;vc.16.0.2.3" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="2.00"/></proof>
     </goal>
     <goal name="modular_multiplier&#39;vc.16.0.2.4" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.93"/></proof>
     </goal>
     <goal name="modular_multiplier&#39;vc.16.0.2.5" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.97"/></proof>
     </goal>
     <goal name="modular_multiplier&#39;vc.16.0.2.6" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.99"/></proof>
     </goal>
     <goal name="modular_multiplier&#39;vc.16.0.2.7" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.93"/></proof>
     </goal>
     <goal name="modular_multiplier&#39;vc.16.0.2.8" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.94"/></proof>
     </goal>
     <goal name="modular_multiplier&#39;vc.16.0.2.9" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.96"/></proof>
     </goal>
     <goal name="modular_multiplier&#39;vc.16.0.2.10" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="2.24"/></proof>
     </goal>
     <goal name="modular_multiplier&#39;vc.16.0.2.11" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="4.20" steps="1380813"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="modular_multiplier&#39;vc.16.0.3" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.97"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.17" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="1.73"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.18" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="4.18" steps="1373262"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.19" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.17"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.20" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.93"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.21" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier&#39;vc.21.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures">
    <goal name="modular_multiplier&#39;vc.21.0.0" expl="assertion" proved="true">
    <transf name="apply" proved="true" arg1="path_sem_comp" arg2="with" arg3="(kronecker (ket (n + 1) (modib @ i))
   (kronecker (ket (n + 2) 0) (ket 1 1)))">
     <goal name="modular_multiplier&#39;vc.21.0.0.0" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="4.23" steps="1386041"/></proof>
     </goal>
     <goal name="modular_multiplier&#39;vc.21.0.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="2.03"/></proof>
     </goal>
     <goal name="modular_multiplier&#39;vc.21.0.0.2" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures10">
      <goal name="modular_multiplier&#39;vc.21.0.0.2.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(mod1 ((modib @ i) + bound) (power 2 (n + 1)))" arg2="i
">
       <goal name="modular_multiplier&#39;vc.21.0.0.2.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.67"/></proof>
       </goal>
       <goal name="modular_multiplier&#39;vc.21.0.0.2.0.1" expl="equality hypothesis" proved="true">
       <transf name="replace" proved="true" arg1="((modib @ i) )" arg2="(mod1 (i - bound) (power 2 (n + 1)))
">
        <goal name="modular_multiplier&#39;vc.21.0.0.2.0.1.0" expl="equality hypothesis" proved="true">
        <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="(i-bound),(power 2 (n+1)),(-1),(power 2 (n+1)+i-bound)">
         <goal name="modular_multiplier&#39;vc.21.0.0.2.0.1.0.0" expl="equality hypothesis" proved="true">
         <transf name="replace" proved="true" arg1="(mod1 (i - bound) (power 2 (n + 1)))" arg2="((power 2 (n + 1) + i) - bound)
">
          <goal name="modular_multiplier&#39;vc.21.0.0.2.0.1.0.0.0" expl="equality hypothesis" proved="true">
          <transf name="replace" proved="true" arg1="(((power 2 (n + 1) + i) - bound) + bound)" arg2="(((1*power 2 (n + 1) + i)  ))
">
           <goal name="modular_multiplier&#39;vc.21.0.0.2.0.1.0.0.0.0" expl="equality hypothesis" proved="true">
           <transf name="rewrite" proved="true" arg1="mod_plus_fact_gen_mod">
            <goal name="modular_multiplier&#39;vc.21.0.0.2.0.1.0.0.0.0.0" expl="equality hypothesis" proved="true">
            <transf name="apply" proved="true" arg1="mod_inf">
             <goal name="modular_multiplier&#39;vc.21.0.0.2.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="4.38" steps="1427090"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="modular_multiplier&#39;vc.21.0.0.2.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="2"><result status="valid" time="4.38" steps="1426796"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="modular_multiplier&#39;vc.21.0.0.2.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="0"><result status="valid" time="1.92"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="modular_multiplier&#39;vc.21.0.0.2.0.1.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="2"><result status="valid" time="4.35" steps="1428384"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="modular_multiplier&#39;vc.21.0.0.2.0.1.1" expl="equality hypothesis" proved="true">
        <proof prover="0"><result status="valid" time="1.80"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="modular_multiplier&#39;vc.21.0.0.2.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="1.99"/></proof>
      </goal>
      <goal name="modular_multiplier&#39;vc.21.0.0.2.2" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="3.19"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="modular_multiplier&#39;vc.21.0.0.3" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.84"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.22" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier&#39;vc.22.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="1.94"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.23" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier&#39;vc.23.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="3.07" steps="1148385"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.24" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier&#39;vc.24.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.81"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.25" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier&#39;vc.25.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.93"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.26" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier&#39;vc.26.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.90"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.27" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier&#39;vc.27.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.29"/></proof>
   </goal>
   <goal name="modular_multiplier&#39;vc.27.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.06"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.28" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier&#39;vc.28.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.03"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.29" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier&#39;vc.29.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.05"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.30" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier&#39;vc.30.0" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="path_sem_comp" arg2="with" arg3="(kronecker (ket (n + 1) i) (kronecker (ket (n + 2) 0) (ket 1 1)))
">
    <goal name="modular_multiplier&#39;vc.30.0.0" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="4.30" steps="1391873"/></proof>
    </goal>
    <goal name="modular_multiplier&#39;vc.30.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="2.07"/></proof>
    </goal>
    <goal name="modular_multiplier&#39;vc.30.0.2" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="2.09"/></proof>
    </goal>
    <goal name="modular_multiplier&#39;vc.30.0.3" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="2.30"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.31" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier&#39;vc.31.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="2.07"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.32" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="ancilla_free_seq">
   <goal name="modular_multiplier&#39;vc.32.0" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="2.10"/></proof>
   </goal>
   <goal name="modular_multiplier&#39;vc.32.1" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="2.05"/></proof>
   </goal>
   <goal name="modular_multiplier&#39;vc.32.2" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="2.00"/></proof>
   </goal>
  </transf>
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier&#39;vc.32.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="1.79"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.33" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier&#39;vc.33.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.04"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.34" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier&#39;vc.34.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.02"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.35" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier&#39;vc.35.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures">
    <goal name="modular_multiplier&#39;vc.35.0.0" expl="assertion" proved="true">
    <transf name="apply" proved="true" arg1="path_sem_comp" arg2="with" arg3="(kronecker (ket (n + 1) (mod1 (p * i) bound))
   (kronecker (ket (n + 2) 0) (ket 1 1)))
">
     <goal name="modular_multiplier&#39;vc.35.0.0.0" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="4.26" steps="1405792"/></proof>
     </goal>
     <goal name="modular_multiplier&#39;vc.35.0.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="2.20"/></proof>
     </goal>
     <goal name="modular_multiplier&#39;vc.35.0.0.2" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="path_sem_reverse">
      <goal name="modular_multiplier&#39;vc.35.0.0.2.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="4.30" steps="1412397"/></proof>
      </goal>
      <goal name="modular_multiplier&#39;vc.35.0.0.2.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="4.59"/></proof>
      </goal>
      <goal name="modular_multiplier&#39;vc.35.0.0.2.2" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="2.11"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="modular_multiplier&#39;vc.35.0.0.3" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="2.36"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.36" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier&#39;vc.36.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="2.11"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.37" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.34" steps="1111365"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.38" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier&#39;vc.38.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_bijective_auto">
    <goal name="modular_multiplier&#39;vc.38.0.0" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="3.96" steps="1494794"/></proof>
    </goal>
    <goal name="modular_multiplier&#39;vc.38.0.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="modular_multiplier&#39;vc.38.0.1.0" expl="apply premises" proved="true">
     <transf name="exists" proved="true" arg1="(if e&#39; &lt; ((2 * n) + 4) -1 then e&#39; +1 else 0)
">
      <goal name="modular_multiplier&#39;vc.38.0.1.0.0" proved="true">
      <proof prover="2"><result status="valid" time="3.69" steps="1465786"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.39" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="modular_multiplier&#39;vc.39.0" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="with_permutation_kronecker_gen">
    <goal name="modular_multiplier&#39;vc.39.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.79"/></proof>
    </goal>
    <goal name="modular_multiplier&#39;vc.39.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="2.03"/></proof>
    </goal>
    <goal name="modular_multiplier&#39;vc.39.0.2" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.81"/></proof>
    </goal>
    <goal name="modular_multiplier&#39;vc.39.0.3" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.94"/></proof>
    </goal>
    <goal name="modular_multiplier&#39;vc.39.0.4" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="2.08"/></proof>
    </goal>
    <goal name="modular_multiplier&#39;vc.39.0.5" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="2.09"/></proof>
    </goal>
    <goal name="modular_multiplier&#39;vc.39.0.6" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.79"/></proof>
    </goal>
    <goal name="modular_multiplier&#39;vc.39.0.7" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="2.12"/></proof>
    </goal>
    <goal name="modular_multiplier&#39;vc.39.0.8" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(kronecker (ket 1 0) (kronecker (ket n i) (ket (n + 3) 0)))" arg2="(kronecker (ket (n + 1) i) (kronecker (ket (n + 2) 0) (ket 1 0)))
">
     <goal name="modular_multiplier&#39;vc.39.0.8.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="Assert2">
      <goal name="modular_multiplier&#39;vc.39.0.8.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="goal_comm">
       <goal name="modular_multiplier&#39;vc.39.0.8.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="kronecker_assoc_use">
        <goal name="modular_multiplier&#39;vc.39.0.8.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="kronecker_eq">
         <goal name="modular_multiplier&#39;vc.39.0.8.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="2.06"/></proof>
         </goal>
         <goal name="modular_multiplier&#39;vc.39.0.8.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="kronecker_kets">
          <goal name="modular_multiplier&#39;vc.39.0.8.0.0.0.0.1.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="2.10"/></proof>
          </goal>
          <goal name="modular_multiplier&#39;vc.39.0.8.0.0.0.0.1.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="2.08"/></proof>
          </goal>
          <goal name="modular_multiplier&#39;vc.39.0.8.0.0.0.0.1.2" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="2.12"/></proof>
          </goal>
          <goal name="modular_multiplier&#39;vc.39.0.8.0.0.0.0.1.3" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="4.26" steps="1401082"/></proof>
          </goal>
          <goal name="modular_multiplier&#39;vc.39.0.8.0.0.0.0.1.4" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="2.06"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="modular_multiplier&#39;vc.39.0.8.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="1.98"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="modular_multiplier&#39;vc.39.0.8.1" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="kronecker_assoc_use">
      <goal name="modular_multiplier&#39;vc.39.0.8.1.0" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="kronecker_eq">
       <goal name="modular_multiplier&#39;vc.39.0.8.1.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.81"/></proof>
       </goal>
       <goal name="modular_multiplier&#39;vc.39.0.8.1.0.1" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="kronecker_kets">
        <goal name="modular_multiplier&#39;vc.39.0.8.1.0.1.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="2.09"/></proof>
        </goal>
        <goal name="modular_multiplier&#39;vc.39.0.8.1.0.1.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="2.08"/></proof>
        </goal>
        <goal name="modular_multiplier&#39;vc.39.0.8.1.0.1.2" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="2.09"/></proof>
        </goal>
        <goal name="modular_multiplier&#39;vc.39.0.8.1.0.1.3" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="3.48" steps="1401082"/></proof>
        </goal>
        <goal name="modular_multiplier&#39;vc.39.0.8.1.0.1.4" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.77"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.40" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="modular_multiplier&#39;vc.40.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures6">
    <goal name="modular_multiplier&#39;vc.40.0.0" expl="assertion" proved="true">
    <proof prover="0"><result status="valid" time="1.79"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.41" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="set_ancilla_free">
   <goal name="modular_multiplier&#39;vc.41.0" expl="apply premises" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures">
    <goal name="modular_multiplier&#39;vc.41.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures7">
     <goal name="modular_multiplier&#39;vc.41.0.0.0" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="2.60" steps="1114026"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.42" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.67" steps="1045485"/></proof>
  </goal>
  <goal name="modular_multiplier&#39;vc.43" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="modular_multiplier&#39;vc.43.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="modular_multiplier&#39;vc.43.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_with_ancs&#39;spec">
     <goal name="modular_multiplier&#39;vc.43.0.0.0" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="3.15"/></proof>
     </goal>
     <goal name="modular_multiplier&#39;vc.43.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="1.79"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="modular_multiplier&#39;vc.44" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.89"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="reg_final&#39;vc" expl="VC for reg_final" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="reg_final&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.83"/></proof>
  </goal>
  <goal name="reg_final&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.58"/></proof>
  </goal>
  <goal name="reg_final&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.01"/></proof>
  </goal>
  <goal name="reg_final&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.61"/></proof>
  </goal>
  <goal name="reg_final&#39;vc.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.72"/></proof>
  </goal>
  <goal name="reg_final&#39;vc.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.77"/></proof>
  </goal>
  <goal name="reg_final&#39;vc.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.56"/></proof>
  </goal>
  <goal name="reg_final&#39;vc.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.76"/></proof>
  </goal>
  <goal name="reg_final&#39;vc.8" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.71"/></proof>
  </goal>
  <goal name="reg_final&#39;vc.9" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="reg_final&#39;vc.9.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="result&#39;def">
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="reg_final&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.14"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="shor_circuit&#39;vc" expl="VC for shor_circuit" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="shor_circuit&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.52"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.54"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.54"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.75"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.73"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.00"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.76"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.10"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.8" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.01"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.9" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.10"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.10" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.79"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.11" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.82"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.12" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.84"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.13" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.78"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.14" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.84"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.15" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.94"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.16" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="shor_circuit&#39;vc.16.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="shor_circuit&#39;vc.16.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="((4 * n) + 4)" arg2="(2*n+ ((2 * n) + 4))">
     <goal name="shor_circuit&#39;vc.16.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="kronecker_ket_l">
      <goal name="shor_circuit&#39;vc.16.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="3.04" steps="1288994"/></proof>
      </goal>
      <goal name="shor_circuit&#39;vc.16.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="3.15" steps="1288994"/></proof>
      </goal>
      <goal name="shor_circuit&#39;vc.16.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="3.12" steps="1288992"/></proof>
      </goal>
      <goal name="shor_circuit&#39;vc.16.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="4.81" steps="1532315"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="shor_circuit&#39;vc.16.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="2"><result status="valid" time="1.99" steps="1214079"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shor_circuit&#39;vc.17" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="shor_circuit&#39;vc.17.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="shor_circuit&#39;vc.17.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ind_isum_empty">
     <goal name="shor_circuit&#39;vc.17.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Power_zero">
      <goal name="shor_circuit&#39;vc.17.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="4.28"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="shor_circuit&#39;vc.17.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="1.94" steps="1232704"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shor_circuit&#39;vc.18" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="shor_circuit&#39;vc.18.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="shor_circuit&#39;vc.18.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
     <goal name="shor_circuit&#39;vc.18.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(ind_isum (fun (l:int) -&gt; (getbv x @ l) * power 2 (((2 * n) - l) - 1)) 0
      k)" arg2="(ind_isum
      (fun (k1:int) -&gt; (getbv x @ k1) * power 2 ((x.length1 - 1) - k1)) 0
      (x.length1))
">
      <goal name="shor_circuit&#39;vc.18.0.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
      </transf>
      </goal>
      <goal name="shor_circuit&#39;vc.18.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
       <goal name="shor_circuit&#39;vc.18.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="shor_circuit&#39;vc.18.0.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="4.29"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="shor_circuit&#39;vc.18.0.0.0.1.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="4.44"/></proof>
       </goal>
       <goal name="shor_circuit&#39;vc.18.0.0.0.1.2" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="3.32" steps="1291085"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shor_circuit&#39;vc.19" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="shor_circuit&#39;vc.19.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.91"/></proof>
   </goal>
   <goal name="shor_circuit&#39;vc.19.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.16"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="shor_circuit&#39;vc.20" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.95"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.21" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.18"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.22" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.12"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.23" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.33"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.24" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="2.35"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.25" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="2.36"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.26" expl="loop invariant init" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="shor_circuit&#39;vc.26.0" expl="loop invariant init" proved="true">
   <proof prover="0"><result status="valid" time="2.05"/></proof>
   </goal>
   <goal name="shor_circuit&#39;vc.26.1" expl="loop invariant init" proved="true">
   <proof prover="0"><result status="valid" time="2.35"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="shor_circuit&#39;vc.27" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="3.70" steps="1386173"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.28" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.35"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.29" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.09"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.30" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.09"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.31" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.40"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.32" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.43"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.33" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.07"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.34" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.01"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.35" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.02"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.36" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.21"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.37" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="shor_circuit&#39;vc.37.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.36"/></proof>
   </goal>
   <goal name="shor_circuit&#39;vc.37.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="3.17" steps="1386082"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="shor_circuit&#39;vc.38" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="shor_circuit&#39;vc.38.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.08"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="shor_circuit&#39;vc.39" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="shor_circuit&#39;vc.39.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.12"/></proof>
   </goal>
   <goal name="shor_circuit&#39;vc.39.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.47"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="shor_circuit&#39;vc.40" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="shor_circuit&#39;vc.40.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.07"/></proof>
   </goal>
   <goal name="shor_circuit&#39;vc.40.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.13"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="shor_circuit&#39;vc.41" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="shor_circuit&#39;vc.41.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.24"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="shor_circuit&#39;vc.42" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.63"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.43" expl="loop variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="shor_circuit&#39;vc.43.0" expl="loop variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="2.57"/></proof>
   </goal>
   <goal name="shor_circuit&#39;vc.43.1" expl="loop variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="2.55"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="shor_circuit&#39;vc.44" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="shor_circuit&#39;vc.44.0" expl="loop invariant preservation" proved="true">
   <proof prover="0"><result status="valid" time="2.29"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="shor_circuit&#39;vc.45" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="shor_circuit&#39;vc.45.0" expl="loop invariant preservation" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures1
">
    <goal name="shor_circuit&#39;vc.45.0.0" expl="loop invariant preservation" proved="true">
    <transf name="apply" proved="true" arg1="path_sem_comp" arg2="with" arg3="(regs (k-1) x)
">
     <goal name="shor_circuit&#39;vc.45.0.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(width c1)" arg2="(4*n+4)">
      <goal name="shor_circuit&#39;vc.45.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="1.32" steps="6101208"/></proof>
      </goal>
      <goal name="shor_circuit&#39;vc.45.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="0"><result status="valid" time="2.58"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="shor_circuit&#39;vc.45.0.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="2.28"/></proof>
     </goal>
     <goal name="shor_circuit&#39;vc.45.0.0.2" expl="apply premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="shor_circuit&#39;vc.45.0.0.2.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="H10">
       <goal name="shor_circuit&#39;vc.45.0.0.2.0.0" expl="apply premises" proved="true">
       <transf name="case" proved="true" arg1="(getbv x (k-1) = 1)">
        <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0" expl="true case (apply premises)" proved="true">
        <transf name="rewrite" proved="true" arg1="cont_kron_pat_right">
         <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.0" expl="true case (apply premises)" proved="true">
         <transf name="rewrite" proved="true" arg1="H10">
          <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.0.0" expl="true case (apply premises)" proved="true">
          <transf name="apply" proved="true" arg1="kronecker_eq">
           <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="2.55"/></proof>
           </goal>
           <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.0.0.1" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="modular_multiplier&#39;spec1">
            <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.0.0.1.0" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(mod1
   (mod1 (power pick (power 2 (((2 * n) - k1) - 1))) bound
    * mod1
      (power pick
       (ind_isum (fun (l:int) -&gt; (getbv x @ l) * power 2 (((2 * n) - l) - 1))
        0 (k - 1)))
      bound)
   bound)" arg2="(mod1
   (power pick
    (ind_isum (fun (l:int) -&gt; (getbv x @ l) * power 2 (((2 * n) - l) - 1)) 0
     k))
   bound)">
             <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
             </transf>
             </goal>
             <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
             <transf name="rewrite" proved="true" arg1="mod_mod_mult">
              <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.0.0.1.0.1.0" expl="equality hypothesis" proved="true">
              <transf name="replace" proved="true" arg1="(ind_isum (fun (l:int) -&gt; (getbv x @ l) * power 2 (((2 * n) - l) - 1)) 0 k)" arg2="(ind_isum (fun (l:int) -&gt; (getbv x @ l) * power 2 (((2 * n) - l) - 1)) 0 (k-1+1))
">
               <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.0.0.1.0.1.0.0" expl="equality hypothesis" proved="true">
               <transf name="rewrite" proved="true" arg1="ind_isum_right_extension">
                <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.0.0.1.0.1.0.0.0" expl="equality hypothesis" proved="true">
                <transf name="rewrite" proved="true" arg1="power_sum">
                 <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.0.0.1.0.1.0.0.0.0" expl="equality hypothesis" proved="true">
                 <transf name="compute_specified" proved="true" >
                  <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.0.0.1.0.1.0.0.0.0.0" expl="equality hypothesis" proved="true">
                  <transf name="apply" proved="true" arg1="mod_eq">
                   <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.0.0.1.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="assert" proved="true" arg1="(forall a b c. a= c -&gt; a*b = b*c )
">
                    <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.0.0.1.0.1.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                    <proof prover="0"><result status="valid" time="2.63"/></proof>
                    </goal>
                    <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.0.0.1.0.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                    <transf name="apply" proved="true" arg1="h">
                     <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.0.0.1.0.1.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                     <proof prover="0"><result status="valid" time="2.16"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.0.0.1.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                 <transf name="apply" proved="true" arg1="ind_isum_pos">
                  <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.0.0.1.0.1.0.0.0.1.0" expl="apply premises" proved="true">
                  <proof prover="0"><result status="valid" time="2.32"/></proof>
                  </goal>
                  <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.0.0.1.0.1.0.0.0.1.1" expl="apply premises" proved="true">
                  <transf name="compute_specified" proved="true" >
                   <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.0.0.1.0.1.0.0.0.1.1.0" expl="apply premises" proved="true">
                   <proof prover="0"><result status="valid" time="2.99"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.0.0.1.0.1.0.0.0.2" expl="rewrite premises" proved="true">
                 <proof prover="0"><result status="valid" time="2.26"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.0.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="0"><result status="valid" time="2.35"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.0.0.1.0.1.0.1" expl="equality hypothesis" proved="true">
               <transf name="replace" proved="true" arg1="((k - 1) + 1)" arg2="k
">
                <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.0.0.1.0.1.0.1.0" expl="equality hypothesis" proved="true">
                <transf name="compute_specified" proved="true" >
                </transf>
                </goal>
                <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.0.0.1.0.1.0.1.1" expl="equality hypothesis" proved="true">
                <proof prover="0"><result status="valid" time="2.35"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.0.0.1.0.1.1" expl="rewrite premises" proved="true">
              <proof prover="0"><result status="valid" time="2.35"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.0.0.1.1.0" proved="true">
             <proof prover="0"><result status="valid" time="2.31"/></proof>
             </goal>
             <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.0.0.1.1.1" proved="true">
             <proof prover="2"><result status="valid" time="4.32" steps="1866293"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.0.0.1.2" expl="rewrite premises" proved="true">
            <proof prover="0"><result status="valid" time="2.48"/></proof>
            </goal>
            <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.0.0.1.3" expl="rewrite premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.0.0.1.3.0" proved="true">
             <proof prover="0"><result status="valid" time="2.37"/></proof>
             </goal>
             <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.0.0.1.3.1" proved="true">
             <proof prover="0"><result status="valid" time="2.36"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="2.18"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="2.20"/></proof>
         </goal>
         <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="2.22"/></proof>
         </goal>
         <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.3" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="3.15"/></proof>
         </goal>
         <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.4" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="4.46" steps="1866996"/></proof>
         </goal>
         <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.5" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="2.32"/></proof>
         </goal>
         <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.0.6" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="4.54" steps="1883653"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.1" expl="false case (apply premises)" proved="true">
        <transf name="rewrite" proved="true" arg1="cont_kron_pat_right1">
         <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.1.0" expl="false case (apply premises)" proved="true">
         <transf name="rewrite" proved="true" arg1="H10">
          <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.1.0.0" expl="false case (apply premises)" proved="true">
          <transf name="replace" proved="true" arg1="(ind_isum (fun (l:int) -&gt; (getbv x @ l) * power 2 (((2 * n) - l) - 1)) 0
      k)" arg2="((ind_isum (fun (l:int) -&gt; (getbv x @ l) * power 2 (((2 * n) - l) - 1)) 0
      (k-1)))
">
           <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.1.0.0.0" expl="false case (apply premises)" proved="true">
           <transf name="compute_specified" proved="true" >
           </transf>
           </goal>
           <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
           <transf name="rewrite" proved="true" arg1="ind_isum_re">
            <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.1.0.0.1.0" expl="equality hypothesis" proved="true">
            <transf name="apply" proved="true" arg1="add_zero">
             <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.1.0.0.1.0.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
              <proof prover="0"><result status="valid" time="3.27"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.1.0.0.1.1" expl="rewrite premises" proved="true">
            <proof prover="0"><result status="valid" time="2.53"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.1.0.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="2.36"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.1.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="2.70"/></proof>
         </goal>
         <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.1.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="2.64"/></proof>
         </goal>
         <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.1.3" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="3.64"/></proof>
         </goal>
         <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.1.4" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="4.30" steps="1866995"/></proof>
         </goal>
         <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.1.5" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="2.53"/></proof>
         </goal>
         <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.1.6" expl="rewrite premises" proved="true">
         <transf name="apply" proved="true" arg1="get_binary_zero" arg2="with" arg3="(2*n)
">
          <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.1.6.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="2.24"/></proof>
          </goal>
          <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.1.6.1" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="2.19"/></proof>
          </goal>
          <goal name="shor_circuit&#39;vc.45.0.0.2.0.0.1.6.2" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="4.68" steps="1883660"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="shor_circuit&#39;vc.45.0.0.2.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="2.30"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="shor_circuit&#39;vc.45.0.0.3" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="2.28"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shor_circuit&#39;vc.46" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="shor_circuit&#39;vc.46.0" expl="loop invariant preservation" proved="true">
   <proof prover="0"><result status="valid" time="2.28"/></proof>
   </goal>
   <goal name="shor_circuit&#39;vc.46.1" expl="loop invariant preservation" proved="true">
   <proof prover="0"><result status="valid" time="2.32"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="shor_circuit&#39;vc.47" expl="loop invariant preservation" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures1">
   <goal name="shor_circuit&#39;vc.47.0" expl="loop invariant preservation" proved="true">
   <transf name="apply" proved="true" arg1="ancilla_free_seq">
    <goal name="shor_circuit&#39;vc.47.0.0" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="3.22" steps="1478625"/></proof>
    </goal>
    <goal name="shor_circuit&#39;vc.47.0.1" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="1.98" steps="1402756"/></proof>
    </goal>
    <goal name="shor_circuit&#39;vc.47.0.2" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_ancilla_free">
     <goal name="shor_circuit&#39;vc.47.0.2.0" expl="apply premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="shor_circuit&#39;vc.47.0.2.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="2.41"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shor_circuit&#39;vc.48" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.89"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.49" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.28"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.50" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="((4 * n) + 4)" arg2="(2*n+ (2*n+4))">
   <goal name="shor_circuit&#39;vc.50.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="kronecker_ket_l">
    <goal name="shor_circuit&#39;vc.50.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="2.11"/></proof>
    </goal>
    <goal name="shor_circuit&#39;vc.50.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="2.06"/></proof>
    </goal>
    <goal name="shor_circuit&#39;vc.50.0.2" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="2.06"/></proof>
    </goal>
    <goal name="shor_circuit&#39;vc.50.0.3" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="2.13"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="shor_circuit&#39;vc.50.1" expl="equality hypothesis" proved="true">
   <proof prover="0"><result status="valid" time="2.10"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="shor_circuit&#39;vc.51" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.20"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.52" expl="precondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="shor_circuit&#39;vc.52.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="reg_sup&#39;def">
    <goal name="shor_circuit&#39;vc.52.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="reg_controlled&#39;def">
     <goal name="shor_circuit&#39;vc.52.0.0.0" expl="precondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="shor_circuit&#39;vc.52.0.0.0.0" expl="precondition" proved="true">
      <transf name="rewrite" proved="true" arg1="superposition_state&#39;spec2">
       <goal name="shor_circuit&#39;vc.52.0.0.0.0.0" expl="precondition" proved="true">
       <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr">
        <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0" expl="precondition" proved="true">
        <transf name="rewrite" proved="true" arg1="path_sem_scal">
         <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0" expl="precondition" proved="true">
         <transf name="rewrite" proved="true" arg1="kronecker_ket_sum_distr_l_rew">
          <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.0" expl="precondition" proved="true">
          <transf name="rewrite" proved="true" arg1="path_sem_sum_">
           <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.0.0" expl="precondition" proved="true">
           <transf name="apply" proved="true" arg1="scalar_eq_gen">
            <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
             <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="3.88" steps="1830310"/></proof>
             </goal>
             <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="2.43" steps="1741707"/></proof>
             </goal>
             <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="2.71" steps="1741723"/></proof>
             </goal>
             <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.0.0.0.3.0" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
               <transf name="replace" proved="true" arg1="(kronecker (bv_to_ket a) (ket_with_ancs  1))" arg2="(regs 0 a)
">
                <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
                <transf name="replace" proved="true" arg1="(2*n)" arg2="k">
                 <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="apply" proved="true" arg1="LoopInvariant1">
                  <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="4.15" steps="1832128"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.0.0.0.3.0.0.0.1" expl="equality hypothesis" proved="true">
                 <proof prover="2"><result status="valid" time="3.85" steps="1830328"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.0.0.0.3.0.0.1" expl="equality hypothesis" proved="true">
                <transf name="rewrite" proved="true" arg1="H8">
                 <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.0.0.0.3.0.0.1.0" expl="equality hypothesis" proved="true">
                 <proof prover="2"><result status="valid" time="2.81" steps="1741719"/></proof>
                 </goal>
                 <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.0.0.0.3.0.0.1.1" expl="rewrite premises" proved="true">
                 <proof prover="2"><result status="valid" time="4.38" steps="1830315"/></proof>
                 </goal>
                 <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.0.0.0.3.0.0.1.2" expl="rewrite premises" proved="true">
                 <proof prover="2"><result status="valid" time="4.62" steps="1832128"/></proof>
                 </goal>
                 <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.0.0.0.3.0.0.1.3" expl="rewrite premises" proved="true">
                 <proof prover="2"><result status="valid" time="2.65" steps="1741719"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="2.58" steps="1741707"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="2.83" steps="1741709"/></proof>
           </goal>
           <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="1"><result status="valid" time="1.13" steps="35634"/></proof>
           </goal>
           <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.0.3.0" expl="rewrite premises" proved="true">
            <transf name="replace" proved="true" arg1="(width c)" arg2="(2*n+ (2*n+4))">
             <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.0.3.0.0" expl="rewrite premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.0.3.0.0.0" expl="rewrite premises" proved="true">
              <transf name="apply" proved="true" arg1="kronecker_ket_l">
               <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="4.42" steps="1830324"/></proof>
               </goal>
               <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.0.3.0.0.0.1" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="4.49" steps="1830319"/></proof>
               </goal>
               <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.0.3.0.0.0.2" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
                <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.0.3.0.0.0.2.0" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="4.43" steps="1832128"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.0.3.0.0.0.3" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="2.95" steps="1741721"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.0.3.0.1" expl="equality hypothesis" proved="true">
             <proof prover="0"><result status="valid" time="5.47"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
             <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="4.29" steps="1832128"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="4.05" steps="1853132"/></proof>
          </goal>
          <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="2.34" steps="1741711"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <transf name="replace" proved="true" arg1="(width c)" arg2="(2*n+ (2*n+4))">
          <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
          <transf name="apply" proved="true" arg1="kronecker_ket_l">
           <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="4.16" steps="1830301"/></proof>
           </goal>
           <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="4.31" steps="1830296"/></proof>
           </goal>
           <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.1.0.2" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="5.26"/></proof>
           </goal>
           <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.1.0.3" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="2.97" steps="1741709"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="shor_circuit&#39;vc.52.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
          <proof prover="2"><result status="valid" time="2.61" steps="1741725"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="shor_circuit&#39;vc.52.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="0.96" steps="5245467"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shor_circuit&#39;vc.53" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="shor_circuit&#39;vc.53.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.01"/></proof>
   </goal>
   <goal name="shor_circuit&#39;vc.53.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.36"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="shor_circuit&#39;vc.54" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.88"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.55" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.17"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.56" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.19"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.57" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.11"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.58" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.47"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.59" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="((4 * n) + 4)" arg2="(2*n+ (2*n+4))">
   <goal name="shor_circuit&#39;vc.59.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="kronecker_ket_l">
    <goal name="shor_circuit&#39;vc.59.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="2.50"/></proof>
    </goal>
    <goal name="shor_circuit&#39;vc.59.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="2.46"/></proof>
    </goal>
    <goal name="shor_circuit&#39;vc.59.0.2" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="2.43"/></proof>
    </goal>
    <goal name="shor_circuit&#39;vc.59.0.3" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="2.41"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="shor_circuit&#39;vc.59.1" expl="equality hypothesis" proved="true">
   <proof prover="0"><result status="valid" time="2.36"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="shor_circuit&#39;vc.60" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.24"/></proof>
  </goal>
  <goal name="shor_circuit&#39;vc.61" expl="precondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="shor_circuit&#39;vc.61.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="reg_controlled&#39;def">
    <goal name="shor_circuit&#39;vc.61.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="path_sem_scal">
     <goal name="shor_circuit&#39;vc.61.0.0.0" expl="precondition" proved="true">
     <transf name="rewrite" proved="true" arg1="path_sem_sum_">
      <goal name="shor_circuit&#39;vc.61.0.0.0.0" expl="precondition" proved="true">
      <transf name="rewrite" proved="true" arg1="reg_final&#39;def">
       <goal name="shor_circuit&#39;vc.61.0.0.0.0.0" expl="precondition" proved="true">
       <transf name="rewrite" proved="true" arg1="pow_inv_2_scal">
        <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0" expl="precondition" proved="true">
        <transf name="apply" proved="true" arg1="scalar_eq_gen">
         <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="ket_sum_scalar_rev_l">
          <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="ket_sum_eq">
           <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="3.36" steps="1393356"/></proof>
           </goal>
           <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="2.04" steps="1316233"/></proof>
           </goal>
           <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
             <transf name="split_all_full" proved="true" >
              <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="H7">
               <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="place_kron_left_path">
                <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="path_sem_rev_qft_unit">
                 <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr">
                  <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="apply" proved="true" arg1="scalar_eq_gen">
                   <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="kronecker_ket_sum_distr_l_rew">
                    <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
                     <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="ket_with_ancs&#39;spec1">
                      <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="4.39" steps="1835919"/></proof>
                      </goal>
                      <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                      <proof prover="2"><result status="valid" time="4.57" steps="1836566"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="2.37" steps="1742964"/></proof>
                     </goal>
                     <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="ket_with_ancs&#39;spec1">
                      <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="2.82" steps="1742982"/></proof>
                      </goal>
                      <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.2.1" expl="rewrite premises" proved="true">
                      <proof prover="2"><result status="valid" time="4.14" steps="1836566"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0" expl="apply premises" proved="true">
                      <transf name="compute_specified" proved="true" >
                       <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
                       <transf name="apply" proved="true" arg1="kronecker_eq">
                        <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
                        <transf name="apply" proved="true" arg1="scalar_eq_gen">
                         <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
                         <proof prover="3"><result status="valid" time="0.87" steps="5166870"/></proof>
                         </goal>
                         <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1" expl="apply premises" proved="true">
                         <transf name="replace" proved="true" arg1="(ket_to_int (bv_to_ket a1))" arg2="(bv_to_int a1)">
                          <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1.0" expl="apply premises" proved="true">
                          <proof prover="0"><result status="valid" time="5.75"/></proof>
                          </goal>
                          <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1.1" expl="equality hypothesis" proved="true">
                          <proof prover="2"><result status="valid" time="4.22" steps="1836867"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.1" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="2.58" steps="1742976"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                    <transf name="compute_specified" proved="true" >
                     <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                      <transf name="apply" proved="true" arg1="scalar_ket_l">
                       <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                       <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
                        <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="4.46" steps="1837737"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                    <transf name="apply" proved="true" arg1="ket_l_to_ket1" arg2="with" arg3="((2 * n+4))">
                     <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
                     <transf name="apply" proved="true" arg1="ket_with_ancs&#39;spec2">
                      <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
                      <transf name="split_vc" proved="true" >
                       <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
                       <proof prover="2"><result status="valid" time="4.23" steps="1836121"/></proof>
                       </goal>
                       <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.2.0.0.1" expl="apply premises" proved="true">
                       <proof prover="2"><result status="valid" time="4.29" steps="1836164"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="2.39" steps="1742968"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                   <proof prover="2"><result status="valid" time="2.47" steps="1742964"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                 <proof prover="3"><result status="valid" time="0.89" steps="5183319"/></proof>
                 </goal>
                 <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                 <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
                  <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.2.0" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="4.31" steps="1837719"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3" expl="rewrite premises" proved="true">
                 <proof prover="3"><result status="valid" time="0.88" steps="5160166"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="2"><result status="valid" time="3.98" steps="1835915"/></proof>
                </goal>
                <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
                <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
                 <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.2.0" expl="apply premises" proved="true">
                 <proof prover="2"><result status="valid" time="4.43" steps="1837748"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.3" expl="rewrite premises" proved="true">
                <transf name="replace" proved="true" arg1="(((4 * n) + 4) - width (qft_rev (2 * n)))" arg2="(2*n+4)">
                 <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.3.0" expl="rewrite premises" proved="true">
                 <proof prover="3"><result status="valid" time="0.93" steps="5460856"/></proof>
                 </goal>
                 <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.0.3.1" expl="equality hypothesis" proved="true">
                 <proof prover="2"><result status="valid" time="2.65" steps="1742984"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="4.52" steps="1835913"/></proof>
               </goal>
               <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.2" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="4.46" steps="1837719"/></proof>
               </goal>
               <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.0.2.0.0.0.3" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="2.45" steps="1742964"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="2.94" steps="1393356"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="2.03" steps="1316233"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="shor_circuit&#39;vc.61.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="3.35" steps="1393356"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="shor_circuit&#39;vc.61.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="2.09" steps="1316235"/></proof>
      </goal>
      <goal name="shor_circuit&#39;vc.61.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="2.04" steps="1316242"/></proof>
      </goal>
      <goal name="shor_circuit&#39;vc.61.0.0.0.3" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="shor_circuit&#39;vc.61.0.0.0.3.0" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="4.81" steps="1743538"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="shor_circuit&#39;vc.61.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="4.23"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shor_circuit&#39;vc.62" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="shor_circuit&#39;vc.62.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.33"/></proof>
   </goal>
   <goal name="shor_circuit&#39;vc.62.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.28"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="shor_circuit&#39;vc.63" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="shor_circuit&#39;vc.63.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="Ensures4">
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shor_circuit&#39;vc.64" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures1">
   <goal name="shor_circuit&#39;vc.64.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="Ensures4">
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shor_circuit&#39;vc.65" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures2">
   <goal name="shor_circuit&#39;vc.65.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures3">
    <goal name="shor_circuit&#39;vc.65.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="ancilla_free_seq">
     <goal name="shor_circuit&#39;vc.65.0.0.0" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="3.43" steps="1388651"/></proof>
     </goal>
     <goal name="shor_circuit&#39;vc.65.0.0.1" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures32">
      <goal name="shor_circuit&#39;vc.65.0.0.1.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="Ensures33">
       <goal name="shor_circuit&#39;vc.65.0.0.1.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="ancilla_free_seq">
        <goal name="shor_circuit&#39;vc.65.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="2.77" steps="1388631"/></proof>
        </goal>
        <goal name="shor_circuit&#39;vc.65.0.0.1.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="2.90" steps="1389672"/></proof>
        </goal>
        <goal name="shor_circuit&#39;vc.65.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="1.62" steps="1315449"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="shor_circuit&#39;vc.65.0.0.2" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="3.48" steps="1389672"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
