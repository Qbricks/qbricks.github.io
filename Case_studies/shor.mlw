module Shor_spec
         use shor_circuit.Shor
         use export modular_multiplier.Multiplier
         use int.Int
         use qbricks.Semantics
         use arit.Inverse
         use qpe.Phase_estim
         use qft.Qft
         use p_int.P_minmax
         use arit.Inverse
         use  exponentiation.Complex_Exponentiation
         use  complex_operations.Base_type
         use qbricks.Circuit_macros
         use arit.Inverse
use p_set.Fset_comp
       
let lemma shor_meas_j_k    (a bound n i  k:int)
               requires{0<n}
               requires{0<= a < power_ 2 n}
               requires{power_ 2 (n-1)< bound < power_ 2 n}
               requires{a < bound}
               requires{co_prime a bound}
               requires{0<= k < (multi_order a bound)}
               requires{0<= i < multi_order a bound}
               ensures{cpower (pow_inv_2 (2*n)) 2 *.  cpower (i_to_c (greatest_factor a bound n i)) 2 *. (min_mod_sum a bound n)<=.
                         proba_measure (path_sem (shor_circ a bound n) (kronecker (ket (2*n) 0) (ket n 1)))
                            ((best_appr_  k a bound n)  * (power_ 2 n) +  mod (power_ a i ) bound) (3*n)}
  =
  transitive_inf_int   bound  (power_ 2 n) (power_ 2 (2*n));
  transitive_inf_int  (multi_order a bound) bound (power_ 2 (2*n));
  transitive_inf_leq_int i (multi_order a bound) (power_ 2 (2*n));
  kronecker_ket_l_sum (ket (2*n) 0) (ket n 1) (2*n) n (width (shor_circ a bound n));
  div_mod_sim_bound  (best_appr_  k a bound n)  (mod (power_ a i) bound)  (power_ 2 n) (power_ 2 (2*n));
  transitive_infeq (cpower (pow_inv_2 (2*n)) 2 *.  (cpower (i_to_c (greatest_factor a bound n i)) 2 *.  (min_mod_sum a bound n)))
    (proba_measure_from_scal_sum_sum_fun (path_sem (shor_circ a bound n) (kronecker (ket (2*n) 0) (ket n 1)))
       i  (best_appr_  k a bound n) (greatest_factor a bound n i) (3*n)  n  (2*n) (fun i1 j1 -> int_qft_coeff  i1 (-j1) (2*n)) (fun i1 -> i1 * (multi_order a bound) + mod i (multi_order a bound))
       (fun l -> mod (power_ a l) bound)  (pow_inv_2 (2*n)))
    (proba_measure (path_sem (shor_circ a bound n) (kronecker (ket (2*n) 0) (ket n 1)))
        (best_appr_  k a bound n  * (power_ 2 n) + mod (power_ a i ) bound) (3*n))
  
let lemma greatest_factor_sum (a bound n:int)(cst:complex)
               requires{0<n}
               requires{0<= a < power_ 2 n}
               requires{power_ 2 (n-1)< bound < power_ 2 n}
               requires{a < bound}
               requires{co_prime a bound}
               ensures{sum (to_fset 0 (multi_order a bound)) (fun i -> i_to_c (greatest_factor a bound n i) *. cst) = i_to_c (power_ 2 (2*n)) *. cst }
               ensures{ cpower  (i_to_c (power_ 2 (2*n)))2 <=. sum (to_fset 0 (multi_order a bound)) (fun i -> cpower (i_to_c (greatest_factor a bound n i))2) *. i_to_c (multi_order a bound)}
  =
  greatest_factor_sum_in_n (multi_order a bound) (2*n) cst
  
let lemma  shor_meas_i    (a bound n j k:int)
               requires{0<n}
               requires{0<= a < power_ 2 n}
               requires{power_ 2 (n-1)< bound < power_ 2 n}
               requires{a < bound}
               requires{co_prime a bound}
               requires{0<= k < multi_order a bound}
               ensures{cpower ( pow_inv_2 (2*n)) 2 *. (min_mod_sum a bound n) *. (sum (to_fset 0 (multi_order a bound))
                                                                                      (fun  i -> if 0 <= i < multi_order a bound then cpower ( i_to_c (greatest_factor a bound n i)) 2 else c_zero))
                    <=. proba_measure_cond (path_sem (shor_circ a bound n) (kronecker (ket (2*n) 0) (ket n 1)))  (3*n)
                          (fun y1 ->  div y1 (power_ 2 n) =  (best_appr_  k a bound n))}
  = div_mod_sim_bound_gen_r   (best_appr_  k a bound n)   (power_ 2 n) (power_ 2 (2*n))
    
let lemma  shor_meas_spec    (a bound n  :int)
               requires{0<n}
               requires{0<= a < power_ 2 n}
               requires{power_ 2 (n-1)< bound < power_ 2 n}
               requires{a < bound}
               requires{co_prime a bound}
               ensures{  min_mod_sum a bound n
                       <=.   proba_measure_cond (path_sem (shor_circ a bound n) (kronecker (ket (2*n) 0) (ket n 1)))  (3*n)
                               (fun y1 -> exists k. 0<= k < multi_order a bound && div y1 (power_ 2 n) =   (best_appr_  k a bound n) )}
               ensures{ (i_to_c (euler_phi (multi_order a bound ))/. i_to_c (multi_order a bound) ) *.  (min_mod_sum a bound n)
                       <=.   proba_measure_cond (path_sem (shor_circ a bound n) (kronecker (ket (2*n) 0) (ket n 1)))  (3*n)
                               (fun y1 -> exists k. 0<= k < multi_order a bound && co_prime k (multi_order a bound) && div y1 (power_ 2 n) =   (best_appr_  k a bound n) )}
  = 
  kronecker_ket_l_sum (ket (2*n) 0) (ket n 1) (2*n) n (width (shor_circ a bound n));
  proba_measure_sum_of_conds (to_fset 0  (multi_order a bound)) (path_sem (shor_circ a bound n) (kronecker (ket (2*n) 0) (ket n 1))) (3*n)
    (fun k i -> if 0 <= k < multi_order a bound then div i (power_ 2 n) =   (best_appr_  k a bound n)  else true)
    (cpower ( pow_inv_2 (2*n)) 2 *. (min_mod_sum a bound n) *. (sum (to_fset 0 (multi_order a bound))
                                                                    (fun  i -> if 0 <= i < multi_order a bound then cpower ( i_to_c (greatest_factor a bound n i)) 2else c_zero)))
       (min_mod_sum a bound n);
  proba_measure_sum_of_conds (co_primes (multi_order a bound) ) (path_sem (shor_circ a bound n) (kronecker (ket (2*n) 0) (ket n 1))) (3*n)
    (fun k i -> if 0 <= k < multi_order a bound then  div i (power_ 2 n) =   (best_appr_  k a bound n)  else true)
    (cpower ( pow_inv_2 (2*n)) 2 *. (min_mod_sum a bound n) *. (sum (to_fset 0 (multi_order a bound))
                                                                    (fun  i -> if 0 <= i < multi_order a bound then cpower ( i_to_c (greatest_factor a bound n i)) 2 else c_zero)))
       ((i_to_c (euler_phi (multi_order a bound ))/. i_to_c (multi_order a bound) ) *.  (min_mod_sum a bound n))

          (* It is assumed by Shor in his original article, available at
 *   https://arxiv.org/abs/quant-ph/9508027, that min_mod_sum is asymptotically
 *   bounded below by 4/pi^2. Then so is 
 * proba_measure_cond (path_sem (shor_circ a bound n) (kronecker (ket (2*n) 0) (ket n 1)))  (3*n)
 *                                (fun y1 -> exists k. 0<= k < multi_order a bound && div y1 (power_ 2 n) =   (best_appr_  k a bound n) )
 * Furthermore,  ((euler_phi (multi_order a bound )) /. i_to_c (multi_order a bound)) is proved to be lower bounded by c_one /. log n 
 * (see, eg.Artur Ekert and Richard Jozsa 1996: Quantum computation and Shor's factoring algorithm ), making 
 * proba_measure_cond (path_sem (shor_circ a bound n) (kronecker (ket (2*n) 0) (ket n 1)))  (3*n)
 *   (fun y1 -> exists k. 0<= k < multi_order a bound && co_prime k (multi_order a bound) && div y1 (power_ 2 n) =   (best_appr_  k a bound n) )
 * asymptotically bounded below by 4/(log n * pi^2) *)  

  
end


