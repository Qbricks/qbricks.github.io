module Multiplier
         use export modular_adder.Adder
         use int.Int
         use  qft.Qft
         use  qft.Rev_qft
         use p_int.Int_comp
         use arit.Inverse
use qbricks.Circuit_macros
use p_int.Int_comp
     
let function multiplier_pre (pick bound n  :int):circuit
      requires{0<n}
      requires{0<= pick < power_ 2 n}
      requires{ power_ 2 (n-1)<= bound < power_ 2 n}
      ensures{size result <= cont_size  * (adder_gate_bound n) * n}
      ensures{ancillas result = 0}
      ensures{forall b i . 0<= b < bound ->  0<= i <power_ 2 n -> sem result (kronecker (ket n i) (kronecker (apply_qft (n+1)  b) (ket 1 0))) 
                (kronecker (ket n i)  (kronecker(apply_qft (n+1)  (mod (b+ (pick * i)) bound )) (ket 1 0)))}
      ensures{width result = 2*n+2}
  =
  let rec multiplier_pre_ind (j:int)
            requires{0<=j<n}
      ensures{ancillas result = 0}
      ensures{width result = 2*n+2}
      ensures{size result <= cont_size  * (adder_gate_bound  n)  * (j+1)}
      ensures{forall b i . 0<= b < bound ->  0<= i <power_ 2 n -> sem result (kronecker (ket n i) (kronecker (apply_qft (n+1)  b)(ket 1 0))) 
                (kronecker (ket n i) (kronecker  (apply_qft (n+1)  (mod (b+(pick * (ind_isum   (fun k -> getbv (int_to_bv i n) k * power_ 2 (n-k-1))) 0 (j+1)))bound )) (ket 1 0)))}
      variant{j}
    = if j = 0 then
        begin
          leq_trans (size (cont (modular_adder  (pick * ( power_ 2 (n-1)))  bound  n ) 0 n (2*n+2)))
            (cont_size * size (modular_adder  (pick * ( power_ 2 (n-1)))  bound  n )) (cont_size  * (adder_gate_bound  n)  * (j+1));
          cont_kron_pat_right_gen (modular_adder  (pick * ( power_ 2 (n-1)))  bound  n ) 0 n (2*n+2);
          cont (modular_adder  (pick * ( power_ 2 (n-1)))  bound  n ) 0 n (2*n+2);
        end
      else
        begin
          cont_kron_pat_right_gen (modular_adder  (pick * ( power_ 2 (n-j-1)))  bound  n ) j n (2*n+2);
          sequence (multiplier_pre_ind (j-1)) ( cont (modular_adder (pick * power_ 2 (n-j-1)) bound n) j n (2*n+2))
          end
          in  multiplier_pre_ind (n-1)

let function multiplier_qft_pre (pick bound  n :int) (ghost  b i:int):circuit
      requires{0<n}
      requires{0<= pick < bound}
      requires{power_ 2 (n-1)<= bound < power_ 2 n}
      requires{0<= b < bound}
      requires{0<= i < power_ 2 n}
      ensures{size result <= polysquare (n+1) (2* cont_size) (cont_size * (adder_gate_bound n)) 0}
      ensures{ancillas result = 0}
      ensures{width result = 2*n+2}
      ensures{sem result (kronecker (ket n i)  (kronecker(ket (n+1) b) (ket 1 0))) (kronecker (ket n i)  (kronecker (ket (n+1) (mod   (b+(pick * i)) bound)) (ket 1 0)))}
      ensures{sem result (kronecker (ket n i)  (kronecker(kronecker (ket 1 0)(ket n b)) (ket 1 0)))
              (kronecker (ket n i)  (kronecker(kronecker (ket 1 0) (ket n (mod  (b+ (pick * i)) bound))) (ket 1 0)))}
      ensures{forall  i'. 0<= i' < power_ 2 n -> result =
           apply_function_in_qft_basis (multiplier_pre pick bound n)(n+1) n (2*n+2) (fun b -> mod   (b+(pick * i')) bound)}
  =  apply_function_in_qft_basis (multiplier_pre pick bound n)(n+1) n (2*n+2) (fun b -> mod   (b+(pick * i)) bound)

let function multiplier_qft_swap (pick bound n :int) (ghost  i:int):circuit
     requires{0<n}
     requires{0<= pick < bound}
     requires{power_ 2 (n-1)<= bound < power_ 2 n}
     requires{0<= i < power_ 2 n}
     ensures{size result <= polysquare (n+1) (2* cont_size) (cont_size * (adder_gate_bound n)) 0}
     ensures{ancillas result = 0}
     ensures{width result = 2*n+2}
     ensures{sem result (kronecker (ket n i)  (kronecker(ket (n+1) 0)(ket 1 0)) )
              (kronecker (ket n (mod   (pick * i) bound))  (kronecker(kronecker (ket 1 0) (ket n i)) (ket 1 0)))}
     ensures{forall i':int. 0 <= i' < power_ 2 n -> result = sequence (multiplier_qft_pre pick bound  n 0 i') (swap_lists 0 (n+1) n (2*n+2))}
  =
  polysquare_leq_trans (n+1) (2* cont_size) (cont_size * (adder_gate_bound n)) 0  0 0 0
    (size (multiplier_qft_pre pick bound n 0 i))  (size (swap_lists 0 (n+1) n (2*n+2)))
    (size (sequence (multiplier_qft_pre pick bound n 0 i) (swap_lists 0 (n+1) n (2*n+2))));
  swap_lists_kets (n+1) n (2*n+2);
    path_sem_comp (multiplier_qft_pre pick bound n 0 i) (swap_lists 0 (n+1) n (2*n+2))
      (kronecker (ket n i) (kronecker (ket (n+1) 0) (ket 1 0)))
      ( kronecker (ket n i)  (kronecker(kronecker (ket 1 0) (ket n (mod   (pick * i) bound))) (ket 1 0)))
      ( kronecker (ket n (mod   (pick * i) bound))  (kronecker(kronecker (ket 1 0) (ket n i)) (ket 1 0)) );
  sequence (multiplier_qft_pre pick bound n 0 i) (swap_lists 0 (n+1) n (2*n+2))
    
use export arit.Divisors
use p_int.Int_comp  

let function restricted_modular_multiplier (pick bound  n :int) (ghost i:int):circuit
               requires{0<n}
               requires{0<= pick < bound}
               requires{power_ 2 (n-1)< bound < power_ 2 n}
               requires{0<= i < bound}
               requires{co_prime pick bound}
               ensures{size result <= polysquare (n+1) (4* cont_size)  ( cont_size * (2*  adder_gate_bound n)) 0}
               ensures{ancillas result = 0}
               ensures{width result = 2*n+2}
               ensures{sem result (kronecker (ket n i)  (kronecker (ket (n+1) 0) (ket 1 0))) 
                         (kronecker (ket n (mod (pick * i) bound))  (kronecker (kronecker (ket  1 0)(ket n 0)) (ket 1 0)))}
               ensures{sem result (kronecker (ket n i)   (ket (n+2) 0)) 
                         (kronecker (ket n (mod (pick * i) bound))(ket (n+2) 0))}
               ensures{forall i': int. 0<= i'< bound -> result = sequence (multiplier_qft_swap pick bound  n i')
                                                                        (multiplier_qft_pre (mod (- (modular_inverse pick bound )) bound)  bound  n i' (mod   (pick * i') bound))  }
  =
  polysquare_leq_trans (n+1)  (2* cont_size) (cont_size * (adder_gate_bound n))0
    (2* cont_size) (cont_size * (adder_gate_bound n)) 0
    (size (multiplier_qft_swap pick bound  n i)) (size (multiplier_qft_pre  (mod (- (modular_inverse pick bound )) bound) bound  n i (mod   (pick * i) bound) ))
    (size (   sequence (multiplier_qft_swap pick bound  n i)
      (multiplier_qft_pre  (mod (- (modular_inverse pick bound )) bound)  bound  n i (mod   (pick * i) bound) )));
    sem_comp (multiplier_qft_swap pick bound  n i) (multiplier_qft_pre  (mod (- (modular_inverse pick bound )) bound)  bound n i (mod   (pick * i) bound) )
      (kronecker (ket n i)  (kronecker(ket (n+1) 0)(ket 1 0)) )
      (kronecker (ket n (mod   (pick * i) bound))  (kronecker(kronecker (ket 1 0) (ket n i))(ket 1 0)) )
      (kronecker (ket n (mod (pick * i) bound))   (kronecker(kronecker (ket  1 0)(ket n 0))(ket 1 0)) );
    sequence (multiplier_qft_swap pick bound  n i)
      (multiplier_qft_pre  (mod (- (modular_inverse pick bound )) bound)  bound n i  (mod (pick * i) bound))

let function check_first_bit_is_one_for_multiplier (n:int):circuit
                  requires{0<n}
                 ensures{size result <= cont_size * 3 }
                 ensures{ancillas result = 0}
                 ensures{width result = 2*n+4}
               ensures{forall g: int. 0<= g < power_ 2 n ->
                                 sem result (kronecker  (ket (n+1) g)  (kronecker (ket (n+2) 0) (ket 1 0)))
                                  (kronecker  (ket (n+1) g)  (kronecker(ket (n+2) 0)(ket 1 0)))}
               ensures{forall g: int.  power_ 2 n <= g < power_ 2 (n+1) ->
                                 sem result (kronecker  (ket (n+1) g)  (kronecker(ket (n+2) 0)(ket 1 0)))
                                               (kronecker  (ket (n+1) g)  (kronecker(ket (n+2) 0)(ket 1 1)))}
    =insert_qbits (check_first_bit_is_one n ) (n+1) (n+2) (n+2)
    
let function check_order_pre (  n bound:int) (ghost i:int):circuit
                  requires{0<n}
                  requires{power_ 2 (n-1)<= bound < power_ 2 n}
                  requires{0<=i < power_ 2 n}
                 ensures{size result <= polysquare (n+1) (cont_size*2+1) 0 (cont_size * 3)}
                 ensures{ancillas result = 0}
                 ensures{width result = 2*n+4}
               ensures{ bound <=i  ->
                                 sem result (kronecker  (ket (n+1) i)  (kronecker (ket (n+2) 0) (ket 1 0)))
                                  (kronecker  (ket (n+1) (i-bound))  (kronecker(ket (n+2) 0)(ket 1 0)))}
               ensures{ i < bound  ->
                                 sem result (kronecker  (ket (n+1) i)  (kronecker(ket (n+2) 0)(ket 1 0)))
                                  (kronecker  (ket (n+1) (mod (i-bound) (power_ 2 (n+1))))  (kronecker(ket (n+2) 0)(ket 1 1)))}
  =
  polysquare_leq_trans  (n+1) (cont_size*2+1) 0 0 0 0 (cont_size*3)
    (size  (place_substract_in_comput_basis bound n (2*n+4)))
    (size  (check_first_bit_is_one_for_multiplier n))
    (size (sequence (place_substract_in_comput_basis bound  n (2*n+4)) (check_first_bit_is_one_for_multiplier n)));
    if  bound <=i then
      sem_comp (place_substract_in_comput_basis bound n (2*n+4)) (check_first_bit_is_one_for_multiplier n)
        (kronecker  (ket (n+1) i)  (kronecker (ket (n+2) 0) (ket 1 0)))
        (kronecker  (ket (n+1) (i-bound))  (kronecker(ket (n+2) 0)(ket 1 0)))
        (kronecker  (ket (n+1) (i-bound))  (kronecker(ket (n+2) 0)(ket 1 0)))
    else
      sem_comp (place_substract_in_comput_basis bound n (2*n+4)) (check_first_bit_is_one_for_multiplier n)
        (kronecker  (ket (n+1) i)  (kronecker (ket (n+2) 0) (ket 1 0)))
        (kronecker  (ket (n+1) (mod (i-bound) (power_ 2 (n+1))))  (kronecker(ket (n+2) 0)(ket 1 0)))
        (kronecker  (ket (n+1) (mod (i-bound) (power_ 2 (n+1))))  (kronecker(ket (n+2) 0)(ket 1 1)));
  sequence (place_substract_in_comput_basis bound n (2*n+4)) (check_first_bit_is_one_for_multiplier n)

let function check_order ( n bound:int)(ghost i:int):circuit
                  requires{0<n}
                  requires{power_ 2 (n-1)<= bound < power_ 2 n}
                  requires{0<=i < power_ 2 n}
                 ensures{size result <= polysquare  (n+1) (cont_size*4+2) 0  (cont_size*3)}
                 ensures{ancillas result = 0}
                 ensures{width result = 2*n+4}
               ensures{ bound <=i  ->
                        sem result (kronecker  (ket (n+1) i)  (kronecker (ket (n+2) 0) (ket 1 0)))
                          (kronecker  (ket (n+1) i)  (kronecker(ket (n+2) 0)(ket 1 0)))}
               ensures{i<bound  ->
                       sem result (kronecker  (ket (n+1) i)  (kronecker(ket (n+2) 0)(ket 1 0)))
                         (kronecker  (ket (n+1) i)  (kronecker(ket (n+2) 0)(ket 1 1)))}
           ensures{forall i'. 0<= i' < power_ 2 n -> result = sequence (check_order_pre  n bound i') (place_add_in_comput_basis bound  n (2*n+4))}
  =
  polysquare_leq_trans  (n+1) (cont_size*2+1) 0  (cont_size*3) (cont_size*2+1) 0 0 
    (size  (check_order_pre n bound i) )
    (size  (place_add_in_comput_basis bound n (2*n+4)))
    (size (sequence (check_order_pre  n bound i) (place_add_in_comput_basis bound n (2*n+4))));
    if  bound <=i then
      sem_comp (check_order_pre n bound i) (place_add_in_comput_basis bound  n (2*n+4)) 
        (kronecker  (ket (n+1) i)  (kronecker (ket (n+2) 0) (ket 1 0)))
        (kronecker  (ket (n+1) (i-bound))  (kronecker(ket (n+2) 0)(ket 1 0)))
        (kronecker  (ket (n+1) i)  (kronecker(ket (n+2) 0)(ket 1 0)))
    else
      sem_comp  (check_order_pre n bound i) (place_add_in_comput_basis bound  n (2*n+4))
        (kronecker  (ket (n+1) i)  (kronecker (ket (n+2) 0) (ket 1 0)))
        (kronecker  (ket (n+1) (mod (i-bound) (power_ 2 (n+1))))  (kronecker(ket (n+2) 0)(ket 1 1)))
        (kronecker  (ket (n+1) i)  (kronecker(ket (n+2) 0)(ket 1 1)));
  sequence (check_order_pre  n bound i) (place_add_in_comput_basis bound  n (2*n+4)) 

let function uncheck_order ( n bound:int) (ghost i:int):circuit
                  requires{0<n}
                  requires{power_ 2 (n-1)<= bound < power_ 2 n}
                  requires{0<= i < power_ 2 n}
                 ensures{size result <= polysquare  (n+1) (cont_size*4+2) 0  (cont_size*3)}
                 ensures{ancillas result = 0}
                 ensures{width result = 2*n+4}
               ensures{ bound <=i  ->
                        sem result  (kronecker  (ket (n+1) i)  (kronecker(ket (n+2) 0)(ket 1 0)))
                          (kronecker  (ket (n+1) i)  (kronecker (ket (n+2) 0) (ket 1 0)))}
               ensures{i<bound  ->
                       sem result  (kronecker  (ket (n+1) i)  (kronecker(ket (n+2) 0)(ket 1 1)))
                         (kronecker  (ket (n+1) i)  (kronecker(ket (n+2) 0)(ket 1 0)))}
           ensures{forall i'. 0<= i' < power_ 2 n -> result = reverse (check_order n bound i')}
  = reverse (check_order  n bound i)
    
let function cont_restricted_modular_multiplier (pick bound  n :int) (ghost i:int):circuit
               requires{0<n}
               requires{0<= pick < bound}
               requires{power_ 2 (n-1)< bound < power_ 2 n}
               requires{0<= i < power_ 2 n}
               requires{co_prime pick bound}
               ensures{size result <= polysquare (n+1) (power_ cont_size 2 *4)  (power_ cont_size 2 * (2*  adder_gate_bound n)) 0}
               ensures{ancillas result = 0}
               ensures{width result = 2*n+4}
               ensures{i < bound -> sem result (kronecker  (ket (n+1) i)  (kronecker(ket (n+2) 0)(ket 1 1)))
                                      (kronecker  (ket (n+1) (mod (pick * i) bound))  (kronecker(ket (n+2) 0)(ket 1 1)))}
               ensures{ bound<= i -> sem result (kronecker  (ket (n+1) i)  (kronecker(ket (n+2) 0)(ket 1 0)))
                                       (kronecker  (ket (n+1) i)  (kronecker(ket (n+2) 0)(ket 1 0)))}
               ensures{forall i': int. 0<= i'< power_ 2 n -> result = place (cont_last_qbit_kron (restricted_modular_multiplier pick bound n (mod i' bound))) 1 (2*n+4)}
  =
  let cont_mult_pre()
           ensures{size result <= polysquare (n+1) (power_ cont_size 2 *4)  (power_ cont_size 2 * (2*  adder_gate_bound n)) 0}
               ensures{ancillas result = 0}
               ensures{width result = 2*n+3}
               ensures{i < bound -> sem result (kronecker  (ket n i)  (kronecker(ket (n+2) 0)(ket 1 1)))
                                      (kronecker  (ket n (mod (pick * i) bound))  (kronecker(ket (n+2) 0)(ket 1 1)))}
               ensures{ bound<= i -> sem result (kronecker  (ket n i)  (kronecker(ket (n+2) 0)(ket 1 0)))
                                       (kronecker  (ket n i)  (kronecker(ket (n+2) 0)(ket 1 0)))}
               ensures{forall i': int. 0<= i'< power_ 2 n -> result =  cont_last_qbit_kron (restricted_modular_multiplier pick bound n (mod i bound))}    
    =  polysquare_leq_trans_sc (n+1) (4* cont_size )  ( cont_size * (2*  adder_gate_bound n)) 0
    (power_ cont_size 2 *4)  (power_ cont_size 2 * (2*  adder_gate_bound n)) 0
    (size (restricted_modular_multiplier pick bound n (mod i bound)))
    cont_size (size (cont_last_qbit_kron (restricted_modular_multiplier pick bound n (mod i bound))));
  cont_last_qbit_kron (restricted_modular_multiplier pick bound n (mod i bound))
  in place (cont_mult_pre()) 1 (2*n+4)

let function modular_multiplier_with_ancillas (pick bound  n :int) (ghost i:int):circuit
               requires{0<n}
               requires{0<= pick < bound}
               requires{power_ 2 (n-1)< bound < power_ 2 n}
               requires{0<= i < power_ 2 n}
               requires{co_prime pick bound}
               ensures{ancillas result = 0}
               ensures{width result = 2*n+4}
               ensures{size result <= polysquare (n+1) (power_ cont_size 2 *4 + 8*cont_size +4)  (power_ cont_size 2 * (2*  adder_gate_bound n)) (cont_size*6)}
               ensures{i < bound -> sem result (kronecker  (ket (n+1) i)  (kronecker(ket (n+2) 0)(ket 1 0)))
                                      (kronecker  (ket (n+1) (mod (pick * i) bound))  (kronecker(ket (n+2) 0)(ket 1 0)))}
               ensures{ bound<= i -> sem result (kronecker  (ket (n+1) i)  (kronecker(ket (n+2) 0)(ket 1 0)))
                                       (kronecker  (ket (n+1) i)  (kronecker(ket (n+2) 0)(ket 1 0)))}
               ensures{i < bound -> sem result (kronecker (ket 1 0) (kronecker  (ket n i)  (ket (n+3) 0)))
                                      (kronecker (ket 1 0) (kronecker  (ket n (mod (pick * i) bound))  (ket (n+3) 0)))}
               ensures{ bound<= i -> sem result (kronecker (ket 1 0)(kronecker  (ket n i)  (ket (n+3) 0)))
                                       (kronecker (ket 1 0)(kronecker  (ket n i)  (ket (n+3) 0)))}
               ensures{result = sequence (sequence (check_order n bound i) (cont_restricted_modular_multiplier pick bound n i))
                                  (uncheck_order n bound (mod (pick * i) bound))}
               ensures{forall i' . 0<= i' < power_ 2 n -> result = sequence (sequence (check_order n bound i') (cont_restricted_modular_multiplier pick bound n i'))
                                  (uncheck_order n bound (mod (pick * i') bound))}
  = let modular_multiplier_pre()
                  ensures{ancillas result = 0}
                  ensures{width result = 2*n+4}
                  ensures{size result <= polysquare (n+1) (power_ cont_size 2 *4 + cont_size *4+2)  (power_ cont_size 2 * (2*  adder_gate_bound n)) (cont_size*3)}
                  ensures{i < bound -> sem result (kronecker  (ket (n+1) i)  (kronecker(ket (n+2) 0)(ket 1 0)))
                                         (kronecker  (ket (n+1) (mod (pick * i) bound))  (kronecker(ket (n+2) 0)(ket 1 1)))}
                  ensures{ bound<= i -> sem result (kronecker  (ket (n+1) i)  (kronecker(ket (n+2) 0)(ket 1 0)))
                                          (kronecker  (ket (n+1) i)  (kronecker(ket (n+2) 0)(ket 1 0)))}
               ensures{result = sequence (check_order n bound i) (cont_restricted_modular_multiplier pick bound n i)}
               ensures{forall i' . 0<= i' < power_ 2 n -> result = sequence (check_order n bound i') (cont_restricted_modular_multiplier pick bound n i')}
      =
      polysquare_leq_trans (n+1) (cont_size*4+2) 0  (cont_size*3) (power_ cont_size 2 *4)  (power_ cont_size 2 * (2*  adder_gate_bound n)) 0
        (size (check_order n bound i))
        (size(cont_restricted_modular_multiplier pick bound n i))
        (size(sequence (check_order n bound i) (cont_restricted_modular_multiplier pick bound n i)));
      if i < bound then sem_comp (check_order n bound i) (cont_restricted_modular_multiplier pick bound n i)
                          (kronecker  (ket (n+1) i)  (kronecker(ket (n+2) 0)(ket 1 0)))
                          (kronecker  (ket (n+1) i)  (kronecker(ket (n+2) 0)(ket 1 1)))
                          (kronecker  (ket (n+1) (mod (pick * i) bound))  (kronecker(ket (n+2) 0)(ket 1 1)))
      else sem_comp (check_order n bound i) (cont_restricted_modular_multiplier pick bound n i)
             (kronecker  (ket (n+1) i)  (kronecker(ket (n+2) 0)(ket 1 0)))
             (kronecker  (ket (n+1) i)  (kronecker(ket (n+2) 0)(ket 1 0)))
             (kronecker  (ket (n+1) i)  (kronecker(ket (n+2) 0)(ket 1 0)));
      sequence (check_order n bound i) (cont_restricted_modular_multiplier pick bound n i)
    in
    let o =  (modular_multiplier_pre()) in
    begin
      polysquare_leq_trans (n+1) (power_ cont_size 2 *4 + cont_size *4+2)  (power_ cont_size 2 * (2*  adder_gate_bound n)) (cont_size*3) (cont_size*4+2) 0  (cont_size*3) 
        (size o) 
        (size (uncheck_order n bound (mod (pick * i) bound)))
        (size (sequence o (uncheck_order n bound (mod (pick * i) bound))));
      if i < bound then sem_comp o (uncheck_order n bound (mod (pick * i) bound))
                          (kronecker  (ket (n+1) i)  (kronecker(ket (n+2) 0)(ket 1 0)))
                          (kronecker  (ket (n+1) (mod (pick * i) bound))  (kronecker(ket (n+2) 0)(ket 1 1)))
                          (kronecker  (ket (n+1) (mod (pick * i) bound))  (kronecker(ket (n+2) 0)(ket 1 0)))
      else sem_comp o (uncheck_order n bound i)
             (kronecker  (ket (n+1) i)  (kronecker(ket (n+2) 0)(ket 1 0)))
         (kronecker  (ket (n+1) i)  (kronecker(ket (n+2) 0)(ket 1 0)))
         (kronecker  (ket (n+1) i)  (kronecker(ket (n+2) 0)(ket 1 0)));
      kronecker_kets 0 0 (n+1) 1;
      sequence o (uncheck_order n bound (mod (pick * i) bound))
    end
let function permut_modular_multiplier (pick bound  n :int) :circuit
               requires{0<n}
               requires{0<= pick < bound}
               requires{power_ 2 (n-1)< bound < power_ 2 n}
               requires{co_prime pick bound}
               ensures{ancillas result = 0}
               ensures{width result = 2*n+4}
               ensures{size result <= polysquare (n+1) (power_ cont_size 2 *4 + 8*cont_size +4)  (power_ cont_size 2 * (2*  adder_gate_bound n)) (cont_size*6)}
               ensures{forall i. 0<= i < bound -> sem result  (kronecker  (ket n i)  (ket (n+4) 0))
                                       (kronecker  (ket n (mod (pick * i) bound))  (ket (n+4) 0))}
               ensures{forall i. bound<= i < power_ 2 n -> sem result (kronecker  (ket n i)  (ket (n+4) 0))
                                                             (kronecker  (ket n i)  (ket (n+4) 0))}
  = (with_permutation (modular_multiplier_with_ancillas pick bound n 0)(fun i -> if i< 1 then i + (2*n+4)-1 else  i - 1) )
  
let function modular_multiplier (pick bound  n :int) :circuit
               requires{0<n}
               requires{power_ 2 (n-1)< bound < power_ 2 n}
               requires{co_prime pick bound}
               ensures{ancillas result = n+4}
               ensures{width result = n}
               ensures{size result <= polysquare (n+1) (power_ cont_size 2 *4 + 8*cont_size +4)  (power_ cont_size 2 * (2*  adder_gate_bound n)) (cont_size*6)}
               ensures{forall i. 0<= i < bound -> sem result    (ket n i)  (ket n (mod (pick * i) bound))}
               ensures{forall i. bound<= i < power_ 2 n -> sem result    (ket n i)  (ket n i)}
  = ancilla_ket (permut_modular_multiplier (mod pick bound) bound n) (n+4) (2*n+4)

let ghost function multiplier_gate_bound (n:int)
               requires{0<n}
               ensures{0<=result}
               ensures{forall a bound: int. 0<= a < power_ 2 n -> power_ 2 (n-1)< bound < power_ 2 n -> a < bound -> co_prime a bound ->
                                       size (modular_multiplier a bound n) <= result}
  = polysquare (n+1) (power_ cont_size 2 *4 + 8*cont_size +4)  (power_ cont_size 2 * (2*  adder_gate_bound n)) (cont_size*6)
end
     
