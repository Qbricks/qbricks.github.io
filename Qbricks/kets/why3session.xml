<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="CVC3" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="Z3" version="4.8.6" alternative="counterexamples" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="4" name="Z3" version="4.8.6" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="7" name="Alt-Ergo" version="2.4.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="9" name="CVC4" version="1.7" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="kets.mlw"/>
<theory name="Superpositions" proved="true">
 <goal name="qbit_zero&#39;vc" expl="VC for qbit_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="qbit_zero&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.74" steps="493827"/></proof>
  </goal>
  <goal name="qbit_zero&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.30" steps="531075"/></proof>
  </goal>
  <goal name="qbit_zero&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.66" steps="591691"/></proof>
  </goal>
  <goal name="qbit_zero&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.17" steps="528139"/></proof>
  </goal>
  <goal name="qbit_zero&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.22" steps="528145"/></proof>
  </goal>
  <goal name="qbit_zero&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.69" steps="495222"/></proof>
  </goal>
  <goal name="qbit_zero&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.71" steps="495225"/></proof>
  </goal>
  <goal name="qbit_zero&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.71" steps="495228"/></proof>
  </goal>
  <goal name="qbit_zero&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.65" steps="592297"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="qbit_one&#39;vc" expl="VC for qbit_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="qbit_one&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.69" steps="493955"/></proof>
  </goal>
  <goal name="qbit_one&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.63" steps="597268"/></proof>
  </goal>
  <goal name="qbit_one&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.22" steps="531654"/></proof>
  </goal>
  <goal name="qbit_one&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.42" steps="528315"/></proof>
  </goal>
  <goal name="qbit_one&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.20" steps="528334"/></proof>
  </goal>
  <goal name="qbit_one&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.89" steps="495326"/></proof>
  </goal>
  <goal name="qbit_one&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.70" steps="495329"/></proof>
  </goal>
  <goal name="qbit_one&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.88" steps="495332"/></proof>
  </goal>
  <goal name="qbit_one&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.95" steps="597783"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_ket_one&#39;vc" expl="VC for get_ket_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_ket_one&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(0&lt;= ket_to_int x &lt; power 2 1)">
   <goal name="get_ket_one&#39;vc.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.72"/></proof>
   </goal>
   <goal name="get_ket_one&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.90"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="get_ket_zero&#39;vc" expl="VC for get_ket_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_ket_zero&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(0&lt;= ket_to_int x &lt; power 2 1)">
   <goal name="get_ket_zero&#39;vc.0.0" expl="asserted formula" proved="true">
   <proof prover="9"><result status="valid" time="1.73" steps="601312"/></proof>
   </goal>
   <goal name="get_ket_zero&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="1.43" steps="528800"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="get_ket_one_decomp_z&#39;vc" expl="VC for get_ket_one_decomp_z" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_ket_one_decomp_z&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="add_ket_l_value">
   <goal name="get_ket_one_decomp_z&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="add_zero_t">
    <goal name="get_ket_one_decomp_z&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="scalar_ket_value">
     <goal name="get_ket_one_decomp_z&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="mult_one_t">
      <goal name="get_ket_one_decomp_z&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.71" steps="495189"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="get_ket_one_decomp_z&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <transf name="rewrite" proved="true" arg1="scalar_ket_value">
     <goal name="get_ket_one_decomp_z&#39;vc.0.0.1.0" expl="rewrite premises" proved="true">
     <transf name="apply" proved="true" arg1="mult_zero_t">
      <goal name="get_ket_one_decomp_z&#39;vc.0.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.73" steps="495189"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="get_ket_one_decomp_z&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="9"><result status="valid" time="1.25" steps="532456"/></proof>
   </goal>
   <goal name="get_ket_one_decomp_z&#39;vc.0.2" expl="rewrite premises" proved="true">
   <proof prover="9"><result status="valid" time="0.70" steps="494265"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="get_ket_one_decomp_o&#39;vc" expl="VC for get_ket_one_decomp_o" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_ket_one_decomp_o&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="add_ket_l_value">
   <goal name="get_ket_one_decomp_o&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="zero_add_t">
    <goal name="get_ket_one_decomp_o&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="scalar_ket_value">
     <goal name="get_ket_one_decomp_o&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="mult_one_t">
      <goal name="get_ket_one_decomp_o&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.72" steps="495248"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="get_ket_one_decomp_o&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="1.83" steps="609656"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="get_ket_one_decomp_o&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="9"><result status="valid" time="1.28" steps="532528"/></proof>
   </goal>
   <goal name="get_ket_one_decomp_o&#39;vc.0.2" expl="rewrite premises" proved="true">
   <proof prover="9"><result status="valid" time="0.70" steps="494335"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="zero_to_bv&#39;vc" expl="VC for zero_to_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="zero_to_bv&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="zero_to_bv&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="zero_to_bv&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="qbit_zero&#39;def">
     <goal name="zero_to_bv&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="bv_to_ket&#39;def">
      <goal name="zero_to_bv&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="ket_eq">
       <goal name="zero_to_bv&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="0.88" steps="609145"/></proof>
       </goal>
       <goal name="zero_to_bv&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="2.04" steps="713765"/></proof>
       </goal>
       <goal name="zero_to_bv&#39;vc.0.0.0.0.0.2" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
        <goal name="zero_to_bv&#39;vc.0.0.0.0.0.2.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="ind_isum_one">
         <goal name="zero_to_bv&#39;vc.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="zero_to_bv&#39;vc.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
           <goal name="zero_to_bv&#39;vc.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="9"><result status="valid" time="0.99" steps="621105"/></proof>
           </goal>
           <goal name="zero_to_bv&#39;vc.0.0.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="9"><result status="valid" time="1.56" steps="646498"/></proof>
           </goal>
           <goal name="zero_to_bv&#39;vc.0.0.0.0.0.2.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="9"><result status="valid" time="0.98" steps="621071"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="zero_to_bv&#39;vc.0.0.0.0.0.2.0.1" expl="rewrite premises" proved="true">
         <proof prover="9"><result status="valid" time="1.96" steps="713777"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="one_to_bv&#39;vc" expl="VC for one_to_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="one_to_bv&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="one_to_bv&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="qbit_one&#39;def">
    <goal name="one_to_bv&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="bv_to_ket&#39;def">
     <goal name="one_to_bv&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="ket_eq">
      <goal name="one_to_bv&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.73" steps="520000"/></proof>
      </goal>
      <goal name="one_to_bv&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="1.69" steps="619238"/></proof>
      </goal>
      <goal name="one_to_bv&#39;vc.0.0.0.0.2" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
       <goal name="one_to_bv&#39;vc.0.0.0.0.2.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="ind_isum_one">
        <goal name="one_to_bv&#39;vc.0.0.0.0.2.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="one_to_bv&#39;vc.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
          <goal name="one_to_bv&#39;vc.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="make_bv_length">
           <goal name="one_to_bv&#39;vc.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="9"><result status="valid" time="1.51" steps="553315"/></proof>
           </goal>
           <goal name="one_to_bv&#39;vc.0.0.0.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="9"><result status="valid" time="1.51" steps="553407"/></proof>
           </goal>
           <goal name="one_to_bv&#39;vc.0.0.0.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="9"><result status="valid" time="0.91" steps="531234"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="one_to_bv&#39;vc.0.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="9"><result status="valid" time="1.34" steps="553407"/></proof>
          </goal>
          <goal name="one_to_bv&#39;vc.0.0.0.0.2.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="9"><result status="valid" time="0.84" steps="531257"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="one_to_bv&#39;vc.0.0.0.0.2.0.1" expl="rewrite premises" proved="true">
        <proof prover="9"><result status="valid" time="2.00" steps="619245"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_zero&#39;vc" expl="VC for bv_to_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_to_zero&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.29" steps="553248"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_one&#39;vc" expl="VC for bv_to_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_to_one&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.33" steps="553372"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="qbit_plus&#39;vc" expl="VC for qbit_plus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="qbit_plus&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.24" steps="528098"/></proof>
  </goal>
  <goal name="qbit_plus&#39;vc.1" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="qbit_plus&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="qbit_plus&#39;vc.1.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="rewrite_pps_apply_basis">
     <goal name="qbit_plus&#39;vc.1.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="pps_apply_basis&#39;def">
      <goal name="qbit_plus&#39;vc.1.0.0.0.0" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="(h_range pps_hadamard)" arg2="1">
       <goal name="qbit_plus&#39;vc.1.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="ket_sum_bitvec_one">
        <goal name="qbit_plus&#39;vc.1.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="apply" proved="true" arg1="scalar_eq_gen">
         <goal name="qbit_plus&#39;vc.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(h_width pps_hadamard)" arg2="1">
          <goal name="qbit_plus&#39;vc.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="add_ket_l_eq">
           <goal name="qbit_plus&#39;vc.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="9"><result status="valid" time="0.73" steps="496743"/></proof>
           </goal>
           <goal name="qbit_plus&#39;vc.1.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="qbit_plus&#39;vc.1.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="scalar_c_one_gen">
             <goal name="qbit_plus&#39;vc.1.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
             <transf name="replace" proved="true" arg1="((h_basis_ket pps_hadamard @ getbv (ket_to_bv (qbit_zero ())))
    @ getbv (int_to_bv 0 1))" arg2="(getbv (int_to_bv 0 1))">
              <goal name="qbit_plus&#39;vc.1.0.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="qbit_zero&#39;def">
               <goal name="qbit_plus&#39;vc.1.0.0.0.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="9"><result status="valid" time="1.77" steps="624269"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="qbit_plus&#39;vc.1.0.0.0.0.0.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
              <proof prover="9"><result status="valid" time="1.74" steps="614503"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="qbit_plus&#39;vc.1.0.0.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
             <transf name="split_all_full" proved="true" >
              <goal name="qbit_plus&#39;vc.1.0.0.0.0.0.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
              <transf name="rewrite" proved="true" arg1="pps_hadamard&#39;def">
               <goal name="qbit_plus&#39;vc.1.0.0.0.0.0.0.0.0.1.0.1.0.0" expl="rewrite premises" proved="true">
               <transf name="replace" proved="true" arg1="((getbv (ket_to_bv (qbit_zero ())) @ 0) * (getbv (int_to_bv 0 1) @ 0))" arg2="0">
                <goal name="qbit_plus&#39;vc.1.0.0.0.0.0.0.0.0.1.0.1.0.0.0" expl="rewrite premises" proved="true">
                <transf name="replace" proved="true" arg1="(getbv (ket_to_bv (qbit_zero ())) @ 0)" arg2="0">
                 <goal name="qbit_plus&#39;vc.1.0.0.0.0.0.0.0.0.1.0.1.0.0.0.0" expl="rewrite premises" proved="true">
                 <proof prover="9"><result status="valid" time="1.80" steps="630634"/></proof>
                 </goal>
                 <goal name="qbit_plus&#39;vc.1.0.0.0.0.0.0.0.0.1.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
                 <proof prover="9"><result status="valid" time="2.45" steps="733947"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="qbit_plus&#39;vc.1.0.0.0.0.0.0.0.0.1.0.1.0.0.1" expl="equality hypothesis" proved="true">
                <proof prover="7"><result status="valid" time="3.35" steps="94350"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="qbit_plus&#39;vc.1.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="qbit_plus&#39;vc.1.0.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="scalar_c_one_gen">
             <goal name="qbit_plus&#39;vc.1.0.0.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
             <transf name="replace" proved="true" arg1="((h_basis_ket pps_hadamard @ getbv (ket_to_bv (qbit_zero ())))
    @ getbv (int_to_bv 1 1))" arg2="(getbv (int_to_bv 1 1))">
              <goal name="qbit_plus&#39;vc.1.0.0.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
              <proof prover="9"><result status="valid" time="1.81" steps="624784"/></proof>
              </goal>
              <goal name="qbit_plus&#39;vc.1.0.0.0.0.0.0.0.0.2.0.0.1" expl="equality hypothesis" proved="true">
              <proof prover="9"><result status="valid" time="1.67" steps="614503"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="qbit_plus&#39;vc.1.0.0.0.0.0.0.0.0.2.0.1" expl="rewrite premises" proved="true">
             <transf name="split_all_full" proved="true" >
              <goal name="qbit_plus&#39;vc.1.0.0.0.0.0.0.0.0.2.0.1.0" expl="rewrite premises" proved="true">
              <transf name="rewrite" proved="true" arg1="pps_hadamard&#39;def">
               <goal name="qbit_plus&#39;vc.1.0.0.0.0.0.0.0.0.2.0.1.0.0" expl="rewrite premises" proved="true">
               <transf name="eliminate_if" proved="true" >
                <goal name="qbit_plus&#39;vc.1.0.0.0.0.0.0.0.0.2.0.1.0.0.0" expl="rewrite premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="qbit_plus&#39;vc.1.0.0.0.0.0.0.0.0.2.0.1.0.0.0.0" expl="rewrite premises" proved="true">
                 <transf name="replace" proved="true" arg1="((getbv (ket_to_bv (qbit_zero ())) @ 0) * (getbv (int_to_bv 1 1) @ 0))" arg2="0
">
                  <goal name="qbit_plus&#39;vc.1.0.0.0.0.0.0.0.0.2.0.1.0.0.0.0.0" expl="rewrite premises" proved="true">
                  <proof prover="9"><result status="valid" time="1.51" steps="637829"/></proof>
                  </goal>
                  <goal name="qbit_plus&#39;vc.1.0.0.0.0.0.0.0.0.2.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
                  <transf name="replace" proved="true" arg1="(getbv (ket_to_bv (qbit_zero ())) @ 0)" arg2="0">
                   <goal name="qbit_plus&#39;vc.1.0.0.0.0.0.0.0.0.2.0.1.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
                   <proof prover="9"><result status="valid" time="1.12" steps="630972"/></proof>
                   </goal>
                   <goal name="qbit_plus&#39;vc.1.0.0.0.0.0.0.0.0.2.0.1.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
                   <proof prover="9"><result status="valid" time="2.05" steps="737598"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="qbit_plus&#39;vc.1.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="9"><result status="valid" time="0.71" steps="496736"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="qbit_plus&#39;vc.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="0.71" steps="496734"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="qbit_plus&#39;vc.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="9"><result status="valid" time="0.79" steps="508027"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="qbit_plus&#39;vc.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="9"><result status="valid" time="0.73" steps="496736"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="qbit_plus&#39;vc.1.0.0.0.1" expl="rewrite premises" proved="true">
      <transf name="replace" proved="true" arg1="(h_width pps_hadamard)" arg2="1">
       <goal name="qbit_plus&#39;vc.1.0.0.0.1.0" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="ket_to_bv_length">
        <goal name="qbit_plus&#39;vc.1.0.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="0.72" steps="496736"/></proof>
        </goal>
        <goal name="qbit_plus&#39;vc.1.0.0.0.1.0.1" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="1.48" steps="530312"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="qbit_plus&#39;vc.1.0.0.0.1.1" expl="equality hypothesis" proved="true">
       <proof prover="9"><result status="valid" time="0.84" steps="496736"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="qbit_plus&#39;vc.1.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="9"><result status="valid" time="1.43" steps="529712"/></proof>
     </goal>
     <goal name="qbit_plus&#39;vc.1.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="9"><result status="valid" time="0.71" steps="496736"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="qbit_plus&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.15" steps="528143"/></proof>
  </goal>
  <goal name="qbit_plus&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.33" steps="532420"/></proof>
  </goal>
  <goal name="qbit_plus&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.23" steps="528655"/></proof>
  </goal>
  <goal name="qbit_plus&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="3.94" steps="624582"/></proof>
  </goal>
  <goal name="qbit_plus&#39;vc.6" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures4">
   <goal name="qbit_plus&#39;vc.6.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="scalar_ket_value">
    <goal name="qbit_plus&#39;vc.6.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="add_ket_l_value">
     <goal name="qbit_plus&#39;vc.6.0.0.0" expl="postcondition" proved="true">
     <proof prover="9"><result status="valid" time="1.49" steps="533481"/></proof>
     </goal>
     <goal name="qbit_plus&#39;vc.6.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="9"><result status="valid" time="1.20" steps="533248"/></proof>
     </goal>
     <goal name="qbit_plus&#39;vc.6.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="9"><result status="valid" time="0.72" steps="495938"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="qbit_minus&#39;vc" expl="VC for qbit_minus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="qbit_minus&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.40" steps="528248"/></proof>
  </goal>
  <goal name="qbit_minus&#39;vc.1" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="qbit_minus&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="qbit_minus&#39;vc.1.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="rewrite_pps_apply_basis">
     <goal name="qbit_minus&#39;vc.1.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="pps_apply_basis&#39;def">
      <goal name="qbit_minus&#39;vc.1.0.0.0.0" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="(h_range pps_hadamard)" arg2="1">
       <goal name="qbit_minus&#39;vc.1.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="ket_sum_bitvec_one">
        <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="apply" proved="true" arg1="scalar_eq_gen">
         <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(h_width pps_hadamard)" arg2="1">
          <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="add_ket_l_eq">
            <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="9"><result status="valid" time="0.71" steps="496949"/></proof>
            </goal>
            <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="scalar_c_one_gen">
             <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="qbit_one&#39;def">
              <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
              <transf name="replace" proved="true" arg1="((h_basis_ket pps_hadamard @ getbv (ket_to_bv (ket 1 1)))
    @ getbv (int_to_bv 0 1))" arg2="(getbv (int_to_bv 0 1))">
               <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="qbit_zero&#39;def">
                <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="bv_to_ket&#39;def">
                 <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="apply" proved="true" arg1="ket_eq">
                  <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <proof prover="9"><result status="valid" time="2.06" steps="626314"/></proof>
                  </goal>
                  <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
                  <proof prover="9"><result status="valid" time="1.78" steps="626286"/></proof>
                  </goal>
                  <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.2" expl="apply premises" proved="true">
                  <proof prover="9"><result status="valid" time="2.01" steps="624928"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
               <proof prover="9"><result status="valid" time="1.63" steps="614735"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
             <transf name="split_all_full" proved="true" >
              <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.0.0.0.1.1.0" expl="rewrite premises" proved="true">
              <transf name="rewrite" proved="true" arg1="pps_hadamard&#39;def">
               <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.0.0.0.1.1.0.0" expl="rewrite premises" proved="true">
               <transf name="replace" proved="true" arg1="((getbv (ket_to_bv (qbit_one ())) @ 0) * (getbv (int_to_bv 0 1) @ 0))" arg2="0
">
                <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.0.0.0.1.1.0.0.0" expl="rewrite premises" proved="true">
                <proof prover="9"><result status="valid" time="1.81" steps="630888"/></proof>
                </goal>
                <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.0.0.0.1.1.0.0.1" expl="equality hypothesis" proved="true">
                <proof prover="7"><result status="valid" time="3.28" steps="94350"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="scalar_eq_gen">
             <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="qbit_one&#39;def">
              <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
              <transf name="replace" proved="true" arg1="((h_basis_ket pps_hadamard @ getbv (ket_to_bv (ket 1 1)))
    @ getbv (int_to_bv 1 1))" arg2="(getbv (int_to_bv 1 1))">
               <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
               <proof prover="9"><result status="valid" time="1.83" steps="624515"/></proof>
               </goal>
               <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.0.0.0.2.0.0.1" expl="equality hypothesis" proved="true">
               <proof prover="9"><result status="valid" time="1.59" steps="614735"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.0.0.0.2.1" expl="apply premises" proved="true">
             <transf name="split_all_full" proved="true" >
              <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.0.0.0.2.1.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="pps_hadamard&#39;def">
               <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.0.0.0.2.1.0.0" expl="apply premises" proved="true">
               <transf name="eliminate_if" proved="true" >
                <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.0.0.0.2.1.0.0.0" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.0.0.0.2.1.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="assert" proved="true" arg1="((getbv (ket_to_bv (qbit_one ())) @ 0) = (getbv (int_to_bv 1 1) @ 0) /\
       (getbv (int_to_bv 1 1) @ 0) = 1)">
                  <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.0.0.0.2.1.0.0.0.0.0" expl="asserted formula" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.0.0.0.2.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
                   <proof prover="9"><result status="valid" time="2.31" steps="741050"/></proof>
                   </goal>
                   <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.0.0.0.2.1.0.0.0.0.0.1" expl="asserted formula" proved="true">
                   <proof prover="9"><result status="valid" time="2.28" steps="738232"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.0.0.0.2.1.0.0.0.0.1" expl="apply premises" proved="true">
                  <proof prover="9"><result status="valid" time="1.51" steps="667634"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="9"><result status="valid" time="0.70" steps="496942"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="0.70" steps="496940"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="qbit_minus&#39;vc.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="9"><result status="valid" time="0.81" steps="508233"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="qbit_minus&#39;vc.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="9"><result status="valid" time="0.73" steps="496942"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="qbit_minus&#39;vc.1.0.0.0.1" expl="rewrite premises" proved="true">
      <transf name="replace" proved="true" arg1="(h_width pps_hadamard)" arg2="1">
       <goal name="qbit_minus&#39;vc.1.0.0.0.1.0" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="ket_to_bv_length">
        <goal name="qbit_minus&#39;vc.1.0.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="0.72" steps="496942"/></proof>
        </goal>
        <goal name="qbit_minus&#39;vc.1.0.0.0.1.0.1" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="1.20" steps="530512"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="qbit_minus&#39;vc.1.0.0.0.1.1" expl="equality hypothesis" proved="true">
       <proof prover="9"><result status="valid" time="0.71" steps="496942"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="qbit_minus&#39;vc.1.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="9"><result status="valid" time="1.42" steps="529893"/></proof>
     </goal>
     <goal name="qbit_minus&#39;vc.1.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="9"><result status="valid" time="0.71" steps="496942"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="qbit_minus&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.37" steps="528319"/></proof>
  </goal>
  <goal name="qbit_minus&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.45" steps="533608"/></proof>
  </goal>
  <goal name="qbit_minus&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.41" steps="528871"/></proof>
  </goal>
  <goal name="qbit_minus&#39;vc.5" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures3">
   <goal name="qbit_minus&#39;vc.5.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="scalar_ket_value">
    <goal name="qbit_minus&#39;vc.5.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="mult_one_t">
     <goal name="qbit_minus&#39;vc.5.0.0.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="3.05" steps="6174127"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="qbit_minus&#39;vc.6" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures4">
   <goal name="qbit_minus&#39;vc.6.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="scalar_ket_value">
    <goal name="qbit_minus&#39;vc.6.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="add_ket_l_value">
     <goal name="qbit_minus&#39;vc.6.0.0.0" expl="postcondition" proved="true">
     <proof prover="9"><result status="valid" time="1.91" steps="614219"/></proof>
     </goal>
     <goal name="qbit_minus&#39;vc.6.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="9"><result status="valid" time="1.45" steps="534839"/></proof>
     </goal>
     <goal name="qbit_minus&#39;vc.6.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="9"><result status="valid" time="0.75" steps="496070"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="add_plus_minus&#39;vc" expl="VC for add_plus_minus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_plus_minus&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.70" steps="495750"/></proof>
  </goal>
  <goal name="add_plus_minus&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.21" steps="528903"/></proof>
  </goal>
  <goal name="add_plus_minus&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.28" steps="619419"/></proof>
  </goal>
  <goal name="add_plus_minus&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.94" steps="620066"/></proof>
  </goal>
  <goal name="add_plus_minus&#39;vc.4" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="add_ket_l_value">
   <goal name="add_plus_minus&#39;vc.4.0" expl="precondition" proved="true">
   <transf name="case" proved="true" arg1="(i = 0)">
    <goal name="add_plus_minus&#39;vc.4.0.0" expl="true case (precondition)" proved="true">
    <transf name="rewrite" proved="true" arg1="get_ket_scalar">
     <goal name="add_plus_minus&#39;vc.4.0.0.0" expl="true case (precondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="h">
      <goal name="add_plus_minus&#39;vc.4.0.0.0.0" expl="true case (precondition)" proved="true">
      <proof prover="9"><result status="valid" time="1.45" steps="529076"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="add_plus_minus&#39;vc.4.0.1" expl="false case (precondition)" proved="true">
    <transf name="replace" proved="true" arg1="i" arg2="1">
     <goal name="add_plus_minus&#39;vc.4.0.1.0" expl="false case (precondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="get_ket_scalar">
      <goal name="add_plus_minus&#39;vc.4.0.1.0.0" expl="false case (precondition)" proved="true">
      <proof prover="9"><result status="valid" time="1.41" steps="536978"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="add_plus_minus&#39;vc.4.0.1.1" expl="equality hypothesis" proved="true">
     <proof prover="9"><result status="valid" time="1.26" steps="536868"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="add_plus_minus&#39;vc.4.1" expl="rewrite premises" proved="true">
   <proof prover="9"><result status="valid" time="1.38" steps="528491"/></proof>
   </goal>
   <goal name="add_plus_minus&#39;vc.4.2" expl="rewrite premises" proved="true">
   <proof prover="9"><result status="valid" time="0.71" steps="495940"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="add_plus_minus&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.72" steps="495881"/></proof>
  </goal>
  <goal name="add_plus_minus&#39;vc.6" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="add_ket_l_scal">
   <goal name="add_plus_minus&#39;vc.6.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="3.17" steps="640974"/></proof>
   </goal>
   <goal name="add_plus_minus&#39;vc.6.1" expl="rewrite premises" proved="true">
   <proof prover="9"><result status="valid" time="0.69" steps="495884"/></proof>
   </goal>
   <goal name="add_plus_minus&#39;vc.6.2" expl="rewrite premises" proved="true">
   <proof prover="9"><result status="valid" time="0.71" steps="495884"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="substr_plus_minus&#39;vc" expl="VC for substr_plus_minus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="substr_plus_minus&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.72" steps="495978"/></proof>
  </goal>
  <goal name="substr_plus_minus&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.25" steps="529366"/></proof>
  </goal>
  <goal name="substr_plus_minus&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.76" steps="627241"/></proof>
  </goal>
  <goal name="substr_plus_minus&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.98" steps="627984"/></proof>
  </goal>
  <goal name="substr_plus_minus&#39;vc.4" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="add_ket_l_value">
   <goal name="substr_plus_minus&#39;vc.4.0" expl="precondition" proved="true">
   <transf name="case" proved="true" arg1="(i = 0)">
    <goal name="substr_plus_minus&#39;vc.4.0.0" expl="true case (precondition)" proved="true">
    <transf name="rewrite" proved="true" arg1="get_ket_scalar">
     <goal name="substr_plus_minus&#39;vc.4.0.0.0" expl="true case (precondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="h">
      <goal name="substr_plus_minus&#39;vc.4.0.0.0.0" expl="true case (precondition)" proved="true">
      <proof prover="9"><result status="valid" time="2.26" steps="650968"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="substr_plus_minus&#39;vc.4.0.1" expl="false case (precondition)" proved="true">
    <transf name="replace" proved="true" arg1="i" arg2="1">
     <goal name="substr_plus_minus&#39;vc.4.0.1.0" expl="false case (precondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="get_ket_scalar">
      <goal name="substr_plus_minus&#39;vc.4.0.1.0.0" expl="false case (precondition)" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="substr_plus_minus&#39;vc.4.0.1.0.0.0" expl="false case (precondition)" proved="true">
       <proof prover="9"><result status="valid" time="2.47" steps="736125"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="substr_plus_minus&#39;vc.4.0.1.1" expl="equality hypothesis" proved="true">
     <proof prover="9"><result status="valid" time="1.29" steps="539555"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="substr_plus_minus&#39;vc.4.1" expl="rewrite premises" proved="true">
   <proof prover="9"><result status="valid" time="1.19" steps="528953"/></proof>
   </goal>
   <goal name="substr_plus_minus&#39;vc.4.2" expl="rewrite premises" proved="true">
   <proof prover="9"><result status="valid" time="0.75" steps="496175"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="substr_plus_minus&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.72" steps="496116"/></proof>
  </goal>
  <goal name="substr_plus_minus&#39;vc.6" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="((-. pow_inv_sqrt_2 1) *.. qbit_minus ())" arg2="(( pow_inv_sqrt_2 1) *.. (-. c_one *.. qbit_minus ()))">
   <goal name="substr_plus_minus&#39;vc.6.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="add_ket_l_scal">
    <goal name="substr_plus_minus&#39;vc.6.0.0" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="3.14" steps="652149"/></proof>
    </goal>
    <goal name="substr_plus_minus&#39;vc.6.0.1" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="0.76" steps="496119"/></proof>
    </goal>
    <goal name="substr_plus_minus&#39;vc.6.0.2" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="1.26" steps="529358"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="substr_plus_minus&#39;vc.6.1" expl="equality hypothesis" proved="true">
   <transf name="rewrite" proved="true" arg1="scalar_assoc">
    <goal name="substr_plus_minus&#39;vc.6.1.0" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="scalar_eq_gen">
     <goal name="substr_plus_minus&#39;vc.6.1.0.0" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="0.74" steps="496117"/></proof>
     </goal>
     <goal name="substr_plus_minus&#39;vc.6.1.0.1" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="2.07" steps="628268"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="plus_to_zero&#39;vc" expl="VC for plus_to_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="plus_to_zero&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="plus_to_zero&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="1.99" steps="706593"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="plus_to_one&#39;vc" expl="VC for plus_to_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="plus_to_one&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="plus_to_one&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="6.70" steps="1359008"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="hadamard_comp&#39;vc" expl="VC for hadamard_comp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="hadamard_comp&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.64" steps="560987"/></proof>
  </goal>
  <goal name="hadamard_comp&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.88"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_equal_qbit&#39;vc" expl="VC for set_equal_qbit" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_equal_qbit&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.38" steps="538394"/></proof>
  </goal>
  <goal name="set_equal_qbit&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.40" steps="537495"/></proof>
  </goal>
  <goal name="set_equal_qbit&#39;vc.2" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="j" arg2="0">
   <goal name="set_equal_qbit&#39;vc.2.0" expl="precondition" proved="true">
   <transf name="case" proved="true" arg1="(i=0)">
    <goal name="set_equal_qbit&#39;vc.2.0.0" expl="true case (precondition)" proved="true">
    <proof prover="9"><result status="valid" time="1.26" steps="528425"/></proof>
    </goal>
    <goal name="set_equal_qbit&#39;vc.2.0.1" expl="false case (precondition)" proved="true">
    <transf name="replace" proved="true" arg1="i" arg2="1">
     <goal name="set_equal_qbit&#39;vc.2.0.1.0" expl="false case (precondition)" proved="true">
     <proof prover="9"><result status="valid" time="0.85" steps="495918"/></proof>
     </goal>
     <goal name="set_equal_qbit&#39;vc.2.0.1.1" expl="equality hypothesis" proved="true">
     <proof prover="9"><result status="valid" time="1.94" steps="633119"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="set_equal_qbit&#39;vc.2.1" expl="equality hypothesis" proved="true">
   <proof prover="9"><result status="valid" time="1.89" steps="632933"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="set_equal_qbit&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.79" steps="496451"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="xor_qbits&#39;vc" expl="VC for xor_qbits" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="xor_qbits&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.84" steps="533390"/></proof>
  </goal>
  <goal name="xor_qbits&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.95" steps="535191"/></proof>
  </goal>
  <goal name="xor_qbits&#39;vc.2" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_ket">
   <goal name="xor_qbits&#39;vc.2.0" expl="apply premises" proved="true">
   <proof prover="9"><result status="valid" time="1.57" steps="569613"/></proof>
   </goal>
   <goal name="xor_qbits&#39;vc.2.1" expl="apply premises" proved="true">
   <proof prover="9"><result status="valid" time="2.12" steps="665459"/></proof>
   </goal>
   <goal name="xor_qbits&#39;vc.2.2" expl="apply premises" proved="true">
   <proof prover="9"><result status="valid" time="2.08" steps="661452"/></proof>
   </goal>
   <goal name="xor_qbits&#39;vc.2.3" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="xor_qbits&#39;vc.2.3.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures2">
     <goal name="xor_qbits&#39;vc.2.3.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="xor_qbits&#39;vc.2.3.0.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="xor_qbits&#39;vc.2.3.0.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="eliminate_definition" proved="true" >
         <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="case" proved="true" arg1="(ket_to_int x = 0)">
          <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
          <transf name="replace" proved="true" arg1="(xor_i (ket_to_int x) (ket_to_int y))" arg2="(ket_to_int y)">
           <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
           <proof prover="9"><result status="valid" time="2.00" steps="660252"/></proof>
           </goal>
           <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
           <transf name="split_all_full" proved="true" >
            <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
            <transf name="rewrite" proved="true" arg1="xor_i&#39;def1">
             <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
             <proof prover="9"><result status="valid" time="1.16" steps="656790"/></proof>
             </goal>
             <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
             <proof prover="9"><result status="valid" time="1.77" steps="695491"/></proof>
             </goal>
             <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
             <proof prover="9"><result status="valid" time="2.66" steps="776651"/></proof>
             </goal>
             <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.0.0.0.1.0.3" expl="rewrite premises" proved="true">
             <proof prover="9"><result status="valid" time="1.06" steps="656792"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.0.0.1" expl="false case (apply premises)" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.0.0.1.0" expl="false case (apply premises)" proved="true">
           <transf name="rewrite" proved="true" arg1="xor_i&#39;def">
            <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.0.0.1.0.0" expl="false case (apply premises)" proved="true">
            <transf name="rewrite" proved="true" arg1="get__ket_value">
             <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.0.0.1.0.0.0" expl="false case (apply premises)" proved="true">
             <transf name="case" proved="true" arg1="( ket_to_int y = 0)">
              <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.0.0.1.0.0.0.0" expl="false case (true case. apply premises)" proved="true">
              <proof prover="9"><result status="valid" time="2.04" steps="700775"/></proof>
              </goal>
              <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.0.0.1.0.0.0.1" expl="false case (apply premises)" proved="true">
              <transf name="replace" proved="true" arg1="(1 - ket_to_int y)" arg2="0">
               <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.0.0.1.0.0.0.1.0" expl="false case (apply premises)" proved="true">
               <transf name="rewrite" proved="true" arg1="zero_add_t">
                <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.0.0.1.0.0.0.1.0.0" expl="false case (apply premises)" proved="true">
                <proof prover="9"><result status="valid" time="2.40" steps="778837"/></proof>
                </goal>
                <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.0.0.1.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                <proof prover="9"><result status="valid" time="2.36" steps="776448"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.0.0.1.0.0.0.1.1" expl="equality hypothesis" proved="true">
               <proof prover="9"><result status="valid" time="2.61" steps="776711"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="9"><result status="valid" time="1.08" steps="656803"/></proof>
             </goal>
             <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
             <proof prover="9"><result status="valid" time="2.57" steps="777727"/></proof>
             </goal>
             <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.0.0.1.0.0.3" expl="rewrite premises" proved="true">
             <proof prover="9"><result status="valid" time="1.94" steps="697507"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
            <proof prover="9"><result status="valid" time="2.66" steps="774258"/></proof>
            </goal>
            <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
            <proof prover="9"><result status="valid" time="2.34" steps="776684"/></proof>
            </goal>
            <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.0.0.1.0.3" expl="rewrite premises" proved="true">
            <proof prover="9"><result status="valid" time="0.98" steps="656794"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="eliminate_definition" proved="true" >
         <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="case" proved="true" arg1="(ket_to_int x = 0)">
          <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.1.0.0" expl="true case (apply premises)" proved="true">
          <transf name="replace" proved="true" arg1="(xor_i (ket_to_int x) (ket_to_int y))" arg2="(ket_to_int y)">
           <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.1.0.0.0" expl="true case (apply premises)" proved="true">
           <transf name="replace" proved="true" arg1="(get_ket (ket 1 (ket_to_int y)) i)" arg2="(get_ket y 1)">
            <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.1.0.0.0.0" expl="true case (apply premises)" proved="true">
            <proof prover="9"><result status="valid" time="2.27" steps="664419"/></proof>
            </goal>
            <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
            <proof prover="9"><result status="valid" time="2.24" steps="661382"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
           <transf name="split_all_full" proved="true" >
            <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.1.0.0.1.0" expl="equality hypothesis" proved="true">
            <transf name="rewrite" proved="true" arg1="xor_i&#39;def1">
             <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.1.0.0.1.0.0" expl="equality hypothesis" proved="true">
             <proof prover="9"><result status="valid" time="1.06" steps="656794"/></proof>
             </goal>
             <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.1.0.0.1.0.1" expl="rewrite premises" proved="true">
             <proof prover="9"><result status="valid" time="1.64" steps="695496"/></proof>
             </goal>
             <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.1.0.0.1.0.2" expl="rewrite premises" proved="true">
             <proof prover="9"><result status="valid" time="2.61" steps="776663"/></proof>
             </goal>
             <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.1.0.0.1.0.3" expl="rewrite premises" proved="true">
             <proof prover="9"><result status="valid" time="1.02" steps="656796"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.1.0.1" expl="false case (apply premises)" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.1.0.1.0" expl="false case (apply premises)" proved="true">
           <transf name="replace" proved="true" arg1="(ket_to_int x)" arg2="1">
            <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.1.0.1.0.0" expl="false case (apply premises)" proved="true">
            <transf name="rewrite" proved="true" arg1="xor_i&#39;def">
             <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.1.0.1.0.0.0" expl="false case (apply premises)" proved="true">
             <transf name="case" proved="true" arg1="(ket_to_int y = 0)">
              <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.1.0.1.0.0.0.0" expl="false case (true case. apply premises)" proved="true">
              <proof prover="9"><result status="valid" time="2.11" steps="701861"/></proof>
              </goal>
              <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.1.0.1.0.0.0.1" expl="false case (apply premises)" proved="true">
              <proof prover="9"><result status="valid" time="2.57" steps="784213"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="9"><result status="valid" time="1.11" steps="656823"/></proof>
             </goal>
             <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.1.0.1.0.0.2" expl="rewrite premises" proved="true">
             <proof prover="9"><result status="valid" time="2.56" steps="776706"/></proof>
             </goal>
             <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.1.0.1.0.0.3" expl="rewrite premises" proved="true">
             <proof prover="9"><result status="valid" time="1.10" steps="656807"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="xor_qbits&#39;vc.2.3.0.0.0.0.1.0.1.0.1" expl="equality hypothesis" proved="true">
            <proof prover="9"><result status="valid" time="2.53" steps="774241"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="xor_qbits&#39;vc.2.3.0.1" expl="rewrite premises" proved="true">
     <proof prover="9"><result status="valid" time="2.15" steps="663876"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="xor_qbits&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="2.90" steps="10094768"/></proof>
  </goal>
  <goal name="xor_qbits&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="3.21" steps="10377418"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="xor_int_to_ket&#39;vc" expl="VC for xor_int_to_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="xor_int_to_ket&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="xor_int_to_ket&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="2.26" steps="709581"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="xor_qbit_minus&#39;vc" expl="VC for xor_qbit_minus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="xor_qbit_minus&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_ket_l">
   <goal name="xor_qbit_minus&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="exists" proved="true" arg1="1">
    <goal name="xor_qbit_minus&#39;vc.0.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="xor_qbit_minus&#39;vc.0.0.0.0" proved="true">
     <proof prover="9"><result status="valid" time="1.21" steps="530674"/></proof>
     </goal>
     <goal name="xor_qbit_minus&#39;vc.0.0.0.1" proved="true">
     <proof prover="9"><result status="valid" time="1.24" steps="530689"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="xor_qbit_minus&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="xor_qbit_minus&#39;vc.0.1.0" expl="apply premises" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="xor_qbit_minus&#39;vc.0.1.0.0" expl="apply premises" proved="true">
     <transf name="case" proved="true" arg1="(i=0)">
      <goal name="xor_qbit_minus&#39;vc.0.1.0.0.0" expl="true case (apply premises)" proved="true">
      <transf name="rewrite" proved="true" arg1="h">
       <goal name="xor_qbit_minus&#39;vc.0.1.0.0.0.0" expl="true case (apply premises)" proved="true">
       <transf name="rewrite" proved="true" arg1="xor_qbits&#39;spec1">
        <goal name="xor_qbit_minus&#39;vc.0.1.0.0.0.0.0" expl="true case (apply premises)" proved="true">
        <proof prover="9"><result status="valid" time="4.65" steps="765979"/></proof>
        </goal>
        <goal name="xor_qbit_minus&#39;vc.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="9"><result status="valid" time="2.29" steps="711116"/></proof>
        </goal>
        <goal name="xor_qbit_minus&#39;vc.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="9"><result status="valid" time="0.97" steps="581802"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="xor_qbit_minus&#39;vc.0.1.0.0.1" expl="false case (apply premises)" proved="true">
      <transf name="replace" proved="true" arg1="i" arg2="1">
       <goal name="xor_qbit_minus&#39;vc.0.1.0.0.1.0" expl="false case (apply premises)" proved="true">
       <transf name="rewrite" proved="true" arg1="xor_qbits&#39;spec">
        <goal name="xor_qbit_minus&#39;vc.0.1.0.0.1.0.0" expl="false case (apply premises)" proved="true">
        <transf name="rewrite" proved="true" arg1="get_ket_scalar">
         <goal name="xor_qbit_minus&#39;vc.0.1.0.0.1.0.0.0" expl="false case (apply premises)" proved="true">
         <transf name="case" proved="true" arg1="(i1=0)">
          <goal name="xor_qbit_minus&#39;vc.0.1.0.0.1.0.0.0.0" expl="false case (true case. apply premises)" proved="true">
          <proof prover="9"><result status="valid" time="1.57" steps="622053"/></proof>
          </goal>
          <goal name="xor_qbit_minus&#39;vc.0.1.0.0.1.0.0.0.1" expl="false case (apply premises)" proved="true">
          <transf name="replace" proved="true" arg1="i" arg2="1">
           <goal name="xor_qbit_minus&#39;vc.0.1.0.0.1.0.0.0.1.0" expl="false case (apply premises)" proved="true">
           <transf name="replace" proved="true" arg1="i1" arg2="1">
            <goal name="xor_qbit_minus&#39;vc.0.1.0.0.1.0.0.0.1.0.0" expl="false case (apply premises)" proved="true">
            <transf name="apply" proved="true" arg1="goal_comm">
             <goal name="xor_qbit_minus&#39;vc.0.1.0.0.1.0.0.0.1.0.0.0" expl="apply premises" proved="true">
             <transf name="replace" proved="true" arg1="(get_ket (ket 1 1) 0)" arg2="c_zero">
              <goal name="xor_qbit_minus&#39;vc.0.1.0.0.1.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
              <transf name="replace" proved="true" arg1="(get_ket (ket 1 1) 1)" arg2="c_one">
               <goal name="xor_qbit_minus&#39;vc.0.1.0.0.1.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="zero_add_t">
                <goal name="xor_qbit_minus&#39;vc.0.1.0.0.1.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="cpower_one">
                 <goal name="xor_qbit_minus&#39;vc.0.1.0.0.1.0.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <proof prover="9"><result status="valid" time="1.59" steps="619244"/></proof>
                 </goal>
                 <goal name="xor_qbit_minus&#39;vc.0.1.0.0.1.0.0.0.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                 <proof prover="9"><result status="valid" time="0.91" steps="581819"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="xor_qbit_minus&#39;vc.0.1.0.0.1.0.0.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="9"><result status="valid" time="1.54" steps="619203"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="xor_qbit_minus&#39;vc.0.1.0.0.1.0.0.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
               <proof prover="9"><result status="valid" time="0.99" steps="582530"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="xor_qbit_minus&#39;vc.0.1.0.0.1.0.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
              <proof prover="9"><result status="valid" time="0.99" steps="582530"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="xor_qbit_minus&#39;vc.0.1.0.0.1.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
            <proof prover="9"><result status="valid" time="1.48" steps="617708"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="xor_qbit_minus&#39;vc.0.1.0.0.1.0.0.0.1.1" expl="equality hypothesis" proved="true">
           <transf name="replace" proved="true" arg1="(ket_length (xor_qbits (ket 1 i1) (qbit_minus ())))" arg2="1" arg3="in" arg4="H">
            <goal name="xor_qbit_minus&#39;vc.0.1.0.0.1.0.0.0.1.1.0" expl="equality hypothesis" proved="true">
            <proof prover="9"><result status="valid" time="1.58" steps="620344"/></proof>
            </goal>
            <goal name="xor_qbit_minus&#39;vc.0.1.0.0.1.0.0.0.1.1.1" expl="equality hypothesis" proved="true">
            <transf name="assert" proved="true" arg1="(is_a_ket_l  (xor_qbits (ket 1 i1) (qbit_minus ()))  1)">
             <goal name="xor_qbit_minus&#39;vc.0.1.0.0.1.0.0.0.1.1.1.0" expl="asserted formula" proved="true">
             <proof prover="9"><result status="valid" time="1.65" steps="618428"/></proof>
             </goal>
             <goal name="xor_qbit_minus&#39;vc.0.1.0.0.1.0.0.0.1.1.1.1" expl="equality hypothesis" proved="true">
             <proof prover="9"><result status="valid" time="1.70" steps="618426"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="xor_qbit_minus&#39;vc.0.1.0.0.1.0.1" expl="rewrite premises" proved="true">
        <proof prover="9"><result status="valid" time="2.12" steps="711041"/></proof>
        </goal>
        <goal name="xor_qbit_minus&#39;vc.0.1.0.0.1.0.2" expl="rewrite premises" proved="true">
        <proof prover="9"><result status="valid" time="1.00" steps="581806"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="xor_qbit_minus&#39;vc.0.1.0.0.1.1" expl="equality hypothesis" proved="true">
       <transf name="replace" proved="true" arg1="(ket_length (xor_qbits (ket 1 i1) (qbit_minus ())))" arg2="1" arg3="in" arg4="H">
        <goal name="xor_qbit_minus&#39;vc.0.1.0.0.1.1.0" expl="equality hypothesis" proved="true">
        <proof prover="9"><result status="valid" time="1.55" steps="620302"/></proof>
        </goal>
        <goal name="xor_qbit_minus&#39;vc.0.1.0.0.1.1.1" expl="equality hypothesis" proved="true">
        <transf name="assert" proved="true" arg1="(is_a_ket_l  (xor_qbits (ket 1 i1) (qbit_minus ()))  1)">
         <goal name="xor_qbit_minus&#39;vc.0.1.0.0.1.1.1.0" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="1.67" steps="618355"/></proof>
         </goal>
         <goal name="xor_qbit_minus&#39;vc.0.1.0.0.1.1.1.1" expl="equality hypothesis" proved="true">
         <proof prover="9"><result status="valid" time="1.66" steps="618378"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_xor_qbit_minus&#39;vc" expl="VC for ket_sum_xor_qbit_minus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_xor_qbit_minus&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="ket_sum_eq">
   <goal name="ket_sum_xor_qbit_minus&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="9"><result status="valid" time="0.97" steps="594016"/></proof>
   </goal>
   <goal name="ket_sum_xor_qbit_minus&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="9"><result status="valid" time="1.00" steps="594007"/></proof>
   </goal>
   <goal name="ket_sum_xor_qbit_minus&#39;vc.0.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="ket_sum_xor_qbit_minus&#39;vc.0.2.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="ket_sum_xor_qbit_minus&#39;vc.0.2.0.0" expl="apply premises" proved="true">
     <proof prover="9"><result status="valid" time="2.46" steps="727993"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="superposition_xor_qbit_minus&#39;vc" expl="VC for superposition_xor_qbit_minus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="superposition_xor_qbit_minus&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr">
   <goal name="superposition_xor_qbit_minus&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="scalar_eq">
    <goal name="superposition_xor_qbit_minus&#39;vc.0.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="kronecker_ket_sum_distr_l_rew">
     <goal name="superposition_xor_qbit_minus&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
      <goal name="superposition_xor_qbit_minus&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="1.89" steps="647882"/></proof>
      </goal>
      <goal name="superposition_xor_qbit_minus&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="0.83" steps="521281"/></proof>
      </goal>
      <goal name="superposition_xor_qbit_minus&#39;vc.0.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="1.42" steps="554634"/></proof>
      </goal>
      <goal name="superposition_xor_qbit_minus&#39;vc.0.0.0.0.3" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="superposition_xor_qbit_minus&#39;vc.0.0.0.0.3.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="superposition_xor_qbit_minus&#39;vc.0.0.0.0.3.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr">
         <goal name="superposition_xor_qbit_minus&#39;vc.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="xor_qbit_minus">
          <goal name="superposition_xor_qbit_minus&#39;vc.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr_r">
           <goal name="superposition_xor_qbit_minus&#39;vc.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="9"><result status="valid" time="1.00" steps="592497"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="superposition_xor_qbit_minus&#39;vc.0.0.0.0.3.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.78"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="superposition_xor_qbit_minus&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="superposition_xor_qbit_minus&#39;vc.0.0.0.1.0" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="superposition_xor_qbit_minus&#39;vc.0.0.0.1.0.0" expl="rewrite premises" proved="true">
       <proof prover="9"><result status="valid" time="2.26" steps="725252"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="superposition_xor_qbit_minus&#39;vc.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="9"><result status="valid" time="1.42" steps="554610"/></proof>
     </goal>
     <goal name="superposition_xor_qbit_minus&#39;vc.0.0.0.3" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.76"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="sum_ket_zero&#39;vc" expl="VC for sum_ket_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sum_ket_zero&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.85" steps="527493"/></proof>
  </goal>
  <goal name="sum_ket_zero&#39;vc.1" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="ang_sum_neutral">
   <goal name="sum_ket_zero&#39;vc.1.0" expl="apply premises" proved="true">
   <proof prover="9"><result status="valid" time="0.88" steps="552399"/></proof>
   </goal>
   <goal name="sum_ket_zero&#39;vc.1.1" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="sum_ket_zero&#39;vc.1.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="sum_ket_zero&#39;vc.1.1.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.93"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="repeat_pps_had&#39;vc" expl="VC for repeat_pps_had" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="repeat_pps_had&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.40" steps="564460"/></proof>
  </goal>
  <goal name="repeat_pps_had&#39;vc.1" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="repeat_pps_had&#39;vc.1.0" expl="variant decrease" proved="true">
   <proof prover="9"><result status="valid" time="1.45" steps="594673"/></proof>
   </goal>
   <goal name="repeat_pps_had&#39;vc.1.1" expl="variant decrease" proved="true">
   <proof prover="9"><result status="valid" time="0.92" steps="559691"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="repeat_pps_had&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.48" steps="594828"/></proof>
  </goal>
  <goal name="repeat_pps_had&#39;vc.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="repeat_pps_had&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="1.47" steps="595159"/></proof>
   </goal>
   <goal name="repeat_pps_had&#39;vc.3.1" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="2.00" steps="731241"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="repeat_pps_had&#39;vc.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="repeat_pps_had&#39;vc.4.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="1.57" steps="595186"/></proof>
   </goal>
   <goal name="repeat_pps_had&#39;vc.4.1" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="2.02" steps="731266"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="repeat_pps_had&#39;vc.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="repeat_pps_had&#39;vc.5.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="1.94" steps="682888"/></proof>
   </goal>
   <goal name="repeat_pps_had&#39;vc.5.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="repeat_pps_had&#39;vc.5.1.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures3">
     <goal name="repeat_pps_had&#39;vc.5.1.0.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="repeat_pps_had&#39;vc.5.1.0.0.0" expl="postcondition" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="repeat_pps_had&#39;vc.5.1.0.0.0.0" expl="VC for repeat_pps_had" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="repeat_pps_had&#39;vc.5.1.0.0.0.0.0" expl="postcondition" proved="true">
        <proof prover="9"><result status="valid" time="2.62" steps="834683"/></proof>
        </goal>
        <goal name="repeat_pps_had&#39;vc.5.1.0.0.0.0.1" expl="postcondition" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="repeat_pps_had&#39;vc.5.1.0.0.0.0.1.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="pps_hadamard&#39;def1">
          <goal name="repeat_pps_had&#39;vc.5.1.0.0.0.0.1.0.0" expl="postcondition" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="repeat_pps_had&#39;vc.5.1.0.0.0.0.1.0.0.0" expl="postcondition" proved="true">
           <proof prover="0"><result status="valid" time="1.00"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="repeat_pps_had&#39;vc.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="repeat_pps_had&#39;vc.6.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_sum_cardone">
    <goal name="repeat_pps_had&#39;vc.6.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="repeat_pps_had&#39;vc.6.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H">
      <goal name="repeat_pps_had&#39;vc.6.0.0.0.0" expl="postcondition" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="repeat_pps_had&#39;vc.6.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="9"><result status="valid" time="3.24" steps="942090"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="repeat_pps_had&#39;vc.6.0.1" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="1.16" steps="644454"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="repeat_pps_had&#39;vc.6.1" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_sum_right_extension">
    <goal name="repeat_pps_had&#39;vc.6.1.0" expl="postcondition" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="repeat_pps_had&#39;vc.6.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures3">
      <goal name="repeat_pps_had&#39;vc.6.1.0.0.0" expl="postcondition" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="repeat_pps_had&#39;vc.6.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="pps_hadamard&#39;def">
        <goal name="repeat_pps_had&#39;vc.6.1.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="repeat_pps_had&#39;vc.6.1.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="apply" proved="true" arg1="ang_add_eq">
          <goal name="repeat_pps_had&#39;vc.6.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="Ensures7">
          </transf>
          </goal>
          <goal name="repeat_pps_had&#39;vc.6.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="9"><result status="valid" time="2.48" steps="849134"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="repeat_pps_had&#39;vc.6.1.1" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="1.76" steps="731680"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="kron_had_coeffs&#39;vc" expl="VC for kron_had_coeffs" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kron_had_coeffs&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.81" steps="528489"/></proof>
  </goal>
  <goal name="kron_had_coeffs&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.85" steps="553341"/></proof>
  </goal>
  <goal name="kron_had_coeffs&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.03" steps="589228"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="superposition_state&#39;vc" expl="VC for superposition_state" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="superposition_state&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.31" steps="565334"/></proof>
  </goal>
  <goal name="superposition_state&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.82" steps="529837"/></proof>
  </goal>
  <goal name="superposition_state&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="2.14" steps="732940"/></proof>
  </goal>
  <goal name="superposition_state&#39;vc.3" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="superposition_state&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="superposition_state&#39;vc.3.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="rewrite_pps_apply_basis">
     <goal name="superposition_state&#39;vc.3.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="pps_apply_basis&#39;def">
      <goal name="superposition_state&#39;vc.3.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="scalar_eq_gen">
       <goal name="superposition_state&#39;vc.3.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
        <goal name="superposition_state&#39;vc.3.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="1.78" steps="733765"/></proof>
        </goal>
        <goal name="superposition_state&#39;vc.3.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="2.11" steps="733753"/></proof>
        </goal>
        <goal name="superposition_state&#39;vc.3.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="9"><result status="valid" time="1.06" steps="695052"/></proof>
        </goal>
        <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="scalar_c_one_gen">
           <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="bv_to_ket_eq">
            <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="make_bv_length">
             <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="9"><result status="valid" time="3.03" steps="892150"/></proof>
             </goal>
             <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.0.1" expl="rewrite premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.0.1.0" expl="rewrite premises" proved="true">
              <transf name="split_all_full" proved="true" >
               <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                <proof prover="9"><result status="valid" time="3.40" steps="1050870"/></proof>
                </goal>
                <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
                <proof prover="9"><result status="valid" time="3.40" steps="1050816"/></proof>
                </goal>
                <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
                <proof prover="9"><result status="valid" time="1.74" steps="923813"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.0.1.1" expl="rewrite premises" proved="true">
              <transf name="split_all_full" proved="true" >
               <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.0.1.1.0" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                <proof prover="9"><result status="valid" time="3.30" steps="1050870"/></proof>
                </goal>
                <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.0.1.1.0.1" expl="apply premises" proved="true">
                <proof prover="9"><result status="valid" time="3.32" steps="1050816"/></proof>
                </goal>
                <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.0.1.1.0.2" expl="apply premises" proved="true">
                <proof prover="9"><result status="valid" time="1.62" steps="923813"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.0.2" expl="rewrite premises" proved="true">
             <proof prover="9"><result status="valid" time="2.28" steps="811999"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.1" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.1.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
              <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.1.0.0" expl="apply premises" proved="true">
              <proof prover="9"><result status="valid" time="3.00" steps="896223"/></proof>
              </goal>
              <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.1.0.1" expl="rewrite premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
               <transf name="split_all_full" proved="true" >
                <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.1.0.1.0.0" expl="rewrite premises" proved="true">
                <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                 <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
                 <proof prover="9"><result status="valid" time="3.43" steps="1054649"/></proof>
                 </goal>
                 <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.1.0.1.0.0.1" expl="apply premises" proved="true">
                 <proof prover="9"><result status="valid" time="3.38" steps="1054626"/></proof>
                 </goal>
                 <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.1.0.1.0.0.2" expl="apply premises" proved="true">
                 <proof prover="9"><result status="valid" time="1.68" steps="923875"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.1.0.1.1" expl="rewrite premises" proved="true">
               <transf name="split_all_full" proved="true" >
                <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.1.0.1.1.0" expl="rewrite premises" proved="true">
                <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                 <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.1.0.1.1.0.0" expl="apply premises" proved="true">
                 <proof prover="9"><result status="valid" time="3.45" steps="1054649"/></proof>
                 </goal>
                 <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.1.0.1.1.0.1" expl="apply premises" proved="true">
                 <proof prover="9"><result status="valid" time="3.39" steps="1054626"/></proof>
                 </goal>
                 <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.1.0.1.1.0.2" expl="apply premises" proved="true">
                 <proof prover="9"><result status="valid" time="1.66" steps="923875"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.1.0.2" expl="rewrite premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.1.0.2.0" expl="rewrite premises" proved="true">
               <proof prover="9"><result status="valid" time="1.37" steps="770270"/></proof>
               </goal>
               <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.1.0.2.1" expl="rewrite premises" proved="true">
               <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
                <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.1.0.2.1.0" expl="rewrite premises" proved="true">
                <proof prover="9"><result status="valid" time="1.40" steps="770248"/></proof>
                </goal>
                <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.1.0.2.1.1" expl="rewrite premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.1.0.2.1.1.0" expl="rewrite premises" proved="true">
                 <transf name="split_all_full" proved="true" >
                  <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.1.0.2.1.1.0.0" expl="rewrite premises" proved="true">
                  <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                   <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.1.0.2.1.1.0.0.0" expl="apply premises" proved="true">
                   <proof prover="9"><result status="valid" time="3.43" steps="1054649"/></proof>
                   </goal>
                   <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.1.0.2.1.1.0.0.1" expl="apply premises" proved="true">
                   <proof prover="9"><result status="valid" time="3.42" steps="1054626"/></proof>
                   </goal>
                   <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.1.0.2.1.1.0.0.2" expl="apply premises" proved="true">
                   <proof prover="9"><result status="valid" time="1.60" steps="923875"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.1.0.2.1.1.1" expl="rewrite premises" proved="true">
                 <transf name="split_all_full" proved="true" >
                  <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.1.0.2.1.1.1.0" expl="rewrite premises" proved="true">
                  <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                   <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.1.0.2.1.1.1.0.0" expl="apply premises" proved="true">
                   <proof prover="9"><result status="valid" time="3.50" steps="1054649"/></proof>
                   </goal>
                   <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.1.0.2.1.1.1.0.1" expl="apply premises" proved="true">
                   <proof prover="9"><result status="valid" time="3.43" steps="1054626"/></proof>
                   </goal>
                   <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.1.0.2.1.1.1.0.2" expl="apply premises" proved="true">
                   <proof prover="9"><result status="valid" time="1.66" steps="923875"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.0.1.0.2.1.2" expl="rewrite premises" proved="true">
                <proof prover="9"><result status="valid" time="2.14" steps="812036"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.1" expl="rewrite premises" proved="true">
           <transf name="split_all_full" proved="true" >
            <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.1.0" expl="rewrite premises" proved="true">
            <transf name="rewrite" proved="true" arg1="repeat_pps_had&#39;spec">
             <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.1.0.0" expl="rewrite premises" proved="true">
             <transf name="rewrite" proved="true" arg1="ang_sum_neutral">
              <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.1.0.0.0" expl="rewrite premises" proved="true">
              <proof prover="9"><result status="valid" time="1.59" steps="923779"/></proof>
              </goal>
              <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.1.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="9"><result status="valid" time="2.70" steps="970706"/></proof>
              </goal>
              <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.1.0.0.2" expl="rewrite premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.1.0.0.2.0" expl="rewrite premises" proved="true">
               <transf name="compute_specified" proved="true" >
                <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.1.0.0.2.0.0" expl="rewrite premises" proved="true">
                <transf name="replace" proved="true" arg1="(getbv (ket_to_bv (ket n 0)) @ k)" arg2="0">
                 <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.1.0.0.2.0.0.0" expl="rewrite premises" proved="true">
                 <proof prover="9"><result status="valid" time="2.75" steps="971630"/></proof>
                 </goal>
                 <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.1.0.0.2.0.0.1" expl="equality hypothesis" proved="true">
                 <proof prover="9"><result status="valid" time="3.42" steps="1051402"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="superposition_state&#39;vc.3.0.0.0.0.0.3.0.0.1.0.1" expl="rewrite premises" proved="true">
             <proof prover="9"><result status="valid" time="1.54" steps="923779"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="superposition_state&#39;vc.3.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="1.99" steps="733753"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="superposition_state&#39;vc.3.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="9"><result status="valid" time="2.82" steps="812270"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="superposition_state&#39;vc.3.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="9"><result status="valid" time="2.13" steps="734281"/></proof>
     </goal>
     <goal name="superposition_state&#39;vc.3.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="9"><result status="valid" time="2.66" steps="809254"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="superposition_state&#39;vc.4" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="superposition_state&#39;vc.4.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="scalar_eq">
    <goal name="superposition_state&#39;vc.4.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_l_to_fset">
     <goal name="superposition_state&#39;vc.4.0.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="superposition_state&#39;vc.4.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="ket_sum_eq">
       <goal name="superposition_state&#39;vc.4.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="2.16" steps="789676"/></proof>
       </goal>
       <goal name="superposition_state&#39;vc.4.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="1.35" steps="749826"/></proof>
       </goal>
       <goal name="superposition_state&#39;vc.4.0.0.0.0.2" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="superposition_state&#39;vc.4.0.0.0.0.2.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="superposition_state&#39;vc.4.0.0.0.0.2.0.0" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="3.45" steps="965787"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="superposition_state&#39;vc.4.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="9"><result status="valid" time="2.03" steps="789676"/></proof>
     </goal>
     <goal name="superposition_state&#39;vc.4.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="9"><result status="valid" time="2.28" steps="789676"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="superposition_state&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="2.43" steps="909951"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_ket_superposition&#39;vc" expl="VC for get_ket_superposition" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_ket_superposition&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="get_ket_superposition&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="superposition_state&#39;spec1">
    <goal name="get_ket_superposition&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="scalar_ket_value">
     <goal name="get_ket_superposition&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="mult_one_t">
      <goal name="get_ket_superposition&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="9"><result status="valid" time="2.22" steps="750543"/></proof>
      </goal>
      <goal name="get_ket_superposition&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
       <goal name="get_ket_superposition&#39;vc.0.0.0.0.1.0" expl="rewrite premises" proved="true">
       <transf name="instantiate" proved="true" arg1="sum_null_but_one_elt" arg2="(to_fset 0 (power 2 n)),(fun (e1:int) -&gt;
    get_ket (((fun (y0:int) (y1:int) -&gt; ket y0 y1) @ n) @ e1) i),i">
        <goal name="get_ket_superposition&#39;vc.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="Hinst">
         <goal name="get_ket_superposition&#39;vc.0.0.0.0.1.0.0.0" expl="rewrite premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="get_ket_superposition&#39;vc.0.0.0.0.1.0.0.0.0" expl="rewrite premises" proved="true">
          <proof prover="9"><result status="valid" time="2.26" steps="753914"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="get_ket_superposition&#39;vc.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="get_ket_superposition&#39;vc.0.0.0.0.1.0.0.1.0" expl="rewrite premises" proved="true">
          <proof prover="9"><result status="valid" time="3.00" steps="846723"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="get_ket_superposition&#39;vc.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="get_ket_superposition&#39;vc.0.0.0.0.1.0.0.2.0" expl="rewrite premises" proved="true">
          <proof prover="9"><result status="valid" time="2.67" steps="847715"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="get_ket_superposition&#39;vc.0.0.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="9"><result status="valid" time="1.59" steps="653585"/></proof>
       </goal>
       <goal name="get_ket_superposition&#39;vc.0.0.0.0.1.2" expl="rewrite premises" proved="true">
       <proof prover="9"><result status="valid" time="1.02" steps="615365"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="get_ket_superposition&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="0.97" steps="615356"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="repeat_had_twice_bv&#39;vc" expl="VC for repeat_had_twice_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="repeat_had_twice_bv&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.90" steps="529330"/></proof>
  </goal>
  <goal name="repeat_had_twice_bv&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="1.43" steps="589233"/></proof>
  </goal>
  <goal name="repeat_had_twice_bv&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.44" steps="589367"/></proof>
  </goal>
  <goal name="repeat_had_twice_bv&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.75" steps="554210"/></proof>
  </goal>
  <goal name="repeat_had_twice_bv&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.92" steps="554239"/></proof>
  </goal>
  <goal name="repeat_had_twice_bv&#39;vc.5" expl="variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="1.59" steps="589809"/></proof>
  </goal>
  <goal name="repeat_had_twice_bv&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.97" steps="554466"/></proof>
  </goal>
  <goal name="repeat_had_twice_bv&#39;vc.7" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.51" steps="589609"/></proof>
  </goal>
  <goal name="repeat_had_twice_bv&#39;vc.8" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="2.06" steps="691754"/></proof>
  </goal>
  <goal name="repeat_had_twice_bv&#39;vc.9" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(n=1)">
   <goal name="repeat_had_twice_bv&#39;vc.9.0" expl="true case (postcondition)" proved="true">
   <proof prover="9"><result status="valid" time="2.04" steps="687521"/></proof>
   </goal>
   <goal name="repeat_had_twice_bv&#39;vc.9.1" expl="false case (postcondition)" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="repeat_had_twice_bv&#39;vc.9.1.0" expl="false case (postcondition)" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="repeat_had_twice_bv&#39;vc.9.1.0.0" expl="false case (postcondition)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="repeat_had_twice_bv&#39;vc.9.1.0.0.0" expl="false case (postcondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="repeat_pps_had&#39;def">
       <goal name="repeat_had_twice_bv&#39;vc.9.1.0.0.0.0" expl="false case (postcondition)" proved="true">
       <transf name="replace" proved="true" arg1="(bv_to_ket x)" arg2="(kronecker (bv_to_ket  (hpart x (n - 1))) (bv_to_ket  (tpart x (n - 1))))">
        <goal name="repeat_had_twice_bv&#39;vc.9.1.0.0.0.0.0" expl="false case (postcondition)" proved="true">
        <transf name="rewrite" proved="true" arg1="pps_apply_par">
         <goal name="repeat_had_twice_bv&#39;vc.9.1.0.0.0.0.0.0" expl="false case (postcondition)" proved="true">
         <transf name="rewrite" proved="true" arg1="pps_apply_par">
          <goal name="repeat_had_twice_bv&#39;vc.9.1.0.0.0.0.0.0.0" expl="false case (postcondition)" proved="true">
          <proof prover="9"><result status="valid" time="1.00" steps="615628"/></proof>
          </goal>
          <goal name="repeat_had_twice_bv&#39;vc.9.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="9"><result status="valid" time="1.06" steps="615586"/></proof>
          </goal>
          <goal name="repeat_had_twice_bv&#39;vc.9.1.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="9"><result status="valid" time="1.09" steps="615578"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="repeat_had_twice_bv&#39;vc.9.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="9"><result status="valid" time="1.02" steps="615579"/></proof>
         </goal>
         <goal name="repeat_had_twice_bv&#39;vc.9.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="9"><result status="valid" time="1.06" steps="615571"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="repeat_had_twice_bv&#39;vc.9.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="9"><result status="valid" time="1.06" steps="615593"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="repeat_had_twice_bv&#39;vc.9.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="9"><result status="valid" time="1.08" steps="615546"/></proof>
       </goal>
       <goal name="repeat_had_twice_bv&#39;vc.9.1.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="9"><result status="valid" time="0.99" steps="615544"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="repeat_had_twice_bv&#39;vc.9.1.1" expl="false case (postcondition)" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="repeat_had_twice_bv&#39;vc.9.1.1.0" expl="false case (postcondition)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="repeat_had_twice_bv&#39;vc.9.1.1.0.0" expl="false case (postcondition)" proved="true">
      <transf name="replace" proved="true" arg1="(repeat_pps_had n)" arg2="(pps_par (repeat_pps_had (n-1)) (repeat_pps_had 1))">
       <goal name="repeat_had_twice_bv&#39;vc.9.1.1.0.0.0" expl="false case (postcondition)" proved="true">
       <transf name="replace" proved="true" arg1="(bv_to_ket x)" arg2="(kronecker (bv_to_ket (hpart x (n-1))) (bv_to_ket (tpart x (n-1))))">
        <goal name="repeat_had_twice_bv&#39;vc.9.1.1.0.0.0.0" expl="false case (postcondition)" proved="true">
        <transf name="rewrite" proved="true" arg1="pps_apply_par">
         <goal name="repeat_had_twice_bv&#39;vc.9.1.1.0.0.0.0.0" expl="false case (postcondition)" proved="true">
         <transf name="rewrite" proved="true" arg1="pps_apply_par">
          <goal name="repeat_had_twice_bv&#39;vc.9.1.1.0.0.0.0.0.0" expl="false case (postcondition)" proved="true">
          <transf name="apply" proved="true" arg1="kronecker_eq">
           <goal name="repeat_had_twice_bv&#39;vc.9.1.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="9"><result status="valid" time="1.05" steps="644988"/></proof>
           </goal>
           <goal name="repeat_had_twice_bv&#39;vc.9.1.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="9"><result status="valid" time="1.27" steps="644988"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="repeat_had_twice_bv&#39;vc.9.1.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="9"><result status="valid" time="2.45" steps="803628"/></proof>
          </goal>
          <goal name="repeat_had_twice_bv&#39;vc.9.1.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="9"><result status="valid" time="2.38" steps="790481"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="repeat_had_twice_bv&#39;vc.9.1.1.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="9"><result status="valid" time="2.45" steps="803668"/></proof>
         </goal>
         <goal name="repeat_had_twice_bv&#39;vc.9.1.1.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="9"><result status="valid" time="1.74" steps="688325"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="repeat_had_twice_bv&#39;vc.9.1.1.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="9"><result status="valid" time="1.75" steps="688347"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="repeat_had_twice_bv&#39;vc.9.1.1.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="9"><result status="valid" time="2.71" steps="790340"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="repeat_had_twice_bv_gen&#39;vc" expl="VC for repeat_had_twice_bv_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="repeat_had_twice_bv_gen&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.85" steps="661571"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="repeat_had_twice_ket&#39;vc" expl="VC for repeat_had_twice_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="repeat_had_twice_ket&#39;vc.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="ket_decomp_" arg2="x,n">
   <goal name="repeat_had_twice_ket&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Hinst">
    <goal name="repeat_had_twice_ket&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="pps_apply_sum">
     <goal name="repeat_had_twice_ket&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="pps_apply_sum">
      <goal name="repeat_had_twice_ket&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="ket_sum_eq">
       <goal name="repeat_had_twice_ket&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="1.29" steps="566050"/></proof>
       </goal>
       <goal name="repeat_had_twice_ket&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="9"><result status="valid" time="0.91" steps="529779"/></proof>
       </goal>
       <goal name="repeat_had_twice_ket&#39;vc.0.0.0.0.0.2" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="repeat_had_twice_ket&#39;vc.0.0.0.0.0.2.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="repeat_had_twice_ket&#39;vc.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="pps_apply_scal">
          <goal name="repeat_had_twice_ket&#39;vc.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="pps_apply_scal">
           <goal name="repeat_had_twice_ket&#39;vc.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.83"/></proof>
           </goal>
           <goal name="repeat_had_twice_ket&#39;vc.0.0.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="0.89"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="repeat_had_twice_ket&#39;vc.0.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.81"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="repeat_had_twice_ket&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="7"><result status="valid" time="2.02" steps="83615"/></proof>
      </goal>
      <goal name="repeat_had_twice_ket&#39;vc.0.0.0.0.2" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="repeat_had_twice_ket&#39;vc.0.0.0.0.2.0" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="repeat_had_twice_ket&#39;vc.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="pps_apply_scal">
         <goal name="repeat_had_twice_ket&#39;vc.0.0.0.0.2.0.0.0" expl="rewrite premises" proved="true">
         <transf name="apply" proved="true" arg1="scalar_ket_l">
          <goal name="repeat_had_twice_ket&#39;vc.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.78"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="repeat_had_twice_ket&#39;vc.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.85"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="repeat_had_twice_ket&#39;vc.0.0.0.0.3" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.68"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="repeat_had_twice_ket&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="7"><result status="valid" time="2.08" steps="83615"/></proof>
     </goal>
     <goal name="repeat_had_twice_ket&#39;vc.0.0.0.2" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="repeat_had_twice_ket&#39;vc.0.0.0.2.0" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="repeat_had_twice_ket&#39;vc.0.0.0.2.0.0" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.81"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="repeat_had_twice_ket&#39;vc.0.0.0.3" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.70"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="repeat_had_twice_ket&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="1.47" steps="566050"/></proof>
    </goal>
    <goal name="repeat_had_twice_ket&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="1.53" steps="566578"/></proof>
    </goal>
    <goal name="repeat_had_twice_ket&#39;vc.0.0.3" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="1.56" steps="566582"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="repeat_pps_had_basis_bv&#39;vc" expl="VC for repeat_pps_had_basis_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="repeat_pps_had_basis_bv&#39;vc.0" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="1.46" steps="566177"/></proof>
  </goal>
  <goal name="repeat_pps_had_basis_bv&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="1.39" steps="566064"/></proof>
  </goal>
  <goal name="repeat_pps_had_basis_bv&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.45" steps="566074"/></proof>
  </goal>
  <goal name="repeat_pps_had_basis_bv&#39;vc.3" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H1">
   <goal name="repeat_pps_had_basis_bv&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_sum_cardone">
    <goal name="repeat_pps_had_basis_bv&#39;vc.3.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ind_isum_one">
     <goal name="repeat_pps_had_basis_bv&#39;vc.3.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="repeat_pps_had_basis_bv&#39;vc.3.0.0.0.0" expl="postcondition" proved="true">
      <transf name="case" proved="true" arg1="((getbv x @ 0) * (getbv y @ 0) = 0)">
       <goal name="repeat_pps_had_basis_bv&#39;vc.3.0.0.0.0.0" expl="true case (postcondition)" proved="true">
       <proof prover="9"><result status="valid" time="1.46" steps="598380"/></proof>
       </goal>
       <goal name="repeat_pps_had_basis_bv&#39;vc.3.0.0.0.0.1" expl="false case (postcondition)" proved="true">
       <transf name="replace" proved="true" arg1="((getbv x @ 0) * (getbv y @ 0))" arg2="1">
        <goal name="repeat_pps_had_basis_bv&#39;vc.3.0.0.0.0.1.0" expl="false case (postcondition)" proved="true">
        <proof prover="9"><result status="valid" time="1.55" steps="566698"/></proof>
        </goal>
        <goal name="repeat_pps_had_basis_bv&#39;vc.3.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
        <proof prover="0"><result status="valid" time="1.07"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="repeat_pps_had_basis_bv&#39;vc.3.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="9"><result status="valid" time="0.91" steps="529855"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="repeat_pps_had_basis_bv&#39;vc.3.0.1" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="0.71" steps="529855"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="repeat_pps_had_basis_bv&#39;vc.3.1" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_sum_right_extension">
    <goal name="repeat_pps_had_basis_bv&#39;vc.3.1.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ind_isum_re">
     <goal name="repeat_pps_had_basis_bv&#39;vc.3.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="cpower_sum">
      <goal name="repeat_pps_had_basis_bv&#39;vc.3.1.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="ang_exp_add">
       <goal name="repeat_pps_had_basis_bv&#39;vc.3.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="mult_eq_t">
        <goal name="repeat_pps_had_basis_bv&#39;vc.3.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="repeat_pps_had_basis_bv&#39;vc.3.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="H1">
          <goal name="repeat_pps_had_basis_bv&#39;vc.3.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="9"><result status="valid" time="1.20" steps="683717"/></proof>
          </goal>
          <goal name="repeat_pps_had_basis_bv&#39;vc.3.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="9"><result status="valid" time="1.18" steps="683715"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="repeat_pps_had_basis_bv&#39;vc.3.1.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="repeat_pps_had_basis_bv&#39;vc.3.1.0.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="case" proved="true" arg1="(((getbv x @ (k - 1)) * (getbv y @ (k - 1)))= 0)">
          <goal name="repeat_pps_had_basis_bv&#39;vc.3.1.0.0.0.0.1.0.0" expl="true case (apply premises)" proved="true">
          <proof prover="9"><result status="valid" time="1.63" steps="633454"/></proof>
          </goal>
          <goal name="repeat_pps_had_basis_bv&#39;vc.3.1.0.0.0.0.1.0.1" expl="false case (apply premises)" proved="true">
          <transf name="replace" proved="true" arg1="(((getbv x @ (k - 1)) * (getbv y @ (k - 1))))" arg2="1">
           <goal name="repeat_pps_had_basis_bv&#39;vc.3.1.0.0.0.0.1.0.1.0" expl="false case (apply premises)" proved="true">
           <proof prover="9"><result status="valid" time="1.64" steps="624974"/></proof>
           </goal>
           <goal name="repeat_pps_had_basis_bv&#39;vc.3.1.0.0.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
           <proof prover="0"><result status="valid" time="1.13"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="repeat_pps_had_basis_bv&#39;vc.3.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="9"><result status="valid" time="1.66" steps="625087"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="repeat_pps_had_basis_bv&#39;vc.3.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="9"><result status="valid" time="0.93" steps="587665"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="repeat_pps_had_basis_bv&#39;vc.3.1.1" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="0.98" steps="587665"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="repeat_pps_had_basis_bv&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.97" steps="587665"/></proof>
  </goal>
  <goal name="repeat_pps_had_basis_bv&#39;vc.5" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="rewrite_pps_apply_basis">
   <goal name="repeat_pps_had_basis_bv&#39;vc.5.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="pps_apply_basis_bv">
    <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="scalar_eq_gen">
     <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
      <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="9"><result status="valid" time="2.22" steps="722553"/></proof>
      </goal>
      <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.80"/></proof>
      </goal>
      <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.77"/></proof>
      </goal>
      <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.0.0.3" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.0.0.3.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.0.0.3.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="scalar_eq_gen">
         <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.0.0.3.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="bv_to_ket_eq">
          <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="h_basis_ket_bv&#39;spec1">
            <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="9"><result status="valid" time="2.84" steps="916388"/></proof>
            </goal>
            <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.0.0.3.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="9"><result status="valid" time="3.04" steps="914017"/></proof>
            </goal>
            <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.0.0.3.0.0.0.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="9"><result status="valid" time="3.17" steps="915911"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.0.0.3.0.0.0.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.0.0.3.0.0.0.1.0" expl="apply premises" proved="true">
           <transf name="split_all_full" proved="true" >
            <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.0.0.3.0.0.0.1.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="h_basis_ket_bv&#39;spec">
             <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.0.0.3.0.0.0.1.0.0.0" expl="apply premises" proved="true">
             <proof prover="9"><result status="valid" time="3.49" steps="991917"/></proof>
             </goal>
             <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.0.0.3.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="9"><result status="valid" time="3.03" steps="916695"/></proof>
             </goal>
             <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.0.0.3.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
             <proof prover="9"><result status="valid" time="3.14" steps="918476"/></proof>
             </goal>
             <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.0.0.3.0.0.0.1.0.0.3" expl="rewrite premises" proved="true">
             <proof prover="9"><result status="valid" time="3.00" steps="918268"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.0.0.3.0.0.1" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="h_angle_bv&#39;def">
          <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.0.0.3.0.0.1.0" expl="apply premises" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.0.0.3.0.0.1.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="repeat_pps_had&#39;spec">
            <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.0.0.3.0.0.1.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="bv_to_ket_to_bv">
             <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.0.0.3.0.0.1.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="Ensures">
              <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.0.0.3.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
              </transf>
              </goal>
              <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.0.0.3.0.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="9"><result status="valid" time="3.03" steps="915968"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.0.0.3.0.0.1.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="9"><result status="valid" time="1.33" steps="772109"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.0.0.3.0.0.1.1" expl="rewrite premises" proved="true">
          <transf name="rewrite" proved="true" arg1="bv_to_ket_to_bv">
           <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.0.0.3.0.0.1.1.0" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="0.88"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.0.0.3.0.0.1.2" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.86"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.96"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.1" expl="rewrite premises" proved="true">
    <transf name="rewrite" proved="true" arg1="bv_to_ket_to_bv">
     <goal name="repeat_pps_had_basis_bv&#39;vc.5.0.1.0" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.79"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="repeat_pps_had_basis_bv&#39;vc.5.1" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="0.92"/></proof>
   </goal>
   <goal name="repeat_pps_had_basis_bv&#39;vc.5.2" expl="rewrite premises" proved="true">
   <proof prover="9"><result status="valid" time="1.72" steps="625157"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="repeat_pps_had_basis&#39;vc" expl="VC for repeat_pps_had_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="repeat_pps_had_basis&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ket n i)" arg2="(bv_to_ket (int_to_bv i n) )">
   <goal name="repeat_pps_had_basis&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="repeat_pps_had_basis_bv">
    <goal name="repeat_pps_had_basis&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="0.73" steps="530199"/></proof>
    </goal>
    <goal name="repeat_pps_had_basis&#39;vc.0.0.1" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="2.08" steps="663160"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="repeat_pps_had_basis&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <proof prover="9"><result status="valid" time="2.14" steps="660165"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="repeat_had_superposition&#39;vc" expl="VC for repeat_had_superposition" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="repeat_had_superposition&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(superposition_state n)" arg2="(pps_apply (repeat_pps_had n ) (ket n 0))">
   <goal name="repeat_had_superposition&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.87"/></proof>
   </goal>
   <goal name="repeat_had_superposition&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <proof prover="9"><result status="valid" time="2.19" steps="660100"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_repeat_at_zero_bv&#39;vc" expl="VC for path_sem_repeat_at_zero_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_repeat_at_zero_bv&#39;vc.0" expl="postcondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(pps_apply (repeat_pps_had n) (bv_to_ket x))" arg2="(pps_apply_basis (repeat_pps_had n) x)">
    <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="pps_apply_basis_value">
     <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="mult_one_t">
      <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="0.91"/></proof>
      </goal>
      <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <transf name="instantiate" proved="true" arg1="sum_null_but_maybe_one_elt" arg2="(fun (y:bitvec) -&gt;
    ang_exp (h_angle_bv (repeat_pps_had n) x y)
    *. indic (h_basis_ket_bv (repeat_pps_had n) x y)
       (int_to_bv 0 (h_width (repeat_pps_had n)))),(n_bvs (h_range (repeat_pps_had n))),(int_to_bv 0 n)">
       <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0" expl="rewrite premises" proved="true">
       <transf name="rewrite" proved="true" arg1="Hinst">
        <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0" expl="rewrite premises" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0" expl="rewrite premises" proved="true">
           <transf name="rewrite" proved="true" arg1="mult_one_t">
            <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.0" expl="rewrite premises" proved="true">
            <transf name="rewrite" proved="true" arg1="h_angle_bv&#39;def">
             <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.0.0" expl="rewrite premises" proved="true">
             <transf name="rewrite" proved="true" arg1="repeat_pps_had&#39;spec">
              <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.0.0.0" expl="rewrite premises" proved="true">
              <transf name="rewrite" proved="true" arg1="ang_sum_neutral">
               <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.0.0.0.0" expl="rewrite premises" proved="true">
               <proof prover="9"><result status="valid" time="0.90" steps="617373"/></proof>
               </goal>
               <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="9"><result status="valid" time="1.71" steps="655903"/></proof>
               </goal>
               <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
                 <proof prover="0"><result status="valid" time="0.99"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="9"><result status="valid" time="1.07" steps="617373"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="9"><result status="valid" time="2.42" steps="754198"/></proof>
             </goal>
             <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
             <proof prover="9"><result status="valid" time="2.25" steps="757244"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <transf name="rewrite" proved="true" arg1="h_basis_ket_bv&#39;def">
             <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
             <transf name="replace" proved="true" arg1="(make_bv
   ((h_basis_ket (repeat_pps_had n) @ getbv x) @ getbv (int_to_bv 0 n))
   (h_width (repeat_pps_had n)))" arg2="(int_to_bv 0 n)">
              <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
              <proof prover="9"><result status="valid" time="2.59" steps="758135"/></proof>
              </goal>
              <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
              <transf name="apply" proved="true" arg1="set_equal_bv">
               <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="make_bv_length">
                <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
                <proof prover="9"><result status="valid" time="2.22" steps="757232"/></proof>
                </goal>
                <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.0.1" expl="rewrite premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.0.1.0" expl="rewrite premises" proved="true">
                 <transf name="split_all_full" proved="true" >
                  <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.0.1.0.0" expl="rewrite premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.0.1.0.0.0" expl="rewrite premises" proved="true">
                   <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                    <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
                    <proof prover="9"><result status="valid" time="2.32" steps="790397"/></proof>
                    </goal>
                    <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.0.1.0.0.0.1" expl="apply premises" proved="true">
                    <proof prover="9"><result status="valid" time="2.33" steps="791310"/></proof>
                    </goal>
                    <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.0.1.0.0.0.2" expl="apply premises" proved="true">
                    <proof prover="9"><result status="valid" time="0.95" steps="617407"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.0.1.0.1" expl="rewrite premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.0.1.0.1.0" expl="rewrite premises" proved="true">
                   <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                    <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.0.1.0.1.0.0" expl="apply premises" proved="true">
                    <proof prover="9"><result status="valid" time="2.30" steps="790397"/></proof>
                    </goal>
                    <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.0.1.0.1.0.1" expl="apply premises" proved="true">
                    <proof prover="9"><result status="valid" time="2.31" steps="791310"/></proof>
                    </goal>
                    <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.0.1.0.1.0.2" expl="apply premises" proved="true">
                    <proof prover="9"><result status="valid" time="0.93" steps="617407"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.0.2" expl="rewrite premises" proved="true">
                <proof prover="9"><result status="valid" time="2.14" steps="754198"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1" expl="apply premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                 <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="repeat_pps_had&#39;spec1">
                  <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.0.0" expl="apply premises" proved="true">
                  <proof prover="9"><result status="valid" time="1.10" steps="711994"/></proof>
                  </goal>
                  <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="9"><result status="valid" time="1.09" steps="711996"/></proof>
                  </goal>
                  <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.0.2" expl="rewrite premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
                   <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.0.2.0" expl="rewrite premises" proved="true">
                   <proof prover="9"><result status="valid" time="2.05" steps="755149"/></proof>
                   </goal>
                   <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.0.2.1" expl="rewrite premises" proved="true">
                   <transf name="compute_specified" proved="true" >
                    <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.0.2.1.0" expl="rewrite premises" proved="true">
                    <transf name="split_all_full" proved="true" >
                     <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.0.2.1.0.0" expl="rewrite premises" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.0.2.1.0.0.0" expl="rewrite premises" proved="true">
                      <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                       <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.0.2.1.0.0.0.0" expl="apply premises" proved="true">
                       <proof prover="9"><result status="valid" time="2.59" steps="858401"/></proof>
                       </goal>
                       <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.0.2.1.0.0.0.1" expl="apply premises" proved="true">
                       <proof prover="9"><result status="valid" time="2.57" steps="858819"/></proof>
                       </goal>
                       <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.0.2.1.0.0.0.2" expl="apply premises" proved="true">
                       <proof prover="9"><result status="valid" time="1.08" steps="712030"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.0.2.1.0.1" expl="rewrite premises" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.0.2.1.0.1.0" expl="rewrite premises" proved="true">
                      <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                       <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.0.2.1.0.1.0.0" expl="apply premises" proved="true">
                       <proof prover="9"><result status="valid" time="2.58" steps="858401"/></proof>
                       </goal>
                       <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.0.2.1.0.1.0.1" expl="apply premises" proved="true">
                       <proof prover="9"><result status="valid" time="2.57" steps="858819"/></proof>
                       </goal>
                       <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.0.2.1.0.1.0.2" expl="apply premises" proved="true">
                       <proof prover="9"><result status="valid" time="1.15" steps="712030"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.0.2.2" expl="rewrite premises" proved="true">
                   <proof prover="9"><result status="valid" time="2.58" steps="856335"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.1" expl="rewrite premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.1.0" expl="rewrite premises" proved="true">
                  <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                   <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.1.0.0" expl="apply premises" proved="true">
                   <proof prover="9"><result status="valid" time="2.57" steps="858401"/></proof>
                   </goal>
                   <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.1.0.1" expl="apply premises" proved="true">
                   <proof prover="9"><result status="valid" time="2.59" steps="858819"/></proof>
                   </goal>
                   <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.1.0.2" expl="apply premises" proved="true">
                   <proof prover="9"><result status="valid" time="1.13" steps="712030"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.1.1" expl="rewrite premises" proved="true">
                  <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                   <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.1.1.0" expl="apply premises" proved="true">
                   <proof prover="9"><result status="valid" time="2.59" steps="858401"/></proof>
                   </goal>
                   <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.1.1.1" expl="apply premises" proved="true">
                   <proof prover="9"><result status="valid" time="2.55" steps="858819"/></proof>
                   </goal>
                   <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.1.1.2" expl="apply premises" proved="true">
                   <proof prover="9"><result status="valid" time="1.11" steps="712030"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.2" expl="rewrite premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
                  <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.2.0" expl="rewrite premises" proved="true">
                  <proof prover="9"><result status="valid" time="0.92" steps="617407"/></proof>
                  </goal>
                  <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.2.1" expl="rewrite premises" proved="true">
                  <transf name="compute_specified" proved="true" >
                   <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.2.1.0" expl="rewrite premises" proved="true">
                   <transf name="split_all_full" proved="true" >
                    <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.2.1.0.0" expl="rewrite premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.2.1.0.0.0" expl="rewrite premises" proved="true">
                     <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                      <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.2.1.0.0.0.0" expl="apply premises" proved="true">
                      <proof prover="9"><result status="valid" time="2.58" steps="858401"/></proof>
                      </goal>
                      <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.2.1.0.0.0.1" expl="apply premises" proved="true">
                      <proof prover="9"><result status="valid" time="2.54" steps="858819"/></proof>
                      </goal>
                      <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.2.1.0.0.0.2" expl="apply premises" proved="true">
                      <proof prover="9"><result status="valid" time="1.09" steps="712030"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.2.1.0.1" expl="rewrite premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.2.1.0.1.0" expl="rewrite premises" proved="true">
                     <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                      <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.2.1.0.1.0.0" expl="apply premises" proved="true">
                      <proof prover="9"><result status="valid" time="2.59" steps="858401"/></proof>
                      </goal>
                      <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.2.1.0.1.0.1" expl="apply premises" proved="true">
                      <proof prover="9"><result status="valid" time="2.65" steps="858819"/></proof>
                      </goal>
                      <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.2.1.0.1.0.2" expl="apply premises" proved="true">
                      <proof prover="9"><result status="valid" time="1.19" steps="712030"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0.2.2" expl="rewrite premises" proved="true">
                  <proof prover="9"><result status="valid" time="2.60" steps="856335"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
             <proof prover="9"><result status="valid" time="2.23" steps="754198"/></proof>
             </goal>
             <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.0.0.0.0.1.2" expl="rewrite premises" proved="true">
             <proof prover="9"><result status="valid" time="2.04" steps="757244"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
         <transf name="rewrite" proved="true" arg1="repeat_pps_had&#39;spec2">
          <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.1.0.0" expl="rewrite premises" proved="true">
          <proof prover="9"><result status="valid" time="2.60" steps="847009"/></proof>
          </goal>
          <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.1.0.1" expl="rewrite premises" proved="true">
          <proof prover="9"><result status="valid" time="1.00" steps="617373"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0" expl="rewrite premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0" expl="rewrite premises" proved="true">
          <transf name="rewrite" proved="true" arg1="h_angle_bv&#39;def">
           <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0" expl="rewrite premises" proved="true">
           <transf name="split_all_full" proved="true" >
            <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0" expl="rewrite premises" proved="true">
            <transf name="rewrite" proved="true" arg1="repeat_pps_had&#39;spec">
             <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0" expl="rewrite premises" proved="true">
             <transf name="apply" proved="true" arg1="mult_zero_t">
              <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="h_basis_ket_bv&#39;def">
               <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="replace" proved="true" arg1="(make_bv ((h_basis_ket (repeat_pps_had n) @ getbv x) @ getbv k)
   (h_width (repeat_pps_had n)))" arg2="k">
                <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="replace" proved="true" arg1="(h_width (repeat_pps_had n))" arg2="n">
                 <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <proof prover="9"><result status="valid" time="2.54" steps="847800"/></proof>
                 </goal>
                 <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                 <proof prover="9"><result status="valid" time="2.49" steps="846456"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                <transf name="apply" proved="true" arg1="set_equal_bv">
                 <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="make_bv_length">
                  <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                  <proof prover="9"><result status="valid" time="2.60" steps="849791"/></proof>
                  </goal>
                  <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                  <transf name="compute_specified" proved="true" >
                   <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.0.1.0.0" expl="rewrite premises" proved="true">
                    <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                     <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
                     <proof prover="9"><result status="valid" time="2.63" steps="880168"/></proof>
                     </goal>
                     <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.0.1.0.0.1" expl="apply premises" proved="true">
                     <proof prover="9"><result status="valid" time="2.60" steps="880815"/></proof>
                     </goal>
                     <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.0.1.0.0.2" expl="apply premises" proved="true">
                     <proof prover="9"><result status="valid" time="1.05" steps="704774"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.0.1.0.1" expl="rewrite premises" proved="true">
                    <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                     <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.0.1.0.1.0" expl="apply premises" proved="true">
                     <proof prover="9"><result status="valid" time="2.61" steps="880168"/></proof>
                     </goal>
                     <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.0.1.0.1.1" expl="apply premises" proved="true">
                     <proof prover="9"><result status="valid" time="2.57" steps="880815"/></proof>
                     </goal>
                     <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.0.1.0.1.2" expl="apply premises" proved="true">
                     <proof prover="9"><result status="valid" time="1.09" steps="704774"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
                  <proof prover="9"><result status="valid" time="2.59" steps="846446"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                   <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="repeat_pps_had&#39;spec1">
                    <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
                    <proof prover="9"><result status="valid" time="1.33" steps="801063"/></proof>
                    </goal>
                    <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.0.1" expl="rewrite premises" proved="true">
                    <proof prover="9"><result status="valid" time="1.26" steps="801065"/></proof>
                    </goal>
                    <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.0.2" expl="rewrite premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
                     <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.0.2.0" expl="rewrite premises" proved="true">
                     <proof prover="9"><result status="valid" time="2.65" steps="847332"/></proof>
                     </goal>
                     <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.0.2.1" expl="rewrite premises" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.0.2.1.0" expl="rewrite premises" proved="true">
                      <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                       <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.0.2.1.0.0" expl="apply premises" proved="true">
                       <proof prover="9"><result status="valid" time="2.90" steps="952109"/></proof>
                       </goal>
                       <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.0.2.1.0.1" expl="apply premises" proved="true">
                       <proof prover="9"><result status="valid" time="2.94" steps="952202"/></proof>
                       </goal>
                       <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.0.2.1.0.2" expl="apply premises" proved="true">
                       <proof prover="9"><result status="valid" time="1.29" steps="801099"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.0.2.1.1" expl="rewrite premises" proved="true">
                      <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                       <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.0.2.1.1.0" expl="apply premises" proved="true">
                       <proof prover="9"><result status="valid" time="2.92" steps="952109"/></proof>
                       </goal>
                       <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.0.2.1.1.1" expl="apply premises" proved="true">
                       <proof prover="9"><result status="valid" time="2.91" steps="952202"/></proof>
                       </goal>
                       <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.0.2.1.1.2" expl="apply premises" proved="true">
                       <proof prover="9"><result status="valid" time="1.24" steps="801099"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.0.2.2" expl="rewrite premises" proved="true">
                     <proof prover="9"><result status="valid" time="2.98" steps="950002"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.1.0" expl="rewrite premises" proved="true">
                    <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                     <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.1.0.0" expl="apply premises" proved="true">
                     <proof prover="9"><result status="valid" time="2.96" steps="952109"/></proof>
                     </goal>
                     <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.1.0.1" expl="apply premises" proved="true">
                     <proof prover="9"><result status="valid" time="2.89" steps="952202"/></proof>
                     </goal>
                     <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.1.0.2" expl="apply premises" proved="true">
                     <proof prover="9"><result status="valid" time="1.27" steps="801099"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.1.1" expl="rewrite premises" proved="true">
                    <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                     <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.1.1.0" expl="apply premises" proved="true">
                     <proof prover="9"><result status="valid" time="2.93" steps="952109"/></proof>
                     </goal>
                     <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.1.1.1" expl="apply premises" proved="true">
                     <proof prover="9"><result status="valid" time="2.91" steps="952202"/></proof>
                     </goal>
                     <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.1.1.2" expl="apply premises" proved="true">
                     <proof prover="9"><result status="valid" time="1.27" steps="801099"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.2" expl="rewrite premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
                    <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.2.0" expl="rewrite premises" proved="true">
                    <proof prover="9"><result status="valid" time="1.08" steps="704774"/></proof>
                    </goal>
                    <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.2.1" expl="rewrite premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.2.1.0" expl="rewrite premises" proved="true">
                     <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                      <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.2.1.0.0" expl="apply premises" proved="true">
                      <proof prover="9"><result status="valid" time="2.88" steps="952109"/></proof>
                      </goal>
                      <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.2.1.0.1" expl="apply premises" proved="true">
                      <proof prover="9"><result status="valid" time="2.91" steps="952202"/></proof>
                      </goal>
                      <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.2.1.0.2" expl="apply premises" proved="true">
                      <proof prover="9"><result status="valid" time="1.31" steps="801099"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.2.1.1" expl="rewrite premises" proved="true">
                     <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                      <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.2.1.1.0" expl="apply premises" proved="true">
                      <proof prover="9"><result status="valid" time="2.85" steps="952109"/></proof>
                      </goal>
                      <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.2.1.1.1" expl="apply premises" proved="true">
                      <proof prover="9"><result status="valid" time="2.85" steps="952202"/></proof>
                      </goal>
                      <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.2.1.1.2" expl="apply premises" proved="true">
                      <proof prover="9"><result status="valid" time="1.22" steps="801099"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.0.1.1.0.2.2" expl="rewrite premises" proved="true">
                    <proof prover="9"><result status="valid" time="2.90" steps="950002"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="9"><result status="valid" time="2.55" steps="846468"/></proof>
               </goal>
               <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
               <proof prover="9"><result status="valid" time="2.53" steps="849193"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="9"><result status="valid" time="1.09" steps="704740"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="7"><result status="valid" time="2.04" steps="84142"/></proof>
           </goal>
           <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.2" expl="rewrite premises" proved="true">
           <transf name="split_all_full" proved="true" >
            <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.0.1.0.2.0.0.2.0" expl="rewrite premises" proved="true">
            <proof prover="9"><result status="valid" time="2.48" steps="849193"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.71"/></proof>
     </goal>
     <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="9"><result status="valid" time="1.93" steps="665613"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="path_sem_repeat_at_zero_bv&#39;vc.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="0.66"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_repeat_at_zero&#39;vc" expl="VC for path_sem_repeat_at_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_repeat_at_zero&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pps_apply&#39;def">
   <goal name="path_sem_repeat_at_zero&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
    <goal name="path_sem_repeat_at_zero&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ind_sum_bv">
     <goal name="path_sem_repeat_at_zero&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="sum_scal_rev">
      <goal name="path_sem_repeat_at_zero&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="sum_eq_gen">
       <goal name="path_sem_repeat_at_zero&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="path_sem_repeat_at_zero&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="repeat_pps_had&#39;spec3">
         <goal name="path_sem_repeat_at_zero&#39;vc.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="0.93" steps="617061"/></proof>
         </goal>
         <goal name="path_sem_repeat_at_zero&#39;vc.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="9"><result status="valid" time="0.91" steps="617063"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="path_sem_repeat_at_zero&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="path_sem_repeat_at_zero&#39;vc.0.0.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="path_sem_repeat_at_zero&#39;vc.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="eliminate_if" proved="true" >
          <goal name="path_sem_repeat_at_zero&#39;vc.0.0.0.0.0.1.0.0.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="path_sem_repeat_at_zero&#39;vc.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="(pps_apply_basis (repeat_pps_had n) x)" arg2="( (pps_apply (repeat_pps_had n) (bv_to_ket x)) )">
            <goal name="path_sem_repeat_at_zero&#39;vc.0.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="scalar_ket_value">
             <goal name="path_sem_repeat_at_zero&#39;vc.0.0.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="path_sem_repeat_at_zero_bv">
              <goal name="path_sem_repeat_at_zero&#39;vc.0.0.0.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="9"><result status="valid" time="1.63" steps="651514"/></proof>
              </goal>
              <goal name="path_sem_repeat_at_zero&#39;vc.0.0.0.0.0.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="9"><result status="valid" time="0.93" steps="612046"/></proof>
              </goal>
              <goal name="path_sem_repeat_at_zero&#39;vc.0.0.0.0.0.1.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="7"><result status="valid" time="2.03" steps="83519"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="path_sem_repeat_at_zero&#39;vc.0.0.0.0.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
            <proof prover="9"><result status="valid" time="1.57" steps="649323"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="path_sem_repeat_at_zero&#39;vc.0.0.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="9"><result status="valid" time="2.15" steps="753914"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="path_sem_repeat_at_zero&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="9"><result status="valid" time="0.84" steps="530836"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="path_sem_repeat_at_zero&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="1.92" steps="661068"/></proof>
    </goal>
    <goal name="path_sem_repeat_at_zero&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="9"><result status="valid" time="1.92" steps="663339"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="path_sem_repeat_at_zero&#39;vc.0.1" expl="rewrite premises" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="path_sem_repeat_at_zero&#39;vc.0.1.0" expl="rewrite premises" proved="true">
    <transf name="rewrite" proved="true" arg1="repeat_pps_had&#39;spec3">
     <goal name="path_sem_repeat_at_zero&#39;vc.0.1.0.0" expl="rewrite premises" proved="true">
     <proof prover="9"><result status="valid" time="0.92" steps="617063"/></proof>
     </goal>
     <goal name="path_sem_repeat_at_zero&#39;vc.0.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="9"><result status="valid" time="0.93" steps="617063"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ket_sum_power_minus_one&#39;vc" expl="VC for ket_sum_power_minus_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ket_sum_power_minus_one&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.81" steps="531083"/></proof>
  </goal>
  <goal name="ket_sum_power_minus_one&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.96" steps="622401"/></proof>
  </goal>
  <goal name="ket_sum_power_minus_one&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.96" steps="720300"/></proof>
  </goal>
  <goal name="ket_sum_power_minus_one&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.73" steps="760349"/></proof>
  </goal>
  <goal name="ket_sum_power_minus_one&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.67" steps="760410"/></proof>
  </goal>
  <goal name="ket_sum_power_minus_one&#39;vc.5" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ket_sum_l (n_bvs n)
    (fun (y:bitvec) -&gt;
      sum (n_bvs n)
      (fun (x:bitvec) -&gt; cpower (-. c_one) (((g @ x) @ y) + (f @ x)))
      *.. bv_to_ket y)
    n)" arg2="(ket_sum_l (n_bvs n)
  (fun (x:bitvec) -&gt;
    ket_sum_l (n_bvs n)
    (fun (y:bitvec) -&gt;
      (((fun (x1:bitvec) (y1:bitvec) -&gt;
          cpower (-. c_one) (((g @ x1) @ y1) + (f @ x1)))
        @ x)
       @ y)
      *.. bv_to_ket y)
    n)
  n)">
   <goal name="ket_sum_power_minus_one&#39;vc.5.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="ket_sum_eq">
    <goal name="ket_sum_power_minus_one&#39;vc.5.0.0" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="1.01" steps="750724"/></proof>
    </goal>
    <goal name="ket_sum_power_minus_one&#39;vc.5.0.1" expl="apply premises" proved="true">
    <proof prover="9"><result status="valid" time="1.21" steps="750722"/></proof>
    </goal>
    <goal name="ket_sum_power_minus_one&#39;vc.5.0.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="ket_sum_power_minus_one&#39;vc.5.0.2.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="ket_sum_power_minus_one&#39;vc.5.0.2.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="ket_sum_scalar_rev_l">
       <goal name="ket_sum_power_minus_one&#39;vc.5.0.2.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="ket_sum_power_minus_one&#39;vc.5.0.2.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="ket_sum_eq">
         <goal name="ket_sum_power_minus_one&#39;vc.5.0.2.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="1.01" steps="750736"/></proof>
         </goal>
         <goal name="ket_sum_power_minus_one&#39;vc.5.0.2.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="9"><result status="valid" time="1.21" steps="750734"/></proof>
         </goal>
         <goal name="ket_sum_power_minus_one&#39;vc.5.0.2.0.0.0.0.2" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="ket_sum_power_minus_one&#39;vc.5.0.2.0.0.0.0.2.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="ket_sum_power_minus_one&#39;vc.5.0.2.0.0.0.0.2.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="scalar_assoc">
            <goal name="ket_sum_power_minus_one&#39;vc.5.0.2.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="scalar_eq_gen">
             <goal name="ket_sum_power_minus_one&#39;vc.5.0.2.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="9"><result status="valid" time="1.20" steps="750746"/></proof>
             </goal>
             <goal name="ket_sum_power_minus_one&#39;vc.5.0.2.0.0.0.0.2.0.0.0.1" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="cpower_sum">
              <goal name="ket_sum_power_minus_one&#39;vc.5.0.2.0.0.0.0.2.0.0.0.1.0" expl="apply premises" proved="true">
              <proof prover="9"><result status="valid" time="1.84" steps="791431"/></proof>
              </goal>
              <goal name="ket_sum_power_minus_one&#39;vc.5.0.2.0.0.0.0.2.0.0.0.1.1" expl="rewrite premises" proved="true">
              <proof prover="9"><result status="valid" time="1.89" steps="791450"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="ket_sum_power_minus_one&#39;vc.5.0.2.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="9"><result status="valid" time="0.99" steps="750736"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ket_sum_power_minus_one&#39;vc.5.1" expl="equality hypothesis" proved="true">
   <transf name="rewrite" proved="true" arg1="Ensures">
    <goal name="ket_sum_power_minus_one&#39;vc.5.1.0" expl="equality hypothesis" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
