     
module Measure

         use matrices.Matrice
         use complex.Complex
         use qdata.Qreg
         use int.Int
         use matrices.Kronecker_product
         use qdata.Bv_to_ket
         use qdata.Kronecker_Qbit
         use matrices.Matrix_scalar
         use binary.Bit_vector_decomp
         use qdata.Ket_basis
         use binary.Bit_vector
         use complex_operations.Base_type     
         use exponentiation.Complex_Exponentiation
         use exponentiation.Power_
         use qdata.Bv_to_ket
         use p_set.Choose_filter
         use binary.Bv_concat
     
let function discard (x y z:matrix complex) (k n:int)
           requires{is_a_ket_l x k}
           requires{is_a_ket_l  y (n-k)}
           requires{z = kronecker x y}
           ensures{is_a_ket_l result  k }
  = x

let function proba_measure (x:matrix complex) (i n:int)
               requires{is_a_ket_l x n}
               requires{0<= i < power_ 2 n}
               ensures{real_ result}
               ensures{c_zero <=.result}
           ensures{result = cpower (modulus (get_ket x i )) 2}
  = cpower (modulus (get_ket x i )) 2

let function proba_measure_extension (x:matrix complex) (n i:int)
               requires{is_a_ket_l x n}
               ensures{real_ result}
               ensures{c_zero <=.result}
           ensures{0<= i < power_ 2 n -> result = proba_measure x i n}
           ensures{0<= i < power_ 2 n -> result = cpower (modulus (get_ket x i )) 2}
  = if 0<= i < power_ 2 n then proba_measure x i n else c_one

use set.Fset
use p_set.IndexestoSet
use complex_operations.FromInt           
  
let lemma proba_measure_sum_from_extension (x:matrix complex) (s: set int) ( n:int)
               requires{is_a_ket_l x n}
               requires{forall i. mem i s -> 0<= i < power_ 2 n}
           ensures{sum s (fun i -> proba_measure x i n) = sum s (proba_measure_extension x n) }
  = ()

let lemma proba_measure_sum_to_extension (x:matrix complex) (s: set int) ( n:int)
               requires{is_a_ket_l x n}
               requires{forall i. mem i s -> 0<= i < power_ 2 n}
           ensures{sum s (proba_measure_extension x n) = sum s (fun i -> proba_measure x i n)}
  = proba_measure_sum_from_extension x s n
  
let lemma positive_proba_measure(x:matrix complex) (i n:int)
      requires{is_a_ket_l x n}
      requires{0<= i < power_ 2 n}
      ensures{c_zero <=. proba_measure x i n}
  = ()

  let lemma proba_measure_scal (x:matrix complex) (i n:int)(scal :complex)
      requires{is_a_ket_l x n}
      requires{0<= i < power_ 2 n}
      requires{real_ scal}
      ensures{proba_measure (scal*..x) i n = cpower scal 2 *. proba_measure x i n}
=()

  let lemma proba_measure_add_ket_l_null_right (x x':matrix complex) (i n:int)
        requires{is_a_ket_l x n}
        requires{0<= i < power_ 2 n}
        requires{is_a_ket_l x' n}
        requires{get_ket x' i = c_zero}
        ensures{proba_measure (add_ket_l x x' n) i n = proba_measure x i n}
    = assert{get_ket (add_ket_l x x' n) i  = get_ket x i }

  let lemma proba_measure_add_ket_l_null_left (x x':matrix complex) (i n:int)
        requires{is_a_ket_l x n}
        requires{0<= i < power_ 2 n}
        requires{is_a_ket_l x' n}
        requires{get_ket x' i = c_zero}
        ensures{proba_measure (add_ket_l x' x n) i n = proba_measure x i n}
    = assert{get_ket (add_ket_l x' x n) i  = get_ket x i }

let function proba_measure_cond (x:matrix complex) (n:int) (p: int -> bool)
               requires{is_a_ket_l x n}
               ensures{real_ result}
               ensures{result = sum (my_filter   (to_fset 0 (power_ 2 n)) p) (fun i -> proba_measure x i n )}
  = sum (my_filter   (to_fset 0 (power_ 2 n)) p) (proba_measure_extension x  n)
  
let lemma proba_measure_from_sum (x:matrix complex)(i n :int) (f: bitvec-> complex)
               requires{is_a_ket_l x n}
               requires{0<= i < power_ 2 n}
               requires{x = ket_sum_l (n_bvs n) (fun k -> f k *..  (bv_to_ket k)) n}
               ensures{proba_measure x i n = cpower (modulus (f (int_to_bv i n))) 2}
  =  ket_sum_of_scalars f n

      use set.Fset
   use exponentiation.Int_Exponentiation
   use p_set.IndexestoSet
   use matrices.Matrix_addition
use p_set.Fset_comp

let function proba_measure_from_scal_sum_sum_fun (x:matrix complex) (i y k n n1 (* n2 *) n':int)(f: int->int ->  complex) (g:int-> int) (g':int-> int) (scal:complex):complex
               requires{is_a_ket_l x n}
               requires{0<= i < power_ 2 n'}
               requires{0<= n}
               requires{0<= n'}
               requires{0<= n1}
               requires{0<= n'}
               requires{n=n1+n'}
               requires{0<= y < power_ 2 n'}
               requires{forall e. 0<= e < power_ 2 n' -> 0<= g' e < power_ 2 n1}
               requires{forall e. 0<= e < k -> 0<= g e < power_ 2 n'}
               requires{real_ scal}
               requires{x = scal *.. ket_sum_l (n_bvs n') (fun i1 -> ket_sum_l (n_bvs n')
                                                                      (fun j1 -> f (bv_to_int i1) (bv_to_int j1)  *.. kronecker (ket n' (bv_to_int j1))  (ket n1 (g' (bv_to_int i1)))) n)n}
               requires{forall e e'. 0<= e < k -> 0<= e' < k -> e <> e' -> g e <> g e'}
               requires{forall l. 0<= l < k -> g' (g l) = g' i}
               requires{forall j. 0<= j < power_ 2 n' -> g' j = g' i -> exists ind. 0<=ind < k && g ind = j}
               ensures{result = proba_measure  x (y * power_ 2 n1 + (g' i)) n}
               ensures{result = cpower scal 2 *. cpower ( modulus (ind_sum (fun i1 -> f   (g i1) y) 0 k)) 2 }
  =
  let func = (fun i1 -> ket_sum_l (n_bvs n')
                       (fun j1 -> f (bv_to_int i1) (bv_to_int j1)  *.. kronecker (ket n' (bv_to_int j1))  (ket n1 (g' (bv_to_int i1)))) n)
  in
  let func' = (fun x  -> func (int_to_bv x n') )
    in
  begin
    ket_sum_l_to_fset func n' n;
    inter_empty_elts (my_filter (to_fset 0 (power_ 2 n')) (fun j -> g' j = g' i))
      (my_filter (to_fset 0 (power_ 2 n')) (fun j -> g' j <> g' i));
    ket_sum_partition (to_fset 0 (power_ 2 n')) (my_filter (to_fset 0 (power_ 2 n')) (fun j -> g' j = g' i))
      (my_filter (to_fset 0 (power_ 2 n')) (fun j -> g' j <> g' i)) func' n;
    sum_null_  (my_filter (to_fset 0 (power_ 2 n')) (fun j -> g' j <> g' i)) (fun j -> get_ket (func' i) (y * power_ 2 n1 + (g' j))) ;
    map_ket_sum_l func' (to_fset 0 k) g n;
end;
proba_measure  x (y * power_ 2 n1 + (g' i)) n

let lemma proba_measure_from_scal_ind_sum (x:matrix complex)(i n :int)  (f: int-> int-> complex) (s s2:complex)
               requires{is_a_ket_l x n}
               requires{0<= i < power_ 2 n}
               requires{real_ s}
               requires{x = s*.. ket_sum_l (n_bvs n) (fun k -> ket_sum_l (n_bvs n) (fun l -> f (bv_to_int k) (bv_to_int l)  *..  (bv_to_ket l))n)n}
               requires{s2 = cpower s 2}
               ensures{proba_measure x i n = s2 *. cpower (modulus (ind_sum  (fun k -> f k i) 0 (power_ 2 n))) 2}
  = ()

let ghost function top_proba_measure_from_scal_ind_sum (a:matrix complex)(i n :int)  (f: bitvec-> bitvec-> complex) (s s2:complex) (ghost x y: matrix complex)
               requires{is_a_ket_l x n}
               requires{is_a_ket y }
               requires{a = kronecker x y}
               requires{0<= i < power_ 2 n}
               requires{real_ s}
               requires{x = s*.. ket_sum_l (n_bvs n) (fun k -> ket_sum_l (n_bvs n) (fun l -> f k l  *..  (bv_to_ket l))n)n}
               requires{s2 = cpower s 2}
             ensures{result = proba_measure (discard x y a n (ket_length y +n)) i n}
               ensures{result = s2 *. cpower (modulus (ind_sum  (fun k -> f (int_to_bv k n) (int_to_bv i n) ) 0 (power_ 2 n))) 2}
  = proba_measure_from_scal_ind_sum x i n (fun i j -> f (int_to_bv i n) (int_to_bv j n)) s s2;
  proba_measure x i n

let lemma proba_measure_cond_eq (x:matrix complex) (n:int) (p p': int -> bool)
               requires{is_a_ket_l x n}
               requires{forall i. 0<= i < power_ 2 n -> (p i <-> p' i)}
               ensures{proba_measure_cond x n p = proba_measure_cond x n p'}
  =()

let lemma proba_measure_cond_entails (x:matrix complex) (n:int) (p p': int -> bool)
               requires{is_a_ket_l x n}
               requires{forall i. 0<=i<power_ 2 n -> p i -> p' i}
               ensures{proba_measure_cond x n p <=. proba_measure_cond x n p' }
  =  
sum_partition (my_filter   (to_fset 0 (power_ 2 n)) p) (my_filter   (to_fset 0 (power_ 2 n)) (fun i -> p' i && not p i)) (proba_measure_extension x n)
  
let lemma proba_measure_cond_add ( p p' p2: int->bool) (x:matrix complex) (n:int) (scal scal' scal2 :complex)
      requires{is_a_ket_l x n}
      requires{forall i. mem i  (to_fset 0 (power_ 2 n)) -> p i -> not (p' i)}
      requires{forall i. mem i  (to_fset 0 (power_ 2 n)) -> p i -> p2 i}
      requires{forall i. mem i  (to_fset 0 (power_ 2 n)) -> p' i -> p2 i}
      requires{scal <=. proba_measure_cond x n p}
      requires{scal' <=. proba_measure_cond x n p'}
      requires{scal2 <=. scal +. scal'  }
      ensures{scal2  <=. proba_measure_cond x n p2}
  =
  sum_partition (my_filter   (to_fset 0 (power_ 2 n)) p) (my_filter   (to_fset 0 (power_ 2 n)) p') (proba_measure_extension x  n);
proba_measure_cond_entails x n (fun i -> p i || p' i) p2

let lemma proba_measure_cond_const (x:matrix complex)(n :int) (f: int-> bool) (t t':complex)
               requires{is_a_ket_l x n}
               requires{t' = t *. (i_to_c (cardinal (my_filter (to_fset 0 (power_ 2 n)) f)))}
               requires{forall i. f i -> 0<= i < power_ 2 n -> proba_measure x i n = t}
               ensures{proba_measure_cond x  n f  = t'}
  = sum_constant (my_filter (to_fset 0 (power_ 2 n)) f) (proba_measure_extension x n) t
  
let lemma proba_measure_set_of_ind_pre (x:matrix complex) (s:set int) (n:int) (p: int -> bool) (scal_f:int ->  complex)(scal:  complex) (f:int->int)
               requires{is_a_ket_l x n}
               requires{forall i. mem i s -> 0<= f i < power_ 2 n}
               requires{forall i. mem i s -> scal *. scal_f i <=. proba_measure x (f i) n }
               requires{forall i. mem i s -> p (f i)  }
               requires{forall i. 0<=  i < power_ 2 n ->  p i -> exists j. mem j s  && i = f j }
               requires{forall i i'. mem i s -> mem i' s -> i<> i' ->   f i<> f i'  }
               ensures{scal *. sum  s scal_f <=. proba_measure_cond x n p}
  = ()

let lemma proba_measure_set_of_ind (x:matrix complex) (s:set int) (n:int) (p p': int -> bool) (scal_f:int ->  complex)(scal:  complex) (f:int->int)
               requires{is_a_ket_l x n}
               requires{forall i. mem i s -> 0<= f i < power_ 2 n}
               requires{forall i. mem i s -> scal *. scal_f i <=. proba_measure x (f i) n }
               requires{forall i. mem i s -> p (f i)  }
               requires{forall i. 0<= i <  power_ 2 n -> p i -> p' i}
               requires{forall i. 0<=  i < power_ 2 n ->  p i -> exists j. mem j s  && i = f j }
               requires{forall i i'. mem i s -> mem i' s -> i<> i' ->   f i<> f i'  }
               ensures{scal *. sum  s scal_f <=. proba_measure_cond x n p'}
  = proba_measure_set_of_ind_pre x s n p scal_f scal f;
    proba_measure_cond_entails x n p p'

let rec lemma proba_measure_sum_of_conds (s: set int) (x:matrix complex) (n:int) (p: int->int  -> bool)(scal scal':complex)
      requires{is_a_ket_l x n}
      requires{forall j. mem j s ->  scal <=. proba_measure_cond x n (p j) }
      requires{forall j j' i . mem j s -> mem j' s ->  mem i  (to_fset 0 (power_ 2 n)) -> j <> j' -> p j i -> not p j' i}
      requires{scal'<=.scal *. i_to_c (cardinal s)}
      requires{real_ scal}
      requires{c_zero <=. scal}
      ensures{ scal' <=.proba_measure_cond x n (fun i -> (exists k. mem k s && p k i) )}  
      variant{cardinal s}
  = if cardinal s = 0 then ()
    else
      begin
        assert{0< cardinal s};
        proba_measure_sum_of_conds  (remove (choose s) s) x n p scal (scal *. i_to_c (cardinal s -1))
end
end         
  
