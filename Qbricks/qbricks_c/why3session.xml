<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="CVC3" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="7" name="Z3" version="4.8.6" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="8" name="CVC4" version="1.7" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="10" name="Alt-Ergo" version="2.4.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="12" name="Z3" version="4.8.6" alternative="counterexamples" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="qbricks_c.mlw"/>
<theory name="Circuit_c" proved="true">
 <goal name="width_pre&#39;vc" expl="VC for width_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="width_pre&#39;vc.0" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="width_pre&#39;vc.0.0" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.67" steps="597005"/></proof>
   </goal>
   <goal name="width_pre&#39;vc.0.1" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.70" steps="597005"/></proof>
   </goal>
   <goal name="width_pre&#39;vc.0.2" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.30" steps="538684"/></proof>
   </goal>
   <goal name="width_pre&#39;vc.0.3" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.31" steps="538684"/></proof>
   </goal>
   <goal name="width_pre&#39;vc.0.4" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.38" steps="538684"/></proof>
   </goal>
   <goal name="width_pre&#39;vc.0.5" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.25" steps="538684"/></proof>
   </goal>
   <goal name="width_pre&#39;vc.0.6" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.71" steps="597090"/></proof>
   </goal>
   <goal name="width_pre&#39;vc.0.7" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.70" steps="597060"/></proof>
   </goal>
   <goal name="width_pre&#39;vc.0.8" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.65" steps="597027"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="width_pre&#39;vc.1" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="width_pre&#39;vc.1.0" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.67" steps="597005"/></proof>
   </goal>
   <goal name="width_pre&#39;vc.1.1" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.68" steps="597005"/></proof>
   </goal>
   <goal name="width_pre&#39;vc.1.2" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.27" steps="538684"/></proof>
   </goal>
   <goal name="width_pre&#39;vc.1.3" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.30" steps="538684"/></proof>
   </goal>
   <goal name="width_pre&#39;vc.1.4" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.51" steps="538684"/></proof>
   </goal>
   <goal name="width_pre&#39;vc.1.5" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.33" steps="538684"/></proof>
   </goal>
   <goal name="width_pre&#39;vc.1.6" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.68" steps="597060"/></proof>
   </goal>
   <goal name="width_pre&#39;vc.1.7" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.69" steps="597090"/></proof>
   </goal>
   <goal name="width_pre&#39;vc.1.8" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.67" steps="597027"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="width_pre&#39;vc.2" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="width_pre&#39;vc.2.0" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.81" steps="596990"/></proof>
   </goal>
   <goal name="width_pre&#39;vc.2.1" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.71" steps="596990"/></proof>
   </goal>
   <goal name="width_pre&#39;vc.2.2" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.27" steps="538674"/></proof>
   </goal>
   <goal name="width_pre&#39;vc.2.3" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.27" steps="538674"/></proof>
   </goal>
   <goal name="width_pre&#39;vc.2.4" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.30" steps="538674"/></proof>
   </goal>
   <goal name="width_pre&#39;vc.2.5" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.31" steps="538674"/></proof>
   </goal>
   <goal name="width_pre&#39;vc.2.6" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.66" steps="597076"/></proof>
   </goal>
   <goal name="width_pre&#39;vc.2.7" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.64" steps="597106"/></proof>
   </goal>
   <goal name="width_pre&#39;vc.2.8" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.69" steps="597034"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="width_pre&#39;vc.3" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="width_pre&#39;vc.3.0" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.73" steps="597005"/></proof>
   </goal>
   <goal name="width_pre&#39;vc.3.1" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.80" steps="597005"/></proof>
   </goal>
   <goal name="width_pre&#39;vc.3.2" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.41" steps="535878"/></proof>
   </goal>
   <goal name="width_pre&#39;vc.3.3" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.40" steps="535878"/></proof>
   </goal>
   <goal name="width_pre&#39;vc.3.4" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.41" steps="535878"/></proof>
   </goal>
   <goal name="width_pre&#39;vc.3.5" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.37" steps="535878"/></proof>
   </goal>
   <goal name="width_pre&#39;vc.3.6" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.87" steps="597060"/></proof>
   </goal>
   <goal name="width_pre&#39;vc.3.7" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.86" steps="597060"/></proof>
   </goal>
   <goal name="width_pre&#39;vc.3.8" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.85" steps="597067"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="build_correct&#39;vc" expl="VC for build_correct" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="build_correct&#39;vc.0" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="build_correct&#39;vc.0.0" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.85" steps="597365"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.0.1" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.85" steps="597365"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.0.2" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.26" steps="539018"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.0.3" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.31" steps="539018"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.0.4" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.45" steps="539018"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.0.5" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.45" steps="539018"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.0.6" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.90" steps="597476"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.0.7" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.78" steps="597444"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.0.8" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.87" steps="597407"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="build_correct&#39;vc.1" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="build_correct&#39;vc.1.0" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.97" steps="597365"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.1.1" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.93" steps="597365"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.1.2" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.43" steps="539018"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.1.3" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.38" steps="539018"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.1.4" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.39" steps="539018"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.1.5" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.37" steps="539018"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.1.6" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.83" steps="597476"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.1.7" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.57" steps="597444"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.1.8" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.83" steps="597407"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="build_correct&#39;vc.2" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="build_correct&#39;vc.2.0" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.86" steps="597329"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.2.1" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.90" steps="597329"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.2.2" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.52" steps="538952"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.2.3" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.41" steps="538952"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.2.4" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.36" steps="538952"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.2.5" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.45" steps="538952"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.2.6" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="2.00" steps="597402"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.2.7" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.93" steps="597441"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.2.8" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.75" steps="597377"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="build_correct&#39;vc.3" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="build_correct&#39;vc.3.0" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.81" steps="597329"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.3.1" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.78" steps="597329"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.3.2" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.39" steps="538952"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.3.3" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.37" steps="538952"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.3.4" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.38" steps="538952"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.3.5" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.31" steps="538952"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.3.6" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.91" steps="597402"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.3.7" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.91" steps="597446"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.3.8" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.92" steps="597377"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="build_correct&#39;vc.4" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="build_correct&#39;vc.4.0" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.91" steps="597367"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.4.1" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.71" steps="597367"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.4.2" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.44" steps="536164"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.4.3" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.42" steps="536164"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.4.4" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.49" steps="536164"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.4.5" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.33" steps="536164"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.4.6" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.90" steps="597430"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.4.7" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="2.03" steps="597436"/></proof>
   </goal>
   <goal name="build_correct&#39;vc.4.8" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="2.03" steps="597448"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="circ_to_pps_pre&#39;vc" expl="VC for circ_to_pps_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="circ_to_pps_pre&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.86"/></proof>
  </goal>
  <goal name="circ_to_pps_pre&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.50" steps="536418"/></proof>
  </goal>
  <goal name="circ_to_pps_pre&#39;vc.2" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.70"/></proof>
  </goal>
  <goal name="circ_to_pps_pre&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.41" steps="536454"/></proof>
  </goal>
  <goal name="circ_to_pps_pre&#39;vc.4" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.26" steps="536525"/></proof>
  </goal>
  <goal name="circ_to_pps_pre&#39;vc.5" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.62"/></proof>
  </goal>
  <goal name="circ_to_pps_pre&#39;vc.6" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.26" steps="536408"/></proof>
  </goal>
  <goal name="circ_to_pps_pre&#39;vc.7" expl="variant decrease" proved="true">
  <proof prover="8"><result status="valid" time="6.44" steps="1152689"/></proof>
  </goal>
  <goal name="circ_to_pps_pre&#39;vc.8" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.39" steps="536426"/></proof>
  </goal>
  <goal name="circ_to_pps_pre&#39;vc.9" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.67"/></proof>
  </goal>
  <goal name="circ_to_pps_pre&#39;vc.10" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.83" steps="597372"/></proof>
  </goal>
  <goal name="circ_to_pps_pre&#39;vc.11" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.81" steps="597884"/></proof>
  </goal>
  <goal name="circ_to_pps_pre&#39;vc.12" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.84" steps="598360"/></proof>
  </goal>
  <goal name="circ_to_pps_pre&#39;vc.13" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.74" steps="502829"/></proof>
  </goal>
  <goal name="circ_to_pps_pre&#39;vc.14" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.77" steps="502856"/></proof>
  </goal>
  <goal name="circ_to_pps_pre&#39;vc.15" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.78" steps="502867"/></proof>
  </goal>
  <goal name="circ_to_pps_pre&#39;vc.16" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.76" steps="502829"/></proof>
  </goal>
  <goal name="circ_to_pps_pre&#39;vc.17" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.76" steps="502856"/></proof>
  </goal>
  <goal name="circ_to_pps_pre&#39;vc.18" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.72" steps="502867"/></proof>
  </goal>
  <goal name="circ_to_pps_pre&#39;vc.19" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="circ_to_pps_pre&#39;vc.19.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.80" steps="671997"/></proof>
   </goal>
   <goal name="circ_to_pps_pre&#39;vc.19.1" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="2.27" steps="737173"/></proof>
   </goal>
   <goal name="circ_to_pps_pre&#39;vc.19.2" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="2.40" steps="736496"/></proof>
   </goal>
   <goal name="circ_to_pps_pre&#39;vc.19.3" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.84" steps="671691"/></proof>
   </goal>
   <goal name="circ_to_pps_pre&#39;vc.19.4" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.77" steps="671698"/></proof>
   </goal>
   <goal name="circ_to_pps_pre&#39;vc.19.5" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.26" steps="536183"/></proof>
   </goal>
   <goal name="circ_to_pps_pre&#39;vc.19.6" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.57"/></proof>
   </goal>
   <goal name="circ_to_pps_pre&#39;vc.19.7" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.13" steps="536166"/></proof>
   </goal>
   <goal name="circ_to_pps_pre&#39;vc.19.8" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.58"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="circ_to_pps_pre&#39;vc.20" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="circ_to_pps_pre&#39;vc.20.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.52" steps="671616"/></proof>
   </goal>
   <goal name="circ_to_pps_pre&#39;vc.20.1" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.50" steps="671764"/></proof>
   </goal>
   <goal name="circ_to_pps_pre&#39;vc.20.2" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="2.29" steps="736142"/></proof>
   </goal>
   <goal name="circ_to_pps_pre&#39;vc.20.3" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.01" steps="644950"/></proof>
   </goal>
   <goal name="circ_to_pps_pre&#39;vc.20.4" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.05" steps="644957"/></proof>
   </goal>
   <goal name="circ_to_pps_pre&#39;vc.20.5" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.14" steps="536167"/></proof>
   </goal>
   <goal name="circ_to_pps_pre&#39;vc.20.6" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.11" steps="536204"/></proof>
   </goal>
   <goal name="circ_to_pps_pre&#39;vc.20.7" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.30" steps="536150"/></proof>
   </goal>
   <goal name="circ_to_pps_pre&#39;vc.20.8" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.37" steps="536204"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="correct&#39;vc" expl="VC for correct" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="correct&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.84"/></proof>
  </goal>
  <goal name="correct&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.85"/></proof>
  </goal>
  <goal name="correct&#39;vc.2" expl="variant decrease" proved="true">
  <proof prover="8"><result status="valid" time="6.42" steps="1154043"/></proof>
  </goal>
  <goal name="correct&#39;vc.3" expl="variant decrease" proved="true">
  <proof prover="8"><result status="valid" time="6.46" steps="1154021"/></proof>
  </goal>
  <goal name="correct&#39;vc.4" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.63"/></proof>
  </goal>
  <goal name="correct&#39;vc.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="correct&#39;vc.5.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.32" steps="537499"/></proof>
   </goal>
   <goal name="correct&#39;vc.5.1" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.30" steps="537409"/></proof>
   </goal>
   <goal name="correct&#39;vc.5.2" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="2.09" steps="664068"/></proof>
   </goal>
   <goal name="correct&#39;vc.5.3" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.86" steps="503844"/></proof>
   </goal>
   <goal name="correct&#39;vc.5.4" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.84" steps="503807"/></proof>
   </goal>
   <goal name="correct&#39;vc.5.5" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.44" steps="537756"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="circuit&#39;vc" expl="VC for circuit" proved="true">
 <proof prover="8"><result status="valid" time="0.76" steps="504097"/></proof>
 </goal>
 <goal name="to_qc&#39;vc" expl="VC for to_qc" proved="true">
 <proof prover="8"><result status="valid" time="0.82" steps="504196"/></proof>
 </goal>
 <goal name="circ_to_string_&#39;vc" expl="VC for circ_to_string_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="circ_to_string_&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.70" steps="608078"/></proof>
  </goal>
  <goal name="circ_to_string_&#39;vc.1" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="circ_to_string_&#39;vc.1.0" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.84" steps="608171"/></proof>
   </goal>
   <goal name="circ_to_string_&#39;vc.1.1" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.72" steps="608171"/></proof>
   </goal>
   <goal name="circ_to_string_&#39;vc.1.2" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.29" steps="549065"/></proof>
   </goal>
   <goal name="circ_to_string_&#39;vc.1.3" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.44" steps="549065"/></proof>
   </goal>
   <goal name="circ_to_string_&#39;vc.1.4" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.42" steps="549065"/></proof>
   </goal>
   <goal name="circ_to_string_&#39;vc.1.5" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.32" steps="549065"/></proof>
   </goal>
   <goal name="circ_to_string_&#39;vc.1.6" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.69" steps="608327"/></proof>
   </goal>
   <goal name="circ_to_string_&#39;vc.1.7" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.78" steps="608269"/></proof>
   </goal>
   <goal name="circ_to_string_&#39;vc.1.8" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.76" steps="608262"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="circ_to_string_&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.69" steps="608151"/></proof>
  </goal>
  <goal name="circ_to_string_&#39;vc.3" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="circ_to_string_&#39;vc.3.0" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.67" steps="608261"/></proof>
   </goal>
   <goal name="circ_to_string_&#39;vc.3.1" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.87" steps="608261"/></proof>
   </goal>
   <goal name="circ_to_string_&#39;vc.3.2" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.29" steps="549091"/></proof>
   </goal>
   <goal name="circ_to_string_&#39;vc.3.3" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.32" steps="549091"/></proof>
   </goal>
   <goal name="circ_to_string_&#39;vc.3.4" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.33" steps="549091"/></proof>
   </goal>
   <goal name="circ_to_string_&#39;vc.3.5" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.31" steps="549091"/></proof>
   </goal>
   <goal name="circ_to_string_&#39;vc.3.6" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.89" steps="608417"/></proof>
   </goal>
   <goal name="circ_to_string_&#39;vc.3.7" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.69" steps="608359"/></proof>
   </goal>
   <goal name="circ_to_string_&#39;vc.3.8" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.91" steps="608352"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="circ_to_string_&#39;vc.4" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.87" steps="608074"/></proof>
  </goal>
  <goal name="circ_to_string_&#39;vc.5" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="circ_to_string_&#39;vc.5.0" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.84" steps="608167"/></proof>
   </goal>
   <goal name="circ_to_string_&#39;vc.5.1" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.85" steps="608167"/></proof>
   </goal>
   <goal name="circ_to_string_&#39;vc.5.2" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.32" steps="549050"/></proof>
   </goal>
   <goal name="circ_to_string_&#39;vc.5.3" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.35" steps="549050"/></proof>
   </goal>
   <goal name="circ_to_string_&#39;vc.5.4" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.32" steps="549050"/></proof>
   </goal>
   <goal name="circ_to_string_&#39;vc.5.5" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.32" steps="549050"/></proof>
   </goal>
   <goal name="circ_to_string_&#39;vc.5.6" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.69" steps="608269"/></proof>
   </goal>
   <goal name="circ_to_string_&#39;vc.5.7" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.84" steps="608319"/></proof>
   </goal>
   <goal name="circ_to_string_&#39;vc.5.8" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.85" steps="608258"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="circ_to_string_&#39;vc.6" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.74" steps="608147"/></proof>
  </goal>
  <goal name="circ_to_string_&#39;vc.7" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="circ_to_string_&#39;vc.7.0" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.88" steps="608257"/></proof>
   </goal>
   <goal name="circ_to_string_&#39;vc.7.1" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.79" steps="608257"/></proof>
   </goal>
   <goal name="circ_to_string_&#39;vc.7.2" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.43" steps="549076"/></proof>
   </goal>
   <goal name="circ_to_string_&#39;vc.7.3" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.30" steps="549076"/></proof>
   </goal>
   <goal name="circ_to_string_&#39;vc.7.4" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.44" steps="549076"/></proof>
   </goal>
   <goal name="circ_to_string_&#39;vc.7.5" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.41" steps="549076"/></proof>
   </goal>
   <goal name="circ_to_string_&#39;vc.7.6" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.77" steps="608359"/></proof>
   </goal>
   <goal name="circ_to_string_&#39;vc.7.7" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.78" steps="608404"/></proof>
   </goal>
   <goal name="circ_to_string_&#39;vc.7.8" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.56" steps="608348"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="circ_to_string_&#39;vc.8" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.70" steps="608100"/></proof>
  </goal>
  <goal name="circ_to_string_&#39;vc.9" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.79"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="to_qc_rev&#39;vc" expl="VC for to_qc_rev" proved="true">
 <proof prover="8"><result status="valid" time="3.29" steps="621886"/></proof>
 </goal>
 <goal name="to_qc_pre&#39;vc" expl="VC for to_qc_pre" proved="true">
 <proof prover="8"><result status="valid" time="1.24" steps="546374"/></proof>
 </goal>
 <goal name="pre_rev&#39;vc" expl="VC for pre_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pre_rev&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="to_qc_rev">
   <goal name="pre_rev&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.40" steps="549716"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="pre_to_qc&#39;vc" expl="VC for pre_to_qc" proved="true">
 <proof prover="8"><result status="valid" time="1.21" steps="546494"/></proof>
 </goal>
 <goal name="circ_to_pps&#39;vc" expl="VC for circ_to_pps" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="circ_to_pps&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.68" steps="609187"/></proof>
  </goal>
  <goal name="circ_to_pps&#39;vc.1" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="circ_to_pps&#39;vc.1.0" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.81" steps="609382"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.1.1" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.68" steps="609382"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.1.2" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.42" steps="550122"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.1.3" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.41" steps="550122"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.1.4" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.38" steps="550122"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.1.5" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.29" steps="550122"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.1.6" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.72" steps="609541"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.1.7" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.86" steps="609489"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.1.8" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.78" steps="609475"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="circ_to_pps&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.67" steps="609885"/></proof>
  </goal>
  <goal name="circ_to_pps&#39;vc.3" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="circ_to_pps&#39;vc.3.0" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.87" steps="610087"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.3.1" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.73" steps="610087"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.3.2" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.30" steps="550189"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.3.3" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.45" steps="550189"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.3.4" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.42" steps="550189"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.3.5" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.31" steps="550189"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.3.6" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.70" steps="610251"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.3.7" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.70" steps="610199"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.3.8" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.71" steps="610180"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="circ_to_pps&#39;vc.4" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.70" steps="611078"/></proof>
  </goal>
  <goal name="circ_to_pps&#39;vc.5" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.83" steps="609191"/></proof>
  </goal>
  <goal name="circ_to_pps&#39;vc.6" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="circ_to_pps&#39;vc.6.0" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.81" steps="609386"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.6.1" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.82" steps="609386"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.6.2" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.36" steps="550107"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.6.3" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.32" steps="550107"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.6.4" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.41" steps="550107"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.6.5" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.39" steps="550107"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.6.6" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.73" steps="609489"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.6.7" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.71" steps="609549"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.6.8" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.70" steps="609479"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="circ_to_pps&#39;vc.7" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.70" steps="609894"/></proof>
  </goal>
  <goal name="circ_to_pps&#39;vc.8" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="circ_to_pps&#39;vc.8.0" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.70" steps="610091"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.8.1" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.70" steps="610091"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.8.2" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.32" steps="550173"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.8.3" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.27" steps="550173"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.8.4" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.44" steps="550173"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.8.5" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.31" steps="550173"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.8.6" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.80" steps="610199"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.8.7" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.75" steps="610259"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.8.8" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.84" steps="610184"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="circ_to_pps&#39;vc.9" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.85" steps="609205"/></proof>
  </goal>
  <goal name="circ_to_pps&#39;vc.10" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.72"/></proof>
  </goal>
  <goal name="circ_to_pps&#39;vc.11" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.90" steps="609917"/></proof>
  </goal>
  <goal name="circ_to_pps&#39;vc.12" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.58" steps="610344"/></proof>
  </goal>
  <goal name="circ_to_pps&#39;vc.13" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.77" steps="513220"/></proof>
  </goal>
  <goal name="circ_to_pps&#39;vc.14" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.80" steps="513247"/></proof>
  </goal>
  <goal name="circ_to_pps&#39;vc.15" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.87" steps="513258"/></proof>
  </goal>
  <goal name="circ_to_pps&#39;vc.16" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.76" steps="513220"/></proof>
  </goal>
  <goal name="circ_to_pps&#39;vc.17" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.74" steps="513247"/></proof>
  </goal>
  <goal name="circ_to_pps&#39;vc.18" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.78" steps="513258"/></proof>
  </goal>
  <goal name="circ_to_pps&#39;vc.19" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="circ_to_pps&#39;vc.19.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="4.11" steps="763363"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.19.1" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="4.15" steps="764921"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.19.2" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="4.18" steps="762855"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.19.3" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="4.00" steps="760347"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.19.4" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="3.90" steps="760349"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.19.5" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.30" steps="547652"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.19.6" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.30" steps="547497"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.19.7" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.36" steps="547635"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.19.8" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.31" steps="547497"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="circ_to_pps&#39;vc.20" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="circ_to_pps&#39;vc.20.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.75" steps="681634"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.20.1" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="2.30" steps="748179"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.20.2" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="2.24" steps="747322"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.20.3" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.51" steps="681213"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.20.4" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.77" steps="681220"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.20.5" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.31" steps="547004"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.20.6" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.54" steps="609834"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.20.7" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.25" steps="546987"/></proof>
   </goal>
   <goal name="circ_to_pps&#39;vc.20.8" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.52" steps="609829"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="circ_to_pps&#39;vc.21" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="circ_to_pps&#39;vc.21.0" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="circ_to_pps&#39;vc.21.0.0" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="1.51" steps="681788"/></proof>
    </goal>
    <goal name="circ_to_pps&#39;vc.21.0.1" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="1.52" steps="682012"/></proof>
    </goal>
    <goal name="circ_to_pps&#39;vc.21.0.2" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="2.11" steps="746802"/></proof>
    </goal>
    <goal name="circ_to_pps&#39;vc.21.0.3" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="1.10" steps="655713"/></proof>
    </goal>
    <goal name="circ_to_pps&#39;vc.21.0.4" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="1.07" steps="655720"/></proof>
    </goal>
    <goal name="circ_to_pps&#39;vc.21.0.5" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="1.16" steps="546993"/></proof>
    </goal>
    <goal name="circ_to_pps&#39;vc.21.0.6" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="1.19" steps="547045"/></proof>
    </goal>
    <goal name="circ_to_pps&#39;vc.21.0.7" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="1.18" steps="546976"/></proof>
    </goal>
    <goal name="circ_to_pps&#39;vc.21.0.8" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="1.15" steps="547045"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="width&#39;vc" expl="VC for width" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="width&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="3.51" steps="623137"/></proof>
  </goal>
  <goal name="width&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.52" steps="547824"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sem&#39;vc" expl="VC for mat_sem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sem&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.05" steps="610284"/></proof>
  </goal>
  <goal name="mat_sem&#39;vc.1" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mat_sem&#39;vc.1.0" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.74" steps="610576"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.1.1" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="2.02" steps="610576"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.1.2" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.31" steps="551073"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.1.3" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.33" steps="551073"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.1.4" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.32" steps="551073"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.1.5" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.57" steps="551073"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.1.6" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="2.01" steps="610769"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.1.7" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="2.03" steps="610689"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.1.8" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="2.05" steps="610673"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sem&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.56" steps="615973"/></proof>
  </goal>
  <goal name="mat_sem&#39;vc.3" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mat_sem&#39;vc.3.0" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.51" steps="616262"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.3.1" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.53" steps="616262"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.3.2" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.21" steps="554686"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.3.3" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.21" steps="554686"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.3.4" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.22" steps="554686"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.3.5" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.18" steps="554686"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.3.6" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.55" steps="616464"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.3.7" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.53" steps="616379"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.3.8" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.57" steps="616359"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sem&#39;vc.4" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.88" steps="619519"/></proof>
  </goal>
  <goal name="mat_sem&#39;vc.5" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.06" steps="610288"/></proof>
  </goal>
  <goal name="mat_sem&#39;vc.6" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mat_sem&#39;vc.6.0" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="2.07" steps="610580"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.6.1" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="2.01" steps="610580"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.6.2" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.61" steps="551058"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.6.3" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.33" steps="551058"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.6.4" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.32" steps="551058"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.6.5" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.54" steps="551058"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.6.6" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="2.05" steps="610689"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.6.7" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.99" steps="610777"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.6.8" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="2.01" steps="610677"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sem&#39;vc.7" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.56" steps="615977"/></proof>
  </goal>
  <goal name="mat_sem&#39;vc.8" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.79"/></proof>
  </goal>
  <goal name="mat_sem&#39;vc.9" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.04" steps="610300"/></proof>
  </goal>
  <goal name="mat_sem&#39;vc.10" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.77" steps="611158"/></proof>
  </goal>
  <goal name="mat_sem&#39;vc.11" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.78" steps="611585"/></proof>
  </goal>
  <goal name="mat_sem&#39;vc.12" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mat_sem&#39;vc.12.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.20" steps="554513"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.12.1" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.49" steps="580264"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.12.2" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.21" steps="577255"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.12.3" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.41" steps="655360"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.12.4" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.12" steps="551424"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.12.5" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="mat_sem&#39;vc.12.5.0" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="1.59" steps="654875"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sem&#39;vc.12.6" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="2.00" steps="656939"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.12.7" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="mat_sem&#39;vc.12.7.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures2">
     <goal name="mat_sem&#39;vc.12.7.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures6">
      <goal name="mat_sem&#39;vc.12.7.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="Ensures11">
       <goal name="mat_sem&#39;vc.12.7.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="power_sum_rev">
        <goal name="mat_sem&#39;vc.12.7.0.0.0.0.0" expl="postcondition" proved="true">
        <proof prover="8"><result status="valid" time="1.91" steps="661289"/></proof>
        </goal>
        <goal name="mat_sem&#39;vc.12.7.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="1.79" steps="619032"/></proof>
        </goal>
        <goal name="mat_sem&#39;vc.12.7.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="1.77" steps="619032"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sem&#39;vc.12.8" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="2.57" steps="823615"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sem&#39;vc.13" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mat_sem&#39;vc.13.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.11" steps="550988"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.13.1" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.38" steps="576774"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.13.2" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.19" steps="577092"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.13.3" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.43" steps="655197"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.13.4" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.24" steps="551261"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.13.5" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.44" steps="654708"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.13.6" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.30" steps="590238"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.13.7" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.68" steps="620553"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.13.8" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="2.03" steps="750171"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sem&#39;vc.14" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mat_sem&#39;vc.14.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.76" steps="618105"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.14.1" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.87" steps="645659"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.14.2" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.49" steps="580851"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.14.3" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.72" steps="659168"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.14.4" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.36" steps="555103"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.14.5" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.64" steps="658679"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.14.6" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="mat_sem&#39;vc.14.6.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="mat_sem&#39;vc.14.6.0.0" expl="postcondition" proved="true">
     <transf name="instantiate" proved="true" arg1="circ_to_pps&#39;def8" arg2="c,x2,x1">
      <goal name="mat_sem&#39;vc.14.6.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="Hinst">
       <goal name="mat_sem&#39;vc.14.6.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="H1">
        <goal name="mat_sem&#39;vc.14.6.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="mat_mult_assoc">
         <goal name="mat_sem&#39;vc.14.6.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="pps_apply_basis_seq">
          <goal name="mat_sem&#39;vc.14.6.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <proof prover="8"><result status="valid" time="2.32" steps="767155"/></proof>
          </goal>
          <goal name="mat_sem&#39;vc.14.6.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="1.78" steps="688029"/></proof>
          </goal>
          <goal name="mat_sem&#39;vc.14.6.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="2.29" steps="766419"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sem&#39;vc.14.6.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="1.67" steps="685832"/></proof>
         </goal>
         <goal name="mat_sem&#39;vc.14.6.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="1.72" steps="686738"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sem&#39;vc.14.6.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="1.01" steps="646658"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sem&#39;vc.14.7" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="mat_sem&#39;vc.14.7.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="mat_sem&#39;vc.14.7.0.0" expl="postcondition" proved="true">
     <transf name="instantiate" proved="true" arg1="circ_to_pps&#39;def7" arg2="c,x2,x1">
      <goal name="mat_sem&#39;vc.14.7.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H1">
       <goal name="mat_sem&#39;vc.14.7.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="Hinst">
        <goal name="mat_sem&#39;vc.14.7.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="pps_apply_basis_par">
         <goal name="mat_sem&#39;vc.14.7.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="replace" proved="true" arg1="(bv_to_ket x)" arg2="(kronecker (bv_to_ket (hpart x (h_width (circ_to_pps (to_qc x2)))))  (bv_to_ket (tpart x (h_width (circ_to_pps (to_qc x2)))))  )">
          <goal name="mat_sem&#39;vc.14.7.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="rewrite" proved="true" arg1="kronecker_mult_commut_p">
           <goal name="mat_sem&#39;vc.14.7.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <proof prover="8"><result status="valid" time="2.00" steps="736815"/></proof>
           </goal>
           <goal name="mat_sem&#39;vc.14.7.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="1.90" steps="724402"/></proof>
           </goal>
           <goal name="mat_sem&#39;vc.14.7.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="1.99" steps="735033"/></proof>
           </goal>
           <goal name="mat_sem&#39;vc.14.7.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="1.42" steps="642886"/></proof>
           </goal>
           <goal name="mat_sem&#39;vc.14.7.0.0.0.0.0.0.0.4" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="1.44" steps="642886"/></proof>
           </goal>
           <goal name="mat_sem&#39;vc.14.7.0.0.0.0.0.0.0.5" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="2.91" steps="744014"/></proof>
           </goal>
           <goal name="mat_sem&#39;vc.14.7.0.0.0.0.0.0.0.6" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="2.98" steps="745101"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="mat_sem&#39;vc.14.7.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="8"><result status="valid" time="1.91" steps="724331"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sem&#39;vc.14.7.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="2.08" steps="724269"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sem&#39;vc.14.7.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="0.83" steps="604516"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sem&#39;vc.14.8" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="mat_sem&#39;vc.14.8.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="mat_sem&#39;vc.14.8.0.0" expl="postcondition" proved="true">
     <proof prover="8"><result status="valid" time="2.44" steps="876407"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sem&#39;vc.15" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mat_mult_ket_bv_gen">
   <goal name="mat_sem&#39;vc.15.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="get_pps_apply">
    <goal name="mat_sem&#39;vc.15.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
     <goal name="mat_sem&#39;vc.15.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="2.92" steps="907214"/></proof>
     </goal>
     <goal name="mat_sem&#39;vc.15.0.0.1" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="2.96" steps="911034"/></proof>
     </goal>
     <goal name="mat_sem&#39;vc.15.0.0.2" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="2.30" steps="839220"/></proof>
     </goal>
     <goal name="mat_sem&#39;vc.15.0.0.3" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="mat_sem&#39;vc.15.0.0.3.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="mat_sem&#39;vc.15.0.0.3.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="scalar_eq_gen">
        <goal name="mat_sem&#39;vc.15.0.0.3.0.0.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(ket (ket_length x) (bv_to_int a))" arg2="(bv_to_ket a)">
         <goal name="mat_sem&#39;vc.15.0.0.3.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="2.08" steps="695501"/></proof>
         </goal>
         <goal name="mat_sem&#39;vc.15.0.0.3.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="8"><result status="valid" time="2.04" steps="695615"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sem&#39;vc.15.0.0.3.0.0.1" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="0.74" steps="590856"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sem&#39;vc.15.0.0.3.0.1" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="scalar_eq_gen">
        <goal name="mat_sem&#39;vc.15.0.0.3.0.1.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(ket (ket_length x) (bv_to_int a))" arg2="(bv_to_ket a)">
         <goal name="mat_sem&#39;vc.15.0.0.3.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="2.08" steps="724605"/></proof>
         </goal>
         <goal name="mat_sem&#39;vc.15.0.0.3.0.1.0.1" expl="equality hypothesis" proved="true">
         <proof prover="8"><result status="valid" time="2.11" steps="724782"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sem&#39;vc.15.0.0.3.0.1.1" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="0.79" steps="616932"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sem&#39;vc.15.0.0.3.0.2" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="scalar_eq_gen">
        <goal name="mat_sem&#39;vc.15.0.0.3.0.2.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(ket (ket_length x) (bv_to_int a))" arg2="(bv_to_ket a)">
         <goal name="mat_sem&#39;vc.15.0.0.3.0.2.0.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.86" steps="726814"/></proof>
         </goal>
         <goal name="mat_sem&#39;vc.15.0.0.3.0.2.0.1" expl="equality hypothesis" proved="true">
         <proof prover="8"><result status="valid" time="2.12" steps="727002"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sem&#39;vc.15.0.0.3.0.2.1" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="0.79" steps="616940"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sem&#39;vc.15.0.0.3.0.3" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="scalar_eq_gen">
        <goal name="mat_sem&#39;vc.15.0.0.3.0.3.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(ket (ket_length x) (bv_to_int a))" arg2="(bv_to_ket a)">
         <goal name="mat_sem&#39;vc.15.0.0.3.0.3.0.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="2.46" steps="805760"/></proof>
         </goal>
         <goal name="mat_sem&#39;vc.15.0.0.3.0.3.0.1" expl="equality hypothesis" proved="true">
         <proof prover="8"><result status="valid" time="2.15" steps="805791"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sem&#39;vc.15.0.0.3.0.3.1" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="0.91" steps="692818"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sem&#39;vc.15.0.0.3.0.4" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="scalar_eq_gen">
        <goal name="mat_sem&#39;vc.15.0.0.3.0.4.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(ket (ket_length x) (bv_to_int a))" arg2="(bv_to_ket a)">
         <goal name="mat_sem&#39;vc.15.0.0.3.0.4.0.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="2.04" steps="695710"/></proof>
         </goal>
         <goal name="mat_sem&#39;vc.15.0.0.3.0.4.0.1" expl="equality hypothesis" proved="true">
         <proof prover="8"><result status="valid" time="2.05" steps="695822"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sem&#39;vc.15.0.0.3.0.4.1" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.02" steps="590833"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sem&#39;vc.15.0.0.3.0.5" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="scalar_eq_gen">
        <goal name="mat_sem&#39;vc.15.0.0.3.0.5.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(ket (ket_length x) (bv_to_int a))" arg2="(bv_to_ket a)">
         <goal name="mat_sem&#39;vc.15.0.0.3.0.5.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="Ensures">
          <goal name="mat_sem&#39;vc.15.0.0.3.0.5.0.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="2.24" steps="806125"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sem&#39;vc.15.0.0.3.0.5.0.1" expl="equality hypothesis" proved="true">
         <proof prover="8"><result status="valid" time="2.31" steps="805516"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sem&#39;vc.15.0.0.3.0.5.1" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.18" steps="692402"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sem&#39;vc.15.0.0.3.0.6" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="scalar_eq_gen">
        <goal name="mat_sem&#39;vc.15.0.0.3.0.6.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(ket (ket_length x) (bv_to_int a))" arg2="(bv_to_ket a)">
         <goal name="mat_sem&#39;vc.15.0.0.3.0.6.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="Ensures">
          <goal name="mat_sem&#39;vc.15.0.0.3.0.6.0.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.96" steps="741093"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sem&#39;vc.15.0.0.3.0.6.0.1" expl="equality hypothesis" proved="true">
         <proof prover="8"><result status="valid" time="1.97" steps="739782"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sem&#39;vc.15.0.0.3.0.6.1" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="0.87" steps="624789"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sem&#39;vc.15.0.0.3.0.7" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="scalar_eq_gen">
        <goal name="mat_sem&#39;vc.15.0.0.3.0.7.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.78" steps="701447"/></proof>
        </goal>
        <goal name="mat_sem&#39;vc.15.0.0.3.0.7.1" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="0.79" steps="588438"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sem&#39;vc.15.0.0.3.0.8" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="scalar_eq_gen">
        <goal name="mat_sem&#39;vc.15.0.0.3.0.8.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(ket (ket_length x) (bv_to_int a))" arg2="(bv_to_ket a)">
         <goal name="mat_sem&#39;vc.15.0.0.3.0.8.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="Ensures">
          <goal name="mat_sem&#39;vc.15.0.0.3.0.8.0.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="2.74" steps="881220"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sem&#39;vc.15.0.0.3.0.8.0.1" expl="equality hypothesis" proved="true">
         <proof prover="8"><result status="valid" time="2.74" steps="880043"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sem&#39;vc.15.0.0.3.0.8.1" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.23" steps="762641"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sem&#39;vc.15.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="2.22" steps="838893"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="mat_sem&#39;vc.15.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="1.92" steps="835849"/></proof>
   </goal>
   <goal name="mat_sem&#39;vc.15.2" expl="rewrite premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="mat_sem&#39;vc.15.2.0" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.83" steps="835287"/></proof>
    </goal>
    <goal name="mat_sem&#39;vc.15.2.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.93" steps="835890"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="pps_to_mat_mat_sem&#39;vc" expl="VC for pps_to_mat_mat_sem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pps_to_mat_mat_sem&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.64" steps="617118"/></proof>
  </goal>
  <goal name="pps_to_mat_mat_sem&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.69" steps="616928"/></proof>
  </goal>
  <goal name="pps_to_mat_mat_sem&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.70" steps="617144"/></proof>
  </goal>
  <goal name="pps_to_mat_mat_sem&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.72" steps="616957"/></proof>
  </goal>
  <goal name="pps_to_mat_mat_sem&#39;vc.4" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.32" steps="688839"/></proof>
  </goal>
  <goal name="pps_to_mat_mat_sem&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.92" steps="581868"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="sem_correction_gen&#39;vc" expl="VC for sem_correction_gen" proved="true">
 <proof prover="8"><result status="valid" time="1.69" steps="612617"/></proof>
 </goal>
 <goal name="sem_correction_gen_rev&#39;vc" expl="VC for sem_correction_gen_rev" proved="true">
 <proof prover="8"><result status="valid" time="1.45" steps="548513"/></proof>
 </goal>
 <goal name="size&#39;vc" expl="VC for size" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="size&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.01" steps="611639"/></proof>
  </goal>
  <goal name="size&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="8"><result status="valid" time="7.03" steps="1171970"/></proof>
  </goal>
  <goal name="size&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.57" steps="612031"/></proof>
  </goal>
  <goal name="size&#39;vc.3" expl="variant decrease" proved="true">
  <proof prover="8"><result status="valid" time="6.33" steps="1172705"/></proof>
  </goal>
  <goal name="size&#39;vc.4" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.02" steps="611643"/></proof>
  </goal>
  <goal name="size&#39;vc.5" expl="variant decrease" proved="true">
  <proof prover="8"><result status="valid" time="6.94" steps="1171240"/></proof>
  </goal>
  <goal name="size&#39;vc.6" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.54" steps="612045"/></proof>
  </goal>
  <goal name="size&#39;vc.7" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.88"/></proof>
  </goal>
  <goal name="size&#39;vc.8" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.98" steps="611649"/></proof>
  </goal>
  <goal name="size&#39;vc.9" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="size&#39;vc.9.0" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="2.00" steps="612074"/></proof>
   </goal>
   <goal name="size&#39;vc.9.1" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.97" steps="612074"/></proof>
   </goal>
   <goal name="size&#39;vc.9.2" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.55" steps="549452"/></proof>
   </goal>
   <goal name="size&#39;vc.9.3" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.53" steps="549452"/></proof>
   </goal>
   <goal name="size&#39;vc.9.4" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.48" steps="549452"/></proof>
   </goal>
   <goal name="size&#39;vc.9.5" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.51" steps="549452"/></proof>
   </goal>
   <goal name="size&#39;vc.9.6" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.99" steps="612271"/></proof>
   </goal>
   <goal name="size&#39;vc.9.7" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.96" steps="612275"/></proof>
   </goal>
   <goal name="size&#39;vc.9.8" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="2.00" steps="612268"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="size&#39;vc.10" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="size&#39;vc.10.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.10" steps="548867"/></proof>
   </goal>
   <goal name="size&#39;vc.10.1" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.31" steps="548867"/></proof>
   </goal>
   <goal name="size&#39;vc.10.2" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.89" steps="515154"/></proof>
   </goal>
   <goal name="size&#39;vc.10.3" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.93" steps="526418"/></proof>
   </goal>
   <goal name="size&#39;vc.10.4" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.99" steps="526418"/></proof>
   </goal>
   <goal name="size&#39;vc.10.5" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.94" steps="526504"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ancillas&#39;vc" expl="VC for ancillas" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ancillas&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.97" steps="621022"/></proof>
  </goal>
  <goal name="ancillas&#39;vc.1" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ancillas&#39;vc.1.0" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="2.02" steps="621485"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.1.1" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="2.03" steps="621485"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.1.2" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.62" steps="560463"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.1.3" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.61" steps="560463"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.1.4" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.62" steps="560463"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.1.5" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.58" steps="560463"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.1.6" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="2.03" steps="621707"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.1.7" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.96" steps="621631"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.1.8" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.97" steps="621598"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ancillas&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.64" steps="621444"/></proof>
  </goal>
  <goal name="ancillas&#39;vc.3" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ancillas&#39;vc.3.0" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.65" steps="621919"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.3.1" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.93" steps="621919"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.3.2" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.28" steps="560506"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.3.3" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.41" steps="560506"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.3.4" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.26" steps="560506"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.3.5" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.21" steps="560506"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.3.6" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.54" steps="622161"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.3.7" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.76" steps="622065"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.3.8" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.75" steps="622032"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ancillas&#39;vc.4" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.00" steps="621026"/></proof>
  </goal>
  <goal name="ancillas&#39;vc.5" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ancillas&#39;vc.5.0" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="2.04" steps="621489"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.5.1" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.77" steps="621489"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.5.2" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.38" steps="560448"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.5.3" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.41" steps="560448"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.5.4" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.55" steps="560448"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.5.5" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.37" steps="560448"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.5.6" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.76" steps="621631"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.5.7" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.81" steps="621725"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.5.8" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="2.05" steps="621602"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ancillas&#39;vc.6" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.75" steps="621458"/></proof>
  </goal>
  <goal name="ancillas&#39;vc.7" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ancillas&#39;vc.7.0" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.75" steps="621923"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.7.1" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.54" steps="621923"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.7.2" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.24" steps="560491"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.7.3" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.38" steps="560491"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.7.4" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.35" steps="560491"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.7.5" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.34" steps="560491"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.7.6" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.75" steps="622065"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.7.7" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.79" steps="622174"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.7.8" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.55" steps="622036"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ancillas&#39;vc.8" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.95" steps="621026"/></proof>
  </goal>
  <goal name="ancillas&#39;vc.9" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ancillas&#39;vc.9.0" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.78" steps="621491"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.9.1" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="2.05" steps="621491"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.9.2" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.56" steps="556831"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.9.3" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.57" steps="556831"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.9.4" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.61" steps="556831"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.9.5" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.57" steps="556831"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.9.6" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.77" steps="621633"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.9.7" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="2.05" steps="621637"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.9.8" expl="variant decrease" proved="true">
   <proof prover="8"><result status="valid" time="1.96" steps="621699"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ancillas&#39;vc.10" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ancillas&#39;vc.10.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.65" steps="624725"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.10.1" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.20" steps="556201"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.10.2" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.70" steps="621967"/></proof>
   </goal>
   <goal name="ancillas&#39;vc.10.3" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.90" steps="533557"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="range&#39;vc" expl="VC for range" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="range&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.66" steps="621852"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="basis_ket&#39;vc" expl="VC for basis_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="basis_ket&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="basis_ket&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="basis_ket&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="basis_ket&#39;vc.0.0.0.0" expl="VC for basis_ket" proved="true">
     <transf name="apply" proved="true" arg1="pps&#39;invariant3">
      <goal name="basis_ket&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="2.89" steps="840058"/></proof>
      </goal>
      <goal name="basis_ket&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="2.94" steps="839905"/></proof>
      </goal>
      <goal name="basis_ket&#39;vc.0.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="2.34" steps="773992"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="basis_ket&#39;vc.0.0.0.1" expl="VC for basis_ket" proved="true">
     <transf name="apply" proved="true" arg1="pps&#39;invariant2">
      <goal name="basis_ket&#39;vc.0.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="2.96" steps="840058"/></proof>
      </goal>
      <goal name="basis_ket&#39;vc.0.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="2.92" steps="839905"/></proof>
      </goal>
      <goal name="basis_ket&#39;vc.0.0.0.1.2" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="2.02" steps="773992"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="binary_basis_ket&#39;vc" expl="VC for binary_basis_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="binary_basis_ket&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_binary_l">
   <goal name="binary_basis_ket&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="binary_basis_ket&#39;vc.0.0.0" expl="apply premises" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="binary_basis_ket&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="binary_basis_ket&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="2.52" steps="757691"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="binary_basis_ket&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="2.24" steps="757789"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="basis_ket_invariant&#39;vc" expl="VC for basis_ket_invariant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="basis_ket_invariant&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="basis_ket_invariant&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
    <goal name="basis_ket_invariant&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="basis_ket_invariant&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
      <goal name="basis_ket_invariant&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="pps&#39;invariant1">
       <goal name="basis_ket_invariant&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="2.30" steps="767846"/></proof>
       </goal>
       <goal name="basis_ket_invariant&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="2.55" steps="767791"/></proof>
       </goal>
       <goal name="basis_ket_invariant&#39;vc.0.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.71" steps="702825"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ang_ind&#39;vc" expl="VC for ang_ind" proved="true">
 <proof prover="8"><result status="valid" time="0.79" steps="524293"/></proof>
 </goal>
 <goal name="ang_ind_invariant&#39;vc" expl="VC for ang_ind_invariant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ang_ind_invariant&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="ang_ind_invariant&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_ind&#39;def">
    <goal name="ang_ind_invariant&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ang_ind&#39;def">
     <goal name="ang_ind_invariant&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="ang_ind_invariant&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="pps&#39;invariant">
       <goal name="ang_ind_invariant&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="2.51" steps="768302"/></proof>
       </goal>
       <goal name="ang_ind_invariant&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="2.47" steps="768252"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="phase&#39;vc" expl="VC for phase" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="phase&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.45" steps="559266"/></proof>
  </goal>
  <goal name="phase&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.84" steps="524758"/></proof>
  </goal>
  <goal name="phase&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.47" steps="559302"/></proof>
  </goal>
  <goal name="phase&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.49" steps="559342"/></proof>
  </goal>
  <goal name="phase&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.28" steps="559354"/></proof>
  </goal>
  <goal name="phase&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.67" steps="624223"/></proof>
  </goal>
  <goal name="phase&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.78" steps="624200"/></proof>
  </goal>
  <goal name="phase&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="3.39" steps="666730"/></proof>
  </goal>
  <goal name="phase&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="3.39" steps="667657"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="rz&#39;vc" expl="VC for rz" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="rz&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.48" steps="559637"/></proof>
  </goal>
  <goal name="rz&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.67" steps="525056"/></proof>
  </goal>
  <goal name="rz&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.23" steps="559673"/></proof>
  </goal>
  <goal name="rz&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.20" steps="559718"/></proof>
  </goal>
  <goal name="rz&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.19" steps="559715"/></proof>
  </goal>
  <goal name="rz&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.61" steps="624597"/></proof>
  </goal>
  <goal name="rz&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.60" steps="624564"/></proof>
  </goal>
  <goal name="rz&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="3.43" steps="667061"/></proof>
  </goal>
  <goal name="rz&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="3.45" steps="668104"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="hadamard&#39;vc" expl="VC for hadamard" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="hadamard&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.87" steps="525354"/></proof>
  </goal>
  <goal name="hadamard&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.63" steps="525370"/></proof>
  </goal>
  <goal name="hadamard&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.16" steps="560503"/></proof>
  </goal>
  <goal name="hadamard&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.39" steps="560707"/></proof>
  </goal>
  <goal name="hadamard&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.36" steps="560704"/></proof>
  </goal>
  <goal name="hadamard&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.17" steps="560740"/></proof>
  </goal>
  <goal name="hadamard&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.19" steps="560766"/></proof>
  </goal>
  <goal name="hadamard&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="2.97" steps="667642"/></proof>
  </goal>
  <goal name="hadamard&#39;vc.8" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ang_ind result x y)" arg2="(h_angle pps_hadamard x y)">
   <goal name="hadamard&#39;vc.8.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="2.13" steps="705335"/></proof>
   </goal>
   <goal name="hadamard&#39;vc.8.1" expl="equality hypothesis" proved="true">
   <proof prover="8"><result status="valid" time="1.60" steps="638351"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cnot&#39;vc" expl="VC for cnot" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cnot&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.66" steps="525615"/></proof>
  </goal>
  <goal name="cnot&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.66" steps="525631"/></proof>
  </goal>
  <goal name="cnot&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.19" steps="561239"/></proof>
  </goal>
  <goal name="cnot&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.38" steps="561281"/></proof>
  </goal>
  <goal name="cnot&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.42" steps="561278"/></proof>
  </goal>
  <goal name="cnot&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="1.50" steps="6336426"/></proof>
  </goal>
  <goal name="cnot&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.20" steps="561340"/></proof>
  </goal>
  <goal name="cnot&#39;vc.7" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="cnot&#39;vc.7.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
    <goal name="cnot&#39;vc.7.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures4">
     <goal name="cnot&#39;vc.7.0.0.0" expl="postcondition" proved="true">
     <transf name="eliminate_if" proved="true" >
      <goal name="cnot&#39;vc.7.0.0.0.0" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="cnot&#39;vc.7.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="cnot&#39;vc.7.0.0.0.0.0.0" expl="postcondition" proved="true">
        <proof prover="8"><result status="valid" time="2.60" steps="862981"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="cnot&#39;vc.8" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="cnot&#39;vc.8.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
    <goal name="cnot&#39;vc.8.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures5">
     <goal name="cnot&#39;vc.8.0.0.0" expl="postcondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="cnot&#39;vc.8.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="pps_cnot&#39;def1">
       <goal name="cnot&#39;vc.8.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="8"><result status="valid" time="1.15" steps="677192"/></proof>
       </goal>
       <goal name="cnot&#39;vc.8.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.96" steps="664482"/></proof>
       </goal>
       <goal name="cnot&#39;vc.8.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.98" steps="664482"/></proof>
       </goal>
       <goal name="cnot&#39;vc.8.0.0.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="1.07" steps="664466"/></proof>
       </goal>
       <goal name="cnot&#39;vc.8.0.0.0.0.4" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.89" steps="664459"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="cnot&#39;vc.9" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="cnot&#39;vc.9.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_ind&#39;def">
    <goal name="cnot&#39;vc.9.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures6">
     <goal name="cnot&#39;vc.9.0.0.0" expl="postcondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="cnot&#39;vc.9.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="pps_cnot&#39;def">
       <goal name="cnot&#39;vc.9.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="8"><result status="valid" time="1.78" steps="704519"/></proof>
       </goal>
       <goal name="cnot&#39;vc.9.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.90" steps="664678"/></proof>
       </goal>
       <goal name="cnot&#39;vc.9.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.92" steps="664678"/></proof>
       </goal>
       <goal name="cnot&#39;vc.9.0.0.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.98" steps="664662"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="id&#39;vc" expl="VC for id" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="id&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.89" steps="526090"/></proof>
  </goal>
  <goal name="id&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.72" steps="526106"/></proof>
  </goal>
  <goal name="id&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.27" steps="562171"/></proof>
  </goal>
  <goal name="id&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.25" steps="562358"/></proof>
  </goal>
  <goal name="id&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.24" steps="562384"/></proof>
  </goal>
  <goal name="id&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.19" steps="562418"/></proof>
  </goal>
  <goal name="id&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.24" steps="562417"/></proof>
  </goal>
  <goal name="id&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="3.15" steps="671721"/></proof>
  </goal>
  <goal name="id&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="3.17" steps="671008"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="swap&#39;vc" expl="VC for swap" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="swap&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.88" steps="526295"/></proof>
  </goal>
  <goal name="swap&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.72" steps="526314"/></proof>
  </goal>
  <goal name="swap&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.30" steps="562628"/></proof>
  </goal>
  <goal name="swap&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.52" steps="562670"/></proof>
  </goal>
  <goal name="swap&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.54" steps="562696"/></proof>
  </goal>
  <goal name="swap&#39;vc.5" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="swap&#39;vc.5.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="range&#39;def">
    <goal name="swap&#39;vc.5.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures2">
     <goal name="swap&#39;vc.5.0.0.0" expl="postcondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="swap&#39;vc.5.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="pps_swap&#39;def2">
       <goal name="swap&#39;vc.5.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="0.97" steps="632353"/></proof>
       </goal>
       <goal name="swap&#39;vc.5.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="0.98" steps="632353"/></proof>
       </goal>
       <goal name="swap&#39;vc.5.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="0.97" steps="632337"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="swap&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.40" steps="562722"/></proof>
  </goal>
  <goal name="swap&#39;vc.7" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="swap&#39;vc.7.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
    <goal name="swap&#39;vc.7.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures4">
     <goal name="swap&#39;vc.7.0.0.0" expl="postcondition" proved="true">
     <transf name="eliminate_if" proved="true" >
      <goal name="swap&#39;vc.7.0.0.0.0" expl="postcondition" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="swap&#39;vc.7.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="pps_swap&#39;def1">
        <goal name="swap&#39;vc.7.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="swap_int&#39;def">
         <goal name="swap&#39;vc.7.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="eliminate_epsilon" proved="true" >
          <goal name="swap&#39;vc.7.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <proof prover="8"><result status="valid" time="1.18" steps="696412"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="swap&#39;vc.7.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="0.98" steps="651970"/></proof>
         </goal>
         <goal name="swap&#39;vc.7.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="0.97" steps="651970"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="swap&#39;vc.7.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="0.92" steps="651970"/></proof>
        </goal>
        <goal name="swap&#39;vc.7.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="0.90" steps="651970"/></proof>
        </goal>
        <goal name="swap&#39;vc.7.0.0.0.0.0.3" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="0.89" steps="651954"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     <transf name="split_all_full" proved="true" >
      <goal name="swap&#39;vc.7.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="pps_swap&#39;def1">
       <goal name="swap&#39;vc.7.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="8"><result status="valid" time="2.08" steps="772314"/></proof>
       </goal>
       <goal name="swap&#39;vc.7.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.98" steps="632385"/></proof>
       </goal>
       <goal name="swap&#39;vc.7.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.85" steps="632385"/></proof>
       </goal>
       <goal name="swap&#39;vc.7.0.0.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.82" steps="632369"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="swap&#39;vc.8" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="swap&#39;vc.8.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
    <goal name="swap&#39;vc.8.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures5">
     <goal name="swap&#39;vc.8.0.0.0" expl="postcondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="swap&#39;vc.8.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="pps_swap&#39;def1">
       <goal name="swap&#39;vc.8.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="8"><result status="valid" time="2.28" steps="772404"/></proof>
       </goal>
       <goal name="swap&#39;vc.8.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.90" steps="665030"/></proof>
       </goal>
       <goal name="swap&#39;vc.8.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.87" steps="665030"/></proof>
       </goal>
       <goal name="swap&#39;vc.8.0.0.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="1.04" steps="665014"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="swap&#39;vc.9" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(i = 0)">
   <goal name="swap&#39;vc.9.0" expl="true case (postcondition)" proved="true">
   <proof prover="8"><result status="valid" time="1.27" steps="588266"/></proof>
   </goal>
   <goal name="swap&#39;vc.9.1" expl="false case (postcondition)" proved="true">
   <proof prover="10"><result status="valid" time="1.33" steps="63655"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="swap&#39;vc.10" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="swap&#39;vc.10.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_ind&#39;def">
    <goal name="swap&#39;vc.10.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures7">
     <goal name="swap&#39;vc.10.0.0.0" expl="postcondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="swap&#39;vc.10.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="pps_swap&#39;def">
       <goal name="swap&#39;vc.10.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.11" steps="665199"/></proof>
       </goal>
       <goal name="swap&#39;vc.10.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.11" steps="665199"/></proof>
       </goal>
       <goal name="swap&#39;vc.10.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.01" steps="665183"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="sequence&#39;vc" expl="VC for sequence" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sequence&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.74" steps="631114"/></proof>
  </goal>
  <goal name="sequence&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.76" steps="526757"/></proof>
  </goal>
  <goal name="sequence&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.34" steps="563368"/></proof>
  </goal>
  <goal name="sequence&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="3.40" steps="648678"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ancilla&#39;vc" expl="VC for ancilla" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ancilla&#39;vc.0" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(ancillable_pre (pre d) i)">
   <goal name="ancilla&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="ancilla&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="ancillable_pre&#39;spec">
     <goal name="ancilla&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="circ_to_pps&#39;spec2" arg2="in" arg3="Requires">
      <goal name="ancilla&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(width_pre (pre d) )" arg2="(width d)">
       <goal name="ancilla&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="destruct" proved="true" arg1="Requires">
        <goal name="ancilla&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="exists" proved="true" arg1="(fun x -&gt; (ket_sum_l (n_bvs (width d-i)) (fun z -&gt; get_ket x (bv_to_int z) *.. path_sem_target (bv_to_ket z))(width d-i)))">
         <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0" proved="true">
           <transf name="rewrite" proved="true" arg1="kronecker_ket_sum_distr_l_rew">
            <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0" proved="true">
            <transf name="replace" proved="true" arg1="(kronecker x (ket i 0))" arg2="(kronecker (ket_sum_l (n_bvs (width d-i)) (fun z -&gt; get_ket x (bv_to_int z)*.. bv_to_ket z)(width d-i)) (ket i 0))
">
             <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0" proved="true">
             <transf name="rewrite" proved="true" arg1="kronecker_ket_sum_distr_l_rew">
              <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0" proved="true">
              <transf name="rewrite" proved="true" arg1="pps_apply_sum">
               <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0" proved="true">
               <transf name="apply" proved="true" arg1="ket_sum_eq">
                <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="2.70" steps="808173"/></proof>
                </goal>
                <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="1.18" steps="690410"/></proof>
                </goal>
                <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
                 <transf name="compute_specified" proved="true" >
                  <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr">
                   <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr">
                    <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="pps_apply_scal">
                     <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
                     <proof prover="8"><result status="valid" time="3.03" steps="906668"/></proof>
                     </goal>
                     <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
                     <transf name="replace" proved="true" arg1="(h_width (circ_to_pps_pre (pre d)))" arg2="(width d - i+ i)">
                      <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                      <transf name="apply" proved="true" arg1="kronecker_ket_l">
                       <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                       <proof prover="8"><result status="valid" time="2.20" steps="824728"/></proof>
                       </goal>
                       <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.0.1.0.1" expl="apply premises" proved="true">
                       <proof prover="8"><result status="valid" time="2.23" steps="824729"/></proof>
                       </goal>
                       <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.0.1.0.2" expl="apply premises" proved="true">
                       <proof prover="8"><result status="valid" time="2.97" steps="899121"/></proof>
                       </goal>
                       <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.0.1.0.3" expl="apply premises" proved="true">
                       <proof prover="8"><result status="valid" time="2.97" steps="900066"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
                      <proof prover="8"><result status="valid" time="3.03" steps="900639"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="2.90" steps="855405"/></proof>
               </goal>
               <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
                 <transf name="replace" proved="true" arg1="(h_width (circ_to_pps_pre (pre d)))" arg2="(width d - i+ i)">
                  <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0" expl="rewrite premises" proved="true">
                  <transf name="apply" proved="true" arg1="kronecker_ket_l">
                   <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.29" steps="824728"/></proof>
                   </goal>
                   <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.1" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.28" steps="824729"/></proof>
                   </goal>
                   <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="3.10" steps="901729"/></proof>
                   </goal>
                   <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.3" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.94" steps="900066"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.1" expl="equality hypothesis" proved="true">
                  <proof prover="8"><result status="valid" time="2.95" steps="900639"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="2.79" steps="814541"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="4.21" steps="952609"/></proof>
              </goal>
              <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="2.71" steps="805091"/></proof>
              </goal>
              <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="2.90" steps="855409"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
             <transf name="apply" proved="true" arg1="kronecker_eq">
              <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
              <transf name="apply" proved="true" arg1="ket_decomp_">
               <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="2.01" steps="730767"/></proof>
               </goal>
               <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="2.10" steps="731656"/></proof>
               </goal>
               <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.1.0.2" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="2.66" steps="804326"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="1.03" steps="690410"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
              <transf name="apply" proved="true" arg1="scalar_ket_l">
               <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
               <transf name="assert" proved="true" arg1="(is_a_ket_l (pps_apply (circ_to_pps_pre (pre d)) (kronecker (bv_to_ket e) (ket i 0))) (width d))
">
                <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
                <transf name="replace" proved="true" arg1="(width d)" arg2="(h_width (circ_to_pps_pre (pre d)) )">
                 <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
                 <transf name="apply" proved="true" arg1="pps_apply&#39;spec">
                  <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="replace" proved="true" arg1="(h_width (circ_to_pps_pre (pre d)))" arg2="(width d - i+ i)">
                   <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="apply" proved="true" arg1="kronecker_ket_l">
                    <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.30" steps="824728"/></proof>
                    </goal>
                    <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.29" steps="824729"/></proof>
                    </goal>
                    <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.61" steps="899121"/></proof>
                    </goal>
                    <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.61" steps="900066"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                   <proof prover="8"><result status="valid" time="2.67" steps="900639"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
                 <proof prover="8"><result status="valid" time="2.66" steps="900614"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="Requires" arg2="in" arg3="h">
                 <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1.0" expl="apply premises" proved="true">
                 <transf name="apply" proved="true" arg1="set_is_a_ket_l">
                  <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1.0.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.27" steps="824758"/></proof>
                  </goal>
                  <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1.0.1" expl="apply premises" proved="true">
                  <transf name="assert" proved="true" arg1="(columns (kronecker (path_sem_target @ bv_to_ket e) (ket i 0)) = 1)
">
                   <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1.0.1.0" expl="asserted formula" proved="true">
                   <proof prover="8"><result status="valid" time="2.38" steps="829094"/></proof>
                   </goal>
                   <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1.0.1.1" expl="apply premises" proved="true">
                   <proof prover="0"><result status="valid" time="1.03"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1.0.2" expl="apply premises" proved="true">
                  <transf name="assert" proved="true" arg1="(rows (kronecker (path_sem_target @ bv_to_ket e) (ket i 0)) = power  2 (width d - i) * power 2 i)">
                   <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1.0.2.0" expl="asserted formula" proved="true">
                   <transf name="replace" proved="true" arg1="(power 2 (width d - i) * power 2 i)" arg2="(power 2 (width d))">
                    <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1.0.2.0.0" expl="asserted formula" proved="true">
                    <proof prover="8"><result status="valid" time="2.39" steps="829090"/></proof>
                    </goal>
                    <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1.0.2.0.1" expl="equality hypothesis" proved="true">
                    <proof prover="10"><result status="valid" time="1.65" steps="70968"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1.0.2.1" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="kronecker_rows" arg2="in" arg3="h">
                    <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1.0.2.1.0" expl="apply premises" proved="true">
                    <transf name="assert" proved="true" arg1="(forall a b c. 0&lt;a -&gt; 0&lt; c -&gt; a* c = b*c -&gt; a = b)">
                     <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1.0.2.1.0.0" expl="asserted formula" proved="true">
                     <proof prover="0"><result status="valid" time="1.26"/></proof>
                     </goal>
                     <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1.0.2.1.0.1" expl="apply premises" proved="true">
                     <transf name="instantiate" proved="true" arg1="h" arg2="(rows (path_sem_target @ (bv_to_ket e))),(power 2 (width d - i)),(power 2 (width d))">
                      <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1.0.2.1.0.1.0" expl="apply premises" proved="true">
                      <transf name="instantiate" proved="true" arg1="h" arg2="(rows (path_sem_target @ (bv_to_ket e))),(power 2 (width d - i)),(power 2 i)">
                       <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1.0.2.1.0.1.0.0" expl="apply premises" proved="true">
                       <transf name="apply" proved="true" arg1="Hinst">
                        <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1.0.2.1.0.1.0.0.0" expl="apply premises" proved="true">
                        <proof prover="8"><result status="valid" time="3.08" steps="911650"/></proof>
                        </goal>
                        <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1.0.2.1.0.1.0.0.1" expl="apply premises" proved="true">
                        <proof prover="8"><result status="valid" time="3.16" steps="910562"/></proof>
                        </goal>
                        <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1.0.2.1.0.1.0.0.2" expl="apply premises" proved="true">
                        <transf name="replace" proved="true" arg1="(rows (path_sem_target @ bv_to_ket e) * power 2 i)" arg2="(rows (path_sem_target @ bv_to_ket e) * rows (ket i 0))">
                         <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1.0.2.1.0.1.0.0.2.0" expl="apply premises" proved="true">
                         <transf name="rewrite" proved="true" arg1="h1">
                          <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1.0.2.1.0.1.0.0.2.0.0" expl="apply premises" proved="true">
                          <proof prover="8"><result status="valid" time="1.20" steps="782128"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1.0.2.1.0.1.0.0.2.1" expl="equality hypothesis" proved="true">
                         <transf name="apply" proved="true" arg1="mult_eq">
                          <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1.0.2.1.0.1.0.0.2.1.0" expl="apply premises" proved="true">
                          <proof prover="8"><result status="valid" time="1.41" steps="782128"/></proof>
                          </goal>
                          <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1.0.2.1.0.1.0.0.2.1.1" expl="apply premises" proved="true">
                          <proof prover="8"><result status="valid" time="2.69" steps="912595"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1.1" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.61" steps="901729"/></proof>
                 </goal>
                 <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1.2" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.05" steps="825651"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="2.63" steps="805091"/></proof>
            </goal>
            <goal name="ancilla&#39;vc.0.0.0.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="2.83" steps="855409"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="ancilla&#39;vc.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="8"><result status="valid" time="2.10" steps="731733"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ancilla&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="2.33" steps="696350"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ancilla&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.99" steps="589151"/></proof>
  </goal>
  <goal name="ancilla&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.61" steps="626937"/></proof>
  </goal>
  <goal name="ancilla&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="3.74" steps="714117"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ancilla_pre_cond&#39;vc" expl="VC for ancilla_pre_cond" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ancilla_pre_cond&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(ancillable_pre e i)">
   <goal name="ancilla_pre_cond&#39;vc.0.0" expl="asserted formula" proved="true">
   <proof prover="8"><result status="valid" time="2.07" steps="631608"/></proof>
   </goal>
   <goal name="ancilla_pre_cond&#39;vc.0.1" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="ancilla_pre_cond&#39;vc.0.1.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(width d)" arg2="(width_pre e - i)">
     <goal name="ancilla_pre_cond&#39;vc.0.1.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="ancillable_pre&#39;spec1">
      <goal name="ancilla_pre_cond&#39;vc.0.1.0.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="0.94" steps="619532"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="ancilla_pre_cond&#39;vc.0.1.0.1" expl="equality hypothesis" proved="true">
     <proof prover="8"><result status="valid" time="2.44" steps="732123"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="parallel&#39;vc" expl="VC for parallel" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="parallel&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.10" steps="631886"/></proof>
  </goal>
  <goal name="parallel&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.84" steps="527433"/></proof>
  </goal>
  <goal name="parallel&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.38" steps="564046"/></proof>
  </goal>
  <goal name="parallel&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="3.49" steps="649829"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="circ_to_pps_width&#39;vc" expl="VC for circ_to_pps_width" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="circ_to_pps_width&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="circ_to_pps_width&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.85" steps="659612"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="circ_to_pps_range&#39;vc" expl="VC for circ_to_pps_range" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="circ_to_pps_range&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.33" steps="564222"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="circ_to_pps_basis_ket&#39;vc" expl="VC for circ_to_pps_basis_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="circ_to_pps_basis_ket&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.83" steps="649534"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="circ_to_pps_basis_ket_gen&#39;vc" expl="VC for circ_to_pps_basis_ket_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="circ_to_pps_basis_ket_gen&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="2.46" steps="745094"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="circ_to_pps_angle&#39;vc" expl="VC for circ_to_pps_angle" proved="true">
 <proof prover="8"><result status="valid" time="1.46" steps="640570"/></proof>
 </goal>
 <goal name="path_sem_basis&#39;vc" expl="VC for path_sem_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_basis&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.85" steps="552845"/></proof>
  </goal>
  <goal name="path_sem_basis&#39;vc.1" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="H2">
   <goal name="path_sem_basis&#39;vc.1.0" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="2.55" steps="833892"/></proof>
   </goal>
   <goal name="path_sem_basis&#39;vc.1.1" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="2.55" steps="835438"/></proof>
   </goal>
   <goal name="path_sem_basis&#39;vc.1.2" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.13" steps="712374"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="path_sem_basis&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.93" steps="755268"/></proof>
  </goal>
  <goal name="path_sem_basis&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.14" steps="715615"/></proof>
  </goal>
  <goal name="path_sem_basis&#39;vc.4" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.15" steps="689916"/></proof>
  </goal>
  <goal name="path_sem_basis&#39;vc.5" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.06" steps="802368"/></proof>
  </goal>
  <goal name="path_sem_basis&#39;vc.6" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.37" steps="793653"/></proof>
  </goal>
  <goal name="path_sem_basis&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="2.74" steps="930600"/></proof>
  </goal>
  <goal name="path_sem_basis&#39;vc.8" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="path_sem_basis&#39;vc.8.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result&#39;def">
    <goal name="path_sem_basis&#39;vc.8.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="pps_apply_basis&#39;def">
     <goal name="path_sem_basis&#39;vc.8.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="scalar_eq_gen">
      <goal name="path_sem_basis&#39;vc.8.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
       <goal name="path_sem_basis&#39;vc.8.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="2.16" steps="835375"/></proof>
       </goal>
       <goal name="path_sem_basis&#39;vc.8.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="2.28" steps="843602"/></proof>
       </goal>
       <goal name="path_sem_basis&#39;vc.8.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.31" steps="792322"/></proof>
       </goal>
       <goal name="path_sem_basis&#39;vc.8.0.0.0.0.3" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="path_sem_basis&#39;vc.8.0.0.0.0.3.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="path_sem_basis&#39;vc.8.0.0.0.0.3.0.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="2.40" steps="893631"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="path_sem_basis&#39;vc.8.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="2.05" steps="843602"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="path_sem_basis&#39;vc.8.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="2.73" steps="928378"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem&#39;vc" expl="VC for path_sem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.29" steps="593185"/></proof>
  </goal>
  <goal name="path_sem&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.84" steps="556362"/></proof>
  </goal>
  <goal name="path_sem&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.36" steps="620362"/></proof>
  </goal>
  <goal name="path_sem&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.71" steps="688826"/></proof>
  </goal>
  <goal name="path_sem&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.09" steps="682200"/></proof>
  </goal>
  <goal name="path_sem&#39;vc.5" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures2">
   <goal name="path_sem&#39;vc.5.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="pps_apply&#39;def">
    <goal name="path_sem&#39;vc.5.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_l_to_mat_sum">
     <goal name="path_sem&#39;vc.5.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="path_sem&#39;vc.5.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="mat_sum_eq_gen">
       <goal name="path_sem&#39;vc.5.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.11" steps="682205"/></proof>
       </goal>
       <goal name="path_sem&#39;vc.5.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.80" steps="722631"/></proof>
       </goal>
       <goal name="path_sem&#39;vc.5.0.0.0.0.2" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="path_sem&#39;vc.5.0.0.0.0.2.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="path_sem&#39;vc.5.0.0.0.0.2.0.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="path_sem&#39;vc.5.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="3.78" steps="833996"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="path_sem&#39;vc.5.0.0.0.0.2.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="path_sem&#39;vc.5.0.0.0.0.2.1.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="3.72" steps="833496"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       <transf name="apply" proved="true" arg1="set_constant_size_exists">
        <goal name="path_sem&#39;vc.5.0.0.0.0.2.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="path_sem&#39;vc.5.0.0.0.0.2.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="path_sem&#39;vc.5.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
          <transf name="exists" proved="true" arg1="(power 2 (width c))">
           <goal name="path_sem&#39;vc.5.0.0.0.0.2.0.0.0.0" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="path_sem&#39;vc.5.0.0.0.0.2.0.0.0.0.0" proved="true">
            <proof prover="8"><result status="valid" time="3.70" steps="823717"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="path_sem&#39;vc.5.0.0.0.0.2.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="path_sem&#39;vc.5.0.0.0.0.2.1.0" expl="apply premises" proved="true">
         <transf name="exists" proved="true" arg1="1">
          <goal name="path_sem&#39;vc.5.0.0.0.0.2.1.0.0" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="path_sem&#39;vc.5.0.0.0.0.2.1.0.0.0" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="path_sem&#39;vc.5.0.0.0.0.2.1.0.0.0.0" proved="true">
            <proof prover="8"><result status="valid" time="3.68" steps="823753"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="path_sem&#39;vc.5.0.0.0.0.3" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="path_sem&#39;vc.5.0.0.0.0.3.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="path_sem&#39;vc.5.0.0.0.0.3.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_equal_ket">
          <goal name="path_sem&#39;vc.5.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="3.78" steps="823664"/></proof>
          </goal>
          <goal name="path_sem&#39;vc.5.0.0.0.0.3.0.0.1" expl="apply premises" proved="true">
          <transf name="assert" proved="true" arg1="(is_a_ket_l
  (make_ket (h_width (circ_to_pps c))
   (fun (j:int) -&gt;
     get2
     (if length1 a = h_width (circ_to_pps c)
      then get_ket x (bv_to_int a) *.. pps_apply_basis (circ_to_pps c) a
      else x)
     j 0)) (width c))">
           <goal name="path_sem&#39;vc.5.0.0.0.0.3.0.0.1.0" expl="asserted formula" proved="true">
           <proof prover="8"><result status="valid" time="2.58" steps="846003"/></proof>
           </goal>
           <goal name="path_sem&#39;vc.5.0.0.0.0.3.0.0.1.1" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="2.69" steps="848225"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="path_sem&#39;vc.5.0.0.0.0.3.0.0.2" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="3.80" steps="866408"/></proof>
          </goal>
          <goal name="path_sem&#39;vc.5.0.0.0.0.3.0.0.3" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="path_sem&#39;vc.5.0.0.0.0.3.0.0.3.0" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="4.63" steps="875749"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="path_sem&#39;vc.5.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.81" steps="722647"/></proof>
     </goal>
     <goal name="path_sem&#39;vc.5.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.59" steps="722661"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="path_sem&#39;vc.5.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.63" steps="722627"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="path_sem&#39;vc.5.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="1.07" steps="682205"/></proof>
   </goal>
   <goal name="path_sem&#39;vc.5.2" expl="rewrite premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="path_sem&#39;vc.5.2.0" expl="rewrite premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="path_sem&#39;vc.5.2.0.0" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="2.32" steps="805293"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sem_to_path&#39;vc" expl="VC for mat_sem_to_path" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sem_to_path&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="2.03" steps="633487"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_to_mat&#39;vc" expl="VC for path_sem_to_mat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_to_mat&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.33" steps="565382"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="sem&#39;vc" expl="VC for sem" proved="true">
 <proof prover="8"><result status="valid" time="0.79" steps="528841"/></proof>
 </goal>
 <goal name="path_sem_to_sem&#39;vc" expl="VC for path_sem_to_sem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_to_sem&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="3.14" steps="645531"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="sem_to_path_sem&#39;vc" expl="VC for sem_to_path_sem" proved="true">
 <proof prover="7"><result status="valid" time="1.78" steps="6817753"/></proof>
 </goal>
 <goal name="path_sem_basis_apply&#39;vc" expl="VC for path_sem_basis_apply" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_basis_apply&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.33" steps="565743"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_basis_value&#39;vc" expl="VC for path_sem_basis_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_basis_value&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="path_sem_basis_value&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="path_sem_basis&#39;def">
    <goal name="path_sem_basis_value&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
    <goal name="path_sem_basis_value&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.82" steps="528933"/></proof>
    </goal>
    <goal name="path_sem_basis_value&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.88" steps="528933"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_value_for_basis&#39;vc" expl="VC for path_sem_value_for_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_value_for_basis&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="path_sem&#39;def">
   <goal name="path_sem_value_for_basis&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="ket_sum_l_null_but_maybe_one_elt_" arg2="(fun (y:bitvec) -&gt;
    if length1 y = width c
    then get_ket x (bv_to_int y) *.. path_sem_basis c (bv_to_ket y) else x),(n_bvs (width c)),(ket_to_bv x)">
    <goal name="path_sem_value_for_basis&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Hinst">
     <goal name="path_sem_value_for_basis&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="path_sem_value_for_basis&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="path_sem_value_for_basis&#39;vc.0.0.0.0.0.0" expl="VC for path_sem_value_for_basis" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="path_sem_value_for_basis&#39;vc.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="scalar_c_one_gen">
         <goal name="path_sem_value_for_basis&#39;vc.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="path_sem_basis&#39;def">
          <goal name="path_sem_value_for_basis&#39;vc.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="path_sem_value_for_basis&#39;vc.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <transf name="rewrite" proved="true" arg1="ket_to_bv_to_ket">
            <goal name="path_sem_value_for_basis&#39;vc.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
            <transf name="compute_specified" proved="true" >
            </transf>
            </goal>
            <goal name="path_sem_value_for_basis&#39;vc.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="0.79" steps="539261"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="path_sem_value_for_basis&#39;vc.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="1.36" steps="576537"/></proof>
          </goal>
          <goal name="path_sem_value_for_basis&#39;vc.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="1.36" steps="576521"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="path_sem_value_for_basis&#39;vc.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.71"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="path_sem_value_for_basis&#39;vc.0.0.0.0.0.0.1" expl="postcondition" proved="true">
        <proof prover="8"><result status="valid" time="2.32" steps="709443"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="path_sem_value_for_basis&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.83" steps="636425"/></proof>
     </goal>
     <goal name="path_sem_value_for_basis&#39;vc.0.0.0.2" expl="rewrite premises" proved="true">
     <transf name="assert" proved="true" arg1="(0&lt; width c)">
      <goal name="path_sem_value_for_basis&#39;vc.0.0.0.2.0" expl="asserted formula" proved="true">
      <proof prover="8"><result status="valid" time="2.04" steps="636287"/></proof>
      </goal>
      <goal name="path_sem_value_for_basis&#39;vc.0.0.0.2.1" expl="rewrite premises" proved="true">
      <transf name="rewrite" proved="true" arg1="n_bvs_card">
       <goal name="path_sem_value_for_basis&#39;vc.0.0.0.2.1.0" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="1.75" steps="637635"/></proof>
       </goal>
       <goal name="path_sem_value_for_basis&#39;vc.0.0.0.2.1.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="1.25" steps="566679"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="path_sem_value_for_basis&#39;vc.0.0.0.3" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="2.20" steps="714002"/></proof>
     </goal>
     <goal name="path_sem_value_for_basis&#39;vc.0.0.0.4" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="path_sem_value_for_basis&#39;vc.0.0.0.4.0" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="2.31" steps="720094"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="path_sem_value_for_basis&#39;vc.0.0.0.5" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="path_sem_value_for_basis&#39;vc.0.0.0.5.0" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="path_sem_value_for_basis&#39;vc.0.0.0.5.0.0" expl="rewrite premises" proved="true">
       <transf name="eliminate_if" proved="true" >
        <goal name="path_sem_value_for_basis&#39;vc.0.0.0.5.0.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="path_sem_value_for_basis&#39;vc.0.0.0.5.0.0.0.0" expl="rewrite premises" proved="true">
         <transf name="replace" proved="true" arg1="(get_ket x (bv_to_int e&#39;))" arg2="c_zero">
          <goal name="path_sem_value_for_basis&#39;vc.0.0.0.5.0.0.0.0.0" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="2.45" steps="734715"/></proof>
          </goal>
          <goal name="path_sem_value_for_basis&#39;vc.0.0.0.5.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <transf name="replace" proved="true" arg1="x" arg2="(ket  (width c) (ket_to_int x))">
           <goal name="path_sem_value_for_basis&#39;vc.0.0.0.5.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
           <transf name="rewrite" proved="true" arg1="get__ket_value">
            <goal name="path_sem_value_for_basis&#39;vc.0.0.0.5.0.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
            <transf name="case" proved="true" arg1="((bv_to_int e&#39;) = (ket_to_int x) )">
             <goal name="path_sem_value_for_basis&#39;vc.0.0.0.5.0.0.0.0.1.0.0.0" expl="true case (equality hypothesis)" proved="true">
             <transf name="replace" proved="true" arg1="e&#39;" arg2="(int_to_bv (bv_to_int e&#39;) (width c))" arg3="in" arg4="H3">
              <goal name="path_sem_value_for_basis&#39;vc.0.0.0.5.0.0.0.0.1.0.0.0.0" expl="true case (equality hypothesis)" proved="true">
              <proof prover="0"><result status="valid" time="0.86"/></proof>
              </goal>
              <goal name="path_sem_value_for_basis&#39;vc.0.0.0.5.0.0.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
              <proof prover="8"><result status="valid" time="2.29" steps="727371"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="path_sem_value_for_basis&#39;vc.0.0.0.5.0.0.0.0.1.0.0.1" expl="false case (equality hypothesis)" proved="true">
             <proof prover="8"><result status="valid" time="1.58" steps="653905"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="path_sem_value_for_basis&#39;vc.0.0.0.5.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="2.28" steps="726906"/></proof>
            </goal>
            <goal name="path_sem_value_for_basis&#39;vc.0.0.0.5.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
            <proof prover="0"><result status="valid" time="0.85"/></proof>
            </goal>
            <goal name="path_sem_value_for_basis&#39;vc.0.0.0.5.0.0.0.0.1.0.3" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="2.36" steps="727148"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="path_sem_value_for_basis&#39;vc.0.0.0.5.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
           <proof prover="0"><result status="valid" time="0.86"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="path_sem_value_for_basis&#39;vc.0.0.0.5.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="2.36" steps="728898"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="path_sem_value_for_basis&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.75" steps="529437"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="apply_path_sem_basis&#39;vc" expl="VC for apply_path_sem_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="apply_path_sem_basis&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.38" steps="566430"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_apply&#39;vc" expl="VC for path_sem_apply" proved="true">
 <proof prover="8"><result status="valid" time="1.37" steps="566560"/></proof>
 </goal>
 <goal name="apply_path_sem&#39;vc" expl="VC for apply_path_sem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="apply_path_sem&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="path_sem_apply">
   <goal name="apply_path_sem&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="0.79" steps="529877"/></proof>
   </goal>
   <goal name="apply_path_sem&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.80" steps="529879"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ancilla_pre_cond_path_sem&#39;vc" expl="VC for ancilla_pre_cond_path_sem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ancilla_pre_cond_path_sem&#39;vc.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="ancilla_pre_cond" arg2="d,e,i">
   <goal name="ancilla_pre_cond_path_sem&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="Hinst">
    <goal name="ancilla_pre_cond_path_sem&#39;vc.0.0.0" expl="destruct premise" proved="true">
    <proof prover="8"><result status="valid" time="0.85" steps="529959"/></proof>
    </goal>
    <goal name="ancilla_pre_cond_path_sem&#39;vc.0.0.1" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="ancilla_pre_cond_path_sem&#39;vc.0.0.1.0" expl="postcondition" proved="true">
     <transf name="exists" proved="true" arg1="path_sem_target">
      <goal name="ancilla_pre_cond_path_sem&#39;vc.0.0.1.0.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="ancilla_pre_cond_path_sem&#39;vc.0.0.1.0.0.0" proved="true">
       <transf name="rewrite" proved="true" arg1="path_sem_apply">
        <goal name="ancilla_pre_cond_path_sem&#39;vc.0.0.1.0.0.0.0" proved="true">
        <transf name="eliminate_definition" proved="true" >
         <goal name="ancilla_pre_cond_path_sem&#39;vc.0.0.1.0.0.0.0.0" proved="true">
         <proof prover="8"><result status="valid" time="2.25" steps="702323"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="ancilla_pre_cond_path_sem&#39;vc.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
        <transf name="replace" proved="true" arg1="(width (to_qc e))" arg2="(width d  + i)">
         <goal name="ancilla_pre_cond_path_sem&#39;vc.0.0.1.0.0.0.1.0" expl="rewrite premises" proved="true">
         <transf name="apply" proved="true" arg1="kronecker_ket_l">
          <goal name="ancilla_pre_cond_path_sem&#39;vc.0.0.1.0.0.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.95" steps="634817"/></proof>
          </goal>
          <goal name="ancilla_pre_cond_path_sem&#39;vc.0.0.1.0.0.0.1.0.1" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="2.05" steps="635750"/></proof>
          </goal>
          <goal name="ancilla_pre_cond_path_sem&#39;vc.0.0.1.0.0.0.1.0.2" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="0.84" steps="530080"/></proof>
          </goal>
          <goal name="ancilla_pre_cond_path_sem&#39;vc.0.0.1.0.0.0.1.0.3" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.95" steps="636228"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="ancilla_pre_cond_path_sem&#39;vc.0.0.1.0.0.0.1.1" expl="equality hypothesis" proved="true">
         <proof prover="8"><result status="valid" time="1.92" steps="635996"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ancilla_pre_path_sem&#39;vc" expl="VC for ancilla_pre_path_sem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ancilla_pre_path_sem&#39;vc.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="
ancilla_pre_cond_path_sem" arg2="d,e,i">
   <goal name="ancilla_pre_path_sem&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="d" arg2="(ancilla (to_qc e) i)">
    <goal name="ancilla_pre_path_sem&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="ancilla&#39;spec1">
      <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="(path_sem (to_qc (Ancillas (pre (to_qc e)) i)) x)" arg2="(pps_apply (pps_ancs (circ_to_pps (to_qc e)) i) x)
">
       <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.0.0.0" expl="destruct premise" proved="true">
        <proof prover="8"><result status="valid" time="0.97" steps="622576"/></proof>
        </goal>
        <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.0.0.1" expl="postcondition" proved="true">
        <transf name="destruct" proved="true" arg1="Hinst">
         <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.0.0.1.0" expl="postcondition" proved="true">
         <transf name="instantiate" proved="true" arg1="pps_apply_anc" arg2="(circ_to_pps (to_qc e)),path_sem_target,x,i">
          <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.0.0.1.0.0" expl="postcondition" proved="true">
          <transf name="rewrite" proved="true" arg1="Hinst">
           <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.0.0.1.0.0.0" expl="postcondition" proved="true">
           <proof prover="8"><result status="valid" time="2.15" steps="735877"/></proof>
           </goal>
           <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="2.47" steps="738583"/></proof>
           </goal>
           <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="2.49" steps="739468"/></proof>
           </goal>
           <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.0.0.1.0.0.3" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="(h_width (circ_to_pps (to_qc e)) -i)" arg2="(width d)">
            <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.0.0.1.0.0.3.0" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="0.94" steps="622897"/></proof>
            </goal>
            <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.0.0.1.0.0.3.1" expl="equality hypothesis" proved="true">
            <proof prover="8"><result status="valid" time="2.13" steps="739561"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.0.0.1.0.0.4" expl="rewrite premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.0.0.1.0.0.4.0" expl="rewrite premises" proved="true">
            <transf name="rewrite" proved="true" arg1="apply_path_sem">
             <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.0.0.1.0.0.4.0.0" expl="rewrite premises" proved="true">
             <transf name="apply" proved="true" arg1="Hinst1">
              <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.0.0.1.0.0.4.0.0.0" expl="apply premises" proved="true">
              <transf name="replace" proved="true" arg1="(h_width (circ_to_pps (to_qc e)) -i)" arg2="(width d)" arg3="in" arg4="H">
               <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.0.0.1.0.0.4.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="1.10" steps="622909"/></proof>
               </goal>
               <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.0.0.1.0.0.4.0.0.0.1" expl="equality hypothesis" proved="true">
               <proof prover="8"><result status="valid" time="2.42" steps="741065"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.0.0.1.0.0.4.0.1" expl="rewrite premises" proved="true">
             <transf name="replace" proved="true" arg1="(width (to_qc e))" arg2="(width d + i)">
              <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.0.0.1.0.0.4.0.1.0" expl="rewrite premises" proved="true">
              <transf name="apply" proved="true" arg1="kronecker_ket_l">
               <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.0.0.1.0.0.4.0.1.0.0" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="2.39" steps="739605"/></proof>
               </goal>
               <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.0.0.1.0.0.4.0.1.0.1" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="2.12" steps="740086"/></proof>
               </goal>
               <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.0.0.1.0.0.4.0.1.0.2" expl="apply premises" proved="true">
               <transf name="replace" proved="true" arg1="(h_width (circ_to_pps (to_qc e)) -i)" arg2="(width d)" arg3="in" arg4="H">
                <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.0.0.1.0.0.4.0.1.0.2.0" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="1.13" steps="622909"/></proof>
                </goal>
                <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.0.0.1.0.0.4.0.1.0.2.1" expl="equality hypothesis" proved="true">
                <proof prover="8"><result status="valid" time="2.15" steps="741065"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.0.0.1.0.0.4.0.1.0.3" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="2.16" steps="741642"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.0.0.1.0.0.4.0.1.1" expl="equality hypothesis" proved="true">
              <proof prover="8"><result status="valid" time="2.16" steps="741094"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.0.0.1.0.0.5" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="(h_width (circ_to_pps (to_qc e)) -i)" arg2="(width d)">
            <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.0.0.1.0.0.5.0" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="1.12" steps="622897"/></proof>
            </goal>
            <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.0.0.1.0.0.5.1" expl="equality hypothesis" proved="true">
            <proof prover="8"><result status="valid" time="2.15" steps="739561"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="8"><result status="valid" time="3.59" steps="754214"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="2.40" steps="735199"/></proof>
      </goal>
      <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="2.35" steps="736116"/></proof>
      </goal>
      <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.3" expl="rewrite premises" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.3.0" expl="destruct premise" proved="true">
       <proof prover="8"><result status="valid" time="1.07" steps="622576"/></proof>
       </goal>
       <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.3.1" expl="rewrite premises" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.3.1.0" expl="rewrite premises" proved="true">
        <transf name="exists" proved="true" arg1="path_sem_target">
         <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.3.1.0.0" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.3.1.0.0.0" proved="true">
          <transf name="rewrite" proved="true" arg1="apply_path_sem">
           <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.3.1.0.0.0.0" proved="true">
           <transf name="apply" proved="true" arg1="Hinst">
            <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.3.1.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(width d)" arg2="( (width (to_qc e) - i))">
             <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.3.1.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.11" steps="622716"/></proof>
             </goal>
             <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.3.1.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
             <proof prover="8"><result status="valid" time="2.31" steps="737632"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.3.1.0.0.0.1" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="(width (to_qc e))" arg2="(width (to_qc e) -i+i)">
            <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.3.1.0.0.0.1.0" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="kronecker_ket_l">
             <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.3.1.0.0.0.1.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="2.30" steps="735987"/></proof>
             </goal>
             <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.3.1.0.0.0.1.0.1" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="2.23" steps="737548"/></proof>
             </goal>
             <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.3.1.0.0.0.1.0.2" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="0.86" steps="622716"/></proof>
             </goal>
             <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.3.1.0.0.0.1.0.3" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="2.35" steps="738123"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="ancilla_pre_path_sem&#39;vc.0.0.0.0.3.1.0.0.0.1.1" expl="equality hypothesis" proved="true">
            <proof prover="8"><result status="valid" time="1.09" steps="622730"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="ancilla_pre_path_sem&#39;vc.0.0.1" expl="equality hypothesis" proved="true">
    <transf name="replace" proved="true" arg1="d" arg2="(to_qc (pre d))">
     <goal name="ancilla_pre_path_sem&#39;vc.0.0.1.0" expl="equality hypothesis" proved="true">
     <transf name="replace" proved="true" arg1="(ancilla (to_qc e) i)" arg2="(to_qc (pre (ancilla (to_qc e) i)))">
      <goal name="ancilla_pre_path_sem&#39;vc.0.0.1.0.0" expl="equality hypothesis" proved="true">
      <transf name="rewrite" proved="true" arg1="Requires">
       <goal name="ancilla_pre_path_sem&#39;vc.0.0.1.0.0.0" expl="equality hypothesis" proved="true">
       <transf name="assert" proved="true" arg1="( (Ancillas e i) =  (pre (ancilla (to_qc e) i)))">
        <goal name="ancilla_pre_path_sem&#39;vc.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="ancilla_pre_path_sem&#39;vc.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="rewrite" proved="true" arg1="ancilla&#39;spec2">
          <goal name="ancilla_pre_path_sem&#39;vc.0.0.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
          <proof prover="8"><result status="valid" time="2.34" steps="737007"/></proof>
          </goal>
          <goal name="ancilla_pre_path_sem&#39;vc.0.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="2.35" steps="735199"/></proof>
          </goal>
          <goal name="ancilla_pre_path_sem&#39;vc.0.0.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="2.40" steps="736116"/></proof>
          </goal>
          <goal name="ancilla_pre_path_sem&#39;vc.0.0.1.0.0.0.0.0.3" expl="rewrite premises" proved="true">
          <transf name="destruct" proved="true" arg1="Hinst">
           <goal name="ancilla_pre_path_sem&#39;vc.0.0.1.0.0.0.0.0.3.0" expl="destruct premise" proved="true">
           <proof prover="8"><result status="valid" time="0.85" steps="622576"/></proof>
           </goal>
           <goal name="ancilla_pre_path_sem&#39;vc.0.0.1.0.0.0.0.0.3.1" expl="rewrite premises" proved="true">
           <transf name="destruct" proved="true" arg1="Hinst">
            <goal name="ancilla_pre_path_sem&#39;vc.0.0.1.0.0.0.0.0.3.1.0" expl="rewrite premises" proved="true">
            <transf name="exists" proved="true" arg1="path_sem_target">
             <goal name="ancilla_pre_path_sem&#39;vc.0.0.1.0.0.0.0.0.3.1.0.0" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="ancilla_pre_path_sem&#39;vc.0.0.1.0.0.0.0.0.3.1.0.0.0" proved="true">
              <transf name="rewrite" proved="true" arg1="apply_path_sem">
               <goal name="ancilla_pre_path_sem&#39;vc.0.0.1.0.0.0.0.0.3.1.0.0.0.0" proved="true">
               <transf name="apply" proved="true" arg1="Hinst">
                <goal name="ancilla_pre_path_sem&#39;vc.0.0.1.0.0.0.0.0.3.1.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="replace" proved="true" arg1="(width d)" arg2="( (width (to_qc e) - i))">
                 <goal name="ancilla_pre_path_sem&#39;vc.0.0.1.0.0.0.0.0.3.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="0.92" steps="622716"/></proof>
                 </goal>
                 <goal name="ancilla_pre_path_sem&#39;vc.0.0.1.0.0.0.0.0.3.1.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                 <proof prover="8"><result status="valid" time="2.37" steps="737632"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="ancilla_pre_path_sem&#39;vc.0.0.1.0.0.0.0.0.3.1.0.0.0.1" expl="rewrite premises" proved="true">
               <transf name="replace" proved="true" arg1="(width (to_qc e))" arg2="(width (to_qc e) -i+i)">
                <goal name="ancilla_pre_path_sem&#39;vc.0.0.1.0.0.0.0.0.3.1.0.0.0.1.0" expl="rewrite premises" proved="true">
                <transf name="apply" proved="true" arg1="kronecker_ket_l">
                 <goal name="ancilla_pre_path_sem&#39;vc.0.0.1.0.0.0.0.0.3.1.0.0.0.1.0.0" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.35" steps="735987"/></proof>
                 </goal>
                 <goal name="ancilla_pre_path_sem&#39;vc.0.0.1.0.0.0.0.0.3.1.0.0.0.1.0.1" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.39" steps="737548"/></proof>
                 </goal>
                 <goal name="ancilla_pre_path_sem&#39;vc.0.0.1.0.0.0.0.0.3.1.0.0.0.1.0.2" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.04" steps="622716"/></proof>
                 </goal>
                 <goal name="ancilla_pre_path_sem&#39;vc.0.0.1.0.0.0.0.0.3.1.0.0.0.1.0.3" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.36" steps="738123"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="ancilla_pre_path_sem&#39;vc.0.0.1.0.0.0.0.0.3.1.0.0.0.1.1" expl="equality hypothesis" proved="true">
                <proof prover="8"><result status="valid" time="1.06" steps="622730"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="ancilla_pre_path_sem&#39;vc.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="8"><result status="valid" time="1.45" steps="566673"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="ancilla_pre_path_sem&#39;vc.0.0.1.0.1" expl="equality hypothesis" proved="true">
      <proof prover="8"><result status="valid" time="1.52" steps="567012"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="ancilla_pre_path_sem&#39;vc.0.0.1.1" expl="equality hypothesis" proved="true">
     <proof prover="8"><result status="valid" time="1.48" steps="567001"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="pre_ancilla&#39;vc" expl="VC for pre_ancilla" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pre_ancilla&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="d" arg2="(to_qc (pre d))">
   <goal name="pre_ancilla&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ancilla e i)" arg2="(to_qc (pre (ancilla e i)))">
    <goal name="pre_ancilla&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Requires">
     <goal name="pre_ancilla&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="assert" proved="true" arg1="( (Ancillas (pre e) i) =  (pre (ancilla e i)))">
      <goal name="pre_ancilla&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="pre_ancilla&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="rewrite" proved="true" arg1="ancilla&#39;spec2">
        <goal name="pre_ancilla&#39;vc.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="8"><result status="valid" time="0.87" steps="622750"/></proof>
        </goal>
        <goal name="pre_ancilla&#39;vc.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="2.34" steps="735052"/></proof>
        </goal>
        <goal name="pre_ancilla&#39;vc.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="2.31" steps="735862"/></proof>
        </goal>
        <goal name="pre_ancilla&#39;vc.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
        <transf name="replace" proved="true" arg1="(width e - i)" arg2="(width d)">
         <goal name="pre_ancilla&#39;vc.0.0.0.0.0.0.3.0" expl="rewrite premises" proved="true">
         <transf name="replace" proved="true" arg1="(circ_to_pps e)" arg2="(circ_to_pps_pre (pre e))">
          <goal name="pre_ancilla&#39;vc.0.0.0.0.0.0.3.0.0" expl="rewrite premises" proved="true">
          <transf name="instantiate" proved="true" arg1="ancilla_pre_cond" arg2="d,(pre e),i">
           <goal name="pre_ancilla&#39;vc.0.0.0.0.0.0.3.0.0.0" expl="rewrite premises" proved="true">
           <transf name="destruct" proved="true" arg1="Hinst">
            <goal name="pre_ancilla&#39;vc.0.0.0.0.0.0.3.0.0.0.0" expl="destruct premise" proved="true">
            <proof prover="8"><result status="valid" time="1.08" steps="622752"/></proof>
            </goal>
            <goal name="pre_ancilla&#39;vc.0.0.0.0.0.0.3.0.0.0.1" expl="rewrite premises" proved="true">
            <transf name="destruct" proved="true" arg1="Hinst">
             <goal name="pre_ancilla&#39;vc.0.0.0.0.0.0.3.0.0.0.1.0" expl="rewrite premises" proved="true">
             <transf name="exists" proved="true" arg1="path_sem_target">
              <goal name="pre_ancilla&#39;vc.0.0.0.0.0.0.3.0.0.0.1.0.0" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="pre_ancilla&#39;vc.0.0.0.0.0.0.3.0.0.0.1.0.0.0" proved="true">
               <transf name="apply" proved="true" arg1="Hinst">
                <goal name="pre_ancilla&#39;vc.0.0.0.0.0.0.3.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="1.05" steps="622881"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="pre_ancilla&#39;vc.0.0.0.0.0.0.3.0.1" expl="equality hypothesis" proved="true">
          <proof prover="8"><result status="valid" time="1.82" steps="662561"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="pre_ancilla&#39;vc.0.0.0.0.0.0.3.1" expl="equality hypothesis" proved="true">
         <proof prover="8"><result status="valid" time="2.30" steps="736004"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="pre_ancilla&#39;vc.0.0.0.0.1" expl="postcondition" proved="true">
      <proof prover="8"><result status="valid" time="1.41" steps="566713"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="pre_ancilla&#39;vc.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="8"><result status="valid" time="1.53" steps="567017"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="pre_ancilla&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <proof prover="8"><result status="valid" time="1.55" steps="567006"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_mat_sem_path_sem&#39;vc" expl="VC for set_mat_sem_path_sem" proved="true">
 <proof prover="8"><result status="valid" time="2.07" steps="647376"/></proof>
 </goal>
 <goal name="path_sem_basis_ket_l&#39;vc" expl="VC for path_sem_basis_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_basis_ket_l&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.57" steps="567316"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_ket_l&#39;vc" expl="VC for path_sem_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_ket_l&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="path_sem_ket_l&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.81" steps="662971"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_ket&#39;vc" expl="VC for path_sem_ket" proved="true">
 <proof prover="8"><result status="valid" time="3.25" steps="648290"/></proof>
 </goal>
 <goal name="path_sem_ket_length&#39;vc" expl="VC for path_sem_ket_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_ket_length&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="2.99" steps="648494"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_to_ket_l&#39;vc" expl="VC for path_sem_to_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_to_ket_l&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.48" steps="567714"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_path_sem&#39;vc" expl="VC for get_path_sem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_path_sem&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="get_path_sem&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="path_sem&#39;def">
    <goal name="get_path_sem&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="ket_sum_eq">
     <goal name="get_path_sem&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.96" steps="634090"/></proof>
     </goal>
     <goal name="get_path_sem&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="0.73" steps="530885"/></proof>
     </goal>
     <goal name="get_path_sem&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="2.38" steps="746299"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="get_path_sem&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.74" steps="530887"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="get_path_sem_basis&#39;vc" expl="VC for get_path_sem_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_path_sem_basis&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="get_path_sem_basis&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="3.30" steps="648118"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_path_sem_basis&#39;vc" expl="VC for set_path_sem_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_path_sem_basis&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.29" steps="568113"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="circ_to_pps_parallel&#39;vc" expl="VC for circ_to_pps_parallel" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="circ_to_pps_parallel&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.54" steps="568168"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="parallel_width&#39;vc" expl="VC for parallel_width" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="parallel_width&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(width (parallel d e) )" arg2="(width_pre (Parallel (pre d) (pre e)))">
   <goal name="parallel_width&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="2.02" steps="637370"/></proof>
   </goal>
   <goal name="parallel_width&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <proof prover="8"><result status="valid" time="2.02" steps="636860"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="parallel_range&#39;vc" expl="VC for parallel_range" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="parallel_range&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(range (parallel d e) )" arg2="(h_range (pps_par (circ_to_pps d) (circ_to_pps e)))">
   <goal name="parallel_range&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="2.02" steps="636788"/></proof>
   </goal>
   <goal name="parallel_range&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <proof prover="8"><result status="valid" time="2.03" steps="636351"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="parallel_size&#39;vc" expl="VC for parallel_size" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="parallel_size&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(size (parallel d e) )" arg2="(size  (to_qc (pre d)) +  size(to_qc (pre e)))">
   <goal name="parallel_size&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.61" steps="572530"/></proof>
   </goal>
   <goal name="parallel_size&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <transf name="replace" proved="true" arg1="(parallel d e)" arg2="(to_qc (Parallel (pre d ) (pre e)))">
    <goal name="parallel_size&#39;vc.0.1.0" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="0.66"/></proof>
    </goal>
    <goal name="parallel_size&#39;vc.0.1.1" expl="equality hypothesis" proved="true">
    <proof prover="8"><result status="valid" time="1.38" steps="568329"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="parallel_ancilla&#39;vc" expl="VC for parallel_ancilla" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="parallel_ancilla&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(parallel d e)" arg2="(to_qc (Parallel (pre d ) (pre e)))">
   <goal name="parallel_ancilla&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.61"/></proof>
   </goal>
   <goal name="parallel_ancilla&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <proof prover="8"><result status="valid" time="1.58" steps="568381"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="parallel_basis_ket&#39;vc" expl="VC for parallel_basis_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="parallel_basis_ket&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(parallel d e)" arg2="(to_qc (Parallel (pre d ) (pre e)))">
   <goal name="parallel_basis_ket&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(basis_ket (to_qc (Parallel (pre d) (pre e))) x y i)" arg2="((h_basis_ket (pps_par (circ_to_pps d)  (circ_to_pps e) )) x y i)">
    <goal name="parallel_basis_ket&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="parallel_basis_ket&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="pps_par&#39;spec1">
      <goal name="parallel_basis_ket&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="parallel_basis_ket&#39;vc.0.0.0.0.0.0" expl="VC for parallel_basis_ket" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="parallel_basis_ket&#39;vc.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <proof prover="8"><result status="valid" time="2.20" steps="769097"/></proof>
        </goal>
        <goal name="parallel_basis_ket&#39;vc.0.0.0.0.0.0.1" expl="postcondition" proved="true">
        <proof prover="8"><result status="valid" time="2.20" steps="770238"/></proof>
        </goal>
        <goal name="parallel_basis_ket&#39;vc.0.0.0.0.0.0.2" expl="postcondition" proved="true">
        <transf name="eliminate_definition" proved="true" >
         <goal name="parallel_basis_ket&#39;vc.0.0.0.0.0.0.2.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
          <goal name="parallel_basis_ket&#39;vc.0.0.0.0.0.0.2.0.0" expl="postcondition" proved="true">
          <transf name="replace" proved="true" arg1="(h_width (circ_to_pps d))" arg2="(width d)">
           <goal name="parallel_basis_ket&#39;vc.0.0.0.0.0.0.2.0.0.0" expl="postcondition" proved="true">
           <proof prover="8"><result status="valid" time="2.27" steps="771374"/></proof>
           </goal>
           <goal name="parallel_basis_ket&#39;vc.0.0.0.0.0.0.2.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="8"><result status="valid" time="1.61" steps="671266"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="parallel_basis_ket&#39;vc.0.0.0.0.0.0.3" expl="postcondition" proved="true">
        <transf name="replace" proved="true" arg1="(h_width (circ_to_pps d))" arg2="(width d)">
         <goal name="parallel_basis_ket&#39;vc.0.0.0.0.0.0.3.0" expl="postcondition" proved="true">
         <transf name="replace" proved="true" arg1="(h_range (circ_to_pps d))" arg2="(range d)">
          <goal name="parallel_basis_ket&#39;vc.0.0.0.0.0.0.3.0.0" expl="postcondition" proved="true">
          <transf name="replace" proved="true" arg1="(h_basis_ket (circ_to_pps e) )" arg2="(basis_ket e)">
           <goal name="parallel_basis_ket&#39;vc.0.0.0.0.0.0.3.0.0.0" expl="postcondition" proved="true">
           <transf name="compute_specified" proved="true" >
           </transf>
           </goal>
           <goal name="parallel_basis_ket&#39;vc.0.0.0.0.0.0.3.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="8"><result status="valid" time="2.25" steps="799846"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="parallel_basis_ket&#39;vc.0.0.0.0.0.0.3.0.1" expl="equality hypothesis" proved="true">
          <proof prover="8"><result status="valid" time="1.83" steps="671270"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="parallel_basis_ket&#39;vc.0.0.0.0.0.0.3.1" expl="equality hypothesis" proved="true">
         <proof prover="8"><result status="valid" time="1.83" steps="671258"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="parallel_basis_ket&#39;vc.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="8"><result status="valid" time="2.32" steps="724972"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="parallel_basis_ket&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <proof prover="8"><result status="valid" time="1.60" steps="568436"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="parallel_angle&#39;vc" expl="VC for parallel_angle" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="parallel_angle&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="parallel_angle&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ang_ind (parallel d e) x y )" arg2="((h_angle (pps_par (circ_to_pps d)  (circ_to_pps e) )) x y )
">
    <goal name="parallel_angle&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="parallel_angle&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="pps_par&#39;spec">
      <goal name="parallel_angle&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="ang_add_eq">
       <goal name="parallel_angle&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="2.25" steps="751331"/></proof>
       </goal>
       <goal name="parallel_angle&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="parallel_angle&#39;vc.0.0.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(h_width (circ_to_pps d))" arg2="(width d)">
         <goal name="parallel_angle&#39;vc.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(h_range (circ_to_pps d))" arg2="(range d)">
          <goal name="parallel_angle&#39;vc.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="(h_angle (circ_to_pps e))" arg2="(ang_ind e)">
           <goal name="parallel_angle&#39;vc.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
           </transf>
           </goal>
           <goal name="parallel_angle&#39;vc.0.0.0.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="8"><result status="valid" time="2.62" steps="856561"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="parallel_angle&#39;vc.0.0.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="8"><result status="valid" time="1.66" steps="664392"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="parallel_angle&#39;vc.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
         <proof prover="8"><result status="valid" time="1.67" steps="664392"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="parallel_angle&#39;vc.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="8"><result status="valid" time="2.13" steps="714912"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="circ_to_pps_sequence&#39;vc" expl="VC for circ_to_pps_sequence" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="circ_to_pps_sequence&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="circ_to_pps_sequence&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.60" steps="569229"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="sequence_width&#39;vc" expl="VC for sequence_width" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sequence_width&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="3.63" steps="651166"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="sequence_size&#39;vc" expl="VC for sequence_size" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sequence_size&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(sequence d e)" arg2="(to_qc (Sequence (pre d) (pre e)))">
   <goal name="sequence_size&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="sequence_size&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="size&#39;def8" arg2="(sequence d e),(pre d),(pre e)">
     <goal name="sequence_size&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="8"><result status="valid" time="1.68" steps="666350"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="sequence_size&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <proof prover="8"><result status="valid" time="1.53" steps="569320"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="sequence_ancillas&#39;vc" expl="VC for sequence_ancillas" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sequence_ancillas&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="sequence_ancillas&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="ancillas&#39;def8" arg2="(sequence d e),(pre d),(pre e)">
    <goal name="sequence_ancillas&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="1.91" steps="666347"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="sequence_range&#39;vc" expl="VC for sequence_range" proved="true">
 <transf name="split_all_full" proved="true" >
  <goal name="sequence_range&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sequence_range&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(range (sequence d e))" arg2="(h_range (pps_seq (circ_to_pps d) (circ_to_pps e)))">
    <goal name="sequence_range&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="2.39" steps="738377"/></proof>
    </goal>
    <goal name="sequence_range&#39;vc.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="8"><result status="valid" time="2.39" steps="737617"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="sequence_basis_ket&#39;vc" expl="VC for sequence_basis_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sequence_basis_ket&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(basis_ket (sequence d e) x  y i)" arg2="(h_basis_ket (pps_seq (circ_to_pps d) (circ_to_pps e)) x y i)">
   <goal name="sequence_basis_ket&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="sequence_basis_ket&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="sequence_basis_ket&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="pps_seq&#39;spec1">
      <goal name="sequence_basis_ket&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="sequence_basis_ket&#39;vc.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="eliminate_definition" proved="true" >
        <goal name="sequence_basis_ket&#39;vc.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
         <goal name="sequence_basis_ket&#39;vc.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
          <goal name="sequence_basis_ket&#39;vc.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="replace" proved="true" arg1="(fun (y3:int) -&gt; ((h_basis_ket (circ_to_pps d) @ x) @ y) @ y3)" arg2="((h_basis_ket (circ_to_pps d) @ x) @ y)">
           <goal name="sequence_basis_ket&#39;vc.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <transf name="replace" proved="true" arg1="(h_range (circ_to_pps d))" arg2="(range d)">
            <goal name="sequence_basis_ket&#39;vc.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
            <transf name="compute_specified" proved="true" >
            </transf>
            </goal>
            <goal name="sequence_basis_ket&#39;vc.0.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
            <proof prover="8"><result status="valid" time="1.84" steps="665093"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="sequence_basis_ket&#39;vc.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="8"><result status="valid" time="1.08" steps="624712"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="sequence_basis_ket&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.87" steps="666165"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="sequence_basis_ket&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <proof prover="8"><result status="valid" time="2.41" steps="725249"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="sequence_angle&#39;vc" expl="VC for sequence_angle" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sequence_angle&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ang_ind (sequence d e) x  y )" arg2="(h_angle (pps_seq (circ_to_pps d) (circ_to_pps e)) x y )">
   <goal name="sequence_angle&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="sequence_angle&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="pps_seq&#39;spec">
     <goal name="sequence_angle&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="sequence_angle&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="ang_add_eq">
       <goal name="sequence_angle&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="2.20" steps="752209"/></proof>
       </goal>
       <goal name="sequence_angle&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(h_basis_ket (circ_to_pps d))" arg2="(basis_ket d)">
        <goal name="sequence_angle&#39;vc.0.0.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(h_angle (circ_to_pps e))" arg2="(ang_ind e)">
         <goal name="sequence_angle&#39;vc.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(h_range (circ_to_pps d))" arg2="(range d)">
          <goal name="sequence_angle&#39;vc.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
          </transf>
          </goal>
          <goal name="sequence_angle&#39;vc.0.0.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="8"><result status="valid" time="1.80" steps="665378"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="sequence_angle&#39;vc.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
         <proof prover="8"><result status="valid" time="2.92" steps="857711"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="sequence_angle&#39;vc.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
        <proof prover="8"><result status="valid" time="2.26" steps="793461"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="sequence_angle&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.83" steps="666425"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="sequence_angle&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <proof prover="8"><result status="valid" time="2.33" steps="716088"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="circ_to_pps_ancilla&#39;vc" expl="VC for circ_to_pps_ancilla" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="circ_to_pps_ancilla&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ancilla c i)" arg2="(to_qc (Ancillas (pre c) i))">
   <goal name="circ_to_pps_ancilla&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="circ_to_pps_ancilla&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="circ_to_pps&#39;spec2">
     <goal name="circ_to_pps_ancilla&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="pre_to_qc">
      <goal name="circ_to_pps_ancilla&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="8"><result status="valid" time="4.26" steps="829794"/></proof>
      </goal>
      <goal name="circ_to_pps_ancilla&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <transf name="replace" proved="true" arg1="((Ancillas (pre c) i))" arg2="(pre (ancilla c i))">
       <goal name="circ_to_pps_ancilla&#39;vc.0.0.0.0.1.0" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="1.77" steps="738966"/></proof>
       </goal>
       <goal name="circ_to_pps_ancilla&#39;vc.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
       <transf name="rewrite" proved="true" arg1="ancilla&#39;spec2">
        <goal name="circ_to_pps_ancilla&#39;vc.0.0.0.0.1.1.0" expl="equality hypothesis" proved="true">
        <proof prover="8"><result status="valid" time="1.19" steps="697478"/></proof>
        </goal>
        <goal name="circ_to_pps_ancilla&#39;vc.0.0.0.0.1.1.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="1.19" steps="697480"/></proof>
        </goal>
        <goal name="circ_to_pps_ancilla&#39;vc.0.0.0.0.1.1.2" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="1.06" steps="697480"/></proof>
        </goal>
        <goal name="circ_to_pps_ancilla&#39;vc.0.0.0.0.1.1.3" expl="rewrite premises" proved="true">
        <transf name="destruct" proved="true" arg1="Requires">
         <goal name="circ_to_pps_ancilla&#39;vc.0.0.0.0.1.1.3.0" expl="rewrite premises" proved="true">
         <transf name="exists" proved="true" arg1="path_sem_target">
          <goal name="circ_to_pps_ancilla&#39;vc.0.0.0.0.1.1.3.0.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="circ_to_pps_ancilla&#39;vc.0.0.0.0.1.1.3.0.0.0" proved="true">
           <transf name="rewrite" proved="true" arg1="apply_path_sem">
            <goal name="circ_to_pps_ancilla&#39;vc.0.0.0.0.1.1.3.0.0.0.0" proved="true">
            <proof prover="8"><result status="valid" time="2.06" steps="738971"/></proof>
            </goal>
            <goal name="circ_to_pps_ancilla&#39;vc.0.0.0.0.1.1.3.0.0.0.1" expl="rewrite premises" proved="true">
            <transf name="replace" proved="true" arg1="(width c)" arg2="(width c - i + i)">
             <goal name="circ_to_pps_ancilla&#39;vc.0.0.0.0.1.1.3.0.0.0.1.0" expl="rewrite premises" proved="true">
             <transf name="apply" proved="true" arg1="kronecker_ket_l">
              <goal name="circ_to_pps_ancilla&#39;vc.0.0.0.0.1.1.3.0.0.0.1.0.0" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="2.02" steps="738059"/></proof>
              </goal>
              <goal name="circ_to_pps_ancilla&#39;vc.0.0.0.0.1.1.3.0.0.0.1.0.1" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="2.01" steps="738052"/></proof>
              </goal>
              <goal name="circ_to_pps_ancilla&#39;vc.0.0.0.0.1.1.3.0.0.0.1.0.2" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="1.03" steps="697481"/></proof>
              </goal>
              <goal name="circ_to_pps_ancilla&#39;vc.0.0.0.0.1.1.3.0.0.0.1.0.3" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="2.68" steps="813505"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="circ_to_pps_ancilla&#39;vc.0.0.0.0.1.1.3.0.0.0.1.1" expl="equality hypothesis" proved="true">
             <proof prover="8"><result status="valid" time="1.02" steps="697495"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="circ_to_pps_ancilla&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <transf name="assert" proved="true" arg1="(pre (ancilla c i) = Ancillas (pre c ) i)">
    <goal name="circ_to_pps_ancilla&#39;vc.0.1.0" expl="asserted formula" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="circ_to_pps_ancilla&#39;vc.0.1.0.0" expl="asserted formula" proved="true">
     <transf name="rewrite" proved="true" arg1="ancilla&#39;spec2">
      <goal name="circ_to_pps_ancilla&#39;vc.0.1.0.0.0" expl="asserted formula" proved="true">
      <proof prover="8"><result status="valid" time="1.20" steps="697478"/></proof>
      </goal>
      <goal name="circ_to_pps_ancilla&#39;vc.0.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.19" steps="697480"/></proof>
      </goal>
      <goal name="circ_to_pps_ancilla&#39;vc.0.1.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.21" steps="697480"/></proof>
      </goal>
      <goal name="circ_to_pps_ancilla&#39;vc.0.1.0.0.3" expl="rewrite premises" proved="true">
      <transf name="destruct" proved="true" arg1="Requires">
       <goal name="circ_to_pps_ancilla&#39;vc.0.1.0.0.3.0" expl="rewrite premises" proved="true">
       <transf name="exists" proved="true" arg1="path_sem_target">
        <goal name="circ_to_pps_ancilla&#39;vc.0.1.0.0.3.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="circ_to_pps_ancilla&#39;vc.0.1.0.0.3.0.0.0" proved="true">
         <transf name="replace" proved="true" arg1="(  pps_apply (circ_to_pps c) (kronecker x (ket i 0)))" arg2="(  path_sem c (kronecker x (ket i 0)))">
          <goal name="circ_to_pps_ancilla&#39;vc.0.1.0.0.3.0.0.0.0" proved="true">
          <proof prover="8"><result status="valid" time="2.06" steps="738971"/></proof>
          </goal>
          <goal name="circ_to_pps_ancilla&#39;vc.0.1.0.0.3.0.0.0.1" expl="equality hypothesis" proved="true">
          <transf name="rewrite" proved="true" arg1="path_sem_apply">
           <goal name="circ_to_pps_ancilla&#39;vc.0.1.0.0.3.0.0.0.1.0" expl="equality hypothesis" proved="true">
           <proof prover="8"><result status="valid" time="1.24" steps="697479"/></proof>
           </goal>
           <goal name="circ_to_pps_ancilla&#39;vc.0.1.0.0.3.0.0.0.1.1" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="(width c)" arg2="(width c-i+i)">
            <goal name="circ_to_pps_ancilla&#39;vc.0.1.0.0.3.0.0.0.1.1.0" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="kronecker_ket_l">
             <goal name="circ_to_pps_ancilla&#39;vc.0.1.0.0.3.0.0.0.1.1.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.93" steps="738059"/></proof>
             </goal>
             <goal name="circ_to_pps_ancilla&#39;vc.0.1.0.0.3.0.0.0.1.1.0.1" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.94" steps="738052"/></proof>
             </goal>
             <goal name="circ_to_pps_ancilla&#39;vc.0.1.0.0.3.0.0.0.1.1.0.2" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.22" steps="697481"/></proof>
             </goal>
             <goal name="circ_to_pps_ancilla&#39;vc.0.1.0.0.3.0.0.0.1.1.0.3" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="2.72" steps="813505"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="circ_to_pps_ancilla&#39;vc.0.1.0.0.3.0.0.0.1.1.1" expl="equality hypothesis" proved="true">
            <proof prover="8"><result status="valid" time="1.22" steps="697495"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="circ_to_pps_ancilla&#39;vc.0.1.1" expl="equality hypothesis" proved="true">
    <proof prover="8"><result status="valid" time="1.73" steps="633568"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ancilla_width&#39;vc" expl="VC for ancilla_width" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ancilla_width&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ancilla c i)" arg2="(to_qc (Ancillas (pre c) i))">
   <goal name="ancilla_width&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="ancilla_width&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="width&#39;def">
     <goal name="ancilla_width&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="pre_to_qc">
      <goal name="ancilla_width&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="8"><result status="valid" time="2.35" steps="706490"/></proof>
      </goal>
      <goal name="ancilla_width&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <transf name="assert" proved="true" arg1="(ancillable_pre (pre c) i)">
       <goal name="ancilla_width&#39;vc.0.0.0.0.1.0" expl="asserted formula" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="ancilla_width&#39;vc.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="ancillable_pre&#39;spec">
         <goal name="ancilla_width&#39;vc.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
         <transf name="destruct" proved="true" arg1="Requires">
          <goal name="ancilla_width&#39;vc.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
          <transf name="exists" proved="true" arg1="path_sem_target">
           <goal name="ancilla_width&#39;vc.0.0.0.0.1.0.0.0.0.0" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="ancilla_width&#39;vc.0.0.0.0.1.0.0.0.0.0.0" proved="true">
            <transf name="replace" proved="true" arg1="(circ_to_pps_pre (pre c))" arg2="(circ_to_pps (c))">
             <goal name="ancilla_width&#39;vc.0.0.0.0.1.0.0.0.0.0.0.0" proved="true">
             <transf name="rewrite" proved="true" arg1="apply_path_sem">
              <goal name="ancilla_width&#39;vc.0.0.0.0.1.0.0.0.0.0.0.0.0" proved="true">
              <transf name="apply" proved="true" arg1="Requires">
               <goal name="ancilla_width&#39;vc.0.0.0.0.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="width&#39;def">
                <goal name="ancilla_width&#39;vc.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="1.03" steps="715964"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="ancilla_width&#39;vc.0.0.0.0.1.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
              <transf name="replace" proved="true" arg1="(width c)" arg2="(width c - i + i)">
               <goal name="ancilla_width&#39;vc.0.0.0.0.1.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="kronecker_ket_l">
                <goal name="ancilla_width&#39;vc.0.0.0.0.1.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="2.01" steps="757179"/></proof>
                </goal>
                <goal name="ancilla_width&#39;vc.0.0.0.0.1.0.0.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="1.99" steps="757200"/></proof>
                </goal>
                <goal name="ancilla_width&#39;vc.0.0.0.0.1.0.0.0.0.0.0.0.1.0.2" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="width&#39;def">
                 <goal name="ancilla_width&#39;vc.0.0.0.0.1.0.0.0.0.0.0.0.1.0.2.0" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.09" steps="715964"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="ancilla_width&#39;vc.0.0.0.0.1.0.0.0.0.0.0.0.1.0.3" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="2.65" steps="826660"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="ancilla_width&#39;vc.0.0.0.0.1.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
               <proof prover="8"><result status="valid" time="1.05" steps="715978"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="ancilla_width&#39;vc.0.0.0.0.1.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
             <proof prover="8"><result status="valid" time="2.06" steps="758181"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="ancilla_width&#39;vc.0.0.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="2.23" steps="702646"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ancilla_width&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="ancilla_width&#39;vc.0.1.0" expl="equality hypothesis" proved="true">
    <transf name="assert" proved="true" arg1="(pre (ancilla c i) = Ancillas (pre c ) i)">
     <goal name="ancilla_width&#39;vc.0.1.0.0" expl="asserted formula" proved="true">
     <transf name="rewrite" proved="true" arg1="ancilla&#39;spec2">
      <goal name="ancilla_width&#39;vc.0.1.0.0.0" expl="asserted formula" proved="true">
      <proof prover="8"><result status="valid" time="1.24" steps="697769"/></proof>
      </goal>
      <goal name="ancilla_width&#39;vc.0.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.19" steps="697771"/></proof>
      </goal>
      <goal name="ancilla_width&#39;vc.0.1.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.25" steps="697771"/></proof>
      </goal>
      <goal name="ancilla_width&#39;vc.0.1.0.0.3" expl="rewrite premises" proved="true">
      <transf name="destruct" proved="true" arg1="Requires">
       <goal name="ancilla_width&#39;vc.0.1.0.0.3.0" expl="rewrite premises" proved="true">
       <transf name="exists" proved="true" arg1="path_sem_target">
        <goal name="ancilla_width&#39;vc.0.1.0.0.3.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="ancilla_width&#39;vc.0.1.0.0.3.0.0.0" proved="true">
         <transf name="replace" proved="true" arg1="(  pps_apply (circ_to_pps c) (kronecker x (ket i 0)))" arg2="(  path_sem c (kronecker x (ket i 0)))">
          <goal name="ancilla_width&#39;vc.0.1.0.0.3.0.0.0.0" proved="true">
          <proof prover="8"><result status="valid" time="2.08" steps="739288"/></proof>
          </goal>
          <goal name="ancilla_width&#39;vc.0.1.0.0.3.0.0.0.1" expl="equality hypothesis" proved="true">
          <transf name="rewrite" proved="true" arg1="path_sem_apply">
           <goal name="ancilla_width&#39;vc.0.1.0.0.3.0.0.0.1.0" expl="equality hypothesis" proved="true">
           <proof prover="8"><result status="valid" time="1.25" steps="697770"/></proof>
           </goal>
           <goal name="ancilla_width&#39;vc.0.1.0.0.3.0.0.0.1.1" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="(width c)" arg2="(width c-i+i)">
            <goal name="ancilla_width&#39;vc.0.1.0.0.3.0.0.0.1.1.0" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="kronecker_ket_l">
             <goal name="ancilla_width&#39;vc.0.1.0.0.3.0.0.0.1.1.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.99" steps="738360"/></proof>
             </goal>
             <goal name="ancilla_width&#39;vc.0.1.0.0.3.0.0.0.1.1.0.1" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="2.00" steps="738361"/></proof>
             </goal>
             <goal name="ancilla_width&#39;vc.0.1.0.0.3.0.0.0.1.1.0.2" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.23" steps="697772"/></proof>
             </goal>
             <goal name="ancilla_width&#39;vc.0.1.0.0.3.0.0.0.1.1.0.3" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="2.83" steps="813835"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="ancilla_width&#39;vc.0.1.0.0.3.0.0.0.1.1.1" expl="equality hypothesis" proved="true">
            <proof prover="8"><result status="valid" time="1.25" steps="697786"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ancilla_width&#39;vc.0.1.0.1" expl="equality hypothesis" proved="true">
     <proof prover="8"><result status="valid" time="2.07" steps="739327"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ancilla_size&#39;vc" expl="VC for ancilla_size" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ancilla_size&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ancilla c i)" arg2="(to_qc (Ancillas (pre c) i))">
   <goal name="ancilla_size&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="ancilla_size&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(size (to_qc (Ancillas (pre c) i)) )" arg2="(size (to_qc ( (pre c) )) )">
     <goal name="ancilla_size&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="8"><result status="valid" time="1.78" steps="639179"/></proof>
     </goal>
     <goal name="ancilla_size&#39;vc.0.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="ancilla_size&#39;vc.0.0.0.1.0" expl="equality hypothesis" proved="true">
      <transf name="instantiate" proved="true" arg1="size&#39;def6" arg2="(to_qc (Ancillas (pre c) i)),(pre c),i">
       <goal name="ancilla_size&#39;vc.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="Hinst">
        <goal name="ancilla_size&#39;vc.0.0.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="pre_to_qc">
         <goal name="ancilla_size&#39;vc.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
         <transf name="assert" proved="true" arg1="(ancillable_pre (pre c) i)">
          <goal name="ancilla_size&#39;vc.0.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="ancillable_pre&#39;spec">
           <goal name="ancilla_size&#39;vc.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="destruct" proved="true" arg1="Requires">
            <goal name="ancilla_size&#39;vc.0.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="exists" proved="true" arg1="path_sem_target">
             <goal name="ancilla_size&#39;vc.0.0.0.1.0.0.0.0.0.0.0.0" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="ancilla_size&#39;vc.0.0.0.1.0.0.0.0.0.0.0.0.0" proved="true">
              <transf name="replace" proved="true" arg1="(circ_to_pps_pre (pre c))" arg2="(circ_to_pps (c))">
               <goal name="ancilla_size&#39;vc.0.0.0.1.0.0.0.0.0.0.0.0.0.0" proved="true">
               <transf name="rewrite" proved="true" arg1="apply_path_sem">
                <goal name="ancilla_size&#39;vc.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0" proved="true">
                <transf name="apply" proved="true" arg1="Requires">
                 <goal name="ancilla_size&#39;vc.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="width&#39;def">
                  <goal name="ancilla_size&#39;vc.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.26" steps="716308"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="ancilla_size&#39;vc.0.0.0.1.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                <transf name="replace" proved="true" arg1="(width c)" arg2="(width c - i + i)">
                 <goal name="ancilla_size&#39;vc.0.0.0.1.0.0.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                 <transf name="apply" proved="true" arg1="kronecker_ket_l">
                  <goal name="ancilla_size&#39;vc.0.0.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.09" steps="757435"/></proof>
                  </goal>
                  <goal name="ancilla_size&#39;vc.0.0.0.1.0.0.0.0.0.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.07" steps="757456"/></proof>
                  </goal>
                  <goal name="ancilla_size&#39;vc.0.0.0.1.0.0.0.0.0.0.0.0.0.0.1.0.2" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="width&#39;def">
                   <goal name="ancilla_size&#39;vc.0.0.0.1.0.0.0.0.0.0.0.0.0.0.1.0.2.0" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="1.27" steps="716308"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="ancilla_size&#39;vc.0.0.0.1.0.0.0.0.0.0.0.0.0.0.1.0.3" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.86" steps="828164"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="ancilla_size&#39;vc.0.0.0.1.0.0.0.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
                 <proof prover="8"><result status="valid" time="1.29" steps="716322"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="ancilla_size&#39;vc.0.0.0.1.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
               <proof prover="8"><result status="valid" time="2.14" steps="758479"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="ancilla_size&#39;vc.0.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="2.74" steps="827076"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ancilla_size&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="ancilla_size&#39;vc.0.1.0" expl="equality hypothesis" proved="true">
    <transf name="assert" proved="true" arg1="(pre (ancilla c i) = Ancillas (pre c ) i)">
     <goal name="ancilla_size&#39;vc.0.1.0.0" expl="asserted formula" proved="true">
     <transf name="rewrite" proved="true" arg1="ancilla&#39;spec2">
      <goal name="ancilla_size&#39;vc.0.1.0.0.0" expl="asserted formula" proved="true">
      <proof prover="8"><result status="valid" time="1.01" steps="698061"/></proof>
      </goal>
      <goal name="ancilla_size&#39;vc.0.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.09" steps="698063"/></proof>
      </goal>
      <goal name="ancilla_size&#39;vc.0.1.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.20" steps="698063"/></proof>
      </goal>
      <goal name="ancilla_size&#39;vc.0.1.0.0.3" expl="rewrite premises" proved="true">
      <transf name="destruct" proved="true" arg1="Requires">
       <goal name="ancilla_size&#39;vc.0.1.0.0.3.0" expl="rewrite premises" proved="true">
       <transf name="exists" proved="true" arg1="path_sem_target">
        <goal name="ancilla_size&#39;vc.0.1.0.0.3.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="ancilla_size&#39;vc.0.1.0.0.3.0.0.0" proved="true">
         <transf name="replace" proved="true" arg1="(  pps_apply (circ_to_pps c) (kronecker x (ket i 0)))" arg2="(  path_sem c (kronecker x (ket i 0)))">
          <goal name="ancilla_size&#39;vc.0.1.0.0.3.0.0.0.0" proved="true">
          <proof prover="8"><result status="valid" time="2.08" steps="739586"/></proof>
          </goal>
          <goal name="ancilla_size&#39;vc.0.1.0.0.3.0.0.0.1" expl="equality hypothesis" proved="true">
          <transf name="rewrite" proved="true" arg1="path_sem_apply">
           <goal name="ancilla_size&#39;vc.0.1.0.0.3.0.0.0.1.0" expl="equality hypothesis" proved="true">
           <proof prover="8"><result status="valid" time="1.20" steps="698062"/></proof>
           </goal>
           <goal name="ancilla_size&#39;vc.0.1.0.0.3.0.0.0.1.1" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="(width c)" arg2="(width c-i+i)">
            <goal name="ancilla_size&#39;vc.0.1.0.0.3.0.0.0.1.1.0" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="kronecker_ket_l">
             <goal name="ancilla_size&#39;vc.0.1.0.0.3.0.0.0.1.1.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.92" steps="738653"/></proof>
             </goal>
             <goal name="ancilla_size&#39;vc.0.1.0.0.3.0.0.0.1.1.0.1" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.93" steps="738659"/></proof>
             </goal>
             <goal name="ancilla_size&#39;vc.0.1.0.0.3.0.0.0.1.1.0.2" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.24" steps="698064"/></proof>
             </goal>
             <goal name="ancilla_size&#39;vc.0.1.0.0.3.0.0.0.1.1.0.3" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="2.51" steps="814142"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="ancilla_size&#39;vc.0.1.0.0.3.0.0.0.1.1.1" expl="equality hypothesis" proved="true">
            <proof prover="8"><result status="valid" time="1.13" steps="698078"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ancilla_size&#39;vc.0.1.0.1" expl="equality hypothesis" proved="true">
     <proof prover="8"><result status="valid" time="1.87" steps="739625"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ancilla_range&#39;vc" expl="VC for ancilla_range" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ancilla_range&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ancilla c i)" arg2="(to_qc (Ancillas (pre c) i))">
   <goal name="ancilla_range&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="ancilla_range&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(range (to_qc (Ancillas (pre c) i)) )" arg2="(h_range (pps_ancs (circ_to_pps c) i))">
     <goal name="ancilla_range&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="8"><result status="valid" time="2.47" steps="814234"/></proof>
     </goal>
     <goal name="ancilla_range&#39;vc.0.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="ancilla_range&#39;vc.0.0.0.1.0" expl="equality hypothesis" proved="true">
      <transf name="rewrite" proved="true" arg1="range&#39;def">
       <goal name="ancilla_range&#39;vc.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
       <transf name="replace" proved="true" arg1="(to_qc (Ancillas (pre c) i))" arg2="(ancilla c i)">
        <goal name="ancilla_range&#39;vc.0.0.0.1.0.0.0" expl="equality hypothesis" proved="true">
        <transf name="rewrite" proved="true" arg1="ancilla&#39;spec">
         <goal name="ancilla_range&#39;vc.0.0.0.1.0.0.0.0" expl="equality hypothesis" proved="true">
         <proof prover="8"><result status="valid" time="1.19" steps="697756"/></proof>
         </goal>
         <goal name="ancilla_range&#39;vc.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="1.16" steps="697758"/></proof>
         </goal>
         <goal name="ancilla_range&#39;vc.0.0.0.1.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="1.18" steps="697758"/></proof>
         </goal>
         <goal name="ancilla_range&#39;vc.0.0.0.1.0.0.0.3" expl="rewrite premises" proved="true">
         <transf name="destruct" proved="true" arg1="Requires">
          <goal name="ancilla_range&#39;vc.0.0.0.1.0.0.0.3.0" expl="rewrite premises" proved="true">
          <transf name="exists" proved="true" arg1="path_sem_target">
           <goal name="ancilla_range&#39;vc.0.0.0.1.0.0.0.3.0.0" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="ancilla_range&#39;vc.0.0.0.1.0.0.0.3.0.0.0" proved="true">
            <transf name="rewrite" proved="true" arg1="apply_path_sem">
             <goal name="ancilla_range&#39;vc.0.0.0.1.0.0.0.3.0.0.0.0" proved="true">
             <proof prover="8"><result status="valid" time="2.02" steps="739627"/></proof>
             </goal>
             <goal name="ancilla_range&#39;vc.0.0.0.1.0.0.0.3.0.0.0.1" expl="rewrite premises" proved="true">
             <transf name="replace" proved="true" arg1="(width c)" arg2="(width c -i+i)">
              <goal name="ancilla_range&#39;vc.0.0.0.1.0.0.0.3.0.0.0.1.0" expl="rewrite premises" proved="true">
              <transf name="apply" proved="true" arg1="kronecker_ket_l">
               <goal name="ancilla_range&#39;vc.0.0.0.1.0.0.0.3.0.0.0.1.0.0" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="1.70" steps="738552"/></proof>
               </goal>
               <goal name="ancilla_range&#39;vc.0.0.0.1.0.0.0.3.0.0.0.1.0.1" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="1.73" steps="738553"/></proof>
               </goal>
               <goal name="ancilla_range&#39;vc.0.0.0.1.0.0.0.3.0.0.0.1.0.2" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="1.17" steps="697759"/></proof>
               </goal>
               <goal name="ancilla_range&#39;vc.0.0.0.1.0.0.0.3.0.0.0.1.0.3" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="2.37" steps="808329"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="ancilla_range&#39;vc.0.0.0.1.0.0.0.3.0.0.0.1.1" expl="equality hypothesis" proved="true">
              <proof prover="8"><result status="valid" time="1.08" steps="697773"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="ancilla_range&#39;vc.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="assert" proved="true" arg1="((Ancillas (pre c) i) = pre (ancilla c i))">
         <goal name="ancilla_range&#39;vc.0.0.0.1.0.0.1.0" expl="asserted formula" proved="true">
         <transf name="rewrite" proved="true" arg1="ancilla&#39;spec2">
          <goal name="ancilla_range&#39;vc.0.0.0.1.0.0.1.0.0" expl="asserted formula" proved="true">
          <proof prover="8"><result status="valid" time="1.16" steps="697756"/></proof>
          </goal>
          <goal name="ancilla_range&#39;vc.0.0.0.1.0.0.1.0.1" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="1.09" steps="697758"/></proof>
          </goal>
          <goal name="ancilla_range&#39;vc.0.0.0.1.0.0.1.0.2" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="1.18" steps="697758"/></proof>
          </goal>
          <goal name="ancilla_range&#39;vc.0.0.0.1.0.0.1.0.3" expl="rewrite premises" proved="true">
          <transf name="destruct" proved="true" arg1="Requires">
           <goal name="ancilla_range&#39;vc.0.0.0.1.0.0.1.0.3.0" expl="rewrite premises" proved="true">
           <transf name="exists" proved="true" arg1="path_sem_target">
            <goal name="ancilla_range&#39;vc.0.0.0.1.0.0.1.0.3.0.0" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="ancilla_range&#39;vc.0.0.0.1.0.0.1.0.3.0.0.0" proved="true">
             <transf name="rewrite" proved="true" arg1="apply_path_sem">
              <goal name="ancilla_range&#39;vc.0.0.0.1.0.0.1.0.3.0.0.0.0" proved="true">
              <proof prover="8"><result status="valid" time="2.01" steps="739627"/></proof>
              </goal>
              <goal name="ancilla_range&#39;vc.0.0.0.1.0.0.1.0.3.0.0.0.1" expl="rewrite premises" proved="true">
              <transf name="replace" proved="true" arg1="(width c)" arg2="(width c -i+i)">
               <goal name="ancilla_range&#39;vc.0.0.0.1.0.0.1.0.3.0.0.0.1.0" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="kronecker_ket_l">
                <goal name="ancilla_range&#39;vc.0.0.0.1.0.0.1.0.3.0.0.0.1.0.0" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="1.92" steps="738552"/></proof>
                </goal>
                <goal name="ancilla_range&#39;vc.0.0.0.1.0.0.1.0.3.0.0.0.1.0.1" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="1.95" steps="738553"/></proof>
                </goal>
                <goal name="ancilla_range&#39;vc.0.0.0.1.0.0.1.0.3.0.0.0.1.0.2" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="1.08" steps="697759"/></proof>
                </goal>
                <goal name="ancilla_range&#39;vc.0.0.0.1.0.0.1.0.3.0.0.0.1.0.3" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="2.65" steps="808329"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="ancilla_range&#39;vc.0.0.0.1.0.0.1.0.3.0.0.0.1.1" expl="equality hypothesis" proved="true">
               <proof prover="8"><result status="valid" time="1.21" steps="697773"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="ancilla_range&#39;vc.0.0.0.1.0.0.1.1" expl="equality hypothesis" proved="true">
         <proof prover="8"><result status="valid" time="2.07" steps="739674"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ancilla_range&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="ancilla_range&#39;vc.0.1.0" expl="equality hypothesis" proved="true">
    <transf name="assert" proved="true" arg1="(pre (ancilla c i) = Ancillas (pre c ) i)">
     <goal name="ancilla_range&#39;vc.0.1.0.0" expl="asserted formula" proved="true">
     <transf name="rewrite" proved="true" arg1="ancilla&#39;spec2">
      <goal name="ancilla_range&#39;vc.0.1.0.0.0" expl="asserted formula" proved="true">
      <proof prover="8"><result status="valid" time="1.20" steps="698345"/></proof>
      </goal>
      <goal name="ancilla_range&#39;vc.0.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.17" steps="698347"/></proof>
      </goal>
      <goal name="ancilla_range&#39;vc.0.1.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.21" steps="698347"/></proof>
      </goal>
      <goal name="ancilla_range&#39;vc.0.1.0.0.3" expl="rewrite premises" proved="true">
      <transf name="destruct" proved="true" arg1="Requires">
       <goal name="ancilla_range&#39;vc.0.1.0.0.3.0" expl="rewrite premises" proved="true">
       <transf name="exists" proved="true" arg1="path_sem_target">
        <goal name="ancilla_range&#39;vc.0.1.0.0.3.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="ancilla_range&#39;vc.0.1.0.0.3.0.0.0" proved="true">
         <transf name="replace" proved="true" arg1="(  pps_apply (circ_to_pps c) (kronecker x (ket i 0)))" arg2="(  path_sem c (kronecker x (ket i 0)))">
          <goal name="ancilla_range&#39;vc.0.1.0.0.3.0.0.0.0" proved="true">
          <proof prover="8"><result status="valid" time="1.83" steps="739866"/></proof>
          </goal>
          <goal name="ancilla_range&#39;vc.0.1.0.0.3.0.0.0.1" expl="equality hypothesis" proved="true">
          <transf name="rewrite" proved="true" arg1="path_sem_apply">
           <goal name="ancilla_range&#39;vc.0.1.0.0.3.0.0.0.1.0" expl="equality hypothesis" proved="true">
           <proof prover="8"><result status="valid" time="1.17" steps="698346"/></proof>
           </goal>
           <goal name="ancilla_range&#39;vc.0.1.0.0.3.0.0.0.1.1" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="(width c)" arg2="(width c-i+i)">
            <goal name="ancilla_range&#39;vc.0.1.0.0.3.0.0.0.1.1.0" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="kronecker_ket_l">
             <goal name="ancilla_range&#39;vc.0.1.0.0.3.0.0.0.1.1.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.74" steps="738938"/></proof>
             </goal>
             <goal name="ancilla_range&#39;vc.0.1.0.0.3.0.0.0.1.1.0.1" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.84" steps="738939"/></proof>
             </goal>
             <goal name="ancilla_range&#39;vc.0.1.0.0.3.0.0.0.1.1.0.2" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.19" steps="698348"/></proof>
             </goal>
             <goal name="ancilla_range&#39;vc.0.1.0.0.3.0.0.0.1.1.0.3" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="2.76" steps="814431"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="ancilla_range&#39;vc.0.1.0.0.3.0.0.0.1.1.1" expl="equality hypothesis" proved="true">
            <proof prover="8"><result status="valid" time="1.19" steps="698362"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ancilla_range&#39;vc.0.1.0.1" expl="equality hypothesis" proved="true">
     <proof prover="8"><result status="valid" time="2.06" steps="739905"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ancilla_ancilla&#39;vc" expl="VC for ancilla_ancilla" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ancilla_ancilla&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ancilla c i)" arg2="(to_qc (Ancillas (pre c) i))">
   <goal name="ancilla_ancilla&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="ancilla_ancilla&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="ancillas&#39;def6" arg2="(to_qc (Ancillas (pre c) i)),(pre c),i">
     <goal name="ancilla_ancilla&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Hinst">
      <goal name="ancilla_ancilla&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="8"><result status="valid" time="2.09" steps="741357"/></proof>
      </goal>
      <goal name="ancilla_ancilla&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="pre_to_qc">
       <goal name="ancilla_ancilla&#39;vc.0.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="(ancillable_pre (pre c) i)">
        <goal name="ancilla_ancilla&#39;vc.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="ancillable_pre&#39;spec">
         <goal name="ancilla_ancilla&#39;vc.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
         <transf name="destruct" proved="true" arg1="Requires">
          <goal name="ancilla_ancilla&#39;vc.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
          <transf name="exists" proved="true" arg1="path_sem_target">
           <goal name="ancilla_ancilla&#39;vc.0.0.0.0.1.0.0.0.0.0" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="ancilla_ancilla&#39;vc.0.0.0.0.1.0.0.0.0.0.0" proved="true">
            <transf name="replace" proved="true" arg1="(circ_to_pps_pre (pre c))" arg2="(circ_to_pps (c))">
             <goal name="ancilla_ancilla&#39;vc.0.0.0.0.1.0.0.0.0.0.0.0" proved="true">
             <transf name="rewrite" proved="true" arg1="apply_path_sem">
              <goal name="ancilla_ancilla&#39;vc.0.0.0.0.1.0.0.0.0.0.0.0.0" proved="true">
              <transf name="apply" proved="true" arg1="Requires">
               <goal name="ancilla_ancilla&#39;vc.0.0.0.0.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="0"><result status="valid" time="0.89"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="ancilla_ancilla&#39;vc.0.0.0.0.1.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
              <transf name="replace" proved="true" arg1="(width c)" arg2="(width c - i + i)">
               <goal name="ancilla_ancilla&#39;vc.0.0.0.0.1.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="kronecker_ket_l">
                <goal name="ancilla_ancilla&#39;vc.0.0.0.0.1.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="1.74" steps="739319"/></proof>
                </goal>
                <goal name="ancilla_ancilla&#39;vc.0.0.0.0.1.0.0.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="1.90" steps="739320"/></proof>
                </goal>
                <goal name="ancilla_ancilla&#39;vc.0.0.0.0.1.0.0.0.0.0.0.0.1.0.2" expl="apply premises" proved="true">
                <proof prover="0"><result status="valid" time="0.94"/></proof>
                </goal>
                <goal name="ancilla_ancilla&#39;vc.0.0.0.0.1.0.0.0.0.0.0.0.1.0.3" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="2.64" steps="816023"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="ancilla_ancilla&#39;vc.0.0.0.0.1.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
               <proof prover="8"><result status="valid" time="1.18" steps="698712"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="ancilla_ancilla&#39;vc.0.0.0.0.1.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
             <proof prover="8"><result status="valid" time="2.04" steps="740261"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="ancilla_ancilla&#39;vc.0.0.0.0.1.0.1" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="2.67" steps="814947"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ancilla_ancilla&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="ancilla_ancilla&#39;vc.0.1.0" expl="equality hypothesis" proved="true">
    <transf name="assert" proved="true" arg1="(pre (ancilla c i) = Ancillas (pre c ) i)">
     <goal name="ancilla_ancilla&#39;vc.0.1.0.0" expl="asserted formula" proved="true">
     <transf name="rewrite" proved="true" arg1="ancilla&#39;spec2">
      <goal name="ancilla_ancilla&#39;vc.0.1.0.0.0" expl="asserted formula" proved="true">
      <proof prover="8"><result status="valid" time="1.04" steps="698629"/></proof>
      </goal>
      <goal name="ancilla_ancilla&#39;vc.0.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.04" steps="698631"/></proof>
      </goal>
      <goal name="ancilla_ancilla&#39;vc.0.1.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.05" steps="698631"/></proof>
      </goal>
      <goal name="ancilla_ancilla&#39;vc.0.1.0.0.3" expl="rewrite premises" proved="true">
      <transf name="destruct" proved="true" arg1="Requires">
       <goal name="ancilla_ancilla&#39;vc.0.1.0.0.3.0" expl="rewrite premises" proved="true">
       <transf name="exists" proved="true" arg1="path_sem_target">
        <goal name="ancilla_ancilla&#39;vc.0.1.0.0.3.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="ancilla_ancilla&#39;vc.0.1.0.0.3.0.0.0" proved="true">
         <transf name="replace" proved="true" arg1="(  pps_apply (circ_to_pps c) (kronecker x (ket i 0)))" arg2="(  path_sem c (kronecker x (ket i 0)))">
          <goal name="ancilla_ancilla&#39;vc.0.1.0.0.3.0.0.0.0" proved="true">
          <proof prover="8"><result status="valid" time="2.06" steps="740151"/></proof>
          </goal>
          <goal name="ancilla_ancilla&#39;vc.0.1.0.0.3.0.0.0.1" expl="equality hypothesis" proved="true">
          <transf name="rewrite" proved="true" arg1="path_sem_apply">
           <goal name="ancilla_ancilla&#39;vc.0.1.0.0.3.0.0.0.1.0" expl="equality hypothesis" proved="true">
           <proof prover="8"><result status="valid" time="1.19" steps="698630"/></proof>
           </goal>
           <goal name="ancilla_ancilla&#39;vc.0.1.0.0.3.0.0.0.1.1" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="(width c)" arg2="(width c-i+i)">
            <goal name="ancilla_ancilla&#39;vc.0.1.0.0.3.0.0.0.1.1.0" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="kronecker_ket_l">
             <goal name="ancilla_ancilla&#39;vc.0.1.0.0.3.0.0.0.1.1.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.93" steps="739223"/></proof>
             </goal>
             <goal name="ancilla_ancilla&#39;vc.0.1.0.0.3.0.0.0.1.1.0.1" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.97" steps="739224"/></proof>
             </goal>
             <goal name="ancilla_ancilla&#39;vc.0.1.0.0.3.0.0.0.1.1.0.2" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.22" steps="698632"/></proof>
             </goal>
             <goal name="ancilla_ancilla&#39;vc.0.1.0.0.3.0.0.0.1.1.0.3" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="2.69" steps="814730"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="ancilla_ancilla&#39;vc.0.1.0.0.3.0.0.0.1.1.1" expl="equality hypothesis" proved="true">
            <proof prover="8"><result status="valid" time="1.05" steps="698646"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ancilla_ancilla&#39;vc.0.1.0.1" expl="equality hypothesis" proved="true">
     <proof prover="8"><result status="valid" time="2.09" steps="740190"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ancilla_basis_ket&#39;vc" expl="VC for ancilla_basis_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ancilla_basis_ket&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="ancilla_basis_ket&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
    <goal name="ancilla_basis_ket&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="ancilla_basis_ket&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="ancilla&#39;spec">
      <goal name="ancilla_basis_ket&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="pps_ancs&#39;spec1">
       <goal name="ancilla_basis_ket&#39;vc.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="ancilla_basis_ket&#39;vc.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
         <goal name="ancilla_basis_ket&#39;vc.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="width&#39;def">
          <goal name="ancilla_basis_ket&#39;vc.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="rewrite" proved="true" arg1="circ_to_pps&#39;spec1">
           <goal name="ancilla_basis_ket&#39;vc.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <transf name="compute_specified" proved="true" >
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="ancilla_basis_ket&#39;vc.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="1.07" steps="717122"/></proof>
       </goal>
       <goal name="ancilla_basis_ket&#39;vc.0.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="2.13" steps="759783"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="ancilla_basis_ket&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.23" steps="717122"/></proof>
      </goal>
      <goal name="ancilla_basis_ket&#39;vc.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.05" steps="717122"/></proof>
      </goal>
      <goal name="ancilla_basis_ket&#39;vc.0.0.0.0.3" expl="rewrite premises" proved="true">
      <transf name="destruct" proved="true" arg1="Requires">
       <goal name="ancilla_basis_ket&#39;vc.0.0.0.0.3.0" expl="rewrite premises" proved="true">
       <transf name="exists" proved="true" arg1="path_sem_target">
        <goal name="ancilla_basis_ket&#39;vc.0.0.0.0.3.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="ancilla_basis_ket&#39;vc.0.0.0.0.3.0.0.0" proved="true">
         <transf name="replace" proved="true" arg1="(circ_to_pps_pre (pre c))" arg2="(circ_to_pps (c))">
          <goal name="ancilla_basis_ket&#39;vc.0.0.0.0.3.0.0.0.0" proved="true">
          <transf name="rewrite" proved="true" arg1="apply_path_sem">
           <goal name="ancilla_basis_ket&#39;vc.0.0.0.0.3.0.0.0.0.0" proved="true">
           <transf name="apply" proved="true" arg1="Requires">
            <goal name="ancilla_basis_ket&#39;vc.0.0.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="1.21" steps="717123"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="ancilla_basis_ket&#39;vc.0.0.0.0.3.0.0.0.0.1" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="(width c)" arg2="(width c - i + i)">
            <goal name="ancilla_basis_ket&#39;vc.0.0.0.0.3.0.0.0.0.1.0" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="kronecker_ket_l">
             <goal name="ancilla_basis_ket&#39;vc.0.0.0.0.3.0.0.0.0.1.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.95" steps="757983"/></proof>
             </goal>
             <goal name="ancilla_basis_ket&#39;vc.0.0.0.0.3.0.0.0.0.1.0.1" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.98" steps="758004"/></proof>
             </goal>
             <goal name="ancilla_basis_ket&#39;vc.0.0.0.0.3.0.0.0.0.1.0.2" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.24" steps="717123"/></proof>
             </goal>
             <goal name="ancilla_basis_ket&#39;vc.0.0.0.0.3.0.0.0.0.1.0.3" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="2.76" steps="827506"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="ancilla_basis_ket&#39;vc.0.0.0.0.3.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
            <proof prover="8"><result status="valid" time="1.22" steps="717137"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="ancilla_basis_ket&#39;vc.0.0.0.0.3.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="8"><result status="valid" time="2.10" steps="758994"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ancilla_angle&#39;vc" expl="VC for ancilla_angle" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ancilla_angle&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="ancilla_angle&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_ind&#39;def">
    <goal name="ancilla_angle&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="ancilla_angle&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="ancilla&#39;spec">
      <goal name="ancilla_angle&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="pps_ancs&#39;spec">
       <goal name="ancilla_angle&#39;vc.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="ancilla_angle&#39;vc.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="ang_ind&#39;def">
         <goal name="ancilla_angle&#39;vc.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="width&#39;def">
          <goal name="ancilla_angle&#39;vc.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="rewrite" proved="true" arg1="circ_to_pps&#39;spec1">
           <goal name="ancilla_angle&#39;vc.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <transf name="compute_specified" proved="true" >
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="ancilla_angle&#39;vc.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="1.11" steps="717580"/></proof>
       </goal>
       <goal name="ancilla_angle&#39;vc.0.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="2.03" steps="760149"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="ancilla_angle&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.19" steps="717580"/></proof>
      </goal>
      <goal name="ancilla_angle&#39;vc.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.11" steps="717580"/></proof>
      </goal>
      <goal name="ancilla_angle&#39;vc.0.0.0.0.3" expl="rewrite premises" proved="true">
      <transf name="destruct" proved="true" arg1="Requires">
       <goal name="ancilla_angle&#39;vc.0.0.0.0.3.0" expl="rewrite premises" proved="true">
       <transf name="exists" proved="true" arg1="path_sem_target">
        <goal name="ancilla_angle&#39;vc.0.0.0.0.3.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="ancilla_angle&#39;vc.0.0.0.0.3.0.0.0" proved="true">
         <transf name="replace" proved="true" arg1="(circ_to_pps_pre (pre c))" arg2="(circ_to_pps (c))">
          <goal name="ancilla_angle&#39;vc.0.0.0.0.3.0.0.0.0" proved="true">
          <transf name="rewrite" proved="true" arg1="apply_path_sem">
           <goal name="ancilla_angle&#39;vc.0.0.0.0.3.0.0.0.0.0" proved="true">
           <transf name="apply" proved="true" arg1="Requires">
            <goal name="ancilla_angle&#39;vc.0.0.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="1.07" steps="717581"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="ancilla_angle&#39;vc.0.0.0.0.3.0.0.0.0.1" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="(width c)" arg2="(width c - i + i)">
            <goal name="ancilla_angle&#39;vc.0.0.0.0.3.0.0.0.0.1.0" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="kronecker_ket_l">
             <goal name="ancilla_angle&#39;vc.0.0.0.0.3.0.0.0.0.1.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.97" steps="758355"/></proof>
             </goal>
             <goal name="ancilla_angle&#39;vc.0.0.0.0.3.0.0.0.0.1.0.1" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.83" steps="758376"/></proof>
             </goal>
             <goal name="ancilla_angle&#39;vc.0.0.0.0.3.0.0.0.0.1.0.2" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.03" steps="717581"/></proof>
             </goal>
             <goal name="ancilla_angle&#39;vc.0.0.0.0.3.0.0.0.0.1.0.3" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="2.70" steps="827960"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="ancilla_angle&#39;vc.0.0.0.0.3.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
            <proof prover="8"><result status="valid" time="1.23" steps="717595"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="ancilla_angle&#39;vc.0.0.0.0.3.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="8"><result status="valid" time="2.10" steps="759374"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="sequence_eq&#39;vc" expl="VC for sequence_eq" proved="true">
 <proof prover="8"><result status="valid" time="0.89" steps="535967"/></proof>
 </goal>
 <goal name="ancilla_eq&#39;vc" expl="VC for ancilla_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ancilla_eq&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.23" steps="670974"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="parallel_eq&#39;vc" expl="VC for parallel_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="parallel_eq&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.93" steps="548102"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_decomp&#39;vc" expl="VC for path_sem_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_decomp&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="path_sem&#39;def">
   <goal name="path_sem_decomp&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="ket_sum_eq">
    <goal name="path_sem_decomp&#39;vc.0.0.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="2.04" steps="644303"/></proof>
    </goal>
    <goal name="path_sem_decomp&#39;vc.0.0.1" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="0.90" steps="536747"/></proof>
    </goal>
    <goal name="path_sem_decomp&#39;vc.0.0.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="path_sem_decomp&#39;vc.0.0.2.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="path_sem_decomp&#39;vc.0.0.2.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="path_sem_decomp&#39;vc.0.0.2.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="path_sem_decomp&#39;vc.0.0.2.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="2.21" steps="738277"/></proof>
        </goal>
        <goal name="path_sem_decomp&#39;vc.0.0.2.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="2.36" steps="736250"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="path_sem_decomp&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.72" steps="536749"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_scal_&#39;vc" expl="VC for path_sem_scal_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_scal_&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="path_sem_scal_&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="get_path_sem">
    <goal name="path_sem_scal_&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="y" arg2="(path_sem c x)">
     <goal name="path_sem_scal_&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="get_path_sem">
      <goal name="path_sem_scal_&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="ket_sum_scalar_rev_l">
       <goal name="path_sem_scal_&#39;vc.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="ket_sum_eq">
        <goal name="path_sem_scal_&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="2.33" steps="741380"/></proof>
        </goal>
        <goal name="path_sem_scal_&#39;vc.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="0.92" steps="629384"/></proof>
        </goal>
        <goal name="path_sem_scal_&#39;vc.0.0.0.0.0.0.2" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="path_sem_scal_&#39;vc.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="path_sem_scal_&#39;vc.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="2.63" steps="838505"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="path_sem_scal_&#39;vc.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="2.04" steps="741380"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="path_sem_scal_&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.90" steps="629386"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="path_sem_scal_&#39;vc.0.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="8"><result status="valid" time="1.15" steps="629393"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="path_sem_scal_&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.68" steps="669387"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_scal&#39;vc" expl="VC for path_sem_scal" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_scal&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.35" steps="576452"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_scal_rev&#39;vc" expl="VC for path_sem_scal_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_scal_rev&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="path_sem_scal_rev&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.34" steps="576539"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_add&#39;vc" expl="VC for path_sem_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_add&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="get_path_sem">
   <goal name="path_sem_add&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="y" arg2="(path_sem c x)">
    <goal name="path_sem_add&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="y&#39;" arg2="(path_sem c x&#39;)">
     <goal name="path_sem_add&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="get_path_sem">
      <goal name="path_sem_add&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="get_path_sem">
       <goal name="path_sem_add&#39;vc.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="ket_sum_comp_l_rev">
        <goal name="path_sem_add&#39;vc.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="apply" proved="true" arg1="ket_sum_eq">
         <goal name="path_sem_add&#39;vc.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.76" steps="645832"/></proof>
         </goal>
         <goal name="path_sem_add&#39;vc.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
         <goal name="path_sem_add&#39;vc.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="path_sem_add&#39;vc.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="path_sem_add&#39;vc.0.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="2.03" steps="728781"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="path_sem_add&#39;vc.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="1.99" steps="645832"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="path_sem_add&#39;vc.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.88" steps="537308"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="path_sem_add&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.74" steps="537308"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="path_sem_add&#39;vc.0.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="8"><result status="valid" time="0.72" steps="537315"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="path_sem_add&#39;vc.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="8"><result status="valid" time="0.85" steps="537315"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="path_sem_add&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="2.02" steps="646165"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_add_&#39;vc" expl="VC for path_sem_add_" proved="true">
 <proof prover="8"><result status="valid" time="1.28" steps="576972"/></proof>
 </goal>
 <goal name="path_sem_scal_add_ket_l&#39;vc" expl="VC for path_sem_scal_add_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_scal_add_ket_l&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="2.97" steps="661822"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_substr&#39;vc" expl="VC for path_sem_substr" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_substr&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mat_substr&#39;def">
   <goal name="path_sem_substr&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_substr&#39;def">
    <goal name="path_sem_substr&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(add_mat x ((-. c_one) *.. x&#39;))" arg2="(add_ket_l x ((-. c_one) *.. x&#39;) (width c))">
     <goal name="path_sem_substr&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="x" arg2="(c_one *.. x)">
      <goal name="path_sem_substr&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="path_sem_scal_add_ket_l">
       <goal name="path_sem_substr&#39;vc.0.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="8"><result status="valid" time="3.03" steps="661830"/></proof>
       </goal>
       <goal name="path_sem_substr&#39;vc.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.88" steps="537957"/></proof>
       </goal>
       <goal name="path_sem_substr&#39;vc.0.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.71" steps="537959"/></proof>
       </goal>
       <goal name="path_sem_substr&#39;vc.0.0.0.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.88" steps="537959"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="path_sem_substr&#39;vc.0.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="8"><result status="valid" time="1.52" steps="577256"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="path_sem_substr&#39;vc.0.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="8"><result status="valid" time="2.80" steps="660628"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="path_sem_substr&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.93" steps="651866"/></proof>
    </goal>
    <goal name="path_sem_substr&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="2.12" steps="651771"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="path_sem_substr&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="2.07" steps="651364"/></proof>
   </goal>
   <goal name="path_sem_substr&#39;vc.0.2" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="1.36" steps="584817"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_scal_add&#39;vc" expl="VC for path_sem_scal_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_scal_add&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="path_sem_scal_add&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="path_sem_scal_add&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="2.09" steps="745661"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="pat_sem_apply_basis_value&#39;vc" expl="VC for pat_sem_apply_basis_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pat_sem_apply_basis_value&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="pat_sem_apply_basis_value&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="get_path_sem_basis">
    <goal name="pat_sem_apply_basis_value&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="path_sem_basis&#39;spec">
     <goal name="pat_sem_apply_basis_value&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="pps_apply_basis_value">
      <goal name="pat_sem_apply_basis_value&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="pat_sem_apply_basis_value&#39;vc.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="mult_eq_t">
        <goal name="pat_sem_apply_basis_value&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.56" steps="671948"/></proof>
        </goal>
        <goal name="pat_sem_apply_basis_value&#39;vc.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="sum_eq_gen">
         <goal name="pat_sem_apply_basis_value&#39;vc.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.69" steps="671948"/></proof>
         </goal>
         <goal name="pat_sem_apply_basis_value&#39;vc.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="pat_sem_apply_basis_value&#39;vc.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="pat_sem_apply_basis_value&#39;vc.0.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="mult_eq_t">
            <goal name="pat_sem_apply_basis_value&#39;vc.0.0.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="2.60" steps="874846"/></proof>
            </goal>
            <goal name="pat_sem_apply_basis_value&#39;vc.0.0.0.0.0.0.1.1.0.0.1" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="4.69" steps="992270"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="pat_sem_apply_basis_value&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.83" steps="671998"/></proof>
      </goal>
      <goal name="pat_sem_apply_basis_value&#39;vc.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.92" steps="671983"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="pat_sem_apply_basis_value&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.86" steps="670889"/></proof>
     </goal>
     <goal name="pat_sem_apply_basis_value&#39;vc.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.85" steps="670873"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="pat_sem_apply_basis_value&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.94" steps="670889"/></proof>
    </goal>
    <goal name="pat_sem_apply_basis_value&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.88" steps="670873"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_scal_substr&#39;vc" expl="VC for path_sem_scal_substr" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_scal_substr&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="path_sem_scal">
   <goal name="path_sem_scal_substr&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.59" steps="582161"/></proof>
   </goal>
   <goal name="path_sem_scal_substr&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="2.20" steps="648234"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_sum&#39;vc" expl="VC for path_sem_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_sum&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.13" steps="771703"/></proof>
  </goal>
  <goal name="path_sem_sum&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.12" steps="774425"/></proof>
  </goal>
  <goal name="path_sem_sum&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.59" steps="702456"/></proof>
  </goal>
  <goal name="path_sem_sum&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.45" steps="778193"/></proof>
  </goal>
  <goal name="path_sem_sum&#39;vc.4" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.58" steps="779651"/></proof>
  </goal>
  <goal name="path_sem_sum&#39;vc.5" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.66" steps="705589"/></proof>
  </goal>
  <goal name="path_sem_sum&#39;vc.6" expl="variant decrease" proved="true">
  <proof prover="8"><result status="valid" time="2.55" steps="780215"/></proof>
  </goal>
  <goal name="path_sem_sum&#39;vc.7" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.40" steps="780172"/></proof>
  </goal>
  <goal name="path_sem_sum&#39;vc.8" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.03" steps="665405"/></proof>
  </goal>
  <goal name="path_sem_sum&#39;vc.9" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.35" steps="778885"/></proof>
  </goal>
  <goal name="path_sem_sum&#39;vc.10" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.36" steps="779185"/></proof>
  </goal>
  <goal name="path_sem_sum&#39;vc.11" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.81"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_sum_diag&#39;vc" expl="VC for path_sem_sum_diag" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_sum_diag&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ket_sum_l_diag&#39;def">
   <goal name="path_sem_sum_diag&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Requires1">
    <goal name="path_sem_sum_diag&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="path_sem_sum">
     <goal name="path_sem_sum_diag&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.64"/></proof>
     </goal>
     <goal name="path_sem_sum_diag&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="0.79" steps="539516"/></proof>
     </goal>
     <goal name="path_sem_sum_diag&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="3.64" steps="770513"/></proof>
     </goal>
     <goal name="path_sem_sum_diag&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="4.14" steps="773093"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="path_sem_sum_diag&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="1.95" steps="646398"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_sum_&#39;vc" expl="VC for path_sem_sum_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_sum_&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="path_sem_sum">
   <goal name="path_sem_sum_&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="0.94" steps="661985"/></proof>
   </goal>
   <goal name="path_sem_sum_&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.09" steps="661985"/></proof>
   </goal>
   <goal name="path_sem_sum_&#39;vc.0.2" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.69" steps="701519"/></proof>
   </goal>
   <goal name="path_sem_sum_&#39;vc.0.3" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.79" steps="702206"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_sum_gen&#39;vc" expl="VC for path_sem_sum_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_sum_gen&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="path_sem_sum">
   <goal name="path_sem_sum_gen&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.10" steps="662796"/></proof>
   </goal>
   <goal name="path_sem_sum_gen&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.06" steps="662796"/></proof>
   </goal>
   <goal name="path_sem_sum_gen&#39;vc.0.2" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.75" steps="702336"/></proof>
   </goal>
   <goal name="path_sem_sum_gen&#39;vc.0.3" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.70" steps="702350"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="scal_path_sem_sum_gen&#39;vc" expl="VC for scal_path_sem_sum_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="scal_path_sem_sum_gen&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="scalar_eq_gen">
   <goal name="scal_path_sem_sum_gen&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="rewrite" proved="true" arg1="Requires">
    <goal name="scal_path_sem_sum_gen&#39;vc.0.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="path_sem_sum">
     <goal name="scal_path_sem_sum_gen&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.12" steps="663553"/></proof>
     </goal>
     <goal name="scal_path_sem_sum_gen&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="0.97" steps="675798"/></proof>
     </goal>
     <goal name="scal_path_sem_sum_gen&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.74" steps="703114"/></proof>
     </goal>
     <goal name="scal_path_sem_sum_gen&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.72" steps="703128"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="scal_path_sem_sum_gen&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.06" steps="663553"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="scal_path_sem_sum&#39;vc" expl="VC for scal_path_sem_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="scal_path_sem_sum&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="scal_path_sem_sum_gen">
   <goal name="scal_path_sem_sum&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.03" steps="664446"/></proof>
   </goal>
   <goal name="scal_path_sem_sum&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.12" steps="664446"/></proof>
   </goal>
   <goal name="scal_path_sem_sum&#39;vc.0.2" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.60" steps="703999"/></proof>
   </goal>
   <goal name="scal_path_sem_sum&#39;vc.0.3" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.98" steps="704686"/></proof>
   </goal>
   <goal name="scal_path_sem_sum&#39;vc.0.4" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="0.97" steps="664444"/></proof>
   </goal>
   <goal name="scal_path_sem_sum&#39;vc.0.5" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="0.99" steps="664444"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_scal_sum&#39;vc" expl="VC for path_sem_scal_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_scal_sum&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="path_sem_scal">
   <goal name="path_sem_scal_sum&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="scal_path_sem_sum">
    <goal name="path_sem_scal_sum&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
    <goal name="path_sem_scal_sum&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.97" steps="665242"/></proof>
    </goal>
    <goal name="path_sem_scal_sum&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.96" steps="665242"/></proof>
    </goal>
    <goal name="path_sem_scal_sum&#39;vc.0.0.3" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.73" steps="704800"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="path_sem_scal_sum&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="2.35" steps="779489"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_comp_basis&#39;vc" expl="VC for path_sem_comp_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_comp_basis&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="path_sem_apply">
   <goal name="path_sem_comp_basis&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="path_sem_basis_apply">
    <goal name="path_sem_comp_basis&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="path_sem_basis_apply">
     <goal name="path_sem_comp_basis&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="circ_to_pps_sequence">
      <goal name="path_sem_comp_basis&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="8"><result status="valid" time="2.05" steps="651627"/></proof>
      </goal>
      <goal name="path_sem_comp_basis&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.72" steps="542064"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="path_sem_comp_basis&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.75" steps="542064"/></proof>
     </goal>
     <goal name="path_sem_comp_basis&#39;vc.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.90" steps="542064"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="path_sem_comp_basis&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.43" steps="584994"/></proof>
    </goal>
    <goal name="path_sem_comp_basis&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.88" steps="542064"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="path_sem_comp_basis&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="1.57" steps="580525"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_comp_pre&#39;vc" expl="VC for path_sem_comp_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_comp_pre&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="path_sem&#39;def">
   <goal name="path_sem_comp_pre&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="path_sem&#39;def" arg2="d,x">
    <goal name="path_sem_comp_pre&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Hinst">
     <goal name="path_sem_comp_pre&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="goal_comm">
      <goal name="path_sem_comp_pre&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(width (sequence d e))" arg2="(width d)">
       <goal name="path_sem_comp_pre&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="path_sem_sum_gen">
        <goal name="path_sem_comp_pre&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="10"><result status="valid" time="1.55" steps="64695"/></proof>
        </goal>
        <goal name="path_sem_comp_pre&#39;vc.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="0.88" steps="542346"/></proof>
        </goal>
        <goal name="path_sem_comp_pre&#39;vc.0.0.0.0.0.0.2" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="path_sem_comp_pre&#39;vc.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="path_sem_comp_pre&#39;vc.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="2.25" steps="740152"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="path_sem_comp_pre&#39;vc.0.0.0.0.0.0.3" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="path_sem_comp_pre&#39;vc.0.0.0.0.0.0.3.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="path_sem_comp_pre&#39;vc.0.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
          <transf name="eliminate_if" proved="true" >
           <goal name="path_sem_comp_pre&#39;vc.0.0.0.0.0.0.3.0.0.0" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="path_sem_comp_pre&#39;vc.0.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="path_sem_comp_basis">
             <goal name="path_sem_comp_pre&#39;vc.0.0.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="2.30" steps="750112"/></proof>
             </goal>
             <goal name="path_sem_comp_pre&#39;vc.0.0.0.0.0.0.3.0.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="1.83" steps="668921"/></proof>
             </goal>
             <goal name="path_sem_comp_pre&#39;vc.0.0.0.0.0.0.3.0.0.0.0.2" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="1.86" steps="668905"/></proof>
             </goal>
             <goal name="path_sem_comp_pre&#39;vc.0.0.0.0.0.0.3.0.0.0.0.3" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="0.82" steps="627952"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="path_sem_comp_pre&#39;vc.0.0.0.0.0.0.3.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="1.05" steps="628820"/></proof>
            </goal>
            <goal name="path_sem_comp_pre&#39;vc.0.0.0.0.0.0.3.0.0.0.2" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="1.01" steps="628826"/></proof>
            </goal>
            <goal name="path_sem_comp_pre&#39;vc.0.0.0.0.0.0.3.0.0.0.3" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="0.73"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="path_sem_comp_pre&#39;vc.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="8"><result status="valid" time="1.54" steps="580801"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="path_sem_comp_pre&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.91" steps="542346"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="path_sem_comp_pre&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="1.59" steps="584948"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_comp&#39;vc" expl="VC for path_sem_comp" proved="true">
 <proof prover="8"><result status="valid" time="1.40" steps="580220"/></proof>
 </goal>
 <goal name="path_sem_comp_&#39;vc" expl="VC for path_sem_comp_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_comp_&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.54" steps="580888"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="sem_comp&#39;vc" expl="VC for sem_comp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sem_comp&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="5.08" steps="1209402"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_kron_basis&#39;vc" expl="VC for path_sem_kron_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_kron_basis&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="path_sem_basis_apply">
   <goal name="path_sem_kron_basis&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="path_sem_basis_apply">
    <goal name="path_sem_kron_basis&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="circ_to_pps_parallel">
     <goal name="path_sem_kron_basis&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="path_sem_basis_apply">
      <goal name="path_sem_kron_basis&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="8"><result status="valid" time="3.59" steps="671491"/></proof>
      </goal>
      <goal name="path_sem_kron_basis&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.75" steps="542748"/></proof>
      </goal>
      <goal name="path_sem_kron_basis&#39;vc.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.89" steps="542748"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="path_sem_kron_basis&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.85" steps="542748"/></proof>
    </goal>
    <goal name="path_sem_kron_basis&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.88" steps="542748"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="path_sem_kron_basis&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="1.90" steps="652420"/></proof>
   </goal>
   <goal name="path_sem_kron_basis&#39;vc.0.2" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="1.44" steps="581106"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_kron_pre&#39;vc" expl="VC for path_sem_kron_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_kron_pre&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="path_sem_apply">
   <goal name="path_sem_kron_pre&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="path_sem_apply">
    <goal name="path_sem_kron_pre&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="path_sem_apply">
     <goal name="path_sem_kron_pre&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="circ_to_pps_parallel">
      <goal name="path_sem_kron_pre&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="8"><result status="valid" time="2.01" steps="653841"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="path_sem_kron_pre&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.89" steps="542886"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="path_sem_kron_pre&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.70" steps="542886"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="path_sem_kron_pre&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="2.06" steps="651827"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_kron&#39;vc" expl="VC for path_sem_kron" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_kron&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.50" steps="581409"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_kron_&#39;vc" expl="VC for path_sem_kron_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_kron_&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.50" steps="581567"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_sequence_parallel_basis&#39;vc" expl="VC for path_sem_sequence_parallel_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_sequence_parallel_basis&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="path_sem_sequence_parallel_basis&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="path_sem_sequence_parallel_basis&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="path_sem_comp_">
     <goal name="path_sem_sequence_parallel_basis&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="x" arg2="(kronecker (bv_to_ket (hpart (ket_to_bv x) (width d)))  (bv_to_ket (tpart (ket_to_bv x) (width d))) )">
      <goal name="path_sem_sequence_parallel_basis&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="path_sem_kron_">
       <goal name="path_sem_sequence_parallel_basis&#39;vc.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="path_sem_kron_">
        <goal name="path_sem_sequence_parallel_basis&#39;vc.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="path_sem_kron_">
         <goal name="path_sem_sequence_parallel_basis&#39;vc.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <proof prover="0"><result status="valid" time="4.26"/></proof>
         </goal>
         <goal name="path_sem_sequence_parallel_basis&#39;vc.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="2.38" steps="761012"/></proof>
         </goal>
         <goal name="path_sem_sequence_parallel_basis&#39;vc.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="3.85"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="path_sem_sequence_parallel_basis&#39;vc.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="2.60" steps="761052"/></proof>
        </goal>
        <goal name="path_sem_sequence_parallel_basis&#39;vc.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="4.42"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="path_sem_sequence_parallel_basis&#39;vc.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="2.56" steps="760795"/></proof>
       </goal>
       <goal name="path_sem_sequence_parallel_basis&#39;vc.0.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="4.64"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="path_sem_sequence_parallel_basis&#39;vc.0.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="8"><result status="valid" time="2.53" steps="762871"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="path_sem_sequence_parallel_basis&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="3.76"/></proof>
     </goal>
     <goal name="path_sem_sequence_parallel_basis&#39;vc.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="2.51" steps="760806"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_sequence_parallel&#39;vc" expl="VC for path_sem_sequence_parallel" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_sequence_parallel&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="get_path_sem">
   <goal name="path_sem_sequence_parallel&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="get_path_sem">
    <goal name="path_sem_sequence_parallel&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
     <goal name="path_sem_sequence_parallel&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="2.05" steps="651396"/></proof>
     </goal>
     <goal name="path_sem_sequence_parallel&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.73"/></proof>
     </goal>
     <goal name="path_sem_sequence_parallel&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="2.10" steps="657133"/></proof>
     </goal>
     <goal name="path_sem_sequence_parallel&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="path_sem_sequence_parallel&#39;vc.0.0.0.3.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="path_sem_sequence_parallel&#39;vc.0.0.0.3.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="set_path_sem_basis">
        <goal name="path_sem_sequence_parallel&#39;vc.0.0.0.3.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="set_path_sem_basis">
         <goal name="path_sem_sequence_parallel&#39;vc.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="path_sem_sequence_parallel_basis">
          <goal name="path_sem_sequence_parallel&#39;vc.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="0.88" steps="620016"/></proof>
          </goal>
          <goal name="path_sem_sequence_parallel&#39;vc.0.0.0.3.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.90"/></proof>
          </goal>
          <goal name="path_sem_sequence_parallel&#39;vc.0.0.0.3.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="1.03" steps="620018"/></proof>
          </goal>
          <goal name="path_sem_sequence_parallel&#39;vc.0.0.0.3.0.0.0.0.3" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="0.88" steps="620018"/></proof>
          </goal>
          <goal name="path_sem_sequence_parallel&#39;vc.0.0.0.3.0.0.0.0.4" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="1.53" steps="659082"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="path_sem_sequence_parallel&#39;vc.0.0.0.3.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.87"/></proof>
         </goal>
         <goal name="path_sem_sequence_parallel&#39;vc.0.0.0.3.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="1.52" steps="659082"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="path_sem_sequence_parallel&#39;vc.0.0.0.3.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="2.31" steps="731003"/></proof>
        </goal>
        <goal name="path_sem_sequence_parallel&#39;vc.0.0.0.3.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="1.52" steps="659082"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="path_sem_sequence_parallel&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="0.80"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="path_sem_sequence_parallel&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="0.80"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_id_basis&#39;vc" expl="VC for path_sem_id_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_id_basis&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="path_sem_id_basis&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="path_sem_id_basis&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="path_sem_basis&#39;def">
     <goal name="path_sem_id_basis&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="scalar_c_one_gen">
      <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="ket_sum_l_cardone">
       <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="scalar_c_one_gen">
         <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="replace" proved="true" arg1="( (make_bv
   (fun (y3:int) -&gt;
     basis_ket id (getbv (ket_to_bv x)) (getbv (choose (n_bvs (range id))))
     y3)
   (width id)))" arg2="(ket_to_bv x)">
          <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <proof prover="8"><result status="valid" time="1.59" steps="582835"/></proof>
          </goal>
          <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="set_equal_bv">
           <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="make_bv_length">
            <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="2.13" steps="653980"/></proof>
            </goal>
            <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.0" expl="rewrite premises" proved="true">
              <transf name="split_all_full" proved="true" >
               <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.0.0" expl="rewrite premises" proved="true">
               <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
                <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.0.0.0" expl="rewrite premises" proved="true">
                <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                 <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.63" steps="795943"/></proof>
                 </goal>
                 <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.0.0.0.1" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.06" steps="735785"/></proof>
                 </goal>
                 <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.0.0.0.2" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.83" steps="691999"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.1" expl="rewrite premises" proved="true">
              <transf name="split_all_full" proved="true" >
               <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.1.0" expl="rewrite premises" proved="true">
               <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
                <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.1.0.0" expl="rewrite premises" proved="true">
                <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                 <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.1.0.0.0" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.62" steps="795943"/></proof>
                 </goal>
                 <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.1.0.0.1" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.97" steps="735785"/></proof>
                 </goal>
                 <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.1.0.0.2" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.85" steps="691999"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="0.82" steps="555185"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
             <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="1.73" steps="699341"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.0" expl="rewrite premises" proved="true">
              <transf name="split_all_full" proved="true" >
               <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.0.0" expl="rewrite premises" proved="true">
               <transf name="compute_specified" proved="true" >
                <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.0.0.0" expl="rewrite premises" proved="true">
                <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
                 <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.0.0.0.0" expl="rewrite premises" proved="true">
                 <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                  <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="3.10" steps="915911"/></proof>
                  </goal>
                  <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.0.0.0.0.1" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.38" steps="838916"/></proof>
                  </goal>
                  <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.0.0.0.0.2" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.98" steps="838754"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.1" expl="rewrite premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.1.0" expl="rewrite premises" proved="true">
               <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
                <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.1.0.0" expl="rewrite premises" proved="true">
                <transf name="split_all_full" proved="true" >
                 <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.1.0.0.0" expl="rewrite premises" proved="true">
                 <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                  <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="3.07" steps="915911"/></proof>
                  </goal>
                  <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.1.0.0.0.1" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.34" steps="838916"/></proof>
                  </goal>
                  <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.1.0.0.0.2" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.27" steps="838754"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2" expl="rewrite premises" proved="true">
             <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
              <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.0" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="0.74" steps="543461"/></proof>
              </goal>
              <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1" expl="rewrite premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.0" expl="rewrite premises" proved="true">
               <transf name="split_all_full" proved="true" >
                <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.0.0" expl="rewrite premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.0.0.0" expl="rewrite premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
                  <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.0.0.0.0" expl="rewrite premises" proved="true">
                  <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                   <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.0.0.0.0.0" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.96" steps="915911"/></proof>
                   </goal>
                   <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.0.0.0.0.1" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.26" steps="838916"/></proof>
                   </goal>
                   <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.0.0.0.0.2" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.00" steps="838754"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.1" expl="rewrite premises" proved="true">
               <transf name="compute_specified" proved="true" >
                <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.1.0" expl="rewrite premises" proved="true">
                <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
                 <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.1.0.0" expl="rewrite premises" proved="true">
                 <transf name="split_all_full" proved="true" >
                  <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.1.0.0.0" expl="rewrite premises" proved="true">
                  <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                   <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.1.0.0.0.0" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.61" steps="915911"/></proof>
                   </goal>
                   <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.1.0.0.0.1" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.38" steps="838916"/></proof>
                   </goal>
                   <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.1.0.0.0.2" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="1.99" steps="838754"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.2" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="1.13" steps="670822"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="1.60" steps="618701"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="0.98" steps="555185"/></proof>
       </goal>
       <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="2.17" steps="700339"/></proof>
       </goal>
       <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.3" expl="rewrite premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.3.0" expl="rewrite premises" proved="true">
        <transf name="apply" proved="true" arg1="scalar_ket_l">
         <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
          <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="make_bv_length">
           <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="0.76" steps="543425"/></proof>
           </goal>
           <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.3.0.0.0.1" expl="rewrite premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.0" expl="rewrite premises" proved="true">
            <transf name="split_all_full" proved="true" >
             <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.0.0" expl="rewrite premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.0.0.0" expl="rewrite premises" proved="true">
              <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
               <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.0.0.0.0" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="2.65" steps="795943"/></proof>
                </goal>
                <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="1.79" steps="735785"/></proof>
                </goal>
                <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.0.0.0.0.2" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="1.67" steps="691999"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.1" expl="rewrite premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.1.0" expl="rewrite premises" proved="true">
             <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
              <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.1.0.0" expl="rewrite premises" proved="true">
              <transf name="split_all_full" proved="true" >
               <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.1.0.0.0" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="2.66" steps="795943"/></proof>
                </goal>
                <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.1.0.0.0.1" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="2.09" steps="735785"/></proof>
                </goal>
                <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.1.0.0.0.2" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="1.84" steps="691999"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="path_sem_id_basis&#39;vc.0.0.0.0.0.3.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="0.87" steps="555185"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="path_sem_id_basis&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="2.93" steps="664660"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="path_sem_id_basis&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.25" steps="582114"/></proof>
     </goal>
     <goal name="path_sem_id_basis&#39;vc.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.74" steps="543427"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_id&#39;vc" expl="VC for path_sem_id" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_id&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="get_path_sem">
   <goal name="path_sem_id&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="ket_decomp_" arg2="x">
    <goal name="path_sem_id&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="( ket_sum_l (n_bvs (width id))
  (fun (y:bitvec) -&gt;
    get_ket x (bv_to_int y) *.. path_sem_basis id (bv_to_ket y))
  (width id))" arg2="(ket_sum_l (n_bvs 1)
     (fun (bvx:bitvec) -&gt; get_ket x (bv_to_int bvx) *.. bv_to_ket bvx) 1)">
     <goal name="path_sem_id&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="8"><result status="valid" time="2.22" steps="717351"/></proof>
     </goal>
     <goal name="path_sem_id&#39;vc.0.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
      <goal name="path_sem_id&#39;vc.0.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="0.87" steps="555502"/></proof>
      </goal>
      <goal name="path_sem_id&#39;vc.0.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="0.84" steps="555502"/></proof>
      </goal>
      <goal name="path_sem_id&#39;vc.0.0.0.1.2" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="0.79" steps="544029"/></proof>
      </goal>
      <goal name="path_sem_id&#39;vc.0.0.0.1.3" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="path_sem_id&#39;vc.0.0.0.1.3.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="path_sem_id&#39;vc.0.0.0.1.3.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="2.16" steps="740104"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="path_sem_id&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="1.33" steps="581421"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_phase_basis&#39;vc" expl="VC for path_sem_phase_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_phase_basis&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="path_sem_phase_basis&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="get_path_sem_basis">
    <goal name="path_sem_phase_basis&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="path_sem_basis&#39;def">
     <goal name="path_sem_phase_basis&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="scalar_c_one_gen">
      <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="ket_sum_l_cardone">
       <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="apply" proved="true" arg1="scalar_eq_gen">
         <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(make_bv
   (fun (y3:int) -&gt;
     basis_ket (phase k) (getbv (ket_to_bv x))
     (getbv (choose (n_bvs (range (phase k))))) y3)
   (width (phase k)))" arg2="(ket_to_bv x)">
          <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.41" steps="582929"/></proof>
          </goal>
          <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="set_equal_bv">
           <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="make_bv_length">
            <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="1.90" steps="654885"/></proof>
            </goal>
            <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.0" expl="rewrite premises" proved="true">
              <transf name="split_all_full" proved="true" >
               <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.0.0" expl="rewrite premises" proved="true">
               <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
                <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.0.0.0" expl="rewrite premises" proved="true">
                <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                 <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.36" steps="797123"/></proof>
                 </goal>
                 <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.0.0.0.1" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.81" steps="737402"/></proof>
                 </goal>
                 <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.0.0.0.2" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.92" steps="693600"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.1" expl="rewrite premises" proved="true">
              <transf name="split_all_full" proved="true" >
               <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.1.0" expl="rewrite premises" proved="true">
               <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
                <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.1.0.0" expl="rewrite premises" proved="true">
                <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                 <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.1.0.0.0" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.59" steps="797123"/></proof>
                 </goal>
                 <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.1.0.0.1" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.74" steps="737402"/></proof>
                 </goal>
                 <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.1.0.0.2" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.66" steps="693600"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="1.61" steps="588229"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
             <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="2.00" steps="699444"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.0" expl="rewrite premises" proved="true">
              <transf name="split_all_full" proved="true" >
               <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.0.0" expl="rewrite premises" proved="true">
               <transf name="compute_specified" proved="true" >
                <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.0.0.0" expl="rewrite premises" proved="true">
                <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
                 <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.0.0.0.0" expl="rewrite premises" proved="true">
                 <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                  <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="3.07" steps="917186"/></proof>
                  </goal>
                  <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.0.0.0.0.1" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.40" steps="840545"/></proof>
                  </goal>
                  <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.0.0.0.0.2" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.48" steps="840394"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.1" expl="rewrite premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.1.0" expl="rewrite premises" proved="true">
               <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
                <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.1.0.0" expl="rewrite premises" proved="true">
                <transf name="split_all_full" proved="true" >
                 <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.1.0.0.0" expl="rewrite premises" proved="true">
                 <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                  <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="3.10" steps="917186"/></proof>
                  </goal>
                  <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.1.0.0.0.1" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.41" steps="840545"/></proof>
                  </goal>
                  <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.1.0.0.0.2" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.41" steps="840394"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2" expl="rewrite premises" proved="true">
             <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
              <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.0" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="0.76" steps="543601"/></proof>
              </goal>
              <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1" expl="rewrite premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.0" expl="rewrite premises" proved="true">
               <transf name="split_all_full" proved="true" >
                <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.0.0" expl="rewrite premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.0.0.0" expl="rewrite premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
                  <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.0.0.0.0" expl="rewrite premises" proved="true">
                  <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                   <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.0.0.0.0.0" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.71" steps="917186"/></proof>
                   </goal>
                   <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.0.0.0.0.1" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.13" steps="840545"/></proof>
                   </goal>
                   <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.0.0.0.0.2" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.45" steps="840394"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.1" expl="rewrite premises" proved="true">
               <transf name="compute_specified" proved="true" >
                <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.1.0" expl="rewrite premises" proved="true">
                <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
                 <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.1.0.0" expl="rewrite premises" proved="true">
                 <transf name="split_all_full" proved="true" >
                  <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.1.0.0.0" expl="rewrite premises" proved="true">
                  <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                   <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.1.0.0.0.0" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="3.10" steps="917186"/></proof>
                   </goal>
                   <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.1.0.0.0.1" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.45" steps="840545"/></proof>
                   </goal>
                   <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.1.0.0.0.2" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.44" steps="840394"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.2" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="1.98" steps="704690"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.74" steps="618824"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="1.36" steps="588206"/></proof>
       </goal>
       <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="2.32" steps="700689"/></proof>
       </goal>
       <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.3" expl="rewrite premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.3.0" expl="rewrite premises" proved="true">
        <transf name="apply" proved="true" arg1="scalar_ket_l">
         <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
          <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="make_bv_length">
           <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="0.76" steps="543557"/></proof>
           </goal>
           <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.3.0.0.0.1" expl="rewrite premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.0" expl="rewrite premises" proved="true">
            <transf name="split_all_full" proved="true" >
             <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.0.0" expl="rewrite premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.0.0.0" expl="rewrite premises" proved="true">
              <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
               <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.0.0.0.0" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="2.65" steps="797123"/></proof>
                </goal>
                <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="2.15" steps="737402"/></proof>
                </goal>
                <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.0.0.0.0.2" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="1.94" steps="693600"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.1" expl="rewrite premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.1.0" expl="rewrite premises" proved="true">
             <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
              <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.1.0.0" expl="rewrite premises" proved="true">
              <transf name="split_all_full" proved="true" >
               <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.1.0.0.0" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="2.58" steps="797123"/></proof>
                </goal>
                <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.1.0.0.0.1" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="2.04" steps="737402"/></proof>
                </goal>
                <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.1.0.0.0.2" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="1.92" steps="693600"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.0.3.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="1.58" steps="588229"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="path_sem_phase_basis&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="3.15" steps="665143"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="path_sem_phase_basis&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.41" steps="588234"/></proof>
     </goal>
     <goal name="path_sem_phase_basis&#39;vc.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.73" steps="543559"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="path_sem_phase_basis&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.70" steps="588234"/></proof>
    </goal>
    <goal name="path_sem_phase_basis&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.95" steps="543559"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_phase_basis_inv&#39;vc" expl="VC for path_sem_phase_basis_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_phase_basis_inv&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="goal_comm">
   <goal name="path_sem_phase_basis_inv&#39;vc.0.0" expl="apply premises" proved="true">
   <transf name="replace" proved="true" arg1="(path_sem (phase (- k)) x)" arg2="(ang_exp (1/./(-k)) *.. x)">
    <goal name="path_sem_phase_basis_inv&#39;vc.0.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="path_sem_scal">
     <goal name="path_sem_phase_basis_inv&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="path_sem_phase_basis">
      <goal name="path_sem_phase_basis_inv&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="scalar_assoc">
       <goal name="path_sem_phase_basis_inv&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="scalar_c_one_gen">
        <goal name="path_sem_phase_basis_inv&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="0.91" steps="543940"/></proof>
        </goal>
        <goal name="path_sem_phase_basis_inv&#39;vc.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="ang_exp_mult">
         <goal name="path_sem_phase_basis_inv&#39;vc.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
         <transf name="replace" proved="true" arg1="(1 /./ (- k))" arg2="(ang_inv (1 /./ (k)))">
          <goal name="path_sem_phase_basis_inv&#39;vc.0.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="1.54" steps="586417"/></proof>
          </goal>
          <goal name="path_sem_phase_basis_inv&#39;vc.0.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
          <transf name="replace" proved="true" arg1="(1 /./ (- k))" arg2="((-1)/./k)">
           <goal name="path_sem_phase_basis_inv&#39;vc.0.0.0.0.0.0.1.0.1.0" expl="equality hypothesis" proved="true">
           <transf name="eliminate_definition" proved="true" >
            <goal name="path_sem_phase_basis_inv&#39;vc.0.0.0.0.0.0.1.0.1.0.0" expl="equality hypothesis" proved="true">
            <proof prover="8"><result status="valid" time="2.01" steps="653817"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="path_sem_phase_basis_inv&#39;vc.0.0.0.0.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
           <proof prover="8"><result status="valid" time="2.01" steps="653689"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="path_sem_phase_basis_inv&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.78" steps="543942"/></proof>
      </goal>
      <goal name="path_sem_phase_basis_inv&#39;vc.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.74" steps="543942"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="path_sem_phase_basis_inv&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.32" steps="586450"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="path_sem_phase_basis_inv&#39;vc.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="8"><result status="valid" time="1.30" steps="582216"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_phase_inv&#39;vc" expl="VC for path_sem_phase_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_phase_inv&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.72" steps="544048"/></proof>
  </goal>
  <goal name="path_sem_phase_inv&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.32" steps="582264"/></proof>
  </goal>
  <goal name="path_sem_phase_inv&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.57" steps="582254"/></proof>
  </goal>
  <goal name="path_sem_phase_inv&#39;vc.3" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="path_sem_phase_inv&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="path_sem_phase_inv&#39;vc.3.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(path_sem (phase k) (path_sem (phase (- k)) x) )" arg2="(ket_sum_l (n_bvs 1)
    (fun (bvx:bitvec) -&gt; get_ket x (bv_to_int bvx) *.. bv_to_ket bvx) 1)">
     <goal name="path_sem_phase_inv&#39;vc.3.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="goal_comm">
      <goal name="path_sem_phase_inv&#39;vc.3.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="Ensures">
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="path_sem_phase_inv&#39;vc.3.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="get_path_sem">
      <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
       <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="2.02" steps="762969"/></proof>
       </goal>
       <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.1" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.91" steps="762967"/></proof>
       </goal>
       <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.2" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="2.06" steps="762165"/></proof>
       </goal>
       <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="get_path_sem">
          <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
           <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="scalar_ket_value">
             <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="instantiate" proved="true" arg1="sum_null_but_maybe_one_elt" arg2="(fun (e1:bitvec) -&gt;
     get_ket x (bv_to_int e1)
     *. get_ket (path_sem_basis (phase (- k)) (bv_to_ket e1)) (bv_to_int a)),(n_bvs (width (phase (- k)))),a">
              <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="Hinst">
               <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="compute_specified" proved="true" >
                <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="set_path_sem_basis">
                 <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="path_sem_phase_basis">
                  <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="set_path_sem_basis">
                   <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="path_sem_phase_basis">
                    <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="apply" proved="true" arg1="goal_comm">
                     <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="scalar_ket_value">
                      <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="scalar_assoc">
                       <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                       <transf name="apply" proved="true" arg1="scalar_eq_gen">
                        <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                        <proof prover="8"><result status="valid" time="1.32" steps="784983"/></proof>
                        </goal>
                        <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                        <transf name="assert" proved="true" arg1="(forall a b c d. a*. (b*.c) *. d = a*. ((b*.d) *.c))">
                         <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
                         <proof prover="8"><result status="valid" time="2.84" steps="907920"/></proof>
                         </goal>
                         <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
                         <transf name="rewrite" proved="true" arg1="h">
                          <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                          <transf name="rewrite" proved="true" arg1="mult_one_t">
                           <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                           <proof prover="8"><result status="valid" time="1.10" steps="785056"/></proof>
                           </goal>
                           <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
                           <transf name="rewrite" proved="true" arg1="one_mult_t">
                            <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1.0.1.0" expl="rewrite premises" proved="true">
                            <proof prover="8"><result status="valid" time="2.95" steps="904337"/></proof>
                            </goal>
                            <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1.0.1.1" expl="rewrite premises" proved="true">
                            <proof prover="8"><result status="valid" time="2.94" steps="907017"/></proof>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                    <proof prover="8"><result status="valid" time="3.03" steps="904042"/></proof>
                    </goal>
                    <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.32" steps="829096"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.60" steps="904113"/></proof>
                   </goal>
                   <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.03" steps="829096"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.69" steps="904042"/></proof>
                  </goal>
                  <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.38" steps="829096"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="3.02" steps="904121"/></proof>
                 </goal>
                 <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.33" steps="829096"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="2.29" steps="829929"/></proof>
               </goal>
               <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
                 <transf name="apply" proved="true" arg1="mult_zero_t">
                  <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="set_path_sem_basis">
                   <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="path_sem_phase_basis">
                    <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="scalar_ket_value">
                     <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="apply" proved="true" arg1="mult_zero_t">
                      <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                      <proof prover="8"><result status="valid" time="3.78" steps="923674"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.71" steps="904645"/></proof>
                    </goal>
                    <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.34" steps="829138"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.75" steps="904731"/></proof>
                   </goal>
                   <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.2.0.0.0.2" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.33" steps="829138"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="2.10" steps="829232"/></proof>
           </goal>
           <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="2.77" steps="901434"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.0.3.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="2.34" steps="829230"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="path_sem_phase_inv&#39;vc.3.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="2.44" steps="833711"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_rz_basis&#39;vc" expl="VC for path_sem_rz_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_rz_basis&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="path_sem_rz_basis&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="get_path_sem_basis">
    <goal name="path_sem_rz_basis&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="path_sem_basis&#39;def">
     <goal name="path_sem_rz_basis&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="scalar_c_one_gen">
      <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="ket_sum_l_cardone">
       <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="apply" proved="true" arg1="scalar_eq_gen">
         <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(make_bv
   (fun (y3:int) -&gt;
     basis_ket (rz k) (getbv (ket_to_bv x))
     (getbv (choose (n_bvs (range (rz k))))) y3)
   (width (rz k)))" arg2="(ket_to_bv x)
">
          <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.44" steps="583156"/></proof>
          </goal>
          <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="set_equal_bv">
           <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="make_bv_length">
            <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="1.85" steps="655097"/></proof>
            </goal>
            <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.0" expl="rewrite premises" proved="true">
              <transf name="split_all_full" proved="true" >
               <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.0.0" expl="rewrite premises" proved="true">
               <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
                <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.0.0.0" expl="rewrite premises" proved="true">
                <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                 <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.59" steps="797413"/></proof>
                 </goal>
                 <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.0.0.0.1" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.06" steps="737643"/></proof>
                 </goal>
                 <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.0.0.0.2" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.64" steps="693846"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.1" expl="rewrite premises" proved="true">
              <transf name="split_all_full" proved="true" >
               <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.1.0" expl="rewrite premises" proved="true">
               <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
                <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.1.0.0" expl="rewrite premises" proved="true">
                <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                 <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.1.0.0.0" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.32" steps="797413"/></proof>
                 </goal>
                 <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.1.0.0.1" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.88" steps="737643"/></proof>
                 </goal>
                 <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.1.0.1.0.0.2" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.72" steps="693846"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="1.39" steps="588496"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
             <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="1.72" steps="699740"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.0" expl="rewrite premises" proved="true">
              <transf name="split_all_full" proved="true" >
               <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.0.0" expl="rewrite premises" proved="true">
               <transf name="compute_specified" proved="true" >
                <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.0.0.0" expl="rewrite premises" proved="true">
                <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
                 <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.0.0.0.0" expl="rewrite premises" proved="true">
                 <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                  <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="3.10" steps="917482"/></proof>
                  </goal>
                  <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.0.0.0.0.1" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.12" steps="840841"/></proof>
                  </goal>
                  <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.0.0.0.0.2" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.19" steps="840690"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.1" expl="rewrite premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.1.0" expl="rewrite premises" proved="true">
               <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
                <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.1.0.0" expl="rewrite premises" proved="true">
                <transf name="split_all_full" proved="true" >
                 <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.1.0.0.0" expl="rewrite premises" proved="true">
                 <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                  <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="3.13" steps="917482"/></proof>
                  </goal>
                  <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.1.0.0.0.1" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.43" steps="840841"/></proof>
                  </goal>
                  <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.1.1.0.0.0.2" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.39" steps="840690"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2" expl="rewrite premises" proved="true">
             <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
              <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.0" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="0.79" steps="543894"/></proof>
              </goal>
              <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1" expl="rewrite premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.0" expl="rewrite premises" proved="true">
               <transf name="split_all_full" proved="true" >
                <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.0.0" expl="rewrite premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.0.0.0" expl="rewrite premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
                  <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.0.0.0.0" expl="rewrite premises" proved="true">
                  <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                   <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.0.0.0.0.0" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="3.04" steps="917482"/></proof>
                   </goal>
                   <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.0.0.0.0.1" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.42" steps="840841"/></proof>
                   </goal>
                   <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.0.0.0.0.2" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.32" steps="840690"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.1" expl="rewrite premises" proved="true">
               <transf name="compute_specified" proved="true" >
                <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.1.0" expl="rewrite premises" proved="true">
                <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
                 <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.1.0.0" expl="rewrite premises" proved="true">
                 <transf name="split_all_full" proved="true" >
                  <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.1.0.0.0" expl="rewrite premises" proved="true">
                  <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                   <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.1.0.0.0.0" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="3.08" steps="917482"/></proof>
                   </goal>
                   <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.1.0.0.0.1" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.41" steps="840841"/></proof>
                   </goal>
                   <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.1.1.0.0.0.2" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.43" steps="840690"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.0.1.1.0.2.2" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="2.07" steps="704986"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.71" steps="619127"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="1.59" steps="588441"/></proof>
       </goal>
       <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="2.25" steps="700956"/></proof>
       </goal>
       <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.3" expl="rewrite premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.3.0" expl="rewrite premises" proved="true">
        <transf name="apply" proved="true" arg1="scalar_ket_l">
         <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
          <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="make_bv_length">
           <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="0.79" steps="543850"/></proof>
           </goal>
           <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.3.0.0.0.1" expl="rewrite premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.0" expl="rewrite premises" proved="true">
            <transf name="split_all_full" proved="true" >
             <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.0.0" expl="rewrite premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.0.0.0" expl="rewrite premises" proved="true">
              <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
               <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.0.0.0.0" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="2.61" steps="797413"/></proof>
                </goal>
                <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="2.06" steps="737643"/></proof>
                </goal>
                <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.0.0.0.0.2" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="1.93" steps="693846"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.1" expl="rewrite premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.1.0" expl="rewrite premises" proved="true">
             <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
              <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.1.0.0" expl="rewrite premises" proved="true">
              <transf name="split_all_full" proved="true" >
               <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.1.0.0.0" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="2.57" steps="797413"/></proof>
                </goal>
                <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.1.0.0.0.1" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="2.03" steps="737643"/></proof>
                </goal>
                <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.3.0.0.0.1.1.0.0.0.2" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="1.75" steps="693846"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.0.3.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="1.38" steps="588496"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="path_sem_rz_basis&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="3.13" steps="665331"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="path_sem_rz_basis&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.44" steps="588482"/></proof>
     </goal>
     <goal name="path_sem_rz_basis&#39;vc.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.72" steps="543852"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="path_sem_rz_basis&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.33" steps="588482"/></proof>
    </goal>
    <goal name="path_sem_rz_basis&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.76" steps="543852"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_rz_basis_inv&#39;vc" expl="VC for path_sem_rz_basis_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_rz_basis_inv&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="path_sem_rz_basis_inv&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(path_sem (rz k) (path_sem (rz (- k)) x) )" arg2="(ket_sum_l (n_bvs 1)
    (fun (bvx:bitvec) -&gt; get_ket x (bv_to_int bvx) *.. bv_to_ket bvx) 1)">
     <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="instantiate" proved="true" arg1="ket_decomp_" arg2="x">
      <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="goal_comm">
       <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="Hinst">
        <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="0.89" steps="651401"/></proof>
        </goal>
        <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.65" steps="693274"/></proof>
        </goal>
        <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.75" steps="693556"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="get_path_sem">
      <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
       <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.94" steps="693877"/></proof>
       </goal>
       <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.1" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.93" steps="693885"/></proof>
       </goal>
       <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.2" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.88" steps="693073"/></proof>
       </goal>
       <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="get_path_sem">
          <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
           <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="scalar_ket_value">
             <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="instantiate" proved="true" arg1="sum_null_but_maybe_one_elt" arg2="(fun (e1:bitvec) -&gt;
     get_ket x (bv_to_int e1)
     *. get_ket (path_sem_basis (rz (- k)) (bv_to_ket e1)) (bv_to_int a)),(n_bvs (width (rz (- k)))),a">
              <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="Hinst">
               <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="compute_specified" proved="true" >
                <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="set_path_sem_basis">
                 <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="path_sem_rz_basis">
                  <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="set_path_sem_basis">
                   <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="path_sem_rz_basis">
                    <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="apply" proved="true" arg1="goal_comm">
                     <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="scalar_ket_value">
                      <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="scalar_assoc">
                       <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                       <transf name="apply" proved="true" arg1="scalar_eq_gen">
                        <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                        <proof prover="8"><result status="valid" time="1.29" steps="744623"/></proof>
                        </goal>
                        <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                        <transf name="assert" proved="true" arg1="(forall a b c d. a*. (b*.c) *. d = a*. ((b*.d) *.c))">
                         <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
                         <proof prover="8"><result status="valid" time="2.53" steps="866664"/></proof>
                         </goal>
                         <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
                         <transf name="rewrite" proved="true" arg1="h">
                          <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                          <transf name="rewrite" proved="true" arg1="mult_one_t">
                           <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                           <proof prover="8"><result status="valid" time="1.11" steps="744696"/></proof>
                           </goal>
                           <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
                           <transf name="rewrite" proved="true" arg1="one_mult_t">
                            <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1.0.1.0" expl="rewrite premises" proved="true">
                            <proof prover="8"><result status="valid" time="2.49" steps="863123"/></proof>
                            </goal>
                            <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1.0.1.1" expl="rewrite premises" proved="true">
                            <proof prover="8"><result status="valid" time="2.88" steps="906107"/></proof>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.84" steps="862837"/></proof>
                    </goal>
                    <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.03" steps="789221"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.84" steps="862882"/></proof>
                   </goal>
                   <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.16" steps="789221"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.60" steps="862837"/></proof>
                  </goal>
                  <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.07" steps="789221"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.52" steps="862890"/></proof>
                 </goal>
                 <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.93" steps="789221"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="1.90" steps="790049"/></proof>
               </goal>
               <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
                 <transf name="apply" proved="true" arg1="mult_zero_t">
                  <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="set_path_sem_basis">
                   <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="path_sem_rz_basis">
                    <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="scalar_ket_value">
                     <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="apply" proved="true" arg1="mult_zero_t">
                      <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                      <proof prover="8"><result status="valid" time="3.73" steps="882477"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.66" steps="863397"/></proof>
                    </goal>
                    <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
                    <proof prover="8"><result status="valid" time="1.93" steps="789253"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.57" steps="863462"/></proof>
                   </goal>
                   <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.0.0.0.0.2.0.0.0.2" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="1.87" steps="789253"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="2.17" steps="789538"/></proof>
           </goal>
           <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="2.64" steps="861688"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.0.3.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="2.18" steps="789554"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="path_sem_rz_basis_inv&#39;vc.0.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="2.15" steps="762909"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_rz_inv&#39;vc" expl="VC for path_sem_rz_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_rz_inv&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.75" steps="544370"/></proof>
  </goal>
  <goal name="path_sem_rz_inv&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.37" steps="582551"/></proof>
  </goal>
  <goal name="path_sem_rz_inv&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.33" steps="582543"/></proof>
  </goal>
  <goal name="path_sem_rz_inv&#39;vc.3" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="path_sem_rz_inv&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="path_sem_rz_inv&#39;vc.3.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(path_sem (rz k) (path_sem (rz (- k)) x) )" arg2="(ket_sum_l (n_bvs 1)
    (fun (bvx:bitvec) -&gt; get_ket x (bv_to_int bvx) *.. bv_to_ket bvx) 1)">
     <goal name="path_sem_rz_inv&#39;vc.3.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="goal_comm">
      <goal name="path_sem_rz_inv&#39;vc.3.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="Ensures">
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="path_sem_rz_inv&#39;vc.3.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="get_path_sem">
      <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
       <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="2.11" steps="763294"/></proof>
       </goal>
       <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.1" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.99" steps="763292"/></proof>
       </goal>
       <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.2" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.86" steps="762490"/></proof>
       </goal>
       <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="get_path_sem">
          <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
           <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="scalar_ket_value">
             <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="instantiate" proved="true" arg1="sum_null_but_maybe_one_elt" arg2="(fun (e1:bitvec) -&gt;
     get_ket x (bv_to_int e1)
     *. get_ket (path_sem_basis (rz (- k)) (bv_to_ket e1)) (bv_to_int a)),(n_bvs (width (rz (- k)))),a">
              <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="Hinst">
               <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="compute_specified" proved="true" >
                <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="set_path_sem_basis">
                 <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="path_sem_rz_basis">
                  <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="set_path_sem_basis">
                   <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="path_sem_rz_basis">
                    <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="apply" proved="true" arg1="goal_comm">
                     <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="scalar_ket_value">
                      <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="scalar_assoc">
                       <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                       <transf name="apply" proved="true" arg1="scalar_eq_gen">
                        <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                        <proof prover="8"><result status="valid" time="1.17" steps="785305"/></proof>
                        </goal>
                        <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                        <transf name="assert" proved="true" arg1="(forall a b c d. a*. (b*.c) *. d = a*. ((b*.d) *.c))">
                         <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
                         <proof prover="8"><result status="valid" time="2.92" steps="908215"/></proof>
                         </goal>
                         <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
                         <transf name="rewrite" proved="true" arg1="h">
                          <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                          <transf name="rewrite" proved="true" arg1="mult_one_t">
                           <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                           <proof prover="8"><result status="valid" time="1.13" steps="785378"/></proof>
                           </goal>
                           <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
                           <transf name="rewrite" proved="true" arg1="one_mult_t">
                            <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1.0.1.0" expl="rewrite premises" proved="true">
                            <proof prover="8"><result status="valid" time="2.51" steps="904662"/></proof>
                            </goal>
                            <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1.0.1.1" expl="rewrite premises" proved="true">
                            <proof prover="8"><result status="valid" time="2.69" steps="945524"/></proof>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.62" steps="904372"/></proof>
                    </goal>
                    <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.36" steps="829421"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="3.04" steps="904443"/></proof>
                   </goal>
                   <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.44" steps="829421"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="3.02" steps="904372"/></proof>
                  </goal>
                  <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.41" steps="829421"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="3.02" steps="904451"/></proof>
                 </goal>
                 <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.31" steps="829421"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="2.33" steps="830254"/></proof>
               </goal>
               <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
                 <transf name="apply" proved="true" arg1="mult_zero_t">
                  <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="set_path_sem_basis">
                   <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="path_sem_rz_basis">
                    <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="scalar_ket_value">
                     <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="apply" proved="true" arg1="mult_zero_t">
                      <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                      <proof prover="8"><result status="valid" time="4.30" steps="924009"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.98" steps="904980"/></proof>
                    </goal>
                    <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.36" steps="829463"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.98" steps="905066"/></proof>
                   </goal>
                   <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.0.0.0.0.2.0.0.0.2" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.36" steps="829463"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="2.31" steps="829682"/></proof>
           </goal>
           <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="2.66" steps="901884"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.0.3.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="2.03" steps="829680"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="path_sem_rz_inv&#39;vc.3.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="2.78" steps="834050"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_hadamard_zero&#39;vc" expl="VC for path_sem_hadamard_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_hadamard_zero&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.47" steps="623381"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_hadamard_one&#39;vc" expl="VC for path_sem_hadamard_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_hadamard_one&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.51" steps="623444"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_hadamard_plus&#39;vc" expl="VC for path_sem_hadamard_plus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_hadamard_plus&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.74" steps="623508"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_hadamard_minus&#39;vc" expl="VC for path_sem_hadamard_minus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_hadamard_minus&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.46" steps="623570"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_cnot_basis&#39;vc" expl="VC for path_sem_cnot_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_cnot_basis&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="get_path_sem_basis">
   <goal name="path_sem_cnot_basis&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="path_sem_basis_apply">
    <goal name="path_sem_cnot_basis&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(circ_to_pps cnot)" arg2="(pps_cnot 0 1 2)">
     <goal name="path_sem_cnot_basis&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="pps_cnot_apply_basis">
      <goal name="path_sem_cnot_basis&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="8"><result status="valid" time="1.51" steps="624353"/></proof>
      </goal>
      <goal name="path_sem_cnot_basis&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="2.37" steps="732673"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="path_sem_cnot_basis&#39;vc.0.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="8"><result status="valid" time="0.84" steps="582720"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="path_sem_cnot_basis&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.59" steps="622970"/></proof>
    </goal>
    <goal name="path_sem_cnot_basis&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.89" steps="582720"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="path_sem_cnot_basis&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="1.41" steps="622970"/></proof>
   </goal>
   <goal name="path_sem_cnot_basis&#39;vc.0.2" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.82" steps="582720"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_swap_basis&#39;vc" expl="VC for path_sem_swap_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_swap_basis&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="get_path_sem_basis">
   <goal name="path_sem_swap_basis&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="path_sem_basis_apply">
    <goal name="path_sem_swap_basis&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(circ_to_pps swap)" arg2="(pps_swap 0 1 2)">
     <goal name="path_sem_swap_basis&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="pps_swap_apply_basis">
      <goal name="path_sem_swap_basis&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="8"><result status="valid" time="1.52" steps="624444"/></proof>
      </goal>
      <goal name="path_sem_swap_basis&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="2.10" steps="733217"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="path_sem_swap_basis&#39;vc.0.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="8"><result status="valid" time="0.88" steps="582882"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="path_sem_swap_basis&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.47" steps="623083"/></proof>
    </goal>
    <goal name="path_sem_swap_basis&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.88" steps="582882"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="path_sem_swap_basis&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="1.66" steps="623083"/></proof>
   </goal>
   <goal name="path_sem_swap_basis&#39;vc.0.2" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.83" steps="582882"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="hadamard_invol&#39;vc" expl="VC for hadamard_invol" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="hadamard_invol&#39;vc.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="ket_decomp_" arg2="x,1">
   <goal name="hadamard_invol&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Hinst">
    <goal name="hadamard_invol&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="path_sem_sum_">
     <goal name="hadamard_invol&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="path_sem_sum_">
      <goal name="hadamard_invol&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="ket_sum_eq">
       <goal name="hadamard_invol&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="0.90" steps="583159"/></proof>
       </goal>
       <goal name="hadamard_invol&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="0.89" steps="583157"/></proof>
       </goal>
       <goal name="hadamard_invol&#39;vc.0.0.0.0.0.2" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="hadamard_invol&#39;vc.0.0.0.0.0.2.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="hadamard_invol&#39;vc.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="path_sem_scal">
          <goal name="hadamard_invol&#39;vc.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="path_sem_scal">
           <goal name="hadamard_invol&#39;vc.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="scalar_eq">
            <goal name="hadamard_invol&#39;vc.0.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="2.71" steps="820395"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="hadamard_invol&#39;vc.0.0.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="2.43" steps="820134"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="hadamard_invol&#39;vc.0.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="2.57" steps="817997"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="hadamard_invol&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="2.26" steps="784858"/></proof>
      </goal>
      <goal name="hadamard_invol&#39;vc.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="0.82" steps="583166"/></proof>
      </goal>
      <goal name="hadamard_invol&#39;vc.0.0.0.0.3" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="hadamard_invol&#39;vc.0.0.0.0.3.0" expl="rewrite premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="hadamard_invol&#39;vc.0.0.0.0.3.0.0" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="4.16" steps="858326"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="hadamard_invol&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="2.57" steps="784858"/></proof>
     </goal>
     <goal name="hadamard_invol&#39;vc.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.97" steps="583166"/></proof>
     </goal>
     <goal name="hadamard_invol&#39;vc.0.0.0.3" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="5.12" steps="884290"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="hadamard_invol&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.86" steps="583159"/></proof>
    </goal>
    <goal name="hadamard_invol&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.49" steps="623940"/></proof>
    </goal>
    <goal name="hadamard_invol&#39;vc.0.0.3" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.46" steps="623948"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ancilla_g&#39;vc" expl="VC for ancilla_g" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ancilla_g&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.91" steps="647536"/></proof>
  </goal>
  <goal name="ancilla_g&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.94" steps="647539"/></proof>
  </goal>
  <goal name="ancilla_g&#39;vc.2" expl="precondition" proved="true">
  <transf name="exists" proved="true" arg1="path_sem_target">
   <goal name="ancilla_g&#39;vc.2.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="ancilla_g&#39;vc.2.0.0" proved="true">
    <transf name="replace" proved="true" arg1="( pps_apply (circ_to_pps c) (kronecker x (ket i 0)))" arg2="(path_sem c (kronecker x (ket i 0)))">
     <goal name="ancilla_g&#39;vc.2.0.0.0" proved="true">
     <transf name="apply" proved="true" arg1="Requires2">
      <goal name="ancilla_g&#39;vc.2.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="0.96" steps="647562"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="ancilla_g&#39;vc.2.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="path_sem_apply">
      <goal name="ancilla_g&#39;vc.2.0.0.1.0" expl="equality hypothesis" proved="true">
      <proof prover="8"><result status="valid" time="0.92" steps="647560"/></proof>
      </goal>
      <goal name="ancilla_g&#39;vc.2.0.0.1.1" expl="rewrite premises" proved="true">
      <transf name="replace" proved="true" arg1="(width c)" arg2="(width c-i+i)">
       <goal name="ancilla_g&#39;vc.2.0.0.1.1.0" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="kronecker_ket_l">
        <goal name="ancilla_g&#39;vc.2.0.0.1.1.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.62" steps="688832"/></proof>
        </goal>
        <goal name="ancilla_g&#39;vc.2.0.0.1.1.0.1" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.65" steps="688853"/></proof>
        </goal>
        <goal name="ancilla_g&#39;vc.2.0.0.1.1.0.2" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="0.92" steps="647562"/></proof>
        </goal>
        <goal name="ancilla_g&#39;vc.2.0.0.1.1.0.3" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="2.71" steps="799639"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="ancilla_g&#39;vc.2.0.0.1.1.1" expl="equality hypothesis" proved="true">
       <proof prover="8"><result status="valid" time="0.92" steps="647576"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ancilla_g&#39;vc.3" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="result" arg2="(ancilla c i)">
   <goal name="ancilla_g&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ancilla_ancilla">
    <goal name="ancilla_g&#39;vc.3.0.0" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="0.95" steps="647608"/></proof>
    </goal>
    <goal name="ancilla_g&#39;vc.3.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.92" steps="647610"/></proof>
    </goal>
    <goal name="ancilla_g&#39;vc.3.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.97" steps="647610"/></proof>
    </goal>
    <goal name="ancilla_g&#39;vc.3.0.3" expl="rewrite premises" proved="true">
    <transf name="exists" proved="true" arg1="path_sem_target">
     <goal name="ancilla_g&#39;vc.3.0.3.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ancilla_g&#39;vc.3.0.3.0.0" proved="true">
      <transf name="apply" proved="true" arg1="Requires">
       <goal name="ancilla_g&#39;vc.3.0.3.0.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="0.98" steps="647622"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ancilla_g&#39;vc.3.1" expl="equality hypothesis" proved="true">
   <proof prover="8"><result status="valid" time="0.97" steps="647608"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ancilla_g&#39;vc.4" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="result" arg2="(ancilla c i)">
   <goal name="ancilla_g&#39;vc.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ancilla_size">
    <goal name="ancilla_g&#39;vc.4.0.0" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="0.94" steps="647634"/></proof>
    </goal>
    <goal name="ancilla_g&#39;vc.4.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.96" steps="647636"/></proof>
    </goal>
    <goal name="ancilla_g&#39;vc.4.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.99" steps="647636"/></proof>
    </goal>
    <goal name="ancilla_g&#39;vc.4.0.3" expl="rewrite premises" proved="true">
    <transf name="exists" proved="true" arg1="path_sem_target">
     <goal name="ancilla_g&#39;vc.4.0.3.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ancilla_g&#39;vc.4.0.3.0.0" proved="true">
      <transf name="apply" proved="true" arg1="Requires">
       <goal name="ancilla_g&#39;vc.4.0.3.0.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="0.93" steps="647648"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ancilla_g&#39;vc.4.1" expl="equality hypothesis" proved="true">
   <proof prover="8"><result status="valid" time="0.98" steps="647634"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ancilla_g&#39;vc.5" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="result" arg2="(ancilla c i)">
   <goal name="ancilla_g&#39;vc.5.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ancilla_range">
    <goal name="ancilla_g&#39;vc.5.0.0" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="1.01" steps="647653"/></proof>
    </goal>
    <goal name="ancilla_g&#39;vc.5.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.94" steps="647655"/></proof>
    </goal>
    <goal name="ancilla_g&#39;vc.5.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.92" steps="647655"/></proof>
    </goal>
    <goal name="ancilla_g&#39;vc.5.0.3" expl="rewrite premises" proved="true">
    <transf name="exists" proved="true" arg1="path_sem_target">
     <goal name="ancilla_g&#39;vc.5.0.3.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ancilla_g&#39;vc.5.0.3.0.0" proved="true">
      <transf name="apply" proved="true" arg1="Requires">
       <goal name="ancilla_g&#39;vc.5.0.3.0.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.08" steps="647667"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ancilla_g&#39;vc.5.1" expl="equality hypothesis" proved="true">
   <proof prover="8"><result status="valid" time="1.12" steps="647653"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ancilla_g&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="2.86" steps="816121"/></proof>
  </goal>
  <goal name="ancilla_g&#39;vc.7" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="result" arg2="(ancilla c i)">
   <goal name="ancilla_g&#39;vc.7.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ancilla_basis_ket">
    <goal name="ancilla_g&#39;vc.7.0.0" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="2.78" steps="827169"/></proof>
    </goal>
    <goal name="ancilla_g&#39;vc.7.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.10" steps="647692"/></proof>
    </goal>
    <goal name="ancilla_g&#39;vc.7.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.12" steps="647692"/></proof>
    </goal>
    <goal name="ancilla_g&#39;vc.7.0.3" expl="rewrite premises" proved="true">
    <transf name="exists" proved="true" arg1="path_sem_target">
     <goal name="ancilla_g&#39;vc.7.0.3.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ancilla_g&#39;vc.7.0.3.0.0" proved="true">
      <transf name="apply" proved="true" arg1="Requires">
       <goal name="ancilla_g&#39;vc.7.0.3.0.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.04" steps="647704"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ancilla_g&#39;vc.7.1" expl="equality hypothesis" proved="true">
   <proof prover="8"><result status="valid" time="1.03" steps="647690"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ancilla_g&#39;vc.8" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="result" arg2="(ancilla c i)">
   <goal name="ancilla_g&#39;vc.8.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ancilla_angle">
    <goal name="ancilla_g&#39;vc.8.0.0" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="2.81" steps="827007"/></proof>
    </goal>
    <goal name="ancilla_g&#39;vc.8.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.16" steps="673762"/></proof>
    </goal>
    <goal name="ancilla_g&#39;vc.8.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.94" steps="673762"/></proof>
    </goal>
    <goal name="ancilla_g&#39;vc.8.0.3" expl="rewrite premises" proved="true">
    <transf name="exists" proved="true" arg1="path_sem_target">
     <goal name="ancilla_g&#39;vc.8.0.3.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ancilla_g&#39;vc.8.0.3.0.0" proved="true">
      <transf name="apply" proved="true" arg1="Requires">
       <goal name="ancilla_g&#39;vc.8.0.3.0.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.13" steps="673774"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ancilla_g&#39;vc.8.1" expl="equality hypothesis" proved="true">
   <proof prover="8"><result status="valid" time="0.90" steps="673760"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ancilla_g&#39;vc.9" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="result" arg2="(ancilla c i)">
   <goal name="ancilla_g&#39;vc.9.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(path_sem (ancilla c i)x)" arg2="(pps_apply (pps_ancs (circ_to_pps c) i) x)">
    <goal name="ancilla_g&#39;vc.9.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(pps_apply (pps_ancs (circ_to_pps c) i) x)" arg2="(path_sem_target x)">
     <goal name="ancilla_g&#39;vc.9.0.0.0" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="0.97"/></proof>
     </goal>
     <goal name="ancilla_g&#39;vc.9.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="pps_apply_anc">
      <goal name="ancilla_g&#39;vc.9.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="1.18" steps="673894"/></proof>
      </goal>
      <goal name="ancilla_g&#39;vc.9.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="2.06" steps="726469"/></proof>
      </goal>
      <goal name="ancilla_g&#39;vc.9.0.0.1.2" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.98"/></proof>
      </goal>
      <goal name="ancilla_g&#39;vc.9.0.0.1.3" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="ancilla_g&#39;vc.9.0.0.1.3.0" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(pps_apply (circ_to_pps c) (kronecker x (ket i 0)))" arg2="(path_sem c (kronecker x (ket i 0)))">
        <goal name="ancilla_g&#39;vc.9.0.0.1.3.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="Requires">
         <goal name="ancilla_g&#39;vc.9.0.0.1.3.0.0.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="2.09" steps="730421"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="ancilla_g&#39;vc.9.0.0.1.3.0.1" expl="equality hypothesis" proved="true">
        <transf name="rewrite" proved="true" arg1="path_sem_apply">
         <goal name="ancilla_g&#39;vc.9.0.0.1.3.0.1.0" expl="equality hypothesis" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
         <goal name="ancilla_g&#39;vc.9.0.0.1.3.0.1.1" expl="rewrite premises" proved="true">
         <transf name="replace" proved="true" arg1="(width c)" arg2="(width c -i+i)">
          <goal name="ancilla_g&#39;vc.9.0.0.1.3.0.1.1.0" expl="rewrite premises" proved="true">
          <transf name="apply" proved="true" arg1="kronecker_ket_l">
           <goal name="ancilla_g&#39;vc.9.0.0.1.3.0.1.1.0.0" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="1.91" steps="715295"/></proof>
           </goal>
           <goal name="ancilla_g&#39;vc.9.0.0.1.3.0.1.1.0.1" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="1.68" steps="715296"/></proof>
           </goal>
           <goal name="ancilla_g&#39;vc.9.0.0.1.3.0.1.1.0.2" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="2.08" steps="730421"/></proof>
           </goal>
           <goal name="ancilla_g&#39;vc.9.0.0.1.3.0.1.1.0.3" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="2.75" steps="829465"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="ancilla_g&#39;vc.9.0.0.1.3.0.1.1.1" expl="equality hypothesis" proved="true">
          <proof prover="8"><result status="valid" time="0.96" steps="673931"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="ancilla_g&#39;vc.9.0.0.1.4" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.85"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="ancilla_g&#39;vc.9.0.1" expl="equality hypothesis" proved="true">
    <proof prover="8"><result status="valid" time="1.76" steps="715921"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="ancilla_g&#39;vc.9.1" expl="equality hypothesis" proved="true">
   <proof prover="8"><result status="valid" time="0.95" steps="673892"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ancilla_g&#39;vc.10" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="kronecker_injec_eq_left" arg2="(path_sem result x),(path_sem_target x),(ket i 0)">
   <goal name="ancilla_g&#39;vc.10.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="Hinst">
    <goal name="ancilla_g&#39;vc.10.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures">
     <goal name="ancilla_g&#39;vc.10.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="Requires">
      <goal name="ancilla_g&#39;vc.10.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="2.10" steps="730520"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="ancilla_g&#39;vc.10.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.02" steps="674037"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="ancilla_g&#39;vc.10.0.1" expl="apply premises" proved="true">
    <transf name="assert" proved="true" arg1="(valid_index (ket i 0) 0 0 /\ get_ket (ket i 0) 0  = c_one)">
     <goal name="ancilla_g&#39;vc.10.0.1.0" expl="asserted formula" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ancilla_g&#39;vc.10.0.1.0.0" proved="true">
      <transf name="apply" proved="true" arg1="set_valid_index">
       <goal name="ancilla_g&#39;vc.10.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="2.78" steps="840189"/></proof>
       </goal>
       <goal name="ancilla_g&#39;vc.10.0.1.0.0.1" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="2.83" steps="840326"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="ancilla_g&#39;vc.10.0.1.0.1" proved="true">
      <transf name="rewrite" proved="true" arg1="get__ket_value">
       <goal name="ancilla_g&#39;vc.10.0.1.0.1.0" proved="true">
       <proof prover="8"><result status="valid" time="2.79" steps="832244"/></proof>
       </goal>
       <goal name="ancilla_g&#39;vc.10.0.1.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="1.93" steps="715407"/></proof>
       </goal>
       <goal name="ancilla_g&#39;vc.10.0.1.0.1.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="2.81" steps="833649"/></proof>
       </goal>
       <goal name="ancilla_g&#39;vc.10.0.1.0.1.3" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="2.52" steps="833649"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ancilla_g&#39;vc.10.0.1.1" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.78" steps="716137"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ancilla_spec&#39;vc" expl="VC for ancilla_spec" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ancilla_spec&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.61" steps="681925"/></proof>
  </goal>
  <goal name="ancilla_spec&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.69" steps="750691"/></proof>
  </goal>
  <goal name="ancilla_spec&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.13" steps="709354"/></proof>
  </goal>
  <goal name="ancilla_spec&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.03" steps="709357"/></proof>
  </goal>
  <goal name="ancilla_spec&#39;vc.4" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="ancilla_spec&#39;vc.4.0" expl="precondition" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="ancilla_spec&#39;vc.4.0.0" expl="VC for ancilla_spec" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="ancilla_spec&#39;vc.4.0.0.0" expl="precondition" proved="true">
     <transf name="instantiate" proved="true" arg1="ket_decomp_" arg2="x,(width c - i)">
      <goal name="ancilla_spec&#39;vc.4.0.0.0.0" expl="precondition" proved="true">
      <transf name="replace" proved="true" arg1="(kronecker x (ket i 0))" arg2="(kronecker (ket_sum_l (n_bvs (width c - i))
    (fun (bvx:bitvec) -&gt; get_ket x (bv_to_int bvx) *.. bv_to_ket bvx)
    (width c - i)) (ket i 0))">
       <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0" expl="precondition" proved="true">
       <transf name="rewrite" proved="true" arg1="kronecker_ket_sum_distr_l_rew">
        <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0" expl="precondition" proved="true">
        <transf name="rewrite" proved="true" arg1="kronecker_ket_sum_distr_l_rew">
         <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.0" expl="precondition" proved="true">
         <transf name="rewrite" proved="true" arg1="path_sem_sum_">
          <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.0.0" expl="precondition" proved="true">
          <transf name="apply" proved="true" arg1="ket_sum_eq">
           <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="2.76" steps="882159"/></proof>
           </goal>
           <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="1.05" steps="720273"/></proof>
           </goal>
           <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr">
              <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="path_sem_scal">
               <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="2.58" steps="935806"/></proof>
               </goal>
               <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
               <transf name="replace" proved="true" arg1="(width c)" arg2="(width c- i + i)">
                <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.0.0.2.0.0.0.1.0" expl="rewrite premises" proved="true">
                <transf name="apply" proved="true" arg1="kronecker_ket_l">
                 <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.0.0.2.0.0.0.1.0.0" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.09" steps="817953"/></proof>
                 </goal>
                 <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.0.0.2.0.0.0.1.0.1" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.10" steps="817975"/></proof>
                 </goal>
                 <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.0.0.2.0.0.0.1.0.2" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.92" steps="930913"/></proof>
                 </goal>
                 <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.0.0.2.0.0.0.1.0.3" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.59" steps="932160"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.0.0.2.0.0.0.1.1" expl="equality hypothesis" proved="true">
                <proof prover="8"><result status="valid" time="1.22" steps="774275"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <transf name="rewrite" proved="true" arg1="n_bvs_card">
           <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="2.75" steps="875694"/></proof>
           </goal>
           <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="1.86" steps="761941"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="2.45" steps="875493"/></proof>
          </goal>
          <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.0.3.0" expl="rewrite premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.0.3.0.0" expl="rewrite premises" proved="true">
            <transf name="replace" proved="true" arg1="(width c)" arg2="(width c- i + i)">
             <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.0.3.0.0.0" expl="rewrite premises" proved="true">
             <transf name="apply" proved="true" arg1="kronecker_ket_l">
              <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="2.10" steps="817953"/></proof>
              </goal>
              <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.0.3.0.0.0.1" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="1.82" steps="817975"/></proof>
              </goal>
              <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.0.3.0.0.0.2" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="2.96" steps="933216"/></proof>
              </goal>
              <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.0.3.0.0.0.3" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="2.99" steps="932160"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.0.3.0.0.1" expl="equality hypothesis" proved="true">
             <proof prover="8"><result status="valid" time="1.13" steps="774275"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="scalar_ket_l">
            <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
            <transf name="assert" proved="true" arg1="(rows (path_sem_target @ e)  * rows (ket i 0) = power 2 (width c - i) * power 2 i /\ columns (path_sem_target @ e) * columns (ket i 0) = 1 )">
             <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
             <transf name="replace" proved="true" arg1="(rows (path_sem_target @ e) * rows (ket i 0))" arg2="( rows (kronecker (path_sem_target @ e) (ket i 0)))">
              <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
              <transf name="replace" proved="true" arg1="(columns (path_sem_target @ e) * columns (ket i 0))" arg2="( columns (kronecker (path_sem_target @ e) (ket i 0)))">
               <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
               <transf name="replace" proved="true" arg1="(kronecker (path_sem_target @ e) (ket i 0))" arg2="( path_sem c (kronecker (bv_to_ket e) (ket i 0)))">
                <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.1.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                 <transf name="rewrite" proved="true" arg1="power_sum_rev">
                  <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                  <transf name="replace" proved="true" arg1="((width c - i) + i)" arg2="(width c)">
                   <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                   <transf name="assert" proved="true" arg1="(is_a_ket_l (kronecker (bv_to_ket e) (ket i 0)) (width c))">
                    <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                    <transf name="replace" proved="true" arg1="(width c)" arg2="(width c - i+i)">
                     <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                     <transf name="apply" proved="true" arg1="kronecker_ket_l">
                      <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                      <proof prover="8"><result status="valid" time="1.86" steps="817953"/></proof>
                      </goal>
                      <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                      <proof prover="8"><result status="valid" time="2.13" steps="817975"/></proof>
                      </goal>
                      <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                      <proof prover="8"><result status="valid" time="2.71" steps="930913"/></proof>
                      </goal>
                      <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
                      <proof prover="8"><result status="valid" time="2.73" steps="932160"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                     <proof prover="8"><result status="valid" time="1.28" steps="774275"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
                    <proof prover="8"><result status="valid" time="2.91" steps="942437"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                   <proof prover="8"><result status="valid" time="1.10" steps="774275"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.11" steps="817953"/></proof>
                  </goal>
                  <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.10" steps="817975"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.1.0.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
                 <proof prover="7"><result status="valid" time="2.09" steps="11538980"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.1.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                <proof prover="8"><result status="valid" time="3.05" steps="933099"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.1.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
               <proof prover="8"><result status="valid" time="2.89" steps="940885"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
              <proof prover="8"><result status="valid" time="3.11" steps="941204"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="set_is_a_ket_l">
              <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.1.0.0.0.1.0" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="1.94" steps="818090"/></proof>
              </goal>
              <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.1.0.0.0.1.1" expl="apply premises" proved="true">
              <proof prover="0"><result status="valid" time="0.96"/></proof>
              </goal>
              <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.1.0.0.0.1.2" expl="apply premises" proved="true">
              <proof prover="0"><result status="valid" time="1.09"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="3.04" steps="891783"/></proof>
         </goal>
         <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
         <transf name="rewrite" proved="true" arg1="n_bvs_card">
          <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.3.0" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="2.77" steps="875689"/></proof>
          </goal>
          <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.0.3.1" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="1.81" steps="761941"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="5.42" steps="961089"/></proof>
        </goal>
        <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="2.97" steps="891783"/></proof>
        </goal>
        <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.3" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="n_bvs_card">
         <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.3.0" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="2.65" steps="875689"/></proof>
         </goal>
         <goal name="ancilla_spec&#39;vc.4.0.0.0.0.0.3.1" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="1.96" steps="761941"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="ancilla_spec&#39;vc.4.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="8"><result status="valid" time="2.84" steps="877428"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="ancilla_spec&#39;vc.4.0.0.1" expl="precondition" proved="true">
     <proof prover="8"><result status="valid" time="1.01" steps="720171"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ancilla_spec&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.32" steps="736019"/></proof>
  </goal>
  <goal name="ancilla_spec&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.32" steps="736022"/></proof>
  </goal>
  <goal name="ancilla_spec&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.30" steps="736025"/></proof>
  </goal>
  <goal name="ancilla_spec&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.25" steps="736028"/></proof>
  </goal>
  <goal name="ancilla_spec&#39;vc.9" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="Ensures7">
  </transf>
  </goal>
  <goal name="ancilla_spec&#39;vc.10" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="Ensures7">
  </transf>
  </goal>
  <goal name="ancilla_spec&#39;vc.11" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.90" steps="780136"/></proof>
  </goal>
  <goal name="ancilla_spec&#39;vc.12" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures7">
   <goal name="ancilla_spec&#39;vc.12.0" expl="postcondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="ancilla_spec&#39;vc.12.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_if" proved="true" >
     <goal name="ancilla_spec&#39;vc.12.0.0.0" expl="VC for ancilla_spec" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="ancilla_spec&#39;vc.12.0.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
      </transf>
      </goal>
      <goal name="ancilla_spec&#39;vc.12.0.0.0.1" expl="postcondition" proved="true">
      <proof prover="8"><result status="valid" time="2.20" steps="805953"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ancilla_spec&#39;vc.12.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="1.17" steps="736375"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sem_seq&#39;vc" expl="VC for mat_sem_seq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sem_seq&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="mat_sem_seq&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="mat_sem&#39;def2" arg2="(sequence d e),(pre d),(pre e)">
    <goal name="mat_sem_seq&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="1.87" steps="732241"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sem_par&#39;vc" expl="VC for mat_sem_par" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sem_par&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="mat_sem_par&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="mat_sem&#39;def1" arg2="(parallel d e),(pre d),(pre e)">
    <goal name="mat_sem_par&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Hinst">
     <goal name="mat_sem_par&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="8"><result status="valid" time="1.84" steps="732265"/></proof>
     </goal>
     <goal name="mat_sem_par&#39;vc.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.95" steps="729571"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sem_anc&#39;vc" expl="VC for mat_sem_anc" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sem_anc&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.00" steps="589441"/></proof>
  </goal>
  <goal name="mat_sem_anc&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.96" steps="589444"/></proof>
  </goal>
  <goal name="mat_sem_anc&#39;vc.2" expl="precondition" proved="true">
  <transf name="exists" proved="true" arg1="(fun x -&gt; mat_mult mat_sem_target x)">
   <goal name="mat_sem_anc&#39;vc.2.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="mat_sem_anc&#39;vc.2.0.0" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="mat_sem_anc&#39;vc.2.0.0.0" proved="true">
     <transf name="replace" proved="true" arg1="(pps_apply (circ_to_pps c) (kronecker x (ket i 0)))" arg2="(mat_mult (mat_sem c) (kronecker x (ket i 0)))">
      <goal name="mat_sem_anc&#39;vc.2.0.0.0.0" proved="true">
      <proof prover="8"><result status="valid" time="1.67" steps="629732"/></proof>
      </goal>
      <goal name="mat_sem_anc&#39;vc.2.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="mat_sem_anc&#39;vc.2.0.0.0.1.0" expl="equality hypothesis" proved="true">
       <transf name="rewrite" proved="true" arg1="mat_sem&#39;spec">
        <goal name="mat_sem_anc&#39;vc.2.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
        <proof prover="8"><result status="valid" time="1.15" steps="685483"/></proof>
        </goal>
        <goal name="mat_sem_anc&#39;vc.2.0.0.0.1.0.1" expl="rewrite premises" proved="true">
        <transf name="replace" proved="true" arg1="(width_pre (pre c))" arg2="(width c -i+i)">
         <goal name="mat_sem_anc&#39;vc.2.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
         <transf name="apply" proved="true" arg1="kronecker_ket_l">
          <goal name="mat_sem_anc&#39;vc.2.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.88" steps="729086"/></proof>
          </goal>
          <goal name="mat_sem_anc&#39;vc.2.0.0.0.1.0.1.0.1" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.92" steps="729107"/></proof>
          </goal>
          <goal name="mat_sem_anc&#39;vc.2.0.0.0.1.0.1.0.2" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.05" steps="685485"/></proof>
          </goal>
          <goal name="mat_sem_anc&#39;vc.2.0.0.0.1.0.1.0.3" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="2.41" steps="839998"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sem_anc&#39;vc.2.0.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
         <proof prover="8"><result status="valid" time="1.79" steps="730069"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sem_anc&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.30" steps="763936"/></proof>
  </goal>
  <goal name="mat_sem_anc&#39;vc.4" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.52" steps="629392"/></proof>
  </goal>
  <goal name="mat_sem_anc&#39;vc.5" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.93" steps="589712"/></proof>
  </goal>
  <goal name="mat_sem_anc&#39;vc.6" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.94" steps="589715"/></proof>
  </goal>
  <goal name="mat_sem_anc&#39;vc.7" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="kronecker_injec_eq_left" arg2="( mat_mult (mat_sem (ancilla c i)) (bv_to_ket x)),(mat_mult mat_sem_target (bv_to_ket x)),(ket i 0)">
   <goal name="mat_sem_anc&#39;vc.7.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="Hinst">
    <goal name="mat_sem_anc&#39;vc.7.0.0" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(kronecker (mat_mult (mat_sem (ancilla c i)) (bv_to_ket x)) (ket i 0))" arg2="( mat_mult (mat_sem c) (kronecker (bv_to_ket x) (ket i 0)))">
     <goal name="mat_sem_anc&#39;vc.7.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="2.37" steps="755314"/></proof>
     </goal>
     <goal name="mat_sem_anc&#39;vc.7.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="mat_sem_anc&#39;vc.7.0.0.1.0" expl="equality hypothesis" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sem&#39;spec">
       <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0" expl="equality hypothesis" proved="true">
       <transf name="rewrite" proved="true" arg1="mat_sem&#39;spec">
        <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0" expl="equality hypothesis" proved="true">
        <transf name="replace" proved="true" arg1="(pps_apply (circ_to_pps (ancilla c i)) (bv_to_ket x))" arg2="(path_sem (ancilla c i) (bv_to_ket x))">
         <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0" expl="equality hypothesis" proved="true">
         <transf name="replace" proved="true" arg1="(pps_apply (circ_to_pps c) (kronecker (bv_to_ket x) (ket i 0)))" arg2="(path_sem c (kronecker (bv_to_ket x) (ket i 0)))">
          <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0" expl="equality hypothesis" proved="true">
          <transf name="replace" proved="true" arg1="(ancilla c i)" arg2="((ancilla_g c i (fun x -&gt; mat_mult mat_sem_target x)) )">
           <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.0" expl="equality hypothesis" proved="true">
           <transf name="apply" proved="true" arg1="ancilla_g&#39;spec1">
            <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="1.13" steps="685824"/></proof>
            </goal>
            <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="1.14" steps="685824"/></proof>
            </goal>
            <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.0.2" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="path_sem_to_mat">
               <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="Requires4">
                <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="1.12" steps="685836"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
               <transf name="replace" proved="true" arg1="(width c)" arg2="(width c-i+i)">
                <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.0.2.0.0.1.0" expl="rewrite premises" proved="true">
                <transf name="apply" proved="true" arg1="kronecker_ket_l">
                 <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.0.2.0.0.1.0.0" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.75" steps="729750"/></proof>
                 </goal>
                 <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.0.2.0.0.1.0.1" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.75" steps="729758"/></proof>
                 </goal>
                 <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.0.2.0.0.1.0.2" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.12" steps="685836"/></proof>
                 </goal>
                 <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.0.2.0.0.1.0.3" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.51" steps="850002"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.0.2.0.0.1.1" expl="equality hypothesis" proved="true">
                <proof prover="8"><result status="valid" time="1.09" steps="685850"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.0.3" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="ancilla_g&#39;spec4">
             <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.0.3.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.73" steps="730726"/></proof>
             </goal>
             <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.0.3.1" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="1.10" steps="685824"/></proof>
             </goal>
             <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.0.3.2" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="1.07" steps="685824"/></proof>
             </goal>
             <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.0.3.3" expl="rewrite premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.0.3.3.0" expl="rewrite premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.0.3.3.0.0" expl="rewrite premises" proved="true">
               <transf name="rewrite" proved="true" arg1="path_sem_to_mat">
                <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.0.3.3.0.0.0" expl="rewrite premises" proved="true">
                <transf name="apply" proved="true" arg1="Requires4">
                 <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.0.3.3.0.0.0.0" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.08" steps="685836"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.0.3.3.0.0.1" expl="rewrite premises" proved="true">
                <transf name="replace" proved="true" arg1="(width c)" arg2="(width c-i+i)">
                 <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.0.3.3.0.0.1.0" expl="rewrite premises" proved="true">
                 <transf name="apply" proved="true" arg1="kronecker_ket_l">
                  <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.0.3.3.0.0.1.0.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.11" steps="729750"/></proof>
                  </goal>
                  <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.0.3.3.0.0.1.0.1" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.15" steps="729758"/></proof>
                  </goal>
                  <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.0.3.3.0.0.1.0.2" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.45" steps="685836"/></proof>
                  </goal>
                  <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.0.3.3.0.0.1.0.3" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="3.16" steps="850002"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.0.3.3.0.0.1.1" expl="equality hypothesis" proved="true">
                 <proof prover="8"><result status="valid" time="1.27" steps="685850"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
           <transf name="rewrite" proved="true" arg1="ancilla_g&#39;def">
            <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
            <proof prover="8"><result status="valid" time="1.31" steps="685822"/></proof>
            </goal>
            <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="1.50" steps="685824"/></proof>
            </goal>
            <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.1.2" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="1.50" steps="685824"/></proof>
            </goal>
            <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.1.3" expl="rewrite premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.1.3.0" expl="rewrite premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.1.3.0.0" expl="rewrite premises" proved="true">
              <transf name="rewrite" proved="true" arg1="path_sem_to_mat">
               <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.1.3.0.0.0" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="Requires4">
                <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.1.3.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="1.50" steps="685836"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.1.3.0.0.1" expl="rewrite premises" proved="true">
               <transf name="replace" proved="true" arg1="(width c)" arg2="(width c-i+i)">
                <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.1.3.0.0.1.0" expl="rewrite premises" proved="true">
                <transf name="apply" proved="true" arg1="kronecker_ket_l">
                 <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.1.3.0.0.1.0.0" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.39" steps="729750"/></proof>
                 </goal>
                 <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.1.3.0.0.1.0.1" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.45" steps="729758"/></proof>
                 </goal>
                 <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.1.3.0.0.1.0.2" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.41" steps="685836"/></proof>
                 </goal>
                 <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.1.3.0.0.1.0.3" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="3.05" steps="850002"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.0.1.3.0.0.1.1" expl="equality hypothesis" proved="true">
                <proof prover="8"><result status="valid" time="1.11" steps="685850"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <transf name="rewrite" proved="true" arg1="path_sem&#39;spec">
           <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
           <proof prover="8"><result status="valid" time="0.98" steps="685822"/></proof>
           </goal>
           <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.1.1" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="(width c)" arg2="(width c-i+i)">
            <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.1.1.0" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="kronecker_ket_l">
             <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.85" steps="729732"/></proof>
             </goal>
             <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.1.1.0.1" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.64" steps="729740"/></proof>
             </goal>
             <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.1.1.0.2" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.95" steps="730726"/></proof>
             </goal>
             <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.1.1.0.3" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="2.72" steps="849292"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.0.1.1.1" expl="equality hypothesis" proved="true">
            <proof prover="8"><result status="valid" time="1.15" steps="685838"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="8"><result status="valid" time="2.55" steps="851096"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.1" expl="rewrite premises" proved="true">
        <transf name="replace" proved="true" arg1="(width_pre (pre c))" arg2="(width c -i+i)">
         <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.1.0" expl="rewrite premises" proved="true">
         <transf name="apply" proved="true" arg1="kronecker_ket_l">
          <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.76" steps="729732"/></proof>
          </goal>
          <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.1.0.1" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.73" steps="729740"/></proof>
          </goal>
          <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.1.0.2" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.85" steps="730726"/></proof>
          </goal>
          <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.1.0.3" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="2.52" steps="849292"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.0.1.1" expl="equality hypothesis" proved="true">
         <proof prover="8"><result status="valid" time="1.79" steps="730732"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sem_anc&#39;vc.7.0.0.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="2.47" steps="850547"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="mat_sem_anc&#39;vc.7.0.1" expl="apply premises" proved="true">
    <transf name="assert" proved="true" arg1="(valid_index (ket i 0) 0 0 /\ get_ket (ket i 0) 0  = c_one)">
     <goal name="mat_sem_anc&#39;vc.7.0.1.0" expl="asserted formula" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="mat_sem_anc&#39;vc.7.0.1.0.0" proved="true">
      <transf name="apply" proved="true" arg1="set_valid_index">
       <goal name="mat_sem_anc&#39;vc.7.0.1.0.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mat_sem_anc&#39;vc.7.0.1.0.0.0.0" proved="true">
        <proof prover="8"><result status="valid" time="0.99" steps="589813"/></proof>
        </goal>
        <goal name="mat_sem_anc&#39;vc.7.0.1.0.0.0.1" proved="true">
        <proof prover="8"><result status="valid" time="2.11" steps="753572"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sem_anc&#39;vc.7.0.1.0.0.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="mat_sem_anc&#39;vc.7.0.1.0.0.1.0" proved="true">
        <proof prover="8"><result status="valid" time="0.92" steps="589813"/></proof>
        </goal>
        <goal name="mat_sem_anc&#39;vc.7.0.1.0.0.1.1" proved="true">
        <proof prover="8"><result status="valid" time="2.37" steps="753464"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sem_anc&#39;vc.7.0.1.0.1" proved="true">
      <transf name="rewrite" proved="true" arg1="get__ket_value">
       <goal name="mat_sem_anc&#39;vc.7.0.1.0.1.0" proved="true">
       <proof prover="8"><result status="valid" time="2.12" steps="754889"/></proof>
       </goal>
       <goal name="mat_sem_anc&#39;vc.7.0.1.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="1.47" steps="629753"/></proof>
       </goal>
       <goal name="mat_sem_anc&#39;vc.7.0.1.0.1.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="2.49" steps="754644"/></proof>
       </goal>
       <goal name="mat_sem_anc&#39;vc.7.0.1.0.1.3" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="2.54" steps="754644"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sem_anc&#39;vc.7.0.1.1" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.80" steps="630493"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sem_anc&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.08" steps="589701"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sem_anc_&#39;vc" expl="VC for mat_sem_anc_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sem_anc_&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.91" steps="589721"/></proof>
  </goal>
  <goal name="mat_sem_anc_&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.99" steps="589724"/></proof>
  </goal>
  <goal name="mat_sem_anc_&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.98" steps="589727"/></proof>
  </goal>
  <goal name="mat_sem_anc_&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.02" steps="589730"/></proof>
  </goal>
  <goal name="mat_sem_anc_&#39;vc.4" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="ket_decomp_" arg2="x,(width c - i)">
   <goal name="mat_sem_anc_&#39;vc.4.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="goal_comm">
    <goal name="mat_sem_anc_&#39;vc.4.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="mat_mult_ket_bv_gen">
     <goal name="mat_sem_anc_&#39;vc.4.0.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(kronecker x (ket i 0))" arg2="(kronecker ( ket_sum_l (n_bvs (width c - i))
    (fun (bvx:bitvec) -&gt; get_ket x (bv_to_int bvx) *.. bv_to_ket bvx)
    (width c - i)) (ket i 0))">
      <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="kronecker_ket_sum_distr_l_rew">
       <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="kronecker_ket_sum_distr_l_rew">
        <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="mat_mult_ket_sum_l">
         <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
          <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="2.58" steps="752895"/></proof>
          </goal>
          <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.87" steps="645114"/></proof>
          </goal>
          <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.76" steps="630238"/></proof>
          </goal>
          <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.0.3.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr">
             <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr">
              <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="mat_mut_scal">
               <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="scalar_eq_gen">
                <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="Requires4">
                 <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.47" steps="833224"/></proof>
                 </goal>
                 <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.0.3.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                 <proof prover="0"><result status="valid" time="0.97"/></proof>
                 </goal>
                 <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.0.3.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.96" steps="710551"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.0.3.0.0.0.0.0.1" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="1.16" steps="666496"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.0.3.0.0.0.0.1" expl="rewrite premises" proved="true">
               <transf name="rewrite" proved="true" arg1="kronecker_rows">
                <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.0.3.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                <transf name="replace" proved="true" arg1="(columns (mat_sem c))" arg2="(power 2 (width c -i+i))">
                 <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.0.3.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="power_sum">
                  <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.0.3.0.0.0.0.1.0.0.0" expl="rewrite premises" proved="true">
                  <transf name="apply" proved="true" arg1="mult_eq">
                   <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.0.3.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="replace" proved="true" arg1="(width c - i)
" arg2="(ket_length (bv_to_ket a))">
                    <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.0.3.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.46" steps="831753"/></proof>
                    </goal>
                    <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.0.3.0.0.0.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
                    <transf name="rewrite" proved="true" arg1="bv_to_ket_length">
                     <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.0.3.0.0.0.0.1.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
                     <transf name="replace" proved="true" arg1="(length1 a)" arg2="(ket_length x)">
                      <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.0.3.0.0.0.0.1.0.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
                      <proof prover="8"><result status="valid" time="1.93" steps="710477"/></proof>
                      </goal>
                      <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.0.3.0.0.0.0.1.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
                      <proof prover="8"><result status="valid" time="2.55" steps="831443"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.0.3.0.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.55" steps="833835"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.0.3.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.77" steps="709812"/></proof>
                  </goal>
                  <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.0.3.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.70" steps="709833"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.0.3.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
                 <proof prover="8"><result status="valid" time="2.40" steps="831627"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="2.24" steps="793898"/></proof>
         </goal>
         <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="kronecker_ket_l">
            <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="1.74" steps="709807"/></proof>
            </goal>
            <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.2.0.0.1" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="2.62" steps="837594"/></proof>
            </goal>
            <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.2.0.0.2" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="2.56" steps="827089"/></proof>
            </goal>
            <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.2.0.0.3" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="2.69" steps="837659"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.3.0" proved="true">
          <proof prover="8"><result status="valid" time="2.27" steps="745813"/></proof>
          </goal>
          <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.3.1" proved="true">
          <transf name="replace" proved="true" arg1="((width c - i) + ket_length (ket i 0))" arg2="(width c)">
           <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.3.1.0" proved="true">
           <proof prover="8"><result status="valid" time="2.25" steps="746899"/></proof>
           </goal>
           <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.0.3.1.1" expl="equality hypothesis" proved="true">
           <proof prover="8"><result status="valid" time="2.32" steps="745935"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="4.88" steps="891312"/></proof>
        </goal>
        <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="2.49" steps="762692"/></proof>
        </goal>
        <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.0.3" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="2.43" steps="793898"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.1" expl="rewrite premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.1.0" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="2.77" steps="847101"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="2.43" steps="762692"/></proof>
       </goal>
       <goal name="mat_sem_anc_&#39;vc.4.0.0.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.90"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="mat_sem_anc_&#39;vc.4.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="8"><result status="valid" time="2.78" steps="807744"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="mat_sem_anc_&#39;vc.4.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.55" steps="630202"/></proof>
     </goal>
     <goal name="mat_sem_anc_&#39;vc.4.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.57" steps="630277"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mat_sem_anc_&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.91" steps="589743"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sem_id&#39;vc" expl="VC for mat_sem_id" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sem_id&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(mat_sem id)" arg2="(sem_id_mat())">
   <goal name="mat_sem_id&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.74" steps="704351"/></proof>
   </goal>
   <goal name="mat_sem_id&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <proof prover="8"><result status="valid" time="1.54" steps="627129"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="correct_path_sum_basis&#39;vc" expl="VC for correct_path_sum_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="correct_path_sum_basis&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.48" steps="626646"/></proof>
  </goal>
  <goal name="correct_path_sum_basis&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.80" steps="704878"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Correct_circuit_c" proved="true">
 <goal name="set_correct_path_sum&#39;vc" expl="VC for set_correct_path_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_correct_path_sum&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="2.26" steps="734295"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_correct_path_sum&#39;vc" expl="VC for get_correct_path_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_correct_path_sum&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.63" steps="638252"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_correct_path_sum_path&#39;vc" expl="VC for get_correct_path_sum_path" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_correct_path_sum_path&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.86" steps="587415"/></proof>
  </goal>
  <goal name="get_correct_path_sum_path&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.88" steps="587418"/></proof>
  </goal>
  <goal name="get_correct_path_sum_path&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.95" steps="587421"/></proof>
  </goal>
  <goal name="get_correct_path_sum_path&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.50" steps="627719"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_correct_path_sum_basis&#39;vc" expl="VC for set_correct_path_sum_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_correct_path_sum_basis&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.91" steps="587583"/></proof>
  </goal>
  <goal name="set_correct_path_sum_basis&#39;vc.1" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="ket_decomp_" arg2="x,(width c) ">
   <goal name="set_correct_path_sum_basis&#39;vc.1.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_mult_ket_bv_gen">
    <goal name="set_correct_path_sum_basis&#39;vc.1.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="pps_apply_decomp">
     <goal name="set_correct_path_sum_basis&#39;vc.1.0.0.0" expl="precondition" proved="true">
     <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
      <goal name="set_correct_path_sum_basis&#39;vc.1.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="2.17" steps="739737"/></proof>
      </goal>
      <goal name="set_correct_path_sum_basis&#39;vc.1.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="1.55" steps="638395"/></proof>
      </goal>
      <goal name="set_correct_path_sum_basis&#39;vc.1.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="1.54" steps="628079"/></proof>
      </goal>
      <goal name="set_correct_path_sum_basis&#39;vc.1.0.0.0.3" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="set_correct_path_sum_basis&#39;vc.1.0.0.0.3.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="set_correct_path_sum_basis&#39;vc.1.0.0.0.3.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="scalar_eq_gen">
         <goal name="set_correct_path_sum_basis&#39;vc.1.0.0.0.3.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="Requires1">
          <goal name="set_correct_path_sum_basis&#39;vc.1.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="mat_mult_eq">
           <goal name="set_correct_path_sum_basis&#39;vc.1.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="0.88" steps="664341"/></proof>
           </goal>
           <goal name="set_correct_path_sum_basis&#39;vc.1.0.0.0.3.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="2.44" steps="827854"/></proof>
           </goal>
           <goal name="set_correct_path_sum_basis&#39;vc.1.0.0.0.3.0.0.0.0.2" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="2.57" steps="832079"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="set_correct_path_sum_basis&#39;vc.1.0.0.0.3.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="2.48" steps="826453"/></proof>
          </goal>
          <goal name="set_correct_path_sum_basis&#39;vc.1.0.0.0.3.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="1.76" steps="709296"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="set_correct_path_sum_basis&#39;vc.1.0.0.0.3.0.0.1" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.02" steps="664341"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="set_correct_path_sum_basis&#39;vc.1.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.43" steps="627675"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="set_correct_path_sum_basis&#39;vc.1.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.50" steps="628002"/></proof>
    </goal>
    <goal name="set_correct_path_sum_basis&#39;vc.1.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="2.30" steps="747586"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="set_correct_path_sum_basis&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.88" steps="587594"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_correct_pps&#39;vc" expl="VC for set_correct_pps" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_correct_pps&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_correct_path_sum">
   <goal name="set_correct_pps&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="0.95" steps="587724"/></proof>
   </goal>
   <goal name="set_correct_pps&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="set_correct_pps&#39;vc.0.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="mat_mult_ket_bv_gen">
     <goal name="set_correct_pps&#39;vc.0.1.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="get_pps_apply">
      <goal name="set_correct_pps&#39;vc.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
       <goal name="set_correct_pps&#39;vc.0.1.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="2.18" steps="736841"/></proof>
       </goal>
       <goal name="set_correct_pps&#39;vc.0.1.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="2.24" steps="739523"/></proof>
       </goal>
       <goal name="set_correct_pps&#39;vc.0.1.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.36" steps="628007"/></proof>
       </goal>
       <goal name="set_correct_pps&#39;vc.0.1.0.0.0.3" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="set_correct_pps&#39;vc.0.1.0.0.0.3.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="set_correct_pps&#39;vc.0.1.0.0.0.3.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="scalar_eq_gen">
          <goal name="set_correct_pps&#39;vc.0.1.0.0.0.3.0.0.0" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="(pps_apply_basis h a)" arg2="(pps_apply h (bv_to_ket a))">
           <goal name="set_correct_pps&#39;vc.0.1.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="mat_sem_to_path">
            <goal name="set_correct_pps&#39;vc.0.1.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="Requires">
             <goal name="set_correct_pps&#39;vc.0.1.0.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="replace" proved="true" arg1="(ket (ket_length x) (bv_to_int a))" arg2="(bv_to_ket a)">
              <goal name="set_correct_pps&#39;vc.0.1.0.0.0.3.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="10"><result status="valid" time="2.06" steps="102716"/></proof>
              </goal>
              <goal name="set_correct_pps&#39;vc.0.1.0.0.0.3.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
              <proof prover="8"><result status="valid" time="2.57" steps="827025"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="set_correct_pps&#39;vc.0.1.0.0.0.3.0.0.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="2.55" steps="825255"/></proof>
             </goal>
             <goal name="set_correct_pps&#39;vc.0.1.0.0.0.3.0.0.0.0.0.2" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="1.82" steps="710018"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="set_correct_pps&#39;vc.0.1.0.0.0.3.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="2.53" steps="826845"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="set_correct_pps&#39;vc.0.1.0.0.0.3.0.0.0.1" expl="equality hypothesis" proved="true">
           <transf name="rewrite" proved="true" arg1="rewrite_pps_apply_basis">
            <goal name="set_correct_pps&#39;vc.0.1.0.0.0.3.0.0.0.1.0" expl="equality hypothesis" proved="true">
            <transf name="rewrite" proved="true" arg1="bv_to_ket_to_bv">
             <goal name="set_correct_pps&#39;vc.0.1.0.0.0.3.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
             <transf name="compute_specified" proved="true" >
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="set_correct_pps&#39;vc.0.1.0.0.0.3.0.0.0.1.1" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="2.53" steps="824402"/></proof>
            </goal>
            <goal name="set_correct_pps&#39;vc.0.1.0.0.0.3.0.0.0.1.2" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="1.78" steps="710018"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="set_correct_pps&#39;vc.0.1.0.0.0.3.0.0.1" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.01" steps="664320"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="set_correct_pps&#39;vc.0.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.44" steps="627624"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="set_correct_pps&#39;vc.0.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.56" steps="627955"/></proof>
     </goal>
     <goal name="set_correct_pps&#39;vc.0.1.0.2" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="2.18" steps="744737"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_correct_pps_&#39;vc" expl="VC for set_correct_pps_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_correct_pps_&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.93" steps="587865"/></proof>
  </goal>
  <goal name="set_correct_pps_&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.12" steps="738265"/></proof>
  </goal>
  <goal name="set_correct_pps_&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.89" steps="587876"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="correct_seq&#39;vc" expl="VC for correct_seq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="correct_seq&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="correct_seq&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="1.98" steps="771952"/></proof>
   </goal>
   <goal name="correct_seq&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="2.09" steps="761350"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="correct_seq&#39;vc.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="correct_seq&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="1.25" steps="716836"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="correct_seq&#39;vc.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="correct_seq&#39;vc.2.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="Requires1">
    <goal name="correct_seq&#39;vc.2.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="correct_seq&#39;vc.2.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="2.61" steps="870983"/></proof>
     </goal>
     <goal name="correct_seq&#39;vc.2.0.0.1" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="2.76" steps="870972"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="correct_seq&#39;vc.2.0.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="correct_seq&#39;vc.2.0.1.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="2.80" steps="870983"/></proof>
     </goal>
     <goal name="correct_seq&#39;vc.2.0.1.1" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="2.85" steps="870972"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="correct_seq&#39;vc.2.0.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="correct_seq&#39;vc.2.0.2.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.14" steps="717088"/></proof>
     </goal>
     <goal name="correct_seq&#39;vc.2.0.2.1" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.13" steps="717099"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="correct_seq&#39;vc.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="correct_seq&#39;vc.3.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="Requires3">
    <goal name="correct_seq&#39;vc.3.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="correct_seq&#39;vc.3.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="2.77" steps="871308"/></proof>
     </goal>
     <goal name="correct_seq&#39;vc.3.0.0.1" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="2.58" steps="871297"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="correct_seq&#39;vc.3.0.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="correct_seq&#39;vc.3.0.1.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="2.59" steps="871308"/></proof>
     </goal>
     <goal name="correct_seq&#39;vc.3.0.1.1" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="2.51" steps="871297"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="correct_seq&#39;vc.4" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_correct_pps">
   <goal name="correct_seq&#39;vc.4.0" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="2.03" steps="761364"/></proof>
   </goal>
   <goal name="correct_seq&#39;vc.4.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="correct_seq&#39;vc.4.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures">
     <goal name="correct_seq&#39;vc.4.1.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(pps_apply h x)" arg2="(path_sem c x)">
      <goal name="correct_seq&#39;vc.4.1.0.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="( pps_apply h&#39; (path_sem c x) )" arg2="( path_sem c&#39; (path_sem c x) )">
       <goal name="correct_seq&#39;vc.4.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(path_sem_basis (sequence c c&#39;) x)" arg2="(path_sem (sequence c c&#39;) x)">
        <goal name="correct_seq&#39;vc.4.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="path_sem_comp_pre">
         <goal name="correct_seq&#39;vc.4.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.16" steps="716903"/></proof>
         </goal>
         <goal name="correct_seq&#39;vc.4.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="1.93" steps="772091"/></proof>
         </goal>
         <goal name="correct_seq&#39;vc.4.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="1.17" steps="716905"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="correct_seq&#39;vc.4.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="8"><result status="valid" time="1.91" steps="761321"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="correct_seq&#39;vc.4.1.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="0"><result status="valid" time="1.02"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="correct_seq&#39;vc.4.1.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="0"><result status="valid" time="1.07"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="correct_seq&#39;vc.4.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.82" steps="772093"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="seq_pps&#39;vc" expl="VC for seq_pps" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="seq_pps&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.15" steps="717882"/></proof>
  </goal>
  <goal name="seq_pps&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.12" steps="717885"/></proof>
  </goal>
  <goal name="seq_pps&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.13" steps="717888"/></proof>
  </goal>
  <goal name="seq_pps&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.19" steps="717891"/></proof>
  </goal>
  <goal name="seq_pps&#39;vc.4" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.14" steps="717894"/></proof>
  </goal>
  <goal name="seq_pps&#39;vc.5" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="Requires6">
   <goal name="seq_pps&#39;vc.5.0" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.87" steps="761529"/></proof>
   </goal>
   <goal name="seq_pps&#39;vc.5.1" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.82" steps="761529"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="seq_pps&#39;vc.6" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="Requires6">
   <goal name="seq_pps&#39;vc.6.0" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.76" steps="761827"/></proof>
   </goal>
   <goal name="seq_pps&#39;vc.6.1" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.81" steps="761827"/></proof>
   </goal>
   <goal name="seq_pps&#39;vc.6.2" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.03" steps="718541"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="seq_pps&#39;vc.7" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.06" steps="717900"/></proof>
  </goal>
  <goal name="seq_pps&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.85" steps="762098"/></proof>
  </goal>
  <goal name="seq_pps&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="2.55" steps="875107"/></proof>
  </goal>
  <goal name="seq_pps&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.95" steps="762147"/></proof>
  </goal>
  <goal name="seq_pps&#39;vc.11" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.10" steps="718050"/></proof>
  </goal>
  <goal name="seq_pps&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.12" steps="718051"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="correct_par&#39;vc" expl="VC for correct_par" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="correct_par&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.69" steps="876255"/></proof>
  </goal>
  <goal name="correct_par&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.11" steps="720676"/></proof>
  </goal>
  <goal name="correct_par&#39;vc.2" expl="precondition" proved="true">
  <transf name="eliminate_if" proved="true" >
   <goal name="correct_par&#39;vc.2.0" expl="VC for correct_par" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="correct_par&#39;vc.2.0.0" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="Requires3">
     <goal name="correct_par&#39;vc.2.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.97" steps="774430"/></proof>
     </goal>
     <goal name="correct_par&#39;vc.2.0.0.1" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.92" steps="774430"/></proof>
     </goal>
     <goal name="correct_par&#39;vc.2.0.0.2" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.15" steps="731862"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="correct_par&#39;vc.2.0.1" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="Requires2">
     <goal name="correct_par&#39;vc.2.0.1.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="2.03" steps="774430"/></proof>
     </goal>
     <goal name="correct_par&#39;vc.2.0.1.1" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="2.01" steps="774430"/></proof>
     </goal>
     <goal name="correct_par&#39;vc.2.0.1.2" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.18" steps="731882"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="correct_par&#39;vc.3" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="Requires5">
   <goal name="correct_par&#39;vc.3.0" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.81" steps="764297"/></proof>
   </goal>
   <goal name="correct_par&#39;vc.3.1" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.85" steps="764297"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="correct_par&#39;vc.4" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_correct_path_sum">
   <goal name="correct_par&#39;vc.4.0" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="2.68" steps="876633"/></proof>
   </goal>
   <goal name="correct_par&#39;vc.4.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="correct_par&#39;vc.4.1.0" expl="apply premises" proved="true">
    <transf name="instantiate" proved="true" arg1="ket_decomp_" arg2="x,(width (parallel c c&#39;))">
     <goal name="correct_par&#39;vc.4.1.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="get_pps_apply">
      <goal name="correct_par&#39;vc.4.1.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_mult_ket_bv_gen">
       <goal name="correct_par&#39;vc.4.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
        <goal name="correct_par&#39;vc.4.1.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="2.72" steps="878635"/></proof>
        </goal>
        <goal name="correct_par&#39;vc.4.1.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="2.83" steps="896189"/></proof>
        </goal>
        <goal name="correct_par&#39;vc.4.1.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="2.74" steps="880632"/></proof>
        </goal>
        <goal name="correct_par&#39;vc.4.1.0.0.0.0.3" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="scalar_eq_gen">
           <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="(pps_apply_basis h&#39;&#39; a)" arg2="(pps_apply h&#39;&#39; (bv_to_ket a))">
            <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(bv_to_ket a)" arg2="(kronecker (bv_to_ket(hpart a (width c))) (bv_to_ket(tpart a (width c))))">
             <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="Ensures">
              <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="mat_sem_to_path">
               <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="replace" proved="true" arg1="(ket (ket_length x) (bv_to_int a))" arg2="(kronecker (bv_to_ket(hpart a (width c))) (bv_to_ket(tpart a (width c))))">
                <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="path_sem_kron_pre">
                 <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="apply" proved="true" arg1="kronecker_eq">
                  <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="path_sem_to_mat">
                   <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="apply" proved="true" arg1="get_correct_path_sum">
                    <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.30" steps="848157"/></proof>
                    </goal>
                    <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="3.04" steps="972854"/></proof>
                    </goal>
                    <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="1.32" steps="799207"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                   <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
                    <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.96" steps="973785"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="path_sem_to_mat">
                   <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                   <transf name="apply" proved="true" arg1="get_correct_path_sum">
                    <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.08" steps="848161"/></proof>
                    </goal>
                    <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
                    <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
                     <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
                     <transf name="replace" proved="true" arg1="(width c&#39;)" arg2="(length1 a - width c)">
                      <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
                      <transf name="apply" proved="true" arg1="tpart_length">
                       <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
                       <proof prover="8"><result status="valid" time="3.00" steps="985271"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.0.0.1.0.1.0.1" expl="equality hypothesis" proved="true">
                      <proof prover="10"><result status="valid" time="2.28" steps="103320"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.0.0.1.0.2" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="1.29" steps="799207"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                   <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
                    <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                    <transf name="replace" proved="true" arg1="(width c&#39;)" arg2="(length1 a - width c)">
                     <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                     <transf name="apply" proved="true" arg1="tpart_length">
                      <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
                      <proof prover="8"><result status="valid" time="3.29" steps="985271"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.0.0.1.1.0.1" expl="equality hypothesis" proved="true">
                     <proof prover="10"><result status="valid" time="2.32" steps="103320"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                 <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
                  <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                  <transf name="replace" proved="true" arg1="(width c&#39;)" arg2="(length1 a - width c)">
                   <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.92" steps="973785"/></proof>
                   </goal>
                   <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
                   <proof prover="10"><result status="valid" time="2.25" steps="103320"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                 <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
                  <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
                  <transf name="replace" proved="true" arg1="(width c&#39;)" arg2="(length1 a - width c)">
                   <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
                   <transf name="apply" proved="true" arg1="tpart_length">
                    <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.98" steps="985271"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.0.2.0.1" expl="equality hypothesis" proved="true">
                   <proof prover="10"><result status="valid" time="2.37" steps="103320"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                <transf name="replace" proved="true" arg1="( ket (ket_length x) (bv_to_int a))" arg2="(bv_to_ket a)">
                 <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
                 <transf name="apply" proved="true" arg1="bv_to_ket_kronecker_">
                  <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.94" steps="985271"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
                 <transf name="apply" proved="true" arg1="ket_bv_to_int_to_bv_to_ket">
                  <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                  <transf name="replace" proved="true" arg1="(length1 a )" arg2="(h_width h&#39;&#39;)">
                   <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.88" steps="969199"/></proof>
                   </goal>
                   <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.0.1.1.0.1" expl="equality hypothesis" proved="true">
                   <proof prover="7"><result status="valid" time="2.38" steps="11973463"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="3.16" steps="972041"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="2.93" steps="972981"/></proof>
              </goal>
              <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.2" expl="rewrite premises" proved="true">
              <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
               <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.0.2.0" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="3.04" steps="986029"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.1" expl="equality hypothesis" proved="true">
             <transf name="apply" proved="true" arg1="bv_to_ket_kronecker_">
              <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.0.1.0" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="3.32" steps="985271"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.0.1" expl="equality hypothesis" proved="true">
            <proof prover="7"><result status="valid" time="2.43" steps="11984793"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="correct_par&#39;vc.4.1.0.0.0.0.3.0.0.1" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="1.31" steps="799205"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="correct_par&#39;vc.4.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="2.03" steps="764322"/></proof>
       </goal>
       <goal name="correct_par&#39;vc.4.1.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="2.69" steps="886399"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="correct_par&#39;vc.4.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="2.83" steps="896301"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="sequence_ghost_pps&#39;vc" expl="VC for sequence_ghost_pps" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sequence_ghost_pps&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.22" steps="721752"/></proof>
  </goal>
  <goal name="sequence_ghost_pps&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.20" steps="721755"/></proof>
  </goal>
  <goal name="sequence_ghost_pps&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.20" steps="721758"/></proof>
  </goal>
  <goal name="sequence_ghost_pps&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.21" steps="721761"/></proof>
  </goal>
  <goal name="sequence_ghost_pps&#39;vc.4" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.19" steps="721764"/></proof>
  </goal>
  <goal name="sequence_ghost_pps&#39;vc.5" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="Requires6">
   <goal name="sequence_ghost_pps&#39;vc.5.0" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.94" steps="764835"/></proof>
   </goal>
   <goal name="sequence_ghost_pps&#39;vc.5.1" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.95" steps="764835"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sequence_ghost_pps&#39;vc.6" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="Requires6">
   <goal name="sequence_ghost_pps&#39;vc.6.0" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.85" steps="765268"/></proof>
   </goal>
   <goal name="sequence_ghost_pps&#39;vc.6.1" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.99" steps="765268"/></proof>
   </goal>
   <goal name="sequence_ghost_pps&#39;vc.6.2" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.20" steps="722411"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sequence_ghost_pps&#39;vc.7" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.14" steps="721770"/></proof>
  </goal>
  <goal name="sequence_ghost_pps&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.89" steps="765255"/></proof>
  </goal>
  <goal name="sequence_ghost_pps&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="2.61" steps="879680"/></proof>
  </goal>
  <goal name="sequence_ghost_pps&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.88" steps="765314"/></proof>
  </goal>
  <goal name="sequence_ghost_pps&#39;vc.11" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.27" steps="721920"/></proof>
  </goal>
  <goal name="sequence_ghost_pps&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.27" steps="721921"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="parallel_ghost_pps&#39;vc" expl="VC for parallel_ghost_pps" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="parallel_ghost_pps&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.29" steps="724514"/></proof>
  </goal>
  <goal name="parallel_ghost_pps&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.21" steps="724517"/></proof>
  </goal>
  <goal name="parallel_ghost_pps&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.22" steps="724520"/></proof>
  </goal>
  <goal name="parallel_ghost_pps&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.09" steps="724523"/></proof>
  </goal>
  <goal name="parallel_ghost_pps&#39;vc.4" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="Requires6">
   <goal name="parallel_ghost_pps&#39;vc.4.0" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.79" steps="767596"/></proof>
   </goal>
   <goal name="parallel_ghost_pps&#39;vc.4.1" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="2.09" steps="767596"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="parallel_ghost_pps&#39;vc.5" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.54" steps="880923"/></proof>
  </goal>
  <goal name="parallel_ghost_pps&#39;vc.6" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="Requires6">
   <goal name="parallel_ghost_pps&#39;vc.6.0" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="2.08" steps="768448"/></proof>
   </goal>
   <goal name="parallel_ghost_pps&#39;vc.6.1" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.83" steps="768448"/></proof>
   </goal>
   <goal name="parallel_ghost_pps&#39;vc.6.2" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.21" steps="725577"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="parallel_ghost_pps&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.20" steps="724607"/></proof>
  </goal>
  <goal name="parallel_ghost_pps&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="2.14" steps="778658"/></proof>
  </goal>
  <goal name="parallel_ghost_pps&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="2.55" steps="882435"/></proof>
  </goal>
  <goal name="parallel_ghost_pps&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="2.57" steps="882474"/></proof>
  </goal>
  <goal name="parallel_ghost_pps&#39;vc.11" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.15" steps="724683"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="correct_ancilla&#39;vc" expl="VC for correct_ancilla" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="correct_ancilla&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="correct_ancilla&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="1.54" steps="866589"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="correct_ancilla&#39;vc.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="correct_ancilla&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="2.27" steps="915627"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="correct_ancilla&#39;vc.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="correct_ancilla&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="2.22" steps="915639"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="correct_ancilla&#39;vc.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="correct_ancilla&#39;vc.3.0" expl="precondition" proved="true">
   <proof prover="8"><result status="valid" time="1.48" steps="866621"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="correct_ancilla&#39;vc.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="correct_ancilla&#39;vc.4.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_sem_to_path">
    <goal name="correct_ancilla&#39;vc.4.0.0" expl="precondition" proved="true">
    <transf name="replace" proved="true" arg1="(path_sem c (kronecker x (ket i 0)))" arg2="(kronecker (path_sem (ancilla_g c i path_sem_target) x) (ket i 0))">
     <goal name="correct_ancilla&#39;vc.4.0.0.0" expl="precondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="correct_ancilla&#39;vc.4.0.0.0.0" expl="precondition" proved="true">
      <transf name="rewrite" proved="true" arg1="ancilla_g&#39;spec1">
       <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0" expl="precondition" proved="true">
       <transf name="rewrite" proved="true" arg1="Requires8">
        <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0" expl="precondition" proved="true">
        <transf name="replace" proved="true" arg1="(mat_mult (pps_to_mat h&#39;) x)" arg2="(pps_apply (pps_ancs h i) x)">
         <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.0" expl="precondition" proved="true">
         <transf name="apply" proved="true" arg1="kronecker_eq">
          <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="goal_comm">
           <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="pps_apply_anc">
            <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="1.84" steps="1018110"/></proof>
            </goal>
            <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="3.09" steps="1073557"/></proof>
            </goal>
            <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="1.41"/></proof>
            </goal>
            <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.0.0.0.3.0" expl="apply premises" proved="true">
             <transf name="replace" proved="true" arg1="(pps_apply h (kronecker x (ket i 0)))" arg2="(path_sem c (kronecker x (ket i 0)))">
              <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
              <transf name="apply" proved="true" arg1="Requires8">
               <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
               <proof prover="0"><result status="valid" time="1.37"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.0.0.0.3.0.1" expl="equality hypothesis" proved="true">
              <transf name="apply" proved="true" arg1="get_correct_path_sum_path">
               <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.0.0.0.3.0.1.0" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="3.08" steps="1070699"/></proof>
               </goal>
               <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.0.0.0.3.0.1.1" expl="apply premises" proved="true">
               <transf name="replace" proved="true" arg1="(width c)" arg2="(width c-i+i)">
                <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.0.0.0.3.0.1.1.0" expl="apply premises" proved="true">
                <transf name="apply" proved="true" arg1="kronecker_ket_l">
                 <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.0.0.0.3.0.1.1.0.0" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.91" steps="1069651"/></proof>
                 </goal>
                 <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.0.0.0.3.0.1.1.0.1" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.58" steps="1069659"/></proof>
                 </goal>
                 <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.0.0.0.3.0.1.1.0.2" expl="apply premises" proved="true">
                 <proof prover="0"><result status="valid" time="1.31"/></proof>
                 </goal>
                 <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.0.0.0.3.0.1.1.0.3" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="3.41" steps="1190193"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.0.0.0.3.0.1.1.1" expl="equality hypothesis" proved="true">
                <proof prover="8"><result status="valid" time="1.61" steps="1018147"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.0.0.0.3.0.1.2" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="1.80" steps="1018133"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="1.20"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.85" steps="1018108"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <transf name="rewrite" proved="true" arg1="pps_to_mat&#39;spec">
          <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="get_pps_apply_equiv">
           <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="3.68" steps="1205965"/></proof>
           </goal>
           <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="set_pps_apply_equiv_sim">
            <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="4.07" steps="1205965"/></proof>
            </goal>
            <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.1.0.1.1" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="3.78" steps="1190431"/></proof>
            </goal>
            <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.1.0.1.2" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.1.0.1.2.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="Requires5">
              <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.1.0.1.2.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="pps_ancs&#39;spec1">
               <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.1.0.1.2.0.0.0" expl="apply premises" proved="true">
               <transf name="compute_specified" proved="true" >
                <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.1.0.1.2.0.0.0.0" expl="apply premises" proved="true">
                <transf name="apply" proved="true" arg1="pps&#39;invariant1">
                 <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.1.0.1.2.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.1.0.1.2.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="3.62" steps="1203609"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.1.0.1.2.0.0.0.0.1" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.1.0.1.2.0.0.0.0.1.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.81" steps="1018382"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.1.0.1.2.0.0.0.0.2" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.1.0.1.2.0.0.0.0.2.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.75" steps="1018359"/></proof>
                  </goal>
                  <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.1.0.1.2.0.0.0.0.2.1" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.85" steps="1073704"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.1.0.1.2.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="1.72" steps="1018359"/></proof>
               </goal>
               <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.1.0.1.2.0.0.2" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="2.82" steps="1073718"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.1.0.1.2.0.1" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="2.81" steps="1069852"/></proof>
              </goal>
              <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.1.0.1.2.0.2" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="2.64" steps="1069852"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.1.0.1.3" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.1.0.1.3.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="Requires4">
              <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.1.0.1.3.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="pps_ancs&#39;spec">
               <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.1.0.1.3.0.0.0" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="pps&#39;invariant">
                <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.1.0.1.3.0.0.0.0" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.1.0.1.3.0.0.0.0.0" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="3.76" steps="1203584"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.1.0.1.3.0.0.0.1" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.1.0.1.3.0.0.0.1.0" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.80" steps="1018357"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.1.0.1.3.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="1.74" steps="1018334"/></proof>
               </goal>
               <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.1.0.1.3.0.0.2" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="2.80" steps="1073678"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.1.0.2" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="2.80" steps="1069603"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="2.87" steps="1069603"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="correct_ancilla&#39;vc.4.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="1.66" steps="1018110"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="correct_ancilla&#39;vc.4.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="1.67" steps="1018110"/></proof>
       </goal>
       <goal name="correct_ancilla&#39;vc.4.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="1.68" steps="1018110"/></proof>
       </goal>
       <goal name="correct_ancilla&#39;vc.4.0.0.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="2.76" steps="1069728"/></proof>
       </goal>
       <goal name="correct_ancilla&#39;vc.4.0.0.0.0.4" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="3.56" steps="1188956"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="correct_ancilla&#39;vc.4.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="0"><result status="valid" time="1.24"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="correct_ancilla&#39;vc.4.0.1" expl="rewrite premises" proved="true">
    <transf name="replace" proved="true" arg1="(width c)" arg2="(width c-i+i)">
     <goal name="correct_ancilla&#39;vc.4.0.1.0" expl="rewrite premises" proved="true">
     <transf name="apply" proved="true" arg1="kronecker_ket_l">
      <goal name="correct_ancilla&#39;vc.4.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="2.23" steps="915667"/></proof>
      </goal>
      <goal name="correct_ancilla&#39;vc.4.0.1.0.1" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="2.21" steps="915670"/></proof>
      </goal>
      <goal name="correct_ancilla&#39;vc.4.0.1.0.2" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="1.40" steps="866644"/></proof>
      </goal>
      <goal name="correct_ancilla&#39;vc.4.0.1.0.3" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="3.13" steps="1036952"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="correct_ancilla&#39;vc.4.0.1.1" expl="equality hypothesis" proved="true">
     <proof prover="8"><result status="valid" time="1.42" steps="866658"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="correct_ancilla&#39;vc.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="correct_ancilla&#39;vc.5.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_correct_path_sum">
    <goal name="correct_ancilla&#39;vc.5.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="ancilla_width">
     <goal name="correct_ancilla&#39;vc.5.0.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.48" steps="866611"/></proof>
     </goal>
     <goal name="correct_ancilla&#39;vc.5.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.39" steps="866611"/></proof>
     </goal>
     <goal name="correct_ancilla&#39;vc.5.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.42" steps="866611"/></proof>
     </goal>
     <goal name="correct_ancilla&#39;vc.5.0.0.3" expl="rewrite premises" proved="true">
     <transf name="exists" proved="true" arg1="path_sem_target">
      <goal name="correct_ancilla&#39;vc.5.0.0.3.0" proved="true">
      <proof prover="8"><result status="valid" time="2.31" steps="915754"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="correct_ancilla&#39;vc.5.0.1" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures">
     <goal name="correct_ancilla&#39;vc.5.0.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="correct_ancilla&#39;vc.5.0.1.0.0" expl="apply premises" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="correct_ancilla&#39;vc.5.0.1.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="pps_to_mat&#39;spec">
        <goal name="correct_ancilla&#39;vc.5.0.1.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.73" steps="1018091"/></proof>
        </goal>
        <goal name="correct_ancilla&#39;vc.5.0.1.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="3.49" steps="1187673"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_correct_main_path_sum&#39;vc" expl="VC for set_correct_main_path_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_correct_main_path_sum&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_correct_pps">
   <goal name="set_correct_main_path_sum&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.19" steps="727960"/></proof>
   </goal>
   <goal name="set_correct_main_path_sum&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="set_correct_main_path_sum&#39;vc.0.1.0" expl="apply premises" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="path_sem_basis&#39;spec">
      <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="rewrite_pps_apply_basis">
       <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="pps_apply_basis&#39;def">
        <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="pps_apply_basis&#39;def">
         <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="scalar_eq_gen">
          <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
           <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="3.07" steps="1019387"/></proof>
           </goal>
           <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="2.45" steps="912206"/></proof>
           </goal>
           <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
           <proof prover="8"><result status="valid" time="2.32" steps="909751"/></proof>
           </goal>
           <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="scalar_eq_gen">
              <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
              <transf name="apply" proved="true" arg1="bv_to_ket_eq">
               <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
               <transf name="replace" proved="true" arg1="(h_width (circ_to_pps c))" arg2="(h_width h)">
                <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="make_bv_length">
                 <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="make_bv_length">
                  <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.52" steps="953671"/></proof>
                  </goal>
                  <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                  <transf name="compute_specified" proved="true" >
                   <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                    <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                     <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                     <proof prover="8"><result status="valid" time="3.17" steps="1118351"/></proof>
                     </goal>
                     <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
                     <proof prover="8"><result status="valid" time="3.19" steps="1118302"/></proof>
                     </goal>
                     <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
                     <proof prover="8"><result status="valid" time="2.61" steps="1006731"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                    <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                     <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
                     <proof prover="8"><result status="valid" time="3.25" steps="1118351"/></proof>
                     </goal>
                     <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.0.0.0.1.0.1.1" expl="apply premises" proved="true">
                     <proof prover="8"><result status="valid" time="3.19" steps="1118302"/></proof>
                     </goal>
                     <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.0.0.0.1.0.1.2" expl="apply premises" proved="true">
                     <proof prover="8"><result status="valid" time="2.49" steps="1006731"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="3.32" steps="1115093"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                 <transf name="compute_specified" proved="true" >
                  <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                   <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                    <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="3.32" steps="1117572"/></proof>
                    </goal>
                    <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.92" steps="1117586"/></proof>
                    </goal>
                    <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="1.54" steps="953707"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                   <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                    <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.87" steps="1117572"/></proof>
                    </goal>
                    <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.0.0.1.0.1.1" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.90" steps="1117586"/></proof>
                    </goal>
                    <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.0.0.1.0.1.2" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="1.57" steps="953707"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.92" steps="1115093"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.0.1" expl="equality hypothesis" proved="true">
                <proof prover="8"><result status="valid" time="2.27" steps="1004199"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1" expl="apply premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
                 <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                  <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                   <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.99" steps="1120279"/></proof>
                   </goal>
                   <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.0" expl="rewrite premises" proved="true">
                    <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                     <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.0.0" expl="apply premises" proved="true">
                     <proof prover="8"><result status="valid" time="2.96" steps="1118378"/></proof>
                     </goal>
                     <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.0.1" expl="apply premises" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.0.1.0" expl="apply premises" proved="true">
                      <proof prover="8"><result status="valid" time="2.96" steps="1118291"/></proof>
                      </goal>
                      <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.0.1.1" expl="apply premises" proved="true">
                      <proof prover="8"><result status="valid" time="2.96" steps="1118280"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.0.2" expl="apply premises" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.0.2.0" expl="apply premises" proved="true">
                      <proof prover="8"><result status="valid" time="1.30" steps="953731"/></proof>
                      </goal>
                      <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.0.2.1" expl="apply premises" proved="true">
                      <proof prover="8"><result status="valid" time="1.33" steps="953746"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.1" expl="rewrite premises" proved="true">
                    <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                     <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.1.0" expl="apply premises" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                      <proof prover="8"><result status="valid" time="2.90" steps="1118274"/></proof>
                      </goal>
                      <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.1.0.1" expl="apply premises" proved="true">
                      <proof prover="8"><result status="valid" time="3.36" steps="1118263"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.1.1" expl="apply premises" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.1.1.0" expl="apply premises" proved="true">
                      <proof prover="8"><result status="valid" time="2.92" steps="1118291"/></proof>
                      </goal>
                      <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.1.1.1" expl="apply premises" proved="true">
                      <proof prover="8"><result status="valid" time="3.00" steps="1118280"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.1.2" expl="apply premises" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.1.2.0" expl="apply premises" proved="true">
                      <proof prover="8"><result status="valid" time="1.54" steps="953731"/></proof>
                      </goal>
                      <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.1.2.1" expl="apply premises" proved="true">
                      <proof prover="8"><result status="valid" time="1.53" steps="953746"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.2" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.66" steps="1006731"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1.0" expl="rewrite premises" proved="true">
                   <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                    <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1.0.0" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="3.33" steps="1117599"/></proof>
                    </goal>
                    <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1.0.1" expl="apply premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1.0.1.0" expl="apply premises" proved="true">
                     <proof prover="8"><result status="valid" time="3.16" steps="1117500"/></proof>
                     </goal>
                     <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1.0.1.1" expl="apply premises" proved="true">
                     <proof prover="8"><result status="valid" time="3.30" steps="1117489"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1.0.2" expl="apply premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1.0.2.0" expl="apply premises" proved="true">
                     <proof prover="8"><result status="valid" time="1.54" steps="953723"/></proof>
                     </goal>
                     <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1.0.2.1" expl="apply premises" proved="true">
                     <proof prover="8"><result status="valid" time="1.49" steps="953738"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1.1" expl="rewrite premises" proved="true">
                   <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                    <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1.1.0" expl="apply premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1.1.0.0" expl="apply premises" proved="true">
                     <proof prover="8"><result status="valid" time="3.25" steps="1117492"/></proof>
                     </goal>
                     <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1.1.0.1" expl="apply premises" proved="true">
                     <proof prover="8"><result status="valid" time="3.28" steps="1117481"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1.1.1" expl="apply premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1.1.1.0" expl="apply premises" proved="true">
                     <proof prover="8"><result status="valid" time="3.24" steps="1117500"/></proof>
                     </goal>
                     <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1.1.1.1" expl="apply premises" proved="true">
                     <proof prover="8"><result status="valid" time="3.25" steps="1117489"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1.1.2" expl="apply premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1.1.2.0" expl="apply premises" proved="true">
                     <proof prover="8"><result status="valid" time="1.51" steps="953723"/></proof>
                     </goal>
                     <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1.1.2.1" expl="apply premises" proved="true">
                     <proof prover="8"><result status="valid" time="1.29" steps="953738"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.27" steps="953707"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
                  <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                   <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="3.29" steps="1121903"/></proof>
                   </goal>
                   <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.1" expl="apply premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.1.0" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="3.28" steps="1121818"/></proof>
                    </goal>
                    <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.1.1" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="3.27" steps="1121807"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.2" expl="apply premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.2.0" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="1.29" steps="953760"/></proof>
                    </goal>
                    <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.2.1" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="1.53" steps="953775"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.1.1" expl="rewrite premises" proved="true">
                  <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                   <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.1.1.0" expl="apply premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.1.1.0.0" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="3.38" steps="1121817"/></proof>
                    </goal>
                    <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.1.1.0.1" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="3.02" steps="1121806"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.1.1.1" expl="apply premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.1.1.1.0" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.85" steps="1121818"/></proof>
                    </goal>
                    <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.1.1.1.1" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="3.23" steps="1121807"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.1.1.2" expl="apply premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.1.1.2.0" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="1.26" steps="953760"/></proof>
                    </goal>
                    <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.1.1.2.1" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="1.51" steps="953775"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.0.1.0.2" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="3.25" steps="1119745"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.0.3.0.0.1" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="3.27" steps="1119884"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="2.32" steps="912206"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="3.07" steps="1023565"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="8"><result status="valid" time="3.15" steps="1022853"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="2.18" steps="909076"/></proof>
       </goal>
       <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="1.36" steps="861209"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.40" steps="861209"/></proof>
      </goal>
      <goal name="set_correct_main_path_sum&#39;vc.0.1.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="8"><result status="valid" time="1.35" steps="861209"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_correct_circ_to_pps&#39;vc" expl="VC for set_correct_circ_to_pps" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_correct_circ_to_pps&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.62" steps="643700"/></proof>
  </goal>
  <goal name="set_correct_circ_to_pps&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.61" steps="643744"/></proof>
  </goal>
  <goal name="set_correct_circ_to_pps&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.55" steps="714024"/></proof>
  </goal>
  <goal name="set_correct_circ_to_pps&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.92" steps="771863"/></proof>
  </goal>
  <goal name="set_correct_circ_to_pps&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.90" steps="603260"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="path_to_mat_sem&#39;vc" expl="VC for path_to_mat_sem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_to_mat_sem&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.59" steps="643899"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="path_to_mat_sem_rev&#39;vc" expl="VC for path_to_mat_sem_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_to_mat_sem_rev&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.59" steps="644032"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mat_to_path_sem&#39;vc" expl="VC for mat_to_path_sem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_to_path_sem&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.36" steps="644150"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="path_to_mat_sem_exp&#39;vc" expl="VC for path_to_mat_sem_exp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_to_mat_sem_exp&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.62" steps="644263"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mat_to_path_sem_exp&#39;vc" expl="VC for mat_to_path_sem_exp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_to_path_sem_exp&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.33" steps="644340"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_path_sem_by_correct_pps&#39;vc" expl="VC for set_path_sem_by_correct_pps" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_path_sem_by_correct_pps&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="4.90" steps="794554"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_path_sem_by_main_pps&#39;vc" expl="VC for set_path_sem_by_main_pps" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_path_sem_by_main_pps&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.64" steps="669908"/></proof>
  </goal>
  <goal name="set_path_sem_by_main_pps&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.51" steps="669600"/></proof>
  </goal>
  <goal name="set_path_sem_by_main_pps&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.97" steps="628935"/></proof>
  </goal>
  <goal name="set_path_sem_by_main_pps&#39;vc.3" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="path_sem_value_for_basis">
   <goal name="set_path_sem_by_main_pps&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="bv_to_ket_to_bv">
    <goal name="set_path_sem_by_main_pps&#39;vc.3.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="set_path_sem_by_main_pps&#39;vc.3.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="1.61" steps="669614"/></proof>
   </goal>
   <goal name="set_path_sem_by_main_pps&#39;vc.3.2" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.97" steps="628938"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_path_sem_by_correct_pps_gen&#39;vc" expl="VC for set_path_sem_by_correct_pps_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_path_sem_by_correct_pps_gen&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.49" steps="644827"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_correct_path_sum_sim&#39;vc" expl="VC for set_correct_path_sum_sim" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_correct_path_sum_sim&#39;vc.0" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_correct_path_sum">
   <goal name="set_correct_path_sum_sim&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.91" steps="773207"/></proof>
   </goal>
   <goal name="set_correct_path_sum_sim&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="set_correct_path_sum_sim&#39;vc.0.1.0" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="( pps_apply h&#39; x )" arg2="( pps_apply h x )">
     <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="get_correct_path_sum">
      <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="1.70" steps="773163"/></proof>
      </goal>
      <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.0.1" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="1.14" steps="729608"/></proof>
      </goal>
      <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.0.2" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="1.10" steps="729608"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="get_pps_apply_equiv">
      <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="1.14" steps="729615"/></proof>
      </goal>
      <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_pps_apply_equiv_sim">
       <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.0" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.14" steps="729615"/></proof>
       </goal>
       <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.1" expl="apply premises" proved="true">
       <proof prover="8"><result status="valid" time="1.14" steps="729615"/></proof>
       </goal>
       <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(((h_basis_ket h&#39; @ x) @ y)i)" arg2="( ((h_basis_ket h&#39; @ (getbv (make_bv x (h_width h&#39;)))) @ (getbv (make_bv y (h_range h&#39;))))i)
">
         <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.0" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(((h_basis_ket h @ x) @ y)i)" arg2="( ((h_basis_ket h @ (getbv (make_bv x (h_width h&#39;)))) @ (getbv (make_bv y (h_range h&#39;))))i)
">
          <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="goal_comm">
           <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="Requires1">
            <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="make_bv_length">
             <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="2.02" steps="773509"/></proof>
             </goal>
             <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="1.85" steps="772867"/></proof>
             </goal>
             <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.0.0.0.0.2" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="1.91" steps="773083"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.0.0.0.1" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="make_bv_length">
             <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.0.0.0.1.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.15" steps="729882"/></proof>
             </goal>
             <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.0.0.0.1.1" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="1.90" steps="772867"/></proof>
             </goal>
             <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.0.0.0.1.2" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="2.62" steps="885484"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.0.0.0.2" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.0.0.0.2.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.15" steps="729875"/></proof>
             </goal>
             <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.0.0.0.2.1" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="2.01" steps="783960"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.0.1" expl="equality hypothesis" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.0.1.0" expl="equality hypothesis" proved="true">
           <transf name="apply" proved="true" arg1="pps&#39;invariant1">
            <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.0.1.0.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.0.1.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
              <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.0.1.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="1.39" steps="863266"/></proof>
              </goal>
              <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="2.74" steps="1021836"/></proof>
              </goal>
              <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.0.1.0.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="1.98" steps="910841"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.0.1.0.1" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.0.1.0.1.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
              <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.0.1.0.1.0.0" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="1.44" steps="863266"/></proof>
              </goal>
              <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.0.1.0.1.0.1" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="2.72" steps="1021831"/></proof>
              </goal>
              <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.0.1.0.1.0.2" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="2.27" steps="910841"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.0.1.0.2" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.0.1.0.2.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.36" steps="863243"/></proof>
             </goal>
             <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.0.1.0.2.1" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="2.21" steps="910791"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.1" expl="equality hypothesis" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.1.0" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="pps&#39;invariant1">
           <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.1.0.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.1.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
             <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.1.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.16" steps="863266"/></proof>
             </goal>
             <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.1.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="2.69" steps="1021830"/></proof>
             </goal>
             <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.1.0.0.0.2" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="1.21" steps="863277"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.1.0.1" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.1.0.1.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
             <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.1.0.1.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.41" steps="863266"/></proof>
             </goal>
             <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.1.0.1.0.1" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="2.71" steps="1021830"/></proof>
             </goal>
             <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.1.0.1.0.2" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="1.42" steps="863277"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.1.0.2" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.1.0.2.0" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="1.15" steps="863243"/></proof>
            </goal>
            <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.2.0.1.0.2.1" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="1.38" steps="863254"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0" expl="apply premises" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0.0" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(((h_angle h&#39; @ x) @ y))" arg2="( ((h_angle h&#39; @ (getbv (make_bv x (h_width h&#39;)))) @ (getbv (make_bv y (h_range h&#39;)))))
">
          <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0.0.0" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="(((h_angle h @ x) @ y))" arg2="( ((h_angle h @ (getbv (make_bv x (h_width h&#39;)))) @ (getbv (make_bv y (h_range h&#39;)))))
">
           <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="goal_comm">
            <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="Requires2">
             <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="make_bv_length">
              <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="2.05" steps="911503"/></proof>
              </goal>
              <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="2.70" steps="1021790"/></proof>
              </goal>
              <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="2.68" steps="1021604"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0.0.0.0.0.1" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="make_bv_length">
              <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0.0.0.0.0.1.0" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="1.15" steps="863225"/></proof>
              </goal>
              <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="2.74" steps="1021790"/></proof>
              </goal>
              <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0.0.0.0.0.1.2" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="3.12" steps="1021604"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0.0.0.1" expl="equality hypothesis" proved="true">
           <transf name="apply" proved="true" arg1="pps&#39;invariant">
            <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0.0.0.1.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0.0.0.1.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
              <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0.0.0.1.0.0.0" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="1.18" steps="863241"/></proof>
              </goal>
              <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="2.70" steps="1021811"/></proof>
              </goal>
              <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="2.29" steps="910821"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0.0.0.1.1" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0.0.0.1.1.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
              <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0.0.0.1.1.0.0" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="1.40" steps="863241"/></proof>
              </goal>
              <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="2.70" steps="1021811"/></proof>
              </goal>
              <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0.0.0.1.1.0.2" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="1.96" steps="910821"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0.0.1" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="pps&#39;invariant">
           <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0.0.1.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0.0.1.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
             <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0.0.1.0.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.36" steps="863241"/></proof>
             </goal>
             <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0.0.1.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="2.70" steps="1021810"/></proof>
             </goal>
             <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0.0.1.0.0.2" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="1.35" steps="863252"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0.0.1.1" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0.0.1.1.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
             <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0.0.1.1.0.0" expl="apply premises" proved="true">
             <proof prover="8"><result status="valid" time="1.44" steps="863241"/></proof>
             </goal>
             <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0.0.1.1.0.1" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="2.71" steps="1021810"/></proof>
             </goal>
             <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.1.3.0.0.1.1.0.2" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="1.42" steps="863252"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="set_correct_path_sum_sim&#39;vc.0.1.0.1.2" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="1.70" steps="783629"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="set_correct_path_sum_sim&#39;vc.1" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_correct_path_sum_basis">
   <goal name="set_correct_path_sum_sim&#39;vc.1.0" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.71" steps="773284"/></proof>
   </goal>
   <goal name="set_correct_path_sum_sim&#39;vc.1.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="set_correct_path_sum_sim&#39;vc.1.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="mat_sem_to_path">
     <goal name="set_correct_path_sum_sim&#39;vc.1.1.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="1.67" steps="773215"/></proof>
     </goal>
     <goal name="set_correct_path_sum_sim&#39;vc.1.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.00" steps="729692"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_correct_path_sum_by_main_sim&#39;vc" expl="VC for set_correct_path_sum_by_main_sim" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_correct_path_sum_by_main_sim&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.02" steps="773625"/></proof>
  </goal>
  <goal name="set_correct_path_sum_by_main_sim&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.04" steps="773607"/></proof>
  </goal>
  <goal name="set_correct_path_sum_by_main_sim&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.32" steps="892113"/></proof>
  </goal>
  <goal name="set_correct_path_sum_by_main_sim&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.38" steps="893033"/></proof>
  </goal>
  <goal name="set_correct_path_sum_by_main_sim&#39;vc.4" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.71" steps="773922"/></proof>
  </goal>
  <goal name="set_correct_path_sum_by_main_sim&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.19" steps="730082"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="path_sum_equiv&#39;vc" expl="VC for path_sum_equiv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sum_equiv&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.17" steps="730474"/></proof>
  </goal>
  <goal name="path_sum_equiv&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.96" steps="730477"/></proof>
  </goal>
  <goal name="path_sum_equiv&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.70" steps="774079"/></proof>
  </goal>
  <goal name="path_sum_equiv&#39;vc.3" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="Requires3">
   <goal name="path_sum_equiv&#39;vc.3.0" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.21" steps="730666"/></proof>
   </goal>
   <goal name="path_sum_equiv&#39;vc.3.1" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.14" steps="730657"/></proof>
   </goal>
   <goal name="path_sum_equiv&#39;vc.3.2" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.17" steps="730657"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="path_sum_equiv&#39;vc.4" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.13" steps="730790"/></proof>
  </goal>
  <goal name="path_sum_equiv&#39;vc.5" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.18" steps="730496"/></proof>
  </goal>
  <goal name="path_sum_equiv&#39;vc.6" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.14" steps="730507"/></proof>
  </goal>
  <goal name="path_sum_equiv&#39;vc.7" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.70" steps="774128"/></proof>
  </goal>
  <goal name="path_sum_equiv&#39;vc.8" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.75" steps="892953"/></proof>
  </goal>
  <goal name="path_sum_equiv&#39;vc.9" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.15" steps="730821"/></proof>
  </goal>
  <goal name="path_sum_equiv&#39;vc.10" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="path_sum_equiv&#39;vc.10.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="path_sum_equiv&#39;vc.10.0.0" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="0.96" steps="730488"/></proof>
    </goal>
    <goal name="path_sum_equiv&#39;vc.10.0.1" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="1.17" steps="730491"/></proof>
    </goal>
    <goal name="path_sum_equiv&#39;vc.10.0.2" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="1.13" steps="730491"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="path_sum_equiv&#39;vc.10.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="path_sum_equiv&#39;vc.10.1.0" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="1.12" steps="730488"/></proof>
    </goal>
    <goal name="path_sum_equiv&#39;vc.10.1.1" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="1.13" steps="730491"/></proof>
    </goal>
    <goal name="path_sum_equiv&#39;vc.10.1.2" expl="postcondition" proved="true">
    <proof prover="8"><result status="valid" time="1.11" steps="730487"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sum_pps_apply_equiv&#39;vc" expl="VC for path_sum_pps_apply_equiv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sum_pps_apply_equiv&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_correct_path_sum">
   <goal name="path_sum_pps_apply_equiv&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="2.07" steps="757400"/></proof>
   </goal>
   <goal name="path_sum_pps_apply_equiv&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="path_sum_pps_apply_equiv&#39;vc.0.1.0" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="( mat_mult (mat_sem c) x)" arg2="(pps_apply h x)">
     <goal name="path_sum_pps_apply_equiv&#39;vc.0.1.0.0" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="4.84" steps="797770"/></proof>
     </goal>
     <goal name="path_sum_pps_apply_equiv&#39;vc.0.1.0.1" expl="equality hypothesis" proved="true">
     <proof prover="8"><result status="valid" time="4.88" steps="799031"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sum_pps_apply_equiv_ref&#39;vc" expl="VC for path_sum_pps_apply_equiv_ref" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sum_pps_apply_equiv_ref&#39;vc.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="path_sum_pps_apply_equiv" arg2="c,(circ_to_pps c),h">
   <goal name="path_sum_pps_apply_equiv_ref&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.60" steps="646776"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sum_pps_apply_equiv_rev&#39;vc" expl="VC for path_sum_pps_apply_equiv_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sum_pps_apply_equiv_rev&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_pps_apply_equiv">
   <goal name="path_sum_pps_apply_equiv_rev&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="1.98" steps="759027"/></proof>
   </goal>
   <goal name="path_sum_pps_apply_equiv_rev&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="path_sum_pps_apply_equiv_rev&#39;vc.0.1.0" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(pps_apply_basis h x)" arg2="(path_sem_basis c (bv_to_ket x))">
     <goal name="path_sum_pps_apply_equiv_rev&#39;vc.0.1.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(pps_apply_basis h&#39; x)" arg2="(mat_mult (mat_sem c) (bv_to_ket x))">
      <goal name="path_sum_pps_apply_equiv_rev&#39;vc.0.1.0.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="2.03" steps="763810"/></proof>
      </goal>
      <goal name="path_sum_pps_apply_equiv_rev&#39;vc.0.1.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="replace" proved="true" arg1="(pps_apply_basis h&#39; x)" arg2="(pps_apply h&#39; (bv_to_ket x))">
       <goal name="path_sum_pps_apply_equiv_rev&#39;vc.0.1.0.0.1.0" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="get_correct_path_sum">
        <goal name="path_sum_pps_apply_equiv_rev&#39;vc.0.1.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.37" steps="646830"/></proof>
        </goal>
        <goal name="path_sum_pps_apply_equiv_rev&#39;vc.0.1.0.0.1.0.1" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.71" steps="657472"/></proof>
        </goal>
        <goal name="path_sum_pps_apply_equiv_rev&#39;vc.0.1.0.0.1.0.2" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="0.93" steps="606205"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="path_sum_pps_apply_equiv_rev&#39;vc.0.1.0.0.1.1" expl="equality hypothesis" proved="true">
       <proof prover="8"><result status="valid" time="1.93" steps="762067"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="path_sum_pps_apply_equiv_rev&#39;vc.0.1.0.1" expl="equality hypothesis" proved="true">
     <transf name="replace" proved="true" arg1="(pps_apply_basis h x)" arg2="(pps_apply h (bv_to_ket x))">
      <goal name="path_sum_pps_apply_equiv_rev&#39;vc.0.1.0.1.0" expl="equality hypothesis" proved="true">
      <proof prover="8"><result status="valid" time="5.07" steps="804608"/></proof>
      </goal>
      <goal name="path_sum_pps_apply_equiv_rev&#39;vc.0.1.0.1.1" expl="equality hypothesis" proved="true">
      <proof prover="8"><result status="valid" time="1.33" steps="646771"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_sum_pps_apply_equiv_ref_rev&#39;vc" expl="VC for path_sum_pps_apply_equiv_ref_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sum_pps_apply_equiv_ref_rev&#39;vc.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="path_sum_pps_apply_equiv_rev" arg2="c,h,(circ_to_pps c)">
   <goal name="path_sum_pps_apply_equiv_ref_rev&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="8"><result status="valid" time="1.61" steps="646823"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="correct_to_path_sem&#39;vc" expl="VC for correct_to_path_sem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="correct_to_path_sem&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="4.79" steps="797706"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="correct_to_mat_sem&#39;vc" expl="VC for correct_to_mat_sem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="correct_to_mat_sem&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.86" steps="758840"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="swap_invol_basis&#39;vc" expl="VC for swap_invol_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="swap_invol_basis&#39;vc.0" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="1.79" steps="757838"/></proof>
  </goal>
  <goal name="swap_invol_basis&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.93" steps="606616"/></proof>
  </goal>
  <goal name="swap_invol_basis&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.35" steps="651544"/></proof>
  </goal>
  <goal name="swap_invol_basis&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.09" steps="768440"/></proof>
  </goal>
  <goal name="swap_invol_basis&#39;vc.4" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.94" steps="607634"/></proof>
  </goal>
  <goal name="swap_invol_basis&#39;vc.5" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.34" steps="652011"/></proof>
  </goal>
  <goal name="swap_invol_basis&#39;vc.6" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.16" steps="778932"/></proof>
  </goal>
  <goal name="swap_invol_basis&#39;vc.7" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.92" steps="607980"/></proof>
  </goal>
  <goal name="swap_invol_basis&#39;vc.8" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.38" steps="652428"/></proof>
  </goal>
  <goal name="swap_invol_basis&#39;vc.9" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.98" steps="789026"/></proof>
  </goal>
  <goal name="swap_invol_basis&#39;vc.10" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.92" steps="608319"/></proof>
  </goal>
  <goal name="swap_invol_basis&#39;vc.11" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.36" steps="652842"/></proof>
  </goal>
  <goal name="swap_invol_basis&#39;vc.12" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.27" steps="802592"/></proof>
  </goal>
  <goal name="swap_invol_basis&#39;vc.13" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="2.23" steps="801342"/></proof>
  </goal>
  <goal name="swap_invol_basis&#39;vc.14" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="2.25" steps="802143"/></proof>
  </goal>
  <goal name="swap_invol_basis&#39;vc.15" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="2.22" steps="792226"/></proof>
  </goal>
  <goal name="swap_invol_basis&#39;vc.16" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="1.98" steps="786432"/></proof>
  </goal>
  <goal name="swap_invol_basis&#39;vc.17" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.93" steps="608709"/></proof>
  </goal>
  <goal name="swap_invol_basis&#39;vc.18" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.75" steps="608933"/></proof>
  </goal>
  <goal name="swap_invol_basis&#39;vc.19" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.96" steps="609089"/></proof>
  </goal>
  <goal name="swap_invol_basis&#39;vc.20" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="2.18" steps="793758"/></proof>
  </goal>
  <goal name="swap_invol_basis&#39;vc.21" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.36" steps="653866"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="cnot_invol_basis&#39;vc" expl="VC for cnot_invol_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cnot_invol_basis&#39;vc.0" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="2.17" steps="758000"/></proof>
  </goal>
  <goal name="cnot_invol_basis&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.93" steps="606696"/></proof>
  </goal>
  <goal name="cnot_invol_basis&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.57" steps="651620"/></proof>
  </goal>
  <goal name="cnot_invol_basis&#39;vc.3" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.15" steps="768592"/></proof>
  </goal>
  <goal name="cnot_invol_basis&#39;vc.4" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.95" steps="607714"/></proof>
  </goal>
  <goal name="cnot_invol_basis&#39;vc.5" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.58" steps="652076"/></proof>
  </goal>
  <goal name="cnot_invol_basis&#39;vc.6" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.91" steps="779073"/></proof>
  </goal>
  <goal name="cnot_invol_basis&#39;vc.7" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.77" steps="608060"/></proof>
  </goal>
  <goal name="cnot_invol_basis&#39;vc.8" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.63" steps="652494"/></proof>
  </goal>
  <goal name="cnot_invol_basis&#39;vc.9" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.97" steps="789271"/></proof>
  </goal>
  <goal name="cnot_invol_basis&#39;vc.10" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.91" steps="608399"/></proof>
  </goal>
  <goal name="cnot_invol_basis&#39;vc.11" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.37" steps="652908"/></proof>
  </goal>
  <goal name="cnot_invol_basis&#39;vc.12" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.01" steps="802737"/></proof>
  </goal>
  <goal name="cnot_invol_basis&#39;vc.13" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="2.08" steps="801484"/></proof>
  </goal>
  <goal name="cnot_invol_basis&#39;vc.14" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="2.37" steps="802286"/></proof>
  </goal>
  <goal name="cnot_invol_basis&#39;vc.15" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="2.42" steps="792413"/></proof>
  </goal>
  <goal name="cnot_invol_basis&#39;vc.16" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="2.44" steps="786611"/></proof>
  </goal>
  <goal name="cnot_invol_basis&#39;vc.17" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.78" steps="608789"/></proof>
  </goal>
  <goal name="cnot_invol_basis&#39;vc.18" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.95" steps="609013"/></proof>
  </goal>
  <goal name="cnot_invol_basis&#39;vc.19" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.95" steps="609169"/></proof>
  </goal>
  <goal name="cnot_invol_basis&#39;vc.20" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="1.90" steps="793889"/></proof>
  </goal>
  <goal name="cnot_invol_basis&#39;vc.21" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.31" steps="653895"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="swap_invol&#39;vc" expl="VC for swap_invol" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="swap_invol&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.93" steps="606746"/></proof>
  </goal>
  <goal name="swap_invol&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.54" steps="647336"/></proof>
  </goal>
  <goal name="swap_invol&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.55" steps="647345"/></proof>
  </goal>
  <goal name="swap_invol&#39;vc.3" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="swap_invol&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="path_sem_sum_">
    <goal name="swap_invol&#39;vc.3.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="path_sem_sum_">
     <goal name="swap_invol&#39;vc.3.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="ket_sum_eq">
      <goal name="swap_invol&#39;vc.3.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="1.02" steps="665574"/></proof>
      </goal>
      <goal name="swap_invol&#39;vc.3.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="1.02" steps="665565"/></proof>
      </goal>
      <goal name="swap_invol&#39;vc.3.0.0.0.2" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="swap_invol&#39;vc.3.0.0.0.2.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="swap_invol&#39;vc.3.0.0.0.2.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="path_sem_scal">
         <goal name="swap_invol&#39;vc.3.0.0.0.2.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="path_sem_scal">
          <goal name="swap_invol&#39;vc.3.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="scalar_eq">
           <goal name="swap_invol&#39;vc.3.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="swap_invol_basis">
            <goal name="swap_invol&#39;vc.3.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="2.50" steps="874631"/></proof>
            </goal>
            <goal name="swap_invol&#39;vc.3.0.0.0.2.0.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="1.72" steps="761272"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="swap_invol&#39;vc.3.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="2.35" steps="876916"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="swap_invol&#39;vc.3.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="2.71" steps="874638"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="swap_invol&#39;vc.3.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="2.16" steps="845613"/></proof>
     </goal>
     <goal name="swap_invol&#39;vc.3.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.02" steps="665574"/></proof>
     </goal>
     <goal name="swap_invol&#39;vc.3.0.0.3" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="swap_invol&#39;vc.3.0.0.3.0" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="swap_invol&#39;vc.3.0.0.3.0.0" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="3.92" steps="911751"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="swap_invol&#39;vc.3.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="2.18" steps="845613"/></proof>
    </goal>
    <goal name="swap_invol&#39;vc.3.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="0.83" steps="665574"/></proof>
    </goal>
    <goal name="swap_invol&#39;vc.3.0.3" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="4.09" steps="904625"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cnot_invol&#39;vc" expl="VC for cnot_invol" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cnot_invol&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.75" steps="606811"/></proof>
  </goal>
  <goal name="cnot_invol&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.59" steps="647402"/></proof>
  </goal>
  <goal name="cnot_invol&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.54" steps="647411"/></proof>
  </goal>
  <goal name="cnot_invol&#39;vc.3" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures">
   <goal name="cnot_invol&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="path_sem_sum_">
    <goal name="cnot_invol&#39;vc.3.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="path_sem_sum_">
     <goal name="cnot_invol&#39;vc.3.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="ket_sum_eq">
      <goal name="cnot_invol&#39;vc.3.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="1.06" steps="665639"/></proof>
      </goal>
      <goal name="cnot_invol&#39;vc.3.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="1.06" steps="665630"/></proof>
      </goal>
      <goal name="cnot_invol&#39;vc.3.0.0.0.2" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="cnot_invol&#39;vc.3.0.0.0.2.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="cnot_invol&#39;vc.3.0.0.0.2.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="path_sem_scal">
         <goal name="cnot_invol&#39;vc.3.0.0.0.2.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="path_sem_scal">
          <goal name="cnot_invol&#39;vc.3.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="scalar_eq">
           <goal name="cnot_invol&#39;vc.3.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="cnot_invol_basis">
            <goal name="cnot_invol&#39;vc.3.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="2.58" steps="874707"/></proof>
            </goal>
            <goal name="cnot_invol&#39;vc.3.0.0.0.2.0.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="8"><result status="valid" time="1.65" steps="761338"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="cnot_invol&#39;vc.3.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="2.31" steps="877003"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="cnot_invol&#39;vc.3.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="2.27" steps="874714"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="cnot_invol&#39;vc.3.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="2.20" steps="845694"/></proof>
     </goal>
     <goal name="cnot_invol&#39;vc.3.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="0.99" steps="665639"/></proof>
     </goal>
     <goal name="cnot_invol&#39;vc.3.0.0.3" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="cnot_invol&#39;vc.3.0.0.3.0" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="cnot_invol&#39;vc.3.0.0.3.0.0" expl="rewrite premises" proved="true">
       <proof prover="8"><result status="valid" time="3.99" steps="911817"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="cnot_invol&#39;vc.3.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="2.53" steps="845694"/></proof>
    </goal>
    <goal name="cnot_invol&#39;vc.3.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.00" steps="665639"/></proof>
    </goal>
    <goal name="cnot_invol&#39;vc.3.0.3" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="4.03" steps="904691"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mat_sem_to_correct&#39;vc" expl="VC for mat_sem_to_correct" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mat_sem_to_correct&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="2.23" steps="757104"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="path_sem_to_correct&#39;vc" expl="VC for path_sem_to_correct" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="path_sem_to_correct&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="mat_sem_to_correct">
   <goal name="path_sem_to_correct&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="8"><result status="valid" time="0.91" steps="607099"/></proof>
   </goal>
   <goal name="path_sem_to_correct&#39;vc.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="path_sem_to_correct&#39;vc.0.1.0" expl="apply premises" proved="true">
    <proof prover="8"><result status="valid" time="1.92" steps="760053"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="correct_main_path_sum&#39;vc" expl="VC for correct_main_path_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="correct_main_path_sum&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="1.59" steps="647719"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="correct_path_sum_bv&#39;vc" expl="VC for correct_path_sum_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="correct_path_sum_bv&#39;vc.0" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.31" steps="702039"/></proof>
  </goal>
  <goal name="correct_path_sum_bv&#39;vc.1" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.80" steps="661206"/></proof>
  </goal>
  <goal name="correct_path_sum_bv&#39;vc.2" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.32" steps="702797"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="correct_path_sum_to_bv&#39;vc" expl="VC for correct_path_sum_to_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="correct_path_sum_to_bv&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="correct_path_sum_bv&#39;def">
   <goal name="correct_path_sum_to_bv&#39;vc.0.0" expl="VC for correct_path_sum_to_bv" proved="true">
   <proof prover="8"><result status="valid" time="1.09" steps="710929"/></proof>
   </goal>
   <goal name="correct_path_sum_to_bv&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="1.09" steps="710929"/></proof>
   </goal>
   <goal name="correct_path_sum_to_bv&#39;vc.0.2" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="1.83" steps="755552"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="correct_path_sum_by_bv&#39;vc" expl="VC for correct_path_sum_by_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="correct_path_sum_by_bv&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="2.33" steps="865663"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="correct_path_sum_bv_main&#39;vc" expl="VC for correct_path_sum_bv_main" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="correct_path_sum_bv_main&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="correct_path_sum_bv&#39;def">
   <goal name="correct_path_sum_bv_main&#39;vc.0.0" expl="VC for correct_path_sum_bv_main" proved="true">
   <transf name="rewrite" proved="true" arg1="build_pps_bv&#39;def">
    <goal name="correct_path_sum_bv_main&#39;vc.0.0.0" expl="VC for correct_path_sum_bv_main" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0" expl="VC for correct_path_sum_bv_main" proved="true">
     <transf name="instantiate" proved="true" arg1="build_pps&#39;spec" arg2="(width c),r,(fun (x:int -&gt; int) (y:int -&gt; int) -&gt;
     getbv
     ((k @ make_bv (fun (i:int) -&gt; mod1 (x @ i) 2) (width c))
      @ make_bv (fun (i:int) -&gt; mod1 (y @ i) 2) r)),(fun (x:int -&gt; int) (y:int -&gt; int) -&gt;
     (a @ make_bv (fun (i:int) -&gt; mod1 (x @ i) 2) (width c))
     @ make_bv (fun (i:int) -&gt; mod1 (y @ i) 2) r)">
      <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0" expl="VC for correct_path_sum_bv_main" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.0" expl="destruct premise" proved="true">
       <proof prover="8"><result status="valid" time="2.73" steps="888651"/></proof>
       </goal>
       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1" expl="VC for correct_path_sum_bv_main" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.0" expl="destruct premise" proved="true">
        <proof prover="8"><result status="valid" time="1.15" steps="735736"/></proof>
        </goal>
        <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1" expl="VC for correct_path_sum_bv_main" proved="true">
        <transf name="destruct" proved="true" arg1="Hinst">
         <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.0" expl="destruct premise" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.0.0" expl="destruct premise" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.0.0.0" expl="destruct premise" proved="true">
           <proof prover="8"><result status="valid" time="2.42" steps="891384"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.0.1" expl="destruct premise" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.0.1.0" expl="destruct premise" proved="true">
           <proof prover="8"><result status="valid" time="2.46" steps="891396"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1" expl="VC for correct_path_sum_bv_main" proved="true">
         <transf name="destruct" proved="true" arg1="Hinst">
          <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0" expl="destruct premise" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0" expl="destruct premise" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0" expl="destruct premise" proved="true">
            <transf name="rewrite" proved="true" arg1="Requires2">
             <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0" expl="destruct premise" proved="true">
             <transf name="rewrite" proved="true" arg1="Requires2">
              <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0" expl="destruct premise" proved="true">
              <transf name="eliminate_definition" proved="true" >
               <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0" expl="destruct premise" proved="true">
               <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
                <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0.0" expl="destruct premise" proved="true">
                <transf name="rewrite" proved="true" arg1="basis_ket&#39;def">
                 <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0.0.0" expl="destruct premise" proved="true">
                 <transf name="split_all_full" proved="true" >
                  <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0.0.0.0" expl="destruct premise" proved="true">
                  <transf name="apply" proved="true" arg1="pps&#39;invariant1">
                   <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                     <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                      <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                      <transf name="compute_specified" proved="true" >
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                       <proof prover="8"><result status="valid" time="2.88" steps="1038872"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                      <transf name="compute_specified" proved="true" >
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                        <proof prover="8"><result status="valid" time="2.30" steps="947965"/></proof>
                        </goal>
                        <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                        <proof prover="8"><result status="valid" time="2.35" steps="947955"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                      <proof prover="8"><result status="valid" time="2.46" steps="949881"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                     <transf name="compute_specified" proved="true" >
                      <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                      <transf name="split_vc" proved="true" >
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                       <proof prover="8"><result status="valid" time="2.42" steps="947965"/></proof>
                       </goal>
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                       <proof prover="8"><result status="valid" time="2.35" steps="947955"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                     <proof prover="8"><result status="valid" time="2.59" steps="949881"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                     <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                      <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                      <transf name="compute_specified" proved="true" >
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                       <proof prover="8"><result status="valid" time="3.37" steps="1038793"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                      <transf name="compute_specified" proved="true" >
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0.0.0.0.1.0.0.1.0" expl="rewrite premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0.0.0.0.1.0.0.1.0.0" expl="rewrite premises" proved="true">
                        <proof prover="8"><result status="valid" time="2.34" steps="947955"/></proof>
                        </goal>
                        <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0.0.0.0.1.0.0.1.0.1" expl="rewrite premises" proved="true">
                        <proof prover="8"><result status="valid" time="2.31" steps="947948"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
                      <proof prover="8"><result status="valid" time="2.54" steps="949890"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                     <transf name="compute_specified" proved="true" >
                      <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
                      <transf name="split_vc" proved="true" >
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0.0.0.0.1.0.1.0.0" expl="rewrite premises" proved="true">
                       <proof prover="8"><result status="valid" time="2.36" steps="947955"/></proof>
                       </goal>
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0.0.0.0.1.0.1.0.1" expl="rewrite premises" proved="true">
                       <proof prover="8"><result status="valid" time="2.11" steps="947948"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
                     <proof prover="8"><result status="valid" time="2.14" steps="949890"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.48" steps="949885"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.1" expl="rewrite premises" proved="true">
              <transf name="rewrite" proved="true" arg1="make_bv_length">
               <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.1.0" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="1.18" steps="735960"/></proof>
               </goal>
               <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.1.1" expl="rewrite premises" proved="true">
               <transf name="compute_specified" proved="true" >
                <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.1.1.0" expl="rewrite premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.1.1.0.0" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.96" steps="778771"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.89" steps="778772"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.1.2" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="1.90" steps="778962"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.2" expl="rewrite premises" proved="true">
              <transf name="rewrite" proved="true" arg1="make_bv_length">
               <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.2.0" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="1.16" steps="735960"/></proof>
               </goal>
               <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.2.1" expl="rewrite premises" proved="true">
               <transf name="compute_specified" proved="true" >
                <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.2.1.0" expl="rewrite premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.2.1.0.0" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.86" steps="778828"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.2.1.0.1" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.90" steps="778829"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.2.2" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="0.91" steps="735962"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.0.3" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="1.13" steps="735971"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.1" expl="rewrite premises" proved="true">
             <transf name="rewrite" proved="true" arg1="make_bv_length">
              <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.1.0" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="1.13" steps="735960"/></proof>
              </goal>
              <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.1.1" expl="rewrite premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.1.1.0" expl="rewrite premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.1.1.0.0" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="1.84" steps="778771"/></proof>
                </goal>
                <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="1.78" steps="778772"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.1.2" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="1.85" steps="778962"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.2" expl="rewrite premises" proved="true">
             <transf name="rewrite" proved="true" arg1="make_bv_length">
              <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.2.0" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="0.95" steps="735960"/></proof>
              </goal>
              <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.2.1" expl="rewrite premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.2.1.0" expl="rewrite premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.2.1.0.0" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="1.61" steps="778828"/></proof>
                </goal>
                <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.2.1.0.1" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="1.94" steps="778829"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.2.2" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="1.14" steps="735962"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.0.0.0.3" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="1.14" steps="735971"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1" expl="VC for correct_path_sum_bv_main" proved="true">
          <transf name="destruct" proved="true" arg1="Hinst">
           <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0" expl="destruct premise" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0" expl="destruct premise" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0" expl="destruct premise" proved="true">
             <transf name="rewrite" proved="true" arg1="Requires1">
              <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0" expl="destruct premise" proved="true">
              <transf name="rewrite" proved="true" arg1="Requires1">
               <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0" expl="destruct premise" proved="true">
               <transf name="eliminate_definition" proved="true" >
                <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0.0" expl="destruct premise" proved="true">
                <transf name="rewrite" proved="true" arg1="ang_ind&#39;def">
                 <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0.0.0" expl="destruct premise" proved="true">
                 <transf name="rewrite" proved="true" arg1="ang_ind&#39;def">
                  <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0.0.0.0" expl="destruct premise" proved="true">
                  <transf name="split_all_full" proved="true" >
                   <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0.0.0.0.0" expl="destruct premise" proved="true">
                   <transf name="apply" proved="true" arg1="pps&#39;invariant">
                    <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                      <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                       <transf name="compute_specified" proved="true" >
                        <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                        <proof prover="8"><result status="valid" time="3.13" steps="1038177"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                       <transf name="compute_specified" proved="true" >
                        <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                         <proof prover="8"><result status="valid" time="2.29" steps="947937"/></proof>
                         </goal>
                         <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0.0.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                         <proof prover="8"><result status="valid" time="1.98" steps="947936"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                       <proof prover="8"><result status="valid" time="2.14" steps="949886"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                      <transf name="compute_specified" proved="true" >
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                        <proof prover="8"><result status="valid" time="2.29" steps="947937"/></proof>
                        </goal>
                        <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                        <proof prover="8"><result status="valid" time="2.24" steps="947936"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                      <proof prover="8"><result status="valid" time="2.13" steps="949886"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                      <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                       <transf name="compute_specified" proved="true" >
                        <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                        <proof prover="8"><result status="valid" time="3.15" steps="1038769"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                       <transf name="compute_specified" proved="true" >
                        <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0.0.0.0.0.1.0.0.1.0" expl="rewrite premises" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0.0.0.0.0.1.0.0.1.0.0" expl="rewrite premises" proved="true">
                         <proof prover="8"><result status="valid" time="2.25" steps="947939"/></proof>
                         </goal>
                         <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0.0.0.0.0.1.0.0.1.0.1" expl="rewrite premises" proved="true">
                         <proof prover="8"><result status="valid" time="2.18" steps="947943"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
                       <proof prover="8"><result status="valid" time="2.35" steps="949884"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                      <transf name="compute_specified" proved="true" >
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0.0.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0.0.0.0.0.1.0.1.0.0" expl="rewrite premises" proved="true">
                        <proof prover="8"><result status="valid" time="2.30" steps="947939"/></proof>
                        </goal>
                        <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0.0.0.0.0.1.0.1.0.1" expl="rewrite premises" proved="true">
                        <proof prover="8"><result status="valid" time="2.29" steps="947943"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.0.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
                      <proof prover="8"><result status="valid" time="2.26" steps="949884"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.1" expl="rewrite premises" proved="true">
               <transf name="rewrite" proved="true" arg1="make_bv_length">
                <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="1.16" steps="735935"/></proof>
                </goal>
                <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.1.1.0" expl="rewrite premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.1.1.0.0" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.87" steps="778721"/></proof>
                  </goal>
                  <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.89" steps="778722"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.1.2" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="2.53" steps="888954"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.2" expl="rewrite premises" proved="true">
               <transf name="rewrite" proved="true" arg1="make_bv_length">
                <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.2.0" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="1.12" steps="735935"/></proof>
                </goal>
                <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.2.1" expl="rewrite premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.2.1.0" expl="rewrite premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.2.1.0.0" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.98" steps="778748"/></proof>
                  </goal>
                  <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.2.1.0.1" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.87" steps="778749"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.0.2.2" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="1.13" steps="735937"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.1" expl="rewrite premises" proved="true">
              <transf name="rewrite" proved="true" arg1="make_bv_length">
               <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.1.0" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="1.13" steps="735935"/></proof>
               </goal>
               <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.1.1" expl="rewrite premises" proved="true">
               <transf name="compute_specified" proved="true" >
                <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.1.1.0" expl="rewrite premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.1.1.0.0" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.91" steps="778721"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.91" steps="778722"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.1.2" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="2.44" steps="888954"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.2" expl="rewrite premises" proved="true">
              <transf name="rewrite" proved="true" arg1="make_bv_length">
               <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.2.0" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="1.24" steps="735935"/></proof>
               </goal>
               <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.2.1" expl="rewrite premises" proved="true">
               <transf name="compute_specified" proved="true" >
                <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.2.1.0" expl="rewrite premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.2.1.0.0" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.96" steps="778748"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.2.1.0.1" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.88" steps="778749"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.0.0.0.2.2" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="1.12" steps="735937"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1" expl="VC for correct_path_sum_bv_main" proved="true">
           <transf name="destruct" proved="true" arg1="Hinst">
            <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0" expl="VC for correct_path_sum_bv_main" proved="true">
            <transf name="split_all_full" proved="true" >
             <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0" expl="VC for correct_path_sum_bv_main" proved="true">
             <transf name="apply" proved="true" arg1="set_correct_path_sum_by_main_sim">
              <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="Hinst2">
               <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="1.47" steps="877421"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.1" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="Hinst3">
               <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.1.0" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="1.45" steps="877419"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2" expl="apply premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="Hinst">
                <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0" expl="apply premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="Requires1">
                  <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="replace" proved="true" arg1="(make_bv (fun (i:int) -&gt; mod1 (getbv x @ i) 2) (width c))" arg2="x">
                   <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="replace" proved="true" arg1="(make_bv (fun (i:int) -&gt; mod1 (getbv y @ i) 2) r)" arg2="y">
                    <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="compute_specified" proved="true" >
                    </transf>
                    </goal>
                    <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                    <transf name="apply" proved="true" arg1="set_equal_bv">
                     <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="Hinst2" arg2="in" arg3="H">
                      <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="make_bv_length">
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                       <proof prover="8"><result status="valid" time="1.39" steps="877460"/></proof>
                       </goal>
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                       <transf name="compute_specified" proved="true" >
                        <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.0.1.0.0.1.0" expl="rewrite premises" proved="true">
                        <proof prover="8"><result status="valid" time="2.00" steps="924763"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
                       <proof prover="8"><result status="valid" time="1.38" steps="877453"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.0.1.1" expl="apply premises" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                       <transf name="compute_specified" proved="true" >
                        <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
                        <proof prover="8"><result status="valid" time="3.14" steps="1174621"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
                       <transf name="compute_specified" proved="true" >
                        <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.0.1.1.0.1.0" expl="rewrite premises" proved="true">
                        <proof prover="8"><result status="valid" time="2.36" steps="1050975"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.0.1.1.0.2" expl="rewrite premises" proved="true">
                       <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
                        <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.0.1.1.0.2.0" expl="rewrite premises" proved="true">
                        <proof prover="8"><result status="valid" time="1.64" steps="999252"/></proof>
                        </goal>
                        <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.0.1.1.0.2.1" expl="rewrite premises" proved="true">
                        <transf name="compute_specified" proved="true" >
                         <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.0.1.1.0.2.1.0" expl="rewrite premises" proved="true">
                         <proof prover="8"><result status="valid" time="2.27" steps="1050975"/></proof>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.0.1.1.0.2.2" expl="rewrite premises" proved="true">
                        <proof prover="8"><result status="valid" time="1.64" steps="999409"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.1" expl="equality hypothesis" proved="true">
                   <transf name="apply" proved="true" arg1="set_equal_bv">
                    <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.1.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="Hinst2" arg2="in" arg3="H">
                     <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="make_bv_length">
                      <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                      <proof prover="8"><result status="valid" time="1.39" steps="877460"/></proof>
                      </goal>
                      <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                      <transf name="compute_specified" proved="true" >
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.1.0.0.1.0" expl="rewrite premises" proved="true">
                       <proof prover="8"><result status="valid" time="2.41" steps="924684"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
                      <proof prover="8"><result status="valid" time="3.27" steps="1042113"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.1.1" expl="apply premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                      <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                      <transf name="compute_specified" proved="true" >
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
                       <proof prover="8"><result status="valid" time="3.73" steps="1174672"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
                      <transf name="compute_specified" proved="true" >
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.1.1.0.1.0" expl="rewrite premises" proved="true">
                       <proof prover="8"><result status="valid" time="2.72" steps="1050903"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.1.1.0.2" expl="rewrite premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.1.1.0.2.0" expl="rewrite premises" proved="true">
                       <proof prover="8"><result status="valid" time="1.70" steps="999237"/></proof>
                       </goal>
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.1.1.0.2.1" expl="rewrite premises" proved="true">
                       <transf name="compute_specified" proved="true" >
                        <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.1.1.0.2.1.0" expl="rewrite premises" proved="true">
                        <proof prover="8"><result status="valid" time="2.31" steps="1050903"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.0.1.1.0.2.2" expl="rewrite premises" proved="true">
                       <proof prover="8"><result status="valid" time="3.08" steps="1171196"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="make_bv_length">
                   <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.1.0" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="1.62" steps="999201"/></proof>
                   </goal>
                   <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.1.1" expl="rewrite premises" proved="true">
                   <transf name="compute_specified" proved="true" >
                    <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.1.1.0" expl="rewrite premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.31" steps="1050739"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.1.2" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="3.10" steps="1168106"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.2" expl="rewrite premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="make_bv_length">
                   <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.2.0" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="1.36" steps="999201"/></proof>
                   </goal>
                   <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.2.1" expl="rewrite premises" proved="true">
                   <transf name="compute_specified" proved="true" >
                    <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.2.1.0" expl="rewrite premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.40" steps="1050824"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.0.0.2.2" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="1.68" steps="999203"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.1" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="1.36" steps="999203"/></proof>
                </goal>
                <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.2" expl="rewrite premises" proved="true">
                <transf name="rewrite" proved="true" arg1="H">
                 <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.2.0" expl="rewrite premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="Hinst2">
                  <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.2.0.2.0.0" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.41" steps="999201"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3" expl="apply premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="Hinst1">
                <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0" expl="apply premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="Requires2">
                  <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="replace" proved="true" arg1="(make_bv (fun (i:int) -&gt; mod1 (getbv x @ i) 2) (width c))" arg2="x">
                   <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="replace" proved="true" arg1="(make_bv (fun (i:int) -&gt; mod1 (getbv y @ i) 2) r)" arg2="y">
                    <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="apply" proved="true" arg1="bound_eq_rev">
                     <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                      <transf name="apply" proved="true" arg1="basis_ket&#39;spec1">
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                       <proof prover="8"><result status="valid" time="3.10" steps="1169335"/></proof>
                       </goal>
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                       <proof prover="8"><result status="valid" time="3.10" steps="1169382"/></proof>
                       </goal>
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                       <proof prover="8"><result status="valid" time="1.58" steps="999237"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                      <transf name="apply" proved="true" arg1="basis_ket&#39;spec">
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                       <proof prover="8"><result status="valid" time="3.06" steps="1169335"/></proof>
                       </goal>
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
                       <proof prover="8"><result status="valid" time="3.05" steps="1169382"/></proof>
                       </goal>
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.0.0.0.1.2" expl="apply premises" proved="true">
                       <proof prover="8"><result status="valid" time="1.37" steps="999237"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                    <transf name="apply" proved="true" arg1="set_equal_bv">
                     <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="Hinst2" arg2="in" arg3="H2">
                      <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="make_bv_length">
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                       <proof prover="8"><result status="valid" time="1.18" steps="877485"/></proof>
                       </goal>
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.0.1.0.0.1.0" expl="rewrite premises" proved="true">
                        <transf name="compute_specified" proved="true" >
                         <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.0.1.0.0.1.0.0" expl="rewrite premises" proved="true">
                         <proof prover="8"><result status="valid" time="2.29" steps="924255"/></proof>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.0.1.0.0.1.1" expl="rewrite premises" proved="true">
                        <transf name="compute_specified" proved="true" >
                         <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.0.1.0.0.1.1.0" expl="rewrite premises" proved="true">
                         <proof prover="8"><result status="valid" time="2.27" steps="924256"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
                       <proof prover="8"><result status="valid" time="1.15" steps="877478"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.0.1.1" expl="apply premises" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                       <transf name="compute_specified" proved="true" >
                        <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
                        <proof prover="8"><result status="valid" time="3.45" steps="1174601"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
                       <transf name="compute_specified" proved="true" >
                        <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.0.1.1.0.1.0" expl="rewrite premises" proved="true">
                        <proof prover="8"><result status="valid" time="2.64" steps="1050990"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.0.1.1.0.2" expl="rewrite premises" proved="true">
                       <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
                        <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.0.1.1.0.2.0" expl="rewrite premises" proved="true">
                        <proof prover="8"><result status="valid" time="1.59" steps="999277"/></proof>
                        </goal>
                        <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.0.1.1.0.2.1" expl="rewrite premises" proved="true">
                        <transf name="compute_specified" proved="true" >
                         <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.0.1.1.0.2.1.0" expl="rewrite premises" proved="true">
                         <proof prover="8"><result status="valid" time="2.33" steps="1050990"/></proof>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.0.1.1.0.2.2" expl="rewrite premises" proved="true">
                        <proof prover="8"><result status="valid" time="1.67" steps="999434"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.1" expl="equality hypothesis" proved="true">
                   <transf name="apply" proved="true" arg1="set_equal_bv">
                    <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.1.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="Hinst2" arg2="in" arg3="H2">
                     <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="make_bv_length">
                      <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                      <proof prover="8"><result status="valid" time="1.43" steps="877485"/></proof>
                      </goal>
                      <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                      <transf name="split_vc" proved="true" >
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.1.0.0.1.0" expl="rewrite premises" proved="true">
                       <transf name="compute_specified" proved="true" >
                        <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.1.0.0.1.0.0" expl="rewrite premises" proved="true">
                        <proof prover="8"><result status="valid" time="2.00" steps="924229"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.1.0.0.1.1" expl="rewrite premises" proved="true">
                       <transf name="compute_specified" proved="true" >
                        <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.1.0.0.1.1.0" expl="rewrite premises" proved="true">
                        <proof prover="8"><result status="valid" time="2.00" steps="924230"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
                      <proof prover="8"><result status="valid" time="2.29" steps="924431"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.1.1" expl="apply premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                      <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                      <transf name="compute_specified" proved="true" >
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
                       <proof prover="8"><result status="valid" time="3.57" steps="1174647"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
                      <transf name="compute_specified" proved="true" >
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.1.1.0.1.0" expl="rewrite premises" proved="true">
                       <proof prover="8"><result status="valid" time="2.57" steps="1050918"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.1.1.0.2" expl="rewrite premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.1.1.0.2.0" expl="rewrite premises" proved="true">
                       <proof prover="8"><result status="valid" time="1.65" steps="999262"/></proof>
                       </goal>
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.1.1.0.2.1" expl="rewrite premises" proved="true">
                       <transf name="compute_specified" proved="true" >
                        <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.1.1.0.2.1.0" expl="rewrite premises" proved="true">
                        <proof prover="8"><result status="valid" time="2.66" steps="1050918"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.0.1.1.0.2.2" expl="rewrite premises" proved="true">
                       <proof prover="8"><result status="valid" time="2.26" steps="1050726"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.1" expl="rewrite premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="make_bv_length">
                   <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.1.0" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="1.65" steps="999226"/></proof>
                   </goal>
                   <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.1.1" expl="rewrite premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.1.1.0" expl="rewrite premises" proved="true">
                    <transf name="compute_specified" proved="true" >
                     <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.1.1.0.0" expl="rewrite premises" proved="true">
                     <proof prover="8"><result status="valid" time="2.24" steps="1050423"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.1.1.1" expl="rewrite premises" proved="true">
                    <transf name="compute_specified" proved="true" >
                     <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.1.1.1.0" expl="rewrite premises" proved="true">
                     <proof prover="8"><result status="valid" time="2.57" steps="1050424"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.1.2" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.53" steps="1050630"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.2" expl="rewrite premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="make_bv_length">
                   <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.2.0" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="1.35" steps="999226"/></proof>
                   </goal>
                   <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.2.1" expl="rewrite premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.2.1.0" expl="rewrite premises" proved="true">
                    <transf name="compute_specified" proved="true" >
                     <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.2.1.0.0" expl="rewrite premises" proved="true">
                     <proof prover="8"><result status="valid" time="2.58" steps="1050444"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.2.1.1" expl="rewrite premises" proved="true">
                    <transf name="compute_specified" proved="true" >
                     <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.2.1.1.0" expl="rewrite premises" proved="true">
                     <proof prover="8"><result status="valid" time="2.61" steps="1050438"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.2.2" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="1.64" steps="999228"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.0.0.3" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.36" steps="999237"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.1" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="1.35" steps="999228"/></proof>
                </goal>
                <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.2" expl="rewrite premises" proved="true">
                <transf name="rewrite" proved="true" arg1="Hinst2" arg2="in" arg3="H2">
                 <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.2.0" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.17" steps="877478"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="correct_path_sum_bv_main&#39;vc.0.0.0.0.0.1.1.1.1.1.0.0.3.0.3" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="1.62" steps="999237"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="correct_path_sum_bv_main&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="2.31" steps="888651"/></proof>
    </goal>
    <goal name="correct_path_sum_bv_main&#39;vc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.14" steps="735736"/></proof>
    </goal>
    <goal name="correct_path_sum_bv_main&#39;vc.0.0.3" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="correct_path_sum_bv_main&#39;vc.0.0.3.0" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.66" steps="779066"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="correct_path_sum_bv_main&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="0.94" steps="735736"/></proof>
   </goal>
   <goal name="correct_path_sum_bv_main&#39;vc.0.2" expl="rewrite premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="correct_path_sum_bv_main&#39;vc.0.2.0" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="1.99" steps="779066"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="correct_path_sum_bv_apply&#39;vc" expl="VC for correct_path_sum_bv_apply" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="correct_path_sum_bv_apply&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(  path_sem c (bv_to_ket x))" arg2="(pps_apply_basis (build_pps_bv (width c) r k a) x)">
   <goal name="correct_path_sum_bv_apply&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="pps_apply_basis&#39;def">
    <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="scalar_eq_gen">
     <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
      <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="2.29" steps="869240"/></proof>
      </goal>
      <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="2.61" steps="871479"/></proof>
      </goal>
      <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="2.27" steps="870294"/></proof>
      </goal>
      <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0" expl="apply premises" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="build_pps_bv&#39;spec">
          <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="build_pps_bv&#39;spec3">
           <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="(make_bv
        ((h_basis_ket (build_pps_bv (width c) r k a1) @ getbv x) @ getbv a)
        (width c))" arg2="((k @ x) @ a)">
            <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
            </transf>
            </goal>
            <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
            <transf name="apply" proved="true" arg1="set_equal_bv">
             <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="make_bv_length">
              <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
              <proof prover="8"><result status="valid" time="2.79" steps="1088261"/></proof>
              </goal>
              <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="3.12" steps="1116418"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.0.1.0.0.1" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="3.11" steps="1116405"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.0.1.0.1" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.0.1.0.1.0" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.87" steps="1117025"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.0.1.0.1.1" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.87" steps="1117014"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.0.1.0.2" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.0.1.0.2.0" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.27" steps="924108"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.0.1.0.2.1" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.79" steps="1085673"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.0.1.1" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.0.1.1.0" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.0.1.1.0.0" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.86" steps="1116418"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.0.1.1.0.1" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="3.14" steps="1116405"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.0.1.1.1" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.0.1.1.1.0" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="3.14" steps="1117025"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.0.1.1.1.1" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.86" steps="1117014"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.0.1.1.2" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.0.1.1.2.0" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.50" steps="924108"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.0.1.1.2.1" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.85" steps="1085673"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="2.86" steps="1084303"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
               <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="build_pps_bv&#39;spec1">
                <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="3.30" steps="1188776"/></proof>
                </goal>
                <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.0.1" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="1.43" steps="1017879"/></proof>
                </goal>
                <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.0.2" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="2.48" steps="1071778"/></proof>
                </goal>
                <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.0.3" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="1.67" steps="1017879"/></proof>
                </goal>
                <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.0.4" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="3.10" steps="1192019"/></proof>
                </goal>
                <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.0.5" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
                 <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.0.5.0" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.50" steps="924117"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.0.5.1" expl="rewrite premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.0.5.1.0" expl="rewrite premises" proved="true">
                  <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                   <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.0.5.1.0.0" expl="apply premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.0.5.1.0.0.0" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="3.12" steps="1189881"/></proof>
                    </goal>
                    <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.0.5.1.0.0.1" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="3.47" steps="1189875"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.0.5.1.0.1" expl="apply premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.0.5.1.0.1.0" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="3.55" steps="1189900"/></proof>
                    </goal>
                    <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.0.5.1.0.1.1" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="3.48" steps="1189894"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.0.5.1.0.2" expl="apply premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.0.5.1.0.2.0" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="1.42" steps="1017904"/></proof>
                    </goal>
                    <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.0.5.1.0.2.1" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="3.05" steps="1190150"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.0.5.1.1" expl="rewrite premises" proved="true">
                  <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                   <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.0.5.1.1.0" expl="apply premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.0.5.1.1.0.0" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="3.11" steps="1189881"/></proof>
                    </goal>
                    <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.0.5.1.1.0.1" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="3.12" steps="1189875"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.0.5.1.1.1" expl="apply premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.0.5.1.1.1.0" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="3.21" steps="1189900"/></proof>
                    </goal>
                    <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.0.5.1.1.1.1" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="3.55" steps="1189894"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.0.5.1.1.2" expl="apply premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.0.5.1.1.2.0" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="1.62" steps="1017904"/></proof>
                    </goal>
                    <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.0.5.1.1.2.1" expl="apply premises" proved="true">
                    <proof prover="8"><result status="valid" time="3.50" steps="1190150"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.0.5.2" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="3.13" steps="1188776"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.1.0" expl="rewrite premises" proved="true">
                <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                 <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.1.0.0" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.1.0.0.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="3.48" steps="1189881"/></proof>
                  </goal>
                  <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.1.0.0.1" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="3.47" steps="1189875"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.1.0.1" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.1.0.1.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="3.46" steps="1189900"/></proof>
                  </goal>
                  <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.1.0.1.1" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="3.40" steps="1189894"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.1.0.2" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.1.0.2.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.37" steps="1017904"/></proof>
                  </goal>
                  <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.1.0.2.1" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="3.48" steps="1190150"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.1.1" expl="rewrite premises" proved="true">
                <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                 <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.1.1.0" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.1.1.0.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="3.41" steps="1189881"/></proof>
                  </goal>
                  <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.1.1.0.1" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="3.44" steps="1189875"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.1.1.1" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.1.1.1.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="3.44" steps="1189900"/></proof>
                  </goal>
                  <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.1.1.1.1" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="3.16" steps="1189894"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.1.1.2" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.1.1.2.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.66" steps="1017904"/></proof>
                  </goal>
                  <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.1.1.2.1" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="3.42" steps="1190150"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.2" expl="rewrite premises" proved="true">
               <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
                <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.2.0" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="1.47" steps="924117"/></proof>
                </goal>
                <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.2.1" expl="rewrite premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.2.1.0" expl="rewrite premises" proved="true">
                 <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                  <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.2.1.0.0" expl="apply premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.2.1.0.0.0" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="3.46" steps="1189881"/></proof>
                   </goal>
                   <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.2.1.0.0.1" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="3.47" steps="1189875"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.2.1.0.1" expl="apply premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.2.1.0.1.0" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="3.45" steps="1189900"/></proof>
                   </goal>
                   <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.2.1.0.1.1" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="3.44" steps="1189894"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.2.1.0.2" expl="apply premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.2.1.0.2.0" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="1.70" steps="1017904"/></proof>
                   </goal>
                   <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.2.1.0.2.1" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="3.75" steps="1190150"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.2.1.1" expl="rewrite premises" proved="true">
                 <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                  <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.2.1.1.0" expl="apply premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.2.1.1.0.0" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="3.73" steps="1189881"/></proof>
                   </goal>
                   <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.2.1.1.0.1" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="3.08" steps="1189875"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.2.1.1.1" expl="apply premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.2.1.1.1.0" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="3.09" steps="1189900"/></proof>
                   </goal>
                   <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.2.1.1.1.1" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="3.50" steps="1189894"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.2.1.1.2" expl="apply premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.2.1.1.2.0" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="1.38" steps="1017904"/></proof>
                   </goal>
                   <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.2.1.1.2.1" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="3.46" steps="1190150"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.0.1.1.0.2.2" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="3.48" steps="1188776"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="2.77" steps="1084303"/></proof>
           </goal>
           <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="1.45" steps="924083"/></proof>
           </goal>
           <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.0.3" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="2.02" steps="971930"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="2.79" steps="1084303"/></proof>
          </goal>
          <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="1.30" steps="924083"/></proof>
          </goal>
          <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.3" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="2.03" steps="971930"/></proof>
          </goal>
          <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.4" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="1.48" steps="924083"/></proof>
          </goal>
          <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.0.3.0.0.0.5" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="2.80" steps="1088651"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="correct_path_sum_bv_apply&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="8"><result status="valid" time="2.23" steps="871837"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="correct_path_sum_bv_apply&#39;vc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="8"><result status="valid" time="2.29" steps="871121"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="correct_path_sum_bv_apply&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <transf name="replace" proved="true" arg1="(pps_apply_basis (build_pps_bv (width c) r k a) x)" arg2="(pps_apply (build_pps_bv (width c) r k a) (bv_to_ket x))">
    <goal name="correct_path_sum_bv_apply&#39;vc.0.1.0" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="goal_comm">
     <goal name="correct_path_sum_bv_apply&#39;vc.0.1.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="get_correct_path_sum_path">
      <goal name="correct_path_sum_bv_apply&#39;vc.0.1.0.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="2.27" steps="870294"/></proof>
      </goal>
      <goal name="correct_path_sum_bv_apply&#39;vc.0.1.0.0.1" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="1.60" steps="757121"/></proof>
      </goal>
      <goal name="correct_path_sum_bv_apply&#39;vc.0.1.0.0.2" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="2.26" steps="869805"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="correct_path_sum_bv_apply&#39;vc.0.1.1" expl="equality hypothesis" proved="true">
    <proof prover="8"><result status="valid" time="2.29" steps="871076"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="correct_path_sum_bv_sim&#39;vc" expl="VC for correct_path_sum_bv_sim" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="correct_path_sum_bv_sim&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="correct_path_sum_bv&#39;def">
   <goal name="correct_path_sum_bv_sim&#39;vc.0.0" expl="VC for correct_path_sum_bv_sim" proved="true">
   <transf name="apply" proved="true" arg1="set_correct_pps">
    <goal name="correct_path_sum_bv_sim&#39;vc.0.0.0" expl="apply premises" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="correct_path_sum_bv_sim&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="build_pps_bv&#39;spec3">
      <goal name="correct_path_sum_bv_sim&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="2.62" steps="1000282"/></proof>
      </goal>
      <goal name="correct_path_sum_bv_sim&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="8"><result status="valid" time="2.15" steps="892790"/></proof>
      </goal>
      <goal name="correct_path_sum_bv_sim&#39;vc.0.0.0.0.2" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="correct_path_sum_bv_sim&#39;vc.0.0.0.0.2.0" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="((k2 @ x) @ y)" arg2="((k1 @ x) @ y)">
        <goal name="correct_path_sum_bv_sim&#39;vc.0.0.0.0.2.0.0" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="2.00" steps="893964"/></proof>
        </goal>
        <goal name="correct_path_sum_bv_sim&#39;vc.0.0.0.0.2.0.1" expl="equality hypothesis" proved="true">
        <proof prover="8"><result status="valid" time="1.99" steps="893928"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="( pps_apply (build_pps_bv (width c) r2 k2 a2) x )" arg2="( pps_apply (build_pps_bv (width c) r1 k1 a1) x )">
      <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(path_sem_basis c x)" arg2="(path_sem c x)">
       <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="get_correct_path_sum_path">
        <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="build_pps_bv&#39;spec3">
          <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="1.40" steps="847364"/></proof>
          </goal>
          <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="2.87" steps="1001204"/></proof>
          </goal>
          <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="1.19" steps="847366"/></proof>
          </goal>
          <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.0.0.0.0.3" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="1.92" steps="892928"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="1.09" steps="712708"/></proof>
        </goal>
        <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="8"><result status="valid" time="2.25" steps="868689"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="8"><result status="valid" time="1.68" steps="757751"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="get_pps_apply_equiv">
       <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.0" expl="apply premises" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="build_pps_bv&#39;spec3">
         <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="2.66" steps="1002211"/></proof>
         </goal>
         <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="2.64" steps="1001204"/></proof>
         </goal>
         <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="1.90" steps="892812"/></proof>
         </goal>
         <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.0.0.3" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.0.0.3.0" expl="rewrite premises" proved="true">
          <transf name="replace" proved="true" arg1="((k2 @ x) @ y)" arg2="((k1 @ x) @ y)">
           <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.0.0.3.0.0" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="2.02" steps="893986"/></proof>
           </goal>
           <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.0.0.3.0.1" expl="equality hypothesis" proved="true">
           <proof prover="8"><result status="valid" time="2.00" steps="893950"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_pps_apply_equiv_sim">
        <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.0" expl="apply premises" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="build_pps_bv&#39;spec3">
          <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="2.66" steps="1002211"/></proof>
          </goal>
          <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="2.65" steps="1001204"/></proof>
          </goal>
          <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="1.91" steps="892812"/></proof>
          </goal>
          <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.0.0.3" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.0.0.3.0" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="((k2 @ x) @ y)" arg2="((k1 @ x) @ y)">
            <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.0.0.3.0.0" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="1.96" steps="893986"/></proof>
            </goal>
            <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.0.0.3.0.1" expl="equality hypothesis" proved="true">
            <proof prover="8"><result status="valid" time="2.01" steps="893950"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.1" expl="apply premises" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.1.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="build_pps_bv&#39;spec2">
          <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.1.0.0" expl="apply premises" proved="true">
          <proof prover="8"><result status="valid" time="2.63" steps="1002138"/></proof>
          </goal>
          <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.1.0.1" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="2.60" steps="1001204"/></proof>
          </goal>
          <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.1.0.2" expl="rewrite premises" proved="true">
          <proof prover="8"><result status="valid" time="1.86" steps="892812"/></proof>
          </goal>
          <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.1.0.3" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.1.0.3.0" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="((k2 @ x) @ y)" arg2="((k1 @ x) @ y)">
            <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.1.0.3.0.0" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="1.98" steps="893986"/></proof>
            </goal>
            <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.1.0.3.0.1" expl="equality hypothesis" proved="true">
            <proof prover="8"><result status="valid" time="1.99" steps="893950"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(h_width (build_pps_bv (width c) r2 k2 a2) )" arg2="(width c)" arg3="in" arg4="H3">
          <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="(h_range (build_pps_bv (width c) r2 k2 a2) )" arg2="r2" arg3="in" arg4="H2">
           <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0" expl="apply premises" proved="true">
           <transf name="split_all_full" proved="true" >
            <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(((h_basis_ket (build_pps_bv (width c) r2 k2 a2) @ x) @ y) @ i)" arg2="(((h_basis_ket (build_pps_bv (width c) r2 k2 a2) @ (getbv (make_bv x (width c)))) @ (getbv (make_bv y r2))) @ i)">
             <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="replace" proved="true" arg1="(((h_basis_ket (build_pps_bv (width c) r1 k1 a1) @ x) @ y) @ i)" arg2="(((h_basis_ket (build_pps_bv (width c) r1 k1 a1) @ (getbv (make_bv x (width c)))) @ (getbv (make_bv y r1))) @ i)">
              <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="build_pps_bv&#39;spec1">
               <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="build_pps_bv&#39;spec1">
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="Requires2">
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="replace" proved="true" arg1="r2" arg2="r1">
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.34" steps="873799"/></proof>
                  </goal>
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                  <proof prover="8"><result status="valid" time="1.39" steps="873808"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="make_bv_length">
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.35" steps="873799"/></proof>
                  </goal>
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.0.0.1.1.0" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.67" steps="1030517"/></proof>
                   </goal>
                   <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.0.0.1.1.1" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.69" steps="1030511"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.0.0.1.2" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.63" steps="1030411"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="make_bv_length">
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.42" steps="873799"/></proof>
                  </goal>
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.0.0.2.1" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.69" steps="1030671"/></proof>
                  </goal>
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.0.0.2.2" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.35" steps="873801"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="2.66" steps="1030411"/></proof>
                </goal>
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="1.40" steps="873801"/></proof>
                </goal>
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="2.25" steps="920076"/></proof>
                </goal>
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.0.4" expl="rewrite premises" proved="true">
                <transf name="rewrite" proved="true" arg1="make_bv_length">
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.0.4.0" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.36" steps="873799"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.0.4.1" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.68" steps="1030634"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.0.4.2" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.64" steps="1030411"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.0.5" expl="rewrite premises" proved="true">
                <transf name="rewrite" proved="true" arg1="make_bv_length">
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.0.5.0" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.40" steps="873799"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.0.5.1" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.66" steps="1030671"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.0.5.2" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.43" steps="873801"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.0.6" expl="rewrite premises" proved="true">
                <transf name="rewrite" proved="true" arg1="build_pps_bv&#39;spec3" arg2="in" arg3="H">
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.0.6.0" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.21" steps="873793"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.0.6.1" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.62" steps="1030411"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.0.6.2" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.00" steps="919960"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.0.6.3" expl="rewrite premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.0.6.3.0" expl="rewrite premises" proved="true">
                  <transf name="replace" proved="true" arg1="((k2 @ x) @ y)" arg2="((k1 @ x) @ y)">
                   <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.0.6.3.0.0" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.06" steps="921240"/></proof>
                   </goal>
                   <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.0.6.3.0.1" expl="equality hypothesis" proved="true">
                   <proof prover="8"><result status="valid" time="2.09" steps="921204"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="3.11" steps="1030411"/></proof>
               </goal>
               <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="1.96" steps="919960"/></proof>
               </goal>
               <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.3.0" expl="rewrite premises" proved="true">
                <transf name="replace" proved="true" arg1="((k2 @ x) @ y)" arg2="((k1 @ x) @ y)">
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.3.0.0" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.51" steps="921240"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.3.0.1" expl="equality hypothesis" proved="true">
                 <proof prover="8"><result status="valid" time="2.47" steps="921204"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.4" expl="rewrite premises" proved="true">
               <transf name="rewrite" proved="true" arg1="make_bv_length">
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.4.0" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="1.40" steps="873799"/></proof>
                </goal>
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.4.1" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="3.13" steps="1030634"/></proof>
                </goal>
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.4.2" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="3.12" steps="1030411"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.5" expl="rewrite premises" proved="true">
               <transf name="rewrite" proved="true" arg1="make_bv_length">
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.5.0" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="1.39" steps="873799"/></proof>
                </goal>
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.5.1" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="2.84" steps="1030644"/></proof>
                </goal>
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.5.2" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="2.32" steps="919960"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.6" expl="rewrite premises" proved="true">
               <transf name="rewrite" proved="true" arg1="build_pps_bv&#39;spec3" arg2="in" arg3="H">
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.6.0" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="1.35" steps="873793"/></proof>
                </goal>
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.6.1" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="2.66" steps="1030411"/></proof>
                </goal>
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.6.2" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="1.91" steps="919960"/></proof>
                </goal>
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.6.3" expl="rewrite premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.6.3.0" expl="rewrite premises" proved="true">
                 <transf name="replace" proved="true" arg1="((k2 @ x) @ y)" arg2="((k1 @ x) @ y)">
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.6.3.0.0" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.41" steps="921240"/></proof>
                  </goal>
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.0.6.3.0.1" expl="equality hypothesis" proved="true">
                  <proof prover="8"><result status="valid" time="2.05" steps="921204"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
              <transf name="apply" proved="true" arg1="pps&#39;invariant1">
               <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.1.0" expl="apply premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.42" steps="873841"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.68" steps="1031562"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.67" steps="1032380"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.1.1" expl="apply premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.39" steps="873841"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.67" steps="1031526"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.1.1.0.2" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.68" steps="1032317"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.1.2" expl="apply premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.1.2.0" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="1.36" steps="873801"/></proof>
                </goal>
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.1.2.1" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="build_pps_bv&#39;spec3">
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.1.2.1.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="build_pps_bv&#39;spec3" arg2="in" arg3="H">
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.1.2.1.0.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.38" steps="873795"/></proof>
                  </goal>
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.1.2.1.0.1" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.64" steps="1030411"/></proof>
                  </goal>
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.1.2.1.0.2" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.94" steps="919960"/></proof>
                  </goal>
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.1.2.1.0.3" expl="rewrite premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.1.2.1.0.3.0" expl="rewrite premises" proved="true">
                   <transf name="replace" proved="true" arg1="((k2 @ x) @ y)" arg2="((k1 @ x) @ y)">
                    <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.1.2.1.0.3.0.0" expl="rewrite premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.09" steps="921240"/></proof>
                    </goal>
                    <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.1.2.1.0.3.0.1" expl="equality hypothesis" proved="true">
                    <proof prover="8"><result status="valid" time="2.08" steps="921204"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.1.2.1.1" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.70" steps="1030411"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.1.2.1.2" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.40" steps="873801"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.0.1.2.1.3" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.98" steps="920076"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1" expl="equality hypothesis" proved="true">
             <transf name="apply" proved="true" arg1="pps&#39;invariant1">
              <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.0" expl="apply premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="1.37" steps="873824"/></proof>
                </goal>
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="3.04" steps="1030684"/></proof>
                </goal>
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
                <transf name="rewrite" proved="true" arg1="build_pps_bv&#39;spec3" arg2="in" arg3="H">
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.0.0.2.0" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.43" steps="873835"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.0.0.2.1" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="3.01" steps="1030446"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.0.0.2.2" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.99" steps="920005"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.0.0.2.3" expl="rewrite premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.0.0.2.3.0" expl="rewrite premises" proved="true">
                  <transf name="replace" proved="true" arg1="((k2 @ x) @ y)" arg2="((k1 @ x) @ y)">
                   <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.0.0.2.3.0.0" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.11" steps="921283"/></proof>
                   </goal>
                   <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.0.0.2.3.0.1" expl="equality hypothesis" proved="true">
                   <proof prover="8"><result status="valid" time="2.14" steps="921247"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.1" expl="apply premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.1.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                <proof prover="8"><result status="valid" time="1.36" steps="873828"/></proof>
                </goal>
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="2.70" steps="1030706"/></proof>
                </goal>
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.1.0.2" expl="rewrite premises" proved="true">
                <transf name="rewrite" proved="true" arg1="build_pps_bv&#39;spec2" arg2="in" arg3="H">
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.1.0.2.0" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.38" steps="873850"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.1.0.2.1" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.70" steps="1030458"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.1.0.2.2" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.96" steps="920014"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.1.0.2.3" expl="rewrite premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.1.0.2.3.0" expl="rewrite premises" proved="true">
                  <transf name="replace" proved="true" arg1="((k2 @ x) @ y)" arg2="((k1 @ x) @ y)">
                   <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.1.0.2.3.0.0" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.09" steps="921293"/></proof>
                   </goal>
                   <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.1.0.2.3.0.1" expl="equality hypothesis" proved="true">
                   <proof prover="8"><result status="valid" time="2.11" steps="921257"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.2" expl="apply premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.2.0" expl="apply premises" proved="true">
               <proof prover="8"><result status="valid" time="1.35" steps="873801"/></proof>
               </goal>
               <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.2.1" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="build_pps_bv&#39;spec3">
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.2.1.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="build_pps_bv&#39;spec3" arg2="in" arg3="H">
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.2.1.0.0" expl="apply premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.40" steps="873795"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.2.1.0.1" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.70" steps="1030411"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.2.1.0.2" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.99" steps="919960"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.2.1.0.3" expl="rewrite premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.2.1.0.3.0" expl="rewrite premises" proved="true">
                  <transf name="replace" proved="true" arg1="((k2 @ x) @ y)" arg2="((k1 @ x) @ y)">
                   <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.2.1.0.3.0.0" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.37" steps="921240"/></proof>
                   </goal>
                   <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.2.1.0.3.0.1" expl="equality hypothesis" proved="true">
                   <proof prover="8"><result status="valid" time="2.15" steps="921204"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.2.1.1" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="2.74" steps="1030411"/></proof>
                </goal>
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.2.1.2" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="2.01" steps="919960"/></proof>
                </goal>
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.2.1.3" expl="rewrite premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.2.1.3.0" expl="rewrite premises" proved="true">
                 <transf name="replace" proved="true" arg1="((k2 @ x) @ y)" arg2="((k1 @ x) @ y)">
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.2.1.3.0.0" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.28" steps="921240"/></proof>
                  </goal>
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.0.0.1.2.1.3.0.1" expl="equality hypothesis" proved="true">
                  <proof prover="8"><result status="valid" time="2.06" steps="921204"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.1" expl="equality hypothesis" proved="true">
           <transf name="split_all_full" proved="true" >
            <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.1.0" expl="equality hypothesis" proved="true">
            <transf name="rewrite" proved="true" arg1="build_pps_bv&#39;spec2">
             <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.1.0.0" expl="equality hypothesis" proved="true">
             <proof prover="8"><result status="valid" time="1.24" steps="873781"/></proof>
             </goal>
             <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.1.0.1" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="2.73" steps="1030388"/></proof>
             </goal>
             <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.1.0.2" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="1.95" steps="919947"/></proof>
             </goal>
             <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.1.0.3" expl="rewrite premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.1.0.3.0" expl="rewrite premises" proved="true">
              <transf name="replace" proved="true" arg1="((k2 @ x) @ y)" arg2="((k1 @ x) @ y)">
               <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.1.0.3.0.0" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="2.30" steps="921179"/></proof>
               </goal>
               <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.0.1.0.3.0.1" expl="equality hypothesis" proved="true">
               <proof prover="8"><result status="valid" time="2.09" steps="921143"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.1" expl="equality hypothesis" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.1.0" expl="equality hypothesis" proved="true">
           <transf name="rewrite" proved="true" arg1="build_pps_bv&#39;spec3">
            <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.1.0.0" expl="equality hypothesis" proved="true">
            <proof prover="8"><result status="valid" time="1.20" steps="873781"/></proof>
            </goal>
            <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.1.0.1" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="2.68" steps="1030383"/></proof>
            </goal>
            <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.1.0.2" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="2.01" steps="919942"/></proof>
            </goal>
            <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.1.0.3" expl="rewrite premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.1.0.3.0" expl="rewrite premises" proved="true">
             <transf name="replace" proved="true" arg1="((k2 @ x) @ y)" arg2="((k1 @ x) @ y)">
              <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.1.0.3.0.0" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="2.02" steps="921224"/></proof>
              </goal>
              <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.2.0.1.0.3.0.1" expl="equality hypothesis" proved="true">
              <proof prover="8"><result status="valid" time="2.10" steps="921188"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0" expl="apply premises" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="build_pps_bv&#39;spec3" arg2="in" arg3="H3">
           <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="build_pps_bv&#39;spec3" arg2="in" arg3="H2">
            <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="build_pps_bv&#39;spec2" arg2="in" arg3="H">
             <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="build_pps_bv&#39;spec2" arg2="in" arg3="H1">
              <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="replace" proved="true" arg1="((h_angle (build_pps_bv (width c) r2 k2 a2) @ x) @ y)" arg2="((h_angle (build_pps_bv (width c) r2 k2 a2) @ (getbv (make_bv x (width c)))) @ (getbv (make_bv y r2)))">
               <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="replace" proved="true" arg1="((h_angle (build_pps_bv (width c) r1 k1 a1) @ x) @ y)" arg2="((h_angle (build_pps_bv (width c) r1 k1 a1) @ (getbv (make_bv x (width c)))) @ (getbv (make_bv y r1)))">
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="build_pps_bv&#39;spec">
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="build_pps_bv&#39;spec">
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="apply" proved="true" arg1="goal_comm">
                   <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="replace" proved="true" arg1="r1" arg2="r2">
                    <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="apply" proved="true" arg1="Requires1">
                     <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="make_bv_length">
                      <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                      <proof prover="8"><result status="valid" time="1.20" steps="873757"/></proof>
                      </goal>
                      <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                      <proof prover="8"><result status="valid" time="2.90" steps="1029566"/></proof>
                      </goal>
                      <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                      <proof prover="8"><result status="valid" time="2.67" steps="1029308"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="make_bv_length">
                      <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                      <proof prover="8"><result status="valid" time="1.17" steps="873766"/></proof>
                      </goal>
                      <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                      <proof prover="8"><result status="valid" time="3.00" steps="1029571"/></proof>
                      </goal>
                      <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.0.0.0.0.1.2" expl="rewrite premises" proved="true">
                      <proof prover="8"><result status="valid" time="2.23" steps="919893"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                    <proof prover="8"><result status="valid" time="1.41" steps="873759"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.65" steps="1029308"/></proof>
                  </goal>
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.43" steps="873759"/></proof>
                  </goal>
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.93" steps="920009"/></proof>
                  </goal>
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.0.4" expl="rewrite premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="make_bv_length">
                   <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.0.4.0" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="1.20" steps="873757"/></proof>
                   </goal>
                   <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.0.4.1" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.68" steps="1029566"/></proof>
                   </goal>
                   <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.0.4.2" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.67" steps="1029308"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.0.5" expl="rewrite premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="make_bv_length">
                   <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.0.5.0" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="1.17" steps="873757"/></proof>
                   </goal>
                   <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.0.5.1" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.66" steps="1029593"/></proof>
                   </goal>
                   <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.0.5.2" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="1.42" steps="873759"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="2.69" steps="1029308"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                 <proof prover="8"><result status="valid" time="1.96" steps="919893"/></proof>
                 </goal>
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.3.0" expl="rewrite premises" proved="true">
                  <transf name="replace" proved="true" arg1="((k2 @ x) @ y)" arg2="((k1 @ x) @ y)">
                   <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.3.0.0" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.06" steps="921166"/></proof>
                   </goal>
                   <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.3.0.1" expl="equality hypothesis" proved="true">
                   <proof prover="8"><result status="valid" time="2.36" steps="921130"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.4" expl="rewrite premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="make_bv_length">
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.4.0" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.43" steps="873757"/></proof>
                  </goal>
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.4.1" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.68" steps="1029566"/></proof>
                  </goal>
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.4.2" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.71" steps="1029308"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.5" expl="rewrite premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="make_bv_length">
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.5.0" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.43" steps="873757"/></proof>
                  </goal>
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.5.1" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="2.69" steps="1029571"/></proof>
                  </goal>
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.0.5.2" expl="rewrite premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.96" steps="919893"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                <transf name="apply" proved="true" arg1="pps&#39;invariant">
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                   <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="1.43" steps="873799"/></proof>
                   </goal>
                   <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.1.0.0.1.0" expl="rewrite premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.70" steps="1030407"/></proof>
                    </goal>
                    <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.1.0.0.1.1" expl="rewrite premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.73" steps="1030401"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.1.0.0.2.0" expl="rewrite premises" proved="true">
                    <proof prover="8"><result status="valid" time="1.46" steps="873801"/></proof>
                    </goal>
                    <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.1.0.0.2.1" expl="rewrite premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.71" steps="1031333"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                   <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                   <proof prover="8"><result status="valid" time="1.43" steps="873799"/></proof>
                   </goal>
                   <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.1.1.0.1.0" expl="rewrite premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.65" steps="1030352"/></proof>
                    </goal>
                    <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.1.1.0.1.1" expl="rewrite premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.72" steps="1030346"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.1.1.0.2" expl="rewrite premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.1.1.0.2.0" expl="rewrite premises" proved="true">
                    <proof prover="8"><result status="valid" time="1.36" steps="873801"/></proof>
                    </goal>
                    <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.0.1.1.0.2.1" expl="rewrite premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.73" steps="1031272"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
               <transf name="apply" proved="true" arg1="pps&#39;invariant">
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.44" steps="873799"/></proof>
                  </goal>
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.1.0.0.1.0" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="3.09" steps="1030517"/></proof>
                   </goal>
                   <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.1.0.0.1.1" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.72" steps="1030511"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.1.0.0.2.0" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="1.38" steps="873801"/></proof>
                   </goal>
                   <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.1.0.0.2.1" expl="rewrite premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="build_pps_bv&#39;spec3" arg2="in" arg3="H">
                    <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.1.0.0.2.1.0" expl="rewrite premises" proved="true">
                    <proof prover="8"><result status="valid" time="1.36" steps="873795"/></proof>
                    </goal>
                    <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.1.0.0.2.1.1" expl="rewrite premises" proved="true">
                    <proof prover="8"><result status="valid" time="3.03" steps="1030411"/></proof>
                    </goal>
                    <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.1.0.0.2.1.2" expl="rewrite premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.22" steps="919960"/></proof>
                    </goal>
                    <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.1.0.0.2.1.3" expl="rewrite premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.1.0.0.2.1.3.0" expl="rewrite premises" proved="true">
                     <transf name="replace" proved="true" arg1="((k2 @ x) @ y)" arg2="((k1 @ x) @ y)">
                      <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.1.0.0.2.1.3.0.0" expl="rewrite premises" proved="true">
                      <proof prover="8"><result status="valid" time="2.40" steps="921240"/></proof>
                      </goal>
                      <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.1.0.0.2.1.3.0.1" expl="equality hypothesis" proved="true">
                      <proof prover="8"><result status="valid" time="2.41" steps="921204"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                  <proof prover="8"><result status="valid" time="1.35" steps="873799"/></proof>
                  </goal>
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.1.1.0.1.0" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.66" steps="1030453"/></proof>
                   </goal>
                   <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.1.1.0.1.1" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="2.75" steps="1030447"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.1.1.0.2" expl="rewrite premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.1.1.0.2.0" expl="rewrite premises" proved="true">
                   <proof prover="8"><result status="valid" time="1.22" steps="873801"/></proof>
                   </goal>
                   <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.1.1.0.2.1" expl="rewrite premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="build_pps_bv&#39;spec2" arg2="in" arg3="H">
                    <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.1.1.0.2.1.0" expl="rewrite premises" proved="true">
                    <proof prover="8"><result status="valid" time="1.32" steps="873801"/></proof>
                    </goal>
                    <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.1.1.0.2.1.1" expl="rewrite premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.73" steps="1030343"/></proof>
                    </goal>
                    <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.1.1.0.2.1.2" expl="rewrite premises" proved="true">
                    <proof prover="8"><result status="valid" time="2.22" steps="919960"/></proof>
                    </goal>
                    <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.1.1.0.2.1.3" expl="rewrite premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.1.1.0.2.1.3.0" expl="rewrite premises" proved="true">
                     <transf name="replace" proved="true" arg1="((k2 @ x) @ y)" arg2="((k1 @ x) @ y)">
                      <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.1.1.0.2.1.3.0.0" expl="rewrite premises" proved="true">
                      <proof prover="8"><result status="valid" time="2.32" steps="921240"/></proof>
                      </goal>
                      <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.0.1.1.0.2.1.3.0.1" expl="equality hypothesis" proved="true">
                      <proof prover="8"><result status="valid" time="2.08" steps="921204"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="2.74" steps="1029314"/></proof>
              </goal>
              <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="8"><result status="valid" time="1.97" steps="919906"/></proof>
              </goal>
              <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.3" expl="rewrite premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.3.0" expl="rewrite premises" proved="true">
               <transf name="replace" proved="true" arg1="((k2 @ x) @ y)" arg2="((k1 @ x) @ y)">
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.3.0.0" expl="rewrite premises" proved="true">
                <proof prover="8"><result status="valid" time="2.07" steps="921173"/></proof>
                </goal>
                <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.0.3.0.1" expl="equality hypothesis" proved="true">
                <proof prover="8"><result status="valid" time="2.50" steps="921137"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="2.75" steps="1029304"/></proof>
             </goal>
             <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.2" expl="rewrite premises" proved="true">
             <proof prover="8"><result status="valid" time="1.97" steps="919893"/></proof>
             </goal>
             <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.3" expl="rewrite premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.3.0" expl="rewrite premises" proved="true">
              <transf name="replace" proved="true" arg1="((k2 @ x) @ y)" arg2="((k1 @ x) @ y)">
               <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.3.0.0" expl="rewrite premises" proved="true">
               <proof prover="8"><result status="valid" time="2.13" steps="921126"/></proof>
               </goal>
               <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.0.3.0.1" expl="equality hypothesis" proved="true">
               <proof prover="8"><result status="valid" time="2.12" steps="921090"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="2.96" steps="1029312"/></proof>
            </goal>
            <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="8"><result status="valid" time="2.15" steps="919906"/></proof>
            </goal>
            <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.0.3" expl="rewrite premises" proved="true">
            <proof prover="12"><result status="valid" time="5.53" steps="8965570"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="2.85" steps="1029303"/></proof>
           </goal>
           <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="2.51" steps="919897"/></proof>
           </goal>
           <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.1.3.0.0.3" expl="rewrite premises" proved="true">
           <proof prover="12"><result status="valid" time="5.48" steps="8968922"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.2" expl="apply premises" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.2.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="build_pps_bv&#39;spec3">
         <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.2.0.0" expl="apply premises" proved="true">
         <proof prover="8"><result status="valid" time="1.35" steps="847366"/></proof>
         </goal>
         <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.2.0.1" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="3.21" steps="1001204"/></proof>
         </goal>
         <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.2.0.2" expl="rewrite premises" proved="true">
         <proof prover="8"><result status="valid" time="1.98" steps="892812"/></proof>
         </goal>
         <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.2.0.3" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.2.0.3.0" expl="rewrite premises" proved="true">
          <transf name="replace" proved="true" arg1="((k2 @ x) @ y)" arg2="((k1 @ x) @ y)">
           <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.2.0.3.0.0" expl="rewrite premises" proved="true">
           <proof prover="8"><result status="valid" time="1.93" steps="893986"/></proof>
           </goal>
           <goal name="correct_path_sum_bv_sim&#39;vc.0.0.1.0.1.2.0.3.0.1" expl="equality hypothesis" proved="true">
           <proof prover="8"><result status="valid" time="2.27" steps="893950"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="correct_path_sum_bv_sim&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="8"><result status="valid" time="1.54" steps="757040"/></proof>
   </goal>
   <goal name="correct_path_sum_bv_sim&#39;vc.0.2" expl="rewrite premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="correct_path_sum_bv_sim&#39;vc.0.2.0" expl="rewrite premises" proved="true">
    <transf name="replace" proved="true" arg1="((k2 @ x) @ y)" arg2="((k1 @ x) @ y)">
     <goal name="correct_path_sum_bv_sim&#39;vc.0.2.0.0" expl="rewrite premises" proved="true">
     <proof prover="8"><result status="valid" time="1.82" steps="757893"/></proof>
     </goal>
     <goal name="correct_path_sum_bv_sim&#39;vc.0.2.0.1" expl="equality hypothesis" proved="true">
     <proof prover="8"><result status="valid" time="1.78" steps="757868"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
