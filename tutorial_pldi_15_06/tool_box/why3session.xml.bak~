<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="CVC3" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="1" name="CVC4" version="1.8" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="Alt-Ergo" version="2.6.2" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="4" name="CVC5" version="1.0.2" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="lib.mlw"/>
<theory name="Circuits" proved="true">
 <goal name="ind_isum&#39;vc" expl="VC for ind_isum" proved="true">
 <transf name="split_vc" proved="true" >
 </transf>
 </goal>
 <goal name="ind_isum_eq&#39;vc" expl="VC for ind_isum_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ind_isum_eq&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="3.547101" steps="1149299"/></proof>
  </goal>
  <goal name="ind_isum_eq&#39;vc.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.506733" steps="965508"/></proof>
  </goal>
  <goal name="ind_isum_eq&#39;vc.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.582606" steps="965511"/></proof>
  </goal>
  <goal name="ind_isum_eq&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="1.864770" steps="965434"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ind_isum_empty&#39;vc" expl="VC for ind_isum_empty" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ind_isum_empty&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.446654" steps="830"/></proof>
  </goal>
  <goal name="ind_isum_empty&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.347723" steps="832"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ind_isum_re&#39;vc" expl="VC for ind_isum_re" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ind_isum_re&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.463587" steps="830"/></proof>
  </goal>
  <goal name="ind_isum_re&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.340897" steps="832"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ind_isum_plus_one&#39;vc" expl="VC for ind_isum_plus_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ind_isum_plus_one&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.469992" steps="830"/></proof>
  </goal>
  <goal name="ind_isum_plus_one&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.346076" steps="832"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="binary_prefix&#39;vc" expl="VC for binary_prefix" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="binary_prefix&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.706821" steps="3033"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="make_bv&#39;vc" expl="VC for make_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="make_bv&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="make_bv&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="3.541058" steps="1150310"/></proof>
   </goal>
   <goal name="make_bv&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="3.608660" steps="1150300"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="make_bv&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.411851" steps="832"/></proof>
  </goal>
  <goal name="make_bv&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.437198" steps="834"/></proof>
  </goal>
  <goal name="make_bv&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.739945" steps="3305"/></proof>
  </goal>
  <goal name="make_bv&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.743203" steps="3268"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bv_inversion&#39;vc" expl="VC for bv_inversion" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_inversion&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.353295" steps="830"/></proof>
  </goal>
  <goal name="bv_inversion&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.694064" steps="3411"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bv_to_int&#39;vc" expl="VC for bv_to_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bv_to_int&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="3.470414" steps="1157521"/></proof>
  </goal>
  <goal name="bv_to_int&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.436550" steps="834"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="xor&#39;vc" expl="VC for xor" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="xor&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.491761"/></proof>
  </goal>
  <goal name="xor&#39;vc.1" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(a =0)">
   <goal name="xor&#39;vc.1.0" expl="true case (postcondition)" proved="true">
   <proof prover="1"><result status="valid" time="3.051754" steps="995991"/></proof>
   </goal>
   <goal name="xor&#39;vc.1.1" expl="false case (postcondition)" proved="true">
   <proof prover="1"><result status="valid" time="2.873221" steps="1000544"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="xor_eq&#39;vc" expl="VC for xor_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="xor_eq&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="1.966725" steps="967206"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="phase_binary_prod_decomp&#39;vc" expl="VC for phase_binary_prod_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="phase_binary_prod_decomp&#39;vc.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ind_isum (fun (j:int) -&gt; ind_isum (fun (i:int) -&gt; ((x @ i) *&#39; (y @ j)) *&#39; power 2 (((n -&#39;&#39; i) -&#39;&#39; 1) +&#39; j)) j n) 0 n /./ n)" arg2="(ind_isum (fun (j:int) -&gt; ind_isum (fun (i:int) -&gt; ((getbv (make_bv x n) @ i) *&#39; (getbv (make_bv y n) @ j)) *&#39; power 2 (((n -&#39;&#39; i) -&#39;&#39; 1) +&#39; j)) j n) 0 n /./ n)">
   <goal name="phase_binary_prod_decomp&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="int_to_ang_by_sum_mult_break" arg2="n,(make_bv x n),(make_bv y n)">
    <goal name="phase_binary_prod_decomp&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(ind_isum (fun (j:int) -&gt; ind_isum (fun (i:int) -&gt; ((getbv (make_bv x n) @ i) *&#39; (getbv (make_bv y n) @ j)) *&#39; power 2 (((n -&#39;&#39; i) -&#39;&#39; 1) +&#39; j)) j n) 0 n /./ n)" arg2="(ind_isum1 (fun (j:int) -&gt; ind_isum1 (fun (i:int) -&gt; ((getbv (make_bv x n) @ i) *&#39; (getbv (make_bv y n) @ j)) *&#39; power1 2 (((n -&#39;&#39; i) -&#39;&#39; 1) +&#39; j)) j n) 0 n /./ n)">
     <goal name="phase_binary_prod_decomp&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Hinst">
      <goal name="phase_binary_prod_decomp&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_hyp" proved="true" >
      </transf>
      </goal>
      <goal name="phase_binary_prod_decomp&#39;vc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="1.761677" steps="573564"/></proof>
      </goal>
      <goal name="phase_binary_prod_decomp&#39;vc.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.934773" steps="3046"/></proof>
      </goal>
      <goal name="phase_binary_prod_decomp&#39;vc.0.0.0.0.3" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.935171" steps="3046"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="phase_binary_prod_decomp&#39;vc.0.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="compute_hyp" proved="true" >
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="phase_binary_prod_decomp&#39;vc.0.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="int_to_ang_eq">
    <goal name="phase_binary_prod_decomp&#39;vc.0.1.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="ind_isum_eq">
     <goal name="phase_binary_prod_decomp&#39;vc.0.1.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="phase_binary_prod_decomp&#39;vc.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="phase_binary_prod_decomp&#39;vc.0.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="ind_isum_eq">
        <goal name="phase_binary_prod_decomp&#39;vc.0.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="phase_binary_prod_decomp&#39;vc.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="phase_binary_prod_decomp&#39;vc.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="phase_binary_prod_decomp&#39;vc.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="make_bv&#39;spec&#39;0">
            <goal name="phase_binary_prod_decomp&#39;vc.0.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="make_bv&#39;spec&#39;0">
             <goal name="phase_binary_prod_decomp&#39;vc.0.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="4"><result status="valid" time="1.860336" steps="636313"/></proof>
             </goal>
             <goal name="phase_binary_prod_decomp&#39;vc.0.1.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="4"><result status="valid" time="1.886038" steps="636315"/></proof>
             </goal>
             <goal name="phase_binary_prod_decomp&#39;vc.0.1.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
             <proof prover="4"><result status="valid" time="2.720236" steps="694997"/></proof>
             </goal>
             <goal name="phase_binary_prod_decomp&#39;vc.0.1.0.0.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
             <proof prover="4"><result status="valid" time="2.010658" steps="636328"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="phase_binary_prod_decomp&#39;vc.0.1.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="4"><result status="valid" time="1.920347" steps="636315"/></proof>
            </goal>
            <goal name="phase_binary_prod_decomp&#39;vc.0.1.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="4"><result status="valid" time="2.723516" steps="694997"/></proof>
            </goal>
            <goal name="phase_binary_prod_decomp&#39;vc.0.1.0.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
            <proof prover="4"><result status="valid" time="2.859946" steps="695558"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="phase_binary_prod_decomp&#39;vc.0.1.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.545667" steps="966584"/></proof>
        </goal>
        <goal name="phase_binary_prod_decomp&#39;vc.0.1.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.551775" steps="966584"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="phase_binary_prod_decomp&#39;vc.0.1.0.1" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.553188" steps="966539"/></proof>
     </goal>
     <goal name="phase_binary_prod_decomp&#39;vc.0.1.0.2" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.501895" steps="966539"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="phase_binary_prod_decomp&#39;vc.0.1.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.693488"/></proof>
    <proof prover="1"><result status="valid" time="1.951668" steps="966539"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ang_zero&#39;vc" expl="VC for ang_zero" proved="true">
 <proof prover="2"><result status="valid" time="0.438381" steps="828"/></proof>
 </goal>
 <goal name="infix /./&#39;vc" expl="VC for infix /./" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="infix /./&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="infix /./&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.535873" steps="832"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="infix /./&#39;vc.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="infix /./&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.379554" steps="838"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="infix /./&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="infix /./&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.360789" steps="832"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="infix /./&#39;vc.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="infix /./&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.396411"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="int_to_ang_add_rev&#39;vc" expl="VC for int_to_ang_add_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_to_ang_add_rev&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.837505" steps="3042"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="int_to_ang_eq&#39;vc" expl="VC for int_to_ang_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="int_to_ang_eq&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.410930" steps="832"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ang_add_eq&#39;vc" expl="VC for ang_add_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ang_add_eq&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.460602" steps="832"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ang_add_zero&#39;vc" expl="VC for ang_add_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ang_add_zero&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="ang_add_zero_d">
   <goal name="ang_add_zero&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="0.462394" steps="830"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="binary_basis_ket&#39;vc" expl="VC for binary_basis_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="binary_basis_ket&#39;vc.0" expl="postcondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="binary_basis_ket&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.634396"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="hadamard&#39;vc" expl="VC for hadamard" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="hadamard&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.461830" steps="828"/></proof>
  </goal>
  <goal name="hadamard&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.759647" steps="3045"/></proof>
  </goal>
  <goal name="hadamard&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.750132" steps="3049"/></proof>
  </goal>
  <goal name="hadamard&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.729479" steps="3049"/></proof>
  </goal>
  <goal name="hadamard&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.784927" steps="3060"/></proof>
  </goal>
  <goal name="hadamard&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="4.199671" steps="1156649"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="m_skip&#39;vc" expl="VC for m_skip" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="m_skip&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.534345"/></proof>
  </goal>
  <goal name="m_skip&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.639037"/></proof>
  </goal>
  <goal name="m_skip&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.977432"/></proof>
  </goal>
  <goal name="m_skip&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.657152"/></proof>
  </goal>
  <goal name="m_skip&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.604292"/></proof>
  </goal>
  <goal name="m_skip&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="3.191303" steps="1015131"/></proof>
  <proof prover="2"><result status="valid" time="0.906481" steps="3081"/></proof>
  </goal>
  <goal name="m_skip&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.858969"/></proof>
  <proof prover="1"><result status="valid" time="3.262068" steps="1015182"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="place&#39;vc" expl="VC for place" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="place&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.605348"/></proof>
  <proof prover="1"><result status="valid" time="2.332519" steps="955467"/></proof>
  </goal>
  <goal name="place&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.886958"/></proof>
  </goal>
  <goal name="place&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.057064"/></proof>
  <proof prover="2"><result status="valid" time="0.631208" steps="848"/></proof>
  </goal>
  <goal name="place&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.674760"/></proof>
  </goal>
  <goal name="place&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.269661"/></proof>
  <proof prover="2"><result status="valid" time="0.528554" steps="848"/></proof>
  </goal>
  <goal name="place&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.104880"/></proof>
  <proof prover="1"><result status="valid" time="2.291924" steps="969017"/></proof>
  </goal>
  <goal name="place&#39;vc.6" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures5">
   <goal name="place&#39;vc.6.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="4.927359" steps="782984"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="place&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.545791"/></proof>
  <proof prover="1"><result status="valid" time="4.317187" steps="1158582"/></proof>
  </goal>
  <goal name="place&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.763322"/></proof>
  <proof prover="2"><result status="valid" time="1.337605" steps="14747"/></proof>
  </goal>
  <goal name="place&#39;vc.9" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures7">
   <goal name="place&#39;vc.9.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="2.097662" steps="574845"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="infix --&#39;vc" expl="VC for infix --" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="infix --&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.771814"/></proof>
  </goal>
  <goal name="infix --&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.774643"/></proof>
  </goal>
  <goal name="infix --&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.977996"/></proof>
  </goal>
  <goal name="infix --&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.805136"/></proof>
  </goal>
  <goal name="infix --&#39;vc.4" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="Ensures4">
  </transf>
  </goal>
  <goal name="infix --&#39;vc.5" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="Ensures4">
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cnot&#39;vc" expl="VC for cnot" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cnot&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.690934"/></proof>
  </goal>
  <goal name="cnot&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.669452"/></proof>
  </goal>
  <goal name="cnot&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.726579"/></proof>
  </goal>
  <goal name="cnot&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.701616"/></proof>
  </goal>
  <goal name="cnot&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.420342"/></proof>
  </goal>
  <goal name="cnot&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.543747"/></proof>
  </goal>
  <goal name="cnot&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.855982"/></proof>
  </goal>
  <goal name="cnot&#39;vc.7" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Ensures5">
   <goal name="cnot&#39;vc.7.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="xor&#39;spec">
    <goal name="cnot&#39;vc.7.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="2.581524"/></proof>
    <proof prover="4"><result status="valid" time="3.155603" steps="574644"/></proof>
    </goal>
    <goal name="cnot&#39;vc.7.0.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="1.882050"/></proof>
    <proof prover="4"><result status="valid" time="4.489291" steps="779572"/></proof>
    </goal>
    <goal name="cnot&#39;vc.7.0.2" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="2.831357"/></proof>
    <proof prover="4"><result status="valid" time="5.561623" steps="779596"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="cnot&#39;vc.7.1" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="2.709104"/></proof>
   <proof prover="1"><result status="valid" time="3.513447" steps="969103"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cnot&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="4.512958" steps="639710"/></proof>
  </goal>
  <goal name="cnot&#39;vc.9" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="(--)&#39;spec&#39;0">
   <goal name="cnot&#39;vc.9.0" expl="postcondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="cnot&#39;vc.9.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures2">
     <goal name="cnot&#39;vc.9.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
     <goal name="cnot&#39;vc.9.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="2.458418" steps="574795"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="cnot&#39;vc.9.1" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="1.742922"/></proof>
   <proof prover="4"><result status="valid" time="2.728672" steps="630049"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cnot&#39;vc.10" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="(--)&#39;spec&#39;0">
   <goal name="cnot&#39;vc.10.0" expl="postcondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="cnot&#39;vc.10.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures2">
     <goal name="cnot&#39;vc.10.0.0.0" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="3.006323"/></proof>
     </goal>
     <goal name="cnot&#39;vc.10.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="1.965045" steps="575495"/></proof>
     </goal>
     <goal name="cnot&#39;vc.10.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="1.916720"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="cnot&#39;vc.10.1" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="1.825893"/></proof>
   <proof prover="1"><result status="valid" time="3.520277" steps="1015515"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cnot&#39;vc.11" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="(--)&#39;spec">
   <goal name="cnot&#39;vc.11.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="cnot&#39;vc.11.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="2.907516"/></proof>
    <proof prover="1"><result status="valid" time="4.073413" steps="1108505"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="cnot&#39;vc.11.1" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="1.812323"/></proof>
   <proof prover="4"><result status="valid" time="4.080442" steps="631008"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="crz&#39;vc" expl="VC for crz" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="crz&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.648915"/></proof>
  </goal>
  <goal name="crz&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.625243"/></proof>
  </goal>
  <goal name="crz&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.990132"/></proof>
  </goal>
  <goal name="crz&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.935589"/></proof>
  </goal>
  <goal name="crz&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="3.009093"/></proof>
  </goal>
  <goal name="crz&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.708689"/></proof>
  </goal>
  <goal name="crz&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.964256" steps="3526"/></proof>
  </goal>
  <goal name="crz&#39;vc.7" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="crz&#39;vc.7.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="(--)&#39;spec&#39;0">
    <goal name="crz&#39;vc.7.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="crz&#39;vc.7.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures6">
      <goal name="crz&#39;vc.7.0.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="crz&#39;vc.7.0.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="1.696771"/></proof>
    <proof prover="1"><result status="valid" time="3.839098" steps="1091514"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="crz&#39;vc.8" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="crz&#39;vc.8.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="(--)&#39;spec">
    <goal name="crz&#39;vc.8.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="ang_add_eq">
     <goal name="crz&#39;vc.8.0.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.638823"/></proof>
     <proof prover="4"><result status="valid" time="2.087489" steps="640219"/></proof>
     </goal>
     <goal name="crz&#39;vc.8.0.0.1" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="Ensures1" arg2="with" arg3="k&#39;">
      <goal name="crz&#39;vc.8.0.0.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
      </transf>
      </goal>
      <goal name="crz&#39;vc.8.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="1.743552"/></proof>
      <proof prover="1"><result status="valid" time="2.388956" steps="1047578"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="crz&#39;vc.8.0.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="1.935522"/></proof>
    <proof prover="4"><result status="valid" time="3.795709" steps="699289"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="place_hadamard&#39;vc" expl="VC for place_hadamard" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="place_hadamard&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.391167"/></proof>
  <proof prover="1"><result status="valid" time="2.982091" steps="955468"/></proof>
  </goal>
  <goal name="place_hadamard&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.777110"/></proof>
  <proof prover="1"><result status="valid" time="2.381652" steps="970850"/></proof>
  </goal>
  <goal name="place_hadamard&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.050742"/></proof>
  <proof prover="1"><result status="valid" time="2.215188" steps="970856"/></proof>
  </goal>
  <goal name="place_hadamard&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.021427"/></proof>
  <proof prover="1"><result status="valid" time="2.135363" steps="970856"/></proof>
  </goal>
  <goal name="place_hadamard&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.698991"/></proof>
  <proof prover="1"><result status="valid" time="3.922915" steps="1157958"/></proof>
  </goal>
  <goal name="place_hadamard&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.729460"/></proof>
  <proof prover="1"><result status="valid" time="4.061990" steps="1159200"/></proof>
  </goal>
  <goal name="place_hadamard&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.925404" steps="3484"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
