;; produced by cvc4_17.drv ;;
(set-logic ALL_SUPPORTED)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: real arithmetic
;;; SMT-LIB2: integer arithmetic
(declare-sort uni 0)

(declare-sort ty 0)

;; sort
(declare-fun sort (ty
  uni) Bool)

;; witness
(declare-fun witness (ty) uni)

;; witness_sort
(assert (forall ((a ty)) (sort a (witness a))))

;; int
(declare-fun int () ty)

;; real
(declare-fun real () ty)

(declare-sort string 0)

;; string
(declare-fun string1 () ty)

;; bool
(declare-fun bool () ty)

;; match_bool
(declare-fun match_bool (ty
  Bool
  uni
  uni) uni)

;; match_bool_sort
(assert
  (forall ((a ty))
    (forall ((x Bool) (x1 uni) (x2 uni)) (sort a (match_bool a x x1 x2)))))

;; match_bool_True
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni))
      (=> (sort a z) (= (match_bool a true z z1) z)))))

;; match_bool_False
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni))
      (=> (sort a z1) (= (match_bool a false z z1) z1)))))

;; index_bool
(declare-fun index_bool (Bool) Int)

;; index_bool_True
(assert (= (index_bool true) 0))

;; index_bool_False
(assert (= (index_bool false) 1))

;; bool_inversion
(assert (forall ((u Bool)) (or (= u true) (= u false))))

(declare-sort tuple0 0)

;; tuple0
(declare-fun tuple01 () ty)

;; Tuple0
(declare-fun Tuple0 () tuple0)

;; tuple0_inversion
(assert (forall ((u tuple0)) (= u Tuple0)))

;; infix ==
(declare-fun infix_eqeq (ty
  uni
  uni) Bool)

;; infix =='spec
(assert
  (forall ((a ty))
    (forall ((a1 uni) (b uni))
      (=> (sort a a1) (=> (sort a b) (= (infix_eqeq a a1 b) (= a1 b)))))))

;; assert_equal
(assert true)

;; goal_comm
(assert
  (forall ((a ty))
    (forall ((a1 uni) (b uni))
      (=> (sort a a1) (=> (sort a b) (=> (= a1 b) (= b a1)))))))

(declare-sort complex 0)

;; complex
(declare-fun complex1 () ty)

;; t2tb
(declare-fun t2tb (complex) uni)

;; t2tb_sort
(assert (forall ((x complex)) (sort complex1 (t2tb x))))

;; tb2t
(declare-fun tb2t (uni) complex)

;; BridgeL
(assert
  (forall ((i complex)) (! (= (tb2t (t2tb i)) i) :pattern ((t2tb i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=> (sort complex1 j) (= (t2tb (tb2t j)) j)) :pattern ((t2tb (tb2t j))) )))

;; teq'spec
(assert
  (forall ((x complex) (y complex))
    (= (infix_eqeq complex1 (t2tb x) (t2tb y)) (= x y))))

;; c_zero
(declare-fun c_zero () complex)

;; c_one
(declare-fun c_one () complex)

;; prefix -.
(declare-fun prefix_mndt (complex) complex)

;; infix +.
(declare-fun infix_pldt (complex
  complex) complex)

;; infix *.
(declare-fun infix_asdt (complex
  complex) complex)

;; inv
(declare-fun inv (complex) complex)

;; Assoc
(assert
  (forall ((x complex) (y complex) (z complex))
    (= (infix_pldt (infix_pldt x y) z) (infix_pldt x (infix_pldt y z)))))

;; Unit_def_l
(assert (forall ((x complex)) (= (infix_pldt c_zero x) x)))

;; Unit_def_r
(assert (forall ((x complex)) (= (infix_pldt x c_zero) x)))

;; Inv_def_l
(assert (forall ((x complex)) (= (infix_pldt (prefix_mndt x) x) c_zero)))

;; Inv_def_r
(assert (forall ((x complex)) (= (infix_pldt x (prefix_mndt x)) c_zero)))

;; Comm
(assert
  (forall ((x complex) (y complex)) (= (infix_pldt x y) (infix_pldt y x))))

;; Assoc
(assert
  (forall ((x complex) (y complex) (z complex))
    (= (infix_asdt (infix_asdt x y) z) (infix_asdt x (infix_asdt y z)))))

;; Mul_distr_l
(assert
  (forall ((x complex) (y complex) (z complex))
    (= (infix_asdt x (infix_pldt y z)) (infix_pldt
                                         (infix_asdt x y)
                                         (infix_asdt x z)))))

;; Mul_distr_r
(assert
  (forall ((x complex) (y complex) (z complex))
    (= (infix_asdt (infix_pldt y z) x) (infix_pldt
                                         (infix_asdt y x)
                                         (infix_asdt z x)))))

;; Comm
(assert
  (forall ((x complex) (y complex)) (= (infix_asdt x y) (infix_asdt y x))))

;; Unitary
(assert (forall ((x complex)) (= (infix_asdt c_one x) x)))

;; NonTrivialRing
(assert (not (= c_zero c_one)))

;; Inverse
(assert
  (forall ((x complex))
    (=> (not (= x c_zero)) (= (infix_asdt x (inv x)) c_one))))

;; infix -
(declare-fun infix_mn (complex
  complex) complex)

;; infix -'def
(assert
  (forall ((x complex) (y complex))
    (= (infix_mn x y) (infix_pldt x (prefix_mndt y)))))

;; infix /
(declare-fun infix_sl (complex
  complex) complex)

;; infix /'def
(assert
  (forall ((x complex) (y complex))
    (= (infix_sl x y) (infix_asdt x (inv y)))))

;; add_div
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (not (= z c_zero))
      (= (infix_sl (infix_pldt x y) z) (infix_pldt
                                         (infix_sl x z)
                                         (infix_sl y z))))))

;; sub_div
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (not (= z c_zero))
      (= (infix_sl (infix_mn x y) z) (infix_mn (infix_sl x z) (infix_sl y z))))))

;; neg_div
(assert
  (forall ((x complex) (y complex))
    (=>
      (not (= y c_zero))
      (= (infix_sl (prefix_mndt x) y) (prefix_mndt (infix_sl x y))))))

;; assoc_mul_div
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (not (= z c_zero))
      (= (infix_sl (infix_asdt x y) z) (infix_asdt x (infix_sl y z))))))

;; assoc_div_mul
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (and (not (= y c_zero)) (not (= z c_zero)))
      (= (infix_sl (infix_sl x y) z) (infix_sl x (infix_asdt y z))))))

;; assoc_div_div
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (and (not (= y c_zero)) (not (= z c_zero)))
      (= (infix_sl x (infix_sl y z)) (infix_sl (infix_asdt x z) y)))))

;; infix -.
(declare-fun infix_mndt (complex
  complex) complex)

;; infix -.'def
(assert
  (forall ((x complex) (y complex))
    (= (infix_mndt x y) (infix_pldt x (prefix_mndt y)))))

;; infix /.
(declare-fun infix_sldt (complex
  complex) complex)

;; infix /.'def
(assert
  (forall ((x complex) (y complex))
    (=> (not (= y c_zero)) (= (infix_sldt x y) (infix_asdt x (inv y))))))

;; infix /.'spec
(assert
  (forall ((x complex) (y complex))
    (=> (not (= y c_zero)) (= (infix_sldt x y) (infix_asdt x (inv y))))))

;; add_div
(assert
  (forall ((x Real) (y Real) (z Real))
    (=> (not (= z 0.0)) (= (/ (+ x y) z) (+ (/ x z) (/ y z))))))

;; sub_div
(assert
  (forall ((x Real) (y Real) (z Real))
    (=> (not (= z 0.0)) (= (/ (- x y) z) (- (/ x z) (/ y z))))))

;; neg_div
(assert
  (forall ((x Real) (y Real))
    (=> (not (= y 0.0)) (= (/ (- x) y) (- (/ x y))))))

;; assoc_mul_div
(assert
  (forall ((x Real) (y Real) (z Real))
    (=> (not (= z 0.0)) (= (/ (* x y) z) (* x (/ y z))))))

;; assoc_div_mul
(assert
  (forall ((x Real) (y Real) (z Real))
    (=>
      (and (not (= y 0.0)) (not (= z 0.0)))
      (= (/ (/ x y) z) (/ x (* y z))))))

;; assoc_div_div
(assert
  (forall ((x Real) (y Real) (z Real))
    (=>
      (and (not (= y 0.0)) (not (= z 0.0)))
      (= (/ x (/ y z)) (/ (* x z) y)))))

;; CompatOrderMult
(assert
  (forall ((x Real) (y Real) (z Real))
    (=> (<= x y) (=> (<= 0.0 z) (<= (* x z) (* y z))))))

;; infix /*
(declare-fun infix_slas (Real
  Real) Real)

;; infix /*'def
(assert
  (forall ((x Real) (y Real))
    (=> (not (= y 0.0)) (= (infix_slas x y) (/ x y)))))

;; t2tb
(declare-fun t2tb1 (Real) uni)

;; t2tb_sort
(assert (forall ((x Real)) (sort real (t2tb1 x))))

;; tb2t
(declare-fun tb2t1 (uni) Real)

;; BridgeL
(assert
  (forall ((i Real)) (! (= (tb2t1 (t2tb1 i)) i) :pattern ((t2tb1 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb1 (tb2t1 j)) j) :pattern ((t2tb1 (tb2t1 j))) )))

;; infix =*'spec
(assert
  (forall ((x Real) (y Real))
    (= (infix_eqeq real (t2tb1 x) (t2tb1 y)) (= x y))))

;; infix <>*
(declare-fun infix_lsgtas (Real
  Real) Bool)

;; infix <>*'def
(assert
  (forall ((x Real) (y Real))
    (= (infix_lsgtas x y) (not (infix_eqeq real (t2tb1 x) (t2tb1 y))))))

;; infix <>*'spec
(assert (forall ((x Real) (y Real)) (= (infix_lsgtas x y) (not (= x y)))))

;; infix <*
(declare-fun infix_lsas (Real
  Real) Bool)

;; infix <*'def
(assert
  (forall ((x Real) (y Real))
    (= (infix_lsas x y) (and (<= x y) (infix_lsgtas x y)))))

;; CompatOrderMult
(assert
  (forall ((x Int) (y Int) (z Int))
    (=> (<= x y) (=> (<= 0 z) (<= (* x z) (* y z))))))

;; from_int
(declare-fun from_int (Int) Real)

;; from_int'spec
(assert (forall ((x Int)) (= (from_int x) (to_real x))))

;; Zero
(assert (= (from_int 0) 0.0))

;; Add
(assert
  (forall ((x Int) (y Int))
    (= (from_int (+ x y)) (+ (from_int x) (from_int y)))))

;; One
(assert (= (from_int 1) 1.0))

;; Sub
(assert
  (forall ((x Int) (y Int))
    (= (from_int (- x y)) (- (from_int x) (from_int y)))))

;; mul_pos
(assert
  (forall ((x Int) (y Int))
    (=> (<= 0 y) (= (from_int (* x y)) (* (from_int x) (from_int y))))))

;; mul
(assert
  (forall ((x Int) (y Int))
    (=> (<= 0 y) (= (from_int (* x y)) (* (from_int x) (from_int y))))))

;; mul_rev
(assert
  (forall ((x Int) (y Int))
    (=> (<= 0 y) (= (* (from_int x) (from_int y)) (from_int (* x y))))))

;; neg
(assert (forall ((x Int)) (= (from_int (- x)) (- (from_int x)))))

;; injective
(assert
  (forall ((x Int) (y Int)) (=> (= (from_int x) (from_int y)) (= x y))))

;; Monotonic
(assert
  (forall ((x Int) (y Int)) (=> (<= x y) (<= (from_int x) (from_int y)))))

;; positive_inv
(assert
  (forall ((x Real))
    (=> (infix_lsas 0.0 x) (infix_lsas 0.0 (infix_slas 1.0 x)))))

;; r_zeroLessOne
(assert (<= 0.0 1.0))

;; r_compatOrderAdd
(assert
  (forall ((x Real) (y Real) (z Real)) (=> (<= x y) (<= (+ x z) (+ y z)))))

;; r_compatOrderMult
(assert
  (forall ((x Real) (y Real) (z Real))
    (=> (<= x y) (=> (<= 0.0 z) (<= (* x z) (* y z))))))

;; inv_order
(assert
  (forall ((a Real) (b Real))
    (=>
      (infix_lsas 0.0 a)
      (=> (infix_lsas 0.0 b) (=> (<= a b) (<= (/ 1.0 b) (/ 1.0 a)))))))

;; inv_strict_order
(assert
  (forall ((a Real) (b Real))
    (=>
      (infix_lsas 0.0 a)
      (=>
        (infix_lsas 0.0 b)
        (=> (infix_lsas a b) (infix_lsas (/ 1.0 b) (/ 1.0 a)))))))

;; invol_neg
(assert (forall ((a complex)) (= (prefix_mndt (prefix_mndt a)) a)))

;; injective_neg
(assert
  (forall ((a complex) (b complex))
    (=> (= (prefix_mndt a) (prefix_mndt b)) (= a b))))

;; find_opposite
(assert
  (forall ((a complex) (b complex)) (=> (= (infix_mndt a b) c_zero) (= a b))))

;; div_as_mult_inv
(assert
  (forall ((a complex) (b complex))
    (=>
      (not (= a c_zero))
      (= (infix_sldt b a) (infix_asdt b (infix_sldt c_one a))))))

;; add_opposite
(assert (forall ((a complex)) (= (infix_pldt a (prefix_mndt a)) c_zero)))

;; opposite
(assert (forall ((a complex)) (= (infix_mndt a a) c_zero)))

;; mult_num
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (not (= c c_zero))
      (= (infix_sldt (infix_asdt a b) c) (infix_asdt a (infix_sldt b c))))))

;; div_rev
(assert
  (forall ((a complex) (b complex))
    (=>
      (not (= b c_zero))
      (= (infix_asdt a (infix_sldt c_one b)) (infix_sldt a b)))))

;; mult_div_num
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (not (= c c_zero))
      (= (infix_asdt (infix_sldt a c) b) (infix_sldt (infix_asdt a b) c)))))

;; mult_denom
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (not (= c c_zero))
      (=>
        (not (= b c_zero))
        (= (infix_sldt a (infix_asdt b c)) (infix_asdt
                                             (infix_sldt a b)
                                             (infix_sldt c_one c)))))))

;; mult_simpl
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (not (= c c_zero))
      (=>
        (not (= b c_zero))
        (= (infix_sldt (infix_asdt a b) (infix_asdt c b)) (infix_sldt a c))))))

;; dic_simpl
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (not (= c c_zero))
      (=>
        (not (= b c_zero))
        (= (infix_asdt (infix_sldt a (infix_asdt c b)) b) (infix_sldt a c))))))

;; simpl_with_c_one
(assert
  (forall ((a complex) (b complex))
    (=>
      (not (= a c_zero))
      (=>
        (not (= b c_zero))
        (= (infix_asdt (infix_sldt a b) (infix_sldt c_one a)) (infix_sldt
                                                                c_one
                                                                b))))))

;; add_op
(assert
  (forall ((a1 complex) (a2 complex))
    (=> (= a1 (prefix_mndt a2)) (= (infix_pldt a1 a2) c_zero))))

;; mult_eq_t
(assert
  (forall ((a1 complex) (a2 complex) (b1 complex) (b2 complex))
    (=> (= a1 a2) (=> (= b1 b2) (= (infix_asdt a1 b1) (infix_asdt a2 b2))))))

;; mult_eq_t_rev
(assert
  (forall ((a1 complex) (a2 complex) (b1 complex) (b2 complex))
    (=> (= a1 a2) (=> (= b1 b2) (= (infix_asdt a1 b1) (infix_asdt b2 a2))))))

;; mult_comm
(assert
  (forall ((a complex) (b complex)) (= (infix_asdt a b) (infix_asdt b a))))

;; mult_assoc
(assert
  (forall ((a complex) (b complex) (c complex))
    (= (infix_asdt (infix_asdt a b) c) (infix_asdt a (infix_asdt b c)))))

;; mult_abc_to_acb
(assert
  (forall ((a complex) (b complex) (c complex))
    (= (infix_asdt (infix_asdt a b) c) (infix_asdt (infix_asdt a c) b))))

;; zero_mult_t
(assert
  (forall ((a1 complex) (a2 complex))
    (=> (= a1 c_zero) (= (infix_asdt a1 a2) c_zero))))

;; mult_zero_t
(assert
  (forall ((a1 complex) (a2 complex))
    (=> (= a1 c_zero) (= (infix_asdt a2 a1) c_zero))))

;; mult_one_t
(assert
  (forall ((a1 complex) (a2 complex))
    (=> (= a2 c_one) (= (infix_asdt a1 a2) a1))))

;; add_eq_t
(assert
  (forall ((a1 complex) (a2 complex) (b1 complex) (b2 complex))
    (=> (= a1 a2) (=> (= b1 b2) (= (infix_pldt a1 b1) (infix_pldt a2 b2))))))

;; add_eq_t_rev
(assert
  (forall ((a1 complex) (a2 complex) (b1 complex) (b2 complex))
    (=> (= a1 a2) (=> (= b1 b2) (= (infix_pldt a1 b1) (infix_pldt b2 a2))))))

;; substr_eq_t
(assert
  (forall ((a1 complex) (a2 complex) (b1 complex) (b2 complex))
    (=> (= a1 a2) (=> (= b1 b2) (= (infix_mndt a1 b1) (infix_mndt a2 b2))))))

;; im
(declare-fun im () complex)

;; im_Def
(assert (= (infix_asdt im im) (prefix_mndt c_one)))

;; r_to_c
(declare-fun r_to_c (Real) complex)

;; r_to_c_zero
(assert (= (r_to_c 0.0) c_zero))

;; r_to_c_one
(assert (= (r_to_c 1.0) c_one))

;; r_to_c_add
(assert
  (forall ((i Real) (j Real))
    (= (infix_pldt (r_to_c i) (r_to_c j)) (r_to_c (+ i j)))))

;; r_to_c_add_rev
(assert
  (forall ((i Real) (j Real))
    (= (r_to_c (+ i j)) (infix_pldt (r_to_c i) (r_to_c j)))))

;; r_to_c_opp
(assert (forall ((i Real)) (= (r_to_c (- i)) (prefix_mndt (r_to_c i)))))

;; r_to_c_div
(assert
  (forall ((i Real) (j Real))
    (=>
      (not (= j 0.0))
      (= (r_to_c (infix_slas i j)) (infix_sldt (r_to_c i) (r_to_c j))))))

;; r_to_c_mult
(assert
  (forall ((i Real) (j Real))
    (= (infix_asdt (r_to_c i) (r_to_c j)) (r_to_c (* i j)))))

;; r_to_c_mult_rev
(assert
  (forall ((i Real) (j Real))
    (= (r_to_c (* i j)) (infix_asdt (r_to_c i) (r_to_c j)))))

;; r_to_c_sub
(assert
  (forall ((i Real) (j Real))
    (= (infix_mndt (r_to_c i) (r_to_c j)) (r_to_c (- i j)))))

;; real_part
(declare-fun real_part (complex) Real)

;; im_part
(declare-fun im_part (complex) Real)

;; Real_part_add
(assert
  (forall ((i complex) (j complex))
    (= (real_part (infix_pldt i j)) (+ (real_part i) (real_part j)))))

;; Im_part_add
(assert
  (forall ((i complex) (j complex))
    (= (im_part (infix_pldt i j)) (+ (im_part i) (im_part j)))))

;; Real_part_opposite
(assert
  (forall ((i complex)) (= (real_part (prefix_mndt i)) (- (real_part i)))))

;; Im_part_opposite
(assert (forall ((i complex)) (= (im_part (prefix_mndt i)) (- (im_part i)))))

;; Complex_decomp
(assert
  (forall ((i complex))
    (= i (infix_pldt
           (r_to_c (real_part i))
           (infix_asdt im (r_to_c (im_part i)))))))

;; Unic_decomp
(assert
  (forall ((i complex))
    (forall ((x Real) (y Real))
      (=>
        (= i (infix_pldt (r_to_c x) (infix_asdt im (r_to_c y))))
        (and (= x (real_part i)) (= y (im_part i)))))))

;; real_
(declare-fun real_ (complex) Bool)

;; real_'def
(assert
  (forall ((x complex))
    (= (real_ x) (infix_eqeq real (t2tb1 (im_part x)) (t2tb1 0.0)))))

;; pure_im_
(declare-fun pure_im_ (complex) Bool)

;; pure_im_'def
(assert
  (forall ((x complex))
    (= (pure_im_ x) (infix_eqeq real (t2tb1 (real_part x)) (t2tb1 0.0)))))

;; unic_decomp
(assert
  (forall ((i complex) (x Real) (y Real))
    (=>
      (= i (infix_pldt (r_to_c x) (infix_asdt im (r_to_c y))))
      (and (= x (real_part i)) (= y (im_part i))))))

;; r_to_c_real
(assert (forall ((x complex)) (=> (real_ x) (= x (r_to_c (real_part x))))))

;; real_r_to_c
(assert (forall ((x Real)) (real_ (r_to_c x))))

;; r_to_c_pure_im
(assert
  (forall ((x complex))
    (=> (pure_im_ x) (= x (infix_asdt im (r_to_c (im_part x)))))))

;; decomp_mult
(assert
  (forall ((a complex) (b complex))
    (= (infix_asdt a b) (infix_pldt
                          (infix_mndt
                            (infix_asdt
                              (r_to_c (real_part a))
                              (r_to_c (real_part b)))
                            (infix_asdt
                              (r_to_c (im_part a))
                              (r_to_c (im_part b))))
                          (infix_asdt
                            im
                            (infix_pldt
                              (infix_asdt
                                (r_to_c (real_part a))
                                (r_to_c (im_part b)))
                              (infix_asdt
                                (r_to_c (real_part b))
                                (r_to_c (im_part a)))))))))

;; t_real_part
(declare-fun t_real_part (complex) complex)

;; t_real_part'def
(assert (forall ((x complex)) (= (t_real_part x) (r_to_c (real_part x)))))

;; t_real_part'spec
(assert (forall ((x complex)) (real_ (t_real_part x))))

;; t_real_part_inv
(assert
  (forall ((x complex))
    (= (t_real_part (prefix_mndt x)) (prefix_mndt (t_real_part x)))))

;; t_im_part
(declare-fun t_im_part (complex) complex)

;; t_im_part'def
(assert (forall ((x complex)) (= (t_im_part x) (r_to_c (im_part x)))))

;; t_im_part'spec
(assert (forall ((x complex)) (real_ (t_im_part x))))

;; t_im_part_inv
(assert
  (forall ((x complex))
    (= (t_im_part (prefix_mndt x)) (prefix_mndt (t_im_part x)))))

;; decomp_mult_as_reals
(assert
  (forall ((a complex) (b complex))
    (= (infix_asdt a b) (infix_pldt
                          (infix_mndt
                            (infix_asdt (t_real_part a) (t_real_part b))
                            (infix_asdt (t_im_part a) (t_im_part b)))
                          (infix_asdt
                            im
                            (infix_pldt
                              (infix_asdt (t_real_part a) (t_im_part b))
                              (infix_asdt (t_real_part b) (t_im_part a))))))))

;; decomp_mult_real_part
(assert
  (forall ((a complex) (b complex))
    (= (real_part (infix_asdt a b)) (- (* (real_part a) (real_part b)) (* 
    (im_part
      a) (im_part b))))))

;; decomp_mult_im_part
(assert
  (forall ((a complex) (b complex))
    (= (im_part (infix_asdt a b)) (+ (* (real_part a) (im_part b)) (* 
    (real_part
      b) (im_part a))))))

;; t_mult_real
(assert
  (forall ((a complex) (b complex))
    (= (t_real_part (infix_asdt a b)) (infix_mndt
                                        (infix_asdt
                                          (t_real_part a)
                                          (t_real_part b))
                                        (infix_asdt
                                          (t_im_part a)
                                          (t_im_part b))))))

;; t_mult_im
(assert
  (forall ((a complex) (b complex))
    (= (t_im_part (infix_asdt a b)) (infix_pldt
                                      (infix_asdt
                                        (t_real_part a)
                                        (t_im_part b))
                                      (infix_asdt
                                        (t_im_part a)
                                        (t_real_part b))))))

;; mult_real_real
(assert
  (forall ((a complex) (b complex))
    (=>
      (real_ a)
      (=>
        (real_ b)
        (and
          (and
            (= (infix_asdt a b) (infix_asdt
                                  (r_to_c (real_part a))
                                  (r_to_c (real_part b))))
            (= (infix_asdt (r_to_c (real_part a)) (r_to_c (real_part b))) 
            (r_to_c
              (* (real_part a) (real_part b)))))
          (and
            (= (real_part (infix_asdt a b)) (* (real_part a) (real_part b)))
            (= (im_part (infix_asdt a b)) 0.0)))))))

;; complex_squared
(assert
  (forall ((a complex))
    (and
      (= (infix_asdt a a) (infix_pldt
                            (infix_mndt
                              (infix_asdt (t_real_part a) (t_real_part a))
                              (infix_asdt (t_im_part a) (t_im_part a)))
                            (infix_asdt
                              (infix_asdt
                                (infix_asdt im (infix_pldt c_one c_one))
                                (t_real_part a))
                              (t_im_part a))))
      (and
        (= (t_real_part (infix_asdt a a)) (infix_mndt
                                            (infix_asdt
                                              (t_real_part a)
                                              (t_real_part a))
                                            (infix_asdt
                                              (t_im_part a)
                                              (t_im_part a))))
        (= (t_im_part (infix_asdt a a)) (infix_asdt
                                          (infix_asdt
                                            (infix_pldt c_one c_one)
                                            (t_real_part a))
                                          (t_im_part a)))))))

;; complex_real_squared
(assert
  (forall ((a complex))
    (=>
      (real_ a)
      (= (infix_asdt a a) (infix_asdt (t_real_part a) (t_real_part a))))))

;; decomp_div
(assert
  (forall ((a complex) (b complex))
    (=>
      (not (= b c_zero))
      (= (infix_sldt a b) (infix_pldt
                            (infix_sldt
                              (t_real_part (infix_asdt a b))
                              (infix_asdt b b))
                            (infix_asdt
                              im
                              (infix_sldt
                                (t_im_part (infix_asdt a b))
                                (infix_asdt b b))))))))

;; decomp_div_real
(assert
  (forall ((a complex) (b complex))
    (=>
      (real_ b)
      (=>
        (not (= b c_zero))
        (= (infix_sldt a b) (infix_pldt
                              (infix_sldt
                                (infix_asdt (t_real_part a) b)
                                (infix_asdt b b))
                              (infix_asdt
                                im
                                (infix_sldt
                                  (infix_asdt (t_im_part a) b)
                                  (infix_asdt b b)))))))))

;; complex_prod_fact
(assert
  (forall ((a complex) (b complex))
    (= (infix_asdt a b) (infix_pldt
                          (infix_asdt (r_to_c (real_part a)) b)
                          (infix_asdt (infix_asdt im (r_to_c (im_part a))) b)))))

;; non_zero_prod_pre
(assert
  (forall ((a complex) (b complex))
    (=>
      (not (= a c_zero))
      (=>
        (= (infix_asdt a b) c_zero)
        (and (= (im_part b) (real_part b)) (= (real_part b) 0.0))))))

;; non_zero_prod
(assert
  (forall ((a complex) (b complex))
    (=>
      (not (= a c_zero))
      (=> (not (= b c_zero)) (not (= (infix_asdt a b) c_zero))))))

;; minus_c_one
(assert
  (forall ((a complex))
    (= (prefix_mndt a) (infix_asdt (prefix_mndt c_one) a))))

;; mult_neg_l
(assert
  (forall ((a complex) (b complex))
    (= (infix_asdt (prefix_mndt a) b) (prefix_mndt (infix_asdt a b)))))

;; mult_neg_r
(assert
  (forall ((a complex) (b complex))
    (= (infix_asdt a (prefix_mndt b)) (prefix_mndt (infix_asdt a b)))))

;; neg_neg_out
(assert (forall ((a complex)) (= (prefix_mndt (prefix_mndt a)) a)))

;; div_neg_l
(assert
  (forall ((a complex) (b complex))
    (=>
      (not (= b c_zero))
      (= (infix_sldt (prefix_mndt a) b) (prefix_mndt (infix_sldt a b))))))

;; eq_to_real
(assert
  (forall ((a complex) (b complex))
    (=>
      (real_ a)
      (=> (real_ b) (=> (= a b) (= (real_part a) (real_part b)))))))

;; eq_by_real
(assert
  (forall ((a complex) (b complex))
    (=>
      (real_ a)
      (=> (real_ b) (=> (= (real_part a) (real_part b)) (= a b))))))

;; div_neg_r
(assert
  (forall ((a complex) (b complex))
    (=>
      (not (= b c_zero))
      (= (infix_sldt a (prefix_mndt b)) (prefix_mndt (infix_sldt a b))))))

;; invadd
(assert
  (forall ((i complex))
    (= (prefix_mndt i) (infix_asdt (prefix_mndt c_one) i))))

;; noc_zeroAdd
(assert
  (forall ((x complex) (y complex))
    (=> (not (= x c_zero)) (not (= (infix_pldt x y) y)))))

;; Absorbing_zero
(assert
  (forall ((a complex) (b complex))
    (= (= (infix_asdt a b) c_zero) (=> (not (= a c_zero)) (= b c_zero)))))

;; real_part_add
(assert
  (forall ((i complex) (j complex))
    (= (real_part (infix_pldt i j)) (+ (real_part i) (real_part j)))))

;; mult_im_rev
(assert (forall ((a complex)) (= (infix_asdt a im) (infix_asdt im a))))

;; im_im_elim
(assert
  (forall ((a complex))
    (= (infix_asdt im (infix_asdt im a)) (prefix_mndt a))))

;; im_im_fact
(assert
  (forall ((a complex) (b complex))
    (= (infix_asdt (infix_asdt im a) (infix_asdt im b)) (prefix_mndt
                                                          (infix_asdt a b)))))

;; minus_minus_fact
(assert
  (forall ((a complex) (b complex))
    (= (infix_asdt (prefix_mndt a) (prefix_mndt b)) (infix_asdt a b))))

;; minus_minus_add
(assert
  (forall ((a complex) (b complex))
    (= (infix_pldt (prefix_mndt a) (prefix_mndt b)) (prefix_mndt
                                                      (infix_pldt a b)))))

;; minus_minus_add_rev
(assert
  (forall ((a complex) (b complex))
    (= (prefix_mndt (infix_pldt a b)) (infix_pldt
                                        (prefix_mndt a)
                                        (prefix_mndt b)))))

;; minus_out_left
(assert
  (forall ((a complex) (b complex))
    (= (infix_asdt (prefix_mndt a) b) (prefix_mndt (infix_asdt a b)))))

;; minus_out_right
(assert
  (forall ((a complex) (b complex))
    (= (infix_asdt a (prefix_mndt b)) (prefix_mndt (infix_asdt a b)))))

;; minus_in_left
(assert
  (forall ((a complex) (b complex))
    (= (prefix_mndt (infix_asdt a b)) (infix_asdt (prefix_mndt a) b))))

;; minus_in_right
(assert
  (forall ((a complex) (b complex))
    (= (prefix_mndt (infix_asdt a b)) (infix_asdt a (prefix_mndt b)))))

;; minus_add_out_left
(assert
  (forall ((a complex) (b complex))
    (= (infix_pldt (prefix_mndt a) b) (prefix_mndt
                                        (infix_pldt a (prefix_mndt b))))))

;; minus_as_add_opp
(assert
  (forall ((a complex) (b complex))
    (= (infix_mndt a b) (infix_pldt a (prefix_mndt b)))))

;; minus_add_out_right
(assert
  (forall ((a complex) (b complex))
    (= (infix_pldt a (prefix_mndt b)) (prefix_mndt
                                        (infix_pldt (prefix_mndt a) b)))))

;; minus_add_in
(assert
  (forall ((a complex) (b complex))
    (= (prefix_mndt (infix_pldt a b)) (infix_pldt
                                        (prefix_mndt a)
                                        (prefix_mndt b)))))

;; minus_add_out
(assert
  (forall ((a complex) (b complex))
    (= (infix_pldt (prefix_mndt a) (prefix_mndt b)) (prefix_mndt
                                                      (infix_pldt a b)))))

;; minus_eq
(assert
  (forall ((a complex) (b complex))
    (=> (= a b) (= (prefix_mndt a) (prefix_mndt b)))))

;; im_out_right
(assert
  (forall ((a complex) (b complex))
    (= (infix_asdt (infix_asdt im a) b) (infix_asdt im (infix_asdt a b)))))

;; im_out_left
(assert
  (forall ((a complex) (b complex))
    (= (infix_asdt a (infix_asdt im b)) (infix_asdt im (infix_asdt a b)))))

;; im_part_add
(assert
  (forall ((i complex) (j complex))
    (= (im_part (infix_pldt i j)) (+ (im_part i) (im_part j)))))

;; injective_real_part
(assert
  (forall ((i complex) (j complex))
    (=> (not (= (real_part i) (real_part j))) (not (= i j)))))

;; injective_im_part
(assert
  (forall ((i complex) (j complex))
    (=> (not (= (im_part i) (im_part j))) (not (= i j)))))

;; minus_distr_four
(assert
  (forall ((a complex) (b complex) (c complex) (d complex))
    (= (infix_pldt
         (infix_asdt a b)
         (infix_asdt (infix_asdt (prefix_mndt b) c) d)) (infix_asdt
                                                          (infix_mndt
                                                            a
                                                            (infix_asdt c d))
                                                          b))))

;; complex_decomp
(assert
  (forall ((i complex))
    (= i (infix_pldt
           (r_to_c (real_part i))
           (infix_asdt im (r_to_c (im_part i)))))))

;; simpl_frac
(assert
  (forall ((x complex) (y complex))
    (=> (not (= y c_zero)) (= (infix_sldt (infix_asdt x y) y) x))))

;; simpl_frac_
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (not (= y c_zero))
      (=>
        (not (= z c_zero))
        (= (infix_sldt (infix_asdt x y) (infix_asdt z y)) (infix_sldt x z))))))

;; fact_frac
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (not (= z c_zero))
      (= (infix_sldt (infix_asdt x y) z) (infix_asdt x (infix_sldt y z))))))

;; fact_frac_rev
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (not (= z c_zero))
      (= (infix_asdt x (infix_sldt y z)) (infix_sldt (infix_asdt x y) z)))))

;; mult_sym
(assert
  (forall ((x complex) (y complex)) (= (infix_asdt x y) (infix_asdt y x))))

;; inv_mult
(assert
  (forall ((x complex) (y complex))
    (=>
      (not (= x c_zero))
      (=>
        (not (= y c_zero))
        (= (infix_asdt (infix_sldt c_one x) (infix_sldt c_one y)) (infix_sldt
                                                                    c_one
                                                                    (infix_asdt
                                                                    x
                                                                    y)))))))

;; div_div
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (not (= y c_zero))
      (=>
        (not (= z c_zero))
        (= (infix_sldt (infix_sldt x y) z) (infix_sldt x (infix_asdt y z)))))))

;; div_div_rev
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (not (= y c_zero))
      (=>
        (not (= z c_zero))
        (= (infix_sldt x (infix_asdt y z)) (infix_sldt (infix_sldt x y) z))))))

;; involutive_inv
(assert
  (forall ((a complex))
    (=> (not (= a c_zero)) (= (infix_sldt c_one (infix_sldt c_one a)) a))))

;; twice
(assert
  (forall ((i complex))
    (= (infix_asdt (infix_pldt c_one c_one) i) (infix_pldt i i))))

;; twice_half
(assert
  (= (infix_asdt
       (infix_pldt c_one c_one)
       (infix_sldt c_one (infix_pldt c_one c_one))) c_one))

;; half_plus_half
(assert
  (forall ((i complex))
    (= (infix_pldt
         (infix_sldt i (infix_pldt c_one c_one))
         (infix_sldt i (infix_pldt c_one c_one))) i)))

;; decomp_inv_real
(assert
  (forall ((a complex))
    (=>
      (real_ a)
      (=>
        (not (= a c_zero))
        (and
          (= (infix_sldt c_one a) (infix_sldt c_one (t_real_part a)))
          (and
            (real_ (infix_sldt c_one a))
            (and
              (= (t_real_part (infix_sldt c_one a)) (infix_sldt
                                                      c_one
                                                      (t_real_part a)))
              (= (real_part (infix_sldt c_one a)) (infix_slas
                                                    1.0
                                                    (real_part a))))))))))

;; mult_div_comm
(assert
  (forall ((x complex) (y complex) (z complex) (t complex))
    (=>
      (not (= z c_zero))
      (=>
        (not (= t c_zero))
        (= (infix_sldt (infix_asdt x y) (infix_asdt z t)) (infix_asdt
                                                            (infix_sldt x z)
                                                            (infix_sldt y t)))))))

;; mult_div_comm_rev
(assert
  (forall ((x complex) (y complex) (z complex) (t complex))
    (=>
      (not (= z c_zero))
      (=>
        (not (= t c_zero))
        (= (infix_asdt (infix_sldt x z) (infix_sldt y t)) (infix_sldt
                                                            (infix_asdt x y)
                                                            (infix_asdt z t)))))))

;; infix <=.
(declare-fun infix_lseqdt (complex
  complex) Bool)

;; infix <=.'def
(assert
  (forall ((x complex) (y complex))
    (=
      (infix_lseqdt x y)
      (or
        (and (real_ x) (and (real_ y) (<= (real_part x) (real_part y))))
        (infix_eqeq complex1 (t2tb x) (t2tb y))))))

;; infix <.
(declare-fun infix_lsdt (complex
  complex) Bool)

;; infix <.'def
(assert
  (forall ((x complex) (y complex))
    (=
      (infix_lsdt x y)
      (and (infix_lseqdt x y) (not (infix_eqeq complex1 (t2tb x) (t2tb y)))))))

;; infix >.
(declare-fun infix_gtdt (complex
  complex) Bool)

;; infix >.'def
(assert
  (forall ((x complex) (y complex))
    (=
      (infix_gtdt x y)
      (and (infix_lseqdt y x) (not (infix_eqeq complex1 (t2tb x) (t2tb y)))))))

;; leq_left_real
(assert
  (forall ((a complex) (b complex))
    (=> (infix_lseqdt a b) (=> (real_ a) (real_ b)))))

;; leq_right_real
(assert
  (forall ((a complex) (b complex))
    (=> (infix_lseqdt a b) (=> (real_ b) (real_ a)))))

;; inf_left_real
(assert (forall ((a complex) (b complex)) (=> (infix_lsdt a b) (real_ a))))

;; inf_right_real
(assert (forall ((a complex) (b complex)) (=> (infix_lsdt a b) (real_ b))))

;; inf_from_real
(assert
  (forall ((a complex) (b complex))
    (=>
      (real_ a)
      (=>
        (real_ b)
        (=> (infix_lsas (real_part a) (real_part b)) (infix_lsdt a b))))))

;; inf_to_real
(assert
  (forall ((a complex) (b complex))
    (=> (infix_lsdt a b) (infix_lsas (real_part a) (real_part b)))))

;; leq_left_not_real_a
(assert
  (forall ((a complex) (b complex))
    (=> (infix_lseqdt a b) (=> (not (real_ a)) (= a b)))))

;; leq_left_not_real_b
(assert
  (forall ((a complex) (b complex))
    (=> (infix_lseqdt a b) (=> (not (real_ b)) (= a b)))))

;; Refl
(assert (forall ((x complex)) (infix_lseqdt x x)))

;; Trans
(assert
  (forall ((x complex) (y complex) (z complex))
    (=> (infix_lseqdt x y) (=> (infix_lseqdt y z) (infix_lseqdt x z)))))

;; Antisymm
(assert
  (forall ((x complex) (y complex))
    (=> (infix_lseqdt x y) (=> (infix_lseqdt y x) (= x y)))))

;; Refl
(assert (forall ((x complex)) (infix_lseqdt x x)))

;; Trans
(assert
  (forall ((x complex) (y complex) (z complex))
    (=> (infix_lseqdt y x) (=> (infix_lseqdt z y) (infix_lseqdt z x)))))

;; Antisymm
(assert
  (forall ((x complex) (y complex))
    (=> (infix_lseqdt y x) (=> (infix_lseqdt x y) (= x y)))))

;; Trans
(assert
  (forall ((x complex) (y complex) (z complex))
    (=> (infix_lsdt x y) (=> (infix_lsdt y z) (infix_lsdt x z)))))

;; Asymm
(assert
  (forall ((x complex) (y complex))
    (=> (infix_lsdt x y) (not (infix_lsdt y x)))))

;; Trans
(assert
  (forall ((x complex) (y complex) (z complex))
    (=> (infix_gtdt x y) (=> (infix_gtdt y z) (infix_gtdt x z)))))

;; Asymm
(assert
  (forall ((x complex) (y complex))
    (=> (infix_gtdt x y) (not (infix_gtdt y x)))))

;; r_to_c_inf
(assert
  (forall ((i Real) (j Real))
    (= (infix_lseqdt (r_to_c i) (r_to_c j)) (<= i j))))

;; reali_is_its_real_part
(assert (forall ((a complex)) (=> (real_ a) (= a (r_to_c (real_part a))))))

;; inf_from_r
(assert
  (forall ((a complex) (b complex))
    (=>
      (real_ a)
      (=> (real_ b) (=> (<= (real_part a) (real_part b)) (infix_lseqdt a b))))))

;; strict_inf_from_r
(assert
  (forall ((a complex) (b complex))
    (=>
      (real_ a)
      (=>
        (real_ b)
        (=> (infix_lsas (real_part a) (real_part b)) (infix_lsdt a b))))))

;; positive_inv_t
(assert
  (forall ((x complex))
    (=> (infix_lsdt c_zero x) (infix_lsdt c_zero (infix_sldt c_one x)))))

;; pi
(declare-fun pi1 () complex)

;; pi'def
(assert (infix_lsdt (r_to_c 3.0) pi1))

;; real_pi
(assert (real_ pi1))

;; pi_sup_one
(assert (infix_lsdt c_one pi1))

;; pi_sup_zero
(assert (infix_lsdt c_zero pi1))

;; compat_order_mult
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (infix_lseqdt x y)
      (=>
        (real_ x)
        (=>
          (real_ y)
          (=>
            (real_ z)
            (=>
              (infix_lseqdt c_zero z)
              (infix_lseqdt (infix_asdt x z) (infix_asdt y z)))))))))

;; compat_order_add
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (infix_lseqdt x y)
      (=>
        (real_ x)
        (=>
          (real_ y)
          (=> (real_ z) (infix_lseqdt (infix_pldt x z) (infix_pldt y z))))))))

;; compat_order_add_left
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (infix_lseqdt x y)
      (=>
        (real_ x)
        (=>
          (real_ y)
          (=> (real_ z) (infix_lseqdt (infix_pldt z x) (infix_pldt z y))))))))

;; compat_order_add_both
(assert
  (forall ((x complex) (y complex) (z complex) (t complex))
    (=>
      (infix_lseqdt x y)
      (=>
        (infix_lseqdt z t)
        (=>
          (real_ x)
          (=>
            (real_ y)
            (=>
              (real_ z)
              (=> (real_ t) (infix_lseqdt (infix_pldt z x) (infix_pldt t y))))))))))

;; compat_order_substr
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (infix_lseqdt x y)
      (=>
        (real_ x)
        (=>
          (real_ y)
          (=> (real_ z) (infix_lseqdt (infix_mndt x z) (infix_mndt y z))))))))

;; compat_inf_mult
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (infix_lsdt x y)
      (=>
        (real_ x)
        (=>
          (real_ y)
          (=>
            (real_ z)
            (=>
              (infix_lsdt c_zero z)
              (infix_lsdt (infix_asdt x z) (infix_asdt y z)))))))))

;; transitive_infeq
(assert
  (forall ((a complex) (b complex) (c complex))
    (=> (infix_lseqdt a b) (=> (infix_lseqdt b c) (infix_lseqdt a c)))))

;; transitive_infeq_inf
(assert
  (forall ((a complex) (b complex) (c complex))
    (=> (infix_lseqdt a b) (=> (infix_lsdt b c) (infix_lsdt a c)))))

;; transitive_inf_infeq
(assert
  (forall ((a complex) (b complex) (c complex))
    (=> (infix_lsdt a b) (=> (infix_lseqdt b c) (infix_lsdt a c)))))

;; transitive_inf
(assert
  (forall ((a complex) (b complex) (c complex))
    (=> (infix_lsdt a b) (=> (infix_lsdt b c) (infix_lsdt a c)))))

;; pi_sup_ttwo
(assert (infix_lsdt (infix_pldt c_one c_one) pi1))

;; transitive_leq_inv_r
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (real_ a)
      (=>
        (real_ b)
        (=>
          (real_ c)
          (=>
            (infix_lseqdt a b)
            (=>
              (infix_lseqdt b (infix_sldt c_one c))
              (=>
                (infix_lseqdt c_one c)
                (and (infix_lseqdt a b) (infix_lseqdt b c_one))))))))))

;; compat_inf_mult_left
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (infix_lsdt x y)
      (=>
        (real_ x)
        (=>
          (real_ y)
          (=>
            (real_ z)
            (=>
              (infix_lsdt c_zero z)
              (infix_lsdt (infix_asdt z x) (infix_asdt z y)))))))))

;; compat_inf_mult_both
(assert
  (forall ((x complex) (y complex) (z complex) (t complex))
    (=>
      (infix_lsdt x y)
      (=>
        (real_ x)
        (=>
          (real_ y)
          (=>
            (real_ z)
            (=>
              (and (infix_lsdt c_zero z) (infix_lsdt z t))
              (=>
                (infix_lsdt c_zero y)
                (infix_lsdt (infix_asdt z x) (infix_asdt t y))))))))))

;; compat_inf_add
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (infix_lsdt x y)
      (=>
        (real_ x)
        (=>
          (real_ y)
          (=> (real_ z) (infix_lsdt (infix_pldt x z) (infix_pldt y z))))))))

;; compat_inf_add_left
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (infix_lsdt x y)
      (=>
        (real_ x)
        (=>
          (real_ y)
          (=> (real_ z) (infix_lsdt (infix_pldt z x) (infix_pldt z y))))))))

;; compat_inf_add_both
(assert
  (forall ((x complex) (y complex) (z complex) (t complex))
    (=>
      (infix_lsdt x y)
      (=> (infix_lsdt z t) (infix_lsdt (infix_pldt x z) (infix_pldt y t))))))

;; compat_inf_substr
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (infix_lsdt x y)
      (=>
        (real_ x)
        (=>
          (real_ y)
          (=> (real_ z) (infix_lsdt (infix_mndt x z) (infix_mndt y z))))))))

;; real_inv
(assert
  (forall ((x complex))
    (=> (real_ x) (=> (not (= x c_zero)) (real_ (infix_sldt c_one x))))))

;; compat_order_mult_rev
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (real_ x)
      (=>
        (real_ y)
        (=>
          (real_ z)
          (=>
            (infix_lsdt c_zero z)
            (=>
              (infix_lseqdt (infix_asdt x z) (infix_asdt y z))
              (infix_lseqdt x y))))))))

;; compat_order_mult_left
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (infix_lseqdt x y)
      (=>
        (real_ x)
        (=>
          (real_ y)
          (=>
            (real_ z)
            (=>
              (infix_lseqdt c_zero z)
              (infix_lseqdt (infix_asdt z x) (infix_asdt z y)))))))))

;; strict_compat_order_mult
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (infix_lsdt x y)
      (=>
        (real_ x)
        (=>
          (real_ y)
          (=>
            (real_ z)
            (=>
              (infix_lsdt c_zero z)
              (infix_lsdt (infix_asdt x z) (infix_asdt y z)))))))))

;; strict_compat_order_mult_left
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (infix_lsdt x y)
      (=>
        (real_ x)
        (=>
          (real_ y)
          (=>
            (real_ z)
            (=>
              (infix_lsdt c_zero z)
              (infix_lsdt (infix_asdt z x) (infix_asdt z y)))))))))

;; complete_order_real
(assert
  (forall ((x complex) (y complex))
    (=>
      (real_ x)
      (=>
        (real_ y)
        (=> (not (= x y)) (=> (not (infix_lsdt x y)) (infix_lsdt y x)))))))

;; complete_order_real_
(assert
  (forall ((x complex) (y complex))
    (=>
      (real_ x)
      (=>
        (real_ y)
        (=> (not (infix_lsdt x y)) (=> (not (infix_lsdt y x)) (= y x)))))))

;; compat_order_mult_both
(assert
  (forall ((x complex) (y complex) (z complex) (t complex))
    (=>
      (and (infix_lseqdt c_zero x) (infix_lseqdt x y))
      (=>
        (and (infix_lseqdt c_zero z) (infix_lseqdt z t))
        (infix_lseqdt (infix_asdt z x) (infix_asdt t y))))))

;; inf_to_non_sup_eq
(assert
  (forall ((x complex) (y complex))
    (=>
      (real_ x)
      (=> (real_ y) (=> (infix_lsdt x y) (not (infix_lseqdt y x)))))))

;; sup_eq_to_non_inf
(assert
  (forall ((x complex) (y complex))
    (=>
      (real_ x)
      (=> (real_ y) (=> (infix_lseqdt y x) (not (infix_lsdt x y)))))))

;; sup_to_inf
(assert
  (forall ((x complex) (y complex))
    (=> (real_ x) (=> (real_ y) (=> (infix_gtdt x y) (infix_lsdt y x))))))

;; inf_to_sup
(assert
  (forall ((x complex) (y complex))
    (=> (real_ x) (=> (real_ y) (=> (infix_lsdt x y) (infix_gtdt y x))))))

;; sup_to_non_inf_eq
(assert
  (forall ((x complex) (y complex))
    (=>
      (real_ x)
      (=> (real_ y) (=> (infix_gtdt x y) (not (infix_lseqdt x y)))))))

;; inf_eq_to_non_sup
(assert
  (forall ((x complex) (y complex))
    (=>
      (real_ x)
      (=> (real_ y) (=> (infix_lseqdt x y) (not (infix_gtdt x y)))))))

;; non_inf_eq_to_sup
(assert
  (forall ((x complex) (y complex))
    (=>
      (real_ x)
      (=> (real_ y) (=> (not (infix_lseqdt x y)) (infix_gtdt x y))))))

;; non_sup_toinf_eq
(assert
  (forall ((x complex) (y complex))
    (=>
      (real_ x)
      (=> (real_ y) (=> (not (infix_gtdt x y)) (infix_lseqdt x y))))))

;; real_mult
(assert
  (forall ((x complex) (y complex))
    (=> (real_ x) (=> (real_ y) (real_ (infix_asdt x y))))))

;; real_add
(assert
  (forall ((x complex) (y complex))
    (=> (real_ x) (=> (real_ y) (real_ (infix_pldt x y))))))

;; real_substr
(assert
  (forall ((x complex) (y complex))
    (=> (real_ x) (=> (real_ y) (real_ (infix_mndt x y))))))

;; inv_pos
(assert
  (forall ((x complex))
    (=>
      (real_ x)
      (=> (infix_lsdt c_zero x) (infix_lsdt c_zero (infix_sldt c_one x))))))

;; lower_over_cons
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (infix_lsdt c_zero c)
      (=>
        (infix_lseqdt c_zero a)
        (=>
          (infix_lseqdt a b)
          (infix_lseqdt (infix_sldt a c) (infix_sldt b c)))))))

;; eq_to_leq_t
(assert
  (forall ((a complex) (b complex))
    (=> (real_ a) (=> (= a b) (infix_lseqdt a b)))))

;; real_minus
(assert (forall ((a complex)) (=> (real_ a) (real_ (prefix_mndt a)))))

;; compat_r_to_c_infeq
(assert
  (forall ((a Real) (b Real))
    (=> (<= a b) (infix_lseqdt (r_to_c a) (r_to_c b)))))

;; compat_r_to_c_inf
(assert
  (forall ((a Real) (b Real))
    (=> (infix_lsas a b) (infix_lsdt (r_to_c a) (r_to_c b)))))

;; compat_r_to_c_supeq
(assert
  (forall ((a Real) (b Real))
    (=> (<= b a) (infix_lseqdt (r_to_c b) (r_to_c a)))))

;; compat_r_to_c_sup
(assert
  (forall ((a Real) (b Real))
    (=> (infix_lsas b a) (infix_gtdt (r_to_c a) (r_to_c b)))))

;; unic_inv
(assert
  (forall ((i complex) (j complex))
    (=> (not (= i c_zero)) (=> (= (infix_asdt i j) c_one) (= j (inv i))))))

;; inf_eq_def
(assert
  (forall ((x complex) (y complex))
    (=
      (infix_lseqdt x y)
      (or
        (and (real_ x) (and (real_ y) (<= (real_part x) (real_part y))))
        (= x y)))))

;; inf_minus
(assert
  (forall ((x complex) (y complex))
    (=> (infix_lsdt x y) (infix_lsdt (prefix_mndt y) (prefix_mndt x)))))

;; absorbing_zero
(assert
  (forall ((a complex) (b complex))
    (=>
      (= (infix_asdt a b) c_zero)
      (and
        (=> (not (= a c_zero)) (= b c_zero))
        (=> (not (= b c_zero)) (= a c_zero))))))

;; inf_zero_inv
(assert
  (forall ((z complex))
    (=>
      (infix_lsdt c_zero z)
      (and
        (infix_lsdt c_zero (infix_sldt c_one z))
        (infix_lseqdt c_zero (infix_sldt c_one z))))))

;; mult_pos
(assert
  (forall ((x complex) (y complex))
    (=>
      (infix_lseqdt c_zero x)
      (=> (infix_lseqdt c_zero y) (infix_lseqdt c_zero (infix_asdt x y))))))

;; simpl_leq_mult_div
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (real_ a)
      (=>
        (infix_lsdt c_zero b)
        (=>
          (infix_lseqdt (infix_asdt a b) c)
          (infix_lseqdt a (infix_asdt (infix_sldt c_one b) c)))))))

;; mult_leq_c_one_leq
(assert
  (forall ((a complex) (b complex))
    (=>
      (infix_lseqdt c_zero a)
      (=>
        (and (infix_lseqdt c_zero b) (infix_lseqdt b c_one))
        (infix_lseqdt (infix_asdt a b) a)))))

;; mult_leq_c_one_leq_gen
(assert
  (forall ((a complex) (aqt complex) (b complex))
    (=>
      (infix_lseqdt c_zero a)
      (=>
        (and (infix_lseqdt c_zero b) (infix_lseqdt b c_one))
        (=> (= a aqt) (infix_lseqdt (infix_asdt a b) aqt))))))

;; mult_leq_c_one
(assert
  (forall ((a complex) (b complex))
    (=>
      (infix_lseqdt c_zero a)
      (=>
        (exists ((c complex))
          (and (infix_lseqdt a c) (= b (infix_sldt c_one c))))
        (=> (infix_lsdt c_zero b) (infix_lseqdt (infix_asdt a b) c_one))))))

;; mult_leq_c_one_expl
(assert
  (forall ((a complex) (b complex) (d complex))
    (=>
      (infix_lseqdt c_zero a)
      (=>
        (infix_lseqdt a d)
        (=>
          (infix_lsdt c_zero d)
          (=>
            (infix_lseqdt b (infix_sldt c_one d))
            (infix_lseqdt (infix_asdt a b) c_one)))))))

;; mult_leq_c_one_rev
(assert
  (forall ((a complex) (b complex))
    (=>
      (infix_lseqdt c_zero a)
      (=>
        (infix_lsdt c_zero b)
        (=>
          (infix_lseqdt (infix_asdt a b) c_one)
          (infix_lseqdt a (infix_sldt c_one b)))))))

;; simpl_leq_mult
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (infix_lsdt c_zero b)
      (=>
        (infix_lseqdt a c)
        (infix_lseqdt (infix_asdt a b) (infix_asdt c b))))))

;; simpl_leq_mult_inv
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (infix_lsdt c_zero a)
      (=>
        (infix_lsdt c_zero b)
        (=>
          (infix_lsdt c_zero c)
          (=>
            (infix_lseqdt a (infix_sldt c_one (infix_asdt b c)))
            (infix_lseqdt (infix_asdt a b) (infix_sldt c_one c))))))))

;; mult_to_div_leq
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (real_ a)
      (=>
        (infix_lsdt c_zero b)
        (=>
          (infix_lseqdt (infix_asdt a b) c)
          (infix_lseqdt a (infix_asdt (infix_sldt c_one b) c)))))))

;; mult_div
(assert
  (forall ((x complex) (y complex))
    (=>
      (infix_lseqdt c_zero x)
      (=> (infix_lsdt c_zero y) (infix_lseqdt c_zero (infix_sldt x y))))))

;; strict_mult_pos
(assert
  (forall ((x complex) (y complex))
    (=>
      (infix_lsdt c_zero x)
      (=> (infix_lsdt c_zero y) (infix_lsdt c_zero (infix_asdt x y))))))

;; rewrite_supeq
(assert true)

;; rewrite_sup
(assert
  (forall ((x complex) (y complex)) (=> (infix_lsdt x y) (infix_gtdt y x))))

;; inv_order_complex
(assert
  (forall ((a complex) (b complex))
    (=>
      (infix_lsdt c_zero a)
      (=>
        (infix_lsdt c_zero b)
        (=>
          (infix_lseqdt a b)
          (infix_lseqdt (infix_sldt c_one b) (infix_sldt c_one a)))))))

;; compat_inv_order
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (and (infix_lsdt c_zero a) (infix_lseqdt a b))
      (=>
        (infix_lseqdt c (infix_sldt c_one b))
        (infix_lseqdt c (infix_sldt c_one a))))))

;; leq_by_div_simpl
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (infix_lseqdt c_zero a)
      (=>
        (and (infix_lsdt c_zero b) (infix_lseqdt b c))
        (infix_lseqdt (infix_sldt a c) (infix_sldt a b))))))

;; leq_by_div
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (infix_lseqdt c_zero a)
      (=>
        (and (infix_lsdt c_zero b) (infix_lseqdt b c))
        (infix_lseqdt (infix_sldt a c) (infix_sldt a b))))))

;; strict_pos_div
(assert
  (forall ((x complex) (y complex))
    (=>
      (infix_lsdt c_zero x)
      (=> (infix_lsdt c_zero y) (infix_lsdt c_zero (infix_sldt x y))))))

;; inf_def
(assert
  (forall ((x complex) (y complex))
    (=
      (infix_lsdt x y)
      (and
        (real_ x)
        (and (real_ y) (infix_lsas (real_part x) (real_part y)))))))

;; sup_eq_def
(assert
  (forall ((x complex) (y complex))
    (=
      (infix_lseqdt y x)
      (or
        (and (real_ x) (and (real_ y) (<= (real_part y) (real_part x))))
        (= x y)))))

;; sup_def
(assert
  (forall ((x complex) (y complex))
    (=
      (infix_gtdt x y)
      (and
        (real_ x)
        (and (real_ y) (infix_lsas (real_part y) (real_part x)))))))

;; assoc_mult_div
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (not (= z c_zero))
      (= (infix_asdt x (infix_sldt y z)) (infix_sldt (infix_asdt x y) z)))))

;; assoc_mult_div_rev
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (not (= z c_zero))
      (= (infix_sldt (infix_asdt x y) z) (infix_asdt x (infix_sldt y z))))))

;; subst_zero
(assert (forall ((a complex)) (= (infix_mndt a c_zero) a)))

;; subst_zero_gen
(assert
  (forall ((a complex) (b complex)) (=> (= b c_zero) (= (infix_mndt a b) a))))

;; transitive_inf_inv_r
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (infix_lseqdt a b)
      (=>
        (infix_lseqdt b (infix_sldt c_one c))
        (=>
          (infix_lsdt c_one c)
          (and (infix_lseqdt a b) (infix_lsdt b c_one)))))))

;; infeq_scal_r
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (infix_lseqdt a c)
      (=>
        (infix_lseqdt c_zero b)
        (infix_lseqdt (infix_asdt a b) (infix_asdt c b))))))

;; infeq_scal_l
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (infix_lseqdt a c)
      (=>
        (infix_lseqdt c_zero b)
        (infix_lseqdt (infix_asdt b a) (infix_asdt b c))))))

;; transitive_supeq
(assert
  (forall ((a complex) (b complex) (c complex))
    (=> (infix_lseqdt b a) (=> (infix_lseqdt c b) (infix_lseqdt c a)))))

;; transitive_inf_l
(assert
  (forall ((a complex) (b complex) (c complex))
    (=> (infix_lsdt a b) (=> (infix_lseqdt b c) (infix_lsdt a c)))))

;; transitive_sup_l
(assert
  (forall ((a complex) (b complex) (c complex))
    (=> (infix_gtdt a b) (=> (infix_lseqdt c b) (infix_gtdt a c)))))

;; transitive_inf_r
(assert
  (forall ((a complex) (b complex) (c complex))
    (=> (infix_lseqdt a b) (=> (infix_lsdt b c) (infix_lsdt a c)))))

;; transitive_sup_r
(assert
  (forall ((a complex) (b complex) (c complex))
    (=> (infix_lseqdt b a) (=> (infix_gtdt b c) (infix_gtdt a c)))))

;; simpl_frac_r
(assert
  (forall ((x complex) (y complex))
    (=> (not (= x c_zero)) (= (infix_asdt x (infix_sldt y x)) y))))

;; compat_mult_sup_eq_right
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (infix_lseqdt c_zero a)
      (=>
        (infix_lseqdt c b)
        (infix_lseqdt (infix_asdt a c) (infix_asdt a b))))))

;; compat_mult_sup_right
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (infix_lsdt c_zero a)
      (=> (infix_gtdt b c) (infix_gtdt (infix_asdt a b) (infix_asdt a c))))))

;; compat_mult_inf_right
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (infix_lsdt c_zero a)
      (=> (infix_lsdt b c) (infix_lsdt (infix_asdt a b) (infix_asdt a c))))))

;; infeq_to_supeq
(assert true)

;; infeq_inv
(assert
  (forall ((a complex) (b complex))
    (=> (infix_lseqdt a b) (infix_lseqdt (prefix_mndt b) (prefix_mndt a)))))

;; infeq_inv_add_l
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (infix_lseqdt (infix_pldt a c) b)
      (=> (real_ a) (=> (real_ c) (infix_lseqdt a (infix_mndt b c)))))))

;; infeq_inv_add_r
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (real_ a)
      (=>
        (real_ c)
        (=>
          (infix_lseqdt a (infix_pldt b c))
          (infix_lseqdt (infix_mndt a c) b))))))

;; r_to_c_surj
(assert
  (forall ((x Real) (y Real))
    (=> (not (= x y)) (not (= (r_to_c x) (r_to_c y))))))

;; r_to_c_inf_rev
(assert
  (forall ((x Real) (y Real))
    (=> (infix_lsas x y) (infix_lsdt (r_to_c x) (r_to_c y)))))

;; div_simpl
(assert
  (forall ((a complex) (b complex))
    (=>
      (infix_lsdt c_zero a)
      (=>
        (infix_lsdt c_zero b)
        (= (infix_sldt c_one b) (infix_sldt a (infix_asdt a b)))))))

;; infeq_inv_subs_l
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (real_ a)
      (=>
        (real_ b)
        (=>
          (real_ c)
          (=>
            (infix_lseqdt (infix_mndt a c) b)
            (infix_lseqdt a (infix_pldt b c))))))))

;; infeq_inv_subs_r
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (real_ a)
      (=>
        (real_ b)
        (=>
          (real_ c)
          (=>
            (infix_lseqdt a (infix_mndt b c))
            (infix_lseqdt (infix_pldt a c) b)))))))

;; infeq_pos_elim
(assert
  (forall ((a complex) (b complex))
    (=>
      (real_ a)
      (=> (infix_lseqdt c_zero b) (infix_lseqdt a (infix_pldt a b))))))

;; infeq_pos_elim_add
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (real_ a)
      (=>
        (real_ b)
        (=>
          (real_ c)
          (=>
            (infix_lseqdt c_zero b)
            (=> (infix_lseqdt c a) (infix_lseqdt c (infix_pldt a b)))))))))

;; supeq_elim_left
(assert
  (forall ((a complex) (b complex))
    (=>
      (real_ a)
      (=>
        (real_ b)
        (=> (infix_lseqdt b a) (infix_lseqdt (infix_mndt b a) c_zero))))))

;; sup_elim_left
(assert
  (forall ((a complex) (b complex))
    (=> (infix_gtdt a b) (infix_gtdt c_zero (infix_mndt b a)))))

;; infeq_elim_left
(assert
  (forall ((a complex) (b complex))
    (=>
      (real_ a)
      (=>
        (real_ b)
        (=> (infix_lseqdt a b) (infix_lseqdt c_zero (infix_mndt b a)))))))

;; inf_elim_left
(assert
  (forall ((a complex) (b complex))
    (=> (infix_lsdt a b) (infix_lsdt c_zero (infix_mndt b a)))))

;; t_im_real
(assert
  (forall ((a complex) (b complex))
    (= (t_im_part (infix_asdt a b)) (infix_pldt
                                      (infix_asdt
                                        (t_real_part a)
                                        (t_im_part b))
                                      (infix_asdt
                                        (t_im_part a)
                                        (t_real_part b))))))

;; t_decomp_mult
(assert
  (forall ((a complex) (b complex))
    (= (infix_asdt a b) (infix_pldt
                          (infix_mndt
                            (infix_asdt (t_real_part a) (t_real_part b))
                            (infix_asdt (t_im_part a) (t_im_part b)))
                          (infix_asdt
                            im
                            (infix_pldt
                              (infix_asdt (t_real_part a) (t_im_part b))
                              (infix_asdt (t_im_part a) (t_real_part b))))))))

;; t_complex_decomp
(assert
  (forall ((i complex))
    (= i (infix_pldt (t_real_part i) (infix_asdt im (t_im_part i))))))

;; t_unic_decomp
(assert
  (forall ((i complex) (a complex) (b complex))
    (=>
      (real_ a)
      (=>
        (real_ b)
        (=>
          (= i (infix_pldt a (infix_asdt im b)))
          (and (= a (t_real_part i)) (= b (t_im_part i))))))))

;; t_decomp_minus
(assert
  (forall ((i complex) (a complex) (b complex))
    (=>
      (real_ a)
      (=>
        (real_ b)
        (=>
          (= i (infix_mndt a (infix_asdt im b)))
          (and (= a (t_real_part i)) (= (prefix_mndt b) (t_im_part i))))))))

;; real_sum
(assert
  (forall ((x complex) (y complex))
    (=> (real_ x) (=> (real_ y) (real_ (infix_pldt x y))))))

;; real_diff
(assert
  (forall ((x complex) (y complex))
    (=> (real_ x) (=> (real_ y) (real_ (infix_mndt x y))))))

;; pure_im_sum
(assert
  (forall ((x complex) (y complex))
    (=> (pure_im_ x) (=> (pure_im_ y) (pure_im_ (infix_pldt x y))))))

;; equal_decomp
(assert
  (forall ((x complex) (y complex))
    (=>
      (= (real_part x) (real_part y))
      (=> (= (im_part x) (im_part y)) (= x y)))))

;; t_equal_decomp
(assert
  (forall ((x complex) (y complex))
    (=>
      (= (t_real_part x) (t_real_part y))
      (=> (= (t_im_part x) (t_im_part y)) (= x y)))))

;; pure_im_diff
(assert
  (forall ((x complex) (y complex))
    (=> (pure_im_ x) (=> (pure_im_ y) (pure_im_ (infix_mndt x y))))))

;; real_div
(assert
  (forall ((x complex) (y complex))
    (=>
      (real_ x)
      (=> (not (= y c_zero)) (=> (real_ y) (real_ (infix_sldt x y)))))))

;; mult_im_im
(assert
  (forall ((a complex) (b complex))
    (=>
      (pure_im_ a)
      (=>
        (pure_im_ b)
        (and
          (= (infix_asdt a b) (infix_asdt
                                (infix_asdt im im)
                                (infix_asdt
                                  (r_to_c (im_part a))
                                  (r_to_c (im_part b)))))
          (and
            (= (infix_asdt a b) (prefix_mndt
                                  (r_to_c (* (im_part a) (im_part b)))))
            (and
              (= (real_part (infix_asdt a b)) (- (* (im_part a) (im_part b))))
              (= (im_part (infix_asdt a b)) 0.0))))))))

;; mult_real_im
(assert
  (forall ((a complex) (b complex))
    (=>
      (real_ a)
      (=>
        (pure_im_ b)
        (and
          (= (infix_asdt a b) (infix_asdt
                                im
                                (infix_asdt
                                  (r_to_c (real_part a))
                                  (r_to_c (im_part b)))))
          (and
            (= (infix_asdt a b) (infix_asdt
                                  im
                                  (r_to_c (* (real_part a) (im_part b)))))
            (and
              (= (real_part (infix_asdt a b)) 0.0)
              (= (im_part (infix_asdt a b)) (* (real_part a) (im_part b))))))))))

;; mult_im_real
(assert
  (forall ((a complex) (b complex))
    (=>
      (pure_im_ a)
      (=>
        (real_ b)
        (and
          (= (infix_asdt a b) (infix_asdt
                                im
                                (infix_asdt
                                  (r_to_c (im_part a))
                                  (r_to_c (real_part b)))))
          (and
            (= (infix_asdt a b) (infix_asdt
                                  im
                                  (r_to_c (* (im_part a) (real_part b)))))
            (and
              (= (real_part (infix_asdt a b)) 0.0)
              (= (im_part (infix_asdt a b)) (* (im_part a) (real_part b))))))))))

;; decomp_mult_gen
(assert
  (forall ((a complex) (b complex))
    (and
      (= (real_part (infix_asdt a b)) (- (* (real_part a) (real_part b)) (* 
      (im_part
        a) (im_part b))))
      (= (im_part (infix_asdt a b)) (+ (* (real_part a) (im_part b)) (* 
      (im_part
        a) (real_part b)))))))

;; inv_real
(assert
  (forall ((a complex))
    (=>
      (not (= a c_zero))
      (=>
        (real_ a)
        (and
          (= (real_part (infix_sldt c_one a)) (infix_slas 1.0 (real_part a)))
          (real_ (infix_sldt c_one a)))))))

;; div_real_real
(assert
  (forall ((a complex) (b complex))
    (=>
      (real_ a)
      (=>
        (real_ b)
        (=>
          (not (= b c_zero))
          (= (real_part (infix_sldt a b)) (infix_slas
                                            (real_part a)
                                            (real_part b))))))))

;; zeroLessOne
(assert (infix_lseqdt c_zero c_one))

;; compatOrderAdd
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (infix_lseqdt x y)
      (=>
        (real_ x)
        (=>
          (real_ y)
          (=> (real_ z) (infix_lseqdt (infix_pldt x z) (infix_pldt y z))))))))

;; positive_add
(assert
  (forall ((x complex) (y complex))
    (=>
      (infix_lseqdt c_zero x)
      (=> (infix_lseqdt c_zero y) (infix_lseqdt c_zero (infix_pldt x y))))))

;; strict_positive_add_l
(assert
  (forall ((x complex) (y complex))
    (=>
      (infix_lsdt c_zero x)
      (=> (infix_lseqdt c_zero y) (infix_lsdt c_zero (infix_pldt x y))))))

;; strict_compatOrderAdd
(assert
  (forall ((x complex) (y complex) (z complex) (t complex))
    (=>
      (infix_lsdt x y)
      (=>
        (infix_lsdt z t)
        (=>
          (real_ x)
          (=>
            (real_ y)
            (=>
              (real_ z)
              (=> (real_ t) (infix_lsdt (infix_pldt x z) (infix_pldt y t))))))))))

;; compat_sup_add
(assert
  (forall ((x complex) (y complex) (z complex) (t complex))
    (=>
      (infix_gtdt x y)
      (=>
        (infix_gtdt z t)
        (=>
          (real_ x)
          (=>
            (real_ y)
            (=>
              (real_ z)
              (=> (real_ t) (infix_gtdt (infix_pldt x z) (infix_pldt y t))))))))))

;; compat_supeq_mult
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (infix_lseqdt y x)
      (=>
        (real_ x)
        (=>
          (real_ y)
          (=>
            (real_ z)
            (=>
              (infix_lseqdt c_zero z)
              (infix_lseqdt (infix_asdt y z) (infix_asdt x z)))))))))

;; compat_supeq_div
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (infix_lseqdt y x)
      (=>
        (real_ x)
        (=>
          (real_ y)
          (=>
            (real_ z)
            (=>
              (infix_lsdt c_zero z)
              (infix_lseqdt (infix_sldt y z) (infix_sldt x z)))))))))

;; compat_infeq_div
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (infix_lseqdt x y)
      (=>
        (real_ x)
        (=>
          (real_ y)
          (=>
            (real_ z)
            (=>
              (infix_lsdt c_zero z)
              (infix_lseqdt (infix_sldt x z) (infix_sldt y z)))))))))

;; compat_sup_div
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (infix_gtdt x y)
      (=>
        (real_ x)
        (=>
          (real_ y)
          (=>
            (real_ z)
            (=>
              (infix_lsdt c_zero z)
              (infix_gtdt (infix_sldt x z) (infix_sldt y z)))))))))

;; compat_inf_div
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (infix_lsdt x y)
      (=>
        (real_ x)
        (=>
          (real_ y)
          (=>
            (real_ z)
            (=>
              (infix_lsdt c_zero z)
              (infix_lsdt (infix_sldt x z) (infix_sldt y z)))))))))

;; positive_prod_itself
(assert
  (forall ((x complex))
    (=> (real_ x) (infix_lseqdt c_zero (infix_asdt x x)))))

;; strict_positive_prod_itself
(assert
  (forall ((x complex))
    (=>
      (real_ x)
      (=> (not (= x c_zero)) (infix_lsdt c_zero (infix_asdt x x))))))

;; compat_sup_mult
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (infix_lseqdt y x)
      (=>
        (real_ x)
        (=>
          (real_ y)
          (=>
            (real_ z)
            (=>
              (infix_lseqdt c_zero z)
              (infix_lseqdt (infix_asdt y z) (infix_asdt x z)))))))))

;; strict_compat_sup_mult
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (infix_gtdt x y)
      (=>
        (real_ x)
        (=>
          (real_ y)
          (=>
            (real_ z)
            (=>
              (infix_lsdt c_zero z)
              (infix_gtdt (infix_asdt x z) (infix_asdt y z)))))))))

;; compat_sup_mult_left
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (infix_lseqdt y x)
      (=>
        (real_ x)
        (=>
          (real_ y)
          (=>
            (real_ z)
            (=>
              (infix_lseqdt c_zero z)
              (infix_lseqdt (infix_asdt z y) (infix_asdt z x)))))))))

;; strict_compat_sup_mult_left
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (infix_gtdt x y)
      (=>
        (real_ x)
        (=>
          (real_ y)
          (=>
            (real_ z)
            (=>
              (infix_lsdt c_zero z)
              (infix_gtdt (infix_asdt z x) (infix_asdt z y)))))))))

;; inv_inf_eq
(assert
  (forall ((a complex) (b complex))
    (=>
      (infix_lsdt c_zero a)
      (=>
        (infix_lsdt c_zero b)
        (=>
          (infix_lseqdt a b)
          (infix_lseqdt (infix_sldt c_one b) (infix_sldt c_one a)))))))

;; inv_sup_eq
(assert
  (forall ((a complex) (b complex))
    (=>
      (infix_lsdt c_zero a)
      (=>
        (infix_lsdt c_zero b)
        (=>
          (infix_lseqdt b a)
          (infix_lseqdt (infix_sldt c_one a) (infix_sldt c_one b)))))))

;; inv_sup
(assert
  (forall ((x complex) (y complex))
    (=>
      (real_ x)
      (=>
        (real_ y)
        (=>
          (and (infix_lsdt c_zero x) (infix_lsdt x y))
          (infix_gtdt (infix_sldt c_one x) (infix_sldt c_one y)))))))

;; inv_eqinf
(assert
  (forall ((x complex) (y complex))
    (=>
      (real_ x)
      (=>
        (real_ y)
        (=>
          (and (infix_lsdt c_zero x) (infix_lseqdt x y))
          (infix_lseqdt (infix_sldt c_one y) (infix_sldt c_one x)))))))

;; inv_eqsup
(assert
  (forall ((x complex) (y complex))
    (=>
      (real_ x)
      (=>
        (real_ y)
        (=>
          (and (infix_lseqdt y x) (infix_gtdt y c_zero))
          (infix_lseqdt (infix_sldt c_one x) (infix_sldt c_one y)))))))

;; inv_inf
(assert
  (forall ((x complex) (y complex))
    (=>
      (real_ x)
      (=>
        (real_ y)
        (=>
          (and (infix_gtdt x y) (infix_gtdt y c_zero))
          (infix_lsdt (infix_sldt c_one x) (infix_sldt c_one y)))))))

;; inv_neg
(assert
  (forall ((x complex))
    (=>
      (real_ x)
      (=> (infix_lsdt x c_zero) (infix_lsdt (infix_sldt c_one x) c_zero)))))

;; lower_inv
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (infix_lsdt c_zero b)
      (=>
        (infix_lseqdt c_zero a)
        (=>
          (infix_lseqdt b c)
          (infix_lseqdt (infix_sldt a c) (infix_sldt a b)))))))

;; lower_inv_
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (infix_lsdt c_zero b)
      (=>
        (infix_lseqdt c_zero a)
        (=>
          (infix_lseqdt b c)
          (infix_lseqdt (infix_sldt a c) (infix_sldt a b)))))))

;; zero_add_t
(assert
  (forall ((a1 complex) (a2 complex))
    (=> (= a1 c_zero) (= (infix_pldt a1 a2) a2))))

;; add_zero_t
(assert
  (forall ((a1 complex) (a2 complex))
    (=> (= a2 c_zero) (= (infix_pldt a1 a2) a1))))

;; one_mult_t
(assert
  (forall ((a1 complex) (a2 complex))
    (=> (= a1 c_one) (= (infix_asdt a1 a2) a2))))

;; one_mult_t_const
(assert (forall ((a complex)) (= (infix_asdt c_one a) a)))

;; zero_mult_t_const
(assert (forall ((a complex)) (= (infix_asdt c_zero a) c_zero)))

;; mult_zero_t_const
(assert (forall ((a complex)) (= (infix_asdt a c_zero) c_zero)))

;; subs_eq
(assert
  (forall ((a1 complex) (a2 complex) (b1 complex) (b2 complex))
    (=> (= a1 a2) (=> (= b1 b2) (= (infix_mndt a1 b1) (infix_mndt a2 b2))))))

;; subst_itself
(assert
  (forall ((a1 complex) (a2 complex))
    (=> (= a1 a2) (= (infix_mndt a1 a2) c_zero))))

;; mult_assoc_four
(assert
  (forall ((a complex) (b complex) (c complex) (d complex))
    (= (infix_asdt (infix_asdt a (infix_asdt b c)) d) (infix_asdt
                                                        (infix_asdt a b)
                                                        (infix_asdt c d)))))

;; mult_assoc_rev
(assert
  (forall ((a complex) (b complex) (c complex))
    (= (infix_asdt a (infix_asdt b c)) (infix_asdt (infix_asdt a b) c))))

;; add_assoc
(assert
  (forall ((a complex) (b complex) (c complex))
    (= (infix_pldt (infix_pldt a b) c) (infix_pldt a (infix_pldt b c)))))

;; add_assoc_rev
(assert
  (forall ((a complex) (b complex) (c complex))
    (= (infix_pldt a (infix_pldt b c)) (infix_pldt (infix_pldt a b) c))))

;; div_mult
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (not (= c c_zero))
      (= (infix_asdt a (infix_sldt b c)) (infix_sldt (infix_asdt a b) c)))))

;; div_mult_rev
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (not (= c c_zero))
      (= (infix_sldt (infix_asdt a b) c) (infix_asdt a (infix_sldt b c))))))

;; triang_p
(assert
  (forall ((a complex) (b complex))
    (= (infix_asdt (infix_pldt a b) (infix_pldt a b)) (infix_pldt
                                                        (infix_pldt
                                                          (infix_asdt a a)
                                                          (infix_asdt b b))
                                                        (infix_asdt
                                                          (infix_asdt
                                                            (infix_pldt
                                                              c_one
                                                              c_one)
                                                            a)
                                                          b)))))

;; triang_n
(assert
  (forall ((a complex) (b complex))
    (= (infix_asdt (infix_mndt a b) (infix_mndt a b)) (infix_mndt
                                                        (infix_pldt
                                                          (infix_asdt a a)
                                                          (infix_asdt b b))
                                                        (infix_asdt
                                                          (infix_asdt
                                                            (infix_pldt
                                                              c_one
                                                              c_one)
                                                            a)
                                                          b)))))

;; triang_s
(assert
  (forall ((a complex) (b complex) (c complex) (d complex) (e complex))
    (= (infix_pldt
         (infix_pldt (infix_pldt a b) c)
         (infix_pldt (infix_mndt d b) e)) (infix_pldt
                                            (infix_pldt a c)
                                            (infix_pldt d e)))))

;; triang_t
(assert
  (forall ((a complex) (b complex))
    (= (infix_asdt (infix_pldt a b) (infix_mndt a b)) (infix_mndt
                                                        (infix_asdt a a)
                                                        (infix_asdt b b)))))

;; triang_sr
(assert
  (forall ((a complex) (b complex) (c complex) (d complex) (e complex))
    (= (infix_pldt
         (infix_pldt (infix_mndt a b) c)
         (infix_pldt (infix_pldt d b) e)) (infix_pldt
                                            (infix_pldt a c)
                                            (infix_pldt d e)))))

;; add_pos
(assert
  (forall ((x complex) (y complex))
    (=>
      (infix_lseqdt c_zero x)
      (=> (infix_lseqdt c_zero y) (infix_lseqdt c_zero (infix_pldt x y))))))

;; add_pos_strit_l
(assert
  (forall ((x complex) (y complex))
    (=>
      (infix_lsdt c_zero x)
      (=> (infix_lseqdt c_zero y) (infix_lsdt c_zero (infix_pldt x y))))))

;; add_pos_strit_r
(assert
  (forall ((x complex) (y complex))
    (=>
      (infix_lseqdt c_zero x)
      (=> (infix_lsdt c_zero y) (infix_lsdt c_zero (infix_pldt x y))))))

;; modulus_pre_pre
(assert
  (forall ((a complex) (b complex) (c complex) (d complex))
    (and
      (= (infix_pldt
           (infix_pldt (infix_asdt a b) (infix_asdt c d))
           (infix_pldt (infix_asdt a d) (infix_asdt c b))) (infix_pldt
                                                             (infix_asdt
                                                               a
                                                               (infix_pldt
                                                                 b
                                                                 d))
                                                             (infix_asdt
                                                               c
                                                               (infix_pldt
                                                                 b
                                                                 d))))
      (= (infix_pldt
           (infix_pldt (infix_asdt a b) (infix_asdt c d))
           (infix_pldt (infix_asdt a d) (infix_asdt c b))) (infix_asdt
                                                             (infix_pldt a c)
                                                             (infix_pldt b d))))))

;; modulus_pre
(assert
  (forall ((a complex) (b complex) (c complex) (d complex))
    (= (infix_pldt
         (infix_pldt
           (infix_asdt (infix_asdt a b) (infix_asdt a b))
           (infix_asdt (infix_asdt c d) (infix_asdt c d)))
         (infix_pldt
           (infix_asdt (infix_asdt a d) (infix_asdt a d))
           (infix_asdt (infix_asdt c b) (infix_asdt c b)))) (infix_asdt
                                                              (infix_pldt
                                                                (infix_asdt
                                                                  a
                                                                  a)
                                                                (infix_asdt
                                                                  c
                                                                  c))
                                                              (infix_pldt
                                                                (infix_asdt
                                                                  b
                                                                  b)
                                                                (infix_asdt
                                                                  d
                                                                  d))))))

;; sqr
(declare-fun sqr (Real) Real)

;; sqr'def
(assert (forall ((x Real)) (= (sqr x) (* x x))))

;; sqrt
(declare-fun sqrt1 (Real) Real)

;; Sqrt_positive
(assert (forall ((x Real)) (=> (<= 0.0 x) (<= 0.0 (sqrt1 x)))))

;; Sqrt_square
(assert (forall ((x Real)) (=> (<= 0.0 x) (= (sqr (sqrt1 x)) x))))

;; Square_sqrt
(assert (forall ((x Real)) (=> (<= 0.0 x) (= (sqrt1 (* x x)) x))))

;; Sqrt_mul
(assert
  (forall ((x Real) (y Real))
    (=>
      (and (<= 0.0 x) (<= 0.0 y))
      (= (sqrt1 (* x y)) (* (sqrt1 x) (sqrt1 y))))))

;; Sqrt_le
(assert
  (forall ((x Real) (y Real))
    (=> (and (<= 0.0 x) (<= x y)) (<= (sqrt1 x) (sqrt1 y)))))

;; real_sqrt
(declare-fun real_sqrt (Real) Real)

;; real_sqrt'spec
(assert
  (forall ((x Real))
    (=>
      (<= 0.0 x)
      (and (= (* (real_sqrt x) (real_sqrt x)) x) (= (real_sqrt x) (sqrt1 x))))))

;; square_rt
(declare-fun square_rt (complex) complex)

;; square_rt'def
(assert
  (forall ((x complex))
    (=>
      (infix_lseqdt c_zero x)
      (= (square_rt x) (r_to_c (real_sqrt (real_part x)))))))

;; square_rt'spec
(assert
  (forall ((x complex))
    (=>
      (infix_lseqdt c_zero x)
      (and
        (real_ (square_rt x))
        (and
          (= (infix_asdt (square_rt x) (square_rt x)) x)
          (infix_lseqdt c_zero (square_rt x)))))))

;; square_rt_eq
(assert
  (forall ((a complex) (b complex))
    (=>
      (infix_lseqdt c_zero a)
      (=>
        (infix_lseqdt c_zero b)
        (=> (= a b) (= (square_rt a) (square_rt b)))))))

;; real_square_rt
(assert
  (forall ((x complex))
    (=> (real_ x) (=> (infix_lseqdt c_zero x) (real_ (square_rt x))))))

;; pos_square_rt
(assert
  (forall ((x complex))
    (=>
      (real_ x)
      (=> (infix_lseqdt c_zero x) (infix_lseqdt c_zero (square_rt x))))))

;; square_rt_square
(assert
  (forall ((x complex))
    (=>
      (infix_lseqdt c_zero x)
      (= (infix_asdt (square_rt x) (square_rt x)) x))))

;; square_rt_infeq
(assert
  (forall ((x complex) (y complex))
    (=>
      (real_ x)
      (=>
        (real_ y)
        (=>
          (and (infix_lseqdt c_zero x) (infix_lseqdt x y))
          (infix_lseqdt (square_rt x) (square_rt y)))))))

;; square_rt_inf
(assert
  (forall ((x complex) (y complex))
    (=>
      (and (infix_lseqdt c_zero x) (infix_lsdt x y))
      (infix_lsdt (square_rt x) (square_rt y)))))

;; injective_square_rt
(assert
  (forall ((x complex) (y complex))
    (=>
      (real_ x)
      (=>
        (real_ y)
        (=>
          (infix_lseqdt c_zero x)
          (=>
            (infix_lseqdt c_zero y)
            (=> (= (square_rt x) (square_rt y)) (= x y))))))))

;; injective_square
(assert
  (forall ((x complex) (y complex))
    (=>
      (real_ x)
      (=>
        (real_ y)
        (=>
          (infix_lseqdt c_zero x)
          (=>
            (infix_lseqdt c_zero y)
            (=> (= (infix_asdt x x) (infix_asdt y y)) (= x y))))))))

;; square_rt_c_one
(assert (= (square_rt c_one) c_one))

;; square_rt_mult
(assert
  (forall ((t complex) (tqt complex))
    (=>
      (real_ t)
      (=>
        (infix_lseqdt c_zero t)
        (=>
          (real_ tqt)
          (=>
            (infix_lseqdt c_zero tqt)
            (= (infix_asdt (square_rt t) (square_rt tqt)) (square_rt
                                                            (infix_asdt
                                                              t
                                                              tqt)))))))))

;; square_rt_mult_rev
(assert
  (forall ((t complex) (tqt complex))
    (=>
      (real_ t)
      (=>
        (infix_lseqdt c_zero t)
        (=>
          (real_ tqt)
          (=>
            (infix_lseqdt c_zero tqt)
            (= (square_rt (infix_asdt t tqt)) (infix_asdt
                                                (square_rt t)
                                                (square_rt tqt)))))))))

;; modulus
(declare-fun modulus (complex) complex)

;; modulus'def
(assert
  (forall ((x complex))
    (= (modulus x) (square_rt
                     (infix_pldt
                       (infix_asdt (t_real_part x) (t_real_part x))
                       (infix_asdt (t_im_part x) (t_im_part x)))))))

;; modulus'spec
(assert (forall ((x complex)) (infix_lseqdt c_zero (modulus x))))

;; c_one_modulus
(declare-fun c_one_modulus (complex) Bool)

;; c_one_modulus'def
(assert (forall ((x complex)) (= (c_one_modulus x) (= (modulus x) c_one))))

;; modulus_eq
(assert
  (forall ((x complex) (y complex))
    (=>
      (= (infix_asdt (t_real_part x) (t_real_part x)) (infix_asdt
                                                        (t_real_part y)
                                                        (t_real_part y)))
      (=>
        (= (infix_asdt (t_im_part x) (t_im_part x)) (infix_asdt
                                                      (t_im_part y)
                                                      (t_im_part y)))
        (= (modulus x) (modulus y))))))

;; modulus_minus
(assert (forall ((x complex)) (= (modulus (prefix_mndt x)) (modulus x))))

;; square_rt_simpl
(assert
  (forall ((x complex))
    (=>
      (infix_lsdt c_zero x)
      (= (infix_asdt x (infix_sldt c_one (square_rt x))) (square_rt x)))))

;; square_rt_simpl_fact
(assert
  (forall ((x complex) (a complex))
    (=>
      (infix_lsdt c_zero x)
      (= (infix_asdt (infix_asdt a (infix_sldt c_one (square_rt x))) x) 
      (infix_asdt
        a
        (square_rt x))))))

;; square_rt_simpl_mult
(assert
  (forall ((x complex) (a complex))
    (=>
      (infix_lsdt c_zero x)
      (= (infix_asdt
           (infix_asdt (square_rt x) a)
           (infix_sldt c_one (square_rt x))) a))))

;; square_rt_simpl_fact_assoc
(assert
  (forall ((x complex) (a complex))
    (=>
      (infix_lsdt c_zero x)
      (= (infix_asdt x (infix_asdt a (infix_sldt c_one (square_rt x)))) 
      (infix_asdt
        a
        (square_rt x))))))

;; modulus_itself
(assert
  (forall ((x complex) (y complex)) (=> (= x y) (= (modulus x) (modulus y)))))

;; modulus_real_pos
(assert
  (forall ((x complex))
    (=> (real_ x) (=> (infix_lseqdt c_zero x) (= (modulus x) x)))))

;; modulus_real_pos_inv
(assert
  (forall ((x complex))
    (=>
      (real_ x)
      (=> (infix_lseqdt c_zero x) (= (modulus (prefix_mndt x)) x)))))

;; modulus_real_neg
(assert
  (forall ((x complex))
    (=>
      (real_ x)
      (=> (infix_lseqdt x c_zero) (= (modulus x) (prefix_mndt x))))))

;; strict_positive_modulus
(assert
  (forall ((x complex))
    (=> (not (= x c_zero)) (infix_lsdt c_zero (modulus x)))))

;; not_modulus_zero
(assert
  (forall ((x complex)) (=> (not (= x c_zero)) (not (= (modulus x) c_zero)))))

;; modulus_real
(assert (forall ((x complex)) (real_ (modulus x))))

;; t_mult_real_square
(assert
  (forall ((a complex) (b complex))
    (= (infix_asdt
         (t_real_part (infix_asdt a b))
         (t_real_part (infix_asdt a b))) (infix_mndt
                                           (infix_pldt
                                             (infix_asdt
                                               (infix_asdt
                                                 (t_real_part a)
                                                 (t_real_part a))
                                               (infix_asdt
                                                 (t_real_part b)
                                                 (t_real_part b)))
                                             (infix_asdt
                                               (infix_asdt
                                                 (t_im_part a)
                                                 (t_im_part a))
                                               (infix_asdt
                                                 (t_im_part b)
                                                 (t_im_part b))))
                                           (infix_asdt
                                             (infix_pldt c_one c_one)
                                             (infix_asdt
                                               (infix_asdt
                                                 (infix_asdt
                                                   (t_real_part a)
                                                   (t_real_part b))
                                                 (t_im_part a))
                                               (t_im_part b)))))))

;; t_mult_im_square
(assert
  (forall ((a complex) (b complex))
    (= (infix_asdt (t_im_part (infix_asdt a b)) (t_im_part (infix_asdt a b))) 
    (infix_pldt
      (infix_pldt
        (infix_asdt
          (infix_asdt (t_real_part a) (t_real_part a))
          (infix_asdt (t_im_part b) (t_im_part b)))
        (infix_asdt
          (infix_asdt (t_im_part a) (t_im_part a))
          (infix_asdt (t_real_part b) (t_real_part b))))
      (infix_asdt
        (infix_pldt c_one c_one)
        (infix_asdt
          (infix_asdt
            (infix_asdt (t_real_part a) (t_real_part b))
            (t_im_part a))
          (t_im_part b)))))))

;; mult_modulus_pre
(assert
  (forall ((a complex) (b complex))
    (= (infix_pldt
         (infix_asdt
           (t_real_part (infix_asdt a b))
           (t_real_part (infix_asdt a b)))
         (infix_asdt
           (t_im_part (infix_asdt a b))
           (t_im_part (infix_asdt a b)))) (infix_asdt
                                            (infix_pldt
                                              (infix_asdt
                                                (t_real_part a)
                                                (t_real_part a))
                                              (infix_asdt
                                                (t_im_part a)
                                                (t_im_part a)))
                                            (infix_pldt
                                              (infix_asdt
                                                (t_real_part b)
                                                (t_real_part b))
                                              (infix_asdt
                                                (t_im_part b)
                                                (t_im_part b)))))))

;; mult_modulus
(assert
  (forall ((x complex) (y complex))
    (= (modulus (infix_asdt x y)) (infix_asdt (modulus x) (modulus y)))))

;; mult_modulus_rev
(assert
  (forall ((x complex) (y complex))
    (= (infix_asdt (modulus x) (modulus y)) (modulus (infix_asdt x y)))))

;; modulus_real_minus_bound
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (real_ a)
      (=>
        (real_ b)
        (=>
          (real_ c)
          (=>
            (infix_lseqdt c_zero a)
            (=>
              (infix_lseqdt c_zero b)
              (=>
                (infix_lseqdt c_zero c)
                (=>
                  (infix_lseqdt (modulus (infix_mn a b)) c)
                  (and
                    (infix_lseqdt (infix_mndt a c) b)
                    (infix_lseqdt b (infix_pldt a c))))))))))))

;; mult_real_modulus
(assert
  (forall ((x complex) (y complex))
    (=>
      (real_ x)
      (=>
        (infix_lseqdt c_zero x)
        (= (modulus (infix_asdt x y)) (infix_asdt x (modulus y)))))))

;; mult_real_modulus_rev
(assert
  (forall ((x complex) (y complex))
    (=>
      (real_ x)
      (=>
        (infix_lseqdt c_zero x)
        (= (infix_asdt x (modulus y)) (modulus (infix_asdt x y)))))))

;; modulus_real_div
(assert
  (forall ((x complex) (y complex))
    (=>
      (real_ x)
      (=>
        (infix_lsdt c_zero x)
        (= (infix_sldt (modulus y) x) (modulus (infix_sldt y x)))))))

;; mult_modulus_real
(assert
  (forall ((x complex) (y complex))
    (=>
      (real_ y)
      (=>
        (infix_lseqdt c_zero y)
        (= (modulus (infix_asdt x y)) (infix_asdt (modulus x) y))))))

;; mult_modulus_non_null
(assert
  (forall ((x complex) (y complex))
    (=>
      (not (= x c_zero))
      (=> (not (= y c_zero)) (not (= (modulus (infix_asdt x y)) c_zero))))))

;; modulus_to_non_null
(assert
  (forall ((x complex))
    (=> (infix_lsdt c_zero (modulus x)) (not (= x c_zero)))))

;; mult_c_one_modulus
(assert
  (forall ((x complex) (y complex))
    (=>
      (c_one_modulus x)
      (=> (c_one_modulus y) (c_one_modulus (infix_asdt x y))))))

;; modulus_pos
(assert
  (forall ((x complex))
    (=> (not (= x c_zero)) (infix_lseqdt c_zero (modulus x)))))

;; modulus_infeq
(assert
  (forall ((x complex) (b complex) (c complex))
    (=>
      (real_ x)
      (=>
        (infix_lseqdt b c)
        (=> (infix_lseqdt (modulus x) b) (infix_lseqdt x c))))))

;; modulus_inf
(assert
  (forall ((x complex) (b complex) (c complex))
    (=>
      (real_ x)
      (=>
        (infix_lsdt b c)
        (=> (infix_lseqdt (modulus x) b) (infix_lsdt x c))))))

;; modulus_diff_rev
(assert
  (forall ((a complex) (b complex))
    (= (modulus (infix_mndt a b)) (modulus (infix_mndt b a)))))

;; modulus_simpl_leq
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (real_ a)
      (=>
        (real_ b)
        (=>
          (real_ c)
          (=>
            (infix_lsdt c_zero c)
            (=>
              (infix_lseqdt (modulus (infix_asdt a c)) (infix_asdt b c))
              (infix_lseqdt (modulus a) b))))))))

;; modulus_simpl_leq_rev
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (real_ a)
      (=>
        (real_ b)
        (=>
          (real_ c)
          (=>
            (infix_lseqdt c_zero c)
            (=>
              (infix_lseqdt (modulus a) b)
              (infix_lseqdt (modulus (infix_asdt a c)) (infix_asdt b c)))))))))

;; div_eq
(assert
  (forall ((a1 complex) (a2 complex) (b1 complex) (b2 complex))
    (=>
      (= a1 a2)
      (=>
        (= b1 b2)
        (=> (not (= b1 c_zero)) (= (infix_sldt a1 b1) (infix_sldt a2 b2)))))))

;; add_eq_inv_t
(assert
  (forall ((a1 complex) (a2 complex) (b1 complex) (b2 complex))
    (=> (= a1 a2) (=> (= b1 b2) (= (infix_pldt a1 b1) (infix_pldt b2 a2))))))

;; mult_eq_inv_t
(assert
  (forall ((a1 complex) (a2 complex) (b1 complex) (b2 complex))
    (=> (= a1 a2) (=> (= b1 b2) (= (infix_asdt a1 b1) (infix_asdt b2 a2))))))

;; sum_frac
(assert
  (forall ((a1 complex) (a2 complex) (b complex))
    (=>
      (not (= b c_zero))
      (= (infix_pldt (infix_sldt a1 b) (infix_sldt a2 b)) (infix_sldt
                                                            (infix_pldt
                                                              a1
                                                              a2)
                                                            b)))))

;; sum_frac_rev
(assert
  (forall ((a1 complex) (a2 complex) (b complex))
    (=>
      (not (= b c_zero))
      (= (infix_sldt (infix_pldt a1 a2) b) (infix_pldt
                                             (infix_sldt a1 b)
                                             (infix_sldt a2 b))))))

;; div_pos
(assert
  (forall ((x complex) (y complex))
    (=>
      (infix_lseqdt c_zero x)
      (=> (infix_lsdt c_zero y) (infix_lseqdt c_zero (infix_sldt x y))))))

;; infix ->
(declare-fun infix_mngt (ty
  ty) ty)

(declare-sort circuit 0)

;; circuit
(declare-fun circuit1 () ty)

;; infix @
(declare-fun infix_at (ty
  ty
  uni
  uni) uni)

;; infix @_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni)) (sort b (infix_at b a x x1)))))

;; constant_f
(declare-fun constant_f (ty
  ty
  uni) Bool)

;; fc
(declare-fun fc (ty
  ty) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty)) (sort (infix_mngt b (infix_mngt a b)) (fc b a))))

;; t2tb
(declare-fun t2tb2 ((Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (sort
      (infix_mngt
        circuit1
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int))))
      (t2tb2 x))))

;; tb2t
(declare-fun tb2t2 (uni) (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))

;; BridgeL
(assert
  (forall ((i (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (! (= (tb2t2 (t2tb2 i)) i) :pattern ((t2tb2 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb2 (tb2t2 j)) j) :pattern ((t2tb2 (tb2t2 j))) )))

;; t2tb
(declare-fun t2tb3 ((Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (sort
      (infix_mngt
        (infix_mngt int int)
        (infix_mngt (infix_mngt int int) (infix_mngt int int)))
      (t2tb3 x))))

;; tb2t
(declare-fun tb2t3 (uni) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))

;; BridgeL
(assert
  (forall ((i (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (! (= (tb2t3 (t2tb3 i)) i) :pattern ((t2tb3 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb3 (tb2t3 j)) j) :pattern ((t2tb3 (tb2t3 j))) )))

;; t2tb
(declare-fun t2tb4 ((Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))))
    (sort
      (infix_mngt
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        (infix_mngt
          circuit1
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))))
      (t2tb4 x))))

;; tb2t
(declare-fun tb2t4 (uni) (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))

;; BridgeL
(assert
  (forall ((i (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))))
    (! (= (tb2t4 (t2tb4 i)) i) :pattern ((t2tb4 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb4 (tb2t4 j)) j) :pattern ((t2tb4 (tb2t4 j))) )))

;; fc'def
(assert
  (forall ((y0 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (y1 circuit))
    (= (select (tb2t2
                 (infix_at
                   (infix_mngt
                     circuit1
                     (infix_mngt
                       (infix_mngt int int)
                       (infix_mngt (infix_mngt int int) (infix_mngt int int))))
                   (infix_mngt
                     (infix_mngt int int)
                     (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                   (fc
                     (infix_mngt
                       (infix_mngt int int)
                       (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                     circuit1)
                   (t2tb3 y0))) y1) y0)))

;; t2tb
(declare-fun t2tb5 ((Array (Array Int Int) (Array Int Int))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (Array Int Int) (Array Int Int))))
    (sort (infix_mngt (infix_mngt int int) (infix_mngt int int)) (t2tb5 x))))

;; tb2t
(declare-fun tb2t5 (uni) (Array (Array Int Int) (Array Int Int)))

;; BridgeL
(assert
  (forall ((i (Array (Array Int Int) (Array Int Int))))
    (! (= (tb2t5 (t2tb5 i)) i) :pattern ((t2tb5 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb5 (tb2t5 j)) j) :pattern ((t2tb5 (tb2t5 j))) )))

;; t2tb
(declare-fun t2tb6 ((Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (sort
      (infix_mngt
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int))))
      (t2tb6 x))))

;; tb2t
(declare-fun tb2t6 (uni) (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))

;; BridgeL
(assert
  (forall ((i (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (! (= (tb2t6 (t2tb6 i)) i) :pattern ((t2tb6 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb6 (tb2t6 j)) j) :pattern ((t2tb6 (tb2t6 j))) )))

;; fc'def
(assert
  (forall ((y0 (Array (Array Int Int) (Array Int Int))) (y1 (Array Int Int)))
    (= (select (tb2t3
                 (infix_at
                   (infix_mngt
                     (infix_mngt int int)
                     (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                   (infix_mngt (infix_mngt int int) (infix_mngt int int))
                   (fc
                     (infix_mngt (infix_mngt int int) (infix_mngt int int))
                     (infix_mngt int int))
                   (t2tb5 y0))) y1) y0)))

;; fc'def
(assert
  (forall ((y0 (Array Int Int)) (y1 (Array Int Int)))
    (= (select (select (tb2t3 (fc (infix_mngt int int) (infix_mngt int int))) y0) y1) y0)))

;; t2tb
(declare-fun t2tb7 ((Array Int Int)) uni)

;; t2tb_sort
(assert (forall ((x (Array Int Int))) (sort (infix_mngt int int) (t2tb7 x))))

;; tb2t
(declare-fun tb2t7 (uni) (Array Int Int))

;; BridgeL
(assert
  (forall ((i (Array Int Int)))
    (! (= (tb2t7 (t2tb7 i)) i) :pattern ((t2tb7 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb7 (tb2t7 j)) j) :pattern ((t2tb7 (tb2t7 j))) )))

;; t2tb
(declare-fun t2tb8 (Int) uni)

;; t2tb_sort
(assert (forall ((x Int)) (sort int (t2tb8 x))))

;; tb2t
(declare-fun tb2t8 (uni) Int)

;; BridgeL
(assert (forall ((i Int)) (! (= (tb2t8 (t2tb8 i)) i) :pattern ((t2tb8 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb8 (tb2t8 j)) j) :pattern ((t2tb8 (tb2t8 j))) )))

;; t2tb
(declare-fun t2tb9 ((Array Int (Array Int Int))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array Int (Array Int Int))))
    (sort (infix_mngt int (infix_mngt int int)) (t2tb9 x))))

;; tb2t
(declare-fun tb2t9 (uni) (Array Int (Array Int Int)))

;; BridgeL
(assert
  (forall ((i (Array Int (Array Int Int))))
    (! (= (tb2t9 (t2tb9 i)) i) :pattern ((t2tb9 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb9 (tb2t9 j)) j) :pattern ((t2tb9 (tb2t9 j))) )))

;; fc'def
(assert
  (forall ((y0 Int) (y1 Int))
    (= (select (tb2t7
                 (infix_at (infix_mngt int int) int (fc int int) (t2tb8 y0))) y1) y0)))

;; fc'def
(assert
  (forall ((a ty) (b ty))
    (forall ((y0 uni) (y1 uni))
      (=>
        (sort b y0)
        (= (infix_at b a (infix_at (infix_mngt a b) b (fc b a) y0) y1) y0)))))

;; constant_f'def
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))))
    (=
      (constant_f (infix_mngt int int) (infix_mngt int int) (t2tb5 f))
      (exists ((a (Array Int Int)))
        (= f (select (tb2t3 (fc (infix_mngt int int) (infix_mngt int int))) a))))))

;; constant_f'def
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni))
      (=>
        (sort (infix_mngt a b) f)
        (and
          (=>
            (constant_f b a f)
            (exists ((a1 uni))
              (and
                (sort b a1)
                (= f (infix_at (infix_mngt a b) b (fc b a) a1)))))
          (=>
            (exists ((a1 uni))
              (= f (infix_at (infix_mngt a b) b (fc b a) a1)))
            (constant_f b a f)))))))

;; op
(declare-fun op (ty
  uni
  uni) uni)

;; op_sort
(assert
  (forall ((im1 ty)) (forall ((x uni) (x1 uni)) (sort im1 (op im1 x x1)))))

;; po
(declare-fun po (ty
  uni
  uni) uni)

;; po_sort
(assert
  (forall ((im1 ty)) (forall ((x uni) (x1 uni)) (sort im1 (po im1 x x1)))))

;; inver
(declare-fun inver (ty
  uni) uni)

;; inver_sort
(assert (forall ((im1 ty)) (forall ((x uni)) (sort im1 (inver im1 x)))))

(declare-sort set 1)

;; set
(declare-fun set1 (ty) ty)

;; mem
(declare-fun mem (ty
  uni
  uni) Bool)

;; add
(declare-fun add (ty
  uni
  uni) uni)

;; add_sort
(assert
  (forall ((a ty)) (forall ((x uni) (x1 uni)) (sort (set1 a) (add a x x1)))))

;; empty
(declare-fun empty (ty) uni)

;; empty_sort
(assert (forall ((a ty)) (sort (set1 a) (empty a))))

;; cardinal
(declare-fun cardinal (ty
  uni) Int)

;; choose
(declare-fun choose1 (ty
  uni) uni)

;; choose_sort
(assert (forall ((a ty)) (forall ((x uni)) (sort a (choose1 a x)))))

;; remove
(declare-fun remove (ty
  uni
  uni) uni)

;; remove_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 uni)) (sort (set1 a) (remove a x x1)))))

;; filter_
(declare-fun filter_ (ty
  uni
  uni) uni)

;; filter__sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 uni)) (sort (set1 a) (filter_ a x x1)))))

;; union
(declare-fun union1 (ty
  uni
  uni) uni)

;; union_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 uni)) (sort (set1 a) (union1 a x x1)))))

;; infix ==
(declare-fun infix_eqeq1 (ty
  uni
  uni) Bool)

;; infix =='def
(assert
  (forall ((a ty))
    (forall ((s1 uni) (s2 uni))
      (and
        (=>
          (infix_eqeq1 a s1 s2)
          (forall ((x uni)) (= (mem a x s1) (mem a x s2))))
        (=>
          (forall ((x uni)) (=> (sort a x) (= (mem a x s1) (mem a x s2))))
          (infix_eqeq1 a s1 s2))))))

;; extensionality
(assert
  (forall ((a ty))
    (forall ((s1 uni) (s2 uni))
      (=>
        (sort (set1 a) s1)
        (=> (sort (set1 a) s2) (=> (infix_eqeq1 a s1 s2) (= s1 s2)))))))

;; subset
(declare-fun subset1 (ty
  uni
  uni) Bool)

;; subset'def
(assert
  (forall ((a ty))
    (forall ((s1 uni) (s2 uni))
      (and
        (=>
          (subset1 a s1 s2)
          (forall ((x uni)) (=> (mem a x s1) (mem a x s2))))
        (=>
          (forall ((x uni)) (=> (sort a x) (=> (mem a x s1) (mem a x s2))))
          (subset1 a s1 s2))))))

;; subset_refl
(assert (forall ((a ty)) (forall ((s uni)) (subset1 a s s))))

;; subset_trans
(assert
  (forall ((a ty))
    (forall ((s1 uni) (s2 uni) (s3 uni))
      (=> (subset1 a s1 s2) (=> (subset1 a s2 s3) (subset1 a s1 s3))))))

;; is_empty
(declare-fun is_empty (ty
  uni) Bool)

;; is_empty'def
(assert
  (forall ((a ty))
    (forall ((s uni))
      (and
        (=> (is_empty a s) (forall ((x uni)) (not (mem a x s))))
        (=>
          (forall ((x uni)) (=> (sort a x) (not (mem a x s))))
          (is_empty a s))))))

;; is_empty_empty
(assert (forall ((a ty)) (is_empty a (empty a))))

;; empty_is_empty
(assert
  (forall ((a ty))
    (forall ((s uni))
      (=> (sort (set1 a) s) (=> (is_empty a s) (= s (empty a)))))))

;; add_def
(assert
  (forall ((a ty))
    (forall ((x uni) (s uni) (y uni))
      (=>
        (sort a x)
        (=> (sort a y) (= (mem a y (add a x s)) (or (mem a y s) (= y x))))))))

;; mem_singleton
(assert
  (forall ((a ty))
    (forall ((x uni) (y uni))
      (=>
        (sort a x)
        (=> (sort a y) (=> (mem a y (add a x (empty a))) (= y x)))))))

;; remove_def
(assert
  (forall ((a ty))
    (forall ((x uni) (s uni) (y uni))
      (=>
        (sort a x)
        (=>
          (sort a y)
          (= (mem a y (remove a x s)) (and (mem a y s) (not (= y x)))))))))

;; add_remove
(assert
  (forall ((a ty))
    (forall ((x uni) (s uni))
      (=> (sort (set1 a) s) (=> (mem a x s) (= (add a x (remove a x s)) s))))))

;; remove_add
(assert
  (forall ((a ty))
    (forall ((x uni) (s uni)) (= (remove a x (add a x s)) (remove a x s)))))

;; subset_remove
(assert
  (forall ((a ty)) (forall ((x uni) (s uni)) (subset1 a (remove a x s) s))))

;; union_def
(assert
  (forall ((a ty))
    (forall ((s1 uni) (s2 uni) (x uni))
      (= (mem a x (union1 a s1 s2)) (or (mem a x s1) (mem a x s2))))))

;; subset_union_1
(assert
  (forall ((a ty))
    (forall ((s1 uni) (s2 uni)) (subset1 a s1 (union1 a s1 s2)))))

;; subset_union_2
(assert
  (forall ((a ty))
    (forall ((s1 uni) (s2 uni)) (subset1 a s2 (union1 a s1 s2)))))

;; inter
(declare-fun inter (ty
  uni
  uni) uni)

;; inter_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 uni)) (sort (set1 a) (inter a x x1)))))

;; inter_def
(assert
  (forall ((a ty))
    (forall ((s1 uni) (s2 uni) (x uni))
      (= (mem a x (inter a s1 s2)) (and (mem a x s1) (mem a x s2))))))

;; subset_inter_1
(assert
  (forall ((a ty))
    (forall ((s1 uni) (s2 uni)) (subset1 a (inter a s1 s2) s1))))

;; subset_inter_2
(assert
  (forall ((a ty))
    (forall ((s1 uni) (s2 uni)) (subset1 a (inter a s1 s2) s2))))

;; diff
(declare-fun diff (ty
  uni
  uni) uni)

;; diff_sort
(assert
  (forall ((a ty)) (forall ((x uni) (x1 uni)) (sort (set1 a) (diff a x x1)))))

;; diff_def
(assert
  (forall ((a ty))
    (forall ((s1 uni) (s2 uni) (x uni))
      (= (mem a x (diff a s1 s2)) (and (mem a x s1) (not (mem a x s2)))))))

;; subset_diff
(assert
  (forall ((a ty))
    (forall ((s1 uni) (s2 uni)) (subset1 a (diff a s1 s2) s1))))

;; pick_def
(assert
  (forall ((a ty))
    (forall ((s uni)) (=> (not (is_empty a s)) (mem a (choose1 a s) s)))))

;; disjoint
(declare-fun disjoint (ty
  uni
  uni) Bool)

;; disjoint'def
(assert
  (forall ((a ty))
    (forall ((s1 uni) (s2 uni))
      (and
        (=>
          (disjoint a s1 s2)
          (forall ((x uni)) (or (not (mem a x s1)) (not (mem a x s2)))))
        (=>
          (forall ((x uni))
            (=> (sort a x) (or (not (mem a x s1)) (not (mem a x s2)))))
          (disjoint a s1 s2))))))

;; disjoint_inter_empty
(assert
  (forall ((a ty))
    (forall ((s1 uni) (s2 uni))
      (= (disjoint a s1 s2) (is_empty a (inter a s1 s2))))))

;; disjoint_diff_eq
(assert
  (forall ((a ty))
    (forall ((s1 uni) (s2 uni))
      (=> (sort (set1 a) s1) (= (disjoint a s1 s2) (= (diff a s1 s2) s1))))))

;; disjoint_diff_s2
(assert
  (forall ((a ty))
    (forall ((s1 uni) (s2 uni)) (disjoint a (diff a s1 s2) s2))))

;; t2tb
(declare-fun t2tb10 (Bool) uni)

;; t2tb_sort
(assert (forall ((x Bool)) (sort bool (t2tb10 x))))

;; tb2t
(declare-fun tb2t10 (uni) Bool)

;; BridgeL
(assert
  (forall ((i Bool)) (! (= (tb2t10 (t2tb10 i)) i) :pattern ((t2tb10 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=> (sort bool j) (= (t2tb10 (tb2t10 j)) j)) :pattern ((t2tb10
                                                                (tb2t10 j))) )))

;; filter_def
(assert
  (forall ((a ty))
    (forall ((s uni) (p uni) (x uni))
      (=
        (mem a x (filter_ a s p))
        (and (mem a x s) (= (tb2t10 (infix_at bool a p x)) true))))))

;; subset_filter
(assert
  (forall ((a ty)) (forall ((s uni) (p uni)) (subset1 a (filter_ a s p) s))))

;; map
(declare-fun map1 (ty
  ty
  uni
  uni) uni)

;; map_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni)) (sort (set1 b) (map1 b a x x1)))))

;; t2tb
(declare-fun t2tb11 ((set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) uni)

;; t2tb_sort
(assert
  (forall ((x (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (sort
      (set1
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int))))
      (t2tb11 x))))

;; tb2t
(declare-fun tb2t11 (uni) (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))

;; BridgeL
(assert
  (forall ((i (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (! (= (tb2t11 (t2tb11 i)) i) :pattern ((t2tb11 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb11 (tb2t11 j)) j) :pattern ((t2tb11 (tb2t11 j))) )))

;; t2tb
(declare-fun t2tb12 ((set circuit)) uni)

;; t2tb_sort
(assert (forall ((x (set circuit))) (sort (set1 circuit1) (t2tb12 x))))

;; tb2t
(declare-fun tb2t12 (uni) (set circuit))

;; BridgeL
(assert
  (forall ((i (set circuit)))
    (! (= (tb2t12 (t2tb12 i)) i) :pattern ((t2tb12 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=> (sort (set1 circuit1) j) (= (t2tb12 (tb2t12 j)) j)) :pattern (
    (t2tb12
      (tb2t12 j))) )))

;; t2tb
(declare-fun t2tb13 (circuit) uni)

;; t2tb_sort
(assert (forall ((x circuit)) (sort circuit1 (t2tb13 x))))

;; tb2t
(declare-fun tb2t13 (uni) circuit)

;; BridgeL
(assert
  (forall ((i circuit)) (! (= (tb2t13 (t2tb13 i)) i) :pattern ((t2tb13 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=> (sort circuit1 j) (= (t2tb13 (tb2t13 j)) j)) :pattern ((t2tb13
                                                                    (tb2t13
                                                                    j))) )))

;; map_def
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (u (set circuit)) (y (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (=
      (mem
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        (t2tb3 y)
        (map1
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          circuit1
          (t2tb2 f)
          (t2tb12 u)))
      (exists ((x circuit))
        (and (mem circuit1 (t2tb13 x) (t2tb12 u)) (= y (select f x)))))))

;; t2tb
(declare-fun t2tb14 ((set (Array (Array Int Int) (Array Int Int)))) uni)

;; t2tb_sort
(assert
  (forall ((x (set (Array (Array Int Int) (Array Int Int)))))
    (sort
      (set1 (infix_mngt (infix_mngt int int) (infix_mngt int int)))
      (t2tb14 x))))

;; tb2t
(declare-fun tb2t14 (uni) (set (Array (Array Int Int) (Array Int Int))))

;; BridgeL
(assert
  (forall ((i (set (Array (Array Int Int) (Array Int Int)))))
    (! (= (tb2t14 (t2tb14 i)) i) :pattern ((t2tb14 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb14 (tb2t14 j)) j) :pattern ((t2tb14 (tb2t14 j))) )))

;; t2tb
(declare-fun t2tb15 ((set (Array Int Int))) uni)

;; t2tb_sort
(assert
  (forall ((x (set (Array Int Int))))
    (sort (set1 (infix_mngt int int)) (t2tb15 x))))

;; tb2t
(declare-fun tb2t15 (uni) (set (Array Int Int)))

;; BridgeL
(assert
  (forall ((i (set (Array Int Int))))
    (! (= (tb2t15 (t2tb15 i)) i) :pattern ((t2tb15 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb15 (tb2t15 j)) j) :pattern ((t2tb15 (tb2t15 j))) )))

;; map_def
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (u (set (Array Int Int))) (y (Array (Array Int Int) (Array Int Int))))
    (=
      (mem
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (t2tb5 y)
        (map1
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (infix_mngt int int)
          (t2tb3 f)
          (t2tb15 u)))
      (exists ((x (Array Int Int)))
        (and
          (mem (infix_mngt int int) (t2tb7 x) (t2tb15 u))
          (= y (select f x)))))))

;; map_def
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (u (set (Array Int Int))) (y (Array Int Int)))
    (=
      (mem
        (infix_mngt int int)
        (t2tb7 y)
        (map1 (infix_mngt int int) (infix_mngt int int) (t2tb5 f) (t2tb15 u)))
      (exists ((x (Array Int Int)))
        (and
          (mem (infix_mngt int int) (t2tb7 x) (t2tb15 u))
          (= y (select f x)))))))

;; t2tb
(declare-fun t2tb16 ((set Int)) uni)

;; t2tb_sort
(assert (forall ((x (set Int))) (sort (set1 int) (t2tb16 x))))

;; tb2t
(declare-fun tb2t16 (uni) (set Int))

;; BridgeL
(assert
  (forall ((i (set Int)))
    (! (= (tb2t16 (t2tb16 i)) i) :pattern ((t2tb16 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb16 (tb2t16 j)) j) :pattern ((t2tb16 (tb2t16 j))) )))

;; map_def
(assert
  (forall ((f (Array Int Int)) (u (set Int)) (y Int))
    (=
      (mem int (t2tb8 y) (map1 int int (t2tb7 f) (t2tb16 u)))
      (exists ((x Int))
        (and (mem int (t2tb8 x) (t2tb16 u)) (= y (select f x)))))))

;; map_def
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (u uni) (y uni))
      (=>
        (sort b y)
        (and
          (=>
            (mem b y (map1 b a f u))
            (exists ((x uni))
              (and (sort a x) (and (mem a x u) (= y (infix_at b a f x))))))
          (=>
            (exists ((x uni)) (and (mem a x u) (= y (infix_at b a f x))))
            (mem b y (map1 b a f u))))))))

;; mem_map
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (u (set circuit)))
    (forall ((x circuit))
      (=>
        (mem circuit1 (t2tb13 x) (t2tb12 u))
        (mem
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          (t2tb3 (select f x))
          (map1
            (infix_mngt
              (infix_mngt int int)
              (infix_mngt (infix_mngt int int) (infix_mngt int int)))
            circuit1
            (t2tb2 f)
            (t2tb12 u)))))))

;; mem_map
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (u (set (Array Int Int))))
    (forall ((x (Array Int Int)))
      (=>
        (mem (infix_mngt int int) (t2tb7 x) (t2tb15 u))
        (mem
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (t2tb5 (select f x))
          (map1
            (infix_mngt (infix_mngt int int) (infix_mngt int int))
            (infix_mngt int int)
            (t2tb3 f)
            (t2tb15 u)))))))

;; mem_map
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (u (set (Array Int Int))))
    (forall ((x (Array Int Int)))
      (=>
        (mem (infix_mngt int int) (t2tb7 x) (t2tb15 u))
        (mem
          (infix_mngt int int)
          (t2tb7 (select f x))
          (map1
            (infix_mngt int int)
            (infix_mngt int int)
            (t2tb5 f)
            (t2tb15 u)))))))

;; mem_map
(assert
  (forall ((f (Array Int Int)) (u (set Int)))
    (forall ((x Int))
      (=>
        (mem int (t2tb8 x) (t2tb16 u))
        (mem int (t2tb8 (select f x)) (map1 int int (t2tb7 f) (t2tb16 u)))))))

;; mem_map
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (u uni))
      (forall ((x uni))
        (=> (mem a x u) (mem b (infix_at b a f x) (map1 b a f u)))))))

;; cardinal_nonneg
(assert (forall ((a ty)) (forall ((s uni)) (<= 0 (cardinal a s)))))

;; cardinal_empty
(assert
  (forall ((a ty))
    (forall ((s uni)) (= (is_empty a s) (= (cardinal a s) 0)))))

;; cardinal_add
(assert
  (forall ((a ty))
    (forall ((x uni))
      (forall ((s uni))
        (ite (mem a x s)
          (= (cardinal a (add a x s)) (cardinal a s))
          (= (cardinal a (add a x s)) (+ (cardinal a s) 1)))))))

;; cardinal_remove
(assert
  (forall ((a ty))
    (forall ((x uni))
      (forall ((s uni))
        (ite (mem a x s)
          (= (cardinal a (remove a x s)) (- (cardinal a s) 1))
          (= (cardinal a (remove a x s)) (cardinal a s)))))))

;; cardinal_subset
(assert
  (forall ((a ty))
    (forall ((s1 uni) (s2 uni))
      (=> (subset1 a s1 s2) (<= (cardinal a s1) (cardinal a s2))))))

;; subset_eq
(assert
  (forall ((a ty))
    (forall ((s1 uni) (s2 uni))
      (=>
        (sort (set1 a) s1)
        (=>
          (sort (set1 a) s2)
          (=>
            (subset1 a s1 s2)
            (=> (= (cardinal a s1) (cardinal a s2)) (= s1 s2))))))))

;; cardinal1
(assert
  (forall ((a ty))
    (forall ((s uni))
      (=>
        (= (cardinal a s) 1)
        (forall ((x uni))
          (=> (sort a x) (=> (mem a x s) (= x (choose1 a s)))))))))

;; cardinal_union
(assert
  (forall ((a ty))
    (forall ((s1 uni) (s2 uni))
      (= (cardinal a (union1 a s1 s2)) (- (+ (cardinal a s1) (cardinal a s2)) 
      (cardinal
        a
        (inter a s1 s2)))))))

;; cardinal_inter_disjoint
(assert
  (forall ((a ty))
    (forall ((s1 uni) (s2 uni))
      (=> (disjoint a s1 s2) (= (cardinal a (inter a s1 s2)) 0)))))

;; cardinal_diff
(assert
  (forall ((a ty))
    (forall ((s1 uni) (s2 uni))
      (= (cardinal a (diff a s1 s2)) (- (cardinal a s1) (cardinal
                                                          a
                                                          (inter a s1 s2)))))))

;; cardinal_filter
(assert
  (forall ((a ty))
    (forall ((s uni) (p uni))
      (<= (cardinal a (filter_ a s p)) (cardinal a s)))))

;; cardinal_map
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni))
      (<= (cardinal b (map1 b a f s)) (cardinal a s)))))

(declare-sort tuple2 2)

;; tuple2
(declare-fun tuple21 (ty
  ty) ty)

;; Tuple2
(declare-fun Tuple2 (ty
  ty
  uni
  uni) uni)

;; Tuple2_sort
(assert
  (forall ((a ty) (a1 ty))
    (forall ((x uni) (x1 uni)) (sort (tuple21 a1 a) (Tuple2 a1 a x x1)))))

;; Tuple2_proj_1
(declare-fun Tuple2_proj_1 (ty
  ty
  uni) uni)

;; Tuple2_proj_1_sort
(assert
  (forall ((a ty) (a1 ty))
    (forall ((x uni)) (sort a1 (Tuple2_proj_1 a1 a x)))))

;; Tuple2_proj_1'def
(assert
  (forall ((a ty) (a1 ty))
    (forall ((u uni) (u1 uni))
      (=> (sort a1 u) (= (Tuple2_proj_1 a1 a (Tuple2 a1 a u u1)) u)))))

;; Tuple2_proj_2
(declare-fun Tuple2_proj_2 (ty
  ty
  uni) uni)

;; Tuple2_proj_2_sort
(assert
  (forall ((a ty) (a1 ty))
    (forall ((x uni)) (sort a (Tuple2_proj_2 a1 a x)))))

;; Tuple2_proj_2'def
(assert
  (forall ((a ty) (a1 ty))
    (forall ((u uni) (u1 uni))
      (=> (sort a u1) (= (Tuple2_proj_2 a1 a (Tuple2 a1 a u u1)) u1)))))

;; tuple2_inversion
(assert
  (forall ((a ty) (a1 ty))
    (forall ((u uni))
      (=>
        (sort (tuple21 a1 a) u)
        (= u (Tuple2 a1 a (Tuple2_proj_1 a1 a u) (Tuple2_proj_2 a1 a u)))))))

;; fir
(declare-fun fir (ty
  ty
  uni) uni)

;; fir_sort
(assert (forall ((a ty) (b ty)) (forall ((x uni)) (sort a (fir b a x)))))

;; fir'def
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni))
      (=> (sort a x) (= (fir b a (Tuple2 a b x x1)) x)))))

;; sec
(declare-fun sec1 (ty
  ty
  uni) uni)

;; sec_sort
(assert (forall ((a ty) (b ty)) (forall ((x uni)) (sort b (sec1 b a x)))))

;; sec'def
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni))
      (=> (sort b x1) (= (sec1 b a (Tuple2 a b x x1)) x1)))))

;; get_fir
(assert
  (forall ((a ty) (b ty))
    (forall ((a1 uni) (b1 uni))
      (=> (sort a a1) (= (fir b a (Tuple2 a b a1 b1)) a1)))))

;; get_sec
(assert
  (forall ((a ty) (b ty))
    (forall ((a1 uni) (b1 uni))
      (=> (sort b b1) (= (sec1 b a (Tuple2 a b a1 b1)) b1)))))

;; set_pair
(assert
  (forall ((a ty) (b ty))
    (forall ((o uni))
      (=> (sort (tuple21 a b) o) (= o (Tuple2 a b (fir b a o) (sec1 b a o)))))))

(declare-sort ref 1)

;; ref
(declare-fun ref1 (ty) ty)

;; ref'mk
(declare-fun refqtmk (ty
  uni) uni)

;; ref'mk_sort
(assert (forall ((a ty)) (forall ((x uni)) (sort (ref1 a) (refqtmk a x)))))

(declare-sort shor_ 0)

;; shor_
(declare-fun shor_1 () ty)

;; contents
(declare-fun contents (ty
  uni) uni)

;; contents_sort
(assert (forall ((a ty)) (forall ((x uni)) (sort a (contents a x)))))

;; contents
(declare-fun contents1 ((ref shor_)) shor_)

;; t2tb
(declare-fun t2tb17 ((ref shor_)) uni)

;; t2tb_sort
(assert (forall ((x (ref shor_))) (sort (ref1 shor_1) (t2tb17 x))))

;; tb2t
(declare-fun tb2t17 (uni) (ref shor_))

;; BridgeL
(assert
  (forall ((i (ref shor_)))
    (! (= (tb2t17 (t2tb17 i)) i) :pattern ((t2tb17 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=> (sort (ref1 shor_1) j) (= (t2tb17 (tb2t17 j)) j)) :pattern (
    (t2tb17
      (tb2t17 j))) )))

;; t2tb
(declare-fun t2tb18 (shor_) uni)

;; t2tb_sort
(assert (forall ((x shor_)) (sort shor_1 (t2tb18 x))))

;; tb2t
(declare-fun tb2t18 (uni) shor_)

;; BridgeL
(assert
  (forall ((i shor_)) (! (= (tb2t18 (t2tb18 i)) i) :pattern ((t2tb18 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=> (sort shor_1 j) (= (t2tb18 (tb2t18 j)) j)) :pattern ((t2tb18
                                                                  (tb2t18 j))) )))

;; contents'def
(assert
  (forall ((u shor_)) (= (contents1 (tb2t17 (refqtmk shor_1 (t2tb18 u)))) u)))

;; contents'def
(assert
  (forall ((a ty))
    (forall ((u uni)) (=> (sort a u) (= (contents a (refqtmk a u)) u)))))

;; ref_inversion
(assert
  (forall ((u (ref shor_)))
    (= u (tb2t17 (refqtmk shor_1 (t2tb18 (contents1 u)))))))

;; ref_inversion
(assert
  (forall ((a ty))
    (forall ((u uni))
      (=> (sort (ref1 a) u) (= u (refqtmk a (contents a u)))))))

;; set_equal
(assert
  (forall ((a ty))
    (forall ((s uni) (sqt uni))
      (=>
        (sort (set1 a) s)
        (=>
          (sort (set1 a) sqt)
          (=>
            (forall ((e uni)) (=> (sort a e) (=> (mem a e s) (mem a e sqt))))
            (=>
              (forall ((e uni))
                (=> (sort a e) (=> (mem a e sqt) (mem a e s))))
              (= s sqt))))))))

;; set_equal_eqq
(assert
  (forall ((a ty))
    (forall ((s uni) (sqt uni))
      (=>
        (forall ((e uni)) (=> (sort a e) (=> (mem a e s) (mem a e sqt))))
        (=>
          (forall ((e uni)) (=> (sort a e) (=> (mem a e sqt) (mem a e s))))
          (infix_eqeq (set1 a) s sqt))))))

;; union_exchange
(assert
  (forall ((a ty))
    (forall ((s uni) (sqt uni))
      (=>
        (not (is_empty a sqt))
        (= (union1
             a
             (add a (choose1 a sqt) s)
             (remove a (choose1 a sqt) sqt)) (union1 a s sqt))))))

;; get_filter
(assert
  (forall ((a ty))
    (forall ((p uni) (s uni) (x uni))
      (=>
        (mem a x (filter_ a s p))
        (and (= (tb2t10 (infix_at bool a p x)) true) (mem a x s))))))

;; set_filter
(assert
  (forall ((a ty))
    (forall ((p uni) (s uni) (x uni))
      (=>
        (= (tb2t10 (infix_at bool a p x)) true)
        (=> (mem a x s) (mem a x (filter_ a s p)))))))

;; inter_empty
(assert
  (forall ((a ty))
    (forall ((s uni) (sqt uni))
      (=> (is_empty a s) (is_empty a (inter a s sqt))))))

;; inter_empty_comm
(assert
  (forall ((a ty))
    (forall ((s uni) (sqt uni))
      (=> (is_empty a sqt) (is_empty a (inter a s sqt))))))

;; inter_empty_elts
(assert
  (forall ((a ty))
    (forall ((s uni) (sqt uni))
      (=>
        (forall ((e uni))
          (=> (sort a e) (=> (mem a e s) (not (mem a e sqt)))))
        (is_empty a (inter a s sqt))))))

;; inter_sym
(assert
  (forall ((a ty))
    (forall ((s uni) (sqt uni)) (= (inter a s sqt) (inter a sqt s)))))

;; union_sym
(assert
  (forall ((a ty))
    (forall ((s uni) (sqt uni)) (= (union1 a s sqt) (union1 a sqt s)))))

;; union_empty
(assert
  (forall ((a ty))
    (forall ((s uni) (sqt uni))
      (=> (sort (set1 a) sqt) (=> (is_empty a s) (= (union1 a s sqt) sqt))))))

;; union_comm
(assert
  (forall ((a ty))
    (forall ((s uni) (sqt uni))
      (=> (sort (set1 a) s) (=> (is_empty a sqt) (= (union1 a s sqt) s))))))

;; union_members
(assert
  (forall ((a ty))
    (forall ((s uni) (sqt uni))
      (and
        (forall ((a1 uni))
          (=>
            (mem a a1 (union1 a s sqt))
            (=> (not (mem a a1 s)) (mem a a1 sqt))))
        (forall ((a1 uni))
          (=>
            (mem a a1 (union1 a s sqt))
            (=> (not (mem a a1 sqt)) (mem a a1 s))))))))

;; union_alt
(assert
  (forall ((a ty))
    (forall ((s uni) (sqt uni) (e uni))
      (=> (mem a e (union1 a s sqt)) (=> (not (mem a e s)) (mem a e sqt))))))

;; union_empty_comm
(assert
  (forall ((a ty))
    (forall ((s uni) (sqt uni))
      (=> (sort (set1 a) s) (=> (is_empty a sqt) (= (union1 a s sqt) s))))))

;; set_subset
(assert
  (forall ((a ty))
    (forall ((sqt uni) (s uni))
      (=>
        (forall ((e uni)) (=> (sort a e) (=> (mem a e sqt) (mem a e s))))
        (subset1 a sqt s)))))

;; set_empty
(assert
  (forall ((a ty))
    (forall ((s uni))
      (=>
        (sort (set1 a) s)
        (=>
          (forall ((e uni)) (=> (sort a e) (not (mem a e s))))
          (and (= s (empty a)) (is_empty a s)))))))

;; get_empty
(assert
  (forall ((a ty))
    (forall ((s uni))
      (=>
        (= s (empty a))
        (and (forall ((e uni)) (not (mem a e s))) (is_empty a s))))))

;; get_non_empty
(assert
  (forall ((a ty))
    (forall ((s uni))
      (=>
        (not (is_empty a s))
        (exists ((e uni)) (and (sort a e) (mem a e s)))))))

;; set_non_empty
(assert
  (forall ((a ty))
    (forall ((s uni))
      (=>
        (exists ((e uni)) (mem a e s))
        (and (not (is_empty a s)) (< 0 (cardinal a s)))))))

;; set_pos_card_elt
(assert
  (forall ((a ty))
    (forall ((s uni) (a1 uni)) (=> (mem a a1 s) (< 0 (cardinal a s))))))

;; union_add
(assert
  (forall ((a ty))
    (forall ((s uni) (sqt uni) (x uni))
      (=>
        (not (mem a x sqt))
        (= (union1 a s (add a x sqt)) (add a x (union1 a s sqt)))))))

;; union_add_mem
(assert
  (forall ((a ty))
    (forall ((s uni) (sqt uni) (x uni) (y uni))
      (=>
        (sort a x)
        (=>
          (sort a y)
          (=>
            (mem a x (add a y (union1 a s sqt)))
            (=> (not (mem a x sqt)) (=> (not (mem a x s)) (= x y)))))))))

;; union_add_comm
(assert
  (forall ((a ty))
    (forall ((s uni) (sqt uni) (x uni))
      (=>
        (not (mem a x sqt))
        (= (add a x (union1 a s sqt)) (union1 a s (add a x sqt)))))))

;; p_injective
(declare-fun p_injective (ty
  ty
  uni
  uni) Bool)

;; p_injective'def
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (s (set circuit)))
    (=
      (p_injective
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        circuit1
        (t2tb2 f)
        (t2tb12 s))
      (forall ((e circuit) (eqt circuit))
        (=>
          (mem circuit1 (t2tb13 e) (t2tb12 s))
          (=>
            (mem circuit1 (t2tb13 eqt) (t2tb12 s))
            (=> (not (= e eqt)) (not (= (select f e) (select f eqt))))))))))

;; p_injective'def
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))))
    (=
      (p_injective
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (infix_mngt int int)
        (t2tb3 f)
        (t2tb15 s))
      (forall ((e (Array Int Int)) (eqt (Array Int Int)))
        (=>
          (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
          (=>
            (mem (infix_mngt int int) (t2tb7 eqt) (t2tb15 s))
            (=> (not (= e eqt)) (not (= (select f e) (select f eqt))))))))))

;; p_injective'def
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))))
    (=
      (p_injective
        (infix_mngt int int)
        (infix_mngt int int)
        (t2tb5 f)
        (t2tb15 s))
      (forall ((e (Array Int Int)) (eqt (Array Int Int)))
        (=>
          (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
          (=>
            (mem (infix_mngt int int) (t2tb7 eqt) (t2tb15 s))
            (=> (not (= e eqt)) (not (= (select f e) (select f eqt))))))))))

;; p_injective'def
(assert
  (forall ((f (Array Int Int)) (s (set Int)))
    (=
      (p_injective int int (t2tb7 f) (t2tb16 s))
      (forall ((e Int) (eqt Int))
        (=>
          (mem int (t2tb8 e) (t2tb16 s))
          (=>
            (mem int (t2tb8 eqt) (t2tb16 s))
            (=> (not (= e eqt)) (not (= (select f e) (select f eqt))))))))))

;; p_injective'def
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni))
      (=
        (p_injective b a f s)
        (forall ((e uni) (eqt uni))
          (=>
            (sort a e)
            (=>
              (sort a eqt)
              (=>
                (mem a e s)
                (=>
                  (mem a eqt s)
                  (=>
                    (not (= e eqt))
                    (not (= (infix_at b a f e) (infix_at b a f eqt)))))))))))))

;; set_map_mem
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (s (set circuit)) (b (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (=>
      (exists ((a circuit))
        (and (mem circuit1 (t2tb13 a) (t2tb12 s)) (= b (select f a))))
      (mem
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        (t2tb3 b)
        (map1
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          circuit1
          (t2tb2 f)
          (t2tb12 s))))))

;; set_map_mem
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (b (Array (Array Int Int) (Array Int Int))))
    (=>
      (exists ((a (Array Int Int)))
        (and
          (mem (infix_mngt int int) (t2tb7 a) (t2tb15 s))
          (= b (select f a))))
      (mem
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (t2tb5 b)
        (map1
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (infix_mngt int int)
          (t2tb3 f)
          (t2tb15 s))))))

;; set_map_mem
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))) (b (Array Int Int)))
    (=>
      (exists ((a (Array Int Int)))
        (and
          (mem (infix_mngt int int) (t2tb7 a) (t2tb15 s))
          (= b (select f a))))
      (mem
        (infix_mngt int int)
        (t2tb7 b)
        (map1 (infix_mngt int int) (infix_mngt int int) (t2tb5 f) (t2tb15 s))))))

;; set_map_mem
(assert
  (forall ((f (Array Int Int)) (s (set Int)) (b Int))
    (=>
      (exists ((a Int))
        (and (mem int (t2tb8 a) (t2tb16 s)) (= b (select f a))))
      (mem int (t2tb8 b) (map1 int int (t2tb7 f) (t2tb16 s))))))

;; set_map_mem
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (b1 uni))
      (=>
        (exists ((a1 uni)) (and (mem a a1 s) (= b1 (infix_at b a f a1))))
        (mem b b1 (map1 b a f s))))))

;; map_add
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (s (set circuit)) (x circuit))
    (=>
      (not (mem circuit1 (t2tb13 x) (t2tb12 s)))
      (= (tb2t11
           (map1
             (infix_mngt
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int)))
             circuit1
             (t2tb2 f)
             (add circuit1 (t2tb13 x) (t2tb12 s)))) (tb2t11
                                                      (add
                                                        (infix_mngt
                                                          (infix_mngt
                                                            int
                                                            int)
                                                          (infix_mngt
                                                            (infix_mngt
                                                              int
                                                              int)
                                                            (infix_mngt
                                                              int
                                                              int)))
                                                        (t2tb3 (select f x))
                                                        (map1
                                                          (infix_mngt
                                                            (infix_mngt
                                                              int
                                                              int)
                                                            (infix_mngt
                                                              (infix_mngt
                                                                int
                                                                int)
                                                              (infix_mngt
                                                                int
                                                                int)))
                                                          circuit1
                                                          (t2tb2 f)
                                                          (t2tb12 s))))))))

;; map_add
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (x (Array Int Int)))
    (=>
      (not (mem (infix_mngt int int) (t2tb7 x) (t2tb15 s)))
      (= (tb2t14
           (map1
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (infix_mngt int int)
             (t2tb3 f)
             (add (infix_mngt int int) (t2tb7 x) (t2tb15 s)))) (tb2t14
                                                                 (add
                                                                   (infix_mngt
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    (infix_mngt
                                                                    int
                                                                    int))
                                                                   (t2tb5
                                                                    (select f x))
                                                                   (map1
                                                                    (infix_mngt
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    (infix_mngt
                                                                    int
                                                                    int))
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    (t2tb3 f)
                                                                    (t2tb15
                                                                    s))))))))

;; map_add
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))) (x (Array Int Int)))
    (=>
      (not (mem (infix_mngt int int) (t2tb7 x) (t2tb15 s)))
      (= (tb2t15
           (map1
             (infix_mngt int int)
             (infix_mngt int int)
             (t2tb5 f)
             (add (infix_mngt int int) (t2tb7 x) (t2tb15 s)))) (tb2t15
                                                                 (add
                                                                   (infix_mngt
                                                                    int
                                                                    int)
                                                                   (t2tb7
                                                                    (select f x))
                                                                   (map1
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    (t2tb5 f)
                                                                    (t2tb15
                                                                    s))))))))

;; map_add
(assert
  (forall ((f (Array Int Int)) (s (set Int)) (x Int))
    (=>
      (not (mem int (t2tb8 x) (t2tb16 s)))
      (= (tb2t16 (map1 int int (t2tb7 f) (add int (t2tb8 x) (t2tb16 s)))) 
      (tb2t16
        (add int (t2tb8 (select f x)) (map1 int int (t2tb7 f) (t2tb16 s))))))))

;; map_add
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (x uni))
      (=>
        (not (mem a x s))
        (= (map1 b a f (add a x s)) (add b (infix_at b a f x) (map1 b a f s)))))))

;; map_eq
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (g (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (s (set circuit)))
    (=>
      (forall ((e circuit))
        (=>
          (mem circuit1 (t2tb13 e) (t2tb12 s))
          (= (select f e) (select g e))))
      (= (tb2t11
           (map1
             (infix_mngt
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int)))
             circuit1
             (t2tb2 f)
             (t2tb12 s))) (tb2t11
                            (map1
                              (infix_mngt
                                (infix_mngt int int)
                                (infix_mngt
                                  (infix_mngt int int)
                                  (infix_mngt int int)))
                              circuit1
                              (t2tb2 g)
                              (t2tb12 s)))))))

;; map_eq
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (g (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))))
    (=>
      (forall ((e (Array Int Int)))
        (=>
          (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
          (= (select f e) (select g e))))
      (= (tb2t14
           (map1
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (infix_mngt int int)
             (t2tb3 f)
             (t2tb15 s))) (tb2t14
                            (map1
                              (infix_mngt
                                (infix_mngt int int)
                                (infix_mngt int int))
                              (infix_mngt int int)
                              (t2tb3 g)
                              (t2tb15 s)))))))

;; map_eq
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (g (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))))
    (=>
      (forall ((e (Array Int Int)))
        (=>
          (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
          (= (select f e) (select g e))))
      (= (tb2t15
           (map1
             (infix_mngt int int)
             (infix_mngt int int)
             (t2tb5 f)
             (t2tb15 s))) (tb2t15
                            (map1
                              (infix_mngt int int)
                              (infix_mngt int int)
                              (t2tb5 g)
                              (t2tb15 s)))))))

;; map_eq
(assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (s (set Int)))
    (=>
      (forall ((e Int))
        (=> (mem int (t2tb8 e) (t2tb16 s)) (= (select f e) (select g e))))
      (= (tb2t16 (map1 int int (t2tb7 f) (t2tb16 s))) (tb2t16
                                                        (map1
                                                          int
                                                          int
                                                          (t2tb7 g)
                                                          (t2tb16 s)))))))

;; map_eq
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (g uni) (s uni))
      (=>
        (forall ((e uni))
          (=>
            (sort a e)
            (=> (mem a e s) (= (infix_at b a f e) (infix_at b a g e)))))
        (= (map1 b a f s) (map1 b a g s))))))

;; remove_mem
(assert
  (forall ((a ty))
    (forall ((s uni) (e uni) (f uni))
      (=> (mem a e (remove a f s)) (mem a e s)))))

;; injective_map_cardinal
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni))
      (=>
        (p_injective b a f s)
        (= (cardinal b (map1 b a f s)) (cardinal a s))))))

;; set_map_mem_el
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (s (set circuit)) (b (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (a circuit))
    (=>
      (mem circuit1 (t2tb13 a) (t2tb12 s))
      (=>
        (= b (select f a))
        (mem
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          (t2tb3 b)
          (map1
            (infix_mngt
              (infix_mngt int int)
              (infix_mngt (infix_mngt int int) (infix_mngt int int)))
            circuit1
            (t2tb2 f)
            (t2tb12 s)))))))

;; set_map_mem_el
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (b (Array (Array Int Int) (Array Int Int))) (a (Array Int Int)))
    (=>
      (mem (infix_mngt int int) (t2tb7 a) (t2tb15 s))
      (=>
        (= b (select f a))
        (mem
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (t2tb5 b)
          (map1
            (infix_mngt (infix_mngt int int) (infix_mngt int int))
            (infix_mngt int int)
            (t2tb3 f)
            (t2tb15 s)))))))

;; set_map_mem_el
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))) (b (Array Int Int)) (a (Array Int Int)))
    (=>
      (mem (infix_mngt int int) (t2tb7 a) (t2tb15 s))
      (=>
        (= b (select f a))
        (mem
          (infix_mngt int int)
          (t2tb7 b)
          (map1
            (infix_mngt int int)
            (infix_mngt int int)
            (t2tb5 f)
            (t2tb15 s)))))))

;; set_map_mem_el
(assert
  (forall ((f (Array Int Int)) (s (set Int)) (b Int) (a Int))
    (=>
      (mem int (t2tb8 a) (t2tb16 s))
      (=>
        (= b (select f a))
        (mem int (t2tb8 b) (map1 int int (t2tb7 f) (t2tb16 s)))))))

;; set_map_mem_el
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (b1 uni) (a1 uni))
      (=>
        (mem a a1 s)
        (=> (= b1 (infix_at b a f a1)) (mem b b1 (map1 b a f s)))))))

;; set_map_mem_el_gen
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (s (set circuit)) (b (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (=>
      (exists ((a circuit))
        (and (mem circuit1 (t2tb13 a) (t2tb12 s)) (= b (select f a))))
      (mem
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        (t2tb3 b)
        (map1
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          circuit1
          (t2tb2 f)
          (t2tb12 s))))))

;; set_map_mem_el_gen
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (b (Array (Array Int Int) (Array Int Int))))
    (=>
      (exists ((a (Array Int Int)))
        (and
          (mem (infix_mngt int int) (t2tb7 a) (t2tb15 s))
          (= b (select f a))))
      (mem
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (t2tb5 b)
        (map1
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (infix_mngt int int)
          (t2tb3 f)
          (t2tb15 s))))))

;; set_map_mem_el_gen
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))) (b (Array Int Int)))
    (=>
      (exists ((a (Array Int Int)))
        (and
          (mem (infix_mngt int int) (t2tb7 a) (t2tb15 s))
          (= b (select f a))))
      (mem
        (infix_mngt int int)
        (t2tb7 b)
        (map1 (infix_mngt int int) (infix_mngt int int) (t2tb5 f) (t2tb15 s))))))

;; set_map_mem_el_gen
(assert
  (forall ((f (Array Int Int)) (s (set Int)) (b Int))
    (=>
      (exists ((a Int))
        (and (mem int (t2tb8 a) (t2tb16 s)) (= b (select f a))))
      (mem int (t2tb8 b) (map1 int int (t2tb7 f) (t2tb16 s))))))

;; set_map_mem_el_gen
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (b1 uni))
      (=>
        (exists ((a1 uni)) (and (mem a a1 s) (= b1 (infix_at b a f a1))))
        (mem b b1 (map1 b a f s))))))

;; map_antec
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (s (set circuit)) (b (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (=>
      (mem
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        (t2tb3 b)
        (map1
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          circuit1
          (t2tb2 f)
          (t2tb12 s)))
      (exists ((a circuit))
        (and (mem circuit1 (t2tb13 a) (t2tb12 s)) (= b (select f a)))))))

;; map_antec
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (b (Array (Array Int Int) (Array Int Int))))
    (=>
      (mem
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (t2tb5 b)
        (map1
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (infix_mngt int int)
          (t2tb3 f)
          (t2tb15 s)))
      (exists ((a (Array Int Int)))
        (and
          (mem (infix_mngt int int) (t2tb7 a) (t2tb15 s))
          (= b (select f a)))))))

;; map_antec
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))) (b (Array Int Int)))
    (=>
      (mem
        (infix_mngt int int)
        (t2tb7 b)
        (map1 (infix_mngt int int) (infix_mngt int int) (t2tb5 f) (t2tb15 s)))
      (exists ((a (Array Int Int)))
        (and
          (mem (infix_mngt int int) (t2tb7 a) (t2tb15 s))
          (= b (select f a)))))))

;; map_antec
(assert
  (forall ((f (Array Int Int)) (s (set Int)) (b Int))
    (=>
      (mem int (t2tb8 b) (map1 int int (t2tb7 f) (t2tb16 s)))
      (exists ((a Int))
        (and (mem int (t2tb8 a) (t2tb16 s)) (= b (select f a)))))))

;; map_antec
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (b1 uni))
      (=>
        (sort b b1)
        (=>
          (mem b b1 (map1 b a f s))
          (exists ((a1 uni))
            (and (sort a a1) (and (mem a a1 s) (= b1 (infix_at b a f a1))))))))))

;; map_antec_gen
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (s (set circuit)))
    (forall ((b (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
      (=>
        (mem
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          (t2tb3 b)
          (map1
            (infix_mngt
              (infix_mngt int int)
              (infix_mngt (infix_mngt int int) (infix_mngt int int)))
            circuit1
            (t2tb2 f)
            (t2tb12 s)))
        (exists ((a circuit))
          (and (mem circuit1 (t2tb13 a) (t2tb12 s)) (= b (select f a))))))))

;; map_antec_gen
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))))
    (forall ((b (Array (Array Int Int) (Array Int Int))))
      (=>
        (mem
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (t2tb5 b)
          (map1
            (infix_mngt (infix_mngt int int) (infix_mngt int int))
            (infix_mngt int int)
            (t2tb3 f)
            (t2tb15 s)))
        (exists ((a (Array Int Int)))
          (and
            (mem (infix_mngt int int) (t2tb7 a) (t2tb15 s))
            (= b (select f a))))))))

;; map_antec_gen
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))))
    (forall ((b (Array Int Int)))
      (=>
        (mem
          (infix_mngt int int)
          (t2tb7 b)
          (map1
            (infix_mngt int int)
            (infix_mngt int int)
            (t2tb5 f)
            (t2tb15 s)))
        (exists ((a (Array Int Int)))
          (and
            (mem (infix_mngt int int) (t2tb7 a) (t2tb15 s))
            (= b (select f a))))))))

;; map_antec_gen
(assert
  (forall ((f (Array Int Int)) (s (set Int)))
    (forall ((b Int))
      (=>
        (mem int (t2tb8 b) (map1 int int (t2tb7 f) (t2tb16 s)))
        (exists ((a Int))
          (and (mem int (t2tb8 a) (t2tb16 s)) (= b (select f a))))))))

;; map_antec_gen
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni))
      (forall ((b1 uni))
        (=>
          (sort b b1)
          (=>
            (mem b b1 (map1 b a f s))
            (exists ((a1 uni))
              (and (sort a a1) (and (mem a a1 s) (= b1 (infix_at b a f a1)))))))))))

;; map_remove_choose
(assert
  (forall ((s (set circuit)) (f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (=>
      (p_injective
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        circuit1
        (t2tb2 f)
        (t2tb12 s))
      (= (tb2t11
           (map1
             (infix_mngt
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int)))
             circuit1
             (t2tb2 f)
             (remove circuit1 (choose1 circuit1 (t2tb12 s)) (t2tb12 s)))) 
      (tb2t11
        (remove
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          (t2tb3 (select f (tb2t13 (choose1 circuit1 (t2tb12 s)))))
          (map1
            (infix_mngt
              (infix_mngt int int)
              (infix_mngt (infix_mngt int int) (infix_mngt int int)))
            circuit1
            (t2tb2 f)
            (t2tb12 s))))))))

;; map_remove_choose
(assert
  (forall ((s (set (Array Int Int))) (f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (=>
      (p_injective
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (infix_mngt int int)
        (t2tb3 f)
        (t2tb15 s))
      (= (tb2t14
           (map1
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (infix_mngt int int)
             (t2tb3 f)
             (remove
               (infix_mngt int int)
               (choose1 (infix_mngt int int) (t2tb15 s))
               (t2tb15 s)))) (tb2t14
                               (remove
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt int int))
                                 (t2tb5
                                   (select f (tb2t7
                                               (choose1
                                                 (infix_mngt int int)
                                                 (t2tb15 s)))))
                                 (map1
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int))
                                   (infix_mngt int int)
                                   (t2tb3 f)
                                   (t2tb15 s))))))))

;; map_remove_choose
(assert
  (forall ((s (set (Array Int Int))) (f (Array (Array Int Int) (Array Int Int))))
    (=>
      (p_injective
        (infix_mngt int int)
        (infix_mngt int int)
        (t2tb5 f)
        (t2tb15 s))
      (= (tb2t15
           (map1
             (infix_mngt int int)
             (infix_mngt int int)
             (t2tb5 f)
             (remove
               (infix_mngt int int)
               (choose1 (infix_mngt int int) (t2tb15 s))
               (t2tb15 s)))) (tb2t15
                               (remove
                                 (infix_mngt int int)
                                 (t2tb7
                                   (select f (tb2t7
                                               (choose1
                                                 (infix_mngt int int)
                                                 (t2tb15 s)))))
                                 (map1
                                   (infix_mngt int int)
                                   (infix_mngt int int)
                                   (t2tb5 f)
                                   (t2tb15 s))))))))

;; map_remove_choose
(assert
  (forall ((s (set Int)) (f (Array Int Int)))
    (=>
      (p_injective int int (t2tb7 f) (t2tb16 s))
      (= (tb2t16
           (map1
             int
             int
             (t2tb7 f)
             (remove int (choose1 int (t2tb16 s)) (t2tb16 s)))) (tb2t16
                                                                  (remove
                                                                    int
                                                                    (t2tb8
                                                                    (select f 
                                                                    (tb2t8
                                                                    (choose1
                                                                    int
                                                                    (t2tb16
                                                                    s)))))
                                                                    (map1
                                                                    int
                                                                    int
                                                                    (t2tb7 f)
                                                                    (t2tb16
                                                                    s))))))))

;; map_remove_choose
(assert
  (forall ((a ty) (b ty))
    (forall ((s uni) (f uni))
      (=>
        (p_injective b a f s)
        (= (map1 b a f (remove a (choose1 a s) s)) (remove
                                                     b
                                                     (infix_at
                                                       b
                                                       a
                                                       f
                                                       (choose1 a s))
                                                     (map1 b a f s)))))))

;; antec_set
(declare-fun antec_set (ty
  ty
  uni
  uni
  uni) uni)

;; antec_set_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni) (x2 uni))
      (sort (set1 a) (antec_set b a x x1 x2)))))

;; result
(declare-fun result (ty
  ty
  uni
  uni) uni)

;; result_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni)) (sort (infix_mngt a bool) (result b a x x1)))))

;; t2tb
(declare-fun t2tb19 ((Array circuit Bool)) uni)

;; t2tb_sort
(assert
  (forall ((x (Array circuit Bool)))
    (sort (infix_mngt circuit1 bool) (t2tb19 x))))

;; tb2t
(declare-fun tb2t19 (uni) (Array circuit Bool))

;; BridgeL
(assert
  (forall ((i (Array circuit Bool)))
    (! (= (tb2t19 (t2tb19 i)) i) :pattern ((t2tb19 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=> (sort (infix_mngt circuit1 bool) j) (= (t2tb19 (tb2t19 j)) j)) :pattern (
    (t2tb19
      (tb2t19 j))) )))

;; result'def
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (b (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (e circuit))
    (=
      (= (tb2t10
           (infix_at
             bool
             circuit1
             (result
               (infix_mngt
                 (infix_mngt int int)
                 (infix_mngt (infix_mngt int int) (infix_mngt int int)))
               circuit1
               (t2tb2 f)
               (t2tb3 b))
             (t2tb13 e))) true)
      (= (select f e) b))))

;; t2tb
(declare-fun t2tb20 ((Array (Array Int Int) Bool)) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (Array Int Int) Bool)))
    (sort (infix_mngt (infix_mngt int int) bool) (t2tb20 x))))

;; tb2t
(declare-fun tb2t20 (uni) (Array (Array Int Int) Bool))

;; BridgeL
(assert
  (forall ((i (Array (Array Int Int) Bool)))
    (! (= (tb2t20 (t2tb20 i)) i) :pattern ((t2tb20 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort (infix_mngt (infix_mngt int int) bool) j)
         (= (t2tb20 (tb2t20 j)) j)) :pattern ((t2tb20 (tb2t20 j))) )))

;; result'def
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (b (Array (Array Int Int) (Array Int Int))) (e (Array Int Int)))
    (=
      (= (tb2t10
           (infix_at
             bool
             (infix_mngt int int)
             (result
               (infix_mngt (infix_mngt int int) (infix_mngt int int))
               (infix_mngt int int)
               (t2tb3 f)
               (t2tb5 b))
             (t2tb7 e))) true)
      (= (select f e) b))))

;; result'def
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (b (Array Int Int)) (e (Array Int Int)))
    (=
      (= (tb2t10
           (infix_at
             bool
             (infix_mngt int int)
             (result
               (infix_mngt int int)
               (infix_mngt int int)
               (t2tb5 f)
               (t2tb7 b))
             (t2tb7 e))) true)
      (= (select f e) b))))

;; t2tb
(declare-fun t2tb21 ((Array Int Bool)) uni)

;; t2tb_sort
(assert
  (forall ((x (Array Int Bool))) (sort (infix_mngt int bool) (t2tb21 x))))

;; tb2t
(declare-fun tb2t21 (uni) (Array Int Bool))

;; BridgeL
(assert
  (forall ((i (Array Int Bool)))
    (! (= (tb2t21 (t2tb21 i)) i) :pattern ((t2tb21 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=> (sort (infix_mngt int bool) j) (= (t2tb21 (tb2t21 j)) j)) :pattern (
    (t2tb21
      (tb2t21 j))) )))

;; result'def
(assert
  (forall ((f (Array Int Int)) (b Int) (e Int))
    (=
      (= (tb2t10
           (infix_at bool int (result int int (t2tb7 f) (t2tb8 b)) (t2tb8 e))) true)
      (= (select f e) b))))

;; result'def
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (b1 uni) (e uni))
      (=>
        (sort b b1)
        (=
          (= (tb2t10 (infix_at bool a (result b a f b1) e)) true)
          (= (infix_at b a f e) b1))))))

;; antec_set'def
(assert
  (forall ((a ty) (b ty))
    (forall ((s uni) (f uni) (b1 uni))
      (=>
        (mem b b1 (map1 b a f s))
        (= (antec_set b a s f b1) (filter_ a s (result b a f b1)))))))

;; remove_s
(declare-fun remove_s (ty
  uni
  uni) uni)

;; remove_s_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 uni)) (sort (set1 a) (remove_s a x x1)))))

;; result
(declare-fun result1 (ty
  uni) uni)

;; result_sort
(assert
  (forall ((a ty))
    (forall ((x uni)) (sort (infix_mngt a bool) (result1 a x)))))

;; result'def
(assert
  (forall ((a ty))
    (forall ((sqt uni) (e uni))
      (=
        (= (tb2t10 (infix_at bool a (result1 a sqt) e)) true)
        (not (mem a e sqt))))))

;; remove_s'def
(assert
  (forall ((a ty))
    (forall ((s uni) (sqt uni))
      (=>
        (subset1 a sqt s)
        (= (remove_s a s sqt) (filter_ a s (result1 a sqt)))))))

;; remove_s'spec
(assert
  (forall ((a ty))
    (forall ((s uni) (sqt uni))
      (=>
        (subset1 a sqt s)
        (forall ((e uni))
          (=
            (mem a e (remove_s a s sqt))
            (and (mem a e s) (not (mem a e sqt)))))))))

;; remove_antecs
(declare-fun remove_antecs (ty
  ty
  uni
  uni
  uni) uni)

;; remove_antecs_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni) (x2 uni))
      (sort (set1 a) (remove_antecs b a x x1 x2)))))

;; remove_antecs'def
(assert
  (forall ((a ty) (b ty))
    (forall ((s uni) (f uni) (b1 uni))
      (=>
        (mem b b1 (map1 b a f s))
        (= (remove_antecs b a s f b1) (remove_s a s (antec_set b a s f b1)))))))

;; remove_antecs'spec
(assert
  (forall ((s (set circuit)) (f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (b (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (=>
      (mem
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        (t2tb3 b)
        (map1
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          circuit1
          (t2tb2 f)
          (t2tb12 s)))
      (and
        (forall ((e circuit))
          (=
            (mem
              circuit1
              (t2tb13 e)
              (remove_antecs
                (infix_mngt
                  (infix_mngt int int)
                  (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                circuit1
                (t2tb12 s)
                (t2tb2 f)
                (t2tb3 b)))
            (and
              (mem circuit1 (t2tb13 e) (t2tb12 s))
              (not (= (select f e) b)))))
        (< (cardinal
             circuit1
             (remove_antecs
               (infix_mngt
                 (infix_mngt int int)
                 (infix_mngt (infix_mngt int int) (infix_mngt int int)))
               circuit1
               (t2tb12 s)
               (t2tb2 f)
               (t2tb3 b))) (cardinal circuit1 (t2tb12 s)))))))

;; remove_antecs'spec
(assert
  (forall ((s (set (Array Int Int))) (f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (b (Array (Array Int Int) (Array Int Int))))
    (=>
      (mem
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (t2tb5 b)
        (map1
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (infix_mngt int int)
          (t2tb3 f)
          (t2tb15 s)))
      (and
        (forall ((e (Array Int Int)))
          (=
            (mem
              (infix_mngt int int)
              (t2tb7 e)
              (remove_antecs
                (infix_mngt (infix_mngt int int) (infix_mngt int int))
                (infix_mngt int int)
                (t2tb15 s)
                (t2tb3 f)
                (t2tb5 b)))
            (and
              (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
              (not (= (select f e) b)))))
        (< (cardinal
             (infix_mngt int int)
             (remove_antecs
               (infix_mngt (infix_mngt int int) (infix_mngt int int))
               (infix_mngt int int)
               (t2tb15 s)
               (t2tb3 f)
               (t2tb5 b))) (cardinal (infix_mngt int int) (t2tb15 s)))))))

;; remove_antecs'spec
(assert
  (forall ((s (set (Array Int Int))) (f (Array (Array Int Int) (Array Int Int))) (b (Array Int Int)))
    (=>
      (mem
        (infix_mngt int int)
        (t2tb7 b)
        (map1 (infix_mngt int int) (infix_mngt int int) (t2tb5 f) (t2tb15 s)))
      (and
        (forall ((e (Array Int Int)))
          (=
            (mem
              (infix_mngt int int)
              (t2tb7 e)
              (remove_antecs
                (infix_mngt int int)
                (infix_mngt int int)
                (t2tb15 s)
                (t2tb5 f)
                (t2tb7 b)))
            (and
              (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
              (not (= (select f e) b)))))
        (< (cardinal
             (infix_mngt int int)
             (remove_antecs
               (infix_mngt int int)
               (infix_mngt int int)
               (t2tb15 s)
               (t2tb5 f)
               (t2tb7 b))) (cardinal (infix_mngt int int) (t2tb15 s)))))))

;; remove_antecs'spec
(assert
  (forall ((s (set Int)) (f (Array Int Int)) (b Int))
    (=>
      (mem int (t2tb8 b) (map1 int int (t2tb7 f) (t2tb16 s)))
      (and
        (forall ((e Int))
          (=
            (mem
              int
              (t2tb8 e)
              (remove_antecs int int (t2tb16 s) (t2tb7 f) (t2tb8 b)))
            (and (mem int (t2tb8 e) (t2tb16 s)) (not (= (select f e) b)))))
        (< (cardinal
             int
             (remove_antecs int int (t2tb16 s) (t2tb7 f) (t2tb8 b))) 
        (cardinal
          int
          (t2tb16 s)))))))

;; remove_antecs'spec
(assert
  (forall ((a ty) (b ty))
    (forall ((s uni) (f uni) (b1 uni))
      (=>
        (sort b b1)
        (=>
          (mem b b1 (map1 b a f s))
          (and
            (forall ((e uni))
              (=
                (mem a e (remove_antecs b a s f b1))
                (and (mem a e s) (not (= (infix_at b a f e) b1)))))
            (< (cardinal a (remove_antecs b a s f b1)) (cardinal a s))))))))

;; map_remove_antec
(assert
  (forall ((a ty) (b ty))
    (forall ((s uni) (f uni) (b1 uni))
      (=>
        (mem b b1 (map1 b a f s))
        (= (map1 b a f (remove_antecs b a s f b1)) (remove
                                                     b
                                                     b1
                                                     (map1 b a f s)))))))

;; map_non_empty
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni))
      (=> (< 0 (cardinal a s)) (< 0 (cardinal b (map1 b a f s)))))))

;; non_empty_map
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni))
      (=> (< 0 (cardinal b (map1 b a f s))) (< 0 (cardinal a s))))))

;; right_injections
(declare-fun right_injections (ty
  ty
  uni
  uni) uni)

;; right_injections_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni))
      (sort (set1 (tuple21 a b)) (right_injections b a x x1)))))

;; right_injections'def
(assert
  (forall ((a ty) (b ty))
    (forall ((a1 uni) (s uni))
      (ite (infix_eqeq (set1 b) s (empty b))
        (= (right_injections b a a1 s) (empty (tuple21 a b)))
        (= (right_injections b a a1 s) (add
                                         (tuple21 a b)
                                         (Tuple2 a b a1 (choose1 b s))
                                         (right_injections
                                           b
                                           a
                                           a1
                                           (remove b (choose1 b s) s))))))))

;; Tuple2_closure
(declare-fun Tuple2_closure (ty
  ty) uni)

;; Tuple2_closure_sort
(assert
  (forall ((a ty) (a1 ty))
    (sort
      (infix_mngt a1 (infix_mngt a (tuple21 a1 a)))
      (Tuple2_closure a1 a))))

;; Tuple2_closure_def
(assert
  (forall ((a ty) (a1 ty))
    (forall ((y uni) (y1 uni))
      (= (infix_at
           (tuple21 a1 a)
           a
           (infix_at
             (infix_mngt a (tuple21 a1 a))
             a1
             (Tuple2_closure a1 a)
             y)
           y1) (Tuple2 a1 a y y1)))))

;; right_injections'spec
(assert
  (forall ((a ty) (b ty))
    (forall ((a1 uni) (s uni))
      (=>
        (sort a a1)
        (and
          (= (cardinal (tuple21 a b) (right_injections b a a1 s)) (cardinal
                                                                    b
                                                                    s))
          (and
            (forall ((aqt uni))
              (=>
                (sort a aqt)
                (forall ((b1 uni))
                  (=
                    (mem
                      (tuple21 a b)
                      (Tuple2 a b aqt b1)
                      (right_injections b a a1 s))
                    (and (= aqt a1) (mem b b1 s))))))
            (= (right_injections b a a1 s) (map1
                                             (tuple21 a b)
                                             b
                                             (infix_at
                                               (infix_mngt b (tuple21 a b))
                                               a
                                               (Tuple2_closure a b)
                                               a1)
                                             s))))))))

;; left_injections
(declare-fun left_injections (ty
  ty
  uni
  uni) uni)

;; left_injections_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni))
      (sort (set1 (tuple21 a b)) (left_injections b a x x1)))))

;; left_injections'def
(assert
  (forall ((a ty) (b ty))
    (forall ((s uni) (b1 uni))
      (ite (infix_eqeq (set1 a) s (empty a))
        (= (left_injections b a s b1) (empty (tuple21 a b)))
        (= (left_injections b a s b1) (add
                                        (tuple21 a b)
                                        (Tuple2 a b (choose1 a s) b1)
                                        (left_injections
                                          b
                                          a
                                          (remove a (choose1 a s) s)
                                          b1)))))))

;; fc
(declare-fun fc1 (ty
  ty
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni)) (sort (infix_mngt a (tuple21 a b)) (fc1 b a x)))))

;; fc'def
(assert
  (forall ((a ty) (b ty))
    (forall ((b1 uni) (a1 uni))
      (= (infix_at (tuple21 a b) a (fc1 b a b1) a1) (Tuple2 a b a1 b1)))))

;; left_injections'spec
(assert
  (forall ((a ty) (b ty))
    (forall ((s uni) (b1 uni))
      (=>
        (sort b b1)
        (and
          (forall ((a1 uni))
            (forall ((bqt uni))
              (=>
                (sort b bqt)
                (=
                  (mem
                    (tuple21 a b)
                    (Tuple2 a b a1 bqt)
                    (left_injections b a s b1))
                  (and (mem a a1 s) (= bqt b1))))))
          (and
            (= (cardinal (tuple21 a b) (left_injections b a s b1)) (cardinal
                                                                    a
                                                                    s))
            (= (left_injections b a s b1) (map1
                                            (tuple21 a b)
                                            a
                                            (fc1 b a b1)
                                            s))))))))

;; set_map_eq
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (s (set circuit)) (sqt (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (=>
      (forall ((b (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
        (=>
          (mem
            (infix_mngt
              (infix_mngt int int)
              (infix_mngt (infix_mngt int int) (infix_mngt int int)))
            (t2tb3 b)
            (t2tb11 sqt))
          (exists ((a circuit))
            (and (mem circuit1 (t2tb13 a) (t2tb12 s)) (= (select f a) b)))))
      (=>
        (forall ((a circuit))
          (=>
            (mem circuit1 (t2tb13 a) (t2tb12 s))
            (mem
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              (t2tb3 (select f a))
              (t2tb11 sqt))))
        (= (tb2t11
             (map1
               (infix_mngt
                 (infix_mngt int int)
                 (infix_mngt (infix_mngt int int) (infix_mngt int int)))
               circuit1
               (t2tb2 f)
               (t2tb12 s))) sqt)))))

;; set_map_eq
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (sqt (set (Array (Array Int Int) (Array Int Int)))))
    (=>
      (forall ((b (Array (Array Int Int) (Array Int Int))))
        (=>
          (mem
            (infix_mngt (infix_mngt int int) (infix_mngt int int))
            (t2tb5 b)
            (t2tb14 sqt))
          (exists ((a (Array Int Int)))
            (and
              (mem (infix_mngt int int) (t2tb7 a) (t2tb15 s))
              (= (select f a) b)))))
      (=>
        (forall ((a (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 a) (t2tb15 s))
            (mem
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (t2tb5 (select f a))
              (t2tb14 sqt))))
        (= (tb2t14
             (map1
               (infix_mngt (infix_mngt int int) (infix_mngt int int))
               (infix_mngt int int)
               (t2tb3 f)
               (t2tb15 s))) sqt)))))

;; set_map_eq
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))) (sqt (set (Array Int Int))))
    (=>
      (forall ((b (Array Int Int)))
        (=>
          (mem (infix_mngt int int) (t2tb7 b) (t2tb15 sqt))
          (exists ((a (Array Int Int)))
            (and
              (mem (infix_mngt int int) (t2tb7 a) (t2tb15 s))
              (= (select f a) b)))))
      (=>
        (forall ((a (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 a) (t2tb15 s))
            (mem (infix_mngt int int) (t2tb7 (select f a)) (t2tb15 sqt))))
        (= (tb2t15
             (map1
               (infix_mngt int int)
               (infix_mngt int int)
               (t2tb5 f)
               (t2tb15 s))) sqt)))))

;; set_map_eq
(assert
  (forall ((f (Array Int Int)) (s (set Int)) (sqt (set Int)))
    (=>
      (forall ((b Int))
        (=>
          (mem int (t2tb8 b) (t2tb16 sqt))
          (exists ((a Int))
            (and (mem int (t2tb8 a) (t2tb16 s)) (= (select f a) b)))))
      (=>
        (forall ((a Int))
          (=>
            (mem int (t2tb8 a) (t2tb16 s))
            (mem int (t2tb8 (select f a)) (t2tb16 sqt))))
        (= (tb2t16 (map1 int int (t2tb7 f) (t2tb16 s))) sqt)))))

;; set_map_eq
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (sqt uni))
      (=>
        (sort (set1 b) sqt)
        (=>
          (forall ((b1 uni))
            (=>
              (sort b b1)
              (=>
                (mem b b1 sqt)
                (exists ((a1 uni))
                  (and (mem a a1 s) (= (infix_at b a f a1) b1))))))
          (=>
            (forall ((a1 uni))
              (=>
                (sort a a1)
                (=> (mem a a1 s) (mem b (infix_at b a f a1) sqt))))
            (= (map1 b a f s) sqt)))))))

;; right_injections_l
(assert
  (forall ((a ty) (b ty))
    (forall ((a1 uni) (s uni))
      (=>
        (sort a a1)
        (and
          (= (cardinal (tuple21 a b) (right_injections b a a1 s)) (cardinal
                                                                    b
                                                                    s))
          (and
            (forall ((aqt uni))
              (=>
                (sort a aqt)
                (forall ((b1 uni))
                  (=
                    (mem
                      (tuple21 a b)
                      (Tuple2 a b aqt b1)
                      (right_injections b a a1 s))
                    (and (= aqt a1) (mem b b1 s))))))
            (= (right_injections b a a1 s) (map1
                                             (tuple21 a b)
                                             b
                                             (infix_at
                                               (infix_mngt b (tuple21 a b))
                                               a
                                               (Tuple2_closure a b)
                                               a1)
                                             s))))))))

;; fc
(declare-fun fc2 (ty
  ty
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni)) (sort (infix_mngt a (tuple21 a b)) (fc2 b a x)))))

;; fc'def
(assert
  (forall ((a ty) (b ty))
    (forall ((b1 uni) (a1 uni))
      (= (infix_at (tuple21 a b) a (fc2 b a b1) a1) (Tuple2 a b a1 b1)))))

;; left_injections_l
(assert
  (forall ((a ty) (b ty))
    (forall ((s uni) (b1 uni))
      (=>
        (sort b b1)
        (and
          (forall ((a1 uni))
            (forall ((bqt uni))
              (=>
                (sort b bqt)
                (=
                  (mem
                    (tuple21 a b)
                    (Tuple2 a b a1 bqt)
                    (left_injections b a s b1))
                  (and (mem a a1 s) (= bqt b1))))))
          (and
            (= (cardinal (tuple21 a b) (left_injections b a s b1)) (cardinal
                                                                    a
                                                                    s))
            (= (left_injections b a s b1) (map1
                                            (tuple21 a b)
                                            a
                                            (fc2 b a b1)
                                            s))))))))

;; disjoint_injections
(assert
  (forall ((a ty) (b ty))
    (forall ((s uni) (b1 uni) (c uni))
      (=>
        (sort b b1)
        (=>
          (sort b c)
          (=>
            (not (= b1 c))
            (and
              (is_empty
                (tuple21 b a)
                (inter
                  (tuple21 b a)
                  (right_injections a b b1 s)
                  (right_injections a b c s)))
              (is_empty
                (tuple21 a b)
                (inter
                  (tuple21 a b)
                  (left_injections b a s b1)
                  (left_injections b a s c))))))))))

;; induction
(assert
  (forall ((a ty))
    (forall ((p uni) (t uni))
      (=>
        (forall ((s uni))
          (=>
            (sort (set1 a) s)
            (=>
              (is_empty a s)
              (= (tb2t10 (infix_at bool (set1 a) p s)) true))))
        (=>
          (forall ((s uni))
            (=>
              (sort (set1 a) s)
              (=>
                (= (tb2t10 (infix_at bool (set1 a) p s)) true)
                (forall ((t1 uni))
                  (=>
                    (sort a t1)
                    (=>
                      (not (mem a t1 s))
                      (= (tb2t10 (infix_at bool (set1 a) p (add a t1 s))) true)))))))
          (= (tb2t10 (infix_at bool (set1 a) p t)) true))))))

;; cardinal_sum
(assert
  (forall ((a ty))
    (forall ((s uni) (sqt uni))
      (= (cardinal a (union1 a s sqt)) (- (+ (cardinal a s) (cardinal a sqt)) 
      (cardinal
        a
        (inter a s sqt)))))))

;; cardinal_eq
(assert
  (forall ((a ty))
    (forall ((s uni) (sqt uni))
      (=>
        (forall ((e uni)) (=> (sort a e) (=> (mem a e s) (mem a e sqt))))
        (=>
          (forall ((e uni)) (=> (sort a e) (=> (mem a e sqt) (mem a e s))))
          (= (cardinal a s) (cardinal a sqt)))))))

;; cardinal_sum_empty_inter
(assert
  (forall ((a ty))
    (forall ((s uni) (sqt uni))
      (=>
        (= (inter a s sqt) (empty a))
        (= (cardinal a (union1 a s sqt)) (+ (cardinal a s) (cardinal a sqt)))))))

;; cartesian_product
(declare-fun cartesian_product (ty
  ty
  uni
  uni) uni)

;; cartesian_product_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni))
      (sort (set1 (tuple21 a b)) (cartesian_product b a x x1)))))

;; cartesian_product'spec
(assert
  (forall ((a ty) (b ty))
    (forall ((s1 uni) (s2 uni))
      (and
        (= (cardinal (tuple21 a b) (cartesian_product b a s1 s2)) (* 
        (cardinal
          a
          s1) (cardinal b s2)))
        (and
          (forall ((a1 uni))
            (forall ((b1 uni))
              (=
                (mem
                  (tuple21 a b)
                  (Tuple2 a b a1 b1)
                  (cartesian_product b a s1 s2))
                (and (mem a a1 s1) (mem b b1 s2)))))
          (forall ((o uni))
            (=
              (mem (tuple21 a b) o (cartesian_product b a s1 s2))
              (and (mem a (fir b a o) s1) (mem b (sec1 b a o) s2)))))))))

;; commute
(declare-fun commute (ty
  ty
  uni) uni)

;; commute_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni)) (sort (tuple21 b a) (commute b a x)))))

;; commute'def
(assert
  (forall ((a ty) (b ty))
    (forall ((a1 uni) (b1 uni))
      (= (commute b a (Tuple2 a b a1 b1)) (Tuple2 b a b1 a1)))))

;; commute_inj
(assert
  (forall ((a ty) (b ty))
    (forall ((a1 uni) (aqt uni) (b1 uni) (bqt uni))
      (=>
        (sort a a1)
        (=>
          (sort a aqt)
          (=>
            (sort b b1)
            (=>
              (sort b bqt)
              (=>
                (=> (= a1 aqt) (not (= b1 bqt)))
                (not
                  (= (commute b a (Tuple2 a b a1 b1)) (commute
                                                        b
                                                        a
                                                        (Tuple2 a b aqt bqt))))))))))))

;; mem_cartesian_product
(assert
  (forall ((a ty) (b ty))
    (forall ((s1 uni) (s2 uni) (a1 uni) (b1 uni))
      (=>
        (mem a a1 s1)
        (=>
          (mem b b1 s2)
          (mem
            (tuple21 a b)
            (Tuple2 a b a1 b1)
            (cartesian_product b a s1 s2)))))))

;; commute_closure
(declare-fun commute_closure (ty
  ty) uni)

;; commute_closure_sort
(assert
  (forall ((a ty) (b ty))
    (sort (infix_mngt (tuple21 a b) (tuple21 b a)) (commute_closure b a))))

;; commute_closure_def
(assert
  (forall ((a ty) (b ty))
    (forall ((y uni))
      (= (infix_at (tuple21 b a) (tuple21 a b) (commute_closure b a) y) 
      (commute
        b
        a
        y)))))

;; commute_inj_gen
(assert
  (forall ((a ty) (b ty))
    (forall ((s1 uni) (s2 uni))
      (p_injective
        (tuple21 b a)
        (tuple21 a b)
        (commute_closure b a)
        (cartesian_product b a s1 s2)))))

;; commute_product
(declare-fun commute_product (ty
  ty
  uni
  uni) uni)

;; commute_product_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni))
      (sort (set1 (tuple21 b a)) (commute_product b a x x1)))))

;; commute_product'def
(assert
  (forall ((a ty) (b ty))
    (forall ((s1 uni) (s2 uni))
      (= (commute_product b a s1 s2) (map1
                                       (tuple21 b a)
                                       (tuple21 a b)
                                       (commute_closure b a)
                                       (cartesian_product b a s1 s2))))))

;; commute_product'spec
(assert
  (forall ((a ty) (b ty))
    (forall ((s1 uni) (s2 uni))
      (= (commute_product b a s1 s2) (cartesian_product a b s2 s1)))))

;; commute_product_el
(declare-fun commute_product_el (ty
  ty
  uni
  uni) uni)

;; commute_product_el_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni))
      (sort (set1 (tuple21 b a)) (commute_product_el b a x x1)))))

;; commute_product_el'def
(assert
  (forall ((a ty) (b ty))
    (forall ((s1 uni) (s2 uni))
      (= (commute_product_el b a s1 s2) (map1
                                          (tuple21 b a)
                                          (tuple21 a b)
                                          (commute_closure b a)
                                          (cartesian_product b a s1 s2))))))

;; commute_product_el'spec
(assert
  (forall ((a ty) (b ty))
    (forall ((s1 uni) (s2 uni))
      (forall ((a1 uni) (b1 uni))
        (and
          (=
            (mem
              (tuple21 a b)
              (Tuple2 a b a1 b1)
              (cartesian_product b a s1 s2))
            (and (mem a a1 s1) (mem b b1 s2)))
          (=
            (and (mem a a1 s1) (mem b b1 s2))
            (mem
              (tuple21 b a)
              (Tuple2 b a b1 a1)
              (commute_product_el b a s1 s2))))))))

;; cartesian_product_union
(assert
  (forall ((a ty) (b ty))
    (forall ((s1 uni) (s2 uni) (s3 uni))
      (= (cartesian_product b a s1 (union1 b s2 s3)) (union1
                                                       (tuple21 a b)
                                                       (cartesian_product
                                                         b
                                                         a
                                                         s1
                                                         s2)
                                                       (cartesian_product
                                                         b
                                                         a
                                                         s1
                                                         s3))))))

;; cartesian_union_product
(assert
  (forall ((a ty) (b ty))
    (forall ((s1 uni) (s2 uni) (s3 uni))
      (= (cartesian_product b a (union1 a s1 s2) s3) (union1
                                                       (tuple21 a b)
                                                       (cartesian_product
                                                         b
                                                         a
                                                         s1
                                                         s3)
                                                       (cartesian_product
                                                         b
                                                         a
                                                         s2
                                                         s3))))))

;; cartesian_product_cardone_r
(assert
  (forall ((a ty) (b ty))
    (forall ((s1 uni) (s2 uni))
      (=>
        (= (cardinal a s1) 1)
        (and
          (infix_eqeq
            (set1 (tuple21 a b))
            (cartesian_product b a s1 s2)
            (right_injections b a (choose1 a s1) s2))
          (infix_eqeq
            (set1 (tuple21 a b))
            (cartesian_product b a s1 s2)
            (map1
              (tuple21 a b)
              b
              (infix_at
                (infix_mngt b (tuple21 a b))
                a
                (Tuple2_closure a b)
                (choose1 a s1))
              s2)))))))

;; fc
(declare-fun fc3 (ty
  ty
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni)) (sort (infix_mngt a (tuple21 a b)) (fc3 b a x)))))

;; fc'def
(assert
  (forall ((a ty) (b ty))
    (forall ((e uni) (e1 uni))
      (= (infix_at (tuple21 a b) a (fc3 b a e) e1) (Tuple2 a b e1 e)))))

;; cartesian_product_cardone_l
(assert
  (forall ((a ty) (b ty))
    (forall ((s1 uni) (s2 uni))
      (=>
        (= (cardinal b s2) 1)
        (and
          (infix_eqeq
            (set1 (tuple21 a b))
            (cartesian_product b a s1 s2)
            (left_injections b a s1 (choose1 b s2)))
          (infix_eqeq
            (set1 (tuple21 a b))
            (cartesian_product b a s1 s2)
            (map1 (tuple21 a b) a (fc3 b a (choose1 b s2)) s1)))))))

;; disjoint_cartesian_product_l
(assert
  (forall ((a ty) (b ty))
    (forall ((s1 uni) (s2 uni) (s3 uni))
      (=>
        (= (inter a s1 s2) (empty a))
        (= (inter
             (tuple21 a b)
             (cartesian_product b a s1 s3)
             (cartesian_product b a s2 s3)) (empty (tuple21 a b)))))))

;; disjoint_cartesian_product_r
(assert
  (forall ((a ty) (b ty))
    (forall ((s1 uni) (s2 uni) (s3 uni))
      (=>
        (= (inter b s2 s3) (empty b))
        (= (inter
             (tuple21 a b)
             (cartesian_product b a s1 s2)
             (cartesian_product b a s1 s3)) (empty (tuple21 a b)))))))

;; iter_union
(declare-fun iter_union (ty
  uni) uni)

;; iter_union_sort
(assert
  (forall ((a ty)) (forall ((x uni)) (sort (set1 a) (iter_union a x)))))

;; iter_union'def
(assert
  (forall ((a ty))
    (forall ((s uni))
      (ite (infix_eqeq (set1 (set1 a)) s (empty (set1 a)))
        (= (iter_union a s) (empty a))
        (= (iter_union a s) (union1
                              a
                              (choose1 (set1 a) s)
                              (iter_union
                                a
                                (remove (set1 a) (choose1 (set1 a) s) s))))))))

;; get_mem_union
(assert
  (forall ((a ty))
    (forall ((s uni) (sqt uni) (e uni))
      (=> (mem a e (union1 a s sqt)) (=> (not (mem a e sqt)) (mem a e s))))))

;; get_mem_union'
(assert
  (forall ((a ty))
    (forall ((s uni) (sqt uni) (e uni))
      (=> (mem a e (union1 a s sqt)) (=> (not (mem a e s)) (mem a e sqt))))))

;; set_mem_union
(assert
  (forall ((a ty))
    (forall ((s uni) (sqt uni) (e uni))
      (=> (mem a e s) (mem a e (union1 a s sqt))))))

;; set_mem_union'
(assert
  (forall ((a ty))
    (forall ((s uni) (sqt uni) (e uni))
      (=> (mem a e sqt) (mem a e (union1 a s sqt))))))

;; op_neutral_left
(declare-fun op_neutral_left (ty
  uni
  uni) Bool)

;; op_neutral_left'def
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (neutral (Array Int Int)))
    (=
      (op_neutral_left (infix_mngt int int) (t2tb3 op1) (t2tb7 neutral))
      (forall ((e (Array Int Int))) (= (select (select op1 neutral) e) e)))))

;; op_neutral_left'def
(assert
  (forall ((op1 (Array Int (Array Int Int))) (neutral Int))
    (=
      (op_neutral_left int (t2tb9 op1) (t2tb8 neutral))
      (forall ((e Int))
        (= (select (tb2t7
                     (infix_at
                       (infix_mngt int int)
                       int
                       (t2tb9 op1)
                       (t2tb8 neutral))) e) e)))))

;; op_neutral_left'def
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (neutral uni))
      (=
        (op_neutral_left im1 op1 neutral)
        (forall ((e uni))
          (=>
            (sort im1 e)
            (= (infix_at
                 im1
                 im1
                 (infix_at (infix_mngt im1 im1) im1 op1 neutral)
                 e) e)))))))

;; op_neutral_right
(declare-fun op_neutral_right (ty
  uni
  uni) Bool)

;; op_neutral_right'def
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (neutral (Array Int Int)))
    (=
      (op_neutral_right (infix_mngt int int) (t2tb3 op1) (t2tb7 neutral))
      (forall ((e (Array Int Int))) (= (select (select op1 e) neutral) e)))))

;; op_neutral_right'def
(assert
  (forall ((op1 (Array Int (Array Int Int))) (neutral Int))
    (=
      (op_neutral_right int (t2tb9 op1) (t2tb8 neutral))
      (forall ((e Int))
        (= (select (tb2t7
                     (infix_at
                       (infix_mngt int int)
                       int
                       (t2tb9 op1)
                       (t2tb8 e))) neutral) e)))))

;; op_neutral_right'def
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (neutral uni))
      (=
        (op_neutral_right im1 op1 neutral)
        (forall ((e uni))
          (=>
            (sort im1 e)
            (= (infix_at
                 im1
                 im1
                 (infix_at (infix_mngt im1 im1) im1 op1 e)
                 neutral) e)))))))

;; op_assoc
(declare-fun op_assoc (ty
  uni) Bool)

;; op_assoc'def
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (=
      (op_assoc (infix_mngt int int) (t2tb3 op1))
      (forall ((a (Array Int Int)) (b (Array Int Int)) (c (Array Int Int)))
        (= (select (select op1 (select (select op1 a) b)) c) (select (select op1 a) (select (select op1 b) c)))))))

;; op_assoc'def
(assert
  (forall ((op1 (Array Int (Array Int Int))))
    (=
      (op_assoc int (t2tb9 op1))
      (forall ((a Int) (b Int) (c Int))
        (= (select (tb2t7
                     (infix_at
                       (infix_mngt int int)
                       int
                       (t2tb9 op1)
                       (t2tb8
                         (select (tb2t7
                                   (infix_at
                                     (infix_mngt int int)
                                     int
                                     (t2tb9 op1)
                                     (t2tb8 a))) b)))) c) (select (tb2t7
                                                                    (infix_at
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    int
                                                                    (t2tb9
                                                                    op1)
                                                                    (t2tb8 a))) (select 
        (tb2t7
          (infix_at (infix_mngt int int) int (t2tb9 op1) (t2tb8 b))) c)))))))

;; op_assoc'def
(assert
  (forall ((im1 ty))
    (forall ((op1 uni))
      (and
        (=>
          (op_assoc im1 op1)
          (forall ((a uni) (b uni) (c uni))
            (= (infix_at
                 im1
                 im1
                 (infix_at
                   (infix_mngt im1 im1)
                   im1
                   op1
                   (infix_at
                     im1
                     im1
                     (infix_at (infix_mngt im1 im1) im1 op1 a)
                     b))
                 c) (infix_at
                      im1
                      im1
                      (infix_at (infix_mngt im1 im1) im1 op1 a)
                      (infix_at
                        im1
                        im1
                        (infix_at (infix_mngt im1 im1) im1 op1 b)
                        c)))))
        (=>
          (forall ((a uni) (b uni) (c uni))
            (=>
              (sort im1 a)
              (=>
                (sort im1 b)
                (=>
                  (sort im1 c)
                  (= (infix_at
                       im1
                       im1
                       (infix_at
                         (infix_mngt im1 im1)
                         im1
                         op1
                         (infix_at
                           im1
                           im1
                           (infix_at (infix_mngt im1 im1) im1 op1 a)
                           b))
                       c) (infix_at
                            im1
                            im1
                            (infix_at (infix_mngt im1 im1) im1 op1 a)
                            (infix_at
                              im1
                              im1
                              (infix_at (infix_mngt im1 im1) im1 op1 b)
                              c)))))))
          (op_assoc im1 op1))))))

;; op_neutral_left_comm
(declare-fun op_neutral_left_comm (ty
  uni
  uni) Bool)

;; op_neutral_left_comm'def
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (neutral (Array Int Int)))
    (=
      (op_neutral_left_comm (infix_mngt int int) (t2tb3 op1) (t2tb7 neutral))
      (forall ((a (Array Int Int)))
        (=>
          (forall ((b (Array Int Int))) (= (select (select op1 a) b) b))
          (= a neutral))))))

;; op_neutral_left_comm'def
(assert
  (forall ((op1 (Array Int (Array Int Int))) (neutral Int))
    (=
      (op_neutral_left_comm int (t2tb9 op1) (t2tb8 neutral))
      (forall ((a Int))
        (=>
          (forall ((b Int))
            (= (select (tb2t7
                         (infix_at
                           (infix_mngt int int)
                           int
                           (t2tb9 op1)
                           (t2tb8 a))) b) b))
          (= a neutral))))))

;; op_neutral_left_comm'def
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (neutral uni))
      (=>
        (sort im1 neutral)
        (=
          (op_neutral_left_comm im1 op1 neutral)
          (forall ((a uni))
            (=>
              (sort im1 a)
              (=>
                (forall ((b uni))
                  (=>
                    (sort im1 b)
                    (= (infix_at
                         im1
                         im1
                         (infix_at (infix_mngt im1 im1) im1 op1 a)
                         b) b)))
                (= a neutral)))))))))

;; commut
(declare-fun commut (ty
  uni) Bool)

;; commut'def
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (=
      (commut (infix_mngt int int) (t2tb3 op1))
      (forall ((a (Array Int Int)) (b (Array Int Int)))
        (= (select (select op1 a) b) (select (select op1 b) a))))))

;; commut'def
(assert
  (forall ((op1 (Array Int (Array Int Int))))
    (=
      (commut int (t2tb9 op1))
      (forall ((a Int) (b Int))
        (= (select (tb2t7
                     (infix_at
                       (infix_mngt int int)
                       int
                       (t2tb9 op1)
                       (t2tb8 a))) b) (select (tb2t7
                                                (infix_at
                                                  (infix_mngt int int)
                                                  int
                                                  (t2tb9 op1)
                                                  (t2tb8 b))) a))))))

;; commut'def
(assert
  (forall ((im1 ty))
    (forall ((op1 uni))
      (and
        (=>
          (commut im1 op1)
          (forall ((a uni) (b uni))
            (= (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a) b) 
            (infix_at
              im1
              im1
              (infix_at (infix_mngt im1 im1) im1 op1 b)
              a))))
        (=>
          (forall ((a uni) (b uni))
            (=>
              (sort im1 a)
              (=>
                (sort im1 b)
                (= (infix_at
                     im1
                     im1
                     (infix_at (infix_mngt im1 im1) im1 op1 a)
                     b) (infix_at
                          im1
                          im1
                          (infix_at (infix_mngt im1 im1) im1 op1 b)
                          a)))))
          (commut im1 op1))))))

;; assoc
(declare-fun assoc (ty
  uni) Bool)

;; assoc'def
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (=
      (assoc (infix_mngt int int) (t2tb3 op1))
      (forall ((a (Array Int Int)) (b (Array Int Int)) (c (Array Int Int)))
        (= (select (select op1 (select (select op1 a) b)) c) (select (select op1 a) (select (select op1 b) c)))))))

;; assoc'def
(assert
  (forall ((op1 (Array Int (Array Int Int))))
    (=
      (assoc int (t2tb9 op1))
      (forall ((a Int) (b Int) (c Int))
        (= (select (tb2t7
                     (infix_at
                       (infix_mngt int int)
                       int
                       (t2tb9 op1)
                       (t2tb8
                         (select (tb2t7
                                   (infix_at
                                     (infix_mngt int int)
                                     int
                                     (t2tb9 op1)
                                     (t2tb8 a))) b)))) c) (select (tb2t7
                                                                    (infix_at
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    int
                                                                    (t2tb9
                                                                    op1)
                                                                    (t2tb8 a))) (select 
        (tb2t7
          (infix_at (infix_mngt int int) int (t2tb9 op1) (t2tb8 b))) c)))))))

;; assoc'def
(assert
  (forall ((im1 ty))
    (forall ((op1 uni))
      (and
        (=>
          (assoc im1 op1)
          (forall ((a uni) (b uni) (c uni))
            (= (infix_at
                 im1
                 im1
                 (infix_at
                   (infix_mngt im1 im1)
                   im1
                   op1
                   (infix_at
                     im1
                     im1
                     (infix_at (infix_mngt im1 im1) im1 op1 a)
                     b))
                 c) (infix_at
                      im1
                      im1
                      (infix_at (infix_mngt im1 im1) im1 op1 a)
                      (infix_at
                        im1
                        im1
                        (infix_at (infix_mngt im1 im1) im1 op1 b)
                        c)))))
        (=>
          (forall ((a uni) (b uni) (c uni))
            (=>
              (sort im1 a)
              (=>
                (sort im1 b)
                (=>
                  (sort im1 c)
                  (= (infix_at
                       im1
                       im1
                       (infix_at
                         (infix_mngt im1 im1)
                         im1
                         op1
                         (infix_at
                           im1
                           im1
                           (infix_at (infix_mngt im1 im1) im1 op1 a)
                           b))
                       c) (infix_at
                            im1
                            im1
                            (infix_at (infix_mngt im1 im1) im1 op1 a)
                            (infix_at
                              im1
                              im1
                              (infix_at (infix_mngt im1 im1) im1 op1 b)
                              c)))))))
          (assoc im1 op1))))))

;; opposite_n
(declare-fun opposite_n (ty
  uni
  uni
  uni) Bool)

;; opposite_n'def
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (po1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (neutral (Array Int Int)))
    (=
      (opposite_n
        (infix_mngt int int)
        (t2tb3 op1)
        (t2tb3 po1)
        (t2tb7 neutral))
      (forall ((a (Array Int Int)))
        (= (select (select po1 a) (select (select op1 neutral) a)) neutral)))))

;; opposite_n'def
(assert
  (forall ((op1 (Array Int (Array Int Int))) (po1 (Array Int (Array Int Int))) (neutral Int))
    (=
      (opposite_n int (t2tb9 op1) (t2tb9 po1) (t2tb8 neutral))
      (forall ((a Int))
        (= (select (tb2t7
                     (infix_at
                       (infix_mngt int int)
                       int
                       (t2tb9 po1)
                       (t2tb8 a))) (select (tb2t7
                                             (infix_at
                                               (infix_mngt int int)
                                               int
                                               (t2tb9 op1)
                                               (t2tb8 neutral))) a)) neutral)))))

;; opposite_n'def
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (po1 uni) (neutral uni))
      (=>
        (sort im1 neutral)
        (and
          (=>
            (opposite_n im1 op1 po1 neutral)
            (forall ((a uni))
              (= (infix_at
                   im1
                   im1
                   (infix_at (infix_mngt im1 im1) im1 po1 a)
                   (infix_at
                     im1
                     im1
                     (infix_at (infix_mngt im1 im1) im1 op1 neutral)
                     a)) neutral)))
          (=>
            (forall ((a uni))
              (=>
                (sort im1 a)
                (= (infix_at
                     im1
                     im1
                     (infix_at (infix_mngt im1 im1) im1 po1 a)
                     (infix_at
                       im1
                       im1
                       (infix_at (infix_mngt im1 im1) im1 op1 neutral)
                       a)) neutral)))
            (opposite_n im1 op1 po1 neutral)))))))

;; inverse
(declare-fun inverse (ty
  uni
  uni
  uni) Bool)

;; inverse'def
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (po1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (inver1 (Array (Array Int Int) (Array Int Int))))
    (=
      (inverse (infix_mngt int int) (t2tb3 op1) (t2tb3 po1) (t2tb5 inver1))
      (forall ((a (Array Int Int)) (b (Array Int Int)))
        (= (select (select po1 a) b) (select (select op1 a) (select inver1 b)))))))

;; inverse'def
(assert
  (forall ((op1 (Array Int (Array Int Int))) (po1 (Array Int (Array Int Int))) (inver1 (Array Int Int)))
    (=
      (inverse int (t2tb9 op1) (t2tb9 po1) (t2tb7 inver1))
      (forall ((a Int) (b Int))
        (= (select (tb2t7
                     (infix_at
                       (infix_mngt int int)
                       int
                       (t2tb9 po1)
                       (t2tb8 a))) b) (select (tb2t7
                                                (infix_at
                                                  (infix_mngt int int)
                                                  int
                                                  (t2tb9 op1)
                                                  (t2tb8 a))) (select inver1 b)))))))

;; inverse'def
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (po1 uni) (inver1 uni))
      (and
        (=>
          (inverse im1 op1 po1 inver1)
          (forall ((a uni) (b uni))
            (= (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 po1 a) b) 
            (infix_at
              im1
              im1
              (infix_at (infix_mngt im1 im1) im1 op1 a)
              (infix_at im1 im1 inver1 b)))))
        (=>
          (forall ((a uni) (b uni))
            (=>
              (sort im1 a)
              (=>
                (sort im1 b)
                (= (infix_at
                     im1
                     im1
                     (infix_at (infix_mngt im1 im1) im1 po1 a)
                     b) (infix_at
                          im1
                          im1
                          (infix_at (infix_mngt im1 im1) im1 op1 a)
                          (infix_at im1 im1 inver1 b))))))
          (inverse im1 op1 po1 inver1))))))

;; opposite
(declare-fun opposite (ty
  uni
  uni) Bool)

;; opposite'def
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (po1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (=
      (opposite (infix_mngt int int) (t2tb3 op1) (t2tb3 po1))
      (forall ((a (Array Int Int)) (b (Array Int Int)))
        (= (select (select op1 (select (select po1 a) b)) b) a)))))

;; opposite'def
(assert
  (forall ((op1 (Array Int (Array Int Int))) (po1 (Array Int (Array Int Int))))
    (=
      (opposite int (t2tb9 op1) (t2tb9 po1))
      (forall ((a Int) (b Int))
        (= (select (tb2t7
                     (infix_at
                       (infix_mngt int int)
                       int
                       (t2tb9 op1)
                       (t2tb8
                         (select (tb2t7
                                   (infix_at
                                     (infix_mngt int int)
                                     int
                                     (t2tb9 po1)
                                     (t2tb8 a))) b)))) b) a)))))

;; opposite'def
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (po1 uni))
      (and
        (=>
          (opposite im1 op1 po1)
          (forall ((a uni) (b uni))
            (=>
              (sort im1 a)
              (= (infix_at
                   im1
                   im1
                   (infix_at
                     (infix_mngt im1 im1)
                     im1
                     op1
                     (infix_at
                       im1
                       im1
                       (infix_at (infix_mngt im1 im1) im1 po1 a)
                       b))
                   b) a))))
        (=>
          (forall ((a uni) (b uni))
            (=>
              (sort im1 a)
              (=>
                (sort im1 b)
                (= (infix_at
                     im1
                     im1
                     (infix_at
                       (infix_mngt im1 im1)
                       im1
                       op1
                       (infix_at
                         im1
                         im1
                         (infix_at (infix_mngt im1 im1) im1 po1 a)
                         b))
                     b) a))))
          (opposite im1 op1 po1))))))

;; opposite_com
(declare-fun opposite_com (ty
  uni
  uni) Bool)

;; opposite_com'def
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (po1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (=
      (opposite_com (infix_mngt int int) (t2tb3 op1) (t2tb3 po1))
      (forall ((a (Array Int Int)) (b (Array Int Int)))
        (= (select (select po1 (select (select op1 a) b)) b) a)))))

;; opposite_com'def
(assert
  (forall ((op1 (Array Int (Array Int Int))) (po1 (Array Int (Array Int Int))))
    (=
      (opposite_com int (t2tb9 op1) (t2tb9 po1))
      (forall ((a Int) (b Int))
        (= (select (tb2t7
                     (infix_at
                       (infix_mngt int int)
                       int
                       (t2tb9 po1)
                       (t2tb8
                         (select (tb2t7
                                   (infix_at
                                     (infix_mngt int int)
                                     int
                                     (t2tb9 op1)
                                     (t2tb8 a))) b)))) b) a)))))

;; opposite_com'def
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (po1 uni))
      (and
        (=>
          (opposite_com im1 op1 po1)
          (forall ((a uni) (b uni))
            (=>
              (sort im1 a)
              (= (infix_at
                   im1
                   im1
                   (infix_at
                     (infix_mngt im1 im1)
                     im1
                     po1
                     (infix_at
                       im1
                       im1
                       (infix_at (infix_mngt im1 im1) im1 op1 a)
                       b))
                   b) a))))
        (=>
          (forall ((a uni) (b uni))
            (=>
              (sort im1 a)
              (=>
                (sort im1 b)
                (= (infix_at
                     im1
                     im1
                     (infix_at
                       (infix_mngt im1 im1)
                       im1
                       po1
                       (infix_at
                         im1
                         im1
                         (infix_at (infix_mngt im1 im1) im1 op1 a)
                         b))
                     b) a))))
          (opposite_com im1 op1 po1))))))

;; refl
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (a (Array Int Int)) (b (Array Int Int)))
    (=>
      (commut (infix_mngt int int) (t2tb3 op1))
      (= (select (select op1 a) b) (select (select op1 b) a)))))

;; refl
(assert
  (forall ((op1 (Array Int (Array Int Int))) (a Int) (b Int))
    (=>
      (commut int (t2tb9 op1))
      (= (select (tb2t7
                   (infix_at (infix_mngt int int) int (t2tb9 op1) (t2tb8 a))) b) (select 
      (tb2t7
        (infix_at (infix_mngt int int) int (t2tb9 op1) (t2tb8 b))) a)))))

;; refl
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (a uni) (b uni))
      (=>
        (commut im1 op1)
        (= (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a) b) 
        (infix_at
          im1
          im1
          (infix_at (infix_mngt im1 im1) im1 op1 b)
          a))))))

;; neutral
(declare-fun neutral (ty
  uni
  uni) Bool)

;; neutral'def
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (neut uni))
      (=
        (neutral im1 op1 neut)
        (and
          (op_neutral_left im1 op1 neut)
          (and (op_neutral_right im1 op1 neut) (op_assoc im1 op1)))))))

;; set_neutral
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (neut uni))
      (=>
        (op_neutral_left im1 op1 neut)
        (=>
          (op_neutral_right im1 op1 neut)
          (=> (op_assoc im1 op1) (neutral im1 op1 neut)))))))

;; has_neutral
(declare-fun has_neutral (ty
  uni) Bool)

;; has_neutral'def
(assert
  (forall ((im1 ty))
    (forall ((op1 uni))
      (and
        (=>
          (has_neutral im1 op1)
          (exists ((e uni)) (and (sort im1 e) (neutral im1 op1 e))))
        (=> (exists ((e uni)) (neutral im1 op1 e)) (has_neutral im1 op1))))))

;; iterates
(declare-fun iterates (ty
  uni
  uni) Bool)

;; iterates'def
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (neutral1 uni))
      (=
        (iterates im1 op1 neutral1)
        (and
          (op_neutral_left im1 op1 neutral1)
          (and (op_neutral_right im1 op1 neutral1) (op_assoc im1 op1)))))))

;; iterable
(declare-fun iterable (ty
  uni) Bool)

;; iterable'def
(assert
  (forall ((im1 ty))
    (forall ((op1 uni))
      (and
        (=>
          (iterable im1 op1)
          (exists ((e uni)) (and (sort im1 e) (iterates im1 op1 e))))
        (=> (exists ((e uni)) (iterates im1 op1 e)) (iterable im1 op1))))))

;; iterates_
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (neutral1 uni))
      (=>
        (op_neutral_left im1 op1 neutral1)
        (=>
          (op_neutral_right im1 op1 neutral1)
          (=>
            (op_assoc im1 op1)
            (and (iterates im1 op1 neutral1) (iterable im1 op1))))))))

;; neutral_elt
(declare-fun neutral_elt (ty
  uni) uni)

;; neutral_elt_sort
(assert
  (forall ((im1 ty)) (forall ((x uni)) (sort im1 (neutral_elt im1 x)))))

;; neutral_elt'spec
(assert
  (forall ((im1 ty))
    (forall ((op1 uni))
      (forall ((e uni))
        (=> (sort im1 e) (= (neutral im1 op1 e) (= (neutral_elt im1 op1) e)))))))

;; inverse_tuple
(declare-fun inverse_tuple (ty
  uni
  uni
  uni) Bool)

;; inverse_tuple'def
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (po1 uni) (neutral1 uni))
      (=
        (inverse_tuple im1 op1 po1 neutral1)
        (and
          (opposite_n im1 op1 po1 neutral1)
          (and (opposite im1 op1 po1) (opposite_com im1 op1 po1)))))))

;; iterate
(declare-fun iterate (ty
  ty
  uni
  uni
  uni) uni)

;; iterate_sort
(assert
  (forall ((a ty) (im1 ty))
    (forall ((x uni) (x1 uni) (x2 uni)) (sort im1 (iterate im1 a x x1 x2)))))

;; iterate'def
(assert
  (forall ((a ty))
    (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s uni) (f uni))
      (=>
        (commut (infix_mngt int int) (t2tb3 op1))
        (=>
          (=> (is_empty a s) (iterable (infix_mngt int int) (t2tb3 op1)))
          (ite (= (cardinal a s) 0)
            (= (tb2t7 (iterate (infix_mngt int int) a (t2tb3 op1) s f)) 
            (tb2t7
              (neutral_elt (infix_mngt int int) (t2tb3 op1))))
            (= (tb2t7 (iterate (infix_mngt int int) a (t2tb3 op1) s f)) (select (select op1 
            (tb2t7
              (iterate
                (infix_mngt int int)
                a
                (t2tb3 op1)
                (remove a (choose1 a s) s)
                f))) (tb2t7
                       (infix_at (infix_mngt int int) a f (choose1 a s)))))))))))

;; iterate'def
(assert
  (forall ((a ty))
    (forall ((op1 (Array Int (Array Int Int))) (s uni) (f uni))
      (=>
        (commut int (t2tb9 op1))
        (=>
          (=> (is_empty a s) (iterable int (t2tb9 op1)))
          (ite (= (cardinal a s) 0)
            (= (tb2t8 (iterate int a (t2tb9 op1) s f)) (tb2t8
                                                         (neutral_elt
                                                           int
                                                           (t2tb9 op1))))
            (= (tb2t8 (iterate int a (t2tb9 op1) s f)) (select (tb2t7
                                                                 (infix_at
                                                                   (infix_mngt
                                                                    int
                                                                    int)
                                                                   int
                                                                   (t2tb9
                                                                    op1)
                                                                   (iterate
                                                                    int
                                                                    a
                                                                    (t2tb9
                                                                    op1)
                                                                    (remove
                                                                    a
                                                                    (choose1
                                                                    a
                                                                    s)
                                                                    s)
                                                                    f))) 
            (tb2t8
              (infix_at int a f (choose1 a s)))))))))))

;; t2tb
(declare-fun t2tb22 ((Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (sort
      (infix_mngt
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int))))
      (t2tb22 x))))

;; tb2t
(declare-fun tb2t22 (uni) (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))

;; BridgeL
(assert
  (forall ((i (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (! (= (tb2t22 (t2tb22 i)) i) :pattern ((t2tb22 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb22 (tb2t22 j)) j) :pattern ((t2tb22 (tb2t22 j))) )))

;; t2tb
(declare-fun t2tb23 ((Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))))
    (sort
      (infix_mngt
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        (infix_mngt
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))))
      (t2tb23 x))))

;; tb2t
(declare-fun tb2t23 (uni) (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))

;; BridgeL
(assert
  (forall ((i (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))))
    (! (= (tb2t23 (t2tb23 i)) i) :pattern ((t2tb23 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb23 (tb2t23 j)) j) :pattern ((t2tb23 (tb2t23 j))) )))

;; iterate'def
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))) (s (set circuit)) (f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (=>
      (commut
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        (t2tb23 op1))
      (=>
        (=>
          (is_empty circuit1 (t2tb12 s))
          (iterable
            (infix_mngt
              (infix_mngt int int)
              (infix_mngt (infix_mngt int int) (infix_mngt int int)))
            (t2tb23 op1)))
        (ite (= (cardinal circuit1 (t2tb12 s)) 0)
          (= (tb2t3
               (iterate
                 (infix_mngt
                   (infix_mngt int int)
                   (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                 circuit1
                 (t2tb23 op1)
                 (t2tb12 s)
                 (t2tb2 f))) (tb2t3
                               (neutral_elt
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int)))
                                 (t2tb23 op1))))
          (= (tb2t3
               (iterate
                 (infix_mngt
                   (infix_mngt int int)
                   (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                 circuit1
                 (t2tb23 op1)
                 (t2tb12 s)
                 (t2tb2 f))) (tb2t3
                               (infix_at
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int)))
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int)))
                                 (infix_at
                                   (infix_mngt
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt
                                         (infix_mngt int int)
                                         (infix_mngt int int)))
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt
                                         (infix_mngt int int)
                                         (infix_mngt int int))))
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt int int)))
                                   (t2tb23 op1)
                                   (iterate
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt
                                         (infix_mngt int int)
                                         (infix_mngt int int)))
                                     circuit1
                                     (t2tb23 op1)
                                     (remove
                                       circuit1
                                       (choose1 circuit1 (t2tb12 s))
                                       (t2tb12 s))
                                     (t2tb2 f)))
                                 (t2tb3
                                   (select f (tb2t13
                                               (choose1 circuit1 (t2tb12 s)))))))))))))

;; t2tb
(declare-fun t2tb24 ((Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int)))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int)))))
    (sort
      (infix_mngt
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (infix_mngt (infix_mngt int int) (infix_mngt int int)))
      (t2tb24 x))))

;; tb2t
(declare-fun tb2t24 (uni) (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int))))

;; BridgeL
(assert
  (forall ((i (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int)))))
    (! (= (tb2t24 (t2tb24 i)) i) :pattern ((t2tb24 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb24 (tb2t24 j)) j) :pattern ((t2tb24 (tb2t24 j))) )))

;; t2tb
(declare-fun t2tb25 ((Array (Array (Array Int Int) (Array Int Int)) (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int))))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (Array (Array Int Int) (Array Int Int)) (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int))))))
    (sort
      (infix_mngt
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (infix_mngt
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (infix_mngt (infix_mngt int int) (infix_mngt int int))))
      (t2tb25 x))))

;; tb2t
(declare-fun tb2t25 (uni) (Array (Array (Array Int Int) (Array Int Int)) (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int)))))

;; BridgeL
(assert
  (forall ((i (Array (Array (Array Int Int) (Array Int Int)) (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int))))))
    (! (= (tb2t25 (t2tb25 i)) i) :pattern ((t2tb25 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb25 (tb2t25 j)) j) :pattern ((t2tb25 (tb2t25 j))) )))

;; iterate'def
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array Int Int)) (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int))))) (s (set (Array Int Int))) (f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (=>
      (commut
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (t2tb25 op1))
      (=>
        (=>
          (is_empty (infix_mngt int int) (t2tb15 s))
          (iterable
            (infix_mngt (infix_mngt int int) (infix_mngt int int))
            (t2tb25 op1)))
        (ite (= (cardinal (infix_mngt int int) (t2tb15 s)) 0)
          (= (tb2t5
               (iterate
                 (infix_mngt (infix_mngt int int) (infix_mngt int int))
                 (infix_mngt int int)
                 (t2tb25 op1)
                 (t2tb15 s)
                 (t2tb3 f))) (tb2t5
                               (neutral_elt
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt int int))
                                 (t2tb25 op1))))
          (= (tb2t5
               (iterate
                 (infix_mngt (infix_mngt int int) (infix_mngt int int))
                 (infix_mngt int int)
                 (t2tb25 op1)
                 (t2tb15 s)
                 (t2tb3 f))) (tb2t5
                               (infix_at
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt int int))
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt int int))
                                 (infix_at
                                   (infix_mngt
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt int int))
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt int int)))
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int))
                                   (t2tb25 op1)
                                   (iterate
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt int int))
                                     (infix_mngt int int)
                                     (t2tb25 op1)
                                     (remove
                                       (infix_mngt int int)
                                       (choose1
                                         (infix_mngt int int)
                                         (t2tb15 s))
                                       (t2tb15 s))
                                     (t2tb3 f)))
                                 (t2tb5
                                   (select f (tb2t7
                                               (choose1
                                                 (infix_mngt int int)
                                                 (t2tb15 s)))))))))))))

;; iterate'def
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (f (Array (Array Int Int) (Array Int Int))))
    (=>
      (commut (infix_mngt int int) (t2tb3 op1))
      (=>
        (=>
          (is_empty (infix_mngt int int) (t2tb15 s))
          (iterable (infix_mngt int int) (t2tb3 op1)))
        (ite (= (cardinal (infix_mngt int int) (t2tb15 s)) 0)
          (= (tb2t7
               (iterate
                 (infix_mngt int int)
                 (infix_mngt int int)
                 (t2tb3 op1)
                 (t2tb15 s)
                 (t2tb5 f))) (tb2t7
                               (neutral_elt (infix_mngt int int) (t2tb3 op1))))
          (= (tb2t7
               (iterate
                 (infix_mngt int int)
                 (infix_mngt int int)
                 (t2tb3 op1)
                 (t2tb15 s)
                 (t2tb5 f))) (select (select op1 (tb2t7
                                                   (iterate
                                                     (infix_mngt int int)
                                                     (infix_mngt int int)
                                                     (t2tb3 op1)
                                                     (remove
                                                       (infix_mngt int int)
                                                       (choose1
                                                         (infix_mngt int int)
                                                         (t2tb15 s))
                                                       (t2tb15 s))
                                                     (t2tb5 f)))) (select f 
          (tb2t7
            (choose1 (infix_mngt int int) (t2tb15 s)))))))))))

;; iterate'def
(assert
  (forall ((op1 (Array Int (Array Int Int))) (s (set Int)) (f (Array Int Int)))
    (=>
      (commut int (t2tb9 op1))
      (=>
        (=> (is_empty int (t2tb16 s)) (iterable int (t2tb9 op1)))
        (ite (= (cardinal int (t2tb16 s)) 0)
          (= (tb2t8 (iterate int int (t2tb9 op1) (t2tb16 s) (t2tb7 f))) 
          (tb2t8
            (neutral_elt int (t2tb9 op1))))
          (= (tb2t8 (iterate int int (t2tb9 op1) (t2tb16 s) (t2tb7 f))) (select 
          (tb2t7
            (infix_at
              (infix_mngt int int)
              int
              (t2tb9 op1)
              (iterate
                int
                int
                (t2tb9 op1)
                (remove int (choose1 int (t2tb16 s)) (t2tb16 s))
                (t2tb7 f)))) (select f (tb2t8 (choose1 int (t2tb16 s)))))))))))

;; iterate'def
(assert
  (forall ((a ty) (im1 ty))
    (forall ((op1 uni) (s uni) (f uni))
      (=>
        (commut im1 op1)
        (=>
          (=> (is_empty a s) (iterable im1 op1))
          (ite (= (cardinal a s) 0)
            (= (iterate im1 a op1 s f) (neutral_elt im1 op1))
            (= (iterate im1 a op1 s f) (infix_at
                                         im1
                                         im1
                                         (infix_at
                                           (infix_mngt im1 im1)
                                           im1
                                           op1
                                           (iterate
                                             im1
                                             a
                                             op1
                                             (remove a (choose1 a s) s)
                                             f))
                                         (infix_at im1 a f (choose1 a s))))))))))

;; Iterate_def_empty
(assert
  (forall ((a ty) (im1 ty))
    (forall ((op1 uni))
      (forall ((s uni))
        (forall ((f uni))
          (=>
            (commut im1 op1)
            (=>
              (iterable im1 op1)
              (=>
                (is_empty a s)
                (= (iterate im1 a op1 (empty a) f) (neutral_elt im1 op1))))))))))

;; Iterate_one
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))))
    (forall ((s (set circuit)))
      (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
        (forall ((x circuit))
          (=>
            (is_empty circuit1 (t2tb12 s))
            (=>
              (commut
                (infix_mngt
                  (infix_mngt int int)
                  (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                (t2tb23 op1))
              (= (tb2t3
                   (iterate
                     (infix_mngt
                       (infix_mngt int int)
                       (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                     circuit1
                     (t2tb23 op1)
                     (add circuit1 (t2tb13 x) (t2tb12 s))
                     (t2tb2 f))) (select f x)))))))))

;; Iterate_one
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array Int Int)) (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int))))))
    (forall ((s (set (Array Int Int))))
      (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
        (forall ((x (Array Int Int)))
          (=>
            (is_empty (infix_mngt int int) (t2tb15 s))
            (=>
              (commut
                (infix_mngt (infix_mngt int int) (infix_mngt int int))
                (t2tb25 op1))
              (= (tb2t5
                   (iterate
                     (infix_mngt (infix_mngt int int) (infix_mngt int int))
                     (infix_mngt int int)
                     (t2tb25 op1)
                     (add (infix_mngt int int) (t2tb7 x) (t2tb15 s))
                     (t2tb3 f))) (select f x)))))))))

;; Iterate_one
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (forall ((s (set (Array Int Int))))
      (forall ((f (Array (Array Int Int) (Array Int Int))))
        (forall ((x (Array Int Int)))
          (=>
            (is_empty (infix_mngt int int) (t2tb15 s))
            (=>
              (commut (infix_mngt int int) (t2tb3 op1))
              (= (tb2t7
                   (iterate
                     (infix_mngt int int)
                     (infix_mngt int int)
                     (t2tb3 op1)
                     (add (infix_mngt int int) (t2tb7 x) (t2tb15 s))
                     (t2tb5 f))) (select f x)))))))))

;; Iterate_one
(assert
  (forall ((op1 (Array Int (Array Int Int))))
    (forall ((s (set Int)))
      (forall ((f (Array Int Int)))
        (forall ((x Int))
          (=>
            (is_empty int (t2tb16 s))
            (=>
              (commut int (t2tb9 op1))
              (= (tb2t8
                   (iterate
                     int
                     int
                     (t2tb9 op1)
                     (add int (t2tb8 x) (t2tb16 s))
                     (t2tb7 f))) (select f x)))))))))

;; Iterate_one
(assert
  (forall ((a ty) (im1 ty))
    (forall ((op1 uni))
      (forall ((s uni))
        (forall ((f uni))
          (forall ((x uni))
            (=>
              (is_empty a s)
              (=>
                (commut im1 op1)
                (= (iterate im1 a op1 (add a x s) f) (infix_at im1 a f x))))))))))

;; Iterate_add
(assert
  (forall ((a ty))
    (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
      (forall ((s uni))
        (forall ((f uni))
          (forall ((x uni))
            (=>
              (< 0 (cardinal a s))
              (=>
                (commut (infix_mngt int int) (t2tb3 op1))
                (=>
                  (not (mem a x s))
                  (= (tb2t7
                       (iterate
                         (infix_mngt int int)
                         a
                         (t2tb3 op1)
                         (add a x s)
                         f)) (select (select op1 (tb2t7
                                                   (infix_at
                                                     (infix_mngt int int)
                                                     a
                                                     f
                                                     x))) (tb2t7
                                                            (iterate
                                                              (infix_mngt
                                                                int
                                                                int)
                                                              a
                                                              (t2tb3 op1)
                                                              s
                                                              f)))))))))))))

;; Iterate_add
(assert
  (forall ((a ty))
    (forall ((op1 (Array Int (Array Int Int))))
      (forall ((s uni))
        (forall ((f uni))
          (forall ((x uni))
            (=>
              (< 0 (cardinal a s))
              (=>
                (commut int (t2tb9 op1))
                (=>
                  (not (mem a x s))
                  (= (tb2t8 (iterate int a (t2tb9 op1) (add a x s) f)) (select 
                  (tb2t7
                    (infix_at
                      (infix_mngt int int)
                      int
                      (t2tb9 op1)
                      (infix_at int a f x))) (tb2t8
                                               (iterate
                                                 int
                                                 a
                                                 (t2tb9 op1)
                                                 s
                                                 f)))))))))))))

;; Iterate_add
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))))
    (forall ((s (set circuit)))
      (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
        (forall ((x circuit))
          (=>
            (< 0 (cardinal circuit1 (t2tb12 s)))
            (=>
              (commut
                (infix_mngt
                  (infix_mngt int int)
                  (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                (t2tb23 op1))
              (=>
                (not (mem circuit1 (t2tb13 x) (t2tb12 s)))
                (= (tb2t3
                     (iterate
                       (infix_mngt
                         (infix_mngt int int)
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt int int)))
                       circuit1
                       (t2tb23 op1)
                       (add circuit1 (t2tb13 x) (t2tb12 s))
                       (t2tb2 f))) (tb2t3
                                     (infix_at
                                       (infix_mngt
                                         (infix_mngt int int)
                                         (infix_mngt
                                           (infix_mngt int int)
                                           (infix_mngt int int)))
                                       (infix_mngt
                                         (infix_mngt int int)
                                         (infix_mngt
                                           (infix_mngt int int)
                                           (infix_mngt int int)))
                                       (infix_at
                                         (infix_mngt
                                           (infix_mngt
                                             (infix_mngt int int)
                                             (infix_mngt
                                               (infix_mngt int int)
                                               (infix_mngt int int)))
                                           (infix_mngt
                                             (infix_mngt int int)
                                             (infix_mngt
                                               (infix_mngt int int)
                                               (infix_mngt int int))))
                                         (infix_mngt
                                           (infix_mngt int int)
                                           (infix_mngt
                                             (infix_mngt int int)
                                             (infix_mngt int int)))
                                         (t2tb23 op1)
                                         (t2tb3 (select f x)))
                                       (iterate
                                         (infix_mngt
                                           (infix_mngt int int)
                                           (infix_mngt
                                             (infix_mngt int int)
                                             (infix_mngt int int)))
                                         circuit1
                                         (t2tb23 op1)
                                         (t2tb12 s)
                                         (t2tb2 f)))))))))))))

;; Iterate_add
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array Int Int)) (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int))))))
    (forall ((s (set (Array Int Int))))
      (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
        (forall ((x (Array Int Int)))
          (=>
            (< 0 (cardinal (infix_mngt int int) (t2tb15 s)))
            (=>
              (commut
                (infix_mngt (infix_mngt int int) (infix_mngt int int))
                (t2tb25 op1))
              (=>
                (not (mem (infix_mngt int int) (t2tb7 x) (t2tb15 s)))
                (= (tb2t5
                     (iterate
                       (infix_mngt (infix_mngt int int) (infix_mngt int int))
                       (infix_mngt int int)
                       (t2tb25 op1)
                       (add (infix_mngt int int) (t2tb7 x) (t2tb15 s))
                       (t2tb3 f))) (tb2t5
                                     (infix_at
                                       (infix_mngt
                                         (infix_mngt int int)
                                         (infix_mngt int int))
                                       (infix_mngt
                                         (infix_mngt int int)
                                         (infix_mngt int int))
                                       (infix_at
                                         (infix_mngt
                                           (infix_mngt
                                             (infix_mngt int int)
                                             (infix_mngt int int))
                                           (infix_mngt
                                             (infix_mngt int int)
                                             (infix_mngt int int)))
                                         (infix_mngt
                                           (infix_mngt int int)
                                           (infix_mngt int int))
                                         (t2tb25 op1)
                                         (t2tb5 (select f x)))
                                       (iterate
                                         (infix_mngt
                                           (infix_mngt int int)
                                           (infix_mngt int int))
                                         (infix_mngt int int)
                                         (t2tb25 op1)
                                         (t2tb15 s)
                                         (t2tb3 f)))))))))))))

;; Iterate_add
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (forall ((s (set (Array Int Int))))
      (forall ((f (Array (Array Int Int) (Array Int Int))))
        (forall ((x (Array Int Int)))
          (=>
            (< 0 (cardinal (infix_mngt int int) (t2tb15 s)))
            (=>
              (commut (infix_mngt int int) (t2tb3 op1))
              (=>
                (not (mem (infix_mngt int int) (t2tb7 x) (t2tb15 s)))
                (= (tb2t7
                     (iterate
                       (infix_mngt int int)
                       (infix_mngt int int)
                       (t2tb3 op1)
                       (add (infix_mngt int int) (t2tb7 x) (t2tb15 s))
                       (t2tb5 f))) (select (select op1 (select f x)) 
                (tb2t7
                  (iterate
                    (infix_mngt int int)
                    (infix_mngt int int)
                    (t2tb3 op1)
                    (t2tb15 s)
                    (t2tb5 f)))))))))))))

;; Iterate_add
(assert
  (forall ((op1 (Array Int (Array Int Int))))
    (forall ((s (set Int)))
      (forall ((f (Array Int Int)))
        (forall ((x Int))
          (=>
            (< 0 (cardinal int (t2tb16 s)))
            (=>
              (commut int (t2tb9 op1))
              (=>
                (not (mem int (t2tb8 x) (t2tb16 s)))
                (= (tb2t8
                     (iterate
                       int
                       int
                       (t2tb9 op1)
                       (add int (t2tb8 x) (t2tb16 s))
                       (t2tb7 f))) (select (tb2t7
                                             (infix_at
                                               (infix_mngt int int)
                                               int
                                               (t2tb9 op1)
                                               (t2tb8 (select f x)))) 
                (tb2t8
                  (iterate int int (t2tb9 op1) (t2tb16 s) (t2tb7 f)))))))))))))

;; Iterate_add
(assert
  (forall ((a ty) (im1 ty))
    (forall ((op1 uni))
      (forall ((s uni))
        (forall ((f uni))
          (forall ((x uni))
            (=>
              (< 0 (cardinal a s))
              (=>
                (commut im1 op1)
                (=>
                  (not (mem a x s))
                  (= (iterate im1 a op1 (add a x s) f) (infix_at
                                                         im1
                                                         im1
                                                         (infix_at
                                                           (infix_mngt
                                                             im1
                                                             im1)
                                                           im1
                                                           op1
                                                           (infix_at
                                                             im1
                                                             a
                                                             f
                                                             x))
                                                         (iterate
                                                           im1
                                                           a
                                                           op1
                                                           s
                                                           f))))))))))))

;; minus_zero
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (po1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (a (Array Int Int)))
    (=>
      (iterable (infix_mngt int int) (t2tb3 op1))
      (=>
        (inverse_tuple
          (infix_mngt int int)
          (t2tb3 op1)
          (t2tb3 po1)
          (neutral_elt (infix_mngt int int) (t2tb3 op1)))
        (= (select (select po1 a) (tb2t7
                                    (neutral_elt
                                      (infix_mngt int int)
                                      (t2tb3 op1)))) a)))))

;; minus_zero
(assert
  (forall ((op1 (Array Int (Array Int Int))) (po1 (Array Int (Array Int Int))) (a Int))
    (=>
      (iterable int (t2tb9 op1))
      (=>
        (inverse_tuple
          int
          (t2tb9 op1)
          (t2tb9 po1)
          (neutral_elt int (t2tb9 op1)))
        (= (select (tb2t7
                     (infix_at
                       (infix_mngt int int)
                       int
                       (t2tb9 po1)
                       (t2tb8 a))) (tb2t8 (neutral_elt int (t2tb9 op1)))) a)))))

;; minus_zero
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (po1 uni) (a uni))
      (=>
        (sort im1 a)
        (=>
          (iterable im1 op1)
          (=>
            (inverse_tuple im1 op1 po1 (neutral_elt im1 op1))
            (= (infix_at
                 im1
                 im1
                 (infix_at (infix_mngt im1 im1) im1 po1 a)
                 (neutral_elt im1 op1)) a)))))))

;; unic
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (po1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (a (Array Int Int)) (b (Array Int Int)) (c (Array Int Int)))
    (=>
      (iterable (infix_mngt int int) (t2tb3 op1))
      (=>
        (commut (infix_mngt int int) (t2tb3 op1))
        (=>
          (= (select (select op1 a) b) (select (select op1 a) c))
          (=>
            (inverse_tuple
              (infix_mngt int int)
              (t2tb3 op1)
              (t2tb3 po1)
              (neutral_elt (infix_mngt int int) (t2tb3 op1)))
            (= b c)))))))

;; unic
(assert
  (forall ((op1 (Array Int (Array Int Int))) (po1 (Array Int (Array Int Int))) (a Int) (b Int) (c Int))
    (=>
      (iterable int (t2tb9 op1))
      (=>
        (commut int (t2tb9 op1))
        (=>
          (= (select (tb2t7
                       (infix_at
                         (infix_mngt int int)
                         int
                         (t2tb9 op1)
                         (t2tb8 a))) b) (select (tb2t7
                                                  (infix_at
                                                    (infix_mngt int int)
                                                    int
                                                    (t2tb9 op1)
                                                    (t2tb8 a))) c))
          (=>
            (inverse_tuple
              int
              (t2tb9 op1)
              (t2tb9 po1)
              (neutral_elt int (t2tb9 op1)))
            (= b c)))))))

;; unic
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (po1 uni) (a uni) (b uni) (c uni))
      (=>
        (sort im1 b)
        (=>
          (sort im1 c)
          (=>
            (iterable im1 op1)
            (=>
              (commut im1 op1)
              (=>
                (= (infix_at
                     im1
                     im1
                     (infix_at (infix_mngt im1 im1) im1 op1 a)
                     b) (infix_at
                          im1
                          im1
                          (infix_at (infix_mngt im1 im1) im1 op1 a)
                          c))
                (=>
                  (inverse_tuple im1 op1 po1 (neutral_elt im1 op1))
                  (= b c))))))))))

;; substract_comm
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (po1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (a (Array Int Int)) (b (Array Int Int)) (c (Array Int Int)))
    (=>
      (iterable (infix_mngt int int) (t2tb3 op1))
      (=>
        (commut (infix_mngt int int) (t2tb3 op1))
        (=>
          (inverse_tuple
            (infix_mngt int int)
            (t2tb3 op1)
            (t2tb3 po1)
            (neutral_elt (infix_mngt int int) (t2tb3 op1)))
          (and
            (= (select (select po1 (select (select op1 a) b)) a) b)
            (and
              (= (select (select po1 (select (select op1 b) a)) a) b)
              (and
                (= (select (select po1 a) (select (select po1 b) c)) (select (select op1 (select (select po1 a) b)) c))
                (= (select (select po1 (select (select op1 a) b)) c) (select (select op1 a) (select (select po1 b) c)))))))))))

;; substract_comm
(assert
  (forall ((op1 (Array Int (Array Int Int))) (po1 (Array Int (Array Int Int))) (a Int) (b Int) (c Int))
    (=>
      (iterable int (t2tb9 op1))
      (=>
        (commut int (t2tb9 op1))
        (=>
          (inverse_tuple
            int
            (t2tb9 op1)
            (t2tb9 po1)
            (neutral_elt int (t2tb9 op1)))
          (and
            (= (select (tb2t7
                         (infix_at
                           (infix_mngt int int)
                           int
                           (t2tb9 po1)
                           (t2tb8
                             (select (tb2t7
                                       (infix_at
                                         (infix_mngt int int)
                                         int
                                         (t2tb9 op1)
                                         (t2tb8 a))) b)))) a) b)
            (and
              (= (select (tb2t7
                           (infix_at
                             (infix_mngt int int)
                             int
                             (t2tb9 po1)
                             (t2tb8
                               (select (tb2t7
                                         (infix_at
                                           (infix_mngt int int)
                                           int
                                           (t2tb9 op1)
                                           (t2tb8 b))) a)))) a) b)
              (and
                (= (select (tb2t7
                             (infix_at
                               (infix_mngt int int)
                               int
                               (t2tb9 po1)
                               (t2tb8 a))) (select (tb2t7
                                                     (infix_at
                                                       (infix_mngt int int)
                                                       int
                                                       (t2tb9 po1)
                                                       (t2tb8 b))) c)) (select 
                (tb2t7
                  (infix_at
                    (infix_mngt int int)
                    int
                    (t2tb9 op1)
                    (t2tb8
                      (select (tb2t7
                                (infix_at
                                  (infix_mngt int int)
                                  int
                                  (t2tb9 po1)
                                  (t2tb8 a))) b)))) c))
                (= (select (tb2t7
                             (infix_at
                               (infix_mngt int int)
                               int
                               (t2tb9 po1)
                               (t2tb8
                                 (select (tb2t7
                                           (infix_at
                                             (infix_mngt int int)
                                             int
                                             (t2tb9 op1)
                                             (t2tb8 a))) b)))) c) (select 
                (tb2t7
                  (infix_at (infix_mngt int int) int (t2tb9 op1) (t2tb8 a))) (select 
                (tb2t7
                  (infix_at (infix_mngt int int) int (t2tb9 po1) (t2tb8 b))) c)))))))))))

;; substract_comm
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (po1 uni) (a uni) (b uni) (c uni))
      (=>
        (sort im1 b)
        (=>
          (iterable im1 op1)
          (=>
            (commut im1 op1)
            (=>
              (inverse_tuple im1 op1 po1 (neutral_elt im1 op1))
              (and
                (= (infix_at
                     im1
                     im1
                     (infix_at
                       (infix_mngt im1 im1)
                       im1
                       po1
                       (infix_at
                         im1
                         im1
                         (infix_at (infix_mngt im1 im1) im1 op1 a)
                         b))
                     a) b)
                (and
                  (= (infix_at
                       im1
                       im1
                       (infix_at
                         (infix_mngt im1 im1)
                         im1
                         po1
                         (infix_at
                           im1
                           im1
                           (infix_at (infix_mngt im1 im1) im1 op1 b)
                           a))
                       a) b)
                  (and
                    (= (infix_at
                         im1
                         im1
                         (infix_at (infix_mngt im1 im1) im1 po1 a)
                         (infix_at
                           im1
                           im1
                           (infix_at (infix_mngt im1 im1) im1 po1 b)
                           c)) (infix_at
                                 im1
                                 im1
                                 (infix_at
                                   (infix_mngt im1 im1)
                                   im1
                                   op1
                                   (infix_at
                                     im1
                                     im1
                                     (infix_at
                                       (infix_mngt im1 im1)
                                       im1
                                       po1
                                       a)
                                     b))
                                 c))
                    (= (infix_at
                         im1
                         im1
                         (infix_at
                           (infix_mngt im1 im1)
                           im1
                           po1
                           (infix_at
                             im1
                             im1
                             (infix_at (infix_mngt im1 im1) im1 op1 a)
                             b))
                         c) (infix_at
                              im1
                              im1
                              (infix_at (infix_mngt im1 im1) im1 op1 a)
                              (infix_at
                                im1
                                im1
                                (infix_at (infix_mngt im1 im1) im1 po1 b)
                                c)))))))))))))

;; int_iterate
(declare-fun int_iterate (ty
  uni
  uni
  Int
  Int) uni)

;; int_iterate_sort
(assert
  (forall ((im1 ty))
    (forall ((x uni) (x1 uni) (x2 Int) (x3 Int))
      (sort im1 (int_iterate im1 x x1 x2 x3)))))

;; int_iterate'def
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (f (Array Int (Array Int Int))) (i Int) (j Int))
    (=>
      (=> (<= j i) (iterable (infix_mngt int int) (t2tb3 op1)))
      (ite (<= j i)
        (= (tb2t7
             (int_iterate (infix_mngt int int) (t2tb3 op1) (t2tb9 f) i j)) 
        (tb2t7
          (neutral_elt (infix_mngt int int) (t2tb3 op1))))
        (ite (= j (+ i 1))
          (= (tb2t7
               (int_iterate (infix_mngt int int) (t2tb3 op1) (t2tb9 f) i j)) 
          (tb2t7
            (infix_at (infix_mngt int int) int (t2tb9 f) (t2tb8 i))))
          (= (tb2t7
               (int_iterate (infix_mngt int int) (t2tb3 op1) (t2tb9 f) i j)) (select (select op1 
          (tb2t7
            (infix_at (infix_mngt int int) int (t2tb9 f) (t2tb8 i)))) 
          (tb2t7
            (int_iterate
              (infix_mngt int int)
              (t2tb3 op1)
              (t2tb9 f)
              (+ i 1)
              j)))))))))

;; int_iterate'def
(assert
  (forall ((op1 (Array Int (Array Int Int))) (f (Array Int Int)) (i Int) (j Int))
    (=>
      (=> (<= j i) (iterable int (t2tb9 op1)))
      (ite (<= j i)
        (= (tb2t8 (int_iterate int (t2tb9 op1) (t2tb7 f) i j)) (tb2t8
                                                                 (neutral_elt
                                                                   int
                                                                   (t2tb9
                                                                    op1))))
        (ite (= j (+ i 1))
          (= (tb2t8 (int_iterate int (t2tb9 op1) (t2tb7 f) i j)) (select f i))
          (= (tb2t8 (int_iterate int (t2tb9 op1) (t2tb7 f) i j)) (select 
          (tb2t7
            (infix_at
              (infix_mngt int int)
              int
              (t2tb9 op1)
              (t2tb8 (select f i)))) (tb2t8
                                       (int_iterate
                                         int
                                         (t2tb9 op1)
                                         (t2tb7 f)
                                         (+ i 1)
                                         j)))))))))

;; int_iterate'def
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (f uni) (i Int) (j Int))
      (=>
        (=> (<= j i) (iterable im1 op1))
        (ite (<= j i)
          (= (int_iterate im1 op1 f i j) (neutral_elt im1 op1))
          (ite (= j (+ i 1))
            (= (int_iterate im1 op1 f i j) (infix_at im1 int f (t2tb8 i)))
            (= (int_iterate im1 op1 f i j) (infix_at
                                             im1
                                             im1
                                             (infix_at
                                               (infix_mngt im1 im1)
                                               im1
                                               op1
                                               (infix_at im1 int f (t2tb8 i)))
                                             (int_iterate
                                               im1
                                               op1
                                               f
                                               (+ i 1)
                                               j)))))))))

;; int_iterate'spec
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (f (Array Int (Array Int Int))) (i Int) (j Int))
    (=>
      (=> (<= j i) (iterable (infix_mngt int int) (t2tb3 op1)))
      (and
        (=>
          (<= j i)
          (= (tb2t7
               (int_iterate (infix_mngt int int) (t2tb3 op1) (t2tb9 f) i j)) 
          (tb2t7
            (neutral_elt (infix_mngt int int) (t2tb3 op1)))))
        (=>
          (= j (+ i 1))
          (= (tb2t7
               (int_iterate (infix_mngt int int) (t2tb3 op1) (t2tb9 f) i j)) (select (select op1 
          (tb2t7
            (infix_at (infix_mngt int int) int (t2tb9 f) (t2tb8 i)))) 
          (tb2t7
            (neutral_elt (infix_mngt int int) (t2tb3 op1))))))))))

;; int_iterate'spec
(assert
  (forall ((op1 (Array Int (Array Int Int))) (f (Array Int Int)) (i Int) (j Int))
    (=>
      (=> (<= j i) (iterable int (t2tb9 op1)))
      (and
        (=>
          (<= j i)
          (= (tb2t8 (int_iterate int (t2tb9 op1) (t2tb7 f) i j)) (tb2t8
                                                                   (neutral_elt
                                                                    int
                                                                    (t2tb9
                                                                    op1)))))
        (=>
          (= j (+ i 1))
          (= (tb2t8 (int_iterate int (t2tb9 op1) (t2tb7 f) i j)) (select 
          (tb2t7
            (infix_at
              (infix_mngt int int)
              int
              (t2tb9 op1)
              (t2tb8 (select f i)))) (tb2t8 (neutral_elt int (t2tb9 op1))))))))))

;; int_iterate'spec
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (f uni) (i Int) (j Int))
      (=>
        (=> (<= j i) (iterable im1 op1))
        (and
          (=> (<= j i) (= (int_iterate im1 op1 f i j) (neutral_elt im1 op1)))
          (=>
            (= j (+ i 1))
            (= (int_iterate im1 op1 f i j) (infix_at
                                             im1
                                             im1
                                             (infix_at
                                               (infix_mngt im1 im1)
                                               im1
                                               op1
                                               (infix_at im1 int f (t2tb8 i)))
                                             (neutral_elt im1 op1)))))))))

;; int_int_iterate
(declare-fun int_int_iterate (ty
  uni
  uni
  Int
  Int
  Int
  Int) uni)

;; int_int_iterate_sort
(assert
  (forall ((im1 ty))
    (forall ((x uni) (x1 uni) (x2 Int) (x3 Int) (x4 Int) (x5 Int))
      (sort im1 (int_int_iterate im1 x x1 x2 x3 x4 x5)))))

;; t2tb
(declare-fun t2tb26 ((Array Int (Array Int (Array Int Int)))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array Int (Array Int (Array Int Int)))))
    (sort (infix_mngt int (infix_mngt int (infix_mngt int int))) (t2tb26 x))))

;; tb2t
(declare-fun tb2t26 (uni) (Array Int (Array Int (Array Int Int))))

;; BridgeL
(assert
  (forall ((i (Array Int (Array Int (Array Int Int)))))
    (! (= (tb2t26 (t2tb26 i)) i) :pattern ((t2tb26 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb26 (tb2t26 j)) j) :pattern ((t2tb26 (tb2t26 j))) )))

;; int_int_iterate'def
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (f (Array Int (Array Int (Array Int Int)))) (i Int) (j Int) (k Int) (l Int))
    (=>
      (iterable (infix_mngt int int) (t2tb3 op1))
      (ite (<= j i)
        (= (tb2t7
             (int_int_iterate
               (infix_mngt int int)
               (t2tb3 op1)
               (t2tb26 f)
               i
               j
               k
               l)) (tb2t7 (neutral_elt (infix_mngt int int) (t2tb3 op1))))
        (= (tb2t7
             (int_int_iterate
               (infix_mngt int int)
               (t2tb3 op1)
               (t2tb26 f)
               i
               j
               k
               l)) (select (select op1 (tb2t7
                                         (int_iterate
                                           (infix_mngt int int)
                                           (t2tb3 op1)
                                           (infix_at
                                             (infix_mngt
                                               int
                                               (infix_mngt int int))
                                             int
                                             (t2tb26 f)
                                             (t2tb8 i))
                                           k
                                           l))) (tb2t7
                                                  (int_int_iterate
                                                    (infix_mngt int int)
                                                    (t2tb3 op1)
                                                    (t2tb26 f)
                                                    (+ i 1)
                                                    j
                                                    k
                                                    l))))))))

;; int_int_iterate'def
(assert
  (forall ((op1 (Array Int (Array Int Int))) (f (Array Int (Array Int Int))) (i Int) (j Int) (k Int) (l Int))
    (=>
      (iterable int (t2tb9 op1))
      (ite (<= j i)
        (= (tb2t8 (int_int_iterate int (t2tb9 op1) (t2tb9 f) i j k l)) 
        (tb2t8
          (neutral_elt int (t2tb9 op1))))
        (= (tb2t8 (int_int_iterate int (t2tb9 op1) (t2tb9 f) i j k l)) (select 
        (tb2t7
          (infix_at
            (infix_mngt int int)
            int
            (t2tb9 op1)
            (int_iterate
              int
              (t2tb9 op1)
              (infix_at (infix_mngt int int) int (t2tb9 f) (t2tb8 i))
              k
              l))) (tb2t8
                     (int_int_iterate
                       int
                       (t2tb9 op1)
                       (t2tb9 f)
                       (+ i 1)
                       j
                       k
                       l))))))))

;; int_int_iterate'def
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (f uni) (i Int) (j Int) (k Int) (l Int))
      (=>
        (iterable im1 op1)
        (ite (<= j i)
          (= (int_int_iterate im1 op1 f i j k l) (neutral_elt im1 op1))
          (= (int_int_iterate im1 op1 f i j k l) (infix_at
                                                   im1
                                                   im1
                                                   (infix_at
                                                     (infix_mngt im1 im1)
                                                     im1
                                                     op1
                                                     (int_iterate
                                                       im1
                                                       op1
                                                       (infix_at
                                                         (infix_mngt int im1)
                                                         int
                                                         f
                                                         (t2tb8 i))
                                                       k
                                                       l))
                                                   (int_int_iterate
                                                     im1
                                                     op1
                                                     f
                                                     (+ i 1)
                                                     j
                                                     k
                                                     l))))))))

;; to_set'spec
(assert
  (forall ((a ty))
    (forall ((e uni))
      (=>
        (sort a e)
        (and
          (forall ((b uni)) (=> (= b e) (mem a b (add a e (empty a)))))
          (and
            (= (cardinal a (add a e (empty a))) 1)
            (forall ((b uni))
              (=> (sort a b) (=> (mem a b (add a e (empty a))) (= b e))))))))))

;; to_fset
(declare-fun to_fset (Int
  Int) (set Int))

;; to_fset'spec
(assert
  (forall ((i Int) (j Int))
    (and
      (=> (< i j) (= (cardinal int (t2tb16 (to_fset i j))) (- j i)))
      (and
        (=> (<= j i) (is_empty int (t2tb16 (to_fset i j))))
        (forall ((k Int))
          (=
            (mem int (t2tb8 k) (t2tb16 (to_fset i j)))
            (and (<= i k) (< k j))))))))

;; to_fset_bounds
(assert
  (forall ((i Int) (k Int) (j Int))
    (=>
      (< i j)
      (=> (mem int (t2tb8 k) (t2tb16 (to_fset i j))) (and (<= i k) (< k j))))))

;; to_fset_unit_ext
(assert
  (forall ((i Int) (j Int))
    (=>
      (< i j)
      (= (to_fset i j) (tb2t16
                         (add int (t2tb8 i) (t2tb16 (to_fset (+ i 1) j))))))))

;; to_fset_ext
(assert
  (forall ((i Int) (iqt Int) (j Int))
    (=>
      (and (<= i iqt) (<= iqt j))
      (= (to_fset i j) (tb2t16
                         (union1
                           int
                           (t2tb16 (to_fset i iqt))
                           (t2tb16 (to_fset iqt j))))))))

;; card_fset
(assert
  (forall ((n Int))
    (=> (<= 0 n) (= (cardinal int (t2tb16 (to_fset 0 n))) n))))

;; card_fset_gen
(assert
  (forall ((i Int) (j Int))
    (=> (<= i j) (= (cardinal int (t2tb16 (to_fset i j))) (- j i)))))

;; set_mem_to_fset
(assert
  (forall ((i Int) (k Int) (j Int))
    (=> (and (<= i k) (< k j)) (mem int (t2tb8 k) (t2tb16 (to_fset i j))))))

;; element
(declare-fun element (ty
  uni) uni)

;; element_sort
(assert (forall ((a ty)) (forall ((x uni)) (sort a (element a x)))))

;; element'def
(assert
  (forall ((a ty))
    (forall ((s uni))
      (=> (= (cardinal a s) 1) (= (element a s) (choose1 a s))))))

;; cardone
(assert
  (forall ((a ty))
    (forall ((s uni) (a1 uni))
      (=>
        (sort a a1)
        (=>
          (forall ((b uni)) (=> (sort a b) (= (mem a b s) (= b a1))))
          (=>
            (< 0 (cardinal a s))
            (and (= (cardinal a s) 1) (= (element a s) a1))))))))

;; set_cardone
(assert
  (forall ((a ty))
    (forall ((s uni))
      (=>
        (< 0 (cardinal a s))
        (=>
          (exists ((a1 uni))
            (and
              (sort a a1)
              (forall ((b uni)) (=> (sort a b) (= (mem a b s) (= b a1))))))
          (= (cardinal a s) 1))))))

;; get_cardone
(assert
  (forall ((a ty))
    (forall ((s uni))
      (=>
        (= (cardinal a s) 1)
        (exists ((a1 uni))
          (and
            (sort a a1)
            (forall ((b uni)) (=> (sort a b) (= (mem a b s) (= b a1))))))))))

;; get_cardone_elt
(assert
  (forall ((a ty))
    (forall ((s uni) (e uni))
      (=>
        (sort a e)
        (=> (= (cardinal a s) 1) (=> (mem a e s) (= e (element a s))))))))

;; set_cardone_elt
(assert
  (forall ((a ty))
    (forall ((s uni) (a1 uni))
      (=>
        (sort a a1)
        (=>
          (forall ((b uni)) (=> (sort a b) (= (mem a b s) (= b a1))))
          (and (= (cardinal a s) 1) (= (element a s) a1)))))))

;; set_cardone_elt_
(assert
  (forall ((a ty))
    (forall ((s uni) (a1 uni))
      (=>
        (sort a a1)
        (=>
          (forall ((b uni)) (=> (sort a b) (= (mem a b s) (= b a1))))
          (= (cardinal a s) 1))))))

;; cardzero
(assert
  (forall ((a ty))
    (forall ((s uni))
      (=>
        (forall ((b uni)) (=> (sort a b) (not (mem a b s))))
        (= (cardinal a s) 0)))))

;; get_choose_cardone
(assert
  (forall ((a ty))
    (forall ((s uni) (e uni))
      (=>
        (sort a e)
        (=> (= (cardinal a s) 1) (=> (mem a e s) (= (choose1 a s) e)))))))

;; iterate_empty
(assert
  (forall ((a ty) (im1 ty))
    (forall ((op1 uni) (s uni) (t uni))
      (=>
        (is_empty a s)
        (=>
          (commut im1 op1)
          (=>
            (iterable im1 op1)
            (= (iterate im1 a op1 s t) (neutral_elt im1 op1))))))))

;; iterate_one
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))) (s (set circuit)) (t (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (=>
      (= (cardinal circuit1 (t2tb12 s)) 1)
      (=>
        (commut
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          (t2tb23 op1))
        (= (tb2t3
             (iterate
               (infix_mngt
                 (infix_mngt int int)
                 (infix_mngt (infix_mngt int int) (infix_mngt int int)))
               circuit1
               (t2tb23 op1)
               (t2tb12 s)
               (t2tb2 t))) (select t (tb2t13 (choose1 circuit1 (t2tb12 s)))))))))

;; iterate_one
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array Int Int)) (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int))))) (s (set (Array Int Int))) (t (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (=>
      (= (cardinal (infix_mngt int int) (t2tb15 s)) 1)
      (=>
        (commut
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (t2tb25 op1))
        (= (tb2t5
             (iterate
               (infix_mngt (infix_mngt int int) (infix_mngt int int))
               (infix_mngt int int)
               (t2tb25 op1)
               (t2tb15 s)
               (t2tb3 t))) (select t (tb2t7
                                       (choose1
                                         (infix_mngt int int)
                                         (t2tb15 s)))))))))

;; iterate_one
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (t (Array (Array Int Int) (Array Int Int))))
    (=>
      (= (cardinal (infix_mngt int int) (t2tb15 s)) 1)
      (=>
        (commut (infix_mngt int int) (t2tb3 op1))
        (= (tb2t7
             (iterate
               (infix_mngt int int)
               (infix_mngt int int)
               (t2tb3 op1)
               (t2tb15 s)
               (t2tb5 t))) (select t (tb2t7
                                       (choose1
                                         (infix_mngt int int)
                                         (t2tb15 s)))))))))

;; iterate_one
(assert
  (forall ((op1 (Array Int (Array Int Int))) (s (set Int)) (t (Array Int Int)))
    (=>
      (= (cardinal int (t2tb16 s)) 1)
      (=>
        (commut int (t2tb9 op1))
        (= (tb2t8 (iterate int int (t2tb9 op1) (t2tb16 s) (t2tb7 t))) (select t 
        (tb2t8
          (choose1 int (t2tb16 s)))))))))

;; iterate_one
(assert
  (forall ((a ty) (im1 ty))
    (forall ((op1 uni) (s uni) (t uni))
      (=>
        (= (cardinal a s) 1)
        (=>
          (commut im1 op1)
          (= (iterate im1 a op1 s t) (infix_at im1 a t (choose1 a s))))))))

;; iterate_add
(assert
  (forall ((a ty))
    (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s uni) (f uni) (x uni))
      (=>
        (commut (infix_mngt int int) (t2tb3 op1))
        (=>
          (iterable (infix_mngt int int) (t2tb3 op1))
          (=>
            (not (mem a x s))
            (= (tb2t7
                 (iterate (infix_mngt int int) a (t2tb3 op1) (add a x s) f)) (select (select op1 
            (tb2t7
              (infix_at (infix_mngt int int) a f x))) (tb2t7
                                                        (iterate
                                                          (infix_mngt
                                                            int
                                                            int)
                                                          a
                                                          (t2tb3 op1)
                                                          s
                                                          f))))))))))

;; iterate_add
(assert
  (forall ((a ty))
    (forall ((op1 (Array Int (Array Int Int))) (s uni) (f uni) (x uni))
      (=>
        (commut int (t2tb9 op1))
        (=>
          (iterable int (t2tb9 op1))
          (=>
            (not (mem a x s))
            (= (tb2t8 (iterate int a (t2tb9 op1) (add a x s) f)) (select 
            (tb2t7
              (infix_at
                (infix_mngt int int)
                int
                (t2tb9 op1)
                (infix_at int a f x))) (tb2t8
                                         (iterate int a (t2tb9 op1) s f))))))))))

;; iterate_add
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))) (s (set circuit)) (f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (x circuit))
    (=>
      (commut
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        (t2tb23 op1))
      (=>
        (iterable
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          (t2tb23 op1))
        (=>
          (not (mem circuit1 (t2tb13 x) (t2tb12 s)))
          (= (tb2t3
               (iterate
                 (infix_mngt
                   (infix_mngt int int)
                   (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                 circuit1
                 (t2tb23 op1)
                 (add circuit1 (t2tb13 x) (t2tb12 s))
                 (t2tb2 f))) (tb2t3
                               (infix_at
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int)))
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int)))
                                 (infix_at
                                   (infix_mngt
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt
                                         (infix_mngt int int)
                                         (infix_mngt int int)))
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt
                                         (infix_mngt int int)
                                         (infix_mngt int int))))
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt int int)))
                                   (t2tb23 op1)
                                   (t2tb3 (select f x)))
                                 (iterate
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt int int)))
                                   circuit1
                                   (t2tb23 op1)
                                   (t2tb12 s)
                                   (t2tb2 f))))))))))

;; iterate_add
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array Int Int)) (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int))))) (s (set (Array Int Int))) (f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (x (Array Int Int)))
    (=>
      (commut
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (t2tb25 op1))
      (=>
        (iterable
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (t2tb25 op1))
        (=>
          (not (mem (infix_mngt int int) (t2tb7 x) (t2tb15 s)))
          (= (tb2t5
               (iterate
                 (infix_mngt (infix_mngt int int) (infix_mngt int int))
                 (infix_mngt int int)
                 (t2tb25 op1)
                 (add (infix_mngt int int) (t2tb7 x) (t2tb15 s))
                 (t2tb3 f))) (tb2t5
                               (infix_at
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt int int))
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt int int))
                                 (infix_at
                                   (infix_mngt
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt int int))
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt int int)))
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int))
                                   (t2tb25 op1)
                                   (t2tb5 (select f x)))
                                 (iterate
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int))
                                   (infix_mngt int int)
                                   (t2tb25 op1)
                                   (t2tb15 s)
                                   (t2tb3 f))))))))))

;; iterate_add
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (f (Array (Array Int Int) (Array Int Int))) (x (Array Int Int)))
    (=>
      (commut (infix_mngt int int) (t2tb3 op1))
      (=>
        (iterable (infix_mngt int int) (t2tb3 op1))
        (=>
          (not (mem (infix_mngt int int) (t2tb7 x) (t2tb15 s)))
          (= (tb2t7
               (iterate
                 (infix_mngt int int)
                 (infix_mngt int int)
                 (t2tb3 op1)
                 (add (infix_mngt int int) (t2tb7 x) (t2tb15 s))
                 (t2tb5 f))) (select (select op1 (select f x)) (tb2t7
                                                                 (iterate
                                                                   (infix_mngt
                                                                    int
                                                                    int)
                                                                   (infix_mngt
                                                                    int
                                                                    int)
                                                                   (t2tb3
                                                                    op1)
                                                                   (t2tb15 s)
                                                                   (t2tb5 f))))))))))

;; iterate_add
(assert
  (forall ((op1 (Array Int (Array Int Int))) (s (set Int)) (f (Array Int Int)) (x Int))
    (=>
      (commut int (t2tb9 op1))
      (=>
        (iterable int (t2tb9 op1))
        (=>
          (not (mem int (t2tb8 x) (t2tb16 s)))
          (= (tb2t8
               (iterate
                 int
                 int
                 (t2tb9 op1)
                 (add int (t2tb8 x) (t2tb16 s))
                 (t2tb7 f))) (select (tb2t7
                                       (infix_at
                                         (infix_mngt int int)
                                         int
                                         (t2tb9 op1)
                                         (t2tb8 (select f x)))) (tb2t8
                                                                  (iterate
                                                                    int
                                                                    int
                                                                    (t2tb9
                                                                    op1)
                                                                    (t2tb16
                                                                    s)
                                                                    (t2tb7 f))))))))))

;; iterate_add
(assert
  (forall ((a ty) (im1 ty))
    (forall ((op1 uni) (s uni) (f uni) (x uni))
      (=>
        (commut im1 op1)
        (=>
          (iterable im1 op1)
          (=>
            (not (mem a x s))
            (= (iterate im1 a op1 (add a x s) f) (infix_at
                                                   im1
                                                   im1
                                                   (infix_at
                                                     (infix_mngt im1 im1)
                                                     im1
                                                     op1
                                                     (infix_at im1 a f x))
                                                   (iterate im1 a op1 s f)))))))))

;; iterate_add_
(assert
  (forall ((a ty))
    (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s uni) (f uni) (x uni))
      (=>
        (commut (infix_mngt int int) (t2tb3 op1))
        (=>
          (not (mem a x s))
          (=>
            (not (is_empty a s))
            (= (tb2t7
                 (iterate (infix_mngt int int) a (t2tb3 op1) (add a x s) f)) (select (select op1 
            (tb2t7
              (infix_at (infix_mngt int int) a f x))) (tb2t7
                                                        (iterate
                                                          (infix_mngt
                                                            int
                                                            int)
                                                          a
                                                          (t2tb3 op1)
                                                          s
                                                          f))))))))))

;; iterate_add_
(assert
  (forall ((a ty))
    (forall ((op1 (Array Int (Array Int Int))) (s uni) (f uni) (x uni))
      (=>
        (commut int (t2tb9 op1))
        (=>
          (not (mem a x s))
          (=>
            (not (is_empty a s))
            (= (tb2t8 (iterate int a (t2tb9 op1) (add a x s) f)) (select 
            (tb2t7
              (infix_at
                (infix_mngt int int)
                int
                (t2tb9 op1)
                (infix_at int a f x))) (tb2t8
                                         (iterate int a (t2tb9 op1) s f))))))))))

;; iterate_add_
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))) (s (set circuit)) (f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (x circuit))
    (=>
      (commut
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        (t2tb23 op1))
      (=>
        (not (mem circuit1 (t2tb13 x) (t2tb12 s)))
        (=>
          (not (is_empty circuit1 (t2tb12 s)))
          (= (tb2t3
               (iterate
                 (infix_mngt
                   (infix_mngt int int)
                   (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                 circuit1
                 (t2tb23 op1)
                 (add circuit1 (t2tb13 x) (t2tb12 s))
                 (t2tb2 f))) (tb2t3
                               (infix_at
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int)))
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int)))
                                 (infix_at
                                   (infix_mngt
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt
                                         (infix_mngt int int)
                                         (infix_mngt int int)))
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt
                                         (infix_mngt int int)
                                         (infix_mngt int int))))
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt int int)))
                                   (t2tb23 op1)
                                   (t2tb3 (select f x)))
                                 (iterate
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt int int)))
                                   circuit1
                                   (t2tb23 op1)
                                   (t2tb12 s)
                                   (t2tb2 f))))))))))

;; iterate_add_
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array Int Int)) (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int))))) (s (set (Array Int Int))) (f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (x (Array Int Int)))
    (=>
      (commut
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (t2tb25 op1))
      (=>
        (not (mem (infix_mngt int int) (t2tb7 x) (t2tb15 s)))
        (=>
          (not (is_empty (infix_mngt int int) (t2tb15 s)))
          (= (tb2t5
               (iterate
                 (infix_mngt (infix_mngt int int) (infix_mngt int int))
                 (infix_mngt int int)
                 (t2tb25 op1)
                 (add (infix_mngt int int) (t2tb7 x) (t2tb15 s))
                 (t2tb3 f))) (tb2t5
                               (infix_at
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt int int))
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt int int))
                                 (infix_at
                                   (infix_mngt
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt int int))
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt int int)))
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int))
                                   (t2tb25 op1)
                                   (t2tb5 (select f x)))
                                 (iterate
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int))
                                   (infix_mngt int int)
                                   (t2tb25 op1)
                                   (t2tb15 s)
                                   (t2tb3 f))))))))))

;; iterate_add_
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (f (Array (Array Int Int) (Array Int Int))) (x (Array Int Int)))
    (=>
      (commut (infix_mngt int int) (t2tb3 op1))
      (=>
        (not (mem (infix_mngt int int) (t2tb7 x) (t2tb15 s)))
        (=>
          (not (is_empty (infix_mngt int int) (t2tb15 s)))
          (= (tb2t7
               (iterate
                 (infix_mngt int int)
                 (infix_mngt int int)
                 (t2tb3 op1)
                 (add (infix_mngt int int) (t2tb7 x) (t2tb15 s))
                 (t2tb5 f))) (select (select op1 (select f x)) (tb2t7
                                                                 (iterate
                                                                   (infix_mngt
                                                                    int
                                                                    int)
                                                                   (infix_mngt
                                                                    int
                                                                    int)
                                                                   (t2tb3
                                                                    op1)
                                                                   (t2tb15 s)
                                                                   (t2tb5 f))))))))))

;; iterate_add_
(assert
  (forall ((op1 (Array Int (Array Int Int))) (s (set Int)) (f (Array Int Int)) (x Int))
    (=>
      (commut int (t2tb9 op1))
      (=>
        (not (mem int (t2tb8 x) (t2tb16 s)))
        (=>
          (not (is_empty int (t2tb16 s)))
          (= (tb2t8
               (iterate
                 int
                 int
                 (t2tb9 op1)
                 (add int (t2tb8 x) (t2tb16 s))
                 (t2tb7 f))) (select (tb2t7
                                       (infix_at
                                         (infix_mngt int int)
                                         int
                                         (t2tb9 op1)
                                         (t2tb8 (select f x)))) (tb2t8
                                                                  (iterate
                                                                    int
                                                                    int
                                                                    (t2tb9
                                                                    op1)
                                                                    (t2tb16
                                                                    s)
                                                                    (t2tb7 f))))))))))

;; iterate_add_
(assert
  (forall ((a ty) (im1 ty))
    (forall ((op1 uni) (s uni) (f uni) (x uni))
      (=>
        (commut im1 op1)
        (=>
          (not (mem a x s))
          (=>
            (not (is_empty a s))
            (= (iterate im1 a op1 (add a x s) f) (infix_at
                                                   im1
                                                   im1
                                                   (infix_at
                                                     (infix_mngt im1 im1)
                                                     im1
                                                     op1
                                                     (infix_at im1 a f x))
                                                   (iterate im1 a op1 s f)))))))))

;; po_closure
(declare-fun po_closure (ty) uni)

;; po_closure_sort
(assert
  (forall ((im1 ty))
    (sort (infix_mngt im1 (infix_mngt im1 im1)) (po_closure im1))))

;; po_closure_def
(assert
  (forall ((y (Array Int Int)) (y1 (Array Int Int)))
    (= (select (select (tb2t3 (po_closure (infix_mngt int int))) y) y1) 
    (tb2t7
      (po (infix_mngt int int) (t2tb7 y) (t2tb7 y1))))))

;; po_closure_def
(assert
  (forall ((y Int) (y1 Int))
    (= (select (tb2t7
                 (infix_at
                   (infix_mngt int int)
                   int
                   (po_closure int)
                   (t2tb8 y))) y1) (tb2t8 (po int (t2tb8 y) (t2tb8 y1))))))

;; po_closure_def
(assert
  (forall ((im1 ty))
    (forall ((y uni) (y1 uni))
      (= (infix_at
           im1
           im1
           (infix_at (infix_mngt im1 im1) im1 (po_closure im1) y)
           y1) (po im1 y y1)))))

;; iterate_remove
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))) (s (set circuit)) (f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (x circuit))
    (=>
      (commut
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        (t2tb23 op1))
      (=>
        (iterable
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          (t2tb23 op1))
        (=>
          (inverse_tuple
            (infix_mngt
              (infix_mngt int int)
              (infix_mngt (infix_mngt int int) (infix_mngt int int)))
            (t2tb23 op1)
            (po_closure
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int))))
            (neutral_elt
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              (t2tb23 op1)))
          (=>
            (mem circuit1 (t2tb13 x) (t2tb12 s))
            (= (tb2t3
                 (iterate
                   (infix_mngt
                     (infix_mngt int int)
                     (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                   circuit1
                   (t2tb23 op1)
                   (remove circuit1 (t2tb13 x) (t2tb12 s))
                   (t2tb2 f))) (tb2t3
                                 (po
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt int int)))
                                   (iterate
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt
                                         (infix_mngt int int)
                                         (infix_mngt int int)))
                                     circuit1
                                     (t2tb23 op1)
                                     (t2tb12 s)
                                     (t2tb2 f))
                                   (t2tb3 (select f x)))))))))))

;; iterate_remove
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array Int Int)) (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int))))) (s (set (Array Int Int))) (f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (x (Array Int Int)))
    (=>
      (commut
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (t2tb25 op1))
      (=>
        (iterable
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (t2tb25 op1))
        (=>
          (inverse_tuple
            (infix_mngt (infix_mngt int int) (infix_mngt int int))
            (t2tb25 op1)
            (po_closure
              (infix_mngt (infix_mngt int int) (infix_mngt int int)))
            (neutral_elt
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (t2tb25 op1)))
          (=>
            (mem (infix_mngt int int) (t2tb7 x) (t2tb15 s))
            (= (tb2t5
                 (iterate
                   (infix_mngt (infix_mngt int int) (infix_mngt int int))
                   (infix_mngt int int)
                   (t2tb25 op1)
                   (remove (infix_mngt int int) (t2tb7 x) (t2tb15 s))
                   (t2tb3 f))) (tb2t5
                                 (po
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int))
                                   (iterate
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt int int))
                                     (infix_mngt int int)
                                     (t2tb25 op1)
                                     (t2tb15 s)
                                     (t2tb3 f))
                                   (t2tb5 (select f x)))))))))))

;; iterate_remove
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (f (Array (Array Int Int) (Array Int Int))) (x (Array Int Int)))
    (=>
      (commut (infix_mngt int int) (t2tb3 op1))
      (=>
        (iterable (infix_mngt int int) (t2tb3 op1))
        (=>
          (inverse_tuple
            (infix_mngt int int)
            (t2tb3 op1)
            (po_closure (infix_mngt int int))
            (neutral_elt (infix_mngt int int) (t2tb3 op1)))
          (=>
            (mem (infix_mngt int int) (t2tb7 x) (t2tb15 s))
            (= (tb2t7
                 (iterate
                   (infix_mngt int int)
                   (infix_mngt int int)
                   (t2tb3 op1)
                   (remove (infix_mngt int int) (t2tb7 x) (t2tb15 s))
                   (t2tb5 f))) (tb2t7
                                 (po
                                   (infix_mngt int int)
                                   (iterate
                                     (infix_mngt int int)
                                     (infix_mngt int int)
                                     (t2tb3 op1)
                                     (t2tb15 s)
                                     (t2tb5 f))
                                   (t2tb7 (select f x)))))))))))

;; iterate_remove
(assert
  (forall ((op1 (Array Int (Array Int Int))) (s (set Int)) (f (Array Int Int)) (x Int))
    (=>
      (commut int (t2tb9 op1))
      (=>
        (iterable int (t2tb9 op1))
        (=>
          (inverse_tuple
            int
            (t2tb9 op1)
            (po_closure int)
            (neutral_elt int (t2tb9 op1)))
          (=>
            (mem int (t2tb8 x) (t2tb16 s))
            (= (tb2t8
                 (iterate
                   int
                   int
                   (t2tb9 op1)
                   (remove int (t2tb8 x) (t2tb16 s))
                   (t2tb7 f))) (tb2t8
                                 (po
                                   int
                                   (iterate
                                     int
                                     int
                                     (t2tb9 op1)
                                     (t2tb16 s)
                                     (t2tb7 f))
                                   (t2tb8 (select f x)))))))))))

;; iterate_remove
(assert
  (forall ((a ty) (im1 ty))
    (forall ((op1 uni) (s uni) (f uni) (x uni))
      (=>
        (commut im1 op1)
        (=>
          (iterable im1 op1)
          (=>
            (inverse_tuple im1 op1 (po_closure im1) (neutral_elt im1 op1))
            (=>
              (mem a x s)
              (= (iterate im1 a op1 (remove a x s) f) (po
                                                        im1
                                                        (iterate
                                                          im1
                                                          a
                                                          op1
                                                          s
                                                          f)
                                                        (infix_at im1 a f x))))))))))

;; iterate_def_choose
(assert
  (forall ((a ty))
    (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s uni) (f uni))
      (=>
        (=> (= (cardinal a s) 1) (iterable (infix_mngt int int) (t2tb3 op1)))
        (=>
          (commut (infix_mngt int int) (t2tb3 op1))
          (=>
            (not (is_empty a s))
            (= (tb2t7 (iterate (infix_mngt int int) a (t2tb3 op1) s f)) (select (select op1 
            (tb2t7
              (infix_at (infix_mngt int int) a f (choose1 a s)))) (tb2t7
                                                                    (iterate
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    a
                                                                    (t2tb3
                                                                    op1)
                                                                    (remove
                                                                    a
                                                                    (choose1
                                                                    a
                                                                    s)
                                                                    s)
                                                                    f))))))))))

;; iterate_def_choose
(assert
  (forall ((a ty))
    (forall ((op1 (Array Int (Array Int Int))) (s uni) (f uni))
      (=>
        (=> (= (cardinal a s) 1) (iterable int (t2tb9 op1)))
        (=>
          (commut int (t2tb9 op1))
          (=>
            (not (is_empty a s))
            (= (tb2t8 (iterate int a (t2tb9 op1) s f)) (select (tb2t7
                                                                 (infix_at
                                                                   (infix_mngt
                                                                    int
                                                                    int)
                                                                   int
                                                                   (t2tb9
                                                                    op1)
                                                                   (infix_at
                                                                    int
                                                                    a
                                                                    f
                                                                    (choose1
                                                                    a
                                                                    s)))) 
            (tb2t8
              (iterate int a (t2tb9 op1) (remove a (choose1 a s) s) f))))))))))

;; iterate_def_choose
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))) (s (set circuit)) (f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (=>
      (=>
        (= (cardinal circuit1 (t2tb12 s)) 1)
        (iterable
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          (t2tb23 op1)))
      (=>
        (commut
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          (t2tb23 op1))
        (=>
          (not (is_empty circuit1 (t2tb12 s)))
          (= (tb2t3
               (iterate
                 (infix_mngt
                   (infix_mngt int int)
                   (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                 circuit1
                 (t2tb23 op1)
                 (t2tb12 s)
                 (t2tb2 f))) (tb2t3
                               (infix_at
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int)))
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int)))
                                 (infix_at
                                   (infix_mngt
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt
                                         (infix_mngt int int)
                                         (infix_mngt int int)))
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt
                                         (infix_mngt int int)
                                         (infix_mngt int int))))
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt int int)))
                                   (t2tb23 op1)
                                   (t2tb3
                                     (select f (tb2t13
                                                 (choose1
                                                   circuit1
                                                   (t2tb12 s))))))
                                 (iterate
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt int int)))
                                   circuit1
                                   (t2tb23 op1)
                                   (remove
                                     circuit1
                                     (choose1 circuit1 (t2tb12 s))
                                     (t2tb12 s))
                                   (t2tb2 f))))))))))

;; iterate_def_choose
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array Int Int)) (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int))))) (s (set (Array Int Int))) (f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (=>
      (=>
        (= (cardinal (infix_mngt int int) (t2tb15 s)) 1)
        (iterable
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (t2tb25 op1)))
      (=>
        (commut
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (t2tb25 op1))
        (=>
          (not (is_empty (infix_mngt int int) (t2tb15 s)))
          (= (tb2t5
               (iterate
                 (infix_mngt (infix_mngt int int) (infix_mngt int int))
                 (infix_mngt int int)
                 (t2tb25 op1)
                 (t2tb15 s)
                 (t2tb3 f))) (tb2t5
                               (infix_at
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt int int))
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt int int))
                                 (infix_at
                                   (infix_mngt
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt int int))
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt int int)))
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int))
                                   (t2tb25 op1)
                                   (t2tb5
                                     (select f (tb2t7
                                                 (choose1
                                                   (infix_mngt int int)
                                                   (t2tb15 s))))))
                                 (iterate
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int))
                                   (infix_mngt int int)
                                   (t2tb25 op1)
                                   (remove
                                     (infix_mngt int int)
                                     (choose1
                                       (infix_mngt int int)
                                       (t2tb15 s))
                                     (t2tb15 s))
                                   (t2tb3 f))))))))))

;; iterate_def_choose
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (f (Array (Array Int Int) (Array Int Int))))
    (=>
      (=>
        (= (cardinal (infix_mngt int int) (t2tb15 s)) 1)
        (iterable (infix_mngt int int) (t2tb3 op1)))
      (=>
        (commut (infix_mngt int int) (t2tb3 op1))
        (=>
          (not (is_empty (infix_mngt int int) (t2tb15 s)))
          (= (tb2t7
               (iterate
                 (infix_mngt int int)
                 (infix_mngt int int)
                 (t2tb3 op1)
                 (t2tb15 s)
                 (t2tb5 f))) (select (select op1 (select f (tb2t7
                                                             (choose1
                                                               (infix_mngt
                                                                 int
                                                                 int)
                                                               (t2tb15 s))))) 
          (tb2t7
            (iterate
              (infix_mngt int int)
              (infix_mngt int int)
              (t2tb3 op1)
              (remove
                (infix_mngt int int)
                (choose1 (infix_mngt int int) (t2tb15 s))
                (t2tb15 s))
              (t2tb5 f))))))))))

;; iterate_def_choose
(assert
  (forall ((op1 (Array Int (Array Int Int))) (s (set Int)) (f (Array Int Int)))
    (=>
      (=> (= (cardinal int (t2tb16 s)) 1) (iterable int (t2tb9 op1)))
      (=>
        (commut int (t2tb9 op1))
        (=>
          (not (is_empty int (t2tb16 s)))
          (= (tb2t8 (iterate int int (t2tb9 op1) (t2tb16 s) (t2tb7 f))) (select 
          (tb2t7
            (infix_at
              (infix_mngt int int)
              int
              (t2tb9 op1)
              (t2tb8 (select f (tb2t8 (choose1 int (t2tb16 s))))))) (tb2t8
                                                                    (iterate
                                                                    int
                                                                    int
                                                                    (t2tb9
                                                                    op1)
                                                                    (remove
                                                                    int
                                                                    (choose1
                                                                    int
                                                                    (t2tb16
                                                                    s))
                                                                    (t2tb16
                                                                    s))
                                                                    (t2tb7 f))))))))))

;; iterate_def_choose
(assert
  (forall ((a ty) (im1 ty))
    (forall ((op1 uni) (s uni) (f uni))
      (=>
        (=> (= (cardinal a s) 1) (iterable im1 op1))
        (=>
          (commut im1 op1)
          (=>
            (not (is_empty a s))
            (= (iterate im1 a op1 s f) (infix_at
                                         im1
                                         im1
                                         (infix_at
                                           (infix_mngt im1 im1)
                                           im1
                                           op1
                                           (infix_at im1 a f (choose1 a s)))
                                         (iterate
                                           im1
                                           a
                                           op1
                                           (remove a (choose1 a s) s)
                                           f)))))))))

;; choose_any
(assert
  (forall ((a ty))
    (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s uni) (f uni) (t uni))
      (=>
        (iterable (infix_mngt int int) (t2tb3 op1))
        (=>
          (commut (infix_mngt int int) (t2tb3 op1))
          (=>
            (mem a t s)
            (= (tb2t7 (iterate (infix_mngt int int) a (t2tb3 op1) s f)) (select (select op1 
            (tb2t7
              (infix_at (infix_mngt int int) a f t))) (tb2t7
                                                        (iterate
                                                          (infix_mngt
                                                            int
                                                            int)
                                                          a
                                                          (t2tb3 op1)
                                                          (remove a t s)
                                                          f))))))))))

;; choose_any
(assert
  (forall ((a ty))
    (forall ((op1 (Array Int (Array Int Int))) (s uni) (f uni) (t uni))
      (=>
        (iterable int (t2tb9 op1))
        (=>
          (commut int (t2tb9 op1))
          (=>
            (mem a t s)
            (= (tb2t8 (iterate int a (t2tb9 op1) s f)) (select (tb2t7
                                                                 (infix_at
                                                                   (infix_mngt
                                                                    int
                                                                    int)
                                                                   int
                                                                   (t2tb9
                                                                    op1)
                                                                   (infix_at
                                                                    int
                                                                    a
                                                                    f
                                                                    t))) 
            (tb2t8
              (iterate int a (t2tb9 op1) (remove a t s) f))))))))))

;; choose_any
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))) (s (set circuit)) (f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (t circuit))
    (=>
      (iterable
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        (t2tb23 op1))
      (=>
        (commut
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          (t2tb23 op1))
        (=>
          (mem circuit1 (t2tb13 t) (t2tb12 s))
          (= (tb2t3
               (iterate
                 (infix_mngt
                   (infix_mngt int int)
                   (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                 circuit1
                 (t2tb23 op1)
                 (t2tb12 s)
                 (t2tb2 f))) (tb2t3
                               (infix_at
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int)))
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int)))
                                 (infix_at
                                   (infix_mngt
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt
                                         (infix_mngt int int)
                                         (infix_mngt int int)))
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt
                                         (infix_mngt int int)
                                         (infix_mngt int int))))
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt int int)))
                                   (t2tb23 op1)
                                   (t2tb3 (select f t)))
                                 (iterate
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt int int)))
                                   circuit1
                                   (t2tb23 op1)
                                   (remove circuit1 (t2tb13 t) (t2tb12 s))
                                   (t2tb2 f))))))))))

;; choose_any
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array Int Int)) (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int))))) (s (set (Array Int Int))) (f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (t (Array Int Int)))
    (=>
      (iterable
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (t2tb25 op1))
      (=>
        (commut
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (t2tb25 op1))
        (=>
          (mem (infix_mngt int int) (t2tb7 t) (t2tb15 s))
          (= (tb2t5
               (iterate
                 (infix_mngt (infix_mngt int int) (infix_mngt int int))
                 (infix_mngt int int)
                 (t2tb25 op1)
                 (t2tb15 s)
                 (t2tb3 f))) (tb2t5
                               (infix_at
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt int int))
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt int int))
                                 (infix_at
                                   (infix_mngt
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt int int))
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt int int)))
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int))
                                   (t2tb25 op1)
                                   (t2tb5 (select f t)))
                                 (iterate
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int))
                                   (infix_mngt int int)
                                   (t2tb25 op1)
                                   (remove
                                     (infix_mngt int int)
                                     (t2tb7 t)
                                     (t2tb15 s))
                                   (t2tb3 f))))))))))

;; choose_any
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (f (Array (Array Int Int) (Array Int Int))) (t (Array Int Int)))
    (=>
      (iterable (infix_mngt int int) (t2tb3 op1))
      (=>
        (commut (infix_mngt int int) (t2tb3 op1))
        (=>
          (mem (infix_mngt int int) (t2tb7 t) (t2tb15 s))
          (= (tb2t7
               (iterate
                 (infix_mngt int int)
                 (infix_mngt int int)
                 (t2tb3 op1)
                 (t2tb15 s)
                 (t2tb5 f))) (select (select op1 (select f t)) (tb2t7
                                                                 (iterate
                                                                   (infix_mngt
                                                                    int
                                                                    int)
                                                                   (infix_mngt
                                                                    int
                                                                    int)
                                                                   (t2tb3
                                                                    op1)
                                                                   (remove
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    (t2tb7 t)
                                                                    (t2tb15
                                                                    s))
                                                                   (t2tb5 f))))))))))

;; choose_any
(assert
  (forall ((op1 (Array Int (Array Int Int))) (s (set Int)) (f (Array Int Int)) (t Int))
    (=>
      (iterable int (t2tb9 op1))
      (=>
        (commut int (t2tb9 op1))
        (=>
          (mem int (t2tb8 t) (t2tb16 s))
          (= (tb2t8 (iterate int int (t2tb9 op1) (t2tb16 s) (t2tb7 f))) (select 
          (tb2t7
            (infix_at
              (infix_mngt int int)
              int
              (t2tb9 op1)
              (t2tb8 (select f t)))) (tb2t8
                                       (iterate
                                         int
                                         int
                                         (t2tb9 op1)
                                         (remove int (t2tb8 t) (t2tb16 s))
                                         (t2tb7 f))))))))))

;; choose_any
(assert
  (forall ((a ty) (im1 ty))
    (forall ((op1 uni) (s uni) (f uni) (t uni))
      (=>
        (iterable im1 op1)
        (=>
          (commut im1 op1)
          (=>
            (mem a t s)
            (= (iterate im1 a op1 s f) (infix_at
                                         im1
                                         im1
                                         (infix_at
                                           (infix_mngt im1 im1)
                                           im1
                                           op1
                                           (infix_at im1 a f t))
                                         (iterate im1 a op1 (remove a t s) f)))))))))

;; fc
(declare-fun fc4 (ty
  ty
  uni
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (im1 ty))
    (forall ((x uni) (x1 uni) (x2 uni))
      (sort (infix_mngt a im1) (fc4 im1 a x x1 x2)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (f uni) (g uni) (k uni))
      (= (tb2t7
           (infix_at
             (infix_mngt int int)
             a
             (fc4 (infix_mngt int int) a (t2tb3 op1) f g)
             k)) (select (select op1 (tb2t7
                                       (infix_at (infix_mngt int int) a f k))) 
      (tb2t7
        (infix_at (infix_mngt int int) a g k)))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((op1 (Array Int (Array Int Int))) (f uni) (g uni) (k uni))
      (= (tb2t8 (infix_at int a (fc4 int a (t2tb9 op1) f g) k)) (select 
      (tb2t7
        (infix_at (infix_mngt int int) int (t2tb9 op1) (infix_at int a f k))) 
      (tb2t8
        (infix_at int a g k)))))))

;; fc'def
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))) (f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (g (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (k circuit))
    (= (select (tb2t2
                 (fc4
                   (infix_mngt
                     (infix_mngt int int)
                     (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                   circuit1
                   (t2tb23 op1)
                   (t2tb2 f)
                   (t2tb2 g))) k) (tb2t3
                                    (infix_at
                                      (infix_mngt
                                        (infix_mngt int int)
                                        (infix_mngt
                                          (infix_mngt int int)
                                          (infix_mngt int int)))
                                      (infix_mngt
                                        (infix_mngt int int)
                                        (infix_mngt
                                          (infix_mngt int int)
                                          (infix_mngt int int)))
                                      (infix_at
                                        (infix_mngt
                                          (infix_mngt
                                            (infix_mngt int int)
                                            (infix_mngt
                                              (infix_mngt int int)
                                              (infix_mngt int int)))
                                          (infix_mngt
                                            (infix_mngt int int)
                                            (infix_mngt
                                              (infix_mngt int int)
                                              (infix_mngt int int))))
                                        (infix_mngt
                                          (infix_mngt int int)
                                          (infix_mngt
                                            (infix_mngt int int)
                                            (infix_mngt int int)))
                                        (t2tb23 op1)
                                        (t2tb3 (select f k)))
                                      (t2tb3 (select g k)))))))

;; fc'def
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array Int Int)) (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int))))) (f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (g (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (k (Array Int Int)))
    (= (select (tb2t3
                 (fc4
                   (infix_mngt (infix_mngt int int) (infix_mngt int int))
                   (infix_mngt int int)
                   (t2tb25 op1)
                   (t2tb3 f)
                   (t2tb3 g))) k) (tb2t5
                                    (infix_at
                                      (infix_mngt
                                        (infix_mngt int int)
                                        (infix_mngt int int))
                                      (infix_mngt
                                        (infix_mngt int int)
                                        (infix_mngt int int))
                                      (infix_at
                                        (infix_mngt
                                          (infix_mngt
                                            (infix_mngt int int)
                                            (infix_mngt int int))
                                          (infix_mngt
                                            (infix_mngt int int)
                                            (infix_mngt int int)))
                                        (infix_mngt
                                          (infix_mngt int int)
                                          (infix_mngt int int))
                                        (t2tb25 op1)
                                        (t2tb5 (select f k)))
                                      (t2tb5 (select g k)))))))

;; fc'def
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (f (Array (Array Int Int) (Array Int Int))) (g (Array (Array Int Int) (Array Int Int))) (k (Array Int Int)))
    (= (select (tb2t5
                 (fc4
                   (infix_mngt int int)
                   (infix_mngt int int)
                   (t2tb3 op1)
                   (t2tb5 f)
                   (t2tb5 g))) k) (select (select op1 (select f k)) (select g k)))))

;; fc'def
(assert
  (forall ((op1 (Array Int (Array Int Int))) (f (Array Int Int)) (g (Array Int Int)) (k Int))
    (= (select (tb2t7 (fc4 int int (t2tb9 op1) (t2tb7 f) (t2tb7 g))) k) (select 
    (tb2t7
      (infix_at (infix_mngt int int) int (t2tb9 op1) (t2tb8 (select f k)))) (select g k)))))

;; fc'def
(assert
  (forall ((a ty) (im1 ty))
    (forall ((op1 uni) (f uni) (g uni) (k uni))
      (= (infix_at im1 a (fc4 im1 a op1 f g) k) (infix_at
                                                  im1
                                                  im1
                                                  (infix_at
                                                    (infix_mngt im1 im1)
                                                    im1
                                                    op1
                                                    (infix_at im1 a f k))
                                                  (infix_at im1 a g k))))))

;; iterate_comp_iterate
(assert
  (forall ((a ty))
    (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s1 uni) (f uni) (g uni))
      (=>
        (iterable (infix_mngt int int) (t2tb3 op1))
        (=>
          (commut (infix_mngt int int) (t2tb3 op1))
          (=>
            (assoc (infix_mngt int int) (t2tb3 op1))
            (= (tb2t7
                 (iterate
                   (infix_mngt int int)
                   a
                   (t2tb3 op1)
                   s1
                   (fc4 (infix_mngt int int) a (t2tb3 op1) f g))) (select (select op1 
            (tb2t7
              (iterate (infix_mngt int int) a (t2tb3 op1) s1 f))) (tb2t7
                                                                    (iterate
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    a
                                                                    (t2tb3
                                                                    op1)
                                                                    s1
                                                                    g))))))))))

;; iterate_comp_iterate
(assert
  (forall ((a ty))
    (forall ((op1 (Array Int (Array Int Int))) (s1 uni) (f uni) (g uni))
      (=>
        (iterable int (t2tb9 op1))
        (=>
          (commut int (t2tb9 op1))
          (=>
            (assoc int (t2tb9 op1))
            (= (tb2t8
                 (iterate int a (t2tb9 op1) s1 (fc4 int a (t2tb9 op1) f g))) (select 
            (tb2t7
              (infix_at
                (infix_mngt int int)
                int
                (t2tb9 op1)
                (iterate int a (t2tb9 op1) s1 f))) (tb2t8
                                                     (iterate
                                                       int
                                                       a
                                                       (t2tb9 op1)
                                                       s1
                                                       g))))))))))

;; iterate_comp_iterate
(assert
  (forall ((a ty) (im1 ty))
    (forall ((op1 uni) (s1 uni) (f uni) (g uni))
      (=>
        (iterable im1 op1)
        (=>
          (commut im1 op1)
          (=>
            (assoc im1 op1)
            (= (iterate im1 a op1 s1 (fc4 im1 a op1 f g)) (infix_at
                                                            im1
                                                            im1
                                                            (infix_at
                                                              (infix_mngt
                                                                im1
                                                                im1)
                                                              im1
                                                              op1
                                                              (iterate
                                                                im1
                                                                a
                                                                op1
                                                                s1
                                                                f))
                                                            (iterate
                                                              im1
                                                              a
                                                              op1
                                                              s1
                                                              g)))))))))

;; fc
(declare-fun fc5 (ty
  ty
  uni
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (im1 ty))
    (forall ((x uni) (x1 uni) (x2 uni))
      (sort (infix_mngt a im1) (fc5 im1 a x x1 x2)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (f uni) (g uni) (k uni))
      (= (tb2t7
           (infix_at
             (infix_mngt int int)
             a
             (fc5 (infix_mngt int int) a (t2tb3 op1) f g)
             k)) (select (select op1 (tb2t7
                                       (infix_at (infix_mngt int int) a f k))) 
      (tb2t7
        (infix_at (infix_mngt int int) a g k)))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((op1 (Array Int (Array Int Int))) (f uni) (g uni) (k uni))
      (= (tb2t8 (infix_at int a (fc5 int a (t2tb9 op1) f g) k)) (select 
      (tb2t7
        (infix_at (infix_mngt int int) int (t2tb9 op1) (infix_at int a f k))) 
      (tb2t8
        (infix_at int a g k)))))))

;; fc'def
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))) (f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (g (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (k circuit))
    (= (select (tb2t2
                 (fc5
                   (infix_mngt
                     (infix_mngt int int)
                     (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                   circuit1
                   (t2tb23 op1)
                   (t2tb2 f)
                   (t2tb2 g))) k) (tb2t3
                                    (infix_at
                                      (infix_mngt
                                        (infix_mngt int int)
                                        (infix_mngt
                                          (infix_mngt int int)
                                          (infix_mngt int int)))
                                      (infix_mngt
                                        (infix_mngt int int)
                                        (infix_mngt
                                          (infix_mngt int int)
                                          (infix_mngt int int)))
                                      (infix_at
                                        (infix_mngt
                                          (infix_mngt
                                            (infix_mngt int int)
                                            (infix_mngt
                                              (infix_mngt int int)
                                              (infix_mngt int int)))
                                          (infix_mngt
                                            (infix_mngt int int)
                                            (infix_mngt
                                              (infix_mngt int int)
                                              (infix_mngt int int))))
                                        (infix_mngt
                                          (infix_mngt int int)
                                          (infix_mngt
                                            (infix_mngt int int)
                                            (infix_mngt int int)))
                                        (t2tb23 op1)
                                        (t2tb3 (select f k)))
                                      (t2tb3 (select g k)))))))

;; fc'def
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array Int Int)) (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int))))) (f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (g (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (k (Array Int Int)))
    (= (select (tb2t3
                 (fc5
                   (infix_mngt (infix_mngt int int) (infix_mngt int int))
                   (infix_mngt int int)
                   (t2tb25 op1)
                   (t2tb3 f)
                   (t2tb3 g))) k) (tb2t5
                                    (infix_at
                                      (infix_mngt
                                        (infix_mngt int int)
                                        (infix_mngt int int))
                                      (infix_mngt
                                        (infix_mngt int int)
                                        (infix_mngt int int))
                                      (infix_at
                                        (infix_mngt
                                          (infix_mngt
                                            (infix_mngt int int)
                                            (infix_mngt int int))
                                          (infix_mngt
                                            (infix_mngt int int)
                                            (infix_mngt int int)))
                                        (infix_mngt
                                          (infix_mngt int int)
                                          (infix_mngt int int))
                                        (t2tb25 op1)
                                        (t2tb5 (select f k)))
                                      (t2tb5 (select g k)))))))

;; fc'def
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (f (Array (Array Int Int) (Array Int Int))) (g (Array (Array Int Int) (Array Int Int))) (k (Array Int Int)))
    (= (select (tb2t5
                 (fc5
                   (infix_mngt int int)
                   (infix_mngt int int)
                   (t2tb3 op1)
                   (t2tb5 f)
                   (t2tb5 g))) k) (select (select op1 (select f k)) (select g k)))))

;; fc'def
(assert
  (forall ((op1 (Array Int (Array Int Int))) (f (Array Int Int)) (g (Array Int Int)) (k Int))
    (= (select (tb2t7 (fc5 int int (t2tb9 op1) (t2tb7 f) (t2tb7 g))) k) (select 
    (tb2t7
      (infix_at (infix_mngt int int) int (t2tb9 op1) (t2tb8 (select f k)))) (select g k)))))

;; fc'def
(assert
  (forall ((a ty) (im1 ty))
    (forall ((op1 uni) (f uni) (g uni) (k uni))
      (= (infix_at im1 a (fc5 im1 a op1 f g) k) (infix_at
                                                  im1
                                                  im1
                                                  (infix_at
                                                    (infix_mngt im1 im1)
                                                    im1
                                                    op1
                                                    (infix_at im1 a f k))
                                                  (infix_at im1 a g k))))))

;; iterate_comp_iterate_com
(assert
  (forall ((a ty))
    (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s1 uni) (f uni) (g uni))
      (=>
        (iterable (infix_mngt int int) (t2tb3 op1))
        (=>
          (commut (infix_mngt int int) (t2tb3 op1))
          (= (select (select op1 (tb2t7
                                   (iterate
                                     (infix_mngt int int)
                                     a
                                     (t2tb3 op1)
                                     s1
                                     f))) (tb2t7
                                            (iterate
                                              (infix_mngt int int)
                                              a
                                              (t2tb3 op1)
                                              s1
                                              g))) (tb2t7
                                                     (iterate
                                                       (infix_mngt int int)
                                                       a
                                                       (t2tb3 op1)
                                                       s1
                                                       (fc5
                                                         (infix_mngt int int)
                                                         a
                                                         (t2tb3 op1)
                                                         f
                                                         g)))))))))

;; iterate_comp_iterate_com
(assert
  (forall ((a ty))
    (forall ((op1 (Array Int (Array Int Int))) (s1 uni) (f uni) (g uni))
      (=>
        (iterable int (t2tb9 op1))
        (=>
          (commut int (t2tb9 op1))
          (= (select (tb2t7
                       (infix_at
                         (infix_mngt int int)
                         int
                         (t2tb9 op1)
                         (iterate int a (t2tb9 op1) s1 f))) (tb2t8
                                                              (iterate
                                                                int
                                                                a
                                                                (t2tb9 op1)
                                                                s1
                                                                g))) 
          (tb2t8
            (iterate int a (t2tb9 op1) s1 (fc5 int a (t2tb9 op1) f g)))))))))

;; iterate_comp_iterate_com
(assert
  (forall ((a ty) (im1 ty))
    (forall ((op1 uni) (s1 uni) (f uni) (g uni))
      (=>
        (iterable im1 op1)
        (=>
          (commut im1 op1)
          (= (infix_at
               im1
               im1
               (infix_at
                 (infix_mngt im1 im1)
                 im1
                 op1
                 (iterate im1 a op1 s1 f))
               (iterate im1 a op1 s1 g)) (iterate
                                           im1
                                           a
                                           op1
                                           s1
                                           (fc5 im1 a op1 f g))))))))

;; iterate_transitivity
(assert
  (forall ((a ty))
    (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (po1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s1 uni) (s2 uni) (f uni))
      (=>
        (iterable (infix_mngt int int) (t2tb3 op1))
        (=>
          (commut (infix_mngt int int) (t2tb3 op1))
          (=>
            (inverse_tuple
              (infix_mngt int int)
              (t2tb3 op1)
              (t2tb3 po1)
              (neutral_elt (infix_mngt int int) (t2tb3 op1)))
            (= (tb2t7
                 (iterate
                   (infix_mngt int int)
                   a
                   (t2tb3 op1)
                   (union1 a s1 s2)
                   f)) (select (select po1 (select (select op1 (tb2t7
                                                                 (iterate
                                                                   (infix_mngt
                                                                    int
                                                                    int)
                                                                   a
                                                                   (t2tb3
                                                                    op1)
                                                                   s1
                                                                   f))) 
            (tb2t7
              (iterate (infix_mngt int int) a (t2tb3 op1) s2 f)))) (tb2t7
                                                                    (iterate
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    a
                                                                    (t2tb3
                                                                    op1)
                                                                    (inter
                                                                    a
                                                                    s1
                                                                    s2)
                                                                    f))))))))))

;; iterate_transitivity
(assert
  (forall ((a ty))
    (forall ((op1 (Array Int (Array Int Int))) (po1 (Array Int (Array Int Int))) (s1 uni) (s2 uni) (f uni))
      (=>
        (iterable int (t2tb9 op1))
        (=>
          (commut int (t2tb9 op1))
          (=>
            (inverse_tuple
              int
              (t2tb9 op1)
              (t2tb9 po1)
              (neutral_elt int (t2tb9 op1)))
            (= (tb2t8 (iterate int a (t2tb9 op1) (union1 a s1 s2) f)) (select 
            (tb2t7
              (infix_at
                (infix_mngt int int)
                int
                (t2tb9 po1)
                (t2tb8
                  (select (tb2t7
                            (infix_at
                              (infix_mngt int int)
                              int
                              (t2tb9 op1)
                              (iterate int a (t2tb9 op1) s1 f))) (tb2t8
                                                                   (iterate
                                                                    int
                                                                    a
                                                                    (t2tb9
                                                                    op1)
                                                                    s2
                                                                    f)))))) 
            (tb2t8
              (iterate int a (t2tb9 op1) (inter a s1 s2) f))))))))))

;; iterate_transitivity
(assert
  (forall ((a ty) (im1 ty))
    (forall ((op1 uni) (po1 uni) (s1 uni) (s2 uni) (f uni))
      (=>
        (iterable im1 op1)
        (=>
          (commut im1 op1)
          (=>
            (inverse_tuple im1 op1 po1 (neutral_elt im1 op1))
            (= (iterate im1 a op1 (union1 a s1 s2) f) (infix_at
                                                        im1
                                                        im1
                                                        (infix_at
                                                          (infix_mngt
                                                            im1
                                                            im1)
                                                          im1
                                                          po1
                                                          (infix_at
                                                            im1
                                                            im1
                                                            (infix_at
                                                              (infix_mngt
                                                                im1
                                                                im1)
                                                              im1
                                                              op1
                                                              (iterate
                                                                im1
                                                                a
                                                                op1
                                                                s1
                                                                f))
                                                            (iterate
                                                              im1
                                                              a
                                                              op1
                                                              s2
                                                              f)))
                                                        (iterate
                                                          im1
                                                          a
                                                          op1
                                                          (inter a s1 s2)
                                                          f)))))))))

;; iterate_disjoint_transitivity
(assert
  (forall ((a ty))
    (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s1 uni) (s2 uni) (t uni))
      (=>
        (iterable (infix_mngt int int) (t2tb3 op1))
        (=>
          (commut (infix_mngt int int) (t2tb3 op1))
          (=>
            (= (inter a s1 s2) (empty a))
            (= (tb2t7
                 (iterate
                   (infix_mngt int int)
                   a
                   (t2tb3 op1)
                   (union1 a s1 s2)
                   t)) (select (select op1 (tb2t7
                                             (iterate
                                               (infix_mngt int int)
                                               a
                                               (t2tb3 op1)
                                               s1
                                               t))) (tb2t7
                                                      (iterate
                                                        (infix_mngt int int)
                                                        a
                                                        (t2tb3 op1)
                                                        s2
                                                        t))))))))))

;; iterate_disjoint_transitivity
(assert
  (forall ((a ty))
    (forall ((op1 (Array Int (Array Int Int))) (s1 uni) (s2 uni) (t uni))
      (=>
        (iterable int (t2tb9 op1))
        (=>
          (commut int (t2tb9 op1))
          (=>
            (= (inter a s1 s2) (empty a))
            (= (tb2t8 (iterate int a (t2tb9 op1) (union1 a s1 s2) t)) (select 
            (tb2t7
              (infix_at
                (infix_mngt int int)
                int
                (t2tb9 op1)
                (iterate int a (t2tb9 op1) s1 t))) (tb2t8
                                                     (iterate
                                                       int
                                                       a
                                                       (t2tb9 op1)
                                                       s2
                                                       t))))))))))

;; iterate_disjoint_transitivity
(assert
  (forall ((a ty) (im1 ty))
    (forall ((op1 uni) (s1 uni) (s2 uni) (t uni))
      (=>
        (iterable im1 op1)
        (=>
          (commut im1 op1)
          (=>
            (= (inter a s1 s2) (empty a))
            (= (iterate im1 a op1 (union1 a s1 s2) t) (infix_at
                                                        im1
                                                        im1
                                                        (infix_at
                                                          (infix_mngt
                                                            im1
                                                            im1)
                                                          im1
                                                          op1
                                                          (iterate
                                                            im1
                                                            a
                                                            op1
                                                            s1
                                                            t))
                                                        (iterate
                                                          im1
                                                          a
                                                          op1
                                                          s2
                                                          t)))))))))

;; iterate_eq
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))) (s (set circuit)) (f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (g (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (=>
      (forall ((x circuit))
        (=>
          (mem circuit1 (t2tb13 x) (t2tb12 s))
          (= (select f x) (select g x))))
      (=>
        (commut
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          (t2tb23 op1))
        (=>
          (=>
            (is_empty circuit1 (t2tb12 s))
            (iterable
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              (t2tb23 op1)))
          (= (tb2t3
               (iterate
                 (infix_mngt
                   (infix_mngt int int)
                   (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                 circuit1
                 (t2tb23 op1)
                 (t2tb12 s)
                 (t2tb2 f))) (tb2t3
                               (iterate
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int)))
                                 circuit1
                                 (t2tb23 op1)
                                 (t2tb12 s)
                                 (t2tb2 g)))))))))

;; iterate_eq
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array Int Int)) (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int))))) (s (set (Array Int Int))) (f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (g (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (=>
      (forall ((x (Array Int Int)))
        (=>
          (mem (infix_mngt int int) (t2tb7 x) (t2tb15 s))
          (= (select f x) (select g x))))
      (=>
        (commut
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (t2tb25 op1))
        (=>
          (=>
            (is_empty (infix_mngt int int) (t2tb15 s))
            (iterable
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (t2tb25 op1)))
          (= (tb2t5
               (iterate
                 (infix_mngt (infix_mngt int int) (infix_mngt int int))
                 (infix_mngt int int)
                 (t2tb25 op1)
                 (t2tb15 s)
                 (t2tb3 f))) (tb2t5
                               (iterate
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt int int))
                                 (infix_mngt int int)
                                 (t2tb25 op1)
                                 (t2tb15 s)
                                 (t2tb3 g)))))))))

;; iterate_eq
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (f (Array (Array Int Int) (Array Int Int))) (g (Array (Array Int Int) (Array Int Int))))
    (=>
      (forall ((x (Array Int Int)))
        (=>
          (mem (infix_mngt int int) (t2tb7 x) (t2tb15 s))
          (= (select f x) (select g x))))
      (=>
        (commut (infix_mngt int int) (t2tb3 op1))
        (=>
          (=>
            (is_empty (infix_mngt int int) (t2tb15 s))
            (iterable (infix_mngt int int) (t2tb3 op1)))
          (= (tb2t7
               (iterate
                 (infix_mngt int int)
                 (infix_mngt int int)
                 (t2tb3 op1)
                 (t2tb15 s)
                 (t2tb5 f))) (tb2t7
                               (iterate
                                 (infix_mngt int int)
                                 (infix_mngt int int)
                                 (t2tb3 op1)
                                 (t2tb15 s)
                                 (t2tb5 g)))))))))

;; iterate_eq
(assert
  (forall ((op1 (Array Int (Array Int Int))) (s (set Int)) (f (Array Int Int)) (g (Array Int Int)))
    (=>
      (forall ((x Int))
        (=> (mem int (t2tb8 x) (t2tb16 s)) (= (select f x) (select g x))))
      (=>
        (commut int (t2tb9 op1))
        (=>
          (=> (is_empty int (t2tb16 s)) (iterable int (t2tb9 op1)))
          (= (tb2t8 (iterate int int (t2tb9 op1) (t2tb16 s) (t2tb7 f))) 
          (tb2t8
            (iterate int int (t2tb9 op1) (t2tb16 s) (t2tb7 g)))))))))

;; iterate_eq
(assert
  (forall ((a ty) (im1 ty))
    (forall ((op1 uni) (s uni) (f uni) (g uni))
      (=>
        (forall ((x uni))
          (=>
            (sort a x)
            (=> (mem a x s) (= (infix_at im1 a f x) (infix_at im1 a g x)))))
        (=>
          (commut im1 op1)
          (=>
            (=> (is_empty a s) (iterable im1 op1))
            (= (iterate im1 a op1 s f) (iterate im1 a op1 s g))))))))

;; fc
(declare-fun fc6 (ty
  ty
  ty
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty) (im1 ty))
    (forall ((x uni) (x1 uni)) (sort (infix_mngt b im1) (fc6 im1 b a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (t uni) (b circuit))
      (= (select (tb2t2
                   (fc6
                     (infix_mngt
                       (infix_mngt int int)
                       (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                     circuit1
                     a
                     f
                     t)) b) (tb2t3
                              (infix_at
                                (infix_mngt
                                  (infix_mngt int int)
                                  (infix_mngt
                                    (infix_mngt int int)
                                    (infix_mngt int int)))
                                a
                                t
                                (infix_at a circuit1 f (t2tb13 b))))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (t uni) (b (Array Int Int)))
      (= (select (tb2t3
                   (fc6
                     (infix_mngt (infix_mngt int int) (infix_mngt int int))
                     (infix_mngt int int)
                     a
                     f
                     t)) b) (tb2t5
                              (infix_at
                                (infix_mngt
                                  (infix_mngt int int)
                                  (infix_mngt int int))
                                a
                                t
                                (infix_at a (infix_mngt int int) f (t2tb7 b))))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (t uni) (b (Array Int Int)))
      (= (select (tb2t5
                   (fc6 (infix_mngt int int) (infix_mngt int int) a f t)) b) 
      (tb2t7
        (infix_at
          (infix_mngt int int)
          a
          t
          (infix_at a (infix_mngt int int) f (t2tb7 b))))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (t uni) (b Int))
      (= (select (tb2t7 (fc6 int int a f t)) b) (tb2t8
                                                  (infix_at
                                                    int
                                                    a
                                                    t
                                                    (infix_at
                                                      a
                                                      int
                                                      f
                                                      (t2tb8 b))))))))

;; fc'def
(assert
  (forall ((b ty))
    (forall ((f uni) (t (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (b1 uni))
      (= (tb2t3
           (infix_at
             (infix_mngt
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int)))
             b
             (fc6
               (infix_mngt
                 (infix_mngt int int)
                 (infix_mngt (infix_mngt int int) (infix_mngt int int)))
               b
               circuit1
               f
               (t2tb2 t))
             b1)) (select t (tb2t13 (infix_at circuit1 b f b1)))))))

;; t2tb
(declare-fun t2tb27 ((Array circuit circuit)) uni)

;; t2tb_sort
(assert
  (forall ((x (Array circuit circuit)))
    (sort (infix_mngt circuit1 circuit1) (t2tb27 x))))

;; tb2t
(declare-fun tb2t27 (uni) (Array circuit circuit))

;; BridgeL
(assert
  (forall ((i (Array circuit circuit)))
    (! (= (tb2t27 (t2tb27 i)) i) :pattern ((t2tb27 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=> (sort (infix_mngt circuit1 circuit1) j) (= (t2tb27 (tb2t27 j)) j)) :pattern (
    (t2tb27
      (tb2t27 j))) )))

;; fc'def
(assert
  (forall ((f (Array circuit circuit)) (t (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (b circuit))
    (= (select (tb2t2
                 (fc6
                   (infix_mngt
                     (infix_mngt int int)
                     (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                   circuit1
                   circuit1
                   (t2tb27 f)
                   (t2tb2 t))) b) (select t (tb2t13
                                              (infix_at
                                                circuit1
                                                circuit1
                                                (t2tb27 f)
                                                (t2tb13 b)))))))

;; fc'def
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (t (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (b circuit))
    (= (select (tb2t2
                 (fc6
                   (infix_mngt
                     (infix_mngt int int)
                     (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                   circuit1
                   (infix_mngt
                     (infix_mngt int int)
                     (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                   (t2tb2 f)
                   (t2tb22 t))) b) (tb2t3
                                     (infix_at
                                       (infix_mngt
                                         (infix_mngt int int)
                                         (infix_mngt
                                           (infix_mngt int int)
                                           (infix_mngt int int)))
                                       (infix_mngt
                                         (infix_mngt int int)
                                         (infix_mngt
                                           (infix_mngt int int)
                                           (infix_mngt int int)))
                                       (t2tb22 t)
                                       (t2tb3 (select f b)))))))

;; fc'def
(assert
  (forall ((im1 ty))
    (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (t uni) (b circuit))
      (= (infix_at
           im1
           circuit1
           (fc6
             im1
             circuit1
             (infix_mngt
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int)))
             (t2tb2 f)
             t)
           (t2tb13 b)) (infix_at
                         im1
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt int int)))
                         t
                         (t2tb3 (select f b)))))))

;; fc'def
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (t (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int)))) (b (Array Int Int)))
    (= (select (tb2t3
                 (fc6
                   (infix_mngt (infix_mngt int int) (infix_mngt int int))
                   (infix_mngt int int)
                   (infix_mngt (infix_mngt int int) (infix_mngt int int))
                   (t2tb3 f)
                   (t2tb24 t))) b) (tb2t5
                                     (infix_at
                                       (infix_mngt
                                         (infix_mngt int int)
                                         (infix_mngt int int))
                                       (infix_mngt
                                         (infix_mngt int int)
                                         (infix_mngt int int))
                                       (t2tb24 t)
                                       (t2tb5 (select f b)))))))

;; t2tb
(declare-fun t2tb28 ((Array (Array (Array Int Int) (Array Int Int)) (Array Int Int))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (Array (Array Int Int) (Array Int Int)) (Array Int Int))))
    (sort
      (infix_mngt
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (infix_mngt int int))
      (t2tb28 x))))

;; tb2t
(declare-fun tb2t28 (uni) (Array (Array (Array Int Int) (Array Int Int)) (Array Int Int)))

;; BridgeL
(assert
  (forall ((i (Array (Array (Array Int Int) (Array Int Int)) (Array Int Int))))
    (! (= (tb2t28 (t2tb28 i)) i) :pattern ((t2tb28 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb28 (tb2t28 j)) j) :pattern ((t2tb28 (tb2t28 j))) )))

;; fc'def
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (t (Array (Array (Array Int Int) (Array Int Int)) (Array Int Int))) (b (Array Int Int)))
    (= (select (tb2t5
                 (fc6
                   (infix_mngt int int)
                   (infix_mngt int int)
                   (infix_mngt (infix_mngt int int) (infix_mngt int int))
                   (t2tb3 f)
                   (t2tb28 t))) b) (tb2t7
                                     (infix_at
                                       (infix_mngt int int)
                                       (infix_mngt
                                         (infix_mngt int int)
                                         (infix_mngt int int))
                                       (t2tb28 t)
                                       (t2tb5 (select f b)))))))

;; fc'def
(assert
  (forall ((im1 ty))
    (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (t uni) (b (Array Int Int)))
      (= (infix_at
           im1
           (infix_mngt int int)
           (fc6
             im1
             (infix_mngt int int)
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (t2tb3 f)
             t)
           (t2tb7 b)) (infix_at
                        im1
                        (infix_mngt
                          (infix_mngt int int)
                          (infix_mngt int int))
                        t
                        (t2tb5 (select f b)))))))

;; fc'def
(assert
  (forall ((b ty))
    (forall ((f uni) (t (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (b1 uni))
      (= (tb2t5
           (infix_at
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             b
             (fc6
               (infix_mngt (infix_mngt int int) (infix_mngt int int))
               b
               (infix_mngt int int)
               f
               (t2tb3 t))
             b1)) (select t (tb2t7 (infix_at (infix_mngt int int) b f b1)))))))

;; fc'def
(assert
  (forall ((b ty))
    (forall ((f uni) (t (Array (Array Int Int) (Array Int Int))) (b1 uni))
      (= (tb2t7
           (infix_at
             (infix_mngt int int)
             b
             (fc6 (infix_mngt int int) b (infix_mngt int int) f (t2tb5 t))
             b1)) (select t (tb2t7 (infix_at (infix_mngt int int) b f b1)))))))

;; fc'def
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (t (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (b (Array Int Int)))
    (= (select (tb2t3
                 (fc6
                   (infix_mngt (infix_mngt int int) (infix_mngt int int))
                   (infix_mngt int int)
                   (infix_mngt int int)
                   (t2tb5 f)
                   (t2tb3 t))) b) (select t (select f b)))))

;; fc'def
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (t (Array (Array Int Int) (Array Int Int))) (b (Array Int Int)))
    (= (select (tb2t5
                 (fc6
                   (infix_mngt int int)
                   (infix_mngt int int)
                   (infix_mngt int int)
                   (t2tb5 f)
                   (t2tb5 t))) b) (select t (select f b)))))

;; fc'def
(assert
  (forall ((im1 ty))
    (forall ((f (Array (Array Int Int) (Array Int Int))) (t uni) (b (Array Int Int)))
      (= (infix_at
           im1
           (infix_mngt int int)
           (fc6 im1 (infix_mngt int int) (infix_mngt int int) (t2tb5 f) t)
           (t2tb7 b)) (infix_at
                        im1
                        (infix_mngt int int)
                        t
                        (t2tb7 (select f b)))))))

;; fc'def
(assert
  (forall ((b ty))
    (forall ((f uni) (t (Array Int Int)) (b1 uni))
      (= (tb2t8 (infix_at int b (fc6 int b int f (t2tb7 t)) b1)) (select t 
      (tb2t8
        (infix_at int b f b1)))))))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (t (Array Int Int)) (b Int))
    (= (select (tb2t7 (fc6 int int int (t2tb7 f) (t2tb7 t))) b) (select t (select f b)))))

;; fc'def
(assert
  (forall ((im1 ty))
    (forall ((f (Array Int Int)) (t uni) (b Int))
      (= (infix_at im1 int (fc6 im1 int int (t2tb7 f) t) (t2tb8 b)) (infix_at
                                                                    im1
                                                                    int
                                                                    t
                                                                    (t2tb8
                                                                    (select f b)))))))

;; fc'def
(assert
  (forall ((a ty) (b ty) (im1 ty))
    (forall ((f uni) (t uni) (b1 uni))
      (= (infix_at im1 b (fc6 im1 b a f t) b1) (infix_at
                                                 im1
                                                 a
                                                 t
                                                 (infix_at a b f b1))))))

;; iterate_map
(assert
  (forall ((a ty) (b ty) (im1 ty))
    (forall ((op1 uni) (s uni) (f uni) (t uni))
      (=>
        (=> (is_empty b s) (iterable im1 op1))
        (=>
          (commut im1 op1)
          (=>
            (p_injective a b f s)
            (= (iterate im1 a op1 (map1 a b f s) t) (iterate
                                                      im1
                                                      b
                                                      op1
                                                      s
                                                      (fc6 im1 b a f t)))))))))

;; iterate_cardone
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))) (s (set circuit)) (t (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (=>
      (iterable
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        (t2tb23 op1))
      (=>
        (commut
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          (t2tb23 op1))
        (=>
          (= (cardinal circuit1 (t2tb12 s)) 1)
          (= (tb2t3
               (iterate
                 (infix_mngt
                   (infix_mngt int int)
                   (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                 circuit1
                 (t2tb23 op1)
                 (t2tb12 s)
                 (t2tb2 t))) (select t (tb2t13 (element circuit1 (t2tb12 s))))))))))

;; iterate_cardone
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array Int Int)) (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int))))) (s (set (Array Int Int))) (t (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (=>
      (iterable
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (t2tb25 op1))
      (=>
        (commut
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (t2tb25 op1))
        (=>
          (= (cardinal (infix_mngt int int) (t2tb15 s)) 1)
          (= (tb2t5
               (iterate
                 (infix_mngt (infix_mngt int int) (infix_mngt int int))
                 (infix_mngt int int)
                 (t2tb25 op1)
                 (t2tb15 s)
                 (t2tb3 t))) (select t (tb2t7
                                         (element
                                           (infix_mngt int int)
                                           (t2tb15 s))))))))))

;; iterate_cardone
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (t (Array (Array Int Int) (Array Int Int))))
    (=>
      (iterable (infix_mngt int int) (t2tb3 op1))
      (=>
        (commut (infix_mngt int int) (t2tb3 op1))
        (=>
          (= (cardinal (infix_mngt int int) (t2tb15 s)) 1)
          (= (tb2t7
               (iterate
                 (infix_mngt int int)
                 (infix_mngt int int)
                 (t2tb3 op1)
                 (t2tb15 s)
                 (t2tb5 t))) (select t (tb2t7
                                         (element
                                           (infix_mngt int int)
                                           (t2tb15 s))))))))))

;; iterate_cardone
(assert
  (forall ((op1 (Array Int (Array Int Int))) (s (set Int)) (t (Array Int Int)))
    (=>
      (iterable int (t2tb9 op1))
      (=>
        (commut int (t2tb9 op1))
        (=>
          (= (cardinal int (t2tb16 s)) 1)
          (= (tb2t8 (iterate int int (t2tb9 op1) (t2tb16 s) (t2tb7 t))) (select t 
          (tb2t8
            (element int (t2tb16 s))))))))))

;; iterate_cardone
(assert
  (forall ((a ty) (im1 ty))
    (forall ((op1 uni) (s uni) (t uni))
      (=>
        (iterable im1 op1)
        (=>
          (commut im1 op1)
          (=>
            (= (cardinal a s) 1)
            (= (iterate im1 a op1 s t) (infix_at im1 a t (element a s)))))))))

;; iterate_cardzero
(assert
  (forall ((a ty) (im1 ty))
    (forall ((op1 uni) (s uni) (t uni))
      (=>
        (commut im1 op1)
        (=>
          (iterable im1 op1)
          (=>
            (= (cardinal a s) 0)
            (= (iterate im1 a op1 s t) (neutral_elt im1 op1))))))))

;; fc
(declare-fun fc7 (ty
  ty
  ty
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty) (im1 ty))
    (forall ((x uni)) (sort (infix_mngt (tuple21 a b) im1) (fc7 im1 b a x)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (o uni))
      (= (tb2t3
           (infix_at
             (infix_mngt
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int)))
             (tuple21 a circuit1)
             (fc7
               (infix_mngt
                 (infix_mngt int int)
                 (infix_mngt (infix_mngt int int) (infix_mngt int int)))
               circuit1
               a
               f)
             o)) (select (tb2t2
                           (infix_at
                             (infix_mngt
                               circuit1
                               (infix_mngt
                                 (infix_mngt int int)
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt int int))))
                             a
                             f
                             (fir circuit1 a o))) (tb2t13
                                                    (sec1 circuit1 a o)))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (o uni))
      (= (tb2t5
           (infix_at
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (tuple21 a (infix_mngt int int))
             (fc7
               (infix_mngt (infix_mngt int int) (infix_mngt int int))
               (infix_mngt int int)
               a
               f)
             o)) (select (tb2t3
                           (infix_at
                             (infix_mngt
                               (infix_mngt int int)
                               (infix_mngt
                                 (infix_mngt int int)
                                 (infix_mngt int int)))
                             a
                             f
                             (fir (infix_mngt int int) a o))) (tb2t7
                                                                (sec1
                                                                  (infix_mngt
                                                                    int
                                                                    int)
                                                                  a
                                                                  o)))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (o uni))
      (= (tb2t7
           (infix_at
             (infix_mngt int int)
             (tuple21 a (infix_mngt int int))
             (fc7 (infix_mngt int int) (infix_mngt int int) a f)
             o)) (select (tb2t5
                           (infix_at
                             (infix_mngt
                               (infix_mngt int int)
                               (infix_mngt int int))
                             a
                             f
                             (fir (infix_mngt int int) a o))) (tb2t7
                                                                (sec1
                                                                  (infix_mngt
                                                                    int
                                                                    int)
                                                                  a
                                                                  o)))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (o uni))
      (= (tb2t8 (infix_at int (tuple21 a int) (fc7 int int a f) o)) (select 
      (tb2t7
        (infix_at (infix_mngt int int) a f (fir int a o))) (tb2t8
                                                             (sec1 int a o)))))))

;; t2tb
(declare-fun t2tb29 ((Array (tuple2 circuit
  (Array Int Int)) (Array (Array Int Int) (Array Int Int)))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (tuple2 circuit (Array Int Int)) (Array (Array Int Int) (Array Int Int)))))
    (sort
      (infix_mngt
        (tuple21 circuit1 (infix_mngt int int))
        (infix_mngt (infix_mngt int int) (infix_mngt int int)))
      (t2tb29 x))))

;; tb2t
(declare-fun tb2t29 (uni) (Array (tuple2 circuit
  (Array Int Int)) (Array (Array Int Int) (Array Int Int))))

;; BridgeL
(assert
  (forall ((i (Array (tuple2 circuit (Array Int Int)) (Array (Array Int Int) (Array Int Int)))))
    (! (= (tb2t29 (t2tb29 i)) i) :pattern ((t2tb29 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb29 (tb2t29 j)) j) :pattern ((t2tb29 (tb2t29 j))) )))

;; t2tb
(declare-fun t2tb30 ((tuple2 circuit
  (Array Int Int))) uni)

;; t2tb_sort
(assert
  (forall ((x (tuple2 circuit (Array Int Int))))
    (sort (tuple21 circuit1 (infix_mngt int int)) (t2tb30 x))))

;; tb2t
(declare-fun tb2t30 (uni) (tuple2 circuit
  (Array Int Int)))

;; BridgeL
(assert
  (forall ((i (tuple2 circuit (Array Int Int))))
    (! (= (tb2t30 (t2tb30 i)) i) :pattern ((t2tb30 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb30 (tb2t30 j)) j) :pattern ((t2tb30 (tb2t30 j))) )))

;; fc'def
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (o (tuple2 circuit (Array Int Int))))
    (= (tb2t5
         (infix_at
           (infix_mngt (infix_mngt int int) (infix_mngt int int))
           (tuple21 circuit1 (infix_mngt int int))
           (fc7
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (infix_mngt int int)
             circuit1
             (t2tb2 f))
           (t2tb30 o))) (select (select f (tb2t13
                                            (fir
                                              (infix_mngt int int)
                                              circuit1
                                              (t2tb30 o)))) (tb2t7
                                                              (sec1
                                                                (infix_mngt
                                                                  int
                                                                  int)
                                                                circuit1
                                                                (t2tb30 o)))))))

;; t2tb
(declare-fun t2tb31 ((Array (tuple2 (Array Int Int)
  (Array Int Int)) (Array Int Int))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (tuple2 (Array Int Int) (Array Int Int)) (Array Int Int))))
    (sort
      (infix_mngt
        (tuple21 (infix_mngt int int) (infix_mngt int int))
        (infix_mngt int int))
      (t2tb31 x))))

;; tb2t
(declare-fun tb2t31 (uni) (Array (tuple2 (Array Int Int)
  (Array Int Int)) (Array Int Int)))

;; BridgeL
(assert
  (forall ((i (Array (tuple2 (Array Int Int) (Array Int Int)) (Array Int Int))))
    (! (= (tb2t31 (t2tb31 i)) i) :pattern ((t2tb31 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb31 (tb2t31 j)) j) :pattern ((t2tb31 (tb2t31 j))) )))

;; t2tb
(declare-fun t2tb32 ((tuple2 (Array Int Int)
  (Array Int Int))) uni)

;; t2tb_sort
(assert
  (forall ((x (tuple2 (Array Int Int) (Array Int Int))))
    (sort (tuple21 (infix_mngt int int) (infix_mngt int int)) (t2tb32 x))))

;; tb2t
(declare-fun tb2t32 (uni) (tuple2 (Array Int Int)
  (Array Int Int)))

;; BridgeL
(assert
  (forall ((i (tuple2 (Array Int Int) (Array Int Int))))
    (! (= (tb2t32 (t2tb32 i)) i) :pattern ((t2tb32 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb32 (tb2t32 j)) j) :pattern ((t2tb32 (tb2t32 j))) )))

;; fc'def
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (o (tuple2 (Array Int Int) (Array Int Int))))
    (= (tb2t7
         (infix_at
           (infix_mngt int int)
           (tuple21 (infix_mngt int int) (infix_mngt int int))
           (fc7
             (infix_mngt int int)
             (infix_mngt int int)
             (infix_mngt int int)
             (t2tb3 f))
           (t2tb32 o))) (select (select f (tb2t7
                                            (fir
                                              (infix_mngt int int)
                                              (infix_mngt int int)
                                              (t2tb32 o)))) (tb2t7
                                                              (sec1
                                                                (infix_mngt
                                                                  int
                                                                  int)
                                                                (infix_mngt
                                                                  int
                                                                  int)
                                                                (t2tb32 o)))))))

;; t2tb
(declare-fun t2tb33 ((Array (tuple2 (Array Int Int)
  Int) Int)) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (tuple2 (Array Int Int) Int) Int)))
    (sort (infix_mngt (tuple21 (infix_mngt int int) int) int) (t2tb33 x))))

;; tb2t
(declare-fun tb2t33 (uni) (Array (tuple2 (Array Int Int)
  Int) Int))

;; BridgeL
(assert
  (forall ((i (Array (tuple2 (Array Int Int) Int) Int)))
    (! (= (tb2t33 (t2tb33 i)) i) :pattern ((t2tb33 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb33 (tb2t33 j)) j) :pattern ((t2tb33 (tb2t33 j))) )))

;; t2tb
(declare-fun t2tb34 ((tuple2 (Array Int Int)
  Int)) uni)

;; t2tb_sort
(assert
  (forall ((x (tuple2 (Array Int Int) Int)))
    (sort (tuple21 (infix_mngt int int) int) (t2tb34 x))))

;; tb2t
(declare-fun tb2t34 (uni) (tuple2 (Array Int Int)
  Int))

;; BridgeL
(assert
  (forall ((i (tuple2 (Array Int Int) Int)))
    (! (= (tb2t34 (t2tb34 i)) i) :pattern ((t2tb34 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb34 (tb2t34 j)) j) :pattern ((t2tb34 (tb2t34 j))) )))

;; fc'def
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (o (tuple2 (Array Int Int) Int)))
    (= (tb2t8
         (infix_at
           int
           (tuple21 (infix_mngt int int) int)
           (fc7 int int (infix_mngt int int) (t2tb5 f))
           (t2tb34 o))) (select (select f (tb2t7
                                            (fir
                                              int
                                              (infix_mngt int int)
                                              (t2tb34 o)))) (tb2t8
                                                              (sec1
                                                                int
                                                                (infix_mngt
                                                                  int
                                                                  int)
                                                                (t2tb34 o)))))))

;; fc'def
(assert
  (forall ((a ty) (b ty) (im1 ty))
    (forall ((f uni) (o uni))
      (= (infix_at im1 (tuple21 a b) (fc7 im1 b a f) o) (infix_at
                                                          im1
                                                          b
                                                          (infix_at
                                                            (infix_mngt
                                                              b
                                                              im1)
                                                            a
                                                            f
                                                            (fir b a o))
                                                          (sec1 b a o))))))

;; t2tb
(declare-fun t2tb35 ((set (tuple2 circuit
  (Array Int Int)))) uni)

;; t2tb_sort
(assert
  (forall ((x (set (tuple2 circuit (Array Int Int)))))
    (sort (set1 (tuple21 circuit1 (infix_mngt int int))) (t2tb35 x))))

;; tb2t
(declare-fun tb2t35 (uni) (set (tuple2 circuit
  (Array Int Int))))

;; BridgeL
(assert
  (forall ((i (set (tuple2 circuit (Array Int Int)))))
    (! (= (tb2t35 (t2tb35 i)) i) :pattern ((t2tb35 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb35 (tb2t35 j)) j) :pattern ((t2tb35 (tb2t35 j))) )))

;; injec_iterate
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array Int Int)) (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int))))) (a circuit) (s (set (Array Int Int))) (f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (=>
      (iterable
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (t2tb25 op1))
      (=>
        (commut
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (t2tb25 op1))
        (= (tb2t5
             (iterate
               (infix_mngt (infix_mngt int int) (infix_mngt int int))
               (infix_mngt int int)
               (t2tb25 op1)
               (t2tb15 s)
               (t2tb3 (select f a)))) (tb2t5
                                        (iterate
                                          (infix_mngt
                                            (infix_mngt int int)
                                            (infix_mngt int int))
                                          (tuple21
                                            circuit1
                                            (infix_mngt int int))
                                          (t2tb25 op1)
                                          (cartesian_product
                                            (infix_mngt int int)
                                            circuit1
                                            (add
                                              circuit1
                                              (t2tb13 a)
                                              (empty circuit1))
                                            (t2tb15 s))
                                          (fc7
                                            (infix_mngt
                                              (infix_mngt int int)
                                              (infix_mngt int int))
                                            (infix_mngt int int)
                                            circuit1
                                            (t2tb2 f)))))))))

;; t2tb
(declare-fun t2tb36 ((set (tuple2 (Array Int Int)
  (Array Int Int)))) uni)

;; t2tb_sort
(assert
  (forall ((x (set (tuple2 (Array Int Int) (Array Int Int)))))
    (sort
      (set1 (tuple21 (infix_mngt int int) (infix_mngt int int)))
      (t2tb36 x))))

;; tb2t
(declare-fun tb2t36 (uni) (set (tuple2 (Array Int Int)
  (Array Int Int))))

;; BridgeL
(assert
  (forall ((i (set (tuple2 (Array Int Int) (Array Int Int)))))
    (! (= (tb2t36 (t2tb36 i)) i) :pattern ((t2tb36 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb36 (tb2t36 j)) j) :pattern ((t2tb36 (tb2t36 j))) )))

;; injec_iterate
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (a (Array Int Int)) (s (set (Array Int Int))) (f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (=>
      (iterable (infix_mngt int int) (t2tb3 op1))
      (=>
        (commut (infix_mngt int int) (t2tb3 op1))
        (= (tb2t7
             (iterate
               (infix_mngt int int)
               (infix_mngt int int)
               (t2tb3 op1)
               (t2tb15 s)
               (t2tb5 (select f a)))) (tb2t7
                                        (iterate
                                          (infix_mngt int int)
                                          (tuple21
                                            (infix_mngt int int)
                                            (infix_mngt int int))
                                          (t2tb3 op1)
                                          (cartesian_product
                                            (infix_mngt int int)
                                            (infix_mngt int int)
                                            (add
                                              (infix_mngt int int)
                                              (t2tb7 a)
                                              (empty (infix_mngt int int)))
                                            (t2tb15 s))
                                          (fc7
                                            (infix_mngt int int)
                                            (infix_mngt int int)
                                            (infix_mngt int int)
                                            (t2tb3 f)))))))))

;; t2tb
(declare-fun t2tb37 ((set (tuple2 (Array Int Int)
  Int))) uni)

;; t2tb_sort
(assert
  (forall ((x (set (tuple2 (Array Int Int) Int))))
    (sort (set1 (tuple21 (infix_mngt int int) int)) (t2tb37 x))))

;; tb2t
(declare-fun tb2t37 (uni) (set (tuple2 (Array Int Int)
  Int)))

;; BridgeL
(assert
  (forall ((i (set (tuple2 (Array Int Int) Int))))
    (! (= (tb2t37 (t2tb37 i)) i) :pattern ((t2tb37 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb37 (tb2t37 j)) j) :pattern ((t2tb37 (tb2t37 j))) )))

;; injec_iterate
(assert
  (forall ((op1 (Array Int (Array Int Int))) (a (Array Int Int)) (s (set Int)) (f (Array (Array Int Int) (Array Int Int))))
    (=>
      (iterable int (t2tb9 op1))
      (=>
        (commut int (t2tb9 op1))
        (= (tb2t8
             (iterate int int (t2tb9 op1) (t2tb16 s) (t2tb7 (select f a)))) 
        (tb2t8
          (iterate
            int
            (tuple21 (infix_mngt int int) int)
            (t2tb9 op1)
            (cartesian_product
              int
              (infix_mngt int int)
              (add
                (infix_mngt int int)
                (t2tb7 a)
                (empty (infix_mngt int int)))
              (t2tb16 s))
            (fc7 int int (infix_mngt int int) (t2tb5 f)))))))))

;; injec_iterate
(assert
  (forall ((a ty) (b ty) (im1 ty))
    (forall ((op1 uni) (a1 uni) (s uni) (f uni))
      (=>
        (iterable im1 op1)
        (=>
          (commut im1 op1)
          (= (iterate im1 b op1 s (infix_at (infix_mngt b im1) a f a1)) 
          (iterate
            im1
            (tuple21 a b)
            op1
            (cartesian_product b a (add a a1 (empty a)) s)
            (fc7 im1 b a f))))))))

;; fc
(declare-fun fc8 (ty
  ty
  ty
  uni
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty) (im1 ty))
    (forall ((x uni) (x1 uni) (x2 uni))
      (sort (infix_mngt a im1) (fc8 im1 b a x x1 x2)))))

;; fc
(declare-fun fc9 (ty
  ty
  ty
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty) (im1 ty))
    (forall ((x uni)) (sort (infix_mngt (tuple21 a b) im1) (fc9 im1 b a x)))))

;; fc'def
(assert
  (forall ((b ty))
    (forall ((op1 (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))) (s2 uni) (f uni) (a circuit))
      (= (select (tb2t2
                   (fc8
                     (infix_mngt
                       (infix_mngt int int)
                       (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                     b
                     circuit1
                     (t2tb23 op1)
                     s2
                     f)) a) (tb2t3
                              (iterate
                                (infix_mngt
                                  (infix_mngt int int)
                                  (infix_mngt
                                    (infix_mngt int int)
                                    (infix_mngt int int)))
                                b
                                (t2tb23 op1)
                                s2
                                (infix_at
                                  (infix_mngt
                                    b
                                    (infix_mngt
                                      (infix_mngt int int)
                                      (infix_mngt
                                        (infix_mngt int int)
                                        (infix_mngt int int))))
                                  circuit1
                                  f
                                  (t2tb13 a))))))))

;; t2tb
(declare-fun t2tb38 ((Array circuit (Array (Array Int Int) (Array Int Int)))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array circuit (Array (Array Int Int) (Array Int Int)))))
    (sort
      (infix_mngt
        circuit1
        (infix_mngt (infix_mngt int int) (infix_mngt int int)))
      (t2tb38 x))))

;; tb2t
(declare-fun tb2t38 (uni) (Array circuit (Array (Array Int Int) (Array Int Int))))

;; BridgeL
(assert
  (forall ((i (Array circuit (Array (Array Int Int) (Array Int Int)))))
    (! (= (tb2t38 (t2tb38 i)) i) :pattern ((t2tb38 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb38 (tb2t38 j)) j) :pattern ((t2tb38 (tb2t38 j))) )))

;; fc'def
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array Int Int)) (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int))))) (s2 (set (Array Int Int))) (f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (a circuit))
    (= (tb2t5
         (infix_at
           (infix_mngt (infix_mngt int int) (infix_mngt int int))
           circuit1
           (fc8
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (infix_mngt int int)
             circuit1
             (t2tb25 op1)
             (t2tb15 s2)
             (t2tb2 f))
           (t2tb13 a))) (tb2t5
                          (iterate
                            (infix_mngt
                              (infix_mngt int int)
                              (infix_mngt int int))
                            (infix_mngt int int)
                            (t2tb25 op1)
                            (t2tb15 s2)
                            (t2tb3 (select f a)))))))

;; fc'def
(assert
  (forall ((b ty))
    (forall ((op1 (Array (Array (Array Int Int) (Array Int Int)) (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int))))) (s2 uni) (f uni) (a (Array Int Int)))
      (= (select (tb2t3
                   (fc8
                     (infix_mngt (infix_mngt int int) (infix_mngt int int))
                     b
                     (infix_mngt int int)
                     (t2tb25 op1)
                     s2
                     f)) a) (tb2t5
                              (iterate
                                (infix_mngt
                                  (infix_mngt int int)
                                  (infix_mngt int int))
                                b
                                (t2tb25 op1)
                                s2
                                (infix_at
                                  (infix_mngt
                                    b
                                    (infix_mngt
                                      (infix_mngt int int)
                                      (infix_mngt int int)))
                                  (infix_mngt int int)
                                  f
                                  (t2tb7 a))))))))

;; fc'def
(assert
  (forall ((b ty))
    (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s2 uni) (f uni) (a (Array Int Int)))
      (= (select (tb2t5
                   (fc8
                     (infix_mngt int int)
                     b
                     (infix_mngt int int)
                     (t2tb3 op1)
                     s2
                     f)) a) (tb2t7
                              (iterate
                                (infix_mngt int int)
                                b
                                (t2tb3 op1)
                                s2
                                (infix_at
                                  (infix_mngt b (infix_mngt int int))
                                  (infix_mngt int int)
                                  f
                                  (t2tb7 a))))))))

;; fc'def
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s2 (set (Array Int Int))) (f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (a (Array Int Int)))
    (= (select (tb2t5
                 (fc8
                   (infix_mngt int int)
                   (infix_mngt int int)
                   (infix_mngt int int)
                   (t2tb3 op1)
                   (t2tb15 s2)
                   (t2tb3 f))) a) (tb2t7
                                    (iterate
                                      (infix_mngt int int)
                                      (infix_mngt int int)
                                      (t2tb3 op1)
                                      (t2tb15 s2)
                                      (t2tb5 (select f a)))))))

;; t2tb
(declare-fun t2tb39 ((Array (Array Int Int) Int)) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (Array Int Int) Int)))
    (sort (infix_mngt (infix_mngt int int) int) (t2tb39 x))))

;; tb2t
(declare-fun tb2t39 (uni) (Array (Array Int Int) Int))

;; BridgeL
(assert
  (forall ((i (Array (Array Int Int) Int)))
    (! (= (tb2t39 (t2tb39 i)) i) :pattern ((t2tb39 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb39 (tb2t39 j)) j) :pattern ((t2tb39 (tb2t39 j))) )))

;; fc'def
(assert
  (forall ((op1 (Array Int (Array Int Int))) (s2 (set Int)) (f (Array (Array Int Int) (Array Int Int))) (a (Array Int Int)))
    (= (tb2t8
         (infix_at
           int
           (infix_mngt int int)
           (fc8
             int
             int
             (infix_mngt int int)
             (t2tb9 op1)
             (t2tb16 s2)
             (t2tb5 f))
           (t2tb7 a))) (tb2t8
                         (iterate
                           int
                           int
                           (t2tb9 op1)
                           (t2tb16 s2)
                           (t2tb7 (select f a)))))))

;; fc'def
(assert
  (forall ((b ty))
    (forall ((op1 (Array Int (Array Int Int))) (s2 uni) (f uni) (a Int))
      (= (select (tb2t7 (fc8 int b int (t2tb9 op1) s2 f)) a) (tb2t8
                                                               (iterate
                                                                 int
                                                                 b
                                                                 (t2tb9 op1)
                                                                 s2
                                                                 (infix_at
                                                                   (infix_mngt
                                                                    b
                                                                    int)
                                                                   int
                                                                   f
                                                                   (t2tb8 a))))))))

;; fc'def
(assert
  (forall ((a ty) (b ty) (im1 ty))
    (forall ((op1 uni) (s2 uni) (f uni) (a1 uni))
      (= (infix_at im1 a (fc8 im1 b a op1 s2 f) a1) (iterate
                                                      im1
                                                      b
                                                      op1
                                                      s2
                                                      (infix_at
                                                        (infix_mngt b im1)
                                                        a
                                                        f
                                                        a1))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (o uni))
      (= (tb2t3
           (infix_at
             (infix_mngt
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int)))
             (tuple21 a circuit1)
             (fc9
               (infix_mngt
                 (infix_mngt int int)
                 (infix_mngt (infix_mngt int int) (infix_mngt int int)))
               circuit1
               a
               f)
             o)) (select (tb2t2
                           (infix_at
                             (infix_mngt
                               circuit1
                               (infix_mngt
                                 (infix_mngt int int)
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt int int))))
                             a
                             f
                             (fir circuit1 a o))) (tb2t13
                                                    (sec1 circuit1 a o)))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (o uni))
      (= (tb2t5
           (infix_at
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (tuple21 a (infix_mngt int int))
             (fc9
               (infix_mngt (infix_mngt int int) (infix_mngt int int))
               (infix_mngt int int)
               a
               f)
             o)) (select (tb2t3
                           (infix_at
                             (infix_mngt
                               (infix_mngt int int)
                               (infix_mngt
                                 (infix_mngt int int)
                                 (infix_mngt int int)))
                             a
                             f
                             (fir (infix_mngt int int) a o))) (tb2t7
                                                                (sec1
                                                                  (infix_mngt
                                                                    int
                                                                    int)
                                                                  a
                                                                  o)))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (o uni))
      (= (tb2t7
           (infix_at
             (infix_mngt int int)
             (tuple21 a (infix_mngt int int))
             (fc9 (infix_mngt int int) (infix_mngt int int) a f)
             o)) (select (tb2t5
                           (infix_at
                             (infix_mngt
                               (infix_mngt int int)
                               (infix_mngt int int))
                             a
                             f
                             (fir (infix_mngt int int) a o))) (tb2t7
                                                                (sec1
                                                                  (infix_mngt
                                                                    int
                                                                    int)
                                                                  a
                                                                  o)))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (o uni))
      (= (tb2t8 (infix_at int (tuple21 a int) (fc9 int int a f) o)) (select 
      (tb2t7
        (infix_at (infix_mngt int int) a f (fir int a o))) (tb2t8
                                                             (sec1 int a o)))))))

;; fc'def
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (o (tuple2 circuit (Array Int Int))))
    (= (tb2t5
         (infix_at
           (infix_mngt (infix_mngt int int) (infix_mngt int int))
           (tuple21 circuit1 (infix_mngt int int))
           (fc9
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (infix_mngt int int)
             circuit1
             (t2tb2 f))
           (t2tb30 o))) (select (select f (tb2t13
                                            (fir
                                              (infix_mngt int int)
                                              circuit1
                                              (t2tb30 o)))) (tb2t7
                                                              (sec1
                                                                (infix_mngt
                                                                  int
                                                                  int)
                                                                circuit1
                                                                (t2tb30 o)))))))

;; fc'def
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (o (tuple2 (Array Int Int) (Array Int Int))))
    (= (tb2t7
         (infix_at
           (infix_mngt int int)
           (tuple21 (infix_mngt int int) (infix_mngt int int))
           (fc9
             (infix_mngt int int)
             (infix_mngt int int)
             (infix_mngt int int)
             (t2tb3 f))
           (t2tb32 o))) (select (select f (tb2t7
                                            (fir
                                              (infix_mngt int int)
                                              (infix_mngt int int)
                                              (t2tb32 o)))) (tb2t7
                                                              (sec1
                                                                (infix_mngt
                                                                  int
                                                                  int)
                                                                (infix_mngt
                                                                  int
                                                                  int)
                                                                (t2tb32 o)))))))

;; fc'def
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (o (tuple2 (Array Int Int) Int)))
    (= (tb2t8
         (infix_at
           int
           (tuple21 (infix_mngt int int) int)
           (fc9 int int (infix_mngt int int) (t2tb5 f))
           (t2tb34 o))) (select (select f (tb2t7
                                            (fir
                                              int
                                              (infix_mngt int int)
                                              (t2tb34 o)))) (tb2t8
                                                              (sec1
                                                                int
                                                                (infix_mngt
                                                                  int
                                                                  int)
                                                                (t2tb34 o)))))))

;; fc'def
(assert
  (forall ((a ty) (b ty) (im1 ty))
    (forall ((f uni) (o uni))
      (= (infix_at im1 (tuple21 a b) (fc9 im1 b a f) o) (infix_at
                                                          im1
                                                          b
                                                          (infix_at
                                                            (infix_mngt
                                                              b
                                                              im1)
                                                            a
                                                            f
                                                            (fir b a o))
                                                          (sec1 b a o))))))

;; iterate_cartesian_product
(assert
  (forall ((a ty) (b ty) (im1 ty))
    (forall ((op1 uni) (s1 uni) (s2 uni) (f uni))
      (=>
        (iterable im1 op1)
        (=>
          (commut im1 op1)
          (= (iterate im1 a op1 s1 (fc8 im1 b a op1 s2 f)) (iterate
                                                             im1
                                                             (tuple21 a b)
                                                             op1
                                                             (cartesian_product
                                                               b
                                                               a
                                                               s1
                                                               s2)
                                                             (fc9 im1 b a f))))))))

;; iterate_eq_func
(assert
  (forall ((a ty) (im1 ty))
    (forall ((op1 uni) (s uni) (f1 uni) (f2 uni))
      (=>
        (commut im1 op1)
        (=>
          (iterable im1 op1)
          (=>
            (p_injective im1 a f1 s)
            (=>
              (p_injective im1 a f2 s)
              (=>
                (= (map1 im1 a f1 s) (map1 im1 a f2 s))
                (= (iterate im1 a op1 s f1) (iterate im1 a op1 s f2))))))))))

;; p_injective_in
(declare-fun p_injective_in (ty
  ty
  uni
  uni
  uni) Bool)

;; p_injective_in'def
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (s (set circuit)) (sqt (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (=
      (p_injective_in
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        circuit1
        (t2tb2 f)
        (t2tb12 s)
        (t2tb11 sqt))
      (forall ((e circuit))
        (=>
          (mem circuit1 (t2tb13 e) (t2tb12 s))
          (and
            (mem
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              (t2tb3 (select f e))
              (t2tb11 sqt))
            (forall ((e1 circuit) (eqt circuit))
              (=>
                (mem circuit1 (t2tb13 e1) (t2tb12 s))
                (=>
                  (mem circuit1 (t2tb13 eqt) (t2tb12 s))
                  (=>
                    (not (= e1 eqt))
                    (not (= (select f e1) (select f eqt)))))))))))))

;; p_injective_in'def
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (sqt (set (Array (Array Int Int) (Array Int Int)))))
    (=
      (p_injective_in
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (infix_mngt int int)
        (t2tb3 f)
        (t2tb15 s)
        (t2tb14 sqt))
      (forall ((e (Array Int Int)))
        (=>
          (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
          (and
            (mem
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (t2tb5 (select f e))
              (t2tb14 sqt))
            (forall ((e1 (Array Int Int)) (eqt (Array Int Int)))
              (=>
                (mem (infix_mngt int int) (t2tb7 e1) (t2tb15 s))
                (=>
                  (mem (infix_mngt int int) (t2tb7 eqt) (t2tb15 s))
                  (=>
                    (not (= e1 eqt))
                    (not (= (select f e1) (select f eqt)))))))))))))

;; p_injective_in'def
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))) (sqt (set (Array Int Int))))
    (=
      (p_injective_in
        (infix_mngt int int)
        (infix_mngt int int)
        (t2tb5 f)
        (t2tb15 s)
        (t2tb15 sqt))
      (forall ((e (Array Int Int)))
        (=>
          (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
          (and
            (mem (infix_mngt int int) (t2tb7 (select f e)) (t2tb15 sqt))
            (forall ((e1 (Array Int Int)) (eqt (Array Int Int)))
              (=>
                (mem (infix_mngt int int) (t2tb7 e1) (t2tb15 s))
                (=>
                  (mem (infix_mngt int int) (t2tb7 eqt) (t2tb15 s))
                  (=>
                    (not (= e1 eqt))
                    (not (= (select f e1) (select f eqt)))))))))))))

;; p_injective_in'def
(assert
  (forall ((f (Array Int Int)) (s (set Int)) (sqt (set Int)))
    (=
      (p_injective_in int int (t2tb7 f) (t2tb16 s) (t2tb16 sqt))
      (forall ((e Int))
        (=>
          (mem int (t2tb8 e) (t2tb16 s))
          (and
            (mem int (t2tb8 (select f e)) (t2tb16 sqt))
            (forall ((e1 Int) (eqt Int))
              (=>
                (mem int (t2tb8 e1) (t2tb16 s))
                (=>
                  (mem int (t2tb8 eqt) (t2tb16 s))
                  (=>
                    (not (= e1 eqt))
                    (not (= (select f e1) (select f eqt)))))))))))))

;; p_injective_in'def
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (sqt uni))
      (and
        (=>
          (p_injective_in b a f s sqt)
          (forall ((e uni))
            (=>
              (mem a e s)
              (and
                (mem b (infix_at b a f e) sqt)
                (forall ((e1 uni) (eqt uni))
                  (=>
                    (sort a e1)
                    (=>
                      (sort a eqt)
                      (=>
                        (mem a e1 s)
                        (=>
                          (mem a eqt s)
                          (=>
                            (not (= e1 eqt))
                            (not
                              (= (infix_at b a f e1) (infix_at b a f eqt)))))))))))))
        (=>
          (forall ((e uni))
            (=>
              (sort a e)
              (=>
                (mem a e s)
                (and
                  (mem b (infix_at b a f e) sqt)
                  (forall ((e1 uni) (eqt uni))
                    (=>
                      (sort a e1)
                      (=>
                        (sort a eqt)
                        (=>
                          (mem a e1 s)
                          (=>
                            (mem a eqt s)
                            (=>
                              (not (= e1 eqt))
                              (not
                                (= (infix_at b a f e1) (infix_at b a f eqt)))))))))))))
          (p_injective_in b a f s sqt))))))

;; equal_func
(declare-fun equal_func (ty
  ty
  uni
  uni) Bool)

;; equal_func'def
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (g (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (=
      (equal_func
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        circuit1
        (t2tb2 f)
        (t2tb2 g))
      (forall ((e circuit)) (= (select f e) (select g e))))))

;; equal_func'def
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (g (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (=
      (equal_func
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (infix_mngt int int)
        (t2tb3 f)
        (t2tb3 g))
      (forall ((e (Array Int Int))) (= (select f e) (select g e))))))

;; equal_func'def
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (g (Array (Array Int Int) (Array Int Int))))
    (=
      (equal_func
        (infix_mngt int int)
        (infix_mngt int int)
        (t2tb5 f)
        (t2tb5 g))
      (forall ((e (Array Int Int))) (= (select f e) (select g e))))))

;; equal_func'def
(assert
  (forall ((f (Array Int Int)) (g (Array Int Int)))
    (=
      (equal_func int int (t2tb7 f) (t2tb7 g))
      (forall ((e Int)) (= (select f e) (select g e))))))

;; equal_func'def
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (g uni))
      (and
        (=>
          (equal_func b a f g)
          (forall ((e uni)) (= (infix_at b a f e) (infix_at b a g e))))
        (=>
          (forall ((e uni))
            (=> (sort a e) (= (infix_at b a f e) (infix_at b a g e))))
          (equal_func b a f g))))))

;; set_equal_func
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (g (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (=> (forall ((e circuit)) (= (select f e) (select g e))) (= f g))))

;; set_equal_func
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (g (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (=> (forall ((e (Array Int Int))) (= (select f e) (select g e))) (= f g))))

;; set_equal_func
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (g (Array (Array Int Int) (Array Int Int))))
    (=> (forall ((e (Array Int Int))) (= (select f e) (select g e))) (= f g))))

;; set_equal_func
(assert
  (forall ((f (Array Int Int)) (g (Array Int Int)))
    (=> (forall ((e Int)) (= (select f e) (select g e))) (= f g))))

;; set_equal_func
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (g uni))
      (=>
        (sort (infix_mngt a b) f)
        (=>
          (sort (infix_mngt a b) g)
          (=>
            (forall ((e uni))
              (=> (sort a e) (= (infix_at b a f e) (infix_at b a g e))))
            (= f g)))))))

;; get_equal_func
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (g (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (=>
      (equal_func
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        circuit1
        (t2tb2 f)
        (t2tb2 g))
      (forall ((e circuit)) (= (select f e) (select g e))))))

;; get_equal_func
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (g (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (=>
      (equal_func
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (infix_mngt int int)
        (t2tb3 f)
        (t2tb3 g))
      (forall ((e (Array Int Int))) (= (select f e) (select g e))))))

;; get_equal_func
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (g (Array (Array Int Int) (Array Int Int))))
    (=>
      (equal_func
        (infix_mngt int int)
        (infix_mngt int int)
        (t2tb5 f)
        (t2tb5 g))
      (forall ((e (Array Int Int))) (= (select f e) (select g e))))))

;; get_equal_func
(assert
  (forall ((f (Array Int Int)) (g (Array Int Int)))
    (=>
      (equal_func int int (t2tb7 f) (t2tb7 g))
      (forall ((e Int)) (= (select f e) (select g e))))))

;; get_equal_func
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (g uni))
      (=>
        (equal_func b a f g)
        (forall ((e uni)) (= (infix_at b a f e) (infix_at b a g e)))))))

;; set_injective
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (s (set circuit)))
    (=>
      (forall ((e circuit) (eqt circuit))
        (=>
          (mem circuit1 (t2tb13 e) (t2tb12 s))
          (=>
            (mem circuit1 (t2tb13 eqt) (t2tb12 s))
            (=> (not (= e eqt)) (not (= (select f e) (select f eqt)))))))
      (p_injective
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        circuit1
        (t2tb2 f)
        (t2tb12 s)))))

;; set_injective
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))))
    (=>
      (forall ((e (Array Int Int)) (eqt (Array Int Int)))
        (=>
          (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
          (=>
            (mem (infix_mngt int int) (t2tb7 eqt) (t2tb15 s))
            (=> (not (= e eqt)) (not (= (select f e) (select f eqt)))))))
      (p_injective
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (infix_mngt int int)
        (t2tb3 f)
        (t2tb15 s)))))

;; set_injective
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))))
    (=>
      (forall ((e (Array Int Int)) (eqt (Array Int Int)))
        (=>
          (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
          (=>
            (mem (infix_mngt int int) (t2tb7 eqt) (t2tb15 s))
            (=> (not (= e eqt)) (not (= (select f e) (select f eqt)))))))
      (p_injective
        (infix_mngt int int)
        (infix_mngt int int)
        (t2tb5 f)
        (t2tb15 s)))))

;; set_injective
(assert
  (forall ((f (Array Int Int)) (s (set Int)))
    (=>
      (forall ((e Int) (eqt Int))
        (=>
          (mem int (t2tb8 e) (t2tb16 s))
          (=>
            (mem int (t2tb8 eqt) (t2tb16 s))
            (=> (not (= e eqt)) (not (= (select f e) (select f eqt)))))))
      (p_injective int int (t2tb7 f) (t2tb16 s)))))

;; set_injective
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni))
      (=>
        (forall ((e uni) (eqt uni))
          (=>
            (sort a e)
            (=>
              (sort a eqt)
              (=>
                (mem a e s)
                (=>
                  (mem a eqt s)
                  (=>
                    (not (= e eqt))
                    (not (= (infix_at b a f e) (infix_at b a f eqt)))))))))
        (p_injective b a f s)))))

;; image'spec
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (s (set circuit)))
    (forall ((a (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
      (=
        (mem
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          (t2tb3 a)
          (map1
            (infix_mngt
              (infix_mngt int int)
              (infix_mngt (infix_mngt int int) (infix_mngt int int)))
            circuit1
            (t2tb2 f)
            (t2tb12 s)))
        (exists ((antec_a circuit))
          (and
            (mem circuit1 (t2tb13 antec_a) (t2tb12 s))
            (= a (select f antec_a))))))))

;; image'spec
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))))
    (forall ((a (Array (Array Int Int) (Array Int Int))))
      (=
        (mem
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (t2tb5 a)
          (map1
            (infix_mngt (infix_mngt int int) (infix_mngt int int))
            (infix_mngt int int)
            (t2tb3 f)
            (t2tb15 s)))
        (exists ((antec_a (Array Int Int)))
          (and
            (mem (infix_mngt int int) (t2tb7 antec_a) (t2tb15 s))
            (= a (select f antec_a))))))))

;; image'spec
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))))
    (forall ((a (Array Int Int)))
      (=
        (mem
          (infix_mngt int int)
          (t2tb7 a)
          (map1
            (infix_mngt int int)
            (infix_mngt int int)
            (t2tb5 f)
            (t2tb15 s)))
        (exists ((antec_a (Array Int Int)))
          (and
            (mem (infix_mngt int int) (t2tb7 antec_a) (t2tb15 s))
            (= a (select f antec_a))))))))

;; image'spec
(assert
  (forall ((f (Array Int Int)) (s (set Int)))
    (forall ((a Int))
      (=
        (mem int (t2tb8 a) (map1 int int (t2tb7 f) (t2tb16 s)))
        (exists ((antec_a Int))
          (and (mem int (t2tb8 antec_a) (t2tb16 s)) (= a (select f antec_a))))))))

;; image'spec
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni))
      (forall ((a1 uni))
        (=>
          (sort b a1)
          (and
            (=>
              (mem b a1 (map1 b a f s))
              (exists ((antec_a uni))
                (and
                  (sort a antec_a)
                  (and (mem a antec_a s) (= a1 (infix_at b a f antec_a))))))
            (=>
              (exists ((antec_a uni))
                (and (mem a antec_a s) (= a1 (infix_at b a f antec_a))))
              (mem b a1 (map1 b a f s)))))))))

;; card_image
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni))
      (<= (cardinal b (map1 b a f s)) (cardinal a s)))))

;; card_image_injective
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni))
      (=>
        (p_injective b a f s)
        (= (cardinal b (map1 b a f s)) (cardinal a s))))))

;; get_injective
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (s (set circuit)))
    (=>
      (p_injective
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        circuit1
        (t2tb2 f)
        (t2tb12 s))
      (forall ((e circuit) (eqt circuit))
        (=>
          (mem circuit1 (t2tb13 e) (t2tb12 s))
          (=>
            (mem circuit1 (t2tb13 eqt) (t2tb12 s))
            (=> (not (= e eqt)) (not (= (select f e) (select f eqt))))))))))

;; get_injective
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))))
    (=>
      (p_injective
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (infix_mngt int int)
        (t2tb3 f)
        (t2tb15 s))
      (forall ((e (Array Int Int)) (eqt (Array Int Int)))
        (=>
          (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
          (=>
            (mem (infix_mngt int int) (t2tb7 eqt) (t2tb15 s))
            (=> (not (= e eqt)) (not (= (select f e) (select f eqt))))))))))

;; get_injective
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))))
    (=>
      (p_injective
        (infix_mngt int int)
        (infix_mngt int int)
        (t2tb5 f)
        (t2tb15 s))
      (forall ((e (Array Int Int)) (eqt (Array Int Int)))
        (=>
          (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
          (=>
            (mem (infix_mngt int int) (t2tb7 eqt) (t2tb15 s))
            (=> (not (= e eqt)) (not (= (select f e) (select f eqt))))))))))

;; get_injective
(assert
  (forall ((f (Array Int Int)) (s (set Int)))
    (=>
      (p_injective int int (t2tb7 f) (t2tb16 s))
      (forall ((e Int) (eqt Int))
        (=>
          (mem int (t2tb8 e) (t2tb16 s))
          (=>
            (mem int (t2tb8 eqt) (t2tb16 s))
            (=> (not (= e eqt)) (not (= (select f e) (select f eqt))))))))))

;; get_injective
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni))
      (=>
        (p_injective b a f s)
        (forall ((e uni) (eqt uni))
          (=>
            (sort a e)
            (=>
              (sort a eqt)
              (=>
                (mem a e s)
                (=>
                  (mem a eqt s)
                  (=>
                    (not (= e eqt))
                    (not (= (infix_at b a f e) (infix_at b a f eqt)))))))))))))

;; get_not_injective
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (s (set circuit)))
    (=>
      (not
        (p_injective
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          circuit1
          (t2tb2 f)
          (t2tb12 s)))
      (exists ((e circuit) (eqt circuit))
        (and
          (mem circuit1 (t2tb13 e) (t2tb12 s))
          (and
            (mem circuit1 (t2tb13 eqt) (t2tb12 s))
            (and (not (= e eqt)) (= (select f e) (select f eqt)))))))))

;; get_not_injective
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))))
    (=>
      (not
        (p_injective
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (infix_mngt int int)
          (t2tb3 f)
          (t2tb15 s)))
      (exists ((e (Array Int Int)) (eqt (Array Int Int)))
        (and
          (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
          (and
            (mem (infix_mngt int int) (t2tb7 eqt) (t2tb15 s))
            (and (not (= e eqt)) (= (select f e) (select f eqt)))))))))

;; get_not_injective
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))))
    (=>
      (not
        (p_injective
          (infix_mngt int int)
          (infix_mngt int int)
          (t2tb5 f)
          (t2tb15 s)))
      (exists ((e (Array Int Int)) (eqt (Array Int Int)))
        (and
          (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
          (and
            (mem (infix_mngt int int) (t2tb7 eqt) (t2tb15 s))
            (and (not (= e eqt)) (= (select f e) (select f eqt)))))))))

;; get_not_injective
(assert
  (forall ((f (Array Int Int)) (s (set Int)))
    (=>
      (not (p_injective int int (t2tb7 f) (t2tb16 s)))
      (exists ((e Int) (eqt Int))
        (and
          (mem int (t2tb8 e) (t2tb16 s))
          (and
            (mem int (t2tb8 eqt) (t2tb16 s))
            (and (not (= e eqt)) (= (select f e) (select f eqt)))))))))

;; get_not_injective
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni))
      (=>
        (not (p_injective b a f s))
        (exists ((e uni) (eqt uni))
          (and
            (sort a e)
            (and
              (sort a eqt)
              (and
                (mem a e s)
                (and
                  (mem a eqt s)
                  (and
                    (not (= e eqt))
                    (= (infix_at b a f e) (infix_at b a f eqt))))))))))))

;; set_injective_in
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (s (set circuit)) (sqt (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (=>
      (forall ((e circuit))
        (=>
          (mem circuit1 (t2tb13 e) (t2tb12 s))
          (mem
            (infix_mngt
              (infix_mngt int int)
              (infix_mngt (infix_mngt int int) (infix_mngt int int)))
            (t2tb3 (select f e))
            (t2tb11 sqt))))
      (=>
        (forall ((e circuit) (eqt circuit))
          (=>
            (mem circuit1 (t2tb13 e) (t2tb12 s))
            (=>
              (mem circuit1 (t2tb13 eqt) (t2tb12 s))
              (=> (not (= e eqt)) (not (= (select f e) (select f eqt)))))))
        (p_injective
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          circuit1
          (t2tb2 f)
          (t2tb12 s))))))

;; set_injective_in
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (sqt (set (Array (Array Int Int) (Array Int Int)))))
    (=>
      (forall ((e (Array Int Int)))
        (=>
          (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
          (mem
            (infix_mngt (infix_mngt int int) (infix_mngt int int))
            (t2tb5 (select f e))
            (t2tb14 sqt))))
      (=>
        (forall ((e (Array Int Int)) (eqt (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
            (=>
              (mem (infix_mngt int int) (t2tb7 eqt) (t2tb15 s))
              (=> (not (= e eqt)) (not (= (select f e) (select f eqt)))))))
        (p_injective
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (infix_mngt int int)
          (t2tb3 f)
          (t2tb15 s))))))

;; set_injective_in
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))) (sqt (set (Array Int Int))))
    (=>
      (forall ((e (Array Int Int)))
        (=>
          (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
          (mem (infix_mngt int int) (t2tb7 (select f e)) (t2tb15 sqt))))
      (=>
        (forall ((e (Array Int Int)) (eqt (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
            (=>
              (mem (infix_mngt int int) (t2tb7 eqt) (t2tb15 s))
              (=> (not (= e eqt)) (not (= (select f e) (select f eqt)))))))
        (p_injective
          (infix_mngt int int)
          (infix_mngt int int)
          (t2tb5 f)
          (t2tb15 s))))))

;; set_injective_in
(assert
  (forall ((f (Array Int Int)) (s (set Int)) (sqt (set Int)))
    (=>
      (forall ((e Int))
        (=>
          (mem int (t2tb8 e) (t2tb16 s))
          (mem int (t2tb8 (select f e)) (t2tb16 sqt))))
      (=>
        (forall ((e Int) (eqt Int))
          (=>
            (mem int (t2tb8 e) (t2tb16 s))
            (=>
              (mem int (t2tb8 eqt) (t2tb16 s))
              (=> (not (= e eqt)) (not (= (select f e) (select f eqt)))))))
        (p_injective int int (t2tb7 f) (t2tb16 s))))))

;; set_injective_in
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (sqt uni))
      (=>
        (forall ((e uni))
          (=> (sort a e) (=> (mem a e s) (mem b (infix_at b a f e) sqt))))
        (=>
          (forall ((e uni) (eqt uni))
            (=>
              (sort a e)
              (=>
                (sort a eqt)
                (=>
                  (mem a e s)
                  (=>
                    (mem a eqt s)
                    (=>
                      (not (= e eqt))
                      (not (= (infix_at b a f e) (infix_at b a f eqt)))))))))
          (p_injective b a f s))))))

;; get_injective_in
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (s (set circuit)) (sqt (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (=>
      (p_injective_in
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        circuit1
        (t2tb2 f)
        (t2tb12 s)
        (t2tb11 sqt))
      (and
        (forall ((e circuit))
          (=>
            (mem circuit1 (t2tb13 e) (t2tb12 s))
            (mem
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              (t2tb3 (select f e))
              (t2tb11 sqt))))
        (forall ((e circuit) (eqt circuit))
          (=>
            (mem circuit1 (t2tb13 e) (t2tb12 s))
            (=>
              (mem circuit1 (t2tb13 eqt) (t2tb12 s))
              (=> (not (= e eqt)) (not (= (select f e) (select f eqt)))))))))))

;; get_injective_in
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (sqt (set (Array (Array Int Int) (Array Int Int)))))
    (=>
      (p_injective_in
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (infix_mngt int int)
        (t2tb3 f)
        (t2tb15 s)
        (t2tb14 sqt))
      (and
        (forall ((e (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
            (mem
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (t2tb5 (select f e))
              (t2tb14 sqt))))
        (forall ((e (Array Int Int)) (eqt (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
            (=>
              (mem (infix_mngt int int) (t2tb7 eqt) (t2tb15 s))
              (=> (not (= e eqt)) (not (= (select f e) (select f eqt)))))))))))

;; get_injective_in
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))) (sqt (set (Array Int Int))))
    (=>
      (p_injective_in
        (infix_mngt int int)
        (infix_mngt int int)
        (t2tb5 f)
        (t2tb15 s)
        (t2tb15 sqt))
      (and
        (forall ((e (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
            (mem (infix_mngt int int) (t2tb7 (select f e)) (t2tb15 sqt))))
        (forall ((e (Array Int Int)) (eqt (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
            (=>
              (mem (infix_mngt int int) (t2tb7 eqt) (t2tb15 s))
              (=> (not (= e eqt)) (not (= (select f e) (select f eqt)))))))))))

;; get_injective_in
(assert
  (forall ((f (Array Int Int)) (s (set Int)) (sqt (set Int)))
    (=>
      (p_injective_in int int (t2tb7 f) (t2tb16 s) (t2tb16 sqt))
      (and
        (forall ((e Int))
          (=>
            (mem int (t2tb8 e) (t2tb16 s))
            (mem int (t2tb8 (select f e)) (t2tb16 sqt))))
        (forall ((e Int) (eqt Int))
          (=>
            (mem int (t2tb8 e) (t2tb16 s))
            (=>
              (mem int (t2tb8 eqt) (t2tb16 s))
              (=> (not (= e eqt)) (not (= (select f e) (select f eqt)))))))))))

;; get_injective_in
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (sqt uni))
      (=>
        (p_injective_in b a f s sqt)
        (and
          (forall ((e uni)) (=> (mem a e s) (mem b (infix_at b a f e) sqt)))
          (forall ((e uni) (eqt uni))
            (=>
              (sort a e)
              (=>
                (sort a eqt)
                (=>
                  (mem a e s)
                  (=>
                    (mem a eqt s)
                    (=>
                      (not (= e eqt))
                      (not (= (infix_at b a f e) (infix_at b a f eqt))))))))))))))

;; p_surjective
(declare-fun p_surjective (ty
  ty
  uni
  uni
  uni) Bool)

;; p_surjective'def
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (s (set circuit)) (sqt (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (=
      (p_surjective
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        circuit1
        (t2tb2 f)
        (t2tb12 s)
        (t2tb11 sqt))
      (and
        (forall ((e circuit))
          (=>
            (mem circuit1 (t2tb13 e) (t2tb12 s))
            (mem
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              (t2tb3 (select f e))
              (t2tb11 sqt))))
        (forall ((eqt (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
          (=>
            (mem
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              (t2tb3 eqt)
              (t2tb11 sqt))
            (exists ((e circuit))
              (and (mem circuit1 (t2tb13 e) (t2tb12 s)) (= (select f e) eqt)))))))))

;; p_surjective'def
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (sqt (set (Array (Array Int Int) (Array Int Int)))))
    (=
      (p_surjective
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (infix_mngt int int)
        (t2tb3 f)
        (t2tb15 s)
        (t2tb14 sqt))
      (and
        (forall ((e (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
            (mem
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (t2tb5 (select f e))
              (t2tb14 sqt))))
        (forall ((eqt (Array (Array Int Int) (Array Int Int))))
          (=>
            (mem
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (t2tb5 eqt)
              (t2tb14 sqt))
            (exists ((e (Array Int Int)))
              (and
                (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
                (= (select f e) eqt)))))))))

;; p_surjective'def
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))) (sqt (set (Array Int Int))))
    (=
      (p_surjective
        (infix_mngt int int)
        (infix_mngt int int)
        (t2tb5 f)
        (t2tb15 s)
        (t2tb15 sqt))
      (and
        (forall ((e (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
            (mem (infix_mngt int int) (t2tb7 (select f e)) (t2tb15 sqt))))
        (forall ((eqt (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 eqt) (t2tb15 sqt))
            (exists ((e (Array Int Int)))
              (and
                (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
                (= (select f e) eqt)))))))))

;; p_surjective'def
(assert
  (forall ((f (Array Int Int)) (s (set Int)) (sqt (set Int)))
    (=
      (p_surjective int int (t2tb7 f) (t2tb16 s) (t2tb16 sqt))
      (and
        (forall ((e Int))
          (=>
            (mem int (t2tb8 e) (t2tb16 s))
            (mem int (t2tb8 (select f e)) (t2tb16 sqt))))
        (forall ((eqt Int))
          (=>
            (mem int (t2tb8 eqt) (t2tb16 sqt))
            (exists ((e Int))
              (and (mem int (t2tb8 e) (t2tb16 s)) (= (select f e) eqt)))))))))

;; p_surjective'def
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (sqt uni))
      (and
        (=>
          (p_surjective b a f s sqt)
          (and
            (forall ((e uni))
              (=> (mem a e s) (mem b (infix_at b a f e) sqt)))
            (forall ((eqt uni))
              (=>
                (sort b eqt)
                (=>
                  (mem b eqt sqt)
                  (exists ((e uni))
                    (and
                      (sort a e)
                      (and (mem a e s) (= (infix_at b a f e) eqt)))))))))
        (=>
          (and
            (forall ((e uni))
              (=> (sort a e) (=> (mem a e s) (mem b (infix_at b a f e) sqt))))
            (forall ((eqt uni))
              (=>
                (sort b eqt)
                (=>
                  (mem b eqt sqt)
                  (exists ((e uni))
                    (and (mem a e s) (= (infix_at b a f e) eqt)))))))
          (p_surjective b a f s sqt))))))

;; set_surjective
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (s (set circuit)) (sqt (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (=>
      (forall ((e circuit))
        (=>
          (mem circuit1 (t2tb13 e) (t2tb12 s))
          (mem
            (infix_mngt
              (infix_mngt int int)
              (infix_mngt (infix_mngt int int) (infix_mngt int int)))
            (t2tb3 (select f e))
            (t2tb11 sqt))))
      (=>
        (forall ((eqt (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
          (=>
            (mem
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              (t2tb3 eqt)
              (t2tb11 sqt))
            (exists ((e circuit))
              (and (mem circuit1 (t2tb13 e) (t2tb12 s)) (= (select f e) eqt)))))
        (p_surjective
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          circuit1
          (t2tb2 f)
          (t2tb12 s)
          (t2tb11 sqt))))))

;; set_surjective
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (sqt (set (Array (Array Int Int) (Array Int Int)))))
    (=>
      (forall ((e (Array Int Int)))
        (=>
          (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
          (mem
            (infix_mngt (infix_mngt int int) (infix_mngt int int))
            (t2tb5 (select f e))
            (t2tb14 sqt))))
      (=>
        (forall ((eqt (Array (Array Int Int) (Array Int Int))))
          (=>
            (mem
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (t2tb5 eqt)
              (t2tb14 sqt))
            (exists ((e (Array Int Int)))
              (and
                (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
                (= (select f e) eqt)))))
        (p_surjective
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (infix_mngt int int)
          (t2tb3 f)
          (t2tb15 s)
          (t2tb14 sqt))))))

;; set_surjective
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))) (sqt (set (Array Int Int))))
    (=>
      (forall ((e (Array Int Int)))
        (=>
          (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
          (mem (infix_mngt int int) (t2tb7 (select f e)) (t2tb15 sqt))))
      (=>
        (forall ((eqt (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 eqt) (t2tb15 sqt))
            (exists ((e (Array Int Int)))
              (and
                (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
                (= (select f e) eqt)))))
        (p_surjective
          (infix_mngt int int)
          (infix_mngt int int)
          (t2tb5 f)
          (t2tb15 s)
          (t2tb15 sqt))))))

;; set_surjective
(assert
  (forall ((f (Array Int Int)) (s (set Int)) (sqt (set Int)))
    (=>
      (forall ((e Int))
        (=>
          (mem int (t2tb8 e) (t2tb16 s))
          (mem int (t2tb8 (select f e)) (t2tb16 sqt))))
      (=>
        (forall ((eqt Int))
          (=>
            (mem int (t2tb8 eqt) (t2tb16 sqt))
            (exists ((e Int))
              (and (mem int (t2tb8 e) (t2tb16 s)) (= (select f e) eqt)))))
        (p_surjective int int (t2tb7 f) (t2tb16 s) (t2tb16 sqt))))))

;; set_surjective
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (sqt uni))
      (=>
        (forall ((e uni))
          (=> (sort a e) (=> (mem a e s) (mem b (infix_at b a f e) sqt))))
        (=>
          (forall ((eqt uni))
            (=>
              (sort b eqt)
              (=>
                (mem b eqt sqt)
                (exists ((e uni))
                  (and (mem a e s) (= (infix_at b a f e) eqt))))))
          (p_surjective b a f s sqt))))))

;; get_surjective
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (s (set circuit)) (sqt (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (=>
      (p_surjective
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        circuit1
        (t2tb2 f)
        (t2tb12 s)
        (t2tb11 sqt))
      (and
        (forall ((e circuit))
          (=>
            (mem circuit1 (t2tb13 e) (t2tb12 s))
            (mem
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              (t2tb3 (select f e))
              (t2tb11 sqt))))
        (forall ((eqt (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
          (=>
            (mem
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              (t2tb3 eqt)
              (t2tb11 sqt))
            (exists ((e circuit))
              (and (mem circuit1 (t2tb13 e) (t2tb12 s)) (= (select f e) eqt)))))))))

;; get_surjective
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (sqt (set (Array (Array Int Int) (Array Int Int)))))
    (=>
      (p_surjective
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (infix_mngt int int)
        (t2tb3 f)
        (t2tb15 s)
        (t2tb14 sqt))
      (and
        (forall ((e (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
            (mem
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (t2tb5 (select f e))
              (t2tb14 sqt))))
        (forall ((eqt (Array (Array Int Int) (Array Int Int))))
          (=>
            (mem
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (t2tb5 eqt)
              (t2tb14 sqt))
            (exists ((e (Array Int Int)))
              (and
                (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
                (= (select f e) eqt)))))))))

;; get_surjective
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))) (sqt (set (Array Int Int))))
    (=>
      (p_surjective
        (infix_mngt int int)
        (infix_mngt int int)
        (t2tb5 f)
        (t2tb15 s)
        (t2tb15 sqt))
      (and
        (forall ((e (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
            (mem (infix_mngt int int) (t2tb7 (select f e)) (t2tb15 sqt))))
        (forall ((eqt (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 eqt) (t2tb15 sqt))
            (exists ((e (Array Int Int)))
              (and
                (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
                (= (select f e) eqt)))))))))

;; get_surjective
(assert
  (forall ((f (Array Int Int)) (s (set Int)) (sqt (set Int)))
    (=>
      (p_surjective int int (t2tb7 f) (t2tb16 s) (t2tb16 sqt))
      (and
        (forall ((e Int))
          (=>
            (mem int (t2tb8 e) (t2tb16 s))
            (mem int (t2tb8 (select f e)) (t2tb16 sqt))))
        (forall ((eqt Int))
          (=>
            (mem int (t2tb8 eqt) (t2tb16 sqt))
            (exists ((e Int))
              (and (mem int (t2tb8 e) (t2tb16 s)) (= (select f e) eqt)))))))))

;; get_surjective
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (sqt uni))
      (=>
        (p_surjective b a f s sqt)
        (and
          (forall ((e uni)) (=> (mem a e s) (mem b (infix_at b a f e) sqt)))
          (forall ((eqt uni))
            (=>
              (sort b eqt)
              (=>
                (mem b eqt sqt)
                (exists ((e uni))
                  (and
                    (sort a e)
                    (and (mem a e s) (= (infix_at b a f e) eqt))))))))))))

;; image_surjective
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (sqt uni))
      (=>
        (sort (set1 b) sqt)
        (=> (p_surjective b a f s sqt) (= (map1 b a f s) sqt))))))

;; p_bijective
(declare-fun p_bijective (ty
  ty
  uni
  uni
  uni) Bool)

;; p_bijective
(declare-fun p_bijective1 ((Array Int Int)
  (set Int)
  (set Int)) Bool)

;; p_bijective'def
(assert
  (forall ((f (Array Int Int)) (s (set Int)) (sqt (set Int)))
    (=
      (p_bijective1 f s sqt)
      (and
        (p_injective_in int int (t2tb7 f) (t2tb16 s) (t2tb16 sqt))
        (p_surjective int int (t2tb7 f) (t2tb16 s) (t2tb16 sqt))))))

;; p_bijective'def
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (sqt uni))
      (=
        (p_bijective b a f s sqt)
        (and (p_injective_in b a f s sqt) (p_surjective b a f s sqt))))))

;; bijective_is_injective
(assert
  (forall ((f (Array Int Int)) (s (set Int)) (sqt (set Int)))
    (=> (p_bijective1 f s sqt) (p_injective int int (t2tb7 f) (t2tb16 s)))))

;; bijective_is_injective
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (sqt uni))
      (=> (p_bijective b a f s sqt) (p_injective b a f s)))))

;; p_bijective_in
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (s (set circuit)) (sqt (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (a circuit))
    (=>
      (p_bijective
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        circuit1
        (t2tb2 f)
        (t2tb12 s)
        (t2tb11 sqt))
      (=>
        (mem circuit1 (t2tb13 a) (t2tb12 s))
        (mem
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          (t2tb3 (select f a))
          (t2tb11 sqt))))))

;; p_bijective_in
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (sqt (set (Array (Array Int Int) (Array Int Int)))) (a (Array Int Int)))
    (=>
      (p_bijective
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (infix_mngt int int)
        (t2tb3 f)
        (t2tb15 s)
        (t2tb14 sqt))
      (=>
        (mem (infix_mngt int int) (t2tb7 a) (t2tb15 s))
        (mem
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (t2tb5 (select f a))
          (t2tb14 sqt))))))

;; p_bijective_in
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))) (sqt (set (Array Int Int))) (a (Array Int Int)))
    (=>
      (p_bijective
        (infix_mngt int int)
        (infix_mngt int int)
        (t2tb5 f)
        (t2tb15 s)
        (t2tb15 sqt))
      (=>
        (mem (infix_mngt int int) (t2tb7 a) (t2tb15 s))
        (mem (infix_mngt int int) (t2tb7 (select f a)) (t2tb15 sqt))))))

;; p_bijective_in
(assert
  (forall ((f (Array Int Int)) (s (set Int)) (sqt (set Int)) (a Int))
    (=>
      (p_bijective1 f s sqt)
      (=>
        (mem int (t2tb8 a) (t2tb16 s))
        (mem int (t2tb8 (select f a)) (t2tb16 sqt))))))

;; p_bijective_in
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (sqt uni) (a1 uni))
      (=>
        (p_bijective b a f s sqt)
        (=> (mem a a1 s) (mem b (infix_at b a f a1) sqt))))))

;; bijective_is_surjective
(assert
  (forall ((f (Array Int Int)) (s (set Int)) (sqt (set Int)))
    (=>
      (p_bijective1 f s sqt)
      (p_surjective int int (t2tb7 f) (t2tb16 s) (t2tb16 sqt)))))

;; bijective_is_surjective
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (sqt uni))
      (=> (p_bijective b a f s sqt) (p_surjective b a f s sqt)))))

;; auto_bijective_in
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))) (a (Array Int Int)))
    (=>
      (p_bijective
        (infix_mngt int int)
        (infix_mngt int int)
        (t2tb5 f)
        (t2tb15 s)
        (t2tb15 s))
      (=>
        (mem (infix_mngt int int) (t2tb7 a) (t2tb15 s))
        (mem (infix_mngt int int) (t2tb7 (select f a)) (t2tb15 s))))))

;; auto_bijective_in
(assert
  (forall ((f (Array Int Int)) (s (set Int)) (a Int))
    (=>
      (p_bijective1 f s s)
      (=>
        (mem int (t2tb8 a) (t2tb16 s))
        (mem int (t2tb8 (select f a)) (t2tb16 s))))))

;; auto_bijective_in
(assert
  (forall ((a ty))
    (forall ((f uni) (s uni) (a1 uni))
      (=>
        (p_bijective a a f s s)
        (=> (mem a a1 s) (mem a (infix_at a a f a1) s))))))

;; set_bijective
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (s (set circuit)) (sqt (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (=>
      (forall ((e circuit))
        (=>
          (mem circuit1 (t2tb13 e) (t2tb12 s))
          (mem
            (infix_mngt
              (infix_mngt int int)
              (infix_mngt (infix_mngt int int) (infix_mngt int int)))
            (t2tb3 (select f e))
            (t2tb11 sqt))))
      (=>
        (forall ((e circuit) (eqt circuit))
          (=>
            (mem circuit1 (t2tb13 e) (t2tb12 s))
            (=>
              (mem circuit1 (t2tb13 eqt) (t2tb12 s))
              (=> (not (= e eqt)) (not (= (select f e) (select f eqt)))))))
        (=>
          (forall ((eqt (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
            (=>
              (mem
                (infix_mngt
                  (infix_mngt int int)
                  (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                (t2tb3 eqt)
                (t2tb11 sqt))
              (exists ((e circuit))
                (and
                  (mem circuit1 (t2tb13 e) (t2tb12 s))
                  (= (select f e) eqt)))))
          (and
            (p_bijective
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              circuit1
              (t2tb2 f)
              (t2tb12 s)
              (t2tb11 sqt))
            (= (tb2t11
                 (map1
                   (infix_mngt
                     (infix_mngt int int)
                     (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                   circuit1
                   (t2tb2 f)
                   (t2tb12 s))) sqt)))))))

;; set_bijective
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (sqt (set (Array (Array Int Int) (Array Int Int)))))
    (=>
      (forall ((e (Array Int Int)))
        (=>
          (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
          (mem
            (infix_mngt (infix_mngt int int) (infix_mngt int int))
            (t2tb5 (select f e))
            (t2tb14 sqt))))
      (=>
        (forall ((e (Array Int Int)) (eqt (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
            (=>
              (mem (infix_mngt int int) (t2tb7 eqt) (t2tb15 s))
              (=> (not (= e eqt)) (not (= (select f e) (select f eqt)))))))
        (=>
          (forall ((eqt (Array (Array Int Int) (Array Int Int))))
            (=>
              (mem
                (infix_mngt (infix_mngt int int) (infix_mngt int int))
                (t2tb5 eqt)
                (t2tb14 sqt))
              (exists ((e (Array Int Int)))
                (and
                  (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
                  (= (select f e) eqt)))))
          (and
            (p_bijective
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (infix_mngt int int)
              (t2tb3 f)
              (t2tb15 s)
              (t2tb14 sqt))
            (= (tb2t14
                 (map1
                   (infix_mngt (infix_mngt int int) (infix_mngt int int))
                   (infix_mngt int int)
                   (t2tb3 f)
                   (t2tb15 s))) sqt)))))))

;; set_bijective
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))) (sqt (set (Array Int Int))))
    (=>
      (forall ((e (Array Int Int)))
        (=>
          (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
          (mem (infix_mngt int int) (t2tb7 (select f e)) (t2tb15 sqt))))
      (=>
        (forall ((e (Array Int Int)) (eqt (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
            (=>
              (mem (infix_mngt int int) (t2tb7 eqt) (t2tb15 s))
              (=> (not (= e eqt)) (not (= (select f e) (select f eqt)))))))
        (=>
          (forall ((eqt (Array Int Int)))
            (=>
              (mem (infix_mngt int int) (t2tb7 eqt) (t2tb15 sqt))
              (exists ((e (Array Int Int)))
                (and
                  (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
                  (= (select f e) eqt)))))
          (and
            (p_bijective
              (infix_mngt int int)
              (infix_mngt int int)
              (t2tb5 f)
              (t2tb15 s)
              (t2tb15 sqt))
            (= (tb2t15
                 (map1
                   (infix_mngt int int)
                   (infix_mngt int int)
                   (t2tb5 f)
                   (t2tb15 s))) sqt)))))))

;; set_bijective
(assert
  (forall ((f (Array Int Int)) (s (set Int)) (sqt (set Int)))
    (=>
      (forall ((e Int))
        (=>
          (mem int (t2tb8 e) (t2tb16 s))
          (mem int (t2tb8 (select f e)) (t2tb16 sqt))))
      (=>
        (forall ((e Int) (eqt Int))
          (=>
            (mem int (t2tb8 e) (t2tb16 s))
            (=>
              (mem int (t2tb8 eqt) (t2tb16 s))
              (=> (not (= e eqt)) (not (= (select f e) (select f eqt)))))))
        (=>
          (forall ((eqt Int))
            (=>
              (mem int (t2tb8 eqt) (t2tb16 sqt))
              (exists ((e Int))
                (and (mem int (t2tb8 e) (t2tb16 s)) (= (select f e) eqt)))))
          (and
            (p_bijective1 f s sqt)
            (= (tb2t16 (map1 int int (t2tb7 f) (t2tb16 s))) sqt)))))))

;; set_bijective
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (sqt uni))
      (=>
        (sort (set1 b) sqt)
        (=>
          (forall ((e uni))
            (=> (sort a e) (=> (mem a e s) (mem b (infix_at b a f e) sqt))))
          (=>
            (forall ((e uni) (eqt uni))
              (=>
                (sort a e)
                (=>
                  (sort a eqt)
                  (=>
                    (mem a e s)
                    (=>
                      (mem a eqt s)
                      (=>
                        (not (= e eqt))
                        (not (= (infix_at b a f e) (infix_at b a f eqt)))))))))
            (=>
              (forall ((eqt uni))
                (=>
                  (sort b eqt)
                  (=>
                    (mem b eqt sqt)
                    (exists ((e uni))
                      (and (mem a e s) (= (infix_at b a f e) eqt))))))
              (and (p_bijective b a f s sqt) (= (map1 b a f s) sqt)))))))))

;; fc
(declare-fun fc10 (ty
  ty
  ty
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty) (c ty))
    (forall ((x uni) (x1 uni)) (sort (infix_mngt a c) (fc10 c b a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (g (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (k uni))
      (= (tb2t3
           (infix_at
             (infix_mngt
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int)))
             a
             (fc10
               (infix_mngt
                 (infix_mngt int int)
                 (infix_mngt (infix_mngt int int) (infix_mngt int int)))
               circuit1
               a
               f
               (t2tb2 g))
             k)) (select g (tb2t13 (infix_at circuit1 a f k)))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (g (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (k uni))
      (= (tb2t5
           (infix_at
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             a
             (fc10
               (infix_mngt (infix_mngt int int) (infix_mngt int int))
               (infix_mngt int int)
               a
               f
               (t2tb3 g))
             k)) (select g (tb2t7 (infix_at (infix_mngt int int) a f k)))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (g (Array (Array Int Int) (Array Int Int))) (k uni))
      (= (tb2t7
           (infix_at
             (infix_mngt int int)
             a
             (fc10 (infix_mngt int int) (infix_mngt int int) a f (t2tb5 g))
             k)) (select g (tb2t7 (infix_at (infix_mngt int int) a f k)))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (g (Array Int Int)) (k uni))
      (= (tb2t8 (infix_at int a (fc10 int int a f (t2tb7 g)) k)) (select g 
      (tb2t8
        (infix_at int a f k)))))))

;; fc'def
(assert
  (forall ((b ty))
    (forall ((f uni) (g uni) (k circuit))
      (= (select (tb2t2
                   (fc10
                     (infix_mngt
                       (infix_mngt int int)
                       (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                     b
                     circuit1
                     f
                     g)) k) (tb2t3
                              (infix_at
                                (infix_mngt
                                  (infix_mngt int int)
                                  (infix_mngt
                                    (infix_mngt int int)
                                    (infix_mngt int int)))
                                b
                                g
                                (infix_at b circuit1 f (t2tb13 k))))))))

;; fc'def
(assert
  (forall ((f (Array circuit circuit)) (g (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (k circuit))
    (= (select (tb2t2
                 (fc10
                   (infix_mngt
                     (infix_mngt int int)
                     (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                   circuit1
                   circuit1
                   (t2tb27 f)
                   (t2tb2 g))) k) (select g (tb2t13
                                              (infix_at
                                                circuit1
                                                circuit1
                                                (t2tb27 f)
                                                (t2tb13 k)))))))

;; fc'def
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (g (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (k circuit))
    (= (select (tb2t2
                 (fc10
                   (infix_mngt
                     (infix_mngt int int)
                     (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                   (infix_mngt
                     (infix_mngt int int)
                     (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                   circuit1
                   (t2tb2 f)
                   (t2tb22 g))) k) (tb2t3
                                     (infix_at
                                       (infix_mngt
                                         (infix_mngt int int)
                                         (infix_mngt
                                           (infix_mngt int int)
                                           (infix_mngt int int)))
                                       (infix_mngt
                                         (infix_mngt int int)
                                         (infix_mngt
                                           (infix_mngt int int)
                                           (infix_mngt int int)))
                                       (t2tb22 g)
                                       (t2tb3 (select f k)))))))

;; fc'def
(assert
  (forall ((c ty))
    (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (g uni) (k circuit))
      (= (infix_at
           c
           circuit1
           (fc10
             c
             (infix_mngt
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int)))
             circuit1
             (t2tb2 f)
             g)
           (t2tb13 k)) (infix_at
                         c
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt int int)))
                         g
                         (t2tb3 (select f k)))))))

;; fc'def
(assert
  (forall ((b ty))
    (forall ((f uni) (g uni) (k (Array Int Int)))
      (= (select (tb2t3
                   (fc10
                     (infix_mngt (infix_mngt int int) (infix_mngt int int))
                     b
                     (infix_mngt int int)
                     f
                     g)) k) (tb2t5
                              (infix_at
                                (infix_mngt
                                  (infix_mngt int int)
                                  (infix_mngt int int))
                                b
                                g
                                (infix_at b (infix_mngt int int) f (t2tb7 k))))))))

;; fc'def
(assert
  (forall ((b ty))
    (forall ((f uni) (g uni) (k (Array Int Int)))
      (= (select (tb2t5
                   (fc10 (infix_mngt int int) b (infix_mngt int int) f g)) k) 
      (tb2t7
        (infix_at
          (infix_mngt int int)
          b
          g
          (infix_at b (infix_mngt int int) f (t2tb7 k))))))))

;; fc'def
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (g (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int)))) (k (Array Int Int)))
    (= (select (tb2t3
                 (fc10
                   (infix_mngt (infix_mngt int int) (infix_mngt int int))
                   (infix_mngt (infix_mngt int int) (infix_mngt int int))
                   (infix_mngt int int)
                   (t2tb3 f)
                   (t2tb24 g))) k) (tb2t5
                                     (infix_at
                                       (infix_mngt
                                         (infix_mngt int int)
                                         (infix_mngt int int))
                                       (infix_mngt
                                         (infix_mngt int int)
                                         (infix_mngt int int))
                                       (t2tb24 g)
                                       (t2tb5 (select f k)))))))

;; fc'def
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (g (Array (Array (Array Int Int) (Array Int Int)) (Array Int Int))) (k (Array Int Int)))
    (= (select (tb2t5
                 (fc10
                   (infix_mngt int int)
                   (infix_mngt (infix_mngt int int) (infix_mngt int int))
                   (infix_mngt int int)
                   (t2tb3 f)
                   (t2tb28 g))) k) (tb2t7
                                     (infix_at
                                       (infix_mngt int int)
                                       (infix_mngt
                                         (infix_mngt int int)
                                         (infix_mngt int int))
                                       (t2tb28 g)
                                       (t2tb5 (select f k)))))))

;; fc'def
(assert
  (forall ((c ty))
    (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (g uni) (k (Array Int Int)))
      (= (infix_at
           c
           (infix_mngt int int)
           (fc10
             c
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (infix_mngt int int)
             (t2tb3 f)
             g)
           (t2tb7 k)) (infix_at
                        c
                        (infix_mngt
                          (infix_mngt int int)
                          (infix_mngt int int))
                        g
                        (t2tb5 (select f k)))))))

;; fc'def
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (g (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (k (Array Int Int)))
    (= (select (tb2t3
                 (fc10
                   (infix_mngt (infix_mngt int int) (infix_mngt int int))
                   (infix_mngt int int)
                   (infix_mngt int int)
                   (t2tb5 f)
                   (t2tb3 g))) k) (select g (select f k)))))

;; fc'def
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (g (Array (Array Int Int) (Array Int Int))) (k (Array Int Int)))
    (= (select (tb2t5
                 (fc10
                   (infix_mngt int int)
                   (infix_mngt int int)
                   (infix_mngt int int)
                   (t2tb5 f)
                   (t2tb5 g))) k) (select g (select f k)))))

;; fc'def
(assert
  (forall ((c ty))
    (forall ((f (Array (Array Int Int) (Array Int Int))) (g uni) (k (Array Int Int)))
      (= (infix_at
           c
           (infix_mngt int int)
           (fc10 c (infix_mngt int int) (infix_mngt int int) (t2tb5 f) g)
           (t2tb7 k)) (infix_at
                        c
                        (infix_mngt int int)
                        g
                        (t2tb7 (select f k)))))))

;; fc'def
(assert
  (forall ((b ty))
    (forall ((f uni) (g uni) (k Int))
      (= (select (tb2t7 (fc10 int b int f g)) k) (tb2t8
                                                   (infix_at
                                                     int
                                                     b
                                                     g
                                                     (infix_at
                                                       b
                                                       int
                                                       f
                                                       (t2tb8 k))))))))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (k Int))
    (= (select (tb2t7 (fc10 int int int (t2tb7 f) (t2tb7 g))) k) (select g (select f k)))))

;; fc'def
(assert
  (forall ((c ty))
    (forall ((f (Array Int Int)) (g uni) (k Int))
      (= (infix_at c int (fc10 c int int (t2tb7 f) g) (t2tb8 k)) (infix_at
                                                                   c
                                                                   int
                                                                   g
                                                                   (t2tb8
                                                                    (select f k)))))))

;; fc'def
(assert
  (forall ((a ty) (b ty) (c ty))
    (forall ((f uni) (g uni) (k uni))
      (= (infix_at c a (fc10 c b a f g) k) (infix_at
                                             c
                                             b
                                             g
                                             (infix_at b a f k))))))

;; bijectivity_is_transitive
(assert
  (forall ((a ty))
    (forall ((f uni) (g (Array Int Int)) (s uni) (sqt (set Int)) (sqtqt (set Int)))
      (=>
        (p_bijective int a f s (t2tb16 sqt))
        (=>
          (p_bijective1 g sqt sqtqt)
          (p_bijective int a (fc10 int int a f (t2tb7 g)) s (t2tb16 sqtqt)))))))

;; bijectivity_is_transitive
(assert
  (forall ((b ty))
    (forall ((f uni) (g uni) (s (set Int)) (sqt uni) (sqtqt (set Int)))
      (=>
        (p_bijective b int f (t2tb16 s) sqt)
        (=>
          (p_bijective int b g sqt (t2tb16 sqtqt))
          (p_bijective1 (tb2t7 (fc10 int b int f g)) s sqtqt))))))

;; bijectivity_is_transitive
(assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (s (set Int)) (sqt (set Int)) (sqtqt (set Int)))
    (=>
      (p_bijective1 f s sqt)
      (=>
        (p_bijective1 g sqt sqtqt)
        (p_bijective1 (tb2t7 (fc10 int int int (t2tb7 f) (t2tb7 g))) s sqtqt)))))

;; bijectivity_is_transitive
(assert
  (forall ((c ty))
    (forall ((f (Array Int Int)) (g uni) (s (set Int)) (sqt (set Int)) (sqtqt uni))
      (=>
        (p_bijective1 f s sqt)
        (=>
          (p_bijective c int g (t2tb16 sqt) sqtqt)
          (p_bijective c int (fc10 c int int (t2tb7 f) g) (t2tb16 s) sqtqt))))))

;; bijectivity_is_transitive
(assert
  (forall ((a ty) (b ty) (c ty))
    (forall ((f uni) (g uni) (s uni) (sqt uni) (sqtqt uni))
      (=>
        (p_bijective b a f s sqt)
        (=>
          (p_bijective c b g sqt sqtqt)
          (p_bijective c a (fc10 c b a f g) s sqtqt))))))

;; bijective_image
(assert
  (forall ((f (Array Int Int)) (s (set Int)) (sqt (set Int)))
    (=>
      (p_bijective1 f s sqt)
      (and
        (= (cardinal int (t2tb16 s)) (cardinal int (t2tb16 sqt)))
        (= sqt (tb2t16 (map1 int int (t2tb7 f) (t2tb16 s))))))))

;; bijective_image
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (sqt uni))
      (=>
        (sort (set1 b) sqt)
        (=>
          (p_bijective b a f s sqt)
          (and (= (cardinal a s) (cardinal b sqt)) (= sqt (map1 b a f s))))))))

;; get_bijective
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (s (set circuit)) (sqt (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (=>
      (p_bijective
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        circuit1
        (t2tb2 f)
        (t2tb12 s)
        (t2tb11 sqt))
      (and
        (forall ((e circuit))
          (=>
            (mem circuit1 (t2tb13 e) (t2tb12 s))
            (mem
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              (t2tb3 (select f e))
              (t2tb11 sqt))))
        (and
          (forall ((e circuit) (eqt circuit))
            (=>
              (mem circuit1 (t2tb13 e) (t2tb12 s))
              (=>
                (mem circuit1 (t2tb13 eqt) (t2tb12 s))
                (=> (not (= e eqt)) (not (= (select f e) (select f eqt)))))))
          (and
            (forall ((eqt (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
              (=>
                (mem
                  (infix_mngt
                    (infix_mngt int int)
                    (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                  (t2tb3 eqt)
                  (t2tb11 sqt))
                (exists ((e circuit))
                  (and
                    (mem circuit1 (t2tb13 e) (t2tb12 s))
                    (= (select f e) eqt)))))
            (= (cardinal circuit1 (t2tb12 s)) (cardinal
                                                (infix_mngt
                                                  (infix_mngt int int)
                                                  (infix_mngt
                                                    (infix_mngt int int)
                                                    (infix_mngt int int)))
                                                (t2tb11 sqt)))))))))

;; get_bijective
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (sqt (set (Array (Array Int Int) (Array Int Int)))))
    (=>
      (p_bijective
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (infix_mngt int int)
        (t2tb3 f)
        (t2tb15 s)
        (t2tb14 sqt))
      (and
        (forall ((e (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
            (mem
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (t2tb5 (select f e))
              (t2tb14 sqt))))
        (and
          (forall ((e (Array Int Int)) (eqt (Array Int Int)))
            (=>
              (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
              (=>
                (mem (infix_mngt int int) (t2tb7 eqt) (t2tb15 s))
                (=> (not (= e eqt)) (not (= (select f e) (select f eqt)))))))
          (and
            (forall ((eqt (Array (Array Int Int) (Array Int Int))))
              (=>
                (mem
                  (infix_mngt (infix_mngt int int) (infix_mngt int int))
                  (t2tb5 eqt)
                  (t2tb14 sqt))
                (exists ((e (Array Int Int)))
                  (and
                    (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
                    (= (select f e) eqt)))))
            (= (cardinal (infix_mngt int int) (t2tb15 s)) (cardinal
                                                            (infix_mngt
                                                              (infix_mngt
                                                                int
                                                                int)
                                                              (infix_mngt
                                                                int
                                                                int))
                                                            (t2tb14 sqt)))))))))

;; get_bijective
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))) (sqt (set (Array Int Int))))
    (=>
      (p_bijective
        (infix_mngt int int)
        (infix_mngt int int)
        (t2tb5 f)
        (t2tb15 s)
        (t2tb15 sqt))
      (and
        (forall ((e (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
            (mem (infix_mngt int int) (t2tb7 (select f e)) (t2tb15 sqt))))
        (and
          (forall ((e (Array Int Int)) (eqt (Array Int Int)))
            (=>
              (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
              (=>
                (mem (infix_mngt int int) (t2tb7 eqt) (t2tb15 s))
                (=> (not (= e eqt)) (not (= (select f e) (select f eqt)))))))
          (and
            (forall ((eqt (Array Int Int)))
              (=>
                (mem (infix_mngt int int) (t2tb7 eqt) (t2tb15 sqt))
                (exists ((e (Array Int Int)))
                  (and
                    (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
                    (= (select f e) eqt)))))
            (= (cardinal (infix_mngt int int) (t2tb15 s)) (cardinal
                                                            (infix_mngt
                                                              int
                                                              int)
                                                            (t2tb15 sqt)))))))))

;; get_bijective
(assert
  (forall ((f (Array Int Int)) (s (set Int)) (sqt (set Int)))
    (=>
      (p_bijective1 f s sqt)
      (and
        (forall ((e Int))
          (=>
            (mem int (t2tb8 e) (t2tb16 s))
            (mem int (t2tb8 (select f e)) (t2tb16 sqt))))
        (and
          (forall ((e Int) (eqt Int))
            (=>
              (mem int (t2tb8 e) (t2tb16 s))
              (=>
                (mem int (t2tb8 eqt) (t2tb16 s))
                (=> (not (= e eqt)) (not (= (select f e) (select f eqt)))))))
          (and
            (forall ((eqt Int))
              (=>
                (mem int (t2tb8 eqt) (t2tb16 sqt))
                (exists ((e Int))
                  (and (mem int (t2tb8 e) (t2tb16 s)) (= (select f e) eqt)))))
            (= (cardinal int (t2tb16 s)) (cardinal int (t2tb16 sqt)))))))))

;; get_bijective
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (sqt uni))
      (=>
        (p_bijective b a f s sqt)
        (and
          (forall ((e uni)) (=> (mem a e s) (mem b (infix_at b a f e) sqt)))
          (and
            (forall ((e uni) (eqt uni))
              (=>
                (sort a e)
                (=>
                  (sort a eqt)
                  (=>
                    (mem a e s)
                    (=>
                      (mem a eqt s)
                      (=>
                        (not (= e eqt))
                        (not (= (infix_at b a f e) (infix_at b a f eqt)))))))))
            (and
              (forall ((eqt uni))
                (=>
                  (sort b eqt)
                  (=>
                    (mem b eqt sqt)
                    (exists ((e uni))
                      (and
                        (sort a e)
                        (and (mem a e s) (= (infix_at b a f e) eqt)))))))
              (= (cardinal a s) (cardinal b sqt)))))))))

;; bijective_eq
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (g (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (s (set circuit)) (sqt (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (=>
      (p_bijective
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        circuit1
        (t2tb2 f)
        (t2tb12 s)
        (t2tb11 sqt))
      (=>
        (forall ((e circuit))
          (=>
            (mem circuit1 (t2tb13 e) (t2tb12 s))
            (= (select f e) (select g e))))
        (p_bijective
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          circuit1
          (t2tb2 g)
          (t2tb12 s)
          (t2tb11 sqt))))))

;; bijective_eq
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (g (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (sqt (set (Array (Array Int Int) (Array Int Int)))))
    (=>
      (p_bijective
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (infix_mngt int int)
        (t2tb3 f)
        (t2tb15 s)
        (t2tb14 sqt))
      (=>
        (forall ((e (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
            (= (select f e) (select g e))))
        (p_bijective
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (infix_mngt int int)
          (t2tb3 g)
          (t2tb15 s)
          (t2tb14 sqt))))))

;; bijective_eq
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (g (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))) (sqt (set (Array Int Int))))
    (=>
      (p_bijective
        (infix_mngt int int)
        (infix_mngt int int)
        (t2tb5 f)
        (t2tb15 s)
        (t2tb15 sqt))
      (=>
        (forall ((e (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
            (= (select f e) (select g e))))
        (p_bijective
          (infix_mngt int int)
          (infix_mngt int int)
          (t2tb5 g)
          (t2tb15 s)
          (t2tb15 sqt))))))

;; bijective_eq
(assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (s (set Int)) (sqt (set Int)))
    (=>
      (p_bijective1 f s sqt)
      (=>
        (forall ((e Int))
          (=> (mem int (t2tb8 e) (t2tb16 s)) (= (select f e) (select g e))))
        (p_bijective1 g s sqt)))))

;; bijective_eq
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (g uni) (s uni) (sqt uni))
      (=>
        (p_bijective b a f s sqt)
        (=>
          (forall ((e uni))
            (=>
              (sort a e)
              (=> (mem a e s) (= (infix_at b a f e) (infix_at b a g e)))))
          (p_bijective b a g s sqt))))))

;; bijective_eq_gen
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (s (set circuit)) (sqt (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (=>
      (p_bijective
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        circuit1
        (t2tb2 f)
        (t2tb12 s)
        (t2tb11 sqt))
      (forall ((g (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
        (=>
          (forall ((e circuit))
            (=>
              (mem circuit1 (t2tb13 e) (t2tb12 s))
              (= (select f e) (select g e))))
          (p_bijective
            (infix_mngt
              (infix_mngt int int)
              (infix_mngt (infix_mngt int int) (infix_mngt int int)))
            circuit1
            (t2tb2 g)
            (t2tb12 s)
            (t2tb11 sqt)))))))

;; bijective_eq_gen
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (sqt (set (Array (Array Int Int) (Array Int Int)))))
    (=>
      (p_bijective
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (infix_mngt int int)
        (t2tb3 f)
        (t2tb15 s)
        (t2tb14 sqt))
      (forall ((g (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
        (=>
          (forall ((e (Array Int Int)))
            (=>
              (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
              (= (select f e) (select g e))))
          (p_bijective
            (infix_mngt (infix_mngt int int) (infix_mngt int int))
            (infix_mngt int int)
            (t2tb3 g)
            (t2tb15 s)
            (t2tb14 sqt)))))))

;; bijective_eq_gen
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))) (sqt (set (Array Int Int))))
    (=>
      (p_bijective
        (infix_mngt int int)
        (infix_mngt int int)
        (t2tb5 f)
        (t2tb15 s)
        (t2tb15 sqt))
      (forall ((g (Array (Array Int Int) (Array Int Int))))
        (=>
          (forall ((e (Array Int Int)))
            (=>
              (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
              (= (select f e) (select g e))))
          (p_bijective
            (infix_mngt int int)
            (infix_mngt int int)
            (t2tb5 g)
            (t2tb15 s)
            (t2tb15 sqt)))))))

;; bijective_eq_gen
(assert
  (forall ((f (Array Int Int)) (s (set Int)) (sqt (set Int)))
    (=>
      (p_bijective1 f s sqt)
      (forall ((g (Array Int Int)))
        (=>
          (forall ((e Int))
            (=> (mem int (t2tb8 e) (t2tb16 s)) (= (select f e) (select g e))))
          (p_bijective1 g s sqt))))))

;; bijective_eq_gen
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (sqt uni))
      (=>
        (p_bijective b a f s sqt)
        (forall ((g uni))
          (=>
            (forall ((e uni))
              (=>
                (sort a e)
                (=> (mem a e s) (= (infix_at b a f e) (infix_at b a g e)))))
            (p_bijective b a g s sqt)))))))

;; bij_equal_card
(assert
  (forall ((f (Array Int Int)) (s (set Int)))
    (=>
      (= (cardinal int (t2tb16 s)) (cardinal
                                     int
                                     (map1 int int (t2tb7 f) (t2tb16 s))))
      (p_bijective1 f s (tb2t16 (map1 int int (t2tb7 f) (t2tb16 s)))))))

;; bij_equal_card
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni))
      (=>
        (= (cardinal a s) (cardinal b (map1 b a f s)))
        (p_bijective b a f s (map1 b a f s))))))

;; set_bijective_auto
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))))
    (=>
      (forall ((e (Array Int Int)))
        (=>
          (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
          (mem (infix_mngt int int) (t2tb7 (select f e)) (t2tb15 s))))
      (=>
        (forall ((eqt (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 eqt) (t2tb15 s))
            (exists ((e (Array Int Int)))
              (and
                (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
                (= (select f e) eqt)))))
        (p_bijective
          (infix_mngt int int)
          (infix_mngt int int)
          (t2tb5 f)
          (t2tb15 s)
          (t2tb15 s))))))

;; set_bijective_auto
(assert
  (forall ((f (Array Int Int)) (s (set Int)))
    (=>
      (forall ((e Int))
        (=>
          (mem int (t2tb8 e) (t2tb16 s))
          (mem int (t2tb8 (select f e)) (t2tb16 s))))
      (=>
        (forall ((eqt Int))
          (=>
            (mem int (t2tb8 eqt) (t2tb16 s))
            (exists ((e Int))
              (and (mem int (t2tb8 e) (t2tb16 s)) (= (select f e) eqt)))))
        (p_bijective1 f s s)))))

;; set_bijective_auto
(assert
  (forall ((a ty))
    (forall ((f uni) (s uni))
      (=>
        (forall ((e uni))
          (=> (sort a e) (=> (mem a e s) (mem a (infix_at a a f e) s))))
        (=>
          (forall ((eqt uni))
            (=>
              (sort a eqt)
              (=>
                (mem a eqt s)
                (exists ((e uni))
                  (and (mem a e s) (= (infix_at a a f e) eqt))))))
          (p_bijective a a f s s))))))

;; inverse_pre
(declare-fun inverse_pre (ty
  ty
  uni
  uni
  uni
  uni) uni)

;; inverse_pre_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni) (x2 uni) (x3 uni))
      (sort a (inverse_pre b a x x1 x2 x3)))))

;; inverse_pre'spec
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (sa (set circuit)) (sb (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (b (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (=>
      (p_bijective
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        circuit1
        (t2tb2 f)
        (t2tb12 sa)
        (t2tb11 sb))
      (=>
        (mem
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          (t2tb3 b)
          (t2tb11 sb))
        (and
          (mem
            circuit1
            (inverse_pre
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              circuit1
              (t2tb2 f)
              (t2tb12 sa)
              (t2tb11 sb)
              (t2tb3 b))
            (t2tb12 sa))
          (= (select f (tb2t13
                         (inverse_pre
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt
                               (infix_mngt int int)
                               (infix_mngt int int)))
                           circuit1
                           (t2tb2 f)
                           (t2tb12 sa)
                           (t2tb11 sb)
                           (t2tb3 b)))) b))))))

;; inverse_pre'spec
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (sa (set (Array Int Int))) (sb (set (Array (Array Int Int) (Array Int Int)))) (b (Array (Array Int Int) (Array Int Int))))
    (=>
      (p_bijective
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (infix_mngt int int)
        (t2tb3 f)
        (t2tb15 sa)
        (t2tb14 sb))
      (=>
        (mem
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (t2tb5 b)
          (t2tb14 sb))
        (and
          (mem
            (infix_mngt int int)
            (inverse_pre
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (infix_mngt int int)
              (t2tb3 f)
              (t2tb15 sa)
              (t2tb14 sb)
              (t2tb5 b))
            (t2tb15 sa))
          (= (select f (tb2t7
                         (inverse_pre
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt int int))
                           (infix_mngt int int)
                           (t2tb3 f)
                           (t2tb15 sa)
                           (t2tb14 sb)
                           (t2tb5 b)))) b))))))

;; inverse_pre'spec
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (sa (set (Array Int Int))) (sb (set (Array Int Int))) (b (Array Int Int)))
    (=>
      (p_bijective
        (infix_mngt int int)
        (infix_mngt int int)
        (t2tb5 f)
        (t2tb15 sa)
        (t2tb15 sb))
      (=>
        (mem (infix_mngt int int) (t2tb7 b) (t2tb15 sb))
        (and
          (mem
            (infix_mngt int int)
            (inverse_pre
              (infix_mngt int int)
              (infix_mngt int int)
              (t2tb5 f)
              (t2tb15 sa)
              (t2tb15 sb)
              (t2tb7 b))
            (t2tb15 sa))
          (= (select f (tb2t7
                         (inverse_pre
                           (infix_mngt int int)
                           (infix_mngt int int)
                           (t2tb5 f)
                           (t2tb15 sa)
                           (t2tb15 sb)
                           (t2tb7 b)))) b))))))

;; inverse_pre'spec
(assert
  (forall ((f (Array Int Int)) (sa (set Int)) (sb (set Int)) (b Int))
    (=>
      (p_bijective1 f sa sb)
      (=>
        (mem int (t2tb8 b) (t2tb16 sb))
        (and
          (mem
            int
            (inverse_pre int int (t2tb7 f) (t2tb16 sa) (t2tb16 sb) (t2tb8 b))
            (t2tb16 sa))
          (= (select f (tb2t8
                         (inverse_pre
                           int
                           int
                           (t2tb7 f)
                           (t2tb16 sa)
                           (t2tb16 sb)
                           (t2tb8 b)))) b))))))

;; inverse_pre'spec
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (sa uni) (sb uni) (b1 uni))
      (=>
        (sort b b1)
        (=>
          (p_bijective b a f sa sb)
          (=>
            (mem b b1 sb)
            (and
              (mem a (inverse_pre b a f sa sb b1) sa)
              (= (infix_at b a f (inverse_pre b a f sa sb b1)) b1))))))))

;; inverse
(declare-fun inverse1 (ty
  ty
  uni
  uni
  uni) uni)

;; inverse_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni) (x2 uni))
      (sort (infix_mngt b a) (inverse1 b a x x1 x2)))))

;; t2tb
(declare-fun t2tb40 ((Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) circuit)) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) circuit)))
    (sort
      (infix_mngt
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        circuit1)
      (t2tb40 x))))

;; tb2t
(declare-fun tb2t40 (uni) (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) circuit))

;; BridgeL
(assert
  (forall ((i (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) circuit)))
    (! (= (tb2t40 (t2tb40 i)) i) :pattern ((t2tb40 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort
           (infix_mngt
             (infix_mngt
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int)))
             circuit1)
           j)
         (= (t2tb40 (tb2t40 j)) j)) :pattern ((t2tb40 (tb2t40 j))) )))

;; inverse'def
(assert
  (forall ((f (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) circuit)) (sa (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (sb (set circuit)))
    (=>
      (p_bijective
        circuit1
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        (t2tb40 f)
        (t2tb11 sa)
        (t2tb12 sb))
      (forall ((x circuit))
        (= (select (tb2t2
                     (inverse1
                       circuit1
                       (infix_mngt
                         (infix_mngt int int)
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt int int)))
                       (t2tb40 f)
                       (t2tb11 sa)
                       (t2tb12 sb))) x) (ite (mem
                                               circuit1
                                               (t2tb13 x)
                                               (t2tb12 sb))
                                          (tb2t3
                                            (inverse_pre
                                              circuit1
                                              (infix_mngt
                                                (infix_mngt int int)
                                                (infix_mngt
                                                  (infix_mngt int int)
                                                  (infix_mngt int int)))
                                              (t2tb40 f)
                                              (t2tb11 sa)
                                              (t2tb12 sb)
                                              (t2tb13 x)))
                                          (tb2t3
                                            (choose1
                                              (infix_mngt
                                                (infix_mngt int int)
                                                (infix_mngt
                                                  (infix_mngt int int)
                                                  (infix_mngt int int)))
                                              (t2tb11 sa)))))))))

;; inverse'def
(assert
  (forall ((f (Array (Array (Array Int Int) (Array Int Int)) (Array Int Int))) (sa (set (Array (Array Int Int) (Array Int Int)))) (sb (set (Array Int Int))))
    (=>
      (p_bijective
        (infix_mngt int int)
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (t2tb28 f)
        (t2tb14 sa)
        (t2tb15 sb))
      (forall ((x (Array Int Int)))
        (= (select (tb2t3
                     (inverse1
                       (infix_mngt int int)
                       (infix_mngt (infix_mngt int int) (infix_mngt int int))
                       (t2tb28 f)
                       (t2tb14 sa)
                       (t2tb15 sb))) x) (ite (mem
                                               (infix_mngt int int)
                                               (t2tb7 x)
                                               (t2tb15 sb))
                                          (tb2t5
                                            (inverse_pre
                                              (infix_mngt int int)
                                              (infix_mngt
                                                (infix_mngt int int)
                                                (infix_mngt int int))
                                              (t2tb28 f)
                                              (t2tb14 sa)
                                              (t2tb15 sb)
                                              (t2tb7 x)))
                                          (tb2t5
                                            (choose1
                                              (infix_mngt
                                                (infix_mngt int int)
                                                (infix_mngt int int))
                                              (t2tb14 sa)))))))))

;; inverse'def
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (sa (set (Array Int Int))) (sb (set (Array Int Int))))
    (=>
      (p_bijective
        (infix_mngt int int)
        (infix_mngt int int)
        (t2tb5 f)
        (t2tb15 sa)
        (t2tb15 sb))
      (forall ((x (Array Int Int)))
        (= (select (tb2t5
                     (inverse1
                       (infix_mngt int int)
                       (infix_mngt int int)
                       (t2tb5 f)
                       (t2tb15 sa)
                       (t2tb15 sb))) x) (ite (mem
                                               (infix_mngt int int)
                                               (t2tb7 x)
                                               (t2tb15 sb))
                                          (tb2t7
                                            (inverse_pre
                                              (infix_mngt int int)
                                              (infix_mngt int int)
                                              (t2tb5 f)
                                              (t2tb15 sa)
                                              (t2tb15 sb)
                                              (t2tb7 x)))
                                          (tb2t7
                                            (choose1
                                              (infix_mngt int int)
                                              (t2tb15 sa)))))))))

;; inverse'def
(assert
  (forall ((f (Array Int Int)) (sa (set Int)) (sb (set Int)))
    (=>
      (p_bijective1 f sa sb)
      (forall ((x Int))
        (= (select (tb2t7
                     (inverse1 int int (t2tb7 f) (t2tb16 sa) (t2tb16 sb))) x) 
        (ite (mem int (t2tb8 x) (t2tb16 sb))
          (tb2t8
            (inverse_pre int int (t2tb7 f) (t2tb16 sa) (t2tb16 sb) (t2tb8 x)))
          (tb2t8 (choose1 int (t2tb16 sa)))))))))

;; inverse'def
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (sa uni) (sb uni))
      (=>
        (p_bijective b a f sa sb)
        (forall ((x uni))
          (= (infix_at a b (inverse1 b a f sa sb) x) (ite (mem b x sb)
                                                       (inverse_pre
                                                         b
                                                         a
                                                         f
                                                         sa
                                                         sb
                                                         x)
                                                       (choose1 a sa))))))))

;; inverse'spec
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (sa (set circuit)) (sb (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (=>
      (p_bijective
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        circuit1
        (t2tb2 f)
        (t2tb12 sa)
        (t2tb11 sb))
      (and
        (forall ((b (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
          (=>
            (mem
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              (t2tb3 b)
              (t2tb11 sb))
            (mem
              circuit1
              (infix_at
                circuit1
                (infix_mngt
                  (infix_mngt int int)
                  (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                (inverse1
                  (infix_mngt
                    (infix_mngt int int)
                    (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                  circuit1
                  (t2tb2 f)
                  (t2tb12 sa)
                  (t2tb11 sb))
                (t2tb3 b))
              (t2tb12 sa))))
        (and
          (forall ((b (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
            (=>
              (mem
                (infix_mngt
                  (infix_mngt int int)
                  (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                (t2tb3 b)
                (t2tb11 sb))
              (= (select f (tb2t13
                             (infix_at
                               circuit1
                               (infix_mngt
                                 (infix_mngt int int)
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt int int)))
                               (inverse1
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int)))
                                 circuit1
                                 (t2tb2 f)
                                 (t2tb12 sa)
                                 (t2tb11 sb))
                               (t2tb3 b)))) b)))
          (p_bijective
            circuit1
            (infix_mngt
              (infix_mngt int int)
              (infix_mngt (infix_mngt int int) (infix_mngt int int)))
            (inverse1
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              circuit1
              (t2tb2 f)
              (t2tb12 sa)
              (t2tb11 sb))
            (t2tb11 sb)
            (t2tb12 sa)))))))

;; inverse'spec
(assert
  (forall ((f (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) circuit)) (sa (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (sb (set circuit)))
    (=>
      (p_bijective
        circuit1
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        (t2tb40 f)
        (t2tb11 sa)
        (t2tb12 sb))
      (and
        (forall ((b circuit))
          (=>
            (mem circuit1 (t2tb13 b) (t2tb12 sb))
            (mem
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              (t2tb3
                (select (tb2t2
                          (inverse1
                            circuit1
                            (infix_mngt
                              (infix_mngt int int)
                              (infix_mngt
                                (infix_mngt int int)
                                (infix_mngt int int)))
                            (t2tb40 f)
                            (t2tb11 sa)
                            (t2tb12 sb))) b))
              (t2tb11 sa))))
        (and
          (forall ((b circuit))
            (=>
              (mem circuit1 (t2tb13 b) (t2tb12 sb))
              (= (tb2t13
                   (infix_at
                     circuit1
                     (infix_mngt
                       (infix_mngt int int)
                       (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                     (t2tb40 f)
                     (t2tb3
                       (select (tb2t2
                                 (inverse1
                                   circuit1
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt int int)))
                                   (t2tb40 f)
                                   (t2tb11 sa)
                                   (t2tb12 sb))) b)))) b)))
          (p_bijective
            (infix_mngt
              (infix_mngt int int)
              (infix_mngt (infix_mngt int int) (infix_mngt int int)))
            circuit1
            (inverse1
              circuit1
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              (t2tb40 f)
              (t2tb11 sa)
              (t2tb12 sb))
            (t2tb12 sb)
            (t2tb11 sa)))))))

;; inverse'spec
(assert
  (forall ((f (Array (Array (Array Int Int) (Array Int Int)) (Array Int Int))) (sa (set (Array (Array Int Int) (Array Int Int)))) (sb (set (Array Int Int))))
    (=>
      (p_bijective
        (infix_mngt int int)
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (t2tb28 f)
        (t2tb14 sa)
        (t2tb15 sb))
      (and
        (forall ((b (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 b) (t2tb15 sb))
            (mem
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (t2tb5
                (select (tb2t3
                          (inverse1
                            (infix_mngt int int)
                            (infix_mngt
                              (infix_mngt int int)
                              (infix_mngt int int))
                            (t2tb28 f)
                            (t2tb14 sa)
                            (t2tb15 sb))) b))
              (t2tb14 sa))))
        (and
          (forall ((b (Array Int Int)))
            (=>
              (mem (infix_mngt int int) (t2tb7 b) (t2tb15 sb))
              (= (tb2t7
                   (infix_at
                     (infix_mngt int int)
                     (infix_mngt (infix_mngt int int) (infix_mngt int int))
                     (t2tb28 f)
                     (t2tb5
                       (select (tb2t3
                                 (inverse1
                                   (infix_mngt int int)
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int))
                                   (t2tb28 f)
                                   (t2tb14 sa)
                                   (t2tb15 sb))) b)))) b)))
          (p_bijective
            (infix_mngt (infix_mngt int int) (infix_mngt int int))
            (infix_mngt int int)
            (inverse1
              (infix_mngt int int)
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (t2tb28 f)
              (t2tb14 sa)
              (t2tb15 sb))
            (t2tb15 sb)
            (t2tb14 sa)))))))

;; inverse'spec
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (sa (set (Array Int Int))) (sb (set (Array (Array Int Int) (Array Int Int)))))
    (=>
      (p_bijective
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (infix_mngt int int)
        (t2tb3 f)
        (t2tb15 sa)
        (t2tb14 sb))
      (and
        (forall ((b (Array (Array Int Int) (Array Int Int))))
          (=>
            (mem
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (t2tb5 b)
              (t2tb14 sb))
            (mem
              (infix_mngt int int)
              (infix_at
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int))
                (inverse1
                  (infix_mngt (infix_mngt int int) (infix_mngt int int))
                  (infix_mngt int int)
                  (t2tb3 f)
                  (t2tb15 sa)
                  (t2tb14 sb))
                (t2tb5 b))
              (t2tb15 sa))))
        (and
          (forall ((b (Array (Array Int Int) (Array Int Int))))
            (=>
              (mem
                (infix_mngt (infix_mngt int int) (infix_mngt int int))
                (t2tb5 b)
                (t2tb14 sb))
              (= (select f (tb2t7
                             (infix_at
                               (infix_mngt int int)
                               (infix_mngt
                                 (infix_mngt int int)
                                 (infix_mngt int int))
                               (inverse1
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt int int))
                                 (infix_mngt int int)
                                 (t2tb3 f)
                                 (t2tb15 sa)
                                 (t2tb14 sb))
                               (t2tb5 b)))) b)))
          (p_bijective
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int))
            (inverse1
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (infix_mngt int int)
              (t2tb3 f)
              (t2tb15 sa)
              (t2tb14 sb))
            (t2tb14 sb)
            (t2tb15 sa)))))))

;; inverse'spec
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (sa (set (Array Int Int))) (sb (set (Array Int Int))))
    (=>
      (p_bijective
        (infix_mngt int int)
        (infix_mngt int int)
        (t2tb5 f)
        (t2tb15 sa)
        (t2tb15 sb))
      (and
        (forall ((b (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 b) (t2tb15 sb))
            (mem
              (infix_mngt int int)
              (t2tb7
                (select (tb2t5
                          (inverse1
                            (infix_mngt int int)
                            (infix_mngt int int)
                            (t2tb5 f)
                            (t2tb15 sa)
                            (t2tb15 sb))) b))
              (t2tb15 sa))))
        (and
          (forall ((b (Array Int Int)))
            (=>
              (mem (infix_mngt int int) (t2tb7 b) (t2tb15 sb))
              (= (select f (select (tb2t5
                                     (inverse1
                                       (infix_mngt int int)
                                       (infix_mngt int int)
                                       (t2tb5 f)
                                       (t2tb15 sa)
                                       (t2tb15 sb))) b)) b)))
          (p_bijective
            (infix_mngt int int)
            (infix_mngt int int)
            (inverse1
              (infix_mngt int int)
              (infix_mngt int int)
              (t2tb5 f)
              (t2tb15 sa)
              (t2tb15 sb))
            (t2tb15 sb)
            (t2tb15 sa)))))))

;; inverse'spec
(assert
  (forall ((f (Array Int Int)) (sa (set Int)) (sb (set Int)))
    (=>
      (p_bijective1 f sa sb)
      (and
        (forall ((b Int))
          (=>
            (mem int (t2tb8 b) (t2tb16 sb))
            (mem
              int
              (t2tb8
                (select (tb2t7
                          (inverse1
                            int
                            int
                            (t2tb7 f)
                            (t2tb16 sa)
                            (t2tb16 sb))) b))
              (t2tb16 sa))))
        (and
          (forall ((b Int))
            (=>
              (mem int (t2tb8 b) (t2tb16 sb))
              (= (select f (select (tb2t7
                                     (inverse1
                                       int
                                       int
                                       (t2tb7 f)
                                       (t2tb16 sa)
                                       (t2tb16 sb))) b)) b)))
          (p_bijective1
            (tb2t7 (inverse1 int int (t2tb7 f) (t2tb16 sa) (t2tb16 sb)))
            sb
            sa))))))

;; inverse'spec
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (sa uni) (sb uni))
      (=>
        (p_bijective b a f sa sb)
        (and
          (forall ((b1 uni))
            (=>
              (mem b b1 sb)
              (mem a (infix_at a b (inverse1 b a f sa sb) b1) sa)))
          (and
            (forall ((b1 uni))
              (=>
                (sort b b1)
                (=>
                  (mem b b1 sb)
                  (= (infix_at
                       b
                       a
                       f
                       (infix_at a b (inverse1 b a f sa sb) b1)) b1))))
            (p_bijective a b (inverse1 b a f sa sb) sb sa)))))))

;; unic_inverse
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (fqt (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) circuit)) (sa (set circuit)) (sb (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (=>
      (p_bijective
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        circuit1
        (t2tb2 f)
        (t2tb12 sa)
        (t2tb11 sb))
      (=>
        (forall ((a circuit))
          (=>
            (mem circuit1 (t2tb13 a) (t2tb12 sa))
            (= (tb2t13
                 (infix_at
                   circuit1
                   (infix_mngt
                     (infix_mngt int int)
                     (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                   (t2tb40 fqt)
                   (t2tb3 (select f a)))) a)))
        (forall ((b (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
          (=>
            (mem
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              (t2tb3 b)
              (t2tb11 sb))
            (= (tb2t13
                 (infix_at
                   circuit1
                   (infix_mngt
                     (infix_mngt int int)
                     (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                   (t2tb40 fqt)
                   (t2tb3 b))) (tb2t13
                                 (infix_at
                                   circuit1
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt int int)))
                                   (inverse1
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt
                                         (infix_mngt int int)
                                         (infix_mngt int int)))
                                     circuit1
                                     (t2tb2 f)
                                     (t2tb12 sa)
                                     (t2tb11 sb))
                                   (t2tb3 b))))))))))

;; unic_inverse
(assert
  (forall ((f (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) circuit)) (fqt (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (sa (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (sb (set circuit)))
    (=>
      (p_bijective
        circuit1
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        (t2tb40 f)
        (t2tb11 sa)
        (t2tb12 sb))
      (=>
        (forall ((a (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
          (=>
            (mem
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              (t2tb3 a)
              (t2tb11 sa))
            (= (select fqt (tb2t13
                             (infix_at
                               circuit1
                               (infix_mngt
                                 (infix_mngt int int)
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt int int)))
                               (t2tb40 f)
                               (t2tb3 a)))) a)))
        (forall ((b circuit))
          (=>
            (mem circuit1 (t2tb13 b) (t2tb12 sb))
            (= (select fqt b) (select (tb2t2
                                        (inverse1
                                          circuit1
                                          (infix_mngt
                                            (infix_mngt int int)
                                            (infix_mngt
                                              (infix_mngt int int)
                                              (infix_mngt int int)))
                                          (t2tb40 f)
                                          (t2tb11 sa)
                                          (t2tb12 sb))) b))))))))

;; unic_inverse
(assert
  (forall ((f (Array (Array (Array Int Int) (Array Int Int)) (Array Int Int))) (fqt (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (sa (set (Array (Array Int Int) (Array Int Int)))) (sb (set (Array Int Int))))
    (=>
      (p_bijective
        (infix_mngt int int)
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (t2tb28 f)
        (t2tb14 sa)
        (t2tb15 sb))
      (=>
        (forall ((a (Array (Array Int Int) (Array Int Int))))
          (=>
            (mem
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (t2tb5 a)
              (t2tb14 sa))
            (= (select fqt (tb2t7
                             (infix_at
                               (infix_mngt int int)
                               (infix_mngt
                                 (infix_mngt int int)
                                 (infix_mngt int int))
                               (t2tb28 f)
                               (t2tb5 a)))) a)))
        (forall ((b (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 b) (t2tb15 sb))
            (= (select fqt b) (select (tb2t3
                                        (inverse1
                                          (infix_mngt int int)
                                          (infix_mngt
                                            (infix_mngt int int)
                                            (infix_mngt int int))
                                          (t2tb28 f)
                                          (t2tb14 sa)
                                          (t2tb15 sb))) b))))))))

;; unic_inverse
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (fqt (Array (Array (Array Int Int) (Array Int Int)) (Array Int Int))) (sa (set (Array Int Int))) (sb (set (Array (Array Int Int) (Array Int Int)))))
    (=>
      (p_bijective
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (infix_mngt int int)
        (t2tb3 f)
        (t2tb15 sa)
        (t2tb14 sb))
      (=>
        (forall ((a (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 a) (t2tb15 sa))
            (= (tb2t7
                 (infix_at
                   (infix_mngt int int)
                   (infix_mngt (infix_mngt int int) (infix_mngt int int))
                   (t2tb28 fqt)
                   (t2tb5 (select f a)))) a)))
        (forall ((b (Array (Array Int Int) (Array Int Int))))
          (=>
            (mem
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (t2tb5 b)
              (t2tb14 sb))
            (= (tb2t7
                 (infix_at
                   (infix_mngt int int)
                   (infix_mngt (infix_mngt int int) (infix_mngt int int))
                   (t2tb28 fqt)
                   (t2tb5 b))) (tb2t7
                                 (infix_at
                                   (infix_mngt int int)
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int))
                                   (inverse1
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt int int))
                                     (infix_mngt int int)
                                     (t2tb3 f)
                                     (t2tb15 sa)
                                     (t2tb14 sb))
                                   (t2tb5 b))))))))))

;; unic_inverse
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (fqt (Array (Array Int Int) (Array Int Int))) (sa (set (Array Int Int))) (sb (set (Array Int Int))))
    (=>
      (p_bijective
        (infix_mngt int int)
        (infix_mngt int int)
        (t2tb5 f)
        (t2tb15 sa)
        (t2tb15 sb))
      (=>
        (forall ((a (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 a) (t2tb15 sa))
            (= (select fqt (select f a)) a)))
        (forall ((b (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 b) (t2tb15 sb))
            (= (select fqt b) (select (tb2t5
                                        (inverse1
                                          (infix_mngt int int)
                                          (infix_mngt int int)
                                          (t2tb5 f)
                                          (t2tb15 sa)
                                          (t2tb15 sb))) b))))))))

;; unic_inverse
(assert
  (forall ((f (Array Int Int)) (fqt (Array Int Int)) (sa (set Int)) (sb (set Int)))
    (=>
      (p_bijective1 f sa sb)
      (=>
        (forall ((a Int))
          (=>
            (mem int (t2tb8 a) (t2tb16 sa))
            (= (select fqt (select f a)) a)))
        (forall ((b Int))
          (=>
            (mem int (t2tb8 b) (t2tb16 sb))
            (= (select fqt b) (select (tb2t7
                                        (inverse1
                                          int
                                          int
                                          (t2tb7 f)
                                          (t2tb16 sa)
                                          (t2tb16 sb))) b))))))))

;; unic_inverse
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (fqt uni) (sa uni) (sb uni))
      (=>
        (p_bijective b a f sa sb)
        (=>
          (forall ((a1 uni))
            (=>
              (sort a a1)
              (=>
                (mem a a1 sa)
                (= (infix_at a b fqt (infix_at b a f a1)) a1))))
          (forall ((b1 uni))
            (=>
              (mem b b1 sb)
              (= (infix_at a b fqt b1) (infix_at
                                         a
                                         b
                                         (inverse1 b a f sa sb)
                                         b1)))))))))

;; unic_inverse_apply
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (sa (set circuit)) (sb (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (b (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (a circuit))
    (=>
      (p_bijective
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        circuit1
        (t2tb2 f)
        (t2tb12 sa)
        (t2tb11 sb))
      (=>
        (mem
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          (t2tb3 b)
          (t2tb11 sb))
        (=>
          (mem circuit1 (t2tb13 a) (t2tb12 sa))
          (=>
            (= (select f a) b)
            (= (tb2t13
                 (infix_at
                   circuit1
                   (infix_mngt
                     (infix_mngt int int)
                     (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                   (inverse1
                     (infix_mngt
                       (infix_mngt int int)
                       (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                     circuit1
                     (t2tb2 f)
                     (t2tb12 sa)
                     (t2tb11 sb))
                   (t2tb3 b))) a)))))))

;; unic_inverse_apply
(assert
  (forall ((f (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) circuit)) (sa (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (sb (set circuit)) (b circuit) (a (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (=>
      (p_bijective
        circuit1
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        (t2tb40 f)
        (t2tb11 sa)
        (t2tb12 sb))
      (=>
        (mem circuit1 (t2tb13 b) (t2tb12 sb))
        (=>
          (mem
            (infix_mngt
              (infix_mngt int int)
              (infix_mngt (infix_mngt int int) (infix_mngt int int)))
            (t2tb3 a)
            (t2tb11 sa))
          (=>
            (= (tb2t13
                 (infix_at
                   circuit1
                   (infix_mngt
                     (infix_mngt int int)
                     (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                   (t2tb40 f)
                   (t2tb3 a))) b)
            (= (select (tb2t2
                         (inverse1
                           circuit1
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt
                               (infix_mngt int int)
                               (infix_mngt int int)))
                           (t2tb40 f)
                           (t2tb11 sa)
                           (t2tb12 sb))) b) a)))))))

;; unic_inverse_apply
(assert
  (forall ((f (Array (Array (Array Int Int) (Array Int Int)) (Array Int Int))) (sa (set (Array (Array Int Int) (Array Int Int)))) (sb (set (Array Int Int))) (b (Array Int Int)) (a (Array (Array Int Int) (Array Int Int))))
    (=>
      (p_bijective
        (infix_mngt int int)
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (t2tb28 f)
        (t2tb14 sa)
        (t2tb15 sb))
      (=>
        (mem (infix_mngt int int) (t2tb7 b) (t2tb15 sb))
        (=>
          (mem
            (infix_mngt (infix_mngt int int) (infix_mngt int int))
            (t2tb5 a)
            (t2tb14 sa))
          (=>
            (= (tb2t7
                 (infix_at
                   (infix_mngt int int)
                   (infix_mngt (infix_mngt int int) (infix_mngt int int))
                   (t2tb28 f)
                   (t2tb5 a))) b)
            (= (select (tb2t3
                         (inverse1
                           (infix_mngt int int)
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt int int))
                           (t2tb28 f)
                           (t2tb14 sa)
                           (t2tb15 sb))) b) a)))))))

;; unic_inverse_apply
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (sa (set (Array Int Int))) (sb (set (Array (Array Int Int) (Array Int Int)))) (b (Array (Array Int Int) (Array Int Int))) (a (Array Int Int)))
    (=>
      (p_bijective
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (infix_mngt int int)
        (t2tb3 f)
        (t2tb15 sa)
        (t2tb14 sb))
      (=>
        (mem
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (t2tb5 b)
          (t2tb14 sb))
        (=>
          (mem (infix_mngt int int) (t2tb7 a) (t2tb15 sa))
          (=>
            (= (select f a) b)
            (= (tb2t7
                 (infix_at
                   (infix_mngt int int)
                   (infix_mngt (infix_mngt int int) (infix_mngt int int))
                   (inverse1
                     (infix_mngt (infix_mngt int int) (infix_mngt int int))
                     (infix_mngt int int)
                     (t2tb3 f)
                     (t2tb15 sa)
                     (t2tb14 sb))
                   (t2tb5 b))) a)))))))

;; unic_inverse_apply
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (sa (set (Array Int Int))) (sb (set (Array Int Int))) (b (Array Int Int)) (a (Array Int Int)))
    (=>
      (p_bijective
        (infix_mngt int int)
        (infix_mngt int int)
        (t2tb5 f)
        (t2tb15 sa)
        (t2tb15 sb))
      (=>
        (mem (infix_mngt int int) (t2tb7 b) (t2tb15 sb))
        (=>
          (mem (infix_mngt int int) (t2tb7 a) (t2tb15 sa))
          (=>
            (= (select f a) b)
            (= (select (tb2t5
                         (inverse1
                           (infix_mngt int int)
                           (infix_mngt int int)
                           (t2tb5 f)
                           (t2tb15 sa)
                           (t2tb15 sb))) b) a)))))))

;; unic_inverse_apply
(assert
  (forall ((f (Array Int Int)) (sa (set Int)) (sb (set Int)) (b Int) (a Int))
    (=>
      (p_bijective1 f sa sb)
      (=>
        (mem int (t2tb8 b) (t2tb16 sb))
        (=>
          (mem int (t2tb8 a) (t2tb16 sa))
          (=>
            (= (select f a) b)
            (= (select (tb2t7
                         (inverse1 int int (t2tb7 f) (t2tb16 sa) (t2tb16 sb))) b) a)))))))

;; unic_inverse_apply
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (sa uni) (sb uni) (b1 uni) (a1 uni))
      (=>
        (sort a a1)
        (=>
          (p_bijective b a f sa sb)
          (=>
            (mem b b1 sb)
            (=>
              (mem a a1 sa)
              (=>
                (= (infix_at b a f a1) b1)
                (= (infix_at a b (inverse1 b a f sa sb) b1) a1)))))))))

;; inverse_invol
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (sa (set circuit)) (sb (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (a circuit))
    (=>
      (p_bijective
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        circuit1
        (t2tb2 f)
        (t2tb12 sa)
        (t2tb11 sb))
      (=>
        (mem circuit1 (t2tb13 a) (t2tb12 sa))
        (= (select (tb2t2
                     (inverse1
                       circuit1
                       (infix_mngt
                         (infix_mngt int int)
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt int int)))
                       (inverse1
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt int int)))
                         circuit1
                         (t2tb2 f)
                         (t2tb12 sa)
                         (t2tb11 sb))
                       (t2tb11 sb)
                       (t2tb12 sa))) a) (select f a))))))

;; inverse_invol
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (sa (set (Array Int Int))) (sb (set (Array (Array Int Int) (Array Int Int)))) (a (Array Int Int)))
    (=>
      (p_bijective
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (infix_mngt int int)
        (t2tb3 f)
        (t2tb15 sa)
        (t2tb14 sb))
      (=>
        (mem (infix_mngt int int) (t2tb7 a) (t2tb15 sa))
        (= (select (tb2t3
                     (inverse1
                       (infix_mngt int int)
                       (infix_mngt (infix_mngt int int) (infix_mngt int int))
                       (inverse1
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt int int))
                         (infix_mngt int int)
                         (t2tb3 f)
                         (t2tb15 sa)
                         (t2tb14 sb))
                       (t2tb14 sb)
                       (t2tb15 sa))) a) (select f a))))))

;; inverse_invol
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (sa (set (Array Int Int))) (sb (set (Array Int Int))) (a (Array Int Int)))
    (=>
      (p_bijective
        (infix_mngt int int)
        (infix_mngt int int)
        (t2tb5 f)
        (t2tb15 sa)
        (t2tb15 sb))
      (=>
        (mem (infix_mngt int int) (t2tb7 a) (t2tb15 sa))
        (= (select (tb2t5
                     (inverse1
                       (infix_mngt int int)
                       (infix_mngt int int)
                       (inverse1
                         (infix_mngt int int)
                         (infix_mngt int int)
                         (t2tb5 f)
                         (t2tb15 sa)
                         (t2tb15 sb))
                       (t2tb15 sb)
                       (t2tb15 sa))) a) (select f a))))))

;; inverse_invol
(assert
  (forall ((f (Array Int Int)) (sa (set Int)) (sb (set Int)) (a Int))
    (=>
      (p_bijective1 f sa sb)
      (=>
        (mem int (t2tb8 a) (t2tb16 sa))
        (= (select (tb2t7
                     (inverse1
                       int
                       int
                       (inverse1 int int (t2tb7 f) (t2tb16 sa) (t2tb16 sb))
                       (t2tb16 sb)
                       (t2tb16 sa))) a) (select f a))))))

;; inverse_invol
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (sa uni) (sb uni) (a1 uni))
      (=>
        (p_bijective b a f sa sb)
        (=>
          (mem a a1 sa)
          (= (infix_at b a (inverse1 a b (inverse1 b a f sa sb) sb sa) a1) 
          (infix_at
            b
            a
            f
            a1)))))))

;; compose_inverse
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (sa (set circuit)) (sb (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (b (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (=>
      (p_bijective
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        circuit1
        (t2tb2 f)
        (t2tb12 sa)
        (t2tb11 sb))
      (=>
        (mem
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          (t2tb3 b)
          (t2tb11 sb))
        (= (select f (tb2t13
                       (infix_at
                         circuit1
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt int int)))
                         (inverse1
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt
                               (infix_mngt int int)
                               (infix_mngt int int)))
                           circuit1
                           (t2tb2 f)
                           (t2tb12 sa)
                           (t2tb11 sb))
                         (t2tb3 b)))) b)))))

;; compose_inverse
(assert
  (forall ((f (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) circuit)) (sa (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (sb (set circuit)) (b circuit))
    (=>
      (p_bijective
        circuit1
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        (t2tb40 f)
        (t2tb11 sa)
        (t2tb12 sb))
      (=>
        (mem circuit1 (t2tb13 b) (t2tb12 sb))
        (= (tb2t13
             (infix_at
               circuit1
               (infix_mngt
                 (infix_mngt int int)
                 (infix_mngt (infix_mngt int int) (infix_mngt int int)))
               (t2tb40 f)
               (t2tb3
                 (select (tb2t2
                           (inverse1
                             circuit1
                             (infix_mngt
                               (infix_mngt int int)
                               (infix_mngt
                                 (infix_mngt int int)
                                 (infix_mngt int int)))
                             (t2tb40 f)
                             (t2tb11 sa)
                             (t2tb12 sb))) b)))) b)))))

;; compose_inverse
(assert
  (forall ((f (Array (Array (Array Int Int) (Array Int Int)) (Array Int Int))) (sa (set (Array (Array Int Int) (Array Int Int)))) (sb (set (Array Int Int))) (b (Array Int Int)))
    (=>
      (p_bijective
        (infix_mngt int int)
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (t2tb28 f)
        (t2tb14 sa)
        (t2tb15 sb))
      (=>
        (mem (infix_mngt int int) (t2tb7 b) (t2tb15 sb))
        (= (tb2t7
             (infix_at
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int))
               (t2tb28 f)
               (t2tb5
                 (select (tb2t3
                           (inverse1
                             (infix_mngt int int)
                             (infix_mngt
                               (infix_mngt int int)
                               (infix_mngt int int))
                             (t2tb28 f)
                             (t2tb14 sa)
                             (t2tb15 sb))) b)))) b)))))

;; compose_inverse
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (sa (set (Array Int Int))) (sb (set (Array (Array Int Int) (Array Int Int)))) (b (Array (Array Int Int) (Array Int Int))))
    (=>
      (p_bijective
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (infix_mngt int int)
        (t2tb3 f)
        (t2tb15 sa)
        (t2tb14 sb))
      (=>
        (mem
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (t2tb5 b)
          (t2tb14 sb))
        (= (select f (tb2t7
                       (infix_at
                         (infix_mngt int int)
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt int int))
                         (inverse1
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt int int))
                           (infix_mngt int int)
                           (t2tb3 f)
                           (t2tb15 sa)
                           (t2tb14 sb))
                         (t2tb5 b)))) b)))))

;; compose_inverse
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (sa (set (Array Int Int))) (sb (set (Array Int Int))) (b (Array Int Int)))
    (=>
      (p_bijective
        (infix_mngt int int)
        (infix_mngt int int)
        (t2tb5 f)
        (t2tb15 sa)
        (t2tb15 sb))
      (=>
        (mem (infix_mngt int int) (t2tb7 b) (t2tb15 sb))
        (= (select f (select (tb2t5
                               (inverse1
                                 (infix_mngt int int)
                                 (infix_mngt int int)
                                 (t2tb5 f)
                                 (t2tb15 sa)
                                 (t2tb15 sb))) b)) b)))))

;; compose_inverse
(assert
  (forall ((f (Array Int Int)) (sa (set Int)) (sb (set Int)) (b Int))
    (=>
      (p_bijective1 f sa sb)
      (=>
        (mem int (t2tb8 b) (t2tb16 sb))
        (= (select f (select (tb2t7
                               (inverse1
                                 int
                                 int
                                 (t2tb7 f)
                                 (t2tb16 sa)
                                 (t2tb16 sb))) b)) b)))))

;; compose_inverse
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (sa uni) (sb uni) (b1 uni))
      (=>
        (sort b b1)
        (=>
          (p_bijective b a f sa sb)
          (=>
            (mem b b1 sb)
            (= (infix_at b a f (infix_at a b (inverse1 b a f sa sb) b1)) b1)))))))

;; inverse_compose
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (sa (set circuit)) (sb (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (a circuit))
    (=>
      (p_bijective
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        circuit1
        (t2tb2 f)
        (t2tb12 sa)
        (t2tb11 sb))
      (=>
        (mem circuit1 (t2tb13 a) (t2tb12 sa))
        (= (tb2t13
             (infix_at
               circuit1
               (infix_mngt
                 (infix_mngt int int)
                 (infix_mngt (infix_mngt int int) (infix_mngt int int)))
               (inverse1
                 (infix_mngt
                   (infix_mngt int int)
                   (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                 circuit1
                 (t2tb2 f)
                 (t2tb12 sa)
                 (t2tb11 sb))
               (t2tb3 (select f a)))) a)))))

;; inverse_compose
(assert
  (forall ((f (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) circuit)) (sa (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (sb (set circuit)) (a (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (=>
      (p_bijective
        circuit1
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        (t2tb40 f)
        (t2tb11 sa)
        (t2tb12 sb))
      (=>
        (mem
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          (t2tb3 a)
          (t2tb11 sa))
        (= (select (tb2t2
                     (inverse1
                       circuit1
                       (infix_mngt
                         (infix_mngt int int)
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt int int)))
                       (t2tb40 f)
                       (t2tb11 sa)
                       (t2tb12 sb))) (tb2t13
                                       (infix_at
                                         circuit1
                                         (infix_mngt
                                           (infix_mngt int int)
                                           (infix_mngt
                                             (infix_mngt int int)
                                             (infix_mngt int int)))
                                         (t2tb40 f)
                                         (t2tb3 a)))) a)))))

;; inverse_compose
(assert
  (forall ((f (Array (Array (Array Int Int) (Array Int Int)) (Array Int Int))) (sa (set (Array (Array Int Int) (Array Int Int)))) (sb (set (Array Int Int))) (a (Array (Array Int Int) (Array Int Int))))
    (=>
      (p_bijective
        (infix_mngt int int)
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (t2tb28 f)
        (t2tb14 sa)
        (t2tb15 sb))
      (=>
        (mem
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (t2tb5 a)
          (t2tb14 sa))
        (= (select (tb2t3
                     (inverse1
                       (infix_mngt int int)
                       (infix_mngt (infix_mngt int int) (infix_mngt int int))
                       (t2tb28 f)
                       (t2tb14 sa)
                       (t2tb15 sb))) (tb2t7
                                       (infix_at
                                         (infix_mngt int int)
                                         (infix_mngt
                                           (infix_mngt int int)
                                           (infix_mngt int int))
                                         (t2tb28 f)
                                         (t2tb5 a)))) a)))))

;; inverse_compose
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (sa (set (Array Int Int))) (sb (set (Array (Array Int Int) (Array Int Int)))) (a (Array Int Int)))
    (=>
      (p_bijective
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (infix_mngt int int)
        (t2tb3 f)
        (t2tb15 sa)
        (t2tb14 sb))
      (=>
        (mem (infix_mngt int int) (t2tb7 a) (t2tb15 sa))
        (= (tb2t7
             (infix_at
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int))
               (inverse1
                 (infix_mngt (infix_mngt int int) (infix_mngt int int))
                 (infix_mngt int int)
                 (t2tb3 f)
                 (t2tb15 sa)
                 (t2tb14 sb))
               (t2tb5 (select f a)))) a)))))

;; inverse_compose
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (sa (set (Array Int Int))) (sb (set (Array Int Int))) (a (Array Int Int)))
    (=>
      (p_bijective
        (infix_mngt int int)
        (infix_mngt int int)
        (t2tb5 f)
        (t2tb15 sa)
        (t2tb15 sb))
      (=>
        (mem (infix_mngt int int) (t2tb7 a) (t2tb15 sa))
        (= (select (tb2t5
                     (inverse1
                       (infix_mngt int int)
                       (infix_mngt int int)
                       (t2tb5 f)
                       (t2tb15 sa)
                       (t2tb15 sb))) (select f a)) a)))))

;; inverse_compose
(assert
  (forall ((f (Array Int Int)) (sa (set Int)) (sb (set Int)) (a Int))
    (=>
      (p_bijective1 f sa sb)
      (=>
        (mem int (t2tb8 a) (t2tb16 sa))
        (= (select (tb2t7
                     (inverse1 int int (t2tb7 f) (t2tb16 sa) (t2tb16 sb))) (select f a)) a)))))

;; inverse_compose
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (sa uni) (sb uni) (a1 uni))
      (=>
        (sort a a1)
        (=>
          (p_bijective b a f sa sb)
          (=>
            (mem a a1 sa)
            (= (infix_at a b (inverse1 b a f sa sb) (infix_at b a f a1)) a1)))))))

;; int_iterate_def_empty
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (f uni) (i Int) (j Int))
      (=>
        (<= j i)
        (=>
          (iterable im1 op1)
          (= (int_iterate im1 op1 f i j) (neutral_elt im1 op1)))))))

;; int_iterate_def_plus_one
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (f (Array Int (Array Int Int))) (i Int) (j Int))
    (=>
      (< i j)
      (=>
        (=> (= (+ i 1) j) (iterable (infix_mngt int int) (t2tb3 op1)))
        (= (tb2t7
             (int_iterate (infix_mngt int int) (t2tb3 op1) (t2tb9 f) i j)) (select (select op1 
        (tb2t7
          (infix_at (infix_mngt int int) int (t2tb9 f) (t2tb8 i)))) (tb2t7
                                                                    (int_iterate
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    (t2tb3
                                                                    op1)
                                                                    (t2tb9 f)
                                                                    (+ i 1)
                                                                    j))))))))

;; int_iterate_def_plus_one
(assert
  (forall ((op1 (Array Int (Array Int Int))) (f (Array Int Int)) (i Int) (j Int))
    (=>
      (< i j)
      (=>
        (=> (= (+ i 1) j) (iterable int (t2tb9 op1)))
        (= (tb2t8 (int_iterate int (t2tb9 op1) (t2tb7 f) i j)) (select 
        (tb2t7
          (infix_at
            (infix_mngt int int)
            int
            (t2tb9 op1)
            (t2tb8 (select f i)))) (tb2t8
                                     (int_iterate
                                       int
                                       (t2tb9 op1)
                                       (t2tb7 f)
                                       (+ i 1)
                                       j))))))))

;; int_iterate_def_plus_one
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (f uni) (i Int) (j Int))
      (=>
        (< i j)
        (=>
          (=> (= (+ i 1) j) (iterable im1 op1))
          (= (int_iterate im1 op1 f i j) (infix_at
                                           im1
                                           im1
                                           (infix_at
                                             (infix_mngt im1 im1)
                                             im1
                                             op1
                                             (infix_at im1 int f (t2tb8 i)))
                                           (int_iterate im1 op1 f (+ i 1) j))))))))

;; int_iterate_cardone
(assert
  (forall ((op1 (Array Int (Array Int Int))) (f (Array Int Int)) (i Int) (j Int))
    (=>
      (= j (+ i 1))
      (= (tb2t8 (int_iterate int (t2tb9 op1) (t2tb7 f) i j)) (select f i)))))

;; int_iterate_cardone
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (f uni) (i Int) (j Int))
      (=>
        (= j (+ i 1))
        (= (int_iterate im1 op1 f i j) (infix_at im1 int f (t2tb8 i)))))))

;; int_iterate_def_plus_one_com
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (f (Array Int (Array Int Int))) (i Int) (j Int))
    (=>
      (< i j)
      (=>
        (=> (= j (+ i 1)) (iterable (infix_mngt int int) (t2tb3 op1)))
        (= (select (select op1 (tb2t7
                                 (infix_at
                                   (infix_mngt int int)
                                   int
                                   (t2tb9 f)
                                   (t2tb8 i)))) (tb2t7
                                                  (int_iterate
                                                    (infix_mngt int int)
                                                    (t2tb3 op1)
                                                    (t2tb9 f)
                                                    (+ i 1)
                                                    j))) (tb2t7
                                                           (int_iterate
                                                             (infix_mngt
                                                               int
                                                               int)
                                                             (t2tb3 op1)
                                                             (t2tb9 f)
                                                             i
                                                             j)))))))

;; int_iterate_def_plus_one_com
(assert
  (forall ((op1 (Array Int (Array Int Int))) (f (Array Int Int)) (i Int) (j Int))
    (=>
      (< i j)
      (=>
        (=> (= j (+ i 1)) (iterable int (t2tb9 op1)))
        (= (select (tb2t7
                     (infix_at
                       (infix_mngt int int)
                       int
                       (t2tb9 op1)
                       (t2tb8 (select f i)))) (tb2t8
                                                (int_iterate
                                                  int
                                                  (t2tb9 op1)
                                                  (t2tb7 f)
                                                  (+ i 1)
                                                  j))) (tb2t8
                                                         (int_iterate
                                                           int
                                                           (t2tb9 op1)
                                                           (t2tb7 f)
                                                           i
                                                           j)))))))

;; int_iterate_def_plus_one_com
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (f uni) (i Int) (j Int))
      (=>
        (< i j)
        (=>
          (=> (= j (+ i 1)) (iterable im1 op1))
          (= (infix_at
               im1
               im1
               (infix_at
                 (infix_mngt im1 im1)
                 im1
                 op1
                 (infix_at im1 int f (t2tb8 i)))
               (int_iterate im1 op1 f (+ i 1) j)) (int_iterate im1 op1 f i j)))))))

;; int_iterate_to_iterate
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (f uni) (i Int) (j Int))
      (=>
        (=> (<= j i) (iterable im1 op1))
        (=>
          (commut im1 op1)
          (= (int_iterate im1 op1 f i j) (iterate
                                           im1
                                           int
                                           op1
                                           (t2tb16 (to_fset i j))
                                           f)))))))

;; int_iterate_right_extension
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (f (Array Int (Array Int Int))) (i Int) (j Int))
    (=>
      (iterable (infix_mngt int int) (t2tb3 op1))
      (=>
        (< i j)
        (= (tb2t7
             (int_iterate (infix_mngt int int) (t2tb3 op1) (t2tb9 f) i j)) (select (select op1 
        (tb2t7
          (int_iterate (infix_mngt int int) (t2tb3 op1) (t2tb9 f) i (- j 1)))) 
        (tb2t7
          (infix_at (infix_mngt int int) int (t2tb9 f) (t2tb8 (- j 1))))))))))

;; int_iterate_right_extension
(assert
  (forall ((op1 (Array Int (Array Int Int))) (f (Array Int Int)) (i Int) (j Int))
    (=>
      (iterable int (t2tb9 op1))
      (=>
        (< i j)
        (= (tb2t8 (int_iterate int (t2tb9 op1) (t2tb7 f) i j)) (select 
        (tb2t7
          (infix_at
            (infix_mngt int int)
            int
            (t2tb9 op1)
            (int_iterate int (t2tb9 op1) (t2tb7 f) i (- j 1)))) (select f (- j 1))))))))

;; int_iterate_right_extension
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (f uni) (i Int) (j Int))
      (=>
        (iterable im1 op1)
        (=>
          (< i j)
          (= (int_iterate im1 op1 f i j) (infix_at
                                           im1
                                           im1
                                           (infix_at
                                             (infix_mngt im1 im1)
                                             im1
                                             op1
                                             (int_iterate
                                               im1
                                               op1
                                               f
                                               i
                                               (- j 1)))
                                           (infix_at
                                             im1
                                             int
                                             f
                                             (t2tb8 (- j 1))))))))))

;; int_iterate_right_extension_
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (f (Array Int (Array Int Int))) (i Int) (j Int))
    (=>
      (assoc (infix_mngt int int) (t2tb3 op1))
      (=>
        (< (+ i 1) j)
        (= (tb2t7
             (int_iterate (infix_mngt int int) (t2tb3 op1) (t2tb9 f) i j)) (select (select op1 
        (tb2t7
          (int_iterate (infix_mngt int int) (t2tb3 op1) (t2tb9 f) i (- j 1)))) 
        (tb2t7
          (infix_at (infix_mngt int int) int (t2tb9 f) (t2tb8 (- j 1))))))))))

;; int_iterate_right_extension_
(assert
  (forall ((op1 (Array Int (Array Int Int))) (f (Array Int Int)) (i Int) (j Int))
    (=>
      (assoc int (t2tb9 op1))
      (=>
        (< (+ i 1) j)
        (= (tb2t8 (int_iterate int (t2tb9 op1) (t2tb7 f) i j)) (select 
        (tb2t7
          (infix_at
            (infix_mngt int int)
            int
            (t2tb9 op1)
            (int_iterate int (t2tb9 op1) (t2tb7 f) i (- j 1)))) (select f (- j 1))))))))

;; int_iterate_right_extension_
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (f uni) (i Int) (j Int))
      (=>
        (assoc im1 op1)
        (=>
          (< (+ i 1) j)
          (= (int_iterate im1 op1 f i j) (infix_at
                                           im1
                                           im1
                                           (infix_at
                                             (infix_mngt im1 im1)
                                             im1
                                             op1
                                             (int_iterate
                                               im1
                                               op1
                                               f
                                               i
                                               (- j 1)))
                                           (infix_at
                                             im1
                                             int
                                             f
                                             (t2tb8 (- j 1))))))))))

;; int_iterate_transitivity
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (f (Array Int (Array Int Int))) (i Int) (k Int) (j Int))
    (=>
      (iterable (infix_mngt int int) (t2tb3 op1))
      (=>
        (iterable (infix_mngt int int) (t2tb3 op1))
        (=>
          (op_neutral_left
            (infix_mngt int int)
            (t2tb3 op1)
            (neutral_elt (infix_mngt int int) (t2tb3 op1)))
          (=>
            (and (<= i k) (<= k j))
            (= (tb2t7
                 (int_iterate (infix_mngt int int) (t2tb3 op1) (t2tb9 f) i j)) (select (select op1 
            (tb2t7
              (int_iterate (infix_mngt int int) (t2tb3 op1) (t2tb9 f) i k))) 
            (tb2t7
              (int_iterate (infix_mngt int int) (t2tb3 op1) (t2tb9 f) k j))))))))))

;; int_iterate_transitivity
(assert
  (forall ((op1 (Array Int (Array Int Int))) (f (Array Int Int)) (i Int) (k Int) (j Int))
    (=>
      (iterable int (t2tb9 op1))
      (=>
        (iterable int (t2tb9 op1))
        (=>
          (op_neutral_left int (t2tb9 op1) (neutral_elt int (t2tb9 op1)))
          (=>
            (and (<= i k) (<= k j))
            (= (tb2t8 (int_iterate int (t2tb9 op1) (t2tb7 f) i j)) (select 
            (tb2t7
              (infix_at
                (infix_mngt int int)
                int
                (t2tb9 op1)
                (int_iterate int (t2tb9 op1) (t2tb7 f) i k))) (tb2t8
                                                                (int_iterate
                                                                  int
                                                                  (t2tb9 op1)
                                                                  (t2tb7 f)
                                                                  k
                                                                  j))))))))))

;; int_iterate_transitivity
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (f uni) (i Int) (k Int) (j Int))
      (=>
        (iterable im1 op1)
        (=>
          (iterable im1 op1)
          (=>
            (op_neutral_left im1 op1 (neutral_elt im1 op1))
            (=>
              (and (<= i k) (<= k j))
              (= (int_iterate im1 op1 f i j) (infix_at
                                               im1
                                               im1
                                               (infix_at
                                                 (infix_mngt im1 im1)
                                                 im1
                                                 op1
                                                 (int_iterate im1 op1 f i k))
                                               (int_iterate im1 op1 f k j))))))))))

;; int_iterate_transitivity_
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (f (Array Int (Array Int Int))) (i Int) (k Int) (j Int))
    (=>
      (op_neutral_left
        (infix_mngt int int)
        (t2tb3 op1)
        (neutral_elt (infix_mngt int int) (t2tb3 op1)))
      (=>
        (and (< i k) (< k j))
        (= (tb2t7
             (int_iterate (infix_mngt int int) (t2tb3 op1) (t2tb9 f) i j)) (select (select op1 
        (tb2t7
          (int_iterate (infix_mngt int int) (t2tb3 op1) (t2tb9 f) i k))) 
        (tb2t7
          (int_iterate (infix_mngt int int) (t2tb3 op1) (t2tb9 f) k j))))))))

;; int_iterate_transitivity_
(assert
  (forall ((op1 (Array Int (Array Int Int))) (f (Array Int Int)) (i Int) (k Int) (j Int))
    (=>
      (op_neutral_left int (t2tb9 op1) (neutral_elt int (t2tb9 op1)))
      (=>
        (and (< i k) (< k j))
        (= (tb2t8 (int_iterate int (t2tb9 op1) (t2tb7 f) i j)) (select 
        (tb2t7
          (infix_at
            (infix_mngt int int)
            int
            (t2tb9 op1)
            (int_iterate int (t2tb9 op1) (t2tb7 f) i k))) (tb2t8
                                                            (int_iterate
                                                              int
                                                              (t2tb9 op1)
                                                              (t2tb7 f)
                                                              k
                                                              j))))))))

;; int_iterate_transitivity_
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (f uni) (i Int) (k Int) (j Int))
      (=>
        (op_neutral_left im1 op1 (neutral_elt im1 op1))
        (=>
          (and (< i k) (< k j))
          (= (int_iterate im1 op1 f i j) (infix_at
                                           im1
                                           im1
                                           (infix_at
                                             (infix_mngt im1 im1)
                                             im1
                                             op1
                                             (int_iterate im1 op1 f i k))
                                           (int_iterate im1 op1 f k j))))))))

;; fc
(declare-fun fc11 (ty
  uni
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((im1 ty))
    (forall ((x uni) (x1 uni) (x2 uni))
      (sort (infix_mngt int im1) (fc11 im1 x x1 x2)))))

;; fc'def
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (f (Array Int (Array Int Int))) (g (Array Int (Array Int Int))) (k Int))
    (= (tb2t7
         (infix_at
           (infix_mngt int int)
           int
           (fc11 (infix_mngt int int) (t2tb3 op1) (t2tb9 f) (t2tb9 g))
           (t2tb8 k))) (select (select op1 (tb2t7
                                             (infix_at
                                               (infix_mngt int int)
                                               int
                                               (t2tb9 f)
                                               (t2tb8 k)))) (tb2t7
                                                              (infix_at
                                                                (infix_mngt
                                                                  int
                                                                  int)
                                                                int
                                                                (t2tb9 g)
                                                                (t2tb8 k)))))))

;; fc'def
(assert
  (forall ((op1 (Array Int (Array Int Int))) (f (Array Int Int)) (g (Array Int Int)) (k Int))
    (= (select (tb2t7 (fc11 int (t2tb9 op1) (t2tb7 f) (t2tb7 g))) k) (select 
    (tb2t7
      (infix_at (infix_mngt int int) int (t2tb9 op1) (t2tb8 (select f k)))) (select g k)))))

;; fc'def
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (f uni) (g uni) (k Int))
      (= (infix_at im1 int (fc11 im1 op1 f g) (t2tb8 k)) (infix_at
                                                           im1
                                                           im1
                                                           (infix_at
                                                             (infix_mngt
                                                               im1
                                                               im1)
                                                             im1
                                                             op1
                                                             (infix_at
                                                               im1
                                                               int
                                                               f
                                                               (t2tb8 k)))
                                                           (infix_at
                                                             im1
                                                             int
                                                             g
                                                             (t2tb8 k)))))))

;; int_iterate_comp_iterate
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (f (Array Int (Array Int Int))) (g (Array Int (Array Int Int))) (i Int) (j Int))
    (=>
      (iterable (infix_mngt int int) (t2tb3 op1))
      (=>
        (op_neutral_right
          (infix_mngt int int)
          (t2tb3 op1)
          (neutral_elt (infix_mngt int int) (t2tb3 op1)))
        (=>
          (commut (infix_mngt int int) (t2tb3 op1))
          (= (tb2t7
               (int_iterate
                 (infix_mngt int int)
                 (t2tb3 op1)
                 (fc11 (infix_mngt int int) (t2tb3 op1) (t2tb9 f) (t2tb9 g))
                 i
                 j)) (select (select op1 (tb2t7
                                           (int_iterate
                                             (infix_mngt int int)
                                             (t2tb3 op1)
                                             (t2tb9 f)
                                             i
                                             j))) (tb2t7
                                                    (int_iterate
                                                      (infix_mngt int int)
                                                      (t2tb3 op1)
                                                      (t2tb9 g)
                                                      i
                                                      j)))))))))

;; int_iterate_comp_iterate
(assert
  (forall ((op1 (Array Int (Array Int Int))) (f (Array Int Int)) (g (Array Int Int)) (i Int) (j Int))
    (=>
      (iterable int (t2tb9 op1))
      (=>
        (op_neutral_right int (t2tb9 op1) (neutral_elt int (t2tb9 op1)))
        (=>
          (commut int (t2tb9 op1))
          (= (tb2t8
               (int_iterate
                 int
                 (t2tb9 op1)
                 (fc11 int (t2tb9 op1) (t2tb7 f) (t2tb7 g))
                 i
                 j)) (select (tb2t7
                               (infix_at
                                 (infix_mngt int int)
                                 int
                                 (t2tb9 op1)
                                 (int_iterate int (t2tb9 op1) (t2tb7 f) i j))) 
          (tb2t8
            (int_iterate int (t2tb9 op1) (t2tb7 g) i j)))))))))

;; int_iterate_comp_iterate
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (f uni) (g uni) (i Int) (j Int))
      (=>
        (iterable im1 op1)
        (=>
          (op_neutral_right im1 op1 (neutral_elt im1 op1))
          (=>
            (commut im1 op1)
            (= (int_iterate im1 op1 (fc11 im1 op1 f g) i j) (infix_at
                                                              im1
                                                              im1
                                                              (infix_at
                                                                (infix_mngt
                                                                  im1
                                                                  im1)
                                                                im1
                                                                op1
                                                                (int_iterate
                                                                  im1
                                                                  op1
                                                                  f
                                                                  i
                                                                  j))
                                                              (int_iterate
                                                                im1
                                                                op1
                                                                g
                                                                i
                                                                j)))))))))

;; int_iterate_attr_no_f
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (op2 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (t1 uni) (t2 (Array Int (Array Int Int))) (f uni) (i Int) (j Int))
      (=>
        (forall ((x Int))
          (forall ((y uni))
            (=>
              (sort im1 y)
              (= (select (select op2 (tb2t7
                                       (infix_at
                                         (infix_mngt int int)
                                         int
                                         (t2tb9 t2)
                                         (t2tb8 x)))) (tb2t7
                                                        (infix_at
                                                          (infix_mngt
                                                            int
                                                            int)
                                                          im1
                                                          f
                                                          y))) (tb2t7
                                                                 (infix_at
                                                                   (infix_mngt
                                                                    int
                                                                    int)
                                                                   im1
                                                                   f
                                                                   (infix_at
                                                                    im1
                                                                    im1
                                                                    (infix_at
                                                                    (infix_mngt
                                                                    im1
                                                                    im1)
                                                                    im1
                                                                    op1
                                                                    (infix_at
                                                                    im1
                                                                    int
                                                                    t1
                                                                    (t2tb8 x)))
                                                                    y)))))))
        (=>
          (= (tb2t7
               (infix_at (infix_mngt int int) im1 f (neutral_elt im1 op1))) 
          (tb2t7
            (neutral_elt (infix_mngt int int) (t2tb3 op2))))
          (=>
            (iterable im1 op1)
            (=>
              (iterable (infix_mngt int int) (t2tb3 op2))
              (=>
                (forall ((i1 Int))
                  (= (tb2t7
                       (infix_at
                         (infix_mngt int int)
                         im1
                         f
                         (infix_at im1 int t1 (t2tb8 i1)))) (tb2t7
                                                              (infix_at
                                                                (infix_mngt
                                                                  int
                                                                  int)
                                                                int
                                                                (t2tb9 t2)
                                                                (t2tb8 i1)))))
                (= (tb2t7
                     (int_iterate
                       (infix_mngt int int)
                       (t2tb3 op2)
                       (t2tb9 t2)
                       i
                       j)) (tb2t7
                             (infix_at
                               (infix_mngt int int)
                               im1
                               f
                               (int_iterate im1 op1 t1 i j))))))))))))

;; int_iterate_attr_no_f
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (op2 (Array Int (Array Int Int))) (t1 uni) (t2 (Array Int Int)) (f uni) (i Int) (j Int))
      (=>
        (forall ((x Int))
          (forall ((y uni))
            (=>
              (sort im1 y)
              (= (select (tb2t7
                           (infix_at
                             (infix_mngt int int)
                             int
                             (t2tb9 op2)
                             (t2tb8 (select t2 x)))) (tb2t8
                                                       (infix_at int im1 f y))) 
              (tb2t8
                (infix_at
                  int
                  im1
                  f
                  (infix_at
                    im1
                    im1
                    (infix_at
                      (infix_mngt im1 im1)
                      im1
                      op1
                      (infix_at im1 int t1 (t2tb8 x)))
                    y)))))))
        (=>
          (= (tb2t8 (infix_at int im1 f (neutral_elt im1 op1))) (tb2t8
                                                                  (neutral_elt
                                                                    int
                                                                    (t2tb9
                                                                    op2))))
          (=>
            (iterable im1 op1)
            (=>
              (iterable int (t2tb9 op2))
              (=>
                (forall ((i1 Int))
                  (= (tb2t8
                       (infix_at int im1 f (infix_at im1 int t1 (t2tb8 i1)))) (select t2 i1)))
                (= (tb2t8 (int_iterate int (t2tb9 op2) (t2tb7 t2) i j)) 
                (tb2t8
                  (infix_at int im1 f (int_iterate im1 op1 t1 i j))))))))))))

;; t2tb
(declare-fun t2tb41 ((Array Int (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array Int (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (sort
      (infix_mngt
        int
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int))))
      (t2tb41 x))))

;; tb2t
(declare-fun tb2t41 (uni) (Array Int (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))

;; BridgeL
(assert
  (forall ((i (Array Int (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (! (= (tb2t41 (t2tb41 i)) i) :pattern ((t2tb41 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb41 (tb2t41 j)) j) :pattern ((t2tb41 (tb2t41 j))) )))

;; t2tb
(declare-fun t2tb42 ((Array Int circuit)) uni)

;; t2tb_sort
(assert
  (forall ((x (Array Int circuit)))
    (sort (infix_mngt int circuit1) (t2tb42 x))))

;; tb2t
(declare-fun tb2t42 (uni) (Array Int circuit))

;; BridgeL
(assert
  (forall ((i (Array Int circuit)))
    (! (= (tb2t42 (t2tb42 i)) i) :pattern ((t2tb42 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=> (sort (infix_mngt int circuit1) j) (= (t2tb42 (tb2t42 j)) j)) :pattern (
    (t2tb42
      (tb2t42 j))) )))

;; t2tb
(declare-fun t2tb43 ((Array circuit (Array circuit circuit))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array circuit (Array circuit circuit))))
    (sort (infix_mngt circuit1 (infix_mngt circuit1 circuit1)) (t2tb43 x))))

;; tb2t
(declare-fun tb2t43 (uni) (Array circuit (Array circuit circuit)))

;; BridgeL
(assert
  (forall ((i (Array circuit (Array circuit circuit))))
    (! (= (tb2t43 (t2tb43 i)) i) :pattern ((t2tb43 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort (infix_mngt circuit1 (infix_mngt circuit1 circuit1)) j)
         (= (t2tb43 (tb2t43 j)) j)) :pattern ((t2tb43 (tb2t43 j))) )))

;; int_iterate_attr_no_f
(assert
  (forall ((op1 (Array circuit (Array circuit circuit))) (op2 (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))) (t1 (Array Int circuit)) (t2 (Array Int (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (i Int) (j Int))
    (=>
      (forall ((x Int))
        (forall ((y circuit))
          (= (tb2t3
               (infix_at
                 (infix_mngt
                   (infix_mngt int int)
                   (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                 (infix_mngt
                   (infix_mngt int int)
                   (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                 (infix_at
                   (infix_mngt
                     (infix_mngt
                       (infix_mngt int int)
                       (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                     (infix_mngt
                       (infix_mngt int int)
                       (infix_mngt (infix_mngt int int) (infix_mngt int int))))
                   (infix_mngt
                     (infix_mngt int int)
                     (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                   (t2tb23 op2)
                   (infix_at
                     (infix_mngt
                       (infix_mngt int int)
                       (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                     int
                     (t2tb41 t2)
                     (t2tb8 x)))
                 (t2tb3 (select f y)))) (select f (tb2t13
                                                    (infix_at
                                                      circuit1
                                                      circuit1
                                                      (infix_at
                                                        (infix_mngt
                                                          circuit1
                                                          circuit1)
                                                        circuit1
                                                        (t2tb43 op1)
                                                        (infix_at
                                                          circuit1
                                                          int
                                                          (t2tb42 t1)
                                                          (t2tb8 x)))
                                                      (t2tb13 y)))))))
      (=>
        (= (select f (tb2t13 (neutral_elt circuit1 (t2tb43 op1)))) (tb2t3
                                                                    (neutral_elt
                                                                    (infix_mngt
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    (infix_mngt
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    (infix_mngt
                                                                    int
                                                                    int)))
                                                                    (t2tb23
                                                                    op2))))
        (=>
          (iterable circuit1 (t2tb43 op1))
          (=>
            (iterable
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              (t2tb23 op2))
            (=>
              (forall ((i1 Int))
                (= (select f (tb2t13
                               (infix_at circuit1 int (t2tb42 t1) (t2tb8 i1)))) 
                (tb2t3
                  (infix_at
                    (infix_mngt
                      (infix_mngt int int)
                      (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                    int
                    (t2tb41 t2)
                    (t2tb8 i1)))))
              (= (tb2t3
                   (int_iterate
                     (infix_mngt
                       (infix_mngt int int)
                       (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                     (t2tb23 op2)
                     (t2tb41 t2)
                     i
                     j)) (select f (tb2t13
                                     (int_iterate
                                       circuit1
                                       (t2tb43 op1)
                                       (t2tb42 t1)
                                       i
                                       j)))))))))))

;; t2tb
(declare-fun t2tb44 ((Array Int (Array (Array Int Int) (Array Int Int)))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array Int (Array (Array Int Int) (Array Int Int)))))
    (sort
      (infix_mngt int (infix_mngt (infix_mngt int int) (infix_mngt int int)))
      (t2tb44 x))))

;; tb2t
(declare-fun tb2t44 (uni) (Array Int (Array (Array Int Int) (Array Int Int))))

;; BridgeL
(assert
  (forall ((i (Array Int (Array (Array Int Int) (Array Int Int)))))
    (! (= (tb2t44 (t2tb44 i)) i) :pattern ((t2tb44 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb44 (tb2t44 j)) j) :pattern ((t2tb44 (tb2t44 j))) )))

;; int_iterate_attr_no_f
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (op2 (Array (Array (Array Int Int) (Array Int Int)) (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int))))) (t1 (Array Int (Array Int Int))) (t2 (Array Int (Array (Array Int Int) (Array Int Int)))) (f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (i Int) (j Int))
    (=>
      (forall ((x Int))
        (forall ((y (Array Int Int)))
          (= (tb2t5
               (infix_at
                 (infix_mngt (infix_mngt int int) (infix_mngt int int))
                 (infix_mngt (infix_mngt int int) (infix_mngt int int))
                 (infix_at
                   (infix_mngt
                     (infix_mngt (infix_mngt int int) (infix_mngt int int))
                     (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                   (infix_mngt (infix_mngt int int) (infix_mngt int int))
                   (t2tb25 op2)
                   (infix_at
                     (infix_mngt (infix_mngt int int) (infix_mngt int int))
                     int
                     (t2tb44 t2)
                     (t2tb8 x)))
                 (t2tb5 (select f y)))) (select f (select (select op1 
          (tb2t7
            (infix_at (infix_mngt int int) int (t2tb9 t1) (t2tb8 x)))) y)))))
      (=>
        (= (select f (tb2t7 (neutral_elt (infix_mngt int int) (t2tb3 op1)))) 
        (tb2t5
          (neutral_elt
            (infix_mngt (infix_mngt int int) (infix_mngt int int))
            (t2tb25 op2))))
        (=>
          (iterable (infix_mngt int int) (t2tb3 op1))
          (=>
            (iterable
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (t2tb25 op2))
            (=>
              (forall ((i1 Int))
                (= (select f (tb2t7
                               (infix_at
                                 (infix_mngt int int)
                                 int
                                 (t2tb9 t1)
                                 (t2tb8 i1)))) (tb2t5
                                                 (infix_at
                                                   (infix_mngt
                                                     (infix_mngt int int)
                                                     (infix_mngt int int))
                                                   int
                                                   (t2tb44 t2)
                                                   (t2tb8 i1)))))
              (= (tb2t5
                   (int_iterate
                     (infix_mngt (infix_mngt int int) (infix_mngt int int))
                     (t2tb25 op2)
                     (t2tb44 t2)
                     i
                     j)) (select f (tb2t7
                                     (int_iterate
                                       (infix_mngt int int)
                                       (t2tb3 op1)
                                       (t2tb9 t1)
                                       i
                                       j)))))))))))

;; int_iterate_attr_no_f
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (op2 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (t1 (Array Int (Array Int Int))) (t2 (Array Int (Array Int Int))) (f (Array (Array Int Int) (Array Int Int))) (i Int) (j Int))
    (=>
      (forall ((x Int))
        (forall ((y (Array Int Int)))
          (= (select (select op2 (tb2t7
                                   (infix_at
                                     (infix_mngt int int)
                                     int
                                     (t2tb9 t2)
                                     (t2tb8 x)))) (select f y)) (select f (select (select op1 
          (tb2t7
            (infix_at (infix_mngt int int) int (t2tb9 t1) (t2tb8 x)))) y)))))
      (=>
        (= (select f (tb2t7 (neutral_elt (infix_mngt int int) (t2tb3 op1)))) 
        (tb2t7
          (neutral_elt (infix_mngt int int) (t2tb3 op2))))
        (=>
          (iterable (infix_mngt int int) (t2tb3 op1))
          (=>
            (iterable (infix_mngt int int) (t2tb3 op2))
            (=>
              (forall ((i1 Int))
                (= (select f (tb2t7
                               (infix_at
                                 (infix_mngt int int)
                                 int
                                 (t2tb9 t1)
                                 (t2tb8 i1)))) (tb2t7
                                                 (infix_at
                                                   (infix_mngt int int)
                                                   int
                                                   (t2tb9 t2)
                                                   (t2tb8 i1)))))
              (= (tb2t7
                   (int_iterate
                     (infix_mngt int int)
                     (t2tb3 op2)
                     (t2tb9 t2)
                     i
                     j)) (select f (tb2t7
                                     (int_iterate
                                       (infix_mngt int int)
                                       (t2tb3 op1)
                                       (t2tb9 t1)
                                       i
                                       j)))))))))))

;; int_iterate_attr_no_f
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (op2 (Array Int (Array Int Int))) (t1 (Array Int (Array Int Int))) (t2 (Array Int Int)) (f (Array (Array Int Int) Int)) (i Int) (j Int))
    (=>
      (forall ((x Int))
        (forall ((y (Array Int Int)))
          (= (select (tb2t7
                       (infix_at
                         (infix_mngt int int)
                         int
                         (t2tb9 op2)
                         (t2tb8 (select t2 x)))) (tb2t8
                                                   (infix_at
                                                     int
                                                     (infix_mngt int int)
                                                     (t2tb39 f)
                                                     (t2tb7 y)))) (tb2t8
                                                                    (infix_at
                                                                    int
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    (t2tb39
                                                                    f)
                                                                    (t2tb7
                                                                    (select (select op1 
                                                                    (tb2t7
                                                                    (infix_at
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    int
                                                                    (t2tb9
                                                                    t1)
                                                                    (t2tb8 x)))) y)))))))
      (=>
        (= (tb2t8
             (infix_at
               int
               (infix_mngt int int)
               (t2tb39 f)
               (neutral_elt (infix_mngt int int) (t2tb3 op1)))) (tb2t8
                                                                  (neutral_elt
                                                                    int
                                                                    (t2tb9
                                                                    op2))))
        (=>
          (iterable (infix_mngt int int) (t2tb3 op1))
          (=>
            (iterable int (t2tb9 op2))
            (=>
              (forall ((i1 Int))
                (= (tb2t8
                     (infix_at
                       int
                       (infix_mngt int int)
                       (t2tb39 f)
                       (infix_at
                         (infix_mngt int int)
                         int
                         (t2tb9 t1)
                         (t2tb8 i1)))) (select t2 i1)))
              (= (tb2t8 (int_iterate int (t2tb9 op2) (t2tb7 t2) i j)) 
              (tb2t8
                (infix_at
                  int
                  (infix_mngt int int)
                  (t2tb39 f)
                  (int_iterate
                    (infix_mngt int int)
                    (t2tb3 op1)
                    (t2tb9 t1)
                    i
                    j)))))))))))

;; int_iterate_attr_no_f
(assert
  (forall ((im2 ty))
    (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (op2 uni) (t1 (Array Int (Array Int Int))) (t2 uni) (f uni) (i Int) (j Int))
      (=>
        (forall ((x Int))
          (forall ((y (Array Int Int)))
            (= (infix_at
                 im2
                 im2
                 (infix_at
                   (infix_mngt im2 im2)
                   im2
                   op2
                   (infix_at im2 int t2 (t2tb8 x)))
                 (infix_at im2 (infix_mngt int int) f (t2tb7 y))) (infix_at
                                                                    im2
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    f
                                                                    (t2tb7
                                                                    (select (select op1 
                                                                    (tb2t7
                                                                    (infix_at
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    int
                                                                    (t2tb9
                                                                    t1)
                                                                    (t2tb8 x)))) y))))))
        (=>
          (= (infix_at
               im2
               (infix_mngt int int)
               f
               (neutral_elt (infix_mngt int int) (t2tb3 op1))) (neutral_elt
                                                                 im2
                                                                 op2))
          (=>
            (iterable (infix_mngt int int) (t2tb3 op1))
            (=>
              (iterable im2 op2)
              (=>
                (forall ((i1 Int))
                  (= (infix_at
                       im2
                       (infix_mngt int int)
                       f
                       (infix_at
                         (infix_mngt int int)
                         int
                         (t2tb9 t1)
                         (t2tb8 i1))) (infix_at im2 int t2 (t2tb8 i1))))
                (= (int_iterate im2 op2 t2 i j) (infix_at
                                                  im2
                                                  (infix_mngt int int)
                                                  f
                                                  (int_iterate
                                                    (infix_mngt int int)
                                                    (t2tb3 op1)
                                                    (t2tb9 t1)
                                                    i
                                                    j)))))))))))

;; int_iterate_attr_no_f
(assert
  (forall ((op1 (Array Int (Array Int Int))) (op2 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (t1 (Array Int Int)) (t2 (Array Int (Array Int Int))) (f (Array Int (Array Int Int))) (i Int) (j Int))
    (=>
      (forall ((x Int))
        (forall ((y Int))
          (= (select (select op2 (tb2t7
                                   (infix_at
                                     (infix_mngt int int)
                                     int
                                     (t2tb9 t2)
                                     (t2tb8 x)))) (tb2t7
                                                    (infix_at
                                                      (infix_mngt int int)
                                                      int
                                                      (t2tb9 f)
                                                      (t2tb8 y)))) (tb2t7
                                                                    (infix_at
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    int
                                                                    (t2tb9 f)
                                                                    (t2tb8
                                                                    (select 
                                                                    (tb2t7
                                                                    (infix_at
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    int
                                                                    (t2tb9
                                                                    op1)
                                                                    (t2tb8
                                                                    (select t1 x)))) y)))))))
      (=>
        (= (tb2t7
             (infix_at
               (infix_mngt int int)
               int
               (t2tb9 f)
               (neutral_elt int (t2tb9 op1)))) (tb2t7
                                                 (neutral_elt
                                                   (infix_mngt int int)
                                                   (t2tb3 op2))))
        (=>
          (iterable int (t2tb9 op1))
          (=>
            (iterable (infix_mngt int int) (t2tb3 op2))
            (=>
              (forall ((i1 Int))
                (= (tb2t7
                     (infix_at
                       (infix_mngt int int)
                       int
                       (t2tb9 f)
                       (t2tb8 (select t1 i1)))) (tb2t7
                                                  (infix_at
                                                    (infix_mngt int int)
                                                    int
                                                    (t2tb9 t2)
                                                    (t2tb8 i1)))))
              (= (tb2t7
                   (int_iterate
                     (infix_mngt int int)
                     (t2tb3 op2)
                     (t2tb9 t2)
                     i
                     j)) (tb2t7
                           (infix_at
                             (infix_mngt int int)
                             int
                             (t2tb9 f)
                             (int_iterate int (t2tb9 op1) (t2tb7 t1) i j)))))))))))

;; int_iterate_attr_no_f
(assert
  (forall ((op1 (Array Int (Array Int Int))) (op2 (Array Int (Array Int Int))) (t1 (Array Int Int)) (t2 (Array Int Int)) (f (Array Int Int)) (i Int) (j Int))
    (=>
      (forall ((x Int))
        (forall ((y Int))
          (= (select (tb2t7
                       (infix_at
                         (infix_mngt int int)
                         int
                         (t2tb9 op2)
                         (t2tb8 (select t2 x)))) (select f y)) (select f (select 
          (tb2t7
            (infix_at
              (infix_mngt int int)
              int
              (t2tb9 op1)
              (t2tb8 (select t1 x)))) y)))))
      (=>
        (= (select f (tb2t8 (neutral_elt int (t2tb9 op1)))) (tb2t8
                                                              (neutral_elt
                                                                int
                                                                (t2tb9 op2))))
        (=>
          (iterable int (t2tb9 op1))
          (=>
            (iterable int (t2tb9 op2))
            (=>
              (forall ((i1 Int))
                (= (select f (select t1 i1)) (select t2 i1)))
              (= (tb2t8 (int_iterate int (t2tb9 op2) (t2tb7 t2) i j)) (select f 
              (tb2t8
                (int_iterate int (t2tb9 op1) (t2tb7 t1) i j)))))))))))

;; int_iterate_attr_no_f
(assert
  (forall ((im2 ty))
    (forall ((op1 (Array Int (Array Int Int))) (op2 uni) (t1 (Array Int Int)) (t2 uni) (f uni) (i Int) (j Int))
      (=>
        (forall ((x Int))
          (forall ((y Int))
            (= (infix_at
                 im2
                 im2
                 (infix_at
                   (infix_mngt im2 im2)
                   im2
                   op2
                   (infix_at im2 int t2 (t2tb8 x)))
                 (infix_at im2 int f (t2tb8 y))) (infix_at
                                                   im2
                                                   int
                                                   f
                                                   (t2tb8
                                                     (select (tb2t7
                                                               (infix_at
                                                                 (infix_mngt
                                                                   int
                                                                   int)
                                                                 int
                                                                 (t2tb9 op1)
                                                                 (t2tb8
                                                                   (select t1 x)))) y))))))
        (=>
          (= (infix_at im2 int f (neutral_elt int (t2tb9 op1))) (neutral_elt
                                                                  im2
                                                                  op2))
          (=>
            (iterable int (t2tb9 op1))
            (=>
              (iterable im2 op2)
              (=>
                (forall ((i1 Int))
                  (= (infix_at im2 int f (t2tb8 (select t1 i1))) (infix_at
                                                                   im2
                                                                   int
                                                                   t2
                                                                   (t2tb8 i1))))
                (= (int_iterate im2 op2 t2 i j) (infix_at
                                                  im2
                                                  int
                                                  f
                                                  (int_iterate
                                                    int
                                                    (t2tb9 op1)
                                                    (t2tb7 t1)
                                                    i
                                                    j)))))))))))

;; int_iterate_attr_no_f
(assert
  (forall ((im1 ty) (im2 ty))
    (forall ((op1 uni) (op2 uni) (t1 uni) (t2 uni) (f uni) (i Int) (j Int))
      (=>
        (forall ((x Int))
          (forall ((y uni))
            (=>
              (sort im1 y)
              (= (infix_at
                   im2
                   im2
                   (infix_at
                     (infix_mngt im2 im2)
                     im2
                     op2
                     (infix_at im2 int t2 (t2tb8 x)))
                   (infix_at im2 im1 f y)) (infix_at
                                             im2
                                             im1
                                             f
                                             (infix_at
                                               im1
                                               im1
                                               (infix_at
                                                 (infix_mngt im1 im1)
                                                 im1
                                                 op1
                                                 (infix_at
                                                   im1
                                                   int
                                                   t1
                                                   (t2tb8 x)))
                                               y))))))
        (=>
          (= (infix_at im2 im1 f (neutral_elt im1 op1)) (neutral_elt im2 op2))
          (=>
            (iterable im1 op1)
            (=>
              (iterable im2 op2)
              (=>
                (forall ((i1 Int))
                  (= (infix_at im2 im1 f (infix_at im1 int t1 (t2tb8 i1))) 
                  (infix_at
                    im2
                    int
                    t2
                    (t2tb8 i1))))
                (= (int_iterate im2 op2 t2 i j) (infix_at
                                                  im2
                                                  im1
                                                  f
                                                  (int_iterate
                                                    im1
                                                    op1
                                                    t1
                                                    i
                                                    j)))))))))))

;; fc
(declare-fun fc12 (ty
  ty
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((im1 ty) (im2 ty))
    (forall ((x uni) (x1 uni))
      (sort (infix_mngt int im2) (fc12 im2 im1 x x1)))))

;; fc'def
(assert
  (forall ((im1 ty))
    (forall ((t uni) (f uni) (e Int))
      (= (select (tb2t7 (fc12 int im1 t f)) e) (tb2t8
                                                 (infix_at
                                                   int
                                                   im1
                                                   f
                                                   (infix_at
                                                     im1
                                                     int
                                                     t
                                                     (t2tb8 e))))))))

;; fc'def
(assert
  (forall ((t (Array Int circuit)) (f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (e Int))
    (= (tb2t3
         (infix_at
           (infix_mngt
             (infix_mngt int int)
             (infix_mngt (infix_mngt int int) (infix_mngt int int)))
           int
           (fc12
             (infix_mngt
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int)))
             circuit1
             (t2tb42 t)
             (t2tb2 f))
           (t2tb8 e))) (select f (tb2t13
                                   (infix_at
                                     circuit1
                                     int
                                     (t2tb42 t)
                                     (t2tb8 e)))))))

;; fc'def
(assert
  (forall ((t (Array Int (Array Int Int))) (f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (e Int))
    (= (tb2t5
         (infix_at
           (infix_mngt (infix_mngt int int) (infix_mngt int int))
           int
           (fc12
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (infix_mngt int int)
             (t2tb9 t)
             (t2tb3 f))
           (t2tb8 e))) (select f (tb2t7
                                   (infix_at
                                     (infix_mngt int int)
                                     int
                                     (t2tb9 t)
                                     (t2tb8 e)))))))

;; fc'def
(assert
  (forall ((t (Array Int (Array Int Int))) (f (Array (Array Int Int) (Array Int Int))) (e Int))
    (= (tb2t7
         (infix_at
           (infix_mngt int int)
           int
           (fc12
             (infix_mngt int int)
             (infix_mngt int int)
             (t2tb9 t)
             (t2tb5 f))
           (t2tb8 e))) (select f (tb2t7
                                   (infix_at
                                     (infix_mngt int int)
                                     int
                                     (t2tb9 t)
                                     (t2tb8 e)))))))

;; fc'def
(assert
  (forall ((t (Array Int Int)) (f (Array Int Int)) (e Int))
    (= (select (tb2t7 (fc12 int int (t2tb7 t) (t2tb7 f))) e) (select f (select t e)))))

;; fc'def
(assert
  (forall ((im2 ty))
    (forall ((t (Array Int Int)) (f uni) (e Int))
      (= (infix_at im2 int (fc12 im2 int (t2tb7 t) f) (t2tb8 e)) (infix_at
                                                                   im2
                                                                   int
                                                                   f
                                                                   (t2tb8
                                                                    (select t e)))))))

;; fc'def
(assert
  (forall ((im1 ty) (im2 ty))
    (forall ((t uni) (f uni) (e Int))
      (= (infix_at im2 int (fc12 im2 im1 t f) (t2tb8 e)) (infix_at
                                                           im2
                                                           im1
                                                           f
                                                           (infix_at
                                                             im1
                                                             int
                                                             t
                                                             (t2tb8 e)))))))

;; int_iterate_attr
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (op2 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (t uni) (f uni) (i Int) (j Int))
      (=>
        (forall ((x Int))
          (forall ((y uni))
            (=>
              (sort im1 y)
              (= (select (select op2 (tb2t7
                                       (infix_at
                                         (infix_mngt int int)
                                         im1
                                         f
                                         (infix_at im1 int t (t2tb8 x))))) 
              (tb2t7
                (infix_at (infix_mngt int int) im1 f y))) (tb2t7
                                                            (infix_at
                                                              (infix_mngt
                                                                int
                                                                int)
                                                              im1
                                                              f
                                                              (infix_at
                                                                im1
                                                                im1
                                                                (infix_at
                                                                  (infix_mngt
                                                                    im1
                                                                    im1)
                                                                  im1
                                                                  op1
                                                                  (infix_at
                                                                    im1
                                                                    int
                                                                    t
                                                                    (t2tb8 x)))
                                                                y)))))))
        (=>
          (= (tb2t7
               (infix_at (infix_mngt int int) im1 f (neutral_elt im1 op1))) 
          (tb2t7
            (neutral_elt (infix_mngt int int) (t2tb3 op2))))
          (=>
            (iterable im1 op1)
            (=>
              (iterable (infix_mngt int int) (t2tb3 op2))
              (= (tb2t7
                   (int_iterate
                     (infix_mngt int int)
                     (t2tb3 op2)
                     (fc12 (infix_mngt int int) im1 t f)
                     i
                     j)) (tb2t7
                           (infix_at
                             (infix_mngt int int)
                             im1
                             f
                             (int_iterate im1 op1 t i j)))))))))))

;; int_iterate_attr
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (op2 (Array Int (Array Int Int))) (t uni) (f uni) (i Int) (j Int))
      (=>
        (forall ((x Int))
          (forall ((y uni))
            (=>
              (sort im1 y)
              (= (select (tb2t7
                           (infix_at
                             (infix_mngt int int)
                             int
                             (t2tb9 op2)
                             (infix_at
                               int
                               im1
                               f
                               (infix_at im1 int t (t2tb8 x))))) (tb2t8
                                                                   (infix_at
                                                                    int
                                                                    im1
                                                                    f
                                                                    y))) 
              (tb2t8
                (infix_at
                  int
                  im1
                  f
                  (infix_at
                    im1
                    im1
                    (infix_at
                      (infix_mngt im1 im1)
                      im1
                      op1
                      (infix_at im1 int t (t2tb8 x)))
                    y)))))))
        (=>
          (= (tb2t8 (infix_at int im1 f (neutral_elt im1 op1))) (tb2t8
                                                                  (neutral_elt
                                                                    int
                                                                    (t2tb9
                                                                    op2))))
          (=>
            (iterable im1 op1)
            (=>
              (iterable int (t2tb9 op2))
              (= (tb2t8 (int_iterate int (t2tb9 op2) (fc12 int im1 t f) i j)) 
              (tb2t8
                (infix_at int im1 f (int_iterate im1 op1 t i j)))))))))))

;; int_iterate_attr
(assert
  (forall ((op1 (Array circuit (Array circuit circuit))) (op2 (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))) (t (Array Int circuit)) (f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (i Int) (j Int))
    (=>
      (forall ((x Int))
        (forall ((y circuit))
          (= (tb2t3
               (infix_at
                 (infix_mngt
                   (infix_mngt int int)
                   (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                 (infix_mngt
                   (infix_mngt int int)
                   (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                 (infix_at
                   (infix_mngt
                     (infix_mngt
                       (infix_mngt int int)
                       (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                     (infix_mngt
                       (infix_mngt int int)
                       (infix_mngt (infix_mngt int int) (infix_mngt int int))))
                   (infix_mngt
                     (infix_mngt int int)
                     (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                   (t2tb23 op2)
                   (t2tb3
                     (select f (tb2t13
                                 (infix_at circuit1 int (t2tb42 t) (t2tb8 x))))))
                 (t2tb3 (select f y)))) (select f (tb2t13
                                                    (infix_at
                                                      circuit1
                                                      circuit1
                                                      (infix_at
                                                        (infix_mngt
                                                          circuit1
                                                          circuit1)
                                                        circuit1
                                                        (t2tb43 op1)
                                                        (infix_at
                                                          circuit1
                                                          int
                                                          (t2tb42 t)
                                                          (t2tb8 x)))
                                                      (t2tb13 y)))))))
      (=>
        (= (select f (tb2t13 (neutral_elt circuit1 (t2tb43 op1)))) (tb2t3
                                                                    (neutral_elt
                                                                    (infix_mngt
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    (infix_mngt
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    (infix_mngt
                                                                    int
                                                                    int)))
                                                                    (t2tb23
                                                                    op2))))
        (=>
          (iterable circuit1 (t2tb43 op1))
          (=>
            (iterable
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              (t2tb23 op2))
            (= (tb2t3
                 (int_iterate
                   (infix_mngt
                     (infix_mngt int int)
                     (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                   (t2tb23 op2)
                   (fc12
                     (infix_mngt
                       (infix_mngt int int)
                       (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                     circuit1
                     (t2tb42 t)
                     (t2tb2 f))
                   i
                   j)) (select f (tb2t13
                                   (int_iterate
                                     circuit1
                                     (t2tb43 op1)
                                     (t2tb42 t)
                                     i
                                     j))))))))))

;; int_iterate_attr
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (op2 (Array (Array (Array Int Int) (Array Int Int)) (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int))))) (t (Array Int (Array Int Int))) (f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (i Int) (j Int))
    (=>
      (forall ((x Int))
        (forall ((y (Array Int Int)))
          (= (tb2t5
               (infix_at
                 (infix_mngt (infix_mngt int int) (infix_mngt int int))
                 (infix_mngt (infix_mngt int int) (infix_mngt int int))
                 (infix_at
                   (infix_mngt
                     (infix_mngt (infix_mngt int int) (infix_mngt int int))
                     (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                   (infix_mngt (infix_mngt int int) (infix_mngt int int))
                   (t2tb25 op2)
                   (t2tb5
                     (select f (tb2t7
                                 (infix_at
                                   (infix_mngt int int)
                                   int
                                   (t2tb9 t)
                                   (t2tb8 x))))))
                 (t2tb5 (select f y)))) (select f (select (select op1 
          (tb2t7
            (infix_at (infix_mngt int int) int (t2tb9 t) (t2tb8 x)))) y)))))
      (=>
        (= (select f (tb2t7 (neutral_elt (infix_mngt int int) (t2tb3 op1)))) 
        (tb2t5
          (neutral_elt
            (infix_mngt (infix_mngt int int) (infix_mngt int int))
            (t2tb25 op2))))
        (=>
          (iterable (infix_mngt int int) (t2tb3 op1))
          (=>
            (iterable
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (t2tb25 op2))
            (= (tb2t5
                 (int_iterate
                   (infix_mngt (infix_mngt int int) (infix_mngt int int))
                   (t2tb25 op2)
                   (fc12
                     (infix_mngt (infix_mngt int int) (infix_mngt int int))
                     (infix_mngt int int)
                     (t2tb9 t)
                     (t2tb3 f))
                   i
                   j)) (select f (tb2t7
                                   (int_iterate
                                     (infix_mngt int int)
                                     (t2tb3 op1)
                                     (t2tb9 t)
                                     i
                                     j))))))))))

;; int_iterate_attr
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (op2 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (t (Array Int (Array Int Int))) (f (Array (Array Int Int) (Array Int Int))) (i Int) (j Int))
    (=>
      (forall ((x Int))
        (forall ((y (Array Int Int)))
          (= (select (select op2 (select f (tb2t7
                                             (infix_at
                                               (infix_mngt int int)
                                               int
                                               (t2tb9 t)
                                               (t2tb8 x))))) (select f y)) (select f (select (select op1 
          (tb2t7
            (infix_at (infix_mngt int int) int (t2tb9 t) (t2tb8 x)))) y)))))
      (=>
        (= (select f (tb2t7 (neutral_elt (infix_mngt int int) (t2tb3 op1)))) 
        (tb2t7
          (neutral_elt (infix_mngt int int) (t2tb3 op2))))
        (=>
          (iterable (infix_mngt int int) (t2tb3 op1))
          (=>
            (iterable (infix_mngt int int) (t2tb3 op2))
            (= (tb2t7
                 (int_iterate
                   (infix_mngt int int)
                   (t2tb3 op2)
                   (fc12
                     (infix_mngt int int)
                     (infix_mngt int int)
                     (t2tb9 t)
                     (t2tb5 f))
                   i
                   j)) (select f (tb2t7
                                   (int_iterate
                                     (infix_mngt int int)
                                     (t2tb3 op1)
                                     (t2tb9 t)
                                     i
                                     j))))))))))

;; int_iterate_attr
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (op2 (Array Int (Array Int Int))) (t (Array Int (Array Int Int))) (f (Array (Array Int Int) Int)) (i Int) (j Int))
    (=>
      (forall ((x Int))
        (forall ((y (Array Int Int)))
          (= (select (tb2t7
                       (infix_at
                         (infix_mngt int int)
                         int
                         (t2tb9 op2)
                         (infix_at
                           int
                           (infix_mngt int int)
                           (t2tb39 f)
                           (infix_at
                             (infix_mngt int int)
                             int
                             (t2tb9 t)
                             (t2tb8 x))))) (tb2t8
                                             (infix_at
                                               int
                                               (infix_mngt int int)
                                               (t2tb39 f)
                                               (t2tb7 y)))) (tb2t8
                                                              (infix_at
                                                                int
                                                                (infix_mngt
                                                                  int
                                                                  int)
                                                                (t2tb39 f)
                                                                (t2tb7
                                                                  (select (select op1 
                                                                  (tb2t7
                                                                    (infix_at
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    int
                                                                    (t2tb9 t)
                                                                    (t2tb8 x)))) y)))))))
      (=>
        (= (tb2t8
             (infix_at
               int
               (infix_mngt int int)
               (t2tb39 f)
               (neutral_elt (infix_mngt int int) (t2tb3 op1)))) (tb2t8
                                                                  (neutral_elt
                                                                    int
                                                                    (t2tb9
                                                                    op2))))
        (=>
          (iterable (infix_mngt int int) (t2tb3 op1))
          (=>
            (iterable int (t2tb9 op2))
            (= (tb2t8
                 (int_iterate
                   int
                   (t2tb9 op2)
                   (fc12 int (infix_mngt int int) (t2tb9 t) (t2tb39 f))
                   i
                   j)) (tb2t8
                         (infix_at
                           int
                           (infix_mngt int int)
                           (t2tb39 f)
                           (int_iterate
                             (infix_mngt int int)
                             (t2tb3 op1)
                             (t2tb9 t)
                             i
                             j))))))))))

;; int_iterate_attr
(assert
  (forall ((im2 ty))
    (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (op2 uni) (t (Array Int (Array Int Int))) (f uni) (i Int) (j Int))
      (=>
        (forall ((x Int))
          (forall ((y (Array Int Int)))
            (= (infix_at
                 im2
                 im2
                 (infix_at
                   (infix_mngt im2 im2)
                   im2
                   op2
                   (infix_at
                     im2
                     (infix_mngt int int)
                     f
                     (infix_at (infix_mngt int int) int (t2tb9 t) (t2tb8 x))))
                 (infix_at im2 (infix_mngt int int) f (t2tb7 y))) (infix_at
                                                                    im2
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    f
                                                                    (t2tb7
                                                                    (select (select op1 
                                                                    (tb2t7
                                                                    (infix_at
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    int
                                                                    (t2tb9 t)
                                                                    (t2tb8 x)))) y))))))
        (=>
          (= (infix_at
               im2
               (infix_mngt int int)
               f
               (neutral_elt (infix_mngt int int) (t2tb3 op1))) (neutral_elt
                                                                 im2
                                                                 op2))
          (=>
            (iterable (infix_mngt int int) (t2tb3 op1))
            (=>
              (iterable im2 op2)
              (= (int_iterate
                   im2
                   op2
                   (fc12 im2 (infix_mngt int int) (t2tb9 t) f)
                   i
                   j) (infix_at
                        im2
                        (infix_mngt int int)
                        f
                        (int_iterate
                          (infix_mngt int int)
                          (t2tb3 op1)
                          (t2tb9 t)
                          i
                          j))))))))))

;; int_iterate_attr
(assert
  (forall ((op1 (Array Int (Array Int Int))) (op2 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (t (Array Int Int)) (f (Array Int (Array Int Int))) (i Int) (j Int))
    (=>
      (forall ((x Int))
        (forall ((y Int))
          (= (select (select op2 (tb2t7
                                   (infix_at
                                     (infix_mngt int int)
                                     int
                                     (t2tb9 f)
                                     (t2tb8 (select t x))))) (tb2t7
                                                               (infix_at
                                                                 (infix_mngt
                                                                   int
                                                                   int)
                                                                 int
                                                                 (t2tb9 f)
                                                                 (t2tb8 y)))) 
          (tb2t7
            (infix_at
              (infix_mngt int int)
              int
              (t2tb9 f)
              (t2tb8
                (select (tb2t7
                          (infix_at
                            (infix_mngt int int)
                            int
                            (t2tb9 op1)
                            (t2tb8 (select t x)))) y)))))))
      (=>
        (= (tb2t7
             (infix_at
               (infix_mngt int int)
               int
               (t2tb9 f)
               (neutral_elt int (t2tb9 op1)))) (tb2t7
                                                 (neutral_elt
                                                   (infix_mngt int int)
                                                   (t2tb3 op2))))
        (=>
          (iterable int (t2tb9 op1))
          (=>
            (iterable (infix_mngt int int) (t2tb3 op2))
            (= (tb2t7
                 (int_iterate
                   (infix_mngt int int)
                   (t2tb3 op2)
                   (fc12 (infix_mngt int int) int (t2tb7 t) (t2tb9 f))
                   i
                   j)) (tb2t7
                         (infix_at
                           (infix_mngt int int)
                           int
                           (t2tb9 f)
                           (int_iterate int (t2tb9 op1) (t2tb7 t) i j))))))))))

;; int_iterate_attr
(assert
  (forall ((op1 (Array Int (Array Int Int))) (op2 (Array Int (Array Int Int))) (t (Array Int Int)) (f (Array Int Int)) (i Int) (j Int))
    (=>
      (forall ((x Int))
        (forall ((y Int))
          (= (select (tb2t7
                       (infix_at
                         (infix_mngt int int)
                         int
                         (t2tb9 op2)
                         (t2tb8 (select f (select t x))))) (select f y)) (select f (select 
          (tb2t7
            (infix_at
              (infix_mngt int int)
              int
              (t2tb9 op1)
              (t2tb8 (select t x)))) y)))))
      (=>
        (= (select f (tb2t8 (neutral_elt int (t2tb9 op1)))) (tb2t8
                                                              (neutral_elt
                                                                int
                                                                (t2tb9 op2))))
        (=>
          (iterable int (t2tb9 op1))
          (=>
            (iterable int (t2tb9 op2))
            (= (tb2t8
                 (int_iterate
                   int
                   (t2tb9 op2)
                   (fc12 int int (t2tb7 t) (t2tb7 f))
                   i
                   j)) (select f (tb2t8
                                   (int_iterate
                                     int
                                     (t2tb9 op1)
                                     (t2tb7 t)
                                     i
                                     j))))))))))

;; int_iterate_attr
(assert
  (forall ((im2 ty))
    (forall ((op1 (Array Int (Array Int Int))) (op2 uni) (t (Array Int Int)) (f uni) (i Int) (j Int))
      (=>
        (forall ((x Int))
          (forall ((y Int))
            (= (infix_at
                 im2
                 im2
                 (infix_at
                   (infix_mngt im2 im2)
                   im2
                   op2
                   (infix_at im2 int f (t2tb8 (select t x))))
                 (infix_at im2 int f (t2tb8 y))) (infix_at
                                                   im2
                                                   int
                                                   f
                                                   (t2tb8
                                                     (select (tb2t7
                                                               (infix_at
                                                                 (infix_mngt
                                                                   int
                                                                   int)
                                                                 int
                                                                 (t2tb9 op1)
                                                                 (t2tb8
                                                                   (select t x)))) y))))))
        (=>
          (= (infix_at im2 int f (neutral_elt int (t2tb9 op1))) (neutral_elt
                                                                  im2
                                                                  op2))
          (=>
            (iterable int (t2tb9 op1))
            (=>
              (iterable im2 op2)
              (= (int_iterate im2 op2 (fc12 im2 int (t2tb7 t) f) i j) 
              (infix_at
                im2
                int
                f
                (int_iterate int (t2tb9 op1) (t2tb7 t) i j))))))))))

;; int_iterate_attr
(assert
  (forall ((im1 ty) (im2 ty))
    (forall ((op1 uni) (op2 uni) (t uni) (f uni) (i Int) (j Int))
      (=>
        (forall ((x Int))
          (forall ((y uni))
            (=>
              (sort im1 y)
              (= (infix_at
                   im2
                   im2
                   (infix_at
                     (infix_mngt im2 im2)
                     im2
                     op2
                     (infix_at im2 im1 f (infix_at im1 int t (t2tb8 x))))
                   (infix_at im2 im1 f y)) (infix_at
                                             im2
                                             im1
                                             f
                                             (infix_at
                                               im1
                                               im1
                                               (infix_at
                                                 (infix_mngt im1 im1)
                                                 im1
                                                 op1
                                                 (infix_at
                                                   im1
                                                   int
                                                   t
                                                   (t2tb8 x)))
                                               y))))))
        (=>
          (= (infix_at im2 im1 f (neutral_elt im1 op1)) (neutral_elt im2 op2))
          (=>
            (iterable im1 op1)
            (=>
              (iterable im2 op2)
              (= (int_iterate im2 op2 (fc12 im2 im1 t f) i j) (infix_at
                                                                im2
                                                                im1
                                                                f
                                                                (int_iterate
                                                                  im1
                                                                  op1
                                                                  t
                                                                  i
                                                                  j))))))))))

;; fc
(declare-fun fc13 (ty
  ty
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((im1 ty) (im2 ty))
    (forall ((x uni) (x1 uni))
      (sort (infix_mngt int im2) (fc13 im2 im1 x x1)))))

;; fc'def
(assert
  (forall ((im1 ty))
    (forall ((t uni) (f uni) (e Int))
      (= (select (tb2t7 (fc13 int im1 t f)) e) (tb2t8
                                                 (infix_at
                                                   int
                                                   im1
                                                   f
                                                   (infix_at
                                                     im1
                                                     int
                                                     t
                                                     (t2tb8 e))))))))

;; fc'def
(assert
  (forall ((t (Array Int circuit)) (f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (e Int))
    (= (tb2t3
         (infix_at
           (infix_mngt
             (infix_mngt int int)
             (infix_mngt (infix_mngt int int) (infix_mngt int int)))
           int
           (fc13
             (infix_mngt
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int)))
             circuit1
             (t2tb42 t)
             (t2tb2 f))
           (t2tb8 e))) (select f (tb2t13
                                   (infix_at
                                     circuit1
                                     int
                                     (t2tb42 t)
                                     (t2tb8 e)))))))

;; fc'def
(assert
  (forall ((t (Array Int (Array Int Int))) (f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (e Int))
    (= (tb2t5
         (infix_at
           (infix_mngt (infix_mngt int int) (infix_mngt int int))
           int
           (fc13
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (infix_mngt int int)
             (t2tb9 t)
             (t2tb3 f))
           (t2tb8 e))) (select f (tb2t7
                                   (infix_at
                                     (infix_mngt int int)
                                     int
                                     (t2tb9 t)
                                     (t2tb8 e)))))))

;; fc'def
(assert
  (forall ((t (Array Int (Array Int Int))) (f (Array (Array Int Int) (Array Int Int))) (e Int))
    (= (tb2t7
         (infix_at
           (infix_mngt int int)
           int
           (fc13
             (infix_mngt int int)
             (infix_mngt int int)
             (t2tb9 t)
             (t2tb5 f))
           (t2tb8 e))) (select f (tb2t7
                                   (infix_at
                                     (infix_mngt int int)
                                     int
                                     (t2tb9 t)
                                     (t2tb8 e)))))))

;; fc'def
(assert
  (forall ((t (Array Int Int)) (f (Array Int Int)) (e Int))
    (= (select (tb2t7 (fc13 int int (t2tb7 t) (t2tb7 f))) e) (select f (select t e)))))

;; fc'def
(assert
  (forall ((im2 ty))
    (forall ((t (Array Int Int)) (f uni) (e Int))
      (= (infix_at im2 int (fc13 im2 int (t2tb7 t) f) (t2tb8 e)) (infix_at
                                                                   im2
                                                                   int
                                                                   f
                                                                   (t2tb8
                                                                    (select t e)))))))

;; fc'def
(assert
  (forall ((im1 ty) (im2 ty))
    (forall ((t uni) (f uni) (e Int))
      (= (infix_at im2 int (fc13 im2 im1 t f) (t2tb8 e)) (infix_at
                                                           im2
                                                           im1
                                                           f
                                                           (infix_at
                                                             im1
                                                             int
                                                             t
                                                             (t2tb8 e)))))))

;; int_iterate_attr_comm
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (op2 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (t uni) (f uni) (i Int) (j Int))
      (=>
        (forall ((x Int))
          (forall ((y uni))
            (=>
              (sort im1 y)
              (= (select (select op2 (tb2t7
                                       (infix_at
                                         (infix_mngt int int)
                                         im1
                                         f
                                         (infix_at im1 int t (t2tb8 x))))) 
              (tb2t7
                (infix_at (infix_mngt int int) im1 f y))) (tb2t7
                                                            (infix_at
                                                              (infix_mngt
                                                                int
                                                                int)
                                                              im1
                                                              f
                                                              (infix_at
                                                                im1
                                                                im1
                                                                (infix_at
                                                                  (infix_mngt
                                                                    im1
                                                                    im1)
                                                                  im1
                                                                  op1
                                                                  (infix_at
                                                                    im1
                                                                    int
                                                                    t
                                                                    (t2tb8 x)))
                                                                y)))))))
        (=>
          (= (tb2t7
               (infix_at (infix_mngt int int) im1 f (neutral_elt im1 op1))) 
          (tb2t7
            (neutral_elt (infix_mngt int int) (t2tb3 op2))))
          (=>
            (iterable im1 op1)
            (=>
              (iterable (infix_mngt int int) (t2tb3 op2))
              (= (tb2t7
                   (infix_at
                     (infix_mngt int int)
                     im1
                     f
                     (int_iterate im1 op1 t i j))) (tb2t7
                                                     (int_iterate
                                                       (infix_mngt int int)
                                                       (t2tb3 op2)
                                                       (fc13
                                                         (infix_mngt int int)
                                                         im1
                                                         t
                                                         f)
                                                       i
                                                       j))))))))))

;; int_iterate_attr_comm
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (op2 (Array Int (Array Int Int))) (t uni) (f uni) (i Int) (j Int))
      (=>
        (forall ((x Int))
          (forall ((y uni))
            (=>
              (sort im1 y)
              (= (select (tb2t7
                           (infix_at
                             (infix_mngt int int)
                             int
                             (t2tb9 op2)
                             (infix_at
                               int
                               im1
                               f
                               (infix_at im1 int t (t2tb8 x))))) (tb2t8
                                                                   (infix_at
                                                                    int
                                                                    im1
                                                                    f
                                                                    y))) 
              (tb2t8
                (infix_at
                  int
                  im1
                  f
                  (infix_at
                    im1
                    im1
                    (infix_at
                      (infix_mngt im1 im1)
                      im1
                      op1
                      (infix_at im1 int t (t2tb8 x)))
                    y)))))))
        (=>
          (= (tb2t8 (infix_at int im1 f (neutral_elt im1 op1))) (tb2t8
                                                                  (neutral_elt
                                                                    int
                                                                    (t2tb9
                                                                    op2))))
          (=>
            (iterable im1 op1)
            (=>
              (iterable int (t2tb9 op2))
              (= (tb2t8 (infix_at int im1 f (int_iterate im1 op1 t i j))) 
              (tb2t8
                (int_iterate int (t2tb9 op2) (fc13 int im1 t f) i j))))))))))

;; int_iterate_attr_comm
(assert
  (forall ((op1 (Array circuit (Array circuit circuit))) (op2 (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))) (t (Array Int circuit)) (f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (i Int) (j Int))
    (=>
      (forall ((x Int))
        (forall ((y circuit))
          (= (tb2t3
               (infix_at
                 (infix_mngt
                   (infix_mngt int int)
                   (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                 (infix_mngt
                   (infix_mngt int int)
                   (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                 (infix_at
                   (infix_mngt
                     (infix_mngt
                       (infix_mngt int int)
                       (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                     (infix_mngt
                       (infix_mngt int int)
                       (infix_mngt (infix_mngt int int) (infix_mngt int int))))
                   (infix_mngt
                     (infix_mngt int int)
                     (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                   (t2tb23 op2)
                   (t2tb3
                     (select f (tb2t13
                                 (infix_at circuit1 int (t2tb42 t) (t2tb8 x))))))
                 (t2tb3 (select f y)))) (select f (tb2t13
                                                    (infix_at
                                                      circuit1
                                                      circuit1
                                                      (infix_at
                                                        (infix_mngt
                                                          circuit1
                                                          circuit1)
                                                        circuit1
                                                        (t2tb43 op1)
                                                        (infix_at
                                                          circuit1
                                                          int
                                                          (t2tb42 t)
                                                          (t2tb8 x)))
                                                      (t2tb13 y)))))))
      (=>
        (= (select f (tb2t13 (neutral_elt circuit1 (t2tb43 op1)))) (tb2t3
                                                                    (neutral_elt
                                                                    (infix_mngt
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    (infix_mngt
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    (infix_mngt
                                                                    int
                                                                    int)))
                                                                    (t2tb23
                                                                    op2))))
        (=>
          (iterable circuit1 (t2tb43 op1))
          (=>
            (iterable
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              (t2tb23 op2))
            (= (select f (tb2t13
                           (int_iterate circuit1 (t2tb43 op1) (t2tb42 t) i j))) 
            (tb2t3
              (int_iterate
                (infix_mngt
                  (infix_mngt int int)
                  (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                (t2tb23 op2)
                (fc13
                  (infix_mngt
                    (infix_mngt int int)
                    (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                  circuit1
                  (t2tb42 t)
                  (t2tb2 f))
                i
                j)))))))))

;; int_iterate_attr_comm
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (op2 (Array (Array (Array Int Int) (Array Int Int)) (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int))))) (t (Array Int (Array Int Int))) (f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (i Int) (j Int))
    (=>
      (forall ((x Int))
        (forall ((y (Array Int Int)))
          (= (tb2t5
               (infix_at
                 (infix_mngt (infix_mngt int int) (infix_mngt int int))
                 (infix_mngt (infix_mngt int int) (infix_mngt int int))
                 (infix_at
                   (infix_mngt
                     (infix_mngt (infix_mngt int int) (infix_mngt int int))
                     (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                   (infix_mngt (infix_mngt int int) (infix_mngt int int))
                   (t2tb25 op2)
                   (t2tb5
                     (select f (tb2t7
                                 (infix_at
                                   (infix_mngt int int)
                                   int
                                   (t2tb9 t)
                                   (t2tb8 x))))))
                 (t2tb5 (select f y)))) (select f (select (select op1 
          (tb2t7
            (infix_at (infix_mngt int int) int (t2tb9 t) (t2tb8 x)))) y)))))
      (=>
        (= (select f (tb2t7 (neutral_elt (infix_mngt int int) (t2tb3 op1)))) 
        (tb2t5
          (neutral_elt
            (infix_mngt (infix_mngt int int) (infix_mngt int int))
            (t2tb25 op2))))
        (=>
          (iterable (infix_mngt int int) (t2tb3 op1))
          (=>
            (iterable
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (t2tb25 op2))
            (= (select f (tb2t7
                           (int_iterate
                             (infix_mngt int int)
                             (t2tb3 op1)
                             (t2tb9 t)
                             i
                             j))) (tb2t5
                                    (int_iterate
                                      (infix_mngt
                                        (infix_mngt int int)
                                        (infix_mngt int int))
                                      (t2tb25 op2)
                                      (fc13
                                        (infix_mngt
                                          (infix_mngt int int)
                                          (infix_mngt int int))
                                        (infix_mngt int int)
                                        (t2tb9 t)
                                        (t2tb3 f))
                                      i
                                      j)))))))))

;; int_iterate_attr_comm
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (op2 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (t (Array Int (Array Int Int))) (f (Array (Array Int Int) (Array Int Int))) (i Int) (j Int))
    (=>
      (forall ((x Int))
        (forall ((y (Array Int Int)))
          (= (select (select op2 (select f (tb2t7
                                             (infix_at
                                               (infix_mngt int int)
                                               int
                                               (t2tb9 t)
                                               (t2tb8 x))))) (select f y)) (select f (select (select op1 
          (tb2t7
            (infix_at (infix_mngt int int) int (t2tb9 t) (t2tb8 x)))) y)))))
      (=>
        (= (select f (tb2t7 (neutral_elt (infix_mngt int int) (t2tb3 op1)))) 
        (tb2t7
          (neutral_elt (infix_mngt int int) (t2tb3 op2))))
        (=>
          (iterable (infix_mngt int int) (t2tb3 op1))
          (=>
            (iterable (infix_mngt int int) (t2tb3 op2))
            (= (select f (tb2t7
                           (int_iterate
                             (infix_mngt int int)
                             (t2tb3 op1)
                             (t2tb9 t)
                             i
                             j))) (tb2t7
                                    (int_iterate
                                      (infix_mngt int int)
                                      (t2tb3 op2)
                                      (fc13
                                        (infix_mngt int int)
                                        (infix_mngt int int)
                                        (t2tb9 t)
                                        (t2tb5 f))
                                      i
                                      j)))))))))

;; int_iterate_attr_comm
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (op2 (Array Int (Array Int Int))) (t (Array Int (Array Int Int))) (f (Array (Array Int Int) Int)) (i Int) (j Int))
    (=>
      (forall ((x Int))
        (forall ((y (Array Int Int)))
          (= (select (tb2t7
                       (infix_at
                         (infix_mngt int int)
                         int
                         (t2tb9 op2)
                         (infix_at
                           int
                           (infix_mngt int int)
                           (t2tb39 f)
                           (infix_at
                             (infix_mngt int int)
                             int
                             (t2tb9 t)
                             (t2tb8 x))))) (tb2t8
                                             (infix_at
                                               int
                                               (infix_mngt int int)
                                               (t2tb39 f)
                                               (t2tb7 y)))) (tb2t8
                                                              (infix_at
                                                                int
                                                                (infix_mngt
                                                                  int
                                                                  int)
                                                                (t2tb39 f)
                                                                (t2tb7
                                                                  (select (select op1 
                                                                  (tb2t7
                                                                    (infix_at
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    int
                                                                    (t2tb9 t)
                                                                    (t2tb8 x)))) y)))))))
      (=>
        (= (tb2t8
             (infix_at
               int
               (infix_mngt int int)
               (t2tb39 f)
               (neutral_elt (infix_mngt int int) (t2tb3 op1)))) (tb2t8
                                                                  (neutral_elt
                                                                    int
                                                                    (t2tb9
                                                                    op2))))
        (=>
          (iterable (infix_mngt int int) (t2tb3 op1))
          (=>
            (iterable int (t2tb9 op2))
            (= (tb2t8
                 (infix_at
                   int
                   (infix_mngt int int)
                   (t2tb39 f)
                   (int_iterate
                     (infix_mngt int int)
                     (t2tb3 op1)
                     (t2tb9 t)
                     i
                     j))) (tb2t8
                            (int_iterate
                              int
                              (t2tb9 op2)
                              (fc13
                                int
                                (infix_mngt int int)
                                (t2tb9 t)
                                (t2tb39 f))
                              i
                              j)))))))))

;; int_iterate_attr_comm
(assert
  (forall ((im2 ty))
    (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (op2 uni) (t (Array Int (Array Int Int))) (f uni) (i Int) (j Int))
      (=>
        (forall ((x Int))
          (forall ((y (Array Int Int)))
            (= (infix_at
                 im2
                 im2
                 (infix_at
                   (infix_mngt im2 im2)
                   im2
                   op2
                   (infix_at
                     im2
                     (infix_mngt int int)
                     f
                     (infix_at (infix_mngt int int) int (t2tb9 t) (t2tb8 x))))
                 (infix_at im2 (infix_mngt int int) f (t2tb7 y))) (infix_at
                                                                    im2
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    f
                                                                    (t2tb7
                                                                    (select (select op1 
                                                                    (tb2t7
                                                                    (infix_at
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    int
                                                                    (t2tb9 t)
                                                                    (t2tb8 x)))) y))))))
        (=>
          (= (infix_at
               im2
               (infix_mngt int int)
               f
               (neutral_elt (infix_mngt int int) (t2tb3 op1))) (neutral_elt
                                                                 im2
                                                                 op2))
          (=>
            (iterable (infix_mngt int int) (t2tb3 op1))
            (=>
              (iterable im2 op2)
              (= (infix_at
                   im2
                   (infix_mngt int int)
                   f
                   (int_iterate
                     (infix_mngt int int)
                     (t2tb3 op1)
                     (t2tb9 t)
                     i
                     j)) (int_iterate
                           im2
                           op2
                           (fc13 im2 (infix_mngt int int) (t2tb9 t) f)
                           i
                           j)))))))))

;; int_iterate_attr_comm
(assert
  (forall ((op1 (Array Int (Array Int Int))) (op2 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (t (Array Int Int)) (f (Array Int (Array Int Int))) (i Int) (j Int))
    (=>
      (forall ((x Int))
        (forall ((y Int))
          (= (select (select op2 (tb2t7
                                   (infix_at
                                     (infix_mngt int int)
                                     int
                                     (t2tb9 f)
                                     (t2tb8 (select t x))))) (tb2t7
                                                               (infix_at
                                                                 (infix_mngt
                                                                   int
                                                                   int)
                                                                 int
                                                                 (t2tb9 f)
                                                                 (t2tb8 y)))) 
          (tb2t7
            (infix_at
              (infix_mngt int int)
              int
              (t2tb9 f)
              (t2tb8
                (select (tb2t7
                          (infix_at
                            (infix_mngt int int)
                            int
                            (t2tb9 op1)
                            (t2tb8 (select t x)))) y)))))))
      (=>
        (= (tb2t7
             (infix_at
               (infix_mngt int int)
               int
               (t2tb9 f)
               (neutral_elt int (t2tb9 op1)))) (tb2t7
                                                 (neutral_elt
                                                   (infix_mngt int int)
                                                   (t2tb3 op2))))
        (=>
          (iterable int (t2tb9 op1))
          (=>
            (iterable (infix_mngt int int) (t2tb3 op2))
            (= (tb2t7
                 (infix_at
                   (infix_mngt int int)
                   int
                   (t2tb9 f)
                   (int_iterate int (t2tb9 op1) (t2tb7 t) i j))) (tb2t7
                                                                   (int_iterate
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    (t2tb3
                                                                    op2)
                                                                    (fc13
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    int
                                                                    (t2tb7 t)
                                                                    (t2tb9 f))
                                                                    i
                                                                    j)))))))))

;; int_iterate_attr_comm
(assert
  (forall ((op1 (Array Int (Array Int Int))) (op2 (Array Int (Array Int Int))) (t (Array Int Int)) (f (Array Int Int)) (i Int) (j Int))
    (=>
      (forall ((x Int))
        (forall ((y Int))
          (= (select (tb2t7
                       (infix_at
                         (infix_mngt int int)
                         int
                         (t2tb9 op2)
                         (t2tb8 (select f (select t x))))) (select f y)) (select f (select 
          (tb2t7
            (infix_at
              (infix_mngt int int)
              int
              (t2tb9 op1)
              (t2tb8 (select t x)))) y)))))
      (=>
        (= (select f (tb2t8 (neutral_elt int (t2tb9 op1)))) (tb2t8
                                                              (neutral_elt
                                                                int
                                                                (t2tb9 op2))))
        (=>
          (iterable int (t2tb9 op1))
          (=>
            (iterable int (t2tb9 op2))
            (= (select f (tb2t8 (int_iterate int (t2tb9 op1) (t2tb7 t) i j))) 
            (tb2t8
              (int_iterate
                int
                (t2tb9 op2)
                (fc13 int int (t2tb7 t) (t2tb7 f))
                i
                j)))))))))

;; int_iterate_attr_comm
(assert
  (forall ((im2 ty))
    (forall ((op1 (Array Int (Array Int Int))) (op2 uni) (t (Array Int Int)) (f uni) (i Int) (j Int))
      (=>
        (forall ((x Int))
          (forall ((y Int))
            (= (infix_at
                 im2
                 im2
                 (infix_at
                   (infix_mngt im2 im2)
                   im2
                   op2
                   (infix_at im2 int f (t2tb8 (select t x))))
                 (infix_at im2 int f (t2tb8 y))) (infix_at
                                                   im2
                                                   int
                                                   f
                                                   (t2tb8
                                                     (select (tb2t7
                                                               (infix_at
                                                                 (infix_mngt
                                                                   int
                                                                   int)
                                                                 int
                                                                 (t2tb9 op1)
                                                                 (t2tb8
                                                                   (select t x)))) y))))))
        (=>
          (= (infix_at im2 int f (neutral_elt int (t2tb9 op1))) (neutral_elt
                                                                  im2
                                                                  op2))
          (=>
            (iterable int (t2tb9 op1))
            (=>
              (iterable im2 op2)
              (= (infix_at
                   im2
                   int
                   f
                   (int_iterate int (t2tb9 op1) (t2tb7 t) i j)) (int_iterate
                                                                  im2
                                                                  op2
                                                                  (fc13
                                                                    im2
                                                                    int
                                                                    (t2tb7 t)
                                                                    f)
                                                                  i
                                                                  j)))))))))

;; int_iterate_attr_comm
(assert
  (forall ((im1 ty) (im2 ty))
    (forall ((op1 uni) (op2 uni) (t uni) (f uni) (i Int) (j Int))
      (=>
        (forall ((x Int))
          (forall ((y uni))
            (=>
              (sort im1 y)
              (= (infix_at
                   im2
                   im2
                   (infix_at
                     (infix_mngt im2 im2)
                     im2
                     op2
                     (infix_at im2 im1 f (infix_at im1 int t (t2tb8 x))))
                   (infix_at im2 im1 f y)) (infix_at
                                             im2
                                             im1
                                             f
                                             (infix_at
                                               im1
                                               im1
                                               (infix_at
                                                 (infix_mngt im1 im1)
                                                 im1
                                                 op1
                                                 (infix_at
                                                   im1
                                                   int
                                                   t
                                                   (t2tb8 x)))
                                               y))))))
        (=>
          (= (infix_at im2 im1 f (neutral_elt im1 op1)) (neutral_elt im2 op2))
          (=>
            (iterable im1 op1)
            (=>
              (iterable im2 op2)
              (= (infix_at im2 im1 f (int_iterate im1 op1 t i j)) (int_iterate
                                                                    im2
                                                                    op2
                                                                    (fc13
                                                                    im2
                                                                    im1
                                                                    t
                                                                    f)
                                                                    i
                                                                    j)))))))))

;; int_iterate_eq
(assert
  (forall ((op1 (Array Int (Array Int Int))) (f (Array Int Int)) (g (Array Int Int)) (i Int) (j Int))
    (=>
      (forall ((k Int))
        (=> (and (<= i k) (< k j)) (= (select f k) (select g k))))
      (=>
        (=> (<= j i) (iterable int (t2tb9 op1)))
        (= (tb2t8 (int_iterate int (t2tb9 op1) (t2tb7 f) i j)) (tb2t8
                                                                 (int_iterate
                                                                   int
                                                                   (t2tb9
                                                                    op1)
                                                                   (t2tb7 g)
                                                                   i
                                                                   j)))))))

;; int_iterate_eq
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (f uni) (g uni) (i Int) (j Int))
      (=>
        (forall ((k Int))
          (=>
            (and (<= i k) (< k j))
            (= (infix_at im1 int f (t2tb8 k)) (infix_at im1 int g (t2tb8 k)))))
        (=>
          (=> (<= j i) (iterable im1 op1))
          (= (int_iterate im1 op1 f i j) (int_iterate im1 op1 g i j)))))))

;; fc
(declare-fun fc14 (ty
  uni
  Int
  Int) uni)

;; fc_sort
(assert
  (forall ((im1 ty))
    (forall ((x uni) (x1 Int) (x2 Int))
      (sort (infix_mngt int im1) (fc14 im1 x x1 x2)))))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (l Int) (h Int) (a Int))
    (= (select (tb2t7 (fc14 int (t2tb7 f) l h)) a) (select f (+ (- h (+ a 1)) l)))))

;; fc'def
(assert
  (forall ((im1 ty))
    (forall ((f uni) (l Int) (h Int) (a Int))
      (= (infix_at im1 int (fc14 im1 f l h) (t2tb8 a)) (infix_at
                                                         im1
                                                         int
                                                         f
                                                         (t2tb8
                                                           (+ (- h (+ a 1)) l)))))))

;; int_iterate_left_right
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (f uni) (l Int) (k Int) (h Int))
      (=>
        (iterable im1 op1)
        (=>
          (commut im1 op1)
          (=>
            (and (<= l k) (<= k h))
            (= (int_iterate im1 op1 f l k) (int_iterate
                                             im1
                                             op1
                                             (fc14 im1 f l h)
                                             (+ (- h k) l)
                                             h))))))))

;; int_iterate_eq_func
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (i Int) (j Int) (f uni) (g uni))
      (=>
        (iterable im1 op1)
        (=>
          (commut im1 op1)
          (=>
            (p_injective im1 int f (t2tb16 (to_fset i j)))
            (=>
              (p_injective im1 int g (t2tb16 (to_fset i j)))
              (=>
                (= (map1 im1 int f (t2tb16 (to_fset i j))) (map1
                                                             im1
                                                             int
                                                             g
                                                             (t2tb16
                                                               (to_fset i j))))
                (= (int_iterate im1 op1 f i j) (int_iterate im1 op1 g i j))))))))))

;; fc
(declare-fun fc15 (ty
  (Array Int Int)
  uni) uni)

;; fc_sort
(assert
  (forall ((im1 ty))
    (forall ((x (Array Int Int)) (x1 uni))
      (sort (infix_mngt int im1) (fc15 im1 x x1)))))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (t (Array Int Int)) (b Int))
    (= (select (tb2t7 (fc15 int f (t2tb7 t))) b) (select t (select f b)))))

;; fc'def
(assert
  (forall ((im1 ty))
    (forall ((f (Array Int Int)) (t uni) (b Int))
      (= (infix_at im1 int (fc15 im1 f t) (t2tb8 b)) (infix_at
                                                       im1
                                                       int
                                                       t
                                                       (t2tb8 (select f b)))))))

;; int_iterate_map
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (i Int) (j Int) (k Int) (l Int) (f (Array Int Int)) (t uni))
      (=>
        (=> (<= j i) (iterable im1 op1))
        (=>
          (commut im1 op1)
          (=>
            (p_bijective1 f (to_fset i j) (to_fset k l))
            (= (int_iterate im1 op1 t k l) (int_iterate
                                             im1
                                             op1
                                             (fc15 im1 f t)
                                             i
                                             j))))))))

;; fc
(declare-fun fc16 (ty
  uni
  Int) uni)

;; fc_sort
(assert
  (forall ((im1 ty))
    (forall ((x uni) (x1 Int)) (sort (infix_mngt int im1) (fc16 im1 x x1)))))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (k Int) (b Int))
    (= (select (tb2t7 (fc16 int (t2tb7 f) k)) b) (select f (+ b k)))))

;; fc'def
(assert
  (forall ((im1 ty))
    (forall ((f uni) (k Int) (b Int))
      (= (infix_at im1 int (fc16 im1 f k) (t2tb8 b)) (infix_at
                                                       im1
                                                       int
                                                       f
                                                       (t2tb8 (+ b k)))))))

;; int_iterate_transl
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (f uni) (i Int) (j Int) (k Int))
      (=>
        (iterable im1 op1)
        (= (int_iterate im1 op1 f i j) (int_iterate
                                         im1
                                         op1
                                         (fc16 im1 f k)
                                         (- i k)
                                         (- j k)))))))

;; fc
(declare-fun fc17 (ty
  (Array Int Int)
  uni) uni)

;; fc_sort
(assert
  (forall ((im1 ty))
    (forall ((x (Array Int Int)) (x1 uni))
      (sort (infix_mngt int im1) (fc17 im1 x x1)))))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (t (Array Int Int)) (b Int))
    (= (select (tb2t7 (fc17 int f (t2tb7 t))) b) (select t (select f b)))))

;; fc'def
(assert
  (forall ((im1 ty))
    (forall ((f (Array Int Int)) (t uni) (b Int))
      (= (infix_at im1 int (fc17 im1 f t) (t2tb8 b)) (infix_at
                                                       im1
                                                       int
                                                       t
                                                       (t2tb8 (select f b)))))))

;; int_iterate_map_auto
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (i Int) (j Int) (f (Array Int Int)) (t uni))
      (=>
        (=> (<= j i) (iterable im1 op1))
        (=>
          (commut im1 op1)
          (=>
            (p_bijective1 f (to_fset i j) (to_fset i j))
            (= (int_iterate im1 op1 t i j) (int_iterate
                                             im1
                                             op1
                                             (fc17 im1 f t)
                                             i
                                             j))))))))

;; leq_trans
(assert
  (forall ((a Int) (b Int) (c Int)) (=> (<= a b) (=> (<= b c) (<= a c)))))

;; inf_trans
(assert (forall ((a Int) (b Int) (c Int)) (=> (< a b) (=> (< b c) (< a c)))))

;; leq_trans_add
(assert
  (forall ((a Int) (b Int) (c Int) (d Int))
    (=> (<= a c) (=> (<= b d) (<= (+ a b) (+ c d))))))

;; leq_trans_mult
(assert
  (forall ((a Int) (b Int) (c Int))
    (=> (<= 0 c) (=> (<= a b) (<= (* a c) (* b c))))))

;; leq_trans_mult_right
(assert
  (forall ((a Int) (b Int) (c Int))
    (=> (<= 0 c) (=> (<= a b) (<= (* c a) (* c b))))))

;; compat_int_order_mult
(assert
  (forall ((a Int) (b Int) (c Int) (d Int))
    (=>
      (and (<= 0 c) (<= c d))
      (=> (and (<= 0 a) (<= a b)) (<= (* c a) (* d b))))))

;; leq_trans_fact
(assert
  (forall ((a Int) (b Int) (c Int) (n Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 a) (<= a c))
        (=> (and (<= 0 b) (<= b (* c n))) (<= (+ a b) (* c (+ n 1))))))))

;; leq_trans_facrev
(assert
  (forall ((a Int) (b Int) (c Int) (n Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 a) (<= a c))
        (=> (and (<= 0 b) (<= b (* c n))) (<= (+ b a) (* c (+ n 1))))))))

;; infix +_closure
(declare-fun infix_pl_closure () (Array Int (Array Int Int)))

;; infix *_closure
(declare-fun infix_as_closure () (Array Int (Array Int Int)))

;; infix +_closure_def
(assert
  (forall ((y Int) (y1 Int))
    (= (select (tb2t7
                 (infix_at
                   (infix_mngt int int)
                   int
                   (t2tb9 infix_pl_closure)
                   (t2tb8 y))) y1) (+ y y1))))

;; infix *_closure_def
(assert
  (forall ((y Int) (y1 Int))
    (= (select (tb2t7
                 (infix_at
                   (infix_mngt int int)
                   int
                   (t2tb9 infix_as_closure)
                   (t2tb8 y))) y1) (* y y1))))

;; neutrals
(assert
  (and
    (= 0 (tb2t8 (neutral_elt int (t2tb9 infix_pl_closure))))
    (and
      (= 1 (tb2t8 (neutral_elt int (t2tb9 infix_as_closure))))
      (and
        (iterable int (t2tb9 infix_pl_closure))
        (iterable int (t2tb9 infix_as_closure))))))

;; isum
(declare-fun isum (ty
  uni
  uni) Int)

;; isum'def
(assert
  (forall ((a ty))
    (forall ((s uni) (t uni))
      (= (isum a s t) (tb2t8 (iterate int a (t2tb9 infix_pl_closure) s t))))))

;; iproduct
(declare-fun iproduct (ty
  uni
  uni) Int)

;; iproduct'def
(assert
  (forall ((a ty))
    (forall ((s uni) (t uni))
      (= (iproduct a s t) (tb2t8
                            (iterate int a (t2tb9 infix_as_closure) s t))))))

;; isum_iter
(assert (iterates int (t2tb9 infix_pl_closure) (t2tb8 0)))

;; isum_iter__
(assert (iterable int (t2tb9 infix_pl_closure)))

;; isum_eq
(assert
  (forall ((s (set Int)) (t (Array Int Int)) (tqt (Array Int Int)))
    (=>
      (forall ((e Int))
        (=> (mem int (t2tb8 e) (t2tb16 s)) (= (select t e) (select tqt e))))
      (= (isum int (t2tb16 s) (t2tb7 t)) (isum int (t2tb16 s) (t2tb7 tqt))))))

;; isum_eq
(assert
  (forall ((a ty))
    (forall ((s uni) (t uni) (tqt uni))
      (=>
        (forall ((e uni))
          (=>
            (sort a e)
            (=>
              (mem a e s)
              (= (tb2t8 (infix_at int a t e)) (tb2t8 (infix_at int a tqt e))))))
        (= (isum a s t) (isum a s tqt))))))

;; isum_eq_gen
(assert
  (forall ((s (set Int)) (sqt (set Int)) (t (Array Int Int)) (tqt (Array Int Int)))
    (=>
      (= s sqt)
      (=>
        (forall ((e Int))
          (=> (mem int (t2tb8 e) (t2tb16 s)) (= (select t e) (select tqt e))))
        (= (isum int (t2tb16 s) (t2tb7 t)) (isum int (t2tb16 s) (t2tb7 tqt)))))))

;; isum_eq_gen
(assert
  (forall ((a ty))
    (forall ((s uni) (sqt uni) (t uni) (tqt uni))
      (=>
        (= s sqt)
        (=>
          (forall ((e uni))
            (=>
              (sort a e)
              (=>
                (mem a e s)
                (= (tb2t8 (infix_at int a t e)) (tb2t8
                                                  (infix_at int a tqt e))))))
          (= (isum a s t) (isum a s tqt)))))))

;; isum_add
(assert
  (forall ((s (set Int)) (f (Array Int Int)) (x Int))
    (=>
      (not (mem int (t2tb8 x) (t2tb16 s)))
      (= (isum int (add int (t2tb8 x) (t2tb16 s)) (t2tb7 f)) (+ (select f x) 
      (isum
        int
        (t2tb16 s)
        (t2tb7 f)))))))

;; isum_add
(assert
  (forall ((b ty))
    (forall ((s uni) (f uni) (x uni))
      (=>
        (not (mem b x s))
        (= (isum b (add b x s) f) (+ (tb2t8 (infix_at int b f x)) (isum
                                                                    b
                                                                    s
                                                                    f)))))))

;; iproduct_eq
(assert
  (forall ((s (set Int)) (t (Array Int Int)) (tqt (Array Int Int)))
    (=>
      (forall ((e Int))
        (=> (mem int (t2tb8 e) (t2tb16 s)) (= (select t e) (select tqt e))))
      (= (iproduct int (t2tb16 s) (t2tb7 t)) (iproduct
                                               int
                                               (t2tb16 s)
                                               (t2tb7 tqt))))))

;; iproduct_eq
(assert
  (forall ((a ty))
    (forall ((s uni) (t uni) (tqt uni))
      (=>
        (forall ((e uni))
          (=>
            (sort a e)
            (=>
              (mem a e s)
              (= (tb2t8 (infix_at int a t e)) (tb2t8 (infix_at int a tqt e))))))
        (= (iproduct a s t) (iproduct a s tqt))))))

;; iproduct_eq_gen
(assert
  (forall ((s (set Int)) (sqt (set Int)) (t (Array Int Int)) (tqt (Array Int Int)))
    (=>
      (= s sqt)
      (=>
        (forall ((e Int))
          (=> (mem int (t2tb8 e) (t2tb16 s)) (= (select t e) (select tqt e))))
        (= (iproduct int (t2tb16 s) (t2tb7 t)) (iproduct
                                                 int
                                                 (t2tb16 s)
                                                 (t2tb7 tqt)))))))

;; iproduct_eq_gen
(assert
  (forall ((a ty))
    (forall ((s uni) (sqt uni) (t uni) (tqt uni))
      (=>
        (= s sqt)
        (=>
          (forall ((e uni))
            (=>
              (sort a e)
              (=>
                (mem a e s)
                (= (tb2t8 (infix_at int a t e)) (tb2t8
                                                  (infix_at int a tqt e))))))
          (= (iproduct a s t) (iproduct a s tqt)))))))

;; iproduct_add
(assert
  (forall ((s (set Int)) (f (Array Int Int)) (x Int))
    (=>
      (not (mem int (t2tb8 x) (t2tb16 s)))
      (= (iproduct int (add int (t2tb8 x) (t2tb16 s)) (t2tb7 f)) (* (select f x) 
      (iproduct
        int
        (t2tb16 s)
        (t2tb7 f)))))))

;; iproduct_add
(assert
  (forall ((b ty))
    (forall ((s uni) (f uni) (x uni))
      (=>
        (not (mem b x s))
        (= (iproduct b (add b x s) f) (* (tb2t8 (infix_at int b f x)) 
        (iproduct
          b
          s
          f)))))))

;; iproduct_from_choose
(assert
  (forall ((s (set Int)) (f (Array Int Int)))
    (=>
      (< 0 (cardinal int (t2tb16 s)))
      (= (iproduct int (t2tb16 s) (t2tb7 f)) (* (select f (tb2t8
                                                            (choose1
                                                              int
                                                              (t2tb16 s)))) 
      (iproduct
        int
        (remove int (choose1 int (t2tb16 s)) (t2tb16 s))
        (t2tb7 f)))))))

;; iproduct_from_choose
(assert
  (forall ((b ty))
    (forall ((s uni) (f uni))
      (=>
        (< 0 (cardinal b s))
        (= (iproduct b s f) (* (tb2t8 (infix_at int b f (choose1 b s))) 
        (iproduct
          b
          (remove b (choose1 b s) s)
          f)))))))

;; fc
(declare-fun fc18 ((Array Int Int)
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (t (Array Int Int)) (b Int))
    (= (select (fc18 f t) b) (select t (select f b)))))

;; iproduct_map
(assert
  (forall ((s (set Int)) (f (Array Int Int)) (t (Array Int Int)))
    (=>
      (p_injective int int (t2tb7 f) (t2tb16 s))
      (= (iproduct int (map1 int int (t2tb7 f) (t2tb16 s)) (t2tb7 t)) 
      (iproduct
        int
        (t2tb16 s)
        (t2tb7 (fc18 f t)))))))

;; fc
(declare-fun fc19 ((Array Int Int)
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (t (Array Int Int)) (b Int))
    (= (select (fc19 f t) b) (select t (select f b)))))

;; iproduct_map_auto
(assert
  (forall ((s (set Int)) (f (Array Int Int)) (t (Array Int Int)))
    (=>
      (p_bijective1 f s s)
      (= (iproduct int (t2tb16 s) (t2tb7 t)) (iproduct
                                               int
                                               (t2tb16 s)
                                               (t2tb7 (fc19 f t)))))))

;; iproduct_one
(assert
  (forall ((s (set Int)) (f (Array Int Int)))
    (=>
      (forall ((e Int))
        (=> (mem int (t2tb8 e) (t2tb16 s)) (= (select f e) 1)))
      (= (iproduct int (t2tb16 s) (t2tb7 f)) 1))))

;; iproduct_one
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni))
      (=>
        (forall ((e uni))
          (=> (sort a e) (=> (mem a e s) (= (tb2t8 (infix_at int a f e)) 1))))
        (= (iproduct a s f) 1)))))

;; iproduct_one_but_maybe_one_elt
(assert
  (forall ((s (set Int)) (f (Array Int Int)) (e Int))
    (=>
      (mem int (t2tb8 e) (t2tb16 s))
      (=>
        (forall ((eqt Int))
          (=>
            (mem int (t2tb8 eqt) (t2tb16 s))
            (=> (not (= eqt e)) (= (select f eqt) 1))))
        (and
          (= (iproduct int (t2tb16 s) (t2tb7 f)) (select f e))
          (= (iproduct int (t2tb16 s) (t2tb7 f)) (* (select f (tb2t8
                                                                (choose1
                                                                  int
                                                                  (t2tb16 s)))) 
          (iproduct
            int
            (remove int (choose1 int (t2tb16 s)) (t2tb16 s))
            (t2tb7 f)))))))))

;; iproduct_one_but_maybe_one_elt
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (e uni))
      (=>
        (mem a e s)
        (=>
          (forall ((eqt uni))
            (=>
              (sort a eqt)
              (=>
                (mem a eqt s)
                (=> (not (= eqt e)) (= (tb2t8 (infix_at int a f eqt)) 1)))))
          (and
            (= (iproduct a s f) (tb2t8 (infix_at int a f e)))
            (= (iproduct a s f) (* (tb2t8 (infix_at int a f (choose1 a s))) 
            (iproduct
              a
              (remove a (choose1 a s) s)
              f)))))))))

;; mul_assoc
(assert (forall ((a Int) (b Int) (c Int)) (= (* (* a b) c) (* a (* b c)))))

;; ad_assoc
(assert (forall ((a Int) (b Int) (c Int)) (= (+ (+ a b) c) (+ a (+ b c)))))

;; ad_assoc_rev
(assert (forall ((a Int) (b Int) (c Int)) (= (+ a (+ b c)) (+ (+ a b) c))))

;; ad_seq_switch
(assert
  (forall ((a Int) (b Int) (c Int) (aqt Int) (bqt Int) (cqt Int))
    (=>
      (= a aqt)
      (=> (= b bqt) (=> (= c cqt) (= (+ aqt (+ bqt cqt)) (+ b (+ c a))))))))

;; mul_comm
(assert (forall ((a Int) (b Int)) (= (* a b) (* b a))))

;; add_eq_i
(assert
  (forall ((a Int) (aqt Int) (b Int) (bqt Int))
    (=> (= a aqt) (=> (= b bqt) (= (+ a b) (+ aqt bqt))))))

;; mult_eq_i
(assert
  (forall ((a Int) (aqt Int) (b Int) (bqt Int))
    (=> (= a aqt) (=> (= b bqt) (= (* a b) (* aqt bqt))))))

;; mul_assoc_rev
(assert (forall ((a Int) (b Int) (c Int)) (= (* a (* b c)) (* (* a b) c))))

;; mult_add_distr
(assert
  (forall ((a Int) (b Int) (c Int) (d Int))
    (= (* (+ a b) (+ c d)) (+ (+ (+ (* a c) (* a d)) (* b c)) (* b d)))))

;; mult_add_right
(assert
  (forall ((a Int) (b Int) (c Int)) (= (* (+ a b) c) (+ (* a c) (* b c)))))

;; mult_add_right_rev
(assert
  (forall ((a Int) (b Int) (c Int)) (= (+ (* a c) (* b c)) (* (+ a b) c))))

;; mult_add_left
(assert
  (forall ((a Int) (b Int) (c Int)) (= (* a (+ b c)) (+ (* a b) (* a c)))))

;; mult_add_left_rev
(assert
  (forall ((a Int) (b Int) (c Int)) (= (+ (* a b) (* a c)) (* a (+ b c)))))

;; mult_add_distr_rev
(assert
  (forall ((a Int) (b Int) (c Int) (d Int))
    (= (+ (+ (+ (* a c) (* a d)) (* b c)) (* b d)) (* (+ a b) (+ c d)))))

;; mul_assoc_comm
(assert (forall ((a Int) (b Int) (c Int)) (= (* (* a b) c) (* b (* a c)))))

;; mul_assoc_rev_comm
(assert (forall ((a Int) (b Int) (c Int)) (= (* a (* b c)) (* (* a c) b))))

;; add_assoc
(assert (forall ((a Int) (b Int) (c Int)) (= (+ (+ a b) c) (+ a (+ b c)))))

;; add_assoc_rev
(assert (forall ((a Int) (b Int) (c Int)) (= (+ a (+ b c)) (+ (+ a b) c))))

;; isum_empty
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni)) (=> (is_empty a s) (= (isum a s f) 0)))))

;; iproduct_empty
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni)) (=> (is_empty a s) (= (iproduct a s f) 1)))))

;; infix -_closure
(declare-fun infix_mn_closure () (Array Int (Array Int Int)))

;; infix -_closure_def
(assert
  (forall ((y Int) (y1 Int))
    (= (select (tb2t7
                 (infix_at
                   (infix_mngt int int)
                   int
                   (t2tb9 infix_mn_closure)
                   (t2tb8 y))) y1) (- y y1))))

;; isum_iter_
(assert
  (and
    (opposite_n
      int
      (t2tb9 infix_pl_closure)
      (t2tb9 infix_mn_closure)
      (t2tb8 0))
    (and
      (opposite int (t2tb9 infix_pl_closure) (t2tb9 infix_mn_closure))
      (and
        (opposite_com int (t2tb9 infix_pl_closure) (t2tb9 infix_mn_closure))
        (inverse_tuple
          int
          (t2tb9 infix_pl_closure)
          (t2tb9 infix_mn_closure)
          (t2tb8 0))))))

;; pos_to_strict
(assert (forall ((a Int)) (=> (<= 1 a) (< 0 a))))

;; pos_by_strict
(assert (forall ((a Int)) (=> (< 0 a) (<= 1 a))))

;; ind_iproduct
(declare-fun ind_iproduct ((Array Int Int)
  Int
  Int) Int)

;; ind_iproduct'def
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
    (= (ind_iproduct f i j) (tb2t8
                              (int_iterate
                                int
                                (t2tb9 infix_as_closure)
                                (t2tb7 f)
                                i
                                j)))))

;; ind_iproduct_eq
(assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (i Int) (j Int))
    (=>
      (forall ((k Int))
        (=> (and (<= i k) (< k j)) (= (select f k) (select g k))))
      (= (ind_iproduct f i j) (ind_iproduct g i j)))))

;; ind_iproduct_eq_gen
(assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (i1 Int) (j1 Int) (i2 Int) (j2 Int))
    (=>
      (forall ((k Int))
        (=> (and (<= i1 k) (< k j1)) (= (select f k) (select g k))))
      (=>
        (= i1 i2)
        (=> (= j1 j2) (= (ind_iproduct f i1 j1) (ind_iproduct g i2 j2)))))))

;; ind_iproduct_to_iproduct
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
    (= (ind_iproduct f i j) (iproduct int (t2tb16 (to_fset i j)) (t2tb7 f)))))

;; ind_iproduct_one_but_maybe_one_elt
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int) (e Int))
    (=>
      (and (<= i e) (< e j))
      (=>
        (forall ((eqt Int))
          (=>
            (and (<= i eqt) (<= eqt j))
            (=> (not (= e eqt)) (= (select f eqt) 1))))
        (= (ind_iproduct f i j) (select f e))))))

;; mult_one_int
(assert (forall ((a Int) (b Int)) (=> (= b 1) (= (* a b) a))))

;; one_mult_int
(assert (forall ((a Int) (b Int)) (=> (= a 1) (= (* a b) b))))

;; mult_zero_int
(assert (forall ((a Int) (b Int)) (=> (= b 0) (= (* a b) 0))))

;; zero_mult_int
(assert (forall ((a Int) (b Int)) (=> (= a 0) (= (* a b) 0))))

;; iproduct_to_iterate
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
    (= (ind_iproduct f i j) (tb2t8
                              (int_iterate
                                int
                                (t2tb9 infix_as_closure)
                                (t2tb7 f)
                                i
                                j)))))

;; ind_iproduct_empty
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
    (=> (<= j i) (= (ind_iproduct f i j) 1))))

;; ind_iproduct_plus_one
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
    (=>
      (< i j)
      (= (ind_iproduct f i j) (* (select f i) (ind_iproduct f (+ i 1) j))))))

;; ind_iproduct_right_extension
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
    (=>
      (< i j)
      (= (ind_iproduct f i j) (* (ind_iproduct f i (- j 1)) (select f (- j 1)))))))

;; ind_iproduct_right_extension_comm
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
    (=>
      (< i j)
      (= (* (ind_iproduct f i (- j 1)) (select f (- j 1))) (ind_iproduct
                                                             f
                                                             i
                                                             j)))))

;; ind_iproduct_comp
(assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (h (Array Int Int)) (i Int) (j Int))
    (=>
      (<= i j)
      (=>
        (forall ((k Int))
          (=>
            (and (<= i k) (< k j))
            (= (* (select f k) (select g k)) (select h k))))
        (= (ind_iproduct h i j) (* (ind_iproduct f i j) (ind_iproduct g i j)))))))

;; ind_iproduct_one
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
    (=>
      (forall ((k Int)) (=> (and (<= i k) (< k j)) (= (select f k) 1)))
      (= (ind_iproduct f i j) 1))))

;; positive_iproduct
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
    (=>
      (forall ((k Int)) (=> (and (<= i k) (< k j)) (< 0 (select f k))))
      (< 0 (ind_iproduct f i j)))))

;; ind_iproduct_pos
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
    (=>
      (forall ((k Int)) (=> (and (<= i k) (< k j)) (<= 0 (select f k))))
      (<= 0 (ind_iproduct f i j)))))

;; ind_iproduct_strict_pos
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
    (=>
      (forall ((k Int)) (=> (and (<= i k) (< k j)) (< 0 (select f k))))
      (< 0 (ind_iproduct f i j)))))

;; iproduct_strict_pos
(assert
  (forall ((s (set Int)) (f (Array Int Int)))
    (=>
      (forall ((k Int))
        (=> (mem int (t2tb8 k) (t2tb16 s)) (< 0 (select f k))))
      (< 0 (iproduct int (t2tb16 s) (t2tb7 f))))))

;; iproduct_strict_pos
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni))
      (=>
        (forall ((k uni))
          (=> (sort a k) (=> (mem a k s) (< 0 (tb2t8 (infix_at int a f k))))))
        (< 0 (iproduct a s f))))))

;; ind_iproduct_strict_pos_one
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
    (=>
      (forall ((k Int)) (=> (and (<= i k) (< k j)) (< 0 (select f k))))
      (<= 1 (ind_iproduct f i j)))))

;; fc
(declare-fun fc20 ((Array Int Int)
  Int
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (l Int) (h Int) (a Int))
    (= (select (fc20 f l h) a) (select f (+ (- h (+ a 1)) l)))))

;; ind_iproduct_left_right
(assert
  (forall ((f (Array Int Int)) (l Int) (k Int) (h Int))
    (=>
      (and (<= l k) (<= k h))
      (= (ind_iproduct f l k) (ind_iproduct (fc20 f l h) (+ (- h k) l) h)))))

;; iterable_imult
(assert (iterable int (t2tb9 infix_as_closure)))

;; int_minus_distr
(assert (forall ((a Int) (b Int)) (= (- (+ a b)) (+ (- a) (- b)))))

;; int_minus_eq
(assert (forall ((a Int) (b Int)) (=> (= a b) (= (- a) (- b)))))

;; fc
(declare-fun fc21 ((Array Int Int)
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (t (Array Int Int)) (b Int))
    (= (select (fc21 f t) b) (select t (select f b)))))

;; ind_iproduct_map_auto
(assert
  (forall ((i Int) (j Int) (f (Array Int Int)) (t (Array Int Int)))
    (=>
      (p_bijective1 f (to_fset i j) (to_fset i j))
      (= (ind_iproduct t i j) (ind_iproduct (fc21 f t) i j)))))

;; fc
(declare-fun fc22 ((Array Int Int)
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (t (Array Int Int)) (b Int))
    (= (select (fc22 f t) b) (select t (select f b)))))

;; ind_iproduct_map
(assert
  (forall ((i Int) (j Int) (k Int) (l Int) (f (Array Int Int)) (t (Array Int Int)))
    (=>
      (p_bijective1 f (to_fset i j) (to_fset k l))
      (= (ind_iproduct t k l) (ind_iproduct (fc22 f t) i j)))))

;; ind_iproduct_trans
(assert
  (forall ((f (Array Int Int)) (i Int) (k Int) (j Int))
    (=>
      (and (<= i k) (<= k j))
      (= (ind_iproduct f i j) (* (ind_iproduct f i k) (ind_iproduct f k j))))))

;; ind_iproduct_inf
(assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (i Int) (j Int))
    (=>
      (forall ((k Int))
        (=>
          (and (<= i k) (< k j))
          (and (<= 0 (select f k)) (<= (select f k) (select g k)))))
      (<= (ind_iproduct f i j) (ind_iproduct g i j)))))

;; choose_filter
(declare-fun choose_filter (ty
  uni
  uni) uni)

;; choose_filter_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 uni)) (sort a (choose_filter a x x1)))))

;; choose_filter'def
(assert
  (forall ((a ty))
    (forall ((s uni) (p uni))
      (=>
        (exists ((e uni))
          (and (mem a e s) (= (tb2t10 (infix_at bool a p e)) true)))
        (ite (= (tb2t10 (infix_at bool a p (choose1 a s))) true)
          (= (choose_filter a s p) (choose1 a s))
          (= (choose_filter a s p) (choose_filter
                                     a
                                     (remove a (choose1 a s) s)
                                     p)))))))

;; choose_filter'spec
(assert
  (forall ((a ty))
    (forall ((s uni) (p uni))
      (=>
        (exists ((e uni))
          (and (mem a e s) (= (tb2t10 (infix_at bool a p e)) true)))
        (and
          (= (tb2t10 (infix_at bool a p (choose_filter a s p))) true)
          (mem a (choose_filter a s p) s))))))

;; my_filter
(declare-fun my_filter (ty
  uni
  uni) uni)

;; my_filter_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 uni)) (sort (set1 a) (my_filter a x x1)))))

;; my_filter'def
(assert
  (forall ((a ty))
    (forall ((s uni) (p uni))
      (ite (= (cardinal a s) 0)
        (= (my_filter a s p) (empty a))
        (ite (= (tb2t10 (infix_at bool a p (choose1 a s))) true)
          (= (my_filter a s p) (add
                                 a
                                 (choose1 a s)
                                 (my_filter a (remove a (choose1 a s) s) p)))
          (= (my_filter a s p) (my_filter a (remove a (choose1 a s) s) p)))))))

;; my_filter'spec
(assert
  (forall ((a ty))
    (forall ((s uni) (p uni))
      (and
        (forall ((e uni))
          (=>
            (mem a e s)
            (=
              (= (tb2t10 (infix_at bool a p e)) true)
              (mem a e (my_filter a s p)))))
        (and
          (forall ((e uni)) (=> (mem a e (my_filter a s p)) (mem a e s)))
          (and
            (<= 0 (cardinal a (my_filter a s p)))
            (<= (cardinal a (my_filter a s p)) (cardinal a s))))))))

;; my_filter_int
(declare-fun my_filter_int (Int
  Int
  (Array Int Bool)) (set Int))

;; my_filter_int'def
(assert
  (forall ((i Int) (j Int) (p (Array Int Bool)))
    (ite (<= j i)
      (= (my_filter_int i j p) (tb2t16 (empty int)))
      (ite (= (tb2t10 (infix_at bool int (t2tb21 p) (t2tb8 i))) true)
        (= (my_filter_int i j p) (tb2t16
                                   (add
                                     int
                                     (t2tb8 i)
                                     (t2tb16 (my_filter_int (+ i 1) j p)))))
        (= (my_filter_int i j p) (my_filter_int (+ i 1) j p))))))

;; my_filter_int'spec
(assert
  (forall ((i Int) (j Int) (p (Array Int Bool)))
    (and
      (= (my_filter_int i j p) (tb2t16
                                 (my_filter
                                   int
                                   (t2tb16 (to_fset i j))
                                   (t2tb21 p))))
      (and
        (forall ((e Int))
          (=>
            (and (<= i e) (< e j))
            (=
              (= (tb2t10 (infix_at bool int (t2tb21 p) (t2tb8 e))) true)
              (mem int (t2tb8 e) (t2tb16 (my_filter_int i j p))))))
        (and
          (forall ((e Int))
            (=>
              (mem int (t2tb8 e) (t2tb16 (my_filter_int i j p)))
              (and (<= i e) (< e j))))
          (=>
            (<= i j)
            (and
              (<= 0 (cardinal int (t2tb16 (my_filter_int i j p))))
              (<= (cardinal int (t2tb16 (my_filter_int i j p))) (- j i)))))))))

;; in_my_filter
(assert
  (forall ((a ty))
    (forall ((s uni) (p uni) (e uni))
      (=>
        (mem a e s)
        (=>
          (= (tb2t10 (infix_at bool a p e)) true)
          (mem a e (my_filter a s p)))))))

;; not_in_my_filter_set
(assert
  (forall ((a ty))
    (forall ((s uni) (p uni) (e uni))
      (=> (not (mem a e s)) (not (mem a e (my_filter a s p)))))))

;; not_in_my_filter_filter
(assert
  (forall ((a ty))
    (forall ((s uni) (p uni) (e uni))
      (=>
        (not (= (tb2t10 (infix_at bool a p e)) true))
        (not (mem a e (my_filter a s p)))))))

;; in_my_filter_set
(assert
  (forall ((a ty))
    (forall ((s uni) (p uni) (e uni))
      (=> (mem a e (my_filter a s p)) (mem a e s)))))

;; in_my_filter_filter
(assert
  (forall ((a ty))
    (forall ((s uni) (p uni) (e uni))
      (=>
        (mem a e (my_filter a s p))
        (= (tb2t10 (infix_at bool a p e)) true)))))

;; my_filter_inter
(assert
  (forall ((a ty))
    (forall ((s uni) (p1 uni) (p2 uni))
      (=>
        (forall ((e uni))
          (=>
            (sort a e)
            (=>
              (mem a e s)
              (=>
                (= (tb2t10 (infix_at bool a p1 e)) true)
                (not (= (tb2t10 (infix_at bool a p2 e)) true))))))
        (= (inter a (my_filter a s p1) (my_filter a s p2)) (empty a))))))

;; my_filter_union
(assert
  (forall ((a ty))
    (forall ((s uni) (p1 uni) (p2 uni))
      (=>
        (sort (set1 a) s)
        (=>
          (forall ((e uni))
            (=>
              (sort a e)
              (=>
                (mem a e s)
                (=>
                  (not (= (tb2t10 (infix_at bool a p1 e)) true))
                  (= (tb2t10 (infix_at bool a p2 e)) true)))))
          (= (union1 a (my_filter a s p1) (my_filter a s p2)) s))))))

;; ind_iproduct_sup_one
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
    (=>
      (< i j)
      (=>
        (forall ((k Int)) (=> (and (<= i k) (< k j)) (<= 1 (select f k))))
        (=>
          (exists ((k Int))
            (and (and (<= i k) (< k j)) (not (= (select f k) 1))))
          (< 1 (ind_iproduct f i j)))))))

;; comp_trans_equal_strict
(assert
  (forall ((a Int) (b Int) (c Int)) (=> (<= a b) (=> (< b c) (< a c)))))

;; transitive_inf_leq_int
(assert
  (forall ((a Int) (b Int) (c Int)) (=> (< a b) (=> (<= b c) (< a c)))))

;; transitive_inf_int
(assert (forall ((a Int) (b Int) (c Int)) (=> (< a b) (=> (< b c) (< a c)))))

;; compeq_trans_sum
(assert
  (forall ((a Int) (b Int) (c Int)) (=> (<= b c) (<= (+ a b) (+ a c)))))

;; compeq_trans_sum_zero
(assert (forall ((a Int) (b Int)) (=> (<= 0 b) (<= a (+ a b)))))

;; comp_trans_sum
(assert (forall ((a Int) (b Int) (c Int)) (=> (< b c) (< (+ a b) (+ a c)))))

;; comp_trans_mult
(assert
  (forall ((a Int) (b Int) (c Int))
    (=> (and (<= 0 a) (< a b)) (=> (< 0 c) (< (* a c) (* b c))))))

;; minus_out_int
(assert (forall ((a Int) (b Int)) (= (* (- a) b) (- (* a b)))))

;; ind_isum
(declare-fun ind_isum ((Array Int Int)
  Int
  Int) Int)

;; ind_isum'def
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
    (ite (<= j i)
      (= (ind_isum f i j) 0)
      (ite (= j (+ i 1))
        (= (ind_isum f i j) (select f i))
        (= (ind_isum f i j) (+ (select f i) (ind_isum f (+ i 1) j)))))))

;; ind_isum'spec
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
    (= (ind_isum f i j) (tb2t8
                          (int_iterate
                            int
                            (t2tb9 infix_pl_closure)
                            (t2tb7 f)
                            i
                            j)))))

;; ind_isum_empty
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
    (=> (<= j i) (= (ind_isum f i j) 0))))

;; ind_isum_one
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
    (=> (= j (+ i 1)) (= (ind_isum f i j) (select f i)))))

;; ind_isum_plus_one
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
    (=> (< i j) (= (ind_isum f i j) (+ (select f i) (ind_isum f (+ i 1) j))))))

;; ind_isum_to_isum
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
    (=>
      (< i j)
      (= (ind_isum f i j) (isum int (t2tb16 (to_fset i j)) (t2tb7 f))))))

;; fc
(declare-fun fc23 () (Array Int (Array Int Int)))

;; fc'def
(assert
  (forall ((y0 Int) (y1 Int))
    (= (select (tb2t7
                 (infix_at (infix_mngt int int) int (t2tb9 fc23) (t2tb8 y0))) y1) y0)))

;; ind_isum_const
(assert
  (forall ((k Int) (i Int) (j Int))
    (=>
      (< i j)
      (= (ind_isum
           (tb2t7 (infix_at (infix_mngt int int) int (t2tb9 fc23) (t2tb8 k)))
           i
           j) (* k (- j i))))))

;; ind_isum_null
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
    (=>
      (< i j)
      (=>
        (forall ((k Int)) (=> (and (<= i k) (< k j)) (= (select f k) 0)))
        (= (ind_isum f i j) 0)))))

;; ind_isum_right_extension
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
    (=>
      (<= i j)
      (= (ind_isum f i (+ j 1)) (+ (ind_isum f i j) (select f j))))))

;; ind_isum_re
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
    (=>
      (< i j)
      (= (ind_isum f i j) (+ (ind_isum f i (- j 1)) (select f (- j 1)))))))

;; ind_isum_re_null
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
    (=>
      (< i j)
      (=> (= (select f j) 0) (= (ind_isum f i (+ j 1)) (ind_isum f i j))))))

;; ind_isum_null_but_maybe_one_elt
(assert
  (forall ((l Int) (h Int) (t (Array Int Int)) (e Int))
    (=>
      (and (<= l e) (< e h))
      (=>
        (forall ((a Int))
          (=> (and (<= l a) (< a h)) (=> (not (= a e)) (= (select t a) 0))))
        (= (ind_isum t l h) (select t e))))))

;; ind_isum_eq
(assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (i Int) (j Int))
    (=>
      (forall ((k Int))
        (=> (and (<= i k) (< k j)) (= (select f k) (select g k))))
      (= (ind_isum f i j) (ind_isum g i j)))))

;; fc
(declare-fun fc24 ((Array Int Int)
  (Array Int Int)
  (Array Int Bool)) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (p (Array Int Bool)) (k Int))
    (= (select (fc24 f g p) k) (ite (= (tb2t10
                                         (infix_at
                                           bool
                                           int
                                           (t2tb21 p)
                                           (t2tb8 k))) true)
                                 (select f k)
                                 (select g k)))))

;; ind_isum_to_guard
(assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (p (Array Int Bool)) (i Int) (j Int))
    (=>
      (forall ((k Int))
        (=>
          (and (<= i k) (< k j))
          (= (tb2t10 (infix_at bool int (t2tb21 p) (t2tb8 k))) true)))
      (= (ind_isum (fc24 f g p) i j) (ind_isum f i j)))))

;; fc
(declare-fun fc25 ((Array Int Int)
  (Array Int Int)
  (Array Int Bool)) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (p (Array Int Bool)) (k Int))
    (= (select (fc25 f g p) k) (ite (= (tb2t10
                                         (infix_at
                                           bool
                                           int
                                           (t2tb21 p)
                                           (t2tb8 k))) true)
                                 (select g k)
                                 (select f k)))))

;; ind_isum_no_guard
(assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (p (Array Int Bool)) (i Int) (j Int))
    (=>
      (forall ((k Int))
        (=>
          (and (<= i k) (< k j))
          (not (= (tb2t10 (infix_at bool int (t2tb21 p) (t2tb8 k))) true))))
      (= (ind_isum (fc25 f g p) i j) (ind_isum f i j)))))

;; ind_isum_eq_gen
(assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (i Int) (i1 Int) (j Int) (j1 Int))
    (=>
      (forall ((k Int))
        (=> (and (<= i k) (< k j)) (= (select f k) (select g k))))
      (=> (= i i1) (=> (= j j1) (= (ind_isum f i j) (ind_isum g i1 j1)))))))

;; ind_isum_func_const
(assert
  (forall ((k Int) (f (Array Int Int)) (i Int) (j Int))
    (=>
      (<= i j)
      (=>
        (forall ((l Int)) (=> (and (<= i l) (< l j)) (= (select f l) k)))
        (= (ind_isum f i j) (* k (- j i)))))))

;; ind_isum_pos
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
    (=>
      (<= i j)
      (=>
        (forall ((k Int)) (=> (and (<= i k) (< k j)) (<= 0 (select f k))))
        (<= 0 (ind_isum f i j))))))

;; fc
(declare-fun fc26 ((Array Int Int)
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (t (Array Int Int)) (b Int))
    (= (select (fc26 f t) b) (select t (select f b)))))

;; ind_isum_map_auto
(assert
  (forall ((i Int) (j Int) (f (Array Int Int)) (t (Array Int Int)))
    (=>
      (p_bijective1 f (to_fset i j) (to_fset i j))
      (= (ind_isum t i j) (ind_isum (fc26 f t) i j)))))

;; fc
(declare-fun fc27 (Int
  Int
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((i Int) (j Int) (f (Array Int Int)) (k Int))
    (= (select (fc27 i j f) k) (select f (+ (- (- j k) 1) i)))))

;; ind_isum_rev
(assert
  (forall ((i Int) (j Int) (f (Array Int Int)))
    (= (ind_isum f i j) (ind_isum (fc27 i j f) i j))))

;; fc
(declare-fun fc28 ((Array Int Int)
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (t (Array Int Int)) (b Int))
    (= (select (fc28 f t) b) (select t (select f b)))))

;; ind_isum_map
(assert
  (forall ((i Int) (j Int) (k Int) (l Int) (f (Array Int Int)) (t (Array Int Int)))
    (=>
      (p_bijective1 f (to_fset i j) (to_fset k l))
      (= (ind_isum t k l) (ind_isum (fc28 f t) i j)))))

;; fc
(declare-fun fc29 ((Array Int Int)
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (t (Array Int Int)) (b Int))
    (= (select (fc29 f t) b) (select t (select f b)))))

;; ind_isum_map_auto_bij
(assert
  (forall ((i Int) (j Int) (f (Array Int Int)) (t (Array Int Int)))
    (=>
      (forall ((e Int))
        (=>
          (and (<= i e) (< e j))
          (and (<= i (select f e)) (< (select f e) j))))
      (=>
        (forall ((e Int) (eqt Int))
          (=>
            (and (<= i e) (< e j))
            (=>
              (and (<= i eqt) (< eqt j))
              (=> (not (= e eqt)) (not (= (select f e) (select f eqt)))))))
        (=>
          (forall ((eqt Int))
            (=>
              (and (<= i eqt) (< eqt j))
              (exists ((e Int))
                (and (and (<= i e) (< e j)) (= (select f e) eqt)))))
          (= (ind_isum t i j) (ind_isum (fc29 f t) i j)))))))

;; fc
(declare-fun fc30 ((Array Int Int)
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (t (Array Int Int)) (b Int))
    (= (select (fc30 f t) b) (select t (select f b)))))

;; ind_isum_map_bij
(assert
  (forall ((i Int) (j Int) (k Int) (l Int) (f (Array Int Int)) (t (Array Int Int)))
    (=>
      (forall ((e Int))
        (=>
          (and (<= i e) (< e j))
          (and (<= k (select f e)) (< (select f e) l))))
      (=>
        (forall ((e Int) (eqt Int))
          (=>
            (and (<= i e) (< e j))
            (=>
              (and (<= i eqt) (< eqt j))
              (=> (not (= e eqt)) (not (= (select f e) (select f eqt)))))))
        (=>
          (forall ((eqt Int))
            (=>
              (and (<= k eqt) (< eqt l))
              (exists ((e Int))
                (and (and (<= i e) (< e j)) (= (select f e) eqt)))))
          (= (ind_isum t k l) (ind_isum (fc30 f t) i j)))))))

;; fc
(declare-fun fc31 ((Array Int Int)
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (k Int) (b Int))
    (= (select (fc31 f k) b) (select f (+ b k)))))

;; ind_isum_transl
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int) (k Int))
    (= (ind_isum f i j) (ind_isum (fc31 f k) (- i k) (- j k)))))

;; fc
(declare-fun fc32 ((Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (b Int))
    (= (select (fc32 f) b) (select f (- b 1)))))

;; ind_isum_transl_plus_one
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
    (= (ind_isum f i j) (ind_isum (fc32 f) (+ i 1) (+ j 1)))))

;; fc
(declare-fun fc33 ((Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (b Int))
    (= (select (fc33 f) b) (select f (+ b 1)))))

;; ind_isum_transl_minus_one
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
    (= (ind_isum f i j) (ind_isum (fc33 f) (- i 1) (- j 1)))))

;; fc
(declare-fun fc34 ((Array Int Int)
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (a Int) (i Int))
    (= (select (fc34 f a) i) (* a (select f i)))))

;; ind_isum_scal
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int) (a Int))
    (=> (<= i j) (= (ind_isum (fc34 f a) i j) (* a (ind_isum f i j))))))

;; fc
(declare-fun fc35 ((Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (i Int))
    (= (select (fc35 f) i) (- (select f i)))))

;; minus_ind_isum
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
    (=> (<= i j) (= (- (ind_isum f i j)) (ind_isum (fc35 f) i j)))))

;; fc
(declare-fun fc36 ((Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (i Int))
    (= (select (fc36 f) i) (- (select f i)))))

;; minus_ind_isum_rev
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
    (=> (<= i j) (= (ind_isum (fc36 f) i j) (- (ind_isum f i j))))))

;; fc
(declare-fun fc37 ((Array Int Int)
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (a Int) (i Int))
    (= (select (fc37 f a) i) (* a (select f i)))))

;; ind_isum_scal_rev
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int) (a Int))
    (=> (<= i j) (= (* a (ind_isum f i j)) (ind_isum (fc37 f a) i j)))))

;; fc
(declare-fun fc38 ((Array Int Int)
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (a Int) (i Int))
    (= (select (fc38 f a) i) (* (select f i) a))))

;; ind_isum_scal_rev_right
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int) (a Int))
    (=> (<= i j) (= (* (ind_isum f i j) a) (ind_isum (fc38 f a) i j)))))

;; fc
(declare-fun fc39 ((Array Int Int)
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (a Int) (i Int))
    (= (select (fc39 f a) i) (* (select f i) a))))

;; ind_isum_scal_right
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int) (a Int))
    (=> (<= i j) (= (ind_isum (fc39 f a) i j) (* (ind_isum f i j) a)))))

;; ind_isum_bound
(assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (i Int) (j Int))
    (=>
      (< i j)
      (=>
        (forall ((k Int))
          (=> (and (<= i k) (< k j)) (< (select f k) (select g k))))
        (< (ind_isum f i j) (ind_isum g i j))))))

;; ind_isum_bound_eq
(assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (i Int) (j Int))
    (=>
      (<= i j)
      (=>
        (forall ((k Int))
          (=> (and (<= i k) (< k j)) (<= (select f k) (select g k))))
        (<= (ind_isum f i j) (ind_isum g i j))))))

;; fc
(declare-fun fc40 ((Array Int Int)
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (a Int) (i Int))
    (= (select (fc40 f a) i) (* a (select f i)))))

;; ind_isum_scal_gen
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
    (forall ((a Int))
      (=>
        (and (<= i a) (< a j))
        (= (ind_isum (fc40 f a) i j) (* a (ind_isum f i j)))))))

;; ind_isum_trans
(assert
  (forall ((f (Array Int Int)) (i Int) (k Int) (j Int))
    (=>
      (and (<= i k) (<= k j))
      (= (ind_isum f i j) (+ (ind_isum f i k) (ind_isum f k j))))))

;; power_pre
(declare-fun power_pre (Int
  Int) Int)

;; power_pre'def
(assert
  (forall ((e Int) (i Int))
    (=>
      (<= 0 i)
      (ite (= i 0)
        (= (power_pre e i) 1)
        (= (power_pre e i) (* e (power_pre e (- i 1))))))))

;; power
(declare-fun power (Int
  Int) Int)

;; power'def
(assert
  (forall ((e Int) (i Int))
    (ite (< i 0) (= (power e i) 0) (= (power e i) (power_pre e i)))))

;; Power_zero
(assert (forall ((i Int)) (= (power i 0) 1)))

;; Power_one
(assert (forall ((i Int)) (= (power i 1) i)))

;; power_plus_one
(assert
  (forall ((i Int) (x Int))
    (=> (<= 0 x) (= (power i (+ x 1)) (* (power i x) i)))))

;; power_sum
(assert
  (forall ((i Int) (x Int) (y Int))
    (=>
      (<= 0 x)
      (=> (<= 0 y) (= (power i (+ x y)) (* (power i x) (power i y)))))))

;; power_mult
(assert
  (forall ((i Int) (x Int) (y Int))
    (=> (<= 0 x) (=> (<= 0 y) (= (power i (* x y)) (power (power i x) y))))))

;; Power_sum
(assert
  (forall ((x Int) (y Int) (i Int))
    (=>
      (<= 0 x)
      (=> (<= 0 y) (= (power i (+ x y)) (* (power i x) (power i y)))))))

;; Power_mult
(assert
  (forall ((x Int) (y Int) (i Int))
    (=> (<= 0 x) (=> (<= 0 y) (= (power i (* x y)) (power (power i x) y))))))

;; fc
(declare-fun fc41 () (Array Int (Array Int Int)))

;; fc'def
(assert
  (forall ((y0 Int) (y1 Int))
    (= (select (tb2t7
                 (infix_at (infix_mngt int int) int (t2tb9 fc41) (t2tb8 y0))) y1) y0)))

;; power_to_ind_iproduct
(assert
  (forall ((e Int) (i Int))
    (=>
      (<= 0 i)
      (= (power e i) (ind_iproduct
                       (tb2t7
                         (infix_at
                           (infix_mngt int int)
                           int
                           (t2tb9 fc41)
                           (t2tb8 e)))
                       0
                       i)))))

;; fc
(declare-fun fc42 () (Array Int (Array Int Int)))

;; fc'def
(assert
  (forall ((y0 Int) (y1 Int))
    (= (select (tb2t7
                 (infix_at (infix_mngt int int) int (t2tb9 fc42) (t2tb8 y0))) y1) y0)))

;; power_transl
(assert
  (forall ((e Int) (k Int) (i Int))
    (=>
      (<= 0 i)
      (= (power e i) (ind_iproduct
                       (tb2t7
                         (infix_at
                           (infix_mngt int int)
                           int
                           (t2tb9 fc42)
                           (t2tb8 e)))
                       k
                       (+ k i))))))

;; fc
(declare-fun fc43 () (Array Int (Array Int Int)))

;; fc'def
(assert
  (forall ((y0 Int) (y1 Int))
    (= (select (tb2t7
                 (infix_at (infix_mngt int int) int (t2tb9 fc43) (t2tb8 y0))) y1) y0)))

;; ind_iproduct_to_power
(assert
  (forall ((e Int) (i Int) (j Int))
    (=>
      (and (<= 0 i) (<= i j))
      (= (ind_iproduct
           (tb2t7 (infix_at (infix_mngt int int) int (t2tb9 fc43) (t2tb8 e)))
           i
           j) (power e (- j i))))))

;; fc
(declare-fun fc44 () (Array Int (Array Int Int)))

;; fc'def
(assert
  (forall ((y0 Int) (y1 Int))
    (= (select (tb2t7
                 (infix_at (infix_mngt int int) int (t2tb9 fc44) (t2tb8 y0))) y1) y0)))

;; ind_iproduct_to_power_gen
(assert
  (forall ((e Int))
    (forall ((i Int) (j Int))
      (=>
        (and (<= 0 i) (<= i j))
        (= (ind_iproduct
             (tb2t7
               (infix_at (infix_mngt int int) int (t2tb9 fc44) (t2tb8 e)))
             i
             j) (power e (- j i)))))))

;; power_sum_rev
(assert
  (forall ((x Int) (n Int) (m Int))
    (=>
      (<= 0 n)
      (=> (<= 0 m) (= (* (power x n) (power x m)) (power x (+ n m)))))))

;; power_eq
(assert
  (forall ((x Int) (n Int) (m Int)) (=> (= n m) (= (power x n) (power x m)))))

;; power_eq_gen
(assert
  (forall ((x Int) (y Int) (n Int) (m Int))
    (=> (= n m) (=> (= x y) (= (power x n) (power y m))))))

;; fc
(declare-fun fc45 () (Array Int Int))

;; fc'def
(assert (forall ((k Int)) (= (select fc45 k) (power 2 (+ k 1)))))

;; power_2_sum
(assert
  (forall ((i Int))
    (=> (<= 1 i) (= (ind_isum fc45 0 i) (- (power 2 (+ i 1)) 2)))))

;; fc
(declare-fun fc46 () (Array Int Int))

;; fc'def
(assert (forall ((k Int)) (= (select fc46 k) (power 2 (+ k 1)))))

;; power_decomp
(assert
  (forall ((i Int)) (=> (<= 1 i) (< (ind_isum fc46 0 i) (power 2 (+ i 1))))))

;; fc
(declare-fun fc47 (Int) (Array Int Int))

;; fc'def
(assert
  (forall ((i Int) (k Int))
    (= (select (fc47 i) k) (ite (and (<= 1 k) (< k (+ i 1)))
                             (power 2 (- k 1))
                             0))))

;; power_decomp_minus_one
(assert
  (forall ((i Int))
    (=> (<= 1 i) (< (ind_isum (fc47 i) 1 i) (power 2 (- i 1))))))

;; power_closure
(declare-fun power_closure () (Array Int (Array Int Int)))

;; power_closure_def
(assert
  (forall ((y Int) (y1 Int))
    (= (select (tb2t7
                 (infix_at
                   (infix_mngt int int)
                   int
                   (t2tb9 power_closure)
                   (t2tb8 y))) y1) (power y y1))))

;; power_decomp_
(assert
  (forall ((i Int))
    (=>
      (<= 1 i)
      (< (ind_isum
           (tb2t7
             (infix_at
               (infix_mngt int int)
               int
               (t2tb9 power_closure)
               (t2tb8 2)))
           0
           i) (power 2 i)))))

;; fc
(declare-fun fc48 () (Array Int Int))

;; fc'def
(assert (forall ((k Int)) (= (select fc48 k) (power 2 (+ k 1)))))

;; power_decomp_one
(assert
  (forall ((i Int)) (=> (<= 1 i) (< (ind_isum fc48 1 i) (power 2 (+ i 1))))))

;; power_decomp_one_
(assert
  (forall ((i Int))
    (=>
      (<= 1 i)
      (< (ind_isum
           (tb2t7
             (infix_at
               (infix_mngt int int)
               int
               (t2tb9 power_closure)
               (t2tb8 2)))
           1
           i) (power 2 i)))))

;; growing_mult
(assert
  (forall ((n Int) (m Int)) (=> (<= 0 n) (=> (<= 1 m) (<= n (* n m))))))

;; strict_growing_mult
(assert (forall ((n Int) (m Int)) (=> (< 1 n) (=> (< 1 m) (< n (* n m))))))

;; init_exp
(assert
  (forall ((k Int))
    (and (= (power k 0) 1) (and (= (power k 1) k) (= (power k 2) (* k k))))))

;; positive_int_exp
(assert
  (forall ((k Int) (n Int))
    (=>
      (<= 1 k)
      (=>
        (<= 0 n)
        (and
          (<= 1 (power k n))
          (and (< 0 (power k n)) (<= (power k n) (power k (+ n 1)))))))))

;; strict_positive_int_exp
(assert
  (forall ((k Int) (n Int))
    (=>
      (< 1 k)
      (=>
        (< 0 n)
        (and
          (< 1 (power k n))
          (and
            (< (power k (- n 1)) (power k n))
            (< (power k n) (power k (+ n 1)))))))))

;; abs
(declare-fun abs1 (Int) Int)

;; abs'def
(assert (forall ((x Int)) (ite (<= 0 x) (= (abs1 x) x) (= (abs1 x) (- x)))))

;; Abs_le
(assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
(assert (forall ((x Int)) (<= 0 (abs1 x))))

;; Div_unique
(assert
  (forall ((x Int) (y Int) (q Int))
    (=>
      (< 0 y)
      (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
(assert
  (forall ((x Int) (y Int))
    (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
(assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
(assert
  (forall ((x Int) (y Int))
    (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
(assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (mod (- 1) y) (- y 1)))))

;; Div_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

;; power_minus_one
(assert
  (forall ((i Int))
    (=>
      (<= 0 i)
      (and
        (=> (= (mod i 2) 0) (= (power (- 1) i) 1))
        (=> (= (mod i 2) 1) (= (power (- 1) i) (- 1)))))))

;; growing_exp
(assert
  (forall ((k Int) (m Int) (n Int))
    (=> (<= 1 k) (=> (and (<= 0 m) (<= m n)) (<= (power k m) (power k n))))))

;; strict_growing_exp
(assert
  (forall ((k Int) (m Int) (n Int))
    (=> (< 1 k) (=> (and (<= 0 m) (< m n)) (< (power k m) (power k n))))))

;; unicity_exp
(assert
  (forall ((k Int) (m Int) (n Int))
    (=>
      (< 1 k)
      (=> (<= 0 m) (=> (<= 0 n) (= (= (power k m) (power k n)) (= m n)))))))

;; bounded_sum_exp
(assert
  (forall ((i Int) (j Int) (m Int) (n Int))
    (=>
      (<= 0 m)
      (=>
        (<= 0 n)
        (=>
          (and (<= 0 i) (< i (power 2 m)))
          (=>
            (and (<= 0 j) (< j (power 2 n)))
            (< (+ (* i (power 2 n)) j) (power 2 (+ m n)))))))))

;; Power_pos
(assert (forall ((i Int)) (=> (<= 0 i) (< 0 (power i 0)))))

;; Power_pos_gen
(assert
  (forall ((i Int) (j Int)) (=> (< 0 i) (=> (<= 0 j) (< 0 (power i j))))))

;; power_two
(assert (forall ((x Int)) (=> (<= 0 x) (= (power x 2) (* x x)))))

;; power_plus_one_two
(assert
  (forall ((x Int))
    (=> (<= 0 x) (= (power 2 (+ x 1)) (+ (power 2 x) (power 2 x))))))

;; growing_right_power
(assert
  (forall ((a Int) (b Int) (i Int))
    (=> (<= 0 i) (=> (and (<= 0 a) (<= a b)) (<= (power a i) (power b i))))))

;; power_of_one
(assert
  (forall ((a Int) (b Int)) (=> (<= 0 b) (=> (= a 1) (= (power a b) 1)))))

;; bound_power
(assert
  (forall ((i Int) (a Int) (k Int) (n Int))
    (=>
      (< 0 a)
      (=>
        (and (< 0 k) (<= k n))
        (=>
          (and (<= 0 i) (< i (power a n)))
          (< (div i (power a (- n k))) (power a k)))))))

;; power_inf
(assert
  (forall ((a Int) (n Int) (nqt Int))
    (=> (< 1 a) (=> (and (< 0 n) (< n nqt)) (< (power a n) (power a nqt))))))

;; power_leq
(assert
  (forall ((a Int) (n Int) (nqt Int))
    (=>
      (<= 0 a)
      (=> (and (< 0 n) (<= n nqt)) (<= (power a n) (power a nqt))))))

;; power_rises
(assert
  (forall ((a Int) (n Int)) (=> (< 1 a) (=> (< 1 n) (< a (power a n))))))

;; int_expo_rises
(assert
  (forall ((a Int) (n Int)) (=> (< 1 a) (=> (<= 1 n) (< n (power a n))))))

;; bound_power_2
(assert
  (forall ((i Int) (n Int))
    (=>
      (<= 0 n)
      (=> (and (<= 0 i) (< i (power 2 (+ n 1)))) (< (div i (power 2 n)) 2)))))

;; polysquare
(declare-fun polysquare (Int
  Int
  Int
  Int) Int)

;; polysquare'def
(assert
  (forall ((n Int) (a2 Int) (a1 Int) (a0 Int))
    (=>
      (< 0 n)
      (=>
        (<= 0 a2)
        (=>
          (<= 0 a1)
          (=>
            (<= 0 a0)
            (= (polysquare n a2 a1 a0) (+ (+ (* a2 (power n 2)) (* a1 n)) a0))))))))

;; polysquare'spec
(assert
  (forall ((n Int) (a2 Int) (a1 Int) (a0 Int))
    (=>
      (< 0 n)
      (=>
        (<= 0 a2)
        (=> (<= 0 a1) (=> (<= 0 a0) (<= 0 (polysquare n a2 a1 a0))))))))

;; polysquare_leq_trans
(assert
  (forall ((n Int) (a2 Int) (a1 Int) (a0 Int) (b2 Int) (b1 Int) (b0 Int) (pa Int) (pb Int) (ps Int))
    (=>
      (< 0 n)
      (=>
        (<= 0 a2)
        (=>
          (<= 0 a1)
          (=>
            (<= 0 a0)
            (=>
              (<= 0 b2)
              (=>
                (<= 0 b1)
                (=>
                  (<= 0 b0)
                  (=>
                    (<= pa (polysquare n a2 a1 a0))
                    (=>
                      (<= pb (polysquare n b2 b1 b0))
                      (=>
                        (<= ps (+ pa pb))
                        (<= ps (polysquare n (+ a2 b2) (+ a1 b1) (+ a0 b0)))))))))))))))

;; polysquare_leq_trans_sc
(assert
  (forall ((n Int) (a2 Int) (a1 Int) (a0 Int) (b2 Int) (b1 Int) (b0 Int) (pa Int) (sc Int) (ps Int))
    (=>
      (< 0 n)
      (=>
        (<= 0 a2)
        (=>
          (<= 0 a1)
          (=>
            (<= 0 a0)
            (=>
              (<= 0 sc)
              (=>
                (<= (* sc a2) b2)
                (=>
                  (<= (* sc a1) b1)
                  (=>
                    (<= (* sc a0) b0)
                    (=>
                      (<= pa (polysquare n a2 a1 a0))
                      (=> (<= ps (* sc pa)) (<= ps (polysquare n b2 b1 b0))))))))))))))

;; polysquare_update
(assert
  (forall ((na Int) (nb Int) (a2 Int) (a1 Int) (a0 Int) (pa Int))
    (=>
      (and (< 0 na) (<= na nb))
      (=>
        (<= 0 a2)
        (=>
          (<= 0 a1)
          (=>
            (<= 0 a0)
            (=>
              (<= pa (polysquare na a2 a1 a0))
              (<= pa (polysquare nb a2 a1 a0)))))))))

;; add_im_re
(assert
  (forall ((i complex) (j complex))
    (and
      (= (infix_pldt i j) (infix_pldt
                            (infix_pldt (t_real_part i) (t_real_part j))
                            (infix_asdt
                              im
                              (infix_pldt (t_im_part i) (t_im_part j)))))
      (and
        (= (t_real_part (infix_pldt i j)) (infix_pldt
                                            (t_real_part i)
                                            (t_real_part j)))
        (= (t_im_part (infix_pldt i j)) (infix_pldt
                                          (t_im_part i)
                                          (t_im_part j)))))))

;; add_real_part
(assert
  (forall ((i complex) (j complex))
    (= (infix_pldt (t_real_part i) (t_real_part j)) (t_real_part
                                                      (infix_pldt i j)))))

;; add_im_part
(assert
  (forall ((i complex) (j complex))
    (= (infix_pldt (t_im_part i) (t_im_part j)) (t_im_part (infix_pldt i j)))))

;; add_real_part_rev
(assert
  (forall ((i complex) (j complex))
    (= (t_real_part (infix_pldt i j)) (infix_pldt
                                        (t_real_part i)
                                        (t_real_part j)))))

;; add_im_part_rev
(assert
  (forall ((i complex) (j complex))
    (= (t_im_part (infix_pldt i j)) (infix_pldt (t_im_part i) (t_im_part j)))))

;; mult_distr_add_r
(assert
  (forall ((a complex) (b complex) (c complex))
    (= (infix_asdt a (infix_pldt b c)) (infix_pldt
                                         (infix_asdt a b)
                                         (infix_asdt a c)))))

;; add_add_minus
(assert
  (forall ((a complex) (b complex) (c complex))
    (= (infix_pldt a (infix_mndt b c)) (infix_mndt (infix_pldt a b) c))))

;; mult_distr_minus
(assert
  (forall ((a complex) (b complex) (c complex))
    (= (infix_asdt a (infix_mndt b c)) (infix_mndt
                                         (infix_asdt a b)
                                         (infix_asdt a c)))))

;; minus_out
(assert
  (forall ((a complex) (b complex))
    (= (infix_asdt (prefix_mndt a) b) (prefix_mndt (infix_asdt a b)))))

;; mult_distr_add_r_rev
(assert
  (forall ((a complex) (b complex) (c complex))
    (= (infix_pldt (infix_asdt a b) (infix_asdt a c)) (infix_asdt
                                                        a
                                                        (infix_pldt b c)))))

;; mult_distr_minus_rev
(assert
  (forall ((a complex) (b complex) (c complex))
    (= (infix_mndt (infix_asdt a b) (infix_asdt a c)) (infix_asdt
                                                        a
                                                        (infix_mndt b c)))))

;; div_distr_add
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (not (= a c_zero))
      (= (infix_sldt (infix_pldt b c) a) (infix_pldt
                                           (infix_sldt b a)
                                           (infix_sldt c a))))))

;; div_distr_minus
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (not (= a c_zero))
      (= (infix_sldt (infix_mndt b c) a) (infix_mndt
                                           (infix_sldt b a)
                                           (infix_sldt c a))))))

;; div_distr_add_rev
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (not (= a c_zero))
      (= (infix_pldt (infix_sldt b a) (infix_sldt c a)) (infix_sldt
                                                          (infix_pldt b c)
                                                          a)))))

;; div_distr_minus_rev
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (not (= a c_zero))
      (= (infix_mndt (infix_sldt b a) (infix_sldt c a)) (infix_sldt
                                                          (infix_mndt b c)
                                                          a)))))

;; mult_distr_add_l
(assert
  (forall ((a complex) (b complex) (c complex))
    (= (infix_asdt (infix_pldt b c) a) (infix_pldt
                                         (infix_asdt a b)
                                         (infix_asdt a c)))))

;; mult_distr_add_l_rev
(assert
  (forall ((a complex) (b complex) (c complex))
    (= (infix_pldt (infix_asdt b a) (infix_asdt c a)) (infix_asdt
                                                        (infix_pldt b c)
                                                        a))))

;; mult_distr_minus_r
(assert
  (forall ((a complex) (b complex) (c complex))
    (= (infix_asdt a (infix_mndt b c)) (infix_mndt
                                         (infix_asdt a b)
                                         (infix_asdt a c)))))

;; mult_distr_minus_ll
(assert
  (forall ((a complex) (b complex) (c complex))
    (= (infix_asdt (infix_pldt (prefix_mndt b) c) a) (infix_pldt
                                                       (infix_asdt
                                                         (prefix_mndt a)
                                                         b)
                                                       (infix_asdt a c)))))

;; mult_distr_minus_ri
(assert
  (forall ((a complex) (b complex) (c complex))
    (= (infix_asdt (infix_mndt b c) a) (infix_mndt
                                         (infix_asdt a b)
                                         (infix_asdt a c)))))

;; minus_distr_op
(assert
  (forall ((a complex) (b complex) (c complex))
    (= (infix_mndt a (infix_pldt b c)) (infix_mndt (infix_mndt a b) c))))

;; mult_distr_minus_l
(assert
  (forall ((a complex) (b complex) (c complex))
    (= (infix_asdt (infix_mndt b c) a) (infix_mndt
                                         (infix_asdt a b)
                                         (infix_asdt a c)))))

;; assoc_right
(assert
  (forall ((a complex) (b complex) (c complex))
    (= (infix_pldt a (infix_pldt b c)) (infix_pldt (infix_pldt a b) c))))

;; assoc_right_mult
(assert
  (forall ((a complex) (b complex) (c complex))
    (= (infix_asdt a (infix_asdt b c)) (infix_asdt (infix_asdt a b) c))))

;; minus_elim
(assert
  (forall ((a complex) (b complex))
    (= (infix_mndt a b) (infix_pldt a (prefix_mndt b)))))

;; minus_eq_t
(assert
  (forall ((a complex) (b complex) (aqt complex) (bqt complex))
    (=> (= a aqt) (=> (= b bqt) (= (infix_mndt a b) (infix_mndt aqt bqt))))))

;; minus_distr_elim
(assert
  (forall ((a complex) (b complex) (c complex))
    (= (infix_mndt a (infix_pldt b c)) (infix_pldt
                                         (infix_pldt a (prefix_mndt b))
                                         (prefix_mndt c)))))

;; plus_minus_distr_elim
(assert
  (forall ((a complex) (b complex) (c complex))
    (= (infix_pldt a (prefix_mndt (infix_pldt b c))) (infix_pldt
                                                       (infix_pldt
                                                         a
                                                         (prefix_mndt b))
                                                       (prefix_mndt c)))))

;; def_by_minus
(assert
  (forall ((x complex) (y complex) (z complex))
    (=> (= x (infix_mndt y z)) (= y (infix_pldt x z)))))

;; switch
(assert
  (forall ((a complex) (b complex) (c complex))
    (= (infix_pldt (infix_pldt a b) c) (infix_pldt (infix_pldt a c) b))))

;; meet_a_c
(assert
  (forall ((a complex) (b complex) (c complex) (d complex))
    (= (infix_pldt (infix_pldt (infix_pldt a b) c) d) (infix_pldt
                                                        (infix_pldt
                                                          (infix_pldt a c)
                                                          b)
                                                        d))))

;; meet_a_d
(assert
  (forall ((a complex) (b complex) (c complex) (d complex))
    (= (infix_pldt (infix_pldt (infix_pldt a b) c) d) (infix_pldt
                                                        (infix_pldt
                                                          (infix_pldt a d)
                                                          b)
                                                        c))))

;; meet_b_c
(assert
  (forall ((a complex) (b complex) (c complex) (d complex))
    (= (infix_pldt (infix_pldt (infix_pldt a b) c) d) (infix_pldt
                                                        (infix_pldt
                                                          (infix_pldt b c)
                                                          a)
                                                        d))))

;; meet_b_d
(assert
  (forall ((a complex) (b complex) (c complex) (d complex))
    (= (infix_pldt (infix_pldt (infix_pldt a b) c) d) (infix_pldt
                                                        (infix_pldt
                                                          (infix_pldt b d)
                                                          a)
                                                        c))))

;; meet_c_d
(assert
  (forall ((a complex) (b complex) (c complex) (d complex))
    (= (infix_pldt (infix_pldt (infix_pldt a b) c) d) (infix_pldt
                                                        (infix_pldt
                                                          (infix_pldt c d)
                                                          a)
                                                        b))))

;; inv_add
(assert
  (forall ((a complex) (b complex))
    (= (infix_pldt (infix_pldt a (prefix_mndt a)) b) b)))

;; switch_m
(assert
  (forall ((a complex) (b complex) (c complex))
    (= (infix_pldt (infix_pldt a b) c) (infix_pldt (infix_pldt a c) b))))

;; meet_a_c_m
(assert
  (forall ((a complex) (b complex) (c complex) (d complex))
    (= (infix_pldt (infix_pldt (infix_pldt a b) c) d) (infix_pldt
                                                        (infix_pldt
                                                          (infix_pldt a c)
                                                          b)
                                                        d))))

;; meet_a_d_m
(assert
  (forall ((a complex) (b complex) (c complex) (d complex))
    (= (infix_pldt (infix_pldt (infix_pldt a b) c) d) (infix_pldt
                                                        (infix_pldt
                                                          (infix_pldt a d)
                                                          b)
                                                        c))))

;; meet_b_c_m
(assert
  (forall ((a complex) (b complex) (c complex) (d complex))
    (= (infix_pldt (infix_pldt (infix_pldt a b) c) d) (infix_pldt
                                                        (infix_pldt
                                                          (infix_pldt b c)
                                                          a)
                                                        d))))

;; meet_b_d_m
(assert
  (forall ((a complex) (b complex) (c complex) (d complex))
    (= (infix_pldt (infix_pldt (infix_pldt a b) c) d) (infix_pldt
                                                        (infix_pldt
                                                          (infix_pldt b d)
                                                          a)
                                                        c))))

;; meet_c_d_m
(assert
  (forall ((a complex) (b complex) (c complex) (d complex))
    (= (infix_pldt (infix_pldt (infix_pldt a b) c) d) (infix_pldt
                                                        (infix_pldt
                                                          (infix_pldt c d)
                                                          a)
                                                        b))))

;; t_real_part_add
(assert
  (forall ((a complex) (b complex))
    (= (t_real_part (infix_pldt a b)) (infix_pldt
                                        (t_real_part a)
                                        (t_real_part b)))))

;; t_real_part_subs
(assert
  (forall ((a complex) (b complex))
    (= (t_real_part (infix_mndt a b)) (infix_mndt
                                        (t_real_part a)
                                        (t_real_part b)))))

;; t_im_part_add
(assert
  (forall ((a complex) (b complex))
    (= (t_im_part (infix_pldt a b)) (infix_pldt (t_im_part a) (t_im_part b)))))

;; t_im_part_subs
(assert
  (forall ((a complex) (b complex))
    (= (t_im_part (infix_mndt a b)) (infix_mndt (t_im_part a) (t_im_part b)))))

;; t_real_part_real
(assert (forall ((a complex)) (=> (real_ a) (= (t_real_part a) a))))

;; t_real_part_im
(assert (forall ((a complex)) (=> (pure_im_ a) (= (t_real_part a) c_zero))))

;; im_t_im_part_im
(assert
  (forall ((a complex))
    (=> (pure_im_ a) (= (infix_asdt im (t_im_part a)) a))))

;; t_im_part_im
(assert
  (forall ((a complex))
    (=> (pure_im_ a) (= (t_im_part a) (infix_asdt (prefix_mndt im) a)))))

;; t_im_part_real
(assert (forall ((a complex)) (=> (real_ a) (= (t_im_part a) c_zero))))

;; a_div_b_mult_a
(assert
  (forall ((a complex) (b complex) (c complex) (d complex))
    (=>
      (not (= b c_zero))
      (=>
        (not (= c c_zero))
        (=>
          (= d (infix_sldt c_one b))
          (=>
            (= a c)
            (= (infix_asdt (infix_sldt a b) (infix_sldt c_one c)) d)))))))

;; i_to_c
(declare-fun i_to_c (Int) complex)

;; i_to_c'def
(assert (forall ((i Int)) (= (i_to_c i) (r_to_c (from_int i)))))

;; i_to_c'spec
(assert (forall ((i Int)) (real_ (i_to_c i))))

;; i_to_c_zero
(assert (= (i_to_c 0) c_zero))

;; i_to_c_surj
(assert
  (forall ((i Int) (j Int))
    (=> (not (= i j)) (not (= (i_to_c i) (i_to_c j))))))

;; i_to_c_eq
(assert (forall ((i Int) (j Int)) (=> (= i j) (= (i_to_c i) (i_to_c j)))))

;; i_to_c_inf
(assert
  (forall ((i Int) (j Int)) (=> (< i j) (infix_lsdt (i_to_c i) (i_to_c j)))))

;; i_to_c_nzero
(assert (forall ((i Int)) (=> (not (= i 0)) (not (= (i_to_c i) c_zero)))))

;; i_to_c_one
(assert (= (i_to_c 1) c_one))

;; i_to_c_add
(assert
  (forall ((i Int) (j Int))
    (= (infix_pldt (i_to_c i) (i_to_c j)) (i_to_c (+ i j)))))

;; i_to_c_add_rev
(assert
  (forall ((i Int) (j Int))
    (= (i_to_c (+ i j)) (infix_pldt (i_to_c i) (i_to_c j)))))

;; i_to_c_ttwo
(assert (= (i_to_c 2) (infix_pldt c_one c_one)))

;; i_to_c_pos
(assert (forall ((a Int)) (=> (<= 0 a) (infix_lseqdt c_zero (i_to_c a)))))

;; i_to_c_minus
(assert (forall ((a Int)) (= (i_to_c (- a)) (prefix_mndt (i_to_c a)))))

;; i_to_c_strict_pos
(assert (forall ((a Int)) (=> (< 0 a) (infix_lsdt c_zero (i_to_c a)))))

;; i_to_c_mult_pos
(assert
  (forall ((i Int) (j Int))
    (=> (<= 0 j) (= (infix_asdt (i_to_c i) (i_to_c j)) (i_to_c (* i j))))))

;; i_to_c_mult
(assert
  (forall ((i Int) (j Int))
    (= (infix_asdt (i_to_c i) (i_to_c j)) (i_to_c (* i j)))))

;; i_to_c_mult_rev
(assert
  (forall ((i Int) (j Int))
    (= (i_to_c (* i j)) (infix_asdt (i_to_c i) (i_to_c j)))))

;; i_to_c_mult_assoc
(assert
  (forall ((x complex) (i Int) (j Int))
    (= (infix_asdt x (i_to_c (* i j))) (infix_asdt
                                         (infix_asdt x (i_to_c i))
                                         (i_to_c j)))))

;; i_to_c_mult_assoc_rev
(assert
  (forall ((x complex) (i Int) (j Int))
    (= (infix_asdt (infix_asdt x (i_to_c i)) (i_to_c j)) (infix_asdt
                                                           x
                                                           (i_to_c (* i j))))))

;; i_to_c_sub
(assert
  (forall ((i Int) (j Int))
    (= (infix_mndt (i_to_c i) (i_to_c j)) (i_to_c (- i j)))))

;; i_to_c_sub_rev
(assert
  (forall ((i Int) (j Int))
    (= (i_to_c (- i j)) (infix_mndt (i_to_c i) (i_to_c j)))))

;; i_to_c_opp
(assert (forall ((i Int)) (= (i_to_c (- i)) (prefix_mndt (i_to_c i)))))

;; i_to_c_div
(assert
  (forall ((i Int) (j Int))
    (=>
      (not (= j 0))
      (= (infix_sldt (i_to_c (* i j)) (i_to_c j)) (i_to_c i)))))

;; i_to_c_minus_mult
(assert
  (forall ((i Int) (j Int))
    (= (infix_asdt (i_to_c (- i)) (i_to_c j)) (infix_asdt
                                                (i_to_c i)
                                                (i_to_c (- j))))))

;; i_to_c_div_leq_c_one
(assert
  (forall ((a Int) (b Int))
    (=>
      (and (<= 0 a) (< a b))
      (infix_lseqdt (infix_sldt (i_to_c a) (i_to_c b)) c_one))))

;; compat_i_to_c_infeq
(assert
  (forall ((a Int) (b Int))
    (=> (<= a b) (infix_lseqdt (i_to_c a) (i_to_c b)))))

;; compat_i_to_c_inf
(assert
  (forall ((a Int) (b Int)) (=> (< a b) (infix_lsdt (i_to_c a) (i_to_c b)))))

;; compat_i_to_c_inf_rev
(assert
  (forall ((a Int) (b Int)) (=> (infix_lsdt (i_to_c a) (i_to_c b)) (< a b))))

;; compat_i_to_c_sup
(assert
  (forall ((a Int) (b Int)) (=> (< b a) (infix_gtdt (i_to_c a) (i_to_c b)))))

;; positive_int_squrt
(assert
  (forall ((i Int)) (=> (< 0 i) (infix_gtdt (square_rt (i_to_c i)) c_zero))))

;; non_null_int_squrt
(assert
  (forall ((i Int)) (=> (< 0 i) (not (= (square_rt (i_to_c i)) c_zero)))))

;; nonn_part
(declare-fun nonn_part (ty
  ty
  uni
  uni
  uni) uni)

;; nonn_part_sort
(assert
  (forall ((a ty) (im1 ty))
    (forall ((x uni) (x1 uni) (x2 uni))
      (sort (set1 a) (nonn_part im1 a x x1 x2)))))

;; result
(declare-fun result2 (ty
  ty
  uni
  uni) uni)

;; result_sort
(assert
  (forall ((a ty) (im1 ty))
    (forall ((x uni) (x1 uni))
      (sort (infix_mngt a bool) (result2 im1 a x x1)))))

;; result'def
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))) (t (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (e circuit))
    (=
      (= (tb2t10
           (infix_at
             bool
             circuit1
             (result2
               (infix_mngt
                 (infix_mngt int int)
                 (infix_mngt (infix_mngt int int) (infix_mngt int int)))
               circuit1
               (t2tb23 op1)
               (t2tb2 t))
             (t2tb13 e))) true)
      (not
        (neutral
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          (t2tb23 op1)
          (t2tb3 (select t e)))))))

;; result'def
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array Int Int)) (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int))))) (t (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (e (Array Int Int)))
    (=
      (= (tb2t10
           (infix_at
             bool
             (infix_mngt int int)
             (result2
               (infix_mngt (infix_mngt int int) (infix_mngt int int))
               (infix_mngt int int)
               (t2tb25 op1)
               (t2tb3 t))
             (t2tb7 e))) true)
      (not
        (neutral
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (t2tb25 op1)
          (t2tb5 (select t e)))))))

;; result'def
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (t (Array (Array Int Int) (Array Int Int))) (e (Array Int Int)))
    (=
      (= (tb2t10
           (infix_at
             bool
             (infix_mngt int int)
             (result2
               (infix_mngt int int)
               (infix_mngt int int)
               (t2tb3 op1)
               (t2tb5 t))
             (t2tb7 e))) true)
      (not (neutral (infix_mngt int int) (t2tb3 op1) (t2tb7 (select t e)))))))

;; result'def
(assert
  (forall ((op1 (Array Int (Array Int Int))) (t (Array Int Int)) (e Int))
    (=
      (= (tb2t10
           (infix_at
             bool
             int
             (result2 int int (t2tb9 op1) (t2tb7 t))
             (t2tb8 e))) true)
      (not (neutral int (t2tb9 op1) (t2tb8 (select t e)))))))

;; result'def
(assert
  (forall ((a ty) (im1 ty))
    (forall ((op1 uni) (t uni) (e uni))
      (=
        (= (tb2t10 (infix_at bool a (result2 im1 a op1 t) e)) true)
        (not (neutral im1 op1 (infix_at im1 a t e)))))))

;; nonn_part'def
(assert
  (forall ((a ty) (im1 ty))
    (forall ((op1 uni) (s uni) (t uni))
      (= (nonn_part im1 a op1 s t) (filter_ a s (result2 im1 a op1 t))))))

;; nonn_part'spec
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))) (s (set circuit)) (t (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (forall ((e circuit))
      (=
        (mem
          circuit1
          (t2tb13 e)
          (nonn_part
            (infix_mngt
              (infix_mngt int int)
              (infix_mngt (infix_mngt int int) (infix_mngt int int)))
            circuit1
            (t2tb23 op1)
            (t2tb12 s)
            (t2tb2 t)))
        (and
          (mem circuit1 (t2tb13 e) (t2tb12 s))
          (not
            (neutral
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              (t2tb23 op1)
              (t2tb3 (select t e)))))))))

;; nonn_part'spec
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array Int Int)) (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int))))) (s (set (Array Int Int))) (t (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (forall ((e (Array Int Int)))
      (=
        (mem
          (infix_mngt int int)
          (t2tb7 e)
          (nonn_part
            (infix_mngt (infix_mngt int int) (infix_mngt int int))
            (infix_mngt int int)
            (t2tb25 op1)
            (t2tb15 s)
            (t2tb3 t)))
        (and
          (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
          (not
            (neutral
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (t2tb25 op1)
              (t2tb5 (select t e)))))))))

;; nonn_part'spec
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (t (Array (Array Int Int) (Array Int Int))))
    (forall ((e (Array Int Int)))
      (=
        (mem
          (infix_mngt int int)
          (t2tb7 e)
          (nonn_part
            (infix_mngt int int)
            (infix_mngt int int)
            (t2tb3 op1)
            (t2tb15 s)
            (t2tb5 t)))
        (and
          (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
          (not
            (neutral (infix_mngt int int) (t2tb3 op1) (t2tb7 (select t e)))))))))

;; nonn_part'spec
(assert
  (forall ((op1 (Array Int (Array Int Int))) (s (set Int)) (t (Array Int Int)))
    (forall ((e Int))
      (=
        (mem
          int
          (t2tb8 e)
          (nonn_part int int (t2tb9 op1) (t2tb16 s) (t2tb7 t)))
        (and
          (mem int (t2tb8 e) (t2tb16 s))
          (not (neutral int (t2tb9 op1) (t2tb8 (select t e)))))))))

;; nonn_part'spec
(assert
  (forall ((a ty) (im1 ty))
    (forall ((op1 uni) (s uni) (t uni))
      (forall ((e uni))
        (=
          (mem a e (nonn_part im1 a op1 s t))
          (and (mem a e s) (not (neutral im1 op1 (infix_at im1 a t e)))))))))

;; n_part
(declare-fun n_part (ty
  ty
  uni
  uni
  uni) uni)

;; n_part_sort
(assert
  (forall ((a ty) (im1 ty))
    (forall ((x uni) (x1 uni) (x2 uni))
      (sort (set1 a) (n_part im1 a x x1 x2)))))

;; result
(declare-fun result3 (ty
  ty
  uni
  uni) uni)

;; result_sort
(assert
  (forall ((a ty) (im1 ty))
    (forall ((x uni) (x1 uni))
      (sort (infix_mngt a bool) (result3 im1 a x x1)))))

;; result'def
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))) (t (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (e circuit))
    (=
      (= (tb2t10
           (infix_at
             bool
             circuit1
             (result3
               (infix_mngt
                 (infix_mngt int int)
                 (infix_mngt (infix_mngt int int) (infix_mngt int int)))
               circuit1
               (t2tb23 op1)
               (t2tb2 t))
             (t2tb13 e))) true)
      (neutral
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        (t2tb23 op1)
        (t2tb3 (select t e))))))

;; result'def
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array Int Int)) (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int))))) (t (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (e (Array Int Int)))
    (=
      (= (tb2t10
           (infix_at
             bool
             (infix_mngt int int)
             (result3
               (infix_mngt (infix_mngt int int) (infix_mngt int int))
               (infix_mngt int int)
               (t2tb25 op1)
               (t2tb3 t))
             (t2tb7 e))) true)
      (neutral
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (t2tb25 op1)
        (t2tb5 (select t e))))))

;; result'def
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (t (Array (Array Int Int) (Array Int Int))) (e (Array Int Int)))
    (=
      (= (tb2t10
           (infix_at
             bool
             (infix_mngt int int)
             (result3
               (infix_mngt int int)
               (infix_mngt int int)
               (t2tb3 op1)
               (t2tb5 t))
             (t2tb7 e))) true)
      (neutral (infix_mngt int int) (t2tb3 op1) (t2tb7 (select t e))))))

;; result'def
(assert
  (forall ((op1 (Array Int (Array Int Int))) (t (Array Int Int)) (e Int))
    (=
      (= (tb2t10
           (infix_at
             bool
             int
             (result3 int int (t2tb9 op1) (t2tb7 t))
             (t2tb8 e))) true)
      (neutral int (t2tb9 op1) (t2tb8 (select t e))))))

;; result'def
(assert
  (forall ((a ty) (im1 ty))
    (forall ((op1 uni) (t uni) (e uni))
      (=
        (= (tb2t10 (infix_at bool a (result3 im1 a op1 t) e)) true)
        (neutral im1 op1 (infix_at im1 a t e))))))

;; n_part'def
(assert
  (forall ((a ty) (im1 ty))
    (forall ((op1 uni) (s uni) (t uni))
      (= (n_part im1 a op1 s t) (filter_ a s (result3 im1 a op1 t))))))

;; n_part'spec
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))) (s (set circuit)) (t (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (forall ((e circuit))
      (=
        (mem
          circuit1
          (t2tb13 e)
          (n_part
            (infix_mngt
              (infix_mngt int int)
              (infix_mngt (infix_mngt int int) (infix_mngt int int)))
            circuit1
            (t2tb23 op1)
            (t2tb12 s)
            (t2tb2 t)))
        (and
          (mem circuit1 (t2tb13 e) (t2tb12 s))
          (neutral
            (infix_mngt
              (infix_mngt int int)
              (infix_mngt (infix_mngt int int) (infix_mngt int int)))
            (t2tb23 op1)
            (t2tb3 (select t e))))))))

;; n_part'spec
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array Int Int)) (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int))))) (s (set (Array Int Int))) (t (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (forall ((e (Array Int Int)))
      (=
        (mem
          (infix_mngt int int)
          (t2tb7 e)
          (n_part
            (infix_mngt (infix_mngt int int) (infix_mngt int int))
            (infix_mngt int int)
            (t2tb25 op1)
            (t2tb15 s)
            (t2tb3 t)))
        (and
          (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
          (neutral
            (infix_mngt (infix_mngt int int) (infix_mngt int int))
            (t2tb25 op1)
            (t2tb5 (select t e))))))))

;; n_part'spec
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (t (Array (Array Int Int) (Array Int Int))))
    (forall ((e (Array Int Int)))
      (=
        (mem
          (infix_mngt int int)
          (t2tb7 e)
          (n_part
            (infix_mngt int int)
            (infix_mngt int int)
            (t2tb3 op1)
            (t2tb15 s)
            (t2tb5 t)))
        (and
          (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
          (neutral (infix_mngt int int) (t2tb3 op1) (t2tb7 (select t e))))))))

;; n_part'spec
(assert
  (forall ((op1 (Array Int (Array Int Int))) (s (set Int)) (t (Array Int Int)))
    (forall ((e Int))
      (=
        (mem int (t2tb8 e) (n_part int int (t2tb9 op1) (t2tb16 s) (t2tb7 t)))
        (and
          (mem int (t2tb8 e) (t2tb16 s))
          (neutral int (t2tb9 op1) (t2tb8 (select t e))))))))

;; n_part'spec
(assert
  (forall ((a ty) (im1 ty))
    (forall ((op1 uni) (s uni) (t uni))
      (forall ((e uni))
        (=
          (mem a e (n_part im1 a op1 s t))
          (and (mem a e s) (neutral im1 op1 (infix_at im1 a t e))))))))

;; nullity_partition
(assert
  (forall ((a ty) (im1 ty))
    (forall ((op1 uni) (s uni) (t uni))
      (=>
        (sort (set1 a) s)
        (=>
          (commut im1 op1)
          (and
            (= s (union1 a (nonn_part im1 a op1 s t) (n_part im1 a op1 s t)))
            (= (inter a (nonn_part im1 a op1 s t) (n_part im1 a op1 s t)) 
            (empty
              a))))))))

;; iterate_neutral
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))) (s (set circuit)) (t (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (=>
      (iterable
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        (t2tb23 op1))
      (=>
        (commut
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          (t2tb23 op1))
        (=>
          (forall ((a circuit))
            (=>
              (mem circuit1 (t2tb13 a) (t2tb12 s))
              (= (select t a) (tb2t3
                                (neutral_elt
                                  (infix_mngt
                                    (infix_mngt int int)
                                    (infix_mngt
                                      (infix_mngt int int)
                                      (infix_mngt int int)))
                                  (t2tb23 op1))))))
          (= (tb2t3
               (iterate
                 (infix_mngt
                   (infix_mngt int int)
                   (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                 circuit1
                 (t2tb23 op1)
                 (t2tb12 s)
                 (t2tb2 t))) (tb2t3
                               (neutral_elt
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int)))
                                 (t2tb23 op1)))))))))

;; iterate_neutral
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array Int Int)) (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int))))) (s (set (Array Int Int))) (t (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (=>
      (iterable
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (t2tb25 op1))
      (=>
        (commut
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (t2tb25 op1))
        (=>
          (forall ((a (Array Int Int)))
            (=>
              (mem (infix_mngt int int) (t2tb7 a) (t2tb15 s))
              (= (select t a) (tb2t5
                                (neutral_elt
                                  (infix_mngt
                                    (infix_mngt int int)
                                    (infix_mngt int int))
                                  (t2tb25 op1))))))
          (= (tb2t5
               (iterate
                 (infix_mngt (infix_mngt int int) (infix_mngt int int))
                 (infix_mngt int int)
                 (t2tb25 op1)
                 (t2tb15 s)
                 (t2tb3 t))) (tb2t5
                               (neutral_elt
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt int int))
                                 (t2tb25 op1)))))))))

;; iterate_neutral
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (t (Array (Array Int Int) (Array Int Int))))
    (=>
      (iterable (infix_mngt int int) (t2tb3 op1))
      (=>
        (commut (infix_mngt int int) (t2tb3 op1))
        (=>
          (forall ((a (Array Int Int)))
            (=>
              (mem (infix_mngt int int) (t2tb7 a) (t2tb15 s))
              (= (select t a) (tb2t7
                                (neutral_elt
                                  (infix_mngt int int)
                                  (t2tb3 op1))))))
          (= (tb2t7
               (iterate
                 (infix_mngt int int)
                 (infix_mngt int int)
                 (t2tb3 op1)
                 (t2tb15 s)
                 (t2tb5 t))) (tb2t7
                               (neutral_elt (infix_mngt int int) (t2tb3 op1)))))))))

;; iterate_neutral
(assert
  (forall ((op1 (Array Int (Array Int Int))) (s (set Int)) (t (Array Int Int)))
    (=>
      (iterable int (t2tb9 op1))
      (=>
        (commut int (t2tb9 op1))
        (=>
          (forall ((a Int))
            (=>
              (mem int (t2tb8 a) (t2tb16 s))
              (= (select t a) (tb2t8 (neutral_elt int (t2tb9 op1))))))
          (= (tb2t8 (iterate int int (t2tb9 op1) (t2tb16 s) (t2tb7 t))) 
          (tb2t8
            (neutral_elt int (t2tb9 op1)))))))))

;; iterate_neutral
(assert
  (forall ((a ty) (im1 ty))
    (forall ((op1 uni) (s uni) (t uni))
      (=>
        (iterable im1 op1)
        (=>
          (commut im1 op1)
          (=>
            (forall ((a1 uni))
              (=>
                (sort a a1)
                (=>
                  (mem a a1 s)
                  (= (infix_at im1 a t a1) (neutral_elt im1 op1)))))
            (= (iterate im1 a op1 s t) (neutral_elt im1 op1))))))))

;; iterate_nullity_partition
(assert
  (forall ((a ty) (im1 ty))
    (forall ((op1 uni) (s uni) (t uni))
      (=>
        (iterable im1 op1)
        (=>
          (commut im1 op1)
          (= (iterate im1 a op1 s t) (iterate
                                       im1
                                       a
                                       op1
                                       (nonn_part im1 a op1 s t)
                                       t)))))))

;; couple
(declare-fun couple (ty
  ty
  ty
  uni
  uni) uni)

;; couple_sort
(assert
  (forall ((a ty) (b ty) (im1 ty))
    (forall ((x uni) (x1 uni)) (sort im1 (couple im1 b a x x1)))))

;; couple'def
(assert
  (forall ((a ty))
    (forall ((f uni))
      (forall ((a1 uni) (b circuit))
        (= (tb2t3
             (couple
               (infix_mngt
                 (infix_mngt int int)
                 (infix_mngt (infix_mngt int int) (infix_mngt int int)))
               circuit1
               a
               f
               (Tuple2 a circuit1 a1 (t2tb13 b)))) (select (tb2t2
                                                             (infix_at
                                                               (infix_mngt
                                                                 circuit1
                                                                 (infix_mngt
                                                                   (infix_mngt
                                                                    int
                                                                    int)
                                                                   (infix_mngt
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    (infix_mngt
                                                                    int
                                                                    int))))
                                                               a
                                                               f
                                                               a1)) b))))))

;; couple'def
(assert
  (forall ((a ty))
    (forall ((f uni))
      (forall ((a1 uni) (b (Array Int Int)))
        (= (tb2t5
             (couple
               (infix_mngt (infix_mngt int int) (infix_mngt int int))
               (infix_mngt int int)
               a
               f
               (Tuple2 a (infix_mngt int int) a1 (t2tb7 b)))) (select 
        (tb2t3
          (infix_at
            (infix_mngt
              (infix_mngt int int)
              (infix_mngt (infix_mngt int int) (infix_mngt int int)))
            a
            f
            a1)) b))))))

;; couple'def
(assert
  (forall ((a ty))
    (forall ((f uni))
      (forall ((a1 uni) (b (Array Int Int)))
        (= (tb2t7
             (couple
               (infix_mngt int int)
               (infix_mngt int int)
               a
               f
               (Tuple2 a (infix_mngt int int) a1 (t2tb7 b)))) (select 
        (tb2t5
          (infix_at
            (infix_mngt (infix_mngt int int) (infix_mngt int int))
            a
            f
            a1)) b))))))

;; couple'def
(assert
  (forall ((a ty))
    (forall ((f uni))
      (forall ((a1 uni) (b Int))
        (= (tb2t8 (couple int int a f (Tuple2 a int a1 (t2tb8 b)))) (select 
        (tb2t7
          (infix_at (infix_mngt int int) a f a1)) b))))))

;; couple'def
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (forall ((a circuit) (b (Array Int Int)))
      (= (tb2t5
           (couple
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (infix_mngt int int)
             circuit1
             (t2tb2 f)
             (Tuple2 circuit1 (infix_mngt int int) (t2tb13 a) (t2tb7 b)))) (select (select f a) b)))))

;; couple'def
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (forall ((a (Array Int Int)) (b (Array Int Int)))
      (= (tb2t7
           (couple
             (infix_mngt int int)
             (infix_mngt int int)
             (infix_mngt int int)
             (t2tb3 f)
             (Tuple2
               (infix_mngt int int)
               (infix_mngt int int)
               (t2tb7 a)
               (t2tb7 b)))) (select (select f a) b)))))

;; couple'def
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))))
    (forall ((a (Array Int Int)) (b Int))
      (= (tb2t8
           (couple
             int
             int
             (infix_mngt int int)
             (t2tb5 f)
             (Tuple2 (infix_mngt int int) int (t2tb7 a) (t2tb8 b)))) (select (select f a) b)))))

;; couple'def
(assert
  (forall ((a ty) (b ty) (im1 ty))
    (forall ((f uni))
      (forall ((a1 uni) (b1 uni))
        (= (couple im1 b a f (Tuple2 a b a1 b1)) (infix_at
                                                   im1
                                                   b
                                                   (infix_at
                                                     (infix_mngt b im1)
                                                     a
                                                     f
                                                     a1)
                                                   b1))))))

;; null_product
(assert
  (forall ((a complex) (b complex))
    (=> (= (infix_asdt a b) c_zero) (or (= a c_zero) (= b c_zero)))))

;; couple_value
(assert
  (forall ((a ty))
    (forall ((f uni) (o uni))
      (= (tb2t3
           (couple
             (infix_mngt
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int)))
             circuit1
             a
             f
             o)) (select (tb2t2
                           (infix_at
                             (infix_mngt
                               circuit1
                               (infix_mngt
                                 (infix_mngt int int)
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt int int))))
                             a
                             f
                             (fir circuit1 a o))) (tb2t13
                                                    (sec1 circuit1 a o)))))))

;; couple_value
(assert
  (forall ((a ty))
    (forall ((f uni) (o uni))
      (= (tb2t5
           (couple
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (infix_mngt int int)
             a
             f
             o)) (select (tb2t3
                           (infix_at
                             (infix_mngt
                               (infix_mngt int int)
                               (infix_mngt
                                 (infix_mngt int int)
                                 (infix_mngt int int)))
                             a
                             f
                             (fir (infix_mngt int int) a o))) (tb2t7
                                                                (sec1
                                                                  (infix_mngt
                                                                    int
                                                                    int)
                                                                  a
                                                                  o)))))))

;; couple_value
(assert
  (forall ((a ty))
    (forall ((f uni) (o uni))
      (= (tb2t7 (couple (infix_mngt int int) (infix_mngt int int) a f o)) (select 
      (tb2t5
        (infix_at
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          a
          f
          (fir (infix_mngt int int) a o))) (tb2t7
                                             (sec1 (infix_mngt int int) a o)))))))

;; couple_value
(assert
  (forall ((a ty))
    (forall ((f uni) (o uni))
      (= (tb2t8 (couple int int a f o)) (select (tb2t7
                                                  (infix_at
                                                    (infix_mngt int int)
                                                    a
                                                    f
                                                    (fir int a o))) (tb2t8
                                                                    (sec1
                                                                    int
                                                                    a
                                                                    o)))))))

;; couple_value
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (o (tuple2 circuit (Array Int Int))))
    (= (tb2t5
         (couple
           (infix_mngt (infix_mngt int int) (infix_mngt int int))
           (infix_mngt int int)
           circuit1
           (t2tb2 f)
           (t2tb30 o))) (select (select f (tb2t13
                                            (fir
                                              (infix_mngt int int)
                                              circuit1
                                              (t2tb30 o)))) (tb2t7
                                                              (sec1
                                                                (infix_mngt
                                                                  int
                                                                  int)
                                                                circuit1
                                                                (t2tb30 o)))))))

;; couple_value
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (o (tuple2 (Array Int Int) (Array Int Int))))
    (= (tb2t7
         (couple
           (infix_mngt int int)
           (infix_mngt int int)
           (infix_mngt int int)
           (t2tb3 f)
           (t2tb32 o))) (select (select f (tb2t7
                                            (fir
                                              (infix_mngt int int)
                                              (infix_mngt int int)
                                              (t2tb32 o)))) (tb2t7
                                                              (sec1
                                                                (infix_mngt
                                                                  int
                                                                  int)
                                                                (infix_mngt
                                                                  int
                                                                  int)
                                                                (t2tb32 o)))))))

;; couple_value
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (o (tuple2 (Array Int Int) Int)))
    (= (tb2t8 (couple int int (infix_mngt int int) (t2tb5 f) (t2tb34 o))) (select (select f 
    (tb2t7
      (fir int (infix_mngt int int) (t2tb34 o)))) (tb2t8
                                                    (sec1
                                                      int
                                                      (infix_mngt int int)
                                                      (t2tb34 o)))))))

;; couple_value
(assert
  (forall ((a ty) (b ty) (im1 ty))
    (forall ((f uni) (o uni))
      (= (couple im1 b a f o) (infix_at
                                im1
                                b
                                (infix_at (infix_mngt b im1) a f (fir b a o))
                                (sec1 b a o))))))

;; couple_value_dev
(assert
  (forall ((a ty))
    (forall ((f uni) (o uni) (a1 uni) (b circuit))
      (=>
        (= o (Tuple2 a circuit1 a1 (t2tb13 b)))
        (= (tb2t3
             (couple
               (infix_mngt
                 (infix_mngt int int)
                 (infix_mngt (infix_mngt int int) (infix_mngt int int)))
               circuit1
               a
               f
               o)) (select (tb2t2
                             (infix_at
                               (infix_mngt
                                 circuit1
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int))))
                               a
                               f
                               a1)) b))))))

;; couple_value_dev
(assert
  (forall ((a ty))
    (forall ((f uni) (o uni) (a1 uni) (b (Array Int Int)))
      (=>
        (= o (Tuple2 a (infix_mngt int int) a1 (t2tb7 b)))
        (= (tb2t5
             (couple
               (infix_mngt (infix_mngt int int) (infix_mngt int int))
               (infix_mngt int int)
               a
               f
               o)) (select (tb2t3
                             (infix_at
                               (infix_mngt
                                 (infix_mngt int int)
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt int int)))
                               a
                               f
                               a1)) b))))))

;; couple_value_dev
(assert
  (forall ((a ty))
    (forall ((f uni) (o uni) (a1 uni) (b (Array Int Int)))
      (=>
        (= o (Tuple2 a (infix_mngt int int) a1 (t2tb7 b)))
        (= (tb2t7 (couple (infix_mngt int int) (infix_mngt int int) a f o)) (select 
        (tb2t5
          (infix_at
            (infix_mngt (infix_mngt int int) (infix_mngt int int))
            a
            f
            a1)) b))))))

;; couple_value_dev
(assert
  (forall ((a ty))
    (forall ((f uni) (o uni) (a1 uni) (b Int))
      (=>
        (= o (Tuple2 a int a1 (t2tb8 b)))
        (= (tb2t8 (couple int int a f o)) (select (tb2t7
                                                    (infix_at
                                                      (infix_mngt int int)
                                                      a
                                                      f
                                                      a1)) b))))))

;; couple_value_dev
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (o (tuple2 circuit (Array Int Int))) (a circuit) (b (Array Int Int)))
    (=>
      (= o (tb2t30
             (Tuple2 circuit1 (infix_mngt int int) (t2tb13 a) (t2tb7 b))))
      (= (tb2t5
           (couple
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (infix_mngt int int)
             circuit1
             (t2tb2 f)
             (t2tb30 o))) (select (select f a) b)))))

;; couple_value_dev
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (o (tuple2 (Array Int Int) (Array Int Int))) (a (Array Int Int)) (b (Array Int Int)))
    (=>
      (= o (tb2t32
             (Tuple2
               (infix_mngt int int)
               (infix_mngt int int)
               (t2tb7 a)
               (t2tb7 b))))
      (= (tb2t7
           (couple
             (infix_mngt int int)
             (infix_mngt int int)
             (infix_mngt int int)
             (t2tb3 f)
             (t2tb32 o))) (select (select f a) b)))))

;; couple_value_dev
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (o (tuple2 (Array Int Int) Int)) (a (Array Int Int)) (b Int))
    (=>
      (= o (tb2t34 (Tuple2 (infix_mngt int int) int (t2tb7 a) (t2tb8 b))))
      (= (tb2t8 (couple int int (infix_mngt int int) (t2tb5 f) (t2tb34 o))) (select (select f a) b)))))

;; couple_value_dev
(assert
  (forall ((a ty) (b ty) (im1 ty))
    (forall ((f uni) (o uni) (a1 uni) (b1 uni))
      (=>
        (= o (Tuple2 a b a1 b1))
        (= (couple im1 b a f o) (infix_at
                                  im1
                                  b
                                  (infix_at (infix_mngt b im1) a f a1)
                                  b1))))))

;; infix +._closure
(declare-fun infix_pldt_closure () (Array complex (Array complex complex)))

;; t2tb
(declare-fun t2tb45 ((Array complex complex)) uni)

;; t2tb_sort
(assert
  (forall ((x (Array complex complex)))
    (sort (infix_mngt complex1 complex1) (t2tb45 x))))

;; tb2t
(declare-fun tb2t45 (uni) (Array complex complex))

;; BridgeL
(assert
  (forall ((i (Array complex complex)))
    (! (= (tb2t45 (t2tb45 i)) i) :pattern ((t2tb45 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=> (sort (infix_mngt complex1 complex1) j) (= (t2tb45 (tb2t45 j)) j)) :pattern (
    (t2tb45
      (tb2t45 j))) )))

;; t2tb
(declare-fun t2tb46 ((Array complex (Array complex complex))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array complex (Array complex complex))))
    (sort (infix_mngt complex1 (infix_mngt complex1 complex1)) (t2tb46 x))))

;; tb2t
(declare-fun tb2t46 (uni) (Array complex (Array complex complex)))

;; BridgeL
(assert
  (forall ((i (Array complex (Array complex complex))))
    (! (= (tb2t46 (t2tb46 i)) i) :pattern ((t2tb46 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort (infix_mngt complex1 (infix_mngt complex1 complex1)) j)
         (= (t2tb46 (tb2t46 j)) j)) :pattern ((t2tb46 (tb2t46 j))) )))

;; infix +._closure_def
(assert
  (forall ((y complex) (y1 complex))
    (= (tb2t
         (infix_at
           complex1
           complex1
           (infix_at
             (infix_mngt complex1 complex1)
             complex1
             (t2tb46 infix_pldt_closure)
             (t2tb y))
           (t2tb y1))) (infix_pldt y y1))))

;; neutral_c_zero
(assert
  (and
    (neutral complex1 (t2tb46 infix_pldt_closure) (t2tb c_zero))
    (iterable complex1 (t2tb46 infix_pldt_closure))))

;; sum
(declare-fun sum (ty
  uni
  uni) complex)

;; sum'def
(assert
  (forall ((a ty))
    (forall ((s uni) (t uni))
      (= (sum a s t) (tb2t
                       (iterate complex1 a (t2tb46 infix_pldt_closure) s t))))))

;; sum_empty
(assert
  (forall ((a ty))
    (forall ((s uni) (t uni)) (=> (is_empty a s) (= (sum a s t) c_zero)))))

;; sum_one
(assert
  (forall ((a ty))
    (forall ((s uni) (t uni))
      (=>
        (= (cardinal a s) 1)
        (= (sum a s t) (tb2t (infix_at complex1 a t (choose1 a s))))))))

;; sum_add
(assert
  (forall ((b ty))
    (forall ((s uni) (f uni) (x uni))
      (=>
        (not (mem b x s))
        (= (sum b (add b x s) f) (infix_pldt
                                   (tb2t (infix_at complex1 b f x))
                                   (sum b s f)))))))

;; sum_plus_one
(assert
  (forall ((b ty))
    (forall ((s uni) (f uni))
      (=>
        (< 1 (cardinal b s))
        (= (sum b s f) (infix_pldt
                         (tb2t (infix_at complex1 b f (choose1 b s)))
                         (sum b (remove b (choose1 b s) s) f)))))))

;; sum_partition
(assert
  (forall ((b ty))
    (forall ((s uni) (sqt uni) (f uni))
      (=>
        (forall ((e uni))
          (=> (sort b e) (=> (mem b e s) (not (mem b e sqt)))))
        (= (sum b (union1 b s sqt) f) (infix_pldt (sum b s f) (sum b sqt f)))))))

;; sum_real
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni))
      (=>
        (forall ((a1 uni))
          (=>
            (sort a a1)
            (=> (mem a a1 s) (real_ (tb2t (infix_at complex1 a f a1))))))
        (=> (< 0 (cardinal a s)) (real_ (sum a s f)))))))

;; fc
(declare-fun fc49 (ty
  ty
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni))
      (sort (infix_mngt b complex1) (fc49 b a x x1)))))

;; t2tb
(declare-fun t2tb47 ((Array circuit complex)) uni)

;; t2tb_sort
(assert
  (forall ((x (Array circuit complex)))
    (sort (infix_mngt circuit1 complex1) (t2tb47 x))))

;; tb2t
(declare-fun tb2t47 (uni) (Array circuit complex))

;; BridgeL
(assert
  (forall ((i (Array circuit complex)))
    (! (= (tb2t47 (t2tb47 i)) i) :pattern ((t2tb47 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=> (sort (infix_mngt circuit1 complex1) j) (= (t2tb47 (tb2t47 j)) j)) :pattern (
    (t2tb47
      (tb2t47 j))) )))

;; t2tb
(declare-fun t2tb48 ((Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) complex)) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) complex)))
    (sort
      (infix_mngt
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        complex1)
      (t2tb48 x))))

;; tb2t
(declare-fun tb2t48 (uni) (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) complex))

;; BridgeL
(assert
  (forall ((i (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) complex)))
    (! (= (tb2t48 (t2tb48 i)) i) :pattern ((t2tb48 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort
           (infix_mngt
             (infix_mngt
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int)))
             complex1)
           j)
         (= (t2tb48 (tb2t48 j)) j)) :pattern ((t2tb48 (tb2t48 j))) )))

;; fc'def
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (t (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) complex)) (b circuit))
    (= (tb2t
         (infix_at
           complex1
           circuit1
           (fc49
             circuit1
             (infix_mngt
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int)))
             (t2tb2 f)
             (t2tb48 t))
           (t2tb13 b))) (tb2t
                          (infix_at
                            complex1
                            (infix_mngt
                              (infix_mngt int int)
                              (infix_mngt
                                (infix_mngt int int)
                                (infix_mngt int int)))
                            (t2tb48 t)
                            (t2tb3 (select f b)))))))

;; t2tb
(declare-fun t2tb49 ((Array (Array Int Int) complex)) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (Array Int Int) complex)))
    (sort (infix_mngt (infix_mngt int int) complex1) (t2tb49 x))))

;; tb2t
(declare-fun tb2t49 (uni) (Array (Array Int Int) complex))

;; BridgeL
(assert
  (forall ((i (Array (Array Int Int) complex)))
    (! (= (tb2t49 (t2tb49 i)) i) :pattern ((t2tb49 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort (infix_mngt (infix_mngt int int) complex1) j)
         (= (t2tb49 (tb2t49 j)) j)) :pattern ((t2tb49 (tb2t49 j))) )))

;; t2tb
(declare-fun t2tb50 ((Array (Array (Array Int Int) (Array Int Int)) complex)) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (Array (Array Int Int) (Array Int Int)) complex)))
    (sort
      (infix_mngt
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        complex1)
      (t2tb50 x))))

;; tb2t
(declare-fun tb2t50 (uni) (Array (Array (Array Int Int) (Array Int Int)) complex))

;; BridgeL
(assert
  (forall ((i (Array (Array (Array Int Int) (Array Int Int)) complex)))
    (! (= (tb2t50 (t2tb50 i)) i) :pattern ((t2tb50 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort
           (infix_mngt
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             complex1)
           j)
         (= (t2tb50 (tb2t50 j)) j)) :pattern ((t2tb50 (tb2t50 j))) )))

;; fc'def
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (t (Array (Array (Array Int Int) (Array Int Int)) complex)) (b (Array Int Int)))
    (= (tb2t
         (infix_at
           complex1
           (infix_mngt int int)
           (fc49
             (infix_mngt int int)
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (t2tb3 f)
             (t2tb50 t))
           (t2tb7 b))) (tb2t
                         (infix_at
                           complex1
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt int int))
                           (t2tb50 t)
                           (t2tb5 (select f b)))))))

;; fc'def
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (t (Array (Array Int Int) complex)) (b (Array Int Int)))
    (= (tb2t
         (infix_at
           complex1
           (infix_mngt int int)
           (fc49
             (infix_mngt int int)
             (infix_mngt int int)
             (t2tb5 f)
             (t2tb49 t))
           (t2tb7 b))) (tb2t
                         (infix_at
                           complex1
                           (infix_mngt int int)
                           (t2tb49 t)
                           (t2tb7 (select f b)))))))

;; t2tb
(declare-fun t2tb51 ((Array Int complex)) uni)

;; t2tb_sort
(assert
  (forall ((x (Array Int complex)))
    (sort (infix_mngt int complex1) (t2tb51 x))))

;; tb2t
(declare-fun tb2t51 (uni) (Array Int complex))

;; BridgeL
(assert
  (forall ((i (Array Int complex)))
    (! (= (tb2t51 (t2tb51 i)) i) :pattern ((t2tb51 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=> (sort (infix_mngt int complex1) j) (= (t2tb51 (tb2t51 j)) j)) :pattern (
    (t2tb51
      (tb2t51 j))) )))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (t (Array Int complex)) (b Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (fc49 int int (t2tb7 f) (t2tb51 t))
           (t2tb8 b))) (tb2t
                         (infix_at
                           complex1
                           int
                           (t2tb51 t)
                           (t2tb8 (select f b)))))))

;; fc'def
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (t uni) (b1 uni))
      (= (tb2t (infix_at complex1 b (fc49 b a f t) b1)) (tb2t
                                                          (infix_at
                                                            complex1
                                                            a
                                                            t
                                                            (infix_at
                                                              a
                                                              b
                                                              f
                                                              b1)))))))

;; map_sum_eq
(assert
  (forall ((a ty) (b ty))
    (forall ((s uni) (f uni) (t uni))
      (=>
        (p_injective a b f s)
        (= (sum a (map1 a b f s) t) (sum b s (fc49 b a f t)))))))

;; fc
(declare-fun fc50 (ty
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((b ty))
    (forall ((x uni) (x1 uni)) (sort (infix_mngt b complex1) (fc50 b x x1)))))

;; fc'def
(assert
  (forall ((b ty))
    (forall ((f uni) (g uni) (k uni))
      (= (tb2t (infix_at complex1 b (fc50 b f g) k)) (infix_pldt
                                                       (tb2t
                                                         (infix_at
                                                           complex1
                                                           b
                                                           f
                                                           k))
                                                       (tb2t
                                                         (infix_at
                                                           complex1
                                                           b
                                                           g
                                                           k)))))))

;; sum_comp
(assert
  (forall ((b ty))
    (forall ((s uni) (f uni) (g uni))
      (= (sum b s (fc50 b f g)) (infix_pldt (sum b s f) (sum b s g))))))

;; fc
(declare-fun fc51 (ty
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((b ty))
    (forall ((x uni) (x1 uni)) (sort (infix_mngt b complex1) (fc51 b x x1)))))

;; fc'def
(assert
  (forall ((b ty))
    (forall ((f uni) (g uni) (k uni))
      (= (tb2t (infix_at complex1 b (fc51 b f g) k)) (infix_pldt
                                                       (tb2t
                                                         (infix_at
                                                           complex1
                                                           b
                                                           f
                                                           k))
                                                       (tb2t
                                                         (infix_at
                                                           complex1
                                                           b
                                                           g
                                                           k)))))))

;; sum_comp_rev
(assert
  (forall ((b ty))
    (forall ((s uni) (f uni) (g uni))
      (= (infix_pldt (sum b s f) (sum b s g)) (sum b s (fc51 b f g))))))

;; infix -._closure
(declare-fun infix_mndt_closure () (Array complex (Array complex complex)))

;; infix -._closure_def
(assert
  (forall ((y complex) (y1 complex))
    (= (tb2t
         (infix_at
           complex1
           complex1
           (infix_at
             (infix_mngt complex1 complex1)
             complex1
             (t2tb46 infix_mndt_closure)
             (t2tb y))
           (t2tb y1))) (infix_mndt y y1))))

;; sum_iter_
(assert
  (and
    (opposite_n
      complex1
      (t2tb46 infix_pldt_closure)
      (t2tb46 infix_mndt_closure)
      (t2tb c_zero))
    (and
      (opposite
        complex1
        (t2tb46 infix_pldt_closure)
        (t2tb46 infix_mndt_closure))
      (and
        (opposite_com
          complex1
          (t2tb46 infix_pldt_closure)
          (t2tb46 infix_mndt_closure))
        (inverse_tuple
          complex1
          (t2tb46 infix_pldt_closure)
          (t2tb46 infix_mndt_closure)
          (t2tb c_zero))))))

;; neutral_zero
(assert (= (tb2t (neutral_elt complex1 (t2tb46 infix_pldt_closure))) c_zero))

;; sum_eq
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (g uni))
      (=>
        (forall ((x uni))
          (=>
            (sort a x)
            (=>
              (mem a x s)
              (= (tb2t (infix_at complex1 a f x)) (tb2t
                                                    (infix_at complex1 a g x))))))
        (= (sum a s f) (sum a s g))))))

;; sum_eq_gen
(assert
  (forall ((a ty))
    (forall ((s uni) (sqt uni) (f uni) (g uni))
      (=>
        (= s sqt)
        (=>
          (forall ((x uni))
            (=>
              (sort a x)
              (=>
                (mem a x s)
                (= (tb2t (infix_at complex1 a f x)) (tb2t
                                                      (infix_at
                                                        complex1
                                                        a
                                                        g
                                                        x))))))
          (= (sum a s f) (sum a sqt g)))))))

;; sum_disjoint_transitivity
(assert
  (forall ((a ty))
    (forall ((s1 uni) (s2 uni) (t uni))
      (=>
        (= (inter a s1 s2) (empty a))
        (= (sum a (union1 a s1 s2) t) (infix_pldt (sum a s1 t) (sum a s2 t)))))))

;; fc
(declare-fun fc52 (ty
  ty
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni))
      (sort (infix_mngt a complex1) (fc52 b a x x1)))))

;; fc
(declare-fun fc53 (ty
  ty
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni))
      (sort (infix_mngt (tuple21 a b) complex1) (fc53 b a x)))))

;; fc'def
(assert
  (forall ((a ty) (b ty))
    (forall ((s2 uni) (f uni) (a1 uni))
      (= (tb2t (infix_at complex1 a (fc52 b a s2 f) a1)) (sum
                                                           b
                                                           s2
                                                           (infix_at
                                                             (infix_mngt
                                                               b
                                                               complex1)
                                                             a
                                                             f
                                                             a1))))))

;; fc'def
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (o uni))
      (= (tb2t (infix_at complex1 (tuple21 a b) (fc53 b a f) o)) (tb2t
                                                                   (infix_at
                                                                    complex1
                                                                    b
                                                                    (infix_at
                                                                    (infix_mngt
                                                                    b
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    (fir
                                                                    b
                                                                    a
                                                                    o))
                                                                    (sec1
                                                                    b
                                                                    a
                                                                    o)))))))

;; sum_to_cartesian_product
(assert
  (forall ((a ty) (b ty))
    (forall ((s1 uni) (s2 uni) (f uni))
      (= (sum a s1 (fc52 b a s2 f)) (sum
                                      (tuple21 a b)
                                      (cartesian_product b a s1 s2)
                                      (fc53 b a f))))))

;; fc
(declare-fun fc54 (ty
  ty
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni))
      (sort (infix_mngt (tuple21 a b) complex1) (fc54 b a x)))))

;; fc
(declare-fun fc55 (ty
  ty
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni))
      (sort (infix_mngt a complex1) (fc55 b a x x1)))))

;; fc'def
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (o uni))
      (= (tb2t (infix_at complex1 (tuple21 a b) (fc54 b a f) o)) (tb2t
                                                                   (infix_at
                                                                    complex1
                                                                    b
                                                                    (infix_at
                                                                    (infix_mngt
                                                                    b
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    (fir
                                                                    b
                                                                    a
                                                                    o))
                                                                    (sec1
                                                                    b
                                                                    a
                                                                    o)))))))

;; fc'def
(assert
  (forall ((a ty) (b ty))
    (forall ((s2 uni) (f uni) (a1 uni))
      (= (tb2t (infix_at complex1 a (fc55 b a s2 f) a1)) (sum
                                                           b
                                                           s2
                                                           (infix_at
                                                             (infix_mngt
                                                               b
                                                               complex1)
                                                             a
                                                             f
                                                             a1))))))

;; sum_from_cartesian_product
(assert
  (forall ((a ty) (b ty))
    (forall ((s1 uni) (s2 uni) (f uni))
      (= (sum (tuple21 a b) (cartesian_product b a s1 s2) (fc54 b a f)) 
      (sum
        a
        s1
        (fc55 b a s2 f))))))

;; ind_sum
(declare-fun ind_sum ((Array Int complex)
  Int
  Int) complex)

;; ind_sum'def
(assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
    (= (ind_sum f i j) (tb2t
                         (int_iterate
                           complex1
                           (t2tb46 infix_pldt_closure)
                           (t2tb51 f)
                           i
                           j)))))

;; ind_sum_to_int_iterate
(assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
    (= (ind_sum f i j) (tb2t
                         (int_iterate
                           complex1
                           (t2tb46 infix_pldt_closure)
                           (t2tb51 f)
                           i
                           j)))))

;; ind_sum_cardone
(assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
    (=>
      (= j (+ i 1))
      (= (ind_sum f i j) (tb2t (infix_at complex1 int (t2tb51 f) (t2tb8 i)))))))

;; ind_sum_right_extension
(assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
    (=>
      (< i j)
      (= (ind_sum f i j) (infix_pldt
                           (ind_sum f i (- j 1))
                           (tb2t
                             (infix_at
                               complex1
                               int
                               (t2tb51 f)
                               (t2tb8 (- j 1)))))))))

;; ind_sum_trans
(assert
  (forall ((f (Array Int complex)) (i Int) (k Int) (j Int))
    (=>
      (and (<= i k) (<= k j))
      (= (ind_sum f i j) (infix_pldt (ind_sum f i k) (ind_sum f k j))))))

;; ind_sum_plus_one
(assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
    (=>
      (< i j)
      (= (ind_sum f i j) (infix_pldt
                           (tb2t
                             (infix_at complex1 int (t2tb51 f) (t2tb8 i)))
                           (ind_sum f (+ i 1) j))))))

;; real_ind_sum
(assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
    (=>
      (< i j)
      (=>
        (forall ((k Int))
          (=>
            (and (<= i k) (< k j))
            (real_ (tb2t (infix_at complex1 int (t2tb51 f) (t2tb8 k))))))
        (real_ (ind_sum f i j))))))

;; positive_ind_sum
(assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
    (=>
      (< i j)
      (=>
        (forall ((k Int))
          (=>
            (and (<= i k) (< k j))
            (infix_lseqdt
              c_zero
              (tb2t (infix_at complex1 int (t2tb51 f) (t2tb8 k))))))
        (infix_lseqdt c_zero (ind_sum f i j))))))

;; positive_sum
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni))
      (=>
        (forall ((k uni))
          (=>
            (sort a k)
            (=>
              (mem a k s)
              (infix_lseqdt c_zero (tb2t (infix_at complex1 a f k))))))
        (infix_lseqdt c_zero (sum a s f))))))

;; ind_sum_eq
(assert
  (forall ((f (Array Int complex)) (g (Array Int complex)) (i Int) (j Int))
    (=>
      (forall ((k Int))
        (=>
          (and (<= i k) (< k j))
          (= (tb2t (infix_at complex1 int (t2tb51 f) (t2tb8 k))) (tb2t
                                                                   (infix_at
                                                                    complex1
                                                                    int
                                                                    (t2tb51
                                                                    g)
                                                                    (t2tb8 k))))))
      (= (ind_sum f i j) (ind_sum g i j)))))

;; fc
(declare-fun fc56 ((Array Int complex)
  complex
  Int
  Int) (Array Int complex))

;; fc'def
(assert
  (forall ((f (Array Int complex)) (g complex) (i Int) (j Int) (k Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc56 f g i j)) (t2tb8 k))) 
    (ite (and (<= i k) (< k j))
      (tb2t (infix_at complex1 int (t2tb51 f) (t2tb8 k)))
      g))))

;; ind_sum_eq_del_bound
(assert
  (forall ((f (Array Int complex)) (g complex) (i Int) (j Int))
    (= (ind_sum (fc56 f g i j) i j) (ind_sum f i j))))

;; fc
(declare-fun fc57 ((Array Int complex)
  complex
  Int
  Int) (Array Int complex))

;; fc'def
(assert
  (forall ((f (Array Int complex)) (g complex) (i Int) (j Int) (k Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc57 f g i j)) (t2tb8 k))) 
    (ite (and (<= i k) (< k j))
      (tb2t (infix_at complex1 int (t2tb51 f) (t2tb8 k)))
      g))))

;; ind_sum_eq_del_bound_rev
(assert
  (forall ((f (Array Int complex)) (g complex) (i Int) (j Int))
    (= (ind_sum f i j) (ind_sum (fc57 f g i j) i j))))

;; ind_sum_eq_gen
(assert
  (forall ((f (Array Int complex)) (g (Array Int complex)) (i1 Int) (j1 Int) (i2 Int) (j2 Int))
    (=>
      (= i1 i2)
      (=>
        (= j1 j2)
        (=>
          (forall ((k Int))
            (=>
              (and (<= i1 k) (< k j1))
              (= (tb2t (infix_at complex1 int (t2tb51 f) (t2tb8 k))) 
              (tb2t
                (infix_at complex1 int (t2tb51 g) (t2tb8 k))))))
          (= (ind_sum f i1 j1) (ind_sum g i2 j2)))))))

;; ind_sum_eq_bound
(assert
  (forall ((f (Array Int complex)) (g (Array Int complex)) (i Int) (j Int))
    (=>
      (= i j)
      (=>
        (forall ((k Int))
          (=>
            (and (<= 0 k) (< k j))
            (= (tb2t (infix_at complex1 int (t2tb51 f) (t2tb8 k))) (tb2t
                                                                    (infix_at
                                                                    complex1
                                                                    int
                                                                    (t2tb51
                                                                    g)
                                                                    (t2tb8 k))))))
        (= (ind_sum f 0 i) (ind_sum g 0 j))))))

;; fc
(declare-fun fc58 ((Array Int complex)
  (Array Int complex)) (Array Int complex))

;; fc'def
(assert
  (forall ((f (Array Int complex)) (g (Array Int complex)) (k Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc58 f g)) (t2tb8 k))) (infix_pldt
                                                                    (tb2t
                                                                    (infix_at
                                                                    complex1
                                                                    int
                                                                    (t2tb51
                                                                    f)
                                                                    (t2tb8 k)))
                                                                    (tb2t
                                                                    (infix_at
                                                                    complex1
                                                                    int
                                                                    (t2tb51
                                                                    g)
                                                                    (t2tb8 k)))))))

;; ind_sum_comp
(assert
  (forall ((f (Array Int complex)) (g (Array Int complex)) (i Int) (j Int))
    (= (ind_sum (fc58 f g) i j) (infix_pldt (ind_sum f i j) (ind_sum g i j)))))

;; fc
(declare-fun fc59 ((Array Int complex)
  (Array Int complex)) (Array Int complex))

;; fc'def
(assert
  (forall ((f (Array Int complex)) (g (Array Int complex)) (k Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc59 f g)) (t2tb8 k))) (infix_pldt
                                                                    (tb2t
                                                                    (infix_at
                                                                    complex1
                                                                    int
                                                                    (t2tb51
                                                                    f)
                                                                    (t2tb8 k)))
                                                                    (tb2t
                                                                    (infix_at
                                                                    complex1
                                                                    int
                                                                    (t2tb51
                                                                    g)
                                                                    (t2tb8 k)))))))

;; ind_sum_comp_rev
(assert
  (forall ((f (Array Int complex)) (g (Array Int complex)) (i Int) (iqt Int) (j Int) (jqt Int))
    (=>
      (= i iqt)
      (=>
        (= j jqt)
        (= (infix_pldt (ind_sum f i j) (ind_sum g iqt jqt)) (ind_sum
                                                              (fc59 f g)
                                                              i
                                                              j))))))

;; ind_sum_to_iterate
(assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
    (= (ind_sum f i j) (tb2t
                         (iterate
                           complex1
                           int
                           (t2tb46 infix_pldt_closure)
                           (t2tb16 (to_fset i j))
                           (t2tb51 f))))))

;; ind_sum_to_sum
(assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
    (= (ind_sum f i j) (sum int (t2tb16 (to_fset i j)) (t2tb51 f)))))

;; fc
(declare-fun fc60 ((Array Int Int)
  (Array Int complex)) (Array Int complex))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (t (Array Int complex)) (b Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc60 f t)) (t2tb8 b))) (tb2t
                                                                    (infix_at
                                                                    complex1
                                                                    int
                                                                    (t2tb51
                                                                    t)
                                                                    (t2tb8
                                                                    (select f b)))))))

;; map_ind_sum_eq
(assert
  (forall ((i Int) (j Int) (k Int) (l Int) (f (Array Int Int)) (t (Array Int complex)))
    (=>
      (p_bijective1 f (to_fset i j) (to_fset k l))
      (= (ind_sum t k l) (ind_sum (fc60 f t) i j)))))

;; fc
(declare-fun fc61 (ty
  uni
  complex) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 complex))
      (sort (infix_mngt a complex1) (fc61 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (c complex) (x uni))
      (= (tb2t (infix_at complex1 a (fc61 a f c) x)) (infix_asdt
                                                       c
                                                       (tb2t
                                                         (infix_at
                                                           complex1
                                                           a
                                                           f
                                                           x)))))))

;; sum_scal
(assert
  (forall ((a ty))
    (forall ((f uni) (s uni) (c complex))
      (= (sum a s (fc61 a f c)) (infix_asdt c (sum a s f))))))

;; fc
(declare-fun fc62 (ty
  uni
  complex) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 complex))
      (sort (infix_mngt a complex1) (fc62 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (c complex) (x uni))
      (= (tb2t (infix_at complex1 a (fc62 a f c) x)) (infix_asdt
                                                       (tb2t
                                                         (infix_at
                                                           complex1
                                                           a
                                                           f
                                                           x))
                                                       c)))))

;; sum_scal_right
(assert
  (forall ((a ty))
    (forall ((f uni) (s uni) (c complex))
      (= (sum a s (fc62 a f c)) (infix_asdt (sum a s f) c)))))

;; fc
(declare-fun fc63 (ty
  uni
  complex) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 complex))
      (sort (infix_mngt a complex1) (fc63 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (c complex) (x uni))
      (= (tb2t (infix_at complex1 a (fc63 a f c) x)) (infix_asdt
                                                       (tb2t
                                                         (infix_at
                                                           complex1
                                                           a
                                                           f
                                                           x))
                                                       c)))))

;; sum_scal_rev_right
(assert
  (forall ((a ty))
    (forall ((f uni) (s uni) (c complex))
      (= (infix_asdt (sum a s f) c) (sum a s (fc63 a f c))))))

;; fc
(declare-fun fc64 (ty
  uni
  complex) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 complex))
      (sort (infix_mngt a complex1) (fc64 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (c complex) (x uni))
      (= (tb2t (infix_at complex1 a (fc64 a f c) x)) (infix_asdt
                                                       c
                                                       (tb2t
                                                         (infix_at
                                                           complex1
                                                           a
                                                           f
                                                           x)))))))

;; sum_scal_rev
(assert
  (forall ((a ty))
    (forall ((f uni) (s uni) (c complex))
      (= (infix_asdt c (sum a s f)) (sum a s (fc64 a f c))))))

;; fc
(declare-fun fc65 ((Array Int complex)
  complex) (Array Int complex))

;; fc'def
(assert
  (forall ((f (Array Int complex)) (a complex) (i Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc65 f a)) (t2tb8 i))) (infix_asdt
                                                                    a
                                                                    (tb2t
                                                                    (infix_at
                                                                    complex1
                                                                    int
                                                                    (t2tb51
                                                                    f)
                                                                    (t2tb8 i)))))))

;; ind_sum_scal
(assert
  (forall ((f (Array Int complex)) (i Int) (j Int) (a complex))
    (= (ind_sum (fc65 f a) i j) (infix_asdt a (ind_sum f i j)))))

;; fc
(declare-fun fc66 ((Array Int complex)
  complex) (Array Int complex))

;; fc'def
(assert
  (forall ((f (Array Int complex)) (a complex) (i Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc66 f a)) (t2tb8 i))) (infix_asdt
                                                                    a
                                                                    (tb2t
                                                                    (infix_at
                                                                    complex1
                                                                    int
                                                                    (t2tb51
                                                                    f)
                                                                    (t2tb8 i)))))))

;; ind_sum_scal_rev
(assert
  (forall ((f (Array Int complex)) (i Int) (j Int) (a complex))
    (= (infix_asdt a (ind_sum f i j)) (ind_sum (fc66 f a) i j))))

;; fc
(declare-fun fc67 ((Array Int complex)
  complex) (Array Int complex))

;; fc'def
(assert
  (forall ((f (Array Int complex)) (a complex) (i Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc67 f a)) (t2tb8 i))) (infix_asdt
                                                                    (tb2t
                                                                    (infix_at
                                                                    complex1
                                                                    int
                                                                    (t2tb51
                                                                    f)
                                                                    (t2tb8 i)))
                                                                    a))))

;; scal_ind_sum
(assert
  (forall ((f (Array Int complex)) (i Int) (j Int) (a complex))
    (= (ind_sum (fc67 f a) i j) (infix_asdt (ind_sum f i j) a))))

;; fc
(declare-fun fc68 ((Array Int complex)
  complex) (Array Int complex))

;; fc'def
(assert
  (forall ((f (Array Int complex)) (a complex) (i Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc68 f a)) (t2tb8 i))) (infix_asdt
                                                                    (tb2t
                                                                    (infix_at
                                                                    complex1
                                                                    int
                                                                    (t2tb51
                                                                    f)
                                                                    (t2tb8 i)))
                                                                    a))))

;; scal_ind_sum_rev
(assert
  (forall ((f (Array Int complex)) (i Int) (j Int) (a complex))
    (= (infix_asdt (ind_sum f i j) a) (ind_sum (fc68 f a) i j))))

;; fc
(declare-fun fc69 ((Array Int complex)
  complex) (Array Int complex))

;; fc'def
(assert
  (forall ((f (Array Int complex)) (a complex) (i Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc69 f a)) (t2tb8 i))) (infix_asdt
                                                                    a
                                                                    (tb2t
                                                                    (infix_at
                                                                    complex1
                                                                    int
                                                                    (t2tb51
                                                                    f)
                                                                    (t2tb8 i)))))))

;; sum_scal_gen
(assert
  (forall ((f (Array Int complex)) (s (set Int)))
    (forall ((a complex))
      (= (sum int (t2tb16 s) (t2tb51 (fc69 f a))) (infix_asdt
                                                    a
                                                    (sum
                                                      int
                                                      (t2tb16 s)
                                                      (t2tb51 f)))))))

;; fc
(declare-fun fc70 ((Array Int complex)
  complex) (Array Int complex))

;; fc'def
(assert
  (forall ((f (Array Int complex)) (a complex) (i Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc70 f a)) (t2tb8 i))) (infix_asdt
                                                                    a
                                                                    (tb2t
                                                                    (infix_at
                                                                    complex1
                                                                    int
                                                                    (t2tb51
                                                                    f)
                                                                    (t2tb8 i)))))))

;; ind_sum_scal_gen
(assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
    (forall ((a complex))
      (= (ind_sum (fc70 f a) i j) (infix_asdt a (ind_sum f i j))))))

;; int_int_iterate_def_empty
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (f uni) (i Int) (j Int) (k Int) (l Int))
      (=>
        (<= j i)
        (=>
          (iterable im1 op1)
          (= (int_int_iterate im1 op1 f i j k l) (neutral_elt im1 op1)))))))

;; int_int_iterate_def_plus_one
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (f (Array Int (Array Int (Array Int Int)))) (i Int) (j Int) (k Int) (l Int))
    (=>
      (< i j)
      (=>
        (iterable (infix_mngt int int) (t2tb3 op1))
        (= (tb2t7
             (int_int_iterate
               (infix_mngt int int)
               (t2tb3 op1)
               (t2tb26 f)
               i
               j
               k
               l)) (select (select op1 (tb2t7
                                         (int_iterate
                                           (infix_mngt int int)
                                           (t2tb3 op1)
                                           (infix_at
                                             (infix_mngt
                                               int
                                               (infix_mngt int int))
                                             int
                                             (t2tb26 f)
                                             (t2tb8 i))
                                           k
                                           l))) (tb2t7
                                                  (int_int_iterate
                                                    (infix_mngt int int)
                                                    (t2tb3 op1)
                                                    (t2tb26 f)
                                                    (+ i 1)
                                                    j
                                                    k
                                                    l))))))))

;; int_int_iterate_def_plus_one
(assert
  (forall ((op1 (Array Int (Array Int Int))) (f (Array Int (Array Int Int))) (i Int) (j Int) (k Int) (l Int))
    (=>
      (< i j)
      (=>
        (iterable int (t2tb9 op1))
        (= (tb2t8 (int_int_iterate int (t2tb9 op1) (t2tb9 f) i j k l)) (select 
        (tb2t7
          (infix_at
            (infix_mngt int int)
            int
            (t2tb9 op1)
            (int_iterate
              int
              (t2tb9 op1)
              (infix_at (infix_mngt int int) int (t2tb9 f) (t2tb8 i))
              k
              l))) (tb2t8
                     (int_int_iterate
                       int
                       (t2tb9 op1)
                       (t2tb9 f)
                       (+ i 1)
                       j
                       k
                       l))))))))

;; int_int_iterate_def_plus_one
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (f uni) (i Int) (j Int) (k Int) (l Int))
      (=>
        (< i j)
        (=>
          (iterable im1 op1)
          (= (int_int_iterate im1 op1 f i j k l) (infix_at
                                                   im1
                                                   im1
                                                   (infix_at
                                                     (infix_mngt im1 im1)
                                                     im1
                                                     op1
                                                     (int_iterate
                                                       im1
                                                       op1
                                                       (infix_at
                                                         (infix_mngt int im1)
                                                         int
                                                         f
                                                         (t2tb8 i))
                                                       k
                                                       l))
                                                   (int_int_iterate
                                                     im1
                                                     op1
                                                     f
                                                     (+ i 1)
                                                     j
                                                     k
                                                     l))))))))

;; fc
(declare-fun fc71 (ty
  uni
  uni
  Int
  Int) uni)

;; fc_sort
(assert
  (forall ((im1 ty))
    (forall ((x uni) (x1 uni) (x2 Int) (x3 Int))
      (sort (infix_mngt int im1) (fc71 im1 x x1 x2 x3)))))

;; fc'def
(assert
  (forall ((op1 (Array Int (Array Int Int))) (f (Array Int (Array Int Int))) (k Int) (l Int) (a Int))
    (= (select (tb2t7 (fc71 int (t2tb9 op1) (t2tb9 f) k l)) a) (tb2t8
                                                                 (int_iterate
                                                                   int
                                                                   (t2tb9
                                                                    op1)
                                                                   (infix_at
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    int
                                                                    (t2tb9 f)
                                                                    (t2tb8 a))
                                                                   k
                                                                   l)))))

;; fc'def
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (f uni) (k Int) (l Int) (a Int))
      (= (infix_at im1 int (fc71 im1 op1 f k l) (t2tb8 a)) (int_iterate
                                                             im1
                                                             op1
                                                             (infix_at
                                                               (infix_mngt
                                                                 int
                                                                 im1)
                                                               int
                                                               f
                                                               (t2tb8 a))
                                                             k
                                                             l)))))

;; int_int_iterate_to_int_iterate
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (f uni) (i Int) (j Int) (k Int) (l Int))
      (=>
        (<= i j)
        (=>
          (iterable im1 op1)
          (= (int_int_iterate im1 op1 f i j k l) (int_iterate
                                                   im1
                                                   op1
                                                   (fc71 im1 op1 f k l)
                                                   i
                                                   j)))))))

;; fc
(declare-fun fc72 (ty
  uni
  uni
  Int
  Int) uni)

;; fc_sort
(assert
  (forall ((im1 ty))
    (forall ((x uni) (x1 uni) (x2 Int) (x3 Int))
      (sort (infix_mngt int im1) (fc72 im1 x x1 x2 x3)))))

;; fc'def
(assert
  (forall ((op1 (Array Int (Array Int Int))) (f (Array Int (Array Int Int))) (k Int) (l Int) (a Int))
    (= (select (tb2t7 (fc72 int (t2tb9 op1) (t2tb9 f) k l)) a) (tb2t8
                                                                 (int_iterate
                                                                   int
                                                                   (t2tb9
                                                                    op1)
                                                                   (infix_at
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    int
                                                                    (t2tb9 f)
                                                                    (t2tb8 a))
                                                                   k
                                                                   l)))))

;; fc'def
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (f uni) (k Int) (l Int) (a Int))
      (= (infix_at im1 int (fc72 im1 op1 f k l) (t2tb8 a)) (int_iterate
                                                             im1
                                                             op1
                                                             (infix_at
                                                               (infix_mngt
                                                                 int
                                                                 im1)
                                                               int
                                                               f
                                                               (t2tb8 a))
                                                             k
                                                             l)))))

;; int_iterate_to_int_int_iterate
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (f uni) (i Int) (j Int) (k Int) (l Int))
      (=>
        (<= i j)
        (=>
          (iterable im1 op1)
          (= (int_iterate im1 op1 (fc72 im1 op1 f k l) i j) (int_int_iterate
                                                              im1
                                                              op1
                                                              f
                                                              i
                                                              j
                                                              k
                                                              l)))))))

;; fc
(declare-fun fc73 (ty
  uni) uni)

;; fc_sort
(assert
  (forall ((im1 ty))
    (forall ((x uni)) (sort (infix_mngt (tuple21 int int) im1) (fc73 im1 x)))))

;; t2tb
(declare-fun t2tb52 ((Array (tuple2 Int
  Int) Int)) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (tuple2 Int Int) Int)))
    (sort (infix_mngt (tuple21 int int) int) (t2tb52 x))))

;; tb2t
(declare-fun tb2t52 (uni) (Array (tuple2 Int
  Int) Int))

;; BridgeL
(assert
  (forall ((i (Array (tuple2 Int Int) Int)))
    (! (= (tb2t52 (t2tb52 i)) i) :pattern ((t2tb52 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb52 (tb2t52 j)) j) :pattern ((t2tb52 (tb2t52 j))) )))

;; t2tb
(declare-fun t2tb53 ((tuple2 Int
  Int)) uni)

;; t2tb_sort
(assert (forall ((x (tuple2 Int Int))) (sort (tuple21 int int) (t2tb53 x))))

;; tb2t
(declare-fun tb2t53 (uni) (tuple2 Int
  Int))

;; BridgeL
(assert
  (forall ((i (tuple2 Int Int)))
    (! (= (tb2t53 (t2tb53 i)) i) :pattern ((t2tb53 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb53 (tb2t53 j)) j) :pattern ((t2tb53 (tb2t53 j))) )))

;; fc'def
(assert
  (forall ((f (Array Int (Array Int Int))) (o (tuple2 Int Int)))
    (= (tb2t8
         (infix_at int (tuple21 int int) (fc73 int (t2tb9 f)) (t2tb53 o))) (select 
    (tb2t7
      (infix_at (infix_mngt int int) int (t2tb9 f) (fir int int (t2tb53 o)))) 
    (tb2t8
      (sec1 int int (t2tb53 o)))))))

;; fc'def
(assert
  (forall ((im1 ty))
    (forall ((f uni) (o (tuple2 Int Int)))
      (= (infix_at im1 (tuple21 int int) (fc73 im1 f) (t2tb53 o)) (infix_at
                                                                    im1
                                                                    int
                                                                    (infix_at
                                                                    (infix_mngt
                                                                    int
                                                                    im1)
                                                                    int
                                                                    f
                                                                    (fir
                                                                    int
                                                                    int
                                                                    (t2tb53
                                                                    o)))
                                                                    (sec1
                                                                    int
                                                                    int
                                                                    (t2tb53
                                                                    o)))))))

;; t2tb
(declare-fun t2tb54 ((set (tuple2 Int
  Int))) uni)

;; t2tb_sort
(assert
  (forall ((x (set (tuple2 Int Int))))
    (sort (set1 (tuple21 int int)) (t2tb54 x))))

;; tb2t
(declare-fun tb2t54 (uni) (set (tuple2 Int
  Int)))

;; BridgeL
(assert
  (forall ((i (set (tuple2 Int Int))))
    (! (= (tb2t54 (t2tb54 i)) i) :pattern ((t2tb54 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb54 (tb2t54 j)) j) :pattern ((t2tb54 (tb2t54 j))) )))

;; int_int_iterate_to_iterate
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (f uni) (i Int) (j Int) (k Int) (l Int))
      (=>
        (<= i j)
        (=>
          (iterable im1 op1)
          (=>
            (commut im1 op1)
            (= (int_int_iterate im1 op1 f i j k l) (iterate
                                                     im1
                                                     (tuple21 int int)
                                                     op1
                                                     (cartesian_product
                                                       int
                                                       int
                                                       (t2tb16 (to_fset i j))
                                                       (t2tb16 (to_fset k l)))
                                                     (fc73 im1 f)))))))))

;; fc
(declare-fun fc74 (ty
  ty
  ty
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty) (im1 ty))
    (forall ((x uni)) (sort (infix_mngt (tuple21 a b) im1) (fc74 im1 b a x)))))

;; fc
(declare-fun fc75 (ty
  ty
  ty
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty) (im1 ty))
    (forall ((x uni)) (sort (infix_mngt (tuple21 b a) im1) (fc75 im1 b a x)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (o uni))
      (= (tb2t3
           (infix_at
             (infix_mngt
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int)))
             (tuple21 a circuit1)
             (fc74
               (infix_mngt
                 (infix_mngt int int)
                 (infix_mngt (infix_mngt int int) (infix_mngt int int)))
               circuit1
               a
               f)
             o)) (select (tb2t2
                           (infix_at
                             (infix_mngt
                               circuit1
                               (infix_mngt
                                 (infix_mngt int int)
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt int int))))
                             a
                             f
                             (fir circuit1 a o))) (tb2t13
                                                    (sec1 circuit1 a o)))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (o uni))
      (= (tb2t5
           (infix_at
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (tuple21 a (infix_mngt int int))
             (fc74
               (infix_mngt (infix_mngt int int) (infix_mngt int int))
               (infix_mngt int int)
               a
               f)
             o)) (select (tb2t3
                           (infix_at
                             (infix_mngt
                               (infix_mngt int int)
                               (infix_mngt
                                 (infix_mngt int int)
                                 (infix_mngt int int)))
                             a
                             f
                             (fir (infix_mngt int int) a o))) (tb2t7
                                                                (sec1
                                                                  (infix_mngt
                                                                    int
                                                                    int)
                                                                  a
                                                                  o)))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (o uni))
      (= (tb2t7
           (infix_at
             (infix_mngt int int)
             (tuple21 a (infix_mngt int int))
             (fc74 (infix_mngt int int) (infix_mngt int int) a f)
             o)) (select (tb2t5
                           (infix_at
                             (infix_mngt
                               (infix_mngt int int)
                               (infix_mngt int int))
                             a
                             f
                             (fir (infix_mngt int int) a o))) (tb2t7
                                                                (sec1
                                                                  (infix_mngt
                                                                    int
                                                                    int)
                                                                  a
                                                                  o)))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (o uni))
      (= (tb2t8 (infix_at int (tuple21 a int) (fc74 int int a f) o)) (select 
      (tb2t7
        (infix_at (infix_mngt int int) a f (fir int a o))) (tb2t8
                                                             (sec1 int a o)))))))

;; fc'def
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (o (tuple2 circuit (Array Int Int))))
    (= (tb2t5
         (infix_at
           (infix_mngt (infix_mngt int int) (infix_mngt int int))
           (tuple21 circuit1 (infix_mngt int int))
           (fc74
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (infix_mngt int int)
             circuit1
             (t2tb2 f))
           (t2tb30 o))) (select (select f (tb2t13
                                            (fir
                                              (infix_mngt int int)
                                              circuit1
                                              (t2tb30 o)))) (tb2t7
                                                              (sec1
                                                                (infix_mngt
                                                                  int
                                                                  int)
                                                                circuit1
                                                                (t2tb30 o)))))))

;; fc'def
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (o (tuple2 (Array Int Int) (Array Int Int))))
    (= (tb2t7
         (infix_at
           (infix_mngt int int)
           (tuple21 (infix_mngt int int) (infix_mngt int int))
           (fc74
             (infix_mngt int int)
             (infix_mngt int int)
             (infix_mngt int int)
             (t2tb3 f))
           (t2tb32 o))) (select (select f (tb2t7
                                            (fir
                                              (infix_mngt int int)
                                              (infix_mngt int int)
                                              (t2tb32 o)))) (tb2t7
                                                              (sec1
                                                                (infix_mngt
                                                                  int
                                                                  int)
                                                                (infix_mngt
                                                                  int
                                                                  int)
                                                                (t2tb32 o)))))))

;; fc'def
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (o (tuple2 (Array Int Int) Int)))
    (= (tb2t8
         (infix_at
           int
           (tuple21 (infix_mngt int int) int)
           (fc74 int int (infix_mngt int int) (t2tb5 f))
           (t2tb34 o))) (select (select f (tb2t7
                                            (fir
                                              int
                                              (infix_mngt int int)
                                              (t2tb34 o)))) (tb2t8
                                                              (sec1
                                                                int
                                                                (infix_mngt
                                                                  int
                                                                  int)
                                                                (t2tb34 o)))))))

;; fc'def
(assert
  (forall ((a ty) (b ty) (im1 ty))
    (forall ((f uni) (o uni))
      (= (infix_at im1 (tuple21 a b) (fc74 im1 b a f) o) (infix_at
                                                           im1
                                                           b
                                                           (infix_at
                                                             (infix_mngt
                                                               b
                                                               im1)
                                                             a
                                                             f
                                                             (fir b a o))
                                                           (sec1 b a o))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (o uni))
      (= (tb2t3
           (infix_at
             (infix_mngt
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int)))
             (tuple21 circuit1 a)
             (fc75
               (infix_mngt
                 (infix_mngt int int)
                 (infix_mngt (infix_mngt int int) (infix_mngt int int)))
               circuit1
               a
               f)
             o)) (select (tb2t2
                           (infix_at
                             (infix_mngt
                               circuit1
                               (infix_mngt
                                 (infix_mngt int int)
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt int int))))
                             a
                             f
                             (sec1 a circuit1 o))) (tb2t13
                                                     (fir a circuit1 o)))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (o uni))
      (= (tb2t5
           (infix_at
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (tuple21 (infix_mngt int int) a)
             (fc75
               (infix_mngt (infix_mngt int int) (infix_mngt int int))
               (infix_mngt int int)
               a
               f)
             o)) (select (tb2t3
                           (infix_at
                             (infix_mngt
                               (infix_mngt int int)
                               (infix_mngt
                                 (infix_mngt int int)
                                 (infix_mngt int int)))
                             a
                             f
                             (sec1 a (infix_mngt int int) o))) (tb2t7
                                                                 (fir
                                                                   a
                                                                   (infix_mngt
                                                                    int
                                                                    int)
                                                                   o)))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (o uni))
      (= (tb2t7
           (infix_at
             (infix_mngt int int)
             (tuple21 (infix_mngt int int) a)
             (fc75 (infix_mngt int int) (infix_mngt int int) a f)
             o)) (select (tb2t5
                           (infix_at
                             (infix_mngt
                               (infix_mngt int int)
                               (infix_mngt int int))
                             a
                             f
                             (sec1 a (infix_mngt int int) o))) (tb2t7
                                                                 (fir
                                                                   a
                                                                   (infix_mngt
                                                                    int
                                                                    int)
                                                                   o)))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (o uni))
      (= (tb2t8 (infix_at int (tuple21 int a) (fc75 int int a f) o)) (select 
      (tb2t7
        (infix_at (infix_mngt int int) a f (sec1 a int o))) (tb2t8
                                                              (fir a int o)))))))

;; t2tb
(declare-fun t2tb55 ((Array (tuple2 (Array Int Int)
  circuit) (Array (Array Int Int) (Array Int Int)))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (tuple2 (Array Int Int) circuit) (Array (Array Int Int) (Array Int Int)))))
    (sort
      (infix_mngt
        (tuple21 (infix_mngt int int) circuit1)
        (infix_mngt (infix_mngt int int) (infix_mngt int int)))
      (t2tb55 x))))

;; tb2t
(declare-fun tb2t55 (uni) (Array (tuple2 (Array Int Int)
  circuit) (Array (Array Int Int) (Array Int Int))))

;; BridgeL
(assert
  (forall ((i (Array (tuple2 (Array Int Int) circuit) (Array (Array Int Int) (Array Int Int)))))
    (! (= (tb2t55 (t2tb55 i)) i) :pattern ((t2tb55 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb55 (tb2t55 j)) j) :pattern ((t2tb55 (tb2t55 j))) )))

;; t2tb
(declare-fun t2tb56 ((tuple2 (Array Int Int)
  circuit)) uni)

;; t2tb_sort
(assert
  (forall ((x (tuple2 (Array Int Int) circuit)))
    (sort (tuple21 (infix_mngt int int) circuit1) (t2tb56 x))))

;; tb2t
(declare-fun tb2t56 (uni) (tuple2 (Array Int Int)
  circuit))

;; BridgeL
(assert
  (forall ((i (tuple2 (Array Int Int) circuit)))
    (! (= (tb2t56 (t2tb56 i)) i) :pattern ((t2tb56 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb56 (tb2t56 j)) j) :pattern ((t2tb56 (tb2t56 j))) )))

;; fc'def
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (o (tuple2 (Array Int Int) circuit)))
    (= (tb2t5
         (infix_at
           (infix_mngt (infix_mngt int int) (infix_mngt int int))
           (tuple21 (infix_mngt int int) circuit1)
           (fc75
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (infix_mngt int int)
             circuit1
             (t2tb2 f))
           (t2tb56 o))) (select (select f (tb2t13
                                            (sec1
                                              circuit1
                                              (infix_mngt int int)
                                              (t2tb56 o)))) (tb2t7
                                                              (fir
                                                                circuit1
                                                                (infix_mngt
                                                                  int
                                                                  int)
                                                                (t2tb56 o)))))))

;; fc'def
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (o (tuple2 (Array Int Int) (Array Int Int))))
    (= (tb2t7
         (infix_at
           (infix_mngt int int)
           (tuple21 (infix_mngt int int) (infix_mngt int int))
           (fc75
             (infix_mngt int int)
             (infix_mngt int int)
             (infix_mngt int int)
             (t2tb3 f))
           (t2tb32 o))) (select (select f (tb2t7
                                            (sec1
                                              (infix_mngt int int)
                                              (infix_mngt int int)
                                              (t2tb32 o)))) (tb2t7
                                                              (fir
                                                                (infix_mngt
                                                                  int
                                                                  int)
                                                                (infix_mngt
                                                                  int
                                                                  int)
                                                                (t2tb32 o)))))))

;; t2tb
(declare-fun t2tb57 ((Array (tuple2 Int
  (Array Int Int)) Int)) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (tuple2 Int (Array Int Int)) Int)))
    (sort (infix_mngt (tuple21 int (infix_mngt int int)) int) (t2tb57 x))))

;; tb2t
(declare-fun tb2t57 (uni) (Array (tuple2 Int
  (Array Int Int)) Int))

;; BridgeL
(assert
  (forall ((i (Array (tuple2 Int (Array Int Int)) Int)))
    (! (= (tb2t57 (t2tb57 i)) i) :pattern ((t2tb57 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb57 (tb2t57 j)) j) :pattern ((t2tb57 (tb2t57 j))) )))

;; t2tb
(declare-fun t2tb58 ((tuple2 Int
  (Array Int Int))) uni)

;; t2tb_sort
(assert
  (forall ((x (tuple2 Int (Array Int Int))))
    (sort (tuple21 int (infix_mngt int int)) (t2tb58 x))))

;; tb2t
(declare-fun tb2t58 (uni) (tuple2 Int
  (Array Int Int)))

;; BridgeL
(assert
  (forall ((i (tuple2 Int (Array Int Int))))
    (! (= (tb2t58 (t2tb58 i)) i) :pattern ((t2tb58 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb58 (tb2t58 j)) j) :pattern ((t2tb58 (tb2t58 j))) )))

;; fc'def
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (o (tuple2 Int (Array Int Int))))
    (= (tb2t8
         (infix_at
           int
           (tuple21 int (infix_mngt int int))
           (fc75 int int (infix_mngt int int) (t2tb5 f))
           (t2tb58 o))) (select (select f (tb2t7
                                            (sec1
                                              (infix_mngt int int)
                                              int
                                              (t2tb58 o)))) (tb2t8
                                                              (fir
                                                                (infix_mngt
                                                                  int
                                                                  int)
                                                                int
                                                                (t2tb58 o)))))))

;; fc'def
(assert
  (forall ((a ty) (b ty) (im1 ty))
    (forall ((f uni) (o uni))
      (= (infix_at im1 (tuple21 b a) (fc75 im1 b a f) o) (infix_at
                                                           im1
                                                           b
                                                           (infix_at
                                                             (infix_mngt
                                                               b
                                                               im1)
                                                             a
                                                             f
                                                             (sec1 a b o))
                                                           (fir a b o))))))

;; iterate_commute
(assert
  (forall ((a ty) (b ty) (im1 ty))
    (forall ((op1 uni) (s1 uni) (s2 uni) (f uni))
      (=>
        (iterable im1 op1)
        (=>
          (commut im1 op1)
          (= (iterate
               im1
               (tuple21 a b)
               op1
               (cartesian_product b a s1 s2)
               (fc74 im1 b a f)) (iterate
                                   im1
                                   (tuple21 b a)
                                   op1
                                   (cartesian_product a b s2 s1)
                                   (fc75 im1 b a f))))))))

;; fc
(declare-fun fc76 (ty
  ty
  ty
  uni
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty) (im1 ty))
    (forall ((x uni) (x1 uni) (x2 uni))
      (sort (infix_mngt a im1) (fc76 im1 b a x x1 x2)))))

;; fc
(declare-fun fc77 (ty
  ty
  ty
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty) (im1 ty))
    (forall ((x uni) (x1 uni)) (sort (infix_mngt a im1) (fc77 im1 b a x x1)))))

;; fc
(declare-fun fc78 (ty
  ty
  ty
  uni
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty) (im1 ty))
    (forall ((x uni) (x1 uni) (x2 uni))
      (sort (infix_mngt b im1) (fc78 im1 b a x x1 x2)))))

;; fc'def
(assert
  (forall ((b ty))
    (forall ((op1 (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))) (s2 uni) (f uni) (a1 circuit))
      (= (select (tb2t2
                   (fc76
                     (infix_mngt
                       (infix_mngt int int)
                       (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                     b
                     circuit1
                     (t2tb23 op1)
                     s2
                     f)) a1) (tb2t3
                               (iterate
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int)))
                                 b
                                 (t2tb23 op1)
                                 s2
                                 (infix_at
                                   (infix_mngt
                                     b
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt
                                         (infix_mngt int int)
                                         (infix_mngt int int))))
                                   circuit1
                                   f
                                   (t2tb13 a1))))))))

;; fc'def
(assert
  (forall ((op1 (Array (Array (Array Int Int) (Array Int Int)) (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int))))) (s2 (set (Array Int Int))) (f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (a1 circuit))
    (= (tb2t5
         (infix_at
           (infix_mngt (infix_mngt int int) (infix_mngt int int))
           circuit1
           (fc76
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (infix_mngt int int)
             circuit1
             (t2tb25 op1)
             (t2tb15 s2)
             (t2tb2 f))
           (t2tb13 a1))) (tb2t5
                           (iterate
                             (infix_mngt
                               (infix_mngt int int)
                               (infix_mngt int int))
                             (infix_mngt int int)
                             (t2tb25 op1)
                             (t2tb15 s2)
                             (t2tb3 (select f a1)))))))

;; fc'def
(assert
  (forall ((b ty))
    (forall ((op1 (Array (Array (Array Int Int) (Array Int Int)) (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int))))) (s2 uni) (f uni) (a1 (Array Int Int)))
      (= (select (tb2t3
                   (fc76
                     (infix_mngt (infix_mngt int int) (infix_mngt int int))
                     b
                     (infix_mngt int int)
                     (t2tb25 op1)
                     s2
                     f)) a1) (tb2t5
                               (iterate
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt int int))
                                 b
                                 (t2tb25 op1)
                                 s2
                                 (infix_at
                                   (infix_mngt
                                     b
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt int int)))
                                   (infix_mngt int int)
                                   f
                                   (t2tb7 a1))))))))

;; fc'def
(assert
  (forall ((b ty))
    (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s2 uni) (f uni) (a1 (Array Int Int)))
      (= (select (tb2t5
                   (fc76
                     (infix_mngt int int)
                     b
                     (infix_mngt int int)
                     (t2tb3 op1)
                     s2
                     f)) a1) (tb2t7
                               (iterate
                                 (infix_mngt int int)
                                 b
                                 (t2tb3 op1)
                                 s2
                                 (infix_at
                                   (infix_mngt b (infix_mngt int int))
                                   (infix_mngt int int)
                                   f
                                   (t2tb7 a1))))))))

;; fc'def
(assert
  (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s2 (set (Array Int Int))) (f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (a1 (Array Int Int)))
    (= (select (tb2t5
                 (fc76
                   (infix_mngt int int)
                   (infix_mngt int int)
                   (infix_mngt int int)
                   (t2tb3 op1)
                   (t2tb15 s2)
                   (t2tb3 f))) a1) (tb2t7
                                     (iterate
                                       (infix_mngt int int)
                                       (infix_mngt int int)
                                       (t2tb3 op1)
                                       (t2tb15 s2)
                                       (t2tb5 (select f a1)))))))

;; fc'def
(assert
  (forall ((op1 (Array Int (Array Int Int))) (s2 (set Int)) (f (Array (Array Int Int) (Array Int Int))) (a1 (Array Int Int)))
    (= (tb2t8
         (infix_at
           int
           (infix_mngt int int)
           (fc76
             int
             int
             (infix_mngt int int)
             (t2tb9 op1)
             (t2tb16 s2)
             (t2tb5 f))
           (t2tb7 a1))) (tb2t8
                          (iterate
                            int
                            int
                            (t2tb9 op1)
                            (t2tb16 s2)
                            (t2tb7 (select f a1)))))))

;; fc'def
(assert
  (forall ((b ty))
    (forall ((op1 (Array Int (Array Int Int))) (s2 uni) (f uni) (a1 Int))
      (= (select (tb2t7 (fc76 int b int (t2tb9 op1) s2 f)) a1) (tb2t8
                                                                 (iterate
                                                                   int
                                                                   b
                                                                   (t2tb9
                                                                    op1)
                                                                   s2
                                                                   (infix_at
                                                                    (infix_mngt
                                                                    b
                                                                    int)
                                                                    int
                                                                    f
                                                                    (t2tb8
                                                                    a1))))))))

;; fc'def
(assert
  (forall ((a ty) (b ty) (im1 ty))
    (forall ((op1 uni) (s2 uni) (f uni) (a1 uni))
      (= (infix_at im1 a (fc76 im1 b a op1 s2 f) a1) (iterate
                                                       im1
                                                       b
                                                       op1
                                                       s2
                                                       (infix_at
                                                         (infix_mngt b im1)
                                                         a
                                                         f
                                                         a1))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (a2 circuit) (a1 uni))
      (= (tb2t3
           (infix_at
             (infix_mngt
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int)))
             a
             (fc77
               (infix_mngt
                 (infix_mngt int int)
                 (infix_mngt (infix_mngt int int) (infix_mngt int int)))
               circuit1
               a
               f
               (t2tb13 a2))
             a1)) (select (tb2t2
                            (infix_at
                              (infix_mngt
                                circuit1
                                (infix_mngt
                                  (infix_mngt int int)
                                  (infix_mngt
                                    (infix_mngt int int)
                                    (infix_mngt int int))))
                              a
                              f
                              a1)) a2)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (a2 (Array Int Int)) (a1 uni))
      (= (tb2t5
           (infix_at
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             a
             (fc77
               (infix_mngt (infix_mngt int int) (infix_mngt int int))
               (infix_mngt int int)
               a
               f
               (t2tb7 a2))
             a1)) (select (tb2t3
                            (infix_at
                              (infix_mngt
                                (infix_mngt int int)
                                (infix_mngt
                                  (infix_mngt int int)
                                  (infix_mngt int int)))
                              a
                              f
                              a1)) a2)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (a2 (Array Int Int)) (a1 uni))
      (= (tb2t7
           (infix_at
             (infix_mngt int int)
             a
             (fc77 (infix_mngt int int) (infix_mngt int int) a f (t2tb7 a2))
             a1)) (select (tb2t5
                            (infix_at
                              (infix_mngt
                                (infix_mngt int int)
                                (infix_mngt int int))
                              a
                              f
                              a1)) a2)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (a2 Int) (a1 uni))
      (= (tb2t8 (infix_at int a (fc77 int int a f (t2tb8 a2)) a1)) (select 
      (tb2t7
        (infix_at (infix_mngt int int) a f a1)) a2)))))

;; fc'def
(assert
  (forall ((b ty))
    (forall ((f uni) (a2 uni) (a1 circuit))
      (= (select (tb2t2
                   (fc77
                     (infix_mngt
                       (infix_mngt int int)
                       (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                     b
                     circuit1
                     f
                     a2)) a1) (tb2t3
                                (infix_at
                                  (infix_mngt
                                    (infix_mngt int int)
                                    (infix_mngt
                                      (infix_mngt int int)
                                      (infix_mngt int int)))
                                  b
                                  (infix_at
                                    (infix_mngt
                                      b
                                      (infix_mngt
                                        (infix_mngt int int)
                                        (infix_mngt
                                          (infix_mngt int int)
                                          (infix_mngt int int))))
                                    circuit1
                                    f
                                    (t2tb13 a1))
                                  a2))))))

;; t2tb
(declare-fun t2tb59 ((Array circuit (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array circuit (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))))
    (sort
      (infix_mngt
        circuit1
        (infix_mngt
          circuit1
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))))
      (t2tb59 x))))

;; tb2t
(declare-fun tb2t59 (uni) (Array circuit (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))

;; BridgeL
(assert
  (forall ((i (Array circuit (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))))
    (! (= (tb2t59 (t2tb59 i)) i) :pattern ((t2tb59 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb59 (tb2t59 j)) j) :pattern ((t2tb59 (tb2t59 j))) )))

;; fc'def
(assert
  (forall ((f (Array circuit (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))) (a2 circuit) (a1 circuit))
    (= (select (tb2t2
                 (fc77
                   (infix_mngt
                     (infix_mngt int int)
                     (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                   circuit1
                   circuit1
                   (t2tb59 f)
                   (t2tb13 a2))) a1) (select (tb2t2
                                               (infix_at
                                                 (infix_mngt
                                                   circuit1
                                                   (infix_mngt
                                                     (infix_mngt int int)
                                                     (infix_mngt
                                                       (infix_mngt int int)
                                                       (infix_mngt int int))))
                                                 circuit1
                                                 (t2tb59 f)
                                                 (t2tb13 a1))) a2))))

;; fc'def
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (a2 (Array Int Int)) (a1 circuit))
    (= (tb2t5
         (infix_at
           (infix_mngt (infix_mngt int int) (infix_mngt int int))
           circuit1
           (fc77
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (infix_mngt int int)
             circuit1
             (t2tb2 f)
             (t2tb7 a2))
           (t2tb13 a1))) (select (select f a1) a2))))

;; fc'def
(assert
  (forall ((b ty))
    (forall ((f uni) (a2 uni) (a1 (Array Int Int)))
      (= (select (tb2t3
                   (fc77
                     (infix_mngt (infix_mngt int int) (infix_mngt int int))
                     b
                     (infix_mngt int int)
                     f
                     a2)) a1) (tb2t5
                                (infix_at
                                  (infix_mngt
                                    (infix_mngt int int)
                                    (infix_mngt int int))
                                  b
                                  (infix_at
                                    (infix_mngt
                                      b
                                      (infix_mngt
                                        (infix_mngt int int)
                                        (infix_mngt int int)))
                                    (infix_mngt int int)
                                    f
                                    (t2tb7 a1))
                                  a2))))))

;; fc'def
(assert
  (forall ((b ty))
    (forall ((f uni) (a2 uni) (a1 (Array Int Int)))
      (= (select (tb2t5
                   (fc77 (infix_mngt int int) b (infix_mngt int int) f a2)) a1) 
      (tb2t7
        (infix_at
          (infix_mngt int int)
          b
          (infix_at
            (infix_mngt b (infix_mngt int int))
            (infix_mngt int int)
            f
            (t2tb7 a1))
          a2))))))

;; t2tb
(declare-fun t2tb60 ((Array (Array Int Int) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (Array Int Int) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (sort
      (infix_mngt
        (infix_mngt int int)
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int))))
      (t2tb60 x))))

;; tb2t
(declare-fun tb2t60 (uni) (Array (Array Int Int) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))

;; BridgeL
(assert
  (forall ((i (Array (Array Int Int) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (! (= (tb2t60 (t2tb60 i)) i) :pattern ((t2tb60 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb60 (tb2t60 j)) j) :pattern ((t2tb60 (tb2t60 j))) )))

;; fc'def
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (a2 (Array Int Int)) (a1 (Array Int Int)))
    (= (select (tb2t3
                 (fc77
                   (infix_mngt (infix_mngt int int) (infix_mngt int int))
                   (infix_mngt int int)
                   (infix_mngt int int)
                   (t2tb60 f)
                   (t2tb7 a2))) a1) (select (tb2t3
                                              (infix_at
                                                (infix_mngt
                                                  (infix_mngt int int)
                                                  (infix_mngt
                                                    (infix_mngt int int)
                                                    (infix_mngt int int)))
                                                (infix_mngt int int)
                                                (t2tb60 f)
                                                (t2tb7 a1))) a2))))

;; fc'def
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (a2 (Array Int Int)) (a1 (Array Int Int)))
    (= (select (tb2t5
                 (fc77
                   (infix_mngt int int)
                   (infix_mngt int int)
                   (infix_mngt int int)
                   (t2tb3 f)
                   (t2tb7 a2))) a1) (select (select f a1) a2))))

;; fc'def
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (a2 Int) (a1 (Array Int Int)))
    (= (tb2t8
         (infix_at
           int
           (infix_mngt int int)
           (fc77 int int (infix_mngt int int) (t2tb5 f) (t2tb8 a2))
           (t2tb7 a1))) (select (select f a1) a2))))

;; fc'def
(assert
  (forall ((b ty))
    (forall ((f uni) (a2 uni) (a1 Int))
      (= (select (tb2t7 (fc77 int b int f a2)) a1) (tb2t8
                                                     (infix_at
                                                       int
                                                       b
                                                       (infix_at
                                                         (infix_mngt b int)
                                                         int
                                                         f
                                                         (t2tb8 a1))
                                                       a2))))))

;; fc'def
(assert
  (forall ((f (Array Int (Array Int Int))) (a2 Int) (a1 Int))
    (= (select (tb2t7 (fc77 int int int (t2tb9 f) (t2tb8 a2))) a1) (select 
    (tb2t7
      (infix_at (infix_mngt int int) int (t2tb9 f) (t2tb8 a1))) a2))))

;; fc'def
(assert
  (forall ((a ty) (b ty) (im1 ty))
    (forall ((f uni) (a2 uni) (a1 uni))
      (= (infix_at im1 a (fc77 im1 b a f a2) a1) (infix_at
                                                   im1
                                                   b
                                                   (infix_at
                                                     (infix_mngt b im1)
                                                     a
                                                     f
                                                     a1)
                                                   a2)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((op1 (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))) (s1 uni) (f uni) (a2 circuit))
      (= (select (tb2t2
                   (fc78
                     (infix_mngt
                       (infix_mngt int int)
                       (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                     circuit1
                     a
                     (t2tb23 op1)
                     s1
                     f)) a2) (tb2t3
                               (iterate
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int)))
                                 a
                                 (t2tb23 op1)
                                 s1
                                 (fc77
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt int int)))
                                   circuit1
                                   a
                                   f
                                   (t2tb13 a2))))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((op1 (Array (Array (Array Int Int) (Array Int Int)) (Array (Array (Array Int Int) (Array Int Int)) (Array (Array Int Int) (Array Int Int))))) (s1 uni) (f uni) (a2 (Array Int Int)))
      (= (select (tb2t3
                   (fc78
                     (infix_mngt (infix_mngt int int) (infix_mngt int int))
                     (infix_mngt int int)
                     a
                     (t2tb25 op1)
                     s1
                     f)) a2) (tb2t5
                               (iterate
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt int int))
                                 a
                                 (t2tb25 op1)
                                 s1
                                 (fc77
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int))
                                   (infix_mngt int int)
                                   a
                                   f
                                   (t2tb7 a2))))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((op1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s1 uni) (f uni) (a2 (Array Int Int)))
      (= (select (tb2t5
                   (fc78
                     (infix_mngt int int)
                     (infix_mngt int int)
                     a
                     (t2tb3 op1)
                     s1
                     f)) a2) (tb2t7
                               (iterate
                                 (infix_mngt int int)
                                 a
                                 (t2tb3 op1)
                                 s1
                                 (fc77
                                   (infix_mngt int int)
                                   (infix_mngt int int)
                                   a
                                   f
                                   (t2tb7 a2))))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((op1 (Array Int (Array Int Int))) (s1 uni) (f uni) (a2 Int))
      (= (select (tb2t7 (fc78 int int a (t2tb9 op1) s1 f)) a2) (tb2t8
                                                                 (iterate
                                                                   int
                                                                   a
                                                                   (t2tb9
                                                                    op1)
                                                                   s1
                                                                   (fc77
                                                                    int
                                                                    int
                                                                    a
                                                                    f
                                                                    (t2tb8
                                                                    a2))))))))

;; fc'def
(assert
  (forall ((a ty) (b ty) (im1 ty))
    (forall ((op1 uni) (s1 uni) (f uni) (a2 uni))
      (= (infix_at im1 b (fc78 im1 b a op1 s1 f) a2) (iterate
                                                       im1
                                                       a
                                                       op1
                                                       s1
                                                       (fc77 im1 b a f a2))))))

;; iterate_commute_
(assert
  (forall ((a ty) (b ty) (im1 ty))
    (forall ((op1 uni) (s1 uni) (s2 uni) (f uni))
      (=>
        (iterable im1 op1)
        (=>
          (commut im1 op1)
          (= (iterate im1 a op1 s1 (fc76 im1 b a op1 s2 f)) (iterate
                                                              im1
                                                              b
                                                              op1
                                                              s2
                                                              (fc78
                                                                im1
                                                                b
                                                                a
                                                                op1
                                                                s1
                                                                f))))))))

;; fc
(declare-fun fc79 (ty
  uni) uni)

;; fc_sort
(assert
  (forall ((im1 ty))
    (forall ((x uni))
      (sort (infix_mngt int (infix_mngt int im1)) (fc79 im1 x)))))

;; fc'def
(assert
  (forall ((f (Array Int (Array Int Int))) (a Int) (b Int))
    (= (select (tb2t7
                 (infix_at
                   (infix_mngt int int)
                   int
                   (fc79 int (t2tb9 f))
                   (t2tb8 a))) b) (select (tb2t7
                                            (infix_at
                                              (infix_mngt int int)
                                              int
                                              (t2tb9 f)
                                              (t2tb8 b))) a))))

;; fc'def
(assert
  (forall ((im1 ty))
    (forall ((f uni) (a Int) (b Int))
      (= (infix_at
           im1
           int
           (infix_at (infix_mngt int im1) int (fc79 im1 f) (t2tb8 a))
           (t2tb8 b)) (infix_at
                        im1
                        int
                        (infix_at (infix_mngt int im1) int f (t2tb8 b))
                        (t2tb8 a))))))

;; int_int_iterate_commute
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (f uni) (i Int) (j Int) (k Int) (l Int))
      (=>
        (iterable im1 op1)
        (=>
          (commut im1 op1)
          (=>
            (<= i j)
            (=>
              (<= k l)
              (= (int_int_iterate im1 op1 f i j k l) (int_int_iterate
                                                       im1
                                                       op1
                                                       (fc79 im1 f)
                                                       k
                                                       l
                                                       i
                                                       j)))))))))

;; fc
(declare-fun fc80 (ty
  uni
  uni
  Int
  Int) uni)

;; fc_sort
(assert
  (forall ((im1 ty))
    (forall ((x uni) (x1 uni) (x2 Int) (x3 Int))
      (sort (infix_mngt int im1) (fc80 im1 x x1 x2 x3)))))

;; fc
(declare-fun fc81 (ty
  uni
  Int) uni)

;; fc_sort
(assert
  (forall ((im1 ty))
    (forall ((x uni) (x1 Int)) (sort (infix_mngt int im1) (fc81 im1 x x1)))))

;; fc
(declare-fun fc82 (ty
  uni
  uni
  Int
  Int) uni)

;; fc_sort
(assert
  (forall ((im1 ty))
    (forall ((x uni) (x1 uni) (x2 Int) (x3 Int))
      (sort (infix_mngt int im1) (fc82 im1 x x1 x2 x3)))))

;; fc'def
(assert
  (forall ((op1 (Array Int (Array Int Int))) (f (Array Int (Array Int Int))) (k Int) (l Int) (a Int))
    (= (select (tb2t7 (fc80 int (t2tb9 op1) (t2tb9 f) k l)) a) (tb2t8
                                                                 (int_iterate
                                                                   int
                                                                   (t2tb9
                                                                    op1)
                                                                   (infix_at
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    int
                                                                    (t2tb9 f)
                                                                    (t2tb8 a))
                                                                   k
                                                                   l)))))

;; fc'def
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (f uni) (k Int) (l Int) (a Int))
      (= (infix_at im1 int (fc80 im1 op1 f k l) (t2tb8 a)) (int_iterate
                                                             im1
                                                             op1
                                                             (infix_at
                                                               (infix_mngt
                                                                 int
                                                                 im1)
                                                               int
                                                               f
                                                               (t2tb8 a))
                                                             k
                                                             l)))))

;; fc'def
(assert
  (forall ((f (Array Int (Array Int Int))) (a Int) (b Int))
    (= (select (tb2t7 (fc81 int (t2tb9 f) a)) b) (select (tb2t7
                                                           (infix_at
                                                             (infix_mngt
                                                               int
                                                               int)
                                                             int
                                                             (t2tb9 f)
                                                             (t2tb8 b))) a))))

;; fc'def
(assert
  (forall ((im1 ty))
    (forall ((f uni) (a Int) (b Int))
      (= (infix_at im1 int (fc81 im1 f a) (t2tb8 b)) (infix_at
                                                       im1
                                                       int
                                                       (infix_at
                                                         (infix_mngt int im1)
                                                         int
                                                         f
                                                         (t2tb8 b))
                                                       (t2tb8 a))))))

;; fc'def
(assert
  (forall ((op1 (Array Int (Array Int Int))) (f (Array Int (Array Int Int))) (i Int) (j Int) (a Int))
    (= (select (tb2t7 (fc82 int (t2tb9 op1) (t2tb9 f) i j)) a) (tb2t8
                                                                 (int_iterate
                                                                   int
                                                                   (t2tb9
                                                                    op1)
                                                                   (fc81
                                                                    int
                                                                    (t2tb9 f)
                                                                    a)
                                                                   i
                                                                   j)))))

;; fc'def
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (f uni) (i Int) (j Int) (a Int))
      (= (infix_at im1 int (fc82 im1 op1 f i j) (t2tb8 a)) (int_iterate
                                                             im1
                                                             op1
                                                             (fc81 im1 f a)
                                                             i
                                                             j)))))

;; int_iterate_commute
(assert
  (forall ((im1 ty))
    (forall ((op1 uni) (f uni) (i Int) (j Int) (k Int) (l Int))
      (=>
        (iterable im1 op1)
        (=>
          (commut im1 op1)
          (=>
            (<= i j)
            (=>
              (<= k l)
              (= (int_iterate im1 op1 (fc80 im1 op1 f k l) i j) (int_iterate
                                                                  im1
                                                                  op1
                                                                  (fc82
                                                                    im1
                                                                    op1
                                                                    f
                                                                    i
                                                                    j)
                                                                  k
                                                                  l)))))))))

;; fc
(declare-fun fc83 ((Array Int (Array Int complex))
  Int
  Int) (Array Int complex))

;; fc
(declare-fun fc84 ((Array Int (Array Int complex))
  Int) (Array Int complex))

;; fc
(declare-fun fc85 ((Array Int (Array Int complex))
  Int
  Int) (Array Int complex))

;; t2tb
(declare-fun t2tb61 ((Array Int (Array Int complex))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array Int (Array Int complex))))
    (sort (infix_mngt int (infix_mngt int complex1)) (t2tb61 x))))

;; tb2t
(declare-fun tb2t61 (uni) (Array Int (Array Int complex)))

;; BridgeL
(assert
  (forall ((i (Array Int (Array Int complex))))
    (! (= (tb2t61 (t2tb61 i)) i) :pattern ((t2tb61 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort (infix_mngt int (infix_mngt int complex1)) j)
         (= (t2tb61 (tb2t61 j)) j)) :pattern ((t2tb61 (tb2t61 j))) )))

;; fc'def
(assert
  (forall ((f (Array Int (Array Int complex))) (k Int) (l Int) (k1 Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc83 f k l)) (t2tb8 k1))) 
    (ind_sum
      (tb2t51 (infix_at (infix_mngt int complex1) int (t2tb61 f) (t2tb8 k1)))
      k
      l))))

;; fc'def
(assert
  (forall ((f (Array Int (Array Int complex))) (k1 Int) (k2 Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc84 f k1)) (t2tb8 k2))) 
    (tb2t
      (infix_at
        complex1
        int
        (infix_at (infix_mngt int complex1) int (t2tb61 f) (t2tb8 k2))
        (t2tb8 k1))))))

;; fc'def
(assert
  (forall ((f (Array Int (Array Int complex))) (i Int) (j Int) (k1 Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc85 f i j)) (t2tb8 k1))) 
    (ind_sum
      (fc84 f k1)
      i
      j))))

;; ind_sum_commute
(assert
  (forall ((f (Array Int (Array Int complex))) (i Int) (j Int) (k Int) (l Int))
    (=>
      (<= i j)
      (=> (<= k l) (= (ind_sum (fc83 f k l) i j) (ind_sum (fc85 f i j) k l))))))

;; fc
(declare-fun fc86 (ty
  ty
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni))
      (sort (infix_mngt a complex1) (fc86 b a x x1)))))

;; fc
(declare-fun fc87 (ty
  ty
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni))
      (sort (infix_mngt a complex1) (fc87 b a x x1)))))

;; fc
(declare-fun fc88 (ty
  ty
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni))
      (sort (infix_mngt b complex1) (fc88 b a x x1)))))

;; fc'def
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (sb uni) (a1 uni))
      (= (tb2t (infix_at complex1 a (fc86 b a f sb) a1)) (sum
                                                           b
                                                           sb
                                                           (infix_at
                                                             (infix_mngt
                                                               b
                                                               complex1)
                                                             a
                                                             f
                                                             a1))))))

;; fc'def
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (b1 uni) (a1 uni))
      (= (tb2t (infix_at complex1 a (fc87 b a f b1) a1)) (tb2t
                                                           (infix_at
                                                             complex1
                                                             b
                                                             (infix_at
                                                               (infix_mngt
                                                                 b
                                                                 complex1)
                                                               a
                                                               f
                                                               a1)
                                                             b1))))))

;; fc'def
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (sa uni) (b1 uni))
      (= (tb2t (infix_at complex1 b (fc88 b a f sa) b1)) (sum
                                                           a
                                                           sa
                                                           (fc87 b a f b1))))))

;; sum_commute
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (sa uni) (sb uni))
      (= (sum a sa (fc86 b a f sb)) (sum b sb (fc88 b a f sa))))))

;; non_c_zero
(declare-fun non_c_zero (ty
  uni
  uni) uni)

;; non_c_zero_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 uni)) (sort (set1 a) (non_c_zero a x x1)))))

;; non_c_zero'def
(assert
  (forall ((a ty))
    (forall ((s uni) (t uni))
      (= (non_c_zero a s t) (nonn_part
                              complex1
                              a
                              (t2tb46 infix_pldt_closure)
                              s
                              t)))))

;; non_c_zero'spec
(assert
  (forall ((a ty))
    (forall ((s uni) (t uni))
      (forall ((e uni))
        (=
          (mem a e (non_c_zero a s t))
          (and (mem a e s) (not (= (tb2t (infix_at complex1 a t e)) c_zero))))))))

;; get_non_c_zero_member
(assert
  (forall ((a ty))
    (forall ((s uni) (t uni) (e uni))
      (=>
        (mem a e (non_c_zero a s t))
        (and (mem a e s) (not (= (tb2t (infix_at complex1 a t e)) c_zero)))))))

;; set_non_c_zero_member
(assert
  (forall ((a ty))
    (forall ((s uni) (t uni) (e uni))
      (=>
        (mem a e s)
        (=>
          (not (= (tb2t (infix_at complex1 a t e)) c_zero))
          (mem a e (non_c_zero a s t)))))))

;; set_non_c_zero_member_gen
(assert
  (forall ((a ty))
    (forall ((s uni) (t uni))
      (forall ((e uni))
        (=>
          (and (mem a e s) (not (= (tb2t (infix_at complex1 a t e)) c_zero)))
          (mem a e (non_c_zero a s t)))))))

;; set_non_c_zero_member_gen_
(assert
  (forall ((a ty))
    (forall ((s uni) (t uni))
      (forall ((e uni))
        (=>
          (and (mem a e s) (not (= (tb2t (infix_at complex1 a t e)) c_zero)))
          (mem a e (non_c_zero a s t)))))))

;; sum_nullity_partition
(assert
  (forall ((a ty))
    (forall ((s uni) (t uni)) (= (sum a s t) (sum a (non_c_zero a s t) t)))))

;; fc
(declare-fun fc89 (ty
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 uni)) (sort (infix_mngt a complex1) (fc89 a x x1)))))

;; fc'def
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (t (Array (Array Int Int) complex)) (b (Array Int Int)))
    (= (tb2t
         (infix_at
           complex1
           (infix_mngt int int)
           (fc89 (infix_mngt int int) (t2tb5 f) (t2tb49 t))
           (t2tb7 b))) (tb2t
                         (infix_at
                           complex1
                           (infix_mngt int int)
                           (t2tb49 t)
                           (t2tb7 (select f b)))))))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (t (Array Int complex)) (b Int))
    (= (tb2t
         (infix_at complex1 int (fc89 int (t2tb7 f) (t2tb51 t)) (t2tb8 b))) 
    (tb2t
      (infix_at complex1 int (t2tb51 t) (t2tb8 (select f b)))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (t uni) (b uni))
      (= (tb2t (infix_at complex1 a (fc89 a f t) b)) (tb2t
                                                       (infix_at
                                                         complex1
                                                         a
                                                         t
                                                         (infix_at a a f b)))))))

;; non_null_map
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (t uni))
      (= (non_c_zero a (map1 a a f s) t) (map1
                                           a
                                           a
                                           f
                                           (non_c_zero a s (fc89 a f t)))))))

;; fc
(declare-fun fc90 (ty
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 uni)) (sort (infix_mngt a complex1) (fc90 a x x1)))))

;; fc
(declare-fun fc91 (ty
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 uni)) (sort (infix_mngt a complex1) (fc91 a x x1)))))

;; fc
(declare-fun fc92 (ty
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 uni)) (sort (infix_mngt a complex1) (fc92 a x x1)))))

;; fc'def
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (t (Array (Array Int Int) complex)) (b (Array Int Int)))
    (= (tb2t
         (infix_at
           complex1
           (infix_mngt int int)
           (fc90 (infix_mngt int int) (t2tb5 f) (t2tb49 t))
           (t2tb7 b))) (tb2t
                         (infix_at
                           complex1
                           (infix_mngt int int)
                           (t2tb49 t)
                           (t2tb7 (select f b)))))))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (t (Array Int complex)) (b Int))
    (= (tb2t
         (infix_at complex1 int (fc90 int (t2tb7 f) (t2tb51 t)) (t2tb8 b))) 
    (tb2t
      (infix_at complex1 int (t2tb51 t) (t2tb8 (select f b)))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (t uni) (b uni))
      (= (tb2t (infix_at complex1 a (fc90 a f t) b)) (tb2t
                                                       (infix_at
                                                         complex1
                                                         a
                                                         t
                                                         (infix_at a a f b)))))))

;; fc'def
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (t (Array (Array Int Int) complex)) (b (Array Int Int)))
    (= (tb2t
         (infix_at
           complex1
           (infix_mngt int int)
           (fc91 (infix_mngt int int) (t2tb5 f) (t2tb49 t))
           (t2tb7 b))) (tb2t
                         (infix_at
                           complex1
                           (infix_mngt int int)
                           (t2tb49 t)
                           (t2tb7 (select f b)))))))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (t (Array Int complex)) (b Int))
    (= (tb2t
         (infix_at complex1 int (fc91 int (t2tb7 f) (t2tb51 t)) (t2tb8 b))) 
    (tb2t
      (infix_at complex1 int (t2tb51 t) (t2tb8 (select f b)))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (t uni) (b uni))
      (= (tb2t (infix_at complex1 a (fc91 a f t) b)) (tb2t
                                                       (infix_at
                                                         complex1
                                                         a
                                                         t
                                                         (infix_at a a f b)))))))

;; fc'def
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (t (Array (Array Int Int) complex)) (b (Array Int Int)))
    (= (tb2t
         (infix_at
           complex1
           (infix_mngt int int)
           (fc92 (infix_mngt int int) (t2tb5 f) (t2tb49 t))
           (t2tb7 b))) (tb2t
                         (infix_at
                           complex1
                           (infix_mngt int int)
                           (t2tb49 t)
                           (t2tb7 (select f b)))))))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (t (Array Int complex)) (b Int))
    (= (tb2t
         (infix_at complex1 int (fc92 int (t2tb7 f) (t2tb51 t)) (t2tb8 b))) 
    (tb2t
      (infix_at complex1 int (t2tb51 t) (t2tb8 (select f b)))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (t uni) (b uni))
      (= (tb2t (infix_at complex1 a (fc92 a f t) b)) (tb2t
                                                       (infix_at
                                                         complex1
                                                         a
                                                         t
                                                         (infix_at a a f b)))))))

;; map_sum_eq_nonnull
(assert
  (forall ((s (set Int)) (f (Array Int Int)) (t (Array Int complex)))
    (=>
      (p_bijective1
        f
        (tb2t16 (non_c_zero int (t2tb16 s) (fc90 int (t2tb7 f) (t2tb51 t))))
        (tb2t16
          (non_c_zero int (map1 int int (t2tb7 f) (t2tb16 s)) (t2tb51 t))))
      (= (sum
           int
           (non_c_zero int (map1 int int (t2tb7 f) (t2tb16 s)) (t2tb51 t))
           (t2tb51 t)) (sum
                         int
                         (non_c_zero
                           int
                           (t2tb16 s)
                           (fc91 int (t2tb7 f) (t2tb51 t)))
                         (fc92 int (t2tb7 f) (t2tb51 t)))))))

;; map_sum_eq_nonnull
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (t uni))
      (=>
        (p_bijective
          a
          a
          f
          (non_c_zero a s (fc90 a f t))
          (non_c_zero a (map1 a a f s) t))
        (= (sum a (non_c_zero a (map1 a a f s) t) t) (sum
                                                       a
                                                       (non_c_zero
                                                         a
                                                         s
                                                         (fc91 a f t))
                                                       (fc92 a f t)))))))

;; sum_null_but_one
(assert
  (forall ((a ty))
    (forall ((s uni) (t uni))
      (=>
        (= (cardinal a (non_c_zero a s t)) 1)
        (= (sum a s t) (tb2t
                         (infix_at
                           complex1
                           a
                           t
                           (element a (non_c_zero a s t)))))))))

;; sum_null
(assert
  (forall ((a ty))
    (forall ((s uni) (t uni))
      (=> (= (cardinal a (non_c_zero a s t)) 0) (= (sum a s t) c_zero)))))

;; sum_null_
(assert
  (forall ((a ty))
    (forall ((s uni) (t uni))
      (=>
        (forall ((e uni))
          (=>
            (sort a e)
            (=> (mem a e s) (= (tb2t (infix_at complex1 a t e)) c_zero))))
        (= (sum a s t) c_zero)))))

;; sum_null_forall
(assert
  (forall ((a ty))
    (forall ((s uni) (t uni))
      (=>
        (forall ((e uni))
          (=>
            (sort a e)
            (=> (mem a e s) (= (tb2t (infix_at complex1 a t e)) c_zero))))
        (= (sum a s t) c_zero)))))

;; ind_sum_null
(assert
  (forall ((t (Array Int complex)) (i Int) (j Int))
    (=>
      (forall ((k Int))
        (=>
          (and (<= i k) (< k j))
          (= (tb2t (infix_at complex1 int (t2tb51 t) (t2tb8 k))) c_zero)))
      (= (ind_sum t i j) c_zero))))

;; sum_null_but_one_elt
(assert
  (forall ((a ty))
    (forall ((s uni) (t uni) (elt uni))
      (=>
        (and
          (mem a elt s)
          (not (= (tb2t (infix_at complex1 a t elt)) c_zero)))
        (=>
          (forall ((a1 uni))
            (=>
              (sort a a1)
              (=>
                (mem a a1 s)
                (=>
                  (not (= a1 elt))
                  (= (tb2t (infix_at complex1 a t a1)) c_zero)))))
          (= (sum a s t) (tb2t (infix_at complex1 a t elt))))))))

;; sum_null_but_maybe_one_elt
(assert
  (forall ((a ty))
    (forall ((t uni) (s uni) (elt uni))
      (=>
        (mem a elt s)
        (=>
          (forall ((k uni))
            (=>
              (sort a k)
              (=>
                (mem a k s)
                (=>
                  (not (= k elt))
                  (= (tb2t (infix_at complex1 a t k)) c_zero)))))
          (= (sum a s t) (tb2t (infix_at complex1 a t elt))))))))

;; sum_null_but_maybe_two_elt
(assert
  (forall ((a ty))
    (forall ((t uni) (s uni) (elt uni) (eltqt uni))
      (=>
        (sort a elt)
        (=>
          (sort a eltqt)
          (=>
            (mem a elt s)
            (=>
              (mem a eltqt s)
              (=>
                (not (= elt eltqt))
                (=>
                  (forall ((k uni))
                    (=>
                      (sort a k)
                      (=>
                        (mem a k s)
                        (=>
                          (not (= k elt))
                          (=>
                            (not (= k eltqt))
                            (= (tb2t (infix_at complex1 a t k)) c_zero))))))
                  (= (sum a s t) (infix_pldt
                                   (tb2t (infix_at complex1 a t elt))
                                   (tb2t (infix_at complex1 a t eltqt)))))))))))))

;; ind_sum_null_but_maybe_one_elt
(assert
  (forall ((t (Array Int complex)) (i Int) (j Int) (ind Int))
    (=>
      (and (<= i ind) (< ind j))
      (=>
        (forall ((k Int))
          (=>
            (and (<= i k) (< k j))
            (=>
              (not (= k ind))
              (= (tb2t (infix_at complex1 int (t2tb51 t) (t2tb8 k))) 
              c_zero))))
        (= (ind_sum t i j) (tb2t
                             (infix_at complex1 int (t2tb51 t) (t2tb8 ind))))))))

;; ind_sum_null_but_maybe_two_elt
(assert
  (forall ((t (Array Int complex)) (i Int) (j Int) (ind Int) (indqt Int))
    (=>
      (and (<= i ind) (< ind j))
      (=>
        (and (<= i indqt) (< indqt j))
        (=>
          (not (= ind indqt))
          (=>
            (forall ((k Int))
              (=>
                (and (<= i k) (< k j))
                (=>
                  (not (= k ind))
                  (=>
                    (not (= k indqt))
                    (= (tb2t (infix_at complex1 int (t2tb51 t) (t2tb8 k))) 
                    c_zero)))))
            (= (ind_sum t i j) (infix_pldt
                                 (tb2t
                                   (infix_at
                                     complex1
                                     int
                                     (t2tb51 t)
                                     (t2tb8 ind)))
                                 (tb2t
                                   (infix_at
                                     complex1
                                     int
                                     (t2tb51 t)
                                     (t2tb8 indqt)))))))))))

;; fc
(declare-fun fc93 ((Array Int Int)
  (Array Int complex)) (Array Int complex))

;; fc'def
(assert
  (forall ((g (Array Int Int)) (f (Array Int complex)) (k Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc93 g f)) (t2tb8 k))) (tb2t
                                                                    (infix_at
                                                                    complex1
                                                                    int
                                                                    (t2tb51
                                                                    f)
                                                                    (t2tb8
                                                                    (select g k)))))))

;; ind_sum_map_filter
(assert
  (forall ((n Int) (nqt Int) (g (Array Int Int)) (f (Array Int complex)) (p (Array Int Bool)))
    (=>
      (and (<= 0 nqt) (<= nqt n))
      (=>
        (p_injective int int (t2tb7 g) (t2tb16 (to_fset 0 nqt)))
        (=>
          (forall ((k Int))
            (=>
              (and (<= 0 k) (< k n))
              (=>
                (not
                  (= (tb2t10 (infix_at bool int (t2tb21 p) (t2tb8 k))) true))
                (= (tb2t (infix_at complex1 int (t2tb51 f) (t2tb8 k))) 
                c_zero))))
          (=>
            (forall ((k Int))
              (=>
                (and (<= 0 k) (< k nqt))
                (and (<= 0 (select g k)) (< (select g k) n))))
            (=>
              (forall ((k Int))
                (=>
                  (and (<= 0 k) (< k n))
                  (=
                    (= (tb2t10 (infix_at bool int (t2tb21 p) (t2tb8 k))) true)
                    (exists ((ant Int))
                      (and (and (<= 0 ant) (< ant nqt)) (= k (select g ant)))))))
              (= (ind_sum f 0 n) (ind_sum (fc93 g f) 0 nqt)))))))))

;; infix *._closure
(declare-fun infix_asdt_closure () (Array complex (Array complex complex)))

;; infix *._closure_def
(assert
  (forall ((y complex) (y1 complex))
    (= (tb2t
         (infix_at
           complex1
           complex1
           (infix_at
             (infix_mngt complex1 complex1)
             complex1
             (t2tb46 infix_asdt_closure)
             (t2tb y))
           (t2tb y1))) (infix_asdt y y1))))

;; neutral_c_one
(assert
  (and
    (neutral complex1 (t2tb46 infix_asdt_closure) (t2tb c_one))
    (iterable complex1 (t2tb46 infix_asdt_closure))))

;; product_iter
(assert
  (and
    (op_neutral_left complex1 (t2tb46 infix_asdt_closure) (t2tb c_one))
    (and
      (and
        (op_neutral_right complex1 (t2tb46 infix_asdt_closure) (t2tb c_one))
        (op_assoc complex1 (t2tb46 infix_asdt_closure)))
      (and
        (commut complex1 (t2tb46 infix_asdt_closure))
        (iterates complex1 (t2tb46 infix_asdt_closure) (t2tb c_one))))))

;; product
(declare-fun product1 (ty
  uni
  uni) complex)

;; product'def
(assert
  (forall ((a ty))
    (forall ((s uni) (t uni))
      (= (product1 a s t) (tb2t
                            (iterate
                              complex1
                              a
                              (t2tb46 infix_asdt_closure)
                              s
                              t))))))

;; product_eq
(assert
  (forall ((a ty))
    (forall ((s uni) (t uni) (tqt uni))
      (=>
        (forall ((e uni))
          (=>
            (sort a e)
            (=>
              (mem a e s)
              (= (tb2t (infix_at complex1 a t e)) (tb2t
                                                    (infix_at
                                                      complex1
                                                      a
                                                      tqt
                                                      e))))))
        (= (product1 a s t) (product1 a s tqt))))))

;; product_eq_gen
(assert
  (forall ((a ty))
    (forall ((s uni) (sqt uni) (t uni) (tqt uni))
      (=>
        (= s sqt)
        (=>
          (forall ((e uni))
            (=>
              (sort a e)
              (=>
                (mem a e s)
                (= (tb2t (infix_at complex1 a t e)) (tb2t
                                                      (infix_at
                                                        complex1
                                                        a
                                                        tqt
                                                        e))))))
          (= (product1 a s t) (product1 a sqt tqt)))))))

;; product_empty
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni)) (=> (is_empty a s) (= (product1 a s f) c_one)))))

;; product_iter_
(assert (iterable complex1 (t2tb46 infix_asdt_closure)))

;; add_product
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (x uni))
      (=>
        (not (mem a x s))
        (= (product1 a (add a x s) f) (infix_asdt
                                        (tb2t (infix_at complex1 a f x))
                                        (product1 a s f)))))))

;; product_add
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (x uni))
      (=>
        (not (mem a x s))
        (= (product1 a (add a x s) f) (infix_asdt
                                        (product1 a s f)
                                        (tb2t (infix_at complex1 a f x))))))))

;; neutral_one
(assert (= (tb2t (neutral_elt complex1 (t2tb46 infix_asdt_closure))) c_one))

;; ind_product
(declare-fun ind_product ((Array Int complex)
  Int
  Int) complex)

;; ind_product'def
(assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
    (= (ind_product f i j) (tb2t
                             (int_iterate
                               complex1
                               (t2tb46 infix_asdt_closure)
                               (t2tb51 f)
                               i
                               j)))))

;; ind_product_eq
(assert
  (forall ((f (Array Int complex)) (g (Array Int complex)) (i Int) (j Int))
    (=>
      (forall ((k Int))
        (=>
          (and (<= i k) (< k j))
          (= (tb2t (infix_at complex1 int (t2tb51 f) (t2tb8 k))) (tb2t
                                                                   (infix_at
                                                                    complex1
                                                                    int
                                                                    (t2tb51
                                                                    g)
                                                                    (t2tb8 k))))))
      (= (ind_product f i j) (ind_product g i j)))))

;; ind_product_cardone
(assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
    (=>
      (= j (+ i 1))
      (= (ind_product f i j) (tb2t
                               (infix_at complex1 int (t2tb51 f) (t2tb8 i)))))))

;; ind_product_eq_gen
(assert
  (forall ((f (Array Int complex)) (g (Array Int complex)) (i1 Int) (j1 Int) (i2 Int) (j2 Int))
    (=>
      (forall ((k Int))
        (=>
          (and (<= i1 k) (< k j1))
          (= (tb2t (infix_at complex1 int (t2tb51 f) (t2tb8 k))) (tb2t
                                                                   (infix_at
                                                                    complex1
                                                                    int
                                                                    (t2tb51
                                                                    g)
                                                                    (t2tb8 k))))))
      (=>
        (= i1 i2)
        (=> (= j1 j2) (= (ind_product f i1 j1) (ind_product g i2 j2)))))))

;; ind_product_right_extension
(assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
    (=>
      (< i j)
      (= (ind_product f i j) (infix_asdt
                               (ind_product f i (- j 1))
                               (tb2t
                                 (infix_at
                                   complex1
                                   int
                                   (t2tb51 f)
                                   (t2tb8 (- j 1)))))))))

;; ind_product_left_extension
(assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
    (=>
      (< i j)
      (= (ind_product f i j) (infix_asdt
                               (tb2t
                                 (infix_at complex1 int (t2tb51 f) (t2tb8 i)))
                               (ind_product f (+ i 1) j))))))

;; ind_product_to_product
(assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
    (= (ind_product f i j) (product1 int (t2tb16 (to_fset i j)) (t2tb51 f)))))

;; fc
(declare-fun fc94 (ty
  ty
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni))
      (sort (infix_mngt b complex1) (fc94 b a x x1)))))

;; fc'def
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (t (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) complex)) (b circuit))
    (= (tb2t
         (infix_at
           complex1
           circuit1
           (fc94
             circuit1
             (infix_mngt
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int)))
             (t2tb2 f)
             (t2tb48 t))
           (t2tb13 b))) (tb2t
                          (infix_at
                            complex1
                            (infix_mngt
                              (infix_mngt int int)
                              (infix_mngt
                                (infix_mngt int int)
                                (infix_mngt int int)))
                            (t2tb48 t)
                            (t2tb3 (select f b)))))))

;; fc'def
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (t (Array (Array (Array Int Int) (Array Int Int)) complex)) (b (Array Int Int)))
    (= (tb2t
         (infix_at
           complex1
           (infix_mngt int int)
           (fc94
             (infix_mngt int int)
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (t2tb3 f)
             (t2tb50 t))
           (t2tb7 b))) (tb2t
                         (infix_at
                           complex1
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt int int))
                           (t2tb50 t)
                           (t2tb5 (select f b)))))))

;; fc'def
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (t (Array (Array Int Int) complex)) (b (Array Int Int)))
    (= (tb2t
         (infix_at
           complex1
           (infix_mngt int int)
           (fc94
             (infix_mngt int int)
             (infix_mngt int int)
             (t2tb5 f)
             (t2tb49 t))
           (t2tb7 b))) (tb2t
                         (infix_at
                           complex1
                           (infix_mngt int int)
                           (t2tb49 t)
                           (t2tb7 (select f b)))))))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (t (Array Int complex)) (b Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (fc94 int int (t2tb7 f) (t2tb51 t))
           (t2tb8 b))) (tb2t
                         (infix_at
                           complex1
                           int
                           (t2tb51 t)
                           (t2tb8 (select f b)))))))

;; fc'def
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (t uni) (b1 uni))
      (= (tb2t (infix_at complex1 b (fc94 b a f t) b1)) (tb2t
                                                          (infix_at
                                                            complex1
                                                            a
                                                            t
                                                            (infix_at
                                                              a
                                                              b
                                                              f
                                                              b1)))))))

;; map_product_eq
(assert
  (forall ((a ty) (b ty))
    (forall ((s uni) (f uni) (t uni))
      (=>
        (p_injective a b f s)
        (= (product1 a (map1 a b f s) t) (product1 b s (fc94 b a f t)))))))

;; fc
(declare-fun fc95 ((Array Int Int)
  (Array Int complex)) (Array Int complex))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (t (Array Int complex)) (b Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc95 f t)) (t2tb8 b))) (tb2t
                                                                    (infix_at
                                                                    complex1
                                                                    int
                                                                    (t2tb51
                                                                    t)
                                                                    (t2tb8
                                                                    (select f b)))))))

;; map_ind_product_eq
(assert
  (forall ((i Int) (j Int) (k Int) (l Int) (f (Array Int Int)) (t (Array Int complex)))
    (=>
      (p_bijective1 f (to_fset i j) (to_fset k l))
      (= (ind_product t k l) (ind_product (fc95 f t) i j)))))

;; ind_product_right_extension_comm
(assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
    (=>
      (< i j)
      (= (infix_asdt
           (ind_product f i (- j 1))
           (tb2t (infix_at complex1 int (t2tb51 f) (t2tb8 (- j 1))))) 
      (ind_product
        f
        i
        j)))))

;; t2tb
(declare-fun t2tb62 ((set complex)) uni)

;; t2tb_sort
(assert (forall ((x (set complex))) (sort (set1 complex1) (t2tb62 x))))

;; tb2t
(declare-fun tb2t62 (uni) (set complex))

;; BridgeL
(assert
  (forall ((i (set complex)))
    (! (= (tb2t62 (t2tb62 i)) i) :pattern ((t2tb62 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=> (sort (set1 complex1) j) (= (t2tb62 (tb2t62 j)) j)) :pattern (
    (t2tb62
      (tb2t62 j))) )))

;; ind_product_eq_func
(assert
  (forall ((i Int) (j Int) (f1 (Array Int complex)) (f2 (Array Int complex)))
    (=>
      (p_injective complex1 int (t2tb51 f1) (t2tb16 (to_fset i j)))
      (=>
        (p_injective complex1 int (t2tb51 f2) (t2tb16 (to_fset i j)))
        (=>
          (= (tb2t62 (map1 complex1 int (t2tb51 f1) (t2tb16 (to_fset i j)))) 
          (tb2t62
            (map1 complex1 int (t2tb51 f2) (t2tb16 (to_fset i j)))))
          (= (ind_product f1 i j) (ind_product f2 i j)))))))

;; ind_product_trans
(assert
  (forall ((f (Array Int complex)) (i Int) (k Int) (j Int))
    (=>
      (and (<= i k) (<= k j))
      (= (ind_product f i j) (infix_asdt
                               (ind_product f i k)
                               (ind_product f k j))))))

;; ind_product_zero_pre
(assert
  (forall ((f (Array Int complex)) (i Int) (t Int) (j Int))
    (=>
      (and (<= i t) (< t j))
      (=>
        (= (tb2t (infix_at complex1 int (t2tb51 f) (t2tb8 t))) c_zero)
        (= (ind_product f i j) c_zero)))))

;; ind_product_zero
(assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
    (=>
      (<= i j)
      (=>
        (exists ((t Int))
          (and
            (and (<= i t) (< t j))
            (= (tb2t (infix_at complex1 int (t2tb51 f) (t2tb8 t))) c_zero)))
        (= (ind_product f i j) c_zero)))))

;; ind_product_zero_elt
(assert
  (forall ((f (Array Int complex)) (i Int) (j Int) (t Int))
    (=>
      (<= i j)
      (=>
        (and (<= i t) (< t j))
        (=>
          (= (tb2t (infix_at complex1 int (t2tb51 f) (t2tb8 t))) c_zero)
          (= (ind_product f i j) c_zero))))))

;; ind_product_const_c_one
(assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
    (=>
      (<= i j)
      (=>
        (forall ((t Int))
          (=>
            (and (<= i t) (< t j))
            (= (tb2t (infix_at complex1 int (t2tb51 f) (t2tb8 t))) c_one)))
        (= (ind_product f i j) c_one)))))

;; fc
(declare-fun fc96 (ty
  ty
  uni
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni) (x2 uni))
      (sort (infix_mngt a complex1) (fc96 b a x x1 x2)))))

;; fc'def
(assert
  (forall ((a ty) (b ty))
    (forall ((s2 uni) (p uni) (f uni) (l uni))
      (= (tb2t (infix_at complex1 a (fc96 b a s2 p f) l)) (sum
                                                            b
                                                            (my_filter
                                                              b
                                                              s2
                                                              (infix_at
                                                                (infix_mngt
                                                                  b
                                                                  bool)
                                                                a
                                                                p
                                                                l))
                                                            f)))))

;; sum_filter_decomp
(assert
  (forall ((a ty) (b ty))
    (forall ((s uni) (s2 uni) (p uni) (p1 uni) (f uni))
      (=>
        (forall ((e uni))
          (=>
            (sort b e)
            (=>
              (mem b e s2)
              (=>
                (or
                  (= (tb2t10 (infix_at bool b p1 e)) true)
                  (exists ((eqt uni))
                    (and
                      (sort a eqt)
                      (and
                        (mem a eqt s)
                        (= (tb2t10
                             (infix_at
                               bool
                               b
                               (infix_at (infix_mngt b bool) a p eqt)
                               e)) true)))))
                (and
                  (= (tb2t10 (infix_at bool b p1 e)) true)
                  (exists ((eqt uni))
                    (and
                      (mem a eqt s)
                      (= (tb2t10
                           (infix_at
                             bool
                             b
                             (infix_at (infix_mngt b bool) a p eqt)
                             e)) true))))))))
        (=>
          (forall ((e uni))
            (=>
              (sort b e)
              (forall ((eqt uni) (eqtqt uni))
                (=>
                  (sort a eqt)
                  (=>
                    (sort a eqtqt)
                    (=>
                      (mem b e s2)
                      (=>
                        (= (tb2t10 (infix_at bool b p1 e)) true)
                        (=>
                          (mem a eqt s)
                          (=>
                            (mem a eqtqt s)
                            (=>
                              (= (tb2t10
                                   (infix_at
                                     bool
                                     b
                                     (infix_at (infix_mngt b bool) a p eqt)
                                     e)) true)
                              (=>
                                (= (tb2t10
                                     (infix_at
                                       bool
                                       b
                                       (infix_at
                                         (infix_mngt b bool)
                                         a
                                         p
                                         eqtqt)
                                       e)) true)
                                (= eqt eqtqt))))))))))))
          (= (sum a s (fc96 b a s2 p f)) (sum b (my_filter b s2 p1) f)))))))

;; ind_sum_constant
(assert
  (forall ((f (Array Int complex)) (valu complex) (i Int) (j Int))
    (=>
      (<= i j)
      (=>
        (forall ((k Int))
          (=>
            (and (<= i k) (< k j))
            (= (tb2t (infix_at complex1 int (t2tb51 f) (t2tb8 k))) valu)))
        (= (ind_sum f i j) (infix_asdt valu (i_to_c (- j i))))))))

;; ind_sum_constant_from_z
(assert
  (forall ((f (Array Int complex)) (valu complex) (j Int))
    (=>
      (<= 0 j)
      (=>
        (forall ((k Int))
          (=>
            (and (<= 0 k) (< k j))
            (= (tb2t (infix_at complex1 int (t2tb51 f) (t2tb8 k))) valu)))
        (= (ind_sum f 0 j) (infix_asdt valu (i_to_c j)))))))

;; sum_constant_lower_bound
(assert
  (forall ((a ty))
    (forall ((s uni) (t uni) (x complex))
      (=>
        (forall ((e uni))
          (=>
            (sort a e)
            (=> (mem a e s) (real_ (tb2t (infix_at complex1 a t e))))))
        (=>
          (forall ((e uni))
            (=>
              (sort a e)
              (=>
                (mem a e s)
                (infix_lseqdt (tb2t (infix_at complex1 a t e)) x))))
          (=>
            (real_ x)
            (infix_lseqdt (sum a s t) (infix_asdt (i_to_c (cardinal a s)) x))))))))

;; sum_inf
(assert
  (forall ((a ty))
    (forall ((s uni) (t uni) (tqt uni))
      (=>
        (forall ((e uni))
          (=>
            (sort a e)
            (=> (mem a e s) (real_ (tb2t (infix_at complex1 a t e))))))
        (=>
          (forall ((e uni))
            (=>
              (sort a e)
              (=> (mem a e s) (real_ (tb2t (infix_at complex1 a tqt e))))))
          (=>
            (forall ((e uni))
              (=>
                (sort a e)
                (=>
                  (mem a e s)
                  (infix_lseqdt
                    (tb2t (infix_at complex1 a t e))
                    (tb2t (infix_at complex1 a tqt e))))))
            (infix_lseqdt (sum a s t) (sum a s tqt))))))))

;; sum_constant
(assert
  (forall ((a ty))
    (forall ((s uni) (t uni) (x complex))
      (=>
        (forall ((e uni))
          (=>
            (sort a e)
            (=> (mem a e s) (= (tb2t (infix_at complex1 a t e)) x))))
        (= (sum a s t) (infix_asdt (i_to_c (cardinal a s)) x))))))

;; ind_sum_constant_case
(assert
  (forall ((n Int) (t (Array Int complex)) (p (Array Int Bool)) (x complex) (y complex) (k1 Int))
    (=>
      (<= 0 n)
      (=>
        (= (cardinal int (my_filter int (t2tb16 (to_fset 0 n)) (t2tb21 p))) k1)
        (=>
          (forall ((e Int))
            (=>
              (and (<= 0 e) (< e n))
              (=>
                (= (tb2t10 (infix_at bool int (t2tb21 p) (t2tb8 e))) true)
                (= (tb2t (infix_at complex1 int (t2tb51 t) (t2tb8 e))) x))))
          (=>
            (forall ((e Int))
              (=>
                (and (<= 0 e) (< e n))
                (=>
                  (not
                    (= (tb2t10 (infix_at bool int (t2tb21 p) (t2tb8 e))) true))
                  (= (tb2t (infix_at complex1 int (t2tb51 t) (t2tb8 e))) y))))
            (= (ind_sum t 0 n) (infix_pldt
                                 (infix_asdt (i_to_c k1) x)
                                 (infix_asdt (i_to_c (- n k1)) y)))))))))

;; sum_const_one
(assert
  (forall ((a ty))
    (forall ((s uni) (t uni))
      (=>
        (forall ((e uni))
          (=>
            (sort a e)
            (=> (mem a e s) (= (tb2t (infix_at complex1 a t e)) c_one))))
        (= (sum a s t) (i_to_c (cardinal a s)))))))

;; abs_eqinf
(assert
  (forall ((x Int) (y Int))
    (=> (and (<= x y) (<= y 0)) (<= (abs1 y) (abs1 x)))))

;; abs_inf
(assert
  (forall ((x Int) (y Int))
    (=> (and (< 0 x) (and (< x y) (<= y 0))) (< (abs1 y) (abs1 x)))))

;; abs_eqsup
(assert
  (forall ((x Int) (y Int))
    (=> (and (<= x 0) (<= y x)) (<= (abs1 x) (abs1 y)))))

;; abs_sup
(assert
  (forall ((x Int) (y Int))
    (=> (and (<= x 0) (< y x)) (< (abs1 x) (abs1 y)))))

;; inv_negeq
(assert (forall ((x Int)) (=> (<= x 0) (<= 0 (abs1 x)))))

;; inv_neg
(assert (forall ((x Int)) (=> (< x 0) (< 0 (abs1 x)))))

;; cpower
(declare-fun cpower (complex
  Int) complex)

;; Cpower_zero
(assert (forall ((i complex)) (= (cpower i 0) c_one)))

;; Cpower_one
(assert (forall ((i complex)) (= (cpower i 1) i)))

;; Cpower_sum
(assert
  (forall ((i complex))
    (forall ((n Int) (m Int))
      (=>
        (=> (= i c_zero) (not (= n (- m))))
        (= (cpower i (+ n m)) (infix_asdt (cpower i n) (cpower i m)))))))

;; zero_poower
(assert (forall ((e Int)) (=> (not (= e 0)) (= (cpower c_zero e) c_zero))))

;; cpower_ttwo_two
(assert (= (cpower (infix_pldt c_one c_one) 2) (i_to_c 4)))

;; real_squarert_two
(assert (real_ (square_rt (infix_pldt c_one c_one))))

;; squarertTwo
(assert
  (= (cpower (square_rt (infix_pldt c_one c_one)) 2) (infix_pldt c_one c_one)))

;; complete_rt_two
(assert
  (forall ((a complex))
    (=>
      (= a (infix_sldt
             (square_rt (infix_pldt c_one c_one))
             (infix_pldt c_one c_one)))
      (= (infix_asdt (square_rt (infix_pldt c_one c_one)) a) c_one))))

;; cpower_sum
(assert
  (forall ((x complex) (n Int) (m Int))
    (=>
      (=> (= x c_zero) (not (= n (- m))))
      (= (cpower x (+ n m)) (infix_asdt (cpower x n) (cpower x m))))))

;; cpower_one
(assert (forall ((x complex) (n Int)) (=> (= n 1) (= (cpower x n) x))))

;; cpower_two
(assert
  (forall ((x complex) (n Int))
    (=> (= n 2) (= (cpower x n) (infix_asdt x x)))))

;; cpower_two_rev
(assert (forall ((x complex)) (= (infix_asdt x x) (cpower x 2))))

;; cpower_sum_rev
(assert
  (forall ((x complex) (n Int) (m Int))
    (=>
      (=> (= x c_zero) (not (= n (- m))))
      (= (infix_asdt (cpower x n) (cpower x m)) (cpower x (+ n m))))))

;; cpower_plus_one
(assert
  (forall ((e complex) (i Int))
    (=>
      (=> (= e c_zero) (not (= i (- 1))))
      (= (cpower e (+ i 1)) (infix_asdt (cpower e i) e)))))

;; cpower_zero
(assert (forall ((e complex)) (= (cpower e 0) c_one)))

;; cpower_eq
(assert
  (forall ((e complex) (eqt complex) (i Int) (iqt Int))
    (=> (= e eqt) (=> (= i iqt) (= (cpower e i) (cpower eqt iqt))))))

;; cpower_inv
(assert
  (forall ((e complex) (i Int))
    (=>
      (not (= e c_zero))
      (= (infix_asdt (cpower e i) (cpower e (- i))) c_one))))

;; compat_cpower_leq
(assert
  (forall ((a complex) (b complex) (i Int))
    (=>
      (and (infix_lseqdt c_zero a) (infix_lseqdt a b))
      (=>
        (<= 0 i)
        (and
          (infix_lseqdt c_zero (cpower a i))
          (infix_lseqdt (cpower a i) (cpower b i)))))))

;; cpower_inv_rew
(assert
  (forall ((e complex) (i Int))
    (=>
      (not (= e c_zero))
      (= (cpower e i) (infix_sldt c_one (cpower e (- i)))))))

;; inv_cpower
(assert
  (forall ((e complex) (i Int))
    (=>
      (not (= (cpower e i) c_zero))
      (= (infix_sldt c_one (cpower e i)) (cpower e (- i))))))

;; cpower_div
(assert
  (forall ((x complex) (y complex) (n Int))
    (=>
      (<= 0 n)
      (=>
        (not (= y c_zero))
        (= (cpower (infix_sldt x y) n) (infix_sldt (cpower x n) (cpower y n)))))))

;; cpower_div_rev
(assert
  (forall ((x complex) (y complex) (n Int))
    (=>
      (<= 0 n)
      (=>
        (not (= y c_zero))
        (= (infix_sldt (cpower x n) (cpower y n)) (cpower (infix_sldt x y) n))))))

;; cpower_pi_bound_square_inv
(assert (infix_lseqdt (infix_sldt (i_to_c 4) (cpower pi1 2)) c_one))

;; cpower_mult_split
(assert
  (forall ((x complex) (y complex) (m Int))
    (=>
      (<= 0 m)
      (= (cpower (infix_asdt x y) m) (infix_asdt (cpower x m) (cpower y m))))))

;; not_cpower_zero
(assert
  (forall ((e complex) (i Int))
    (=> (not (= e c_zero)) (not (= (cpower e i) c_zero)))))

;; cpower_inv_out
(assert
  (forall ((x complex) (y complex))
    (=>
      (infix_lsdt c_zero y)
      (= (infix_asdt
           (cpower (infix_asdt (infix_sldt c_one (square_rt y)) x) 2)
           y) (cpower x 2)))))

;; squarert_inv
(assert
  (forall ((x complex))
    (=>
      (infix_lsdt c_zero x)
      (= (infix_sldt c_one (square_rt x)) (square_rt (infix_sldt c_one x))))))

;; squarert_inv_rev
(assert
  (forall ((x complex))
    (=>
      (infix_lsdt c_zero x)
      (= (square_rt (infix_sldt c_one x)) (infix_sldt c_one (square_rt x))))))

;; squarert_div
(assert
  (forall ((x complex) (y complex))
    (=>
      (infix_lseqdt c_zero x)
      (=>
        (infix_lsdt c_zero y)
        (= (infix_sldt (square_rt x) (square_rt y)) (square_rt
                                                      (infix_sldt x y)))))))

;; cpower_squarert_two
(assert
  (forall ((i Int))
    (=>
      (<= 0 i)
      (= (cpower (square_rt (infix_pldt c_one c_one)) i) (square_rt
                                                           (i_to_c
                                                             (power 2 i)))))))

;; cpower_square_rt_raise
(assert
  (forall ((x complex) (y complex))
    (=>
      (infix_lsdt c_zero y)
      (= (cpower (infix_sldt x (square_rt y)) 2) (infix_sldt
                                                   (infix_asdt
                                                     (cpower x 2)
                                                     c_one)
                                                   y)))))

;; cpower_subst
(assert
  (forall ((x complex) (n Int) (m Int))
    (=>
      (not (= x c_zero))
      (= (infix_asdt (infix_sldt c_one (cpower x n)) (cpower x m)) (cpower
                                                                    x
                                                                    (- m n))))))

;; cpower_c_one_pos
(assert (forall ((m Int)) (=> (<= 0 m) (= (cpower c_one m) c_one))))

;; mult_cpower
(assert
  (forall ((x complex) (xqt complex) (i Int))
    (=>
      (<= 0 i)
      (= (infix_asdt (cpower x i) (cpower xqt i)) (cpower
                                                    (infix_asdt x xqt)
                                                    i)))))

;; mult_cpower_rev
(assert
  (forall ((x complex) (xqt complex) (i Int))
    (=>
      (<= 0 i)
      (= (cpower (infix_asdt x xqt) i) (infix_asdt
                                         (cpower x i)
                                         (cpower xqt i))))))

;; fc
(declare-fun fc97 () (Array complex (Array Int complex)))

;; t2tb
(declare-fun t2tb63 ((Array complex (Array Int complex))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array complex (Array Int complex))))
    (sort (infix_mngt complex1 (infix_mngt int complex1)) (t2tb63 x))))

;; tb2t
(declare-fun tb2t63 (uni) (Array complex (Array Int complex)))

;; BridgeL
(assert
  (forall ((i (Array complex (Array Int complex))))
    (! (= (tb2t63 (t2tb63 i)) i) :pattern ((t2tb63 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort (infix_mngt complex1 (infix_mngt int complex1)) j)
         (= (t2tb63 (tb2t63 j)) j)) :pattern ((t2tb63 (tb2t63 j))) )))

;; fc'def
(assert
  (forall ((y0 complex) (y1 Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             complex1
             (t2tb63 fc97)
             (t2tb y0))
           (t2tb8 y1))) y0)))

;; cpower_iterate
(assert
  (forall ((e complex) (i Int))
    (=>
      (<= 0 i)
      (= (cpower e i) (tb2t
                        (int_iterate
                          complex1
                          (t2tb46 infix_asdt_closure)
                          (infix_at
                            (infix_mngt int complex1)
                            complex1
                            (t2tb63 fc97)
                            (t2tb e))
                          0
                          i))))))

;; cpower_modulus
(assert
  (forall ((x complex) (n Int))
    (=>
      (<= 0 n)
      (and
        (= (modulus (cpower x n)) (cpower (modulus x) n))
        (and
          (=>
            (< 0 n)
            (=>
              (infix_lsdt (modulus x) c_one)
              (infix_lsdt (modulus (cpower x n)) c_one)))
          (and
            (=>
              (< 0 n)
              (=> (= (modulus x) c_one) (= (modulus (cpower x n)) c_one)))
            (and
              (=>
                (< 0 n)
                (=>
                  (infix_gtdt (modulus x) c_one)
                  (infix_gtdt (modulus (cpower x n)) c_one)))
              (and
                (=>
                  (< 0 n)
                  (=>
                    (infix_lsdt (modulus (cpower x n)) c_one)
                    (infix_lsdt (modulus x) c_one)))
                (and
                  (=>
                    (< 0 n)
                    (=>
                      (= (modulus (cpower x n)) c_one)
                      (= (modulus x) c_one)))
                  (=>
                    (< 0 n)
                    (=>
                      (infix_gtdt (modulus (cpower x n)) c_one)
                      (infix_gtdt (modulus x) c_one))))))))))))

;; cpower_mult_pre
(assert
  (forall ((x complex) (n Int) (m Int))
    (=> (<= 0 m) (= (cpower x (* n m)) (cpower (cpower x n) m)))))

;; cpower_mult
(assert
  (forall ((x complex) (n Int) (m Int))
    (= (cpower x (* n m)) (cpower (cpower x n) m))))

;; cpower_mult_rev
(assert
  (forall ((x complex) (n Int) (m Int))
    (= (cpower (cpower x n) m) (cpower x (* n m)))))

;; non_zero_cpower_pos
(assert
  (forall ((i complex) (n Int))
    (=> (not (= i c_zero)) (=> (<= 0 n) (not (= (cpower i n) c_zero))))))

;; inv_cpower_
(assert
  (forall ((e complex) (i Int))
    (=>
      (not (= e c_zero))
      (= (infix_sldt c_one (cpower e i)) (cpower e (- i))))))

;; zero_cpower_pos
(assert (forall ((n Int)) (=> (< 0 n) (= (cpower c_zero n) c_zero))))

;; zero_cpower
(assert (forall ((n Int)) (=> (not (= n 0)) (= (cpower c_zero n) c_zero))))

;; non_zero_cpower
(assert
  (forall ((i complex) (n Int))
    (=> (not (= i c_zero)) (not (= (cpower i n) c_zero)))))

;; real_cpower_pos
(assert
  (forall ((elt complex) (i Int))
    (=> (real_ elt) (=> (<= 0 i) (real_ (cpower elt i))))))

;; real_cpower
(assert
  (forall ((elt complex) (i Int)) (=> (real_ elt) (real_ (cpower elt i)))))

;; real_cpower_is_pos
(assert
  (forall ((elt complex) (i Int))
    (=>
      (real_ elt)
      (=>
        (infix_lseqdt c_zero elt)
        (=> (<= 0 i) (infix_lseqdt c_zero (cpower elt i)))))))

;; real_cpower_is_strict_pos
(assert
  (forall ((elt complex) (i Int))
    (=>
      (real_ elt)
      (=>
        (infix_lsdt c_zero elt)
        (=> (<= 0 i) (infix_lsdt c_zero (cpower elt i)))))))

;; real_modulus_square
(assert
  (forall ((x complex))
    (=> (real_ x) (= (cpower (modulus x) 2) (cpower x 2)))))

;; real_modulus_pos
(assert
  (forall ((x complex))
    (=> (real_ x) (=> (infix_lseqdt c_zero x) (= (modulus x) x)))))

;; conjugate
(declare-fun conjugate (complex) complex)

;; conjugate'def
(assert
  (forall ((i complex))
    (= (conjugate i) (infix_mndt
                       (t_real_part i)
                       (infix_asdt im (t_im_part i))))))

;; real_part_conjugate
(assert
  (forall ((i complex)) (= (t_real_part (conjugate i)) (t_real_part i))))

;; im_part_conjugate
(assert
  (forall ((i complex))
    (= (t_im_part (conjugate i)) (prefix_mndt (t_im_part i)))))

;; invol_conjugate
(assert (forall ((i complex)) (= (conjugate (conjugate i)) i)))

;; add_conjugate
(assert
  (forall ((i complex) (j complex))
    (= (conjugate (infix_pldt i j)) (infix_pldt (conjugate i) (conjugate j)))))

;; add_own_conjugate
(assert
  (forall ((i complex))
    (= (infix_pldt i (conjugate i)) (infix_asdt
                                      (infix_pldt c_one c_one)
                                      (t_real_part i)))))

;; itself_times_conjugate
(assert
  (forall ((i complex))
    (and
      (real_ (infix_asdt i (conjugate i)))
      (= (infix_asdt i (conjugate i)) (infix_pldt
                                        (infix_asdt
                                          (t_real_part i)
                                          (t_real_part i))
                                        (infix_asdt
                                          (t_im_part i)
                                          (t_im_part i)))))))

;; conjugate_to_modulus
(assert
  (forall ((i complex))
    (= (modulus i) (square_rt (infix_asdt i (conjugate i))))))

;; conjugate_times_itself_pos
(assert
  (forall ((i complex)) (infix_lseqdt c_zero (infix_asdt i (conjugate i)))))

;; fc
(declare-fun fc98 (ty
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni)) (sort (infix_mngt a complex1) (fc98 a x)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (x uni))
      (= (tb2t (infix_at complex1 a (fc98 a f) x)) (conjugate
                                                     (tb2t
                                                       (infix_at
                                                         complex1
                                                         a
                                                         f
                                                         x)))))))

;; sum_conjugate
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni))
      (= (conjugate (sum a s f)) (sum a s (fc98 a f))))))

;; conjugate_module_one
(assert
  (forall ((i complex)) (=> (= (modulus i) c_one) (= (conjugate i) (inv i)))))

;; conjugate_module_one_rev
(assert
  (forall ((i complex))
    (=>
      (not (= i c_zero))
      (=> (= (conjugate i) (inv i)) (= (modulus i) c_one)))))

;; conjugate_real
(assert (forall ((i complex)) (=> (real_ i) (= (conjugate i) i))))

;; conjugate_real_gen
(assert (forall ((i complex)) (=> (real_ i) (= (conjugate i) i))))

;; conjugate_one
(assert (forall ((x complex)) (=> (= x c_one) (= (conjugate x) c_one))))

;; conjugate_c_zero
(assert (forall ((x complex)) (=> (= x c_zero) (= (conjugate x) c_zero))))

;; indic
(declare-fun indic (ty
  uni
  uni) complex)

;; indic'def
(assert
  (forall ((a ty))
    (forall ((a1 uni) (aqt uni))
      (ite (infix_eqeq a a1 aqt)
        (= (indic a a1 aqt) c_one)
        (= (indic a a1 aqt) c_zero)))))

;; indic'spec
(assert
  (forall ((a ty))
    (forall ((a1 uni) (aqt uni))
      (=>
        (sort a a1)
        (=> (sort a aqt) (= (indic a a1 aqt) (ite (= a1 aqt) c_one c_zero)))))))

;; get_indic
(assert
  (forall ((a ty))
    (forall ((a1 uni) (aqt uni))
      (=>
        (sort a a1)
        (=> (sort a aqt) (= (indic a a1 aqt) (ite (= a1 aqt) c_one c_zero)))))))

;; indic_bool
(declare-fun indic_bool (ty
  uni
  uni) Bool)

;; indic_bool'def
(assert
  (forall ((a ty))
    (forall ((a1 uni) (aqt uni))
      (ite (infix_eqeq a a1 aqt)
        (= (indic_bool a a1 aqt) true)
        (= (indic_bool a a1 aqt) false)))))

;; indic_bool'spec
(assert
  (forall ((a ty))
    (forall ((a1 uni) (aqt uni))
      (=>
        (sort a a1)
        (=>
          (sort a aqt)
          (= (indic_bool a a1 aqt) (ite (= a1 aqt) true false)))))))

;; indic_comm
(assert
  (forall ((a ty))
    (forall ((a1 uni) (aqt uni)) (= (indic a a1 aqt) (indic a aqt a1)))))

;; indic_transl_r
(assert
  (forall ((a ty))
    (forall ((a1 uni) (b uni) (c uni))
      (=> (= b c) (= (indic a a1 b) (indic a a1 c))))))

;; indic_transl_l
(assert
  (forall ((a ty))
    (forall ((a1 uni) (b uni) (c uni))
      (=> (= b c) (= (indic a b a1) (indic a c a1))))))

;; indic_2
(declare-fun indic_2 (ty
  ty
  uni
  uni
  uni
  uni) complex)

;; indic_2'def
(assert
  (forall ((a ty) (b ty))
    (forall ((a1 uni) (aqt uni) (b1 uni) (bqt uni))
      (ite (and
             (= (indic_bool a a1 aqt) true)
             (= (indic_bool b b1 bqt) true))
        (= (indic_2 b a a1 aqt b1 bqt) c_one)
        (= (indic_2 b a a1 aqt b1 bqt) c_zero)))))

;; indic_2'spec
(assert
  (forall ((a ty) (b ty))
    (forall ((a1 uni) (aqt uni) (b1 uni) (bqt uni))
      (and
        (= (indic_2 b a a1 aqt b1 bqt) (infix_asdt
                                         (indic a a1 aqt)
                                         (indic b b1 bqt)))
        (= (indic_2 b a a1 aqt b1 bqt) (indic
                                         (tuple21 a b)
                                         (Tuple2 a b a1 b1)
                                         (Tuple2 a b aqt bqt)))))))

;; indic_2_if
(assert
  (forall ((a ty) (b ty))
    (forall ((i uni) (k uni) (j uni) (l uni))
      (=>
        (sort a i)
        (=>
          (sort a k)
          (=>
            (sort b j)
            (=>
              (sort b l)
              (= (indic_2 b a i k j l) (ite (and (= i k) (= j l))
                                         c_one
                                         c_zero)))))))))

;; indic_2_comm
(assert
  (forall ((a ty) (b ty))
    (forall ((a1 uni) (aqt uni) (b1 uni) (bqt uni))
      (and
        (= (indic_2 b a a1 aqt b1 bqt) (indic_2 b a aqt a1 b1 bqt))
        (and
          (= (indic_2 b a a1 aqt b1 bqt) (indic_2 b a a1 aqt bqt b1))
          (= (indic_2 b a a1 aqt b1 bqt) (indic_2 b a aqt a1 bqt b1)))))))

;; sum_indic
(declare-fun sum_indic (ty
  uni
  uni
  uni) complex)

;; result
(declare-fun result4 (ty
  uni
  uni) uni)

;; result_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 uni))
      (sort (infix_mngt a complex1) (result4 a x x1)))))

;; result'def
(assert
  (forall ((a ty))
    (forall ((t uni) (i uni) (e uni))
      (= (tb2t (infix_at complex1 a (result4 a t i) e)) (infix_asdt
                                                          (tb2t
                                                            (infix_at
                                                              complex1
                                                              a
                                                              t
                                                              e))
                                                          (indic a i e))))))

;; sum_indic'def
(assert
  (forall ((a ty))
    (forall ((s uni) (t uni) (i uni))
      (= (sum_indic a s t i) (sum a s (result4 a t i))))))

;; bool_to_c
(declare-fun bool_to_c (Bool) complex)

;; bool_to_c'def
(assert
  (forall ((a Bool))
    (ite (= a true) (= (bool_to_c a) c_one) (= (bool_to_c a) c_zero))))

;; ind_sum_indic
(declare-fun ind_sum_indic ((Array Int complex)
  Int
  Int
  Int) complex)

;; result
(declare-fun result5 ((Array Int complex)
  Int) (Array Int complex))

;; result'def
(assert
  (forall ((t (Array Int complex)) (i Int) (e Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (result5 t i)) (t2tb8 e))) 
    (infix_asdt
      (tb2t (infix_at complex1 int (t2tb51 t) (t2tb8 e)))
      (indic int (t2tb8 i) (t2tb8 e))))))

;; ind_sum_indic'def
(assert
  (forall ((t (Array Int complex)) (l Int) (h Int) (i Int))
    (=> (< l h) (= (ind_sum_indic t l h i) (ind_sum (result5 t i) l h)))))

;; ind_sum_indic'spec
(assert
  (forall ((t (Array Int complex)) (l Int) (h Int) (i Int))
    (=>
      (< l h)
      (= (ind_sum_indic t l h i) (sum_indic
                                   int
                                   (t2tb16 (to_fset l h))
                                   (t2tb51 t)
                                   (t2tb8 i))))))

;; sum_indic_t
(assert
  (forall ((a ty))
    (forall ((s uni) (t uni) (i uni))
      (=>
        (mem a i s)
        (= (sum_indic a s t i) (tb2t (infix_at complex1 a t i)))))))

;; fc
(declare-fun fc99 (ty
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 uni)) (sort (infix_mngt a complex1) (fc99 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((t uni) (i uni) (e uni))
      (= (tb2t (infix_at complex1 a (fc99 a t i) e)) (infix_asdt
                                                       (tb2t
                                                         (infix_at
                                                           complex1
                                                           a
                                                           t
                                                           e))
                                                       (indic a i e))))))

;; sum_indic_ts
(assert
  (forall ((a ty))
    (forall ((s uni) (t uni) (i uni))
      (=>
        (mem a i s)
        (= (sum a s (fc99 a t i)) (tb2t (infix_at complex1 a t i)))))))

;; fc
(declare-fun fc100 ((Array Int complex)
  Int) (Array Int complex))

;; fc'def
(assert
  (forall ((t (Array Int complex)) (i Int) (e Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc100 t i)) (t2tb8 e))) 
    (infix_asdt
      (tb2t (infix_at complex1 int (t2tb51 t) (t2tb8 e)))
      (indic int (t2tb8 i) (t2tb8 e))))))

;; ind_sum_indic_t
(assert
  (forall ((t (Array Int complex)) (l Int) (h Int) (i Int))
    (=>
      (and (<= l i) (< i h))
      (and
        (= (ind_sum_indic t l h i) (tb2t
                                     (infix_at
                                       complex1
                                       int
                                       (t2tb51 t)
                                       (t2tb8 i))))
        (= (ind_sum (fc100 t i) l h) (tb2t
                                       (infix_at
                                         complex1
                                         int
                                         (t2tb51 t)
                                         (t2tb8 i))))))))

;; fc
(declare-fun fc101 ((Array Int complex)
  Int) (Array Int complex))

;; fc'def
(assert
  (forall ((t (Array Int complex)) (i Int) (e Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc101 t i)) (t2tb8 e))) 
    (infix_asdt
      (tb2t (infix_at complex1 int (t2tb51 t) (t2tb8 e)))
      (indic int (t2tb8 i) (t2tb8 e))))))

;; ind_sum_indic_t_quant
(assert
  (forall ((t (Array Int complex)) (l Int) (h Int))
    (forall ((i Int))
      (=>
        (and (<= l i) (< i h))
        (= (ind_sum (fc101 t i) l h) (tb2t
                                       (infix_at
                                         complex1
                                         int
                                         (t2tb51 t)
                                         (t2tb8 i))))))))

;; conjugate_indic
(assert
  (forall ((a ty))
    (forall ((i uni) (j uni)) (= (conjugate (indic a i j)) (indic a i j)))))

;; conjugate_indic_rev
(assert
  (forall ((a ty))
    (forall ((i uni) (j uni)) (= (indic a i j) (conjugate (indic a i j))))))

;; conjugate_indic_gen_int
(assert
  (forall ((i Int) (j Int))
    (= (conjugate (indic int (t2tb8 i) (t2tb8 j))) (indic
                                                     int
                                                     (t2tb8 i)
                                                     (t2tb8 j)))))

;; conjugate_pure_im
(assert
  (forall ((i complex)) (=> (pure_im_ i) (= (conjugate i) (prefix_mndt i)))))

;; conjugate_im
(assert (= (conjugate im) (prefix_mndt im)))

;; conjugate_value
(assert
  (forall ((c complex) (a complex) (b complex))
    (=>
      (real_ a)
      (=>
        (real_ b)
        (=>
          (= c (infix_pldt a (infix_asdt im b)))
          (= (conjugate c) (infix_mndt a (infix_asdt im b))))))))

;; conjugate_minus_value
(assert
  (forall ((c complex) (a complex) (b complex))
    (=>
      (real_ a)
      (=>
        (real_ b)
        (=>
          (= c (infix_mndt a (infix_asdt im b)))
          (= (conjugate c) (infix_pldt a (infix_asdt im b))))))))

;; prod_conjugate
(assert
  (forall ((a complex) (b complex))
    (= (infix_asdt a (conjugate b)) (infix_pldt
                                      (infix_pldt
                                        (infix_asdt
                                          (t_real_part a)
                                          (t_real_part b))
                                        (infix_asdt
                                          (t_im_part a)
                                          (t_im_part b)))
                                      (infix_asdt
                                        im
                                        (infix_mndt
                                          (infix_asdt
                                            (t_real_part b)
                                            (t_im_part a))
                                          (infix_asdt
                                            (t_im_part b)
                                            (t_real_part a))))))))

;; mult_conjugate
(assert
  (forall ((a complex) (b complex))
    (= (conjugate (infix_asdt a b)) (infix_asdt (conjugate a) (conjugate b)))))

;; conjugate_prod
(assert
  (forall ((a complex) (b complex))
    (= (infix_asdt (conjugate a) b) (infix_pldt
                                      (infix_pldt
                                        (infix_asdt
                                          (t_real_part a)
                                          (t_real_part b))
                                        (infix_asdt
                                          (t_im_part a)
                                          (t_im_part b)))
                                      (infix_asdt
                                        im
                                        (infix_mndt
                                          (infix_asdt
                                            (t_real_part a)
                                            (t_im_part b))
                                          (infix_asdt
                                            (t_real_part b)
                                            (t_im_part a))))))))

;; conj_conj_prod
(assert
  (forall ((a complex) (b complex))
    (= (conjugate (infix_asdt (conjugate a) b)) (infix_asdt a (conjugate b)))))

;; conj_prod_conj
(assert
  (forall ((a complex) (b complex))
    (= (conjugate (infix_asdt a (conjugate b))) (infix_asdt (conjugate a) b))))

;; itself_prod_conjugate_modulus_one
(assert
  (forall ((a complex))
    (=> (= (modulus a) c_one) (= (infix_asdt a (conjugate a)) c_one))))

;; conjugate_prod_itself_modulus_one
(assert
  (forall ((a complex))
    (=> (= (modulus a) c_one) (= (infix_asdt a (conjugate a)) c_one))))

;; modulus_opposite
(assert
  (forall ((a complex))
    (=>
      (real_ a)
      (=> (infix_lseqdt c_zero a) (= (modulus a) (modulus (prefix_mndt a)))))))

;; modulus_conjugate
(assert (forall ((a complex)) (= (modulus a) (modulus (conjugate a)))))

;; modulus_pos
(assert
  (forall ((a complex))
    (=> (real_ a) (=> (infix_lseqdt c_zero a) (= (modulus a) a)))))

;; modulus_neg
(assert
  (forall ((a complex))
    (=>
      (real_ a)
      (=> (infix_lseqdt a c_zero) (= (modulus a) (prefix_mndt a))))))

;; inv_rewrite
(assert
  (forall ((x complex))
    (=>
      (not (= x c_zero))
      (and
        (= (infix_sldt c_one x) (infix_sldt
                                  (conjugate x)
                                  (cpower (modulus x) 2)))
        (= (infix_sldt c_one x) (infix_asdt
                                  (conjugate x)
                                  (infix_sldt c_one (cpower (modulus x) 2))))))))

;; inv_modulus
(assert
  (forall ((x complex))
    (=>
      (not (= x c_zero))
      (= (modulus (infix_sldt c_one x)) (infix_sldt c_one (modulus x))))))

;; div_modulus
(assert
  (forall ((x complex) (y complex))
    (=>
      (not (= x c_zero))
      (= (modulus (infix_sldt y x)) (infix_sldt (modulus y) (modulus x))))))

;; square_frac_modulus
(assert
  (forall ((x complex) (y complex))
    (=>
      (not (= y c_zero))
      (= (cpower (modulus (infix_sldt x y)) 2) (infix_sldt
                                                 (cpower (modulus x) 2)
                                                 (cpower (modulus y) 2))))))

;; modulus_one_gen
(assert
  (forall ((a complex) (b complex))
    (=>
      (infix_lseqdt c_zero a)
      (=>
        (infix_lseqdt c_zero b)
        (=>
          (= (infix_pldt (cpower a 2) (cpower b 2)) c_one)
          (= (modulus (infix_pldt a (infix_asdt im b))) c_one))))))

;; modulus_one_decomp
(assert
  (forall ((k Int) (n Int))
    (=>
      (and (<= 0 k) (< k (power 2 n)))
      (= (modulus
           (infix_pldt
             (infix_sldt
               (square_rt (i_to_c (- (power 2 n) k)))
               (square_rt (i_to_c (power 2 n))))
             (infix_asdt
               im
               (infix_sldt
                 (square_rt (i_to_c k))
                 (square_rt (i_to_c (power 2 n))))))) c_one))))

;; extract_2_sq_modulus
(assert
  (forall ((x complex) (y complex) (a complex))
    (=>
      (not (= a c_zero))
      (=>
        (not (= y c_zero))
        (= (infix_sldt (cpower (modulus x) 2) (cpower (modulus y) 2)) 
        (infix_sldt
          (infix_asdt a (cpower (modulus x) 2))
          (infix_asdt a (cpower (modulus y) 2))))))))

;; cpower_2_modulus_simpl
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (not (= x c_zero))
      (=>
        (not (= y c_zero))
        (=>
          (not (= z c_zero))
          (= (infix_sldt
               (cpower (modulus (infix_asdt x y)) 2)
               (cpower (modulus (infix_asdt z y)) 2)) (infix_sldt
                                                        (cpower
                                                          (modulus x)
                                                          2)
                                                        (cpower
                                                          (modulus z)
                                                          2))))))))

;; cpower_div_leq_one
(assert
  (forall ((a complex) (b complex) (i Int))
    (=>
      (and (infix_lseqdt c_zero a) (infix_lseqdt a b))
      (=>
        (infix_lsdt c_zero b)
        (=>
          (<= 0 i)
          (and
            (infix_lseqdt c_zero (infix_sldt (cpower a i) (cpower b i)))
            (infix_lseqdt (infix_sldt (cpower a i) (cpower b i)) c_one)))))))

;; cpower_cpower
(assert
  (forall ((x complex) (a Int) (b Int))
    (= (cpower (cpower x a) b) (cpower x (* a b)))))

;; pre_cond_int_
(assert
  (forall ((a complex) (b complex) (c complex))
    (=>
      (infix_lsdt a b)
      (=>
        (infix_lsdt c_zero c)
        (infix_lsdt (infix_asdt a c) (infix_asdt b c))))))

;; growing_mult
(assert
  (forall ((n complex) (m complex))
    (=>
      (infix_lseqdt c_zero n)
      (=> (infix_lseqdt c_one m) (infix_lseqdt n (infix_asdt n m))))))

;; strict_growing_mult_pos
(assert
  (forall ((n complex) (m complex))
    (=>
      (infix_lsdt c_one n)
      (=> (infix_lsdt c_one m) (infix_lsdt n (infix_asdt n m))))))

;; init_exp
(assert
  (forall ((k complex))
    (and
      (= (cpower k 0) c_one)
      (and (= (cpower k 1) k) (= (cpower k 2) (infix_asdt k k))))))

;; int_exp_pos
(assert
  (forall ((k complex) (n Int))
    (=>
      (infix_lseqdt c_one k)
      (=>
        (<= 0 n)
        (and
          (infix_lseqdt c_one (cpower k n))
          (and
            (infix_gtdt (cpower k n) c_zero)
            (infix_lseqdt (cpower k n) (cpower k (+ n 1)))))))))

;; strict_int_exp_pos
(assert
  (forall ((k complex) (n Int))
    (=>
      (infix_lsdt c_one k)
      (=>
        (< 0 n)
        (and
          (infix_gtdt (cpower k n) c_one)
          (and
            (infix_lsdt (cpower k (- n 1)) (cpower k n))
            (infix_lsdt (cpower k n) (cpower k (+ n 1)))))))))

;; strict_int_exp_neg
(assert
  (forall ((k complex) (n Int))
    (=>
      (infix_lsdt c_one k)
      (=>
        (< n 0)
        (and
          (infix_lsdt (cpower k n) c_one)
          (and
            (infix_lsdt (cpower k (- n 1)) (cpower k n))
            (infix_lsdt (cpower k n) (cpower k (+ n 1)))))))))

;; int_exp_neg
(assert
  (forall ((k complex) (n Int))
    (=>
      (infix_lseqdt c_one k)
      (=>
        (< n 0)
        (and
          (infix_lseqdt (cpower k n) c_one)
          (and
            (infix_gtdt (cpower k n) c_zero)
            (infix_lseqdt (cpower k n) (cpower k (+ n 1)))))))))

;; positive_exp
(assert
  (forall ((k complex) (m Int))
    (=> (infix_lseqdt c_one k) (infix_lsdt c_zero (cpower k m)))))

;; growing_exp_pos
(assert
  (forall ((k complex) (m Int) (n Int))
    (=>
      (infix_lseqdt c_one k)
      (=> (and (<= 0 m) (<= m n)) (infix_lseqdt (cpower k m) (cpower k n))))))

;; growing_exp
(assert
  (forall ((k complex) (m Int) (n Int))
    (=>
      (infix_lseqdt c_one k)
      (=> (<= m n) (infix_lseqdt (cpower k m) (cpower k n))))))

;; growing_exp_arg
(assert
  (forall ((k complex) (kqt complex) (n Int))
    (=>
      (and (infix_lseqdt c_zero k) (infix_lseqdt k kqt))
      (=> (<= 0 n) (infix_lseqdt (cpower k n) (cpower kqt n))))))

;; strict_growing_exp
(assert
  (forall ((k complex) (m Int) (n Int))
    (=>
      (infix_lsdt c_one k)
      (=> (< m n) (infix_lsdt (cpower k m) (cpower k n))))))

;; cpower_comm_pos
(assert
  (forall ((x complex) (y complex) (n Int))
    (=>
      (infix_lseqdt c_one x)
      (=>
        (infix_lseqdt c_one y)
        (=>
          (<= 0 n)
          (= (cpower (infix_asdt x y) n) (infix_asdt
                                           (cpower x n)
                                           (cpower y n))))))))

;; cpower_comm
(assert
  (forall ((x complex) (y complex) (n Int))
    (=>
      (infix_lseqdt c_one x)
      (=>
        (infix_lseqdt c_one y)
        (= (cpower (infix_asdt x y) n) (infix_asdt (cpower x n) (cpower y n)))))))

;; unicity_exp
(assert
  (forall ((k complex) (m Int) (n Int))
    (=> (infix_lsdt c_one k) (= (= (cpower k m) (cpower k n)) (= m n)))))

;; cpower_i_to_c
(assert
  (forall ((a Int) (b Int))
    (=> (<= 0 b) (= (i_to_c (power a b)) (cpower (i_to_c a) b)))))

;; cpower_i_to_c_rev
(assert
  (forall ((a Int) (b Int))
    (=> (<= 0 b) (= (cpower (i_to_c a) b) (i_to_c (power a b))))))

;; fc
(declare-fun fc102 (complex
  complex) (Array Int complex))

;; fc'def
(assert
  (forall ((a complex) (q complex) (i Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc102 a q)) (t2tb8 i))) 
    (infix_asdt
      a
      (cpower q i)))))

;; geometric_series
(assert
  (forall ((a complex) (q complex) (n Int))
    (=>
      (<= 1 n)
      (=>
        (not (= c_one q))
        (= (sum int (t2tb16 (to_fset 0 n)) (t2tb51 (fc102 a q))) (infix_sldt
                                                                   (infix_asdt
                                                                    a
                                                                    (infix_mndt
                                                                    c_one
                                                                    (cpower
                                                                    q
                                                                    n)))
                                                                   (infix_mndt
                                                                    c_one
                                                                    q)))))))

;; fc
(declare-fun fc103 (complex
  complex) (Array Int complex))

;; fc'def
(assert
  (forall ((a complex) (q complex) (i Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc103 a q)) (t2tb8 i))) 
    (infix_asdt
      a
      (cpower q i)))))

;; ind_geometric_series_r
(assert
  (forall ((a complex) (q complex) (n Int))
    (=>
      (<= 1 n)
      (=>
        (not (= c_one q))
        (= (ind_sum (fc103 a q) 0 n) (infix_sldt
                                       (infix_asdt
                                         a
                                         (infix_mndt c_one (cpower q n)))
                                       (infix_mndt c_one q)))))))

;; cpower_closure
(declare-fun cpower_closure () (Array complex (Array Int complex)))

;; cpower_closure_def
(assert
  (forall ((y complex) (y1 Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             complex1
             (t2tb63 cpower_closure)
             (t2tb y))
           (t2tb8 y1))) (cpower y y1))))

;; ind_geometric_series
(assert
  (forall ((q complex) (n Int))
    (=>
      (<= 1 n)
      (=>
        (not (= c_one q))
        (= (ind_sum
             (tb2t51
               (infix_at
                 (infix_mngt int complex1)
                 complex1
                 (t2tb63 cpower_closure)
                 (t2tb q)))
             0
             n) (infix_sldt
                  (infix_mndt c_one (cpower q n))
                  (infix_mndt c_one q)))))))

;; geometric_series_init_one
(assert
  (forall ((q complex) (n Int))
    (=>
      (<= 1 n)
      (=>
        (not (= c_one q))
        (= (sum
             int
             (t2tb16 (to_fset 0 n))
             (infix_at
               (infix_mngt int complex1)
               complex1
               (t2tb63 cpower_closure)
               (t2tb q))) (infix_sldt
                            (infix_mndt c_one (cpower q n))
                            (infix_mndt c_one q)))))))

;; fc
(declare-fun fc104 (complex
  complex) (Array Int complex))

;; fc'def
(assert
  (forall ((a complex) (q complex) (i Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc104 a q)) (t2tb8 i))) 
    (infix_asdt
      a
      (cpower q i)))))

;; geometric_series_c_one
(assert
  (forall ((a complex) (q complex) (n Int))
    (=>
      (<= 1 n)
      (=>
        (= q c_one)
        (= (sum int (t2tb16 (to_fset 0 n)) (t2tb51 (fc104 a q))) (infix_asdt
                                                                   a
                                                                   (i_to_c n)))))))

;; geometric_series_c_one_init_one
(assert
  (forall ((q complex) (n Int))
    (=>
      (<= 1 n)
      (=>
        (= q c_one)
        (= (sum
             int
             (t2tb16 (to_fset 0 n))
             (infix_at
               (infix_mngt int complex1)
               complex1
               (t2tb63 cpower_closure)
               (t2tb q))) (i_to_c n))))))

;; positive_cpower_2
(assert
  (forall ((x complex))
    (=> (real_ x) (=> (not (= c_zero x)) (infix_lsdt c_zero (cpower x 2))))))

;; positive_cpower_2_mod
(assert (forall ((x complex)) (infix_lseqdt c_zero (cpower (modulus x) 2))))

;; cpower_2_mod_non_null
(assert
  (forall ((x complex))
    (=> (not (= x c_zero)) (infix_lsdt c_zero (cpower (modulus x) 2)))))

;; cpower_2_mod_mult_non_null
(assert
  (forall ((x complex) (y complex))
    (=>
      (not (= x c_zero))
      (=> (not (= y c_zero)) (infix_lsdt c_zero (cpower (modulus x) 2))))))

;; growing_cpower_2
(assert
  (forall ((x complex) (y complex))
    (=>
      (and (infix_lseqdt c_zero x) (infix_lseqdt x y))
      (infix_lseqdt (cpower x 2) (cpower y 2)))))

;; cpower_incr_power_2
(assert
  (forall ((k Int))
    (=>
      (<= 0 k)
      (= (cpower (i_to_c (power 2 k)) 2) (i_to_c (power 2 (* 2 k)))))))

;; cpower_modulus_incr_power_2
(assert
  (forall ((k Int))
    (=>
      (<= 0 k)
      (= (cpower (modulus (i_to_c (power 2 k))) 2) (i_to_c (power 2 (* 2 k)))))))

;; cpower_modulus_supeq
(assert
  (forall ((x complex) (y complex) (i Int))
    (=>
      (<= 1 i)
      (=>
        (infix_lseqdt (modulus y) (modulus x))
        (infix_lseqdt (cpower (modulus y) i) (cpower (modulus x) i))))))

;; cpower_modulus_div_simpl
(assert
  (forall ((x complex) (y complex) (z complex) (i Int))
    (=>
      (<= 1 i)
      (=>
        (infix_lseqdt c_zero x)
        (=>
          (infix_lsdt c_zero y)
          (=>
            (infix_lsdt c_zero z)
            (= (infix_sldt (cpower x i) (cpower y i)) (infix_sldt
                                                        (cpower
                                                          (modulus
                                                            (infix_asdt x z))
                                                          i)
                                                        (cpower
                                                          (modulus
                                                            (infix_asdt y z))
                                                          i)))))))))

;; cpower_two_modulus_div_simpl
(assert
  (forall ((x complex) (y complex) (z complex))
    (=>
      (real_ x)
      (=>
        (real_ y)
        (=>
          (real_ z)
          (=>
            (not (= c_zero y))
            (=>
              (not (= c_zero z))
              (= (infix_sldt (cpower x 2) (cpower y 2)) (infix_sldt
                                                          (cpower
                                                            (modulus
                                                              (infix_asdt
                                                                x
                                                                z))
                                                            2)
                                                          (cpower
                                                            (modulus
                                                              (infix_asdt
                                                                y
                                                                z))
                                                            2))))))))))

;; exp
(declare-fun exp1 (complex) complex)

;; e_mod
(assert (forall ((x complex)) (= (modulus (exp1 x)) c_one)))

;; e_diff_c_zero
(assert (forall ((x complex)) (not (= (exp1 x) c_zero))))

;; Exp_one
(assert (real_ (exp1 c_one)))

;; Exp_zero
(assert (= (exp1 c_zero) c_one))

;; Exp_sum
(assert
  (forall ((x complex) (y complex))
    (= (exp1 (infix_pldt x y)) (infix_asdt (exp1 x) (exp1 y)))))

;; exp_one
(assert (real_ (exp1 c_one)))

;; Exp_quarter_pi
(assert
  (= (exp1 (infix_sldt (infix_asdt im pi1) (i_to_c 4))) (infix_pldt
                                                          (infix_sldt
                                                            (square_rt
                                                              (infix_pldt
                                                                c_one
                                                                c_one))
                                                            (infix_pldt
                                                              c_one
                                                              c_one))
                                                          (infix_asdt
                                                            im
                                                            (infix_sldt
                                                              (square_rt
                                                                (infix_pldt
                                                                  c_one
                                                                  c_one))
                                                              (infix_pldt
                                                                c_one
                                                                c_one))))))

;; exp_sum
(assert
  (forall ((x complex) (y complex))
    (= (exp1 (infix_pldt x y)) (infix_asdt (exp1 x) (exp1 y)))))

;; exp_eq
(assert
  (forall ((t1 complex) (t2 complex)) (=> (= t1 t2) (= (exp1 t1) (exp1 t2)))))

;; exp_sum_rev
(assert
  (forall ((x complex) (y complex))
    (= (infix_asdt (exp1 x) (exp1 y)) (exp1 (infix_pldt x y)))))

;; exp_inv
(assert
  (forall ((i complex))
    (=>
      (not (= (exp1 i) c_zero))
      (= (exp1 (prefix_mndt i)) (infix_sldt c_one (exp1 i))))))

;; exp_inv_rev
(assert
  (forall ((i complex))
    (=>
      (not (= (exp1 i) c_zero))
      (= (infix_sldt c_one (exp1 i)) (exp1 (prefix_mndt i))))))

;; exp_mult_pre
(assert
  (forall ((x complex) (y Int))
    (=> (<= 0 y) (= (exp1 (infix_asdt x (i_to_c y))) (cpower (exp1 x) y)))))

;; exp_mult
(assert
  (forall ((x complex) (y Int))
    (= (exp1 (infix_asdt x (i_to_c y))) (cpower (exp1 x) y))))

;; cpower_to_exp
(assert
  (forall ((x complex) (y Int))
    (= (cpower (exp1 x) y) (exp1 (infix_asdt x (i_to_c y))))))

;; exp_h_pi
(assert
  (= (exp1 (infix_sldt (infix_asdt im pi1) (infix_pldt c_one c_one))) 
  im))

;; exp_pi
(assert (= (exp1 (infix_asdt im pi1)) (prefix_mndt c_one)))

;; exp_two_pi
(assert
  (= (exp1 (infix_asdt (infix_asdt im pi1) (infix_pldt c_one c_one))) 
  c_one))

;; exp_two_pi_mul
(assert
  (forall ((k Int))
    (= (exp1
         (infix_asdt
           (i_to_c k)
           (infix_asdt (infix_asdt im pi1) (infix_pldt c_one c_one)))) 
    c_one)))

;; exp_two_pi_mul_den
(assert
  (forall ((k Int) (l Int))
    (=>
      (not (= k 0))
      (= (exp1
           (infix_sldt
             (infix_asdt
               (i_to_c (* k l))
               (infix_asdt (infix_asdt im pi1) (infix_pldt c_one c_one)))
             (i_to_c k))) c_one))))

;; exp_two_pi_mul_den_add
(assert
  (forall ((k Int) (l Int) (m Int))
    (= (exp1
         (infix_asdt
           (i_to_c (+ (* k m) l))
           (infix_asdt (infix_asdt im pi1) (infix_pldt c_one c_one)))) 
    (exp1
      (infix_asdt
        (i_to_c l)
        (infix_asdt (infix_asdt im pi1) (infix_pldt c_one c_one)))))))

(declare-sort angle 0)

;; angle
(declare-fun angle1 () ty)

;; ang_inv
(declare-fun ang_inv (angle) angle)

;; ang_add
(declare-fun ang_add (angle
  angle) angle)

;; ang_meas
(declare-fun ang_meas (angle) complex)

;; ang_meas'spec
(assert
  (forall ((us angle))
    (and
      (infix_lseqdt c_zero (ang_meas us))
      (infix_lsdt (ang_meas us) c_one))))

;; real_ang_meas
(assert (forall ((o angle)) (real_ (ang_meas o))))

;; real_to_ang
(declare-fun real_to_ang (complex) angle)

;; ang_zero
(declare-fun ang_zero () angle)

;; Assoc
(assert
  (forall ((x angle) (y angle) (z angle))
    (= (ang_add (ang_add x y) z) (ang_add x (ang_add y z)))))

;; Unit_def_l
(assert (forall ((x angle)) (= (ang_add ang_zero x) x)))

;; Unit_def_r
(assert (forall ((x angle)) (= (ang_add x ang_zero) x)))

;; Inv_def_l
(assert (forall ((x angle)) (= (ang_add (ang_inv x) x) ang_zero)))

;; Inv_def_r
(assert (forall ((x angle)) (= (ang_add x (ang_inv x)) ang_zero)))

;; Comm
(assert (forall ((x angle) (y angle)) (= (ang_add x y) (ang_add y x))))

;; Real_To_Ang_one
(assert
  (forall ((phi complex)) (=> (real_ phi) (= (real_to_ang c_one) ang_zero))))

;; Real_To_Ang_inv
(assert
  (forall ((phi complex))
    (=>
      (real_ phi)
      (= (ang_inv (real_to_ang phi)) (real_to_ang (prefix_mndt phi))))))

;; Real_To_Ang_add
(assert
  (forall ((phi complex) (phiqt complex))
    (=>
      (real_ phi)
      (=>
        (real_ phiqt)
        (= (ang_add (real_to_ang phi) (real_to_ang phiqt)) (real_to_ang
                                                             (infix_pldt
                                                               phi
                                                               phiqt)))))))

;; meas_value
(assert
  (forall ((phi complex))
    (=>
      (real_ phi)
      (=>
        (and (infix_lseqdt c_zero phi) (infix_lsdt phi c_one))
        (= (ang_meas (real_to_ang phi)) phi)))))

;; Equal_angle
(assert
  (forall ((o angle) (oqt angle))
    (=
      (= (exp1
           (infix_asdt
             (infix_asdt (infix_asdt im pi1) (infix_pldt c_one c_one))
             (ang_meas o))) (exp1
                              (infix_asdt
                                (infix_asdt
                                  (infix_asdt im pi1)
                                  (infix_pldt c_one c_one))
                                (ang_meas oqt))))
      (= o oqt))))

;; set_equal_angle_meas
(assert
  (forall ((o angle) (oqt angle))
    (=> (= o oqt) (= (ang_meas o) (ang_meas oqt)))))

;; get_equal_angle_meas
(assert
  (forall ((o angle) (oqt angle))
    (=> (= (ang_meas o) (ang_meas oqt)) (= o oqt))))

;; meas_real_to_ang
(assert (forall ((o angle)) (= (real_to_ang (ang_meas o)) o)))

;; meas_real_to_ang_rev
(assert (forall ((o angle)) (= o (real_to_ang (ang_meas o)))))

;; ang_add_rev
(assert (forall ((o angle) (oqt angle)) (= (ang_add o oqt) (ang_add oqt o))))

;; real_to_ang_zero
(assert (= (real_to_ang c_zero) ang_zero))

;; ang_exp
(declare-fun ang_exp (angle) complex)

;; ang_exp'def
(assert
  (forall ((o angle))
    (= (ang_exp o) (exp1
                     (infix_asdt
                       (infix_asdt
                         (infix_asdt im pi1)
                         (infix_pldt c_one c_one))
                       (ang_meas o))))))

;; ang_exp'spec
(assert (forall ((o angle)) (not (= (ang_exp o) c_zero))))

;; set_equal_angle_exp
(assert
  (forall ((o angle) (oqt angle))
    (=> (= o oqt) (= (ang_exp o) (ang_exp oqt)))))

;; get_equal_angle_exp
(assert
  (forall ((o angle) (oqt angle))
    (=> (= (ang_exp o) (ang_exp oqt)) (= o oqt))))

;; meas_value_plus_one
(assert
  (forall ((phi complex))
    (=>
      (real_ phi)
      (= (exp1
           (infix_asdt
             (infix_asdt (infix_asdt im pi1) (infix_pldt c_one c_one))
             (ang_meas (real_to_ang phi)))) (exp1
                                              (infix_asdt
                                                (infix_asdt
                                                  (infix_asdt im pi1)
                                                  (infix_pldt c_one c_one))
                                                (infix_pldt
                                                  (ang_meas
                                                    (real_to_ang phi))
                                                  c_one)))))))

;; ang_exp_pi_over_four
(assert
  (= (ang_exp (real_to_ang (infix_sldt c_one (i_to_c 8)))) (infix_pldt
                                                             (infix_sldt
                                                               (square_rt
                                                                 (infix_pldt
                                                                   c_one
                                                                   c_one))
                                                               (infix_pldt
                                                                 c_one
                                                                 c_one))
                                                             (infix_asdt
                                                               im
                                                               (infix_sldt
                                                                 (square_rt
                                                                   (infix_pldt
                                                                    c_one
                                                                    c_one))
                                                                 (infix_pldt
                                                                   c_one
                                                                   c_one))))))

;; ang_exp_pi_over_two
(assert (= (ang_exp (real_to_ang (infix_sldt c_one (i_to_c 4)))) im))

;; ang_exp_pi
(assert
  (= (ang_exp (real_to_ang (infix_sldt c_one (i_to_c 2)))) (prefix_mndt
                                                             c_one)))

;; real_to_ang_c_one
(assert (= (real_to_ang c_one) ang_zero))

;; set_ang_meas_eq
(assert
  (forall ((o angle) (oqt angle))
    (=> (= o oqt) (= (ang_meas o) (ang_meas oqt)))))

;; get_ang_meas_eq
(assert
  (forall ((o angle) (oqt angle))
    (=> (= (ang_meas o) (ang_meas oqt)) (= o oqt))))

;; ang_exp_zero
(assert (= (ang_exp ang_zero) c_one))

;; ang_exp_two_pi
(assert (= (ang_exp (real_to_ang (i_to_c 1))) c_one))

;; ang_exp_c_one
(assert (= (ang_exp (real_to_ang c_one)) c_one))

;; ang_meas_add_inf_c_one
(assert
  (forall ((o angle) (oqt angle))
    (=>
      (infix_lsdt (infix_pldt (ang_meas o) (ang_meas oqt)) c_one)
      (= (ang_meas (ang_add o oqt)) (infix_pldt (ang_meas o) (ang_meas oqt))))))

;; set_ang_exp_eq
(assert
  (forall ((o angle) (oqt angle))
    (=> (= o oqt) (= (ang_exp o) (ang_exp oqt)))))

;; get_ang_exp_meas_eq
(assert
  (forall ((o angle) (oqt angle))
    (=> (= (ang_exp o) (ang_exp oqt)) (= (ang_meas o) (ang_meas oqt)))))

;; get_ang_exp_eq
(assert
  (forall ((o angle) (oqt angle))
    (=> (= (ang_exp o) (ang_exp oqt)) (= o oqt))))

;; ang_meas_zero
(assert (= (ang_meas ang_zero) c_zero))

;; real_to_ang_add_one
(assert
  (forall ((x complex))
    (=> (real_ x) (= (real_to_ang (infix_pldt x c_one)) (real_to_ang x)))))

;; int_part
(declare-fun int_part (complex) complex)

;; int_part'def
(assert
  (forall ((x complex))
    (=> (real_ x) (= (int_part x) (i_to_c (to_int (real_part x)))))))

;; int_part'spec
(assert
  (forall ((x complex))
    (=>
      (real_ x)
      (and
        (real_ (int_part x))
        (and
          (exists ((i Int)) (= (int_part x) (i_to_c i)))
          (and
            (infix_lseqdt (int_part x) x)
            (infix_lsdt x (infix_pldt (int_part x) c_one))))))))

;; int_part_int
(declare-fun int_part_int (complex) Int)

;; int_part_int'def
(assert
  (forall ((x complex))
    (=> (real_ x) (= (int_part_int x) (to_int (real_part x))))))

;; int_part_int'spec
(assert
  (forall ((x complex))
    (=>
      (real_ x)
      (and
        (= (i_to_c (int_part_int x)) (int_part x))
        (and
          (infix_lseqdt (i_to_c (int_part_int x)) x)
          (infix_lsdt x (infix_pldt (i_to_c (int_part_int x)) c_one)))))))

;; dec_part
(declare-fun dec_part (complex) complex)

;; dec_part'def
(assert
  (forall ((x complex))
    (=> (real_ x) (= (dec_part x) (infix_mndt x (int_part x))))))

;; dec_part'spec
(assert
  (forall ((x complex))
    (=>
      (real_ x)
      (and
        (real_ (dec_part x))
        (and
          (exists ((i Int)) (= (dec_part x) (infix_mndt x (i_to_c i))))
          (and
            (infix_lseqdt c_zero (dec_part x))
            (infix_lsdt (dec_part x) c_one)))))))

;; dec_part_decomp
(assert
  (forall ((x complex))
    (=> (real_ x) (= x (infix_pldt (dec_part x) (int_part x))))))

;; dec_part_decomp_rev
(assert
  (forall ((x complex))
    (=> (real_ x) (= (infix_pldt (dec_part x) (int_part x)) x))))

;; dec_part_decomp_int
(assert
  (forall ((x complex))
    (=> (real_ x) (= x (infix_pldt (dec_part x) (i_to_c (int_part_int x)))))))

;; dec_part_decomp_int_rev
(assert
  (forall ((x complex))
    (=> (real_ x) (= (infix_pldt (dec_part x) (i_to_c (int_part_int x))) x))))

;; ang_exp_add_b
(assert
  (forall ((o angle) (oqt angle))
    (=>
      (infix_lsdt (infix_pldt (ang_meas o) (ang_meas oqt)) c_one)
      (= (ang_exp (ang_add o oqt)) (infix_asdt (ang_exp o) (ang_exp oqt))))))

;; ang_exp_add_b_rev
(assert
  (forall ((o angle) (oqt angle))
    (=>
      (infix_lsdt (infix_pldt (ang_meas o) (ang_meas oqt)) c_one)
      (= (infix_asdt (ang_exp o) (ang_exp oqt)) (ang_exp (ang_add o oqt))))))

;; real_to_ang_add
(assert
  (forall ((x complex) (xqt complex))
    (=>
      (real_ x)
      (=>
        (real_ xqt)
        (= (real_to_ang (infix_pldt x xqt)) (ang_add
                                              (real_to_ang x)
                                              (real_to_ang xqt)))))))

;; real_to_ang_add_rev
(assert
  (forall ((x complex) (xqt complex))
    (=>
      (real_ x)
      (=>
        (real_ xqt)
        (= (ang_add (real_to_ang x) (real_to_ang xqt)) (real_to_ang
                                                         (infix_pldt x xqt)))))))

;; ang_inv_add
(assert
  (forall ((o angle) (oqt angle))
    (= (ang_inv (ang_add o oqt)) (ang_add (ang_inv o) (ang_inv oqt)))))

;; ang_inv_add_rev
(assert
  (forall ((o angle) (oqt angle))
    (= (ang_add (ang_inv o) (ang_inv oqt)) (ang_inv (ang_add o oqt)))))

;; ang_exp_add_pre
(assert
  (forall ((o angle) (oqt angle))
    (=>
      (infix_lseqdt c_one (infix_pldt (ang_meas o) (ang_meas oqt)))
      (=>
        (infix_lseqdt (ang_meas o) (ang_meas oqt))
        (= (ang_exp (ang_add o oqt)) (infix_asdt (ang_exp o) (ang_exp oqt)))))))

;; ang_exp_add
(assert
  (forall ((o angle) (oqt angle))
    (= (ang_exp (ang_add o oqt)) (infix_asdt (ang_exp o) (ang_exp oqt)))))

;; ang_meas_add
(assert
  (forall ((o angle) (oqt angle))
    (= (real_to_ang (ang_meas (ang_add o oqt))) (ang_add o oqt))))

;; ang_exp_add_rev
(assert
  (forall ((o angle) (oqt angle))
    (= (infix_asdt (ang_exp o) (ang_exp oqt)) (ang_exp (ang_add o oqt)))))

;; real_to_ang_int_pre
(assert
  (forall ((k Int))
    (=> (<= 0 k) (= (ang_exp (real_to_ang (i_to_c k))) c_one))))

;; real_to_ang_int
(assert (forall ((k Int)) (= (ang_exp (real_to_ang (i_to_c k))) c_one)))

;; real_to_ang_int_
(assert (forall ((k Int)) (= (real_to_ang (i_to_c k)) ang_zero)))

;; real_to_ang_value_add
(assert
  (forall ((phi complex) (k Int))
    (=>
      (and (infix_lseqdt c_zero phi) (infix_lsdt phi c_one))
      (= (ang_exp (real_to_ang (infix_pldt phi (i_to_c k)))) (exp1
                                                               (infix_asdt
                                                                 (infix_asdt
                                                                   (infix_asdt
                                                                    im
                                                                    pi1)
                                                                   (infix_pldt
                                                                    c_one
                                                                    c_one))
                                                                 phi))))))

;; real_to_ang_value
(assert
  (forall ((phi complex))
    (=>
      (real_ phi)
      (= (ang_exp (real_to_ang phi)) (exp1
                                       (infix_asdt
                                         (infix_asdt
                                           (infix_asdt im pi1)
                                           (infix_pldt c_one c_one))
                                         phi))))))

;; ang_exp_zero_
(assert (= (ang_exp ang_zero) c_one))

;; ang_mult_int_
(declare-fun ang_mult_int_ (angle
  Int) angle)

;; ang_mult_int_'def
(assert
  (forall ((theta angle) (i Int))
    (=>
      (<= 0 i)
      (ite (= i 0)
        (= (ang_mult_int_ theta i) ang_zero)
        (= (ang_mult_int_ theta i) (ang_add
                                     (ang_mult_int_ theta (- i 1))
                                     theta))))))

;; ang_mult_int_'spec
(assert
  (forall ((theta angle) (i Int))
    (=>
      (<= 0 i)
      (= (ang_mult_int_ theta i) (real_to_ang
                                   (infix_asdt (ang_meas theta) (i_to_c i)))))))

;; ang_mult_int
(declare-fun ang_mult_int (angle
  Int) angle)

;; ang_mult_int'def
(assert
  (forall ((theta angle) (i Int))
    (ite (<= 0 i)
      (= (ang_mult_int theta i) (ang_mult_int_ theta i))
      (= (ang_mult_int theta i) (ang_inv (ang_mult_int_ theta (- i)))))))

;; ang_mult_int_to_real_to_ang
(assert
  (forall ((theta angle) (i Int))
    (= (ang_mult_int theta i) (real_to_ang
                                (infix_asdt (ang_meas theta) (i_to_c i))))))

;; ang_mult_int_eq
(assert
  (forall ((i Int) (iqt Int) (theta angle) (thetaqt angle))
    (=>
      (= i iqt)
      (=>
        (= theta thetaqt)
        (= (ang_mult_int theta i) (ang_mult_int thetaqt iqt))))))

;; ang_mult_int_plus_one_pos
(assert
  (forall ((theta angle) (i Int))
    (=>
      (< 0 i)
      (= (ang_mult_int theta i) (ang_add (ang_mult_int theta (- i 1)) theta)))))

;; ang_mult_int_inv
(assert
  (forall ((theta angle) (i Int))
    (=>
      (< i 0)
      (= (ang_mult_int theta i) (ang_inv (ang_mult_int theta (- i)))))))

;; real_to_ang_eq
(assert
  (forall ((phi complex) (phiqt complex))
    (=>
      (real_ phi)
      (=> (= phi phiqt) (= (real_to_ang phi) (real_to_ang phiqt))))))

;; set_equal_angle_by_exp
(assert
  (forall ((o angle) (oqt angle))
    (=> (= (ang_exp o) (ang_exp oqt)) (= o oqt))))

;; real_to_ang_int_dec_part
(assert
  (forall ((x complex))
    (=> (real_ x) (= (real_to_ang x) (real_to_ang (dec_part x))))))

;; set_equal_exp_by_ang
(assert
  (forall ((o angle) (oqt angle))
    (=> (= o oqt) (= (ang_exp o) (ang_exp oqt)))))

;; div_plus_one
(assert
  (forall ((i Int) (j Int))
    (=>
      (<= 0 i)
      (=> (< 0 j) (and (<= (* (div i j) j) i) (< i (* (+ (div i j) 1) j)))))))

;; mod_is_inf
(assert (forall ((i Int) (j Int)) (=> (< 0 j) (< (mod i j) j))))

;; zero_add
(assert (forall ((a1 Int) (a2 Int)) (=> (= a1 0) (= (+ a1 a2) a2))))

;; add_zero
(assert (forall ((a1 Int) (a2 Int)) (=> (= a2 0) (= (+ a1 a2) a1))))

;; one_mult
(assert (forall ((a1 Int) (a2 Int)) (=> (= a1 1) (= (* a1 a2) a2))))

;; mult_one
(assert (forall ((a1 Int) (a2 Int)) (=> (= a2 1) (= (* a1 a2) a1))))

;; add_eq
(assert
  (forall ((a1 Int) (a2 Int) (b1 Int) (b2 Int))
    (=> (= a1 a2) (=> (= b1 b2) (= (+ a1 b1) (+ a2 b2))))))

;; mult_eq
(assert
  (forall ((a1 Int) (a2 Int) (b1 Int) (b2 Int))
    (=> (= a1 a2) (=> (= b1 b2) (= (* a1 b1) (* a2 b2))))))

;; add_eq_inv
(assert
  (forall ((a1 Int) (a2 Int) (b1 Int) (b2 Int))
    (=> (= a1 a2) (=> (= b1 b2) (= (+ a1 b1) (+ b2 a2))))))

;; mult_eq_inv
(assert
  (forall ((a1 Int) (a2 Int) (b1 Int) (b2 Int))
    (=> (= a1 a2) (=> (= b1 b2) (= (* a1 b1) (* b2 a2))))))

;; bound_eq
(assert
  (forall ((i Int) (j Int)) (=> (and (<= 0 i) (< i j)) (= i (mod i j)))))

;; bound_eq_rev
(assert
  (forall ((i Int) (j Int)) (=> (and (<= 0 i) (< i j)) (= (mod i j) i))))

;; unicity_div_mod
(assert
  (forall ((i Int) (j Int) (q Int) (r Int))
    (=>
      (< 0 j)
      (=>
        (= i (+ (* q j) r))
        (=> (and (<= 0 r) (< r j)) (and (= q (div i j)) (= r (mod i j))))))))

;; get_div
(assert
  (forall ((j Int) (q Int) (r Int))
    (=> (< 0 j) (=> (and (<= 0 r) (< r j)) (= (div (+ (* q j) r) j) q)))))

;; get_mod
(assert
  (forall ((j Int) (q Int) (r Int))
    (=> (< 0 j) (=> (and (<= 0 r) (< r j)) (= (mod (+ (* q j) r) j) r)))))

;; positive_div
(assert
  (forall ((i Int) (j Int)) (=> (and (< 0 j) (< j i)) (< 0 (div i j)))))

;; div_mod_sim_bound
(assert
  (forall ((d Int) (m Int) (q Int) (r Int))
    (=>
      (and (<= 0 d) (< d r))
      (=>
        (and (<= 0 m) (< m q))
        (and (<= 0 (+ (* d q) m)) (< (+ (* d q) m) (* r q)))))))

;; div_mod_sim_bound_gen_r
(assert
  (forall ((d Int) (q Int) (r Int))
    (=>
      (and (<= 0 d) (< d r))
      (forall ((m Int))
        (=>
          (and (<= 0 m) (< m q))
          (and (<= 0 (+ (* d q) m)) (< (+ (* d q) m) (* r q))))))))

;; unicity_div_gen
(assert
  (forall ((j Int) (q Int))
    (=>
      (<= 0 q)
      (=>
        (< 0 j)
        (and
          (forall ((i Int))
            (=>
              (<= 0 i)
              (=>
                (and (<= 0 (- i (* q j))) (< (- i (* q j)) j))
                (= q (div i j)))))
          (forall ((i Int))
            (=>
              (<= 0 i)
              (=>
                (and (<= 0 (- i (* q j))) (< (- i (* q j)) j))
                (= (- i (* j q)) (mod i j))))))))))

;; bound_mod
(assert
  (forall ((i Int) (j Int))
    (=> (< 0 j) (and (<= 0 (mod i j)) (< (mod i j) j)))))

;; mod_eq
(assert
  (forall ((a Int) (b Int) (d Int)) (=> (= a b) (= (mod a d) (mod b d)))))

;; e_div_eq
(assert
  (forall ((a Int) (b Int) (d Int)) (=> (= a b) (= (div a d) (div b d)))))

;; decomp
(assert
  (forall ((i Int) (j Int))
    (=> (not (= 0 j)) (= i (+ (* j (div i j)) (mod i j))))))

;; div_mod_eq
(assert
  (forall ((i Int) (j Int) (q Int))
    (=>
      (<= 0 i)
      (=>
        (<= 0 j)
        (=>
          (< 0 q)
          (=> (= (div i q) (div j q)) (=> (= (mod i q) (mod j q)) (= i j))))))))

;; mod_zero
(assert
  (forall ((i Int) (j Int))
    (=> (<= 0 i) (=> (< 0 j) (=> (= (mod i j) 0) (= i (* j (div i j))))))))

;; div_plus_quotient
(assert
  (forall ((i Int) (j Int))
    (=> (<= 0 i) (=> (< 0 j) (= (div (+ i j) j) (+ (div i j) 1))))))

;; div_plus_fact_gen_div
(assert
  (forall ((i Int) (j Int) (k Int))
    (=> (< 0 j) (= (div (+ i (* k j)) j) (+ (div i j) k)))))

;; mod_plus_fact_gen_mod
(assert
  (forall ((i Int) (j Int) (k Int))
    (=> (< 0 j) (= (mod (+ (* k j) i) j) (mod i j)))))

;; mod_plus_fact_gen_mod_left
(assert
  (forall ((i Int) (j Int) (k Int))
    (=> (< 0 j) (= (mod (+ (* j k) i) j) (mod i j)))))

;; bound_div
(assert
  (forall ((i Int) (q Int) (f Int))
    (=>
      (<= 0 i)
      (=>
        (<= 0 q)
        (=>
          (<= 0 f)
          (=>
            (< i (* f q))
            (and
              (<= 0 (div i q))
              (and
                (and
                  (<= 0 (* (div i q) q))
                  (and (<= (* (div i q) q) i) (< i (* q (+ (div i q) 1)))))
                (< (div i q) f)))))))))

;; mod_upper_bound
(assert (forall ((i Int) (q Int)) (=> (< 0 i) (=> (= i q) (= (mod i q) 0)))))

;; bound_div_gen
(assert
  (forall ((q Int) (f Int))
    (=>
      (< 0 q)
      (=>
        (<= 0 f)
        (forall ((i Int)) (=> (and (<= 0 i) (< i (* q f))) (< (div i q) f)))))))

;; mod_invariant
(assert
  (forall ((i Int) (q Int) (f Int))
    (=>
      (<= 0 i)
      (=>
        (< 0 q)
        (=>
          (< 0 f)
          (= (mod (+ (* q (* f (div i (* q f)))) (mod i (* q f))) q) (mod (mod i (* q f)) q)))))))

;; mod_inf
(assert
  (forall ((i Int) (q Int)) (=> (and (<= 0 i) (< i q)) (= (mod i q) i))))

;; add_mod
(assert
  (forall ((a Int) (b Int) (c Int))
    (=> (< 0 c) (= (mod (+ (mod a c) (mod b c)) c) (mod (+ a b) c)))))

;; add_mod_eq
(assert
  (forall ((a Int) (b Int) (c Int) (d Int) (n Int))
    (=>
      (< 0 n)
      (=>
        (= (mod a n) (mod c n))
        (=> (= (mod b n) (mod d n)) (= (mod (+ a b) n) (mod (+ c d) n)))))))

;; add_mod_left
(assert
  (forall ((a Int) (b Int) (c Int))
    (=> (< 0 c) (= (mod (+ (mod a c) b) c) (mod (+ a b) c)))))

;; simpl_add_mod_left
(assert
  (forall ((a Int) (b Int) (c Int))
    (=> (< 0 c) (=> (= (mod a c) 0) (= (mod (+ a b) c) (mod b c))))))

;; add_mod_right
(assert
  (forall ((a Int) (b Int) (c Int))
    (=> (< 0 c) (= (mod (+ a (mod b c)) c) (mod (+ a b) c)))))

;; mod_mod_left
(assert
  (forall ((i Int) (j Int) (f Int))
    (=> (< 0 j) (=> (< 0 f) (= (mod (mod i (* f j)) j) (mod i j))))))

;; mult_mod
(assert
  (forall ((a Int) (b Int) (c Int))
    (=> (< 0 c) (= (mod (* (mod a c) (mod b c)) c) (mod (* a b) c)))))

;; mod_mod_mult
(assert
  (forall ((a Int) (b Int) (c Int))
    (=> (< 0 b) (= (mod (* (mod a b) (mod c b)) b) (mod (* a c) b)))))

;; mod_mod_mult_rev
(assert
  (forall ((a Int) (b Int) (c Int))
    (=> (< 0 b) (= (mod (* a c) b) (mod (* (mod a b) (mod c b)) b)))))

;; mod_mod_i
(assert
  (forall ((i Int) (j Int)) (=> (< 0 j) (= (mod (mod i j) j) (mod i j)))))

;; binary_prod
(assert
  (forall ((i Int) (j Int))
    (=>
      (<= 0 i)
      (=> (< 0 j) (= (mod (* (mod i 2) (mod j 2)) 2) (mod (* i j) 2))))))

;; mod_minus
(assert
  (forall ((a Int) (b Int) (c Int))
    (=> (< 0 b) (=> (= (mod a b) c) (= (mod (- a) b) (mod (- c) b))))))

;; mult_mod_left
(assert
  (forall ((a Int) (b Int) (c Int))
    (=> (< 0 c) (= (mod (* (mod a c) b) c) (mod (* a b) c)))))

;; mult_mod_right
(assert
  (forall ((a Int) (b Int) (c Int))
    (=> (< 0 c) (= (mod (* a (mod b c)) c) (mod (* a b) c)))))

;; mod_mod_right
(assert
  (forall ((i Int) (j Int) (f Int))
    (=>
      (<= 0 i)
      (=> (< 0 j) (=> (< 0 f) (= (mod (mod i (* j f)) j) (mod i j)))))))

;; mod_mod_rev
(assert
  (forall ((i Int) (j Int) (f Int))
    (=>
      (<= 0 i)
      (=>
        (< 0 j)
        (=>
          (< 0 f)
          (and
            (= (mod i j) (mod (mod i (* j f)) j))
            (= (mod i j) (mod (mod i (* f j)) j))))))))

;; mod_mod_plus
(assert
  (forall ((i Int) (j Int))
    (=> (<= 0 i) (=> (< 0 j) (= (mod i j) (mod (mod i (+ j j)) j))))))

;; mod_mod_add_left
(assert
  (forall ((a Int) (b Int) (c Int))
    (=> (< 0 c) (= (mod (+ (mod a c) b) c) (mod (+ a b) c)))))

;; mod_mod_add_right
(assert
  (forall ((a Int) (b Int) (c Int))
    (=> (< 0 c) (= (mod (+ a (mod b c)) c) (mod (+ a b) c)))))

;; mod_mod_add_left_rev
(assert
  (forall ((a Int) (b Int) (c Int))
    (=> (< 0 c) (= (mod (+ a b) c) (mod (+ (mod a c) b) c)))))

;; mod_mod_add_right_rev
(assert
  (forall ((a Int) (b Int) (c Int))
    (=> (< 0 c) (= (mod (+ a b) c) (mod (+ a (mod b c)) c)))))

;; mult_assoc
(assert
  (forall ((i Int) (q Int) (f Int))
    (=>
      (<= 0 i)
      (=>
        (< 0 q)
        (=>
          (< 0 f)
          (= (* q (* f (div i (* q f)))) (* (* q f) (div i (* q f)))))))))

;; div_div
(assert
  (forall ((i Int) (j Int) (k Int))
    (=>
      (<= 0 i)
      (=>
        (< 0 j)
        (=>
          (< 0 k)
          (and
            (= (div (div i k) j) (div i (* k j)))
            (= (div (div i k) j) (div i (* j k)))))))))

;; compat_order_div
(assert
  (forall ((i Int) (iqt Int) (j Int))
    (=> (and (<= 0 i) (<= i iqt)) (=> (< 0 j) (<= (div i j) (div iqt j))))))

;; mod_div
(assert
  (forall ((i Int) (j Int) (k Int))
    (=>
      (<= 0 i)
      (=> (< 0 j) (=> (< 0 k) (= (div (mod i (* j k)) j) (mod (div i j) k)))))))

;; inf_mul
(assert
  (forall ((ia Int) (ib Int) (a Int) (b Int))
    (=>
      (and (<= 0 ia) (< ia a))
      (=>
        (and (<= 0 ib) (< ib b))
        (and (< (+ (* a ib) ia) (* a b)) (< (+ (* ib a) ia) (* b a)))))))

;; inf_mul_gen
(assert
  (forall ((n Int) (v Int) (p Int))
    (=>
      (and (<= 0 p) (< p v))
      (forall ((k Int))
        (=> (and (<= 0 k) (< k n)) (< (+ (* k v) p) (* n v)))))))

;; inf_mul_gen_b
(assert
  (forall ((n Int) (v Int) (p Int))
    (=>
      (and (<= 0 p) (< p n))
      (forall ((k Int))
        (=> (and (<= 0 k) (< k v)) (< (+ (* p v) k) (* n v)))))))

;; inf_mul_comm
(assert
  (forall ((i Int) (bi Int) (quot Int) (rest Int))
    (=>
      (and (<= 0 i) (< i bi))
      (=>
        (< 0 rest)
        (=> (< 0 quot) (=> (= bi (* quot rest)) (< (mod i rest) rest)))))))

;; indic_div_mod
(assert
  (forall ((i Int) (j Int) (q Int))
    (=>
      (<= 0 i)
      (=>
        (<= 0 j)
        (=>
          (< 0 q)
          (= (indic int (t2tb8 i) (t2tb8 j)) (infix_asdt
                                               (indic
                                                 int
                                                 (t2tb8 (mod i q))
                                                 (t2tb8 (mod j q)))
                                               (indic
                                                 int
                                                 (t2tb8 (div i q))
                                                 (t2tb8 (div j q))))))))))

;; indic_div_mod_gen
(assert
  (forall ((q Int))
    (=>
      (< 0 q)
      (forall ((i Int) (j Int))
        (=>
          (and (<= 0 i) (<= 0 j))
          (= (indic int (t2tb8 i) (t2tb8 j)) (infix_asdt
                                               (indic
                                                 int
                                                 (t2tb8 (mod i q))
                                                 (t2tb8 (mod j q)))
                                               (indic
                                                 int
                                                 (t2tb8 (div i q))
                                                 (t2tb8 (div j q))))))))))

;; set_inf
(assert true)

;; set_infeq
(assert true)

;; bounded_cycle
(assert
  (forall ((a Int) (b Int) (c Int) (d Int))
    (=>
      (<= 0 a)
      (=>
        (< 0 b)
        (=>
          (and (<= 0 d) (< d b))
          (=> (< 0 c) (= (div (+ (* a b) d) (* b c)) (div a c))))))))

;; div_mod_minus
(assert
  (forall ((a Int) (b Int))
    (=>
      (< 0 b)
      (=>
        (< 0 a)
        (=> (not (= (mod a b) 0)) (= (mod (- a) b) (- b (mod a b))))))))

;; fc
(declare-fun fc105 (ty
  uni
  Int) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 Int)) (sort (infix_mngt a int) (fc105 a x x1)))))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (b Int) (i Int))
    (= (select (tb2t7 (fc105 int (t2tb7 f) b)) i) (mod (select f i) b))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (b Int) (i uni))
      (= (tb2t8 (infix_at int a (fc105 a f b) i)) (mod (tb2t8
                                                         (infix_at int a f i)) b)))))

;; mod_mod_iproduct
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (b Int))
      (=>
        (< 0 b)
        (= (mod (iproduct a s (fc105 a f b)) b) (mod (iproduct a s f) b))))))

;; ind_isum_mod_eq
(assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (i Int) (j Int) (n Int))
    (=>
      (< 0 n)
      (=>
        (forall ((k Int))
          (=>
            (and (<= i k) (< k j))
            (= (mod (select f k) n) (mod (select g k) n))))
        (= (mod (ind_isum f i j) n) (mod (ind_isum g i j) n))))))

;; int_to_ang
(declare-fun int_to_ang (Int
  Int) angle)

;; int_to_ang'def
(assert
  (forall ((k Int) (n Int))
    (=>
      (<= 0 n)
      (= (int_to_ang k n) (real_to_ang
                            (infix_sldt (i_to_c k) (i_to_c (power 2 n))))))))

;; int_to_ang'spec
(assert
  (forall ((k Int) (n Int))
    (=>
      (<= 0 n)
      (and
        (= (int_to_ang k n) (real_to_ang
                              (infix_sldt
                                (i_to_c (mod k (power 2 n)))
                                (i_to_c (power 2 n)))))
        (=>
          (and (<= 0 k) (< k (power 2 n)))
          (= (ang_meas (int_to_ang k n)) (infix_sldt
                                           (i_to_c k)
                                           (i_to_c (power 2 n)))))))))

;; infix /./
(declare-fun infix_sldtsl (Int
  Int) angle)

;; infix /./'def
(assert
  (forall ((k Int) (n Int))
    (ite (<= 0 n)
      (= (infix_sldtsl k n) (int_to_ang k n))
      (= (infix_sldtsl k n) (int_to_ang (- k) (- n))))))

;; infix /./'spec
(assert
  (forall ((k Int) (n Int))
    (and
      (=>
        (<= 0 n)
        (= (infix_sldtsl k n) (real_to_ang
                                (infix_sldt
                                  (i_to_c (mod k (power 2 n)))
                                  (i_to_c (power 2 n))))))
      (and
        (=>
          (<= 0 n)
          (=>
            (and (<= 0 k) (< k (power 2 n)))
            (= (ang_meas (infix_sldtsl k n)) (infix_sldt
                                               (i_to_c k)
                                               (i_to_c (power 2 n))))))
        (and
          (=>
            (< n 0)
            (= (infix_sldtsl k n) (real_to_ang
                                    (infix_sldt
                                      (i_to_c (mod (- k) (power 2 (- n))))
                                      (i_to_c (power 2 (- n)))))))
          (=>
            (< n 0)
            (=>
              (and (<= 0 k) (< k (power 2 n)))
              (= (ang_meas (infix_sldtsl k n)) (infix_sldt
                                                 (i_to_c (- k))
                                                 (i_to_c (power 2 (- n))))))))))))

;; int_to_ang_pos
(assert
  (forall ((k Int) (n Int))
    (=>
      (<= 0 n)
      (= (infix_sldtsl k n) (real_to_ang
                              (infix_sldt (i_to_c k) (i_to_c (power 2 n))))))))

;; int_to_ang_real_mod
(assert
  (forall ((k Int) (n Int))
    (=>
      (<= 0 n)
      (= (infix_sldtsl k n) (real_to_ang
                              (infix_sldt
                                (i_to_c (mod k (power 2 n)))
                                (i_to_c (power 2 n))))))))

;; real_to_ang_inv
(assert
  (forall ((x complex))
    (=>
      (real_ x)
      (= (real_to_ang (prefix_mndt x)) (ang_inv (real_to_ang x))))))

;; real_to_ang_inv_rev
(assert
  (forall ((x complex))
    (=>
      (real_ x)
      (= (ang_inv (real_to_ang x)) (real_to_ang (prefix_mndt x))))))

;; involutive_ang_inv
(assert (forall ((o angle)) (= (ang_inv (ang_inv o)) o)))

;; Real_To_Ang_inv_add
(assert
  (forall ((phi complex))
    (=>
      (real_ phi)
      (= (ang_add (real_to_ang phi) (real_to_ang (prefix_mndt phi))) 
      ang_zero))))

;; Real_To_Ang_up
(assert
  (forall ((phi complex))
    (=>
      (real_ phi)
      (= (real_to_ang phi) (real_to_ang (infix_pldt c_one phi))))))

;; real_To_Ang_cyclic_pos
(assert
  (forall ((phi complex) (k Int))
    (=>
      (real_ phi)
      (=>
        (<= 0 k)
        (= (real_to_ang phi) (real_to_ang (infix_pldt (i_to_c k) phi)))))))

;; real_To_Ang_cyclic_neg
(assert
  (forall ((phi complex) (k Int))
    (=>
      (real_ phi)
      (=>
        (<= 0 k)
        (= (real_to_ang (infix_mndt (i_to_c k) phi)) (real_to_ang
                                                       (prefix_mndt phi)))))))

;; real_to_ang_equiv
(assert
  (forall ((x complex) (xqt complex))
    (=>
      (real_ x)
      (=>
        (exists ((k Int)) (= xqt (infix_pldt x (i_to_c k))))
        (= (real_to_ang x) (real_to_ang xqt))))))

;; Real_zero_n
(assert (= (real_to_ang c_zero) ang_zero))

;; real_ang_mult_pos
(assert
  (forall ((phi complex) (i Int))
    (=>
      (real_ phi)
      (=>
        (<= 0 i)
        (= (ang_mult_int (real_to_ang phi) i) (real_to_ang
                                                (infix_asdt phi (i_to_c i))))))))

;; real_ang_mult
(assert
  (forall ((phi complex) (i Int))
    (=>
      (real_ phi)
      (= (ang_mult_int (real_to_ang phi) i) (real_to_ang
                                              (infix_asdt phi (i_to_c i)))))))

;; real_to_ang_down_cucles
(assert
  (forall ((phi complex) (x complex))
    (=>
      (real_ phi)
      (=> (= x c_one) (= (real_to_ang (infix_mndt phi x)) (real_to_ang phi))))))

;; odd
(declare-fun odd (Int) Bool)

;; odd'def
(assert
  (forall ((n Int)) (ite (= (mod n 2) 1) (= (odd n) true) (= (odd n) false))))

;; odd'spec
(assert
  (forall ((n Int))
    (and
      (=> (= (odd n) true) (= n (+ (* 2 (div n 2)) 1)))
      (=> (= (odd n) false) (= n (* 2 (div n 2)))))))

;; even
(declare-fun even (Int) Bool)

;; even'def
(assert
  (forall ((n Int))
    (ite (= (mod n 2) 0) (= (even n) true) (= (even n) false))))

;; even'spec
(assert (forall ((n Int)) (= (= (even n) true) (not (= (odd n) true)))))

;; even_to_mod
(assert (forall ((n Int)) (=> (= (even n) true) (= (mod n 2) 0))))

;; even_minus_one
(assert
  (forall ((n Int))
    (=> (< 0 n) (=> (= (even n) true) (= (odd (- n 1)) true)))))

;; odd_minus_one
(assert
  (forall ((n Int))
    (=> (< 0 n) (=> (= (odd n) true) (= (even (- n 1)) true)))))

;; even_opp
(assert (forall ((n Int)) (=> (= (even n) true) (= (even (- n)) true))))

;; odd_opp
(assert (forall ((n Int)) (=> (= (odd n) true) (= (odd (- n)) true))))

;; odd_to_mod
(assert (forall ((n Int)) (=> (= (odd n) true) (= (mod n 2) 1))))

;; even_or_odd
(assert (forall ((n Int)) (or (= (even n) true) (= (odd n) true))))

;; cpower_minus_c_one
(assert
  (forall ((n Int))
    (=>
      (<= 0 n)
      (and
        (=> (= (even n) true) (= (cpower (prefix_mndt c_one) n) c_one))
        (=>
          (= (odd n) true)
          (= (cpower (prefix_mndt c_one) n) (prefix_mndt c_one)))))))

;; cpower_minus_c_one_even
(assert
  (forall ((n Int))
    (=>
      (<= 0 n)
      (=> (= (even n) true) (= (cpower (prefix_mndt c_one) n) c_one)))))

;; cpower_minus_c_one_odd
(assert
  (forall ((n Int))
    (=>
      (<= 0 n)
      (=>
        (= (odd n) true)
        (= (cpower (prefix_mndt c_one) n) (prefix_mndt c_one))))))

;; fc
(declare-fun fc106 ((Array Int Int)
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (a Int) (i Int))
    (= (select (fc106 f a) i) (* a (select f i)))))

;; iproduct_extract_const
(assert
  (forall ((s (set Int)) (f (Array Int Int)) (a Int))
    (= (iproduct int (t2tb16 s) (t2tb7 (fc106 f a))) (* (power
                                                          a
                                                          (cardinal
                                                            int
                                                            (t2tb16 s))) 
    (iproduct
      int
      (t2tb16 s)
      (t2tb7 f))))))

;; not_null_powers_squarert_two
(assert
  (forall ((i Int))
    (=>
      (<= 0 i)
      (not (= (cpower (square_rt (infix_pldt c_one c_one)) i) c_zero)))))

;; real_pos_coeff
(assert (real_ (infix_sldt c_one (square_rt (infix_pldt c_one c_one)))))

;; coeffs
(assert
  (= (infix_sldt (prefix_mndt c_one) (square_rt (infix_pldt c_one c_one))) 
  (prefix_mndt
    (infix_sldt c_one (square_rt (infix_pldt c_one c_one))))))

;; mop
(declare-fun mop (Int) complex)

;; mop'def
(assert
  (forall ((i Int)) (=> (<= 0 i) (= (mop i) (cpower (prefix_mndt c_one) i)))))

;; minus_one_power_values
(assert
  (forall ((i Int))
    (=>
      (<= 0 i)
      (and
        (=> (= (even i) true) (= (mop i) c_one))
        (=> (= (odd i) true) (= (mop i) (prefix_mndt c_one)))))))

;; factors_mop
(assert
  (forall ((i Int) (j Int))
    (=>
      (<= 0 i)
      (=> (<= 0 j) (= (mop (+ i j)) (infix_asdt (mop i) (mop j)))))))

;; factors_mop_rev
(assert
  (forall ((i Int) (j Int))
    (=>
      (<= 0 i)
      (=> (<= 0 j) (= (infix_asdt (mop i) (mop j)) (mop (+ i j)))))))

;; pow_inv_sqrt_2
(declare-fun pow_inv_sqrt_2 (Int) complex)

;; pow_inv_sqrt_2'def
(assert
  (forall ((i Int))
    (=>
      (<= 0 i)
      (= (pow_inv_sqrt_2 i) (cpower
                              (infix_sldt
                                c_one
                                (square_rt (infix_pldt c_one c_one)))
                              i)))))

;; pow_inv_sqrt_2'spec
(assert
  (forall ((i Int))
    (=>
      (<= 0 i)
      (and
        (real_ (pow_inv_sqrt_2 i))
        (= (pow_inv_sqrt_2 i) (infix_sldt
                                c_one
                                (square_rt (i_to_c (power 2 i)))))))))

;; pow_inv_sqrt_2_add
(assert
  (forall ((i Int) (j Int))
    (=>
      (<= 0 i)
      (=>
        (<= 0 j)
        (= (pow_inv_sqrt_2 (+ i j)) (infix_asdt
                                      (pow_inv_sqrt_2 i)
                                      (pow_inv_sqrt_2 j)))))))

;; pow_inv_2
(declare-fun pow_inv_2 (Int) complex)

;; pow_inv_2'def
(assert
  (forall ((i Int))
    (=> (<= 0 i) (= (pow_inv_2 i) (infix_sldt c_one (i_to_c (power 2 i)))))))

;; pow_inv_2'spec
(assert
  (forall ((i Int))
    (=>
      (<= 0 i)
      (and
        (real_ (pow_inv_2 i))
        (and
          (infix_gtdt (pow_inv_2 i) c_zero)
          (and
            (= (pow_inv_2 i) (pow_inv_sqrt_2 (* 2 i)))
            (= (pow_inv_2 i) (infix_asdt
                               (pow_inv_sqrt_2 i)
                               (pow_inv_sqrt_2 i)))))))))

;; pow_inv_2_leq_c_one
(assert (forall ((i Int)) (=> (<= 0 i) (infix_lseqdt (pow_inv_2 i) c_one))))

;; pow_inv_2_inf_c_one
(assert (forall ((i Int)) (=> (<= 1 i) (infix_lsdt (pow_inv_2 i) c_one))))

;; pow_inv_sqrt_2_leq_c_one
(assert
  (forall ((i Int)) (=> (<= 0 i) (infix_lseqdt (pow_inv_sqrt_2 i) c_one))))

;; pow_inv_2_sqrt_inf_c_one
(assert
  (forall ((i Int)) (=> (<= 1 i) (infix_lsdt (pow_inv_sqrt_2 i) c_one))))

;; cpower_pow_inv_2
(assert
  (forall ((i Int) (k Int))
    (=>
      (<= 1 i)
      (=> (<= 1 k) (= (cpower (pow_inv_2 i) k) (pow_inv_2 (* i k)))))))

;; cpower_pow_inv_sqrt_2
(assert
  (forall ((i Int) (k Int))
    (=>
      (<= 1 i)
      (=>
        (<= 1 k)
        (= (cpower (pow_inv_sqrt_2 i) k) (pow_inv_sqrt_2 (* i k)))))))

;; cpower_2_pow_inv_sqrt_2
(assert
  (forall ((i Int))
    (=> (<= 1 i) (= (cpower (pow_inv_sqrt_2 i) 2) (pow_inv_2 i)))))

;; pow_inv_2_subst
(assert
  (forall ((i Int) (j Int))
    (=>
      (and (<= 0 i) (<= i j))
      (= (infix_asdt (pow_inv_2 i) (cpower (infix_pldt c_one c_one) j)) 
      (cpower
        (infix_pldt c_one c_one)
        (- j i))))))

;; pow_inv_2_
(assert
  (forall ((i Int))
    (=> (<= 0 i) (= (pow_inv_2 i) (infix_sldt c_one (i_to_c (power 2 i)))))))

;; pow_inv_sqrt_2_2_add
(assert
  (= (infix_pldt (pow_inv_sqrt_2 1) (pow_inv_sqrt_2 1)) (square_rt
                                                          (infix_pldt
                                                            c_one
                                                            c_one))))

;; pow_inv_2_cpower
(assert
  (forall ((i Int))
    (=>
      (<= 0 i)
      (= (pow_inv_2 i) (infix_sldt c_one (cpower (infix_pldt c_one c_one) i))))))

(declare-sort matrix 1)

;; matrix
(declare-fun matrix1 (ty) ty)

;; elts
(declare-fun elts (ty
  uni) uni)

;; elts_sort
(assert
  (forall ((a ty))
    (forall ((x uni)) (sort (infix_mngt int (infix_mngt int a)) (elts a x)))))

;; rows
(declare-fun rows (ty
  uni) Int)

;; columns
(declare-fun columns (ty
  uni) Int)

;; matrix'invariant
(assert
  (forall ((a ty))
    (forall ((self uni))
      (! (and (< 0 (rows a self)) (< 0 (columns a self))) :pattern ((columns
                                                                    a
                                                                    self)) :pattern (
      (rows
        a
        self)) ))))

;; valid_index
(declare-fun valid_index (ty
  uni
  Int
  Int) Bool)

;; valid_index'def
(assert
  (forall ((a ty))
    (forall ((a1 uni) (r Int) (c Int))
      (=
        (valid_index a a1 r c)
        (and
          (and (<= 0 r) (< r (rows a a1)))
          (and (<= 0 c) (< c (columns a a1))))))))

;; equal_size
(declare-fun equal_size (ty
  uni
  uni) Bool)

;; equal_size'def
(assert
  (forall ((a ty))
    (forall ((a1 uni) (b uni))
      (=
        (equal_size a a1 b)
        (and (= (rows a a1) (rows a b)) (= (columns a a1) (columns a b)))))))

;; get
(declare-fun get (ty
  uni
  Int
  Int) uni)

;; get_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 Int) (x2 Int)) (sort a (get a x x1 x2)))))

;; t2tb
(declare-fun t2tb64 ((matrix Int)) uni)

;; t2tb_sort
(assert (forall ((x (matrix Int))) (sort (matrix1 int) (t2tb64 x))))

;; tb2t
(declare-fun tb2t64 (uni) (matrix Int))

;; BridgeL
(assert
  (forall ((i (matrix Int)))
    (! (= (tb2t64 (t2tb64 i)) i) :pattern ((t2tb64 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=> (sort (matrix1 int) j) (= (t2tb64 (tb2t64 j)) j)) :pattern (
    (t2tb64
      (tb2t64 j))) )))

;; get'def
(assert
  (forall ((a (matrix Int)) (r Int) (c Int))
    (= (tb2t8 (get int (t2tb64 a) r c)) (select (tb2t7
                                                  (infix_at
                                                    (infix_mngt int int)
                                                    int
                                                    (elts int (t2tb64 a))
                                                    (t2tb8 r))) c))))

;; get'def
(assert
  (forall ((a ty))
    (forall ((a1 uni) (r Int) (c Int))
      (= (get a a1 r c) (infix_at
                          a
                          int
                          (infix_at
                            (infix_mngt int a)
                            int
                            (elts a a1)
                            (t2tb8 r))
                          (t2tb8 c))))))

;; get'spec
(assert
  (forall ((a (matrix Int)) (r Int) (c Int))
    (= (tb2t8 (get int (t2tb64 a) r c)) (select (tb2t7
                                                  (infix_at
                                                    (infix_mngt int int)
                                                    int
                                                    (elts int (t2tb64 a))
                                                    (t2tb8 r))) c))))

;; get'spec
(assert
  (forall ((a ty))
    (forall ((a1 uni) (r Int) (c Int))
      (= (get a a1 r c) (infix_at
                          a
                          int
                          (infix_at
                            (infix_mngt int a)
                            int
                            (elts a a1)
                            (t2tb8 r))
                          (t2tb8 c))))))

;; elts_eq
(assert
  (forall ((a ty))
    (forall ((a1 uni) (b uni)) (=> (= a1 b) (= (elts a a1) (elts a b))))))

;; elts_inst_eq
(assert
  (forall ((a (matrix Int)) (b (matrix Int)) (i Int) (j Int))
    (=>
      (= a b)
      (=>
        (and (<= 0 i) (< i (rows int (t2tb64 a))))
        (=>
          (and (<= 0 j) (< j (columns int (t2tb64 a))))
          (= (select (tb2t7
                       (infix_at
                         (infix_mngt int int)
                         int
                         (elts int (t2tb64 a))
                         (t2tb8 i))) j) (select (tb2t7
                                                  (infix_at
                                                    (infix_mngt int int)
                                                    int
                                                    (elts int (t2tb64 b))
                                                    (t2tb8 i))) j)))))))

;; elts_inst_eq
(assert
  (forall ((a ty))
    (forall ((a1 uni) (b uni) (i Int) (j Int))
      (=>
        (= a1 b)
        (=>
          (and (<= 0 i) (< i (rows a a1)))
          (=>
            (and (<= 0 j) (< j (columns a a1)))
            (= (infix_at
                 a
                 int
                 (infix_at (infix_mngt int a) int (elts a a1) (t2tb8 i))
                 (t2tb8 j)) (infix_at
                              a
                              int
                              (infix_at
                                (infix_mngt int a)
                                int
                                (elts a b)
                                (t2tb8 i))
                              (t2tb8 j)))))))))

;; make
(declare-fun make (ty
  Int
  Int
  uni) uni)

;; make_sort
(assert
  (forall ((a ty))
    (forall ((x Int) (x1 Int) (x2 uni)) (sort (matrix1 a) (make a x x1 x2)))))

;; make'spec
(assert
  (forall ((a ty))
    (forall ((r Int) (c Int) (v uni))
      (=>
        (sort a v)
        (=>
          (and (< 0 r) (< 0 c))
          (and
            (= (rows a (make a r c v)) r)
            (and
              (= (columns a (make a r c v)) c)
              (forall ((i Int) (j Int))
                (=>
                  (and (and (<= 0 i) (< i r)) (and (<= 0 j) (< j c)))
                  (= (get a (make a r c v) i j) v))))))))))

;; equality
(assert
  (forall ((a ty))
    (forall ((m uni) (n uni))
      (=>
        (sort (matrix1 a) m)
        (=>
          (sort (matrix1 a) n)
          (=
            (= m n)
            (and
              (and (= (rows a m) (rows a n)) (= (columns a m) (columns a n)))
              (forall ((i Int) (j Int))
                (=> (valid_index a m i j) (= (get a m i j) (get a n i j)))))))))))

;; make_value
(assert
  (forall ((a ty))
    (forall ((r Int) (c Int) (i Int) (j Int) (v uni))
      (=>
        (sort a v)
        (=>
          (and (< 0 r) (< 0 c))
          (=>
            (and (<= 0 i) (< i r))
            (=> (and (<= 0 j) (< j c)) (= (get a (make a r c v) i j) v))))))))

;; mat_indices
(declare-fun mat_indices (ty
  uni) (set (tuple2 Int
  Int)))

;; mat_indices'def
(assert
  (forall ((a ty))
    (forall ((m uni))
      (= (mat_indices a m) (tb2t54
                             (cartesian_product
                               int
                               int
                               (t2tb16 (to_fset 0 (rows a m)))
                               (t2tb16 (to_fset 0 (columns a m)))))))))

;; mat_indices'spec
(assert
  (forall ((a ty))
    (forall ((m uni))
      (and
        (forall ((o (tuple2 Int Int)))
          (=>
            (mem (tuple21 int int) (t2tb53 o) (t2tb54 (mat_indices a m)))
            (and
              (<= 0 (tb2t8 (fir int int (t2tb53 o))))
              (< (tb2t8 (fir int int (t2tb53 o))) (rows a m)))))
        (and
          (forall ((o (tuple2 Int Int)))
            (=>
              (mem (tuple21 int int) (t2tb53 o) (t2tb54 (mat_indices a m)))
              (and
                (<= 0 (tb2t8 (sec1 int int (t2tb53 o))))
                (< (tb2t8 (sec1 int int (t2tb53 o))) (columns a m)))))
          (and
            (forall ((o (tuple2 Int Int)))
              (=>
                (and
                  (<= 0 (tb2t8 (fir int int (t2tb53 o))))
                  (< (tb2t8 (fir int int (t2tb53 o))) (rows a m)))
                (=>
                  (and
                    (<= 0 (tb2t8 (sec1 int int (t2tb53 o))))
                    (< (tb2t8 (sec1 int int (t2tb53 o))) (columns a m)))
                  (mem
                    (tuple21 int int)
                    (t2tb53 o)
                    (t2tb54 (mat_indices a m))))))
            (forall ((i Int) (j Int))
              (=
                (valid_index a m i j)
                (mem
                  (tuple21 int int)
                  (Tuple2 int int (t2tb8 i) (t2tb8 j))
                  (t2tb54 (mat_indices a m)))))))))))

;; set
(declare-fun set2 (ty
  uni
  Int
  Int
  uni) uni)

;; set_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 Int) (x2 Int) (x3 uni))
      (sort (matrix1 a) (set2 a x x1 x2 x3)))))

;; set'spec
(assert
  (forall ((a ty))
    (forall ((a1 uni) (r Int) (c Int) (v uni))
      (=>
        (sort a v)
        (=>
          (valid_index a a1 r c)
          (and
            (= (rows a (set2 a a1 r c v)) (rows a a1))
            (and
              (= (columns a (set2 a a1 r c v)) (columns a a1))
              (and
                (forall ((i Int) (j Int))
                  (=>
                    (valid_index a a1 i j)
                    (= (get a (set2 a a1 r c v) i j) (ite (and
                                                            (= i r)
                                                            (= j c))
                                                       v
                                                       (get a a1 i j)))))
                (and
                  (= (get a (set2 a a1 r c v) r c) v)
                  (and
                    (forall ((i Int) (j Int))
                      (=>
                        (valid_index a (set2 a a1 r c v) i j)
                        (=>
                          (not (= i r))
                          (= (get a (set2 a a1 r c v) i j) (get a a1 i j)))))
                    (forall ((i Int) (j Int))
                      (=>
                        (valid_index a (set2 a a1 r c v) i j)
                        (=>
                          (not (= j c))
                          (= (get a (set2 a a1 r c v) i j) (get a a1 i j)))))))))))))))

;; set_valid_index
(assert
  (forall ((a ty))
    (forall ((a1 uni) (i Int) (j Int))
      (=>
        (and (<= 0 i) (< i (rows a a1)))
        (=> (and (<= 0 j) (< j (columns a a1))) (valid_index a a1 i j))))))

;; get_valid_index
(assert
  (forall ((a ty))
    (forall ((a1 uni) (r Int) (c Int))
      (=>
        (= (rows a a1) r)
        (=>
          (= (columns a a1) c)
          (and
            (forall ((i Int) (j Int))
              (=> (valid_index a a1 i j) (and (<= 0 i) (< i r))))
            (forall ((i Int) (j Int))
              (=> (valid_index a a1 i j) (and (<= 0 j) (< j c))))))))))

;; get_valid_index_params
(assert
  (forall ((a ty))
    (forall ((a1 uni) (r Int) (c Int) (i Int) (j Int))
      (=>
        (= (rows a a1) r)
        (=>
          (= (columns a a1) c)
          (=>
            (valid_index a a1 i j)
            (and (and (<= 0 i) (< i r)) (and (<= 0 j) (< j c)))))))))

;; set_values
(assert
  (forall ((a ty))
    (forall ((a1 uni) (r Int) (c Int) (v uni))
      (=>
        (sort a v)
        (=>
          (valid_index a a1 r c)
          (forall ((i Int) (j Int))
            (=>
              (valid_index a a1 i j)
              (= (get a (set2 a a1 r c v) i j) (ite (and (= i r) (= j c))
                                                 v
                                                 (get a a1 i j))))))))))

;; set_rows
(assert
  (forall ((a ty))
    (forall ((a1 uni) (r Int) (c Int) (v uni))
      (=> (valid_index a a1 r c) (= (rows a (set2 a a1 r c v)) (rows a a1))))))

;; set_columns
(assert
  (forall ((a ty))
    (forall ((a1 uni) (r Int) (c Int) (v uni))
      (=>
        (valid_index a a1 r c)
        (= (columns a (set2 a a1 r c v)) (columns a a1))))))

;; make_func
(declare-fun make_func (ty
  Int
  Int
  uni) uni)

;; make_func_sort
(assert
  (forall ((a ty))
    (forall ((x Int) (x1 Int) (x2 uni))
      (sort (matrix1 a) (make_func a x x1 x2)))))

;; make_func'spec
(assert
  (forall ((r Int) (c Int) (f (Array Int (Array Int Int))))
    (=>
      (< 0 r)
      (=>
        (< 0 c)
        (and
          (= (tb2t9 (elts int (make_func int r c (t2tb9 f)))) f)
          (and
            (= (rows int (make_func int r c (t2tb9 f))) r)
            (and
              (= (columns int (make_func int r c (t2tb9 f))) c)
              (forall ((i Int) (j Int))
                (= (tb2t8 (get int (make_func int r c (t2tb9 f)) i j)) (select 
                (tb2t7
                  (infix_at (infix_mngt int int) int (t2tb9 f) (t2tb8 i))) j))))))))))

;; make_func'spec
(assert
  (forall ((a ty))
    (forall ((r Int) (c Int) (f uni))
      (=>
        (sort (infix_mngt int (infix_mngt int a)) f)
        (=>
          (< 0 r)
          (=>
            (< 0 c)
            (and
              (= (elts a (make_func a r c f)) f)
              (and
                (= (rows a (make_func a r c f)) r)
                (and
                  (= (columns a (make_func a r c f)) c)
                  (forall ((i Int) (j Int))
                    (= (get a (make_func a r c f) i j) (infix_at
                                                         a
                                                         int
                                                         (infix_at
                                                           (infix_mngt int a)
                                                           int
                                                           f
                                                           (t2tb8 i))
                                                         (t2tb8 j)))))))))))))

;; make_f
(declare-fun make_f (ty
  Int
  Int
  uni) uni)

;; make_f_sort
(assert
  (forall ((a ty))
    (forall ((x Int) (x1 Int) (x2 uni))
      (sort (matrix1 a) (make_f a x x1 x2)))))

;; make_f'def
(assert
  (forall ((a ty))
    (forall ((r Int) (c Int) (f uni))
      (=> (< 0 r) (=> (< 0 c) (= (make_f a r c f) (make_func a r c f)))))))

;; make_f'spec
(assert
  (forall ((r Int) (c Int) (f (Array Int (Array Int Int))))
    (=>
      (< 0 r)
      (=>
        (< 0 c)
        (and
          (= (rows int (make_f int r c (t2tb9 f))) r)
          (and
            (= (columns int (make_f int r c (t2tb9 f))) c)
            (forall ((i Int) (j Int))
              (= (tb2t8 (get int (make_f int r c (t2tb9 f)) i j)) (select 
              (tb2t7
                (infix_at (infix_mngt int int) int (t2tb9 f) (t2tb8 i))) j)))))))))

;; make_f'spec
(assert
  (forall ((a ty))
    (forall ((r Int) (c Int) (f uni))
      (=>
        (< 0 r)
        (=>
          (< 0 c)
          (and
            (= (rows a (make_f a r c f)) r)
            (and
              (= (columns a (make_f a r c f)) c)
              (forall ((i Int) (j Int))
                (= (get a (make_f a r c f) i j) (infix_at
                                                  a
                                                  int
                                                  (infix_at
                                                    (infix_mngt int a)
                                                    int
                                                    f
                                                    (t2tb8 i))
                                                  (t2tb8 j)))))))))))

;; assert_make
(assert
  (forall ((r Int) (c Int) (f (Array Int (Array Int Int))) (i Int) (j Int))
    (=>
      (and (<= 0 i) (< i r))
      (=>
        (and (<= 0 j) (< j c))
        (= (tb2t8 (get int (make_f int r c (t2tb9 f)) i j)) (select (tb2t7
                                                                    (infix_at
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    int
                                                                    (t2tb9 f)
                                                                    (t2tb8 i))) j))))))

;; assert_make
(assert
  (forall ((a ty))
    (forall ((r Int) (c Int) (f uni) (i Int) (j Int))
      (=>
        (and (<= 0 i) (< i r))
        (=>
          (and (<= 0 j) (< j c))
          (= (get a (make_f a r c f) i j) (infix_at
                                            a
                                            int
                                            (infix_at
                                              (infix_mngt int a)
                                              int
                                              f
                                              (t2tb8 i))
                                            (t2tb8 j))))))))

;; assert_make_r
(assert
  (forall ((a ty))
    (forall ((r Int) (c Int) (f uni))
      (=> (< 0 r) (=> (< 0 c) (= (rows a (make_f a r c f)) r))))))

;; assert_make_c
(assert
  (forall ((a ty))
    (forall ((r Int) (c Int) (f uni))
      (=> (< 0 r) (=> (< 0 c) (= (columns a (make_f a r c f)) c))))))

;; to_indexes
(declare-fun to_indexes (ty
  uni) (set (tuple2 Int
  Int)))

;; to_indexes'def
(assert
  (forall ((a ty))
    (forall ((m uni))
      (= (to_indexes a m) (tb2t54
                            (cartesian_product
                              int
                              int
                              (t2tb16 (to_fset 0 (rows a m)))
                              (t2tb16 (to_fset 0 (columns a m)))))))))

;; to_indexes'spec
(assert
  (forall ((a ty))
    (forall ((m uni))
      (= (cardinal (tuple21 int int) (t2tb54 (to_indexes a m))) (* (rows a m) 
      (columns
        a
        m))))))

;; set_to_indexes_mem
(assert
  (forall ((a ty))
    (forall ((m uni) (i Int) (j Int))
      (=>
        (and (<= 0 i) (< i (rows a m)))
        (=>
          (and (<= 0 j) (< j (columns a m)))
          (mem
            (tuple21 int int)
            (Tuple2 int int (t2tb8 i) (t2tb8 j))
            (t2tb54 (to_indexes a m))))))))

;; get_to_indexes_mem
(assert
  (forall ((a ty))
    (forall ((m uni) (o (tuple2 Int Int)))
      (=>
        (mem (tuple21 int int) (t2tb53 o) (t2tb54 (to_indexes a m)))
        (and
          (and
            (<= 0 (tb2t8 (fir int int (t2tb53 o))))
            (< (tb2t8 (fir int int (t2tb53 o))) (rows a m)))
          (and
            (<= 0 (tb2t8 (sec1 int int (t2tb53 o))))
            (< (tb2t8 (sec1 int int (t2tb53 o))) (columns a m))))))))

;; mat_equality
(assert
  (forall ((a ty))
    (forall ((m uni) (n uni))
      (=>
        (= (rows a m) (rows a n))
        (=>
          (= (columns a m) (columns a n))
          (=>
            (forall ((i Int) (j Int))
              (=> (valid_index a m i j) (= (get a m i j) (get a n i j))))
            (infix_eqeq (matrix1 a) m n)))))))

;; square
(declare-fun square (ty
  uni) Bool)

;; square'def
(assert
  (forall ((a ty))
    (forall ((m uni)) (= (square a m) (= (rows a m) (columns a m))))))

;; equal_sym
(assert
  (forall ((a ty))
    (forall ((m uni) (n uni))
      (= (infix_eqeq (matrix1 a) m n) (infix_eqeq (matrix1 a) n m)))))

;; equal_rex
(assert (forall ((a ty)) (forall ((m uni)) (infix_eqeq (matrix1 a) m m))))

;; equal_trans
(assert
  (forall ((a ty))
    (forall ((m uni) (n uni) (o uni))
      (=>
        (infix_eqeq (matrix1 a) m n)
        (=> (infix_eqeq (matrix1 a) n o) (infix_eqeq (matrix1 a) m o))))))

;; set_equal_mat
(assert
  (forall ((a ty))
    (forall ((m uni) (n uni))
      (=>
        (sort (matrix1 a) m)
        (=>
          (sort (matrix1 a) n)
          (=>
            (= (rows a m) (rows a n))
            (=>
              (= (columns a m) (columns a n))
              (=>
                (forall ((i Int) (j Int))
                  (=> (valid_index a m i j) (= (get a m i j) (get a n i j))))
                (= m n)))))))))

;; set_equal_mat_make
(assert
  (forall ((r Int) (c Int) (f (Array Int (Array Int Int))) (g (Array Int (Array Int Int))))
    (=>
      (< 0 r)
      (=>
        (< 0 c)
        (=>
          (forall ((i Int) (j Int))
            (=>
              (and (<= 0 i) (< i r))
              (=>
                (and (<= 0 j) (< j c))
                (= (select (tb2t7
                             (infix_at
                               (infix_mngt int int)
                               int
                               (t2tb9 f)
                               (t2tb8 i))) j) (select (tb2t7
                                                        (infix_at
                                                          (infix_mngt
                                                            int
                                                            int)
                                                          int
                                                          (t2tb9 g)
                                                          (t2tb8 i))) j)))))
          (= (tb2t64 (make_f int r c (t2tb9 f))) (tb2t64
                                                   (make_f int r c (t2tb9 g)))))))))

;; set_equal_mat_make
(assert
  (forall ((a ty))
    (forall ((r Int) (c Int) (f uni) (g uni))
      (=>
        (< 0 r)
        (=>
          (< 0 c)
          (=>
            (forall ((i Int) (j Int))
              (=>
                (and (<= 0 i) (< i r))
                (=>
                  (and (<= 0 j) (< j c))
                  (= (infix_at
                       a
                       int
                       (infix_at (infix_mngt int a) int f (t2tb8 i))
                       (t2tb8 j)) (infix_at
                                    a
                                    int
                                    (infix_at
                                      (infix_mngt int a)
                                      int
                                      g
                                      (t2tb8 i))
                                    (t2tb8 j))))))
            (= (make_f a r c f) (make_f a r c g))))))))

;; set_equal_mat_make_t
(assert
  (forall ((r Int) (rqt Int) (c Int) (cqt Int) (f (Array Int (Array Int Int))) (g (Array Int (Array Int Int))))
    (=>
      (< 0 r)
      (=>
        (< 0 c)
        (=>
          (= r rqt)
          (=>
            (= c cqt)
            (=>
              (forall ((i Int) (j Int))
                (=>
                  (and (<= 0 i) (< i r))
                  (=>
                    (and (<= 0 j) (< j c))
                    (= (select (tb2t7
                                 (infix_at
                                   (infix_mngt int int)
                                   int
                                   (t2tb9 f)
                                   (t2tb8 i))) j) (select (tb2t7
                                                            (infix_at
                                                              (infix_mngt
                                                                int
                                                                int)
                                                              int
                                                              (t2tb9 g)
                                                              (t2tb8 i))) j)))))
              (= (tb2t64 (make_f int r c (t2tb9 f))) (tb2t64
                                                       (make_f
                                                         int
                                                         rqt
                                                         cqt
                                                         (t2tb9 g)))))))))))

;; set_equal_mat_make_t
(assert
  (forall ((a ty))
    (forall ((r Int) (rqt Int) (c Int) (cqt Int) (f uni) (g uni))
      (=>
        (< 0 r)
        (=>
          (< 0 c)
          (=>
            (= r rqt)
            (=>
              (= c cqt)
              (=>
                (forall ((i Int) (j Int))
                  (=>
                    (and (<= 0 i) (< i r))
                    (=>
                      (and (<= 0 j) (< j c))
                      (= (infix_at
                           a
                           int
                           (infix_at (infix_mngt int a) int f (t2tb8 i))
                           (t2tb8 j)) (infix_at
                                        a
                                        int
                                        (infix_at
                                          (infix_mngt int a)
                                          int
                                          g
                                          (t2tb8 i))
                                        (t2tb8 j))))))
                (= (make_f a r c f) (make_f a rqt cqt g))))))))))

;; get_equal_mat
(assert
  (forall ((a ty))
    (forall ((m uni) (n uni))
      (=>
        (= m n)
        (and
          (= (rows a m) (rows a n))
          (and
            (= (columns a m) (columns a n))
            (forall ((i Int) (j Int))
              (=> (valid_index a m i j) (= (get a m i j) (get a n i j))))))))))

;; equal_functions
(assert
  (forall ((r Int) (c Int) (f (Array Int (Array Int Int))) (g (Array Int (Array Int Int))))
    (=>
      (< 0 r)
      (=>
        (< 0 c)
        (=>
          (forall ((i Int) (j Int))
            (=>
              (and (and (<= 0 i) (< i r)) (and (<= 0 j) (< j c)))
              (= (select (tb2t7
                           (infix_at
                             (infix_mngt int int)
                             int
                             (t2tb9 f)
                             (t2tb8 i))) j) (select (tb2t7
                                                      (infix_at
                                                        (infix_mngt int int)
                                                        int
                                                        (t2tb9 g)
                                                        (t2tb8 i))) j))))
          (= (tb2t64 (make_f int r c (t2tb9 f))) (tb2t64
                                                   (make_f int r c (t2tb9 g)))))))))

;; equal_functions
(assert
  (forall ((a ty))
    (forall ((r Int) (c Int) (f uni) (g uni))
      (=>
        (< 0 r)
        (=>
          (< 0 c)
          (=>
            (forall ((i Int) (j Int))
              (=>
                (and (and (<= 0 i) (< i r)) (and (<= 0 j) (< j c)))
                (= (infix_at
                     a
                     int
                     (infix_at (infix_mngt int a) int f (t2tb8 i))
                     (t2tb8 j)) (infix_at
                                  a
                                  int
                                  (infix_at
                                    (infix_mngt int a)
                                    int
                                    g
                                    (t2tb8 i))
                                  (t2tb8 j)))))
            (= (make_f a r c f) (make_f a r c g))))))))

;; equal_functions_mat
(assert
  (forall ((f (Array Int (Array Int Int))) (m (matrix Int)))
    (=>
      (forall ((i Int) (j Int))
        (=>
          (and
            (and (<= 0 i) (< i (rows int (t2tb64 m))))
            (and (<= 0 j) (< j (columns int (t2tb64 m)))))
          (= (select (tb2t7
                       (infix_at
                         (infix_mngt int int)
                         int
                         (t2tb9 f)
                         (t2tb8 i))) j) (tb2t8 (get int (t2tb64 m) i j)))))
      (= m (tb2t64
             (make_f
               int
               (rows int (t2tb64 m))
               (columns int (t2tb64 m))
               (t2tb9 f)))))))

;; equal_functions_mat
(assert
  (forall ((a ty))
    (forall ((f uni) (m uni))
      (=>
        (sort (matrix1 a) m)
        (=>
          (forall ((i Int) (j Int))
            (=>
              (and
                (and (<= 0 i) (< i (rows a m)))
                (and (<= 0 j) (< j (columns a m))))
              (= (infix_at
                   a
                   int
                   (infix_at (infix_mngt int a) int f (t2tb8 i))
                   (t2tb8 j)) (get a m i j))))
          (= m (make_f a (rows a m) (columns a m) f)))))))

;; null_mat
(declare-fun null_mat ((matrix complex)) Bool)

;; t2tb
(declare-fun t2tb65 ((matrix complex)) uni)

;; t2tb_sort
(assert (forall ((x (matrix complex))) (sort (matrix1 complex1) (t2tb65 x))))

;; tb2t
(declare-fun tb2t65 (uni) (matrix complex))

;; BridgeL
(assert
  (forall ((i (matrix complex)))
    (! (= (tb2t65 (t2tb65 i)) i) :pattern ((t2tb65 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=> (sort (matrix1 complex1) j) (= (t2tb65 (tb2t65 j)) j)) :pattern (
    (t2tb65
      (tb2t65 j))) )))

;; null_mat'def
(assert
  (forall ((a (matrix complex)))
    (=
      (null_mat a)
      (forall ((i Int) (j Int))
        (=>
          (valid_index complex1 (t2tb65 a) i j)
          (= (tb2t (get complex1 (t2tb65 a) i j)) c_zero))))))

;; set_null_mat
(assert
  (forall ((a (matrix complex)))
    (=>
      (forall ((i Int) (j Int))
        (=>
          (valid_index complex1 (t2tb65 a) i j)
          (= (tb2t (get complex1 (t2tb65 a) i j)) c_zero)))
      (null_mat a))))

;; get_null_mat
(assert
  (forall ((a (matrix complex)))
    (=>
      (null_mat a)
      (forall ((i Int) (j Int))
        (=>
          (valid_index complex1 (t2tb65 a) i j)
          (= (tb2t (get complex1 (t2tb65 a) i j)) c_zero))))))

;; identity
(declare-fun identity (Int) (matrix complex))

;; result
(declare-fun result6 () (Array Int (Array Int complex)))

;; result'def
(assert
  (forall ((i Int) (j Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             int
             (t2tb61 result6)
             (t2tb8 i))
           (t2tb8 j))) (ite (= i j) c_one c_zero))))

;; identity'def
(assert
  (forall ((n Int))
    (=>
      (<= 0 n)
      (= (identity n) (tb2t65
                        (make_f
                          complex1
                          (power 2 n)
                          (power 2 n)
                          (t2tb61 result6)))))))

;; identity'spec
(assert
  (forall ((n Int))
    (=>
      (<= 0 n)
      (and
        (= (rows complex1 (t2tb65 (identity n))) (power 2 n))
        (and
          (= (columns complex1 (t2tb65 (identity n))) (power 2 n))
          (forall ((i Int) (j Int))
            (=>
              (valid_index complex1 (t2tb65 (identity n)) i j)
              (= (tb2t (get complex1 (t2tb65 (identity n)) i j)) (ite (= i j)
                                                                   c_one
                                                                   c_zero)))))))))

;; identity_rows
(assert
  (forall ((n Int))
    (=> (<= 0 n) (= (rows complex1 (t2tb65 (identity n))) (power 2 n)))))

;; identity_columns
(assert
  (forall ((n Int))
    (=> (<= 0 n) (= (columns complex1 (t2tb65 (identity n))) (power 2 n)))))

;; identity_values
(assert
  (forall ((i Int) (j Int) (n Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (=>
          (and (<= 0 j) (< j (power 2 n)))
          (= (tb2t (get complex1 (t2tb65 (identity n)) i j)) (ite (= i j)
                                                               c_one
                                                               c_zero)))))))

;; kronecker
(declare-fun kronecker ((matrix complex)
  (matrix complex)) (matrix complex))

;; result
(declare-fun result7 ((matrix complex)
  (matrix complex)) (Array Int (Array Int complex)))

;; result'def
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             int
             (t2tb61 (result7 m n))
             (t2tb8 i))
           (t2tb8 j))) (infix_asdt
                         (tb2t
                           (get
                             complex1
                             (t2tb65 m)
                             (div i (rows complex1 (t2tb65 n)))
                             (div j (columns complex1 (t2tb65 n)))))
                         (tb2t
                           (get
                             complex1
                             (t2tb65 n)
                             (mod i (rows complex1 (t2tb65 n)))
                             (mod j (columns complex1 (t2tb65 n)))))))))

;; kronecker'def
(assert
  (forall ((m (matrix complex)) (n (matrix complex)))
    (= (kronecker m n) (tb2t65
                         (make_f
                           complex1
                           (* (rows complex1 (t2tb65 m)) (rows
                                                           complex1
                                                           (t2tb65 n)))
                           (* (columns complex1 (t2tb65 m)) (columns
                                                              complex1
                                                              (t2tb65 n)))
                           (t2tb61 (result7 m n)))))))

;; kronecker'spec
(assert
  (forall ((m (matrix complex)) (n (matrix complex)))
    (and
      (= (rows complex1 (t2tb65 (kronecker m n))) (* (rows
                                                       complex1
                                                       (t2tb65 m)) (rows
                                                                    complex1
                                                                    (t2tb65
                                                                    n))))
      (and
        (= (columns complex1 (t2tb65 (kronecker m n))) (* (columns
                                                            complex1
                                                            (t2tb65 m)) 
        (columns
          complex1
          (t2tb65 n))))
        (forall ((i Int) (j Int))
          (=>
            (valid_index complex1 (t2tb65 (kronecker m n)) i j)
            (= (tb2t (get complex1 (t2tb65 (kronecker m n)) i j)) (infix_asdt
                                                                    (tb2t
                                                                    (get
                                                                    complex1
                                                                    (t2tb65
                                                                    m)
                                                                    (div i 
                                                                    (rows
                                                                    complex1
                                                                    (t2tb65
                                                                    n)))
                                                                    (div j 
                                                                    (columns
                                                                    complex1
                                                                    (t2tb65
                                                                    n)))))
                                                                    (tb2t
                                                                    (get
                                                                    complex1
                                                                    (t2tb65
                                                                    n)
                                                                    (mod i 
                                                                    (rows
                                                                    complex1
                                                                    (t2tb65
                                                                    n)))
                                                                    (mod j 
                                                                    (columns
                                                                    complex1
                                                                    (t2tb65
                                                                    n)))))))))))))

;; kronecker_eq
(assert
  (forall ((m1 (matrix complex)) (n1 (matrix complex)) (m2 (matrix complex)) (n2 (matrix complex)))
    (=> (= m1 m2) (=> (= n1 n2) (= (kronecker m1 n1) (kronecker m2 n2))))))

;; fc
(declare-fun fc107 ((matrix complex)
  (matrix complex)) (Array Int (Array Int complex)))

;; fc'def
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             int
             (t2tb61 (fc107 m n))
             (t2tb8 i))
           (t2tb8 j))) (infix_asdt
                         (tb2t
                           (get
                             complex1
                             (t2tb65 m)
                             (div i (rows complex1 (t2tb65 n)))
                             (div j (columns complex1 (t2tb65 n)))))
                         (tb2t
                           (get
                             complex1
                             (t2tb65 n)
                             (mod i (rows complex1 (t2tb65 n)))
                             (mod j (columns complex1 (t2tb65 n)))))))))

;; get_kronecker
(assert
  (forall ((m (matrix complex)) (n (matrix complex)))
    (= (kronecker m n) (tb2t65
                         (make_f
                           complex1
                           (* (rows complex1 (t2tb65 m)) (rows
                                                           complex1
                                                           (t2tb65 n)))
                           (* (columns complex1 (t2tb65 m)) (columns
                                                              complex1
                                                              (t2tb65 n)))
                           (t2tb61 (fc107 m n)))))))

;; kronecker_values
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int))
    (=>
      (valid_index complex1 (t2tb65 (kronecker m n)) i j)
      (= (tb2t (get complex1 (t2tb65 (kronecker m n)) i j)) (infix_asdt
                                                              (tb2t
                                                                (get
                                                                  complex1
                                                                  (t2tb65 m)
                                                                  (div i 
                                                                  (rows
                                                                    complex1
                                                                    (t2tb65
                                                                    n)))
                                                                  (div j 
                                                                  (columns
                                                                    complex1
                                                                    (t2tb65
                                                                    n)))))
                                                              (tb2t
                                                                (get
                                                                  complex1
                                                                  (t2tb65 n)
                                                                  (mod i 
                                                                  (rows
                                                                    complex1
                                                                    (t2tb65
                                                                    n)))
                                                                  (mod j 
                                                                  (columns
                                                                    complex1
                                                                    (t2tb65
                                                                    n))))))))))

;; kronecker_rows
(assert
  (forall ((m (matrix complex)) (n (matrix complex)))
    (= (rows complex1 (t2tb65 (kronecker m n))) (* (rows complex1 (t2tb65 m)) 
    (rows
      complex1
      (t2tb65 n))))))

;; kronecker_columns
(assert
  (forall ((m (matrix complex)) (n (matrix complex)))
    (= (columns complex1 (t2tb65 (kronecker m n))) (* (columns
                                                        complex1
                                                        (t2tb65 m)) (columns
                                                                    complex1
                                                                    (t2tb65
                                                                    n))))))

;; kronecker_values_gen
(assert
  (forall ((m (matrix complex)) (n (matrix complex)))
    (forall ((i Int) (j Int))
      (=>
        (valid_index complex1 (t2tb65 (kronecker m n)) i j)
        (= (tb2t (get complex1 (t2tb65 (kronecker m n)) i j)) (infix_asdt
                                                                (tb2t
                                                                  (get
                                                                    complex1
                                                                    (t2tb65
                                                                    m)
                                                                    (div i 
                                                                    (rows
                                                                    complex1
                                                                    (t2tb65
                                                                    n)))
                                                                    (div j 
                                                                    (columns
                                                                    complex1
                                                                    (t2tb65
                                                                    n)))))
                                                                (tb2t
                                                                  (get
                                                                    complex1
                                                                    (t2tb65
                                                                    n)
                                                                    (mod i 
                                                                    (rows
                                                                    complex1
                                                                    (t2tb65
                                                                    n)))
                                                                    (mod j 
                                                                    (columns
                                                                    complex1
                                                                    (t2tb65
                                                                    n)))))))))))

;; kronecker_mod_values
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int))
    (=>
      (valid_index complex1 (t2tb65 (kronecker m n)) i j)
      (= (tb2t (get complex1 (t2tb65 (kronecker m n)) i j)) (infix_asdt
                                                              (tb2t
                                                                (get
                                                                  complex1
                                                                  (t2tb65 m)
                                                                  (div (mod i 
                                                                  (rows
                                                                    complex1
                                                                    (t2tb65
                                                                    (kronecker
                                                                    m
                                                                    n)))) 
                                                                  (rows
                                                                    complex1
                                                                    (t2tb65
                                                                    n)))
                                                                  (div (mod j 
                                                                  (columns
                                                                    complex1
                                                                    (t2tb65
                                                                    (kronecker
                                                                    m
                                                                    n)))) 
                                                                  (columns
                                                                    complex1
                                                                    (t2tb65
                                                                    n)))))
                                                              (tb2t
                                                                (get
                                                                  complex1
                                                                  (t2tb65 n)
                                                                  (mod (mod i 
                                                                  (rows
                                                                    complex1
                                                                    (t2tb65
                                                                    (kronecker
                                                                    m
                                                                    n)))) 
                                                                  (rows
                                                                    complex1
                                                                    (t2tb65
                                                                    n)))
                                                                  (mod (mod j 
                                                                  (columns
                                                                    complex1
                                                                    (t2tb65
                                                                    (kronecker
                                                                    m
                                                                    n)))) 
                                                                  (columns
                                                                    complex1
                                                                    (t2tb65
                                                                    n))))))))))

;; kronecker_indexes
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int) (k Int) (l Int))
    (=>
      (valid_index complex1 (t2tb65 m) i j)
      (=>
        (valid_index complex1 (t2tb65 n) k l)
        (valid_index
          complex1
          (t2tb65 (kronecker m n))
          (+ (* i (rows complex1 (t2tb65 n))) k)
          (+ (* j (columns complex1 (t2tb65 n))) l))))))

;; kronecker_indexes_com
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int))
    (=>
      (valid_index complex1 (t2tb65 (kronecker m n)) i j)
      (and
        (valid_index
          complex1
          (t2tb65 m)
          (div i (rows complex1 (t2tb65 n)))
          (div j (columns complex1 (t2tb65 n))))
        (valid_index
          complex1
          (t2tb65 n)
          (mod i (rows complex1 (t2tb65 n)))
          (mod j (columns complex1 (t2tb65 n))))))))

;; kronecker_assoc_pre
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (o (matrix complex)) (i Int) (j Int))
    (=>
      (and
        (<= 0 i)
        (< i (* (* (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n))) 
        (rows
          complex1
          (t2tb65 o)))))
      (=>
        (and
          (<= 0 j)
          (< j (* (* (columns complex1 (t2tb65 m)) (columns
                                                     complex1
                                                     (t2tb65 n))) (columns
                                                                    complex1
                                                                    (t2tb65
                                                                    o)))))
        (= (tb2t (get complex1 (t2tb65 (kronecker (kronecker m n) o)) i j)) 
        (tb2t
          (get complex1 (t2tb65 (kronecker m (kronecker n o))) i j)))))))

;; kronecker_closure
(declare-fun kronecker_closure () (Array (matrix complex) (Array (matrix complex) (matrix complex))))

;; t2tb
(declare-fun t2tb66 ((Array (matrix complex) (matrix complex))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (matrix complex) (matrix complex))))
    (sort (infix_mngt (matrix1 complex1) (matrix1 complex1)) (t2tb66 x))))

;; tb2t
(declare-fun tb2t66 (uni) (Array (matrix complex) (matrix complex)))

;; BridgeL
(assert
  (forall ((i (Array (matrix complex) (matrix complex))))
    (! (= (tb2t66 (t2tb66 i)) i) :pattern ((t2tb66 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort (infix_mngt (matrix1 complex1) (matrix1 complex1)) j)
         (= (t2tb66 (tb2t66 j)) j)) :pattern ((t2tb66 (tb2t66 j))) )))

;; t2tb
(declare-fun t2tb67 ((Array (matrix complex) (Array (matrix complex) (matrix complex)))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (matrix complex) (Array (matrix complex) (matrix complex)))))
    (sort
      (infix_mngt
        (matrix1 complex1)
        (infix_mngt (matrix1 complex1) (matrix1 complex1)))
      (t2tb67 x))))

;; tb2t
(declare-fun tb2t67 (uni) (Array (matrix complex) (Array (matrix complex) (matrix complex))))

;; BridgeL
(assert
  (forall ((i (Array (matrix complex) (Array (matrix complex) (matrix complex)))))
    (! (= (tb2t67 (t2tb67 i)) i) :pattern ((t2tb67 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort
           (infix_mngt
             (matrix1 complex1)
             (infix_mngt (matrix1 complex1) (matrix1 complex1)))
           j)
         (= (t2tb67 (tb2t67 j)) j)) :pattern ((t2tb67 (tb2t67 j))) )))

;; kronecker_closure_def
(assert
  (forall ((y (matrix complex)) (y1 (matrix complex)))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           (matrix1 complex1)
           (infix_at
             (infix_mngt (matrix1 complex1) (matrix1 complex1))
             (matrix1 complex1)
             (t2tb67 kronecker_closure)
             (t2tb65 y))
           (t2tb65 y1))) (kronecker y y1))))

;; kronecker_assoc
(assert (op_assoc (matrix1 complex1) (t2tb67 kronecker_closure)))

;; kronecker_assoc_use
(assert
  (forall ((a (matrix complex)) (b (matrix complex)) (c (matrix complex)))
    (= (kronecker a (kronecker b c)) (kronecker (kronecker a b) c))))

;; kronecker_assoc_use_rev
(assert
  (forall ((a (matrix complex)) (b (matrix complex)) (c (matrix complex)))
    (= (kronecker (kronecker a b) c) (kronecker a (kronecker b c)))))

;; neutral_
(assert
  (forall ((m (matrix complex)))
    (and
      (= (kronecker m (tb2t65 (make complex1 1 1 (t2tb c_one)))) m)
      (= (kronecker (tb2t65 (make complex1 1 1 (t2tb c_one))) m) m))))

;; neutral
(assert
  (and
    (= (tb2t65 (make complex1 1 1 (t2tb c_one))) (tb2t65
                                                   (neutral_elt
                                                     (matrix1 complex1)
                                                     (t2tb67
                                                       kronecker_closure))))
    (and
      (has_neutral (matrix1 complex1) (t2tb67 kronecker_closure))
      (iterable (matrix1 complex1) (t2tb67 kronecker_closure)))))

;; kronecker_equal
(assert
  (forall ((m (matrix complex)) (ml (matrix complex)) (n (matrix complex)) (nl (matrix complex)))
    (=>
      (infix_eqeq (matrix1 complex1) (t2tb65 m) (t2tb65 ml))
      (=>
        (infix_eqeq (matrix1 complex1) (t2tb65 n) (t2tb65 nl))
        (infix_eqeq
          (matrix1 complex1)
          (t2tb65 (kronecker m n))
          (t2tb65 (kronecker ml nl)))))))

;; kron_id
(assert
  (forall ((m Int) (n Int))
    (=>
      (<= 0 m)
      (=>
        (<= 0 n)
        (= (kronecker (identity m) (identity n)) (identity (+ m n)))))))

;; frows
(declare-fun frows ((Array Int (matrix complex))
  Int) Int)

;; t2tb
(declare-fun t2tb68 ((Array Int (matrix complex))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array Int (matrix complex))))
    (sort (infix_mngt int (matrix1 complex1)) (t2tb68 x))))

;; tb2t
(declare-fun tb2t68 (uni) (Array Int (matrix complex)))

;; BridgeL
(assert
  (forall ((i (Array Int (matrix complex))))
    (! (= (tb2t68 (t2tb68 i)) i) :pattern ((t2tb68 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort (infix_mngt int (matrix1 complex1)) j)
         (= (t2tb68 (tb2t68 j)) j)) :pattern ((t2tb68 (tb2t68 j))) )))

;; frows'def
(assert
  (forall ((f (Array Int (matrix complex))) (k Int))
    (= (frows f k) (rows
                     complex1
                     (infix_at (matrix1 complex1) int (t2tb68 f) (t2tb8 k))))))

;; frows'spec
(assert
  (forall ((f (Array Int (matrix complex))) (k Int)) (< 0 (frows f k))))

;; fcolumns
(declare-fun fcolumns ((Array Int (matrix complex))
  Int) Int)

;; fcolumns'def
(assert
  (forall ((f (Array Int (matrix complex))) (k Int))
    (= (fcolumns f k) (columns
                        complex1
                        (infix_at
                          (matrix1 complex1)
                          int
                          (t2tb68 f)
                          (t2tb8 k))))))

;; fcolumns'spec
(assert
  (forall ((f (Array Int (matrix complex))) (k Int)) (< 0 (fcolumns f k))))

;; fc
(declare-fun fc108 () (Array (matrix complex) (Array Int (matrix complex))))

;; t2tb
(declare-fun t2tb69 ((Array (matrix complex) (Array Int (matrix complex)))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (matrix complex) (Array Int (matrix complex)))))
    (sort
      (infix_mngt (matrix1 complex1) (infix_mngt int (matrix1 complex1)))
      (t2tb69 x))))

;; tb2t
(declare-fun tb2t69 (uni) (Array (matrix complex) (Array Int (matrix complex))))

;; BridgeL
(assert
  (forall ((i (Array (matrix complex) (Array Int (matrix complex)))))
    (! (= (tb2t69 (t2tb69 i)) i) :pattern ((t2tb69 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort
           (infix_mngt
             (matrix1 complex1)
             (infix_mngt int (matrix1 complex1)))
           j)
         (= (t2tb69 (tb2t69 j)) j)) :pattern ((t2tb69 (tb2t69 j))) )))

;; fc'def
(assert
  (forall ((y0 (matrix complex)) (y1 Int))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           int
           (infix_at
             (infix_mngt int (matrix1 complex1))
             (matrix1 complex1)
             (t2tb69 fc108)
             (t2tb65 y0))
           (t2tb8 y1))) y0)))

;; const_fcol
(assert
  (forall ((m (matrix complex)) (k Int))
    (= (fcolumns
         (tb2t68
           (infix_at
             (infix_mngt int (matrix1 complex1))
             (matrix1 complex1)
             (t2tb69 fc108)
             (t2tb65 m)))
         k) (columns complex1 (t2tb65 m)))))

;; fc
(declare-fun fc109 () (Array (matrix complex) (Array Int (matrix complex))))

;; fc'def
(assert
  (forall ((y0 (matrix complex)) (y1 Int))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           int
           (infix_at
             (infix_mngt int (matrix1 complex1))
             (matrix1 complex1)
             (t2tb69 fc109)
             (t2tb65 y0))
           (t2tb8 y1))) y0)))

;; const_frows
(assert
  (forall ((m (matrix complex)) (k Int))
    (= (frows
         (tb2t68
           (infix_at
             (infix_mngt int (matrix1 complex1))
             (matrix1 complex1)
             (t2tb69 fc109)
             (t2tb65 m)))
         k) (rows complex1 (t2tb65 m)))))

;; mat_mult_no_bound
(declare-fun mat_mult_no_bound ((matrix complex)
  (matrix complex)) (matrix complex))

;; result
(declare-fun result8 ((matrix complex)
  (matrix complex)
  Int
  Int) (Array Int complex))

;; result
(declare-fun result9 ((matrix complex)
  (matrix complex)) (Array Int (Array Int complex)))

;; result
(declare-fun result10 () (Array Int (Array Int complex)))

;; result'def
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int) (k Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (result8 m n i j)) (t2tb8 k))) 
    (infix_asdt
      (tb2t (get complex1 (t2tb65 m) i k))
      (tb2t (get complex1 (t2tb65 n) k j))))))

;; result'def
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             int
             (t2tb61 (result9 m n))
             (t2tb8 i))
           (t2tb8 j))) (ind_sum
                         (result8 m n i j)
                         0
                         (columns complex1 (t2tb65 m))))))

;; result'def
(assert
  (forall ((us Int) (us1 Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             int
             (t2tb61 result10)
             (t2tb8 us))
           (t2tb8 us1))) c_zero)))

;; mat_mult_no_bound'def
(assert
  (forall ((m (matrix complex)) (n (matrix complex)))
    (ite (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (= (mat_mult_no_bound m n) (tb2t65
                                   (make_f
                                     complex1
                                     (rows complex1 (t2tb65 m))
                                     (columns complex1 (t2tb65 n))
                                     (t2tb61 (result9 m n)))))
      (= (mat_mult_no_bound m n) (tb2t65
                                   (make_f complex1 1 1 (t2tb61 result10)))))))

;; fc
(declare-fun fc110 ((matrix complex)
  (matrix complex)
  Int
  Int) (Array Int complex))

;; fc'def
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int) (k Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc110 m n i j)) (t2tb8 k))) 
    (infix_asdt
      (tb2t (get complex1 (t2tb65 m) i k))
      (tb2t (get complex1 (t2tb65 n) k j))))))

;; mat_mult_no_bound'spec
(assert
  (forall ((m (matrix complex)) (n (matrix complex)))
    (and
      (=>
        (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
        (= (rows complex1 (t2tb65 (mat_mult_no_bound m n))) (rows
                                                              complex1
                                                              (t2tb65 m))))
      (and
        (=>
          (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
          (= (columns complex1 (t2tb65 (mat_mult_no_bound m n))) (columns
                                                                   complex1
                                                                   (t2tb65 n))))
        (=>
          (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
          (forall ((i Int) (j Int))
            (=>
              (valid_index complex1 (t2tb65 (mat_mult_no_bound m n)) i j)
              (= (tb2t (get complex1 (t2tb65 (mat_mult_no_bound m n)) i j)) 
              (ind_sum
                (fc110 m n i j)
                0
                (columns complex1 (t2tb65 m)))))))))))

;; mat_mult
(declare-fun mat_mult ((matrix complex)
  (matrix complex)) (matrix complex))

;; mat_mult'def
(assert
  (forall ((m (matrix complex)) (n (matrix complex)))
    (=>
      (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (= (mat_mult m n) (mat_mult_no_bound m n)))))

;; fc
(declare-fun fc111 ((matrix complex)
  (matrix complex)
  Int
  Int) (Array Int complex))

;; fc'def
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int) (k Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc111 m n i j)) (t2tb8 k))) 
    (infix_asdt
      (tb2t (get complex1 (t2tb65 m) i k))
      (tb2t (get complex1 (t2tb65 n) k j))))))

;; mat_mult'spec
(assert
  (forall ((m (matrix complex)) (n (matrix complex)))
    (=>
      (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (and
        (= (rows complex1 (t2tb65 (mat_mult m n))) (rows complex1 (t2tb65 m)))
        (and
          (= (columns complex1 (t2tb65 (mat_mult m n))) (columns
                                                          complex1
                                                          (t2tb65 n)))
          (forall ((i Int) (j Int))
            (=>
              (valid_index complex1 (t2tb65 (mat_mult m n)) i j)
              (= (tb2t (get complex1 (t2tb65 (mat_mult m n)) i j)) (ind_sum
                                                                    (fc111
                                                                    m
                                                                    n
                                                                    i
                                                                    j)
                                                                    0
                                                                    (columns
                                                                    complex1
                                                                    (t2tb65
                                                                    m)))))))))))

;; fc
(declare-fun fc112 ((matrix complex)
  (matrix complex)
  Int
  Int) (Array Int complex))

;; fc
(declare-fun fc113 ((matrix complex)
  (matrix complex)) (Array Int (Array Int complex)))

;; fc'def
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int) (k Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc112 m n i j)) (t2tb8 k))) 
    (infix_asdt
      (tb2t (get complex1 (t2tb65 m) i k))
      (tb2t (get complex1 (t2tb65 n) k j))))))

;; fc'def
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             int
             (t2tb61 (fc113 m n))
             (t2tb8 i))
           (t2tb8 j))) (ind_sum
                         (fc112 m n i j)
                         0
                         (columns complex1 (t2tb65 m))))))

;; correct_mat_mult
(assert
  (forall ((m (matrix complex)) (n (matrix complex)))
    (=>
      (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (= (mat_mult m n) (tb2t65
                          (make_f
                            complex1
                            (rows complex1 (t2tb65 m))
                            (columns complex1 (t2tb65 n))
                            (t2tb61 (fc113 m n))))))))

;; fc
(declare-fun fc114 ((matrix complex)
  (matrix complex)
  Int
  Int) (Array Int complex))

;; fc'def
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int) (k Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc114 m n i j)) (t2tb8 k))) 
    (infix_asdt
      (tb2t (get complex1 (t2tb65 m) i k))
      (tb2t (get complex1 (t2tb65 n) k j))))))

;; mat_mult_values
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int))
    (=>
      (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (=>
        (valid_index complex1 (t2tb65 (mat_mult m n)) i j)
        (= (tb2t (get complex1 (t2tb65 (mat_mult m n)) i j)) (ind_sum
                                                               (fc114
                                                                 m
                                                                 n
                                                                 i
                                                                 j)
                                                               0
                                                               (columns
                                                                 complex1
                                                                 (t2tb65 m))))))))

;; mat_mult_columns
(assert
  (forall ((m (matrix complex)) (n (matrix complex)))
    (=>
      (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (= (columns complex1 (t2tb65 (mat_mult m n))) (columns
                                                      complex1
                                                      (t2tb65 n))))))

;; mat_mult_rows
(assert
  (forall ((m (matrix complex)) (n (matrix complex)))
    (=>
      (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (= (rows complex1 (t2tb65 (mat_mult m n))) (rows complex1 (t2tb65 m))))))

;; fc
(declare-fun fc115 ((matrix complex)
  (matrix complex)
  Int
  Int) (Array Int complex))

;; fc'def
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int) (k Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc115 m n i j)) (t2tb8 k))) 
    (infix_asdt
      (tb2t (get complex1 (t2tb65 m) i k))
      (tb2t (get complex1 (t2tb65 n) k j))))))

;; mat_mult_values_quant
(assert
  (forall ((m (matrix complex)) (n (matrix complex)))
    (=>
      (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (forall ((i Int) (j Int))
        (=>
          (valid_index complex1 (t2tb65 (mat_mult m n)) i j)
          (= (tb2t (get complex1 (t2tb65 (mat_mult m n)) i j)) (ind_sum
                                                                 (fc115
                                                                   m
                                                                   n
                                                                   i
                                                                   j)
                                                                 0
                                                                 (columns
                                                                   complex1
                                                                   (t2tb65 m)))))))))

;; int_mat_prod
(declare-fun int_mat_prod ((Array Int (matrix complex))
  Int
  Int) (matrix complex))

;; int_mat_prod'def
(assert
  (forall ((f (Array Int (matrix complex))) (i Int) (j Int))
    (=>
      (<= i j)
      (=>
        (forall ((k Int) (kqt Int))
          (=>
            (and (and (<= i k) (<= k j)) (and (<= i kqt) (<= kqt j)))
            (and
              (= (rows
                   complex1
                   (infix_at (matrix1 complex1) int (t2tb68 f) (t2tb8 k))) 
              (rows
                complex1
                (infix_at (matrix1 complex1) int (t2tb68 f) (t2tb8 kqt))))
              (= (rows
                   complex1
                   (infix_at (matrix1 complex1) int (t2tb68 f) (t2tb8 kqt))) 
              (columns
                complex1
                (infix_at (matrix1 complex1) int (t2tb68 f) (t2tb8 kqt)))))))
        (ite (= (- j i) 0)
          (= (int_mat_prod f i j) (tb2t65
                                    (infix_at
                                      (matrix1 complex1)
                                      int
                                      (t2tb68 f)
                                      (t2tb8 i))))
          (= (int_mat_prod f i j) (mat_mult_no_bound
                                    (int_mat_prod f i (- j 1))
                                    (tb2t65
                                      (infix_at
                                        (matrix1 complex1)
                                        int
                                        (t2tb68 f)
                                        (t2tb8 j))))))))))

;; int_mat_prod'spec
(assert
  (forall ((f (Array Int (matrix complex))) (i Int) (j Int))
    (=>
      (<= i j)
      (=>
        (forall ((k Int) (kqt Int))
          (=>
            (and (and (<= i k) (<= k j)) (and (<= i kqt) (<= kqt j)))
            (and
              (= (rows
                   complex1
                   (infix_at (matrix1 complex1) int (t2tb68 f) (t2tb8 k))) 
              (rows
                complex1
                (infix_at (matrix1 complex1) int (t2tb68 f) (t2tb8 kqt))))
              (= (rows
                   complex1
                   (infix_at (matrix1 complex1) int (t2tb68 f) (t2tb8 kqt))) 
              (columns
                complex1
                (infix_at (matrix1 complex1) int (t2tb68 f) (t2tb8 kqt)))))))
        (and
          (= (rows complex1 (t2tb65 (int_mat_prod f i j))) (rows
                                                             complex1
                                                             (infix_at
                                                               (matrix1
                                                                 complex1)
                                                               int
                                                               (t2tb68 f)
                                                               (t2tb8 i))))
          (and
            (= (columns complex1 (t2tb65 (int_mat_prod f i j))) (columns
                                                                  complex1
                                                                  (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    int
                                                                    (t2tb68
                                                                    f)
                                                                    (t2tb8 i))))
            (= (columns complex1 (t2tb65 (int_mat_prod f i j))) (rows
                                                                  complex1
                                                                  (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    int
                                                                    (t2tb68
                                                                    f)
                                                                    (t2tb8 i))))))))))

;; int_mat_prod_zero
(assert
  (forall ((f (Array Int (matrix complex))) (i Int) (j Int))
    (=>
      (= (rows
           complex1
           (infix_at (matrix1 complex1) int (t2tb68 f) (t2tb8 i))) (columns
                                                                    complex1
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    int
                                                                    (t2tb68
                                                                    f)
                                                                    (t2tb8 i))))
      (=>
        (= i j)
        (= (int_mat_prod f i j) (tb2t65
                                  (infix_at
                                    (matrix1 complex1)
                                    int
                                    (t2tb68 f)
                                    (t2tb8 i))))))))

;; int_mat_prod_plus_one
(declare-fun int_mat_prod_plus_one ((Array Int (matrix complex))
  Int
  Int) tuple0)

;; int_mat_prod_plus_one'def
(assert
  (forall ((f (Array Int (matrix complex))) (i Int) (j Int))
    (=>
      (< i j)
      (=>
        (forall ((k Int) (kqt Int))
          (=>
            (and (and (<= i k) (<= k j)) (and (<= i kqt) (<= kqt j)))
            (and
              (= (rows
                   complex1
                   (infix_at (matrix1 complex1) int (t2tb68 f) (t2tb8 k))) 
              (rows
                complex1
                (infix_at (matrix1 complex1) int (t2tb68 f) (t2tb8 kqt))))
              (= (rows
                   complex1
                   (infix_at (matrix1 complex1) int (t2tb68 f) (t2tb8 kqt))) 
              (columns
                complex1
                (infix_at (matrix1 complex1) int (t2tb68 f) (t2tb8 kqt)))))))
        (= (int_mat_prod_plus_one f i j) Tuple0)))))

;; int_mat_prod_plus_one'spec
(assert
  (forall ((f (Array Int (matrix complex))) (i Int) (j Int))
    (=>
      (< i j)
      (=>
        (forall ((k Int) (kqt Int))
          (=>
            (and (and (<= i k) (<= k j)) (and (<= i kqt) (<= kqt j)))
            (and
              (= (rows
                   complex1
                   (infix_at (matrix1 complex1) int (t2tb68 f) (t2tb8 k))) 
              (rows
                complex1
                (infix_at (matrix1 complex1) int (t2tb68 f) (t2tb8 kqt))))
              (= (rows
                   complex1
                   (infix_at (matrix1 complex1) int (t2tb68 f) (t2tb8 kqt))) 
              (columns
                complex1
                (infix_at (matrix1 complex1) int (t2tb68 f) (t2tb8 kqt)))))))
        (= (int_mat_prod f i j) (mat_mult
                                  (int_mat_prod f i (- j 1))
                                  (tb2t65
                                    (infix_at
                                      (matrix1 complex1)
                                      int
                                      (t2tb68 f)
                                      (t2tb8 j)))))))))

;; int_mat_prod_eq
(assert
  (forall ((f (Array Int (matrix complex))) (g (Array Int (matrix complex))) (i Int) (j Int))
    (=>
      (<= i j)
      (=>
        (forall ((k Int) (kqt Int))
          (=>
            (and (<= i k) (<= k j))
            (=>
              (and (<= i kqt) (<= kqt j))
              (and
                (= (rows
                     complex1
                     (infix_at (matrix1 complex1) int (t2tb68 f) (t2tb8 k))) 
                (rows
                  complex1
                  (infix_at (matrix1 complex1) int (t2tb68 f) (t2tb8 kqt))))
                (= (rows
                     complex1
                     (infix_at (matrix1 complex1) int (t2tb68 f) (t2tb8 kqt))) 
                (columns
                  complex1
                  (infix_at (matrix1 complex1) int (t2tb68 f) (t2tb8 kqt))))))))
        (=>
          (forall ((k Int))
            (=>
              (and (<= i k) (<= k j))
              (= (tb2t65
                   (infix_at (matrix1 complex1) int (t2tb68 f) (t2tb8 k))) 
              (tb2t65
                (infix_at (matrix1 complex1) int (t2tb68 g) (t2tb8 k))))))
          (= (int_mat_prod f i j) (int_mat_prod g i j)))))))

;; mat_mult_id
(assert
  (forall ((n Int) (m (matrix complex)))
    (=>
      (<= 0 n)
      (=>
        (= (columns complex1 (t2tb65 m)) (power 2 n))
        (= (mat_mult m (identity n)) m)))))

;; id_mat_mult
(assert
  (forall ((n Int) (m (matrix complex)))
    (=>
      (<= 0 n)
      (=>
        (= (rows complex1 (t2tb65 m)) (power 2 n))
        (= (mat_mult (identity n) m) m)))))

;; mat_mult_eq
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (mqt (matrix complex)) (nqt (matrix complex)))
    (=>
      (= m mqt)
      (=>
        (= n nqt)
        (=>
          (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
          (= (mat_mult m n) (mat_mult mqt nqt)))))))

;; add_mat
(declare-fun add_mat ((matrix complex)
  (matrix complex)) (matrix complex))

;; result
(declare-fun result11 ((matrix complex)
  (matrix complex)) (Array Int (Array Int complex)))

;; result'def
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             int
             (t2tb61 (result11 m n))
             (t2tb8 i))
           (t2tb8 j))) (infix_pldt
                         (tb2t (get complex1 (t2tb65 m) i j))
                         (tb2t (get complex1 (t2tb65 n) i j))))))

;; add_mat'def
(assert
  (forall ((m (matrix complex)) (n (matrix complex)))
    (=>
      (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (=>
        (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
        (= (add_mat m n) (tb2t65
                           (make_f
                             complex1
                             (rows complex1 (t2tb65 m))
                             (columns complex1 (t2tb65 m))
                             (t2tb61 (result11 m n)))))))))

;; add_mat'spec
(assert
  (forall ((m (matrix complex)) (n (matrix complex)))
    (=>
      (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (=>
        (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
        (and
          (and
            (= (columns complex1 (t2tb65 (add_mat m n))) (columns
                                                           complex1
                                                           (t2tb65 m)))
            (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n))))
          (and
            (and
              (= (rows complex1 (t2tb65 (add_mat m n))) (rows
                                                          complex1
                                                          (t2tb65 m)))
              (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n))))
            (forall ((i Int) (j Int))
              (= (tb2t (get complex1 (t2tb65 (add_mat m n)) i j)) (infix_pldt
                                                                    (tb2t
                                                                    (get
                                                                    complex1
                                                                    (t2tb65
                                                                    m)
                                                                    i
                                                                    j))
                                                                    (tb2t
                                                                    (get
                                                                    complex1
                                                                    (t2tb65
                                                                    n)
                                                                    i
                                                                    j)))))))))))

;; add_mat_equal
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (mqt (matrix complex)) (nqt (matrix complex)))
    (=>
      (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (=>
        (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
        (=> (= m mqt) (=> (= n nqt) (= (add_mat m n) (add_mat mqt nqt))))))))

;; add_value
(assert
  (forall ((m (matrix complex)) (n (matrix complex)))
    (=>
      (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
      (=>
        (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
        (=>
          (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
          (forall ((i Int) (j Int))
            (=>
              (and (<= 0 i) (< i (rows complex1 (t2tb65 m))))
              (=>
                (and (<= 0 j) (< j (columns complex1 (t2tb65 m))))
                (= (tb2t (get complex1 (t2tb65 (add_mat m n)) i j)) (infix_pldt
                                                                    (tb2t
                                                                    (get
                                                                    complex1
                                                                    (t2tb65
                                                                    m)
                                                                    i
                                                                    j))
                                                                    (tb2t
                                                                    (get
                                                                    complex1
                                                                    (t2tb65
                                                                    n)
                                                                    i
                                                                    j))))))))))))

;; add_values
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int))
    (=>
      (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
      (=>
        (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
        (= (tb2t (get complex1 (t2tb65 (add_mat m n)) i j)) (infix_pldt
                                                              (tb2t
                                                                (get
                                                                  complex1
                                                                  (t2tb65 m)
                                                                  i
                                                                  j))
                                                              (tb2t
                                                                (get
                                                                  complex1
                                                                  (t2tb65 n)
                                                                  i
                                                                  j))))))))

;; add_mat_null_left
(assert
  (forall ((m (matrix complex)) (n (matrix complex)))
    (=>
      (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
      (=>
        (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
        (=> (null_mat m) (= (add_mat m n) n))))))

;; add_mat_null_right
(assert
  (forall ((m (matrix complex)) (n (matrix complex)))
    (=>
      (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
      (=>
        (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
        (=> (null_mat n) (= (add_mat m n) m))))))

;; set_equal_columns_elt
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int))
    (=>
      (and
        (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
        (= (columns complex1 (t2tb65 n)) i))
      (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n))))))

;; set_equal_rows_elt
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int))
    (=>
      (and
        (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
        (= (rows complex1 (t2tb65 n)) i))
      (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n))))))

;; add_columns
(assert
  (forall ((m (matrix complex)) (n (matrix complex)))
    (=>
      (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
      (=>
        (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
        (= (columns complex1 (t2tb65 (add_mat m n))) (columns
                                                       complex1
                                                       (t2tb65 m)))))))

;; add_rows
(assert
  (forall ((m (matrix complex)) (n (matrix complex)))
    (=>
      (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
      (=>
        (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
        (= (rows complex1 (t2tb65 (add_mat m n))) (rows complex1 (t2tb65 m)))))))

;; set_equal_dim_elt
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int))
    (=>
      (and
        (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
        (= (rows complex1 (t2tb65 n)) i))
      (=>
        (and
          (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
          (= (columns complex1 (t2tb65 n)) j))
        (and
          (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
          (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n))))))))

;; set_dim_add
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int))
    (=>
      (and
        (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
        (= (rows complex1 (t2tb65 n)) i))
      (=>
        (and
          (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
          (= (columns complex1 (t2tb65 n)) j))
        (and
          (= (rows complex1 (t2tb65 (add_mat m n))) i)
          (= (columns complex1 (t2tb65 (add_mat m n))) j))))))

;; add_mat_eq
(assert
  (forall ((m (matrix complex)) (m1 (matrix complex)) (n (matrix complex)) (n1 (matrix complex)))
    (=>
      (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (=>
        (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
        (=> (= m m1) (=> (= n n1) (= (add_mat m n) (add_mat m1 n1))))))))

;; add_mat_comm
(assert
  (forall ((m (matrix complex)) (n (matrix complex)))
    (=>
      (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (=>
        (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
        (= (add_mat m n) (add_mat n m))))))

;; add_mat_eq_rev
(assert
  (forall ((m (matrix complex)) (m1 (matrix complex)) (n (matrix complex)) (n1 (matrix complex)))
    (=>
      (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (=>
        (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
        (=> (= m m1) (=> (= n n1) (= (add_mat n m) (add_mat m1 n1))))))))

;; add_neutral
(declare-fun add_neutral (tuple0) (matrix complex))

;; add_neutral'spec
(assert
  (forall ((us tuple0))
    (and
      (forall ((i Int) (j Int))
        (=>
          (valid_index complex1 (t2tb65 (add_neutral us)) i j)
          (= (tb2t (get complex1 (t2tb65 (add_neutral us)) i j)) c_zero)))
      (and
        (< 0 (rows complex1 (t2tb65 (add_neutral us))))
        (< 0 (columns complex1 (t2tb65 (add_neutral us))))))))

;; distr_1_pre
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (o (matrix complex)) (i Int) (j Int))
    (=>
      (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (=>
        (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
        (=>
          (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 o)))
          (=>
            (and (<= 0 i) (< i (rows complex1 (t2tb65 m))))
            (=>
              (and (<= 0 j) (< j (columns complex1 (t2tb65 o))))
              (= (tb2t
                   (get complex1 (t2tb65 (mat_mult (add_mat m n) o)) i j)) 
              (tb2t
                (get
                  complex1
                  (t2tb65 (add_mat (mat_mult m o) (mat_mult n o)))
                  i
                  j))))))))))

;; distr_l
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (o (matrix complex)))
    (=>
      (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (=>
        (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
        (=>
          (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 o)))
          (= (mat_mult (add_mat m n) o) (add_mat
                                          (mat_mult m o)
                                          (mat_mult n o))))))))

;; distr_2_pre
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (o (matrix complex)) (i Int) (j Int))
    (=>
      (= (rows complex1 (t2tb65 n)) (rows complex1 (t2tb65 o)))
      (=>
        (= (columns complex1 (t2tb65 n)) (columns complex1 (t2tb65 o)))
        (=>
          (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
          (=>
            (and (<= 0 i) (< i (rows complex1 (t2tb65 m))))
            (=>
              (and (<= 0 j) (< j (columns complex1 (t2tb65 n))))
              (and
                (valid_index
                  complex1
                  (t2tb65 (mat_mult m (add_mat n o)))
                  i
                  j)
                (= (tb2t
                     (get complex1 (t2tb65 (mat_mult m (add_mat n o))) i j)) 
                (tb2t
                  (get
                    complex1
                    (t2tb65 (add_mat (mat_mult m n) (mat_mult m o)))
                    i
                    j)))))))))))

;; distr_r
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (o (matrix complex)))
    (=>
      (= (rows complex1 (t2tb65 n)) (rows complex1 (t2tb65 o)))
      (=>
        (= (columns complex1 (t2tb65 n)) (columns complex1 (t2tb65 o)))
        (=>
          (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
          (= (mat_mult m (add_mat n o)) (add_mat
                                          (mat_mult m n)
                                          (mat_mult m o))))))))

;; infix *..
(declare-fun infix_asdtdt (complex
  (matrix complex)) (matrix complex))

;; result
(declare-fun result12 (complex
  (matrix complex)) (Array Int (Array Int complex)))

;; result'def
(assert
  (forall ((s complex) (m (matrix complex)) (i Int) (j Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             int
             (t2tb61 (result12 s m))
             (t2tb8 i))
           (t2tb8 j))) (infix_asdt s (tb2t (get complex1 (t2tb65 m) i j))))))

;; infix *..'def
(assert
  (forall ((s complex) (m (matrix complex)))
    (= (infix_asdtdt s m) (tb2t65
                            (make_f
                              complex1
                              (rows complex1 (t2tb65 m))
                              (columns complex1 (t2tb65 m))
                              (t2tb61 (result12 s m)))))))

;; infix *..'spec
(assert
  (forall ((s complex) (m (matrix complex)))
    (and
      (= (columns complex1 (t2tb65 (infix_asdtdt s m))) (columns
                                                          complex1
                                                          (t2tb65 m)))
      (and
        (= (rows complex1 (t2tb65 (infix_asdtdt s m))) (rows
                                                         complex1
                                                         (t2tb65 m)))
        (and
          (forall ((i Int) (j Int))
            (=>
              (valid_index complex1 (t2tb65 (infix_asdtdt s m)) i j)
              (= (tb2t (get complex1 (t2tb65 (infix_asdtdt s m)) i j)) 
              (infix_asdt
                s
                (tb2t (get complex1 (t2tb65 m) i j))))))
          (forall ((i Int) (j Int))
            (=
              (valid_index complex1 (t2tb65 (infix_asdtdt s m)) i j)
              (valid_index complex1 (t2tb65 m) i j))))))))

;; scalar_columns
(assert
  (forall ((m (matrix complex)) (a complex))
    (= (columns complex1 (t2tb65 (infix_asdtdt a m))) (columns
                                                        complex1
                                                        (t2tb65 m)))))

;; scalar_values
(assert
  (forall ((m (matrix complex)) (a complex) (i Int) (j Int))
    (= (tb2t (get complex1 (t2tb65 (infix_asdtdt a m)) i j)) (infix_asdt
                                                               a
                                                               (tb2t
                                                                 (get
                                                                   complex1
                                                                   (t2tb65 m)
                                                                   i
                                                                   j))))))

;; scalar_rows
(assert
  (forall ((m (matrix complex)) (a complex))
    (= (rows complex1 (t2tb65 (infix_asdtdt a m))) (rows complex1 (t2tb65 m)))))

;; scalar_null
(assert (forall ((m (matrix complex))) (null_mat (infix_asdtdt c_zero m))))

;; scalar_c_one
(assert (forall ((m (matrix complex))) (= (infix_asdtdt c_one m) m)))

;; scalar_c_one_gen
(assert
  (forall ((m (matrix complex)) (a complex))
    (=> (= a c_one) (= (infix_asdtdt a m) m))))

;; scalar_null_gen
(assert
  (forall ((m (matrix complex)) (a complex))
    (=> (= a c_zero) (null_mat (infix_asdtdt a m)))))

;; scalar_plus
(assert
  (forall ((m (matrix complex)) (a complex) (b complex))
    (= (infix_asdtdt (infix_pldt a b) m) (add_mat
                                           (infix_asdtdt a m)
                                           (infix_asdtdt b m)))))

;; scalar_plus_rev
(assert
  (forall ((m (matrix complex)) (a complex) (b complex))
    (= (add_mat (infix_asdtdt a m) (infix_asdtdt b m)) (infix_asdtdt
                                                         (infix_pldt a b)
                                                         m))))

;; add_scal
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (a complex))
    (=>
      (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (=>
        (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
        (= (infix_asdtdt a (add_mat m n)) (add_mat
                                            (infix_asdtdt a m)
                                            (infix_asdtdt a n)))))))

;; add_scal_rev
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (a complex))
    (=>
      (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (=>
        (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
        (= (add_mat (infix_asdtdt a m) (infix_asdtdt a n)) (infix_asdtdt
                                                             a
                                                             (add_mat m n)))))))

;; fc
(declare-fun fc116 ((matrix complex)
  (matrix complex)
  complex
  Int
  Int) (Array Int complex))

;; fc'def
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (a complex) (i Int) (j Int) (k Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc116 m n a i j)) (t2tb8 k))) 
    (infix_asdt
      (infix_asdt a (tb2t (get complex1 (t2tb65 m) i k)))
      (tb2t (get complex1 (t2tb65 n) k j))))))

;; mat_mult_scal_values_l
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (a complex) (i Int) (j Int))
    (=>
      (= (rows complex1 (t2tb65 n)) (columns complex1 (t2tb65 m)))
      (=>
        (and (<= 0 i) (< i (rows complex1 (t2tb65 m))))
        (=>
          (and (<= 0 j) (< j (columns complex1 (t2tb65 n))))
          (= (infix_asdt a (tb2t (get complex1 (t2tb65 (mat_mult m n)) i j))) 
          (ind_sum
            (fc116 m n a i j)
            0
            (columns complex1 (t2tb65 m)))))))))

;; fc
(declare-fun fc117 ((matrix complex)
  (matrix complex)
  complex
  Int
  Int) (Array Int complex))

;; fc'def
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (a complex) (i Int) (j Int) (k Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc117 m n a i j)) (t2tb8 k))) 
    (infix_asdt
      (infix_asdt a (tb2t (get complex1 (t2tb65 m) i k)))
      (tb2t (get complex1 (t2tb65 n) k j))))))

;; mat_mult_scal_values_r
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (a complex) (i Int) (j Int))
    (=>
      (= (rows complex1 (t2tb65 n)) (columns complex1 (t2tb65 m)))
      (=>
        (= (rows complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
        (=>
          (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
          (=>
            (and (<= 0 i) (< i (rows complex1 (t2tb65 m))))
            (=>
              (and (<= 0 j) (< j (columns complex1 (t2tb65 n))))
              (= (infix_asdt
                   (tb2t (get complex1 (t2tb65 (mat_mult m n)) i j))
                   a) (ind_sum
                        (fc117 m n a i j)
                        0
                        (columns complex1 (t2tb65 m)))))))))))

;; mat_mut_scal
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (a complex))
    (=>
      (= (rows complex1 (t2tb65 n)) (columns complex1 (t2tb65 m)))
      (= (mat_mult m (infix_asdtdt a n)) (infix_asdtdt a (mat_mult m n))))))

;; scal_mat_mut
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (a complex))
    (=>
      (= (rows complex1 (t2tb65 n)) (columns complex1 (t2tb65 m)))
      (= (mat_mult (infix_asdtdt a m) n) (infix_asdtdt a (mat_mult m n))))))

;; mat_mut_scal_rev
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (a complex))
    (=>
      (= (rows complex1 (t2tb65 n)) (columns complex1 (t2tb65 m)))
      (= (infix_asdtdt a (mat_mult m n)) (mat_mult m (infix_asdtdt a n))))))

;; scal_mat_mut_rev
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (a complex))
    (=>
      (= (rows complex1 (t2tb65 n)) (columns complex1 (t2tb65 m)))
      (= (infix_asdtdt a (mat_mult m n)) (mat_mult (infix_asdtdt a m) n)))))

;; fc
(declare-fun fc118 ((Array Int (Array Int complex))
  (Array Int complex)
  Int
  Int) (Array Int complex))

;; fc
(declare-fun fc119 ((Array Int (Array Int complex))
  (Array Int complex)
  Int) (Array Int complex))

;; fc
(declare-fun fc120 ((Array Int (Array Int complex))
  (Array Int complex)
  Int
  Int) (Array Int complex))

;; fc'def
(assert
  (forall ((f (Array Int (Array Int complex))) (g (Array Int complex)) (k Int) (l Int) (k1 Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc118 f g k l)) (t2tb8 k1))) 
    (infix_asdt
      (ind_sum
        (tb2t51
          (infix_at (infix_mngt int complex1) int (t2tb61 f) (t2tb8 k1)))
        k
        l)
      (tb2t (infix_at complex1 int (t2tb51 g) (t2tb8 k1)))))))

;; fc'def
(assert
  (forall ((f (Array Int (Array Int complex))) (g (Array Int complex)) (k1 Int) (k2 Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc119 f g k1)) (t2tb8 k2))) 
    (infix_asdt
      (tb2t
        (infix_at
          complex1
          int
          (infix_at (infix_mngt int complex1) int (t2tb61 f) (t2tb8 k2))
          (t2tb8 k1)))
      (tb2t (infix_at complex1 int (t2tb51 g) (t2tb8 k2)))))))

;; fc'def
(assert
  (forall ((f (Array Int (Array Int complex))) (g (Array Int complex)) (i Int) (j Int) (k1 Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc120 f g i j)) (t2tb8 k1))) 
    (ind_sum
      (fc119 f g k1)
      i
      j))))

;; ind_sum_commute_scal_r
(assert
  (forall ((f (Array Int (Array Int complex))) (g (Array Int complex)) (i Int) (j Int) (k Int) (l Int))
    (=>
      (<= i j)
      (=>
        (<= k l)
        (= (ind_sum (fc118 f g k l) i j) (ind_sum (fc120 f g i j) k l))))))

;; mat_mult_assoc_pre
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (o (matrix complex)) (i Int) (j Int))
    (=>
      (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (=>
        (= (columns complex1 (t2tb65 n)) (rows complex1 (t2tb65 o)))
        (=>
          (and (<= 0 i) (< i (rows complex1 (t2tb65 m))))
          (=>
            (and (<= 0 j) (< j (columns complex1 (t2tb65 o))))
            (= (tb2t (get complex1 (t2tb65 (mat_mult (mat_mult m n) o)) i j)) 
            (tb2t
              (get complex1 (t2tb65 (mat_mult m (mat_mult n o))) i j)))))))))

;; mat_mult_assoc
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (o (matrix complex)))
    (=>
      (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (=>
        (= (columns complex1 (t2tb65 n)) (rows complex1 (t2tb65 o)))
        (= (mat_mult (mat_mult m n) o) (mat_mult m (mat_mult n o)))))))

;; mat_mult_assoc_quant
(assert
  (forall ((m (matrix complex)) (n (matrix complex)))
    (=>
      (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (forall ((o (matrix complex)))
        (=>
          (= (columns complex1 (t2tb65 n)) (rows complex1 (t2tb65 o)))
          (= (mat_mult (mat_mult m n) o) (mat_mult m (mat_mult n o))))))))

;; mat_mult_assoc_comm
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (o (matrix complex)))
    (=>
      (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (=>
        (= (columns complex1 (t2tb65 n)) (rows complex1 (t2tb65 o)))
        (= (mat_mult m (mat_mult n o)) (mat_mult (mat_mult m n) o))))))

;; scalar_eq
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (a complex))
    (=> (= m n) (= (infix_asdtdt a m) (infix_asdtdt a n)))))

;; scalar_eq_gen
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (a complex) (b complex))
    (=> (= m n) (=> (= a b) (= (infix_asdtdt a m) (infix_asdtdt b n))))))

;; scalar_add
(assert
  (forall ((m (matrix complex)) (a complex) (b complex))
    (= (infix_asdtdt (infix_pldt a b) m) (add_mat
                                           (infix_asdtdt a m)
                                           (infix_asdtdt b m)))))

;; scalar_assoc
(assert
  (forall ((m (matrix complex)) (a complex) (b complex))
    (= (infix_asdtdt a (infix_asdtdt b m)) (infix_asdtdt (infix_asdt a b) m))))

;; scalar_assoc_rev
(assert
  (forall ((m (matrix complex)) (a complex) (b complex))
    (= (infix_asdtdt (infix_asdt a b) m) (infix_asdtdt a (infix_asdtdt b m)))))

;; scalars_inv
(assert
  (forall ((m (matrix complex)) (a complex) (b complex) (aqt complex) (bqt complex))
    (=>
      (= a aqt)
      (=>
        (= b bqt)
        (= (infix_asdtdt aqt (infix_asdtdt bqt m)) (infix_asdtdt
                                                     b
                                                     (infix_asdtdt a m)))))))

;; eq_scalar
(assert
  (forall ((m (matrix complex)) (a complex) (b complex))
    (=>
      (exists ((i Int) (j Int))
        (and
          (valid_index complex1 (t2tb65 m) i j)
          (not (= (tb2t (get complex1 (t2tb65 m) i j)) c_zero))))
      (=> (= (infix_asdtdt a m) (infix_asdtdt b m)) (= a b)))))

;; mat_substr
(declare-fun mat_substr ((matrix complex)
  (matrix complex)) (matrix complex))

;; mat_substr'def
(assert
  (forall ((m (matrix complex)) (n (matrix complex)))
    (=>
      (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (=>
        (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
        (= (mat_substr m n) (add_mat m (infix_asdtdt (prefix_mndt c_one) n)))))))

;; mat_substr'spec
(assert
  (forall ((m (matrix complex)) (n (matrix complex)))
    (=>
      (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (=>
        (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
        (and
          (= (rows complex1 (t2tb65 (mat_substr m n))) (rows
                                                         complex1
                                                         (t2tb65 m)))
          (and
            (= (columns complex1 (t2tb65 (mat_substr m n))) (columns
                                                              complex1
                                                              (t2tb65 m)))
            (forall ((i Int) (j Int))
              (=>
                (and (<= 0 i) (< i (rows complex1 (t2tb65 m))))
                (=>
                  (and (<= 0 j) (< j (columns complex1 (t2tb65 m))))
                  (= (tb2t (get complex1 (t2tb65 (mat_substr m n)) i j)) 
                  (infix_mndt
                    (tb2t (get complex1 (t2tb65 m) i j))
                    (tb2t (get complex1 (t2tb65 n) i j)))))))))))))

;; substr_rows
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (r Int))
    (=>
      (and
        (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
        (= (rows complex1 (t2tb65 n)) r))
      (=>
        (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
        (= (rows complex1 (t2tb65 (mat_substr m n))) r)))))

;; substr_columns
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (c Int))
    (=>
      (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (=>
        (and
          (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
          (= (columns complex1 (t2tb65 n)) c))
        (= (columns complex1 (t2tb65 (mat_substr m n))) c)))))

;; substr_value
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int))
    (=>
      (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (=>
        (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
        (=>
          (and (<= 0 i) (< i (rows complex1 (t2tb65 m))))
          (=>
            (and (<= 0 j) (< j (columns complex1 (t2tb65 m))))
            (= (tb2t (get complex1 (t2tb65 (mat_substr m n)) i j)) (infix_mndt
                                                                    (tb2t
                                                                    (get
                                                                    complex1
                                                                    (t2tb65
                                                                    m)
                                                                    i
                                                                    j))
                                                                    (tb2t
                                                                    (get
                                                                    complex1
                                                                    (t2tb65
                                                                    n)
                                                                    i
                                                                    j))))))))))

;; distr_l_substr
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (o (matrix complex)))
    (=>
      (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (=>
        (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
        (=>
          (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 o)))
          (= (mat_mult (mat_substr m n) o) (mat_substr
                                             (mat_mult m o)
                                             (mat_mult n o))))))))

;; distr_r_substr
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (o (matrix complex)))
    (=>
      (= (rows complex1 (t2tb65 n)) (rows complex1 (t2tb65 o)))
      (=>
        (= (columns complex1 (t2tb65 n)) (columns complex1 (t2tb65 o)))
        (=>
          (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 o)))
          (= (mat_mult m (mat_substr n o)) (mat_substr
                                             (mat_mult m n)
                                             (mat_mult m o))))))))

;; mat_substr_eq
(assert
  (forall ((m (matrix complex)) (mqt (matrix complex)) (n (matrix complex)) (nqt (matrix complex)))
    (=>
      (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (=>
        (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
        (=>
          (= m mqt)
          (=> (= n nqt) (= (mat_substr m n) (mat_substr mqt nqt))))))))

;; substr_decomp
(assert
  (forall ((m (matrix complex)) (n (matrix complex)))
    (=>
      (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (=>
        (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
        (= m (add_mat n (mat_substr m n)))))))

;; subtr_scal
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (a complex))
    (=>
      (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (=>
        (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
        (= (infix_asdtdt a (mat_substr m n)) (mat_substr
                                               (infix_asdtdt a m)
                                               (infix_asdtdt a n)))))))

;; subtr_scal_rev
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (a complex))
    (=>
      (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (=>
        (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
        (= (mat_substr (infix_asdtdt a m) (infix_asdtdt a n)) (infix_asdtdt
                                                                a
                                                                (mat_substr
                                                                  m
                                                                  n)))))))

;; get_equal_mat_to_substr
(assert
  (forall ((m (matrix complex)) (n (matrix complex)))
    (=>
      (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (=>
        (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
        (=>
          (= m n)
          (= (mat_substr m n) (tb2t65
                                (make
                                  complex1
                                  (rows complex1 (t2tb65 m))
                                  (columns complex1 (t2tb65 m))
                                  (t2tb c_zero)))))))))

;; set_inequal_mat_by_substr
(assert
  (forall ((m (matrix complex)) (n (matrix complex)))
    (=>
      (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (=>
        (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
        (=
          (not (= m n))
          (not
            (= (mat_substr m n) (tb2t65
                                  (make
                                    complex1
                                    (rows complex1 (t2tb65 m))
                                    (columns complex1 (t2tb65 m))
                                    (t2tb c_zero))))))))))

;; pow_inv_2_scal
(assert
  (forall ((i Int) (x (matrix complex)))
    (=>
      (<= 0 i)
      (= (infix_asdtdt (pow_inv_2 i) x) (infix_asdtdt
                                          (pow_inv_sqrt_2 i)
                                          (infix_asdtdt (pow_inv_sqrt_2 i) x))))))

;; pow_inv_2_from_int
(assert
  (forall ((n Int))
    (=> (<= 0 n) (= (pow_inv_2 n) (infix_sldt c_one (i_to_c (power 2 n)))))))

;; pow_inv_2_sq_rt
(assert
  (forall ((n Int))
    (=> (<= 0 n) (= (square_rt (pow_inv_2 n)) (pow_inv_sqrt_2 n)))))

;; pow_inv_sqrt_2_double
(assert
  (forall ((n Int)) (=> (<= 0 n) (= (pow_inv_sqrt_2 (* 2 n)) (pow_inv_2 n)))))

;; pos_pow_inv_2
(assert (forall ((i Int)) (=> (<= 0 i) (infix_lseqdt c_zero (pow_inv_2 i)))))

;; pos_pow_inv_sqrt_2
(assert
  (forall ((i Int)) (=> (<= 0 i) (infix_lseqdt c_zero (pow_inv_sqrt_2 i)))))

;; strict_pos_pow_inv_2
(assert (forall ((i Int)) (=> (<= 0 i) (infix_lsdt c_zero (pow_inv_2 i)))))

;; pow_inv_2_add
(assert
  (forall ((i Int) (j Int))
    (=>
      (<= 0 i)
      (=>
        (<= 0 j)
        (= (pow_inv_2 (+ i j)) (infix_asdt (pow_inv_2 i) (pow_inv_2 j)))))))

;; pow_inv_2_plus_one
(assert
  (forall ((i Int))
    (=>
      (<= 0 i)
      (= (pow_inv_2 (+ i 1)) (infix_asdt
                               (infix_sldt c_one (infix_pldt c_one c_one))
                               (pow_inv_2 i))))))

;; pow_inv_2_plus_one_rev
(assert
  (forall ((i Int))
    (=>
      (<= 0 i)
      (= (infix_asdt
           (infix_sldt c_one (infix_pldt c_one c_one))
           (pow_inv_2 i)) (pow_inv_2 (+ i 1))))))

;; pow_inv_2_with_
(assert
  (forall ((i Int))
    (=> (<= 0 i) (= (pow_inv_2 i) (infix_sldt c_one (i_to_c (power 2 i)))))))

;; pow_inv_2_to_one
(assert
  (forall ((i Int))
    (=> (<= 0 i) (= (infix_asdt (i_to_c (power 2 i)) (pow_inv_2 i)) c_one))))

;; pow_inv_2_one
(assert
  (forall ((i Int))
    (=> (= i 1) (= (i_to_c (power 2 i)) (infix_pldt c_one c_one)))))

;; pow_inv_2_to_one_gen
(assert
  (forall ((i Int) (x complex))
    (=>
      (<= 0 i)
      (=> (= x (i_to_c (power 2 i))) (= (infix_asdt (pow_inv_2 i) x) c_one)))))

;; pow_inv_to_pow_2
(assert
  (forall ((k Int) (l Int))
    (=>
      (<= 0 l)
      (=>
        (<= l k)
        (= (infix_asdt (pow_inv_2 k) (i_to_c (power 2 l))) (pow_inv_2
                                                             (- k l)))))))

;; neg_pow_inv_sqrt_2
(declare-fun neg_pow_inv_sqrt_2 (Int) complex)

;; neg_pow_inv_sqrt_2'def
(assert
  (forall ((i Int))
    (=>
      (<= 0 i)
      (= (neg_pow_inv_sqrt_2 i) (cpower
                                  (infix_sldt
                                    (prefix_mndt c_one)
                                    (square_rt (infix_pldt c_one c_one)))
                                  i)))))

;; inv_pow_inv_sqrt_2
(assert
  (= (infix_asdt (pow_inv_sqrt_2 1) (square_rt (infix_pldt c_one c_one))) 
  c_one))

;; pow_inv_sqrt_2_values
(assert
  (forall ((i Int))
    (=>
      (<= 0 i)
      (= (pow_inv_sqrt_2 i) (infix_sldt
                              c_one
                              (cpower (square_rt (infix_pldt c_one c_one)) i))))))

;; neg_pow_inv_sqrt_2_values
(assert
  (forall ((i Int))
    (=>
      (<= 0 i)
      (= (neg_pow_inv_sqrt_2 i) (infix_asdt
                                  (mop i)
                                  (infix_sldt
                                    c_one
                                    (cpower
                                      (square_rt (infix_pldt c_one c_one))
                                      i)))))))

;; ppos_neg_coeff_values
(assert
  (forall ((i Int))
    (=>
      (<= 0 i)
      (and
        (=> (= (even i) true) (= (pow_inv_sqrt_2 i) (neg_pow_inv_sqrt_2 i)))
        (and
          (=>
            (= (odd i) true)
            (= (pow_inv_sqrt_2 i) (prefix_mndt (neg_pow_inv_sqrt_2 i))))
          (= (neg_pow_inv_sqrt_2 i) (infix_asdt (mop i) (pow_inv_sqrt_2 i))))))))

;; pow_inv_sqrt_2_neg
(declare-fun pow_inv_sqrt_2_neg (Int) complex)

;; pow_inv_sqrt_2_neg'def
(assert
  (forall ((i Int))
    (=> (<= 0 i) (= (pow_inv_sqrt_2_neg i) (prefix_mndt (pow_inv_sqrt_2 i))))))

;; int_to_ang_to_real_to_ang
(assert
  (forall ((theta angle) (k Int) (n Int))
    (=>
      (<= 0 n)
      (=>
        (= theta (infix_sldtsl k n))
        (= theta (real_to_ang (infix_asdt (i_to_c k) (pow_inv_2 n))))))))

;; real_to_ang_to_int_to_ang
(assert
  (forall ((k Int) (n Int))
    (=>
      (<= 0 n)
      (= (real_to_ang (infix_asdt (i_to_c k) (pow_inv_2 n))) (infix_sldtsl
                                                               k
                                                               n)))))

;; real_to_ang_to_int_to_ang_add
(assert
  (forall ((k Int) (kqt Int) (n Int))
    (=>
      (<= 0 n)
      (= (real_to_ang
           (infix_asdt (infix_pldt (i_to_c k) (i_to_c kqt)) (pow_inv_2 n))) 
      (infix_sldtsl
        (+ k kqt)
        n)))))

;; int_to_ang_to_real_to_ang_gen
(assert
  (forall ((k Int) (n Int) (kx complex))
    (=>
      (<= 0 n)
      (=>
        (= kx (i_to_c k))
        (= (infix_sldtsl k n) (real_to_ang (infix_asdt kx (pow_inv_2 n))))))))

;; Int_To_Ang_inv
(assert
  (forall ((k Int) (n Int))
    (= (ang_inv (infix_sldtsl k n)) (infix_sldtsl (- k) n))))

;; Int_To_Ang_inv_add
(assert
  (forall ((k Int) (n Int))
    (= (ang_add (infix_sldtsl k n) (infix_sldtsl (- k) n)) ang_zero)))

;; Int_To_Ang_add
(assert
  (forall ((k Int) (kqt Int) (n Int))
    (= (ang_add (infix_sldtsl k n) (infix_sldtsl kqt n)) (infix_sldtsl
                                                           (+ k kqt)
                                                           n))))

;; Int_To_Ang_up
(assert
  (forall ((k Int) (n Int))
    (=> (<= 0 n) (= (infix_sldtsl k n) (infix_sldtsl (* 2 k) (+ n 1))))))

;; Int_To_Ang_cyclic
(assert
  (forall ((k Int) (n Int))
    (=> (<= 0 n) (= (infix_sldtsl k n) (infix_sldtsl (+ k (power 2 n)) n)))))

;; Zero_n
(assert (forall ((n Int)) (= (infix_sldtsl 0 n) ang_zero)))

;; set_ang_minus_one_by_int
(assert
  (forall ((a Int) (b Int))
    (=> (= a 1) (=> (= b 1) (= (infix_sldtsl a b) (infix_sldtsl 1 1))))))

;; ang_minus_one_from_real
(assert
  (= (infix_sldtsl 1 1) (real_to_ang
                          (infix_sldt c_one (infix_pldt c_one c_one)))))

;; ang_exp_minus_one
(assert (= (ang_exp (infix_sldtsl 1 1)) (prefix_mndt c_one)))

;; set_ang_zero_by_int
(assert
  (forall ((a Int) (b Int))
    (=> (= a 0) (=> (<= 0 b) (= (infix_sldtsl a b) ang_zero)))))

;; ang_minus_one_twice
(assert
  (forall ((a1 angle) (a2 angle))
    (=>
      (= a1 (infix_sldtsl 1 1))
      (=> (= a2 (infix_sldtsl 1 1)) (= (ang_add a1 a2) ang_zero)))))

;; div_two
(declare-fun div_two (angle) angle)

;; div_two'def
(assert
  (forall ((d angle))
    (= (div_two d) (real_to_ang
                     (infix_sldt (ang_meas d) (infix_pldt c_one c_one))))))

;; div_two'spec
(assert
  (forall ((d angle))
    (and
      (= (ang_meas (div_two d)) (infix_sldt
                                  (ang_meas d)
                                  (infix_pldt c_one c_one)))
      (= (ang_add (div_two d) (div_two d)) d))))

;; Div_two
(assert (forall ((d angle)) (= (ang_add (div_two d) (div_two d)) d)))

;; div_two_int_to_ang
(assert
  (forall ((k Int) (n Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 k) (< k (power 2 n)))
        (= (div_two (infix_sldtsl k n)) (infix_sldtsl k (+ n 1)))))))

;; ang_exp_mult
(assert
  (forall ((x angle) (xqt angle))
    (= (infix_asdt (ang_exp x) (ang_exp xqt)) (ang_exp (ang_add x xqt)))))

;; ang_exp_modulus
(assert (forall ((x angle)) (= (modulus (ang_exp x)) c_one)))

;; ang_exp_not_one
(assert
  (forall ((i complex))
    (=>
      (and (infix_lsdt c_zero i) (infix_lsdt i c_one))
      (not (= (ang_exp (real_to_ang i)) c_one)))))

;; ang_exp_not_by_modulus
(assert
  (forall ((i complex))
    (=>
      (and (infix_lsdt c_zero i) (infix_lsdt i c_one))
      (not (= (ang_exp (real_to_ang (modulus i))) c_one)))))

;; k_int_to_ang
(declare-fun k_int_to_ang (Int) angle)

;; k_int_to_ang'def
(assert
  (forall ((k Int)) (=> (<= 0 k) (= (k_int_to_ang k) (infix_sldtsl 1 k)))))

;; K_int_to_angplus_one
(assert
  (forall ((k Int))
    (=>
      (< 0 k)
      (= (ang_add (k_int_to_ang k) (k_int_to_ang k)) (k_int_to_ang (- k 1))))))

;; phase_inv_pre
(declare-fun phase_inv_pre (Int
  angle) angle)

;; phase_inv_pre'def
(assert
  (forall ((i Int) (d angle))
    (=>
      (<= 0 i)
      (ite (= i 0)
        (= (phase_inv_pre i d) d)
        (= (phase_inv_pre i d) (ang_inv (phase_inv_pre (- i 1) d)))))))

;; phase_inv_pre'spec
(assert
  (forall ((i Int) (d angle))
    (=>
      (<= 0 i)
      (and
        (=> (= (mod i 2) 0) (= (phase_inv_pre i d) d))
        (=> (= (mod i 2) 1) (= (phase_inv_pre i d) (ang_inv d)))))))

;; phase_inv_
(declare-fun phase_inv_ (Int
  angle) angle)

;; phase_inv_'def
(assert
  (forall ((i Int) (d angle))
    (ite (<= 0 i)
      (= (phase_inv_ i d) (phase_inv_pre i d))
      (= (phase_inv_ i d) (phase_inv_pre (- i) d)))))

;; phase_inv_'spec
(assert
  (forall ((i Int) (d angle))
    (and
      (=> (= (mod i 2) 0) (= (phase_inv_ i d) d))
      (=> (= (mod i 2) 1) (= (phase_inv_ i d) (ang_inv d))))))

;; infix -^'spec
(assert
  (forall ((d angle) (i Int))
    (and
      (=> (= (mod i 2) 0) (= (phase_inv_ i d) d))
      (=> (= (mod i 2) 1) (= (phase_inv_ i d) (ang_inv d))))))

;; Even_phase_inv
(assert
  (forall ((d angle))
    (forall ((i Int)) (=> (= (mod i 2) 0) (= (phase_inv_ i d) d)))))

;; Odd_phase_inv
(assert
  (forall ((d angle))
    (forall ((i Int)) (=> (= (mod i 2) 1) (= (phase_inv_ i d) (ang_inv d))))))

;; Gen_phase_inv
(assert
  (forall ((k Int) (n Int) (i Int))
    (=>
      (<= 0 n)
      (=>
        (<= 0 i)
        (= (phase_inv_ i (infix_sldtsl k n)) (infix_sldtsl
                                               (* (power (- 1) i) k)
                                               n))))))

;; Gen_phase_inv_neg
(assert
  (forall ((k Int) (n Int) (i Int))
    (=>
      (<= 0 n)
      (=>
        (< i 0)
        (= (phase_inv_ i (infix_sldtsl k n)) (infix_sldtsl
                                               (* (power (- 1) (- i)) k)
                                               n))))))

;; Ang_exp_inv
(assert
  (forall ((o angle))
    (= (ang_exp (ang_inv o)) (infix_sldt c_one (ang_exp o)))))

;; ang_inv_to_conjugate
(assert
  (forall ((o angle)) (= (ang_exp (ang_inv o)) (conjugate (ang_exp o)))))

;; exp_minus
(assert
  (forall ((x complex))
    (=>
      (real_ x)
      (= (exp1 (infix_asdt im (prefix_mndt x))) (conjugate
                                                  (exp1 (infix_asdt im x)))))))

;; conjugate_to_ang_inv
(assert
  (forall ((o angle)) (= (conjugate (ang_exp o)) (ang_exp (ang_inv o)))))

;; conjugate_inv_elim
(assert
  (forall ((o angle)) (= (conjugate (ang_exp (ang_inv o))) (ang_exp o))))

;; ang_exp_neg_conjugate
(assert
  (forall ((x complex))
    (=>
      (real_ x)
      (= (ang_exp (real_to_ang (prefix_mndt x))) (conjugate
                                                   (ang_exp (real_to_ang x)))))))

;; ang_exp_neg_conjugate_rev
(assert
  (forall ((x complex))
    (=>
      (real_ x)
      (= (conjugate (ang_exp (real_to_ang x))) (ang_exp
                                                 (real_to_ang
                                                   (prefix_mndt x)))))))

;; ang_mult_int_in
(assert
  (forall ((i Int) (k Int) (n Int))
    (= (ang_mult_int (infix_sldtsl k n) i) (infix_sldtsl (* i k) n))))

;; ang_mult_int_out
(assert
  (forall ((i Int) (k Int) (n Int))
    (=>
      (<= 0 n)
      (= (infix_sldtsl (* i k) n) (ang_mult_int (infix_sldtsl k n) i)))))

;; int_to_ang_cycles
(assert
  (forall ((k Int) (n Int) (i Int))
    (=>
      (<= 0 n)
      (=>
        (<= 0 i)
        (= (infix_sldtsl (+ k (* i (power 2 n))) n) (infix_sldtsl k n))))))

;; int_to_ang_eq
(assert
  (forall ((k1 Int) (k2 Int) (n1 Int) (n2 Int))
    (=>
      (= k1 k2)
      (=> (= n1 n2) (= (infix_sldtsl k1 n1) (infix_sldtsl k2 n2))))))

;; int_to_ang_cycles_neg
(assert
  (forall ((k Int) (n Int) (i Int))
    (=>
      (<= 0 n)
      (=>
        (<= i 0)
        (= (infix_sldtsl (+ k (* i (power 2 n))) n) (infix_sldtsl k n))))))

;; int_to_ang_cycles_gen
(assert
  (forall ((k Int) (n Int) (i Int))
    (=>
      (<= 0 n)
      (= (infix_sldtsl (+ k (* i (power 2 n))) n) (infix_sldtsl k n)))))

;; int_to_ang_cycles_zero
(assert
  (forall ((nqt Int) (n Int))
    (=>
      (and (<= 0 n) (<= n nqt))
      (= (infix_sldtsl (power 2 nqt) n) ang_zero))))

;; int_to_ang_cycles_zero_mult
(assert
  (forall ((k Int) (nqt Int) (n Int))
    (=>
      (and (<= 0 n) (<= n nqt))
      (= (infix_sldtsl (* k (power 2 nqt)) n) ang_zero))))

;; int_to_ang_cycles_zero_mult_
(assert
  (forall ((k Int) (nqt Int) (n Int))
    (=>
      (and (<= 0 n) (<= n nqt))
      (= (infix_sldtsl (* k (power 2 nqt)) n) ang_zero))))

;; int_to_ang_up
(assert
  (forall ((k Int) (n Int) (nqt Int))
    (=>
      (<= 0 n)
      (=>
        (<= 0 nqt)
        (= (infix_sldtsl (* k (power 2 nqt)) (+ n nqt)) (infix_sldtsl k n))))))

;; int_to_ang_mod
(assert
  (forall ((k Int) (n Int))
    (=> (<= 0 n) (= (infix_sldtsl k n) (infix_sldtsl (mod k (power 2 n)) n)))))

;; int_to_ang_equiv
(assert
  (forall ((k1 Int) (k2 Int) (n1 Int) (n2 Int))
    (=>
      (<= 0 n1)
      (=>
        (= (mod k1 (power 2 n1)) (mod k2 (power 2 n1)))
        (=> (= n1 n2) (= (infix_sldtsl k1 n1) (infix_sldtsl k2 n2)))))))

;; int_to_ang_red
(assert
  (forall ((k Int) (n Int))
    (=>
      (<= 1 n)
      (=>
        (not (= 0 k))
        (=>
          (= (mod k 2) 0)
          (= (infix_sldtsl k n) (infix_sldtsl (div k 2) (- n 1))))))))

;; int_to_ang_bin_rev
(assert
  (forall ((n Int) (i Int) (j Int))
    (=>
      (<= 0 n)
      (=>
        (<= 0 i)
        (=>
          (= j (- n 1))
          (= (infix_sldtsl (- (* i (power 2 j))) n) (infix_sldtsl
                                                      (* i (power 2 (- n 1)))
                                                      n)))))))

;; int_to_ang_bin_rev_
(assert
  (forall ((n Int) (i Int) (j Int))
    (=>
      (<= 0 n)
      (=>
        (<= 0 i)
        (=>
          (= j (- n 1))
          (= (infix_sldtsl (- (* i (power 2 j))) n) (infix_sldtsl
                                                      (* i (power 2 (- n 1)))
                                                      n)))))))

;; int_to_ang_add_rev
(assert
  (forall ((i Int) (j Int) (n Int))
    (=>
      (<= 0 n)
      (= (infix_sldtsl (+ i j) n) (ang_add
                                    (infix_sldtsl i n)
                                    (infix_sldtsl j n))))))

;; int_to_ang_ind_isum_plus_one
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int) (n Int))
    (=>
      (< i j)
      (=>
        (<= 0 n)
        (= (infix_sldtsl (ind_isum f i j) n) (ang_add
                                               (infix_sldtsl (select f i) n)
                                               (infix_sldtsl
                                                 (ind_isum f (+ i 1) j)
                                                 n)))))))

;; int_to_ang_ind_isum_plus_one_rev
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int) (n Int))
    (=>
      (< i j)
      (=>
        (<= 0 n)
        (= (infix_sldtsl (ind_isum f i j) n) (ang_add
                                               (infix_sldtsl
                                                 (ind_isum f (+ i 1) j)
                                                 n)
                                               (infix_sldtsl (select f i) n)))))))

;; int_to_ang_ind_isum_right_extension
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int) (n Int))
    (=>
      (< i j)
      (=>
        (<= 0 n)
        (= (infix_sldtsl (ind_isum f i j) n) (ang_add
                                               (infix_sldtsl
                                                 (ind_isum f i (- j 1))
                                                 n)
                                               (infix_sldtsl
                                                 (select f (- j 1))
                                                 n)))))))

;; int_to_ang_ind_isum_right_extension_rev
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int) (n Int))
    (=>
      (< i j)
      (=>
        (<= 0 n)
        (= (infix_sldtsl (ind_isum f i j) n) (ang_add
                                               (infix_sldtsl
                                                 (select f (- j 1))
                                                 n)
                                               (infix_sldtsl
                                                 (ind_isum f i (- j 1))
                                                 n)))))))

;; minus_int_to_ang_ind_isum_plus_one
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int) (n Int))
    (=>
      (< i j)
      (=>
        (<= 0 n)
        (= (infix_sldtsl (- (ind_isum f i j)) n) (ang_add
                                                   (infix_sldtsl
                                                     (- (select f i))
                                                     n)
                                                   (infix_sldtsl
                                                     (- (ind_isum
                                                          f
                                                          (+ i 1)
                                                          j))
                                                     n)))))))

;; minus_int_to_ang_ind_isum_plus_one_rev
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int) (n Int))
    (=>
      (< i j)
      (=>
        (<= 0 n)
        (= (infix_sldtsl (- (ind_isum f i j)) n) (ang_add
                                                   (infix_sldtsl
                                                     (- (ind_isum
                                                          f
                                                          (+ i 1)
                                                          j))
                                                     n)
                                                   (infix_sldtsl
                                                     (- (select f i))
                                                     n)))))))

;; minus_int_to_ang_ind_isum_right_extension
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int) (n Int))
    (=>
      (< i j)
      (=>
        (<= 0 n)
        (= (infix_sldtsl (- (ind_isum f i j)) n) (ang_add
                                                   (infix_sldtsl
                                                     (- (ind_isum
                                                          f
                                                          i
                                                          (- j 1)))
                                                     n)
                                                   (infix_sldtsl
                                                     (- (select f (- j 1)))
                                                     n)))))))

;; minus_int_to_ang_ind_isum_right_extension_rev
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int) (n Int))
    (=>
      (< i j)
      (=>
        (<= 0 n)
        (= (infix_sldtsl (- (ind_isum f i j)) n) (ang_add
                                                   (infix_sldtsl
                                                     (- (select f (- j 1)))
                                                     n)
                                                   (infix_sldtsl
                                                     (- (ind_isum
                                                          f
                                                          i
                                                          (- j 1)))
                                                     n)))))))

;; int_to_ang_simpl
(assert
  (forall ((k Int) (n1 Int) (n2 Int))
    (=>
      (<= 0 n1)
      (=>
        (<= 0 n2)
        (= (infix_sldtsl (* k (power 2 n1)) (+ n2 n1)) (infix_sldtsl k n2))))))

;; ang_add_eq
(assert
  (forall ((d1 angle) (d2 angle) (e1 angle) (e2 angle))
    (=> (= d1 e1) (=> (= d2 e2) (= (ang_add d1 d2) (ang_add e1 e2))))))

;; ang_add_comm
(assert (forall ((d1 angle) (d2 angle)) (= (ang_add d1 d2) (ang_add d2 d1))))

;; ang_add_eq_comm
(assert
  (forall ((d1 angle) (d2 angle) (d3 angle) (d4 angle))
    (=> (= d1 d3) (=> (= d2 d4) (= (ang_add d1 d2) (ang_add d4 d3))))))

;; ang_add_switch
(assert
  (forall ((a angle) (b angle) (c angle) (d angle))
    (= (ang_add (ang_add a b) (ang_add c d)) (ang_add
                                               (ang_add a c)
                                               (ang_add b d)))))

;; ang_mult_int_zero
(assert (forall ((theta angle)) (= (ang_mult_int theta 0) ang_zero)))

;; ang_div
(assert
  (forall ((k Int) (n Int) (i Int))
    (=>
      (<= 0 n)
      (=>
        (<= 0 i)
        (= (infix_sldtsl k n) (ang_mult_int
                                (infix_sldtsl k (+ n i))
                                (power 2 i)))))))

;; ang_zero_add
(assert
  (forall ((dqt angle) (d angle))
    (=> (= dqt ang_zero) (= (ang_add dqt d) d))))

;; int_to_ang_rev
(assert
  (forall ((k Int) (l Int) (n Int) (m Int))
    (=>
      (< 0 n)
      (=>
        (<= 0 k)
        (=>
          (= n (+ m 1))
          (= (infix_sldtsl (* (* (- k) l) (power 2 m)) n) (infix_sldtsl
                                                            (* (* k l) 
                                                            (power
                                                              2
                                                              m))
                                                            n)))))))

;; int_to_ang_rev_
(assert
  (forall ((k Int) (l Int) (n Int) (m Int))
    (=>
      (< 0 n)
      (=>
        (<= 0 k)
        (=>
          (<= 0 l)
          (=>
            (= n (+ m 1))
            (= (infix_sldtsl (* (* (- k) l) (power 2 m)) n) (infix_sldtsl
                                                              (* (* k l) 
                                                              (power
                                                                2
                                                                m))
                                                              n))))))))

;; ang_add_zero_d
(assert
  (forall ((dqt angle) (d angle))
    (=> (= dqt ang_zero) (= (ang_add d dqt) d))))

;; real_to_ang_distr_minus
(assert
  (forall ((x complex) (z complex) (t complex))
    (forall ((y Int))
      (=>
        (real_ x)
        (=>
          (real_ z)
          (=>
            (real_ t)
            (= (ang_add
                 (real_to_ang (infix_asdt x (i_to_c y)))
                 (real_to_ang
                   (infix_asdt (infix_asdt (i_to_c y) (prefix_mndt z)) t))) 
            (ang_mult_int
              (real_to_ang (infix_mndt x (infix_asdt z t)))
              y))))))))

;; ang_mult_int_exp_pos
(assert
  (forall ((o angle) (i Int))
    (=> (<= 0 i) (= (ang_exp (ang_mult_int o i)) (cpower (ang_exp o) i)))))

;; ang_mult_int_exp
(assert
  (forall ((o angle) (i Int))
    (= (ang_exp (ang_mult_int o i)) (cpower (ang_exp o) i))))

;; ang_mult_int_exp_rev
(assert
  (forall ((o angle) (i Int))
    (= (cpower (ang_exp o) i) (ang_exp (ang_mult_int o i)))))

;; cpower_ang_exp_real
(assert
  (forall ((x complex) (i Int))
    (=>
      (real_ x)
      (= (cpower (ang_exp (real_to_ang x)) i) (ang_exp
                                                (real_to_ang
                                                  (infix_asdt x (i_to_c i))))))))

;; ang_mult_int_add
(assert
  (forall ((o angle) (i Int) (iqt Int))
    (= (ang_mult_int o (+ i iqt)) (ang_add
                                    (ang_mult_int o i)
                                    (ang_mult_int o iqt)))))

;; ang_mult_int_plus_one
(assert
  (forall ((o angle) (i Int))
    (= (ang_add o (ang_mult_int o i)) (ang_mult_int o (+ i 1)))))

;; ang_mult_int_plus_one_rev
(assert
  (forall ((o angle) (i Int))
    (= (ang_mult_int o (+ 1 i)) (ang_add o (ang_mult_int o i)))))

;; ang_mult_int_double
(assert
  (forall ((o angle) (i Int))
    (= (ang_mult_int o (* 2 i)) (ang_add
                                  (ang_mult_int o i)
                                  (ang_mult_int o i)))))

;; ang_mult_int_inv_one
(assert (forall ((o angle)) (= (ang_mult_int o (- 1)) (ang_inv o))))

;; ang_mult_int_one
(assert (forall ((o angle) (n Int)) (=> (= n 1) (= (ang_mult_int o n) o))))

;; ang_mult_int_inv_rev
(assert (forall ((o angle)) (= (ang_inv o) (ang_mult_int o (- 1)))))

;; ang_mult_int_comp
(assert
  (forall ((o angle) (i Int) (j Int))
    (= (ang_mult_int (ang_mult_int o i) j) (ang_mult_int o (* i j)))))

;; ang_mult_int_comp_rev
(assert
  (forall ((o angle) (i Int) (j Int))
    (= (ang_mult_int o (* i j)) (ang_mult_int (ang_mult_int o i) j))))

;; add_ang_mult_int_pos
(assert
  (forall ((o angle) (oqt angle) (i Int))
    (=>
      (<= 0 i)
      (= (ang_add (ang_mult_int o i) (ang_mult_int oqt i)) (ang_mult_int
                                                             (ang_add o oqt)
                                                             i)))))

;; add_ang_mult_int
(assert
  (forall ((o angle) (oqt angle) (i Int))
    (= (ang_add (ang_mult_int o i) (ang_mult_int oqt i)) (ang_mult_int
                                                           (ang_add o oqt)
                                                           i))))

;; ang_substr
(declare-fun ang_substr (angle
  angle) angle)

;; ang_substr'def
(assert
  (forall ((o angle) (oqt angle))
    (= (ang_substr o oqt) (ang_add o (ang_inv oqt)))))

;; ang_substr_inv
(assert
  (forall ((o angle) (oqt angle))
    (= (ang_substr o (ang_mult_int oqt (- 1))) (ang_add o oqt))))

;; ang_mult_int_distr
(assert
  (forall ((o angle) (oqt angle) (n Int))
    (= (ang_mult_int (ang_add o oqt) n) (ang_add
                                          (ang_mult_int o n)
                                          (ang_mult_int oqt n)))))

;; ang_mult_int_distr_rev
(assert
  (forall ((o angle) (n1 Int) (n2 Int))
    (= (ang_add (ang_mult_int o n1) (ang_mult_int o n2)) (ang_mult_int
                                                           o
                                                           (+ n1 n2)))))

;; ang_add_assoc
(assert
  (forall ((o angle) (oqt angle) (oqtqt angle))
    (= (ang_add o (ang_add oqt oqtqt)) (ang_add (ang_add o oqt) oqtqt))))

;; ang_add_assoc_rev
(assert
  (forall ((o angle) (oqt angle) (oqtqt angle))
    (= (ang_add (ang_add o oqt) oqtqt) (ang_add o (ang_add oqt oqtqt)))))

;; ang_add_own_inv
(assert (forall ((o angle)) (= (ang_add (ang_mult_int o (- 1)) o) ang_zero)))

;; ang_exp_inv
(assert
  (forall ((o angle)) (= (ang_exp (ang_inv o)) (conjugate (ang_exp o)))))

;; ang_exp_one_one
(assert (= (ang_exp (infix_sldtsl 1 1)) (prefix_mndt c_one)))

;; int_to_ang_one_even
(assert
  (forall ((k Int)) (=> (= (even k) true) (= (infix_sldtsl k 1) ang_zero))))

;; int_to_ang_one_odd
(assert
  (forall ((k Int))
    (=> (= (odd k) true) (= (infix_sldtsl k 1) (infix_sldtsl 1 1)))))

;; ang_exp_one_one_expo
(assert
  (forall ((i Int))
    (=>
      (<= 0 i)
      (= (ang_exp (ang_mult_int (infix_sldtsl 1 1) i)) (ite (= (even i) true)
                                                         c_one
                                                         (prefix_mndt c_one))))))

;; int_to_ang_zero_den
(assert
  (forall ((k Int) (n Int)) (=> (= n 0) (= (infix_sldtsl k n) ang_zero))))

;; int_to_ang_minus_up
(assert
  (forall ((k Int) (n Int))
    (= (infix_sldtsl k (- n)) (infix_sldtsl (- k) n))))

;; int_to_ang_minus_down
(assert
  (forall ((k Int) (n Int))
    (= (infix_sldtsl (- k) (- n)) (infix_sldtsl k n))))

;; int_to_ang_inv
(assert
  (forall ((k Int) (n Int))
    (= (ang_inv (infix_sldtsl k n)) (infix_sldtsl k (- n)))))

;; int_to_ang_inv_rev
(assert
  (forall ((k Int) (n Int))
    (= (infix_sldtsl k (- n)) (ang_inv (infix_sldtsl k n)))))

;; int_to_ang_inv_add
(assert
  (forall ((k Int) (n Int))
    (= (ang_add (infix_sldtsl k n) (infix_sldtsl k (- n))) ang_zero)))

;; ang_mult_int_neutral
(assert
  (forall ((theta angle) (n Int))
    (=> (= theta ang_zero) (= (ang_mult_int theta n) ang_zero))))

;; phase_inv_neutral
(assert
  (forall ((theta angle) (n Int))
    (=> (= theta ang_zero) (= (phase_inv_ n theta) ang_zero))))

;; binary
(declare-fun binary ((Array Int Int)) Bool)

;; binary'def
(assert
  (forall ((t (Array Int Int)))
    (=
      (binary t)
      (forall ((k Int)) (and (<= 0 (select t k)) (< (select t k) 2))))))

;; binary_l
(declare-fun binary_l ((Array Int Int)
  Int) Bool)

;; binary_l'def
(assert
  (forall ((t (Array Int Int)) (l Int))
    (=
      (binary_l t l)
      (forall ((k Int))
        (=>
          (and (<= 0 k) (< k l))
          (and (<= 0 (select t k)) (< (select t k) 2)))))))

;; set_binary_l
(assert
  (forall ((t (Array Int Int)) (l Int))
    (=>
      (forall ((k Int))
        (=>
          (and (<= 0 k) (< k l))
          (and (<= 0 (select t k)) (< (select t k) 2))))
      (binary_l t l))))

;; get_binary_l
(assert
  (forall ((t (Array Int Int)) (l Int))
    (=>
      (binary_l t l)
      (forall ((k Int))
        (=>
          (and (<= 0 k) (< k l))
          (and (<= 0 (select t k)) (< (select t k) 2)))))))

;; get_binary_one
(assert
  (forall ((t (Array Int Int)) (k Int) (l Int))
    (=>
      (binary_l t l)
      (=>
        (and (<= 0 k) (< k l))
        (=> (not (= (select t k) 0)) (= (select t k) 1))))))

;; get_binary_zero
(assert
  (forall ((t (Array Int Int)) (k Int) (l Int))
    (=>
      (binary_l t l)
      (=>
        (and (<= 0 k) (< k l))
        (=> (not (= (select t k) 1)) (= (select t k) 0))))))

;; binary_is_binary_l
(assert
  (forall ((t (Array Int Int)) (l Int)) (=> (binary t) (binary_l t l))))

;; binary_leq
(assert
  (forall ((t (Array Int Int)) (k Int) (l Int))
    (=> (<= l k) (=> (binary_l t k) (binary_l t l)))))

;; set_binary
(assert
  (forall ((t (Array Int Int)))
    (=>
      (forall ((k Int)) (and (<= 0 (select t k)) (< (select t k) 2)))
      (binary t))))

;; get_binary
(assert
  (forall ((t (Array Int Int)))
    (=>
      (binary t)
      (forall ((k Int)) (and (<= 0 (select t k)) (< (select t k) 2))))))

;; shift
(declare-fun shift (ty
  uni
  Int
  Int) uni)

;; shift_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 Int) (x2 Int)) (sort a (shift a x x1 x2)))))

;; shift'def
(assert
  (forall ((f (Array Int Int)) (i Int) (k Int))
    (= (tb2t8 (shift int (t2tb7 f) i k)) (select f (+ k i)))))

;; shift'def
(assert
  (forall ((a ty))
    (forall ((f uni) (i Int) (k Int))
      (= (shift a f i k) (infix_at a int f (t2tb8 (+ k i)))))))

;; shift_value
(assert
  (forall ((f (Array Int Int)) (i Int) (k Int))
    (= (tb2t8 (shift int (t2tb7 f) i k)) (select f (+ k i)))))

;; shift_value
(assert
  (forall ((a ty))
    (forall ((f uni) (i Int) (k Int))
      (= (shift a f i k) (infix_at a int f (t2tb8 (+ k i)))))))

;; shiftz
(assert
  (forall ((f (Array Int Int)) (k Int))
    (= (tb2t8 (shift int (t2tb7 f) 0 k)) (select f k))))

;; shiftz
(assert
  (forall ((a ty))
    (forall ((f uni) (k Int))
      (= (shift a f 0 k) (infix_at a int f (t2tb8 k))))))

;; shiftz_gen
(assert
  (forall ((f (Array Int Int)) (i Int) (k Int))
    (=> (= i 0) (= (tb2t8 (shift int (t2tb7 f) i k)) (select f k)))))

;; shiftz_gen
(assert
  (forall ((a ty))
    (forall ((f uni) (i Int) (k Int))
      (=> (= i 0) (= (shift a f i k) (infix_at a int f (t2tb8 k)))))))

;; shift_closure
(declare-fun shift_closure (ty) uni)

;; shift_closure_sort
(assert
  (forall ((a ty))
    (sort
      (infix_mngt (infix_mngt int a) (infix_mngt int (infix_mngt int a)))
      (shift_closure a))))

;; t2tb
(declare-fun t2tb70 ((Array (Array Int Int) (Array Int (Array Int Int)))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (Array Int Int) (Array Int (Array Int Int)))))
    (sort
      (infix_mngt (infix_mngt int int) (infix_mngt int (infix_mngt int int)))
      (t2tb70 x))))

;; tb2t
(declare-fun tb2t70 (uni) (Array (Array Int Int) (Array Int (Array Int Int))))

;; BridgeL
(assert
  (forall ((i (Array (Array Int Int) (Array Int (Array Int Int)))))
    (! (= (tb2t70 (t2tb70 i)) i) :pattern ((t2tb70 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb70 (tb2t70 j)) j) :pattern ((t2tb70 (tb2t70 j))) )))

;; shift_closure_def
(assert
  (forall ((y (Array Int Int)) (y1 Int) (y2 Int))
    (= (select (tb2t7
                 (infix_at
                   (infix_mngt int int)
                   int
                   (infix_at
                     (infix_mngt int (infix_mngt int int))
                     (infix_mngt int int)
                     (shift_closure int)
                     (t2tb7 y))
                   (t2tb8 y1))) y2) (tb2t8 (shift int (t2tb7 y) y1 y2)))))

;; shift_closure_def
(assert
  (forall ((a ty))
    (forall ((y uni) (y1 Int) (y2 Int))
      (= (infix_at
           a
           int
           (infix_at
             (infix_mngt int a)
             int
             (infix_at
               (infix_mngt int (infix_mngt int a))
               (infix_mngt int a)
               (shift_closure a)
               y)
             (t2tb8 y1))
           (t2tb8 y2)) (shift a y y1 y2)))))

;; shiftz_quant
(assert
  (forall ((a ty))
    (forall ((f uni))
      (=>
        (sort (infix_mngt int a) f)
        (= (infix_at
             (infix_mngt int a)
             int
             (infix_at
               (infix_mngt int (infix_mngt int a))
               (infix_mngt int a)
               (shift_closure a)
               f)
             (t2tb8 0)) f)))))

;; shiftz_quant_rev
(assert
  (forall ((a ty))
    (forall ((f uni))
      (=>
        (sort (infix_mngt int a) f)
        (= f (infix_at
               (infix_mngt int a)
               int
               (infix_at
                 (infix_mngt int (infix_mngt int a))
                 (infix_mngt int a)
                 (shift_closure a)
                 f)
               (t2tb8 0)))))))

;; concat_fun
(declare-fun concat_fun (ty
  uni
  uni
  Int
  Int) uni)

;; concat_fun_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 uni) (x2 Int) (x3 Int))
      (sort a (concat_fun a x x1 x2 x3)))))

;; concat_fun'def
(assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (i Int) (k Int))
    (ite (< k i)
      (= (tb2t8 (concat_fun int (t2tb7 f) (t2tb7 g) i k)) (select f k))
      (= (tb2t8 (concat_fun int (t2tb7 f) (t2tb7 g) i k)) (select g (- k i))))))

;; concat_fun'def
(assert
  (forall ((a ty))
    (forall ((f uni) (g uni) (i Int) (k Int))
      (ite (< k i)
        (= (concat_fun a f g i k) (infix_at a int f (t2tb8 k)))
        (= (concat_fun a f g i k) (infix_at a int g (t2tb8 (- k i))))))))

;; shift_add
(assert
  (forall ((a ty))
    (forall ((f uni) (i Int) (j Int) (k Int))
      (= (shift
           a
           (infix_at
             (infix_mngt int a)
             int
             (infix_at
               (infix_mngt int (infix_mngt int a))
               (infix_mngt int a)
               (shift_closure a)
               f)
             (t2tb8 j))
           i
           k) (shift a f (+ i j) k)))))

;; concat_fun_value
(assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (i Int) (k Int))
    (= (tb2t8 (concat_fun int (t2tb7 f) (t2tb7 g) i k)) (ite (< k i)
                                                          (select f k)
                                                          (select g (- k i))))))

;; concat_fun_value
(assert
  (forall ((a ty))
    (forall ((f uni) (g uni) (i Int) (k Int))
      (= (concat_fun a f g i k) (ite (< k i)
                                  (infix_at a int f (t2tb8 k))
                                  (infix_at a int g (t2tb8 (- k i))))))))

;; concat_eq
(assert
  (forall ((f1 (Array Int Int)) (g1 (Array Int Int)) (f2 (Array Int Int)) (g2 (Array Int Int)) (i1 Int) (i2 Int) (k Int))
    (=>
      (forall ((l Int)) (=> (< l i1) (= (select f1 l) (select f2 l))))
      (=>
        (forall ((l Int)) (=> (<= 0 l) (= (select g1 l) (select g2 l))))
        (=>
          (= i1 i2)
          (= (tb2t8 (concat_fun int (t2tb7 f1) (t2tb7 g1) i1 k)) (tb2t8
                                                                   (concat_fun
                                                                    int
                                                                    (t2tb7
                                                                    f2)
                                                                    (t2tb7
                                                                    g2)
                                                                    i2
                                                                    k))))))))

;; concat_eq
(assert
  (forall ((a ty))
    (forall ((f1 uni) (g1 uni) (f2 uni) (g2 uni) (i1 Int) (i2 Int) (k Int))
      (=>
        (forall ((l Int))
          (=>
            (< l i1)
            (= (infix_at a int f1 (t2tb8 l)) (infix_at a int f2 (t2tb8 l)))))
        (=>
          (forall ((l Int))
            (=>
              (<= 0 l)
              (= (infix_at a int g1 (t2tb8 l)) (infix_at a int g2 (t2tb8 l)))))
          (=>
            (= i1 i2)
            (= (concat_fun a f1 g1 i1 k) (concat_fun a f2 g2 i2 k))))))))

;; mod_func
(declare-fun mod_func (ty
  uni
  Int
  Int) uni)

;; mod_func_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 Int) (x2 Int)) (sort a (mod_func a x x1 x2)))))

;; mod_func'def
(assert
  (forall ((f (Array Int Int)) (k Int) (i Int))
    (=>
      (< 0 k)
      (= (tb2t8 (mod_func int (t2tb7 f) k i)) (select f (mod i k))))))

;; mod_func'def
(assert
  (forall ((a ty))
    (forall ((f uni) (k Int) (i Int))
      (=>
        (< 0 k)
        (= (mod_func a f k i) (infix_at a int f (t2tb8 (mod i k))))))))

;; mod_func_inf
(assert
  (forall ((f (Array Int Int)) (k Int) (i Int))
    (=>
      (< 0 k)
      (=>
        (and (<= 0 i) (< i k))
        (= (tb2t8 (mod_func int (t2tb7 f) k i)) (select f i))))))

;; mod_func_inf
(assert
  (forall ((a ty))
    (forall ((f uni) (k Int) (i Int))
      (=>
        (< 0 k)
        (=>
          (and (<= 0 i) (< i k))
          (= (mod_func a f k i) (infix_at a int f (t2tb8 i))))))))

;; mod_func_closure
(declare-fun mod_func_closure (ty) uni)

;; mod_func_closure_sort
(assert
  (forall ((a ty))
    (sort
      (infix_mngt (infix_mngt int a) (infix_mngt int (infix_mngt int a)))
      (mod_func_closure a))))

;; mod_func_closure_def
(assert
  (forall ((y (Array Int Int)) (y1 Int) (y2 Int))
    (= (select (tb2t7
                 (infix_at
                   (infix_mngt int int)
                   int
                   (infix_at
                     (infix_mngt int (infix_mngt int int))
                     (infix_mngt int int)
                     (mod_func_closure int)
                     (t2tb7 y))
                   (t2tb8 y1))) y2) (tb2t8 (mod_func int (t2tb7 y) y1 y2)))))

;; mod_func_closure_def
(assert
  (forall ((a ty))
    (forall ((y uni) (y1 Int) (y2 Int))
      (= (infix_at
           a
           int
           (infix_at
             (infix_mngt int a)
             int
             (infix_at
               (infix_mngt int (infix_mngt int a))
               (infix_mngt int a)
               (mod_func_closure a)
               y)
             (t2tb8 y1))
           (t2tb8 y2)) (mod_func a y y1 y2)))))

;; shift_mod
(assert
  (forall ((a ty))
    (forall ((f uni) (k Int) (i Int))
      (=>
        (< 0 k)
        (= (mod_func a f k i) (shift
                                a
                                (infix_at
                                  (infix_mngt int a)
                                  int
                                  (infix_at
                                    (infix_mngt int (infix_mngt int a))
                                    (infix_mngt int a)
                                    (mod_func_closure a)
                                    f)
                                  (t2tb8 k))
                                k
                                i))))))

;; shift_mod_rev
(assert
  (forall ((a ty))
    (forall ((f uni) (k Int) (i Int))
      (=>
        (< 0 k)
        (= (shift
             a
             (infix_at
               (infix_mngt int a)
               int
               (infix_at
                 (infix_mngt int (infix_mngt int a))
                 (infix_mngt int a)
                 (mod_func_closure a)
                 f)
               (t2tb8 k))
             k
             i) (mod_func a f k i))))))

;; head_bit
(declare-fun head_bit (Int
  Int) Int)

;; head_bit'def
(assert
  (forall ((i Int) (k Int))
    (=>
      (< 0 k)
      (=>
        (and (<= 0 i) (< i (power 2 k)))
        (= (head_bit i k) (div i (power 2 (- k 1))))))))

;; head_bit'spec
(assert
  (forall ((i Int) (k Int))
    (=>
      (< 0 k)
      (=>
        (and (<= 0 i) (< i (power 2 k)))
        (and (<= 0 (head_bit i k)) (<= (head_bit i k) 1))))))

;; tail_bits
(declare-fun tail_bits (Int
  Int) Int)

;; tail_bits'def
(assert
  (forall ((i Int) (k Int))
    (=>
      (< 0 k)
      (=>
        (and (<= 0 i) (< i (power 2 k)))
        (= (tail_bits i k) (mod i (power 2 (- k 1))))))))

;; tail_bits'spec
(assert
  (forall ((i Int) (k Int))
    (=>
      (< 0 k)
      (=>
        (and (<= 0 i) (< i (power 2 k)))
        (and (<= 0 (tail_bits i k)) (<= (tail_bits i k) (power 2 (- k 1))))))))

;; ht_to_int
(declare-fun ht_to_int (Int
  Int
  Int) Int)

;; ht_to_int'def
(assert
  (forall ((hi Int) (ti Int) (k Int))
    (=>
      (< 0 k)
      (=>
        (and (<= 0 hi) (< hi 2))
        (=>
          (and (<= 0 ti) (< ti (power 2 (- k 1))))
          (= (ht_to_int hi ti k) (+ (* hi (power 2 (- k 1))) ti)))))))

;; head_tail_inv
(assert
  (forall ((i Int) (k Int))
    (=>
      (< 0 k)
      (=>
        (and (<= 0 i) (< i (power 2 k)))
        (= (ht_to_int (head_bit i k) (tail_bits i k) k) i)))))

;; ht_to_int_head
(assert
  (forall ((i Int) (ti Int) (k Int))
    (=>
      (< 0 k)
      (=>
        (and (<= 0 i) (< i (power 2 k)))
        (=>
          (and (<= 0 ti) (< ti (power 2 (- k 1))))
          (= (head_bit (ht_to_int (head_bit i k) ti k) k) (head_bit i k)))))))

;; ht_to_int_tail
(assert
  (forall ((hi Int) (i Int) (k Int))
    (=>
      (< 0 k)
      (=>
        (and (<= 0 i) (< i (power 2 k)))
        (=>
          (and (<= 0 hi) (< hi 2))
          (= (tail_bits (ht_to_int hi (tail_bits i k) k) k) (tail_bits i k)))))))

;; concat_fun_bin_i
(assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (i Int) (k Int))
    (=>
      (binary f)
      (=>
        (binary g)
        (and
          (<= 0 (tb2t8 (concat_fun int (t2tb7 f) (t2tb7 g) i k)))
          (< (tb2t8 (concat_fun int (t2tb7 f) (t2tb7 g) i k)) 2))))))

;; shift_bin_i
(assert
  (forall ((f (Array Int Int)) (i Int) (k Int))
    (=>
      (binary f)
      (and
        (<= 0 (tb2t8 (shift int (t2tb7 f) i k)))
        (< (tb2t8 (shift int (t2tb7 f) i k)) 2)))))

;; concat_fun_closure
(declare-fun concat_fun_closure (ty) uni)

;; concat_fun_closure_sort
(assert
  (forall ((a ty))
    (sort
      (infix_mngt
        (infix_mngt int a)
        (infix_mngt (infix_mngt int a) (infix_mngt int (infix_mngt int a))))
      (concat_fun_closure a))))

;; t2tb
(declare-fun t2tb71 ((Array (Array Int Int) (Array (Array Int Int) (Array Int (Array Int Int))))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (Array Int Int) (Array (Array Int Int) (Array Int (Array Int Int))))))
    (sort
      (infix_mngt
        (infix_mngt int int)
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt int (infix_mngt int int))))
      (t2tb71 x))))

;; tb2t
(declare-fun tb2t71 (uni) (Array (Array Int Int) (Array (Array Int Int) (Array Int (Array Int Int)))))

;; BridgeL
(assert
  (forall ((i (Array (Array Int Int) (Array (Array Int Int) (Array Int (Array Int Int))))))
    (! (= (tb2t71 (t2tb71 i)) i) :pattern ((t2tb71 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb71 (tb2t71 j)) j) :pattern ((t2tb71 (tb2t71 j))) )))

;; concat_fun_closure_def
(assert
  (forall ((y (Array Int Int)) (y1 (Array Int Int)) (y2 Int) (y3 Int))
    (= (select (tb2t7
                 (infix_at
                   (infix_mngt int int)
                   int
                   (infix_at
                     (infix_mngt int (infix_mngt int int))
                     (infix_mngt int int)
                     (infix_at
                       (infix_mngt
                         (infix_mngt int int)
                         (infix_mngt int (infix_mngt int int)))
                       (infix_mngt int int)
                       (concat_fun_closure int)
                       (t2tb7 y))
                     (t2tb7 y1))
                   (t2tb8 y2))) y3) (tb2t8
                                      (concat_fun
                                        int
                                        (t2tb7 y)
                                        (t2tb7 y1)
                                        y2
                                        y3)))))

;; concat_fun_closure_def
(assert
  (forall ((a ty))
    (forall ((y uni) (y1 uni) (y2 Int) (y3 Int))
      (= (infix_at
           a
           int
           (infix_at
             (infix_mngt int a)
             int
             (infix_at
               (infix_mngt int (infix_mngt int a))
               (infix_mngt int a)
               (infix_at
                 (infix_mngt
                   (infix_mngt int a)
                   (infix_mngt int (infix_mngt int a)))
                 (infix_mngt int a)
                 (concat_fun_closure a)
                 y)
               y1)
             (t2tb8 y2))
           (t2tb8 y3)) (concat_fun a y y1 y2 y3)))))

;; concat_fun_bin
(assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (i Int))
    (=>
      (binary f)
      (=>
        (binary g)
        (binary
          (tb2t7
            (infix_at
              (infix_mngt int int)
              int
              (infix_at
                (infix_mngt int (infix_mngt int int))
                (infix_mngt int int)
                (infix_at
                  (infix_mngt
                    (infix_mngt int int)
                    (infix_mngt int (infix_mngt int int)))
                  (infix_mngt int int)
                  (concat_fun_closure int)
                  (t2tb7 f))
                (t2tb7 g))
              (t2tb8 i))))))))

;; mod_func_bin
(assert
  (forall ((f (Array Int Int)) (k Int))
    (=>
      (< 0 k)
      (=>
        (binary f)
        (binary
          (tb2t7
            (infix_at
              (infix_mngt int int)
              int
              (infix_at
                (infix_mngt int (infix_mngt int int))
                (infix_mngt int int)
                (mod_func_closure int)
                (t2tb7 f))
              (t2tb8 k))))))))

;; shift_bin
(assert
  (forall ((f (Array Int Int)) (i Int))
    (=>
      (binary f)
      (binary
        (tb2t7
          (infix_at
            (infix_mngt int int)
            int
            (infix_at
              (infix_mngt int (infix_mngt int int))
              (infix_mngt int int)
              (shift_closure int)
              (t2tb7 f))
            (t2tb8 i)))))))

;; fc
(declare-fun fc121 ((Array Int Int)
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (x Int))
    (= (select (fc121 f g) x) (select f (select g x)))))

;; binary_comp
(assert
  (forall ((f (Array Int Int)) (g (Array Int Int)))
    (=> (binary f) (binary (fc121 f g)))))

;; set_is_all_binary
(assert
  (forall ((t (Array Int Int)))
    (=>
      (forall ((k Int)) (and (<= 0 (select t k)) (< (select t k) 2)))
      (binary t))))

;; nary_length
(declare-fun nary_length (Int
  Int) Int)

;; nary_length'spec
(assert
  (forall ((i Int) (n Int))
    (=>
      (< 1 n)
      (=>
        (<= 0 i)
        (and
          (=>
            (< 0 i)
            (and
              (<= (power n (- (nary_length i n) 1)) i)
              (< i (power n (nary_length i n)))))
          (and
            (=> (< i n) (= (nary_length i n) 1))
            (and
              (<= 1 (nary_length i n))
              (= i (mod i (power n (nary_length i n)))))))))))

;; binary_length
(declare-fun binary_length (Int) Int)

;; binary_length'def
(assert
  (forall ((i Int)) (=> (<= 0 i) (= (binary_length i) (nary_length i 2)))))

;; binary_length'spec
(assert
  (forall ((i Int))
    (=>
      (<= 0 i)
      (and
        (=>
          (< 0 i)
          (and
            (<= (power 2 (- (binary_length i) 1)) i)
            (< i (power 2 (binary_length i)))))
        (and
          (=> (< i 2) (= (binary_length i) 1))
          (and
            (<= 1 (binary_length i))
            (= i (mod i (power 2 (binary_length i))))))))))

;; set_binary_length
(assert
  (forall ((i Int) (k Int))
    (=>
      (<= 0 i)
      (=>
        (<= 0 k)
        (=>
          (=> (< 0 i) (and (<= (power 2 (- k 1)) i) (< i (power 2 k))))
          (=> (=> (< i 2) (= k 1)) (= k (binary_length i))))))))

;; set_binary_length_b
(assert
  (forall ((i Int) (k Int))
    (=>
      (<= 0 i)
      (=> (< 0 k) (=> (< i (power 2 k)) (<= (binary_length i) k))))))

(declare-sort bitvec 0)

;; bitvec
(declare-fun bitvec1 () ty)

;; value
(declare-fun value (bitvec) (Array Int Int))

;; length
(declare-fun length (bitvec) Int)

;; bitvec'invariant
(assert
  (forall ((self bitvec))
    (! (and
         (<= 0 (length self))
         (and
           (forall ((i Int))
             (=>
               (and (<= 0 i) (< i (length self)))
               (and
                 (<= 0 (select (value self) i))
                 (< (select (value self) i) 2))))
           (forall ((i Int))
             (=>
               (not (and (<= 0 i) (< i (length self))))
               (= (select (value self) i) 0))))) :pattern ((length self)) :pattern (
    (value
      self)) )))

;; bvlength
(declare-fun bvlength ((Array Int Int)
  Int) Bool)

;; bvlength'def
(assert
  (forall ((f (Array Int Int)) (i Int))
    (=
      (bvlength f i)
      (forall ((k Int))
        (=>
          (and (<= 0 k) (< k i))
          (and (<= 0 (select f k)) (< (select f k) 2)))))))

;; binary_mult
(assert
  (forall ((a Int) (b Int)) (= (mod (* a b) 2) (* (mod a 2) (mod b 2)))))

;; getbv'spec
(assert (forall ((a bitvec)) (binary (value a))))

;; to_bool
(declare-fun to_bool (Int) Bool)

;; to_bool'def
(assert
  (forall ((i Int))
    (=>
      (and (<= 0 i) (< i 2))
      (ite (not (= i 0)) (= (to_bool i) true) (= (to_bool i) false)))))

;; getbv_bound
(assert
  (forall ((bv1 bitvec) (i Int))
    (and (<= 0 (select (value bv1) i)) (< (select (value bv1) i) 2))))

;; getbv_eq
(assert
  (forall ((bvx bitvec) (bvy bitvec) (i Int))
    (=> (= bvx bvy) (= (select (value bvx) i) (select (value bvy) i)))))

;; getbv_eq_gen
(assert
  (forall ((bvx bitvec) (bvy bitvec) (i Int) (j Int))
    (=>
      (= bvx bvy)
      (=> (= i j) (= (select (value bvx) i) (select (value bvy) j))))))

;; setbv
(declare-fun setbv ((Array Int Int)
  Int
  Int) (Array Int Int))

;; setbv'def
(assert
  (forall ((bv1 (Array Int Int)) (i Int) (j Int))
    (forall ((k Int))
      (= (select (setbv bv1 i j) k) (ite (= k i) j (select bv1 k))))))

;; setbv'spec
(assert
  (forall ((bv1 (Array Int Int)) (i Int) (j Int))
    (and
      (forall ((k Int))
        (=> (not (= k i)) (= (select (setbv bv1 i j) k) (select bv1 k))))
      (= (select (setbv bv1 i j) i) j))))

;; setbv_int
(declare-fun setbv_int ((Array Int Int)
  (Array Int Int)
  Int
  Int) (Array Int Int))

;; setbv_int'def
(assert
  (forall ((bv1 (Array Int Int)) (bv2 (Array Int Int)) (i Int) (j Int))
    (forall ((k Int))
      (= (select (setbv_int bv1 bv2 i j) k) (ite (and (< i k) (<= k j))
                                              (select bv2 (- k i))
                                              (select bv1 k))))))

;; setbv_int'spec
(assert
  (forall ((bv1 (Array Int Int)) (bv2 (Array Int Int)) (i Int) (j Int))
    (and
      (forall ((k Int))
        (=>
          (and (< i k) (<= k j))
          (= (select (setbv_int bv1 bv2 i j) k) (select bv2 (- k i)))))
      (and
        (forall ((k Int))
          (=> (<= k i) (= (select (setbv_int bv1 bv2 i j) k) (select bv1 k))))
        (forall ((k Int))
          (=> (< j k) (= (select (setbv_int bv1 bv2 i j) k) (select bv1 k))))))))

;; set_bvlength
(assert
  (forall ((bv1 bitvec) (i Int))
    (=>
      (forall ((k Int))
        (=>
          (and (<= 1 k) (< k i))
          (and (<= 0 (select (value bv1) k)) (< (select (value bv1) k) 2))))
      (bvlength (value bv1) i))))

;; null_product_bitvec
(assert
  (forall ((x bitvec) (n Int))
    (=>
      (= n (length x))
      (=>
        (forall ((i Int))
          (=> (and (<= 0 i) (< i n)) (= (select (value x) i) 1)))
        (= (ind_iproduct (value x) 0 n) 1)))))

;; non_null_product_bitvec
(assert
  (forall ((x bitvec) (n Int))
    (=>
      (= n (length x))
      (=>
        (not
          (forall ((i Int))
            (=> (and (<= 0 i) (< i n)) (= (select (value x) i) 1))))
        (= (ind_iproduct (value x) 0 n) 0)))))

;; fc
(declare-fun fc122 (bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((x bitvec) (i Int))
    (= (select (fc122 x) i) (- 1 (select (value x) i)))))

;; null_product_bitvec_inv
(assert
  (forall ((x bitvec) (n Int))
    (=>
      (= n (length x))
      (=>
        (forall ((i Int))
          (=> (and (<= 0 i) (< i n)) (= (select (value x) i) 0)))
        (= (ind_iproduct (fc122 x) 0 n) 1)))))

;; fc
(declare-fun fc123 (bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((x bitvec) (i Int))
    (= (select (fc123 x) i) (- 1 (select (value x) i)))))

;; non_null_product_bitvec_inv
(assert
  (forall ((x bitvec) (n Int))
    (=>
      (= n (length x))
      (=>
        (not
          (forall ((i Int))
            (=> (and (<= 0 i) (< i n)) (= (select (value x) i) 0))))
        (= (ind_iproduct (fc123 x) 0 n) 0)))))

;; null_product_bitvec_rev
(assert
  (forall ((x bitvec) (n Int))
    (=>
      (= n (length x))
      (=>
        (= (ind_iproduct (value x) 0 n) 1)
        (forall ((i Int))
          (=> (and (<= 0 i) (< i n)) (= (select (value x) i) 1)))))))

;; non_null_product_bitvec_rev
(assert
  (forall ((x bitvec) (n Int))
    (=>
      (= n (length x))
      (=>
        (= (ind_iproduct (value x) 0 n) 0)
        (not
          (forall ((i Int))
            (=> (and (<= 0 i) (< i n)) (= (select (value x) i) 1))))))))

;; fc
(declare-fun fc124 (bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((x bitvec) (i Int))
    (= (select (fc124 x) i) (- 1 (select (value x) i)))))

;; null_product_bitvec_inv_rev
(assert
  (forall ((x bitvec) (n Int))
    (=>
      (= n (length x))
      (=>
        (= (ind_iproduct (fc124 x) 0 n) 1)
        (forall ((i Int))
          (=> (and (<= 0 i) (< i n)) (= (select (value x) i) 0)))))))

;; fc
(declare-fun fc125 (bitvec) (Array Int Int))

;; fc
(declare-fun fc126 (bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((x bitvec) (i Int))
    (= (select (fc125 x) i) (- 1 (select (value x) i)))))

;; fc'def
(assert
  (forall ((x bitvec) (i Int))
    (= (select (fc126 x) i) (- 1 (select (value x) i)))))

;; inter
(assert
  (forall ((x bitvec) (n Int) (k Int))
    (=>
      (= n (length x))
      (=>
        (= (ind_iproduct (fc125 x) 0 n) 0)
        (=>
          (and (<= 0 k) (<= k n))
          (=>
            (forall ((i Int))
              (=> (and (<= 0 i) (< i n)) (= (select (value x) i) 0)))
            (= (ind_iproduct (fc126 x) 0 k) 1)))))))

;; fc
(declare-fun fc127 (bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((x bitvec) (i Int))
    (= (select (fc127 x) i) (- 1 (select (value x) i)))))

;; non_null_product_bitvec_inv_rev
(assert
  (forall ((x bitvec) (n Int))
    (=>
      (= n (length x))
      (=>
        (= (ind_iproduct (fc127 x) 0 n) 0)
        (not
          (forall ((i Int))
            (=> (and (<= 0 i) (< i n)) (= (select (value x) i) 0))))))))

;; set_flength
(assert
  (forall ((f (Array Int Int)) (i Int))
    (=>
      (forall ((k Int))
        (=>
          (and (<= 0 k) (< k i))
          (and (<= 0 (select f k)) (< (select f k) 2))))
      (bvlength f i))))

;; get_bvlength
(assert
  (forall ((f (Array Int Int)) (i Int))
    (=>
      (bvlength f i)
      (forall ((k Int))
        (=>
          (and (<= 0 k) (< k i))
          (and (<= 0 (select f k)) (< (select f k) 2)))))))

;; set_bv_to
(assert
  (forall ((f (Array Int Int)) (i Int))
    (=>
      (< 0 i)
      (=>
        (forall ((j Int))
          (=>
            (and (<= 0 j) (< j i))
            (and (<= 0 (select f j)) (<= (select f j) 1))))
        (bvlength f i)))))

;; set_in_range_val
(assert
  (forall ((bv1 bitvec) (i Int))
    (=>
      (and (<= 0 i) (< i (length bv1)))
      (and (<= 0 (select (value bv1) i)) (< (select (value bv1) i) 2)))))

;; bvlengthm
(assert
  (forall ((bv1 bitvec) (i Int))
    (=> (and (<= 0 i) (< i (length bv1))) (bvlength (value bv1) i))))

;; in_range
(declare-fun in_range (bitvec
  Int) Bool)

;; in_range'def
(assert
  (forall ((bv1 bitvec) (r Int))
    (= (in_range bv1 r) (and (<= 0 r) (< r (length bv1))))))

;; binary_bv
(assert
  (forall ((bv1 bitvec) (i Int))
    (=>
      (in_range bv1 i)
      (and (<= 0 (select (value bv1) i)) (<= (select (value bv1) i) 1)))))

;; equal_bv
(assert
  (forall ((m bitvec) (n bitvec))
    (=
      (= m n)
      (and
        (= (length m) (length n))
        (forall ((i Int))
          (=> (in_range m i) (= (select (value m) i) (select (value n) i))))))))

;; set_equal_bv
(assert
  (forall ((bv1 bitvec) (bvqt bitvec))
    (=>
      (= (length bv1) (length bvqt))
      (=>
        (forall ((i Int))
          (=>
            (and (<= 0 i) (< i (length bv1)))
            (= (select (value bv1) i) (select (value bvqt) i))))
        (= bv1 bvqt)))))

;; get_equal_bv
(assert
  (forall ((bv1 bitvec) (bvqt bitvec))
    (=>
      (= bv1 bvqt)
      (and
        (= (length bv1) (length bvqt))
        (forall ((i Int))
          (=>
            (and (<= 0 i) (< i (length bv1)))
            (= (select (value bv1) i) (select (value bvqt) i))))))))

;; make_bv
(declare-fun make_bv ((Array Int Int)
  Int) bitvec)

;; make_bv'spec
(assert
  (forall ((f (Array Int Int)) (s Int))
    (=>
      (forall ((i Int))
        (=>
          (and (<= 0 i) (< i s))
          (and (<= 0 (select f i)) (< (select f i) 2))))
      (=>
        (<= 0 s)
        (and
          (= (length (make_bv f s)) s)
          (and
            (forall ((i Int))
              (=>
                (and (<= 0 i) (< i s))
                (= (select (value (make_bv f s)) i) (select f i))))
            (forall ((i Int))
              (=>
                (not (and (<= 0 i) (< i s)))
                (= (select (value (make_bv f s)) i) 0)))))))))

;; make_bv_m
(declare-fun make_bv_m ((Array Int Int)
  Int) bitvec)

;; result
(declare-fun result13 ((Array Int Int)) (Array Int Int))

;; result'def
(assert
  (forall ((f (Array Int Int)) (k Int))
    (= (select (result13 f) k) (mod (select f k) 2))))

;; make_bv_m'def
(assert
  (forall ((f (Array Int Int)) (s Int))
    (=> (<= 0 s) (= (make_bv_m f s) (make_bv (result13 f) s)))))

;; make_bv_m'spec
(assert
  (forall ((f (Array Int Int)) (s Int))
    (=>
      (<= 0 s)
      (and
        (= (length (make_bv_m f s)) s)
        (and
          (forall ((i Int)) (bvlength (value (make_bv_m f s)) i))
          (and
            (forall ((k Int))
              (=>
                (and (<= 0 k) (< k s))
                (= (select (value (make_bv_m f s)) k) (mod (select f k) 2))))
            (forall ((k Int))
              (=>
                (not (and (<= 0 k) (< k s)))
                (= (select (value (make_bv_m f s)) k) 0)))))))))

;; bitvec_null
(declare-fun bitvec_null () bitvec)

;; result
(declare-fun result14 () (Array Int Int))

;; result'def
(assert (forall ((us Int)) (= (select result14 us) 0)))

;; bitvec_null'def
(assert (= bitvec_null (make_bv result14 0)))

;; assert_make_bv_no_bound
(assert
  (forall ((f (Array Int Int)) (s Int) (i Int))
    (=>
      (forall ((i1 Int))
        (=>
          (and (<= 0 i1) (< i1 s))
          (and (<= 0 (select f i1)) (< (select f i1) 2))))
      (=> (and (<= 1 i) (<= i s)) (= (select (value (make_bv f 0)) i) 0)))))

;; make_bv_length
(assert
  (forall ((f (Array Int Int)) (s Int))
    (=>
      (forall ((i Int))
        (=>
          (and (<= 0 i) (< i s))
          (and (<= 0 (select f i)) (< (select f i) 2))))
      (=> (<= 0 s) (= (length (make_bv f s)) s)))))

;; assert_make_bv
(assert
  (forall ((f (Array Int Int)) (s Int) (i Int))
    (=>
      (forall ((i1 Int))
        (=>
          (and (<= 0 i1) (< i1 s))
          (and (<= 0 (select f i1)) (< (select f i1) 2))))
      (=>
        (<= 0 s)
        (= (select (value (make_bv f s)) i) (ite (and (<= 0 i) (< i s))
                                              (select f i)
                                              0))))))

;; assert_make_m
(assert
  (forall ((f (Array Int Int)) (s Int) (i Int))
    (=>
      (<= 0 s)
      (= (select (value (make_bv_m f s)) i) (ite (and (<= 0 i) (< i s))
                                              (mod (select f i) 2)
                                              0)))))

;; make_bv_eq
(assert
  (forall ((f (Array Int Int)) (fqt (Array Int Int)) (n Int) (nqt Int))
    (=>
      (<= 0 n)
      (=>
        (= n nqt)
        (=>
          (forall ((i Int))
            (=> (and (<= 0 i) (< i n)) (= (select f i) (select fqt i))))
          (=>
            (forall ((i Int))
              (=>
                (and (<= 0 i) (< i n))
                (and (<= 0 (select f i)) (< (select f i) 2))))
            (= (make_bv f n) (make_bv fqt nqt))))))))

;; assert_make_bv_b
(assert
  (forall ((f (Array Int Int)) (s Int) (i Int))
    (=>
      (forall ((i1 Int))
        (=>
          (and (<= 0 i1) (< i1 s))
          (and (<= 0 (select f i1)) (< (select f i1) 2))))
      (=>
        (and (<= 0 i) (< i s))
        (= (select (value (make_bv f s)) i) (select f i))))))

;; assert_make_m_b
(assert
  (forall ((f (Array Int Int)) (s Int) (i Int))
    (=>
      (and (<= 0 i) (< i s))
      (=>
        (<= 0 s)
        (= (select (value (make_bv_m f s)) i) (mod (select f i) 2))))))

;; make_m_bv_length
(assert
  (forall ((f (Array Int Int)) (s Int) (i Int))
    (=> (<= 0 s) (bvlength (value (make_bv_m f s)) i))))

;; make_m_length
(assert
  (forall ((f (Array Int Int)) (s Int))
    (=> (<= 0 s) (= (length (make_bv_m f s)) s))))

;; set_equal_bv_make
(assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (s Int))
    (=>
      (forall ((i Int)) (and (<= 0 (select f i)) (< (select f i) 2)))
      (=>
        (<= 0 s)
        (=>
          (forall ((i Int)) (= (select f i) (select g i)))
          (= (make_bv f s) (make_bv g s)))))))

;; set_equal_bv_make_
(assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (s Int))
    (=>
      (<= 0 s)
      (=>
        (forall ((i Int))
          (=>
            (and (<= 0 i) (< i s))
            (and (<= 0 (select f i)) (< (select f i) 2))))
        (=>
          (forall ((i Int))
            (=> (and (<= 0 i) (< i s)) (= (select f i) (select g i))))
          (= (make_bv f s) (make_bv g s)))))))

;; set_equal_bv_m_make
(assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (s Int))
    (=>
      (<= 0 s)
      (=>
        (forall ((i Int)) (= (mod (select f i) 2) (mod (select g i) 2)))
        (= (make_bv_m f s) (make_bv_m g s))))))

;; make_bv_itself
(assert
  (forall ((x bitvec) (n Int))
    (=> (= (length x) n) (= (make_bv (value x) n) x))))

;; head
(declare-fun head (bitvec) Int)

;; head'def
(assert
  (forall ((bv1 bitvec))
    (=> (<= 1 (length bv1)) (= (head bv1) (select (value bv1) 0)))))

;; head'spec
(assert
  (forall ((bv1 bitvec))
    (=> (<= 1 (length bv1)) (and (<= 0 (head bv1)) (<= (head bv1) 1)))))

;; makes_bv
(declare-fun makes_bv ((Array Int Int)
  Int) bitvec)

;; result
(declare-fun result15 ((Array Int Int)) (Array Int Int))

;; result'def
(assert
  (forall ((f (Array Int Int)) (i Int))
    (= (select (result15 f) i) (ite (let ((q1_ (select f i)))
                                      (and (<= 0 q1_) (< q1_ 2)))
                                 (select f i)
                                 0))))

;; makes_bv'def
(assert
  (forall ((f (Array Int Int)) (s Int))
    (=> (<= 0 s) (= (makes_bv f s) (make_bv (result15 f) s)))))

;; makes_bv'spec
(assert
  (forall ((f (Array Int Int)) (s Int))
    (=>
      (<= 0 s)
      (and
        (= (length (makes_bv f s)) s)
        (and
          (forall ((i Int))
            (=>
              (and (<= 0 i) (< i s))
              (=>
                (and (<= 0 (select f i)) (< (select f i) 2))
                (= (select (value (makes_bv f s)) i) (select f i)))))
          (and
            (=>
              (forall ((i Int))
                (=>
                  (and (<= 0 i) (< i s))
                  (and (<= 0 (select f i)) (< (select f i) 2))))
              (= (makes_bv f s) (make_bv f s)))
            (forall ((i Int))
              (=>
                (not (and (<= 0 i) (< i s)))
                (= (select (value (makes_bv f s)) i) 0)))))))))

;; assert_makes_bv_c
(assert
  (forall ((f (Array Int Int)) (s Int) (i Int))
    (=>
      (forall ((i1 Int))
        (=>
          (and (<= 0 i1) (< i1 s))
          (and (<= 0 (select f i1)) (< (select f i1) 2))))
      (=>
        (<= 0 s)
        (= (select (value (makes_bv f s)) i) (ite (and (<= 0 i) (< i s))
                                               (select f i)
                                               0))))))

;; assert_makes_bv_b
(assert
  (forall ((f (Array Int Int)) (s Int) (i Int))
    (=>
      (forall ((i1 Int))
        (=>
          (and (<= 0 i1) (< i1 s))
          (and (<= 0 (select f i1)) (< (select f i1) 2))))
      (=>
        (<= 0 s)
        (=>
          (and (<= 0 i) (< i s))
          (= (select (value (makes_bv f s)) i) (select f i)))))))

;; assert_makes_bv
(assert
  (forall ((f (Array Int Int)) (s Int) (i Int))
    (=>
      (forall ((i1 Int))
        (=>
          (and (<= 0 i1) (< i1 s))
          (and (<= 0 (select f i1)) (< (select f i1) 2))))
      (=>
        (<= 0 s)
        (= (select (value (makes_bv f s)) i) (ite (and
                                                    (and (<= 0 i) (< i s))
                                                    (<= 0 (select f i)))
                                               (select f i)
                                               0))))))

;; makes_bv_length
(assert
  (forall ((f (Array Int Int)) (s Int))
    (=> (<= 0 s) (= (length (makes_bv f s)) s))))

;; tail
(declare-fun tail (bitvec) bitvec)

;; result
(declare-fun result16 (bitvec) (Array Int Int))

;; result'def
(assert
  (forall ((bv1 bitvec) (i Int))
    (= (select (result16 bv1) i) (select (value bv1) (+ i 1)))))

;; tail'def
(assert
  (forall ((bv1 bitvec))
    (=>
      (<= 1 (length bv1))
      (= (tail bv1) (make_bv (result16 bv1) (- (length bv1) 1))))))

;; tail'spec
(assert
  (forall ((bv1 bitvec))
    (=>
      (<= 1 (length bv1))
      (and
        (= (length (tail bv1)) (- (length bv1) 1))
        (forall ((i Int))
          (=>
            (in_range (tail bv1) i)
            (= (select (value (tail bv1)) i) (select (value bv1) (+ i 1)))))))))

;; concat_l
(declare-fun concat_l (bitvec
  Int) bitvec)

;; result
(declare-fun result17 (bitvec
  Int) (Array Int Int))

;; result'def
(assert
  (forall ((bv1 bitvec) (i Int) (k Int))
    (= (select (result17 bv1 i) k) (ite (= k 0)
                                     i
                                     (select (value bv1) (- k 1))))))

;; concat_l'def
(assert
  (forall ((bv1 bitvec) (i Int))
    (=>
      (and (<= 0 i) (<= i 1))
      (= (concat_l bv1 i) (make_bv (result17 bv1 i) (+ (length bv1) 1))))))

;; concat_l'spec
(assert
  (forall ((bv1 bitvec) (i Int))
    (=>
      (and (<= 0 i) (<= i 1))
      (and
        (= (length (concat_l bv1 i)) (+ (length bv1) 1))
        (and
          (= (select (value (concat_l bv1 i)) 0) i)
          (forall ((j Int))
            (=>
              (in_range bv1 j)
              (= (select (value (concat_l bv1 i)) (+ j 1)) (select (value
                                                                    bv1) j)))))))))

;; concat_l_value
(assert
  (forall ((bv1 bitvec) (i Int) (k Int))
    (=>
      (and (<= 0 i) (< i 2))
      (= (select (value (concat_l bv1 i)) k) (ite (= k 0)
                                               i
                                               (ite (and
                                                      (< 0 k)
                                                      (<= k (+ (length bv1) 1)))
                                                 (select (value bv1) (- k 1))
                                                 0))))))

;; concat_l_value_b
(assert
  (forall ((bv1 bitvec) (i Int) (k Int))
    (=>
      (and (<= 0 k) (< k (+ (length bv1) 1)))
      (=>
        (and (<= 0 i) (< i 2))
        (= (select (value (concat_l bv1 i)) k) (ite (= k 0)
                                                 i
                                                 (select (value bv1) (- k 1))))))))

;; concat_ht
(assert
  (forall ((bv1 bitvec))
    (=> (<= 1 (length bv1)) (= bv1 (concat_l (tail bv1) (head bv1))))))

;; concat_ht_union
(assert
  (forall ((bv1 bitvec))
    (=>
      (<= 2 (length bv1))
      (=>
        (not (= bv1 (concat_l (tail bv1) 0)))
        (= bv1 (concat_l (tail bv1) 1))))))

;; bv_to_int
(declare-fun bv_to_int (bitvec) Int)

;; result
(declare-fun result18 (bitvec) (Array Int Int))

;; result'def
(assert
  (forall ((bv1 bitvec) (k Int))
    (= (select (result18 bv1) k) (ite (in_range bv1 k)
                                   (* (select (value bv1) k) (power
                                                               2
                                                               (- (- 
                                                               (length
                                                                 bv1) 1) k)))
                                   1))))

;; bv_to_int'def
(assert
  (forall ((bv1 bitvec))
    (= (bv_to_int bv1) (ind_isum (result18 bv1) 0 (length bv1)))))

;; fc
(declare-fun fc128 (bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((bv1 bitvec) (k Int))
    (= (select (fc128 bv1) k) (* (select (value bv1) k) (power
                                                          2
                                                          (- (- (length bv1) 1) k))))))

;; bv_to_int'spec
(assert
  (forall ((bv1 bitvec))
    (and
      (= (bv_to_int bv1) (ind_isum (fc128 bv1) 0 (length bv1)))
      (<= 0 (bv_to_int bv1)))))

;; bv_to_int_eq
(assert
  (forall ((bv1 bitvec) (bv2 bitvec))
    (=> (= bv1 bv2) (= (bv_to_int bv1) (bv_to_int bv2)))))

;; fc
(declare-fun fc129 (bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((bv1 bitvec) (k Int))
    (= (select (fc129 bv1) k) (* (select (value bv1) k) (power
                                                          2
                                                          (- (- (length bv1) 1) k))))))

;; bv_to_int_sum
(assert
  (forall ((bv1 bitvec))
    (= (bv_to_int bv1) (ind_isum (fc129 bv1) 0 (length bv1)))))

;; fc
(declare-fun fc130 (bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((bv1 bitvec) (k Int))
    (= (select (fc130 bv1) k) (* (select (value bv1) (- (- (length bv1) 1) k)) 
    (power
      2
      k)))))

;; bv_to_int_sum_inv
(assert
  (forall ((bv1 bitvec))
    (= (bv_to_int bv1) (ind_isum (fc130 bv1) 0 (length bv1)))))

;; fc
(declare-fun fc131 (bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((bv1 bitvec) (k Int))
    (= (select (fc131 bv1) k) (* (- (select (value bv1) k)) (power
                                                              2
                                                              (- (- (length
                                                                    bv1) 1) k))))))

;; bv_to_int_sum_opp
(assert
  (forall ((bv1 bitvec))
    (= (- (bv_to_int bv1)) (ind_isum (fc131 bv1) 0 (length bv1)))))

;; bv_to_int_onebit
(assert
  (forall ((bv1 bitvec))
    (=> (= (length bv1) 1) (= (bv_to_int bv1) (select (value bv1) 0)))))

;; fc
(declare-fun fc132 (bitvec) (Array Int Int))

;; fc
(declare-fun fc133 (bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((bv1 bitvec) (l Int))
    (= (select (fc132 bv1) l) (* (select (value bv1) l) (power
                                                          2
                                                          (- (- (length bv1) 1) l))))))

;; fc'def
(assert
  (forall ((bv1 bitvec) (l Int))
    (= (select (fc133 bv1) l) (* (select (value bv1) (- (- (length bv1) 1) l)) 
    (power
      2
      l)))))

;; ind_isum_bv_rev
(assert
  (forall ((bv1 bitvec) (i Int))
    (=>
      (and (<= 0 i) (<= i (length bv1)))
      (= (ind_isum (fc132 bv1) i (length bv1)) (ind_isum
                                                 (fc133 bv1)
                                                 0
                                                 (- (length bv1) i))))))

;; fc
(declare-fun fc134 ((Array Int Int)
  Int) (Array Int Int))

;; fc
(declare-fun fc135 ((Array Int Int)
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (n Int) (l Int))
    (= (select (fc134 f n) l) (* (select f l) (power 2 (- (- n 1) l))))))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (n Int) (l Int))
    (= (select (fc135 f n) l) (* (select f (- (- n 1) l)) (power 2 l)))))

;; ind_isum_bin_rev
(assert
  (forall ((f (Array Int Int)) (n Int) (i Int))
    (=>
      (and (<= 0 i) (< i n))
      (=>
        (binary f)
        (= (ind_isum (fc134 f n) i n) (ind_isum (fc135 f n) 0 (- n i)))))))

;; fc
(declare-fun fc136 ((Array Int Int)
  Int) (Array Int Int))

;; fc
(declare-fun fc137 ((Array Int Int)
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (n Int) (l Int))
    (= (select (fc136 f n) l) (* (select f l) (power 2 (- (- n 1) l))))))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (n Int) (l Int))
    (= (select (fc137 f n) l) (* (select f (- (- n 1) l)) (power 2 l)))))

;; ind_isum_bin_rev_z
(assert
  (forall ((f (Array Int Int)) (n Int))
    (=>
      (<= 0 n)
      (=>
        (binary f)
        (= (ind_isum (fc136 f n) 0 n) (ind_isum (fc137 f n) 0 n))))))

;; fc
(declare-fun fc138 (bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((bv1 bitvec) (k Int))
    (= (select (fc138 bv1) k) (* (select (value bv1) (- (- (length bv1) 1) k)) 
    (power
      2
      k)))))

;; bv_to_int_sum_rev
(assert
  (forall ((bv1 bitvec))
    (= (ind_isum (fc138 bv1) 0 (length bv1)) (bv_to_int bv1))))

;; fc
(declare-fun fc139 (bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((bv1 bitvec) (l Int))
    (= (select (fc139 bv1) l) (* (select (value bv1) l) (power 2 l)))))

;; ind_isum_bv_bound_growing
(assert
  (forall ((bv1 bitvec) (i Int))
    (=>
      (and (< 0 i) (< i (length bv1)))
      (< (ind_isum (fc139 bv1) 0 i) (power 2 i)))))

;; fc
(declare-fun fc140 (bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((bv1 bitvec) (l Int))
    (= (select (fc140 bv1) l) (* (select (value bv1) l) (power
                                                          2
                                                          (- (- (length bv1) 1) l))))))

;; ind_isum_bv_bound
(assert
  (forall ((bv1 bitvec) (i Int))
    (=>
      (and (<= 0 i) (< i (length bv1)))
      (< (ind_isum (fc140 bv1) i (length bv1)) (power 2 (- (length bv1) i))))))

;; fc
(declare-fun fc141 ((Array Int Int)
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (n Int) (l Int))
    (= (select (fc141 f n) l) (* (select f l) (power 2 (- (- n 1) l))))))

;; ind_isum_bin_bound
(assert
  (forall ((f (Array Int Int)) (n Int) (i Int))
    (=>
      (and (<= 0 i) (< i n))
      (=> (binary f) (< (ind_isum (fc141 f n) i n) (power 2 (- n i)))))))

;; bv_to_int_bound
(assert
  (forall ((bv1 bitvec))
    (=> (<= 1 (length bv1)) (< (bv_to_int bv1) (power 2 (length bv1))))))

;; bv_to_int_bound_gen
(assert
  (forall ((bv1 bitvec) (l Int))
    (=> (<= 0 l) (=> (= (length bv1) l) (< (bv_to_int bv1) (power 2 l))))))

;; int_to_bv
(declare-fun int_to_bv (Int
  Int) bitvec)

;; result
(declare-fun result19 (Int
  Int) (Array Int Int))

;; result'def
(assert
  (forall ((i Int) (n Int) (k Int))
    (= (select (result19 i n) k) (ite (and (<= 0 k) (< k n))
                                   (div (mod i (power 2 (- n k))) (power
                                                                    2
                                                                    (- (- n k) 1)))
                                   0))))

;; int_to_bv'def
(assert
  (forall ((i Int) (n Int))
    (=> (<= 0 n) (= (int_to_bv i n) (make_bv (result19 i n) n)))))

;; fc
(declare-fun fc142 (Int
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((i Int) (n Int) (k Int))
    (= (select (fc142 i n) k) (div (mod i (power 2 (- n k))) (power
                                                               2
                                                               (- (- n k) 1))))))

;; int_to_bv'spec
(assert
  (forall ((i Int) (n Int))
    (=>
      (<= 0 n)
      (and
        (= (length (int_to_bv i n)) n)
        (= (int_to_bv i n) (make_bv (fc142 i n) n))))))

;; constant_size
(declare-fun constant_size (ty
  uni
  uni) Bool)

;; constant_size'def
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni))
      (and
        (=>
          (constant_size a s f)
          (forall ((e uni))
            (=>
              (mem a e s)
              (and
                (= (rows complex1 (infix_at (matrix1 complex1) a f e)) 
                (rows
                  complex1
                  (infix_at (matrix1 complex1) a f (choose1 a s))))
                (= (columns complex1 (infix_at (matrix1 complex1) a f e)) 
                (columns
                  complex1
                  (infix_at (matrix1 complex1) a f (choose1 a s))))))))
        (=>
          (forall ((e uni))
            (=>
              (sort a e)
              (=>
                (mem a e s)
                (and
                  (= (rows complex1 (infix_at (matrix1 complex1) a f e)) 
                  (rows
                    complex1
                    (infix_at (matrix1 complex1) a f (choose1 a s))))
                  (= (columns complex1 (infix_at (matrix1 complex1) a f e)) 
                  (columns
                    complex1
                    (infix_at (matrix1 complex1) a f (choose1 a s))))))))
          (constant_size a s f))))))

;; set_constant_size
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni))
      (=>
        (forall ((e uni) (eqt uni))
          (=>
            (sort a e)
            (=>
              (sort a eqt)
              (=>
                (mem a e s)
                (=>
                  (mem a eqt s)
                  (= (rows complex1 (infix_at (matrix1 complex1) a f e)) 
                  (rows
                    complex1
                    (infix_at (matrix1 complex1) a f eqt))))))))
        (=>
          (forall ((e uni) (eqt uni))
            (=>
              (sort a e)
              (=>
                (sort a eqt)
                (=>
                  (mem a e s)
                  (=>
                    (mem a eqt s)
                    (= (columns complex1 (infix_at (matrix1 complex1) a f e)) 
                    (columns
                      complex1
                      (infix_at (matrix1 complex1) a f eqt))))))))
          (constant_size a s f))))))

;; set_constant_size_exists
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni))
      (=>
        (exists ((r Int))
          (forall ((e uni))
            (=>
              (sort a e)
              (=>
                (mem a e s)
                (= (rows complex1 (infix_at (matrix1 complex1) a f e)) r)))))
        (=>
          (exists ((c Int))
            (forall ((e uni))
              (=>
                (sort a e)
                (=>
                  (mem a e s)
                  (= (columns complex1 (infix_at (matrix1 complex1) a f e)) c)))))
          (constant_size a s f))))))

;; set_constant_size_t
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (r Int) (c Int))
      (=>
        (forall ((e uni))
          (=>
            (sort a e)
            (=>
              (mem a e s)
              (= (rows complex1 (infix_at (matrix1 complex1) a f e)) r))))
        (=>
          (forall ((e uni))
            (=>
              (sort a e)
              (=>
                (mem a e s)
                (= (columns complex1 (infix_at (matrix1 complex1) a f e)) c))))
          (constant_size a s f))))))

;; fc
(declare-fun fc143 (ty
  uni
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 uni) (x2 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc143 a x x1 x2)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (p uni) (m (matrix complex)) (j uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc143 a f p m) j)) (ite (= 
                                                                    (tb2t10
                                                                    (infix_at
                                                                    bool
                                                                    a
                                                                    p
                                                                    j)) true)
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    j))
                                                                    m)))))

;; guarded_set_constant_size
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (p uni) (m (matrix complex)))
      (=>
        (constant_size a s f)
        (=>
          (forall ((e uni))
            (=>
              (sort a e)
              (=> (mem a e s) (= (tb2t10 (infix_at bool a p e)) true))))
          (constant_size a s (fc143 a f p m)))))))

;; fc
(declare-fun fc144 (ty
  uni
  (matrix complex)
  Int
  Int) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)) (x2 Int) (x3 Int))
      (sort (infix_mngt a (matrix1 complex1)) (fc144 a x x1 x2 x3)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (i Int) (j Int) (e uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc144 a f m i j) e)) 
      (tb2t65
        (set2 complex1 (t2tb65 m) i j (infix_at complex1 a f e)))))))

;; set_constant_size_set
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (m (matrix complex)) (i Int) (j Int))
      (=>
        (valid_index complex1 (t2tb65 m) i j)
        (constant_size a s (fc144 a f m i j))))))

;; get_constant_size
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni))
      (=>
        (constant_size a s f)
        (and
          (forall ((e uni) (eqt uni))
            (=>
              (mem a e s)
              (=>
                (mem a eqt s)
                (= (rows complex1 (infix_at (matrix1 complex1) a f e)) 
                (rows
                  complex1
                  (infix_at (matrix1 complex1) a f eqt))))))
          (forall ((e uni) (eqt uni))
            (=>
              (mem a e s)
              (=>
                (mem a eqt s)
                (= (columns complex1 (infix_at (matrix1 complex1) a f e)) 
                (columns
                  complex1
                  (infix_at (matrix1 complex1) a f eqt)))))))))))

;; s_rows
(declare-fun s_rows (ty
  uni
  uni) Int)

;; s_rows'def
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni))
      (=>
        (constant_size a s f)
        (= (s_rows a s f) (rows
                            complex1
                            (infix_at (matrix1 complex1) a f (choose1 a s))))))))

;; s_rows'spec
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni))
      (=>
        (constant_size a s f)
        (and
          (< 0 (s_rows a s f))
          (and
            (forall ((e uni))
              (=>
                (mem a e s)
                (= (rows complex1 (infix_at (matrix1 complex1) a f e)) 
                (s_rows
                  a
                  s
                  f))))
            (forall ((e uni) (eqt uni))
              (=>
                (mem a e s)
                (=>
                  (mem a eqt s)
                  (= (rows complex1 (infix_at (matrix1 complex1) a f e)) 
                  (rows
                    complex1
                    (infix_at (matrix1 complex1) a f eqt))))))))))))

;; s_columns
(declare-fun s_columns (ty
  uni
  uni) Int)

;; s_columns'def
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni))
      (=>
        (constant_size a s f)
        (= (s_columns a s f) (columns
                               complex1
                               (infix_at
                                 (matrix1 complex1)
                                 a
                                 f
                                 (choose1 a s))))))))

;; s_columns'spec
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni))
      (=>
        (constant_size a s f)
        (and
          (< 0 (s_columns a s f))
          (and
            (forall ((e uni))
              (=>
                (mem a e s)
                (= (columns complex1 (infix_at (matrix1 complex1) a f e)) 
                (s_columns
                  a
                  s
                  f))))
            (forall ((e uni) (eqt uni))
              (=>
                (mem a e s)
                (=>
                  (mem a eqt s)
                  (= (columns complex1 (infix_at (matrix1 complex1) a f e)) 
                  (columns
                    complex1
                    (infix_at (matrix1 complex1) a f eqt))))))))))))

;; set_s_rows
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (r Int))
      (=>
        (constant_size a s f)
        (=>
          (= (rows complex1 (infix_at (matrix1 complex1) a f (choose1 a s))) r)
          (= (s_rows a s f) r))))))

;; set_s_rows_elt
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (elt uni))
      (=>
        (constant_size a s f)
        (=>
          (mem a elt s)
          (= (s_rows a s f) (rows
                              complex1
                              (infix_at (matrix1 complex1) a f elt))))))))

;; set_s_columns
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (r Int))
      (=>
        (constant_size a s f)
        (=>
          (= (columns
               complex1
               (infix_at (matrix1 complex1) a f (choose1 a s))) r)
          (= (s_columns a s f) r))))))

;; set_s_columns_elt
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (elt uni))
      (=>
        (constant_size a s f)
        (=>
          (mem a elt s)
          (= (s_columns a s f) (columns
                                 complex1
                                 (infix_at (matrix1 complex1) a f elt))))))))

;; s_rows_eq
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (g uni))
      (=>
        (constant_size a s f)
        (=>
          (< 0 (cardinal a s))
          (=>
            (forall ((e uni))
              (=>
                (sort a e)
                (=>
                  (mem a e s)
                  (= (tb2t65 (infix_at (matrix1 complex1) a f e)) (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    g
                                                                    e))))))
            (= (s_rows a s f) (s_rows a s g))))))))

;; set_constant_size_give
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (r Int) (c Int))
      (=>
        (< 0 (cardinal a s))
        (=>
          (forall ((e uni))
            (=>
              (sort a e)
              (=>
                (mem a e s)
                (= (rows complex1 (infix_at (matrix1 complex1) a f e)) r))))
          (=>
            (forall ((e uni))
              (=>
                (sort a e)
                (=>
                  (mem a e s)
                  (= (columns complex1 (infix_at (matrix1 complex1) a f e)) c))))
            (and
              (constant_size a s f)
              (and
                (forall ((e uni))
                  (=>
                    (mem a e s)
                    (= (rows complex1 (infix_at (matrix1 complex1) a f e)) r)))
                (and
                  (forall ((e uni))
                    (=>
                      (mem a e s)
                      (= (columns
                           complex1
                           (infix_at (matrix1 complex1) a f e)) c)))
                  (and (= (s_rows a s f) r) (= (s_columns a s f) c)))))))))))

;; s_columns_eq
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (g uni))
      (=>
        (constant_size a s f)
        (=>
          (< 0 (cardinal a s))
          (=>
            (forall ((e uni))
              (=>
                (sort a e)
                (=>
                  (mem a e s)
                  (= (tb2t65 (infix_at (matrix1 complex1) a f e)) (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    g
                                                                    e))))))
            (= (s_columns a s f) (s_columns a s g))))))))

;; subset_constant_size
(assert
  (forall ((a ty))
    (forall ((s uni) (sqt uni) (f uni))
      (=>
        (constant_size a s f)
        (=>
          (not (is_empty a sqt))
          (=>
            (subset1 a sqt s)
            (and
              (constant_size a sqt f)
              (and
                (= (s_rows a sqt f) (s_rows a s f))
                (= (s_columns a sqt f) (s_columns a s f))))))))))

;; set_s_rows_rem
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni))
      (=>
        (< 1 (cardinal a s))
        (=>
          (constant_size a s f)
          (and
            (constant_size a (remove a (choose1 a s) s) f)
            (= (s_rows a (remove a (choose1 a s) s) f) (rows
                                                         complex1
                                                         (infix_at
                                                           (matrix1 complex1)
                                                           a
                                                           f
                                                           (choose1 a s))))))))))

;; set_s_columns_rem
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni))
      (=>
        (< 1 (cardinal a s))
        (=>
          (constant_size a s f)
          (and
            (constant_size a (remove a (choose1 a s) s) f)
            (= (s_columns a (remove a (choose1 a s) s) f) (columns
                                                            complex1
                                                            (infix_at
                                                              (matrix1
                                                                complex1)
                                                              a
                                                              f
                                                              (choose1 a s))))))))))

;; set_s_rows_add
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (x uni))
      (=>
        (< 0 (cardinal a s))
        (=>
          (constant_size a s f)
          (=>
            (= (columns complex1 (infix_at (matrix1 complex1) a f x)) 
            (s_columns
              a
              s
              f))
            (=>
              (= (rows complex1 (infix_at (matrix1 complex1) a f x)) 
              (s_rows
                a
                s
                f))
              (= (s_rows a (add a x s) f) (s_rows a s f)))))))))

;; set_s_columns_add
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (x uni))
      (=>
        (< 0 (cardinal a s))
        (=>
          (constant_size a s f)
          (=>
            (= (columns complex1 (infix_at (matrix1 complex1) a f x)) 
            (s_columns
              a
              s
              f))
            (=>
              (= (rows complex1 (infix_at (matrix1 complex1) a f x)) 
              (s_rows
                a
                s
                f))
              (= (s_columns a (add a x s) f) (s_columns a s f)))))))))

;; set_s_rows_columns_add
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (x uni))
      (=>
        (< 0 (cardinal a s))
        (=>
          (constant_size a s f)
          (=>
            (= (columns complex1 (infix_at (matrix1 complex1) a f x)) 
            (s_columns
              a
              s
              f))
            (=>
              (= (rows complex1 (infix_at (matrix1 complex1) a f x)) 
              (s_rows
                a
                s
                f))
              (and
                (= (s_columns a (add a x s) f) (s_columns a s f))
                (= (s_rows a (add a x s) f) (s_rows a s f))))))))))

;; mat_sum
(declare-fun mat_sum (ty
  uni
  uni) (matrix complex))

;; mat_sum'def
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni))
      (=>
        (constant_size a s f)
        (=>
          (< 0 (cardinal a s))
          (ite (= (cardinal a s) 1)
            (= (mat_sum a s f) (tb2t65
                                 (infix_at
                                   (matrix1 complex1)
                                   a
                                   f
                                   (element a s))))
            (= (mat_sum a s f) (add_mat
                                 (tb2t65
                                   (infix_at
                                     (matrix1 complex1)
                                     a
                                     f
                                     (choose1 a s)))
                                 (mat_sum a (remove a (choose1 a s) s) f)))))))))

;; mat_sum'spec
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni))
      (=>
        (constant_size a s f)
        (=>
          (< 0 (cardinal a s))
          (and
            (= (rows complex1 (t2tb65 (mat_sum a s f))) (s_rows a s f))
            (and
              (= (columns complex1 (t2tb65 (mat_sum a s f))) (s_columns
                                                               a
                                                               s
                                                               f))
              (and
                (forall ((e uni))
                  (=>
                    (mem a e s)
                    (= (rows complex1 (infix_at (matrix1 complex1) a f e)) 
                    (s_rows
                      a
                      s
                      f))))
                (forall ((e uni))
                  (=>
                    (mem a e s)
                    (= (columns complex1 (infix_at (matrix1 complex1) a f e)) 
                    (s_columns
                      a
                      s
                      f))))))))))))

;; columns_mat_sum
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (n Int))
      (=>
        (not (= (cardinal a s) 0))
        (=>
          (constant_size a s f)
          (=>
            (forall ((e uni))
              (=>
                (sort a e)
                (=>
                  (mem a e s)
                  (= (columns complex1 (infix_at (matrix1 complex1) a f e)) n))))
            (= (columns complex1 (t2tb65 (mat_sum a s f))) n)))))))

;; rows_mat_sum
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (n Int))
      (=>
        (not (= (cardinal a s) 0))
        (=>
          (constant_size a s f)
          (=>
            (forall ((e uni))
              (=>
                (sort a e)
                (=>
                  (mem a e s)
                  (= (rows complex1 (infix_at (matrix1 complex1) a f e)) n))))
            (= (rows complex1 (t2tb65 (mat_sum a s f))) n)))))))

;; mat_sum_cardone
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni))
      (=>
        (= (cardinal a s) 1)
        (= (mat_sum a s f) (tb2t65
                             (infix_at (matrix1 complex1) a f (element a s))))))))

;; fc
(declare-fun fc145 (ty
  uni
  Int
  Int) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 Int) (x2 Int))
      (sort (infix_mngt a complex1) (fc145 a x x1 x2)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (i Int) (j Int) (e uni))
      (= (tb2t (infix_at complex1 a (fc145 a f i j) e)) (tb2t
                                                          (get
                                                            complex1
                                                            (infix_at
                                                              (matrix1
                                                                complex1)
                                                              a
                                                              f
                                                              e)
                                                            i
                                                            j))))))

;; mat_sum_to_sum_pre
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (i Int) (j Int))
      (=>
        (constant_size a s f)
        (=>
          (< 0 (cardinal a s))
          (=>
            (and (<= 0 i) (< i (s_rows a s f)))
            (=>
              (and (<= 0 j) (< j (s_columns a s f)))
              (= (tb2t (get complex1 (t2tb65 (mat_sum a s f)) i j)) (sum
                                                                    a
                                                                    s
                                                                    (fc145
                                                                    a
                                                                    f
                                                                    i
                                                                    j))))))))))

;; fc
(declare-fun fc146 (ty
  uni
  Int
  Int) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 Int) (x2 Int))
      (sort (infix_mngt a complex1) (fc146 a x x1 x2)))))

;; fc
(declare-fun fc147 (ty
  uni
  uni) (Array Int (Array Int complex)))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (i Int) (j Int) (e uni))
      (= (tb2t (infix_at complex1 a (fc146 a f i j) e)) (tb2t
                                                          (get
                                                            complex1
                                                            (infix_at
                                                              (matrix1
                                                                complex1)
                                                              a
                                                              f
                                                              e)
                                                            i
                                                            j))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (i Int) (j Int))
      (= (tb2t
           (infix_at
             complex1
             int
             (infix_at
               (infix_mngt int complex1)
               int
               (t2tb61 (fc147 a s f))
               (t2tb8 i))
             (t2tb8 j))) (sum a s (fc146 a f i j))))))

;; mat_sum_to_sum
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni))
      (=>
        (constant_size a s f)
        (=>
          (< 0 (cardinal a s))
          (= (mat_sum a s f) (tb2t65
                               (make_f
                                 complex1
                                 (s_rows a s f)
                                 (s_columns a s f)
                                 (t2tb61 (fc147 a s f))))))))))

;; fc
(declare-fun fc148 (ty
  uni
  Int
  Int) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 Int) (x2 Int))
      (sort (infix_mngt a complex1) (fc148 a x x1 x2)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (i Int) (j Int) (e uni))
      (= (tb2t (infix_at complex1 a (fc148 a f i j) e)) (tb2t
                                                          (get
                                                            complex1
                                                            (infix_at
                                                              (matrix1
                                                                complex1)
                                                              a
                                                              f
                                                              e)
                                                            i
                                                            j))))))

;; mat_sum_value
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (i Int) (j Int))
      (=>
        (constant_size a s f)
        (=>
          (< 0 (cardinal a s))
          (=>
            (valid_index complex1 (t2tb65 (mat_sum a s f)) i j)
            (= (tb2t (get complex1 (t2tb65 (mat_sum a s f)) i j)) (sum
                                                                    a
                                                                    s
                                                                    (fc148
                                                                    a
                                                                    f
                                                                    i
                                                                    j)))))))))

;; mat_sum_add
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (x uni))
      (=>
        (< 0 (cardinal a s))
        (=>
          (constant_size a s f)
          (=>
            (= (rows complex1 (infix_at (matrix1 complex1) a f x)) (s_rows
                                                                    a
                                                                    s
                                                                    f))
            (=>
              (= (columns complex1 (infix_at (matrix1 complex1) a f x)) 
              (s_columns
                a
                s
                f))
              (=>
                (not (mem a x s))
                (= (mat_sum a (add a x s) f) (add_mat
                                               (tb2t65
                                                 (infix_at
                                                   (matrix1 complex1)
                                                   a
                                                   f
                                                   x))
                                               (mat_sum a s f)))))))))))

;; mat_sum_plus_one
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni))
      (=>
        (< 1 (cardinal a s))
        (=>
          (constant_size a s f)
          (= (mat_sum a s f) (add_mat
                               (tb2t65
                                 (infix_at
                                   (matrix1 complex1)
                                   a
                                   f
                                   (choose1 a s)))
                               (mat_sum a (remove a (choose1 a s) s) f))))))))

;; fc
(declare-fun fc149 (ty
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((b ty))
    (forall ((x uni) (x1 uni))
      (sort (infix_mngt b (matrix1 complex1)) (fc149 b x x1)))))

;; fc'def
(assert
  (forall ((b ty))
    (forall ((f uni) (g uni) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) b (fc149 b f g) k)) (add_mat
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    b
                                                                    f
                                                                    k))
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    b
                                                                    g
                                                                    k)))))))

;; mat_sum_comp_pre
(assert
  (forall ((b ty))
    (forall ((s uni) (f uni) (g uni) (i Int) (j Int))
      (=>
        (constant_size b s f)
        (=>
          (constant_size b s g)
          (=>
            (and (<= 0 i) (< i (s_rows b s f)))
            (=>
              (and (<= 0 j) (< j (s_columns b s f)))
              (=>
                (= (s_rows b s f) (s_rows b s g))
                (=>
                  (= (s_columns b s f) (s_columns b s g))
                  (=>
                    (< 0 (cardinal b s))
                    (= (tb2t
                         (get
                           complex1
                           (t2tb65 (mat_sum b s (fc149 b f g)))
                           i
                           j)) (tb2t
                                 (get
                                   complex1
                                   (t2tb65
                                     (add_mat
                                       (mat_sum b s f)
                                       (mat_sum b s g)))
                                   i
                                   j)))))))))))))

;; fc
(declare-fun fc150 (ty
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((b ty))
    (forall ((x uni) (x1 uni))
      (sort (infix_mngt b (matrix1 complex1)) (fc150 b x x1)))))

;; fc'def
(assert
  (forall ((b ty))
    (forall ((f uni) (g uni) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) b (fc150 b f g) k)) (add_mat
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    b
                                                                    f
                                                                    k))
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    b
                                                                    g
                                                                    k)))))))

;; mat_sum_comp
(assert
  (forall ((b ty))
    (forall ((s uni) (f uni) (g uni))
      (=>
        (constant_size b s f)
        (=>
          (constant_size b s g)
          (=>
            (= (s_rows b s f) (s_rows b s g))
            (=>
              (= (s_columns b s f) (s_columns b s g))
              (=>
                (< 0 (cardinal b s))
                (= (mat_sum b s (fc150 b f g)) (add_mat
                                                 (mat_sum b s f)
                                                 (mat_sum b s g)))))))))))

;; fc
(declare-fun fc151 (ty
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((b ty))
    (forall ((x uni) (x1 uni))
      (sort (infix_mngt b (matrix1 complex1)) (fc151 b x x1)))))

;; fc'def
(assert
  (forall ((b ty))
    (forall ((f uni) (g uni) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) b (fc151 b f g) k)) (add_mat
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    b
                                                                    f
                                                                    k))
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    b
                                                                    g
                                                                    k)))))))

;; mat_sum_comp_rec
(assert
  (forall ((b ty))
    (forall ((s uni) (f uni) (g uni))
      (=>
        (constant_size b s f)
        (=>
          (constant_size b s g)
          (=>
            (= (s_rows b s f) (s_rows b s g))
            (=>
              (= (s_columns b s f) (s_columns b s g))
              (=>
                (< 0 (cardinal b s))
                (= (add_mat (mat_sum b s f) (mat_sum b s g)) (mat_sum
                                                               b
                                                               s
                                                               (fc151 b f g)))))))))))

;; fc
(declare-fun fc152 (ty
  ty
  uni
  uni
  Int
  Int) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni) (x2 Int) (x3 Int))
      (sort (infix_mngt a complex1) (fc152 b a x x1 x2 x3)))))

;; fc
(declare-fun fc153 (ty
  ty
  uni
  Int
  Int
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 Int) (x2 Int) (x3 uni))
      (sort (infix_mngt b complex1) (fc153 b a x x1 x2 x3)))))

;; fc
(declare-fun fc154 (ty
  ty
  uni
  uni
  Int
  Int) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni) (x2 Int) (x3 Int))
      (sort (infix_mngt a complex1) (fc154 b a x x1 x2 x3)))))

;; fc'def
(assert
  (forall ((a ty) (b ty))
    (forall ((sqt uni) (f uni) (i Int) (j Int) (e uni))
      (= (tb2t (infix_at complex1 a (fc152 b a sqt f i j) e)) (tb2t
                                                                (get
                                                                  complex1
                                                                  (t2tb65
                                                                    (mat_sum
                                                                    b
                                                                    sqt
                                                                    (infix_at
                                                                    (infix_mngt
                                                                    b
                                                                    (matrix1
                                                                    complex1))
                                                                    a
                                                                    f
                                                                    e)))
                                                                  i
                                                                  j))))))

;; fc'def
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (i Int) (j Int) (e uni) (e1 uni))
      (= (tb2t (infix_at complex1 b (fc153 b a f i j e) e1)) (tb2t
                                                               (get
                                                                 complex1
                                                                 (infix_at
                                                                   (matrix1
                                                                    complex1)
                                                                   b
                                                                   (infix_at
                                                                    (infix_mngt
                                                                    b
                                                                    (matrix1
                                                                    complex1))
                                                                    a
                                                                    f
                                                                    e)
                                                                   e1)
                                                                 i
                                                                 j))))))

;; fc'def
(assert
  (forall ((a ty) (b ty))
    (forall ((sqt uni) (f uni) (i Int) (j Int) (e uni))
      (= (tb2t (infix_at complex1 a (fc154 b a sqt f i j) e)) (sum
                                                                b
                                                                sqt
                                                                (fc153
                                                                  b
                                                                  a
                                                                  f
                                                                  i
                                                                  j
                                                                  e))))))

;; mat_sum_to_sum_fun
(assert
  (forall ((a ty) (b ty))
    (forall ((s uni) (sqt uni) (f uni) (r Int) (c Int) (i Int) (j Int))
      (=>
        (< 0 (cardinal a s))
        (=>
          (< 0 (cardinal b sqt))
          (=>
            (forall ((e uni))
              (=>
                (sort a e)
                (forall ((e1 uni))
                  (=>
                    (sort b e1)
                    (=>
                      (mem a e s)
                      (=>
                        (mem b e1 sqt)
                        (= (rows
                             complex1
                             (infix_at
                               (matrix1 complex1)
                               b
                               (infix_at
                                 (infix_mngt b (matrix1 complex1))
                                 a
                                 f
                                 e)
                               e1)) r)))))))
            (=>
              (forall ((e uni))
                (=>
                  (sort a e)
                  (forall ((e1 uni))
                    (=>
                      (sort b e1)
                      (=>
                        (mem a e s)
                        (=>
                          (mem b e1 sqt)
                          (= (columns
                               complex1
                               (infix_at
                                 (matrix1 complex1)
                                 b
                                 (infix_at
                                   (infix_mngt b (matrix1 complex1))
                                   a
                                   f
                                   e)
                                 e1)) c)))))))
              (=>
                (and (<= 0 i) (< i r))
                (=>
                  (and (<= 0 j) (< j c))
                  (= (sum a s (fc152 b a sqt f i j)) (sum
                                                       a
                                                       s
                                                       (fc154 b a sqt f i j))))))))))))

;; fc
(declare-fun fc155 (ty
  ty
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni))
      (sort (infix_mngt a (matrix1 complex1)) (fc155 b a x x1)))))

;; fc
(declare-fun fc156 (ty
  ty
  uni
  Int
  Int
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 Int) (x2 Int) (x3 uni))
      (sort (infix_mngt b complex1) (fc156 b a x x1 x2 x3)))))

;; fc
(declare-fun fc157 (ty
  ty
  uni
  uni
  Int
  Int) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni) (x2 Int) (x3 Int))
      (sort (infix_mngt a complex1) (fc157 b a x x1 x2 x3)))))

;; fc'def
(assert
  (forall ((a ty) (b ty))
    (forall ((sqt uni) (f uni) (e uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc155 b a sqt f) e)) 
      (mat_sum
        b
        sqt
        (infix_at (infix_mngt b (matrix1 complex1)) a f e))))))

;; fc'def
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (i Int) (j Int) (e uni) (eqt uni))
      (= (tb2t (infix_at complex1 b (fc156 b a f i j e) eqt)) (tb2t
                                                                (get
                                                                  complex1
                                                                  (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    b
                                                                    (infix_at
                                                                    (infix_mngt
                                                                    b
                                                                    (matrix1
                                                                    complex1))
                                                                    a
                                                                    f
                                                                    e)
                                                                    eqt)
                                                                  i
                                                                  j))))))

;; fc'def
(assert
  (forall ((a ty) (b ty))
    (forall ((sqt uni) (f uni) (i Int) (j Int) (e uni))
      (= (tb2t (infix_at complex1 a (fc157 b a sqt f i j) e)) (sum
                                                                b
                                                                sqt
                                                                (fc156
                                                                  b
                                                                  a
                                                                  f
                                                                  i
                                                                  j
                                                                  e))))))

;; mat_sum_to_sum_double_pre
(assert
  (forall ((a ty) (b ty))
    (forall ((s uni) (sqt uni) (f uni) (r Int) (c Int) (i Int) (j Int))
      (=>
        (forall ((e uni) (eqt uni))
          (=>
            (sort a e)
            (=>
              (sort b eqt)
              (=>
                (mem a e s)
                (=>
                  (mem b eqt sqt)
                  (= (rows
                       complex1
                       (infix_at
                         (matrix1 complex1)
                         b
                         (infix_at (infix_mngt b (matrix1 complex1)) a f e)
                         eqt)) r))))))
        (=>
          (forall ((e uni) (eqt uni))
            (=>
              (sort a e)
              (=>
                (sort b eqt)
                (=>
                  (mem a e s)
                  (=>
                    (mem b eqt sqt)
                    (= (columns
                         complex1
                         (infix_at
                           (matrix1 complex1)
                           b
                           (infix_at (infix_mngt b (matrix1 complex1)) a f e)
                           eqt)) c))))))
          (=>
            (and (<= 0 i) (< i r))
            (=>
              (and (<= 0 j) (< j c))
              (=>
                (< 0 (cardinal a s))
                (=>
                  (< 0 (cardinal b sqt))
                  (= (tb2t
                       (get
                         complex1
                         (t2tb65 (mat_sum a s (fc155 b a sqt f)))
                         i
                         j)) (sum a s (fc157 b a sqt f i j))))))))))))

;; fc
(declare-fun fc158 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc158 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (n (matrix complex)) (e uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc158 a f n) e)) (mat_mult
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    e))
                                                                    n)))))

;; mat_mult_sum_out_l
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (n (matrix complex)))
      (=>
        (< 0 (cardinal a s))
        (=>
          (forall ((e uni))
            (=>
              (sort a e)
              (=>
                (mem a e s)
                (= (columns complex1 (infix_at (matrix1 complex1) a f e)) 
                (rows
                  complex1
                  (t2tb65 n))))))
          (=>
            (exists ((r Int))
              (forall ((e uni))
                (=>
                  (sort a e)
                  (=>
                    (mem a e s)
                    (= (rows complex1 (infix_at (matrix1 complex1) a f e)) r)))))
            (= (mat_mult (mat_sum a s f) n) (mat_sum a s (fc158 a f n)))))))))

;; mat_sum_dim
(declare-fun mat_sum_dim (ty
  uni
  uni
  Int
  Int) (matrix complex))

;; mat_sum_dim'def
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (r Int) (c Int))
      (=>
        (< 0 r)
        (=>
          (< 0 c)
          (=>
            (forall ((e uni))
              (=>
                (sort a e)
                (=>
                  (mem a e s)
                  (= (rows complex1 (infix_at (matrix1 complex1) a f e)) r))))
            (=>
              (forall ((e uni))
                (=>
                  (sort a e)
                  (=>
                    (mem a e s)
                    (= (columns complex1 (infix_at (matrix1 complex1) a f e)) c))))
              (ite (= (cardinal a s) 0)
                (= (mat_sum_dim a s f r c) (tb2t65
                                             (make
                                               complex1
                                               r
                                               c
                                               (t2tb c_zero))))
                (= (mat_sum_dim a s f r c) (mat_sum a s f))))))))))

;; mat_sum_dim'spec
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (r Int) (c Int))
      (=>
        (< 0 r)
        (=>
          (< 0 c)
          (=>
            (forall ((e uni))
              (=>
                (sort a e)
                (=>
                  (mem a e s)
                  (= (rows complex1 (infix_at (matrix1 complex1) a f e)) r))))
            (=>
              (forall ((e uni))
                (=>
                  (sort a e)
                  (=>
                    (mem a e s)
                    (= (columns complex1 (infix_at (matrix1 complex1) a f e)) c))))
              (and
                (=>
                  (< 0 (cardinal a s))
                  (= (mat_sum_dim a s f r c) (mat_sum a s f)))
                (and
                  (=>
                    (= (cardinal a s) 0)
                    (= (mat_sum_dim a s f r c) (tb2t65
                                                 (make
                                                   complex1
                                                   r
                                                   c
                                                   (t2tb c_zero)))))
                  (and
                    (= (rows complex1 (t2tb65 (mat_sum_dim a s f r c))) r)
                    (= (columns complex1 (t2tb65 (mat_sum_dim a s f r c))) c)))))))))))

;; mat_sum_dim_to_mat_sum
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (r Int) (c Int))
      (=>
        (< 0 (cardinal a s))
        (=>
          (< 0 r)
          (=>
            (< 0 c)
            (=>
              (forall ((e uni))
                (=>
                  (sort a e)
                  (=>
                    (mem a e s)
                    (= (rows complex1 (infix_at (matrix1 complex1) a f e)) r))))
              (=>
                (forall ((e uni))
                  (=>
                    (sort a e)
                    (=>
                      (mem a e s)
                      (= (columns
                           complex1
                           (infix_at (matrix1 complex1) a f e)) c))))
                (= (mat_sum_dim a s f r c) (mat_sum a s f))))))))))

;; mat_sum_dim_to_make_zero
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (r Int) (c Int))
      (=>
        (= (cardinal a s) 0)
        (=>
          (forall ((e uni))
            (=>
              (sort a e)
              (=>
                (mem a e s)
                (= (rows complex1 (infix_at (matrix1 complex1) a f e)) r))))
          (=>
            (forall ((e uni))
              (=>
                (sort a e)
                (=>
                  (mem a e s)
                  (= (columns complex1 (infix_at (matrix1 complex1) a f e)) c))))
            (=>
              (< 0 r)
              (=>
                (< 0 c)
                (= (mat_sum_dim a s f r c) (tb2t65
                                             (make
                                               complex1
                                               r
                                               c
                                               (t2tb c_zero))))))))))))

;; mat_sum_dim_add
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (x uni) (r Int) (c Int))
      (=>
        (<= 0 (cardinal a s))
        (=>
          (not (mem a x s))
          (=>
            (forall ((e uni))
              (=>
                (sort a e)
                (=>
                  (mem a e (add a x s))
                  (= (rows complex1 (infix_at (matrix1 complex1) a f e)) r))))
            (=>
              (forall ((e uni))
                (=>
                  (sort a e)
                  (=>
                    (mem a e (add a x s))
                    (= (columns complex1 (infix_at (matrix1 complex1) a f e)) c))))
              (=>
                (< 0 r)
                (=>
                  (< 0 c)
                  (= (mat_sum_dim a (add a x s) f r c) (add_mat
                                                         (tb2t65
                                                           (infix_at
                                                             (matrix1
                                                               complex1)
                                                             a
                                                             f
                                                             x))
                                                         (mat_sum_dim
                                                           a
                                                           s
                                                           f
                                                           r
                                                           c))))))))))))

;; fc
(declare-fun fc159 (ty
  uni
  complex) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 complex))
      (sort (infix_mngt a (matrix1 complex1)) (fc159 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (a1 complex) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc159 a f a1) k)) (infix_asdtdt
                                                                    a1
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k)))))))

;; mat_sum_scalar
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (a1 complex))
      (=>
        (constant_size a s f)
        (=>
          (< 0 (cardinal a s))
          (= (mat_sum a s (fc159 a f a1)) (infix_asdtdt a1 (mat_sum a s f))))))))

;; fc
(declare-fun fc160 (ty
  uni
  complex) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 complex))
      (sort (infix_mngt a (matrix1 complex1)) (fc160 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (a1 complex) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc160 a f a1) k)) (infix_asdtdt
                                                                    a1
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k)))))))

;; mat_sum_scalar_rev
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (a1 complex))
      (=>
        (constant_size a s f)
        (=>
          (< 0 (cardinal a s))
          (= (infix_asdtdt a1 (mat_sum a s f)) (mat_sum a s (fc160 a f a1))))))))

;; fc
(declare-fun fc161 (ty
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc161 a x)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((x (matrix complex)) (us uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc161 a x) us)) x))))

;; mat_sum_const
(assert
  (forall ((a ty))
    (forall ((s uni) (x (matrix complex)))
      (=>
        (< 0 (cardinal a s))
        (= (mat_sum a s (fc161 a x)) (infix_asdtdt (i_to_c (cardinal a s)) x))))))

;; fc
(declare-fun fc162 (ty
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc162 a x)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((x (matrix complex)) (us uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc162 a x) us)) x))))

;; mat_sum_quot
(assert
  (forall ((a ty))
    (forall ((s uni) (x (matrix complex)))
      (=>
        (< 0 (cardinal a s))
        (= x (infix_asdtdt
               (infix_sldt c_one (i_to_c (cardinal a s)))
               (mat_sum a s (fc162 a x))))))))

;; fc
(declare-fun fc163 (ty
  uni
  (matrix complex)
  Int
  Int) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)) (x2 Int) (x3 Int))
      (sort (infix_mngt a (matrix1 complex1)) (fc163 a x x1 x2 x3)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (i Int) (j Int) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc163 a f m i j) k)) 
      (infix_asdtdt
        (tb2t (get complex1 (infix_at (matrix1 complex1) a f k) i j))
        m)))))

;; mat_sum_scalar_right
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (m (matrix complex)) (i Int) (j Int))
      (=>
        (constant_size a s f)
        (=>
          (< 0 (cardinal a s))
          (=>
            (and (<= 0 i) (< i (s_rows a s f)))
            (=>
              (and (<= 0 j) (< j (s_columns a s f)))
              (= (infix_asdtdt
                   (tb2t (get complex1 (t2tb65 (mat_sum a s f)) i j))
                   m) (mat_sum a s (fc163 a f m i j))))))))))

;; mat_sum_eq
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (g uni))
      (=>
        (< 0 (cardinal a s))
        (=>
          (constant_size a s f)
          (=>
            (forall ((a1 uni))
              (=>
                (sort a a1)
                (=>
                  (mem a a1 s)
                  (= (tb2t65 (infix_at (matrix1 complex1) a f a1)) (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    g
                                                                    a1))))))
            (= (mat_sum a s f) (mat_sum a s g))))))))

;; mat_sum_eq_gen
(assert
  (forall ((a ty))
    (forall ((s uni) (sqt uni) (f uni) (g uni))
      (=>
        (< 0 (cardinal a s))
        (=>
          (= s sqt)
          (=>
            (constant_size a s f)
            (=>
              (forall ((a1 uni))
                (=>
                  (sort a a1)
                  (=>
                    (mem a a1 s)
                    (= (tb2t65 (infix_at (matrix1 complex1) a f a1)) 
                    (tb2t65
                      (infix_at (matrix1 complex1) a g a1))))))
              (= (mat_sum a s f) (mat_sum a sqt g)))))))))

;; mat_sum_eq_gen_int
(assert
  (forall ((i1 Int) (i2 Int) (o1 Int) (o2 Int) (f (Array Int (matrix complex))) (g (Array Int (matrix complex))))
    (=>
      (< i1 o1)
      (=>
        (= i1 o1)
        (=>
          (= i2 o2)
          (=>
            (constant_size int (t2tb16 (to_fset i1 o1)) (t2tb68 f))
            (=>
              (forall ((a Int))
                (=>
                  (mem int (t2tb8 a) (t2tb16 (to_fset i1 o1)))
                  (= (tb2t65
                       (infix_at (matrix1 complex1) int (t2tb68 f) (t2tb8 a))) 
                  (tb2t65
                    (infix_at (matrix1 complex1) int (t2tb68 g) (t2tb8 a))))))
              (= (mat_sum int (t2tb16 (to_fset i1 o1)) (t2tb68 f)) (mat_sum
                                                                    int
                                                                    (t2tb16
                                                                    (to_fset
                                                                    i2
                                                                    o2))
                                                                    (t2tb68
                                                                    g))))))))))

;; mat_sum_comp_eq
(assert
  (forall ((b ty))
    (forall ((s uni) (f uni) (g uni) (h uni))
      (=>
        (constant_size b s f)
        (=>
          (constant_size b s g)
          (=>
            (constant_size b s h)
            (=>
              (and
                (= (s_rows b s f) (s_rows b s g))
                (= (s_rows b s g) (s_rows b s h)))
              (=>
                (and
                  (= (s_columns b s f) (s_columns b s g))
                  (= (s_columns b s g) (s_columns b s h)))
                (=>
                  (< 0 (cardinal b s))
                  (=>
                    (forall ((e uni))
                      (=>
                        (sort b e)
                        (forall ((i Int) (j Int))
                          (=>
                            (mem b e s)
                            (=>
                              (and (<= 0 i) (< i (s_rows b s f)))
                              (=>
                                (and (<= 0 j) (< j (s_columns b s f)))
                                (= (infix_pldt
                                     (tb2t
                                       (get
                                         complex1
                                         (infix_at (matrix1 complex1) b f e)
                                         i
                                         j))
                                     (tb2t
                                       (get
                                         complex1
                                         (infix_at (matrix1 complex1) b g e)
                                         i
                                         j))) (tb2t
                                                (get
                                                  complex1
                                                  (infix_at
                                                    (matrix1 complex1)
                                                    b
                                                    h
                                                    e)
                                                  i
                                                  j)))))))))
                    (= (add_mat (mat_sum b s f) (mat_sum b s g)) (mat_sum
                                                                   b
                                                                   s
                                                                   h))))))))))))

;; mat_sum_dim_eq
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (g uni) (r Int) (c Int))
      (=>
        (< 0 r)
        (=>
          (< 0 c)
          (=>
            (forall ((e uni))
              (=>
                (sort a e)
                (=>
                  (mem a e s)
                  (= (rows complex1 (infix_at (matrix1 complex1) a f e)) r))))
            (=>
              (forall ((e uni))
                (=>
                  (sort a e)
                  (=>
                    (mem a e s)
                    (= (columns complex1 (infix_at (matrix1 complex1) a f e)) c))))
              (=>
                (forall ((e uni))
                  (=>
                    (sort a e)
                    (=>
                      (mem a e s)
                      (= (tb2t65 (infix_at (matrix1 complex1) a f e)) 
                      (tb2t65
                        (infix_at (matrix1 complex1) a g e))))))
                (= (mat_sum_dim a s f r c) (mat_sum_dim a s g r c))))))))))

;; fc
(declare-fun fc164 (ty
  ty
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni))
      (sort (infix_mngt a (matrix1 complex1)) (fc164 b a x x1)))))

;; t2tb
(declare-fun t2tb72 ((Array circuit (matrix complex))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array circuit (matrix complex))))
    (sort (infix_mngt circuit1 (matrix1 complex1)) (t2tb72 x))))

;; tb2t
(declare-fun tb2t72 (uni) (Array circuit (matrix complex)))

;; BridgeL
(assert
  (forall ((i (Array circuit (matrix complex))))
    (! (= (tb2t72 (t2tb72 i)) i) :pattern ((t2tb72 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort (infix_mngt circuit1 (matrix1 complex1)) j)
         (= (t2tb72 (tb2t72 j)) j)) :pattern ((t2tb72 (tb2t72 j))) )))

;; t2tb
(declare-fun t2tb73 ((Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (matrix complex))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (matrix complex))))
    (sort
      (infix_mngt
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        (matrix1 complex1))
      (t2tb73 x))))

;; tb2t
(declare-fun tb2t73 (uni) (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (matrix complex)))

;; BridgeL
(assert
  (forall ((i (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (matrix complex))))
    (! (= (tb2t73 (t2tb73 i)) i) :pattern ((t2tb73 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort
           (infix_mngt
             (infix_mngt
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int)))
             (matrix1 complex1))
           j)
         (= (t2tb73 (tb2t73 j)) j)) :pattern ((t2tb73 (tb2t73 j))) )))

;; fc'def
(assert
  (forall ((f (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (matrix complex))) (t (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (a circuit))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           circuit1
           (fc164
             (infix_mngt
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int)))
             circuit1
             (t2tb73 f)
             (t2tb2 t))
           (t2tb13 a))) (tb2t65
                          (infix_at
                            (matrix1 complex1)
                            (infix_mngt
                              (infix_mngt int int)
                              (infix_mngt
                                (infix_mngt int int)
                                (infix_mngt int int)))
                            (t2tb73 f)
                            (t2tb3 (select t a)))))))

;; t2tb
(declare-fun t2tb74 ((Array (Array Int Int) (matrix complex))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (Array Int Int) (matrix complex))))
    (sort (infix_mngt (infix_mngt int int) (matrix1 complex1)) (t2tb74 x))))

;; tb2t
(declare-fun tb2t74 (uni) (Array (Array Int Int) (matrix complex)))

;; BridgeL
(assert
  (forall ((i (Array (Array Int Int) (matrix complex))))
    (! (= (tb2t74 (t2tb74 i)) i) :pattern ((t2tb74 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort (infix_mngt (infix_mngt int int) (matrix1 complex1)) j)
         (= (t2tb74 (tb2t74 j)) j)) :pattern ((t2tb74 (tb2t74 j))) )))

;; t2tb
(declare-fun t2tb75 ((Array (Array (Array Int Int) (Array Int Int)) (matrix complex))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (Array (Array Int Int) (Array Int Int)) (matrix complex))))
    (sort
      (infix_mngt
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (matrix1 complex1))
      (t2tb75 x))))

;; tb2t
(declare-fun tb2t75 (uni) (Array (Array (Array Int Int) (Array Int Int)) (matrix complex)))

;; BridgeL
(assert
  (forall ((i (Array (Array (Array Int Int) (Array Int Int)) (matrix complex))))
    (! (= (tb2t75 (t2tb75 i)) i) :pattern ((t2tb75 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort
           (infix_mngt
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (matrix1 complex1))
           j)
         (= (t2tb75 (tb2t75 j)) j)) :pattern ((t2tb75 (tb2t75 j))) )))

;; fc'def
(assert
  (forall ((f (Array (Array (Array Int Int) (Array Int Int)) (matrix complex))) (t (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (a (Array Int Int)))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           (infix_mngt int int)
           (fc164
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (infix_mngt int int)
             (t2tb75 f)
             (t2tb3 t))
           (t2tb7 a))) (tb2t65
                         (infix_at
                           (matrix1 complex1)
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt int int))
                           (t2tb75 f)
                           (t2tb5 (select t a)))))))

;; fc'def
(assert
  (forall ((f (Array (Array Int Int) (matrix complex))) (t (Array (Array Int Int) (Array Int Int))) (a (Array Int Int)))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           (infix_mngt int int)
           (fc164
             (infix_mngt int int)
             (infix_mngt int int)
             (t2tb74 f)
             (t2tb5 t))
           (t2tb7 a))) (tb2t65
                         (infix_at
                           (matrix1 complex1)
                           (infix_mngt int int)
                           (t2tb74 f)
                           (t2tb7 (select t a)))))))

;; fc'def
(assert
  (forall ((f (Array Int (matrix complex))) (t (Array Int Int)) (a Int))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           int
           (fc164 int int (t2tb68 f) (t2tb7 t))
           (t2tb8 a))) (tb2t65
                         (infix_at
                           (matrix1 complex1)
                           int
                           (t2tb68 f)
                           (t2tb8 (select t a)))))))

;; fc'def
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (t uni) (a1 uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc164 b a f t) a1)) 
      (tb2t65
        (infix_at (matrix1 complex1) b f (infix_at b a t a1)))))))

;; constant_size_map
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (t uni))
      (=>
        (constant_size a s (fc164 b a f t))
        (constant_size b (map1 b a t s) f)))))

;; fc
(declare-fun fc165 (ty
  ty
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni))
      (sort (infix_mngt a (matrix1 complex1)) (fc165 b a x x1)))))

;; fc
(declare-fun fc166 (ty
  ty
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni))
      (sort (infix_mngt a (matrix1 complex1)) (fc166 b a x x1)))))

;; fc'def
(assert
  (forall ((f (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (matrix complex))) (t (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (a circuit))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           circuit1
           (fc165
             (infix_mngt
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int)))
             circuit1
             (t2tb73 f)
             (t2tb2 t))
           (t2tb13 a))) (tb2t65
                          (infix_at
                            (matrix1 complex1)
                            (infix_mngt
                              (infix_mngt int int)
                              (infix_mngt
                                (infix_mngt int int)
                                (infix_mngt int int)))
                            (t2tb73 f)
                            (t2tb3 (select t a)))))))

;; fc'def
(assert
  (forall ((f (Array (Array (Array Int Int) (Array Int Int)) (matrix complex))) (t (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (a (Array Int Int)))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           (infix_mngt int int)
           (fc165
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (infix_mngt int int)
             (t2tb75 f)
             (t2tb3 t))
           (t2tb7 a))) (tb2t65
                         (infix_at
                           (matrix1 complex1)
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt int int))
                           (t2tb75 f)
                           (t2tb5 (select t a)))))))

;; fc'def
(assert
  (forall ((f (Array (Array Int Int) (matrix complex))) (t (Array (Array Int Int) (Array Int Int))) (a (Array Int Int)))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           (infix_mngt int int)
           (fc165
             (infix_mngt int int)
             (infix_mngt int int)
             (t2tb74 f)
             (t2tb5 t))
           (t2tb7 a))) (tb2t65
                         (infix_at
                           (matrix1 complex1)
                           (infix_mngt int int)
                           (t2tb74 f)
                           (t2tb7 (select t a)))))))

;; fc'def
(assert
  (forall ((f (Array Int (matrix complex))) (t (Array Int Int)) (a Int))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           int
           (fc165 int int (t2tb68 f) (t2tb7 t))
           (t2tb8 a))) (tb2t65
                         (infix_at
                           (matrix1 complex1)
                           int
                           (t2tb68 f)
                           (t2tb8 (select t a)))))))

;; fc'def
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (t uni) (a1 uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc165 b a f t) a1)) 
      (tb2t65
        (infix_at (matrix1 complex1) b f (infix_at b a t a1)))))))

;; fc'def
(assert
  (forall ((f (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (matrix complex))) (t (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (a circuit))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           circuit1
           (fc166
             (infix_mngt
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int)))
             circuit1
             (t2tb73 f)
             (t2tb2 t))
           (t2tb13 a))) (tb2t65
                          (infix_at
                            (matrix1 complex1)
                            (infix_mngt
                              (infix_mngt int int)
                              (infix_mngt
                                (infix_mngt int int)
                                (infix_mngt int int)))
                            (t2tb73 f)
                            (t2tb3 (select t a)))))))

;; fc'def
(assert
  (forall ((f (Array (Array (Array Int Int) (Array Int Int)) (matrix complex))) (t (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (a (Array Int Int)))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           (infix_mngt int int)
           (fc166
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (infix_mngt int int)
             (t2tb75 f)
             (t2tb3 t))
           (t2tb7 a))) (tb2t65
                         (infix_at
                           (matrix1 complex1)
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt int int))
                           (t2tb75 f)
                           (t2tb5 (select t a)))))))

;; fc'def
(assert
  (forall ((f (Array (Array Int Int) (matrix complex))) (t (Array (Array Int Int) (Array Int Int))) (a (Array Int Int)))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           (infix_mngt int int)
           (fc166
             (infix_mngt int int)
             (infix_mngt int int)
             (t2tb74 f)
             (t2tb5 t))
           (t2tb7 a))) (tb2t65
                         (infix_at
                           (matrix1 complex1)
                           (infix_mngt int int)
                           (t2tb74 f)
                           (t2tb7 (select t a)))))))

;; fc'def
(assert
  (forall ((f (Array Int (matrix complex))) (t (Array Int Int)) (a Int))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           int
           (fc166 int int (t2tb68 f) (t2tb7 t))
           (t2tb8 a))) (tb2t65
                         (infix_at
                           (matrix1 complex1)
                           int
                           (t2tb68 f)
                           (t2tb8 (select t a)))))))

;; fc'def
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (t uni) (a1 uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc166 b a f t) a1)) 
      (tb2t65
        (infix_at (matrix1 complex1) b f (infix_at b a t a1)))))))

;; map_mat_sum
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (t uni))
      (=>
        (< 0 (cardinal a s))
        (=>
          (constant_size a s (fc165 b a f t))
          (=>
            (p_injective b a t s)
            (= (mat_sum b (map1 b a t s) f) (mat_sum a s (fc166 b a f t)))))))))

;; fc
(declare-fun fc167 (ty
  ty
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni))
      (sort (infix_mngt a (matrix1 complex1)) (fc167 b a x x1)))))

;; fc
(declare-fun fc168 (ty
  ty
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni))
      (sort (infix_mngt a (matrix1 complex1)) (fc168 b a x x1)))))

;; fc'def
(assert
  (forall ((f (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (matrix complex))) (t (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (a circuit))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           circuit1
           (fc167
             (infix_mngt
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int)))
             circuit1
             (t2tb73 f)
             (t2tb2 t))
           (t2tb13 a))) (tb2t65
                          (infix_at
                            (matrix1 complex1)
                            (infix_mngt
                              (infix_mngt int int)
                              (infix_mngt
                                (infix_mngt int int)
                                (infix_mngt int int)))
                            (t2tb73 f)
                            (t2tb3 (select t a)))))))

;; fc'def
(assert
  (forall ((f (Array (Array (Array Int Int) (Array Int Int)) (matrix complex))) (t (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (a (Array Int Int)))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           (infix_mngt int int)
           (fc167
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (infix_mngt int int)
             (t2tb75 f)
             (t2tb3 t))
           (t2tb7 a))) (tb2t65
                         (infix_at
                           (matrix1 complex1)
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt int int))
                           (t2tb75 f)
                           (t2tb5 (select t a)))))))

;; fc'def
(assert
  (forall ((f (Array (Array Int Int) (matrix complex))) (t (Array (Array Int Int) (Array Int Int))) (a (Array Int Int)))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           (infix_mngt int int)
           (fc167
             (infix_mngt int int)
             (infix_mngt int int)
             (t2tb74 f)
             (t2tb5 t))
           (t2tb7 a))) (tb2t65
                         (infix_at
                           (matrix1 complex1)
                           (infix_mngt int int)
                           (t2tb74 f)
                           (t2tb7 (select t a)))))))

;; fc'def
(assert
  (forall ((f (Array Int (matrix complex))) (t (Array Int Int)) (a Int))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           int
           (fc167 int int (t2tb68 f) (t2tb7 t))
           (t2tb8 a))) (tb2t65
                         (infix_at
                           (matrix1 complex1)
                           int
                           (t2tb68 f)
                           (t2tb8 (select t a)))))))

;; fc'def
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (t uni) (a1 uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc167 b a f t) a1)) 
      (tb2t65
        (infix_at (matrix1 complex1) b f (infix_at b a t a1)))))))

;; fc'def
(assert
  (forall ((f (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (matrix complex))) (t (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (a circuit))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           circuit1
           (fc168
             (infix_mngt
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int)))
             circuit1
             (t2tb73 f)
             (t2tb2 t))
           (t2tb13 a))) (tb2t65
                          (infix_at
                            (matrix1 complex1)
                            (infix_mngt
                              (infix_mngt int int)
                              (infix_mngt
                                (infix_mngt int int)
                                (infix_mngt int int)))
                            (t2tb73 f)
                            (t2tb3 (select t a)))))))

;; fc'def
(assert
  (forall ((f (Array (Array (Array Int Int) (Array Int Int)) (matrix complex))) (t (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (a (Array Int Int)))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           (infix_mngt int int)
           (fc168
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (infix_mngt int int)
             (t2tb75 f)
             (t2tb3 t))
           (t2tb7 a))) (tb2t65
                         (infix_at
                           (matrix1 complex1)
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt int int))
                           (t2tb75 f)
                           (t2tb5 (select t a)))))))

;; fc'def
(assert
  (forall ((f (Array (Array Int Int) (matrix complex))) (t (Array (Array Int Int) (Array Int Int))) (a (Array Int Int)))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           (infix_mngt int int)
           (fc168
             (infix_mngt int int)
             (infix_mngt int int)
             (t2tb74 f)
             (t2tb5 t))
           (t2tb7 a))) (tb2t65
                         (infix_at
                           (matrix1 complex1)
                           (infix_mngt int int)
                           (t2tb74 f)
                           (t2tb7 (select t a)))))))

;; fc'def
(assert
  (forall ((f (Array Int (matrix complex))) (t (Array Int Int)) (a Int))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           int
           (fc168 int int (t2tb68 f) (t2tb7 t))
           (t2tb8 a))) (tb2t65
                         (infix_at
                           (matrix1 complex1)
                           int
                           (t2tb68 f)
                           (t2tb8 (select t a)))))))

;; fc'def
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (t uni) (a1 uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc168 b a f t) a1)) 
      (tb2t65
        (infix_at (matrix1 complex1) b f (infix_at b a t a1)))))))

;; map_mat_sum_rec
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (t uni))
      (=>
        (< 0 (cardinal a s))
        (=>
          (constant_size a s (fc167 b a f t))
          (=>
            (p_injective b a t s)
            (= (mat_sum a s (fc168 b a f t)) (mat_sum b (map1 b a t s) f))))))))

;; identity
(declare-fun identity1 () (Array (matrix complex) (matrix complex)))

;; identity_def
(assert
  (forall ((y (matrix complex)))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           (matrix1 complex1)
           (t2tb66 identity1)
           (t2tb65 y))) y)))

;; t2tb
(declare-fun t2tb76 ((set (matrix complex))) uni)

;; t2tb_sort
(assert
  (forall ((x (set (matrix complex))))
    (sort (set1 (matrix1 complex1)) (t2tb76 x))))

;; tb2t
(declare-fun tb2t76 (uni) (set (matrix complex)))

;; BridgeL
(assert
  (forall ((i (set (matrix complex))))
    (! (= (tb2t76 (t2tb76 i)) i) :pattern ((t2tb76 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=> (sort (set1 (matrix1 complex1)) j) (= (t2tb76 (tb2t76 j)) j)) :pattern (
    (t2tb76
      (tb2t76 j))) )))

;; mat_sum_id
(assert
  (forall ((a ty))
    (forall ((f uni) (s uni))
      (=>
        (< 0 (cardinal a s))
        (=>
          (constant_size a s f)
          (=>
            (constant_size
              (matrix1 complex1)
              (map1 (matrix1 complex1) a f s)
              (t2tb66 identity1))
            (=>
              (p_injective (matrix1 complex1) a f s)
              (= (mat_sum
                   (matrix1 complex1)
                   (map1 (matrix1 complex1) a f s)
                   (t2tb66 identity1)) (mat_sum a s f)))))))))

;; nonn_mat_subset
(declare-fun nonn_mat_subset (ty
  uni
  uni) uni)

;; nonn_mat_subset_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 uni)) (sort (set1 a) (nonn_mat_subset a x x1)))))

;; result
(declare-fun result20 (ty
  uni
  uni) uni)

;; result_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 uni)) (sort (infix_mngt a bool) (result20 a x x1)))))

;; result'def
(assert
  (forall ((a ty))
    (forall ((f uni) (s uni) (e uni))
      (=
        (= (tb2t10 (infix_at bool a (result20 a f s) e)) true)
        (not
          (infix_eqeq
            (matrix1 complex1)
            (infix_at (matrix1 complex1) a f e)
            (make complex1 (s_rows a s f) (s_columns a s f) (t2tb c_zero))))))))

;; nonn_mat_subset'def
(assert
  (forall ((a ty))
    (forall ((f uni) (s uni))
      (=>
        (constant_size a s f)
        (= (nonn_mat_subset a f s) (filter_ a s (result20 a f s)))))))

;; nonn_mat_subset'spec
(assert
  (forall ((a ty))
    (forall ((f uni) (s uni))
      (=>
        (constant_size a s f)
        (and
          (subset1 a (nonn_mat_subset a f s) s)
          (and
            (forall ((e uni))
              (=> (mem a e (nonn_mat_subset a f s)) (mem a e s)))
            (and
              (constant_size a (nonn_mat_subset a f s) f)
              (and
                (=>
                  (not (= (nonn_mat_subset a f s) (empty a)))
                  (= (s_rows a (nonn_mat_subset a f s) f) (s_rows a s f)))
                (=>
                  (not (= (nonn_mat_subset a f s) (empty a)))
                  (= (s_columns a (nonn_mat_subset a f s) f) (s_columns
                                                               a
                                                               s
                                                               f)))))))))))

;; mat_subset_elt
(assert
  (forall ((a ty))
    (forall ((f uni) (s uni))
      (=>
        (constant_size a s f)
        (forall ((e uni)) (=> (mem a e (nonn_mat_subset a f s)) (mem a e s)))))))

;; mat_subset_nonn_elt
(assert
  (forall ((a ty))
    (forall ((f uni) (s uni))
      (=>
        (constant_size a s f)
        (forall ((e uni))
          (=>
            (mem a e (nonn_mat_subset a f s))
            (not
              (= (tb2t65 (infix_at (matrix1 complex1) a f e)) (tb2t65
                                                                (make
                                                                  complex1
                                                                  (s_rows
                                                                    a
                                                                    s
                                                                    f)
                                                                  (s_columns
                                                                    a
                                                                    s
                                                                    f)
                                                                  (t2tb
                                                                    c_zero)))))))))))

;; nonn_mat_sum_cardzero
(assert
  (forall ((a ty))
    (forall ((f uni) (s uni) (r Int) (c Int))
      (=>
        (= (cardinal a s) 0)
        (=>
          (< 0 r)
          (=>
            (< 0 c)
            (= (mat_sum_dim a s f r c) (mat_sum_dim
                                         a
                                         (nonn_mat_subset a f s)
                                         f
                                         r
                                         c))))))))

;; nonn_mat_sum_cardone
(assert
  (forall ((a ty))
    (forall ((f uni) (s uni) (r Int) (c Int))
      (=>
        (= (cardinal a s) 1)
        (=>
          (< 0 r)
          (=>
            (< 0 c)
            (=>
              (= (rows
                   complex1
                   (infix_at (matrix1 complex1) a f (choose1 a s))) r)
              (=>
                (= (columns
                     complex1
                     (infix_at (matrix1 complex1) a f (choose1 a s))) c)
                (= (mat_sum_dim a s f r c) (mat_sum_dim
                                             a
                                             (nonn_mat_subset a f s)
                                             f
                                             r
                                             c))))))))))

;; mat_sum_null_but_maybe_one_elt
(assert
  (forall ((a ty))
    (forall ((f uni) (s uni) (e uni))
      (=>
        (< 1 (cardinal a s))
        (=>
          (constant_size a s f)
          (=>
            (mem a e s)
            (=>
              (forall ((eqt uni))
                (=>
                  (sort a eqt)
                  (=>
                    (mem a eqt s)
                    (=>
                      (not (= e eqt))
                      (null_mat
                        (tb2t65 (infix_at (matrix1 complex1) a f eqt)))))))
              (= (mat_sum a s f) (tb2t65 (infix_at (matrix1 complex1) a f e))))))))))

;; nonn_mat_sum_plus_one
(assert
  (forall ((a ty))
    (forall ((f uni) (s uni) (r Int) (c Int))
      (=>
        (< 1 (cardinal a s))
        (=>
          (< 0 r)
          (=>
            (< 0 c)
            (=>
              (forall ((e uni))
                (=>
                  (sort a e)
                  (=>
                    (mem a e s)
                    (= (rows complex1 (infix_at (matrix1 complex1) a f e)) r))))
              (=>
                (forall ((e uni))
                  (=>
                    (sort a e)
                    (=>
                      (mem a e s)
                      (= (columns
                           complex1
                           (infix_at (matrix1 complex1) a f e)) c))))
                (=>
                  (= (mat_sum_dim a (remove a (choose1 a s) s) f r c) 
                  (mat_sum_dim
                    a
                    (nonn_mat_subset a f (remove a (choose1 a s) s))
                    f
                    r
                    c))
                  (= (mat_sum_dim a s f r c) (mat_sum_dim
                                               a
                                               (nonn_mat_subset a f s)
                                               f
                                               r
                                               c)))))))))))

;; nonn_mat_sum
(assert
  (forall ((a ty))
    (forall ((f uni) (s uni) (r Int) (c Int))
      (=>
        (< 0 r)
        (=>
          (< 0 c)
          (=>
            (forall ((e uni))
              (=>
                (sort a e)
                (=>
                  (mem a e s)
                  (= (rows complex1 (infix_at (matrix1 complex1) a f e)) r))))
            (=>
              (forall ((e uni))
                (=>
                  (sort a e)
                  (=>
                    (mem a e s)
                    (= (columns complex1 (infix_at (matrix1 complex1) a f e)) c))))
              (= (mat_sum_dim a s f r c) (mat_sum_dim
                                           a
                                           (nonn_mat_subset a f s)
                                           f
                                           r
                                           c)))))))))

;; fc
(declare-fun fc169 (ty
  ty
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (c ty))
    (forall ((x uni) (x1 uni))
      (sort (infix_mngt a (matrix1 complex1)) (fc169 c a x x1)))))

;; fc
(declare-fun fc170 (ty
  ty
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((b ty) (c ty))
    (forall ((x uni) (x1 uni))
      (sort (infix_mngt b (matrix1 complex1)) (fc170 c b x x1)))))

;; fc'def
(assert
  (forall ((t1 (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (f (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (matrix complex))) (a circuit))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           circuit1
           (fc169
             (infix_mngt
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int)))
             circuit1
             (t2tb2 t1)
             (t2tb73 f))
           (t2tb13 a))) (tb2t65
                          (infix_at
                            (matrix1 complex1)
                            (infix_mngt
                              (infix_mngt int int)
                              (infix_mngt
                                (infix_mngt int int)
                                (infix_mngt int int)))
                            (t2tb73 f)
                            (t2tb3 (select t1 a)))))))

;; fc'def
(assert
  (forall ((t1 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (f (Array (Array (Array Int Int) (Array Int Int)) (matrix complex))) (a (Array Int Int)))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           (infix_mngt int int)
           (fc169
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (infix_mngt int int)
             (t2tb3 t1)
             (t2tb75 f))
           (t2tb7 a))) (tb2t65
                         (infix_at
                           (matrix1 complex1)
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt int int))
                           (t2tb75 f)
                           (t2tb5 (select t1 a)))))))

;; fc'def
(assert
  (forall ((t1 (Array (Array Int Int) (Array Int Int))) (f (Array (Array Int Int) (matrix complex))) (a (Array Int Int)))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           (infix_mngt int int)
           (fc169
             (infix_mngt int int)
             (infix_mngt int int)
             (t2tb5 t1)
             (t2tb74 f))
           (t2tb7 a))) (tb2t65
                         (infix_at
                           (matrix1 complex1)
                           (infix_mngt int int)
                           (t2tb74 f)
                           (t2tb7 (select t1 a)))))))

;; fc'def
(assert
  (forall ((t1 (Array Int Int)) (f (Array Int (matrix complex))) (a Int))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           int
           (fc169 int int (t2tb7 t1) (t2tb68 f))
           (t2tb8 a))) (tb2t65
                         (infix_at
                           (matrix1 complex1)
                           int
                           (t2tb68 f)
                           (t2tb8 (select t1 a)))))))

;; fc'def
(assert
  (forall ((a ty) (c ty))
    (forall ((t1 uni) (f uni) (a1 uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc169 c a t1 f) a1)) 
      (tb2t65
        (infix_at (matrix1 complex1) c f (infix_at c a t1 a1)))))))

;; fc'def
(assert
  (forall ((t2 (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (f (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (matrix complex))) (a circuit))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           circuit1
           (fc170
             (infix_mngt
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int)))
             circuit1
             (t2tb2 t2)
             (t2tb73 f))
           (t2tb13 a))) (tb2t65
                          (infix_at
                            (matrix1 complex1)
                            (infix_mngt
                              (infix_mngt int int)
                              (infix_mngt
                                (infix_mngt int int)
                                (infix_mngt int int)))
                            (t2tb73 f)
                            (t2tb3 (select t2 a)))))))

;; fc'def
(assert
  (forall ((t2 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (f (Array (Array (Array Int Int) (Array Int Int)) (matrix complex))) (a (Array Int Int)))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           (infix_mngt int int)
           (fc170
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (infix_mngt int int)
             (t2tb3 t2)
             (t2tb75 f))
           (t2tb7 a))) (tb2t65
                         (infix_at
                           (matrix1 complex1)
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt int int))
                           (t2tb75 f)
                           (t2tb5 (select t2 a)))))))

;; fc'def
(assert
  (forall ((t2 (Array (Array Int Int) (Array Int Int))) (f (Array (Array Int Int) (matrix complex))) (a (Array Int Int)))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           (infix_mngt int int)
           (fc170
             (infix_mngt int int)
             (infix_mngt int int)
             (t2tb5 t2)
             (t2tb74 f))
           (t2tb7 a))) (tb2t65
                         (infix_at
                           (matrix1 complex1)
                           (infix_mngt int int)
                           (t2tb74 f)
                           (t2tb7 (select t2 a)))))))

;; fc'def
(assert
  (forall ((t2 (Array Int Int)) (f (Array Int (matrix complex))) (a Int))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           int
           (fc170 int int (t2tb7 t2) (t2tb68 f))
           (t2tb8 a))) (tb2t65
                         (infix_at
                           (matrix1 complex1)
                           int
                           (t2tb68 f)
                           (t2tb8 (select t2 a)))))))

;; fc'def
(assert
  (forall ((b ty) (c ty))
    (forall ((t2 uni) (f uni) (a uni))
      (= (tb2t65 (infix_at (matrix1 complex1) b (fc170 c b t2 f) a)) 
      (tb2t65
        (infix_at (matrix1 complex1) c f (infix_at c b t2 a)))))))

;; mat_sum_map_map
(assert
  (forall ((a ty) (b ty) (c ty))
    (forall ((s1 uni) (s2 uni) (t1 uni) (t2 uni) (f uni))
      (=>
        (< 0 (cardinal a s1))
        (=>
          (p_injective c a t1 s1)
          (=>
            (constant_size a s1 (fc169 c a t1 f))
            (=>
              (< 0 (cardinal b s2))
              (=>
                (p_injective c b t2 s2)
                (=>
                  (constant_size b s2 (fc170 c b t2 f))
                  (=>
                    (= (map1 c a t1 s1) (map1 c b t2 s2))
                    (= (mat_sum c (map1 c a t1 s1) f) (mat_sum
                                                        c
                                                        (map1 c b t2 s2)
                                                        f))))))))))))

;; mat_sum_disjoint_transitivity
(assert
  (forall ((a ty))
    (forall ((s uni) (s1 uni) (s2 uni) (f uni))
      (=>
        (constant_size a s f)
        (=>
          (= (inter a s1 s2) (empty a))
          (=>
            (= (union1 a s1 s2) s)
            (=>
              (< 0 (cardinal a s1))
              (=>
                (< 0 (cardinal a s2))
                (= (add_mat (mat_sum a s1 f) (mat_sum a s2 f)) (mat_sum
                                                                 a
                                                                 s
                                                                 f))))))))))

;; mat_sum_null
(assert
  (forall ((a ty))
    (forall ((f uni) (s uni))
      (=>
        (< 1 (cardinal a s))
        (=>
          (constant_size a s f)
          (=>
            (forall ((e uni))
              (=>
                (sort a e)
                (=>
                  (mem a e s)
                  (forall ((i Int) (j Int))
                    (=>
                      (valid_index
                        complex1
                        (infix_at (matrix1 complex1) a f e)
                        i
                        j)
                      (= (tb2t
                           (get
                             complex1
                             (infix_at (matrix1 complex1) a f e)
                             i
                             j)) c_zero))))))
            (forall ((i Int) (j Int))
              (=>
                (valid_index complex1 (t2tb65 (mat_sum a s f)) i j)
                (= (tb2t (get complex1 (t2tb65 (mat_sum a s f)) i j)) 
                c_zero)))))))))

;; mat_sum_null_b
(assert
  (forall ((a ty))
    (forall ((f uni) (s uni) (r Int) (c Int))
      (=>
        (< 1 (cardinal a s))
        (=>
          (forall ((e uni))
            (=>
              (sort a e)
              (=>
                (mem a e s)
                (= (rows complex1 (infix_at (matrix1 complex1) a f e)) r))))
          (=>
            (forall ((e uni))
              (=>
                (sort a e)
                (=>
                  (mem a e s)
                  (= (columns complex1 (infix_at (matrix1 complex1) a f e)) c))))
            (=>
              (forall ((e uni))
                (=>
                  (sort a e)
                  (=>
                    (mem a e s)
                    (forall ((i Int) (j Int))
                      (=>
                        (valid_index
                          complex1
                          (infix_at (matrix1 complex1) a f e)
                          i
                          j)
                        (= (tb2t
                             (get
                               complex1
                               (infix_at (matrix1 complex1) a f e)
                               i
                               j)) c_zero))))))
              (forall ((i Int) (j Int))
                (=>
                  (and (<= 0 i) (< i r))
                  (=>
                    (and (<= 0 j) (< j c))
                    (= (tb2t (get complex1 (t2tb65 (mat_sum a s f)) i j)) 
                    c_zero)))))))))))

;; fc
(declare-fun fc171 (ty
  ty
  uni
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni) (x2 uni))
      (sort (infix_mngt a (matrix1 complex1)) (fc171 b a x x1 x2)))))

;; fc'def
(assert
  (forall ((f (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (matrix complex))) (injz (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (injo (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (e circuit))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           circuit1
           (fc171
             (infix_mngt
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int)))
             circuit1
             (t2tb73 f)
             (t2tb2 injz)
             (t2tb2 injo))
           (t2tb13 e))) (add_mat
                          (tb2t65
                            (infix_at
                              (matrix1 complex1)
                              (infix_mngt
                                (infix_mngt int int)
                                (infix_mngt
                                  (infix_mngt int int)
                                  (infix_mngt int int)))
                              (t2tb73 f)
                              (t2tb3 (select injz e))))
                          (tb2t65
                            (infix_at
                              (matrix1 complex1)
                              (infix_mngt
                                (infix_mngt int int)
                                (infix_mngt
                                  (infix_mngt int int)
                                  (infix_mngt int int)))
                              (t2tb73 f)
                              (t2tb3 (select injo e))))))))

;; fc'def
(assert
  (forall ((f (Array (Array (Array Int Int) (Array Int Int)) (matrix complex))) (injz (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (injo (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (e (Array Int Int)))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           (infix_mngt int int)
           (fc171
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (infix_mngt int int)
             (t2tb75 f)
             (t2tb3 injz)
             (t2tb3 injo))
           (t2tb7 e))) (add_mat
                         (tb2t65
                           (infix_at
                             (matrix1 complex1)
                             (infix_mngt
                               (infix_mngt int int)
                               (infix_mngt int int))
                             (t2tb75 f)
                             (t2tb5 (select injz e))))
                         (tb2t65
                           (infix_at
                             (matrix1 complex1)
                             (infix_mngt
                               (infix_mngt int int)
                               (infix_mngt int int))
                             (t2tb75 f)
                             (t2tb5 (select injo e))))))))

;; fc'def
(assert
  (forall ((f (Array (Array Int Int) (matrix complex))) (injz (Array (Array Int Int) (Array Int Int))) (injo (Array (Array Int Int) (Array Int Int))) (e (Array Int Int)))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           (infix_mngt int int)
           (fc171
             (infix_mngt int int)
             (infix_mngt int int)
             (t2tb74 f)
             (t2tb5 injz)
             (t2tb5 injo))
           (t2tb7 e))) (add_mat
                         (tb2t65
                           (infix_at
                             (matrix1 complex1)
                             (infix_mngt int int)
                             (t2tb74 f)
                             (t2tb7 (select injz e))))
                         (tb2t65
                           (infix_at
                             (matrix1 complex1)
                             (infix_mngt int int)
                             (t2tb74 f)
                             (t2tb7 (select injo e))))))))

;; fc'def
(assert
  (forall ((f (Array Int (matrix complex))) (injz (Array Int Int)) (injo (Array Int Int)) (e Int))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           int
           (fc171 int int (t2tb68 f) (t2tb7 injz) (t2tb7 injo))
           (t2tb8 e))) (add_mat
                         (tb2t65
                           (infix_at
                             (matrix1 complex1)
                             int
                             (t2tb68 f)
                             (t2tb8 (select injz e))))
                         (tb2t65
                           (infix_at
                             (matrix1 complex1)
                             int
                             (t2tb68 f)
                             (t2tb8 (select injo e))))))))

;; fc'def
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (injz uni) (injo uni) (e uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc171 b a f injz injo) e)) 
      (add_mat
        (tb2t65 (infix_at (matrix1 complex1) b f (infix_at b a injz e)))
        (tb2t65 (infix_at (matrix1 complex1) b f (infix_at b a injo e))))))))

;; map_add_mat_sum_t
(assert
  (forall ((a ty) (b ty))
    (forall ((s uni) (sqt uni) (f uni) (injz uni) (injo uni))
      (=>
        (constant_size b sqt f)
        (=>
          (< 0 (cardinal a s))
          (=>
            (= (inter b (map1 b a injz s) (map1 b a injo s)) (empty b))
            (=>
              (= (union1 b (map1 b a injz s) (map1 b a injo s)) sqt)
              (=>
                (p_injective b a injo s)
                (=>
                  (p_injective b a injz s)
                  (= (mat_sum a s (fc171 b a f injz injo)) (mat_sum b sqt f)))))))))))

;; fc
(declare-fun fc172 (ty
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 uni))
      (sort (infix_mngt a (matrix1 complex1)) (fc172 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (g uni) (e uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc172 a f g) e)) (add_mat
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    e))
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    g
                                                                    e)))))))

;; map_add_mat_sum
(assert
  (forall ((a ty))
    (forall ((s uni) (s1 uni) (s2 uni) (sqt uni) (f uni) (g uni) (h uni))
      (=>
        (constant_size a sqt h)
        (=>
          (constant_size a s f)
          (=>
            (constant_size a s g)
            (=>
              (and
                (= (s_rows a sqt h) (s_rows a s f))
                (= (s_rows a s f) (s_rows a s g)))
              (=>
                (and
                  (= (s_columns a sqt h) (s_columns a s f))
                  (= (s_columns a s f) (s_columns a s g)))
                (=>
                  (< 0 (cardinal a s))
                  (=>
                    (p_injective (matrix1 complex1) a f s)
                    (=>
                      (p_injective (matrix1 complex1) a g s)
                      (=>
                        (p_injective (matrix1 complex1) a h sqt)
                        (=>
                          (= (tb2t76 (map1 (matrix1 complex1) a f s)) 
                          (tb2t76
                            (map1 (matrix1 complex1) a h s1)))
                          (=>
                            (= (tb2t76 (map1 (matrix1 complex1) a g s)) 
                            (tb2t76
                              (map1 (matrix1 complex1) a h s2)))
                            (=>
                              (= (inter a s1 s2) (empty a))
                              (=>
                                (= (union1 a s1 s2) sqt)
                                (= (mat_sum a s (fc172 a f g)) (mat_sum
                                                                 a
                                                                 sqt
                                                                 h))))))))))))))))))

;; fc
(declare-fun fc173 (bitvec) (Array Int Int))

;; fc
(declare-fun fc174 (bitvec) (Array Int Int))

;; fc
(declare-fun fc175 (bitvec) (Array Int Int))

;; fc
(declare-fun fc176 (bitvec
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((bv1 bitvec) (k Int))
    (= (select (fc173 bv1) k) (* (select (value bv1) k) (power
                                                          2
                                                          (- (- (length bv1) 1) k))))))

;; fc'def
(assert
  (forall ((bv1 bitvec) (k Int))
    (= (select (fc174 bv1) k) (* (select (value bv1) k) (power
                                                          2
                                                          (- (- (length bv1) 1) k))))))

;; fc'def
(assert
  (forall ((bv1 bitvec) (k Int))
    (= (select (fc175 bv1) k) (* (select (value bv1) k) (power
                                                          2
                                                          (- (- (length bv1) 1) k))))))

;; fc'def
(assert
  (forall ((bv1 bitvec) (i Int) (k Int))
    (= (select (fc176 bv1 i) k) (* (select (value bv1) k) (power
                                                            2
                                                            (- (- i 1) k))))))

;; ind_isum_mod_div
(assert
  (forall ((bv1 bitvec) (i Int))
    (=>
      (and (<= 0 i) (< i (length bv1)))
      (and
        (= (mod (ind_isum (fc173 bv1) 0 (length bv1)) (power
                                                        2
                                                        (- (length bv1) i))) 
        (ind_isum
          (fc174 bv1)
          i
          (length bv1)))
        (= (div (ind_isum (fc175 bv1) 0 (length bv1)) (power
                                                        2
                                                        (- (length bv1) i))) 
        (ind_isum
          (fc176 bv1 i)
          0
          i))))))

;; fc
(declare-fun fc177 ((Array Int Int)
  Int) (Array Int Int))

;; fc
(declare-fun fc178 ((Array Int Int)
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (l Int) (k Int))
    (= (select (fc177 f l) k) (* (select f k) (power 2 (- (- l 1) k))))))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (l Int) (k Int))
    (= (select (fc178 f l) k) (* (select f k) (power 2 (- (- l 1) k))))))

;; mod_ind_isum
(assert
  (forall ((f (Array Int Int)) (i Int) (l Int))
    (=>
      (and (<= 0 i) (<= i l))
      (=>
        (binary f)
        (= (mod (ind_isum (fc177 f l) 0 l) (power 2 i)) (ind_isum
                                                          (fc178 f l)
                                                          (- l i)
                                                          l))))))

;; fc
(declare-fun fc179 ((Array Int Int)
  Int) (Array Int Int))

;; fc
(declare-fun fc180 ((Array Int Int)
  Int
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (l Int) (k Int))
    (= (select (fc179 f l) k) (* (select f k) (power 2 (- (- l 1) k))))))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (i Int) (l Int) (k Int))
    (= (select (fc180 f i l) k) (* (select f (- (+ k l) i)) (power
                                                              2
                                                              (- (- i 1) k))))))

;; mod_ind_isum_z
(assert
  (forall ((f (Array Int Int)) (i Int) (l Int))
    (=>
      (and (<= 0 i) (<= i l))
      (=>
        (binary f)
        (= (mod (ind_isum (fc179 f l) 0 l) (power 2 i)) (ind_isum
                                                          (fc180 f i l)
                                                          0
                                                          i))))))

;; fc
(declare-fun fc181 ((Array Int Int)
  Int) (Array Int Int))

;; fc
(declare-fun fc182 ((Array Int Int)
  Int
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (l Int) (k Int))
    (= (select (fc181 f l) k) (* (select f k) (power 2 (- (- l 1) k))))))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (i Int) (l Int) (k Int))
    (= (select (fc182 f i l) k) (* (select f k) (power 2 (- (- (- l 1) k) i))))))

;; div_ind_isum
(assert
  (forall ((f (Array Int Int)) (i Int) (l Int))
    (=>
      (and (<= 0 i) (<= i l))
      (=>
        (binary f)
        (= (div (ind_isum (fc181 f l) 0 l) (power 2 i)) (ind_isum
                                                          (fc182 f i l)
                                                          0
                                                          (- l i)))))))

;; fc
(declare-fun fc183 (bitvec
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((bv1 bitvec) (i Int) (l Int))
    (= (select (fc183 bv1 i) l) (* (select (value bv1) l) (power 2 (- i l))))))

;; ind_isum_mod
(assert
  (forall ((bv1 bitvec) (i Int))
    (=>
      (and (<= 0 i) (< i (length bv1)))
      (= (mod (ind_isum (fc183 bv1 i) 0 (+ i 1)) 2) (select (value bv1) i)))))

;; fc
(declare-fun fc184 ((Array Int Int)
  Int) (Array Int Int))

;; fc
(declare-fun fc185 ((Array Int Int)
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (l Int) (k Int))
    (= (select (fc184 f l) k) (* (select f k) (power 2 (- (- l 1) k))))))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (l Int) (k Int))
    (= (select (fc185 f l) k) (* (select f k) (power 2 (- (- l 1) k))))))

;; mod_ind_isum_
(assert
  (forall ((f (Array Int Int)) (i Int) (l Int))
    (=>
      (and (<= 0 i) (<= i l))
      (=>
        (binary f)
        (= (mod (ind_isum (fc184 f l) 0 l) (power 2 i)) (ind_isum
                                                          (fc185 f l)
                                                          (- l i)
                                                          l))))))

;; fc
(declare-fun fc186 ((Array Int Int)
  Int) (Array Int Int))

;; fc
(declare-fun fc187 ((Array Int Int)
  Int
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (l Int) (k Int))
    (= (select (fc186 f l) k) (* (select f k) (power 2 (- (- l 1) k))))))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (i Int) (l Int) (k Int))
    (= (select (fc187 f i l) k) (* (select f (- (+ k l) i)) (power
                                                              2
                                                              (- (- i 1) k))))))

;; mod_ind_isum_z_
(assert
  (forall ((f (Array Int Int)) (i Int) (l Int))
    (=>
      (and (<= 0 i) (<= i l))
      (=>
        (binary f)
        (= (mod (ind_isum (fc186 f l) 0 l) (power 2 i)) (ind_isum
                                                          (fc187 f i l)
                                                          0
                                                          i))))))

;; fc
(declare-fun fc188 ((Array Int Int)
  Int) (Array Int Int))

;; fc
(declare-fun fc189 ((Array Int Int)
  Int
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (l Int) (k Int))
    (= (select (fc188 f l) k) (* (select f k) (power 2 (- (- l 1) k))))))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (i Int) (l Int) (k Int))
    (= (select (fc189 f i l) k) (* (select f k) (power 2 (- (- (- l 1) k) i))))))

;; div_ind_isum_
(assert
  (forall ((f (Array Int Int)) (i Int) (l Int))
    (=>
      (and (<= 0 i) (<= i l))
      (=>
        (binary f)
        (= (div (ind_isum (fc188 f l) 0 l) (power 2 i)) (ind_isum
                                                          (fc189 f i l)
                                                          0
                                                          (- l i)))))))

;; fc
(declare-fun fc190 (bitvec
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((bv1 bitvec) (i Int) (l Int))
    (= (select (fc190 bv1 i) l) (* (select (value bv1) l) (power 2 (- i l))))))

;; ind_isum_mod_
(assert
  (forall ((bv1 bitvec) (i Int))
    (=>
      (and (<= 0 i) (< i (length bv1)))
      (= (mod (ind_isum (fc190 bv1 i) 0 (+ i 1)) 2) (select (value bv1) i)))))

;; fc
(declare-fun fc191 (bitvec) (Array Int Int))

;; fc
(declare-fun fc192 (bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((bv1 bitvec) (l Int))
    (= (select (fc191 bv1) l) (* (select (value bv1) l) (power
                                                          2
                                                          (- (- (length bv1) 1) l))))))

;; fc'def
(assert
  (forall ((bv1 bitvec) (l Int))
    (= (select (fc192 bv1) l) (* (select (value bv1) l) (power
                                                          2
                                                          (- (- (length bv1) 1) l))))))

;; bv_to_int_kth_pre
(assert
  (forall ((bv1 bitvec) (k Int))
    (=>
      (and (<= 0 k) (< k (- (length bv1) 1)))
      (and
        (= (select (value bv1) k) (mod (div (ind_isum
                                              (fc191 bv1)
                                              0
                                              (length bv1)) (power
                                                              2
                                                              (- (- (length
                                                                    bv1) k) 1))) 2))
        (= (select (value bv1) k) (div (mod (ind_isum
                                              (fc192 bv1)
                                              0
                                              (length bv1)) (power
                                                              2
                                                              (- (length bv1) k))) 
        (power
          2
          (- (- (length bv1) k) 1))))))))

;; fc
(declare-fun fc193 (Int
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((i Int) (n Int) (l Int))
    (= (select (fc193 i n) l) (* (select (value (int_to_bv i n)) l) (power
                                                                    2
                                                                    (- (- n l) 1))))))

;; int_to_bv_sum_pre
(assert
  (forall ((i Int) (n Int) (k Int))
    (=>
      (and (<= k n) (<= 0 k))
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (= (mod i (power 2 k)) (ind_isum (fc193 i n) (- n k) n))))))

;; fc
(declare-fun fc194 (Int
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((i Int) (n Int) (k Int))
    (= (select (fc194 i n) k) (* (select (value (int_to_bv i n)) k) (power
                                                                    2
                                                                    (- (- n 1) k))))))

;; int_to_bv_sum
(assert
  (forall ((i Int) (n Int))
    (=>
      (<= 0 n)
      (=> (and (<= 0 i) (< i (power 2 n))) (= i (ind_isum (fc194 i n) 0 n))))))

;; fc
(declare-fun fc195 (Int
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((i Int) (n Int) (k Int))
    (= (select (fc195 i n) k) (* (select (value (int_to_bv i n)) k) (power
                                                                    2
                                                                    (- (- n k) 1))))))

;; int_to_bv_sum_rev
(assert
  (forall ((i Int) (n Int))
    (=>
      (<= 0 n)
      (=> (and (<= 0 i) (< i (power 2 n))) (= (ind_isum (fc195 i n) 0 n) i)))))

;; fc
(declare-fun fc196 (Int
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((i Int) (n Int) (k Int))
    (= (select (fc196 i n) k) (mod (div i (power 2 (- (- n k) 1))) 2))))

;; int_to_bv_mod_div
(assert
  (forall ((i Int) (n Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (= (int_to_bv i n) (make_bv (fc196 i n) n))))))

;; fc
(declare-fun fc197 (Int
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((i Int) (n Int) (l Int))
    (= (select (fc197 i n) l) (* (select (value (int_to_bv i n)) l) (power
                                                                    2
                                                                    (- (- n 1) l))))))

;; mod_isum
(assert
  (forall ((i Int) (k Int) (n Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (=>
          (and (<= 0 k) (< k n))
          (= (mod i (power 2 k)) (ind_isum (fc197 i n) (- n k) n)))))))

;; fc
(declare-fun fc198 (Int
  Int
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((i Int) (k Int) (n Int) (l Int))
    (= (select (fc198 i k n) l) (* (select (value (int_to_bv i n)) (+ l (- n k))) 
    (power
      2
      (- (- k l) 1))))))

;; mod_isum_z
(assert
  (forall ((i Int) (k Int) (n Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (=>
          (and (<= 0 k) (< k n))
          (= (mod i (power 2 k)) (ind_isum (fc198 i k n) 0 k)))))))

;; fc
(declare-fun fc199 (Int
  Int
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((i Int) (k Int) (n Int) (l Int))
    (= (select (fc199 i k n) l) (* (select (value (int_to_bv i n)) l) 
    (power
      2
      (- (- (- n 1) k) l))))))

;; div_isum
(assert
  (forall ((i Int) (k Int) (n Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (=>
          (and (<= 0 k) (< k n))
          (= (div i (power 2 k)) (ind_isum (fc199 i k n) 0 (- n k))))))))

;; fc
(declare-fun fc200 (Int
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((i Int) (n Int) (k Int))
    (= (select (fc200 i n) k) (div (mod i (power 2 (- n k))) (power
                                                               2
                                                               (- (- n k) 1))))))

;; int_to_bv_div_mod
(assert
  (forall ((i Int) (k Int) (n Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (=>
          (and (<= 0 k) (< k n))
          (= (int_to_bv i n) (make_bv (fc200 i n) n)))))))

;; int_to_bv_value
(assert
  (forall ((i Int) (n Int) (k Int))
    (=>
      (< 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (=>
          (and (<= 0 k) (< k n))
          (= (select (value (int_to_bv i n)) k) (mod (div i (power
                                                              2
                                                              (- (- n k) 1))) 2)))))))

;; int_to_bv_value_zero
(assert
  (forall ((i Int) (n Int))
    (=>
      (< 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (= (select (value (int_to_bv i n)) 0) (ite (< i (power 2 (- n 1)))
                                                0
                                                1))))))

;; fc
(declare-fun fc201 (Int
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((i Int) (n Int) (k Int))
    (= (select (fc201 i n) k) (mod (div i (power 2 (- (- n k) 1))) 2))))

;; int_to_bv_mod_div_
(assert
  (forall ((i Int) (n Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (= (int_to_bv i n) (make_bv (fc201 i n) n))))))

;; fc
(declare-fun fc202 (Int
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((i Int) (n Int) (l Int))
    (= (select (fc202 i n) l) (* (select (value (int_to_bv i n)) l) (power
                                                                    2
                                                                    (- (- n 1) l))))))

;; mod_isum_
(assert
  (forall ((i Int) (k Int) (n Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (=>
          (and (<= 0 k) (< k n))
          (= (mod i (power 2 k)) (ind_isum (fc202 i n) (- n k) n)))))))

;; fc
(declare-fun fc203 (Int
  Int
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((i Int) (k Int) (n Int) (l Int))
    (= (select (fc203 i k n) l) (* (select (value (int_to_bv i n)) (+ l (- n k))) 
    (power
      2
      (- (- k l) 1))))))

;; mod_isum_z_
(assert
  (forall ((i Int) (k Int) (n Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (=>
          (and (<= 0 k) (< k n))
          (= (mod i (power 2 k)) (ind_isum (fc203 i k n) 0 k)))))))

;; fc
(declare-fun fc204 (Int
  Int
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((i Int) (k Int) (n Int) (l Int))
    (= (select (fc204 i k n) l) (* (select (value (int_to_bv i n)) l) 
    (power
      2
      (- (- (- n 1) k) l))))))

;; div_isum_
(assert
  (forall ((i Int) (k Int) (n Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (=>
          (and (<= 0 k) (< k n))
          (= (div i (power 2 k)) (ind_isum (fc204 i k n) 0 (- n k))))))))

;; fc
(declare-fun fc205 (Int
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((i Int) (n Int) (k Int))
    (= (select (fc205 i n) k) (div (mod i (power 2 (- n k))) (power
                                                               2
                                                               (- (- n k) 1))))))

;; int_to_bv_div_mod_
(assert
  (forall ((i Int) (k Int) (n Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (=>
          (and (<= 0 k) (< k n))
          (= (int_to_bv i n) (make_bv (fc205 i n) n)))))))

;; int_to_bv_value_
(assert
  (forall ((i Int) (n Int) (k Int))
    (=>
      (< 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (=>
          (and (<= 0 k) (< k n))
          (= (select (value (int_to_bv i n)) k) (mod (div i (power
                                                              2
                                                              (- (- n k) 1))) 2)))))))

;; int_to_bv_value_zero_
(assert
  (forall ((i Int) (n Int))
    (=>
      (< 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (= (select (value (int_to_bv i n)) 0) (ite (< i (power 2 (- n 1)))
                                                0
                                                1))))))

;; int_to_bv_zero
(assert
  (forall ((n Int))
    (forall ((k Int))
      (=> (and (<= 0 k) (< k n)) (= (select (value (int_to_bv 0 n)) k) 0)))))

;; fc
(declare-fun fc206 (Int
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((i Int) (n Int) (k Int))
    (= (select (fc206 i n) k) (* (select (value (int_to_bv i n)) k) (power
                                                                    2
                                                                    (- (- n k) 1))))))

;; int_to_sum
(assert
  (forall ((i Int) (n Int))
    (=>
      (< 0 n)
      (=> (and (<= 0 i) (< i (power 2 n))) (= i (ind_isum (fc206 i n) 0 n))))))

;; int_to_bv_transl
(assert
  (forall ((i Int) (k Int) (n Int) (t Int))
    (=>
      (and (<= 0 i) (< i (power 2 n)))
      (=>
        (and (<= 0 k) (< k (- n t)))
        (=>
          (and (< 0 t) (<= t n))
          (= (select (value (int_to_bv (mod i (power 2 (- n t))) (- n t))) k) (select 
          (value
            (int_to_bv i n)) (+ k t))))))))

;; int_to_bv_transl_div
(assert
  (forall ((i Int) (k Int) (n Int) (nqt Int) (t Int))
    (=>
      (and (<= 0 i) (< i (power 2 n)))
      (=>
        (and (<= 0 k) (< k t))
        (=>
          (= nqt t)
          (=>
            (and (< 0 t) (<= t n))
            (= (select (value (int_to_bv (div i (power 2 (- n t))) nqt)) k) (select 
            (value
              (int_to_bv i n)) k))))))))

;; fc
(declare-fun fc207 (Int
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((n Int) (i Int) (j Int))
    (= (select (fc207 n i) j) (- 1 (select (value (int_to_bv i n)) j)))))

;; product_int_to_bv_inv
(assert
  (forall ((n Int) (i Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (= (ind_iproduct (fc207 n i) 0 n) (ite (= i 0) 1 0))))))

;; bin_to_int
(declare-fun bin_to_int ((Array Int Int)
  Int) Int)

;; bin_to_int'def
(assert
  (forall ((f (Array Int Int)) (n Int))
    (=>
      (<= 0 n)
      (=> (binary_l f n) (= (bin_to_int f n) (bv_to_int (make_bv f n)))))))

;; fc
(declare-fun fc208 ((Array Int Int)
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (n Int) (k Int))
    (= (select (fc208 f n) k) (* (select f k) (power 2 (- (- n 1) k))))))

;; bin_to_int'spec
(assert
  (forall ((f (Array Int Int)) (n Int))
    (=>
      (<= 0 n)
      (=>
        (binary_l f n)
        (and
          (= (bin_to_int f n) (ind_isum (fc208 f n) 0 n))
          (<= 0 (bin_to_int f n)))))))

;; int_to_bin
(declare-fun int_to_bin (Int
  Int) (Array Int Int))

;; int_to_bin'def
(assert
  (forall ((i Int) (n Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (= (int_to_bin i n) (value (int_to_bv i n)))))))

;; fc
(declare-fun fc209 (Int
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((i Int) (n Int) (k Int))
    (= (select (fc209 i n) k) (* (select (int_to_bin i n) k) (power
                                                               2
                                                               (- (- n 1) k))))))

;; int_to_bin'spec
(assert
  (forall ((i Int) (n Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (and
          (= i (ind_isum (fc209 i n) 0 n))
          (and
            (binary (int_to_bin i n))
            (forall ((k Int))
              (=>
                (and (<= 0 k) (< k n))
                (= (select (int_to_bin i n) k) (mod (div i (power
                                                             2
                                                             (- (- n k) 1))) 2))))))))))

;; int_to_bv_tail
(assert
  (forall ((i Int) (n Int))
    (=>
      (< 1 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (= (int_to_bv (tail_bits i n) (- n 1)) (tail (int_to_bv i n)))))))

;; fc
(declare-fun fc210 (bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((bv1 bitvec) (l Int))
    (= (select (fc210 bv1) l) (* (select (value bv1) l) (power
                                                          2
                                                          (- (length bv1) l))))))

;; bound_sum_dec
(assert
  (forall ((bv1 bitvec) (i Int))
    (=>
      (and (<= 1 i) (<= i (length bv1)))
      (< (ind_isum (fc210 bv1) i (+ (length bv1) 1)) (power
                                                       2
                                                       (+ (- (length bv1) i) 1))))))

;; bv_to_int_to_bv
(assert
  (forall ((i Int) (n Int))
    (=>
      (<= 0 n)
      (=> (and (<= 0 i) (< i (power 2 n))) (= (bv_to_int (int_to_bv i n)) i)))))

;; bv_to_int_to_bv_
(assert
  (forall ((i Int) (n Int))
    (=>
      (<= 0 n)
      (=> (and (<= 0 i) (< i (power 2 n))) (= (bv_to_int (int_to_bv i n)) i)))))

;; fc
(declare-fun fc211 (Int
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((i Int) (n Int) (l Int))
    (= (select (fc211 i n) l) (* (select (value (int_to_bv i n)) l) (power
                                                                    2
                                                                    (- (- n 1) l))))))

;; tail_bits_sum
(assert
  (forall ((i Int) (n Int))
    (=>
      (< 1 n)
      (=>
        (<= 0 i)
        (=>
          (and (<= 0 i) (< i (power 2 n)))
          (= (tail_bits i n) (ind_isum (fc211 i n) 1 n)))))))

;; int_to_bv_to_int
(assert
  (forall ((bv1 bitvec))
    (=> (<= 1 (length bv1)) (= (int_to_bv (bv_to_int bv1) (length bv1)) bv1))))

;; int_to_bv_to_int_
(assert
  (forall ((bv1 bitvec) (l Int))
    (=>
      (<= 0 l)
      (=> (= (length bv1) l) (= (int_to_bv (bv_to_int bv1) l) bv1)))))

;; int_to_bv_to_int_rev
(assert
  (forall ((bv1 bitvec) (l Int))
    (=>
      (<= 0 l)
      (=> (= (length bv1) l) (= bv1 (int_to_bv (bv_to_int bv1) l))))))

;; concat_to_int
(assert
  (forall ((bv1 bitvec) (i Int))
    (=>
      (and (<= 0 i) (<= i 1))
      (= (bv_to_int (concat_l bv1 i)) (+ (bv_to_int bv1) (* i (power
                                                                2
                                                                (length bv1))))))))

;; bounded_to_int
(assert (forall ((bv1 bitvec)) (< (bv_to_int bv1) (power 2 (length bv1)))))

;; int_to_bv_to_int_value
(assert
  (forall ((bv1 bitvec) (i Int))
    (=>
      (<= 1 (length bv1))
      (= (select (value (int_to_bv (bv_to_int bv1) (length bv1))) i) 
      (ite (and (<= 0 i) (< i (length bv1)))
        (select (value bv1) i)
        0)))))

;; int_to_bv_to_int_gen
(assert
  (forall ((bv1 bitvec) (n Int))
    (=>
      (<= 1 (length bv1))
      (=> (= n (length bv1)) (= (int_to_bv (bv_to_int bv1) n) bv1)))))

;; fc
(declare-fun fc212 (bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((bv1 bitvec) (l Int))
    (= (select (fc212 bv1) l) (* (select (value bv1) l) (power
                                                          2
                                                          (- (- (length bv1) 1) l))))))

;; bv_to_int_mod
(assert
  (forall ((bv1 bitvec) (k Int))
    (=>
      (and (<= 0 k) (< k (length bv1)))
      (= (mod (bv_to_int bv1) (power 2 (- (length bv1) k))) (ind_isum
                                                              (fc212 bv1)
                                                              k
                                                              (length bv1))))))

;; fc
(declare-fun fc213 (bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((bv1 bitvec) (l Int))
    (= (select (fc213 bv1) l) (* (select (value bv1) l) (power
                                                          2
                                                          (- (- (length bv1) 1) l))))))

;; bv_to_int_mod_rev
(assert
  (forall ((bv1 bitvec) (k Int))
    (=>
      (and (<= 0 k) (< k (length bv1)))
      (= (ind_isum (fc213 bv1) k (length bv1)) (mod (bv_to_int bv1) (power
                                                                    2
                                                                    (- 
                                                                    (length
                                                                    bv1) k)))))))

;; fc
(declare-fun fc214 (bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((bv1 bitvec) (l Int))
    (= (select (fc214 bv1) l) (* (select (value bv1) l) (power
                                                          2
                                                          (- (- (length bv1) 1) l))))))

;; bv_to_int_mod_gen
(assert
  (forall ((k Int) (n Int))
    (=>
      (and (<= 0 k) (< k n))
      (forall ((bv1 bitvec))
        (=>
          (= (length bv1) n)
          (= (mod (bv_to_int bv1) (power 2 (- (length bv1) k))) (ind_isum
                                                                  (fc214 bv1)
                                                                  k
                                                                  (length
                                                                    bv1))))))))

;; to_int_head_tail
(assert
  (forall ((bv1 bitvec))
    (=>
      (<= 1 (length bv1))
      (and
        (= (bv_to_int bv1) (+ (bv_to_int (tail bv1)) (* (head bv1) (power
                                                                    2
                                                                    (- 
                                                                    (length
                                                                    bv1) 1)))))
        (= (bv_to_int (tail bv1)) (mod (bv_to_int bv1) (power
                                                         2
                                                         (- (length bv1) 1))))))))

;; my_map
(declare-fun my_map (ty
  ty
  uni
  uni) uni)

;; my_map_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni)) (sort (set1 b) (my_map b a x x1)))))

;; my_map'def
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (u (set circuit)))
    (ite (= (cardinal circuit1 (t2tb12 u)) 0)
      (= (tb2t11
           (my_map
             (infix_mngt
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int)))
             circuit1
             (t2tb2 f)
             (t2tb12 u))) (tb2t11
                            (empty
                              (infix_mngt
                                (infix_mngt int int)
                                (infix_mngt
                                  (infix_mngt int int)
                                  (infix_mngt int int))))))
      (= (tb2t11
           (my_map
             (infix_mngt
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int)))
             circuit1
             (t2tb2 f)
             (t2tb12 u))) (tb2t11
                            (add
                              (infix_mngt
                                (infix_mngt int int)
                                (infix_mngt
                                  (infix_mngt int int)
                                  (infix_mngt int int)))
                              (t2tb3
                                (select f (tb2t13
                                            (choose1 circuit1 (t2tb12 u)))))
                              (my_map
                                (infix_mngt
                                  (infix_mngt int int)
                                  (infix_mngt
                                    (infix_mngt int int)
                                    (infix_mngt int int)))
                                circuit1
                                (t2tb2 f)
                                (remove
                                  circuit1
                                  (choose1 circuit1 (t2tb12 u))
                                  (t2tb12 u)))))))))

;; my_map'def
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (u (set (Array Int Int))))
    (ite (= (cardinal (infix_mngt int int) (t2tb15 u)) 0)
      (= (tb2t14
           (my_map
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (infix_mngt int int)
             (t2tb3 f)
             (t2tb15 u))) (tb2t14
                            (empty
                              (infix_mngt
                                (infix_mngt int int)
                                (infix_mngt int int)))))
      (= (tb2t14
           (my_map
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (infix_mngt int int)
             (t2tb3 f)
             (t2tb15 u))) (tb2t14
                            (add
                              (infix_mngt
                                (infix_mngt int int)
                                (infix_mngt int int))
                              (t2tb5
                                (select f (tb2t7
                                            (choose1
                                              (infix_mngt int int)
                                              (t2tb15 u)))))
                              (my_map
                                (infix_mngt
                                  (infix_mngt int int)
                                  (infix_mngt int int))
                                (infix_mngt int int)
                                (t2tb3 f)
                                (remove
                                  (infix_mngt int int)
                                  (choose1 (infix_mngt int int) (t2tb15 u))
                                  (t2tb15 u)))))))))

;; my_map'def
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (u (set (Array Int Int))))
    (ite (= (cardinal (infix_mngt int int) (t2tb15 u)) 0)
      (= (tb2t15
           (my_map
             (infix_mngt int int)
             (infix_mngt int int)
             (t2tb5 f)
             (t2tb15 u))) (tb2t15 (empty (infix_mngt int int))))
      (= (tb2t15
           (my_map
             (infix_mngt int int)
             (infix_mngt int int)
             (t2tb5 f)
             (t2tb15 u))) (tb2t15
                            (add
                              (infix_mngt int int)
                              (t2tb7
                                (select f (tb2t7
                                            (choose1
                                              (infix_mngt int int)
                                              (t2tb15 u)))))
                              (my_map
                                (infix_mngt int int)
                                (infix_mngt int int)
                                (t2tb5 f)
                                (remove
                                  (infix_mngt int int)
                                  (choose1 (infix_mngt int int) (t2tb15 u))
                                  (t2tb15 u)))))))))

;; my_map'def
(assert
  (forall ((f (Array Int Int)) (u (set Int)))
    (ite (= (cardinal int (t2tb16 u)) 0)
      (= (tb2t16 (my_map int int (t2tb7 f) (t2tb16 u))) (tb2t16 (empty int)))
      (= (tb2t16 (my_map int int (t2tb7 f) (t2tb16 u))) (tb2t16
                                                          (add
                                                            int
                                                            (t2tb8
                                                              (select f 
                                                              (tb2t8
                                                                (choose1
                                                                  int
                                                                  (t2tb16 u)))))
                                                            (my_map
                                                              int
                                                              int
                                                              (t2tb7 f)
                                                              (remove
                                                                int
                                                                (choose1
                                                                  int
                                                                  (t2tb16 u))
                                                                (t2tb16 u)))))))))

;; my_map'def
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (u uni))
      (ite (= (cardinal a u) 0)
        (= (my_map b a f u) (empty b))
        (= (my_map b a f u) (add
                              b
                              (infix_at b a f (choose1 a u))
                              (my_map b a f (remove a (choose1 a u) u))))))))

;; my_map'spec
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (u uni)) (= (my_map b a f u) (map1 b a f u)))))

;; my_map_to_map
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (u uni)) (= (my_map b a f u) (map1 b a f u)))))

;; map_to_my_map
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (u uni)) (= (map1 b a f u) (my_map b a f u)))))

;; mapz_pre
(declare-fun mapz_pre (Int
  (set bitvec)) (set bitvec))

;; result
(declare-fun result21 () (Array bitvec bitvec))

;; t2tb
(declare-fun t2tb77 (bitvec) uni)

;; t2tb_sort
(assert (forall ((x bitvec)) (sort bitvec1 (t2tb77 x))))

;; tb2t
(declare-fun tb2t77 (uni) bitvec)

;; BridgeL
(assert
  (forall ((i bitvec)) (! (= (tb2t77 (t2tb77 i)) i) :pattern ((t2tb77 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=> (sort bitvec1 j) (= (t2tb77 (tb2t77 j)) j)) :pattern ((t2tb77
                                                                   (tb2t77 j))) )))

;; t2tb
(declare-fun t2tb78 ((Array bitvec bitvec)) uni)

;; t2tb_sort
(assert
  (forall ((x (Array bitvec bitvec)))
    (sort (infix_mngt bitvec1 bitvec1) (t2tb78 x))))

;; tb2t
(declare-fun tb2t78 (uni) (Array bitvec bitvec))

;; BridgeL
(assert
  (forall ((i (Array bitvec bitvec)))
    (! (= (tb2t78 (t2tb78 i)) i) :pattern ((t2tb78 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=> (sort (infix_mngt bitvec1 bitvec1) j) (= (t2tb78 (tb2t78 j)) j)) :pattern (
    (t2tb78
      (tb2t78 j))) )))

;; result'def
(assert
  (forall ((bv1 bitvec))
    (= (tb2t77 (infix_at bitvec1 bitvec1 (t2tb78 result21) (t2tb77 bv1))) 
    (concat_l
      bv1
      0))))

;; t2tb
(declare-fun t2tb79 ((set bitvec)) uni)

;; t2tb_sort
(assert (forall ((x (set bitvec))) (sort (set1 bitvec1) (t2tb79 x))))

;; tb2t
(declare-fun tb2t79 (uni) (set bitvec))

;; BridgeL
(assert
  (forall ((i (set bitvec)))
    (! (= (tb2t79 (t2tb79 i)) i) :pattern ((t2tb79 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=> (sort (set1 bitvec1) j) (= (t2tb79 (tb2t79 j)) j)) :pattern (
    (t2tb79
      (tb2t79 j))) )))

;; mapz_pre'def
(assert
  (forall ((n Int) (s (set bitvec)))
    (=>
      (<= 1 n)
      (=>
        (forall ((f bitvec))
          (= (mem bitvec1 (t2tb77 f) (t2tb79 s)) (= (length f) (- n 1))))
        (= (mapz_pre n s) (tb2t79
                            (my_map
                              bitvec1
                              bitvec1
                              (t2tb78 result21)
                              (t2tb79 s))))))))

;; fc
(declare-fun fc215 () (Array Int Int))

;; fc'def
(assert (forall ((us Int)) (= (select fc215 us) 0)))

;; mapz_pre'spec
(assert
  (forall ((n Int) (s (set bitvec)))
    (=>
      (<= 1 n)
      (=>
        (forall ((f bitvec))
          (= (mem bitvec1 (t2tb77 f) (t2tb79 s)) (= (length f) (- n 1))))
        (and
          (mem bitvec1 (t2tb77 (make_bv fc215 n)) (t2tb79 (mapz_pre n s)))
          (and
            (forall ((e bitvec))
              (=>
                (mem bitvec1 (t2tb77 e) (t2tb79 (mapz_pre n s)))
                (= (select (value e) 0) 0)))
            (and
              (forall ((e bitvec))
                (=>
                  (mem bitvec1 (t2tb77 e) (t2tb79 (mapz_pre n s)))
                  (exists ((bv1 bitvec))
                    (and
                      (mem bitvec1 (t2tb77 bv1) (t2tb79 s))
                      (= e (concat_l bv1 0))))))
              (and
                (forall ((e bitvec))
                  (=>
                    (mem bitvec1 (t2tb77 e) (t2tb79 (mapz_pre n s)))
                    (= (length e) n)))
                (forall ((e bitvec))
                  (=>
                    (= (length e) n)
                    (=>
                      (= (select (value e) 0) 0)
                      (mem bitvec1 (t2tb77 e) (t2tb79 (mapz_pre n s))))))))))))))

;; mapo_pre
(declare-fun mapo_pre (Int
  (set bitvec)) (set bitvec))

;; result
(declare-fun result22 () (Array bitvec bitvec))

;; result'def
(assert
  (forall ((bv1 bitvec))
    (= (tb2t77 (infix_at bitvec1 bitvec1 (t2tb78 result22) (t2tb77 bv1))) 
    (concat_l
      bv1
      1))))

;; mapo_pre'def
(assert
  (forall ((n Int) (s (set bitvec)))
    (=>
      (<= 1 n)
      (=>
        (forall ((f bitvec))
          (= (mem bitvec1 (t2tb77 f) (t2tb79 s)) (= (length f) (- n 1))))
        (= (mapo_pre n s) (tb2t79
                            (my_map
                              bitvec1
                              bitvec1
                              (t2tb78 result22)
                              (t2tb79 s))))))))

;; fc
(declare-fun fc216 () (Array Int Int))

;; fc'def
(assert (forall ((us Int)) (= (select fc216 us) 1)))

;; mapo_pre'spec
(assert
  (forall ((n Int) (s (set bitvec)))
    (=>
      (<= 1 n)
      (=>
        (forall ((f bitvec))
          (= (mem bitvec1 (t2tb77 f) (t2tb79 s)) (= (length f) (- n 1))))
        (and
          (mem bitvec1 (t2tb77 (make_bv fc216 n)) (t2tb79 (mapo_pre n s)))
          (and
            (forall ((e bitvec))
              (=>
                (mem bitvec1 (t2tb77 e) (t2tb79 (mapo_pre n s)))
                (= (select (value e) 0) 1)))
            (and
              (forall ((e bitvec))
                (=>
                  (mem bitvec1 (t2tb77 e) (t2tb79 (mapo_pre n s)))
                  (exists ((bv1 bitvec))
                    (and
                      (mem bitvec1 (t2tb77 bv1) (t2tb79 s))
                      (= e (concat_l bv1 1))))))
              (and
                (forall ((e bitvec))
                  (=>
                    (mem bitvec1 (t2tb77 e) (t2tb79 (mapo_pre n s)))
                    (= (length e) n)))
                (forall ((e bitvec))
                  (=>
                    (= (length e) n)
                    (=>
                      (= (select (value e) 0) 1)
                      (mem bitvec1 (t2tb77 e) (t2tb79 (mapo_pre n s))))))))))))))

;; n_bvs
(declare-fun n_bvs (Int) (set bitvec))

;; n_bvs'spec
(assert
  (forall ((n Int))
    (=>
      (<= 0 n)
      (and
        (=>
          (<= 1 n)
          (forall ((s (set bitvec)))
            (=>
              (forall ((f bitvec))
                (=
                  (mem bitvec1 (t2tb77 f) (t2tb79 s))
                  (= (length f) (- n 1))))
              (= (n_bvs n) (tb2t79
                             (union1
                               bitvec1
                               (t2tb79 (mapz_pre n s))
                               (t2tb79 (mapo_pre n s))))))))
        (and
          (forall ((f bitvec))
            (=> (mem bitvec1 (t2tb77 f) (t2tb79 (n_bvs n))) (= (length f) n)))
          (and
            (forall ((f bitvec))
              (=
                (mem bitvec1 (t2tb77 f) (t2tb79 (n_bvs n)))
                (= (length f) n)))
            (< 0 (cardinal bitvec1 (t2tb79 (n_bvs n))))))))))

;; in_n_bvs
(assert
  (forall ((x bitvec) (n Int))
    (=>
      (<= 0 n)
      (=> (= (length x) n) (mem bitvec1 (t2tb77 x) (t2tb79 (n_bvs n)))))))

;; get_in_n_bvs
(assert
  (forall ((x bitvec) (n Int))
    (=>
      (<= 0 n)
      (=> (mem bitvec1 (t2tb77 x) (t2tb79 (n_bvs n))) (= (length x) n)))))

;; mapz
(declare-fun mapz (Int) (set bitvec))

;; mapz'def
(assert
  (forall ((n Int)) (=> (<= 1 n) (= (mapz n) (mapz_pre n (n_bvs (- n 1)))))))

;; fc
(declare-fun fc217 () (Array bitvec bitvec))

;; fc'def
(assert
  (forall ((bv1 bitvec))
    (= (tb2t77 (infix_at bitvec1 bitvec1 (t2tb78 fc217) (t2tb77 bv1))) 
    (concat_l
      bv1
      0))))

;; mapz'spec
(assert
  (forall ((n Int))
    (=>
      (<= 1 n)
      (and
        (= (mapz n) (tb2t79
                      (my_map
                        bitvec1
                        bitvec1
                        (t2tb78 fc217)
                        (t2tb79 (n_bvs (- n 1))))))
        (and
          (< 0 (cardinal bitvec1 (t2tb79 (mapz n))))
          (and
            (forall ((e bitvec))
              (=>
                (mem bitvec1 (t2tb77 e) (t2tb79 (mapz n)))
                (= (select (value e) 0) 0)))
            (and
              (forall ((e bitvec))
                (=>
                  (mem bitvec1 (t2tb77 e) (t2tb79 (mapz n)))
                  (exists ((bv1 bitvec))
                    (and
                      (mem bitvec1 (t2tb77 bv1) (t2tb79 (n_bvs (- n 1))))
                      (= e (concat_l bv1 0))))))
              (and
                (forall ((e bitvec))
                  (=>
                    (mem bitvec1 (t2tb77 e) (t2tb79 (mapz n)))
                    (= (length e) n)))
                (forall ((e bitvec))
                  (=>
                    (= (length e) n)
                    (=>
                      (= (select (value e) 0) 0)
                      (mem bitvec1 (t2tb77 e) (t2tb79 (mapz n))))))))))))))

;; mapo
(declare-fun mapo (Int) (set bitvec))

;; mapo'def
(assert
  (forall ((n Int)) (=> (<= 1 n) (= (mapo n) (mapo_pre n (n_bvs (- n 1)))))))

;; fc
(declare-fun fc218 () (Array bitvec bitvec))

;; fc'def
(assert
  (forall ((bv1 bitvec))
    (= (tb2t77 (infix_at bitvec1 bitvec1 (t2tb78 fc218) (t2tb77 bv1))) 
    (concat_l
      bv1
      1))))

;; mapo'spec
(assert
  (forall ((n Int))
    (=>
      (<= 1 n)
      (and
        (= (mapo n) (tb2t79
                      (my_map
                        bitvec1
                        bitvec1
                        (t2tb78 fc218)
                        (t2tb79 (n_bvs (- n 1))))))
        (and
          (< 0 (cardinal bitvec1 (t2tb79 (mapo n))))
          (and
            (forall ((e bitvec))
              (=>
                (mem bitvec1 (t2tb77 e) (t2tb79 (mapo n)))
                (= (select (value e) 0) 1)))
            (and
              (forall ((e bitvec))
                (=>
                  (mem bitvec1 (t2tb77 e) (t2tb79 (mapo n)))
                  (exists ((bv1 bitvec))
                    (and
                      (mem bitvec1 (t2tb77 bv1) (t2tb79 (n_bvs (- n 1))))
                      (= e (concat_l bv1 1))))))
              (and
                (forall ((e bitvec))
                  (=>
                    (mem bitvec1 (t2tb77 e) (t2tb79 (mapo n)))
                    (= (length e) n)))
                (forall ((e bitvec))
                  (=>
                    (= (length e) n)
                    (=>
                      (= (select (value e) 0) 1)
                      (mem bitvec1 (t2tb77 e) (t2tb79 (mapo n))))))))))))))

;; n_bvs_node
(assert
  (forall ((n Int))
    (=>
      (< 0 n)
      (and
        (= (tb2t79 (inter bitvec1 (t2tb79 (mapz n)) (t2tb79 (mapo n)))) 
        (tb2t79
          (empty bitvec1)))
        (= (tb2t79 (union1 bitvec1 (t2tb79 (mapz n)) (t2tb79 (mapo n)))) 
        (n_bvs
          n))))))

;; fc
(declare-fun fc219 () (Array Int Int))

;; fc
(declare-fun fc220 () (Array Int Int))

;; fc
(declare-fun fc221 () (Array Int Int))

;; fc
(declare-fun fc222 () (Array Int Int))

;; fc'def
(assert (forall ((us Int)) (= (select fc219 us) 0)))

;; fc'def
(assert (forall ((us Int)) (= (select fc220 us) 0)))

;; fc'def
(assert (forall ((us Int)) (= (select fc221 us) 0)))

;; fc'def
(assert (forall ((us Int)) (= (select fc222 us) 0)))

;; t2tb
(declare-fun t2tb80 ((Array bitvec (matrix complex))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array bitvec (matrix complex))))
    (sort (infix_mngt bitvec1 (matrix1 complex1)) (t2tb80 x))))

;; tb2t
(declare-fun tb2t80 (uni) (Array bitvec (matrix complex)))

;; BridgeL
(assert
  (forall ((i (Array bitvec (matrix complex))))
    (! (= (tb2t80 (t2tb80 i)) i) :pattern ((t2tb80 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort (infix_mngt bitvec1 (matrix1 complex1)) j)
         (= (t2tb80 (tb2t80 j)) j)) :pattern ((t2tb80 (tb2t80 j))) )))

;; n_bvsz'spec
(assert
  (and
    (forall ((x bitvec))
      (=> (= (length x) 0) (mem bitvec1 (t2tb77 x) (t2tb79 (n_bvs 0)))))
    (and
      (forall ((x bitvec))
        (=>
          (mem bitvec1 (t2tb77 x) (t2tb79 (n_bvs 0)))
          (= x (make_bv fc219 0))))
      (and
        (= (n_bvs 0) (tb2t79
                       (add
                         bitvec1
                         (t2tb77 (make_bv fc220 0))
                         (empty bitvec1))))
        (and
          (= (tb2t77 (choose1 bitvec1 (t2tb79 (n_bvs 0)))) (make_bv fc221 0))
          (forall ((f (Array bitvec (matrix complex))))
            (= (mat_sum bitvec1 (t2tb79 (n_bvs 0)) (t2tb80 f)) (tb2t65
                                                                 (infix_at
                                                                   (matrix1
                                                                    complex1)
                                                                   bitvec1
                                                                   (t2tb80 f)
                                                                   (t2tb77
                                                                    (make_bv
                                                                    fc222
                                                                    0)))))))))))

;; fc
(declare-fun fc223 () (Array Int Int))

;; fc
(declare-fun fc224 () (Array Int Int))

;; fc
(declare-fun fc225 () (Array Int Int))

;; fc
(declare-fun fc226 () (Array Int Int))

;; fc'def
(assert (forall ((us Int)) (= (select fc223 us) 0)))

;; fc'def
(assert (forall ((us Int)) (= (select fc224 us) 1)))

;; fc'def
(assert (forall ((us Int)) (= (select fc225 us) 0)))

;; fc'def
(assert (forall ((us Int)) (= (select fc226 us) 1)))

;; n_bvso'spec
(assert
  (and
    (forall ((x bitvec))
      (=> (= (length x) 1) (mem bitvec1 (t2tb77 x) (t2tb79 (n_bvs 1)))))
    (and
      (forall ((x bitvec))
        (=> (mem bitvec1 (t2tb77 x) (t2tb79 (n_bvs 1))) (= (length x) 1)))
      (and
        (= (n_bvs 1) (tb2t79
                       (add
                         bitvec1
                         (t2tb77 (make_bv fc223 1))
                         (add
                           bitvec1
                           (t2tb77 (make_bv fc224 1))
                           (empty bitvec1)))))
        (forall ((f (Array bitvec (matrix complex))))
          (=>
            (constant_size bitvec1 (t2tb79 (n_bvs 1)) (t2tb80 f))
            (= (mat_sum bitvec1 (t2tb79 (n_bvs 1)) (t2tb80 f)) (add_mat
                                                                 (tb2t65
                                                                   (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    bitvec1
                                                                    (t2tb80
                                                                    f)
                                                                    (t2tb77
                                                                    (make_bv
                                                                    fc225
                                                                    1))))
                                                                 (tb2t65
                                                                   (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    bitvec1
                                                                    (t2tb80
                                                                    f)
                                                                    (t2tb77
                                                                    (make_bv
                                                                    fc226
                                                                    1))))))))))))

;; fc
(declare-fun fc227 () (Array bitvec bitvec))

;; fc
(declare-fun fc228 () (Array bitvec bitvec))

;; fc'def
(assert
  (forall ((bv1 bitvec))
    (= (tb2t77 (infix_at bitvec1 bitvec1 (t2tb78 fc227) (t2tb77 bv1))) 
    (concat_l
      bv1
      0))))

;; fc'def
(assert
  (forall ((bv1 bitvec))
    (= (tb2t77 (infix_at bitvec1 bitvec1 (t2tb78 fc228) (t2tb77 bv1))) 
    (concat_l
      bv1
      1))))

;; injective_node
(assert
  (forall ((n Int))
    (=>
      (<= 0 n)
      (and
        (p_injective bitvec1 bitvec1 (t2tb78 fc227) (t2tb79 (n_bvs n)))
        (p_injective bitvec1 bitvec1 (t2tb78 fc228) (t2tb79 (n_bvs n)))))))

;; fc
(declare-fun fc229 ((Array bitvec (matrix complex))) (Array bitvec (matrix complex)))

;; fc
(declare-fun fc230 ((Array bitvec (matrix complex))) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((f (Array bitvec (matrix complex))) (bv1 bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc229 f))
           (t2tb77 bv1))) (tb2t65
                            (infix_at
                              (matrix1 complex1)
                              bitvec1
                              (t2tb80 f)
                              (t2tb77 (concat_l bv1 0)))))))

;; fc'def
(assert
  (forall ((f (Array bitvec (matrix complex))) (bv1 bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc230 f))
           (t2tb77 bv1))) (tb2t65
                            (infix_at
                              (matrix1 complex1)
                              bitvec1
                              (t2tb80 f)
                              (t2tb77 (concat_l bv1 1)))))))

;; mat_sum_n_bvs_pos
(assert
  (forall ((n Int) (f (Array bitvec (matrix complex))))
    (=>
      (< 0 n)
      (=>
        (constant_size bitvec1 (t2tb79 (n_bvs n)) (t2tb80 f))
        (= (mat_sum bitvec1 (t2tb79 (n_bvs n)) (t2tb80 f)) (add_mat
                                                             (mat_sum
                                                               bitvec1
                                                               (t2tb79
                                                                 (n_bvs
                                                                   (- n 1)))
                                                               (t2tb80
                                                                 (fc229 f)))
                                                             (mat_sum
                                                               bitvec1
                                                               (t2tb79
                                                                 (n_bvs
                                                                   (- n 1)))
                                                               (t2tb80
                                                                 (fc230 f)))))))))

;; fc
(declare-fun fc231 () (Array Int (Array Int Int)))

;; fc'def
(assert
  (forall ((y0 Int) (y1 Int))
    (= (select (tb2t7
                 (infix_at (infix_mngt int int) int (t2tb9 fc231) (t2tb8 y0))) y1) y0)))

;; mat_sum_n_bvs_null
(assert
  (forall ((f (Array bitvec (matrix complex))))
    (= (mat_sum bitvec1 (t2tb79 (n_bvs 0)) (t2tb80 f)) (tb2t65
                                                         (infix_at
                                                           (matrix1 complex1)
                                                           bitvec1
                                                           (t2tb80 f)
                                                           (t2tb77
                                                             (make_bv
                                                               (tb2t7
                                                                 (infix_at
                                                                   (infix_mngt
                                                                    int
                                                                    int)
                                                                   int
                                                                   (t2tb9
                                                                    fc231)
                                                                   (t2tb8 0)))
                                                               0)))))))

;; fc
(declare-fun fc232 () (Array Int (Array Int Int)))

;; fc'def
(assert
  (forall ((y0 Int) (y1 Int))
    (= (select (tb2t7
                 (infix_at (infix_mngt int int) int (t2tb9 fc232) (t2tb8 y0))) y1) y0)))

;; mat_sum_n_bvs_null_eq
(assert
  (forall ((f (Array bitvec (matrix complex))) (x (matrix complex)))
    (=>
      (= x (tb2t65
             (infix_at
               (matrix1 complex1)
               bitvec1
               (t2tb80 f)
               (t2tb77
                 (make_bv
                   (tb2t7
                     (infix_at
                       (infix_mngt int int)
                       int
                       (t2tb9 fc232)
                       (t2tb8 0)))
                   0)))))
      (= (mat_sum bitvec1 (t2tb79 (n_bvs 0)) (t2tb80 f)) x))))

;; get_n_bvs
(assert
  (forall ((bv1 bitvec))
    (mem bitvec1 (t2tb77 bv1) (t2tb79 (n_bvs (length bv1))))))

;; get_n_bvs_gen
(assert
  (forall ((bv1 bitvec) (l Int))
    (=> (= l (length bv1)) (mem bitvec1 (t2tb77 bv1) (t2tb79 (n_bvs l))))))

;; set_n_bvs
(assert
  (forall ((bv1 bitvec))
    (=>
      (mem bitvec1 (t2tb77 bv1) (t2tb79 (n_bvs (length bv1))))
      (forall ((i Int))
        (=>
          (not (and (<= 0 i) (< i (length bv1))))
          (= (select (value bv1) i) 0))))))

;; int_to_bv_n_bvs
(assert
  (forall ((i Int) (n Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (mem bitvec1 (t2tb77 (int_to_bv i n)) (t2tb79 (n_bvs n)))))))

;; fc
(declare-fun fc233 () (Array bitvec bitvec))

;; fc
(declare-fun fc234 () (Array bitvec bitvec))

;; fc'def
(assert
  (forall ((bv1 bitvec))
    (= (tb2t77 (infix_at bitvec1 bitvec1 (t2tb78 fc233) (t2tb77 bv1))) 
    (concat_l
      bv1
      0))))

;; fc'def
(assert
  (forall ((bv1 bitvec))
    (= (tb2t77 (infix_at bitvec1 bitvec1 (t2tb78 fc234) (t2tb77 bv1))) 
    (concat_l
      bv1
      1))))

;; n_bvs_def_pos
(assert
  (forall ((n Int))
    (=>
      (< 0 n)
      (= (n_bvs n) (tb2t79
                     (union1
                       bitvec1
                       (map1
                         bitvec1
                         bitvec1
                         (t2tb78 fc233)
                         (t2tb79 (n_bvs (- n 1))))
                       (map1
                         bitvec1
                         bitvec1
                         (t2tb78 fc234)
                         (t2tb79 (n_bvs (- n 1))))))))))

;; bv_to_int_closure
(declare-fun bv_to_int_closure () (Array bitvec Int))

;; t2tb
(declare-fun t2tb81 ((Array bitvec Int)) uni)

;; t2tb_sort
(assert
  (forall ((x (Array bitvec Int)))
    (sort (infix_mngt bitvec1 int) (t2tb81 x))))

;; tb2t
(declare-fun tb2t81 (uni) (Array bitvec Int))

;; BridgeL
(assert
  (forall ((i (Array bitvec Int)))
    (! (= (tb2t81 (t2tb81 i)) i) :pattern ((t2tb81 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb81 (tb2t81 j)) j) :pattern ((t2tb81 (tb2t81 j))) )))

;; bv_to_int_closure_def
(assert
  (forall ((y bitvec))
    (= (tb2t8 (infix_at int bitvec1 (t2tb81 bv_to_int_closure) (t2tb77 y))) 
    (bv_to_int
      y))))

;; map_n_bvs
(assert
  (forall ((n Int))
    (=>
      (< 0 n)
      (= (to_fset 0 (power 2 n)) (tb2t16
                                   (map1
                                     int
                                     bitvec1
                                     (t2tb81 bv_to_int_closure)
                                     (t2tb79 (n_bvs n))))))))

;; fc
(declare-fun fc235 ((Array Int complex)) (Array bitvec complex))

;; t2tb
(declare-fun t2tb82 ((Array bitvec complex)) uni)

;; t2tb_sort
(assert
  (forall ((x (Array bitvec complex)))
    (sort (infix_mngt bitvec1 complex1) (t2tb82 x))))

;; tb2t
(declare-fun tb2t82 (uni) (Array bitvec complex))

;; BridgeL
(assert
  (forall ((i (Array bitvec complex)))
    (! (= (tb2t82 (t2tb82 i)) i) :pattern ((t2tb82 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=> (sort (infix_mngt bitvec1 complex1) j) (= (t2tb82 (tb2t82 j)) j)) :pattern (
    (t2tb82
      (tb2t82 j))) )))

;; fc'def
(assert
  (forall ((f (Array Int complex)) (k bitvec))
    (= (tb2t (infix_at complex1 bitvec1 (t2tb82 (fc235 f)) (t2tb77 k))) 
    (tb2t
      (infix_at complex1 int (t2tb51 f) (t2tb8 (bv_to_int k)))))))

;; ind_sum_bv
(assert
  (forall ((f (Array Int complex)) (n Int))
    (=>
      (<= 1 n)
      (= (ind_sum f 0 (power 2 n)) (sum
                                     bitvec1
                                     (t2tb79 (n_bvs n))
                                     (t2tb82 (fc235 f)))))))

;; first_div
(declare-fun first_div (bitvec
  bitvec) Int)

;; first_div'spec
(assert
  (forall ((bv1 bitvec) (bv2 bitvec))
    (=>
      (= (length bv1) (length bv2))
      (=>
        (not (= bv1 bv2))
        (and
          (forall ((j Int))
            (=>
              (and (<= 0 j) (< j (first_div bv1 bv2)))
              (= (select (value bv1) j) (select (value bv2) j))))
          (and
            (=>
              (< (first_div bv1 bv2) (length bv1))
              (not
                (= (select (value bv1) (first_div bv1 bv2)) (select (value
                                                                    bv2) 
                (first_div
                  bv1
                  bv2)))))
            (and
              (<= 0 (first_div bv1 bv2))
              (< (first_div bv1 bv2) (length bv1)))))))))

;; fc
(declare-fun fc236 (Int) (Array bitvec bitvec))

;; fc'def
(assert
  (forall ((i Int) (bv1 bitvec))
    (= (tb2t77 (infix_at bitvec1 bitvec1 (t2tb78 (fc236 i)) (t2tb77 bv1))) 
    (concat_l
      bv1
      i))))

;; injective_concat
(assert
  (forall ((i Int) (n Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 i) (<= i 1))
        (p_injective bitvec1 bitvec1 (t2tb78 (fc236 i)) (t2tb79 (n_bvs n)))))))

;; inf_first_div
(assert
  (forall ((bv1 bitvec) (bv2 bitvec))
    (=>
      (= (length bv1) (length bv2))
      (=>
        (not (= bv1 bv2))
        (forall ((j Int))
          (=>
            (<= 1 j)
            (=>
              (not (= (select (value bv1) j) (select (value bv2) j)))
              (<= (first_div bv1 bv2) j))))))))

;; first_div_diff
(assert
  (forall ((bv1 bitvec) (bv2 bitvec))
    (=>
      (= (length bv1) (length bv2))
      (=>
        (not (= bv1 bv2))
        (not
          (= (select (value bv1) (first_div bv1 bv2)) (select (value bv2) 
          (first_div
            bv1
            bv2))))))))

;; exists_first_div
(assert
  (forall ((bv1 bitvec) (bv2 bitvec))
    (=>
      (= (length bv1) (length bv2))
      (=>
        (not (= bv1 bv2))
        (exists ((i Int))
          (and (and (<= 0 i) (< i (length bv1))) (= i (first_div bv1 bv2))))))))

;; set_diff_length
(assert
  (forall ((bv1 bitvec) (bv2 bitvec))
    (=> (not (= (length bv1) (length bv2))) (not (= bv1 bv2)))))

;; set_diff_val
(assert
  (forall ((bv1 bitvec) (bv2 bitvec) (i Int))
    (=>
      (= (length bv1) (length bv2))
      (=>
        (and (<= 0 i) (< i (length bv1)))
        (=>
          (not (= (select (value bv1) i) (select (value bv2) i)))
          (not (= bv1 bv2)))))))

;; fc
(declare-fun fc237 (bitvec) (Array Int Int))

;; fc
(declare-fun fc238 (bitvec) (Array Int Int))

;; fc
(declare-fun fc239 (bitvec) (Array Int Int))

;; fc
(declare-fun fc240 (bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((bv1 bitvec) (l Int))
    (= (select (fc237 bv1) l) (ite (< l (length bv1))
                                (* (select (value bv1) l) (power
                                                            2
                                                            (- (- (length
                                                                    bv1) 1) l)))
                                0))))

;; fc'def
(assert
  (forall ((bv1 bitvec) (l Int))
    (= (select (fc238 bv1) l) (ite (< l (length bv1))
                                (* (select (value bv1) l) (power
                                                            2
                                                            (- (- (length
                                                                    bv1) 1) l)))
                                0))))

;; fc'def
(assert
  (forall ((bv1 bitvec) (l Int))
    (= (select (fc239 bv1) l) (* (select (value bv1) l) (power
                                                          2
                                                          (- (- (length bv1) 1) l))))))

;; fc'def
(assert
  (forall ((bv1 bitvec) (l Int))
    (= (select (fc240 bv1) l) (* (select (value bv1) l) (power
                                                          2
                                                          (- (- (length bv1) 1) l))))))

;; kth_decomp
(assert
  (forall ((bv1 bitvec) (k Int))
    (=>
      (and (<= 0 k) (< k (length bv1)))
      (and
        (= (bv_to_int bv1) (+ (+ (ind_isum (fc237 bv1) 0 k) (* (select 
        (value
          bv1) k) (power 2 (- (- (length bv1) 1) k)))) (ind_isum
                                                         (fc238 bv1)
                                                         (+ k 1)
                                                         (length bv1))))
        (= (bv_to_int bv1) (+ (+ (ind_isum (fc239 bv1) 0 k) (* (select 
        (value
          bv1) k) (power 2 (- (- (length bv1) 1) k)))) (ind_isum
                                                         (fc240 bv1)
                                                         (+ k 1)
                                                         (length bv1))))))))

;; fc
(declare-fun fc241 (Int
  Int
  Int) (Array Int complex))

;; fc'def
(assert
  (forall ((i Int) (j Int) (n Int) (k Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc241 i j n)) (t2tb8 k))) 
    (indic
      int
      (t2tb8 (select (value (int_to_bv i n)) k))
      (t2tb8 (select (value (int_to_bv j n)) k))))))

;; int_to_bv_prod
(assert
  (forall ((i Int) (j Int) (n Int))
    (=>
      (< 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (=>
          (and (<= 0 j) (< j (power 2 n)))
          (= (ind_product (fc241 i j n) 0 n) (indic int (t2tb8 i) (t2tb8 j))))))))

;; fc
(declare-fun fc242 (Int
  Int
  Int) (Array Int complex))

;; fc'def
(assert
  (forall ((i Int) (n Int) (j Int) (k Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc242 i n j)) (t2tb8 k))) 
    (indic
      int
      (t2tb8 (select (value (int_to_bv i n)) k))
      (t2tb8 (select (value (int_to_bv j n)) k))))))

;; int_to_bv_prod_gen
(assert
  (forall ((i Int) (n Int))
    (=>
      (< 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (forall ((j Int))
          (=>
            (and (<= 0 j) (< j (power 2 n)))
            (= (ind_product (fc242 i n j) 0 n) (indic
                                                 int
                                                 (t2tb8 i)
                                                 (t2tb8 j)))))))))

;; fc
(declare-fun fc243 (bitvec) (Array Int Int))

;; fc
(declare-fun fc244 (bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((bv1 bitvec) (l Int))
    (= (select (fc243 bv1) l) (* (select (value bv1) l) (power
                                                          2
                                                          (- (- (length bv1) 1) l))))))

;; fc'def
(assert
  (forall ((bv1 bitvec) (l Int))
    (= (select (fc244 bv1) l) (* (select (value bv1) l) (power
                                                          2
                                                          (- (- (length bv1) 1) l))))))

;; kth_decomp_bound_zero
(assert
  (forall ((bv1 bitvec) (k Int))
    (=>
      (and (<= 0 k) (< k (length bv1)))
      (=>
        (= (select (value bv1) k) 0)
        (and
          (<= (ind_isum (fc243 bv1) 0 k) (bv_to_int bv1))
          (< (bv_to_int bv1) (+ (ind_isum (fc244 bv1) 0 k) (power
                                                             2
                                                             (- (- (length
                                                                    bv1) k) 1)))))))))

;; fc
(declare-fun fc245 (bitvec) (Array Int Int))

;; fc
(declare-fun fc246 (bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((bv1 bitvec) (l Int))
    (= (select (fc245 bv1) l) (* (select (value bv1) l) (power
                                                          2
                                                          (- (- (length bv1) 1) l))))))

;; fc'def
(assert
  (forall ((bv1 bitvec) (l Int))
    (= (select (fc246 bv1) l) (* (select (value bv1) l) (power
                                                          2
                                                          (- (- (length bv1) l) 1))))))

;; kth_decomp_bound_one
(assert
  (forall ((bv1 bitvec) (k Int))
    (=>
      (and (<= 0 k) (< k (length bv1)))
      (=>
        (= (select (value bv1) k) 1)
        (and
          (<= (+ (ind_isum (fc245 bv1) 0 k) (power
                                              2
                                              (- (- (length bv1) k) 1))) 
          (bv_to_int
            bv1))
          (< (bv_to_int bv1) (+ (ind_isum (fc246 bv1) 0 k) (power
                                                             2
                                                             (- (length bv1) k)))))))))

;; bv_to_int_length_2
(assert
  (forall ((x bitvec))
    (=>
      (= (length x) 2)
      (and
        (= (select (value x) 0) (div (bv_to_int x) 2))
        (= (select (value x) 1) (mod (bv_to_int x) 2))))))

;; bv_to_int_length_2_gen
(assert
  (and
    (forall ((x bitvec))
      (=> (= (length x) 2) (= (select (value x) 0) (div (bv_to_int x) 2))))
    (forall ((x bitvec))
      (=> (= (length x) 2) (= (select (value x) 1) (mod (bv_to_int x) 2))))))

;; bv_inversion
(declare-fun bv_inversion (bitvec) bitvec)

;; result
(declare-fun result23 (bitvec) (Array Int Int))

;; result'def
(assert
  (forall ((bv1 bitvec) (k Int))
    (= (select (result23 bv1) k) (select (value bv1) (- (- (length bv1) k) 1)))))

;; bv_inversion'def
(assert
  (forall ((bv1 bitvec))
    (= (bv_inversion bv1) (make_bv (result23 bv1) (length bv1)))))

;; bv_inversion'spec
(assert
  (forall ((bv1 bitvec))
    (and
      (= (length (bv_inversion bv1)) (length bv1))
      (forall ((k Int))
        (=>
          (in_range (bv_inversion bv1) k)
          (= (select (value (bv_inversion bv1)) k) (select (value bv1) (- (- 
          (length
            bv1) k) 1))))))))

;; bv_inversion_value
(assert
  (forall ((bv1 bitvec) (i Int))
    (= (select (value (bv_inversion bv1)) i) (select (value bv1) (- (- 
    (length
      bv1) i) 1)))))

;; bv_inversion_invol
(assert (forall ((bv1 bitvec)) (= (bv_inversion (bv_inversion bv1)) bv1)))

;; int_bit_inversion
(declare-fun int_bit_inversion (Int
  Int) Int)

;; int_bit_inversion'def
(assert
  (forall ((i Int) (n Int))
    (=>
      (< 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (= (int_bit_inversion i n) (bv_to_int (bv_inversion (int_to_bv i n))))))))

;; int_bit_inversion'spec
(assert
  (forall ((i Int) (n Int))
    (=>
      (< 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (and
          (<= 0 (int_bit_inversion i n))
          (< (int_bit_inversion i n) (power 2 n)))))))

;; int_bit_inversion_ext
(declare-fun int_bit_inversion_ext (Int
  Int) Int)

;; int_bit_inversion_ext'def
(assert
  (forall ((i Int) (n Int))
    (=>
      (< 0 n)
      (=>
        (and (<= 0 i) (<= i (power 2 n)))
        (ite (= i (power 2 n))
          (= (int_bit_inversion_ext i n) i)
          (= (int_bit_inversion_ext i n) (bv_to_int
                                           (bv_inversion (int_to_bv i n)))))))))

;; int_bit_inversion_ext'spec
(assert
  (forall ((i Int) (n Int))
    (=>
      (< 0 n)
      (=>
        (and (<= 0 i) (<= i (power 2 n)))
        (and
          (and
            (<= 0 (int_bit_inversion_ext i n))
            (<= (int_bit_inversion_ext i n) (power 2 n)))
          (=> (= i (power 2 n)) (= (int_bit_inversion_ext i n) (power 2 n))))))))

;; int_bit_inversion_invol
(assert
  (forall ((i Int) (n Int))
    (=>
      (< 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (= (int_bit_inversion (int_bit_inversion i n) n) i)))))

;; int_bit_inversion_inj
(assert
  (forall ((i Int) (j Int) (n Int))
    (=>
      (< 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (=>
          (and (<= 0 j) (< j (power 2 n)))
          (=>
            (not (= i j))
            (not (= (int_bit_inversion i n) (int_bit_inversion j n)))))))))

;; int_bit_inversion_ext_invol
(assert
  (forall ((i Int) (n Int))
    (=>
      (< 0 n)
      (=>
        (and (<= 0 i) (<= i (power 2 n)))
        (= (int_bit_inversion_ext (int_bit_inversion_ext i n) n) i)))))

;; int_bit_inversion_onebit
(assert
  (forall ((i Int))
    (=> (and (<= 0 i) (< i 2)) (= (int_bit_inversion i 1) i))))

;; int_bit_inversion_zero
(assert
  (forall ((i Int) (n Int))
    (=> (< 0 n) (=> (= 0 i) (= (int_bit_inversion i n) 0)))))

;; fc
(declare-fun fc247 (bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((bv1 bitvec) (k Int))
    (= (select (fc247 bv1) k) (* (select (value bv1) (- (- (length bv1) k) 1)) 
    (power
      2
      (- (- (length bv1) 1) k))))))

;; bv_to_int_sum_inversion
(assert
  (forall ((bv1 bitvec))
    (=>
      (< 0 (length bv1))
      (= (int_bit_inversion (bv_to_int bv1) (length bv1)) (ind_isum
                                                            (fc247 bv1)
                                                            0
                                                            (length bv1))))))

;; fc
(declare-fun fc248 (bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((bv1 bitvec) (k Int))
    (= (select (fc248 bv1) k) (* (select (value bv1) k) (power 2 k)))))

;; bv_to_int_sum_inversion_inc
(assert
  (forall ((bv1 bitvec))
    (=>
      (< 0 (length bv1))
      (= (int_bit_inversion (bv_to_int bv1) (length bv1)) (ind_isum
                                                            (fc248 bv1)
                                                            0
                                                            (length bv1))))))

;; inversion_to_int_comm
(assert
  (forall ((bv1 bitvec))
    (=>
      (< 0 (length bv1))
      (= (int_to_bv
           (int_bit_inversion (bv_to_int bv1) (length bv1))
           (length bv1)) (bv_inversion bv1)))))

;; fc
(declare-fun fc249 (Int
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((i Int) (n Int) (k Int))
    (= (select (fc249 i n) k) (* (select (value (int_to_bv i n)) (- (- n k) 1)) 
    (power
      2
      (- (- n 1) k))))))

;; bv_inversion_sum
(assert
  (forall ((i Int) (n Int))
    (=>
      (< 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (= (int_bit_inversion i n) (ind_isum (fc249 i n) 0 n))))))

;; fc
(declare-fun fc250 (bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((bv1 bitvec) (k Int))
    (= (select (fc250 bv1) k) (* (select (value bv1) (- (- (length bv1) k) 1)) 
    (power
      2
      (- (- (length bv1) 1) k))))))

;; bv_to_int_inversion_sum
(assert
  (forall ((bv1 bitvec))
    (= (bv_to_int (bv_inversion bv1)) (ind_isum (fc250 bv1) 0 (length bv1)))))

;; bv_to_int_bit_inversion
(assert
  (forall ((bv1 bitvec))
    (=>
      (< 0 (length bv1))
      (= (bv_to_int (bv_inversion bv1)) (int_bit_inversion
                                          (bv_to_int bv1)
                                          (length bv1))))))

;; fc
(declare-fun fc251 (bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((bv1 bitvec) (k Int))
    (= (select (fc251 bv1) k) (* (select (value bv1) k) (power 2 k)))))

;; bv_to_int_inversion_sum_inc
(assert
  (forall ((bv1 bitvec))
    (=>
      (< 0 (length bv1))
      (= (bv_to_int (bv_inversion bv1)) (ind_isum (fc251 bv1) 0 (length bv1))))))

;; bv_m_to_int_bit_inversion
(assert
  (forall ((f (Array Int Int)) (n Int))
    (=>
      (< 0 n)
      (= (bv_to_int (bv_inversion (make_bv_m f n))) (int_bit_inversion
                                                      (bv_to_int
                                                        (make_bv_m f n))
                                                      n)))))

;; fc
(declare-fun fc252 (Int
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((i Int) (n Int) (k Int))
    (= (select (fc252 i n) k) (* (select (value (int_to_bv i n)) (- n k)) 
    (power
      2
      (- (- n k) 1))))))

;; int_bit_inversion_tail_bits
(assert
  (forall ((i Int) (n Int))
    (=>
      (< 1 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (= (int_bit_inversion (tail_bits i n) (- n 1)) (ind_isum
                                                         (fc252 i n)
                                                         1
                                                         n))))))

;; fc
(declare-fun fc253 ((Array Int Int)
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((bv1 (Array Int Int)) (n Int) (k Int))
    (= (select (fc253 bv1 n) k) (* (mod (select bv1 (- (- n 1) k)) 2) 
    (power
      2
      (- (- n k) 1))))))

;; tail_bits_int_bit_inversion
(assert
  (forall ((bv1 (Array Int Int)) (n Int))
    (=>
      (< 1 n)
      (= (tail_bits (int_bit_inversion (bv_to_int (make_bv_m bv1 n)) n) n) 
      (ind_isum
        (fc253 bv1 n)
        1
        n)))))

;; int_bit_inversion_ht
(assert
  (forall ((i Int) (n Int))
    (=>
      (< 1 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (= (int_bit_inversion i n) (+ (* 2 (int_bit_inversion
                                             (tail_bits i n)
                                             (- n 1))) (head_bit i n)))))))

;; bv_inversion_ht
(assert
  (forall ((f (Array Int Int)) (n Int))
    (=>
      (< 1 n)
      (= (bv_to_int (bv_inversion (make_bv_m f n))) (+ (head (make_bv_m f n)) (* 2 
      (bv_to_int
        (bv_inversion (tail (make_bv_m f n))))))))))

;; bv_inversion_ht_bv
(assert
  (forall ((bv1 bitvec))
    (=>
      (< 1 (length bv1))
      (= (bv_to_int (bv_inversion bv1)) (+ (head bv1) (* 2 (bv_to_int
                                                             (bv_inversion
                                                               (tail bv1)))))))))

;; bv_to_int_ht
(assert
  (forall ((f (Array Int Int)) (n Int))
    (=>
      (< 1 n)
      (= (bv_to_int (make_bv_m f n)) (+ (* (power 2 (- n 1)) (head
                                                               (make_bv_m
                                                                 f
                                                                 n))) 
      (bv_to_int
        (tail (make_bv_m f n))))))))

;; bv_inversion_mult_ht
(assert
  (forall ((fx (Array Int Int)) (fy (Array Int Int)) (n Int))
    (=>
      (< 1 n)
      (= (* (bv_to_int (make_bv_m fx n)) (bv_to_int
                                           (bv_inversion (make_bv_m fy n)))) (+ (+ (* 
      (head
        (make_bv_m fy n)) (bv_to_int (make_bv_m fx n))) (* (bv_to_int
                                                             (tail
                                                               (make_bv_m
                                                                 fx
                                                                 n))) (* 2 
      (bv_to_int
        (bv_inversion (tail (make_bv_m fy n))))))) (* (power 2 n) (* 
      (head
        (make_bv_m fx n)) (bv_to_int (bv_inversion (tail (make_bv_m fy n)))))))))))

;; bv_inversion_mult_ht_bv
(assert
  (forall ((bvx bitvec) (bvy bitvec))
    (=>
      (< 1 (length bvx))
      (=>
        (= (length bvx) (length bvy))
        (= (* (bv_to_int bvx) (bv_to_int (bv_inversion bvy))) (+ (+ (* 
        (head
          bvy) (bv_to_int bvx)) (* (bv_to_int (tail bvx)) (* 2 (bv_to_int
                                                                 (bv_inversion
                                                                   (tail bvy)))))) (* 
        (power
          2
          (length bvx)) (* (head bvx) (bv_to_int (bv_inversion (tail bvy)))))))))))

;; ang_sum
(declare-fun ang_sum ((Array Int angle)
  Int
  Int) angle)

;; ang_add_closure
(declare-fun ang_add_closure () (Array angle (Array angle angle)))

;; t2tb
(declare-fun t2tb83 ((Array angle angle)) uni)

;; t2tb_sort
(assert
  (forall ((x (Array angle angle)))
    (sort (infix_mngt angle1 angle1) (t2tb83 x))))

;; tb2t
(declare-fun tb2t83 (uni) (Array angle angle))

;; BridgeL
(assert
  (forall ((i (Array angle angle)))
    (! (= (tb2t83 (t2tb83 i)) i) :pattern ((t2tb83 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=> (sort (infix_mngt angle1 angle1) j) (= (t2tb83 (tb2t83 j)) j)) :pattern (
    (t2tb83
      (tb2t83 j))) )))

;; t2tb
(declare-fun t2tb84 (angle) uni)

;; t2tb_sort
(assert (forall ((x angle)) (sort angle1 (t2tb84 x))))

;; tb2t
(declare-fun tb2t84 (uni) angle)

;; BridgeL
(assert
  (forall ((i angle)) (! (= (tb2t84 (t2tb84 i)) i) :pattern ((t2tb84 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=> (sort angle1 j) (= (t2tb84 (tb2t84 j)) j)) :pattern ((t2tb84
                                                                  (tb2t84 j))) )))

;; t2tb
(declare-fun t2tb85 ((Array angle (Array angle angle))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array angle (Array angle angle))))
    (sort (infix_mngt angle1 (infix_mngt angle1 angle1)) (t2tb85 x))))

;; tb2t
(declare-fun tb2t85 (uni) (Array angle (Array angle angle)))

;; BridgeL
(assert
  (forall ((i (Array angle (Array angle angle))))
    (! (= (tb2t85 (t2tb85 i)) i) :pattern ((t2tb85 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort (infix_mngt angle1 (infix_mngt angle1 angle1)) j)
         (= (t2tb85 (tb2t85 j)) j)) :pattern ((t2tb85 (tb2t85 j))) )))

;; ang_add_closure_def
(assert
  (forall ((y angle) (y1 angle))
    (= (tb2t84
         (infix_at
           angle1
           angle1
           (infix_at
             (infix_mngt angle1 angle1)
             angle1
             (t2tb85 ang_add_closure)
             (t2tb84 y))
           (t2tb84 y1))) (ang_add y y1))))

;; t2tb
(declare-fun t2tb86 ((Array Int angle)) uni)

;; t2tb_sort
(assert
  (forall ((x (Array Int angle))) (sort (infix_mngt int angle1) (t2tb86 x))))

;; tb2t
(declare-fun tb2t86 (uni) (Array Int angle))

;; BridgeL
(assert
  (forall ((i (Array Int angle)))
    (! (= (tb2t86 (t2tb86 i)) i) :pattern ((t2tb86 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=> (sort (infix_mngt int angle1) j) (= (t2tb86 (tb2t86 j)) j)) :pattern (
    (t2tb86
      (tb2t86 j))) )))

;; ang_sum'def
(assert
  (forall ((f (Array Int angle)) (i Int) (j Int))
    (ite (<= j i)
      (= (ang_sum f i j) ang_zero)
      (= (ang_sum f i j) (tb2t84
                           (int_iterate
                             angle1
                             (t2tb85 ang_add_closure)
                             (t2tb86 f)
                             i
                             j))))))

;; ang_sumto_int_iterate
(assert
  (forall ((f (Array Int angle)) (i Int) (j Int))
    (=>
      (< i j)
      (= (ang_sum f i j) (tb2t84
                           (int_iterate
                             angle1
                             (t2tb85 ang_add_closure)
                             (t2tb86 f)
                             i
                             j))))))

;; ang_sum_plus_one
(assert
  (forall ((f (Array Int angle)) (i Int) (j Int))
    (=>
      (< (+ i 1) j)
      (= (ang_sum f i j) (ang_add
                           (tb2t84
                             (infix_at angle1 int (t2tb86 f) (t2tb8 i)))
                           (ang_sum f (+ i 1) j))))))

;; ang_sum_cardone
(assert
  (forall ((f (Array Int angle)) (i Int) (j Int))
    (=>
      (= j (+ i 1))
      (= (ang_sum f i j) (tb2t84 (infix_at angle1 int (t2tb86 f) (t2tb8 i)))))))

;; ang_sum_cardone_p
(assert
  (forall ((f (Array Int angle)) (i Int) (j Int) (r angle))
    (=>
      (= j (+ i 1))
      (=>
        (= (tb2t84 (infix_at angle1 int (t2tb86 f) (t2tb8 i))) r)
        (= r (ang_sum f i j))))))

;; ang_sum_neutral
(assert
  (forall ((f (Array Int angle)) (i Int) (j Int))
    (=>
      (<= i j)
      (=>
        (forall ((k Int))
          (=>
            (and (<= i k) (< k j))
            (= (tb2t84 (infix_at angle1 int (t2tb86 f) (t2tb8 k))) ang_zero)))
        (= (ang_sum f i j) ang_zero)))))

;; ang_sum_def_plus_one_com
(assert
  (forall ((f (Array Int angle)) (i Int) (j Int))
    (=>
      (< (+ i 1) j)
      (= (ang_add
           (tb2t84 (infix_at angle1 int (t2tb86 f) (t2tb8 i)))
           (ang_sum f (+ i 1) j)) (ang_sum f i j)))))

;; ang_sum_right_extension
(assert
  (forall ((f (Array Int angle)) (i Int) (j Int))
    (=>
      (< (+ i 1) j)
      (= (ang_sum f i j) (ang_add
                           (ang_sum f i (- j 1))
                           (tb2t84
                             (infix_at angle1 int (t2tb86 f) (t2tb8 (- j 1)))))))))

;; ang_sum_re
(assert
  (forall ((f (Array Int angle)) (i Int) (j Int))
    (=>
      (<= (+ i 1) j)
      (= (ang_sum f i j) (ang_add
                           (ang_sum f i (- j 1))
                           (tb2t84
                             (infix_at angle1 int (t2tb86 f) (t2tb8 (- j 1)))))))))

;; ang_sum_transitivity
(assert
  (forall ((f (Array Int angle)) (i Int) (k Int) (j Int))
    (=>
      (and (< i k) (< k j))
      (= (ang_sum f i j) (ang_add (ang_sum f i k) (ang_sum f k j))))))

;; ang_sum_eq
(assert
  (forall ((f (Array Int angle)) (g (Array Int angle)) (i Int) (j Int))
    (=>
      (<= i j)
      (=>
        (forall ((k Int))
          (=>
            (and (<= i k) (< k j))
            (= (tb2t84 (infix_at angle1 int (t2tb86 f) (t2tb8 k))) (tb2t84
                                                                    (infix_at
                                                                    angle1
                                                                    int
                                                                    (t2tb86
                                                                    g)
                                                                    (t2tb8 k))))))
        (= (ang_sum f i j) (ang_sum g i j))))))

;; ang_sum_int_to_ang
(assert
  (forall ((f (Array Int angle)) (g (Array Int angle)) (i Int) (j Int))
    (=>
      (< i j)
      (=>
        (forall ((k Int))
          (=>
            (and (<= i k) (< k j))
            (= (tb2t84 (infix_at angle1 int (t2tb86 f) (t2tb8 k))) (tb2t84
                                                                    (infix_at
                                                                    angle1
                                                                    int
                                                                    (t2tb86
                                                                    g)
                                                                    (t2tb8 k))))))
        (=>
          (exists ((n Int))
            (forall ((k Int))
              (exists ((j1 Int) (jqt Int))
                (and
                  (= (tb2t84 (infix_at angle1 int (t2tb86 f) (t2tb8 k))) 
                  (infix_sldtsl
                    j1
                    n))
                  (and
                    (= (tb2t84 (infix_at angle1 int (t2tb86 g) (t2tb8 k))) 
                    (infix_sldtsl
                      jqt
                      n))
                    (= j1 jqt))))))
          (= (ang_sum f i j) (ang_sum g i j)))))))

;; vang_sum_eq
(assert
  (forall ((f (Array Int angle)) (g (Array Int angle)) (i Int) (j Int))
    (=>
      (< i j)
      (=>
        (forall ((k Int))
          (=>
            (and (<= i k) (< k j))
            (= (tb2t84 (infix_at angle1 int (t2tb86 f) (t2tb8 k))) (tb2t84
                                                                    (infix_at
                                                                    angle1
                                                                    int
                                                                    (t2tb86
                                                                    g)
                                                                    (t2tb8 k))))))
        (= (ang_exp (ang_sum f i j)) (ang_exp (ang_sum g i j)))))))

;; vang_sum_scal_eq
(assert
  (forall ((f (Array Int angle)) (g (Array Int angle)) (m (matrix complex)) (n (matrix complex)) (i Int) (j Int))
    (=>
      (< i j)
      (=>
        (= m n)
        (=>
          (forall ((k Int))
            (=>
              (and (<= i k) (< k j))
              (= (tb2t84 (infix_at angle1 int (t2tb86 f) (t2tb8 k))) 
              (tb2t84
                (infix_at angle1 int (t2tb86 g) (t2tb8 k))))))
          (= (infix_asdtdt (ang_exp (ang_sum f i j)) m) (infix_asdtdt
                                                          (ang_exp
                                                            (ang_sum g i j))
                                                          n)))))))

;; fc
(declare-fun fc254 ((Array Int angle)) (Array Int angle))

;; fc'def
(assert
  (forall ((f (Array Int angle)) (k Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc254 f)) (t2tb8 k))) (ang_inv
                                                                    (tb2t84
                                                                    (infix_at
                                                                    angle1
                                                                    int
                                                                    (t2tb86
                                                                    f)
                                                                    (t2tb8 k)))))))

;; ang_sum_inv
(assert
  (forall ((f (Array Int angle)) (i Int) (j Int))
    (= (ang_inv (ang_sum f i j)) (ang_sum (fc254 f) i j))))

;; ang_sum_plus_one_p
(assert
  (forall ((f (Array Int angle)) (g (Array Int angle)) (i Int) (j Int) (l Int) (m Int) (r angle))
    (=>
      (< (+ i 1) j)
      (=>
        (= l (+ i 1))
        (=>
          (= m j)
          (=>
            (= (tb2t84 (infix_at angle1 int (t2tb86 g) (t2tb8 i))) r)
            (=>
              (forall ((k Int))
                (=>
                  (and (<= (+ i 1) k) (< k j))
                  (= (tb2t84 (infix_at angle1 int (t2tb86 f) (t2tb8 k))) 
                  (tb2t84
                    (infix_at angle1 int (t2tb86 g) (t2tb8 k))))))
              (= (ang_add r (ang_sum f l m)) (ang_sum g i j)))))))))

;; vang_sum_plus_one_p
(assert
  (forall ((f (Array Int angle)) (g (Array Int angle)) (i Int) (j Int) (l Int) (m Int) (r angle))
    (=>
      (< (+ i 1) j)
      (=>
        (= l (+ i 1))
        (=>
          (= m j)
          (=>
            (= (tb2t84 (infix_at angle1 int (t2tb86 g) (t2tb8 i))) r)
            (=>
              (forall ((k Int))
                (=>
                  (and (<= (+ i 1) k) (< k j))
                  (= (tb2t84 (infix_at angle1 int (t2tb86 f) (t2tb8 k))) 
                  (tb2t84
                    (infix_at angle1 int (t2tb86 g) (t2tb8 k))))))
              (= (infix_asdt (ang_exp r) (ang_exp (ang_sum f l m))) (ang_exp
                                                                    (ang_sum
                                                                    g
                                                                    i
                                                                    j))))))))))

;; vang_sum_plus_one_rev
(assert
  (forall ((f (Array Int angle)) (g (Array Int angle)) (i Int) (j Int) (l Int) (m Int) (r angle))
    (=>
      (< (+ i 1) j)
      (=>
        (= l (+ i 1))
        (=>
          (= m j)
          (=>
            (= (tb2t84 (infix_at angle1 int (t2tb86 g) (t2tb8 i))) r)
            (=>
              (forall ((k Int))
                (=>
                  (and (<= (+ i 1) k) (< k j))
                  (= (tb2t84 (infix_at angle1 int (t2tb86 f) (t2tb8 k))) 
                  (tb2t84
                    (infix_at angle1 int (t2tb86 g) (t2tb8 k))))))
              (= (ang_exp (ang_sum g i j)) (infix_asdt
                                             (ang_exp r)
                                             (ang_exp (ang_sum f l m)))))))))))

;; ang_sum_right_extension_p
(assert
  (forall ((f (Array Int angle)) (g (Array Int angle)) (i Int) (j Int) (l Int) (m Int) (r angle))
    (=>
      (< (+ i 1) j)
      (=>
        (= m (- j 1))
        (=>
          (= l i)
          (=>
            (= (tb2t84 (infix_at angle1 int (t2tb86 g) (t2tb8 (- j 1)))) r)
            (=>
              (forall ((k Int))
                (=>
                  (and (<= i k) (< k (- j 1)))
                  (= (tb2t84 (infix_at angle1 int (t2tb86 f) (t2tb8 k))) 
                  (tb2t84
                    (infix_at angle1 int (t2tb86 g) (t2tb8 k))))))
              (= (ang_add (ang_sum f l m) r) (ang_sum g i j)))))))))

;; vang_sum_right_extension_p
(assert
  (forall ((f (Array Int angle)) (g (Array Int angle)) (i Int) (j Int) (l Int) (m Int) (r angle))
    (=>
      (< (+ i 1) j)
      (=>
        (= m (- j 1))
        (=>
          (= l i)
          (=>
            (= (tb2t84 (infix_at angle1 int (t2tb86 g) (t2tb8 (- j 1)))) r)
            (=>
              (forall ((k Int))
                (=>
                  (and (<= i k) (< k (- j 1)))
                  (= (tb2t84 (infix_at angle1 int (t2tb86 f) (t2tb8 k))) 
                  (tb2t84
                    (infix_at angle1 int (t2tb86 g) (t2tb8 k))))))
              (= (infix_asdt (ang_exp (ang_sum f l m)) (ang_exp r)) (ang_exp
                                                                    (ang_sum
                                                                    g
                                                                    i
                                                                    j))))))))))

;; vang_sum_right_extension_rev
(assert
  (forall ((f (Array Int angle)) (g (Array Int angle)) (i Int) (j Int) (l Int) (m Int) (r angle))
    (=>
      (< (+ i 1) j)
      (=>
        (= m (- j 1))
        (=>
          (= l i)
          (=>
            (= (tb2t84 (infix_at angle1 int (t2tb86 g) (t2tb8 (- j 1)))) r)
            (=>
              (forall ((k Int))
                (=>
                  (and (<= i k) (< k (- j 1)))
                  (= (tb2t84 (infix_at angle1 int (t2tb86 f) (t2tb8 k))) 
                  (tb2t84
                    (infix_at angle1 int (t2tb86 g) (t2tb8 k))))))
              (= (ang_exp (ang_sum g i j)) (infix_asdt
                                             (ang_exp (ang_sum f l m))
                                             (ang_exp r))))))))))

;; ang_sum_cardzero
(assert
  (forall ((f (Array Int angle)) (i Int) (j Int))
    (=> (<= j i) (= (ang_sum f i j) ang_zero))))

;; ang_sum_eq_gen
(assert
  (forall ((f (Array Int angle)) (g (Array Int angle)) (i Int) (j Int) (iqt Int) (jqt Int))
    (=>
      (< i j)
      (=>
        (= i iqt)
        (=>
          (= j jqt)
          (=>
            (forall ((k Int))
              (=>
                (and (<= i k) (< k j))
                (= (tb2t84 (infix_at angle1 int (t2tb86 f) (t2tb8 k))) 
                (tb2t84
                  (infix_at angle1 int (t2tb86 g) (t2tb8 k))))))
            (= (ang_sum f i j) (ang_sum g iqt jqt))))))))

;; fc
(declare-fun fc255 ((Array Int (Array Int angle))
  Int) (Array Int angle))

;; fc
(declare-fun fc256 ((Array Int (Array Int angle))
  Int) (Array Int angle))

;; t2tb
(declare-fun t2tb87 ((Array Int (Array Int angle))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array Int (Array Int angle))))
    (sort (infix_mngt int (infix_mngt int angle1)) (t2tb87 x))))

;; tb2t
(declare-fun tb2t87 (uni) (Array Int (Array Int angle)))

;; BridgeL
(assert
  (forall ((i (Array Int (Array Int angle))))
    (! (= (tb2t87 (t2tb87 i)) i) :pattern ((t2tb87 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort (infix_mngt int (infix_mngt int angle1)) j)
         (= (t2tb87 (tb2t87 j)) j)) :pattern ((t2tb87 (tb2t87 j))) )))

;; fc'def
(assert
  (forall ((f (Array Int (Array Int angle))) (l Int) (x Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc255 f l)) (t2tb8 x))) 
    (ang_sum
      (tb2t86 (infix_at (infix_mngt int angle1) int (t2tb87 f) (t2tb8 x)))
      x
      l))))

;; fc'def
(assert
  (forall ((g (Array Int (Array Int angle))) (lqt Int) (x Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc256 g lqt)) (t2tb8 x))) 
    (ang_sum
      (tb2t86 (infix_at (infix_mngt int angle1) int (t2tb87 g) (t2tb8 x)))
      x
      lqt))))

;; ang_sum_sum_eq_vl
(assert
  (forall ((f (Array Int (Array Int angle))) (g (Array Int (Array Int angle))) (i Int) (j Int) (iqt Int) (jqt Int) (l Int) (lqt Int))
    (=>
      (< i j)
      (=>
        (<= j l)
        (=>
          (= i iqt)
          (=>
            (= j jqt)
            (=>
              (= l lqt)
              (=>
                (forall ((x Int) (xqt Int))
                  (=>
                    (and (<= i x) (< x j))
                    (=>
                      (and (<= x xqt) (< xqt l))
                      (= (tb2t84
                           (infix_at
                             angle1
                             int
                             (infix_at
                               (infix_mngt int angle1)
                               int
                               (t2tb87 f)
                               (t2tb8 x))
                             (t2tb8 xqt))) (tb2t84
                                             (infix_at
                                               angle1
                                               int
                                               (infix_at
                                                 (infix_mngt int angle1)
                                                 int
                                                 (t2tb87 g)
                                                 (t2tb8 x))
                                               (t2tb8 xqt)))))))
                (= (ang_sum (fc255 f l) i j) (ang_sum (fc256 g lqt) iqt jqt))))))))))

;; fc
(declare-fun fc257 ((Array Int Int)
  Int) (Array Int angle))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (n Int) (k Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc257 f n)) (t2tb8 k))) 
    (infix_sldtsl
      (- (select f k))
      n))))

;; ang_sum_minus
(assert
  (forall ((f (Array Int Int)) (i Int) (j Int) (n Int))
    (=>
      (<= 0 n)
      (=>
        (< i j)
        (= (ang_sum (fc257 f n) i j) (infix_sldtsl (- (ind_isum f i j)) n))))))

;; multiple_control_as_ang_sum
(assert
  (forall ((n Int))
    (=>
      (< 0 n)
      (forall ((x bitvec))
        (=>
          (= (length x) n)
          (= (ite (forall ((j Int))
                    (=> (and (<= 0 j) (< j n)) (= (select (value x) j) 1)))
               (infix_sldtsl 1 1)
               ang_zero) (ang_mult_int
                           (infix_sldtsl 1 1)
                           (ind_iproduct (value x) 0 n))))))))

;; multiple_control_as_ang_sum_rev
(assert
  (forall ((n Int))
    (=>
      (< 0 n)
      (forall ((x bitvec))
        (=>
          (= (length x) n)
          (= (ang_mult_int (infix_sldtsl 1 1) (ind_iproduct (value x) 0 n)) 
          (ite (forall ((j Int))
                 (=> (and (<= 0 j) (< j n)) (= (select (value x) j) 1)))
            (infix_sldtsl 1 1)
            ang_zero)))))))

;; fc
(declare-fun fc258 ((Array Int Int)
  (Array Int angle)) (Array Int angle))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (t (Array Int angle)) (b Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc258 f t)) (t2tb8 b))) 
    (tb2t84
      (infix_at angle1 int (t2tb86 t) (t2tb8 (select f b)))))))

;; ang_sum_map
(assert
  (forall ((i Int) (j Int) (k Int) (l Int) (f (Array Int Int)) (t (Array Int angle)))
    (=>
      (< i j)
      (=>
        (p_bijective1 f (to_fset i j) (to_fset k l))
        (= (ang_sum t k l) (ang_sum (fc258 f t) i j))))))

;; ang_sum_break
(assert
  (forall ((f (Array Int angle)) (i Int) (j Int) (y Int))
    (=>
      (and (<= i y) (<= y j))
      (= (ang_sum f i j) (ang_add (ang_sum f i y) (ang_sum f y j))))))

;; ang_sum_break_zero_l
(assert
  (forall ((f (Array Int angle)) (i Int) (j Int) (y Int))
    (=>
      (and (<= i y) (<= y j))
      (=>
        (forall ((k Int))
          (=>
            (and (<= i k) (< k y))
            (= (tb2t84 (infix_at angle1 int (t2tb86 f) (t2tb8 k))) ang_zero)))
        (= (ang_sum f y j) (ang_sum f i j))))))

;; ang_sum_break_zero_lg
(assert
  (forall ((f (Array Int angle)) (g (Array Int angle)) (i Int) (j Int) (y Int))
    (=>
      (and (<= i y) (<= y j))
      (=>
        (forall ((k Int))
          (=>
            (and (<= i k) (< k y))
            (= (tb2t84 (infix_at angle1 int (t2tb86 f) (t2tb8 k))) ang_zero)))
        (=>
          (forall ((k Int))
            (=>
              (and (<= i k) (< k j))
              (= (tb2t84 (infix_at angle1 int (t2tb86 f) (t2tb8 k))) 
              (tb2t84
                (infix_at angle1 int (t2tb86 g) (t2tb8 k))))))
          (= (ang_sum f y j) (ang_sum g i j)))))))

;; t2tb
(declare-fun t2tb88 ((Array bitvec (Array Int (Array Int angle)))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array bitvec (Array Int (Array Int angle)))))
    (sort
      (infix_mngt bitvec1 (infix_mngt int (infix_mngt int angle1)))
      (t2tb88 x))))

;; tb2t
(declare-fun tb2t88 (uni) (Array bitvec (Array Int (Array Int angle))))

;; BridgeL
(assert
  (forall ((i (Array bitvec (Array Int (Array Int angle)))))
    (! (= (tb2t88 (t2tb88 i)) i) :pattern ((t2tb88 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort
           (infix_mngt bitvec1 (infix_mngt int (infix_mngt int angle1)))
           j)
         (= (t2tb88 (tb2t88 j)) j)) :pattern ((t2tb88 (tb2t88 j))) )))

;; t2tb
(declare-fun t2tb89 ((Array bitvec (Array bitvec (Array Int (Array Int angle))))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array bitvec (Array bitvec (Array Int (Array Int angle))))))
    (sort
      (infix_mngt
        bitvec1
        (infix_mngt bitvec1 (infix_mngt int (infix_mngt int angle1))))
      (t2tb89 x))))

;; tb2t
(declare-fun tb2t89 (uni) (Array bitvec (Array bitvec (Array Int (Array Int angle)))))

;; BridgeL
(assert
  (forall ((i (Array bitvec (Array bitvec (Array Int (Array Int angle))))))
    (! (= (tb2t89 (t2tb89 i)) i) :pattern ((t2tb89 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort
           (infix_mngt
             bitvec1
             (infix_mngt bitvec1 (infix_mngt int (infix_mngt int angle1))))
           j)
         (= (t2tb89 (tb2t89 j)) j)) :pattern ((t2tb89 (tb2t89 j))) )))

;; ang_sum_break_zero_lg_params
(assert
  (forall ((f (Array bitvec (Array bitvec (Array Int (Array Int angle))))) (g (Array bitvec (Array bitvec (Array Int (Array Int angle))))) (i Int) (j Int) (s Int) (r Int))
    (=>
      (<= 0 s)
      (=>
        (<= 0 r)
        (=>
          (forall ((x bitvec) (z bitvec))
            (forall ((a Int) (k Int))
              (=>
                (= (length x) s)
                (=>
                  (= (length z) r)
                  (=>
                    (and (<= i a) (< a j))
                    (=>
                      (and (<= i k) (< k a))
                      (= (tb2t84
                           (infix_at
                             angle1
                             int
                             (infix_at
                               (infix_mngt int angle1)
                               int
                               (infix_at
                                 (infix_mngt int (infix_mngt int angle1))
                                 bitvec1
                                 (infix_at
                                   (infix_mngt
                                     bitvec1
                                     (infix_mngt int (infix_mngt int angle1)))
                                   bitvec1
                                   (t2tb89 g)
                                   (t2tb77 x))
                                 (t2tb77 z))
                               (t2tb8 a))
                             (t2tb8 k))) ang_zero)))))))
          (=>
            (forall ((x bitvec) (z bitvec))
              (forall ((a Int) (k Int))
                (=>
                  (= (length x) s)
                  (=>
                    (= (length z) r)
                    (=>
                      (and (<= i a) (< a j))
                      (=>
                        (and (<= a k) (< k j))
                        (= (tb2t84
                             (infix_at
                               angle1
                               int
                               (infix_at
                                 (infix_mngt int angle1)
                                 int
                                 (infix_at
                                   (infix_mngt int (infix_mngt int angle1))
                                   bitvec1
                                   (infix_at
                                     (infix_mngt
                                       bitvec1
                                       (infix_mngt
                                         int
                                         (infix_mngt int angle1)))
                                     bitvec1
                                     (t2tb89 f)
                                     (t2tb77 x))
                                   (t2tb77 z))
                                 (t2tb8 a))
                               (t2tb8 k))) (tb2t84
                                             (infix_at
                                               angle1
                                               int
                                               (infix_at
                                                 (infix_mngt int angle1)
                                                 int
                                                 (infix_at
                                                   (infix_mngt
                                                     int
                                                     (infix_mngt int angle1))
                                                   bitvec1
                                                   (infix_at
                                                     (infix_mngt
                                                       bitvec1
                                                       (infix_mngt
                                                         int
                                                         (infix_mngt
                                                           int
                                                           angle1)))
                                                     bitvec1
                                                     (t2tb89 g)
                                                     (t2tb77 x))
                                                   (t2tb77 z))
                                                 (t2tb8 a))
                                               (t2tb8 k))))))))))
            (forall ((x bitvec) (z bitvec))
              (forall ((a Int))
                (=>
                  (= (length x) s)
                  (=>
                    (= (length z) r)
                    (=>
                      (and (<= i a) (< a j))
                      (= (ang_sum
                           (tb2t86
                             (infix_at
                               (infix_mngt int angle1)
                               int
                               (infix_at
                                 (infix_mngt int (infix_mngt int angle1))
                                 bitvec1
                                 (infix_at
                                   (infix_mngt
                                     bitvec1
                                     (infix_mngt int (infix_mngt int angle1)))
                                   bitvec1
                                   (t2tb89 f)
                                   (t2tb77 x))
                                 (t2tb77 z))
                               (t2tb8 a)))
                           a
                           j) (ang_sum
                                (tb2t86
                                  (infix_at
                                    (infix_mngt int angle1)
                                    int
                                    (infix_at
                                      (infix_mngt
                                        int
                                        (infix_mngt int angle1))
                                      bitvec1
                                      (infix_at
                                        (infix_mngt
                                          bitvec1
                                          (infix_mngt
                                            int
                                            (infix_mngt int angle1)))
                                        bitvec1
                                        (t2tb89 g)
                                        (t2tb77 x))
                                      (t2tb77 z))
                                    (t2tb8 a)))
                                i
                                j)))))))))))))

;; ang_sum_break_zero_l_params
(assert
  (forall ((a ty))
    (forall ((f uni) (g uni) (i Int) (j Int) (l Int))
      (=>
        (and (<= i l) (<= l j))
        (forall ((x uni) (y uni))
          (=>
            (forall ((k Int))
              (=>
                (and (<= i k) (< k l))
                (= (tb2t84
                     (infix_at
                       angle1
                       int
                       (infix_at
                         (infix_mngt int angle1)
                         a
                         (infix_at
                           (infix_mngt a (infix_mngt int angle1))
                           a
                           f
                           x)
                         y)
                       (t2tb8 k))) ang_zero)))
            (=>
              (forall ((k Int))
                (=>
                  (and (<= i k) (< k j))
                  (= (tb2t84
                       (infix_at
                         angle1
                         int
                         (infix_at
                           (infix_mngt int angle1)
                           a
                           (infix_at
                             (infix_mngt a (infix_mngt int angle1))
                             a
                             f
                             x)
                           y)
                         (t2tb8 k))) (tb2t84
                                       (infix_at
                                         angle1
                                         int
                                         (infix_at
                                           (infix_mngt int angle1)
                                           a
                                           (infix_at
                                             (infix_mngt
                                               a
                                               (infix_mngt int angle1))
                                             a
                                             g
                                             x)
                                           y)
                                         (t2tb8 k))))))
              (= (ang_sum
                   (tb2t86
                     (infix_at
                       (infix_mngt int angle1)
                       a
                       (infix_at
                         (infix_mngt a (infix_mngt int angle1))
                         a
                         g
                         x)
                       y))
                   i
                   j) (ang_sum
                        (tb2t86
                          (infix_at
                            (infix_mngt int angle1)
                            a
                            (infix_at
                              (infix_mngt a (infix_mngt int angle1))
                              a
                              f
                              x)
                            y))
                        l
                        j)))))))))

;; ang_sum_break_param
(assert
  (forall ((f (Array Int (Array Int angle))) (i Int) (j Int))
    (=>
      (< i j)
      (forall ((y Int))
        (=>
          (and (<= i y) (< y j))
          (= (ang_sum
               (tb2t86
                 (infix_at (infix_mngt int angle1) int (t2tb87 f) (t2tb8 y)))
               i
               j) (ang_add
                    (ang_sum
                      (tb2t86
                        (infix_at
                          (infix_mngt int angle1)
                          int
                          (t2tb87 f)
                          (t2tb8 y)))
                      i
                      y)
                    (ang_sum
                      (tb2t86
                        (infix_at
                          (infix_mngt int angle1)
                          int
                          (t2tb87 f)
                          (t2tb8 y)))
                      y
                      j))))))))

;; ang_sum_neutral_param_r
(assert
  (forall ((f (Array Int (Array Int angle))) (i Int) (j Int))
    (=>
      (< i j)
      (forall ((y Int))
        (=>
          (and (<= i y) (< y j))
          (=>
            (forall ((k Int))
              (=>
                (and (<= y k) (< k j))
                (= (tb2t84
                     (infix_at
                       angle1
                       int
                       (infix_at
                         (infix_mngt int angle1)
                         int
                         (t2tb87 f)
                         (t2tb8 y))
                       (t2tb8 k))) ang_zero)))
            (= (ang_sum
                 (tb2t86
                   (infix_at
                     (infix_mngt int angle1)
                     int
                     (t2tb87 f)
                     (t2tb8 y)))
                 y
                 j) ang_zero)))))))

;; ang_sum_neutral_param_l
(assert
  (forall ((f (Array Int (Array Int angle))) (i Int) (j Int))
    (=>
      (< i j)
      (forall ((y Int))
        (=>
          (and (<= i y) (< y j))
          (=>
            (forall ((k Int))
              (=>
                (and (<= i k) (< k y))
                (= (tb2t84
                     (infix_at
                       angle1
                       int
                       (infix_at
                         (infix_mngt int angle1)
                         int
                         (t2tb87 f)
                         (t2tb8 y))
                       (t2tb8 k))) ang_zero)))
            (= (ang_sum
                 (tb2t86
                   (infix_at
                     (infix_mngt int angle1)
                     int
                     (t2tb87 f)
                     (t2tb8 y)))
                 i
                 y) ang_zero)))))))

;; fc
(declare-fun fc259 ((Array Int angle)
  Int) (Array Int angle))

;; fc'def
(assert
  (forall ((f (Array Int angle)) (k Int) (b Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc259 f k)) (t2tb8 b))) 
    (tb2t84
      (infix_at angle1 int (t2tb86 f) (t2tb8 (+ b k)))))))

;; ang_sum_transl
(assert
  (forall ((f (Array Int angle)) (i Int) (j Int) (k Int))
    (=> (< i j) (= (ang_sum f i j) (ang_sum (fc259 f k) (- i k) (- j k))))))

;; fc
(declare-fun fc260 ((Array Int angle)) (Array Int angle))

;; fc'def
(assert
  (forall ((f (Array Int angle)) (b Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc260 f)) (t2tb8 b))) (tb2t84
                                                                    (infix_at
                                                                    angle1
                                                                    int
                                                                    (t2tb86
                                                                    f)
                                                                    (t2tb8
                                                                    (- b 1)))))))

;; ang_sum_transl_one
(assert
  (forall ((f (Array Int angle)) (i Int) (j Int))
    (=> (< i j) (= (ang_sum f i j) (ang_sum (fc260 f) (+ i 1) (+ j 1))))))

;; fc
(declare-fun fc261 ((Array Int Int)
  Int) (Array Int angle))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (n Int) (k Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc261 f n)) (t2tb8 k))) 
    (infix_sldtsl
      (select f k)
      n))))

;; ang_sum_to_ind_isum
(assert
  (forall ((f (Array Int Int)) (n Int) (i Int) (j Int))
    (=>
      (<= 0 n)
      (=>
        (< i j)
        (= (ang_sum (fc261 f n) i j) (infix_sldtsl (ind_isum f i j) n))))))

;; fc
(declare-fun fc262 ((Array Int Int)
  Int) (Array Int angle))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (n Int) (k Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc262 f n)) (t2tb8 k))) 
    (infix_sldtsl
      (select f k)
      n))))

;; ind_isum_to_d_sum
(assert
  (forall ((f (Array Int Int)) (n Int) (i Int) (j Int))
    (=>
      (<= 0 n)
      (=>
        (< i j)
        (= (infix_sldtsl (ind_isum f i j) n) (ang_sum (fc262 f n) i j))))))

;; fc
(declare-fun fc263 ((Array Int Int)
  Int
  Int) (Array Int angle))

;; fc'def
(assert
  (forall ((bvx (Array Int Int)) (k Int) (n Int) (x Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc263 bvx k n)) (t2tb8 x))) 
    (infix_sldtsl
      (* (* (select bvx x) (power 2 (- (- n x) 1))) k)
      n))))

;; ang_sum_int_decomp
(assert
  (forall ((bvx (Array Int Int)) (k Int) (n Int))
    (=>
      (< 0 n)
      (=>
        (binary bvx)
        (= (ang_sum (fc263 bvx k n) 0 n) (infix_sldtsl
                                           (* (bin_to_int bvx n) k)
                                           n))))))

;; fc
(declare-fun fc264 ((Array Int Int)
  Int
  Int) (Array Int angle))

;; fc'def
(assert
  (forall ((bvx (Array Int Int)) (n Int) (k Int) (x Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc264 bvx n k)) (t2tb8 x))) 
    (infix_sldtsl
      (* (* (select bvx x) (power 2 (- (- n x) 1))) k)
      n))))

;; ang_sum_int_decomp_gen
(assert
  (forall ((bvx (Array Int Int)) (n Int))
    (=>
      (< 0 n)
      (=>
        (binary bvx)
        (forall ((k Int))
          (= (ang_sum (fc264 bvx n k) 0 n) (infix_sldtsl
                                             (* (bin_to_int bvx n) k)
                                             n)))))))

;; fc
(declare-fun fc265 (Int
  bitvec
  Int) (Array Int angle))

;; fc'def
(assert
  (forall ((n Int) (x bitvec) (k Int) (i Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc265 n x k)) (t2tb8 i))) 
    (infix_sldtsl
      (* (* (select (value x) i) (power 2 (- (- n i) 1))) k)
      n))))

;; ang_sum_bv_to_int
(assert
  (forall ((n Int))
    (=>
      (< 0 n)
      (forall ((x bitvec))
        (forall ((k Int))
          (=>
            (= (length x) n)
            (= (ang_sum (fc265 n x k) 0 n) (infix_sldtsl
                                             (* (bv_to_int x) k)
                                             n))))))))

;; fc
(declare-fun fc266 (Int
  bitvec
  Int) (Array Int angle))

;; fc'def
(assert
  (forall ((n Int) (x bitvec) (k Int) (i Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc266 n x k)) (t2tb8 i))) 
    (infix_sldtsl
      (* (* (select (value x) i) (power 2 (- (- n i) 1))) k)
      n))))

;; ang_sum_bv_to_int_
(assert
  (forall ((n Int))
    (=>
      (< 0 n)
      (forall ((x bitvec))
        (forall ((k Int))
          (=>
            (= (length x) n)
            (= (ang_sum (fc266 n x k) 0 n) (infix_sldtsl
                                             (* (bv_to_int x) k)
                                             n))))))))

;; fc
(declare-fun fc267 (Int
  bitvec
  bitvec
  Int) (Array Int angle))

;; fc
(declare-fun fc268 (Int
  bitvec
  bitvec) (Array Int angle))

;; fc'def
(assert
  (forall ((n Int) (x bitvec) (y bitvec) (target Int) (k Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc267 n x y target)) (t2tb8 k))) 
    (infix_sldtsl
      (* (* (select (value y) k) (select (value x) target)) (power
                                                              2
                                                              (+ (- (- n k) 1) (- (- n target) 1))))
      n))))

;; fc'def
(assert
  (forall ((n Int) (x bitvec) (y bitvec) (target Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc268 n x y)) (t2tb8 target))) 
    (ang_sum
      (fc267 n x y target)
      (- (- n target) 1)
      n))))

;; ang_sum_sum_bv_to_int_mult
(assert
  (forall ((n Int) (x bitvec) (y bitvec))
    (=>
      (< 0 n)
      (=>
        (= (length x) n)
        (=>
          (= (length y) n)
          (= (ang_sum (fc268 n x y) 0 n) (infix_sldtsl
                                           (* (bv_to_int x) (bv_to_int y))
                                           n)))))))

;; fc
(declare-fun fc269 (Int
  bitvec
  bitvec
  Int) (Array Int angle))

;; fc
(declare-fun fc270 (Int
  bitvec
  bitvec) (Array Int angle))

;; fc'def
(assert
  (forall ((n Int) (x bitvec) (y bitvec) (target Int) (k Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc269 n x y target)) (t2tb8 k))) 
    (infix_sldtsl
      (* (* (select (value y) k) (select (value x) target)) (power
                                                              2
                                                              (+ (- (- n k) 1) (- (- n target) 1))))
      n))))

;; fc'def
(assert
  (forall ((n Int) (x bitvec) (y bitvec) (target Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc270 n x y)) (t2tb8 target))) 
    (ang_sum
      (fc269 n x y target)
      (- (- n target) 1)
      n))))

;; ang_sum_sum_bv_to_int_mult_gen
(assert
  (forall ((n Int))
    (=>
      (< 0 n)
      (forall ((x bitvec) (y bitvec))
        (=>
          (= (length x) n)
          (=>
            (= (length y) n)
            (= (ang_sum (fc270 n x y) 0 n) (infix_sldtsl
                                             (* (bv_to_int x) (bv_to_int y))
                                             n))))))))

;; fc
(declare-fun fc271 ((Array Int Int)
  Int
  Int) (Array Int angle))

;; fc'def
(assert
  (forall ((bvx (Array Int Int)) (n Int) (k Int) (x Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc271 bvx n k)) (t2tb8 x))) 
    (infix_sldtsl
      (* (* (select bvx x) (power 2 (- (- n x) 1))) k)
      n))))

;; ang_sum_int_decomp_gen_rev
(assert
  (forall ((bvx (Array Int Int)) (n Int))
    (=>
      (< 0 n)
      (=>
        (binary bvx)
        (forall ((k Int))
          (= (infix_sldtsl (* (bin_to_int bvx n) k) n) (ang_sum
                                                         (fc271 bvx n k)
                                                         0
                                                         n)))))))

;; fc
(declare-fun fc272 (angle
  (Array Int Int)) (Array Int angle))

;; fc'def
(assert
  (forall ((o angle) (f (Array Int Int)) (i Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc272 o f)) (t2tb8 i))) 
    (ang_mult_int
      o
      (select f i)))))

;; sum_ang_mult_int_e
(assert
  (forall ((o angle) (f (Array Int Int)) (l Int) (h Int))
    (=>
      (< l h)
      (= (ang_sum (fc272 o f) l h) (ang_mult_int o (ind_isum f l h))))))

;; fc
(declare-fun fc273 ((Array Int complex)) (Array Int angle))

;; fc'def
(assert
  (forall ((phi (Array Int complex)) (i Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc273 phi)) (t2tb8 i))) 
    (real_to_ang
      (tb2t (infix_at complex1 int (t2tb51 phi) (t2tb8 i)))))))

;; real_to_ang_sum
(assert
  (forall ((phi (Array Int complex)) (l Int) (h Int))
    (=>
      (< l h)
      (=>
        (forall ((i Int))
          (=>
            (and (<= l i) (< i h))
            (real_ (tb2t (infix_at complex1 int (t2tb51 phi) (t2tb8 i))))))
        (= (ang_sum (fc273 phi) l h) (real_to_ang (ind_sum phi l h)))))))

;; fc
(declare-fun fc274 ((Array Int Int)
  complex) (Array Int angle))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (x complex) (i Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc274 f x)) (t2tb8 i))) 
    (real_to_ang
      (infix_asdt x (i_to_c (select f i)))))))

;; real_to_ang_sum_int
(assert
  (forall ((f (Array Int Int)) (l Int) (h Int) (x complex))
    (=>
      (< l h)
      (=>
        (real_ x)
        (= (ang_sum (fc274 f x) l h) (real_to_ang
                                       (infix_asdt
                                         x
                                         (i_to_c (ind_isum f l h)))))))))

;; fc
(declare-fun fc275 ((Array Int Int)
  complex) (Array Int angle))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (x complex) (i Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc275 f x)) (t2tb8 i))) 
    (real_to_ang
      (infix_asdt x (i_to_c (select f i)))))))

;; real_to_ang_sum_int_gen
(assert
  (forall ((f (Array Int Int)) (l Int) (h Int))
    (=>
      (< l h)
      (forall ((x complex))
        (=>
          (real_ x)
          (= (ang_sum (fc275 f x) l h) (real_to_ang
                                         (infix_asdt
                                           x
                                           (i_to_c (ind_isum f l h))))))))))

;; fc
(declare-fun fc276 (complex
  bitvec) (Array Int angle))

;; fc'def
(assert
  (forall ((x complex) (y bitvec) (i Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc276 x y)) (t2tb8 i))) 
    (real_to_ang
      (infix_asdt
        (infix_asdt x (i_to_c (power 2 i)))
        (i_to_c (select (value y) i)))))))

;; real_to_ang_bv_inversion
(assert
  (forall ((ft Int) (x complex) (y bitvec))
    (=>
      (< 0 ft)
      (=>
        (real_ x)
        (=>
          (= (length y) ft)
          (= (ang_sum (fc276 x y) 0 ft) (real_to_ang
                                          (infix_asdt
                                            x
                                            (i_to_c
                                              (bv_to_int (bv_inversion y)))))))))))

;; fc
(declare-fun fc277 ((Array Int angle)
  Int) (Array Int angle))

;; fc'def
(assert
  (forall ((f (Array Int angle)) (i Int) (x Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc277 f i)) (t2tb8 x))) 
    (ang_mult_int
      (tb2t84 (infix_at angle1 int (t2tb86 f) (t2tb8 x)))
      i))))

;; sum_ang_mult_int
(assert
  (forall ((f (Array Int angle)) (i Int) (l Int) (h Int))
    (=>
      (< l h)
      (= (ang_sum (fc277 f i) l h) (ang_mult_int (ang_sum f l h) i)))))

;; fc
(declare-fun fc278 (bitvec
  complex) (Array Int angle))

;; fc'def
(assert
  (forall ((x bitvec) (theta complex) (i Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc278 x theta)) (t2tb8 i))) 
    (real_to_ang
      (infix_asdt
        (infix_asdt theta (i_to_c (power 2 i)))
        (i_to_c (select (value x) i)))))))

;; ang_sum_bv_to_int_inversion_pre
(assert
  (forall ((n Int) (x bitvec))
    (=>
      (< 0 n)
      (=>
        (= (length x) n)
        (forall ((theta complex))
          (=>
            (real_ theta)
            (= (real_to_ang
                 (infix_asdt theta (i_to_c (bv_to_int (bv_inversion x))))) 
            (ang_sum
              (fc278 x theta)
              0
              n))))))))

;; fc
(declare-fun fc279 (bitvec
  complex) (Array Int angle))

;; fc'def
(assert
  (forall ((x bitvec) (theta complex) (i Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc279 x theta)) (t2tb8 i))) 
    (real_to_ang
      (infix_asdt
        (infix_asdt theta (i_to_c (power 2 i)))
        (i_to_c (select (value x) i)))))))

;; ang_sum_bv_to_int_inversion
(assert
  (forall ((n Int))
    (=>
      (< 0 n)
      (forall ((x bitvec))
        (forall ((theta complex))
          (=>
            (= (length x) n)
            (=>
              (real_ theta)
              (= (real_to_ang
                   (infix_asdt theta (i_to_c (bv_to_int (bv_inversion x))))) 
              (ang_sum
                (fc279 x theta)
                0
                n)))))))))

;; fc
(declare-fun fc280 (Int
  bitvec
  complex) (Array Int angle))

;; fc'def
(assert
  (forall ((n Int) (x bitvec) (theta complex) (i Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc280 n x theta)) (t2tb8 i))) 
    (real_to_ang
      (infix_asdt
        (infix_asdt theta (i_to_c (power 2 (- (- n i) 1))))
        (i_to_c (- (select (value x) i))))))))

;; ang_sum_bv_to_int_opp_pre
(assert
  (forall ((n Int) (x bitvec))
    (=>
      (< 0 n)
      (=>
        (= (length x) n)
        (forall ((theta complex))
          (=>
            (real_ theta)
            (= (real_to_ang (infix_asdt theta (i_to_c (- (bv_to_int x))))) 
            (ang_sum
              (fc280 n x theta)
              0
              n))))))))

;; fc
(declare-fun fc281 (Int
  bitvec
  complex) (Array Int angle))

;; fc'def
(assert
  (forall ((n Int) (x bitvec) (theta complex) (i Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc281 n x theta)) (t2tb8 i))) 
    (real_to_ang
      (infix_asdt
        (infix_asdt theta (i_to_c (power 2 (- (- n i) 1))))
        (i_to_c (- (select (value x) i))))))))

;; ang_sum_bv_to_int_opp
(assert
  (forall ((n Int))
    (=>
      (< 0 n)
      (forall ((x bitvec))
        (forall ((theta complex))
          (=>
            (= (length x) n)
            (=>
              (real_ theta)
              (= (real_to_ang (infix_asdt theta (i_to_c (- (bv_to_int x))))) 
              (ang_sum
                (fc281 n x theta)
                0
                n)))))))))

;; fc
(declare-fun fc282 (Int
  bitvec
  complex) (Array Int angle))

;; fc'def
(assert
  (forall ((n Int) (x bitvec) (theta complex) (i Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc282 n x theta)) (t2tb8 i))) 
    (real_to_ang
      (infix_asdt
        (infix_asdt theta (i_to_c (power 2 (- (- n i) 1))))
        (i_to_c (select (value x) i)))))))

;; ang_sum_bv_to_int_mult_pre
(assert
  (forall ((n Int) (x bitvec))
    (=>
      (< 0 n)
      (=>
        (= (length x) n)
        (forall ((theta complex))
          (=>
            (real_ theta)
            (= (real_to_ang (infix_asdt theta (i_to_c (bv_to_int x)))) 
            (ang_sum
              (fc282 n x theta)
              0
              n))))))))

;; fc
(declare-fun fc283 (Int
  bitvec
  complex) (Array Int angle))

;; fc'def
(assert
  (forall ((n Int) (x bitvec) (theta complex) (i Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc283 n x theta)) (t2tb8 i))) 
    (real_to_ang
      (infix_asdt
        (infix_asdt theta (i_to_c (power 2 (- (- n i) 1))))
        (i_to_c (select (value x) i)))))))

;; ang_sum_bv_to_int_mult
(assert
  (forall ((n Int))
    (=>
      (< 0 n)
      (forall ((x bitvec))
        (forall ((theta complex))
          (=>
            (= (length x) n)
            (=>
              (real_ theta)
              (= (real_to_ang (infix_asdt theta (i_to_c (bv_to_int x)))) 
              (ang_sum
                (fc283 n x theta)
                0
                n)))))))))

;; fc
(declare-fun fc284 (Int
  bitvec
  bitvec
  Int) (Array Int angle))

;; fc
(declare-fun fc285 (Int
  bitvec
  bitvec) (Array Int angle))

;; fc'def
(assert
  (forall ((n Int) (x bitvec) (y bitvec) (j Int) (i Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc284 n x y j)) (t2tb8 i))) 
    (infix_sldtsl
      (* (* (- (select (value x) i)) (select (value y) j)) (power
                                                             2
                                                             (+ (- (- n i) 1) j)))
      n))))

;; fc'def
(assert
  (forall ((n Int) (x bitvec) (y bitvec) (j Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc285 n x y)) (t2tb8 j))) 
    (ang_sum
      (fc284 n x y j)
      j
      n))))

;; rewrite_ang_sum_sum_to_bv_and_inversion
(assert
  (forall ((n Int) (x bitvec) (y bitvec))
    (=>
      (< 0 n)
      (=>
        (= (length x) n)
        (=>
          (= (length y) n)
          (= (ang_sum (fc285 n x y) 0 n) (real_to_ang
                                           (infix_sldt
                                             (infix_asdt
                                               (i_to_c (- (bv_to_int x)))
                                               (i_to_c
                                                 (bv_to_int (bv_inversion y))))
                                             (i_to_c (power 2 n))))))))))

;; fc
(declare-fun fc286 (Int
  bitvec
  bitvec
  Int) (Array Int angle))

;; fc
(declare-fun fc287 (Int
  bitvec
  bitvec) (Array Int angle))

;; fc'def
(assert
  (forall ((n Int) (x bitvec) (y bitvec) (j Int) (i Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc286 n x y j)) (t2tb8 i))) 
    (infix_sldtsl
      (* (* (- (select (value x) i)) (select (value y) j)) (power
                                                             2
                                                             (+ (- (- n i) 1) j)))
      n))))

;; fc'def
(assert
  (forall ((n Int) (x bitvec) (y bitvec) (j Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc287 n x y)) (t2tb8 j))) 
    (ang_sum
      (fc286 n x y j)
      j
      n))))

;; rewrite_ang_sum_sum_to_bv_and_inversion_gen
(assert
  (forall ((n Int))
    (=>
      (< 0 n)
      (forall ((x bitvec) (y bitvec))
        (=>
          (= (length x) n)
          (=>
            (= (length y) n)
            (= (ang_sum (fc287 n x y) 0 n) (real_to_ang
                                             (infix_asdt
                                               (infix_asdt
                                                 (i_to_c (- (bv_to_int x)))
                                                 (i_to_c
                                                   (bv_to_int
                                                     (bv_inversion y))))
                                               (pow_inv_2 n))))))))))

;; fc
(declare-fun fc288 (Int
  bitvec
  bitvec
  Int) (Array Int Int))

;; fc
(declare-fun fc289 (Int
  bitvec
  bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((n Int) (x bitvec) (y bitvec) (j Int) (i Int))
    (= (select (fc288 n x y j) i) (* (* (select (value x) i) (select 
    (value
      y) j)) (power 2 (+ (- (- n i) 1) j))))))

;; fc'def
(assert
  (forall ((n Int) (x bitvec) (y bitvec) (j Int))
    (= (select (fc289 n x y) j) (ind_isum (fc288 n x y j) j n))))

;; int_to_ang_by_sum_mult_break
(assert
  (forall ((n Int) (x bitvec) (y bitvec))
    (=>
      (< 0 n)
      (=>
        (= (length x) n)
        (=>
          (= (length y) n)
          (= (infix_sldtsl (ind_isum (fc289 n x y) 0 n) n) (infix_sldtsl
                                                             (* (bv_to_int x) 
                                                             (bv_to_int
                                                               (bv_inversion
                                                                 y)))
                                                             n)))))))

;; fc
(declare-fun fc290 (Int
  bitvec
  bitvec
  Int) (Array Int Int))

;; fc
(declare-fun fc291 (Int
  bitvec
  bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((n Int) (x bitvec) (y bitvec) (j Int) (i Int))
    (= (select (fc290 n x y j) i) (* (* (select (value x) i) (select 
    (value
      y) j)) (power 2 (+ (- (- n i) 1) j))))))

;; fc'def
(assert
  (forall ((n Int) (x bitvec) (y bitvec) (j Int))
    (= (select (fc291 n x y) j) (ind_isum (fc290 n x y j) j n))))

;; int_to_ang_by_sum_mult_break_gen
(assert
  (forall ((n Int))
    (=>
      (< 0 n)
      (forall ((x bitvec) (y bitvec))
        (=>
          (= (length x) n)
          (=>
            (= (length y) n)
            (= (infix_sldtsl (ind_isum (fc291 n x y) 0 n) n) (infix_sldtsl
                                                               (* (bv_to_int
                                                                    x) 
                                                               (bv_to_int
                                                                 (bv_inversion
                                                                   y)))
                                                               n))))))))

;; fc
(declare-fun fc292 (Int
  bitvec
  bitvec
  Int) (Array Int Int))

;; fc
(declare-fun fc293 (Int
  bitvec
  bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((n Int) (x bitvec) (y bitvec) (j Int) (i Int))
    (= (select (fc292 n x y j) i) (* (* (select (value x) i) (select 
    (value
      y) j)) (power 2 (+ (- (- n i) 1) j))))))

;; fc'def
(assert
  (forall ((n Int) (x bitvec) (y bitvec) (j Int))
    (= (select (fc293 n x y) j) (- (ind_isum (fc292 n x y j) j n)))))

;; int_to_ang_by_sum_mult_break_neg
(assert
  (forall ((n Int))
    (=>
      (< 0 n)
      (forall ((x bitvec) (y bitvec))
        (=>
          (= (length x) n)
          (=>
            (= (length y) n)
            (= (infix_sldtsl (ind_isum (fc293 n x y) 0 n) n) (infix_sldtsl
                                                               (* (- 
                                                               (bv_to_int
                                                                 x)) 
                                                               (bv_to_int
                                                                 (bv_inversion
                                                                   y)))
                                                               n))))))))

;; is_a_ket
(declare-fun is_a_ket ((matrix complex)) Bool)

;; Is_a_ket
(assert
  (forall ((m (matrix complex)))
    (=
      (is_a_ket m)
      (and
        (= (columns complex1 (t2tb65 m)) 1)
        (exists ((s Int))
          (and (<= 0 s) (= (rows complex1 (t2tb65 m)) (power 2 s))))))))

;; xor_i
(declare-fun xor_i (Int
  Int) Int)

;; xor_i'def
(assert
  (forall ((i Int) (iqt Int))
    (=>
      (and (<= 0 i) (< i 2))
      (=>
        (and (<= 0 iqt) (< iqt 2))
        (ite (= i 0) (= (xor_i i iqt) iqt) (= (xor_i i iqt) (- 1 iqt)))))))

;; xor_i'spec
(assert
  (forall ((i Int) (iqt Int))
    (=>
      (and (<= 0 i) (< i 2))
      (=>
        (and (<= 0 iqt) (< iqt 2))
        (and
          (=> (= i 0) (=> (= iqt 0) (= (xor_i i iqt) 0)))
          (and
            (=> (= i 0) (=> (= iqt 1) (= (xor_i i iqt) 1)))
            (and
              (=> (= i 1) (=> (= iqt 0) (= (xor_i i iqt) 1)))
              (=> (= i 1) (=> (= iqt 1) (= (xor_i i iqt) 0))))))))))

;; is_a_ket_l
(declare-fun is_a_ket_l ((matrix complex)
  Int) Bool)

;; is_a_ket_l'def
(assert
  (forall ((m (matrix complex)) (l Int))
    (=
      (is_a_ket_l m l)
      (and
        (<= 0 l)
        (and
          (= (columns complex1 (t2tb65 m)) 1)
          (= (rows complex1 (t2tb65 m)) (power 2 l)))))))

;; ket_l_rows
(assert
  (forall ((m (matrix complex)) (l Int))
    (=> (is_a_ket_l m l) (= (rows complex1 (t2tb65 m)) (power 2 l)))))

;; ket_l_columns
(assert
  (forall ((m (matrix complex)))
    (=>
      (exists ((l Int)) (is_a_ket_l m l))
      (= (columns complex1 (t2tb65 m)) 1))))

;; ket_length
(declare-fun ket_length ((matrix complex)) Int)

;; ket_length'def
(assert
  (forall ((m (matrix complex)))
    (=>
      (is_a_ket m)
      (= (ket_length m) (- (binary_length (rows complex1 (t2tb65 m))) 1)))))

;; ket_length'spec
(assert
  (forall ((m (matrix complex)))
    (=>
      (is_a_ket m)
      (and
        (<= 0 (ket_length m))
        (= (rows complex1 (t2tb65 m)) (power 2 (ket_length m)))))))

;; get_ket_rev
(assert true)

;; get_ket_bv
(declare-fun get_ket_bv ((matrix complex)
  bitvec) complex)

;; get_ket_bv'def
(assert
  (forall ((x (matrix complex)) (bv1 bitvec))
    (=>
      (is_a_ket_l x (length bv1))
      (= (get_ket_bv x bv1) (tb2t
                              (get complex1 (t2tb65 x) (bv_to_int bv1) 0))))))

;; get_ket_add
(assert
  (forall ((x (matrix complex)) (y (matrix complex)) (i Int))
    (=>
      (is_a_ket x)
      (=>
        (is_a_ket y)
        (=>
          (= (ket_length x) (ket_length y))
          (=>
            (and (<= 0 i) (< i (power 2 (ket_length y))))
            (= (tb2t (get complex1 (t2tb65 (add_mat x y)) i 0)) (infix_pldt
                                                                  (tb2t
                                                                    (get
                                                                    complex1
                                                                    (t2tb65
                                                                    x)
                                                                    i
                                                                    0))
                                                                  (tb2t
                                                                    (get
                                                                    complex1
                                                                    (t2tb65
                                                                    y)
                                                                    i
                                                                    0))))))))))

;; get_ket_substr
(assert
  (forall ((x (matrix complex)) (y (matrix complex)) (i Int))
    (=>
      (is_a_ket x)
      (=>
        (is_a_ket y)
        (=>
          (= (ket_length x) (ket_length y))
          (=>
            (and (<= 0 i) (< i (power 2 (ket_length y))))
            (= (tb2t (get complex1 (t2tb65 (mat_substr x y)) i 0)) (infix_mndt
                                                                    (tb2t
                                                                    (get
                                                                    complex1
                                                                    (t2tb65
                                                                    x)
                                                                    i
                                                                    0))
                                                                    (tb2t
                                                                    (get
                                                                    complex1
                                                                    (t2tb65
                                                                    y)
                                                                    i
                                                                    0))))))))))

;; mat_mult_ket_l
(assert
  (forall ((m (matrix complex)) (k (matrix complex)) (n Int))
    (=>
      (is_a_ket_l k n)
      (=>
        (= (rows complex1 (t2tb65 m)) (power 2 n))
        (=>
          (= (columns complex1 (t2tb65 m)) (power 2 n))
          (is_a_ket_l (mat_mult m k) n))))))

;; ket_kronecker_values
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int))
    (=>
      (is_a_ket m)
      (=>
        (is_a_ket n)
        (=>
          (and
            (<= 0 i)
            (< i (* (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))))
          (= (tb2t (get complex1 (t2tb65 (kronecker m n)) i 0)) (infix_asdt
                                                                  (tb2t
                                                                    (get
                                                                    complex1
                                                                    (t2tb65
                                                                    m)
                                                                    (div i 
                                                                    (rows
                                                                    complex1
                                                                    (t2tb65
                                                                    n)))
                                                                    0))
                                                                  (tb2t
                                                                    (get
                                                                    complex1
                                                                    (t2tb65
                                                                    n)
                                                                    (mod i 
                                                                    (rows
                                                                    complex1
                                                                    (t2tb65
                                                                    n)))
                                                                    0)))))))))

;; ket_l_to_ket
(assert
  (forall ((m (matrix complex)) (l Int))
    (=> (is_a_ket_l m l) (and (is_a_ket m) (= (ket_length m) l)))))

;; ket_l_to_ket_gen
(assert
  (forall ((m (matrix complex)))
    (=> (exists ((l Int)) (is_a_ket_l m l)) (is_a_ket m))))

;; ket_to_ket_l
(assert
  (forall ((m (matrix complex)))
    (=> (is_a_ket m) (is_a_ket_l m (ket_length m)))))

;; set_ket_valid_index
(assert
  (forall ((m (matrix complex)) (i Int))
    (=>
      (is_a_ket m)
      (=>
        (and (<= 0 i) (< i (power 2 (ket_length m))))
        (valid_index complex1 (t2tb65 m) i 0)))))

;; ket_to_ket_l_l
(assert
  (forall ((m (matrix complex)) (i Int))
    (=> (is_a_ket m) (=> (= (ket_length m) i) (is_a_ket_l m i)))))

;; set_constant_size_ket
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni))
      (=>
        (forall ((e uni))
          (=>
            (sort a e)
            (=>
              (mem a e s)
              (is_a_ket (tb2t65 (infix_at (matrix1 complex1) a f e))))))
        (=>
          (forall ((e uni) (eqt uni))
            (=>
              (sort a e)
              (=>
                (sort a eqt)
                (=>
                  (mem a e s)
                  (=>
                    (mem a eqt s)
                    (= (ket_length
                         (tb2t65 (infix_at (matrix1 complex1) a f e))) 
                    (ket_length
                      (tb2t65 (infix_at (matrix1 complex1) a f eqt)))))))))
          (constant_size a s f))))))

;; ket_norm_l
(declare-fun ket_norm_l ((matrix complex)
  Int) complex)

;; result
(declare-fun result24 ((matrix complex)) (Array Int complex))

;; result'def
(assert
  (forall ((x (matrix complex)) (k Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (result24 x)) (t2tb8 k))) 
    (infix_asdt
      (modulus (tb2t (get complex1 (t2tb65 x) k 0)))
      (modulus (tb2t (get complex1 (t2tb65 x) k 0)))))))

;; ket_norm_l'def
(assert
  (forall ((x (matrix complex)) (n Int))
    (=>
      (is_a_ket_l x n)
      (= (ket_norm_l x n) (square_rt
                            (sum
                              int
                              (t2tb16 (to_fset 0 (power 2 n)))
                              (t2tb51 (result24 x))))))))

;; fc
(declare-fun fc294 ((matrix complex)) (Array Int complex))

;; fc'def
(assert
  (forall ((x (matrix complex)) (k Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc294 x)) (t2tb8 k))) (infix_asdt
                                                                    (modulus
                                                                    (tb2t
                                                                    (get
                                                                    complex1
                                                                    (t2tb65
                                                                    x)
                                                                    k
                                                                    0)))
                                                                    (modulus
                                                                    (tb2t
                                                                    (get
                                                                    complex1
                                                                    (t2tb65
                                                                    x)
                                                                    k
                                                                    0)))))))

;; ind_sum_ket_norm_l
(assert
  (forall ((x (matrix complex)) (n Int))
    (=>
      (is_a_ket_l x n)
      (= (ket_norm_l x n) (square_rt (ind_sum (fc294 x) 0 (power 2 n)))))))

;; ket_norm_one
(assert
  (forall ((x (matrix complex)) (n Int))
    (=>
      (= n 1)
      (=>
        (is_a_ket_l x n)
        (= (ket_norm_l x n) (square_rt
                              (infix_pldt
                                (infix_asdt
                                  (modulus
                                    (tb2t (get complex1 (t2tb65 x) 0 0)))
                                  (modulus
                                    (tb2t (get complex1 (t2tb65 x) 0 0))))
                                (infix_asdt
                                  (modulus
                                    (tb2t (get complex1 (t2tb65 x) 1 0)))
                                  (modulus
                                    (tb2t (get complex1 (t2tb65 x) 1 0)))))))))))

;; ket_norm_one_c_one
(assert
  (forall ((x (matrix complex)) (n Int))
    (=>
      (= n 1)
      (=>
        (is_a_ket_l x n)
        (=>
          (= (infix_pldt
               (infix_asdt
                 (modulus (tb2t (get complex1 (t2tb65 x) 0 0)))
                 (modulus (tb2t (get complex1 (t2tb65 x) 0 0))))
               (infix_asdt
                 (modulus (tb2t (get complex1 (t2tb65 x) 1 0)))
                 (modulus (tb2t (get complex1 (t2tb65 x) 1 0))))) c_one)
          (= (ket_norm_l x n) c_one))))))

;; scalar_ket_norm_l
(assert
  (forall ((x (matrix complex)) (a complex) (n Int))
    (=>
      (infix_lseqdt c_zero a)
      (=>
        (is_a_ket_l x n)
        (= (ket_norm_l (infix_asdtdt a x) n) (infix_asdt a (ket_norm_l x n)))))))

;; zero_ket_norm_l
(assert
  (forall ((x (matrix complex)) (n Int))
    (=>
      (is_a_ket_l x n)
      (=>
        (= (ket_norm_l x n) c_zero)
        (forall ((i Int) (j Int))
          (=>
            (and (<= 0 i) (< i (power 2 n)))
            (=> (= j 0) (= (tb2t (get complex1 (t2tb65 x) i j)) c_zero))))))))

;; normalized_l
(declare-fun normalized_l ((matrix complex)
  Int) (matrix complex))

;; normalized_l'def
(assert
  (forall ((x (matrix complex)) (n Int))
    (=>
      (is_a_ket_l x n)
      (=>
        (exists ((i Int))
          (and
            (and (<= 0 i) (< i (power 2 n)))
            (not (= (tb2t (get complex1 (t2tb65 x) i 0)) c_zero))))
        (= (normalized_l x n) (infix_asdtdt
                                (infix_sldt c_one (ket_norm_l x n))
                                x))))))

;; normalized_l'spec
(assert
  (forall ((x (matrix complex)) (n Int))
    (=>
      (is_a_ket_l x n)
      (=>
        (exists ((i Int))
          (and
            (and (<= 0 i) (< i (power 2 n)))
            (not (= (tb2t (get complex1 (t2tb65 x) i 0)) c_zero))))
        (is_a_ket_l (normalized_l x n) n)))))

;; make_ket
(declare-fun make_ket (Int
  (Array Int complex)) (matrix complex))

;; result
(declare-fun result25 ((Array Int complex)) (Array Int (Array Int complex)))

;; result'def
(assert
  (forall ((f (Array Int complex)) (x Int) (us Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             int
             (t2tb61 (result25 f))
             (t2tb8 x))
           (t2tb8 us))) (tb2t (infix_at complex1 int (t2tb51 f) (t2tb8 x))))))

;; make_ket'def
(assert
  (forall ((n Int) (f (Array Int complex)))
    (=>
      (<= 0 n)
      (= (make_ket n f) (tb2t65
                          (make_f
                            complex1
                            (power 2 n)
                            1
                            (t2tb61 (result25 f))))))))

;; make_ket'spec
(assert
  (forall ((n Int) (f (Array Int complex)))
    (=>
      (<= 0 n)
      (and
        (is_a_ket_l (make_ket n f) n)
        (and
          (forall ((i Int))
            (=>
              (and (<= 0 i) (< i (power 2 n)))
              (= (tb2t (get complex1 (t2tb65 (make_ket n f)) i 0)) (tb2t
                                                                    (infix_at
                                                                    complex1
                                                                    int
                                                                    (t2tb51
                                                                    f)
                                                                    (t2tb8 i))))))
          (forall ((i Int) (j Int))
            (=>
              (valid_index complex1 (t2tb65 (make_ket n f)) i j)
              (= (tb2t (get complex1 (t2tb65 (make_ket n f)) i j)) (tb2t
                                                                    (infix_at
                                                                    complex1
                                                                    int
                                                                    (t2tb51
                                                                    f)
                                                                    (t2tb8 i)))))))))))

;; assert_make_ket
(assert
  (forall ((r Int) (c Int) (f (Array Int complex)) (i Int))
    (=>
      (= c 1)
      (=>
        (and (<= 0 i) (< i (power 2 r)))
        (= (tb2t (get complex1 (t2tb65 (make_ket r f)) i 0)) (tb2t
                                                               (infix_at
                                                                 complex1
                                                                 int
                                                                 (t2tb51 f)
                                                                 (t2tb8 i))))))))

;; assert_make_ket_l
(assert
  (forall ((l Int) (f (Array Int complex)) (i Int))
    (=>
      (<= 0 l)
      (= (tb2t (get complex1 (t2tb65 (make_ket l f)) i 0)) (tb2t
                                                             (infix_at
                                                               complex1
                                                               int
                                                               (t2tb51 f)
                                                               (t2tb8 i)))))))

;; make_ket_length
(assert
  (forall ((l Int) (f (Array Int complex)))
    (=> (<= 0 l) (= (ket_length (make_ket l f)) l))))

;; make_ket_rows
(assert
  (forall ((l Int) (f (Array Int complex)))
    (=> (<= 0 l) (= (rows complex1 (t2tb65 (make_ket l f))) (power 2 l)))))

;; make_ket_columns
(assert
  (forall ((l Int) (f (Array Int complex)))
    (=> (<= 0 l) (= (columns complex1 (t2tb65 (make_ket l f))) 1))))

;; make_ket_constant
(declare-fun make_ket_constant (Int
  complex) (matrix complex))

;; result
(declare-fun result26 (complex) (Array Int complex))

;; result'def
(assert
  (forall ((c complex) (us Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (result26 c)) (t2tb8 us))) c)))

;; make_ket_constant'def
(assert
  (forall ((n Int) (c complex))
    (=> (<= 0 n) (= (make_ket_constant n c) (make_ket n (result26 c))))))

;; make_ket_constant'spec
(assert
  (forall ((n Int) (c complex))
    (=>
      (<= 0 n)
      (and
        (is_a_ket_l (make_ket_constant n c) n)
        (and
          (forall ((i Int))
            (=>
              (and (<= 0 i) (< i (power 2 n)))
              (= (tb2t (get complex1 (t2tb65 (make_ket_constant n c)) i 0)) c)))
          (forall ((i Int) (j Int))
            (=>
              (valid_index complex1 (t2tb65 (make_ket_constant n c)) i j)
              (= (tb2t (get complex1 (t2tb65 (make_ket_constant n c)) i j)) c))))))))

;; set_equal_ket
(assert
  (forall ((m (matrix complex)) (n (matrix complex)))
    (=>
      (is_a_ket m)
      (=>
        (is_a_ket n)
        (=>
          (= (ket_length m) (ket_length n))
          (=>
            (forall ((i Int))
              (=>
                (and (<= 0 i) (< i (power 2 (ket_length m))))
                (= (tb2t (get complex1 (t2tb65 m) i 0)) (tb2t
                                                          (get
                                                            complex1
                                                            (t2tb65 n)
                                                            i
                                                            0)))))
            (= m n)))))))

;; set_equal_ket_
(assert
  (forall ((m (matrix complex)) (n (matrix complex)))
    (=>
      (exists ((l Int))
        (and
          (is_a_ket_l m l)
          (and
            (is_a_ket_l n l)
            (forall ((i Int))
              (=>
                (and (<= 0 i) (< i (power 2 l)))
                (= (tb2t (get complex1 (t2tb65 m) i 0)) (tb2t
                                                          (get
                                                            complex1
                                                            (t2tb65 n)
                                                            i
                                                            0))))))))
      (= m n))))

;; add_ket
(declare-fun add_ket ((matrix complex)
  (matrix complex)) (matrix complex))

;; add_ket'def
(assert
  (forall ((m (matrix complex)) (n (matrix complex)))
    (=>
      (is_a_ket m)
      (=>
        (is_a_ket n)
        (=>
          (= (ket_length m) (ket_length n))
          (= (add_ket m n) (add_mat m n)))))))

;; add_ket'spec
(assert
  (forall ((m (matrix complex)) (n (matrix complex)))
    (=>
      (is_a_ket m)
      (=>
        (is_a_ket n)
        (=>
          (= (ket_length m) (ket_length n))
          (and
            (is_a_ket (add_ket m n))
            (and
              (= (ket_length (add_ket m n)) (ket_length m))
              (forall ((i Int))
                (=>
                  (valid_index complex1 (t2tb65 (add_ket m n)) i 0)
                  (= (tb2t (get complex1 (t2tb65 (add_ket m n)) i 0)) 
                  (infix_pldt
                    (tb2t (get complex1 (t2tb65 m) i 0))
                    (tb2t (get complex1 (t2tb65 n) i 0)))))))))))))

;; add_ket_l
(declare-fun add_ket_l ((matrix complex)
  (matrix complex)
  Int) (matrix complex))

;; result
(declare-fun result27 ((matrix complex)
  (matrix complex)) (Array Int complex))

;; result'def
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (result27 m n)) (t2tb8 i))) 
    (infix_pldt
      (tb2t (get complex1 (t2tb65 m) i 0))
      (tb2t (get complex1 (t2tb65 n) i 0))))))

;; add_ket_l'def
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (l Int))
    (=> (<= 0 l) (= (add_ket_l m n l) (make_ket l (result27 m n))))))

;; add_ket_l'spec
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (l Int))
    (=>
      (<= 0 l)
      (and
        (is_a_ket_l (add_ket_l m n l) l)
        (and
          (= (ket_length (add_ket_l m n l)) l)
          (and
            (forall ((i Int))
              (= (tb2t (get complex1 (t2tb65 (add_ket_l m n l)) i 0)) 
              (infix_pldt
                (tb2t (get complex1 (t2tb65 m) i 0))
                (tb2t (get complex1 (t2tb65 n) i 0)))))
            (=>
              (is_a_ket_l m l)
              (=> (is_a_ket_l n l) (= (add_ket_l m n l) (add_mat m n))))))))))

;; add_ket_l_to_add_mat
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (l Int))
    (=>
      (<= 0 l)
      (=>
        (is_a_ket_l m l)
        (=> (is_a_ket_l n l) (= (add_ket_l m n l) (add_mat m n)))))))

;; null_add_ket_l
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (l Int))
    (=>
      (is_a_ket_l m l)
      (=> (is_a_ket_l n l) (=> (null_mat m) (= (add_ket_l m n l) n))))))

;; add_ket_l_null
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (l Int))
    (=>
      (is_a_ket_l m l)
      (=> (is_a_ket_l n l) (=> (null_mat n) (= (add_ket_l m n l) m))))))

;; add_ket_l_eq
(declare-fun add_ket_l_eq ((matrix complex)
  (matrix complex)
  (matrix complex)
  (matrix complex)
  Int) tuple0)

;; add_ket_l_eq'def
(assert
  (forall ((m (matrix complex)) (mqt (matrix complex)) (n (matrix complex)) (nqt (matrix complex)) (l Int))
    (=>
      (is_a_ket_l m l)
      (=>
        (is_a_ket_l n l)
        (=> (= m mqt) (=> (= n nqt) (= (add_ket_l_eq m mqt n nqt l) Tuple0)))))))

;; add_ket_l_closure
(declare-fun add_ket_l_closure () (Array (matrix complex) (Array (matrix complex) (Array Int (matrix complex)))))

;; t2tb
(declare-fun t2tb90 ((Array (matrix complex) (Array (matrix complex) (Array Int (matrix complex))))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (matrix complex) (Array (matrix complex) (Array Int (matrix complex))))))
    (sort
      (infix_mngt
        (matrix1 complex1)
        (infix_mngt (matrix1 complex1) (infix_mngt int (matrix1 complex1))))
      (t2tb90 x))))

;; tb2t
(declare-fun tb2t90 (uni) (Array (matrix complex) (Array (matrix complex) (Array Int (matrix complex)))))

;; BridgeL
(assert
  (forall ((i (Array (matrix complex) (Array (matrix complex) (Array Int (matrix complex))))))
    (! (= (tb2t90 (t2tb90 i)) i) :pattern ((t2tb90 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort
           (infix_mngt
             (matrix1 complex1)
             (infix_mngt
               (matrix1 complex1)
               (infix_mngt int (matrix1 complex1))))
           j)
         (= (t2tb90 (tb2t90 j)) j)) :pattern ((t2tb90 (tb2t90 j))) )))

;; add_ket_l_closure_def
(assert
  (forall ((y (matrix complex)) (y1 (matrix complex)) (y2 Int))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           int
           (infix_at
             (infix_mngt int (matrix1 complex1))
             (matrix1 complex1)
             (infix_at
               (infix_mngt
                 (matrix1 complex1)
                 (infix_mngt int (matrix1 complex1)))
               (matrix1 complex1)
               (t2tb90 add_ket_l_closure)
               (t2tb65 y))
             (t2tb65 y1))
           (t2tb8 y2))) (add_ket_l y y1 y2))))

;; add_ket_l_eq'spec
(assert
  (forall ((m (matrix complex)) (mqt (matrix complex)) (n (matrix complex)) (nqt (matrix complex)) (l Int))
    (=>
      (is_a_ket_l m l)
      (=>
        (is_a_ket_l n l)
        (=>
          (= m mqt)
          (=>
            (= n nqt)
            (= (tb2t68
                 (infix_at
                   (infix_mngt int (matrix1 complex1))
                   (matrix1 complex1)
                   (infix_at
                     (infix_mngt
                       (matrix1 complex1)
                       (infix_mngt int (matrix1 complex1)))
                     (matrix1 complex1)
                     (t2tb90 add_ket_l_closure)
                     (t2tb65 m))
                   (t2tb65 n))) (tb2t68
                                  (infix_at
                                    (infix_mngt int (matrix1 complex1))
                                    (matrix1 complex1)
                                    (infix_at
                                      (infix_mngt
                                        (matrix1 complex1)
                                        (infix_mngt int (matrix1 complex1)))
                                      (matrix1 complex1)
                                      (t2tb90 add_ket_l_closure)
                                      (t2tb65 mqt))
                                    (t2tb65 nqt))))))))))

;; add_ket_l_value
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (l Int) (i Int))
    (=>
      (and (<= 0 i) (< i (power 2 l)))
      (=>
        (<= 0 l)
        (= (tb2t (get complex1 (t2tb65 (add_ket_l m n l)) i 0)) (infix_pldt
                                                                  (tb2t
                                                                    (get
                                                                    complex1
                                                                    (t2tb65
                                                                    m)
                                                                    i
                                                                    0))
                                                                  (tb2t
                                                                    (get
                                                                    complex1
                                                                    (t2tb65
                                                                    n)
                                                                    i
                                                                    0))))))))

;; add_ket_l_length
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (l Int))
    (=> (<= 0 l) (= (ket_length (add_ket_l m n l)) l))))

;; add_ket_l_rows
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (l Int))
    (=> (<= 0 l) (= (rows complex1 (t2tb65 (add_ket_l m n l))) (power 2 l)))))

;; add_ket_l_columns
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (l Int))
    (=> (<= 0 l) (= (columns complex1 (t2tb65 (add_ket_l m n l))) 1))))

;; add_ket_l_values
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (l Int))
    (=>
      (<= 0 l)
      (forall ((i Int))
        (=>
          (and (<= 0 i) (< i (power 2 l)))
          (= (tb2t (get complex1 (t2tb65 (add_ket_l m n l)) i 0)) (infix_pldt
                                                                    (tb2t
                                                                    (get
                                                                    complex1
                                                                    (t2tb65
                                                                    m)
                                                                    i
                                                                    0))
                                                                    (tb2t
                                                                    (get
                                                                    complex1
                                                                    (t2tb65
                                                                    n)
                                                                    i
                                                                    0)))))))))

;; add_ket_l_comm
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (l Int))
    (=> (<= 0 l) (= (add_ket_l m n l) (add_ket_l n m l)))))

;; set_equal_ket_l
(assert
  (forall ((m (matrix complex)) (n (matrix complex)))
    (=>
      (exists ((l Int)) (and (is_a_ket_l m l) (is_a_ket_l n l)))
      (=>
        (forall ((i Int))
          (=>
            (and (<= 0 i) (< i (power 2 (ket_length m))))
            (= (tb2t (get complex1 (t2tb65 m) i 0)) (tb2t
                                                      (get
                                                        complex1
                                                        (t2tb65 n)
                                                        i
                                                        0)))))
        (= m n)))))

;; set_equal_ket_l_
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (l Int))
    (=>
      (is_a_ket_l m l)
      (=>
        (is_a_ket_l n l)
        (=>
          (forall ((i Int))
            (=>
              (and (<= 0 i) (< i (power 2 l)))
              (= (tb2t (get complex1 (t2tb65 m) i 0)) (tb2t
                                                        (get
                                                          complex1
                                                          (t2tb65 n)
                                                          i
                                                          0)))))
          (= m n))))))

;; get_ket_length
(assert
  (forall ((m (matrix complex)) (n Int))
    (=>
      (<= 0 n)
      (=>
        (= (columns complex1 (t2tb65 m)) 1)
        (=> (= (rows complex1 (t2tb65 m)) (power 2 n)) (= (ket_length m) n))))))

;; set_ket_length
(assert
  (forall ((m (matrix complex)) (n Int))
    (=>
      (<= 0 n)
      (=>
        (is_a_ket m)
        (=> (= (ket_length m) n) (= (rows complex1 (t2tb65 m)) (power 2 n)))))))

;; scalar_ket
(assert
  (forall ((x (matrix complex)) (a complex))
    (=> (is_a_ket x) (is_a_ket (infix_asdtdt a x)))))

;; scalar_ket_length
(assert
  (forall ((m (matrix complex)) (a complex))
    (=> (is_a_ket m) (= (ket_length (infix_asdtdt a m)) (ket_length m)))))

;; scalar_ket_valid_index
(assert
  (forall ((m (matrix complex)) (a complex) (i Int))
    (=>
      (valid_index complex1 (t2tb65 m) i 0)
      (=>
        (is_a_ket m)
        (valid_index complex1 (t2tb65 (infix_asdtdt a m)) i 0)))))

;; scalar_ket_l
(assert
  (forall ((x (matrix complex)) (l Int) (a complex))
    (=> (is_a_ket_l x l) (is_a_ket_l (infix_asdtdt a x) l))))

;; scalar_ket_l_values
(assert
  (forall ((a complex) (x (matrix complex)) (l Int))
    (=>
      (is_a_ket_l x l)
      (forall ((i Int))
        (=>
          (and (<= 0 i) (< i (power 2 l)))
          (= (tb2t (get complex1 (t2tb65 (infix_asdtdt a x)) i 0)) (infix_asdt
                                                                    a
                                                                    (tb2t
                                                                    (get
                                                                    complex1
                                                                    (t2tb65
                                                                    x)
                                                                    i
                                                                    0)))))))))

;; scalar_ket_l_value
(assert
  (forall ((a complex) (x (matrix complex)) (i Int) (l Int))
    (=>
      (and (<= 0 i) (< i (power 2 l)))
      (=>
        (is_a_ket_l x l)
        (= (tb2t (get complex1 (t2tb65 (infix_asdtdt a x)) i 0)) (infix_asdt
                                                                   a
                                                                   (tb2t
                                                                    (get
                                                                    complex1
                                                                    (t2tb65
                                                                    x)
                                                                    i
                                                                    0))))))))

;; scalar_ket_value
(assert
  (forall ((x (matrix complex)) (i Int) (a complex))
    (= (tb2t (get complex1 (t2tb65 (infix_asdtdt a x)) i 0)) (infix_asdt
                                                               a
                                                               (tb2t
                                                                 (get
                                                                   complex1
                                                                   (t2tb65 x)
                                                                   i
                                                                   0))))))

;; scalar_ket_value_rev
(assert
  (forall ((x (matrix complex)) (i Int) (a complex))
    (= (infix_asdt a (tb2t (get complex1 (t2tb65 x) i 0))) (tb2t
                                                             (get
                                                               complex1
                                                               (t2tb65
                                                                 (infix_asdtdt
                                                                   a
                                                                   x))
                                                               i
                                                               0)))))

;; add_ket_is_a_ket
(assert
  (forall ((x (matrix complex)) (y (matrix complex)))
    (=>
      (is_a_ket x)
      (=>
        (is_a_ket y)
        (=> (= (ket_length x) (ket_length y)) (is_a_ket (add_mat x y)))))))

;; set_ket_length_gen
(assert
  (forall ((m (matrix complex)) (n Int))
    (=>
      (<= 0 n)
      (=>
        (is_a_ket m)
        (=> (= (power 2 (ket_length m)) n) (= (rows complex1 (t2tb65 m)) n))))))

;; set_is_a_ket
(assert
  (forall ((m (matrix complex)))
    (=>
      (= (columns complex1 (t2tb65 m)) 1)
      (=>
        (exists ((s Int))
          (and (<= 0 s) (= (rows complex1 (t2tb65 m)) (power 2 s))))
        (is_a_ket m)))))

;; set_is_a_ket_l
(assert
  (forall ((m (matrix complex)) (l Int))
    (=>
      (<= 0 l)
      (=>
        (= (columns complex1 (t2tb65 m)) 1)
        (=> (= (rows complex1 (t2tb65 m)) (power 2 l)) (is_a_ket_l m l))))))

;; set_is_a_ket_p
(assert
  (forall ((m (matrix complex)) (l Int))
    (=>
      (<= 0 l)
      (=>
        (= (columns complex1 (t2tb65 m)) 1)
        (=> (= (rows complex1 (t2tb65 m)) (power 2 l)) (is_a_ket m))))))

;; get_is_a_ket
(assert
  (forall ((m (matrix complex)))
    (=>
      (is_a_ket m)
      (and
        (= (columns complex1 (t2tb65 m)) 1)
        (= (rows complex1 (t2tb65 m)) (power 2 (ket_length m)))))))

;; get_ket_columns
(assert
  (forall ((m (matrix complex)))
    (=> (is_a_ket m) (= (columns complex1 (t2tb65 m)) 1))))

;; get_ket_rows
(assert
  (forall ((m (matrix complex)))
    (=> (is_a_ket m) (= (rows complex1 (t2tb65 m)) (power 2 (ket_length m))))))

;; get_ket_rows_gen
(assert
  (forall ((m (matrix complex)) (i Int))
    (=>
      (is_a_ket m)
      (=> (= i (power 2 (ket_length m))) (= (rows complex1 (t2tb65 m)) i)))))

;; get_ket_rows_length
(assert
  (forall ((m (matrix complex)) (l Int))
    (=>
      (is_a_ket m)
      (=> (= (ket_length m) l) (= (rows complex1 (t2tb65 m)) (power 2 l))))))

;; ket_kronecker
(assert
  (forall ((m (matrix complex)) (n (matrix complex)))
    (=>
      (is_a_ket m)
      (=>
        (is_a_ket n)
        (and
          (is_a_ket (kronecker m n))
          (= (ket_length (kronecker m n)) (+ (ket_length m) (ket_length n))))))))

;; ket_kronecker_l
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (l Int) (lqt Int))
    (=>
      (is_a_ket_l m l)
      (=> (is_a_ket_l n lqt) (is_a_ket_l (kronecker m n) (+ l lqt))))))

;; set_ket_kron_l
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (l Int) (lqt Int) (lqtqt Int))
    (=>
      (is_a_ket_l m l)
      (=>
        (is_a_ket_l n lqt)
        (=> (= lqtqt (+ l lqt)) (is_a_ket_l (kronecker m n) lqtqt))))))

;; ket
(declare-fun ket (Int
  Int) (matrix complex))

;; ket'def
(assert
  (forall ((n Int) (i Int))
    (=>
      (<= 0 n)
      (ite (and (<= 0 i) (< i (power 2 n)))
        (= (ket n i) (tb2t65
                       (set2
                         complex1
                         (make complex1 (power 2 n) 1 (t2tb c_zero))
                         i
                         0
                         (t2tb c_one))))
        (= (ket n i) (tb2t65 (make complex1 (power 2 n) 1 (t2tb c_zero))))))))

;; ket'spec
(assert
  (forall ((n Int) (i Int))
    (=>
      (<= 0 n)
      (and
        (is_a_ket (ket n i))
        (and
          (= (ket_length (ket n i)) n)
          (and
            (= (columns complex1 (t2tb65 (ket n i))) 1)
            (and
              (= (rows complex1 (t2tb65 (ket n i))) (power 2 n))
              (and
                (=>
                  (and (<= 0 i) (< i (power 2 n)))
                  (forall ((j Int))
                    (=>
                      (valid_index complex1 (t2tb65 (ket n i)) j 0)
                      (= (tb2t (get complex1 (t2tb65 (ket n i)) j 0)) 
                      (indic
                        int
                        (t2tb8 j)
                        (t2tb8 i))))))
                (and
                  (forall ((j Int))
                    (=>
                      (valid_index complex1 (t2tb65 (ket n i)) j 0)
                      (=>
                        (not (= i j))
                        (= (tb2t (get complex1 (t2tb65 (ket n i)) j 0)) 
                        c_zero))))
                  (=>
                    (and (<= 0 i) (< i (power 2 n)))
                    (= (tb2t (get complex1 (t2tb65 (ket n i)) i 0)) c_one)))))))))))

;; ket_l
(assert
  (forall ((n Int) (m Int) (i Int))
    (=> (<= 0 n) (=> (= n m) (is_a_ket_l (ket n i) m)))))

;; ket_ket_length
(assert
  (forall ((n Int) (m Int) (i Int))
    (=> (<= 0 n) (=> (= n m) (= (ket_length (ket n i)) m)))))

;; ket_length_explicit
(assert
  (forall ((n Int) (i Int)) (=> (<= 0 n) (= (ket_length (ket n i)) n))))

;; ket_eq
(assert
  (forall ((n1 Int) (n2 Int) (i1 Int) (i2 Int))
    (=> (<= 0 n1) (=> (= n1 n2) (=> (= i1 i2) (= (ket n1 i1) (ket n2 i2)))))))

;; ket_rows
(assert
  (forall ((n Int) (i Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (= (rows complex1 (t2tb65 (ket n i))) (power 2 n))))))

;; ket_columns
(assert
  (forall ((n Int) (i Int))
    (=> (<= 0 n) (= (columns complex1 (t2tb65 (ket n i))) 1))))

;; ket_value
(assert
  (forall ((n Int) (i Int) (j Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (=>
          (and (<= 0 j) (< j (power 2 n)))
          (= (tb2t (get complex1 (t2tb65 (ket n i)) j 0)) (ite (= i j)
                                                            c_one
                                                            c_zero)))))))

;; g_ket_value
(assert
  (forall ((n Int) (i Int) (j Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (=>
          (and (<= 0 j) (< j (power 2 n)))
          (= (tb2t (get complex1 (t2tb65 (ket n i)) j 0)) (ite (= i j)
                                                            c_one
                                                            c_zero)))))))

;; norm_ket_basis
(assert
  (forall ((n Int) (i Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (= (ket_norm_l (ket n i) n) c_one)))))

;; get_ket_
(assert
  (forall ((m (matrix complex)) (i Int) (n Int))
    (=>
      (= m (ket n i))
      (=>
        (<= 0 n)
        (=>
          (and (<= 0 i) (< i (power 2 n)))
          (and
            (is_a_ket m)
            (and
              (= (ket_length m) n)
              (and
                (= (columns complex1 (t2tb65 m)) 1)
                (and
                  (= (rows complex1 (t2tb65 m)) (power 2 n))
                  (and
                    (forall ((j Int))
                      (=>
                        (valid_index complex1 (t2tb65 m) j 0)
                        (= (tb2t (get complex1 (t2tb65 m) j 0)) (indic
                                                                  int
                                                                  (t2tb8 j)
                                                                  (t2tb8 i)))))
                    (and
                      (forall ((j Int))
                        (=>
                          (valid_index complex1 (t2tb65 m) j 0)
                          (=>
                            (not (= i j))
                            (= (tb2t (get complex1 (t2tb65 m) j 0)) c_zero))))
                      (= (tb2t (get complex1 (t2tb65 m) i 0)) c_one))))))))))))

;; get_ket_value
(assert
  (forall ((i Int) (n Int) (j Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (=>
          (and (<= 0 j) (< j (power 2 n)))
          (= (tb2t (get complex1 (t2tb65 (ket n i)) j 0)) (indic
                                                            int
                                                            (t2tb8 j)
                                                            (t2tb8 i))))))))

;; get_ket_values
(assert
  (forall ((i Int) (n Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (forall ((j Int))
          (=>
            (and (<= 0 j) (< j (power 2 n)))
            (= (tb2t (get complex1 (t2tb65 (ket n i)) j 0)) (indic
                                                              int
                                                              (t2tb8 j)
                                                              (t2tb8 i)))))))))

;; get_ket_value_z
(assert
  (forall ((i Int) (n Int) (j Int) (z Int))
    (=>
      (= z 0)
      (=>
        (<= 0 n)
        (=>
          (and (<= 0 i) (< i (power 2 n)))
          (=>
            (and (<= 0 j) (< j (power 2 n)))
            (= (tb2t (get complex1 (t2tb65 (ket n i)) j z)) (indic
                                                              int
                                                              (t2tb8 j)
                                                              (t2tb8 i)))))))))

;; get__ket_value
(assert
  (forall ((i Int) (j Int) (n Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (=>
          (and (<= 0 j) (< j (power 2 n)))
          (= (tb2t (get complex1 (t2tb65 (ket n i)) j 0)) (indic
                                                            int
                                                            (t2tb8 j)
                                                            (t2tb8 i))))))))

;; set_ket
(assert
  (forall ((m (matrix complex)) (i Int) (n Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (=>
          (= (columns complex1 (t2tb65 m)) 1)
          (=>
            (= (rows complex1 (t2tb65 m)) (power 2 n))
            (=>
              (forall ((j Int))
                (=>
                  (valid_index complex1 (t2tb65 m) j 0)
                  (= (tb2t (get complex1 (t2tb65 m) j 0)) (indic
                                                            int
                                                            (t2tb8 j)
                                                            (t2tb8 i)))))
              (= m (ket n i)))))))))

;; kronecker_kets
(assert
  (forall ((i1 Int) (i2 Int) (n1 Int) (n2 Int))
    (=>
      (<= 0 n1)
      (=>
        (<= 0 n2)
        (=>
          (and (<= 0 i1) (< i1 (power 2 n1)))
          (=>
            (and (<= 0 i2) (< i2 (power 2 n2)))
            (= (kronecker (ket n1 i1) (ket n2 i2)) (ket
                                                     (+ n1 n2)
                                                     (+ (* i1 (power 2 n2)) i2)))))))))

;; kronecker_kets_
(assert
  (forall ((i1 Int) (i2 Int) (n1 Int) (n2 Int))
    (=>
      (<= 0 n1)
      (=>
        (<= 0 n2)
        (=>
          (and (<= 0 i1) (< i1 (power 2 n1)))
          (=>
            (and (<= 0 i2) (< i2 (power 2 n2)))
            (= (kronecker (ket n1 i1) (ket n2 i2)) (ket
                                                     (+ n1 n2)
                                                     (+ (* i1 (power 2 n2)) i2)))))))))

;; kronecker_ket_l
(assert
  (forall ((x (matrix complex)) (y (matrix complex)) (n1 Int) (n2 Int))
    (=>
      (<= 0 n1)
      (=>
        (<= 0 n2)
        (=>
          (is_a_ket_l x n1)
          (=> (is_a_ket_l y n2) (is_a_ket_l (kronecker x y) (+ n1 n2))))))))

;; kronecker_ket_l_sum
(assert
  (forall ((x (matrix complex)) (y (matrix complex)) (n1 Int) (n2 Int) (n3 Int))
    (=>
      (<= 0 n1)
      (=>
        (<= 0 n2)
        (=>
          (is_a_ket_l x n1)
          (=>
            (is_a_ket_l y n2)
            (=> (= n3 (+ n1 n2)) (is_a_ket_l (kronecker x y) n3))))))))

;; kronecker_kets_bin_to_int
(assert
  (forall ((f1 (Array Int Int)) (f2 (Array Int Int)) (n1 Int) (n2 Int))
    (=>
      (binary f1)
      (=>
        (binary f2)
        (=>
          (<= 0 n1)
          (=>
            (<= 0 n2)
            (= (kronecker
                 (ket n1 (bin_to_int f1 n1))
                 (ket n2 (bin_to_int f2 n2))) (ket
                                                (+ n1 n2)
                                                (+ (* (bin_to_int f1 n1) 
                                                (power
                                                  2
                                                  n2)) (bin_to_int f2 n2))))))))))

;; concat
(declare-fun concat1 (bitvec
  bitvec) bitvec)

;; result
(declare-fun result28 (bitvec
  bitvec) (Array Int Int))

;; result'def
(assert
  (forall ((bv1 bitvec) (bv2 bitvec) (i Int))
    (= (select (result28 bv1 bv2) i) (ite (and
                                            (<= (length bv1) i)
                                            (< i (+ (length bv1) (length bv2))))
                                       (select (value bv2) (- i (length bv1)))
                                       (select (value bv1) i)))))

;; concat'def
(assert
  (forall ((bv1 bitvec) (bv2 bitvec))
    (= (concat1 bv1 bv2) (make_bv
                           (result28 bv1 bv2)
                           (+ (length bv1) (length bv2))))))

;; concat'spec
(assert
  (forall ((bv1 bitvec) (bv2 bitvec))
    (and
      (= (length (concat1 bv1 bv2)) (+ (length bv1) (length bv2)))
      (and
        (forall ((i Int))
          (=>
            (and (<= 0 i) (< i (length bv1)))
            (= (select (value (concat1 bv1 bv2)) i) (select (value bv1) i))))
        (and
          (forall ((i Int))
            (=>
              (<= (length (concat1 bv1 bv2)) i)
              (= (select (value (concat1 bv1 bv2)) i) (select (value bv1) i))))
          (forall ((i Int))
            (=>
              (and (<= (length bv1) i) (< i (length (concat1 bv1 bv2))))
              (= (select (value (concat1 bv1 bv2)) i) (select (value bv2) (- i 
              (length
                bv1)))))))))))

;; concat_length
(assert
  (forall ((bv1 bitvec) (bv2 bitvec))
    (= (length (concat1 bv1 bv2)) (+ (length bv1) (length bv2)))))

;; hpart
(declare-fun hpart (bitvec
  Int) bitvec)

;; hpart'def
(assert
  (forall ((bv1 bitvec) (m Int))
    (=> (<= 0 m) (= (hpart bv1 m) (make_bv (value bv1) m)))))

;; hpart'spec
(assert
  (forall ((bv1 bitvec) (m Int))
    (=>
      (<= 0 m)
      (and
        (= (length (hpart bv1 m)) m)
        (and
          (=> (= (length bv1) m) (= (hpart bv1 m) bv1))
          (and
            (forall ((k Int))
              (=>
                (and (<= 0 k) (< k m))
                (= (select (value (hpart bv1 m)) k) (select (value bv1) k))))
            (forall ((k Int))
              (=>
                (not (and (<= 0 k) (< k m)))
                (= (select (value (hpart bv1 m)) k) 0)))))))))

;; hpart_value
(assert
  (forall ((bv1 bitvec) (m Int) (i Int))
    (=>
      (<= 0 m)
      (= (select (value (hpart bv1 m)) i) (ite (and (<= 0 i) (< i m))
                                            (select (value bv1) i)
                                            0)))))

;; hpart_length
(assert
  (forall ((bv1 bitvec) (m Int)) (=> (<= 0 m) (= (length (hpart bv1 m)) m))))

;; hpart_value_b
(assert
  (forall ((bv1 bitvec) (m Int) (i Int))
    (=>
      (and (<= 0 i) (< i m))
      (= (select (value (hpart bv1 m)) i) (select (value bv1) i)))))

;; tpart
(declare-fun tpart (bitvec
  Int) bitvec)

;; result
(declare-fun result29 (bitvec
  Int) (Array Int Int))

;; result
(declare-fun result30 (bitvec
  Int) (Array Int Int))

;; result'def
(assert
  (forall ((bv1 bitvec) (m Int) (k Int))
    (= (select (result29 bv1 m) k) (select (value bv1) (+ k m)))))

;; result'def
(assert
  (forall ((bv1 bitvec) (m Int) (k Int))
    (= (select (result30 bv1 m) k) (select (value bv1) (+ k m)))))

;; tpart'def
(assert
  (forall ((bv1 bitvec) (m Int))
    (=>
      (<= 0 m)
      (ite (<= m (length bv1))
        (= (tpart bv1 m) (make_bv (result29 bv1 m) (- (length bv1) m)))
        (= (tpart bv1 m) (make_bv (result30 bv1 m) 0))))))

;; tpart'spec
(assert
  (forall ((bv1 bitvec) (m Int))
    (=>
      (<= 0 m)
      (and
        (=>
          (<= m (length bv1))
          (= (length (tpart bv1 m)) (- (length bv1) m)))
        (and
          (=> (< (length bv1) m) (= (length (tpart bv1 m)) 0))
          (forall ((k Int))
            (=>
              (and (<= 0 k) (< k (length (tpart bv1 m))))
              (= (select (value (tpart bv1 m)) k) (select (value bv1) (+ k m))))))))))

;; bv_tail
(declare-fun bv_tail (bitvec
  Int) bitvec)

;; bv_tail'def
(assert
  (forall ((bv1 bitvec) (m Int))
    (=>
      (and (<= 0 m) (<= m (- (length bv1) m)))
      (= (bv_tail bv1 m) (tpart bv1 (- (length bv1) m))))))

;; bv_tail'spec
(assert
  (forall ((bv1 bitvec) (m Int))
    (=>
      (and (<= 0 m) (<= m (- (length bv1) m)))
      (and
        (= (length (bv_tail bv1 m)) m)
        (forall ((k Int))
          (=>
            (and (<= 0 k) (< k (length (bv_tail bv1 m))))
            (= (select (value (bv_tail bv1 m)) k) (select (value bv1) (+ k (- 
            (length
              bv1) m))))))))))

;; last
(declare-fun last (bitvec) Int)

;; last'def
(assert
  (forall ((bv1 bitvec))
    (=>
      (<= 1 (length bv1))
      (= (last bv1) (select (value bv1) (- (length bv1) 1))))))

;; bv_head
(declare-fun bv_head (bitvec
  Int) bitvec)

;; bv_head'def
(assert
  (forall ((bv1 bitvec) (m Int))
    (=>
      (and (<= 0 m) (<= m (length bv1)))
      (= (bv_head bv1 m) (hpart bv1 (- (length bv1) m))))))

;; bv_head'spec
(assert
  (forall ((bv1 bitvec) (m Int))
    (=>
      (and (<= 0 m) (<= m (length bv1)))
      (and
        (= (length (bv_head bv1 m)) (- (length bv1) m))
        (forall ((k Int))
          (=>
            (and (<= 0 k) (< k (length (bv_head bv1 m))))
            (= (select (value (bv_head bv1 m)) k) (select (value bv1) k))))))))

;; htpart
(declare-fun htpart (bitvec
  Int
  Int) bitvec)

;; result
(declare-fun result31 (bitvec
  Int) (Array Int Int))

;; result'def
(assert
  (forall ((bv1 bitvec) (k Int) (i Int))
    (= (select (result31 bv1 k) i) (select (value bv1) (+ k i)))))

;; htpart'def
(assert
  (forall ((bv1 bitvec) (k Int) (n Int))
    (=>
      (<= 0 k)
      (=> (<= 0 n) (= (htpart bv1 k n) (make_bv (result31 bv1 k) n))))))

;; htpart'spec
(assert
  (forall ((bv1 bitvec) (k Int) (n Int))
    (=>
      (<= 0 k)
      (=>
        (<= 0 n)
        (and
          (= (length (htpart bv1 k n)) n)
          (forall ((i Int))
            (=>
              (and (<= 0 i) (< i n))
              (= (select (value (htpart bv1 k n)) i) (select (value bv1) (+ k i))))))))))

;; tpart_value
(assert
  (forall ((bv1 bitvec) (m Int) (i Int))
    (=>
      (<= 0 m)
      (= (select (value (tpart bv1 m)) i) (ite (and
                                                 (<= 0 i)
                                                 (< i (- (length bv1) m)))
                                            (select (value bv1) (+ i m))
                                            0)))))

;; tpart_value_b
(assert
  (forall ((bv1 bitvec) (m Int) (i Int))
    (=>
      (<= 0 m)
      (=>
        (and (<= 0 i) (< i (- (length bv1) m)))
        (= (select (value (tpart bv1 m)) i) (select (value bv1) (+ i m)))))))

;; tpart_length
(assert
  (forall ((bv1 bitvec) (m Int))
    (=>
      (and (<= 0 m) (<= m (length bv1)))
      (= (length (tpart bv1 m)) (- (length bv1) m)))))

;; htpart_value
(assert
  (forall ((bv1 bitvec) (k Int) (n Int) (i Int))
    (=>
      (<= 0 k)
      (=>
        (<= 0 n)
        (= (select (value (htpart bv1 k n)) i) (ite (and (<= 0 i) (< i n))
                                                 (select (value bv1) (+ k i))
                                                 0))))))

;; htpart_value_b
(assert
  (forall ((bv1 bitvec) (k Int) (n Int) (i Int))
    (=>
      (<= 0 k)
      (=>
        (<= 0 n)
        (=>
          (and (<= 0 i) (< i n))
          (= (select (value (htpart bv1 k n)) i) (select (value bv1) (+ k i))))))))

;; htpart_product_
(assert
  (forall ((x bitvec) (k Int) (n Int) (nqt Int))
    (=>
      (and (<= 0 k) (< k n))
      (=>
        (= nqt (- n k))
        (= (ind_iproduct (value (htpart x k nqt)) 0 (- n k)) (ind_iproduct
                                                               (value x)
                                                               k
                                                               n))))))

;; htpart_product_one
(assert
  (forall ((x bitvec) (k Int) (n Int) (nqt Int))
    (=>
      (and (<= 0 k) (< k n))
      (=>
        (= (length x) n)
        (=>
          (= nqt (- n k))
          (=>
            (= (ind_iproduct (value x) 0 n) 1)
            (= (ind_iproduct (value (htpart x k nqt)) 0 (- n k)) 1)))))))

;; htpart_product_zero
(assert
  (forall ((x bitvec) (k Int) (n Int) (nqt Int))
    (=>
      (and (<= 0 k) (< k n))
      (=>
        (= (length x) n)
        (=>
          (= nqt (- n k))
          (=>
            (exists ((j Int))
              (and (and (<= k j) (< j n)) (not (= (select (value x) j) 1))))
            (= (ind_iproduct (value (htpart x k nqt)) 0 (- n k)) 0)))))))

;; htpart_product
(assert
  (forall ((x bitvec) (k Int) (n Int) (nqt Int))
    (=>
      (and (<= 0 k) (< k n))
      (=>
        (= (length x) n)
        (=>
          (= nqt (- n k))
          (= (ind_iproduct (value (htpart x k nqt)) 0 (- n k)) (ite (forall 
                                                                    ((j Int))
                                                                    (=>
                                                                    (and
                                                                    (<= k j)
                                                                    (< j n))
                                                                    (= (select 
                                                                    (value
                                                                    x) j) 1)))
                                                                 1
                                                                 0)))))))

;; htpart_length
(assert
  (forall ((bv1 bitvec) (k Int) (n Int))
    (=> (<= 0 k) (=> (<= 0 n) (= (length (htpart bv1 k n)) n)))))

;; tpart_length_gen
(assert
  (forall ((bv1 bitvec) (m Int) (l Int))
    (=>
      (and (<= 0 m) (<= m (length bv1)))
      (=> (= l (- (length bv1) m)) (= (length (tpart bv1 m)) l)))))

;; concat_value_left
(assert
  (forall ((bv1 bitvec) (bv2 bitvec) (i Int))
    (=>
      (and (<= 0 i) (< i (length bv1)))
      (= (select (value (concat1 bv1 bv2)) i) (select (value bv1) i)))))

;; concat_value
(assert
  (forall ((bv1 bitvec) (bv2 bitvec) (i Int))
    (= (select (value (concat1 bv1 bv2)) i) (ite (and
                                                   (<= (length bv1) i)
                                                   (< i (+ (length bv1) 
                                                   (length
                                                     bv2))))
                                              (select (value bv2) (- i 
                                              (length
                                                bv1)))
                                              (ite (and
                                                     (<= 0 i)
                                                     (< i (length bv1)))
                                                (select (value bv1) i)
                                                0)))))

;; concat_value_b
(assert
  (forall ((bv1 bitvec) (bv2 bitvec) (i Int))
    (=>
      (and (<= 0 i) (< i (+ (length bv1) (length bv2))))
      (= (select (value (concat1 bv1 bv2)) i) (ite (< i (length bv1))
                                                (select (value bv1) i)
                                                (select (value bv2) (- i 
                                                (length
                                                  bv1))))))))

;; concat_value_right
(assert
  (forall ((bv1 bitvec) (bv2 bitvec) (i Int))
    (=>
      (and (<= (length bv1) i) (< i (+ (length bv1) (length bv2))))
      (= (select (value (concat1 bv1 bv2)) i) (select (value bv2) (- i 
      (length
        bv1)))))))

;; concat_value_out
(assert
  (forall ((bv1 bitvec) (bv2 bitvec) (i Int))
    (=>
      (< (+ (length bv1) (length bv2)) i)
      (= (select (value (concat1 bv1 bv2)) i) (select (value bv1) i)))))

;; concat_value_tpart
(assert
  (forall ((bv1 bitvec) (bv2 bitvec) (i Int))
    (=>
      (and (<= (length bv1) i) (< i (length bv2)))
      (= (select (value (concat1 bv1 (tpart bv2 (length bv1)))) i) (select 
      (value
        bv2) i)))))

;; concat_value_ht
(assert
  (forall ((bv1 bitvec) (bv2 bitvec) (bv3 bitvec) (bv4 bitvec) (i Int))
    (=>
      (and (<= 0 i) (< i (length bv3)))
      (=>
        (=>
          (and (<= 0 i) (< i (length bv1)))
          (= (select (value bv1) i) (select (value bv4) i)))
        (=>
          (=>
            (<= (length bv1) i)
            (= (select (value bv3) i) (select (value bv4) i)))
          (=>
            (= bv2 (tpart bv3 (length bv1)))
            (= (select (value (concat1 bv1 bv2)) i) (select (value bv4) i))))))))

;; concat_ht
(assert
  (forall ((bv1 bitvec) (bv2 bitvec) (bv3 bitvec) (bv4 bitvec))
    (=>
      (forall ((i Int))
        (=>
          (and (<= 0 i) (< i (length bv1)))
          (= (select (value bv1) i) (select (value bv4) i))))
      (=>
        (forall ((i Int))
          (=>
            (<= (length bv1) i)
            (= (select (value bv3) i) (select (value bv4) i))))
        (=>
          (= (length bv4) (+ (length bv1) (length bv2)))
          (=>
            (<= (+ (length bv1) (length bv2)) (length bv3))
            (=> (= bv2 (tpart bv3 (length bv1))) (= (concat1 bv1 bv2) bv4))))))))

;; set_concat
(assert
  (forall ((bv1 bitvec) (bv2 bitvec) (bv4 bitvec))
    (=>
      (forall ((i Int))
        (=>
          (and (<= 0 i) (< i (length bv1)))
          (= (select (value bv1) i) (select (value bv4) i))))
      (=>
        (forall ((i Int))
          (=>
            (<= (length bv1) i)
            (= (select (value bv2) (- i (length bv1))) (select (value bv4) i))))
        (=>
          (= (length bv4) (+ (length bv1) (length bv2)))
          (= (concat1 bv1 bv2) bv4))))))

;; concat_m
(assert
  (forall ((bv1 bitvec) (bv2 bitvec) (i1 Int) (i2 Int))
    (=>
      (< 0 i1)
      (=>
        (< 0 i2)
        (=>
          (= (length bv1) i1)
          (=>
            (= (length bv2) i2)
            (= (concat1
                 (make_bv_m (value bv1) i1)
                 (make_bv_m (value bv2) i2)) (make_bv_m
                                               (value (concat1 bv1 bv2))
                                               (+ i1 i2)))))))))

;; concat_comm
(assert
  (forall ((bv1 bitvec) (bv2 bitvec))
    (and
      (= (hpart (concat1 bv1 bv2) (length bv1)) bv1)
      (= (tpart (concat1 bv1 bv2) (length bv1)) bv2))))

;; concat_and_rec
(assert
  (forall ((bv1 bitvec) (i Int))
    (=>
      (and (<= 0 i) (<= i (length bv1)))
      (= (concat1 (hpart bv1 i) (tpart bv1 i)) bv1))))

;; bv_decomp_ht
(assert
  (forall ((bv1 bitvec) (i Int))
    (=>
      (and (<= 0 i) (<= i (length bv1)))
      (= bv1 (concat1 (hpart bv1 i) (tpart bv1 i))))))

;; bv_decomp_hhtt
(assert
  (forall ((bv1 bitvec) (i Int) (j Int) (k Int))
    (=>
      (<= 0 i)
      (=>
        (<= 0 j)
        (=>
          (and (<= 0 k) (<= k (length bv1)))
          (=>
            (= k (+ i j))
            (= bv1 (concat1
                     (concat1 (hpart bv1 i) (htpart bv1 i j))
                     (tpart bv1 k)))))))))

;; bv_decomp_hhtt_rev
(assert
  (forall ((bv1 bitvec) (i Int) (j Int) (k Int))
    (=>
      (<= 0 i)
      (=>
        (<= 0 j)
        (=>
          (and (<= 0 k) (<= k (length bv1)))
          (=>
            (= k (+ i j))
            (= (concat1
                 (concat1 (hpart bv1 i) (htpart bv1 i j))
                 (tpart bv1 k)) bv1)))))))

;; concat_int_bv
(declare-fun concat_int_bv (bitvec
  Int
  Int) bitvec)

;; concat_int_bv'def
(assert
  (forall ((bv1 bitvec) (i Int) (n Int))
    (=>
      (< 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (= (concat_int_bv bv1 i n) (concat1 bv1 (int_to_bv i n)))))))

;; concat_int_to_bv_value
(assert
  (forall ((bv1 bitvec) (i Int) (n Int) (j Int))
    (=>
      (< 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (=>
          (and (<= 0 j) (< j (length (concat_int_bv bv1 i n))))
          (=>
            (< j (length bv1))
            (= (select (value (concat_int_bv bv1 i n)) j) (select (value bv1) j))))))))

;; bv_to_int_concat
(assert
  (forall ((bvx bitvec) (bvy bitvec))
    (= (bv_to_int (concat1 bvx bvy)) (+ (* (power 2 (length bvy)) (bv_to_int
                                                                    bvx)) 
    (bv_to_int
      bvy)))))

;; concat_fin
(assert
  (forall ((f1 (Array Int Int)) (f2 (Array Int Int)) (l1 Int) (l2 Int))
    (=>
      (<= 0 l1)
      (=>
        (<= 0 l2)
        (=>
          (binary f1)
          (=>
            (binary f2)
            (= (make_bv
                 (tb2t7
                   (infix_at
                     (infix_mngt int int)
                     int
                     (infix_at
                       (infix_mngt int (infix_mngt int int))
                       (infix_mngt int int)
                       (infix_at
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt int (infix_mngt int int)))
                         (infix_mngt int int)
                         (concat_fun_closure int)
                         (t2tb7 f1))
                       (t2tb7 f2))
                     (t2tb8 l1)))
                 (+ l1 l2)) (concat1 (make_bv f1 l1) (make_bv f2 l2)))))))))

;; bin_to_int_concat
(assert
  (forall ((f1 (Array Int Int)) (f2 (Array Int Int)) (l1 Int) (l2 Int))
    (=>
      (<= 0 l1)
      (=>
        (<= 0 l2)
        (=>
          (binary f1)
          (=>
            (binary f2)
            (= (bin_to_int
                 (tb2t7
                   (infix_at
                     (infix_mngt int int)
                     int
                     (infix_at
                       (infix_mngt int (infix_mngt int int))
                       (infix_mngt int int)
                       (infix_at
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt int (infix_mngt int int)))
                         (infix_mngt int int)
                         (concat_fun_closure int)
                         (t2tb7 f1))
                       (t2tb7 f2))
                     (t2tb8 l1)))
                 (+ l1 l2)) (+ (* (power 2 l2) (bin_to_int f1 l1)) (bin_to_int
                                                                    f2
                                                                    l2)))))))))

;; inv_func
(declare-fun inv_func (ty
  ty
  uni
  uni
  uni
  uni) uni)

;; inv_func_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni) (x2 uni) (x3 uni))
      (sort a (inv_func b a x x1 x2 x3)))))

;; result
(declare-fun result32 (ty
  ty
  uni
  uni) uni)

;; result_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni))
      (sort (infix_mngt a bool) (result32 b a x x1)))))

;; result'def
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (eqt (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (e circuit))
    (= (tb2t10
         (infix_at
           bool
           circuit1
           (result32
             (infix_mngt
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int)))
             circuit1
             (t2tb2 f)
             (t2tb3 eqt))
           (t2tb13 e))) (indic_bool
                          (infix_mngt
                            (infix_mngt int int)
                            (infix_mngt
                              (infix_mngt int int)
                              (infix_mngt int int)))
                          (t2tb3 (select f e))
                          (t2tb3 eqt)))))

;; result'def
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (eqt (Array (Array Int Int) (Array Int Int))) (e (Array Int Int)))
    (= (tb2t10
         (infix_at
           bool
           (infix_mngt int int)
           (result32
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (infix_mngt int int)
             (t2tb3 f)
             (t2tb5 eqt))
           (t2tb7 e))) (indic_bool
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt int int))
                         (t2tb5 (select f e))
                         (t2tb5 eqt)))))

;; result'def
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (eqt (Array Int Int)) (e (Array Int Int)))
    (= (tb2t10
         (infix_at
           bool
           (infix_mngt int int)
           (result32
             (infix_mngt int int)
             (infix_mngt int int)
             (t2tb5 f)
             (t2tb7 eqt))
           (t2tb7 e))) (indic_bool
                         (infix_mngt int int)
                         (t2tb7 (select f e))
                         (t2tb7 eqt)))))

;; result'def
(assert
  (forall ((f (Array Int Int)) (eqt Int) (e Int))
    (= (tb2t10
         (infix_at
           bool
           int
           (result32 int int (t2tb7 f) (t2tb8 eqt))
           (t2tb8 e))) (indic_bool int (t2tb8 (select f e)) (t2tb8 eqt)))))

;; result'def
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (eqt uni) (e uni))
      (= (tb2t10 (infix_at bool a (result32 b a f eqt) e)) (indic_bool
                                                             b
                                                             (infix_at
                                                               b
                                                               a
                                                               f
                                                               e)
                                                             eqt)))))

;; inv_func'def
(assert
  (forall ((f (Array Int Int)) (s (set Int)) (sqt (set Int)) (eqt Int))
    (=>
      (p_bijective1 f s sqt)
      (=>
        (mem int (t2tb8 eqt) (t2tb16 sqt))
        (= (tb2t8
             (inv_func int int (t2tb7 f) (t2tb16 s) (t2tb16 sqt) (t2tb8 eqt))) 
        (tb2t8
          (element
            int
            (my_filter
              int
              (t2tb16 s)
              (result32 int int (t2tb7 f) (t2tb8 eqt))))))))))

;; inv_func'def
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (sqt uni) (eqt uni))
      (=>
        (p_bijective b a f s sqt)
        (=>
          (mem b eqt sqt)
          (= (inv_func b a f s sqt eqt) (element
                                          a
                                          (my_filter
                                            a
                                            s
                                            (result32 b a f eqt)))))))))

;; inv_func'spec
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (s (set circuit)) (sqt (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (eqt (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (=>
      (p_bijective
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        circuit1
        (t2tb2 f)
        (t2tb12 s)
        (t2tb11 sqt))
      (=>
        (mem
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          (t2tb3 eqt)
          (t2tb11 sqt))
        (and
          (mem
            circuit1
            (inv_func
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              circuit1
              (t2tb2 f)
              (t2tb12 s)
              (t2tb11 sqt)
              (t2tb3 eqt))
            (t2tb12 s))
          (= (select f (tb2t13
                         (inv_func
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt
                               (infix_mngt int int)
                               (infix_mngt int int)))
                           circuit1
                           (t2tb2 f)
                           (t2tb12 s)
                           (t2tb11 sqt)
                           (t2tb3 eqt)))) eqt))))))

;; inv_func'spec
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (sqt (set (Array (Array Int Int) (Array Int Int)))) (eqt (Array (Array Int Int) (Array Int Int))))
    (=>
      (p_bijective
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (infix_mngt int int)
        (t2tb3 f)
        (t2tb15 s)
        (t2tb14 sqt))
      (=>
        (mem
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (t2tb5 eqt)
          (t2tb14 sqt))
        (and
          (mem
            (infix_mngt int int)
            (inv_func
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (infix_mngt int int)
              (t2tb3 f)
              (t2tb15 s)
              (t2tb14 sqt)
              (t2tb5 eqt))
            (t2tb15 s))
          (= (select f (tb2t7
                         (inv_func
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt int int))
                           (infix_mngt int int)
                           (t2tb3 f)
                           (t2tb15 s)
                           (t2tb14 sqt)
                           (t2tb5 eqt)))) eqt))))))

;; inv_func'spec
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))) (sqt (set (Array Int Int))) (eqt (Array Int Int)))
    (=>
      (p_bijective
        (infix_mngt int int)
        (infix_mngt int int)
        (t2tb5 f)
        (t2tb15 s)
        (t2tb15 sqt))
      (=>
        (mem (infix_mngt int int) (t2tb7 eqt) (t2tb15 sqt))
        (and
          (mem
            (infix_mngt int int)
            (inv_func
              (infix_mngt int int)
              (infix_mngt int int)
              (t2tb5 f)
              (t2tb15 s)
              (t2tb15 sqt)
              (t2tb7 eqt))
            (t2tb15 s))
          (= (select f (tb2t7
                         (inv_func
                           (infix_mngt int int)
                           (infix_mngt int int)
                           (t2tb5 f)
                           (t2tb15 s)
                           (t2tb15 sqt)
                           (t2tb7 eqt)))) eqt))))))

;; inv_func'spec
(assert
  (forall ((f (Array Int Int)) (s (set Int)) (sqt (set Int)) (eqt Int))
    (=>
      (p_bijective1 f s sqt)
      (=>
        (mem int (t2tb8 eqt) (t2tb16 sqt))
        (and
          (mem
            int
            (inv_func int int (t2tb7 f) (t2tb16 s) (t2tb16 sqt) (t2tb8 eqt))
            (t2tb16 s))
          (= (select f (tb2t8
                         (inv_func
                           int
                           int
                           (t2tb7 f)
                           (t2tb16 s)
                           (t2tb16 sqt)
                           (t2tb8 eqt)))) eqt))))))

;; inv_func'spec
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (sqt uni) (eqt uni))
      (=>
        (sort b eqt)
        (=>
          (p_bijective b a f s sqt)
          (=>
            (mem b eqt sqt)
            (and
              (mem a (inv_func b a f s sqt eqt) s)
              (= (infix_at b a f (inv_func b a f s sqt eqt)) eqt))))))))

;; inv_func_closure
(declare-fun inv_func_closure (ty
  ty) uni)

;; inv_func_closure_sort
(assert
  (forall ((a ty) (b ty))
    (sort
      (infix_mngt
        (infix_mngt a b)
        (infix_mngt (set1 a) (infix_mngt (set1 b) (infix_mngt b a))))
      (inv_func_closure b a))))

;; t2tb
(declare-fun t2tb91 ((Array (set circuit) (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (set circuit) (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))))
    (sort
      (infix_mngt
        (set1 circuit1)
        (infix_mngt
          circuit1
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))))
      (t2tb91 x))))

;; tb2t
(declare-fun tb2t91 (uni) (Array (set circuit) (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))

;; BridgeL
(assert
  (forall ((i (Array (set circuit) (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))))
    (! (= (tb2t91 (t2tb91 i)) i) :pattern ((t2tb91 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb91 (tb2t91 j)) j) :pattern ((t2tb91 (tb2t91 j))) )))

;; t2tb
(declare-fun t2tb92 ((Array (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (Array (set circuit) (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (Array (set circuit) (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))))
    (sort
      (infix_mngt
        (set1
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int))))
        (infix_mngt
          (set1 circuit1)
          (infix_mngt
            circuit1
            (infix_mngt
              (infix_mngt int int)
              (infix_mngt (infix_mngt int int) (infix_mngt int int))))))
      (t2tb92 x))))

;; tb2t
(declare-fun tb2t92 (uni) (Array (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (Array (set circuit) (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))))

;; BridgeL
(assert
  (forall ((i (Array (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (Array (set circuit) (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))))
    (! (= (tb2t92 (t2tb92 i)) i) :pattern ((t2tb92 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb92 (tb2t92 j)) j) :pattern ((t2tb92 (tb2t92 j))) )))

;; t2tb
(declare-fun t2tb93 ((Array (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) circuit) (Array (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (Array (set circuit) (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) circuit) (Array (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (Array (set circuit) (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))))))
    (sort
      (infix_mngt
        (infix_mngt
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          circuit1)
        (infix_mngt
          (set1
            (infix_mngt
              (infix_mngt int int)
              (infix_mngt (infix_mngt int int) (infix_mngt int int))))
          (infix_mngt
            (set1 circuit1)
            (infix_mngt
              circuit1
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))))))
      (t2tb93 x))))

;; tb2t
(declare-fun tb2t93 (uni) (Array (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) circuit) (Array (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (Array (set circuit) (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))))

;; BridgeL
(assert
  (forall ((i (Array (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) circuit) (Array (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (Array (set circuit) (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))))))
    (! (= (tb2t93 (t2tb93 i)) i) :pattern ((t2tb93 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb93 (tb2t93 j)) j) :pattern ((t2tb93 (tb2t93 j))) )))

;; inv_func_closure_def
(assert
  (forall ((y (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) circuit)) (y1 (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (y2 (set circuit)) (y3 circuit))
    (= (select (tb2t2
                 (infix_at
                   (infix_mngt
                     circuit1
                     (infix_mngt
                       (infix_mngt int int)
                       (infix_mngt (infix_mngt int int) (infix_mngt int int))))
                   (set1 circuit1)
                   (infix_at
                     (infix_mngt
                       (set1 circuit1)
                       (infix_mngt
                         circuit1
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt int int)))))
                     (set1
                       (infix_mngt
                         (infix_mngt int int)
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt int int))))
                     (infix_at
                       (infix_mngt
                         (set1
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt
                               (infix_mngt int int)
                               (infix_mngt int int))))
                         (infix_mngt
                           (set1 circuit1)
                           (infix_mngt
                             circuit1
                             (infix_mngt
                               (infix_mngt int int)
                               (infix_mngt
                                 (infix_mngt int int)
                                 (infix_mngt int int))))))
                       (infix_mngt
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt int int)))
                         circuit1)
                       (inv_func_closure
                         circuit1
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt int int))))
                       (t2tb40 y))
                     (t2tb11 y1))
                   (t2tb12 y2))) y3) (tb2t3
                                       (inv_func
                                         circuit1
                                         (infix_mngt
                                           (infix_mngt int int)
                                           (infix_mngt
                                             (infix_mngt int int)
                                             (infix_mngt int int)))
                                         (t2tb40 y)
                                         (t2tb11 y1)
                                         (t2tb12 y2)
                                         (t2tb13 y3))))))

;; t2tb
(declare-fun t2tb94 ((Array (set (Array Int Int)) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (set (Array Int Int)) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (sort
      (infix_mngt
        (set1 (infix_mngt int int))
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int))))
      (t2tb94 x))))

;; tb2t
(declare-fun tb2t94 (uni) (Array (set (Array Int Int)) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))

;; BridgeL
(assert
  (forall ((i (Array (set (Array Int Int)) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (! (= (tb2t94 (t2tb94 i)) i) :pattern ((t2tb94 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb94 (tb2t94 j)) j) :pattern ((t2tb94 (tb2t94 j))) )))

;; t2tb
(declare-fun t2tb95 ((Array (set (Array (Array Int Int) (Array Int Int))) (Array (set (Array Int Int)) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (set (Array (Array Int Int) (Array Int Int))) (Array (set (Array Int Int)) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))))
    (sort
      (infix_mngt
        (set1 (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        (infix_mngt
          (set1 (infix_mngt int int))
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))))
      (t2tb95 x))))

;; tb2t
(declare-fun tb2t95 (uni) (Array (set (Array (Array Int Int) (Array Int Int))) (Array (set (Array Int Int)) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))

;; BridgeL
(assert
  (forall ((i (Array (set (Array (Array Int Int) (Array Int Int))) (Array (set (Array Int Int)) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))))
    (! (= (tb2t95 (t2tb95 i)) i) :pattern ((t2tb95 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb95 (tb2t95 j)) j) :pattern ((t2tb95 (tb2t95 j))) )))

;; t2tb
(declare-fun t2tb96 ((Array (Array (Array (Array Int Int) (Array Int Int)) (Array Int Int)) (Array (set (Array (Array Int Int) (Array Int Int))) (Array (set (Array Int Int)) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (Array (Array (Array Int Int) (Array Int Int)) (Array Int Int)) (Array (set (Array (Array Int Int) (Array Int Int))) (Array (set (Array Int Int)) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))))
    (sort
      (infix_mngt
        (infix_mngt
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (infix_mngt int int))
        (infix_mngt
          (set1 (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          (infix_mngt
            (set1 (infix_mngt int int))
            (infix_mngt
              (infix_mngt int int)
              (infix_mngt (infix_mngt int int) (infix_mngt int int))))))
      (t2tb96 x))))

;; tb2t
(declare-fun tb2t96 (uni) (Array (Array (Array (Array Int Int) (Array Int Int)) (Array Int Int)) (Array (set (Array (Array Int Int) (Array Int Int))) (Array (set (Array Int Int)) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))))

;; BridgeL
(assert
  (forall ((i (Array (Array (Array (Array Int Int) (Array Int Int)) (Array Int Int)) (Array (set (Array (Array Int Int) (Array Int Int))) (Array (set (Array Int Int)) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))))
    (! (= (tb2t96 (t2tb96 i)) i) :pattern ((t2tb96 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb96 (tb2t96 j)) j) :pattern ((t2tb96 (tb2t96 j))) )))

;; inv_func_closure_def
(assert
  (forall ((y (Array (Array (Array Int Int) (Array Int Int)) (Array Int Int))) (y1 (set (Array (Array Int Int) (Array Int Int)))) (y2 (set (Array Int Int))) (y3 (Array Int Int)))
    (= (select (tb2t3
                 (infix_at
                   (infix_mngt
                     (infix_mngt int int)
                     (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                   (set1 (infix_mngt int int))
                   (infix_at
                     (infix_mngt
                       (set1 (infix_mngt int int))
                       (infix_mngt
                         (infix_mngt int int)
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt int int))))
                     (set1
                       (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                     (infix_at
                       (infix_mngt
                         (set1
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt int int)))
                         (infix_mngt
                           (set1 (infix_mngt int int))
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt
                               (infix_mngt int int)
                               (infix_mngt int int)))))
                       (infix_mngt
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt int int))
                         (infix_mngt int int))
                       (inv_func_closure
                         (infix_mngt int int)
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt int int)))
                       (t2tb28 y))
                     (t2tb14 y1))
                   (t2tb15 y2))) y3) (tb2t5
                                       (inv_func
                                         (infix_mngt int int)
                                         (infix_mngt
                                           (infix_mngt int int)
                                           (infix_mngt int int))
                                         (t2tb28 y)
                                         (t2tb14 y1)
                                         (t2tb15 y2)
                                         (t2tb7 y3))))))

;; t2tb
(declare-fun t2tb97 ((Array (set (Array Int Int)) (Array (Array Int Int) (Array Int Int)))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (set (Array Int Int)) (Array (Array Int Int) (Array Int Int)))))
    (sort
      (infix_mngt
        (set1 (infix_mngt int int))
        (infix_mngt (infix_mngt int int) (infix_mngt int int)))
      (t2tb97 x))))

;; tb2t
(declare-fun tb2t97 (uni) (Array (set (Array Int Int)) (Array (Array Int Int) (Array Int Int))))

;; BridgeL
(assert
  (forall ((i (Array (set (Array Int Int)) (Array (Array Int Int) (Array Int Int)))))
    (! (= (tb2t97 (t2tb97 i)) i) :pattern ((t2tb97 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb97 (tb2t97 j)) j) :pattern ((t2tb97 (tb2t97 j))) )))

;; t2tb
(declare-fun t2tb98 ((Array (set (Array Int Int)) (Array (set (Array Int Int)) (Array (Array Int Int) (Array Int Int))))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (set (Array Int Int)) (Array (set (Array Int Int)) (Array (Array Int Int) (Array Int Int))))))
    (sort
      (infix_mngt
        (set1 (infix_mngt int int))
        (infix_mngt
          (set1 (infix_mngt int int))
          (infix_mngt (infix_mngt int int) (infix_mngt int int))))
      (t2tb98 x))))

;; tb2t
(declare-fun tb2t98 (uni) (Array (set (Array Int Int)) (Array (set (Array Int Int)) (Array (Array Int Int) (Array Int Int)))))

;; BridgeL
(assert
  (forall ((i (Array (set (Array Int Int)) (Array (set (Array Int Int)) (Array (Array Int Int) (Array Int Int))))))
    (! (= (tb2t98 (t2tb98 i)) i) :pattern ((t2tb98 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb98 (tb2t98 j)) j) :pattern ((t2tb98 (tb2t98 j))) )))

;; t2tb
(declare-fun t2tb99 ((Array (Array (Array Int Int) (Array Int Int)) (Array (set (Array Int Int)) (Array (set (Array Int Int)) (Array (Array Int Int) (Array Int Int)))))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (Array (Array Int Int) (Array Int Int)) (Array (set (Array Int Int)) (Array (set (Array Int Int)) (Array (Array Int Int) (Array Int Int)))))))
    (sort
      (infix_mngt
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (infix_mngt
          (set1 (infix_mngt int int))
          (infix_mngt
            (set1 (infix_mngt int int))
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))))
      (t2tb99 x))))

;; tb2t
(declare-fun tb2t99 (uni) (Array (Array (Array Int Int) (Array Int Int)) (Array (set (Array Int Int)) (Array (set (Array Int Int)) (Array (Array Int Int) (Array Int Int))))))

;; BridgeL
(assert
  (forall ((i (Array (Array (Array Int Int) (Array Int Int)) (Array (set (Array Int Int)) (Array (set (Array Int Int)) (Array (Array Int Int) (Array Int Int)))))))
    (! (= (tb2t99 (t2tb99 i)) i) :pattern ((t2tb99 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb99 (tb2t99 j)) j) :pattern ((t2tb99 (tb2t99 j))) )))

;; inv_func_closure_def
(assert
  (forall ((y (Array (Array Int Int) (Array Int Int))) (y1 (set (Array Int Int))) (y2 (set (Array Int Int))) (y3 (Array Int Int)))
    (= (select (tb2t5
                 (infix_at
                   (infix_mngt (infix_mngt int int) (infix_mngt int int))
                   (set1 (infix_mngt int int))
                   (infix_at
                     (infix_mngt
                       (set1 (infix_mngt int int))
                       (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                     (set1 (infix_mngt int int))
                     (infix_at
                       (infix_mngt
                         (set1 (infix_mngt int int))
                         (infix_mngt
                           (set1 (infix_mngt int int))
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt int int))))
                       (infix_mngt (infix_mngt int int) (infix_mngt int int))
                       (inv_func_closure
                         (infix_mngt int int)
                         (infix_mngt int int))
                       (t2tb5 y))
                     (t2tb15 y1))
                   (t2tb15 y2))) y3) (tb2t7
                                       (inv_func
                                         (infix_mngt int int)
                                         (infix_mngt int int)
                                         (t2tb5 y)
                                         (t2tb15 y1)
                                         (t2tb15 y2)
                                         (t2tb7 y3))))))

;; t2tb
(declare-fun t2tb100 ((Array (set Int) (Array Int Int))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (set Int) (Array Int Int))))
    (sort (infix_mngt (set1 int) (infix_mngt int int)) (t2tb100 x))))

;; tb2t
(declare-fun tb2t100 (uni) (Array (set Int) (Array Int Int)))

;; BridgeL
(assert
  (forall ((i (Array (set Int) (Array Int Int))))
    (! (= (tb2t100 (t2tb100 i)) i) :pattern ((t2tb100 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb100 (tb2t100 j)) j) :pattern ((t2tb100 (tb2t100 j))) )))

;; t2tb
(declare-fun t2tb101 ((Array (set Int) (Array (set Int) (Array Int Int)))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (set Int) (Array (set Int) (Array Int Int)))))
    (sort
      (infix_mngt (set1 int) (infix_mngt (set1 int) (infix_mngt int int)))
      (t2tb101 x))))

;; tb2t
(declare-fun tb2t101 (uni) (Array (set Int) (Array (set Int) (Array Int Int))))

;; BridgeL
(assert
  (forall ((i (Array (set Int) (Array (set Int) (Array Int Int)))))
    (! (= (tb2t101 (t2tb101 i)) i) :pattern ((t2tb101 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb101 (tb2t101 j)) j) :pattern ((t2tb101 (tb2t101 j))) )))

;; t2tb
(declare-fun t2tb102 ((Array (Array Int Int) (Array (set Int) (Array (set Int) (Array Int Int))))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (Array Int Int) (Array (set Int) (Array (set Int) (Array Int Int))))))
    (sort
      (infix_mngt
        (infix_mngt int int)
        (infix_mngt (set1 int) (infix_mngt (set1 int) (infix_mngt int int))))
      (t2tb102 x))))

;; tb2t
(declare-fun tb2t102 (uni) (Array (Array Int Int) (Array (set Int) (Array (set Int) (Array Int Int)))))

;; BridgeL
(assert
  (forall ((i (Array (Array Int Int) (Array (set Int) (Array (set Int) (Array Int Int))))))
    (! (= (tb2t102 (t2tb102 i)) i) :pattern ((t2tb102 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb102 (tb2t102 j)) j) :pattern ((t2tb102 (tb2t102 j))) )))

;; inv_func_closure_def
(assert
  (forall ((y (Array Int Int)) (y1 (set Int)) (y2 (set Int)) (y3 Int))
    (= (select (tb2t7
                 (infix_at
                   (infix_mngt int int)
                   (set1 int)
                   (infix_at
                     (infix_mngt (set1 int) (infix_mngt int int))
                     (set1 int)
                     (infix_at
                       (infix_mngt
                         (set1 int)
                         (infix_mngt (set1 int) (infix_mngt int int)))
                       (infix_mngt int int)
                       (inv_func_closure int int)
                       (t2tb7 y))
                     (t2tb16 y1))
                   (t2tb16 y2))) y3) (tb2t8
                                       (inv_func
                                         int
                                         int
                                         (t2tb7 y)
                                         (t2tb16 y1)
                                         (t2tb16 y2)
                                         (t2tb8 y3))))))

;; inv_func_closure_def
(assert
  (forall ((a ty) (b ty))
    (forall ((y uni) (y1 uni) (y2 uni) (y3 uni))
      (= (infix_at
           a
           b
           (infix_at
             (infix_mngt b a)
             (set1 b)
             (infix_at
               (infix_mngt (set1 b) (infix_mngt b a))
               (set1 a)
               (infix_at
                 (infix_mngt (set1 a) (infix_mngt (set1 b) (infix_mngt b a)))
                 (infix_mngt a b)
                 (inv_func_closure b a)
                 y)
               y1)
             y2)
           y3) (inv_func b a y y1 y2 y3)))))

;; bijective_inv_func
(assert
  (forall ((f (Array Int Int)) (s (set Int)) (sqt (set Int)))
    (=>
      (p_bijective1 f s sqt)
      (p_bijective1
        (tb2t7
          (infix_at
            (infix_mngt int int)
            (set1 int)
            (infix_at
              (infix_mngt (set1 int) (infix_mngt int int))
              (set1 int)
              (infix_at
                (infix_mngt
                  (set1 int)
                  (infix_mngt (set1 int) (infix_mngt int int)))
                (infix_mngt int int)
                (inv_func_closure int int)
                (t2tb7 f))
              (t2tb16 s))
            (t2tb16 sqt)))
        sqt
        s))))

;; bijective_inv_func
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (sqt uni))
      (=>
        (p_bijective b a f s sqt)
        (p_bijective
          a
          b
          (infix_at
            (infix_mngt b a)
            (set1 b)
            (infix_at
              (infix_mngt (set1 b) (infix_mngt b a))
              (set1 a)
              (infix_at
                (infix_mngt (set1 a) (infix_mngt (set1 b) (infix_mngt b a)))
                (infix_mngt a b)
                (inv_func_closure b a)
                f)
              s)
            sqt)
          sqt
          s)))))

;; inv_rec
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (s (set circuit)) (sqt (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (e circuit))
    (=>
      (p_bijective
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        circuit1
        (t2tb2 f)
        (t2tb12 s)
        (t2tb11 sqt))
      (=>
        (mem circuit1 (t2tb13 e) (t2tb12 s))
        (= (tb2t13
             (inv_func
               (infix_mngt
                 (infix_mngt int int)
                 (infix_mngt (infix_mngt int int) (infix_mngt int int)))
               circuit1
               (t2tb2 f)
               (t2tb12 s)
               (t2tb11 sqt)
               (t2tb3 (select f e)))) e)))))

;; inv_rec
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (sqt (set (Array (Array Int Int) (Array Int Int)))) (e (Array Int Int)))
    (=>
      (p_bijective
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (infix_mngt int int)
        (t2tb3 f)
        (t2tb15 s)
        (t2tb14 sqt))
      (=>
        (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
        (= (tb2t7
             (inv_func
               (infix_mngt (infix_mngt int int) (infix_mngt int int))
               (infix_mngt int int)
               (t2tb3 f)
               (t2tb15 s)
               (t2tb14 sqt)
               (t2tb5 (select f e)))) e)))))

;; inv_rec
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))) (sqt (set (Array Int Int))) (e (Array Int Int)))
    (=>
      (p_bijective
        (infix_mngt int int)
        (infix_mngt int int)
        (t2tb5 f)
        (t2tb15 s)
        (t2tb15 sqt))
      (=>
        (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
        (= (tb2t7
             (inv_func
               (infix_mngt int int)
               (infix_mngt int int)
               (t2tb5 f)
               (t2tb15 s)
               (t2tb15 sqt)
               (t2tb7 (select f e)))) e)))))

;; inv_rec
(assert
  (forall ((f (Array Int Int)) (s (set Int)) (sqt (set Int)) (e Int))
    (=>
      (p_bijective1 f s sqt)
      (=>
        (mem int (t2tb8 e) (t2tb16 s))
        (= (tb2t8
             (inv_func
               int
               int
               (t2tb7 f)
               (t2tb16 s)
               (t2tb16 sqt)
               (t2tb8 (select f e)))) e)))))

;; inv_rec
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (sqt uni) (e uni))
      (=>
        (sort a e)
        (=>
          (p_bijective b a f s sqt)
          (=> (mem a e s) (= (inv_func b a f s sqt (infix_at b a f e)) e)))))))

;; inv_
(declare-fun inv_ (ty
  ty
  uni
  uni
  uni
  uni) uni)

;; inv__sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni) (x2 uni) (x3 uni))
      (sort a (inv_ b a x x1 x2 x3)))))

;; inv_'def
(assert
  (forall ((f (Array Int Int)) (s (set Int)) (sqt (set Int)) (e Int))
    (=>
      (p_bijective1 f s sqt)
      (=>
        (mem int (t2tb8 e) (t2tb16 sqt))
        (= (tb2t8 (inv_ int int (t2tb7 f) (t2tb16 s) (t2tb16 sqt) (t2tb8 e))) 
        (tb2t8
          (inv_func int int (t2tb7 f) (t2tb16 s) (t2tb16 sqt) (t2tb8 e))))))))

;; inv_'def
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (sqt uni) (e uni))
      (=>
        (p_bijective b a f s sqt)
        (=> (mem b e sqt) (= (inv_ b a f s sqt e) (inv_func b a f s sqt e)))))))

;; inv_'spec
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (s (set circuit)) (sqt (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (e (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (=>
      (p_bijective
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        circuit1
        (t2tb2 f)
        (t2tb12 s)
        (t2tb11 sqt))
      (=>
        (mem
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          (t2tb3 e)
          (t2tb11 sqt))
        (and
          (mem
            circuit1
            (inv_
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              circuit1
              (t2tb2 f)
              (t2tb12 s)
              (t2tb11 sqt)
              (t2tb3 e))
            (t2tb12 s))
          (= (select f (tb2t13
                         (inv_
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt
                               (infix_mngt int int)
                               (infix_mngt int int)))
                           circuit1
                           (t2tb2 f)
                           (t2tb12 s)
                           (t2tb11 sqt)
                           (t2tb3 e)))) e))))))

;; inv_'spec
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (sqt (set (Array (Array Int Int) (Array Int Int)))) (e (Array (Array Int Int) (Array Int Int))))
    (=>
      (p_bijective
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (infix_mngt int int)
        (t2tb3 f)
        (t2tb15 s)
        (t2tb14 sqt))
      (=>
        (mem
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (t2tb5 e)
          (t2tb14 sqt))
        (and
          (mem
            (infix_mngt int int)
            (inv_
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (infix_mngt int int)
              (t2tb3 f)
              (t2tb15 s)
              (t2tb14 sqt)
              (t2tb5 e))
            (t2tb15 s))
          (= (select f (tb2t7
                         (inv_
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt int int))
                           (infix_mngt int int)
                           (t2tb3 f)
                           (t2tb15 s)
                           (t2tb14 sqt)
                           (t2tb5 e)))) e))))))

;; inv_'spec
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))) (sqt (set (Array Int Int))) (e (Array Int Int)))
    (=>
      (p_bijective
        (infix_mngt int int)
        (infix_mngt int int)
        (t2tb5 f)
        (t2tb15 s)
        (t2tb15 sqt))
      (=>
        (mem (infix_mngt int int) (t2tb7 e) (t2tb15 sqt))
        (and
          (mem
            (infix_mngt int int)
            (inv_
              (infix_mngt int int)
              (infix_mngt int int)
              (t2tb5 f)
              (t2tb15 s)
              (t2tb15 sqt)
              (t2tb7 e))
            (t2tb15 s))
          (= (select f (tb2t7
                         (inv_
                           (infix_mngt int int)
                           (infix_mngt int int)
                           (t2tb5 f)
                           (t2tb15 s)
                           (t2tb15 sqt)
                           (t2tb7 e)))) e))))))

;; inv_'spec
(assert
  (forall ((f (Array Int Int)) (s (set Int)) (sqt (set Int)) (e Int))
    (=>
      (p_bijective1 f s sqt)
      (=>
        (mem int (t2tb8 e) (t2tb16 sqt))
        (and
          (mem
            int
            (inv_ int int (t2tb7 f) (t2tb16 s) (t2tb16 sqt) (t2tb8 e))
            (t2tb16 s))
          (= (select f (tb2t8
                         (inv_
                           int
                           int
                           (t2tb7 f)
                           (t2tb16 s)
                           (t2tb16 sqt)
                           (t2tb8 e)))) e))))))

;; inv_'spec
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (sqt uni) (e uni))
      (=>
        (sort b e)
        (=>
          (p_bijective b a f s sqt)
          (=>
            (mem b e sqt)
            (and
              (mem a (inv_ b a f s sqt e) s)
              (= (infix_at b a f (inv_ b a f s sqt e)) e))))))))

;; inv__closure
(declare-fun inv__closure (ty
  ty) uni)

;; inv__closure_sort
(assert
  (forall ((a ty) (b ty))
    (sort
      (infix_mngt
        (infix_mngt a b)
        (infix_mngt (set1 a) (infix_mngt (set1 b) (infix_mngt b a))))
      (inv__closure b a))))

;; inv__closure_def
(assert
  (forall ((y (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) circuit)) (y1 (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (y2 (set circuit)) (y3 circuit))
    (= (select (tb2t2
                 (infix_at
                   (infix_mngt
                     circuit1
                     (infix_mngt
                       (infix_mngt int int)
                       (infix_mngt (infix_mngt int int) (infix_mngt int int))))
                   (set1 circuit1)
                   (infix_at
                     (infix_mngt
                       (set1 circuit1)
                       (infix_mngt
                         circuit1
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt int int)))))
                     (set1
                       (infix_mngt
                         (infix_mngt int int)
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt int int))))
                     (infix_at
                       (infix_mngt
                         (set1
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt
                               (infix_mngt int int)
                               (infix_mngt int int))))
                         (infix_mngt
                           (set1 circuit1)
                           (infix_mngt
                             circuit1
                             (infix_mngt
                               (infix_mngt int int)
                               (infix_mngt
                                 (infix_mngt int int)
                                 (infix_mngt int int))))))
                       (infix_mngt
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt int int)))
                         circuit1)
                       (inv__closure
                         circuit1
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt int int))))
                       (t2tb40 y))
                     (t2tb11 y1))
                   (t2tb12 y2))) y3) (tb2t3
                                       (inv_
                                         circuit1
                                         (infix_mngt
                                           (infix_mngt int int)
                                           (infix_mngt
                                             (infix_mngt int int)
                                             (infix_mngt int int)))
                                         (t2tb40 y)
                                         (t2tb11 y1)
                                         (t2tb12 y2)
                                         (t2tb13 y3))))))

;; inv__closure_def
(assert
  (forall ((y (Array (Array (Array Int Int) (Array Int Int)) (Array Int Int))) (y1 (set (Array (Array Int Int) (Array Int Int)))) (y2 (set (Array Int Int))) (y3 (Array Int Int)))
    (= (select (tb2t3
                 (infix_at
                   (infix_mngt
                     (infix_mngt int int)
                     (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                   (set1 (infix_mngt int int))
                   (infix_at
                     (infix_mngt
                       (set1 (infix_mngt int int))
                       (infix_mngt
                         (infix_mngt int int)
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt int int))))
                     (set1
                       (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                     (infix_at
                       (infix_mngt
                         (set1
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt int int)))
                         (infix_mngt
                           (set1 (infix_mngt int int))
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt
                               (infix_mngt int int)
                               (infix_mngt int int)))))
                       (infix_mngt
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt int int))
                         (infix_mngt int int))
                       (inv__closure
                         (infix_mngt int int)
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt int int)))
                       (t2tb28 y))
                     (t2tb14 y1))
                   (t2tb15 y2))) y3) (tb2t5
                                       (inv_
                                         (infix_mngt int int)
                                         (infix_mngt
                                           (infix_mngt int int)
                                           (infix_mngt int int))
                                         (t2tb28 y)
                                         (t2tb14 y1)
                                         (t2tb15 y2)
                                         (t2tb7 y3))))))

;; inv__closure_def
(assert
  (forall ((y (Array (Array Int Int) (Array Int Int))) (y1 (set (Array Int Int))) (y2 (set (Array Int Int))) (y3 (Array Int Int)))
    (= (select (tb2t5
                 (infix_at
                   (infix_mngt (infix_mngt int int) (infix_mngt int int))
                   (set1 (infix_mngt int int))
                   (infix_at
                     (infix_mngt
                       (set1 (infix_mngt int int))
                       (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                     (set1 (infix_mngt int int))
                     (infix_at
                       (infix_mngt
                         (set1 (infix_mngt int int))
                         (infix_mngt
                           (set1 (infix_mngt int int))
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt int int))))
                       (infix_mngt (infix_mngt int int) (infix_mngt int int))
                       (inv__closure
                         (infix_mngt int int)
                         (infix_mngt int int))
                       (t2tb5 y))
                     (t2tb15 y1))
                   (t2tb15 y2))) y3) (tb2t7
                                       (inv_
                                         (infix_mngt int int)
                                         (infix_mngt int int)
                                         (t2tb5 y)
                                         (t2tb15 y1)
                                         (t2tb15 y2)
                                         (t2tb7 y3))))))

;; inv__closure_def
(assert
  (forall ((y (Array Int Int)) (y1 (set Int)) (y2 (set Int)) (y3 Int))
    (= (select (tb2t7
                 (infix_at
                   (infix_mngt int int)
                   (set1 int)
                   (infix_at
                     (infix_mngt (set1 int) (infix_mngt int int))
                     (set1 int)
                     (infix_at
                       (infix_mngt
                         (set1 int)
                         (infix_mngt (set1 int) (infix_mngt int int)))
                       (infix_mngt int int)
                       (inv__closure int int)
                       (t2tb7 y))
                     (t2tb16 y1))
                   (t2tb16 y2))) y3) (tb2t8
                                       (inv_
                                         int
                                         int
                                         (t2tb7 y)
                                         (t2tb16 y1)
                                         (t2tb16 y2)
                                         (t2tb8 y3))))))

;; inv__closure_def
(assert
  (forall ((a ty) (b ty))
    (forall ((y uni) (y1 uni) (y2 uni) (y3 uni))
      (= (infix_at
           a
           b
           (infix_at
             (infix_mngt b a)
             (set1 b)
             (infix_at
               (infix_mngt (set1 b) (infix_mngt b a))
               (set1 a)
               (infix_at
                 (infix_mngt (set1 a) (infix_mngt (set1 b) (infix_mngt b a)))
                 (infix_mngt a b)
                 (inv__closure b a)
                 y)
               y1)
             y2)
           y3) (inv_ b a y y1 y2 y3)))))

;; inv_bijective
(assert
  (forall ((f (Array Int Int)) (s (set Int)) (sqt (set Int)))
    (=>
      (p_bijective1 f s sqt)
      (p_bijective1
        (tb2t7
          (infix_at
            (infix_mngt int int)
            (set1 int)
            (infix_at
              (infix_mngt (set1 int) (infix_mngt int int))
              (set1 int)
              (infix_at
                (infix_mngt
                  (set1 int)
                  (infix_mngt (set1 int) (infix_mngt int int)))
                (infix_mngt int int)
                (inv__closure int int)
                (t2tb7 f))
              (t2tb16 s))
            (t2tb16 sqt)))
        sqt
        s))))

;; inv_bijective
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (sqt uni))
      (=>
        (p_bijective b a f s sqt)
        (p_bijective
          a
          b
          (infix_at
            (infix_mngt b a)
            (set1 b)
            (infix_at
              (infix_mngt (set1 b) (infix_mngt b a))
              (set1 a)
              (infix_at
                (infix_mngt (set1 a) (infix_mngt (set1 b) (infix_mngt b a)))
                (infix_mngt a b)
                (inv__closure b a)
                f)
              s)
            sqt)
          sqt
          s)))))

;; set_bijective_inv
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (g (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) circuit)) (s (set circuit)) (b (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (=>
      (mem
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        (t2tb3 b)
        (map1
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          circuit1
          (t2tb2 f)
          (t2tb12 s)))
      (=>
        (forall ((e circuit) (eqt circuit))
          (=>
            (mem circuit1 (t2tb13 e) (t2tb12 s))
            (=>
              (mem circuit1 (t2tb13 eqt) (t2tb12 s))
              (=> (not (= e eqt)) (not (= (select f e) (select f eqt)))))))
        (=>
          (forall ((eqt (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
            (=>
              (mem
                (infix_mngt
                  (infix_mngt int int)
                  (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                (t2tb3 eqt)
                (map1
                  (infix_mngt
                    (infix_mngt int int)
                    (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                  circuit1
                  (t2tb2 f)
                  (t2tb12 s)))
              (and
                (mem
                  circuit1
                  (infix_at
                    circuit1
                    (infix_mngt
                      (infix_mngt int int)
                      (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                    (t2tb40 g)
                    (t2tb3 eqt))
                  (t2tb12 s))
                (= (select f (tb2t13
                               (infix_at
                                 circuit1
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int)))
                                 (t2tb40 g)
                                 (t2tb3 eqt)))) eqt))))
          (and
            (p_bijective
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              circuit1
              (t2tb2 f)
              (t2tb12 s)
              (map1
                (infix_mngt
                  (infix_mngt int int)
                  (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                circuit1
                (t2tb2 f)
                (t2tb12 s)))
            (= (tb2t13
                 (inv_func
                   (infix_mngt
                     (infix_mngt int int)
                     (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                   circuit1
                   (t2tb2 f)
                   (t2tb12 s)
                   (map1
                     (infix_mngt
                       (infix_mngt int int)
                       (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                     circuit1
                     (t2tb2 f)
                     (t2tb12 s))
                   (t2tb3 b))) (tb2t13
                                 (infix_at
                                   circuit1
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt int int)))
                                   (t2tb40 g)
                                   (t2tb3 b))))))))))

;; set_bijective_inv
(assert
  (forall ((f (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) circuit)) (g (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (s (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (b circuit))
    (=>
      (mem
        circuit1
        (t2tb13 b)
        (map1
          circuit1
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          (t2tb40 f)
          (t2tb11 s)))
      (=>
        (forall ((e (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (eqt (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
          (=>
            (mem
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              (t2tb3 e)
              (t2tb11 s))
            (=>
              (mem
                (infix_mngt
                  (infix_mngt int int)
                  (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                (t2tb3 eqt)
                (t2tb11 s))
              (=>
                (not (= e eqt))
                (not
                  (= (tb2t13
                       (infix_at
                         circuit1
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt int int)))
                         (t2tb40 f)
                         (t2tb3 e))) (tb2t13
                                       (infix_at
                                         circuit1
                                         (infix_mngt
                                           (infix_mngt int int)
                                           (infix_mngt
                                             (infix_mngt int int)
                                             (infix_mngt int int)))
                                         (t2tb40 f)
                                         (t2tb3 eqt)))))))))
        (=>
          (forall ((eqt circuit))
            (=>
              (mem
                circuit1
                (t2tb13 eqt)
                (map1
                  circuit1
                  (infix_mngt
                    (infix_mngt int int)
                    (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                  (t2tb40 f)
                  (t2tb11 s)))
              (and
                (mem
                  (infix_mngt
                    (infix_mngt int int)
                    (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                  (t2tb3 (select g eqt))
                  (t2tb11 s))
                (= (tb2t13
                     (infix_at
                       circuit1
                       (infix_mngt
                         (infix_mngt int int)
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt int int)))
                       (t2tb40 f)
                       (t2tb3 (select g eqt)))) eqt))))
          (and
            (p_bijective
              circuit1
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              (t2tb40 f)
              (t2tb11 s)
              (map1
                circuit1
                (infix_mngt
                  (infix_mngt int int)
                  (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                (t2tb40 f)
                (t2tb11 s)))
            (= (tb2t3
                 (inv_func
                   circuit1
                   (infix_mngt
                     (infix_mngt int int)
                     (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                   (t2tb40 f)
                   (t2tb11 s)
                   (map1
                     circuit1
                     (infix_mngt
                       (infix_mngt int int)
                       (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                     (t2tb40 f)
                     (t2tb11 s))
                   (t2tb13 b))) (select g b))))))))

;; set_bijective_inv
(assert
  (forall ((f (Array (Array (Array Int Int) (Array Int Int)) (Array Int Int))) (g (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array (Array Int Int) (Array Int Int)))) (b (Array Int Int)))
    (=>
      (mem
        (infix_mngt int int)
        (t2tb7 b)
        (map1
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (t2tb28 f)
          (t2tb14 s)))
      (=>
        (forall ((e (Array (Array Int Int) (Array Int Int))) (eqt (Array (Array Int Int) (Array Int Int))))
          (=>
            (mem
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (t2tb5 e)
              (t2tb14 s))
            (=>
              (mem
                (infix_mngt (infix_mngt int int) (infix_mngt int int))
                (t2tb5 eqt)
                (t2tb14 s))
              (=>
                (not (= e eqt))
                (not
                  (= (tb2t7
                       (infix_at
                         (infix_mngt int int)
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt int int))
                         (t2tb28 f)
                         (t2tb5 e))) (tb2t7
                                       (infix_at
                                         (infix_mngt int int)
                                         (infix_mngt
                                           (infix_mngt int int)
                                           (infix_mngt int int))
                                         (t2tb28 f)
                                         (t2tb5 eqt)))))))))
        (=>
          (forall ((eqt (Array Int Int)))
            (=>
              (mem
                (infix_mngt int int)
                (t2tb7 eqt)
                (map1
                  (infix_mngt int int)
                  (infix_mngt (infix_mngt int int) (infix_mngt int int))
                  (t2tb28 f)
                  (t2tb14 s)))
              (and
                (mem
                  (infix_mngt (infix_mngt int int) (infix_mngt int int))
                  (t2tb5 (select g eqt))
                  (t2tb14 s))
                (= (tb2t7
                     (infix_at
                       (infix_mngt int int)
                       (infix_mngt (infix_mngt int int) (infix_mngt int int))
                       (t2tb28 f)
                       (t2tb5 (select g eqt)))) eqt))))
          (and
            (p_bijective
              (infix_mngt int int)
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (t2tb28 f)
              (t2tb14 s)
              (map1
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int))
                (t2tb28 f)
                (t2tb14 s)))
            (= (tb2t5
                 (inv_func
                   (infix_mngt int int)
                   (infix_mngt (infix_mngt int int) (infix_mngt int int))
                   (t2tb28 f)
                   (t2tb14 s)
                   (map1
                     (infix_mngt int int)
                     (infix_mngt (infix_mngt int int) (infix_mngt int int))
                     (t2tb28 f)
                     (t2tb14 s))
                   (t2tb7 b))) (select g b))))))))

;; set_bijective_inv
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (g (Array (Array (Array Int Int) (Array Int Int)) (Array Int Int))) (s (set (Array Int Int))) (b (Array (Array Int Int) (Array Int Int))))
    (=>
      (mem
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (t2tb5 b)
        (map1
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (infix_mngt int int)
          (t2tb3 f)
          (t2tb15 s)))
      (=>
        (forall ((e (Array Int Int)) (eqt (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
            (=>
              (mem (infix_mngt int int) (t2tb7 eqt) (t2tb15 s))
              (=> (not (= e eqt)) (not (= (select f e) (select f eqt)))))))
        (=>
          (forall ((eqt (Array (Array Int Int) (Array Int Int))))
            (=>
              (mem
                (infix_mngt (infix_mngt int int) (infix_mngt int int))
                (t2tb5 eqt)
                (map1
                  (infix_mngt (infix_mngt int int) (infix_mngt int int))
                  (infix_mngt int int)
                  (t2tb3 f)
                  (t2tb15 s)))
              (and
                (mem
                  (infix_mngt int int)
                  (infix_at
                    (infix_mngt int int)
                    (infix_mngt (infix_mngt int int) (infix_mngt int int))
                    (t2tb28 g)
                    (t2tb5 eqt))
                  (t2tb15 s))
                (= (select f (tb2t7
                               (infix_at
                                 (infix_mngt int int)
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt int int))
                                 (t2tb28 g)
                                 (t2tb5 eqt)))) eqt))))
          (and
            (p_bijective
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (infix_mngt int int)
              (t2tb3 f)
              (t2tb15 s)
              (map1
                (infix_mngt (infix_mngt int int) (infix_mngt int int))
                (infix_mngt int int)
                (t2tb3 f)
                (t2tb15 s)))
            (= (tb2t7
                 (inv_func
                   (infix_mngt (infix_mngt int int) (infix_mngt int int))
                   (infix_mngt int int)
                   (t2tb3 f)
                   (t2tb15 s)
                   (map1
                     (infix_mngt (infix_mngt int int) (infix_mngt int int))
                     (infix_mngt int int)
                     (t2tb3 f)
                     (t2tb15 s))
                   (t2tb5 b))) (tb2t7
                                 (infix_at
                                   (infix_mngt int int)
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int))
                                   (t2tb28 g)
                                   (t2tb5 b))))))))))

;; set_bijective_inv
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (g (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))) (b (Array Int Int)))
    (=>
      (mem
        (infix_mngt int int)
        (t2tb7 b)
        (map1 (infix_mngt int int) (infix_mngt int int) (t2tb5 f) (t2tb15 s)))
      (=>
        (forall ((e (Array Int Int)) (eqt (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
            (=>
              (mem (infix_mngt int int) (t2tb7 eqt) (t2tb15 s))
              (=> (not (= e eqt)) (not (= (select f e) (select f eqt)))))))
        (=>
          (forall ((eqt (Array Int Int)))
            (=>
              (mem
                (infix_mngt int int)
                (t2tb7 eqt)
                (map1
                  (infix_mngt int int)
                  (infix_mngt int int)
                  (t2tb5 f)
                  (t2tb15 s)))
              (and
                (mem (infix_mngt int int) (t2tb7 (select g eqt)) (t2tb15 s))
                (= (select f (select g eqt)) eqt))))
          (and
            (p_bijective
              (infix_mngt int int)
              (infix_mngt int int)
              (t2tb5 f)
              (t2tb15 s)
              (map1
                (infix_mngt int int)
                (infix_mngt int int)
                (t2tb5 f)
                (t2tb15 s)))
            (= (tb2t7
                 (inv_func
                   (infix_mngt int int)
                   (infix_mngt int int)
                   (t2tb5 f)
                   (t2tb15 s)
                   (map1
                     (infix_mngt int int)
                     (infix_mngt int int)
                     (t2tb5 f)
                     (t2tb15 s))
                   (t2tb7 b))) (select g b))))))))

;; set_bijective_inv
(assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (s (set Int)) (b Int))
    (=>
      (mem int (t2tb8 b) (map1 int int (t2tb7 f) (t2tb16 s)))
      (=>
        (forall ((e Int) (eqt Int))
          (=>
            (mem int (t2tb8 e) (t2tb16 s))
            (=>
              (mem int (t2tb8 eqt) (t2tb16 s))
              (=> (not (= e eqt)) (not (= (select f e) (select f eqt)))))))
        (=>
          (forall ((eqt Int))
            (=>
              (mem int (t2tb8 eqt) (map1 int int (t2tb7 f) (t2tb16 s)))
              (and
                (mem int (t2tb8 (select g eqt)) (t2tb16 s))
                (= (select f (select g eqt)) eqt))))
          (and
            (p_bijective1 f s (tb2t16 (map1 int int (t2tb7 f) (t2tb16 s))))
            (= (tb2t8
                 (inv_func
                   int
                   int
                   (t2tb7 f)
                   (t2tb16 s)
                   (map1 int int (t2tb7 f) (t2tb16 s))
                   (t2tb8 b))) (select g b))))))))

;; set_bijective_inv
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (g uni) (s uni) (b1 uni))
      (=>
        (mem b b1 (map1 b a f s))
        (=>
          (forall ((e uni) (eqt uni))
            (=>
              (sort a e)
              (=>
                (sort a eqt)
                (=>
                  (mem a e s)
                  (=>
                    (mem a eqt s)
                    (=>
                      (not (= e eqt))
                      (not (= (infix_at b a f e) (infix_at b a f eqt)))))))))
          (=>
            (forall ((eqt uni))
              (=>
                (sort b eqt)
                (=>
                  (mem b eqt (map1 b a f s))
                  (and
                    (mem a (infix_at a b g eqt) s)
                    (= (infix_at b a f (infix_at a b g eqt)) eqt)))))
            (and
              (p_bijective b a f s (map1 b a f s))
              (= (inv_func b a f s (map1 b a f s) b1) (infix_at a b g b1)))))))))

;; set_bij_inv
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (g (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) circuit)) (s (set circuit)))
    (=>
      (forall ((e circuit) (eqt circuit))
        (=>
          (mem circuit1 (t2tb13 e) (t2tb12 s))
          (=>
            (mem circuit1 (t2tb13 eqt) (t2tb12 s))
            (=> (not (= e eqt)) (not (= (select f e) (select f eqt)))))))
      (=>
        (forall ((eqt (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
          (=>
            (mem
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              (t2tb3 eqt)
              (map1
                (infix_mngt
                  (infix_mngt int int)
                  (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                circuit1
                (t2tb2 f)
                (t2tb12 s)))
            (and
              (mem
                circuit1
                (infix_at
                  circuit1
                  (infix_mngt
                    (infix_mngt int int)
                    (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                  (t2tb40 g)
                  (t2tb3 eqt))
                (t2tb12 s))
              (= (select f (tb2t13
                             (infix_at
                               circuit1
                               (infix_mngt
                                 (infix_mngt int int)
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt int int)))
                               (t2tb40 g)
                               (t2tb3 eqt)))) eqt))))
        (and
          (p_bijective
            (infix_mngt
              (infix_mngt int int)
              (infix_mngt (infix_mngt int int) (infix_mngt int int)))
            circuit1
            (t2tb2 f)
            (t2tb12 s)
            (map1
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              circuit1
              (t2tb2 f)
              (t2tb12 s)))
          (and
            (p_bijective
              circuit1
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              (t2tb40 g)
              (map1
                (infix_mngt
                  (infix_mngt int int)
                  (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                circuit1
                (t2tb2 f)
                (t2tb12 s))
              (t2tb12 s))
            (forall ((b (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
              (=>
                (mem
                  (infix_mngt
                    (infix_mngt int int)
                    (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                  (t2tb3 b)
                  (map1
                    (infix_mngt
                      (infix_mngt int int)
                      (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                    circuit1
                    (t2tb2 f)
                    (t2tb12 s)))
                (= (tb2t13
                     (inv_func
                       (infix_mngt
                         (infix_mngt int int)
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt int int)))
                       circuit1
                       (t2tb2 f)
                       (t2tb12 s)
                       (map1
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt int int)))
                         circuit1
                         (t2tb2 f)
                         (t2tb12 s))
                       (t2tb3 b))) (tb2t13
                                     (infix_at
                                       circuit1
                                       (infix_mngt
                                         (infix_mngt int int)
                                         (infix_mngt
                                           (infix_mngt int int)
                                           (infix_mngt int int)))
                                       (t2tb40 g)
                                       (t2tb3 b))))))))))))

;; set_bij_inv
(assert
  (forall ((f (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) circuit)) (g (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (s (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (=>
      (forall ((e (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (eqt (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
        (=>
          (mem
            (infix_mngt
              (infix_mngt int int)
              (infix_mngt (infix_mngt int int) (infix_mngt int int)))
            (t2tb3 e)
            (t2tb11 s))
          (=>
            (mem
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              (t2tb3 eqt)
              (t2tb11 s))
            (=>
              (not (= e eqt))
              (not
                (= (tb2t13
                     (infix_at
                       circuit1
                       (infix_mngt
                         (infix_mngt int int)
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt int int)))
                       (t2tb40 f)
                       (t2tb3 e))) (tb2t13
                                     (infix_at
                                       circuit1
                                       (infix_mngt
                                         (infix_mngt int int)
                                         (infix_mngt
                                           (infix_mngt int int)
                                           (infix_mngt int int)))
                                       (t2tb40 f)
                                       (t2tb3 eqt)))))))))
      (=>
        (forall ((eqt circuit))
          (=>
            (mem
              circuit1
              (t2tb13 eqt)
              (map1
                circuit1
                (infix_mngt
                  (infix_mngt int int)
                  (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                (t2tb40 f)
                (t2tb11 s)))
            (and
              (mem
                (infix_mngt
                  (infix_mngt int int)
                  (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                (t2tb3 (select g eqt))
                (t2tb11 s))
              (= (tb2t13
                   (infix_at
                     circuit1
                     (infix_mngt
                       (infix_mngt int int)
                       (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                     (t2tb40 f)
                     (t2tb3 (select g eqt)))) eqt))))
        (and
          (p_bijective
            circuit1
            (infix_mngt
              (infix_mngt int int)
              (infix_mngt (infix_mngt int int) (infix_mngt int int)))
            (t2tb40 f)
            (t2tb11 s)
            (map1
              circuit1
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              (t2tb40 f)
              (t2tb11 s)))
          (and
            (p_bijective
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              circuit1
              (t2tb2 g)
              (map1
                circuit1
                (infix_mngt
                  (infix_mngt int int)
                  (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                (t2tb40 f)
                (t2tb11 s))
              (t2tb11 s))
            (forall ((b circuit))
              (=>
                (mem
                  circuit1
                  (t2tb13 b)
                  (map1
                    circuit1
                    (infix_mngt
                      (infix_mngt int int)
                      (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                    (t2tb40 f)
                    (t2tb11 s)))
                (= (tb2t3
                     (inv_func
                       circuit1
                       (infix_mngt
                         (infix_mngt int int)
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt int int)))
                       (t2tb40 f)
                       (t2tb11 s)
                       (map1
                         circuit1
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt int int)))
                         (t2tb40 f)
                         (t2tb11 s))
                       (t2tb13 b))) (select g b))))))))))

;; set_bij_inv
(assert
  (forall ((f (Array (Array (Array Int Int) (Array Int Int)) (Array Int Int))) (g (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array (Array Int Int) (Array Int Int)))))
    (=>
      (forall ((e (Array (Array Int Int) (Array Int Int))) (eqt (Array (Array Int Int) (Array Int Int))))
        (=>
          (mem
            (infix_mngt (infix_mngt int int) (infix_mngt int int))
            (t2tb5 e)
            (t2tb14 s))
          (=>
            (mem
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (t2tb5 eqt)
              (t2tb14 s))
            (=>
              (not (= e eqt))
              (not
                (= (tb2t7
                     (infix_at
                       (infix_mngt int int)
                       (infix_mngt (infix_mngt int int) (infix_mngt int int))
                       (t2tb28 f)
                       (t2tb5 e))) (tb2t7
                                     (infix_at
                                       (infix_mngt int int)
                                       (infix_mngt
                                         (infix_mngt int int)
                                         (infix_mngt int int))
                                       (t2tb28 f)
                                       (t2tb5 eqt)))))))))
      (=>
        (forall ((eqt (Array Int Int)))
          (=>
            (mem
              (infix_mngt int int)
              (t2tb7 eqt)
              (map1
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int))
                (t2tb28 f)
                (t2tb14 s)))
            (and
              (mem
                (infix_mngt (infix_mngt int int) (infix_mngt int int))
                (t2tb5 (select g eqt))
                (t2tb14 s))
              (= (tb2t7
                   (infix_at
                     (infix_mngt int int)
                     (infix_mngt (infix_mngt int int) (infix_mngt int int))
                     (t2tb28 f)
                     (t2tb5 (select g eqt)))) eqt))))
        (and
          (p_bijective
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int))
            (t2tb28 f)
            (t2tb14 s)
            (map1
              (infix_mngt int int)
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (t2tb28 f)
              (t2tb14 s)))
          (and
            (p_bijective
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (infix_mngt int int)
              (t2tb3 g)
              (map1
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int))
                (t2tb28 f)
                (t2tb14 s))
              (t2tb14 s))
            (forall ((b (Array Int Int)))
              (=>
                (mem
                  (infix_mngt int int)
                  (t2tb7 b)
                  (map1
                    (infix_mngt int int)
                    (infix_mngt (infix_mngt int int) (infix_mngt int int))
                    (t2tb28 f)
                    (t2tb14 s)))
                (= (tb2t5
                     (inv_func
                       (infix_mngt int int)
                       (infix_mngt (infix_mngt int int) (infix_mngt int int))
                       (t2tb28 f)
                       (t2tb14 s)
                       (map1
                         (infix_mngt int int)
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt int int))
                         (t2tb28 f)
                         (t2tb14 s))
                       (t2tb7 b))) (select g b))))))))))

;; set_bij_inv
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (g (Array (Array (Array Int Int) (Array Int Int)) (Array Int Int))) (s (set (Array Int Int))))
    (=>
      (forall ((e (Array Int Int)) (eqt (Array Int Int)))
        (=>
          (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
          (=>
            (mem (infix_mngt int int) (t2tb7 eqt) (t2tb15 s))
            (=> (not (= e eqt)) (not (= (select f e) (select f eqt)))))))
      (=>
        (forall ((eqt (Array (Array Int Int) (Array Int Int))))
          (=>
            (mem
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (t2tb5 eqt)
              (map1
                (infix_mngt (infix_mngt int int) (infix_mngt int int))
                (infix_mngt int int)
                (t2tb3 f)
                (t2tb15 s)))
            (and
              (mem
                (infix_mngt int int)
                (infix_at
                  (infix_mngt int int)
                  (infix_mngt (infix_mngt int int) (infix_mngt int int))
                  (t2tb28 g)
                  (t2tb5 eqt))
                (t2tb15 s))
              (= (select f (tb2t7
                             (infix_at
                               (infix_mngt int int)
                               (infix_mngt
                                 (infix_mngt int int)
                                 (infix_mngt int int))
                               (t2tb28 g)
                               (t2tb5 eqt)))) eqt))))
        (and
          (p_bijective
            (infix_mngt (infix_mngt int int) (infix_mngt int int))
            (infix_mngt int int)
            (t2tb3 f)
            (t2tb15 s)
            (map1
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (infix_mngt int int)
              (t2tb3 f)
              (t2tb15 s)))
          (and
            (p_bijective
              (infix_mngt int int)
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (t2tb28 g)
              (map1
                (infix_mngt (infix_mngt int int) (infix_mngt int int))
                (infix_mngt int int)
                (t2tb3 f)
                (t2tb15 s))
              (t2tb15 s))
            (forall ((b (Array (Array Int Int) (Array Int Int))))
              (=>
                (mem
                  (infix_mngt (infix_mngt int int) (infix_mngt int int))
                  (t2tb5 b)
                  (map1
                    (infix_mngt (infix_mngt int int) (infix_mngt int int))
                    (infix_mngt int int)
                    (t2tb3 f)
                    (t2tb15 s)))
                (= (tb2t7
                     (inv_func
                       (infix_mngt (infix_mngt int int) (infix_mngt int int))
                       (infix_mngt int int)
                       (t2tb3 f)
                       (t2tb15 s)
                       (map1
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt int int))
                         (infix_mngt int int)
                         (t2tb3 f)
                         (t2tb15 s))
                       (t2tb5 b))) (tb2t7
                                     (infix_at
                                       (infix_mngt int int)
                                       (infix_mngt
                                         (infix_mngt int int)
                                         (infix_mngt int int))
                                       (t2tb28 g)
                                       (t2tb5 b))))))))))))

;; set_bij_inv
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (g (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))))
    (=>
      (forall ((e (Array Int Int)) (eqt (Array Int Int)))
        (=>
          (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
          (=>
            (mem (infix_mngt int int) (t2tb7 eqt) (t2tb15 s))
            (=> (not (= e eqt)) (not (= (select f e) (select f eqt)))))))
      (=>
        (forall ((eqt (Array Int Int)))
          (=>
            (mem
              (infix_mngt int int)
              (t2tb7 eqt)
              (map1
                (infix_mngt int int)
                (infix_mngt int int)
                (t2tb5 f)
                (t2tb15 s)))
            (and
              (mem (infix_mngt int int) (t2tb7 (select g eqt)) (t2tb15 s))
              (= (select f (select g eqt)) eqt))))
        (and
          (p_bijective
            (infix_mngt int int)
            (infix_mngt int int)
            (t2tb5 f)
            (t2tb15 s)
            (map1
              (infix_mngt int int)
              (infix_mngt int int)
              (t2tb5 f)
              (t2tb15 s)))
          (and
            (p_bijective
              (infix_mngt int int)
              (infix_mngt int int)
              (t2tb5 g)
              (map1
                (infix_mngt int int)
                (infix_mngt int int)
                (t2tb5 f)
                (t2tb15 s))
              (t2tb15 s))
            (forall ((b (Array Int Int)))
              (=>
                (mem
                  (infix_mngt int int)
                  (t2tb7 b)
                  (map1
                    (infix_mngt int int)
                    (infix_mngt int int)
                    (t2tb5 f)
                    (t2tb15 s)))
                (= (tb2t7
                     (inv_func
                       (infix_mngt int int)
                       (infix_mngt int int)
                       (t2tb5 f)
                       (t2tb15 s)
                       (map1
                         (infix_mngt int int)
                         (infix_mngt int int)
                         (t2tb5 f)
                         (t2tb15 s))
                       (t2tb7 b))) (select g b))))))))))

;; set_bij_inv
(assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (s (set Int)))
    (=>
      (forall ((e Int) (eqt Int))
        (=>
          (mem int (t2tb8 e) (t2tb16 s))
          (=>
            (mem int (t2tb8 eqt) (t2tb16 s))
            (=> (not (= e eqt)) (not (= (select f e) (select f eqt)))))))
      (=>
        (forall ((eqt Int))
          (=>
            (mem int (t2tb8 eqt) (map1 int int (t2tb7 f) (t2tb16 s)))
            (and
              (mem int (t2tb8 (select g eqt)) (t2tb16 s))
              (= (select f (select g eqt)) eqt))))
        (and
          (p_bijective1 f s (tb2t16 (map1 int int (t2tb7 f) (t2tb16 s))))
          (and
            (p_bijective1 g (tb2t16 (map1 int int (t2tb7 f) (t2tb16 s))) s)
            (forall ((b Int))
              (=>
                (mem int (t2tb8 b) (map1 int int (t2tb7 f) (t2tb16 s)))
                (= (tb2t8
                     (inv_func
                       int
                       int
                       (t2tb7 f)
                       (t2tb16 s)
                       (map1 int int (t2tb7 f) (t2tb16 s))
                       (t2tb8 b))) (select g b))))))))))

;; set_bij_inv
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (g uni) (s uni))
      (=>
        (forall ((e uni) (eqt uni))
          (=>
            (sort a e)
            (=>
              (sort a eqt)
              (=>
                (mem a e s)
                (=>
                  (mem a eqt s)
                  (=>
                    (not (= e eqt))
                    (not (= (infix_at b a f e) (infix_at b a f eqt)))))))))
        (=>
          (forall ((eqt uni))
            (=>
              (sort b eqt)
              (=>
                (mem b eqt (map1 b a f s))
                (and
                  (mem a (infix_at a b g eqt) s)
                  (= (infix_at b a f (infix_at a b g eqt)) eqt)))))
          (and
            (p_bijective b a f s (map1 b a f s))
            (and
              (p_bijective a b g (map1 b a f s) s)
              (forall ((b1 uni))
                (=>
                  (mem b b1 (map1 b a f s))
                  (= (inv_func b a f s (map1 b a f s) b1) (infix_at a b g b1)))))))))))

;; inv_f
(declare-fun inv_f (ty
  ty
  uni
  uni
  uni) uni)

;; inv_f_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni) (x2 uni))
      (sort (infix_mngt b a) (inv_f b a x x1 x2)))))

;; inv_f'spec
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (s (set circuit)) (sqt (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (=>
      (p_bijective
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        circuit1
        (t2tb2 f)
        (t2tb12 s)
        (t2tb11 sqt))
      (and
        (forall ((e (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
          (=>
            (mem
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              (t2tb3 e)
              (t2tb11 sqt))
            (mem
              circuit1
              (infix_at
                circuit1
                (infix_mngt
                  (infix_mngt int int)
                  (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                (inv_f
                  (infix_mngt
                    (infix_mngt int int)
                    (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                  circuit1
                  (t2tb2 f)
                  (t2tb12 s)
                  (t2tb11 sqt))
                (t2tb3 e))
              (t2tb12 s))))
        (and
          (forall ((e (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
            (=>
              (mem
                (infix_mngt
                  (infix_mngt int int)
                  (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                (t2tb3 e)
                (t2tb11 sqt))
              (= (select f (tb2t13
                             (infix_at
                               circuit1
                               (infix_mngt
                                 (infix_mngt int int)
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt int int)))
                               (inv_f
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int)))
                                 circuit1
                                 (t2tb2 f)
                                 (t2tb12 s)
                                 (t2tb11 sqt))
                               (t2tb3 e)))) e)))
          (p_bijective
            circuit1
            (infix_mngt
              (infix_mngt int int)
              (infix_mngt (infix_mngt int int) (infix_mngt int int)))
            (inv_f
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              circuit1
              (t2tb2 f)
              (t2tb12 s)
              (t2tb11 sqt))
            (t2tb11 sqt)
            (t2tb12 s)))))))

;; inv_f'spec
(assert
  (forall ((f (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) circuit)) (s (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (sqt (set circuit)))
    (=>
      (p_bijective
        circuit1
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        (t2tb40 f)
        (t2tb11 s)
        (t2tb12 sqt))
      (and
        (forall ((e circuit))
          (=>
            (mem circuit1 (t2tb13 e) (t2tb12 sqt))
            (mem
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              (t2tb3
                (select (tb2t2
                          (inv_f
                            circuit1
                            (infix_mngt
                              (infix_mngt int int)
                              (infix_mngt
                                (infix_mngt int int)
                                (infix_mngt int int)))
                            (t2tb40 f)
                            (t2tb11 s)
                            (t2tb12 sqt))) e))
              (t2tb11 s))))
        (and
          (forall ((e circuit))
            (=>
              (mem circuit1 (t2tb13 e) (t2tb12 sqt))
              (= (tb2t13
                   (infix_at
                     circuit1
                     (infix_mngt
                       (infix_mngt int int)
                       (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                     (t2tb40 f)
                     (t2tb3
                       (select (tb2t2
                                 (inv_f
                                   circuit1
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt int int)))
                                   (t2tb40 f)
                                   (t2tb11 s)
                                   (t2tb12 sqt))) e)))) e)))
          (p_bijective
            (infix_mngt
              (infix_mngt int int)
              (infix_mngt (infix_mngt int int) (infix_mngt int int)))
            circuit1
            (inv_f
              circuit1
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              (t2tb40 f)
              (t2tb11 s)
              (t2tb12 sqt))
            (t2tb12 sqt)
            (t2tb11 s)))))))

;; inv_f'spec
(assert
  (forall ((f (Array (Array (Array Int Int) (Array Int Int)) (Array Int Int))) (s (set (Array (Array Int Int) (Array Int Int)))) (sqt (set (Array Int Int))))
    (=>
      (p_bijective
        (infix_mngt int int)
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (t2tb28 f)
        (t2tb14 s)
        (t2tb15 sqt))
      (and
        (forall ((e (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 e) (t2tb15 sqt))
            (mem
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (t2tb5
                (select (tb2t3
                          (inv_f
                            (infix_mngt int int)
                            (infix_mngt
                              (infix_mngt int int)
                              (infix_mngt int int))
                            (t2tb28 f)
                            (t2tb14 s)
                            (t2tb15 sqt))) e))
              (t2tb14 s))))
        (and
          (forall ((e (Array Int Int)))
            (=>
              (mem (infix_mngt int int) (t2tb7 e) (t2tb15 sqt))
              (= (tb2t7
                   (infix_at
                     (infix_mngt int int)
                     (infix_mngt (infix_mngt int int) (infix_mngt int int))
                     (t2tb28 f)
                     (t2tb5
                       (select (tb2t3
                                 (inv_f
                                   (infix_mngt int int)
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt int int))
                                   (t2tb28 f)
                                   (t2tb14 s)
                                   (t2tb15 sqt))) e)))) e)))
          (p_bijective
            (infix_mngt (infix_mngt int int) (infix_mngt int int))
            (infix_mngt int int)
            (inv_f
              (infix_mngt int int)
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (t2tb28 f)
              (t2tb14 s)
              (t2tb15 sqt))
            (t2tb15 sqt)
            (t2tb14 s)))))))

;; inv_f'spec
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (sqt (set (Array (Array Int Int) (Array Int Int)))))
    (=>
      (p_bijective
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (infix_mngt int int)
        (t2tb3 f)
        (t2tb15 s)
        (t2tb14 sqt))
      (and
        (forall ((e (Array (Array Int Int) (Array Int Int))))
          (=>
            (mem
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (t2tb5 e)
              (t2tb14 sqt))
            (mem
              (infix_mngt int int)
              (infix_at
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int))
                (inv_f
                  (infix_mngt (infix_mngt int int) (infix_mngt int int))
                  (infix_mngt int int)
                  (t2tb3 f)
                  (t2tb15 s)
                  (t2tb14 sqt))
                (t2tb5 e))
              (t2tb15 s))))
        (and
          (forall ((e (Array (Array Int Int) (Array Int Int))))
            (=>
              (mem
                (infix_mngt (infix_mngt int int) (infix_mngt int int))
                (t2tb5 e)
                (t2tb14 sqt))
              (= (select f (tb2t7
                             (infix_at
                               (infix_mngt int int)
                               (infix_mngt
                                 (infix_mngt int int)
                                 (infix_mngt int int))
                               (inv_f
                                 (infix_mngt
                                   (infix_mngt int int)
                                   (infix_mngt int int))
                                 (infix_mngt int int)
                                 (t2tb3 f)
                                 (t2tb15 s)
                                 (t2tb14 sqt))
                               (t2tb5 e)))) e)))
          (p_bijective
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int))
            (inv_f
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (infix_mngt int int)
              (t2tb3 f)
              (t2tb15 s)
              (t2tb14 sqt))
            (t2tb14 sqt)
            (t2tb15 s)))))))

;; inv_f'spec
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))) (sqt (set (Array Int Int))))
    (=>
      (p_bijective
        (infix_mngt int int)
        (infix_mngt int int)
        (t2tb5 f)
        (t2tb15 s)
        (t2tb15 sqt))
      (and
        (forall ((e (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 e) (t2tb15 sqt))
            (mem
              (infix_mngt int int)
              (t2tb7
                (select (tb2t5
                          (inv_f
                            (infix_mngt int int)
                            (infix_mngt int int)
                            (t2tb5 f)
                            (t2tb15 s)
                            (t2tb15 sqt))) e))
              (t2tb15 s))))
        (and
          (forall ((e (Array Int Int)))
            (=>
              (mem (infix_mngt int int) (t2tb7 e) (t2tb15 sqt))
              (= (select f (select (tb2t5
                                     (inv_f
                                       (infix_mngt int int)
                                       (infix_mngt int int)
                                       (t2tb5 f)
                                       (t2tb15 s)
                                       (t2tb15 sqt))) e)) e)))
          (p_bijective
            (infix_mngt int int)
            (infix_mngt int int)
            (inv_f
              (infix_mngt int int)
              (infix_mngt int int)
              (t2tb5 f)
              (t2tb15 s)
              (t2tb15 sqt))
            (t2tb15 sqt)
            (t2tb15 s)))))))

;; inv_f'spec
(assert
  (forall ((f (Array Int Int)) (s (set Int)) (sqt (set Int)))
    (=>
      (p_bijective1 f s sqt)
      (and
        (forall ((e Int))
          (=>
            (mem int (t2tb8 e) (t2tb16 sqt))
            (mem
              int
              (t2tb8
                (select (tb2t7
                          (inv_f int int (t2tb7 f) (t2tb16 s) (t2tb16 sqt))) e))
              (t2tb16 s))))
        (and
          (forall ((e Int))
            (=>
              (mem int (t2tb8 e) (t2tb16 sqt))
              (= (select f (select (tb2t7
                                     (inv_f
                                       int
                                       int
                                       (t2tb7 f)
                                       (t2tb16 s)
                                       (t2tb16 sqt))) e)) e)))
          (p_bijective1
            (tb2t7 (inv_f int int (t2tb7 f) (t2tb16 s) (t2tb16 sqt)))
            sqt
            s))))))

;; inv_f'spec
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (sqt uni))
      (=>
        (p_bijective b a f s sqt)
        (and
          (forall ((e uni))
            (=> (mem b e sqt) (mem a (infix_at a b (inv_f b a f s sqt) e) s)))
          (and
            (forall ((e uni))
              (=>
                (sort b e)
                (=>
                  (mem b e sqt)
                  (= (infix_at b a f (infix_at a b (inv_f b a f s sqt) e)) e))))
            (p_bijective a b (inv_f b a f s sqt) sqt s)))))))

;; inv_f_back
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (s (set circuit)) (sqt (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (e (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (=>
      (mem
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        (t2tb3 e)
        (t2tb11 sqt))
      (=>
        (p_bijective
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          circuit1
          (t2tb2 f)
          (t2tb12 s)
          (t2tb11 sqt))
        (= (select f (tb2t13
                       (infix_at
                         circuit1
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt int int)))
                         (inv_f
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt
                               (infix_mngt int int)
                               (infix_mngt int int)))
                           circuit1
                           (t2tb2 f)
                           (t2tb12 s)
                           (t2tb11 sqt))
                         (t2tb3 e)))) e)))))

;; inv_f_back
(assert
  (forall ((f (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) circuit)) (s (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (sqt (set circuit)) (e circuit))
    (=>
      (mem circuit1 (t2tb13 e) (t2tb12 sqt))
      (=>
        (p_bijective
          circuit1
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          (t2tb40 f)
          (t2tb11 s)
          (t2tb12 sqt))
        (= (tb2t13
             (infix_at
               circuit1
               (infix_mngt
                 (infix_mngt int int)
                 (infix_mngt (infix_mngt int int) (infix_mngt int int)))
               (t2tb40 f)
               (t2tb3
                 (select (tb2t2
                           (inv_f
                             circuit1
                             (infix_mngt
                               (infix_mngt int int)
                               (infix_mngt
                                 (infix_mngt int int)
                                 (infix_mngt int int)))
                             (t2tb40 f)
                             (t2tb11 s)
                             (t2tb12 sqt))) e)))) e)))))

;; inv_f_back
(assert
  (forall ((f (Array (Array (Array Int Int) (Array Int Int)) (Array Int Int))) (s (set (Array (Array Int Int) (Array Int Int)))) (sqt (set (Array Int Int))) (e (Array Int Int)))
    (=>
      (mem (infix_mngt int int) (t2tb7 e) (t2tb15 sqt))
      (=>
        (p_bijective
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (t2tb28 f)
          (t2tb14 s)
          (t2tb15 sqt))
        (= (tb2t7
             (infix_at
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int))
               (t2tb28 f)
               (t2tb5
                 (select (tb2t3
                           (inv_f
                             (infix_mngt int int)
                             (infix_mngt
                               (infix_mngt int int)
                               (infix_mngt int int))
                             (t2tb28 f)
                             (t2tb14 s)
                             (t2tb15 sqt))) e)))) e)))))

;; inv_f_back
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (sqt (set (Array (Array Int Int) (Array Int Int)))) (e (Array (Array Int Int) (Array Int Int))))
    (=>
      (mem
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (t2tb5 e)
        (t2tb14 sqt))
      (=>
        (p_bijective
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (infix_mngt int int)
          (t2tb3 f)
          (t2tb15 s)
          (t2tb14 sqt))
        (= (select f (tb2t7
                       (infix_at
                         (infix_mngt int int)
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt int int))
                         (inv_f
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt int int))
                           (infix_mngt int int)
                           (t2tb3 f)
                           (t2tb15 s)
                           (t2tb14 sqt))
                         (t2tb5 e)))) e)))))

;; inv_f_back
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))) (sqt (set (Array Int Int))) (e (Array Int Int)))
    (=>
      (mem (infix_mngt int int) (t2tb7 e) (t2tb15 sqt))
      (=>
        (p_bijective
          (infix_mngt int int)
          (infix_mngt int int)
          (t2tb5 f)
          (t2tb15 s)
          (t2tb15 sqt))
        (= (select f (select (tb2t5
                               (inv_f
                                 (infix_mngt int int)
                                 (infix_mngt int int)
                                 (t2tb5 f)
                                 (t2tb15 s)
                                 (t2tb15 sqt))) e)) e)))))

;; inv_f_back
(assert
  (forall ((f (Array Int Int)) (s (set Int)) (sqt (set Int)) (e Int))
    (=>
      (mem int (t2tb8 e) (t2tb16 sqt))
      (=>
        (p_bijective1 f s sqt)
        (= (select f (select (tb2t7
                               (inv_f
                                 int
                                 int
                                 (t2tb7 f)
                                 (t2tb16 s)
                                 (t2tb16 sqt))) e)) e)))))

;; inv_f_back
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (sqt uni) (e uni))
      (=>
        (sort b e)
        (=>
          (mem b e sqt)
          (=>
            (p_bijective b a f s sqt)
            (= (infix_at b a f (infix_at a b (inv_f b a f s sqt) e)) e)))))))

;; inv_f_back_rev
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (s (set circuit)) (sqt (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (e circuit))
    (=>
      (mem circuit1 (t2tb13 e) (t2tb12 s))
      (=>
        (p_bijective
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          circuit1
          (t2tb2 f)
          (t2tb12 s)
          (t2tb11 sqt))
        (= (tb2t13
             (infix_at
               circuit1
               (infix_mngt
                 (infix_mngt int int)
                 (infix_mngt (infix_mngt int int) (infix_mngt int int)))
               (inv_f
                 (infix_mngt
                   (infix_mngt int int)
                   (infix_mngt (infix_mngt int int) (infix_mngt int int)))
                 circuit1
                 (t2tb2 f)
                 (t2tb12 s)
                 (t2tb11 sqt))
               (t2tb3 (select f e)))) e)))))

;; inv_f_back_rev
(assert
  (forall ((f (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) circuit)) (s (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (sqt (set circuit)) (e (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))
    (=>
      (mem
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        (t2tb3 e)
        (t2tb11 s))
      (=>
        (p_bijective
          circuit1
          (infix_mngt
            (infix_mngt int int)
            (infix_mngt (infix_mngt int int) (infix_mngt int int)))
          (t2tb40 f)
          (t2tb11 s)
          (t2tb12 sqt))
        (= (select (tb2t2
                     (inv_f
                       circuit1
                       (infix_mngt
                         (infix_mngt int int)
                         (infix_mngt
                           (infix_mngt int int)
                           (infix_mngt int int)))
                       (t2tb40 f)
                       (t2tb11 s)
                       (t2tb12 sqt))) (tb2t13
                                        (infix_at
                                          circuit1
                                          (infix_mngt
                                            (infix_mngt int int)
                                            (infix_mngt
                                              (infix_mngt int int)
                                              (infix_mngt int int)))
                                          (t2tb40 f)
                                          (t2tb3 e)))) e)))))

;; inv_f_back_rev
(assert
  (forall ((f (Array (Array (Array Int Int) (Array Int Int)) (Array Int Int))) (s (set (Array (Array Int Int) (Array Int Int)))) (sqt (set (Array Int Int))) (e (Array (Array Int Int) (Array Int Int))))
    (=>
      (mem
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (t2tb5 e)
        (t2tb14 s))
      (=>
        (p_bijective
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (t2tb28 f)
          (t2tb14 s)
          (t2tb15 sqt))
        (= (select (tb2t3
                     (inv_f
                       (infix_mngt int int)
                       (infix_mngt (infix_mngt int int) (infix_mngt int int))
                       (t2tb28 f)
                       (t2tb14 s)
                       (t2tb15 sqt))) (tb2t7
                                        (infix_at
                                          (infix_mngt int int)
                                          (infix_mngt
                                            (infix_mngt int int)
                                            (infix_mngt int int))
                                          (t2tb28 f)
                                          (t2tb5 e)))) e)))))

;; inv_f_back_rev
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (sqt (set (Array (Array Int Int) (Array Int Int)))) (e (Array Int Int)))
    (=>
      (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
      (=>
        (p_bijective
          (infix_mngt (infix_mngt int int) (infix_mngt int int))
          (infix_mngt int int)
          (t2tb3 f)
          (t2tb15 s)
          (t2tb14 sqt))
        (= (tb2t7
             (infix_at
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int))
               (inv_f
                 (infix_mngt (infix_mngt int int) (infix_mngt int int))
                 (infix_mngt int int)
                 (t2tb3 f)
                 (t2tb15 s)
                 (t2tb14 sqt))
               (t2tb5 (select f e)))) e)))))

;; inv_f_back_rev
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))) (sqt (set (Array Int Int))) (e (Array Int Int)))
    (=>
      (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
      (=>
        (p_bijective
          (infix_mngt int int)
          (infix_mngt int int)
          (t2tb5 f)
          (t2tb15 s)
          (t2tb15 sqt))
        (= (select (tb2t5
                     (inv_f
                       (infix_mngt int int)
                       (infix_mngt int int)
                       (t2tb5 f)
                       (t2tb15 s)
                       (t2tb15 sqt))) (select f e)) e)))))

;; inv_f_back_rev
(assert
  (forall ((f (Array Int Int)) (s (set Int)) (sqt (set Int)) (e Int))
    (=>
      (mem int (t2tb8 e) (t2tb16 s))
      (=>
        (p_bijective1 f s sqt)
        (= (select (tb2t7 (inv_f int int (t2tb7 f) (t2tb16 s) (t2tb16 sqt))) (select f e)) e)))))

;; inv_f_back_rev
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (sqt uni) (e uni))
      (=>
        (sort a e)
        (=>
          (mem a e s)
          (=>
            (p_bijective b a f s sqt)
            (= (infix_at a b (inv_f b a f s sqt) (infix_at b a f e)) e)))))))

;; injective_is_bijective
(assert
  (forall ((f (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (s (set circuit)) (sqt (set (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (=>
      (p_injective
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        circuit1
        (t2tb2 f)
        (t2tb12 s))
      (=>
        (forall ((e circuit))
          (=>
            (mem circuit1 (t2tb13 e) (t2tb12 s))
            (mem
              (infix_mngt
                (infix_mngt int int)
                (infix_mngt (infix_mngt int int) (infix_mngt int int)))
              (t2tb3 (select f e))
              (t2tb11 sqt))))
        (=>
          (= (cardinal circuit1 (t2tb12 s)) (cardinal
                                              (infix_mngt
                                                (infix_mngt int int)
                                                (infix_mngt
                                                  (infix_mngt int int)
                                                  (infix_mngt int int)))
                                              (t2tb11 sqt)))
          (p_bijective
            (infix_mngt
              (infix_mngt int int)
              (infix_mngt (infix_mngt int int) (infix_mngt int int)))
            circuit1
            (t2tb2 f)
            (t2tb12 s)
            (t2tb11 sqt)))))))

;; injective_is_bijective
(assert
  (forall ((f (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (s (set (Array Int Int))) (sqt (set (Array (Array Int Int) (Array Int Int)))))
    (=>
      (p_injective
        (infix_mngt (infix_mngt int int) (infix_mngt int int))
        (infix_mngt int int)
        (t2tb3 f)
        (t2tb15 s))
      (=>
        (forall ((e (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
            (mem
              (infix_mngt (infix_mngt int int) (infix_mngt int int))
              (t2tb5 (select f e))
              (t2tb14 sqt))))
        (=>
          (= (cardinal (infix_mngt int int) (t2tb15 s)) (cardinal
                                                          (infix_mngt
                                                            (infix_mngt
                                                              int
                                                              int)
                                                            (infix_mngt
                                                              int
                                                              int))
                                                          (t2tb14 sqt)))
          (p_bijective
            (infix_mngt (infix_mngt int int) (infix_mngt int int))
            (infix_mngt int int)
            (t2tb3 f)
            (t2tb15 s)
            (t2tb14 sqt)))))))

;; injective_is_bijective
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))) (sqt (set (Array Int Int))))
    (=>
      (p_injective
        (infix_mngt int int)
        (infix_mngt int int)
        (t2tb5 f)
        (t2tb15 s))
      (=>
        (forall ((e (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
            (mem (infix_mngt int int) (t2tb7 (select f e)) (t2tb15 sqt))))
        (=>
          (= (cardinal (infix_mngt int int) (t2tb15 s)) (cardinal
                                                          (infix_mngt
                                                            int
                                                            int)
                                                          (t2tb15 sqt)))
          (p_bijective
            (infix_mngt int int)
            (infix_mngt int int)
            (t2tb5 f)
            (t2tb15 s)
            (t2tb15 sqt)))))))

;; injective_is_bijective
(assert
  (forall ((f (Array Int Int)) (s (set Int)) (sqt (set Int)))
    (=>
      (p_injective int int (t2tb7 f) (t2tb16 s))
      (=>
        (forall ((e Int))
          (=>
            (mem int (t2tb8 e) (t2tb16 s))
            (mem int (t2tb8 (select f e)) (t2tb16 sqt))))
        (=>
          (= (cardinal int (t2tb16 s)) (cardinal int (t2tb16 sqt)))
          (p_bijective1 f s sqt))))))

;; injective_is_bijective
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (sqt uni))
      (=>
        (p_injective b a f s)
        (=>
          (forall ((e uni))
            (=> (sort a e) (=> (mem a e s) (mem b (infix_at b a f e) sqt))))
          (=> (= (cardinal a s) (cardinal b sqt)) (p_bijective b a f s sqt)))))))

;; injective_is_bijective_auto
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))))
    (=>
      (p_injective
        (infix_mngt int int)
        (infix_mngt int int)
        (t2tb5 f)
        (t2tb15 s))
      (=>
        (forall ((e (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
            (mem (infix_mngt int int) (t2tb7 (select f e)) (t2tb15 s))))
        (and
          (p_bijective
            (infix_mngt int int)
            (infix_mngt int int)
            (t2tb5 f)
            (t2tb15 s)
            (t2tb15 s))
          (= (tb2t15
               (map1
                 (infix_mngt int int)
                 (infix_mngt int int)
                 (t2tb5 f)
                 (t2tb15 s))) s))))))

;; injective_is_bijective_auto
(assert
  (forall ((f (Array Int Int)) (s (set Int)))
    (=>
      (p_injective int int (t2tb7 f) (t2tb16 s))
      (=>
        (forall ((e Int))
          (=>
            (mem int (t2tb8 e) (t2tb16 s))
            (mem int (t2tb8 (select f e)) (t2tb16 s))))
        (and
          (p_bijective1 f s s)
          (= (tb2t16 (map1 int int (t2tb7 f) (t2tb16 s))) s))))))

;; injective_is_bijective_auto
(assert
  (forall ((a ty))
    (forall ((f uni) (s uni))
      (=>
        (sort (set1 a) s)
        (=>
          (p_injective a a f s)
          (=>
            (forall ((e uni))
              (=> (sort a e) (=> (mem a e s) (mem a (infix_at a a f e) s))))
            (and (p_bijective a a f s s) (= (map1 a a f s) s))))))))

;; inv_auto
(declare-fun inv_auto (ty
  uni
  uni) uni)

;; inv_auto_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 uni)) (sort (infix_mngt a a) (inv_auto a x x1)))))

;; inv_auto'def
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))))
    (=>
      (p_injective
        (infix_mngt int int)
        (infix_mngt int int)
        (t2tb5 f)
        (t2tb15 s))
      (=>
        (forall ((e (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
            (mem (infix_mngt int int) (t2tb7 (select f e)) (t2tb15 s))))
        (= (tb2t5 (inv_auto (infix_mngt int int) (t2tb5 f) (t2tb15 s))) 
        (tb2t5
          (inv_f
            (infix_mngt int int)
            (infix_mngt int int)
            (t2tb5 f)
            (t2tb15 s)
            (t2tb15 s))))))))

;; inv_auto'def
(assert
  (forall ((f (Array Int Int)) (s (set Int)))
    (=>
      (p_injective int int (t2tb7 f) (t2tb16 s))
      (=>
        (forall ((e Int))
          (=>
            (mem int (t2tb8 e) (t2tb16 s))
            (mem int (t2tb8 (select f e)) (t2tb16 s))))
        (= (tb2t7 (inv_auto int (t2tb7 f) (t2tb16 s))) (tb2t7
                                                         (inv_f
                                                           int
                                                           int
                                                           (t2tb7 f)
                                                           (t2tb16 s)
                                                           (t2tb16 s))))))))

;; inv_auto'def
(assert
  (forall ((a ty))
    (forall ((f uni) (s uni))
      (=>
        (p_injective a a f s)
        (=>
          (forall ((e uni))
            (=> (sort a e) (=> (mem a e s) (mem a (infix_at a a f e) s))))
          (= (inv_auto a f s) (inv_f a a f s s)))))))

;; inv_auto'spec
(assert
  (forall ((f (Array (Array Int Int) (Array Int Int))) (s (set (Array Int Int))))
    (=>
      (p_injective
        (infix_mngt int int)
        (infix_mngt int int)
        (t2tb5 f)
        (t2tb15 s))
      (=>
        (forall ((e (Array Int Int)))
          (=>
            (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
            (mem (infix_mngt int int) (t2tb7 (select f e)) (t2tb15 s))))
        (and
          (forall ((e (Array Int Int)))
            (=>
              (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
              (mem
                (infix_mngt int int)
                (t2tb7
                  (select (tb2t5
                            (inv_auto
                              (infix_mngt int int)
                              (t2tb5 f)
                              (t2tb15 s))) e))
                (t2tb15 s))))
          (and
            (forall ((e (Array Int Int)))
              (=>
                (mem (infix_mngt int int) (t2tb7 e) (t2tb15 s))
                (= (select f (select (tb2t5
                                       (inv_auto
                                         (infix_mngt int int)
                                         (t2tb5 f)
                                         (t2tb15 s))) e)) e)))
            (p_bijective
              (infix_mngt int int)
              (infix_mngt int int)
              (inv_auto (infix_mngt int int) (t2tb5 f) (t2tb15 s))
              (t2tb15 s)
              (t2tb15 s))))))))

;; inv_auto'spec
(assert
  (forall ((f (Array Int Int)) (s (set Int)))
    (=>
      (p_injective int int (t2tb7 f) (t2tb16 s))
      (=>
        (forall ((e Int))
          (=>
            (mem int (t2tb8 e) (t2tb16 s))
            (mem int (t2tb8 (select f e)) (t2tb16 s))))
        (and
          (forall ((e Int))
            (=>
              (mem int (t2tb8 e) (t2tb16 s))
              (mem
                int
                (t2tb8
                  (select (tb2t7 (inv_auto int (t2tb7 f) (t2tb16 s))) e))
                (t2tb16 s))))
          (and
            (forall ((e Int))
              (=>
                (mem int (t2tb8 e) (t2tb16 s))
                (= (select f (select (tb2t7
                                       (inv_auto int (t2tb7 f) (t2tb16 s))) e)) e)))
            (p_bijective1 (tb2t7 (inv_auto int (t2tb7 f) (t2tb16 s))) s s)))))))

;; inv_auto'spec
(assert
  (forall ((a ty))
    (forall ((f uni) (s uni))
      (=>
        (p_injective a a f s)
        (=>
          (forall ((e uni))
            (=> (sort a e) (=> (mem a e s) (mem a (infix_at a a f e) s))))
          (and
            (forall ((e uni))
              (=> (mem a e s) (mem a (infix_at a a (inv_auto a f s) e) s)))
            (and
              (forall ((e uni))
                (=>
                  (sort a e)
                  (=>
                    (mem a e s)
                    (= (infix_at a a f (infix_at a a (inv_auto a f s) e)) e))))
              (p_bijective a a (inv_auto a f s) s s))))))))

;; fc
(declare-fun fc295 () (Array (tuple2 bitvec
  bitvec) bitvec))

;; fc
(declare-fun fc296 (Int) (Array bitvec (tuple2 bitvec
  bitvec)))

;; t2tb
(declare-fun t2tb103 ((Array (tuple2 bitvec
  bitvec) bitvec)) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (tuple2 bitvec bitvec) bitvec)))
    (sort (infix_mngt (tuple21 bitvec1 bitvec1) bitvec1) (t2tb103 x))))

;; tb2t
(declare-fun tb2t103 (uni) (Array (tuple2 bitvec
  bitvec) bitvec))

;; BridgeL
(assert
  (forall ((i (Array (tuple2 bitvec bitvec) bitvec)))
    (! (= (tb2t103 (t2tb103 i)) i) :pattern ((t2tb103 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort (infix_mngt (tuple21 bitvec1 bitvec1) bitvec1) j)
         (= (t2tb103 (tb2t103 j)) j)) :pattern ((t2tb103 (tb2t103 j))) )))

;; t2tb
(declare-fun t2tb104 ((tuple2 bitvec
  bitvec)) uni)

;; t2tb_sort
(assert
  (forall ((x (tuple2 bitvec bitvec)))
    (sort (tuple21 bitvec1 bitvec1) (t2tb104 x))))

;; tb2t
(declare-fun tb2t104 (uni) (tuple2 bitvec
  bitvec))

;; BridgeL
(assert
  (forall ((i (tuple2 bitvec bitvec)))
    (! (= (tb2t104 (t2tb104 i)) i) :pattern ((t2tb104 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=> (sort (tuple21 bitvec1 bitvec1) j) (= (t2tb104 (tb2t104 j)) j)) :pattern (
    (t2tb104
      (tb2t104 j))) )))

;; fc'def
(assert
  (forall ((o (tuple2 bitvec bitvec)))
    (= (tb2t77
         (infix_at
           bitvec1
           (tuple21 bitvec1 bitvec1)
           (t2tb103 fc295)
           (t2tb104 o))) (concat1
                           (tb2t77 (fir bitvec1 bitvec1 (t2tb104 o)))
                           (tb2t77 (sec1 bitvec1 bitvec1 (t2tb104 o)))))))

;; t2tb
(declare-fun t2tb105 ((Array bitvec (tuple2 bitvec
  bitvec))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array bitvec (tuple2 bitvec bitvec))))
    (sort (infix_mngt bitvec1 (tuple21 bitvec1 bitvec1)) (t2tb105 x))))

;; tb2t
(declare-fun tb2t105 (uni) (Array bitvec (tuple2 bitvec
  bitvec)))

;; BridgeL
(assert
  (forall ((i (Array bitvec (tuple2 bitvec bitvec))))
    (! (= (tb2t105 (t2tb105 i)) i) :pattern ((t2tb105 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort (infix_mngt bitvec1 (tuple21 bitvec1 bitvec1)) j)
         (= (t2tb105 (tb2t105 j)) j)) :pattern ((t2tb105 (tb2t105 j))) )))

;; fc'def
(assert
  (forall ((i Int) (x bitvec))
    (= (tb2t104
         (infix_at
           (tuple21 bitvec1 bitvec1)
           bitvec1
           (t2tb105 (fc296 i))
           (t2tb77 x))) (tb2t104
                          (Tuple2
                            bitvec1
                            bitvec1
                            (t2tb77 (hpart x i))
                            (t2tb77 (tpart x i)))))))

;; t2tb
(declare-fun t2tb106 ((set (tuple2 bitvec
  bitvec))) uni)

;; t2tb_sort
(assert
  (forall ((x (set (tuple2 bitvec bitvec))))
    (sort (set1 (tuple21 bitvec1 bitvec1)) (t2tb106 x))))

;; tb2t
(declare-fun tb2t106 (uni) (set (tuple2 bitvec
  bitvec)))

;; BridgeL
(assert
  (forall ((i (set (tuple2 bitvec bitvec))))
    (! (= (tb2t106 (t2tb106 i)) i) :pattern ((t2tb106 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort (set1 (tuple21 bitvec1 bitvec1)) j)
         (= (t2tb106 (tb2t106 j)) j)) :pattern ((t2tb106 (tb2t106 j))) )))

;; bijective_concat
(assert
  (forall ((i Int) (j Int))
    (=>
      (<= 0 i)
      (=>
        (<= 0 j)
        (and
          (p_bijective
            bitvec1
            (tuple21 bitvec1 bitvec1)
            (t2tb103 fc295)
            (cartesian_product
              bitvec1
              bitvec1
              (t2tb79 (n_bvs i))
              (t2tb79 (n_bvs j)))
            (t2tb79 (n_bvs (+ i j))))
          (p_bijective
            (tuple21 bitvec1 bitvec1)
            bitvec1
            (t2tb105 (fc296 i))
            (t2tb79 (n_bvs (+ i j)))
            (cartesian_product
              bitvec1
              bitvec1
              (t2tb79 (n_bvs i))
              (t2tb79 (n_bvs j)))))))))

;; bv_to_int_hpart
(assert
  (forall ((bv1 bitvec) (l Int))
    (=>
      (and (<= 0 l) (<= l (length bv1)))
      (= (bv_to_int (hpart bv1 l)) (div (bv_to_int bv1) (power
                                                          2
                                                          (- (length bv1) l)))))))

;; bv_to_int_tpart
(assert
  (forall ((bv1 bitvec) (l Int))
    (=>
      (and (<= 0 l) (<= l (length bv1)))
      (= (bv_to_int (tpart bv1 l)) (mod (bv_to_int bv1) (power
                                                          2
                                                          (- (length bv1) l)))))))

;; bv_to_int_hpart_rev
(assert
  (forall ((bv1 bitvec) (l Int) (q Int))
    (=>
      (= q (- (length bv1) l))
      (=>
        (and (<= 0 l) (<= l (length bv1)))
        (= (div (bv_to_int bv1) (power 2 q)) (bv_to_int (hpart bv1 l)))))))

;; bv_to_int_tpart_rev
(assert
  (forall ((bv1 bitvec) (l Int) (q Int))
    (=>
      (= q (- (length bv1) l))
      (=>
        (and (<= 0 l) (<= l (length bv1)))
        (= (mod (bv_to_int bv1) (power 2 q)) (bv_to_int (tpart bv1 l)))))))

;; ind_basis_mat
(declare-fun ind_basis_mat (Int
  Int
  Int
  Int) (matrix complex))

;; result
(declare-fun result33 (Int
  Int) (Array Int (Array Int complex)))

;; result'def
(assert
  (forall ((i Int) (j Int) (k Int) (l Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             int
             (t2tb61 (result33 i j))
             (t2tb8 k))
           (t2tb8 l))) (indic_2
                         int
                         int
                         (t2tb8 k)
                         (t2tb8 i)
                         (t2tb8 l)
                         (t2tb8 j)))))

;; ind_basis_mat'def
(assert
  (forall ((i Int) (j Int) (r Int) (c Int))
    (=>
      (and (<= 0 i) (< i r))
      (=>
        (and (<= 0 j) (< j c))
        (= (ind_basis_mat i j r c) (tb2t65
                                     (make_f
                                       complex1
                                       r
                                       c
                                       (t2tb61 (result33 i j)))))))))

;; ind_basis_mat'spec
(assert
  (forall ((i Int) (j Int) (r Int) (c Int))
    (=>
      (and (<= 0 i) (< i r))
      (=>
        (and (<= 0 j) (< j c))
        (and
          (= (rows complex1 (t2tb65 (ind_basis_mat i j r c))) r)
          (and
            (= (columns complex1 (t2tb65 (ind_basis_mat i j r c))) c)
            (and
              (forall ((k Int) (l Int))
                (=>
                  (valid_index complex1 (t2tb65 (ind_basis_mat i j r c)) k l)
                  (= (tb2t
                       (get complex1 (t2tb65 (ind_basis_mat i j r c)) k l)) 
                  (indic_2
                    int
                    int
                    (t2tb8 k)
                    (t2tb8 i)
                    (t2tb8 l)
                    (t2tb8 j)))))
              (forall ((o (tuple2 Int Int)))
                (=>
                  (mem
                    (tuple21 int int)
                    (t2tb53 o)
                    (t2tb54
                      (mat_indices complex1 (t2tb65 (ind_basis_mat i j r c)))))
                  (=
                    (= (tb2t
                         (get
                           complex1
                           (t2tb65 (ind_basis_mat i j r c))
                           (tb2t8 (fir int int (t2tb53 o)))
                           (tb2t8 (sec1 int int (t2tb53 o))))) c_one)
                    (and
                      (= (tb2t8 (fir int int (t2tb53 o))) i)
                      (= (tb2t8 (sec1 int int (t2tb53 o))) j))))))))))))

;; ind_basis_mat_values
(assert
  (forall ((i Int) (j Int) (r Int) (c Int))
    (=>
      (and (<= 0 i) (< i r))
      (=>
        (and (<= 0 j) (< j c))
        (forall ((i1 Int) (j1 Int))
          (=>
            (and (<= 0 i1) (< i1 r))
            (=>
              (and (<= 0 j1) (< j1 c))
              (= (tb2t (get complex1 (t2tb65 (ind_basis_mat i j r c)) i1 j1)) 
              (indic_2
                int
                int
                (t2tb8 i)
                (t2tb8 i1)
                (t2tb8 j)
                (t2tb8 j1))))))))))

;; unic_ind_basis_mat
(assert
  (forall ((i1 Int) (j1 Int) (i2 Int) (j2 Int) (r Int) (c Int))
    (=>
      (and (<= 0 i1) (< i1 r))
      (=>
        (and (<= 0 j1) (< j1 c))
        (=>
          (and (<= 0 i2) (< i2 r))
          (=>
            (and (<= 0 j2) (< j2 c))
            (=>
              (= (ind_basis_mat i1 j1 r c) (ind_basis_mat i2 j2 r c))
              (= (tb2t53 (Tuple2 int int (t2tb8 i1) (t2tb8 j1))) (tb2t53
                                                                   (Tuple2
                                                                    int
                                                                    int
                                                                    (t2tb8
                                                                    i2)
                                                                    (t2tb8
                                                                    j2)))))))))))

;; basis_mat
(declare-fun basis_mat (Int
  Int) (set (matrix complex)))

;; result
(declare-fun result34 (Int
  Int) (Array (tuple2 Int
  Int) (matrix complex)))

;; t2tb
(declare-fun t2tb107 ((Array (tuple2 Int
  Int) (matrix complex))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (tuple2 Int Int) (matrix complex))))
    (sort (infix_mngt (tuple21 int int) (matrix1 complex1)) (t2tb107 x))))

;; tb2t
(declare-fun tb2t107 (uni) (Array (tuple2 Int
  Int) (matrix complex)))

;; BridgeL
(assert
  (forall ((i (Array (tuple2 Int Int) (matrix complex))))
    (! (= (tb2t107 (t2tb107 i)) i) :pattern ((t2tb107 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort (infix_mngt (tuple21 int int) (matrix1 complex1)) j)
         (= (t2tb107 (tb2t107 j)) j)) :pattern ((t2tb107 (tb2t107 j))) )))

;; result'def
(assert
  (forall ((r Int) (c Int) (o (tuple2 Int Int)))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           (tuple21 int int)
           (t2tb107 (result34 r c))
           (t2tb53 o))) (let ((j (tb2t8 (Tuple2_proj_2 int int (t2tb53 o)))))
                          (let ((i (tb2t8 (Tuple2_proj_1 int int (t2tb53 o)))))
                            (ite (and
                                   (and (<= 0 i) (< i r))
                                   (and (<= 0 j) (< j c)))
                              (ind_basis_mat i j r c)
                              (tb2t65 (make complex1 r c (t2tb c_zero)))))))))

;; basis_mat'def
(assert
  (forall ((r Int) (c Int))
    (=>
      (< 0 r)
      (=>
        (< 0 c)
        (= (basis_mat r c) (tb2t76
                             (map1
                               (matrix1 complex1)
                               (tuple21 int int)
                               (t2tb107 (result34 r c))
                               (cartesian_product
                                 int
                                 int
                                 (t2tb16 (to_fset 0 r))
                                 (t2tb16 (to_fset 0 c))))))))))

;; fc
(declare-fun fc297 (Int
  Int) (Array (tuple2 Int
  Int) (matrix complex)))

;; fc
(declare-fun fc298 ((matrix complex)) (Array (tuple2 Int
  Int) Bool))

;; fc'def
(assert
  (forall ((r Int) (c Int) (o (tuple2 Int Int)))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           (tuple21 int int)
           (t2tb107 (fc297 r c))
           (t2tb53 o))) (ind_basis_mat
                          (tb2t8 (fir int int (t2tb53 o)))
                          (tb2t8 (sec1 int int (t2tb53 o)))
                          r
                          c))))

;; t2tb
(declare-fun t2tb108 ((Array (tuple2 Int
  Int) Bool)) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (tuple2 Int Int) Bool)))
    (sort (infix_mngt (tuple21 int int) bool) (t2tb108 x))))

;; tb2t
(declare-fun tb2t108 (uni) (Array (tuple2 Int
  Int) Bool))

;; BridgeL
(assert
  (forall ((i (Array (tuple2 Int Int) Bool)))
    (! (= (tb2t108 (t2tb108 i)) i) :pattern ((t2tb108 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort (infix_mngt (tuple21 int int) bool) j)
         (= (t2tb108 (tb2t108 j)) j)) :pattern ((t2tb108 (tb2t108 j))) )))

;; fc'def
(assert
  (forall ((m (matrix complex)) (x (tuple2 Int Int)))
    (=
      (= (tb2t10
           (infix_at bool (tuple21 int int) (t2tb108 (fc298 m)) (t2tb53 x))) true)
      (= (tb2t
           (get
             complex1
             (t2tb65 m)
             (tb2t8 (fir int int (t2tb53 x)))
             (tb2t8 (sec1 int int (t2tb53 x))))) c_one))))

;; basis_mat'spec
(assert
  (forall ((r Int) (c Int))
    (=>
      (< 0 r)
      (=>
        (< 0 c)
        (and
          (forall ((m (matrix complex)))
            (=
              (mem (matrix1 complex1) (t2tb65 m) (t2tb76 (basis_mat r c)))
              (exists ((i Int) (j Int))
                (and
                  (and (<= 0 i) (< i r))
                  (and (and (<= 0 j) (< j c)) (= m (ind_basis_mat i j r c)))))))
          (and
            (= (basis_mat r c) (tb2t76
                                 (map1
                                   (matrix1 complex1)
                                   (tuple21 int int)
                                   (t2tb107 (fc297 r c))
                                   (cartesian_product
                                     int
                                     int
                                     (t2tb16 (to_fset 0 r))
                                     (t2tb16 (to_fset 0 c))))))
            (and
              (constant_size
                (matrix1 complex1)
                (t2tb76 (basis_mat r c))
                (t2tb66 identity1))
              (and
                (= (s_columns
                     (matrix1 complex1)
                     (t2tb76 (basis_mat r c))
                     (t2tb66 identity1)) c)
                (and
                  (= (s_rows
                       (matrix1 complex1)
                       (t2tb76 (basis_mat r c))
                       (t2tb66 identity1)) r)
                  (forall ((m (matrix complex)))
                    (=>
                      (mem
                        (matrix1 complex1)
                        (t2tb65 m)
                        (t2tb76 (basis_mat r c)))
                      (= (cardinal
                           (tuple21 int int)
                           (my_filter
                             (tuple21 int int)
                             (t2tb54 (mat_indices complex1 (t2tb65 m)))
                             (t2tb108 (fc298 m)))) 1))))))))))))

;; basis_mat_indexes
(declare-fun basis_mat_indexes ((matrix complex)) (tuple2 Int
  Int))

;; result
(declare-fun result35 ((matrix complex)) (Array (tuple2 Int
  Int) Bool))

;; result'def
(assert
  (forall ((m (matrix complex)) (x (tuple2 Int Int)))
    (=
      (= (tb2t10
           (infix_at
             bool
             (tuple21 int int)
             (t2tb108 (result35 m))
             (t2tb53 x))) true)
      (and
        (mem
          (tuple21 int int)
          (t2tb53 x)
          (t2tb54 (mat_indices complex1 (t2tb65 m))))
        (infix_eqeq
          (matrix1 complex1)
          (t2tb65 m)
          (t2tb65
            (ind_basis_mat
              (tb2t8 (fir int int (t2tb53 x)))
              (tb2t8 (sec1 int int (t2tb53 x)))
              (rows complex1 (t2tb65 m))
              (columns complex1 (t2tb65 m)))))))))

;; basis_mat_indexes'def
(assert
  (forall ((m (matrix complex)))
    (=>
      (mem
        (matrix1 complex1)
        (t2tb65 m)
        (t2tb76
          (basis_mat
            (rows complex1 (t2tb65 m))
            (columns complex1 (t2tb65 m)))))
      (= (basis_mat_indexes m) (tb2t53
                                 (element
                                   (tuple21 int int)
                                   (my_filter
                                     (tuple21 int int)
                                     (t2tb54
                                       (mat_indices complex1 (t2tb65 m)))
                                     (t2tb108 (result35 m)))))))))

;; fc
(declare-fun fc299 ((matrix complex)) (Array Int (Array Int complex)))

;; fc'def
(assert
  (forall ((m (matrix complex)) (i Int) (j Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             int
             (t2tb61 (fc299 m))
             (t2tb8 i))
           (t2tb8 j))) (indic_2
                         int
                         int
                         (fir int int (t2tb53 (basis_mat_indexes m)))
                         (t2tb8 i)
                         (sec1 int int (t2tb53 (basis_mat_indexes m)))
                         (t2tb8 j)))))

;; basis_mat_indexes'spec
(assert
  (forall ((m (matrix complex)))
    (=>
      (mem
        (matrix1 complex1)
        (t2tb65 m)
        (t2tb76
          (basis_mat
            (rows complex1 (t2tb65 m))
            (columns complex1 (t2tb65 m)))))
      (and
        (= m (ind_basis_mat
               (tb2t8 (fir int int (t2tb53 (basis_mat_indexes m))))
               (tb2t8 (sec1 int int (t2tb53 (basis_mat_indexes m))))
               (rows complex1 (t2tb65 m))
               (columns complex1 (t2tb65 m))))
        (and
          (= m (tb2t65
                 (make_f
                   complex1
                   (rows complex1 (t2tb65 m))
                   (columns complex1 (t2tb65 m))
                   (t2tb61 (fc299 m)))))
          (and
            (= (tb2t
                 (get
                   complex1
                   (t2tb65 m)
                   (tb2t8 (fir int int (t2tb53 (basis_mat_indexes m))))
                   (tb2t8 (sec1 int int (t2tb53 (basis_mat_indexes m)))))) 
            c_one)
            (and
              (forall ((i Int) (j Int))
                (=>
                  (valid_index complex1 (t2tb65 m) i j)
                  (=>
                    (= i (tb2t8 (fir int int (t2tb53 (basis_mat_indexes m)))))
                    (=>
                      (not
                        (= j (tb2t8
                               (sec1 int int (t2tb53 (basis_mat_indexes m))))))
                      (= (tb2t (get complex1 (t2tb65 m) i j)) c_zero)))))
              (valid_index
                complex1
                (t2tb65 m)
                (tb2t8 (fir int int (t2tb53 (basis_mat_indexes m))))
                (tb2t8 (sec1 int int (t2tb53 (basis_mat_indexes m))))))))))))

;; fc
(declare-fun fc300 ((matrix complex)) (Array Int (Array Int complex)))

;; fc'def
(assert
  (forall ((m (matrix complex)) (i Int) (j Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             int
             (t2tb61 (fc300 m))
             (t2tb8 i))
           (t2tb8 j))) (indic_2
                         int
                         int
                         (fir int int (t2tb53 (basis_mat_indexes m)))
                         (t2tb8 i)
                         (sec1 int int (t2tb53 (basis_mat_indexes m)))
                         (t2tb8 j)))))

;; get_basis_mat_indexes
(assert
  (forall ((m (matrix complex)))
    (=>
      (mem
        (matrix1 complex1)
        (t2tb65 m)
        (t2tb76
          (basis_mat
            (rows complex1 (t2tb65 m))
            (columns complex1 (t2tb65 m)))))
      (and
        (= m (ind_basis_mat
               (tb2t8 (fir int int (t2tb53 (basis_mat_indexes m))))
               (tb2t8 (sec1 int int (t2tb53 (basis_mat_indexes m))))
               (rows complex1 (t2tb65 m))
               (columns complex1 (t2tb65 m))))
        (and
          (= m (tb2t65
                 (make_f
                   complex1
                   (rows complex1 (t2tb65 m))
                   (columns complex1 (t2tb65 m))
                   (t2tb61 (fc300 m)))))
          (and
            (= (tb2t
                 (get
                   complex1
                   (t2tb65 m)
                   (tb2t8 (fir int int (t2tb53 (basis_mat_indexes m))))
                   (tb2t8 (sec1 int int (t2tb53 (basis_mat_indexes m)))))) 
            c_one)
            (forall ((i Int) (j Int))
              (=>
                (valid_index complex1 (t2tb65 m) i j)
                (=>
                  (not
                    (= (basis_mat_indexes m) (tb2t53
                                               (Tuple2
                                                 int
                                                 int
                                                 (t2tb8 i)
                                                 (t2tb8 j)))))
                  (= (tb2t (get complex1 (t2tb65 m) i j)) c_zero))))))))))

;; fc
(declare-fun fc301 (Int
  Int) (Array Int (Array Int complex)))

;; fc'def
(assert
  (forall ((i Int) (j Int) (i1 Int) (j1 Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             int
             (t2tb61 (fc301 i j))
             (t2tb8 i1))
           (t2tb8 j1))) (indic_2
                          int
                          int
                          (t2tb8 i)
                          (t2tb8 i1)
                          (t2tb8 j)
                          (t2tb8 j1)))))

;; set_basis_mat_indexes
(assert
  (forall ((m (matrix complex)) (i Int) (j Int))
    (=>
      (valid_index complex1 (t2tb65 m) i j)
      (=>
        (mem
          (matrix1 complex1)
          (t2tb65 m)
          (t2tb76
            (basis_mat
              (rows complex1 (t2tb65 m))
              (columns complex1 (t2tb65 m)))))
        (=>
          (= (tb2t (get complex1 (t2tb65 m) i j)) c_one)
          (and
            (= (basis_mat_indexes m) (tb2t53
                                       (Tuple2 int int (t2tb8 i) (t2tb8 j))))
            (and
              (= m (ind_basis_mat
                     i
                     j
                     (rows complex1 (t2tb65 m))
                     (columns complex1 (t2tb65 m))))
              (and
                (= m (tb2t65
                       (make_f
                         complex1
                         (rows complex1 (t2tb65 m))
                         (columns complex1 (t2tb65 m))
                         (t2tb61 (fc301 i j)))))
                (forall ((i1 Int) (j1 Int))
                  (=>
                    (valid_index complex1 (t2tb65 m) i1 j1)
                    (=>
                      (= i1 i)
                      (=>
                        (not (= j1 j))
                        (= (tb2t (get complex1 (t2tb65 m) i1 j1)) c_zero)))))))))))))

;; basis_projection
(declare-fun basis_projection ((matrix complex)
  Int
  Int) (matrix complex))

;; basis_projection'def
(assert
  (forall ((m (matrix complex)) (i Int) (j Int))
    (=>
      (and (<= 0 i) (< i (rows complex1 (t2tb65 m))))
      (=>
        (and (<= 0 j) (< j (columns complex1 (t2tb65 m))))
        (= (basis_projection m i j) (infix_asdtdt
                                      (tb2t (get complex1 (t2tb65 m) i j))
                                      (ind_basis_mat
                                        i
                                        j
                                        (rows complex1 (t2tb65 m))
                                        (columns complex1 (t2tb65 m)))))))))

;; fc
(declare-fun fc302 ((matrix complex)
  Int
  Int) (Array Int (Array Int complex)))

;; fc'def
(assert
  (forall ((m (matrix complex)) (i Int) (j Int) (k Int) (l Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             int
             (t2tb61 (fc302 m i j))
             (t2tb8 k))
           (t2tb8 l))) (infix_asdt
                         (tb2t (get complex1 (t2tb65 m) i j))
                         (indic_2
                           int
                           int
                           (t2tb8 k)
                           (t2tb8 i)
                           (t2tb8 l)
                           (t2tb8 j))))))

;; basis_projection'spec
(assert
  (forall ((m (matrix complex)) (i Int) (j Int))
    (=>
      (and (<= 0 i) (< i (rows complex1 (t2tb65 m))))
      (=>
        (and (<= 0 j) (< j (columns complex1 (t2tb65 m))))
        (and
          (= (rows complex1 (t2tb65 (basis_projection m i j))) (rows
                                                                 complex1
                                                                 (t2tb65 m)))
          (and
            (= (columns complex1 (t2tb65 (basis_projection m i j))) (columns
                                                                    complex1
                                                                    (t2tb65
                                                                    m)))
            (and
              (= (basis_projection m i j) (tb2t65
                                            (make_f
                                              complex1
                                              (rows complex1 (t2tb65 m))
                                              (columns complex1 (t2tb65 m))
                                              (t2tb61 (fc302 m i j)))))
              (and
                (= (tb2t
                     (get complex1 (t2tb65 (basis_projection m i j)) i j)) 
                (tb2t
                  (get complex1 (t2tb65 m) i j)))
                (and
                  (forall ((iqt Int) (jqt Int))
                    (=>
                      (valid_index
                        complex1
                        (t2tb65 (basis_projection m i j))
                        iqt
                        jqt)
                      (=>
                        (not (= iqt i))
                        (= (tb2t
                             (get
                               complex1
                               (t2tb65 (basis_projection m i j))
                               iqt
                               jqt)) c_zero))))
                  (forall ((iqt Int) (jqt Int))
                    (=>
                      (valid_index
                        complex1
                        (t2tb65 (basis_projection m i j))
                        iqt
                        jqt)
                      (=>
                        (not (= jqt j))
                        (= (tb2t
                             (get
                               complex1
                               (t2tb65 (basis_projection m i j))
                               iqt
                               jqt)) c_zero)))))))))))))

;; basis_projection_null
(assert
  (forall ((m (matrix complex)) (i Int) (j Int) (k Int) (l Int))
    (=>
      (valid_index complex1 (t2tb65 m) i j)
      (=>
        (valid_index complex1 (t2tb65 m) k l)
        (=>
          (=> (= i k) (not (= j l)))
          (= (tb2t (get complex1 (t2tb65 (basis_projection m i j)) k l)) 
          c_zero))))))

;; basis_projections
(declare-fun basis_projections ((matrix complex)) (set (matrix complex)))

;; result
(declare-fun result36 ((matrix complex)) (Array (tuple2 Int
  Int) (matrix complex)))

;; result'def
(assert
  (forall ((m (matrix complex)) (o (tuple2 Int Int)))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           (tuple21 int int)
           (t2tb107 (result36 m))
           (t2tb53 o))) (ite (valid_index
                               complex1
                               (t2tb65 m)
                               (tb2t8 (fir int int (t2tb53 o)))
                               (tb2t8 (sec1 int int (t2tb53 o))))
                          (basis_projection
                            m
                            (tb2t8 (fir int int (t2tb53 o)))
                            (tb2t8 (sec1 int int (t2tb53 o))))
                          m))))

;; basis_projections'def
(assert
  (forall ((m (matrix complex)))
    (= (basis_projections m) (tb2t76
                               (map1
                                 (matrix1 complex1)
                                 (tuple21 int int)
                                 (t2tb107 (result36 m))
                                 (t2tb54 (to_indexes complex1 (t2tb65 m))))))))

;; couple_closure
(declare-fun couple_closure (ty
  ty
  ty) uni)

;; couple_closure_sort
(assert
  (forall ((a ty) (b ty) (im1 ty))
    (sort
      (infix_mngt
        (infix_mngt a (infix_mngt b im1))
        (infix_mngt (tuple21 a b) im1))
      (couple_closure im1 b a))))

;; basis_projection_closure
(declare-fun basis_projection_closure () (Array (matrix complex) (Array Int (Array Int (matrix complex)))))

;; couple_closure_def
(assert
  (forall ((a ty) (b ty) (im1 ty))
    (forall ((y uni) (y1 uni))
      (= (infix_at
           im1
           (tuple21 a b)
           (infix_at
             (infix_mngt (tuple21 a b) im1)
             (infix_mngt a (infix_mngt b im1))
             (couple_closure im1 b a)
             y)
           y1) (couple im1 b a y y1)))))

;; t2tb
(declare-fun t2tb109 ((Array Int (Array Int (matrix complex)))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array Int (Array Int (matrix complex)))))
    (sort (infix_mngt int (infix_mngt int (matrix1 complex1))) (t2tb109 x))))

;; tb2t
(declare-fun tb2t109 (uni) (Array Int (Array Int (matrix complex))))

;; BridgeL
(assert
  (forall ((i (Array Int (Array Int (matrix complex)))))
    (! (= (tb2t109 (t2tb109 i)) i) :pattern ((t2tb109 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort (infix_mngt int (infix_mngt int (matrix1 complex1))) j)
         (= (t2tb109 (tb2t109 j)) j)) :pattern ((t2tb109 (tb2t109 j))) )))

;; t2tb
(declare-fun t2tb110 ((Array (matrix complex) (Array Int (Array Int (matrix complex))))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (matrix complex) (Array Int (Array Int (matrix complex))))))
    (sort
      (infix_mngt
        (matrix1 complex1)
        (infix_mngt int (infix_mngt int (matrix1 complex1))))
      (t2tb110 x))))

;; tb2t
(declare-fun tb2t110 (uni) (Array (matrix complex) (Array Int (Array Int (matrix complex)))))

;; BridgeL
(assert
  (forall ((i (Array (matrix complex) (Array Int (Array Int (matrix complex))))))
    (! (= (tb2t110 (t2tb110 i)) i) :pattern ((t2tb110 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort
           (infix_mngt
             (matrix1 complex1)
             (infix_mngt int (infix_mngt int (matrix1 complex1))))
           j)
         (= (t2tb110 (tb2t110 j)) j)) :pattern ((t2tb110 (tb2t110 j))) )))

;; basis_projection_closure_def
(assert
  (forall ((y (matrix complex)) (y1 Int) (y2 Int))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           int
           (infix_at
             (infix_mngt int (matrix1 complex1))
             int
             (infix_at
               (infix_mngt int (infix_mngt int (matrix1 complex1)))
               (matrix1 complex1)
               (t2tb110 basis_projection_closure)
               (t2tb65 y))
             (t2tb8 y1))
           (t2tb8 y2))) (basis_projection y y1 y2))))

;; t2tb
(declare-fun t2tb111 ((Array (Array Int (Array Int (matrix complex))) (Array (tuple2 Int
  Int) (matrix complex)))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (Array Int (Array Int (matrix complex))) (Array (tuple2 Int Int) (matrix complex)))))
    (sort
      (infix_mngt
        (infix_mngt int (infix_mngt int (matrix1 complex1)))
        (infix_mngt (tuple21 int int) (matrix1 complex1)))
      (t2tb111 x))))

;; tb2t
(declare-fun tb2t111 (uni) (Array (Array Int (Array Int (matrix complex))) (Array (tuple2 Int
  Int) (matrix complex))))

;; BridgeL
(assert
  (forall ((i (Array (Array Int (Array Int (matrix complex))) (Array (tuple2 Int Int) (matrix complex)))))
    (! (= (tb2t111 (t2tb111 i)) i) :pattern ((t2tb111 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort
           (infix_mngt
             (infix_mngt int (infix_mngt int (matrix1 complex1)))
             (infix_mngt (tuple21 int int) (matrix1 complex1)))
           j)
         (= (t2tb111 (tb2t111 j)) j)) :pattern ((t2tb111 (tb2t111 j))) )))

;; basis_projections'spec
(assert
  (forall ((m (matrix complex)))
    (and
      (= (basis_projections m) (tb2t76
                                 (map1
                                   (matrix1 complex1)
                                   (tuple21 int int)
                                   (infix_at
                                     (infix_mngt
                                       (tuple21 int int)
                                       (matrix1 complex1))
                                     (infix_mngt
                                       int
                                       (infix_mngt int (matrix1 complex1)))
                                     (couple_closure
                                       (matrix1 complex1)
                                       int
                                       int)
                                     (infix_at
                                       (infix_mngt
                                         int
                                         (infix_mngt int (matrix1 complex1)))
                                       (matrix1 complex1)
                                       (t2tb110 basis_projection_closure)
                                       (t2tb65 m)))
                                   (t2tb54 (to_indexes complex1 (t2tb65 m))))))
      (and
        (forall ((e (matrix complex)))
          (=>
            (mem
              (matrix1 complex1)
              (t2tb65 e)
              (t2tb76 (basis_projections m)))
            (= (rows complex1 (t2tb65 e)) (rows complex1 (t2tb65 m)))))
        (and
          (forall ((e (matrix complex)))
            (=>
              (mem
                (matrix1 complex1)
                (t2tb65 e)
                (t2tb76 (basis_projections m)))
              (= (columns complex1 (t2tb65 e)) (columns complex1 (t2tb65 m)))))
          (constant_size
            (matrix1 complex1)
            (t2tb76 (basis_projections m))
            (t2tb66 identity1)))))))

;; fc
(declare-fun fc303 ((matrix complex)) (Array (tuple2 Int
  Int) (matrix complex)))

;; fc'def
(assert
  (forall ((m (matrix complex)) (o (tuple2 Int Int)))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           (tuple21 int int)
           (t2tb107 (fc303 m))
           (t2tb53 o))) (ite (valid_index
                               complex1
                               (t2tb65 m)
                               (tb2t8 (fir int int (t2tb53 o)))
                               (tb2t8 (sec1 int int (t2tb53 o))))
                          (basis_projection
                            m
                            (tb2t8 (fir int int (t2tb53 o)))
                            (tb2t8 (sec1 int int (t2tb53 o))))
                          m))))

;; rewrite_basis_projections
(assert
  (forall ((m (matrix complex)))
    (= (basis_projections m) (tb2t76
                               (map1
                                 (matrix1 complex1)
                                 (tuple21 int int)
                                 (t2tb107 (fc303 m))
                                 (t2tb54 (to_indexes complex1 (t2tb65 m))))))))

;; indexes_decomp
(declare-fun indexes_decomp ((matrix complex)) (matrix complex))

;; result
(declare-fun result37 ((matrix complex)) (Array (tuple2 Int
  Int) (matrix complex)))

;; result'def
(assert
  (forall ((m (matrix complex)) (o (tuple2 Int Int)))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           (tuple21 int int)
           (t2tb107 (result37 m))
           (t2tb53 o))) (ite (mem
                               (tuple21 int int)
                               (t2tb53 o)
                               (t2tb54 (to_indexes complex1 (t2tb65 m))))
                          (basis_projection
                            m
                            (tb2t8 (fir int int (t2tb53 o)))
                            (tb2t8 (sec1 int int (t2tb53 o))))
                          m))))

;; indexes_decomp'def
(assert
  (forall ((m (matrix complex)))
    (= (indexes_decomp m) (mat_sum
                            (tuple21 int int)
                            (t2tb54 (to_indexes complex1 (t2tb65 m)))
                            (t2tb107 (result37 m))))))

;; indexes_decomp'spec
(assert
  (forall ((m (matrix complex)))
    (and
      (= (rows complex1 (t2tb65 (indexes_decomp m))) (rows
                                                       complex1
                                                       (t2tb65 m)))
      (= (columns complex1 (t2tb65 (indexes_decomp m))) (columns
                                                          complex1
                                                          (t2tb65 m))))))

;; fc
(declare-fun fc304 ((matrix complex)) (Array (tuple2 Int
  Int) (matrix complex)))

;; fc'def
(assert
  (forall ((m (matrix complex)) (o (tuple2 Int Int)))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           (tuple21 int int)
           (t2tb107 (fc304 m))
           (t2tb53 o))) (basis_projection
                          m
                          (tb2t8 (fir int int (t2tb53 o)))
                          (tb2t8 (sec1 int int (t2tb53 o)))))))

;; rewrite_indexes_decomp
(assert
  (forall ((m (matrix complex)))
    (= (indexes_decomp m) (mat_sum
                            (tuple21 int int)
                            (t2tb54 (to_indexes complex1 (t2tb65 m)))
                            (t2tb107 (fc304 m))))))

;; fc
(declare-fun fc305 ((matrix complex)
  Int
  Int) (Array (tuple2 Int
  Int) complex))

;; t2tb
(declare-fun t2tb112 ((Array (tuple2 Int
  Int) complex)) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (tuple2 Int Int) complex)))
    (sort (infix_mngt (tuple21 int int) complex1) (t2tb112 x))))

;; tb2t
(declare-fun tb2t112 (uni) (Array (tuple2 Int
  Int) complex))

;; BridgeL
(assert
  (forall ((i (Array (tuple2 Int Int) complex)))
    (! (= (tb2t112 (t2tb112 i)) i) :pattern ((t2tb112 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort (infix_mngt (tuple21 int int) complex1) j)
         (= (t2tb112 (tb2t112 j)) j)) :pattern ((t2tb112 (tb2t112 j))) )))

;; fc'def
(assert
  (forall ((m (matrix complex)) (i Int) (j Int) (o (tuple2 Int Int)))
    (= (tb2t
         (infix_at
           complex1
           (tuple21 int int)
           (t2tb112 (fc305 m i j))
           (t2tb53 o))) (tb2t
                          (get
                            complex1
                            (t2tb65
                              (basis_projection
                                m
                                (tb2t8 (fir int int (t2tb53 o)))
                                (tb2t8 (sec1 int int (t2tb53 o)))))
                            i
                            j)))))

;; indexes_decomp_pre
(assert
  (forall ((m (matrix complex)) (i Int) (j Int))
    (=>
      (valid_index complex1 (t2tb65 m) i j)
      (= (tb2t (get complex1 (t2tb65 m) i j)) (sum
                                                (tuple21 int int)
                                                (t2tb54
                                                  (to_indexes
                                                    complex1
                                                    (t2tb65 m)))
                                                (t2tb112 (fc305 m i j)))))))

;; fc
(declare-fun fc306 ((matrix complex)
  Int
  Int) (Array (tuple2 Int
  Int) complex))

;; fc'def
(assert
  (forall ((m (matrix complex)) (i Int) (j Int) (o (tuple2 Int Int)))
    (= (tb2t
         (infix_at
           complex1
           (tuple21 int int)
           (t2tb112 (fc306 m i j))
           (t2tb53 o))) (tb2t
                          (get
                            complex1
                            (t2tb65
                              (basis_projection
                                m
                                (tb2t8 (fir int int (t2tb53 o)))
                                (tb2t8 (sec1 int int (t2tb53 o)))))
                            i
                            j)))))

;; indexes_decomp_pre_gen
(assert
  (forall ((m (matrix complex)))
    (forall ((i Int) (j Int))
      (=>
        (valid_index complex1 (t2tb65 m) i j)
        (= (tb2t (get complex1 (t2tb65 m) i j)) (sum
                                                  (tuple21 int int)
                                                  (t2tb54
                                                    (to_indexes
                                                      complex1
                                                      (t2tb65 m)))
                                                  (t2tb112 (fc306 m i j))))))))

;; mat_to_indexes_decomp
(assert (forall ((m (matrix complex))) (= m (indexes_decomp m))))

;; basis_decomp
(declare-fun basis_decomp ((matrix complex)) (matrix complex))

;; basis_decomp'def
(assert
  (forall ((m (matrix complex)))
    (= (basis_decomp m) (mat_sum
                          (matrix1 complex1)
                          (t2tb76 (basis_projections m))
                          (t2tb66 identity1)))))

;; basis_decomp'spec
(assert
  (forall ((m (matrix complex)))
    (and
      (= (rows complex1 (t2tb65 (basis_decomp m))) (rows complex1 (t2tb65 m)))
      (= (columns complex1 (t2tb65 (basis_decomp m))) (columns
                                                        complex1
                                                        (t2tb65 m))))))

;; indexes_basis_decomp_equal_pre
(assert
  (forall ((m (matrix complex)) (i Int) (j Int))
    (=>
      (valid_index complex1 (t2tb65 m) i j)
      (= (tb2t (get complex1 (t2tb65 (indexes_decomp m)) i j)) (tb2t
                                                                 (get
                                                                   complex1
                                                                   (t2tb65
                                                                    (basis_decomp
                                                                    m))
                                                                   i
                                                                   j))))))

;; indexes_basis_decomp_equal
(assert
  (forall ((m (matrix complex))) (= (indexes_decomp m) (basis_decomp m))))

;; mat_to_basis_decomp
(assert (forall ((m (matrix complex))) (= m (indexes_decomp m))))

;; fc
(declare-fun fc307 (ty
  (matrix complex)
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x (matrix complex)) (x1 uni) (x2 uni))
      (sort (infix_mngt a (matrix1 complex1)) (fc307 a x x1 x2)))))

;; fc
(declare-fun fc308 (ty
  (matrix complex)
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x (matrix complex)) (x1 uni))
      (sort (infix_mngt a (matrix1 complex1)) (fc308 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((m (matrix complex)) (s uni) (f uni) (a1 uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc307 a m s f) a1)) 
      (ite (mem a a1 s)
        (mat_mult m (tb2t65 (infix_at (matrix1 complex1) a f a1)))
        m)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((m (matrix complex)) (f uni) (a1 uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc308 a m f) a1)) (mat_mult
                                                                    m
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    a1)))))))

;; product_mat_sum_r_pre
(assert
  (forall ((a ty))
    (forall ((m (matrix complex)) (sqt uni) (s uni) (f uni))
      (=>
        (constant_size a s f)
        (=>
          (= (columns complex1 (t2tb65 m)) (s_rows a s f))
          (=>
            (subset1 a sqt s)
            (=>
              (< 0 (cardinal a sqt))
              (and
                (= (mat_mult m (mat_sum a sqt f)) (mat_sum
                                                    a
                                                    sqt
                                                    (fc307 a m s f)))
                (and
                  (= (mat_mult m (mat_sum a sqt f)) (mat_sum
                                                      a
                                                      sqt
                                                      (fc308 a m f)))
                  (and
                    (= (rows complex1 (t2tb65 (mat_sum a sqt f))) (s_rows
                                                                    a
                                                                    s
                                                                    f))
                    (and
                      (= (columns complex1 (t2tb65 (mat_sum a sqt f))) 
                      (s_columns
                        a
                        s
                        f))
                      (and
                        (= (rows
                             complex1
                             (t2tb65 (mat_mult m (mat_sum a sqt f)))) 
                        (rows
                          complex1
                          (t2tb65 m)))
                        (= (columns
                             complex1
                             (t2tb65 (mat_mult m (mat_sum a sqt f)))) 
                        (s_columns
                          a
                          s
                          f))))))))))))))

;; fc
(declare-fun fc309 (ty
  (matrix complex)
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x (matrix complex)) (x1 uni))
      (sort (infix_mngt a (matrix1 complex1)) (fc309 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((m (matrix complex)) (f uni) (a1 uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc309 a m f) a1)) (mat_mult
                                                                    m
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    a1)))))))

;; product_mat_sum_r
(assert
  (forall ((a ty))
    (forall ((m (matrix complex)) (s uni) (f uni))
      (=>
        (constant_size a s f)
        (=>
          (= (columns complex1 (t2tb65 m)) (s_rows a s f))
          (=>
            (< 0 (cardinal a s))
            (= (mat_mult m (mat_sum a s f)) (mat_sum a s (fc309 a m f)))))))))

;; fc
(declare-fun fc310 (ty
  (matrix complex)
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x (matrix complex)) (x1 uni))
      (sort (infix_mngt a (matrix1 complex1)) (fc310 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((m (matrix complex)) (f uni) (a1 uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc310 a m f) a1)) (mat_mult
                                                                    m
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    a1)))))))

;; product_mat_sum_r_rev
(assert
  (forall ((a ty))
    (forall ((m (matrix complex)) (s uni) (f uni))
      (=>
        (constant_size a s f)
        (=>
          (= (columns complex1 (t2tb65 m)) (s_rows a s f))
          (=>
            (< 0 (cardinal a s))
            (= (mat_sum a s (fc310 a m f)) (mat_mult m (mat_sum a s f)))))))))

;; p_injective_proj
(assert
  (forall ((m (matrix complex)))
    (p_injective
      (matrix1 complex1)
      (tuple21 int int)
      (infix_at
        (infix_mngt (tuple21 int int) (matrix1 complex1))
        (infix_mngt int (infix_mngt int (matrix1 complex1)))
        (couple_closure (matrix1 complex1) int int)
        (infix_at
          (infix_mngt int (infix_mngt int (matrix1 complex1)))
          (matrix1 complex1)
          (t2tb110 basis_projection_closure)
          (t2tb65 m)))
      (nonn_mat_subset
        (tuple21 int int)
        (infix_at
          (infix_mngt (tuple21 int int) (matrix1 complex1))
          (infix_mngt int (infix_mngt int (matrix1 complex1)))
          (couple_closure (matrix1 complex1) int int)
          (infix_at
            (infix_mngt int (infix_mngt int (matrix1 complex1)))
            (matrix1 complex1)
            (t2tb110 basis_projection_closure)
            (t2tb65 m)))
        (t2tb54 (to_indexes complex1 (t2tb65 m)))))))

;; mat_decomp_equal_indexes
(assert (forall ((m (matrix complex))) (= m (indexes_decomp m))))

;; ket_basis
(declare-fun ket_basis (Int) (set (matrix complex)))

;; ket_basis'def
(assert
  (forall ((n Int))
    (=> (<= 0 n) (= (ket_basis n) (basis_mat (power 2 n) 1)))))

;; fc
(declare-fun fc311 (Int) (Array (tuple2 Int
  Int) (matrix complex)))

;; fc'def
(assert
  (forall ((n Int) (o (tuple2 Int Int)))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           (tuple21 int int)
           (t2tb107 (fc311 n))
           (t2tb53 o))) (ind_basis_mat
                          (tb2t8 (fir int int (t2tb53 o)))
                          (tb2t8 (sec1 int int (t2tb53 o)))
                          (power 2 n)
                          1))))

;; ket_basis'spec
(assert
  (forall ((n Int))
    (=>
      (<= 0 n)
      (and
        (= (ket_basis n) (tb2t76
                           (map1
                             (matrix1 complex1)
                             (tuple21 int int)
                             (t2tb107 (fc311 n))
                             (cartesian_product
                               int
                               int
                               (t2tb16 (to_fset 0 (power 2 n)))
                               (t2tb16 (to_fset 0 1))))))
        (and
          (= (ket_basis n) (basis_mat (power 2 n) 1))
          (and
            (forall ((mat (matrix complex)))
              (=>
                (mem (matrix1 complex1) (t2tb65 mat) (t2tb76 (ket_basis n)))
                (= (rows complex1 (t2tb65 mat)) (power 2 n))))
            (and
              (forall ((mat (matrix complex)))
                (=>
                  (mem
                    (matrix1 complex1)
                    (t2tb65 mat)
                    (t2tb76 (ket_basis n)))
                  (= (columns complex1 (t2tb65 mat)) 1)))
              (forall ((mat (matrix complex)))
                (=>
                  (mem
                    (matrix1 complex1)
                    (t2tb65 mat)
                    (t2tb76 (ket_basis n)))
                  (and
                    (= (rows complex1 (t2tb65 mat)) (power 2 n))
                    (and
                      (= (columns complex1 (t2tb65 mat)) 1)
                      (exists ((i Int))
                        (and
                          (valid_index complex1 (t2tb65 mat) i 0)
                          (= (basis_mat_indexes mat) (tb2t53
                                                       (Tuple2
                                                         int
                                                         int
                                                         (t2tb8 i)
                                                         (t2tb8 0)))))))))))))))))

;; fc
(declare-fun fc312 (Int) (Array Int (matrix complex)))

;; fc'def
(assert
  (forall ((n Int) (i Int))
    (= (tb2t65
         (infix_at (matrix1 complex1) int (t2tb68 (fc312 n)) (t2tb8 i))) 
    (ind_basis_mat
      i
      0
      (power 2 n)
      1))))

;; unary_ket_basis
(assert
  (forall ((n Int))
    (=>
      (<= 0 n)
      (= (ket_basis n) (tb2t76
                         (map1
                           (matrix1 complex1)
                           int
                           (t2tb68 (fc312 n))
                           (t2tb16 (to_fset 0 (power 2 n)))))))))

;; to_ket_basis
(assert
  (forall ((i Int) (n Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (mem
          (matrix1 complex1)
          (t2tb65 (ind_basis_mat i 0 (power 2 n) 1))
          (t2tb76 (ket_basis n)))))))

;; ket_basis_index
(declare-fun ket_basis_index ((matrix complex)
  Int) Int)

;; ket_basis_index'def
(assert
  (forall ((m (matrix complex)) (n Int))
    (=>
      (<= 0 n)
      (=>
        (mem (matrix1 complex1) (t2tb65 m) (t2tb76 (ket_basis n)))
        (= (ket_basis_index m n) (tb2t8
                                   (fir
                                     int
                                     int
                                     (t2tb53 (basis_mat_indexes m)))))))))

;; fc
(declare-fun fc313 ((matrix complex)
  Int) (Array Int (Array Int complex)))

;; fc'def
(assert
  (forall ((m (matrix complex)) (n Int) (i Int) (us Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             int
             (t2tb61 (fc313 m n))
             (t2tb8 i))
           (t2tb8 us))) (indic int (t2tb8 (ket_basis_index m n)) (t2tb8 i)))))

;; ket_basis_index'spec
(assert
  (forall ((m (matrix complex)) (n Int))
    (=>
      (<= 0 n)
      (=>
        (mem (matrix1 complex1) (t2tb65 m) (t2tb76 (ket_basis n)))
        (and
          (mem
            (matrix1 complex1)
            (t2tb65 (ind_basis_mat (ket_basis_index m n) 0 (power 2 n) 1))
            (t2tb76 (ket_basis n)))
          (and
            (= m (tb2t65
                   (make_f
                     complex1
                     (rows complex1 (t2tb65 m))
                     1
                     (t2tb61 (fc313 m n)))))
            (and
              (forall ((i Int))
                (=>
                  (valid_index complex1 (t2tb65 m) i 0)
                  (=>
                    (not (= i (ket_basis_index m n)))
                    (= (tb2t (get complex1 (t2tb65 m) i 0)) c_zero))))
              (valid_index complex1 (t2tb65 m) (ket_basis_index m n) 0))))))))

;; fc
(declare-fun fc314 (Int) (Array Int (Array Int complex)))

;; fc'def
(assert
  (forall ((i Int) (i1 Int) (us Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             int
             (t2tb61 (fc314 i))
             (t2tb8 i1))
           (t2tb8 us))) (indic int (t2tb8 i) (t2tb8 i1)))))

;; set_ket_basis
(assert
  (forall ((m (matrix complex)) (n Int) (i Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (=>
          (mem (matrix1 complex1) (t2tb65 m) (t2tb76 (ket_basis n)))
          (=>
            (= (tb2t (get complex1 (t2tb65 m) i 0)) c_one)
            (and
              (= (ket_basis_index m n) i)
              (and
                (forall ((i1 Int))
                  (=>
                    (valid_index complex1 (t2tb65 m) i1 0)
                    (=>
                      (not (= i1 i))
                      (= (tb2t (get complex1 (t2tb65 m) i1 0)) c_zero))))
                (and
                  (mem (matrix1 complex1) (t2tb65 m) (t2tb76 (ket_basis n)))
                  (= m (tb2t65
                         (make_f
                           complex1
                           (rows complex1 (t2tb65 m))
                           (columns complex1 (t2tb65 m))
                           (t2tb61 (fc314 i))))))))))))))

;; from_ket_basis
(assert
  (forall ((n Int) (m (matrix complex)))
    (=>
      (<= 0 n)
      (=>
        (mem (matrix1 complex1) (t2tb65 m) (t2tb76 (ket_basis n)))
        (exists ((i Int))
          (and
            (and (<= 0 i) (< i (power 2 n)))
            (= m (ind_basis_mat i 0 (power 2 n) 1))))))))

;; int_to_ket_basis
(assert
  (forall ((n Int) (i Int))
    (=>
      (< 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (mem (matrix1 complex1) (t2tb65 (ket n i)) (t2tb76 (ket_basis n)))))))

;; is_a_ket_basis_elt
(declare-fun is_a_ket_basis_elt ((matrix complex)) Bool)

;; is_a_ket_basis_elt'def
(assert
  (forall ((m (matrix complex)))
    (=
      (is_a_ket_basis_elt m)
      (and
        (is_a_ket m)
        (mem
          (matrix1 complex1)
          (t2tb65 m)
          (t2tb76 (ket_basis (ket_length m))))))))

;; ket_basis_elt_are_kets
(assert
  (forall ((m (matrix complex))) (=> (is_a_ket_basis_elt m) (is_a_ket m))))

;; get_is_a_ket_basis_elt
(assert
  (forall ((m (matrix complex)))
    (=>
      (is_a_ket_basis_elt m)
      (and
        (is_a_ket m)
        (and
          (mem
            (matrix1 complex1)
            (t2tb65 m)
            (t2tb76 (ket_basis (ket_length m))))
          (and
            (exists ((i Int))
              (and
                (and (<= 0 i) (< i (power 2 (ket_length m))))
                (= m (ket (ket_length m) i))))
            (and
              (exists ((i Int))
                (and
                  (and (<= 0 i) (< i (power 2 (ket_length m))))
                  (and
                    (= (tb2t (get complex1 (t2tb65 m) i 0)) c_one)
                    (forall ((j Int))
                      (=>
                        (and
                          (and (<= 0 j) (< j (power 2 (ket_length m))))
                          (not
                            (= (tb2t (get complex1 (t2tb65 m) j 0)) c_zero)))
                        (= i j))))))
              (forall ((i Int))
                (=>
                  (and
                    (and (<= 0 i) (< i (power 2 (ket_length m))))
                    (= (tb2t (get complex1 (t2tb65 m) i 0)) c_one))
                  (forall ((j Int))
                    (=>
                      (and
                        (and (<= 0 j) (< j (power 2 (ket_length m))))
                        (not (= (tb2t (get complex1 (t2tb65 m) j 0)) c_zero)))
                      (= i j))))))))))))

;; get_is_a_ket_basis_elt_indic
(assert
  (forall ((m (matrix complex)))
    (=>
      (is_a_ket_basis_elt m)
      (exists ((i Int))
        (and
          (and (<= 0 i) (< i (power 2 (ket_length m))))
          (forall ((j Int))
            (=>
              (and (<= 0 j) (< j (power 2 (ket_length m))))
              (= (tb2t (get complex1 (t2tb65 m) j 0)) (indic
                                                        int
                                                        (t2tb8 i)
                                                        (t2tb8 j))))))))))

;; set_is_a_ket_basis_elt
(assert
  (forall ((m (matrix complex)))
    (=>
      (is_a_ket m)
      (=>
        (exists ((i Int))
          (and
            (and (<= 0 i) (< i (power 2 (ket_length m))))
            (= m (ket (ket_length m) i))))
        (is_a_ket_basis_elt m)))))

;; fc
(declare-fun fc315 (Int) (Array Int (Array Int complex)))

;; fc'def
(assert
  (forall ((j Int) (i Int) (us Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             int
             (t2tb61 (fc315 j))
             (t2tb8 i))
           (t2tb8 us))) (indic int (t2tb8 i) (t2tb8 j)))))

;; set_is_a_ket_basis_elt_exists
(assert
  (forall ((m (matrix complex)))
    (=>
      (is_a_ket m)
      (=>
        (exists ((j Int))
          (and
            (and (<= 0 j) (< j (power 2 (ket_length m))))
            (= m (tb2t65
                   (make_f
                     complex1
                     (power 2 (ket_length m))
                     1
                     (t2tb61 (fc315 j)))))))
        (is_a_ket_basis_elt m)))))

;; ket_func_sets_ket_basis_elts
(assert
  (forall ((n Int) (i Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (and (is_a_ket_basis_elt (ket n i)) (= (ket_length (ket n i)) n))))))

;; kronecker_is_a_ket_basis_elt
(assert
  (forall ((x (matrix complex)) (y (matrix complex)))
    (=>
      (is_a_ket_basis_elt x)
      (=> (is_a_ket_basis_elt y) (is_a_ket_basis_elt (kronecker x y))))))

;; ket_is_a_ket_basis_elt
(assert
  (forall ((n Int) (i Int))
    (=>
      (<= 0 n)
      (=> (and (<= 0 i) (< i (power 2 n))) (is_a_ket_basis_elt (ket n i))))))

;; ket_basis_non_null_val
(assert
  (forall ((m (matrix complex)) (n Int) (i Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (=>
          (is_a_ket_basis_elt m)
          (=>
            (= (ket_length m) n)
            (=>
              (not (= (tb2t (get complex1 (t2tb65 m) i 0)) c_zero))
              (= m (ket n i)))))))))

;; ket_to_int
(declare-fun ket_to_int ((matrix complex)) Int)

;; ket_to_int'spec
(assert
  (forall ((m (matrix complex)))
    (=>
      (is_a_ket_basis_elt m)
      (and
        (and
          (<= 0 (ket_to_int m))
          (< (ket_to_int m) (power 2 (ket_length m))))
        (and
          (= (tb2t (get complex1 (t2tb65 m) (ket_to_int m) 0)) c_one)
          (and
            (= m (ket (ket_length m) (ket_to_int m)))
            (forall ((i Int))
              (=>
                (and (<= 0 i) (< i (power 2 (ket_length m))))
                (=> (= m (ket (ket_length m) i)) (= i (ket_to_int m)))))))))))

;; ket_to_int_ket
(assert
  (forall ((n Int) (i Int))
    (=>
      (<= 0 n)
      (=> (and (<= 0 i) (< i (power 2 n))) (= (ket_to_int (ket n i)) i)))))

;; equal_ket_by_int
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (l Int))
    (=>
      (is_a_ket_l m l)
      (=>
        (is_a_ket_l n l)
        (=>
          (is_a_ket_basis_elt n)
          (=>
            (is_a_ket_basis_elt m)
            (=> (= (ket_to_int m) (ket_to_int n)) (= m n))))))))

;; bin_to_ket
(declare-fun bin_to_ket (Int
  (Array Int Int)) (matrix complex))

;; bin_to_ket'def
(assert
  (forall ((n Int) (bvx (Array Int Int)))
    (=>
      (<= 0 n)
      (=> (binary bvx) (= (bin_to_ket n bvx) (ket n (bin_to_int bvx n)))))))

;; bin_to_ket'spec
(assert
  (forall ((n Int) (bvx (Array Int Int)))
    (=>
      (<= 0 n)
      (=>
        (binary bvx)
        (and
          (is_a_ket_basis_elt (bin_to_ket n bvx))
          (and
            (= (ket_length (bin_to_ket n bvx)) n)
            (and
              (= (ket_to_int (bin_to_ket n bvx)) (bin_to_int bvx n))
              (and
                (= (rows complex1 (t2tb65 (bin_to_ket n bvx))) (power 2 n))
                (and
                  (= (columns complex1 (t2tb65 (bin_to_ket n bvx))) 1)
                  (and
                    (is_a_ket (bin_to_ket n bvx))
                    (is_a_ket_l (bin_to_ket n bvx) n)))))))))))

;; bin_to_ket_l
(assert
  (forall ((n Int) (nqt Int) (bvx (Array Int Int)))
    (=>
      (<= 0 n)
      (=> (= n nqt) (=> (binary bvx) (is_a_ket_l (bin_to_ket n bvx) nqt))))))

;; bin_to_ket_eq
(assert
  (forall ((n1 Int) (n2 Int) (bvx1 (Array Int Int)) (bvx2 (Array Int Int)))
    (=>
      (<= 0 n1)
      (=>
        (binary bvx1)
        (=>
          (binary bvx2)
          (=>
            (= n2 n1)
            (=>
              (forall ((i Int))
                (=>
                  (and (<= 0 i) (< i n1))
                  (= (select bvx1 i) (select bvx2 i))))
              (= (bin_to_ket n1 bvx1) (bin_to_ket n2 bvx2)))))))))

;; kronecker_kets_bin_to_ket
(assert
  (forall ((f1 (Array Int Int)) (f2 (Array Int Int)) (n1 Int) (n2 Int))
    (=>
      (binary f1)
      (=>
        (binary f2)
        (=>
          (<= 0 n1)
          (=>
            (<= 0 n2)
            (= (kronecker (bin_to_ket n1 f1) (bin_to_ket n2 f2)) (bin_to_ket
                                                                   (+ n1 n2)
                                                                   (tb2t7
                                                                    (infix_at
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    int
                                                                    (infix_at
                                                                    (infix_mngt
                                                                    int
                                                                    (infix_mngt
                                                                    int
                                                                    int))
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    (infix_at
                                                                    (infix_mngt
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    (infix_mngt
                                                                    int
                                                                    (infix_mngt
                                                                    int
                                                                    int)))
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    (concat_fun_closure
                                                                    int)
                                                                    (t2tb7
                                                                    f1))
                                                                    (t2tb7
                                                                    f2))
                                                                    (t2tb8
                                                                    n1)))))))))))

;; kronecker_ket_to_int
(assert
  (forall ((x (matrix complex)) (y (matrix complex)))
    (=>
      (is_a_ket_basis_elt x)
      (=>
        (is_a_ket_basis_elt y)
        (and
          (is_a_ket_basis_elt (kronecker x y))
          (and
            (= (ket_length (kronecker x y)) (+ (ket_length x) (ket_length y)))
            (and
              (= (kronecker x y) (ket
                                   (+ (ket_length x) (ket_length y))
                                   (+ (* (ket_to_int x) (power
                                                          2
                                                          (ket_length y))) 
                                   (ket_to_int
                                     y))))
              (= (ket_to_int (kronecker x y)) (+ (* (ket_to_int x) (power
                                                                    2
                                                                    (ket_length
                                                                    y))) 
              (ket_to_int
                y))))))))))

;; ket_ket_to_int
(assert
  (forall ((x (matrix complex)))
    (=> (is_a_ket_basis_elt x) (= (ket (ket_length x) (ket_to_int x)) x))))

;; ket_ket_to_int_values
(assert
  (forall ((x (matrix complex)))
    (=>
      (is_a_ket_basis_elt x)
      (forall ((i Int) (j Int))
        (=>
          (valid_index complex1 (t2tb65 x) i j)
          (= (tb2t (get complex1 (t2tb65 x) i j)) (indic
                                                    int
                                                    (t2tb8 i)
                                                    (t2tb8 (ket_to_int x)))))))))

;; ket_basis_projection
(declare-fun ket_basis_projection ((matrix complex)
  Int) (matrix complex))

;; ket_basis_projection'def
(assert
  (forall ((m (matrix complex)) (j Int))
    (=>
      (is_a_ket m)
      (=>
        (and (<= 0 j) (< j (power 2 (ket_length m))))
        (= (ket_basis_projection m j) (infix_asdtdt
                                        (tb2t (get complex1 (t2tb65 m) j 0))
                                        (ket (ket_length m) j)))))))

;; ket_basis_projection'spec
(assert
  (forall ((m (matrix complex)) (j Int))
    (=>
      (is_a_ket m)
      (=>
        (and (<= 0 j) (< j (power 2 (ket_length m))))
        (= (ket_basis_projection m j) (basis_projection m j 0))))))

;; ket_basis_projection_columns
(assert
  (forall ((m (matrix complex)) (j Int))
    (=>
      (is_a_ket m)
      (=>
        (and (<= 0 j) (< j (power 2 (ket_length m))))
        (= (columns complex1 (t2tb65 (ket_basis_projection m j))) 1)))))

;; ket_basis_projection_rows
(assert
  (forall ((m (matrix complex)) (j Int))
    (=>
      (is_a_ket m)
      (=>
        (and (<= 0 j) (< j (power 2 (ket_length m))))
        (= (rows complex1 (t2tb65 (ket_basis_projection m j))) (rows
                                                                 complex1
                                                                 (t2tb65 m)))))))

;; ket_basis_projections
(declare-fun ket_basis_projections ((matrix complex)) (set (matrix complex)))

;; result
(declare-fun result38 ((matrix complex)) (Array Int (matrix complex)))

;; result'def
(assert
  (forall ((m (matrix complex)) (j Int))
    (= (tb2t65
         (infix_at (matrix1 complex1) int (t2tb68 (result38 m)) (t2tb8 j))) 
    (ite (mem int (t2tb8 j) (t2tb16 (to_fset 0 (power 2 (ket_length m)))))
      (ket_basis_projection m j)
      m))))

;; ket_basis_projections'def
(assert
  (forall ((m (matrix complex)))
    (=>
      (is_a_ket m)
      (= (ket_basis_projections m) (tb2t76
                                     (map1
                                       (matrix1 complex1)
                                       int
                                       (t2tb68 (result38 m))
                                       (t2tb16
                                         (to_fset 0 (power 2 (ket_length m))))))))))

;; ket_basis_projections'spec
(assert
  (forall ((m (matrix complex)))
    (=> (is_a_ket m) (= (ket_basis_projections m) (basis_projections m)))))

;; ket_basis_projections_antec
(declare-fun ket_basis_projections_antec ((matrix complex)) tuple0)

;; ket_basis_projections_antec'def
(assert
  (forall ((m (matrix complex)))
    (=> (is_a_ket m) (= (ket_basis_projections_antec m) Tuple0))))

;; ket_basis_projections_antec'spec
(assert
  (forall ((m (matrix complex)))
    (=>
      (is_a_ket m)
      (and
        (forall ((e (matrix complex)))
          (=
            (mem
              (matrix1 complex1)
              (t2tb65 e)
              (t2tb76 (ket_basis_projections m)))
            (exists ((j Int))
              (and
                (and (<= 0 j) (< j (power 2 (ket_length m))))
                (= e (ket_basis_projection m j))))))
        (forall ((e (matrix complex)))
          (=
            (mem
              (matrix1 complex1)
              (t2tb65 e)
              (t2tb76 (ket_basis_projections m)))
            (exists ((j Int) (i Int))
              (and
                (valid_index complex1 (t2tb65 m) j i)
                (= e (basis_projection m j i))))))))))

;; ket_sum
(declare-fun ket_sum (ty
  uni
  uni) (matrix complex))

;; ket_sum'def
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni))
      (=>
        (< 0 (cardinal a s))
        (=>
          (forall ((e uni))
            (=>
              (sort a e)
              (=>
                (mem a e s)
                (is_a_ket (tb2t65 (infix_at (matrix1 complex1) a f e))))))
          (=>
            (exists ((l Int))
              (forall ((e uni))
                (=>
                  (sort a e)
                  (=>
                    (mem a e s)
                    (= (ket_length
                         (tb2t65 (infix_at (matrix1 complex1) a f e))) l)))))
            (= (ket_sum a s f) (mat_sum a s f))))))))

;; fc
(declare-fun fc316 (ty
  uni
  Int) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 Int)) (sort (infix_mngt a complex1) (fc316 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (i Int) (e uni))
      (= (tb2t (infix_at complex1 a (fc316 a f i) e)) (tb2t
                                                        (get
                                                          complex1
                                                          (infix_at
                                                            (matrix1
                                                              complex1)
                                                            a
                                                            f
                                                            e)
                                                          i
                                                          0))))))

;; ket_sum'spec
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni))
      (=>
        (< 0 (cardinal a s))
        (=>
          (forall ((e uni))
            (=>
              (sort a e)
              (=>
                (mem a e s)
                (is_a_ket (tb2t65 (infix_at (matrix1 complex1) a f e))))))
          (=>
            (exists ((l Int))
              (forall ((e uni))
                (=>
                  (sort a e)
                  (=>
                    (mem a e s)
                    (= (ket_length
                         (tb2t65 (infix_at (matrix1 complex1) a f e))) l)))))
            (and
              (forall ((i Int))
                (=>
                  (valid_index complex1 (t2tb65 (ket_sum a s f)) i 0)
                  (= (tb2t (get complex1 (t2tb65 (ket_sum a s f)) i 0)) 
                  (sum
                    a
                    s
                    (fc316 a f i)))))
              (and
                (is_a_ket (ket_sum a s f))
                (forall ((e uni))
                  (=>
                    (mem a e s)
                    (= (ket_length (ket_sum a s f)) (ket_length
                                                      (tb2t65
                                                        (infix_at
                                                          (matrix1 complex1)
                                                          a
                                                          f
                                                          e))))))))))))))

;; ket_sum_l
(declare-fun ket_sum_l (ty
  uni
  uni
  Int) (matrix complex))

;; result
(declare-fun result39 () (Array Int complex))

;; fc
(declare-fun fc317 () (Array (matrix complex) (Array Int complex)))

;; fc
(declare-fun fc318 () (Array (matrix complex) (Array Int complex)))

;; result'def
(assert
  (forall ((us Int))
    (= (tb2t (infix_at complex1 int (t2tb51 result39) (t2tb8 us))) c_zero)))

;; t2tb
(declare-fun t2tb113 ((Array (matrix complex) (Array Int complex))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (matrix complex) (Array Int complex))))
    (sort
      (infix_mngt (matrix1 complex1) (infix_mngt int complex1))
      (t2tb113 x))))

;; tb2t
(declare-fun tb2t113 (uni) (Array (matrix complex) (Array Int complex)))

;; BridgeL
(assert
  (forall ((i (Array (matrix complex) (Array Int complex))))
    (! (= (tb2t113 (t2tb113 i)) i) :pattern ((t2tb113 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort (infix_mngt (matrix1 complex1) (infix_mngt int complex1)) j)
         (= (t2tb113 (tb2t113 j)) j)) :pattern ((t2tb113 (tb2t113 j))) )))

;; fc'def
(assert
  (forall ((y0 (matrix complex)) (y1 Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             (matrix1 complex1)
             (t2tb113 fc317)
             (t2tb65 y0))
           (t2tb8 y1))) (tb2t (get complex1 (t2tb65 y0) y1 0)))))

;; fc'def
(assert
  (forall ((y0 (matrix complex)) (y1 Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             (matrix1 complex1)
             (t2tb113 fc318)
             (t2tb65 y0))
           (t2tb8 y1))) (tb2t (get complex1 (t2tb65 y0) y1 0)))))

;; ket_sum_l'def
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (l Int))
      (=>
        (<= 0 l)
        (ite (= (cardinal a s) 0)
          (= (ket_sum_l a s f l) (make_ket l result39))
          (ite (= (cardinal a s) 1)
            (= (ket_sum_l a s f l) (make_ket
                                     l
                                     (tb2t51
                                       (infix_at
                                         (infix_mngt int complex1)
                                         (matrix1 complex1)
                                         (t2tb113 fc317)
                                         (infix_at
                                           (matrix1 complex1)
                                           a
                                           f
                                           (choose1 a s))))))
            (= (ket_sum_l a s f l) (add_ket
                                     (ket_sum_l
                                       a
                                       (remove a (choose1 a s) s)
                                       f
                                       l)
                                     (make_ket
                                       l
                                       (tb2t51
                                         (infix_at
                                           (infix_mngt int complex1)
                                           (matrix1 complex1)
                                           (t2tb113 fc318)
                                           (infix_at
                                             (matrix1 complex1)
                                             a
                                             f
                                             (choose1 a s)))))))))))))

;; fc
(declare-fun fc319 (ty
  uni
  uni) (Array Int complex))

;; fc
(declare-fun fc320 (ty
  uni
  Int) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 Int))
      (sort (infix_mngt a (matrix1 complex1)) (fc320 a x x1)))))

;; fc
(declare-fun fc321 (ty
  uni
  Int) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 Int)) (sort (infix_mngt a complex1) (fc321 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (i uni) (j Int))
      (= (tb2t (infix_at complex1 int (t2tb51 (fc319 a f i)) (t2tb8 j))) 
      (tb2t
        (get complex1 (infix_at (matrix1 complex1) a f i) j 0))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (l Int) (i uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc320 a f l) i)) (make_ket
                                                                    l
                                                                    (fc319
                                                                    a
                                                                    f
                                                                    i))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (i Int) (e uni))
      (= (tb2t (infix_at complex1 a (fc321 a f i) e)) (tb2t
                                                        (get
                                                          complex1
                                                          (infix_at
                                                            (matrix1
                                                              complex1)
                                                            a
                                                            f
                                                            e)
                                                          i
                                                          0))))))

;; ket_sum_l'spec
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (l Int))
      (=>
        (<= 0 l)
        (and
          (=>
            (< 0 (cardinal a s))
            (= (ket_sum_l a s f l) (mat_sum a s (fc320 a f l))))
          (and
            (is_a_ket (ket_sum_l a s f l))
            (and
              (forall ((i Int))
                (=>
                  (valid_index complex1 (t2tb65 (ket_sum_l a s f l)) i 0)
                  (= (tb2t (get complex1 (t2tb65 (ket_sum_l a s f l)) i 0)) 
                  (sum
                    a
                    s
                    (fc321 a f i)))))
              (and
                (is_a_ket_l (ket_sum_l a s f l) l)
                (and
                  (=>
                    (< 0 (cardinal a s))
                    (=>
                      (forall ((e uni))
                        (=>
                          (sort a e)
                          (=>
                            (mem a e s)
                            (is_a_ket_l
                              (tb2t65 (infix_at (matrix1 complex1) a f e))
                              l))))
                      (= (ket_sum_l a s f l) (mat_sum a s f))))
                  (= (ket_length (ket_sum_l a s f l)) l))))))))))

;; fc
(declare-fun fc322 (ty
  uni
  uni) (Array Int complex))

;; fc
(declare-fun fc323 (ty
  uni
  Int) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 Int))
      (sort (infix_mngt a (matrix1 complex1)) (fc323 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (i uni) (j Int))
      (= (tb2t (infix_at complex1 int (t2tb51 (fc322 a f i)) (t2tb8 j))) 
      (tb2t
        (get complex1 (infix_at (matrix1 complex1) a f i) j 0))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (l Int) (i uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc323 a f l) i)) (make_ket
                                                                    l
                                                                    (fc322
                                                                    a
                                                                    f
                                                                    i))))))

;; ket_sum_l_to_mat_sum
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (l Int))
      (=>
        (<= 0 l)
        (=>
          (< 0 (cardinal a s))
          (= (ket_sum_l a s f l) (mat_sum a s (fc323 a f l))))))))

;; ket_sum_l_rows
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (l Int))
      (=>
        (<= 0 l)
        (=>
          (< 0 (cardinal a s))
          (= (rows complex1 (t2tb65 (ket_sum_l a s f l))) (power 2 l)))))))

;; fc
(declare-fun fc324 (ty
  uni
  Int) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 Int)) (sort (infix_mngt a complex1) (fc324 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (i Int) (e uni))
      (= (tb2t (infix_at complex1 a (fc324 a f i) e)) (tb2t
                                                        (get
                                                          complex1
                                                          (infix_at
                                                            (matrix1
                                                              complex1)
                                                            a
                                                            f
                                                            e)
                                                          i
                                                          0))))))

;; ket_sum_l_value
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (l Int) (i Int) (j Int))
      (=>
        (<= 0 l)
        (=>
          (and (<= 0 i) (< i (power 2 l)))
          (=>
            (= j 0)
            (= (tb2t (get complex1 (t2tb65 (ket_sum_l a s f l)) i j)) 
            (sum
              a
              s
              (fc324 a f i)))))))))

;; fc
(declare-fun fc325 (ty
  uni
  Int) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 Int)) (sort (infix_mngt a complex1) (fc325 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (i Int) (e uni))
      (= (tb2t (infix_at complex1 a (fc325 a f i) e)) (tb2t
                                                        (get
                                                          complex1
                                                          (infix_at
                                                            (matrix1
                                                              complex1)
                                                            a
                                                            f
                                                            e)
                                                          i
                                                          0))))))

;; get_ket_sum_l_value
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (l Int) (i Int))
      (=>
        (<= 0 l)
        (=>
          (and (<= 0 i) (< i (power 2 l)))
          (= (tb2t (get complex1 (t2tb65 (ket_sum_l a s f l)) i 0)) (sum
                                                                    a
                                                                    s
                                                                    (fc325
                                                                    a
                                                                    f
                                                                    i))))))))

;; ket_sum_l_columns
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (l Int))
      (=> (<= 0 l) (= (columns complex1 (t2tb65 (ket_sum_l a s f l))) 1)))))

;; ket_sum_null_but_maybe_one_elt
(assert
  (forall ((a ty))
    (forall ((f uni) (s uni) (e uni))
      (=>
        (< 1 (cardinal a s))
        (=>
          (forall ((e1 uni))
            (=>
              (sort a e1)
              (=>
                (mem a e1 s)
                (is_a_ket (tb2t65 (infix_at (matrix1 complex1) a f e1))))))
          (=>
            (constant_size a s f)
            (=>
              (mem a e s)
              (=>
                (forall ((eqt uni))
                  (=>
                    (sort a eqt)
                    (=>
                      (mem a eqt s)
                      (=>
                        (not (= e eqt))
                        (null_mat
                          (tb2t65 (infix_at (matrix1 complex1) a f eqt)))))))
                (= (ket_sum a s f) (tb2t65
                                     (infix_at (matrix1 complex1) a f e)))))))))))

;; ket_sum_null
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (l Int))
      (=>
        (< 1 (cardinal a s))
        (=>
          (<= 0 l)
          (=>
            (forall ((e uni))
              (=>
                (sort a e)
                (=>
                  (mem a e s)
                  (forall ((i Int))
                    (=>
                      (and (<= 0 i) (< i (power 2 l)))
                      (= (tb2t
                           (get
                             complex1
                             (infix_at (matrix1 complex1) a f e)
                             i
                             0)) c_zero))))))
            (forall ((j Int))
              (=>
                (and (<= 0 j) (< j (power 2 l)))
                (= (tb2t (get complex1 (t2tb65 (ket_sum_l a s f l)) j 0)) 
                c_zero)))))))))

;; fc
(declare-fun fc326 () (Array (matrix complex) (Array Int complex)))

;; fc'def
(assert
  (forall ((y0 (matrix complex)) (y1 Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             (matrix1 complex1)
             (t2tb113 fc326)
             (t2tb65 y0))
           (t2tb8 y1))) (tb2t (get complex1 (t2tb65 y0) y1 0)))))

;; ket_sum_l_null_but_maybe_one_elt
(assert
  (forall ((a ty))
    (forall ((f uni) (s uni) (e uni) (l Int))
      (=>
        (<= 0 l)
        (=>
          (< 1 (cardinal a s))
          (=>
            (mem a e s)
            (=>
              (forall ((eqt uni))
                (=>
                  (sort a eqt)
                  (=>
                    (mem a eqt s)
                    (=>
                      (not (= eqt e))
                      (forall ((i Int))
                        (=>
                          (and (<= 0 i) (< i (power 2 l)))
                          (= (tb2t
                               (get
                                 complex1
                                 (infix_at (matrix1 complex1) a f eqt)
                                 i
                                 0)) c_zero)))))))
              (= (ket_sum_l a s f l) (make_ket
                                       l
                                       (tb2t51
                                         (infix_at
                                           (infix_mngt int complex1)
                                           (matrix1 complex1)
                                           (t2tb113 fc326)
                                           (infix_at
                                             (matrix1 complex1)
                                             a
                                             f
                                             e))))))))))))

;; ket_sum_l_null_but_maybe_one_elt_
(assert
  (forall ((a ty))
    (forall ((f uni) (s uni) (e uni) (l Int))
      (=>
        (<= 0 l)
        (=>
          (< 1 (cardinal a s))
          (=>
            (mem a e s)
            (=>
              (forall ((eqt uni))
                (=>
                  (sort a eqt)
                  (=>
                    (mem a eqt s)
                    (is_a_ket_l
                      (tb2t65 (infix_at (matrix1 complex1) a f eqt))
                      l))))
              (=>
                (forall ((eqt uni))
                  (=>
                    (sort a eqt)
                    (=>
                      (mem a eqt s)
                      (=>
                        (not (= eqt e))
                        (forall ((i Int))
                          (=>
                            (and (<= 0 i) (< i (power 2 l)))
                            (= (tb2t
                                 (get
                                   complex1
                                   (infix_at (matrix1 complex1) a f eqt)
                                   i
                                   0)) c_zero)))))))
                (= (ket_sum_l a s f l) (tb2t65
                                         (infix_at (matrix1 complex1) a f e)))))))))))

;; ket_sum_ket_l
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (l Int))
      (=> (<= 0 l) (is_a_ket_l (ket_sum_l a s f l) l)))))

;; ket_sum_ket_l_
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (l Int) (lqt Int))
      (=> (<= 0 l) (=> (= l lqt) (is_a_ket_l (ket_sum_l a s f l) lqt))))))

;; add_ket_l_eq
(assert
  (forall ((m (matrix complex)) (o (matrix complex)) (mqt (matrix complex)) (oqt (matrix complex)) (l Int))
    (=>
      (<= 0 l)
      (=>
        (= m mqt)
        (=> (= o oqt) (= (add_ket_l m o l) (add_ket_l mqt oqt l)))))))

;; add_ket_l_eq_scal
(assert
  (forall ((m (matrix complex)) (o (matrix complex)) (mqt (matrix complex)) (oqt (matrix complex)) (a complex) (b complex) (aqt complex) (bqt complex) (l Int))
    (=>
      (<= 0 l)
      (=>
        (= m mqt)
        (=>
          (= o oqt)
          (=>
            (= a aqt)
            (=>
              (= b bqt)
              (= (add_ket_l (infix_asdtdt a m) (infix_asdtdt b o) l) 
              (add_ket_l
                (infix_asdtdt aqt mqt)
                (infix_asdtdt bqt oqt)
                l)))))))))

;; add_ket_l_scal
(assert
  (forall ((x (matrix complex)) (y (matrix complex)) (a complex) (l Int))
    (=>
      (is_a_ket_l x l)
      (=>
        (is_a_ket_l y l)
        (= (add_ket_l (infix_asdtdt a x) (infix_asdtdt a y) l) (infix_asdtdt
                                                                 a
                                                                 (add_ket_l
                                                                   x
                                                                   y
                                                                   l)))))))

;; add_ket_l_scal_rev
(assert
  (forall ((x (matrix complex)) (y (matrix complex)) (a complex) (l Int))
    (=>
      (is_a_ket_l x l)
      (=>
        (is_a_ket_l y l)
        (= (infix_asdtdt a (add_ket_l x y l)) (add_ket_l
                                                (infix_asdtdt a x)
                                                (infix_asdtdt a y)
                                                l))))))

;; get_ket_scalar
(assert
  (forall ((x (matrix complex)) (a complex) (i Int))
    (= (tb2t (get complex1 (t2tb65 (infix_asdtdt a x)) i 0)) (infix_asdt
                                                               a
                                                               (tb2t
                                                                 (get
                                                                   complex1
                                                                   (t2tb65 x)
                                                                   i
                                                                   0))))))

;; scal_add_scal_ket_l
(assert
  (forall ((g complex) (a complex) (x (matrix complex)) (aqt complex) (xqt (matrix complex)) (n Int))
    (=>
      (<= 0 n)
      (= (infix_asdtdt
           g
           (add_ket_l (infix_asdtdt a x) (infix_asdtdt aqt xqt) n)) (add_ket_l
                                                                    (infix_asdtdt
                                                                    (infix_asdt
                                                                    g
                                                                    a)
                                                                    x)
                                                                    (infix_asdtdt
                                                                    (infix_asdt
                                                                    g
                                                                    aqt)
                                                                    xqt)
                                                                    n)))))

;; add_ket_l_switch
(assert
  (forall ((a (matrix complex)) (b (matrix complex)) (c (matrix complex)) (d (matrix complex)) (n Int))
    (=>
      (<= 0 n)
      (= (add_ket_l (add_ket_l a b n) (add_ket_l c d n) n) (add_ket_l
                                                             (add_ket_l
                                                               a
                                                               c
                                                               n)
                                                             (add_ket_l
                                                               b
                                                               d
                                                               n)
                                                             n)))))

;; add_ket_scal_fact
(assert
  (forall ((a (matrix complex)) (n Int) (s complex) (sqt complex))
    (=>
      (is_a_ket_l a n)
      (=>
        (<= 0 n)
        (= (add_ket_l (infix_asdtdt s a) (infix_asdtdt sqt a) n) (infix_asdtdt
                                                                   (infix_pldt
                                                                    s
                                                                    sqt)
                                                                   a))))))

;; fc
(declare-fun fc327 (ty
  uni
  uni
  Int) uni)

;; fc_sort
(assert
  (forall ((b ty))
    (forall ((x uni) (x1 uni) (x2 Int))
      (sort (infix_mngt b (matrix1 complex1)) (fc327 b x x1 x2)))))

;; fc'def
(assert
  (forall ((b ty))
    (forall ((f uni) (g uni) (l Int) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) b (fc327 b f g l) k)) (add_ket_l
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    b
                                                                    f
                                                                    k))
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    b
                                                                    g
                                                                    k))
                                                                    l)))))

;; ket_sum_comp_l
(assert
  (forall ((b ty))
    (forall ((s uni) (f uni) (g uni) (l Int))
      (=>
        (<= 0 l)
        (= (ket_sum_l b s (fc327 b f g l) l) (add_ket_l
                                               (ket_sum_l b s f l)
                                               (ket_sum_l b s g l)
                                               l))))))

;; fc
(declare-fun fc328 (ty
  uni
  uni
  Int) uni)

;; fc_sort
(assert
  (forall ((b ty))
    (forall ((x uni) (x1 uni) (x2 Int))
      (sort (infix_mngt b (matrix1 complex1)) (fc328 b x x1 x2)))))

;; fc'def
(assert
  (forall ((b ty))
    (forall ((f uni) (g uni) (l Int) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) b (fc328 b f g l) k)) (add_ket_l
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    b
                                                                    f
                                                                    k))
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    b
                                                                    g
                                                                    k))
                                                                    l)))))

;; ket_sum_comp_l_rev
(assert
  (forall ((b ty))
    (forall ((s uni) (f uni) (g uni) (l Int))
      (=>
        (<= 0 l)
        (= (add_ket_l (ket_sum_l b s f l) (ket_sum_l b s g l) l) (ket_sum_l
                                                                   b
                                                                   s
                                                                   (fc328
                                                                    b
                                                                    f
                                                                    g
                                                                    l)
                                                                   l))))))

;; fc
(declare-fun fc329 (ty
  uni
  complex) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 complex))
      (sort (infix_mngt a (matrix1 complex1)) (fc329 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (a1 complex) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc329 a f a1) k)) (infix_asdtdt
                                                                    a1
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k)))))))

;; ket_sum_scalar_l
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (a1 complex) (l Int))
      (=>
        (<= 0 l)
        (= (ket_sum_l a s (fc329 a f a1) l) (infix_asdtdt
                                              a1
                                              (ket_sum_l a s f l)))))))

;; ket_l_ket_sum_scalar
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (a1 complex) (l Int) (n Int))
      (=>
        (<= 0 l)
        (=> (= l n) (is_a_ket_l (infix_asdtdt a1 (ket_sum_l a s f l)) n))))))

;; scal_ket_sum_scalar_l
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (b complex) (l Int) (lqt Int))
      (=>
        (<= 0 l)
        (=> (= l lqt) (is_a_ket_l (infix_asdtdt b (ket_sum_l a s f l)) lqt))))))

;; fc
(declare-fun fc330 (ty
  uni
  complex) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 complex))
      (sort (infix_mngt a (matrix1 complex1)) (fc330 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (a1 complex) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc330 a f a1) k)) (infix_asdtdt
                                                                    a1
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k)))))))

;; ket_sum_scalar_rev_l
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (a1 complex) (l Int))
      (=>
        (<= 0 l)
        (= (infix_asdtdt a1 (ket_sum_l a s f l)) (ket_sum_l
                                                   a
                                                   s
                                                   (fc330 a f a1)
                                                   l))))))

;; ket_sum_eq
(assert
  (forall ((a ty))
    (forall ((s uni) (sqt uni) (f uni) (g uni) (l Int))
      (=>
        (<= 0 l)
        (=>
          (= s sqt)
          (=>
            (forall ((a1 uni))
              (=>
                (sort a a1)
                (=>
                  (mem a a1 s)
                  (= (tb2t65 (infix_at (matrix1 complex1) a f a1)) (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    g
                                                                    a1))))))
            (= (ket_sum_l a s f l) (ket_sum_l a sqt g l))))))))

;; ket_sum_eq_gen
(assert
  (forall ((a ty))
    (forall ((s uni) (sqt uni) (f uni) (g uni) (l1 Int) (l2 Int))
      (=>
        (<= 0 l1)
        (=>
          (= s sqt)
          (=>
            (= l1 l2)
            (=>
              (forall ((a1 uni))
                (=>
                  (sort a a1)
                  (=>
                    (mem a a1 s)
                    (= (tb2t65 (infix_at (matrix1 complex1) a f a1)) 
                    (tb2t65
                      (infix_at (matrix1 complex1) a g a1))))))
              (= (ket_sum_l a s f l1) (ket_sum_l a sqt g l2)))))))))

;; fc
(declare-fun fc331 (ty
  uni
  Int) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 Int)) (sort (infix_mngt a complex1) (fc331 a x x1)))))

;; fc
(declare-fun fc332 (ty
  uni
  Int) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 Int)) (sort (infix_mngt a complex1) (fc332 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (i Int) (e uni))
      (= (tb2t (infix_at complex1 a (fc331 a f i) e)) (tb2t
                                                        (get
                                                          complex1
                                                          (infix_at
                                                            (matrix1
                                                              complex1)
                                                            a
                                                            f
                                                            e)
                                                          i
                                                          0))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((g uni) (i Int) (e uni))
      (= (tb2t (infix_at complex1 a (fc332 a g i) e)) (tb2t
                                                        (get
                                                          complex1
                                                          (infix_at
                                                            (matrix1
                                                              complex1)
                                                            a
                                                            g
                                                            e)
                                                          i
                                                          0))))))

;; ket_sum_eq_by_sum
(assert
  (forall ((a ty))
    (forall ((s uni) (sqt uni) (f uni) (g uni) (l1 Int) (l2 Int))
      (=>
        (<= 0 l1)
        (=>
          (= s sqt)
          (=>
            (= l1 l2)
            (=>
              (forall ((i Int))
                (=>
                  (and (<= 0 i) (< i (power 2 l1)))
                  (= (sum a s (fc331 a f i)) (sum a s (fc332 a g i)))))
              (= (ket_sum_l a s f l1) (ket_sum_l a sqt g l2)))))))))

;; ket_sum_bvs_eq
(assert
  (forall ((n1 Int) (n2 Int) (f (Array bitvec (matrix complex))) (g (Array bitvec (matrix complex))) (l1 Int) (l2 Int))
    (=>
      (<= 0 l1)
      (=>
        (= l1 l2)
        (=>
          (= n1 n2)
          (=>
            (<= 0 n1)
            (=>
              (forall ((e bitvec))
                (=>
                  (mem bitvec1 (t2tb77 e) (t2tb79 (n_bvs n1)))
                  (= (tb2t65
                       (infix_at
                         (matrix1 complex1)
                         bitvec1
                         (t2tb80 f)
                         (t2tb77 e))) (tb2t65
                                        (infix_at
                                          (matrix1 complex1)
                                          bitvec1
                                          (t2tb80 g)
                                          (t2tb77 e))))))
              (= (ket_sum_l bitvec1 (t2tb79 (n_bvs n1)) (t2tb80 f) l1) 
              (ket_sum_l
                bitvec1
                (t2tb79 (n_bvs n2))
                (t2tb80 g)
                l2)))))))))

;; ket_sum_scal_bvs_eq
(assert
  (forall ((n1 Int) (n2 Int) (f (Array bitvec (matrix complex))) (g (Array bitvec (matrix complex))) (l1 Int) (l2 Int) (s1 complex) (s2 complex))
    (=>
      (<= 0 l1)
      (=>
        (= l1 l2)
        (=>
          (= n1 n2)
          (=>
            (= s1 s2)
            (=>
              (<= 0 n1)
              (=>
                (forall ((e bitvec))
                  (=>
                    (mem bitvec1 (t2tb77 e) (t2tb79 (n_bvs n1)))
                    (= (tb2t65
                         (infix_at
                           (matrix1 complex1)
                           bitvec1
                           (t2tb80 f)
                           (t2tb77 e))) (tb2t65
                                          (infix_at
                                            (matrix1 complex1)
                                            bitvec1
                                            (t2tb80 g)
                                            (t2tb77 e))))))
                (= (infix_asdtdt
                     s1
                     (ket_sum_l bitvec1 (t2tb79 (n_bvs n1)) (t2tb80 f) l1)) 
                (infix_asdtdt
                  s2
                  (ket_sum_l bitvec1 (t2tb79 (n_bvs n2)) (t2tb80 g) l2)))))))))))

;; fc
(declare-fun fc333 (Int
  (Array bitvec (Array bitvec (matrix complex)))
  Int) (Array bitvec (matrix complex)))

;; fc
(declare-fun fc334 (Int
  (Array bitvec (Array bitvec (matrix complex)))
  Int) (Array bitvec (matrix complex)))

;; t2tb
(declare-fun t2tb114 ((Array bitvec (Array bitvec (matrix complex)))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array bitvec (Array bitvec (matrix complex)))))
    (sort
      (infix_mngt bitvec1 (infix_mngt bitvec1 (matrix1 complex1)))
      (t2tb114 x))))

;; tb2t
(declare-fun tb2t114 (uni) (Array bitvec (Array bitvec (matrix complex))))

;; BridgeL
(assert
  (forall ((i (Array bitvec (Array bitvec (matrix complex)))))
    (! (= (tb2t114 (t2tb114 i)) i) :pattern ((t2tb114 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort
           (infix_mngt bitvec1 (infix_mngt bitvec1 (matrix1 complex1)))
           j)
         (= (t2tb114 (tb2t114 j)) j)) :pattern ((t2tb114 (tb2t114 j))) )))

;; fc'def
(assert
  (forall ((n2 Int) (f (Array bitvec (Array bitvec (matrix complex)))) (l1 Int) (k bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc333 n2 f l1))
           (t2tb77 k))) (ket_sum_l
                          bitvec1
                          (t2tb79 (n_bvs n2))
                          (infix_at
                            (infix_mngt bitvec1 (matrix1 complex1))
                            bitvec1
                            (t2tb114 f)
                            (t2tb77 k))
                          l1))))

;; fc'def
(assert
  (forall ((n2qt Int) (g (Array bitvec (Array bitvec (matrix complex)))) (l1qt Int) (k bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc334 n2qt g l1qt))
           (t2tb77 k))) (ket_sum_l
                          bitvec1
                          (t2tb79 (n_bvs n2qt))
                          (infix_at
                            (infix_mngt bitvec1 (matrix1 complex1))
                            bitvec1
                            (t2tb114 g)
                            (t2tb77 k))
                          l1qt))))

;; ket_sum_sum_bvs_eq
(assert
  (forall ((n1 Int) (n2 Int) (n1qt Int) (n2qt Int) (f (Array bitvec (Array bitvec (matrix complex)))) (g (Array bitvec (Array bitvec (matrix complex)))) (l1 Int) (l2 Int) (l1qt Int) (l2qt Int))
    (=>
      (<= 0 l1)
      (=>
        (and (= l1 l2) (and (= l2 l1qt) (= l1qt l2qt)))
        (=>
          (= n1 n1qt)
          (=>
            (<= 0 n1)
            (=>
              (= n2 n2qt)
              (=>
                (<= 0 n2)
                (=>
                  (forall ((e bitvec) (eqt bitvec))
                    (=>
                      (mem bitvec1 (t2tb77 e) (t2tb79 (n_bvs n1)))
                      (=>
                        (mem bitvec1 (t2tb77 eqt) (t2tb79 (n_bvs n2)))
                        (= (tb2t65
                             (infix_at
                               (matrix1 complex1)
                               bitvec1
                               (infix_at
                                 (infix_mngt bitvec1 (matrix1 complex1))
                                 bitvec1
                                 (t2tb114 f)
                                 (t2tb77 e))
                               (t2tb77 eqt))) (tb2t65
                                                (infix_at
                                                  (matrix1 complex1)
                                                  bitvec1
                                                  (infix_at
                                                    (infix_mngt
                                                      bitvec1
                                                      (matrix1 complex1))
                                                    bitvec1
                                                    (t2tb114 g)
                                                    (t2tb77 e))
                                                  (t2tb77 eqt)))))))
                  (= (ket_sum_l
                       bitvec1
                       (t2tb79 (n_bvs n1))
                       (t2tb80 (fc333 n2 f l1))
                       l2) (ket_sum_l
                             bitvec1
                             (t2tb79 (n_bvs n1qt))
                             (t2tb80 (fc334 n2qt g l1qt))
                             l2qt)))))))))))

;; fc
(declare-fun fc335 (Int
  (Array bitvec (Array bitvec (matrix complex)))
  Int) (Array bitvec (matrix complex)))

;; fc
(declare-fun fc336 (Int
  (Array bitvec (Array bitvec (matrix complex)))
  Int) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((n2 Int) (f (Array bitvec (Array bitvec (matrix complex)))) (l1 Int) (k bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc335 n2 f l1))
           (t2tb77 k))) (ket_sum_l
                          bitvec1
                          (t2tb79 (n_bvs n2))
                          (infix_at
                            (infix_mngt bitvec1 (matrix1 complex1))
                            bitvec1
                            (t2tb114 f)
                            (t2tb77 k))
                          l1))))

;; fc'def
(assert
  (forall ((n2qt Int) (g (Array bitvec (Array bitvec (matrix complex)))) (l1qt Int) (k bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc336 n2qt g l1qt))
           (t2tb77 k))) (ket_sum_l
                          bitvec1
                          (t2tb79 (n_bvs n2qt))
                          (infix_at
                            (infix_mngt bitvec1 (matrix1 complex1))
                            bitvec1
                            (t2tb114 g)
                            (t2tb77 k))
                          l1qt))))

;; ket_sum_sum_scal_bvs_eq
(assert
  (forall ((n1 Int) (n2 Int) (n1qt Int) (n2qt Int) (f (Array bitvec (Array bitvec (matrix complex)))) (g (Array bitvec (Array bitvec (matrix complex)))) (l1 Int) (l2 Int) (l1qt Int) (l2qt Int) (s1 complex) (s2 complex))
    (=>
      (<= 0 l1)
      (=>
        (and (= l1 l2) (and (= l2 l1qt) (= l1qt l2qt)))
        (=>
          (= n1 n1qt)
          (=>
            (<= 0 n1)
            (=>
              (= n2 n2qt)
              (=>
                (= s1 s2)
                (=>
                  (<= 0 n2)
                  (=>
                    (forall ((e bitvec) (eqt bitvec))
                      (=>
                        (mem bitvec1 (t2tb77 e) (t2tb79 (n_bvs n1)))
                        (=>
                          (mem bitvec1 (t2tb77 eqt) (t2tb79 (n_bvs n2)))
                          (= (tb2t65
                               (infix_at
                                 (matrix1 complex1)
                                 bitvec1
                                 (infix_at
                                   (infix_mngt bitvec1 (matrix1 complex1))
                                   bitvec1
                                   (t2tb114 f)
                                   (t2tb77 e))
                                 (t2tb77 eqt))) (tb2t65
                                                  (infix_at
                                                    (matrix1 complex1)
                                                    bitvec1
                                                    (infix_at
                                                      (infix_mngt
                                                        bitvec1
                                                        (matrix1 complex1))
                                                      bitvec1
                                                      (t2tb114 g)
                                                      (t2tb77 e))
                                                    (t2tb77 eqt)))))))
                    (= (infix_asdtdt
                         s1
                         (ket_sum_l
                           bitvec1
                           (t2tb79 (n_bvs n1))
                           (t2tb80 (fc335 n2 f l1))
                           l2)) (infix_asdtdt
                                  s1
                                  (ket_sum_l
                                    bitvec1
                                    (t2tb79 (n_bvs n1qt))
                                    (t2tb80 (fc336 n2qt g l1qt))
                                    l2qt)))))))))))))

;; fc
(declare-fun fc337 (Int
  (Array bitvec (Array bitvec (matrix complex)))
  Int
  complex) (Array bitvec (matrix complex)))

;; fc
(declare-fun fc338 (Int
  (Array bitvec (Array bitvec (matrix complex)))
  Int) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((n2qt Int) (f (Array bitvec (Array bitvec (matrix complex)))) (l1qt Int) (s2 complex) (k bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc337 n2qt f l1qt s2))
           (t2tb77 k))) (infix_asdtdt
                          s2
                          (ket_sum_l
                            bitvec1
                            (t2tb79 (n_bvs n2qt))
                            (infix_at
                              (infix_mngt bitvec1 (matrix1 complex1))
                              bitvec1
                              (t2tb114 f)
                              (t2tb77 k))
                            l1qt)))))

;; fc'def
(assert
  (forall ((n2 Int) (g (Array bitvec (Array bitvec (matrix complex)))) (l1 Int) (k bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc338 n2 g l1))
           (t2tb77 k))) (ket_sum_l
                          bitvec1
                          (t2tb79 (n_bvs n2))
                          (infix_at
                            (infix_mngt bitvec1 (matrix1 complex1))
                            bitvec1
                            (t2tb114 g)
                            (t2tb77 k))
                          l1))))

;; ket_sum_sum_scal_mult_bvs_eq
(assert
  (forall ((n1 Int) (n2 Int) (n1qt Int) (n2qt Int) (f (Array bitvec (Array bitvec (matrix complex)))) (g (Array bitvec (Array bitvec (matrix complex)))) (l1 Int) (l2 Int) (l1qt Int) (l2qt Int) (s1 complex) (s2 complex) (s3 complex))
    (=>
      (<= 0 l1)
      (=>
        (and (= l1 l2) (and (= l2 l1qt) (= l1qt l2qt)))
        (=>
          (= n1 n1qt)
          (=>
            (<= 0 n1)
            (=>
              (= s3 (infix_asdt s1 s2))
              (=>
                (= n2 n2qt)
                (=>
                  (<= 0 n2)
                  (=>
                    (forall ((e bitvec) (eqt bitvec))
                      (=>
                        (mem bitvec1 (t2tb77 e) (t2tb79 (n_bvs n1)))
                        (=>
                          (mem bitvec1 (t2tb77 eqt) (t2tb79 (n_bvs n2)))
                          (= (tb2t65
                               (infix_at
                                 (matrix1 complex1)
                                 bitvec1
                                 (infix_at
                                   (infix_mngt bitvec1 (matrix1 complex1))
                                   bitvec1
                                   (t2tb114 f)
                                   (t2tb77 e))
                                 (t2tb77 eqt))) (tb2t65
                                                  (infix_at
                                                    (matrix1 complex1)
                                                    bitvec1
                                                    (infix_at
                                                      (infix_mngt
                                                        bitvec1
                                                        (matrix1 complex1))
                                                      bitvec1
                                                      (t2tb114 g)
                                                      (t2tb77 e))
                                                    (t2tb77 eqt)))))))
                    (= (infix_asdtdt
                         s1
                         (ket_sum_l
                           bitvec1
                           (t2tb79 (n_bvs n1qt))
                           (t2tb80 (fc337 n2qt f l1qt s2))
                           l2qt)) (infix_asdtdt
                                    s3
                                    (ket_sum_l
                                      bitvec1
                                      (t2tb79 (n_bvs n1))
                                      (t2tb80 (fc338 n2 g l1))
                                      l2)))))))))))))

;; ket_sum_l_cardone
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (l Int))
      (=>
        (<= 0 l)
        (=>
          (= (cardinal a s) 1)
          (=>
            (is_a_ket_l
              (tb2t65 (infix_at (matrix1 complex1) a f (choose1 a s)))
              l)
            (= (ket_sum_l a s f l) (tb2t65
                                     (infix_at
                                       (matrix1 complex1)
                                       a
                                       f
                                       (choose1 a s))))))))))

;; fc
(declare-fun fc339 () (Array Int complex))

;; fc'def
(assert
  (forall ((us Int))
    (= (tb2t (infix_at complex1 int (t2tb51 fc339) (t2tb8 us))) c_zero)))

;; ket_sum_l_empty
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (l Int))
      (=>
        (<= 0 l)
        (=> (= (cardinal a s) 0) (= (ket_sum_l a s f l) (make_ket l fc339)))))))

;; fc
(declare-fun fc340 () (Array (matrix complex) (Array Int complex)))

;; fc'def
(assert
  (forall ((y0 (matrix complex)) (y1 Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             (matrix1 complex1)
             (t2tb113 fc340)
             (t2tb65 y0))
           (t2tb8 y1))) (tb2t (get complex1 (t2tb65 y0) y1 0)))))

;; ket_sum_l_cardone_
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (l Int))
      (=>
        (<= 0 l)
        (=>
          (= (cardinal a s) 1)
          (= (ket_sum_l a s f l) (make_ket
                                   l
                                   (tb2t51
                                     (infix_at
                                       (infix_mngt int complex1)
                                       (matrix1 complex1)
                                       (t2tb113 fc340)
                                       (infix_at
                                         (matrix1 complex1)
                                         a
                                         f
                                         (choose1 a s)))))))))))

;; ket_sum_l_plus_one
(assert
  (forall ((a ty))
    (forall ((s uni) (e uni) (f uni) (l Int))
      (=>
        (<= 0 l)
        (=>
          (< 0 (cardinal a s))
          (=>
            (not (mem a e s))
            (= (ket_sum_l a (add a e s) f l) (add_ket_l
                                               (ket_sum_l a s f l)
                                               (tb2t65
                                                 (infix_at
                                                   (matrix1 complex1)
                                                   a
                                                   f
                                                   e))
                                               l))))))))

;; fc
(declare-fun fc341 ((Array bitvec (matrix complex))) (Array bitvec (matrix complex)))

;; fc
(declare-fun fc342 ((Array bitvec (matrix complex))) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((f (Array bitvec (matrix complex))) (bv1 bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc341 f))
           (t2tb77 bv1))) (tb2t65
                            (infix_at
                              (matrix1 complex1)
                              bitvec1
                              (t2tb80 f)
                              (t2tb77 (concat_l bv1 0)))))))

;; fc'def
(assert
  (forall ((f (Array bitvec (matrix complex))) (bv1 bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc342 f))
           (t2tb77 bv1))) (tb2t65
                            (infix_at
                              (matrix1 complex1)
                              bitvec1
                              (t2tb80 f)
                              (t2tb77 (concat_l bv1 1)))))))

;; ket_sum_n_bvs_pos
(assert
  (forall ((n Int) (f (Array bitvec (matrix complex))) (l Int))
    (=>
      (<= 0 l)
      (=>
        (< 0 n)
        (= (ket_sum_l bitvec1 (t2tb79 (n_bvs n)) (t2tb80 f) l) (add_ket_l
                                                                 (ket_sum_l
                                                                   bitvec1
                                                                   (t2tb79
                                                                    (n_bvs
                                                                    (- n 1)))
                                                                   (t2tb80
                                                                    (fc341 f))
                                                                   l)
                                                                 (ket_sum_l
                                                                   bitvec1
                                                                   (t2tb79
                                                                    (n_bvs
                                                                    (- n 1)))
                                                                   (t2tb80
                                                                    (fc342 f))
                                                                   l)
                                                                 l))))))

;; ket_sum_bitvec_one
(assert
  (forall ((f (Array bitvec (matrix complex))) (l Int))
    (=>
      (<= 0 l)
      (= (ket_sum_l bitvec1 (t2tb79 (n_bvs 1)) (t2tb80 f) l) (add_ket_l
                                                               (tb2t65
                                                                 (infix_at
                                                                   (matrix1
                                                                    complex1)
                                                                   bitvec1
                                                                   (t2tb80 f)
                                                                   (t2tb77
                                                                    (int_to_bv
                                                                    0
                                                                    1))))
                                                               (tb2t65
                                                                 (infix_at
                                                                   (matrix1
                                                                    complex1)
                                                                   bitvec1
                                                                   (t2tb80 f)
                                                                   (t2tb77
                                                                    (int_to_bv
                                                                    1
                                                                    1))))
                                                               l)))))

;; ket_sum_bitvec_zero
(assert
  (forall ((f (Array bitvec (matrix complex))) (l Int) (m Int))
    (=>
      (<= 0 l)
      (=>
        (= m 0)
        (=>
          (is_a_ket_l
            (tb2t65
              (infix_at
                (matrix1 complex1)
                bitvec1
                (t2tb80 f)
                (t2tb77 (int_to_bv 0 0))))
            l)
          (= (ket_sum_l bitvec1 (t2tb79 (n_bvs m)) (t2tb80 f) l) (tb2t65
                                                                   (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    bitvec1
                                                                    (t2tb80
                                                                    f)
                                                                    (t2tb77
                                                                    (int_to_bv
                                                                    0
                                                                    0))))))))))

;; ket_sum_l_valid_index
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (l Int) (i Int))
      (=>
        (<= 0 l)
        (=>
          (< 0 (cardinal a s))
          (=>
            (and (<= 0 i) (< i (power 1 l)))
            (valid_index complex1 (t2tb65 (ket_sum_l a s f l)) i 0)))))))

;; fc
(declare-fun fc343 (ty
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc343 a x)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((x (matrix complex)) (us uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc343 a x) us)) x))))

;; ket_sum_const
(assert
  (forall ((a ty))
    (forall ((s uni) (x (matrix complex)) (l Int))
      (=>
        (<= 0 l)
        (=>
          (is_a_ket_l x l)
          (= (ket_sum_l a s (fc343 a x) l) (infix_asdtdt
                                             (i_to_c (cardinal a s))
                                             x)))))))

;; fc
(declare-fun fc344 (ty
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc344 a x)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((x (matrix complex)) (us uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc344 a x) us)) x))))

;; ket_sum_const_w
(assert
  (forall ((a ty))
    (forall ((s uni) (x (matrix complex)) (l Int))
      (=>
        (<= 0 l)
        (=>
          (< 0 (cardinal a s))
          (=>
            (is_a_ket_l x l)
            (= (infix_asdtdt
                 (infix_sldt c_one (i_to_c (cardinal a s)))
                 (ket_sum_l a s (fc344 a x) l)) x)))))))

;; fc
(declare-fun fc345 (ty
  ty
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni))
      (sort (infix_mngt a (matrix1 complex1)) (fc345 b a x x1)))))

;; fc'def
(assert
  (forall ((f (Array (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))) (matrix complex))) (t (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) (a circuit))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           circuit1
           (fc345
             (infix_mngt
               (infix_mngt int int)
               (infix_mngt (infix_mngt int int) (infix_mngt int int)))
             circuit1
             (t2tb73 f)
             (t2tb2 t))
           (t2tb13 a))) (tb2t65
                          (infix_at
                            (matrix1 complex1)
                            (infix_mngt
                              (infix_mngt int int)
                              (infix_mngt
                                (infix_mngt int int)
                                (infix_mngt int int)))
                            (t2tb73 f)
                            (t2tb3 (select t a)))))))

;; fc'def
(assert
  (forall ((f (Array (Array (Array Int Int) (Array Int Int)) (matrix complex))) (t (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (a (Array Int Int)))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           (infix_mngt int int)
           (fc345
             (infix_mngt (infix_mngt int int) (infix_mngt int int))
             (infix_mngt int int)
             (t2tb75 f)
             (t2tb3 t))
           (t2tb7 a))) (tb2t65
                         (infix_at
                           (matrix1 complex1)
                           (infix_mngt
                             (infix_mngt int int)
                             (infix_mngt int int))
                           (t2tb75 f)
                           (t2tb5 (select t a)))))))

;; fc'def
(assert
  (forall ((f (Array (Array Int Int) (matrix complex))) (t (Array (Array Int Int) (Array Int Int))) (a (Array Int Int)))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           (infix_mngt int int)
           (fc345
             (infix_mngt int int)
             (infix_mngt int int)
             (t2tb74 f)
             (t2tb5 t))
           (t2tb7 a))) (tb2t65
                         (infix_at
                           (matrix1 complex1)
                           (infix_mngt int int)
                           (t2tb74 f)
                           (t2tb7 (select t a)))))))

;; fc'def
(assert
  (forall ((f (Array Int (matrix complex))) (t (Array Int Int)) (a Int))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           int
           (fc345 int int (t2tb68 f) (t2tb7 t))
           (t2tb8 a))) (tb2t65
                         (infix_at
                           (matrix1 complex1)
                           int
                           (t2tb68 f)
                           (t2tb8 (select t a)))))))

;; fc'def
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (t uni) (a1 uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc345 b a f t) a1)) 
      (tb2t65
        (infix_at (matrix1 complex1) b f (infix_at b a t a1)))))))

;; map_ket_sum_l
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (s uni) (t uni) (n Int))
      (=>
        (<= 0 n)
        (=>
          (p_injective b a t s)
          (= (ket_sum_l b (map1 b a t s) f n) (ket_sum_l
                                                a
                                                s
                                                (fc345 b a f t)
                                                n)))))))

;; pre_injective_bv_to_int
(assert
  (forall ((bv1 bitvec) (bv2 bitvec))
    (=>
      (= (length bv1) (length bv2))
      (=> (not (= bv1 bv2)) (not (= (bv_to_int bv1) (bv_to_int bv2)))))))

;; injective_bv_to_int
(assert
  (forall ((n Int))
    (=>
      (<= 0 n)
      (p_injective int bitvec1 (t2tb81 bv_to_int_closure) (t2tb79 (n_bvs n))))))

;; bijective_to_int
(assert
  (forall ((n Int))
    (=>
      (< 0 n)
      (p_bijective
        int
        bitvec1
        (t2tb81 bv_to_int_closure)
        (t2tb79 (n_bvs n))
        (t2tb16 (to_fset 0 (power 2 n)))))))

;; fc
(declare-fun fc346 (Int) (Array Int bitvec))

;; t2tb
(declare-fun t2tb115 ((Array Int bitvec)) uni)

;; t2tb_sort
(assert
  (forall ((x (Array Int bitvec)))
    (sort (infix_mngt int bitvec1) (t2tb115 x))))

;; tb2t
(declare-fun tb2t115 (uni) (Array Int bitvec))

;; BridgeL
(assert
  (forall ((i (Array Int bitvec)))
    (! (= (tb2t115 (t2tb115 i)) i) :pattern ((t2tb115 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=> (sort (infix_mngt int bitvec1) j) (= (t2tb115 (tb2t115 j)) j)) :pattern (
    (t2tb115
      (tb2t115 j))) )))

;; fc'def
(assert
  (forall ((n Int) (i Int))
    (= (tb2t77 (infix_at bitvec1 int (t2tb115 (fc346 n)) (t2tb8 i))) 
    (int_to_bv
      i
      n))))

;; injective_int_to_bv
(assert
  (forall ((n Int))
    (=>
      (<= 0 n)
      (p_injective
        bitvec1
        int
        (t2tb115 (fc346 n))
        (t2tb16 (to_fset 0 (power 2 n)))))))

;; n_bvs_card
(assert
  (forall ((n Int))
    (=> (<= 0 n) (= (cardinal bitvec1 (t2tb79 (n_bvs n))) (power 2 n)))))

;; fc
(declare-fun fc347 () (Array bitvec bitvec))

;; fc'def
(assert
  (forall ((bv1 bitvec))
    (= (tb2t77 (infix_at bitvec1 bitvec1 (t2tb78 fc347) (t2tb77 bv1))) 
    (concat_l
      bv1
      0))))

;; concat_first_term_zero
(assert
  (forall ((e bitvec) (i Int))
    (=>
      (<= 0 i)
      (=>
        (mem
          bitvec1
          (t2tb77 e)
          (map1 bitvec1 bitvec1 (t2tb78 fc347) (t2tb79 (n_bvs i))))
        (= (select (value e) 0) 0)))))

;; fc
(declare-fun fc348 () (Array bitvec bitvec))

;; fc'def
(assert
  (forall ((bv1 bitvec))
    (= (tb2t77 (infix_at bitvec1 bitvec1 (t2tb78 fc348) (t2tb77 bv1))) 
    (concat_l
      bv1
      1))))

;; concat_first_term_one
(assert
  (forall ((e bitvec) (i Int))
    (=>
      (<= 0 i)
      (=>
        (mem
          bitvec1
          (t2tb77 e)
          (map1 bitvec1 bitvec1 (t2tb78 fc348) (t2tb79 (n_bvs i))))
        (= (select (value e) 0) 1)))))

;; bv_sum_to_int_sum
(assert
  (forall ((n Int) (f (Array Int complex)) (g (Array bitvec complex)))
    (=>
      (<= 0 n)
      (=>
        (forall ((x bitvec))
          (=>
            (= (length x) n)
            (= (tb2t (infix_at complex1 bitvec1 (t2tb82 g) (t2tb77 x))) 
            (tb2t
              (infix_at complex1 int (t2tb51 f) (t2tb8 (bv_to_int x)))))))
        (= (sum bitvec1 (t2tb79 (n_bvs n)) (t2tb82 g)) (sum
                                                         int
                                                         (t2tb16
                                                           (to_fset
                                                             0
                                                             (power 2 n)))
                                                         (t2tb51 f)))))))

;; fc
(declare-fun fc349 ((Array bitvec (matrix complex))) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((f (Array bitvec (matrix complex))) (bv1 bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc349 f))
           (t2tb77 bv1))) (add_mat
                            (tb2t65
                              (infix_at
                                (matrix1 complex1)
                                bitvec1
                                (t2tb80 f)
                                (t2tb77 (concat_l bv1 0))))
                            (tb2t65
                              (infix_at
                                (matrix1 complex1)
                                bitvec1
                                (t2tb80 f)
                                (t2tb77 (concat_l bv1 1))))))))

;; sum_concat
(assert
  (forall ((f (Array bitvec (matrix complex))) (i Int) (r Int) (c Int))
    (=>
      (< 0 i)
      (=>
        (forall ((bv1 bitvec))
          (= (rows
               complex1
               (infix_at (matrix1 complex1) bitvec1 (t2tb80 f) (t2tb77 bv1))) r))
        (=>
          (forall ((bv1 bitvec))
            (= (columns
                 complex1
                 (infix_at
                   (matrix1 complex1)
                   bitvec1
                   (t2tb80 f)
                   (t2tb77 bv1))) c))
          (= (mat_sum bitvec1 (t2tb79 (n_bvs i)) (t2tb80 (fc349 f))) 
          (mat_sum
            bitvec1
            (t2tb79 (n_bvs (+ i 1)))
            (t2tb80 f))))))))

;; fc
(declare-fun fc350 (complex
  complex) (Array bitvec complex))

;; fc'def
(assert
  (forall ((a complex) (q complex) (i bitvec))
    (= (tb2t (infix_at complex1 bitvec1 (t2tb82 (fc350 a q)) (t2tb77 i))) 
    (infix_asdt
      a
      (cpower q (bv_to_int i))))))

;; geometric_series_bv
(assert
  (forall ((a complex) (q complex) (n Int))
    (=>
      (<= 1 n)
      (=>
        (not (= q c_one))
        (= (sum bitvec1 (t2tb79 (n_bvs n)) (t2tb82 (fc350 a q))) (infix_sldt
                                                                   (infix_asdt
                                                                    a
                                                                    (infix_mndt
                                                                    c_one
                                                                    (cpower
                                                                    q
                                                                    (power
                                                                    2
                                                                    n))))
                                                                   (infix_mndt
                                                                    c_one
                                                                    q)))))))

;; fc
(declare-fun fc351 (complex) (Array bitvec complex))

;; fc'def
(assert
  (forall ((q complex) (i bitvec))
    (= (tb2t (infix_at complex1 bitvec1 (t2tb82 (fc351 q)) (t2tb77 i))) 
    (cpower
      q
      (bv_to_int i)))))

;; geometric_series_bv_init_one
(assert
  (forall ((q complex) (n Int))
    (=>
      (<= 1 n)
      (=>
        (not (= q c_one))
        (= (sum bitvec1 (t2tb79 (n_bvs n)) (t2tb82 (fc351 q))) (infix_sldt
                                                                 (infix_mndt
                                                                   c_one
                                                                   (cpower
                                                                    q
                                                                    (power
                                                                    2
                                                                    n)))
                                                                 (infix_mndt
                                                                   c_one
                                                                   q)))))))

;; fc
(declare-fun fc352 ((Array Int (matrix complex))) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((f (Array Int (matrix complex))) (a bitvec))
    (= (tb2t65
         (infix_at (matrix1 complex1) bitvec1 (t2tb80 (fc352 f)) (t2tb77 a))) 
    (tb2t65
      (infix_at (matrix1 complex1) int (t2tb68 f) (t2tb8 (bv_to_int a)))))))

;; ket_sum_l_to_n_bvs
(assert
  (forall ((f (Array Int (matrix complex))) (l Int) (n Int))
    (=>
      (<= 0 n)
      (=>
        (<= 0 l)
        (= (ket_sum_l int (t2tb16 (to_fset 0 (power 2 l))) (t2tb68 f) n) 
        (ket_sum_l
          bitvec1
          (t2tb79 (n_bvs l))
          (t2tb80 (fc352 f))
          n))))))

;; fc
(declare-fun fc353 ((Array bitvec (matrix complex))
  Int) (Array Int (matrix complex)))

;; fc'def
(assert
  (forall ((f (Array bitvec (matrix complex))) (l Int) (i Int))
    (= (tb2t65
         (infix_at (matrix1 complex1) int (t2tb68 (fc353 f l)) (t2tb8 i))) 
    (tb2t65
      (infix_at
        (matrix1 complex1)
        bitvec1
        (t2tb80 f)
        (t2tb77 (int_to_bv i l)))))))

;; ket_sum_l_to_fset
(assert
  (forall ((f (Array bitvec (matrix complex))) (l Int) (n Int))
    (=>
      (<= 0 n)
      (=>
        (<= 0 l)
        (= (ket_sum_l bitvec1 (t2tb79 (n_bvs l)) (t2tb80 f) n) (ket_sum_l
                                                                 int
                                                                 (t2tb16
                                                                   (to_fset
                                                                    0
                                                                    (power
                                                                    2
                                                                    l)))
                                                                 (t2tb68
                                                                   (fc353
                                                                    f
                                                                    l))
                                                                 n))))))

;; ket_sum_partition
(assert
  (forall ((a ty))
    (forall ((s uni) (s1 uni) (s2 uni) (f uni) (n Int))
      (=>
        (<= 0 n)
        (=>
          (= s (union1 a s1 s2))
          (=>
            (= (inter a s1 s2) (empty a))
            (= (ket_sum_l a s f n) (add_ket_l
                                     (ket_sum_l a s1 f n)
                                     (ket_sum_l a s2 f n)
                                     n))))))))

;; fc
(declare-fun fc354 ((matrix complex)
  Int) (Array Int (matrix complex)))

;; fc'def
(assert
  (forall ((m (matrix complex)) (n Int) (j Int))
    (= (tb2t65
         (infix_at (matrix1 complex1) int (t2tb68 (fc354 m n)) (t2tb8 j))) 
    (infix_asdtdt
      (tb2t (get complex1 (t2tb65 m) j 0))
      (ket n j)))))

;; ket_decomp
(assert
  (forall ((m (matrix complex)) (n Int))
    (=>
      (<= 0 n)
      (=>
        (is_a_ket m)
        (=>
          (= (ket_length m) n)
          (= m (mat_sum
                 int
                 (t2tb16 (to_fset 0 (power 2 n)))
                 (t2tb68 (fc354 m n)))))))))

;; fc
(declare-fun fc355 ((matrix complex)
  Int) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((m (matrix complex)) (n Int) (bvx bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc355 m n))
           (t2tb77 bvx))) (infix_asdtdt
                            (tb2t
                              (get complex1 (t2tb65 m) (bv_to_int bvx) 0))
                            (ket n (bv_to_int bvx))))))

;; ket_decomp_bv
(assert
  (forall ((m (matrix complex)) (n Int))
    (=>
      (<= 0 n)
      (=>
        (is_a_ket m)
        (=>
          (= (ket_length m) n)
          (= m (ket_sum_l bitvec1 (t2tb79 (n_bvs n)) (t2tb80 (fc355 m n)) n)))))))

;; fc
(declare-fun fc356 ((Array Int complex)
  Int) (Array Int (matrix complex)))

;; fc
(declare-fun fc357 ((Array Int complex)) (Array Int (Array Int complex)))

;; fc'def
(assert
  (forall ((f (Array Int complex)) (n Int) (j Int))
    (= (tb2t65
         (infix_at (matrix1 complex1) int (t2tb68 (fc356 f n)) (t2tb8 j))) 
    (infix_asdtdt
      (tb2t (infix_at complex1 int (t2tb51 f) (t2tb8 j)))
      (ket n j)))))

;; fc'def
(assert
  (forall ((f (Array Int complex)) (x Int) (us Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             int
             (t2tb61 (fc357 f))
             (t2tb8 x))
           (t2tb8 us))) (tb2t (infix_at complex1 int (t2tb51 f) (t2tb8 x))))))

;; ket_recomp
(assert
  (forall ((f (Array Int complex)) (n Int))
    (=>
      (<= 0 n)
      (= (mat_sum int (t2tb16 (to_fset 0 (power 2 n))) (t2tb68 (fc356 f n))) 
      (tb2t65
        (make_f complex1 (power 2 n) 1 (t2tb61 (fc357 f))))))))

;; fc
(declare-fun fc358 ((matrix complex)) (Array Int (matrix complex)))

;; fc'def
(assert
  (forall ((m (matrix complex)) (j Int))
    (= (tb2t65
         (infix_at (matrix1 complex1) int (t2tb68 (fc358 m)) (t2tb8 j))) 
    (infix_asdtdt
      (tb2t (get complex1 (t2tb65 m) j 0))
      (ket (ket_length m) j)))))

;; ket_decomp_quant
(assert
  (forall ((m (matrix complex)))
    (=>
      (is_a_ket m)
      (= m (mat_sum
             int
             (t2tb16 (to_fset 0 (power 2 (ket_length m))))
             (t2tb68 (fc358 m)))))))

;; fc
(declare-fun fc359 ((matrix complex)
  (matrix complex)) (Array Int (matrix complex)))

;; fc'def
(assert
  (forall ((m (matrix complex)) (x (matrix complex)) (k Int))
    (= (tb2t65
         (infix_at (matrix1 complex1) int (t2tb68 (fc359 m x)) (t2tb8 k))) 
    (infix_asdtdt
      (tb2t (get complex1 (t2tb65 m) k (ket_to_int x)))
      (ket (ket_length x) k)))))

;; mat_mult_ket_basis
(assert
  (forall ((m (matrix complex)) (x (matrix complex)))
    (=>
      (is_a_ket_basis_elt x)
      (=>
        (and
          (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 m)))
          (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 x))))
        (= (mat_mult m x) (mat_sum
                            int
                            (t2tb16 (to_fset 0 (rows complex1 (t2tb65 x))))
                            (t2tb68 (fc359 m x))))))))

;; ket_mult_diag
(assert
  (forall ((m (matrix complex)) (x (matrix complex)))
    (=>
      (<= 1 (ket_length x))
      (=>
        (is_a_ket_basis_elt x)
        (=>
          (= (rows complex1 (t2tb65 m)) (power 2 (ket_length x)))
          (=>
            (= (columns complex1 (t2tb65 m)) (power 2 (ket_length x)))
            (=>
              (forall ((i Int) (j Int))
                (=>
                  (and (<= 0 i) (< i (power 2 (ket_length x))))
                  (=>
                    (and (<= 0 j) (< j (power 2 (ket_length x))))
                    (=>
                      (not (= i j))
                      (= (tb2t (get complex1 (t2tb65 m) i j)) c_zero)))))
              (= (mat_mult m x) (infix_asdtdt
                                  (tb2t
                                    (get
                                      complex1
                                      (t2tb65 m)
                                      (ket_to_int x)
                                      (ket_to_int x)))
                                  (ket (ket_length x) (ket_to_int x)))))))))))

;; fc
(declare-fun fc360 ((matrix complex)
  (matrix complex)
  Int) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((m (matrix complex)) (x (matrix complex)) (n Int) (bvx bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc360 m x n))
           (t2tb77 bvx))) (infix_asdtdt
                            (tb2t
                              (get
                                complex1
                                (t2tb65 m)
                                (bv_to_int bvx)
                                (ket_to_int x)))
                            (ket n (bv_to_int bvx))))))

;; mat_mult_ket_basis_bv
(assert
  (forall ((m (matrix complex)) (x (matrix complex)) (n Int))
    (=>
      (= (ket_length x) n)
      (=>
        (is_a_ket_basis_elt x)
        (=>
          (and
            (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 m)))
            (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 x))))
          (= (mat_mult m x) (ket_sum_l
                              bitvec1
                              (t2tb79 (n_bvs n))
                              (t2tb80 (fc360 m x n))
                              n)))))))

;; fc
(declare-fun fc361 ((matrix complex)
  (matrix complex)) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((m (matrix complex)) (x (matrix complex)) (bvx bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc361 m x))
           (t2tb77 bvx))) (infix_asdtdt
                            (tb2t
                              (get
                                complex1
                                (t2tb65 m)
                                (bv_to_int bvx)
                                (ket_to_int x)))
                            (ket (ket_length x) (bv_to_int bvx))))))

;; mat_mult_ket_basis_bv_gen
(assert
  (forall ((m (matrix complex)) (x (matrix complex)))
    (=>
      (is_a_ket_basis_elt x)
      (=>
        (and
          (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 m)))
          (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 x))))
        (= (mat_mult m x) (ket_sum_l
                            bitvec1
                            (t2tb79 (n_bvs (ket_length x)))
                            (t2tb80 (fc361 m x))
                            (ket_length x)))))))

;; fc
(declare-fun fc362 ((matrix complex)
  (matrix complex)
  Int) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((m (matrix complex)) (x (matrix complex)) (n Int) (bvx bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc362 m x n))
           (t2tb77 bvx))) (infix_asdtdt
                            (tb2t
                              (get complex1 (t2tb65 x) (bv_to_int bvx) 0))
                            (mat_mult m (ket n (bv_to_int bvx)))))))

;; mat_mult_ket_bv
(assert
  (forall ((m (matrix complex)) (x (matrix complex)) (n Int))
    (=>
      (is_a_ket_l x n)
      (=>
        (and
          (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 m)))
          (and
            (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 x)))
            (= (rows complex1 (t2tb65 x)) (power 2 n))))
        (= (mat_mult m x) (ket_sum_l
                            bitvec1
                            (t2tb79 (n_bvs n))
                            (t2tb80 (fc362 m x n))
                            n))))))

;; fc
(declare-fun fc363 ((matrix complex)
  (matrix complex)) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((m (matrix complex)) (x (matrix complex)) (bvx bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc363 m x))
           (t2tb77 bvx))) (infix_asdtdt
                            (tb2t
                              (get complex1 (t2tb65 x) (bv_to_int bvx) 0))
                            (mat_mult m (ket (ket_length x) (bv_to_int bvx)))))))

;; mat_mult_ket_bv_gen
(assert
  (forall ((m (matrix complex)) (x (matrix complex)))
    (=>
      (is_a_ket x)
      (=>
        (and
          (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 m)))
          (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 x))))
        (= (mat_mult m x) (ket_sum_l
                            bitvec1
                            (t2tb79 (n_bvs (ket_length x)))
                            (t2tb80 (fc363 m x))
                            (ket_length x)))))))

;; fc
(declare-fun fc364 (ty
  (matrix complex)
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x (matrix complex)) (x1 uni))
      (sort (infix_mngt a (matrix1 complex1)) (fc364 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((m (matrix complex)) (f uni) (x uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc364 a m f) x)) (mat_mult
                                                                    m
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    x)))))))

;; mat_mult_ket_sum_l
(assert
  (forall ((a ty))
    (forall ((m (matrix complex)) (s uni) (f uni) (l Int))
      (=>
        (< 0 (cardinal a s))
        (=>
          (forall ((e uni))
            (=>
              (sort a e)
              (=>
                (mem a e s)
                (is_a_ket_l (tb2t65 (infix_at (matrix1 complex1) a f e)) l))))
          (=>
            (and
              (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 m)))
              (= (rows complex1 (t2tb65 m)) (power 2 l)))
            (= (mat_mult m (ket_sum_l a s f l)) (ket_sum_l
                                                  a
                                                  s
                                                  (fc364 a m f)
                                                  l))))))))

;; fc
(declare-fun fc365 ((Array Int Int)
  (Array Int complex)
  Int) (Array Int (matrix complex)))

;; fc
(declare-fun fc366 ((Array Int Int)
  (set Int)
  (set Int)
  (Array Int complex)
  Int) (Array Int (matrix complex)))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (a (Array Int complex)) (n Int) (j Int))
    (= (tb2t65
         (infix_at (matrix1 complex1) int (t2tb68 (fc365 f a n)) (t2tb8 j))) 
    (infix_asdtdt
      (tb2t (infix_at complex1 int (t2tb51 a) (t2tb8 j)))
      (tb2t65
        (set2
          complex1
          (make complex1 n 1 (t2tb c_zero))
          (select f j)
          0
          (t2tb c_one)))))))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (s (set Int)) (sqt (set Int)) (a (Array Int complex)) (n Int) (j Int))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           int
           (t2tb68 (fc366 f s sqt a n))
           (t2tb8 j))) (infix_asdtdt
                         (tb2t
                           (infix_at
                             complex1
                             int
                             (t2tb51 a)
                             (inv_func
                               int
                               int
                               (t2tb7 f)
                               (t2tb16 s)
                               (t2tb16 sqt)
                               (t2tb8 j))))
                         (tb2t65
                           (set2
                             complex1
                             (make complex1 n 1 (t2tb c_zero))
                             j
                             0
                             (t2tb c_one)))))))

;; fun_inversion_pre
(assert
  (forall ((f (Array Int Int)) (s (set Int)) (sqt (set Int)) (a (Array Int complex)) (n Int))
    (=>
      (<= 0 n)
      (=>
        (< 0 (cardinal int (t2tb16 s)))
        (=>
          (p_bijective1 f s sqt)
          (=>
            (subset1 int (t2tb16 s) (t2tb16 (to_fset 0 n)))
            (=>
              (subset1 int (t2tb16 sqt) (t2tb16 (to_fset 0 n)))
              (= (mat_sum int (t2tb16 s) (t2tb68 (fc365 f a n))) (mat_sum
                                                                   int
                                                                   (t2tb16
                                                                    sqt)
                                                                   (t2tb68
                                                                    (fc366
                                                                    f
                                                                    s
                                                                    sqt
                                                                    a
                                                                    n)))))))))))

;; fc
(declare-fun fc367 ((Array Int Int)
  (Array Int complex)
  (matrix complex)) (Array Int (matrix complex)))

;; fc
(declare-fun fc368 ((Array Int Int)
  (Array Int complex)
  (matrix complex)
  Int) (Array Int (matrix complex)))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (a (Array Int complex)) (m (matrix complex)) (j Int))
    (= (tb2t65
         (infix_at (matrix1 complex1) int (t2tb68 (fc367 f a m)) (t2tb8 j))) 
    (infix_asdtdt
      (tb2t (infix_at complex1 int (t2tb51 a) (t2tb8 j)))
      (ket (ket_length m) (select f j))))))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (a (Array Int complex)) (m (matrix complex)) (pow_2_n Int) (j Int))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           int
           (t2tb68 (fc368 f a m pow_2_n))
           (t2tb8 j))) (infix_asdtdt
                         (tb2t
                           (infix_at
                             complex1
                             int
                             (t2tb51 a)
                             (inv_
                               int
                               int
                               (t2tb7 f)
                               (t2tb16 (to_fset 0 pow_2_n))
                               (t2tb16 (to_fset 0 pow_2_n))
                               (t2tb8 j))))
                         (ket (ket_length m) j)))))

;; ket_fun_inversion
(assert
  (forall ((f (Array Int Int)) (a (Array Int complex)) (m (matrix complex)) (pow_2_n Int))
    (=>
      (= pow_2_n (power 2 (ket_length m)))
      (=>
        (is_a_ket m)
        (=>
          (< 0 pow_2_n)
          (=>
            (p_bijective1 f (to_fset 0 pow_2_n) (to_fset 0 pow_2_n))
            (=>
              (= m (mat_sum
                     int
                     (t2tb16 (to_fset 0 pow_2_n))
                     (t2tb68 (fc367 f a m))))
              (= m (mat_sum
                     int
                     (t2tb16 (to_fset 0 pow_2_n))
                     (t2tb68 (fc368 f a m pow_2_n)))))))))))

;; ket_sum_partition_filter
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (p1 uni) (p2 uni) (n Int))
      (=>
        (<= 0 n)
        (=>
          (forall ((e uni))
            (=>
              (sort a e)
              (=>
                (mem a e s)
                (=
                  (= (tb2t10 (infix_at bool a p1 e)) true)
                  (not (= (tb2t10 (infix_at bool a p2 e)) true))))))
          (= (ket_sum_l a s f n) (add_ket_l
                                   (ket_sum_l a (my_filter a s p1) f n)
                                   (ket_sum_l a (my_filter a s p2) f n)
                                   n)))))))

;; kronecker_neutral_ket_l
(assert (is_a_ket_l (tb2t65 (make complex1 1 1 (t2tb c_one))) 0))

;; kronecker_neutral_ket_basis
(assert (is_a_ket_basis_elt (tb2t65 (make complex1 1 1 (t2tb c_one)))))

;; equals_kronecker_neutral
(assert
  (forall ((n (matrix complex)))
    (=>
      (is_a_ket_l n 0)
      (=>
        (is_a_ket_basis_elt n)
        (= n (tb2t65 (make complex1 1 1 (t2tb c_one))))))))

;; get_kronecker_neutral
(assert
  (forall ((a (matrix complex)) (n (matrix complex)))
    (=> (is_a_ket_l n 0) (=> (is_a_ket_basis_elt n) (= (kronecker a n) a)))))

;; get_neutral_kronecker
(assert
  (forall ((a (matrix complex)) (n (matrix complex)))
    (=> (is_a_ket_l n 0) (=> (is_a_ket_basis_elt n) (= (kronecker n a) a)))))

;; set_kronecker_neutral
(assert
  (forall ((a (matrix complex)))
    (= a (kronecker a (tb2t65 (make complex1 1 1 (t2tb c_one)))))))

;; set_neutral_kronecker
(assert
  (forall ((a (matrix complex)))
    (= a (kronecker (tb2t65 (make complex1 1 1 (t2tb c_one))) a))))

;; hpart_ket
(declare-fun hpart_ket ((matrix complex)
  Int) (matrix complex))

;; hpart_ket'def
(assert
  (forall ((m (matrix complex)) (i Int))
    (=>
      (is_a_ket_basis_elt m)
      (=>
        (and (<= 0 i) (<= i (ket_length m)))
        (= (hpart_ket m i) (ket
                             i
                             (div (ket_to_int m) (power
                                                   2
                                                   (- (ket_length m) i)))))))))

;; hpart_ket'spec
(assert
  (forall ((m (matrix complex)) (i Int))
    (=>
      (is_a_ket_basis_elt m)
      (=>
        (and (<= 0 i) (<= i (ket_length m)))
        (and
          (is_a_ket_basis_elt (hpart_ket m i))
          (and
            (= (ket_length (hpart_ket m i)) i)
            (= (ket_to_int (hpart_ket m i)) (div (ket_to_int m) (power
                                                                  2
                                                                  (- 
                                                                  (ket_length
                                                                    m) i))))))))))

;; hpart_ket_rows
(assert
  (forall ((m (matrix complex)) (i Int))
    (=>
      (is_a_ket_basis_elt m)
      (=>
        (and (<= 0 i) (<= i (ket_length m)))
        (= (rows complex1 (t2tb65 (hpart_ket m i))) (power 2 i))))))

;; hpart_ket_l
(assert
  (forall ((m (matrix complex)) (i Int) (j Int))
    (=>
      (is_a_ket_basis_elt m)
      (=>
        (and (<= 0 i) (<= i (ket_length m)))
        (=> (= i j) (is_a_ket_l (hpart_ket m i) j))))))

;; tpart_ket
(declare-fun tpart_ket ((matrix complex)
  Int) (matrix complex))

;; tpart_ket'def
(assert
  (forall ((m (matrix complex)) (i Int))
    (=>
      (is_a_ket_basis_elt m)
      (=>
        (and (<= 0 i) (<= i (ket_length m)))
        (= (tpart_ket m i) (ket
                             (- (ket_length m) i)
                             (mod (ket_to_int m) (power
                                                   2
                                                   (- (ket_length m) i)))))))))

;; tpart_ket'spec
(assert
  (forall ((m (matrix complex)) (i Int))
    (=>
      (is_a_ket_basis_elt m)
      (=>
        (and (<= 0 i) (<= i (ket_length m)))
        (and
          (is_a_ket_basis_elt (tpart_ket m i))
          (and
            (= (ket_length (tpart_ket m i)) (- (ket_length m) i))
            (= (ket_to_int (tpart_ket m i)) (mod (ket_to_int m) (power
                                                                  2
                                                                  (- 
                                                                  (ket_length
                                                                    m) i))))))))))

;; tpart_ket_l
(assert
  (forall ((m (matrix complex)) (i Int) (j Int))
    (=>
      (is_a_ket_basis_elt m)
      (=>
        (and (<= 0 i) (<= i (ket_length m)))
        (=> (= j (- (ket_length m) i)) (is_a_ket_l (tpart_ket m i) j))))))

;; tpart_ket_rows
(assert
  (forall ((m (matrix complex)) (i Int))
    (=>
      (is_a_ket_basis_elt m)
      (=>
        (and (<= 0 i) (<= i (ket_length m)))
        (= (rows complex1 (t2tb65 (tpart_ket m i))) (power
                                                      2
                                                      (- (ket_length m) i)))))))

;; concat_ket
(assert
  (forall ((x (matrix complex)) (y (matrix complex)))
    (=>
      (is_a_ket_basis_elt x)
      (=>
        (is_a_ket_basis_elt y)
        (and
          (is_a_ket_basis_elt (kronecker x y))
          (and
            (= (ket_length (kronecker x y)) (+ (ket_length x) (ket_length y)))
            (= (ket_to_int (kronecker x y)) (+ (* (ket_to_int x) (power
                                                                   2
                                                                   (ket_length
                                                                    y))) 
            (ket_to_int
              y)))))))))

;; concat_ht_part_ket
(assert
  (forall ((m (matrix complex)) (i Int))
    (=>
      (is_a_ket_basis_elt m)
      (=>
        (and (<= 0 i) (<= i (ket_length m)))
        (= (kronecker (hpart_ket m i) (tpart_ket m i)) m)))))

;; ket_ht_decomp
(assert
  (forall ((n Int) (i Int) (j Int))
    (=>
      (and (<= 0 i) (<= i n))
      (=>
        (and (<= 0 j) (< j (power 2 n)))
        (= (ket n j) (kronecker
                       (hpart_ket (ket n j) i)
                       (tpart_ket (ket n j) i)))))))

;; ket_ht_decomp_quant
(assert
  (forall ((n Int) (i Int))
    (=>
      (and (<= 0 i) (<= i n))
      (forall ((j Int))
        (=>
          (and (<= 0 j) (< j (power 2 n)))
          (= (ket n j) (kronecker
                         (hpart_ket (ket n j) i)
                         (tpart_ket (ket n j) i))))))))

;; fc
(declare-fun fc369 ((matrix complex)
  Int) (Array Int (matrix complex)))

;; fc'def
(assert
  (forall ((m (matrix complex)) (i Int) (j Int))
    (= (tb2t65
         (infix_at (matrix1 complex1) int (t2tb68 (fc369 m i)) (t2tb8 j))) 
    (infix_asdtdt
      (tb2t (get complex1 (t2tb65 m) j 0))
      (kronecker
        (hpart_ket (ket (ket_length m) j) i)
        (tpart_ket (ket (ket_length m) j) i))))))

;; ht_decomp
(assert
  (forall ((m (matrix complex)) (i Int))
    (=>
      (is_a_ket m)
      (=>
        (and (<= 0 i) (<= i (ket_length m)))
        (= m (mat_sum
               int
               (t2tb16 (to_fset 0 (power 2 (ket_length m))))
               (t2tb68 (fc369 m i))))))))

;; not_null_ket_basis
(assert
  (forall ((x (matrix complex)))
    (=> (is_a_ket_basis_elt x) (not (null_mat x)))))

;; ket_to_bv
(declare-fun ket_to_bv ((matrix complex)) bitvec)

;; ket_to_bv'def
(assert
  (forall ((x (matrix complex)))
    (=>
      (is_a_ket_basis_elt x)
      (= (ket_to_bv x) (int_to_bv (ket_to_int x) (ket_length x))))))

;; ket_to_bv'spec
(assert
  (forall ((x (matrix complex)))
    (=>
      (is_a_ket_basis_elt x)
      (and
        (= (bv_to_int (ket_to_bv x)) (ket_to_int x))
        (and
          (= (length (ket_to_bv x)) (ket_length x))
          (mem
            bitvec1
            (t2tb77 (ket_to_bv x))
            (t2tb79 (n_bvs (ket_length x)))))))))

;; ket_to_bv_length
(assert
  (forall ((x (matrix complex)) (n Int))
    (=>
      (is_a_ket_basis_elt x)
      (=> (= (ket_length x) n) (= (length (ket_to_bv x)) n)))))

;; bv_to_ket
(declare-fun bv_to_ket (bitvec) (matrix complex))

;; bv_to_ket'def
(assert
  (forall ((bv1 bitvec))
    (= (bv_to_ket bv1) (ket (length bv1) (bv_to_int bv1)))))

;; bv_to_ket'spec
(assert
  (forall ((bv1 bitvec))
    (and
      (is_a_ket_basis_elt (bv_to_ket bv1))
      (and
        (= (ket_to_int (bv_to_ket bv1)) (bv_to_int bv1))
        (and
          (is_a_ket_l (bv_to_ket bv1) (length bv1))
          (and
            (= (rows complex1 (t2tb65 (bv_to_ket bv1))) (power
                                                          2
                                                          (length bv1)))
            (and
              (= (columns complex1 (t2tb65 (bv_to_ket bv1))) 1)
              (= (bv_to_ket bv1) (bin_to_ket (length bv1) (value bv1))))))))))

;; ket_to_bv_ket_length
(assert
  (forall ((i Int) (n Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (= (length (ket_to_bv (ket n i))) n)))))

;; is_a_ket_l_bv_to_ket
(assert
  (forall ((bv1 bitvec) (l Int))
    (=> (= (length bv1) l) (is_a_ket_l (bv_to_ket bv1) l))))

;; is_a_ket_l_bv_to_ket_
(assert
  (forall ((bv1 bitvec) (l Int))
    (=>
      (mem bitvec1 (t2tb77 bv1) (t2tb79 (n_bvs l)))
      (=> (<= 0 l) (is_a_ket_l (bv_to_ket bv1) l)))))

;; bin_to_ket_to_bv_to_ket
(assert
  (forall ((f (Array Int Int)) (n Int))
    (=>
      (<= 0 n)
      (=> (binary f) (= (bin_to_ket n f) (bv_to_ket (make_bv f n)))))))

;; bin_to_ket_to_bv_to_ket_abs
(assert
  (forall ((f (Array Int Int)) (n Int) (a bitvec))
    (=>
      (<= 0 n)
      (=>
        (= a (make_bv f n))
        (=> (binary f) (= (bin_to_ket n f) (bv_to_ket a)))))))

;; ket_to_int_to_bv_to_ket
(assert
  (forall ((n Int) (e bitvec))
    (=>
      (<= 0 n)
      (=>
        (mem bitvec1 (t2tb77 e) (t2tb79 (n_bvs n)))
        (= (ket n (bv_to_int e)) (bv_to_ket e))))))

;; ket_to_bv_ket
(assert
  (forall ((n Int) (i Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (= (ket_to_bv (ket n i)) (int_to_bv i n))))))

;; bv_to_ket_length
(assert
  (forall ((bv1 bitvec)) (= (ket_length (bv_to_ket bv1)) (length bv1))))

;; get_ket_bv_to_ket_length
(assert
  (forall ((bv1 bitvec) (k Int))
    (=>
      (and (<= 0 k) (< k (power 2 (length bv1))))
      (= (tb2t (get complex1 (t2tb65 (bv_to_ket bv1)) k 0)) (ite (= k 
                                                              (bv_to_int
                                                                bv1))
                                                              c_one
                                                              c_zero)))))

;; is_a_ket_l_bvs
(assert
  (forall ((e bitvec) (n Int))
    (=>
      (<= 0 n)
      (=>
        (mem bitvec1 (t2tb77 e) (t2tb79 (n_bvs n)))
        (is_a_ket_l (bv_to_ket e) n)))))

;; is_a_ket_l_scal_bvs
(assert
  (forall ((e bitvec) (n Int) (a complex))
    (=>
      (<= 0 n)
      (=>
        (mem bitvec1 (t2tb77 e) (t2tb79 (n_bvs n)))
        (is_a_ket_l (infix_asdtdt a (bv_to_ket e)) n)))))

;; ket_to_bv_concat
(assert
  (forall ((x bitvec) (y bitvec))
    (= (bv_to_ket (concat1 x y)) (kronecker (bv_to_ket x) (bv_to_ket y)))))

;; bv_to_ket_concat_rev
(assert
  (forall ((x bitvec) (y bitvec))
    (= (kronecker (bv_to_ket x) (bv_to_ket y)) (bv_to_ket (concat1 x y)))))

;; bv_to_ket_kronecker
(assert
  (forall ((x bitvec) (i Int))
    (=>
      (and (<= 0 i) (<= i (length x)))
      (= (bv_to_ket x) (kronecker
                         (hpart_ket (bv_to_ket x) i)
                         (tpart_ket (bv_to_ket x) i))))))

;; bv_to_ket_kronecker_
(assert
  (forall ((x bitvec) (i Int))
    (=>
      (and (<= 0 i) (<= i (length x)))
      (= (bv_to_ket x) (kronecker
                         (bv_to_ket (hpart x i))
                         (bv_to_ket (tpart x i)))))))

;; bv_to_ket_to_bv
(assert (forall ((bv1 bitvec)) (= (ket_to_bv (bv_to_ket bv1)) bv1)))

;; ket_to_bv_to_ket
(assert
  (forall ((x (matrix complex)))
    (=> (is_a_ket_basis_elt x) (= (bv_to_ket (ket_to_bv x)) x))))

;; bv_to_ket_eq
(assert
  (forall ((bv1 bitvec) (bv2 bitvec))
    (=>
      (= (length bv1) (length bv2))
      (=>
        (forall ((i Int))
          (=>
            (and (<= 0 i) (< i (length bv1)))
            (= (select (value bv1) i) (select (value bv2) i))))
        (= (bv_to_ket bv1) (bv_to_ket bv2))))))

;; fc
(declare-fun fc370 ((matrix complex)) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((m (matrix complex)) (bvx bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc370 m))
           (t2tb77 bvx))) (infix_asdtdt
                            (tb2t
                              (get complex1 (t2tb65 m) (bv_to_int bvx) 0))
                            (bv_to_ket bvx)))))

;; ket_decomp_
(assert
  (forall ((m (matrix complex)) (n Int))
    (=>
      (<= 0 n)
      (=>
        (is_a_ket m)
        (=>
          (= (ket_length m) n)
          (= m (ket_sum_l bitvec1 (t2tb79 (n_bvs n)) (t2tb80 (fc370 m)) n)))))))

;; ket_bv_to_int_to_bv_to_ket
(assert
  (forall ((x bitvec) (n Int))
    (=> (= n (length x)) (= (ket n (bv_to_int x)) (bv_to_ket x)))))

;; ket_to_bv_kronecker
(assert
  (forall ((x (matrix complex)) (y (matrix complex)))
    (=>
      (is_a_ket_basis_elt x)
      (=>
        (is_a_ket_basis_elt y)
        (= (ket_to_bv (kronecker x y)) (concat1 (ket_to_bv x) (ket_to_bv y)))))))

;; fc
(declare-fun fc371 ((matrix complex)
  Int) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((m (matrix complex)) (n Int) (bvx bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc371 m n))
           (t2tb77 bvx))) (infix_asdtdt
                            (tb2t
                              (get complex1 (t2tb65 m) (bv_to_int bvx) 0))
                            (ket n (bv_to_int bvx))))))

;; ket_decomp_bv_ket
(assert
  (forall ((m (matrix complex)) (n Int))
    (=>
      (<= 0 n)
      (=>
        (is_a_ket m)
        (=>
          (= (ket_length m) n)
          (= m (ket_sum_l bitvec1 (t2tb79 (n_bvs n)) (t2tb80 (fc371 m n)) n)))))))

;; fc
(declare-fun fc372 () (Array Int Int))

;; fc'def
(assert (forall ((us Int)) (= (select fc372 us) 0)))

;; ket_zero
(assert
  (forall ((n Int))
    (=>
      (<= 0 n)
      (and
        (is_a_ket_l (ket n 0) n)
        (and
          (is_a_ket_basis_elt (ket n 0))
          (and
            (= (ket_to_bv (ket n 0)) (make_bv fc372 n))
            (forall ((i Int))
              (=>
                (and (<= 0 i) (< i n))
                (= (select (value (ket_to_bv (ket n 0))) i) 0)))))))))

;; fc
(declare-fun fc373 ((Array bitvec complex)) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((f (Array bitvec complex)) (x bitvec))
    (= (tb2t65
         (infix_at (matrix1 complex1) bitvec1 (t2tb80 (fc373 f)) (t2tb77 x))) 
    (infix_asdtdt
      (tb2t (infix_at complex1 bitvec1 (t2tb82 f) (t2tb77 x)))
      (bv_to_ket x)))))

;; uniform_ket_norm_l
(assert
  (forall ((x (matrix complex)) (f (Array bitvec complex)) (n Int))
    (=>
      (is_a_ket_l x n)
      (=>
        (forall ((e bitvec))
          (=>
            (mem bitvec1 (t2tb77 e) (t2tb79 (n_bvs n)))
            (= (modulus
                 (tb2t (infix_at complex1 bitvec1 (t2tb82 f) (t2tb77 e)))) 
            c_one)))
        (=>
          (= x (infix_asdtdt
                 (pow_inv_sqrt_2 n)
                 (ket_sum_l bitvec1 (t2tb79 (n_bvs n)) (t2tb80 (fc373 f)) n)))
          (= (ket_norm_l x n) c_one))))))

;; ket_sum_l_diag
(declare-fun ket_sum_l_diag ((Array bitvec complex)
  Int) (matrix complex))

;; result
(declare-fun result40 ((Array bitvec complex)) (Array bitvec (matrix complex)))

;; result'def
(assert
  (forall ((f (Array bitvec complex)) (x bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (result40 f))
           (t2tb77 x))) (infix_asdtdt
                          (tb2t
                            (infix_at complex1 bitvec1 (t2tb82 f) (t2tb77 x)))
                          (bv_to_ket x)))))

;; ket_sum_l_diag'def
(assert
  (forall ((f (Array bitvec complex)) (l Int))
    (=>
      (<= 0 l)
      (= (ket_sum_l_diag f l) (ket_sum_l
                                bitvec1
                                (t2tb79 (n_bvs l))
                                (t2tb80 (result40 f))
                                l)))))

;; ket_sum_l_diag'spec
(assert
  (forall ((f (Array bitvec complex)) (l Int))
    (=>
      (<= 0 l)
      (and
        (is_a_ket_l (ket_sum_l_diag f l) l)
        (forall ((i Int))
          (=>
            (and (<= 0 i) (< i (power 2 l)))
            (= (tb2t (get complex1 (t2tb65 (ket_sum_l_diag f l)) i 0)) 
            (tb2t
              (infix_at complex1 bitvec1 (t2tb82 f) (t2tb77 (int_to_bv i l)))))))))))

;; fc
(declare-fun fc374 ((Array bitvec complex)) (Array bitvec (matrix complex)))

;; fc
(declare-fun fc375 ((Array bitvec complex)) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((f (Array bitvec complex)) (x bitvec))
    (= (tb2t65
         (infix_at (matrix1 complex1) bitvec1 (t2tb80 (fc374 f)) (t2tb77 x))) 
    (infix_asdtdt
      (tb2t (infix_at complex1 bitvec1 (t2tb82 f) (t2tb77 x)))
      (bv_to_ket x)))))

;; fc'def
(assert
  (forall ((f (Array bitvec complex)) (x bitvec))
    (= (tb2t65
         (infix_at (matrix1 complex1) bitvec1 (t2tb80 (fc375 f)) (t2tb77 x))) 
    (infix_asdtdt
      (tb2t (infix_at complex1 bitvec1 (t2tb82 f) (t2tb77 x)))
      (bv_to_ket x)))))

;; ket_sum_of_scalars
(assert
  (forall ((f (Array bitvec complex)) (n Int))
    (=>
      (<= 0 n)
      (and
        (is_a_ket_l
          (ket_sum_l bitvec1 (t2tb79 (n_bvs n)) (t2tb80 (fc374 f)) n)
          n)
        (forall ((i Int))
          (=>
            (and (<= 0 i) (< i (power 2 n)))
            (= (tb2t
                 (get
                   complex1
                   (t2tb65
                     (ket_sum_l
                       bitvec1
                       (t2tb79 (n_bvs n))
                       (t2tb80 (fc375 f))
                       n))
                   i
                   0)) (tb2t
                         (infix_at
                           complex1
                           bitvec1
                           (t2tb82 f)
                           (t2tb77 (int_to_bv i n)))))))))))

;; fc
(declare-fun fc376 (ty
  ty
  uni
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni) (x1 uni))
      (sort (infix_mngt a (matrix1 complex1)) (fc376 b a x x1)))))

;; fc
(declare-fun fc377 (ty
  ty
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty) (b ty))
    (forall ((x uni))
      (sort (infix_mngt (tuple21 a b) (matrix1 complex1)) (fc377 b a x)))))

;; fc'def
(assert
  (forall ((a ty) (b ty))
    (forall ((s2 uni) (f uni) (a1 uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc376 b a s2 f) a1)) 
      (mat_sum
        b
        s2
        (infix_at (infix_mngt b (matrix1 complex1)) a f a1))))))

;; fc'def
(assert
  (forall ((a ty) (b ty))
    (forall ((f uni) (o uni))
      (= (tb2t65 (infix_at (matrix1 complex1) (tuple21 a b) (fc377 b a f) o)) 
      (tb2t65
        (infix_at
          (matrix1 complex1)
          b
          (infix_at (infix_mngt b (matrix1 complex1)) a f (fir b a o))
          (sec1 b a o)))))))

;; mat_sum_sum_cartesian_product_pre
(assert
  (forall ((a ty) (b ty))
    (forall ((s1 uni) (s2 uni) (f uni) (r Int) (c Int))
      (=>
        (< 0 r)
        (=>
          (< 0 c)
          (=>
            (forall ((a1 uni) (b1 uni))
              (=>
                (sort a a1)
                (=>
                  (sort b b1)
                  (=>
                    (mem a a1 s1)
                    (=>
                      (mem b b1 s2)
                      (= (rows
                           complex1
                           (infix_at
                             (matrix1 complex1)
                             b
                             (infix_at
                               (infix_mngt b (matrix1 complex1))
                               a
                               f
                               a1)
                             b1)) r))))))
            (=>
              (forall ((a1 uni) (b1 uni))
                (=>
                  (sort a a1)
                  (=>
                    (sort b b1)
                    (=>
                      (mem a a1 s1)
                      (=>
                        (mem b b1 s2)
                        (= (columns
                             complex1
                             (infix_at
                               (matrix1 complex1)
                               b
                               (infix_at
                                 (infix_mngt b (matrix1 complex1))
                                 a
                                 f
                                 a1)
                               b1)) c))))))
              (=>
                (< 0 (cardinal a s1))
                (=>
                  (< 0 (cardinal b s2))
                  (= (mat_sum a s1 (fc376 b a s2 f)) (mat_sum
                                                       (tuple21 a b)
                                                       (cartesian_product
                                                         b
                                                         a
                                                         s1
                                                         s2)
                                                       (fc377 b a f))))))))))))

;; fc
(declare-fun fc378 ((Array bitvec (Array bitvec (matrix complex)))
  Int) (Array bitvec (matrix complex)))

;; fc
(declare-fun fc379 ((Array bitvec (Array bitvec (matrix complex)))
  Int) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((f (Array bitvec (Array bitvec (matrix complex)))) (x Int) (bvy bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc378 f x))
           (t2tb77 bvy))) (mat_sum
                            bitvec1
                            (t2tb79 (n_bvs x))
                            (infix_at
                              (infix_mngt bitvec1 (matrix1 complex1))
                              bitvec1
                              (t2tb114 f)
                              (t2tb77 bvy))))))

;; fc'def
(assert
  (forall ((f (Array bitvec (Array bitvec (matrix complex)))) (y Int) (bv1 bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc379 f y))
           (t2tb77 bv1))) (tb2t65
                            (infix_at
                              (matrix1 complex1)
                              bitvec1
                              (infix_at
                                (infix_mngt bitvec1 (matrix1 complex1))
                                bitvec1
                                (t2tb114 f)
                                (t2tb77 (hpart bv1 y)))
                              (t2tb77 (tpart bv1 y)))))))

;; mat_sum_comp
(assert
  (forall ((f (Array bitvec (Array bitvec (matrix complex)))) (l Int) (x Int) (y Int))
    (=>
      (<= 0 x)
      (=>
        (<= 0 y)
        (=>
          (<= 0 l)
          (=>
            (forall ((bvx bitvec) (bvy bitvec))
              (=>
                (mem bitvec1 (t2tb77 bvx) (t2tb79 (n_bvs x)))
                (=>
                  (mem bitvec1 (t2tb77 bvy) (t2tb79 (n_bvs y)))
                  (is_a_ket
                    (tb2t65
                      (infix_at
                        (matrix1 complex1)
                        bitvec1
                        (infix_at
                          (infix_mngt bitvec1 (matrix1 complex1))
                          bitvec1
                          (t2tb114 f)
                          (t2tb77 bvy))
                        (t2tb77 bvx)))))))
            (=>
              (forall ((bvx bitvec) (bvy bitvec))
                (=>
                  (mem bitvec1 (t2tb77 bvx) (t2tb79 (n_bvs x)))
                  (=>
                    (mem bitvec1 (t2tb77 bvy) (t2tb79 (n_bvs y)))
                    (= (ket_length
                         (tb2t65
                           (infix_at
                             (matrix1 complex1)
                             bitvec1
                             (infix_at
                               (infix_mngt bitvec1 (matrix1 complex1))
                               bitvec1
                               (t2tb114 f)
                               (t2tb77 bvy))
                             (t2tb77 bvx)))) l))))
              (= (mat_sum bitvec1 (t2tb79 (n_bvs y)) (t2tb80 (fc378 f x))) 
              (mat_sum
                bitvec1
                (t2tb79 (n_bvs (+ x y)))
                (t2tb80 (fc379 f y)))))))))))

;; fc
(declare-fun fc380 ((Array bitvec (Array bitvec (matrix complex)))
  Int) (Array bitvec (matrix complex)))

;; fc
(declare-fun fc381 ((Array bitvec (Array bitvec (matrix complex)))
  Int) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((f (Array bitvec (Array bitvec (matrix complex)))) (y Int) (bv1 bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc380 f y))
           (t2tb77 bv1))) (tb2t65
                            (infix_at
                              (matrix1 complex1)
                              bitvec1
                              (infix_at
                                (infix_mngt bitvec1 (matrix1 complex1))
                                bitvec1
                                (t2tb114 f)
                                (t2tb77 (hpart bv1 y)))
                              (t2tb77 (tpart bv1 y)))))))

;; fc'def
(assert
  (forall ((f (Array bitvec (Array bitvec (matrix complex)))) (x Int) (bvy bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc381 f x))
           (t2tb77 bvy))) (mat_sum
                            bitvec1
                            (t2tb79 (n_bvs x))
                            (infix_at
                              (infix_mngt bitvec1 (matrix1 complex1))
                              bitvec1
                              (t2tb114 f)
                              (t2tb77 bvy))))))

;; mat_sum_comp_rev
(assert
  (forall ((f (Array bitvec (Array bitvec (matrix complex)))) (l Int) (x Int) (y Int))
    (=>
      (<= 0 x)
      (=>
        (<= 0 y)
        (=>
          (<= 0 l)
          (=>
            (forall ((bvx bitvec) (bvy bitvec))
              (=>
                (mem bitvec1 (t2tb77 bvx) (t2tb79 (n_bvs x)))
                (=>
                  (mem bitvec1 (t2tb77 bvy) (t2tb79 (n_bvs y)))
                  (is_a_ket
                    (tb2t65
                      (infix_at
                        (matrix1 complex1)
                        bitvec1
                        (infix_at
                          (infix_mngt bitvec1 (matrix1 complex1))
                          bitvec1
                          (t2tb114 f)
                          (t2tb77 bvy))
                        (t2tb77 bvx)))))))
            (=>
              (forall ((bvx bitvec) (bvy bitvec))
                (=>
                  (mem bitvec1 (t2tb77 bvx) (t2tb79 (n_bvs x)))
                  (=>
                    (mem bitvec1 (t2tb77 bvy) (t2tb79 (n_bvs y)))
                    (= (ket_length
                         (tb2t65
                           (infix_at
                             (matrix1 complex1)
                             bitvec1
                             (infix_at
                               (infix_mngt bitvec1 (matrix1 complex1))
                               bitvec1
                               (t2tb114 f)
                               (t2tb77 bvy))
                             (t2tb77 bvx)))) l))))
              (= (mat_sum
                   bitvec1
                   (t2tb79 (n_bvs (+ x y)))
                   (t2tb80 (fc380 f y))) (mat_sum
                                           bitvec1
                                           (t2tb79 (n_bvs y))
                                           (t2tb80 (fc381 f x)))))))))))

;; fc
(declare-fun fc382 ((Array bitvec (Array bitvec (matrix complex)))
  (Array bitvec complex)
  Int
  Int) (Array bitvec (matrix complex)))

;; fc
(declare-fun fc383 ((Array bitvec (Array bitvec (matrix complex)))
  (Array bitvec complex)
  Int) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((f (Array bitvec (Array bitvec (matrix complex)))) (scal (Array bitvec complex)) (l Int) (x Int) (bvy bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc382 f scal l x))
           (t2tb77 bvy))) (infix_asdtdt
                            (tb2t
                              (infix_at
                                complex1
                                bitvec1
                                (t2tb82 scal)
                                (t2tb77 bvy)))
                            (ket_sum_l
                              bitvec1
                              (t2tb79 (n_bvs x))
                              (infix_at
                                (infix_mngt bitvec1 (matrix1 complex1))
                                bitvec1
                                (t2tb114 f)
                                (t2tb77 bvy))
                              l)))))

;; fc'def
(assert
  (forall ((f (Array bitvec (Array bitvec (matrix complex)))) (scal (Array bitvec complex)) (y Int) (bv1 bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc383 f scal y))
           (t2tb77 bv1))) (infix_asdtdt
                            (tb2t
                              (infix_at
                                complex1
                                bitvec1
                                (t2tb82 scal)
                                (t2tb77 (hpart bv1 y))))
                            (tb2t65
                              (infix_at
                                (matrix1 complex1)
                                bitvec1
                                (infix_at
                                  (infix_mngt bitvec1 (matrix1 complex1))
                                  bitvec1
                                  (t2tb114 f)
                                  (t2tb77 (hpart bv1 y)))
                                (t2tb77 (tpart bv1 y))))))))

;; ket_sum_bin_comp_l
(assert
  (forall ((f (Array bitvec (Array bitvec (matrix complex)))) (scal (Array bitvec complex)) (l Int) (x Int) (y Int))
    (=>
      (<= 0 x)
      (=>
        (<= 0 y)
        (=>
          (<= 0 l)
          (= (ket_sum_l
               bitvec1
               (t2tb79 (n_bvs y))
               (t2tb80 (fc382 f scal l x))
               l) (ket_sum_l
                    bitvec1
                    (t2tb79 (n_bvs (+ x y)))
                    (t2tb80 (fc383 f scal y))
                    l)))))))

;; fc
(declare-fun fc384 ((Array bitvec (Array bitvec (matrix complex)))
  Int
  Int) (Array bitvec (matrix complex)))

;; fc
(declare-fun fc385 ((Array bitvec (Array bitvec (matrix complex)))
  Int) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((f (Array bitvec (Array bitvec (matrix complex)))) (l Int) (x Int) (bvy bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc384 f l x))
           (t2tb77 bvy))) (ket_sum_l
                            bitvec1
                            (t2tb79 (n_bvs x))
                            (infix_at
                              (infix_mngt bitvec1 (matrix1 complex1))
                              bitvec1
                              (t2tb114 f)
                              (t2tb77 bvy))
                            l))))

;; fc'def
(assert
  (forall ((f (Array bitvec (Array bitvec (matrix complex)))) (y Int) (bv1 bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc385 f y))
           (t2tb77 bv1))) (tb2t65
                            (infix_at
                              (matrix1 complex1)
                              bitvec1
                              (infix_at
                                (infix_mngt bitvec1 (matrix1 complex1))
                                bitvec1
                                (t2tb114 f)
                                (t2tb77 (hpart bv1 y)))
                              (t2tb77 (tpart bv1 y)))))))

;; ket_sum_bin_comp
(assert
  (forall ((f (Array bitvec (Array bitvec (matrix complex)))) (l Int) (x Int) (y Int))
    (=>
      (<= 0 x)
      (=>
        (<= 0 y)
        (=>
          (<= 0 l)
          (= (ket_sum_l bitvec1 (t2tb79 (n_bvs y)) (t2tb80 (fc384 f l x)) l) 
          (ket_sum_l
            bitvec1
            (t2tb79 (n_bvs (+ x y)))
            (t2tb80 (fc385 f y))
            l)))))))

;; fc
(declare-fun fc386 ((Array bitvec (Array bitvec (matrix complex)))
  Int) (Array bitvec (matrix complex)))

;; fc
(declare-fun fc387 ((Array bitvec (Array bitvec (matrix complex)))
  Int
  Int) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((f (Array bitvec (Array bitvec (matrix complex)))) (y Int) (bv1 bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc386 f y))
           (t2tb77 bv1))) (tb2t65
                            (infix_at
                              (matrix1 complex1)
                              bitvec1
                              (infix_at
                                (infix_mngt bitvec1 (matrix1 complex1))
                                bitvec1
                                (t2tb114 f)
                                (t2tb77 (hpart bv1 y)))
                              (t2tb77 (tpart bv1 y)))))))

;; fc'def
(assert
  (forall ((f (Array bitvec (Array bitvec (matrix complex)))) (l Int) (x Int) (bvy bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc387 f l x))
           (t2tb77 bvy))) (ket_sum_l
                            bitvec1
                            (t2tb79 (n_bvs x))
                            (infix_at
                              (infix_mngt bitvec1 (matrix1 complex1))
                              bitvec1
                              (t2tb114 f)
                              (t2tb77 bvy))
                            l))))

;; ket_sum_bin_comp_rev
(assert
  (forall ((f (Array bitvec (Array bitvec (matrix complex)))) (l Int) (x Int) (y Int))
    (=>
      (<= 0 x)
      (=>
        (<= 0 y)
        (=>
          (<= 0 l)
          (= (ket_sum_l
               bitvec1
               (t2tb79 (n_bvs (+ x y)))
               (t2tb80 (fc386 f y))
               l) (ket_sum_l
                    bitvec1
                    (t2tb79 (n_bvs y))
                    (t2tb80 (fc387 f l x))
                    l)))))))

;; fc
(declare-fun fc388 ((Array bitvec (Array bitvec (matrix complex)))
  Int) (Array bitvec (matrix complex)))

;; fc
(declare-fun fc389 ((Array bitvec (Array bitvec (matrix complex)))
  Int
  Int) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((f (Array bitvec (Array bitvec (matrix complex)))) (x Int) (bv1 bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc388 f x))
           (t2tb77 bv1))) (tb2t65
                            (infix_at
                              (matrix1 complex1)
                              bitvec1
                              (infix_at
                                (infix_mngt bitvec1 (matrix1 complex1))
                                bitvec1
                                (t2tb114 f)
                                (t2tb77 (hpart bv1 x)))
                              (t2tb77 (tpart bv1 x)))))))

;; fc'def
(assert
  (forall ((f (Array bitvec (Array bitvec (matrix complex)))) (l Int) (y Int) (bvx bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc389 f l y))
           (t2tb77 bvx))) (ket_sum_l
                            bitvec1
                            (t2tb79 (n_bvs y))
                            (infix_at
                              (infix_mngt bitvec1 (matrix1 complex1))
                              bitvec1
                              (t2tb114 f)
                              (t2tb77 bvx))
                            l))))

;; ket_sum_bin_comp_rev_
(assert
  (forall ((f (Array bitvec (Array bitvec (matrix complex)))) (l Int) (x Int) (y Int))
    (=>
      (<= 0 x)
      (=>
        (<= 0 y)
        (=>
          (<= 0 l)
          (= (ket_sum_l
               bitvec1
               (t2tb79 (n_bvs (+ x y)))
               (t2tb80 (fc388 f x))
               l) (ket_sum_l
                    bitvec1
                    (t2tb79 (n_bvs x))
                    (t2tb80 (fc389 f l y))
                    l)))))))

;; ket_sum_bv_to_ints
(assert
  (forall ((n Int) (f (Array bitvec (matrix complex))) (g (Array Int (matrix complex))))
    (=>
      (<= 0 n)
      (=>
        (forall ((x bitvec))
          (=>
            (= (length x) n)
            (= (tb2t65
                 (infix_at (matrix1 complex1) bitvec1 (t2tb80 f) (t2tb77 x))) 
            (tb2t65
              (infix_at
                (matrix1 complex1)
                int
                (t2tb68 g)
                (t2tb8 (bv_to_int x)))))))
        (= (ket_sum_l bitvec1 (t2tb79 (n_bvs n)) (t2tb80 f) n) (ket_sum_l
                                                                 int
                                                                 (t2tb16
                                                                   (to_fset
                                                                    0
                                                                    (power
                                                                    2
                                                                    n)))
                                                                 (t2tb68 g)
                                                                 n))))))

;; fc
(declare-fun fc390 ((Array bitvec (Array bitvec (matrix complex)))
  Int
  Int) (Array bitvec (matrix complex)))

;; fc
(declare-fun fc391 ((Array bitvec (Array bitvec (matrix complex)))
  Int
  Int) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((f (Array bitvec (Array bitvec (matrix complex)))) (l Int) (l2 Int) (x bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc390 f l l2))
           (t2tb77 x))) (ket_sum_l
                          bitvec1
                          (t2tb79 (n_bvs l2))
                          (infix_at
                            (infix_mngt bitvec1 (matrix1 complex1))
                            bitvec1
                            (t2tb114 f)
                            (t2tb77 x))
                          l))))

;; fc'def
(assert
  (forall ((f (Array bitvec (Array bitvec (matrix complex)))) (l Int) (l1 Int) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc391 f l l1))
           (t2tb77 y))) (ket_sum_l
                          bitvec1
                          (t2tb79 (n_bvs l1))
                          (infix_at
                            (infix_mngt bitvec1 (matrix1 complex1))
                            bitvec1
                            (t2tb114 f)
                            (t2tb77 y))
                          l))))

;; ket_sum_sum_rev
(assert
  (forall ((f (Array bitvec (Array bitvec (matrix complex)))) (l Int) (l1 Int) (l2 Int))
    (=>
      (<= 0 l)
      (=>
        (and (<= 0 l1) (= l1 l2))
        (= (ket_sum_l bitvec1 (t2tb79 (n_bvs l1)) (t2tb80 (fc390 f l l2)) l) 
        (ket_sum_l
          bitvec1
          (t2tb79 (n_bvs l2))
          (t2tb80 (fc391 f l l1))
          l))))))

;; fc
(declare-fun fc392 ((Array bitvec complex)) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((f (Array bitvec complex)) (y bitvec))
    (= (tb2t65
         (infix_at (matrix1 complex1) bitvec1 (t2tb80 (fc392 f)) (t2tb77 y))) 
    (infix_asdtdt
      (tb2t (infix_at complex1 bitvec1 (t2tb82 f) (t2tb77 y)))
      (bv_to_ket y)))))

;; get_ket_sum
(assert
  (forall ((f (Array bitvec complex)) (n Int) (i Int))
    (=>
      (and (<= 0 i) (< i (power 2 n)))
      (=>
        (<= 0 n)
        (= (tb2t
             (get
               complex1
               (t2tb65
                 (ket_sum_l bitvec1 (t2tb79 (n_bvs n)) (t2tb80 (fc392 f)) n))
               i
               0)) (tb2t
                     (infix_at
                       complex1
                       bitvec1
                       (t2tb82 f)
                       (t2tb77 (int_to_bv i n)))))))))

;; get_ket_scalar_zero
(assert
  (forall ((x (matrix complex)) (a complex))
    (= (tb2t (get complex1 (t2tb65 (infix_asdtdt a x)) 0 0)) (infix_asdt
                                                               a
                                                               (tb2t
                                                                 (get
                                                                   complex1
                                                                   (t2tb65 x)
                                                                   0
                                                                   0))))))

;; fc
(declare-fun fc393 ((Array bitvec (Array bitvec complex))
  bitvec) (Array bitvec (matrix complex)))

;; fc
(declare-fun fc394 ((Array bitvec (Array bitvec complex))
  (set bitvec)
  Int) (Array bitvec (matrix complex)))

;; fc
(declare-fun fc395 ((Array bitvec (Array bitvec complex))
  bitvec) (Array bitvec complex))

;; fc
(declare-fun fc396 ((Array bitvec (Array bitvec complex))
  (set bitvec)) (Array bitvec (matrix complex)))

;; t2tb
(declare-fun t2tb116 ((Array bitvec (Array bitvec complex))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array bitvec (Array bitvec complex))))
    (sort (infix_mngt bitvec1 (infix_mngt bitvec1 complex1)) (t2tb116 x))))

;; tb2t
(declare-fun tb2t116 (uni) (Array bitvec (Array bitvec complex)))

;; BridgeL
(assert
  (forall ((i (Array bitvec (Array bitvec complex))))
    (! (= (tb2t116 (t2tb116 i)) i) :pattern ((t2tb116 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort (infix_mngt bitvec1 (infix_mngt bitvec1 complex1)) j)
         (= (t2tb116 (tb2t116 j)) j)) :pattern ((t2tb116 (tb2t116 j))) )))

;; fc'def
(assert
  (forall ((f (Array bitvec (Array bitvec complex))) (x bitvec) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc393 f x))
           (t2tb77 y))) (infix_asdtdt
                          (tb2t
                            (infix_at
                              complex1
                              bitvec1
                              (infix_at
                                (infix_mngt bitvec1 complex1)
                                bitvec1
                                (t2tb116 f)
                                (t2tb77 x))
                              (t2tb77 y)))
                          (bv_to_ket y)))))

;; fc'def
(assert
  (forall ((f (Array bitvec (Array bitvec complex))) (sy (set bitvec)) (l Int) (x bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc394 f sy l))
           (t2tb77 x))) (ket_sum_l
                          bitvec1
                          (t2tb79 sy)
                          (t2tb80 (fc393 f x))
                          l))))

;; fc'def
(assert
  (forall ((f (Array bitvec (Array bitvec complex))) (y bitvec) (x bitvec))
    (= (tb2t (infix_at complex1 bitvec1 (t2tb82 (fc395 f y)) (t2tb77 x))) 
    (tb2t
      (infix_at
        complex1
        bitvec1
        (infix_at
          (infix_mngt bitvec1 complex1)
          bitvec1
          (t2tb116 f)
          (t2tb77 x))
        (t2tb77 y))))))

;; fc'def
(assert
  (forall ((f (Array bitvec (Array bitvec complex))) (sx (set bitvec)) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc396 f sx))
           (t2tb77 y))) (infix_asdtdt
                          (sum bitvec1 (t2tb79 sx) (t2tb82 (fc395 f y)))
                          (bv_to_ket y)))))

;; ket_sum_sum_complex
(assert
  (forall ((f (Array bitvec (Array bitvec complex))) (sx (set bitvec)) (sy (set bitvec)) (l Int))
    (=>
      (<= 0 l)
      (=>
        (forall ((x bitvec))
          (=> (mem bitvec1 (t2tb77 x) (t2tb79 sx)) (= (length x) l)))
        (=>
          (forall ((y bitvec))
            (=> (mem bitvec1 (t2tb77 y) (t2tb79 sy)) (= (length y) l)))
          (= (ket_sum_l bitvec1 (t2tb79 sx) (t2tb80 (fc394 f sy l)) l) 
          (ket_sum_l
            bitvec1
            (t2tb79 sy)
            (t2tb80 (fc396 f sx))
            l)))))))

;; mat_mult_ket_basis_bv_value
(assert
  (forall ((m (matrix complex)) (x bitvec) (i Int) (l Int))
    (=>
      (= (length x) l)
      (=>
        (and (<= 0 i) (< i (power 2 l)))
        (=>
          (and
            (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 m)))
            (= (rows complex1 (t2tb65 m)) (power 2 l)))
          (= (tb2t (get complex1 (t2tb65 (mat_mult m (bv_to_ket x))) i 0)) 
          (tb2t
            (get complex1 (t2tb65 m) i (bv_to_int x)))))))))

;; mat_mult_ket_basis_bv_value_gen
(assert
  (forall ((m (matrix complex)) (l Int))
    (=>
      (and
        (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 m)))
        (= (rows complex1 (t2tb65 m)) (power 2 l)))
      (forall ((x bitvec))
        (forall ((i Int))
          (=>
            (= (length x) l)
            (=>
              (and (<= 0 i) (< i (power 2 l)))
              (= (tb2t
                   (get complex1 (t2tb65 (mat_mult m (bv_to_ket x))) i 0)) 
              (tb2t
                (get complex1 (t2tb65 m) i (bv_to_int x)))))))))))

;; mat_mult_ket_injec_eq_left
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (l Int))
    (=>
      (= (rows complex1 (t2tb65 m)) (power 2 l))
      (=>
        (= (columns complex1 (t2tb65 m)) (power 2 l))
        (=>
          (= (rows complex1 (t2tb65 n)) (power 2 l))
          (=>
            (= (columns complex1 (t2tb65 n)) (power 2 l))
            (=>
              (forall ((x bitvec))
                (=>
                  (= (length x) l)
                  (= (mat_mult m (bv_to_ket x)) (mat_mult n (bv_to_ket x)))))
              (= m n))))))))

;; int_to_bv_to_ket
(assert
  (forall ((k Int) (n Int))
    (=>
      (and (<= 0 k) (< k (power 2 n)))
      (= (bv_to_ket (int_to_bv k n)) (ket n k)))))

(declare-sort pps 0)

;; pps
(declare-fun pps1 () ty)

;; h_width
(declare-fun h_width (pps) Int)

;; h_range
(declare-fun h_range (pps) Int)

;; h_basis_ket
(declare-fun h_basis_ket (pps) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))

;; h_angle
(declare-fun h_angle (pps) (Array (Array Int Int) (Array (Array Int Int) angle)))

;; t2tb
(declare-fun t2tb117 ((Array (Array Int Int) angle)) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (Array Int Int) angle)))
    (sort (infix_mngt (infix_mngt int int) angle1) (t2tb117 x))))

;; tb2t
(declare-fun tb2t117 (uni) (Array (Array Int Int) angle))

;; BridgeL
(assert
  (forall ((i (Array (Array Int Int) angle)))
    (! (= (tb2t117 (t2tb117 i)) i) :pattern ((t2tb117 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort (infix_mngt (infix_mngt int int) angle1) j)
         (= (t2tb117 (tb2t117 j)) j)) :pattern ((t2tb117 (tb2t117 j))) )))

;; t2tb
(declare-fun t2tb118 ((Array (Array Int Int) (Array (Array Int Int) angle))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array (Array Int Int) (Array (Array Int Int) angle))))
    (sort
      (infix_mngt
        (infix_mngt int int)
        (infix_mngt (infix_mngt int int) angle1))
      (t2tb118 x))))

;; tb2t
(declare-fun tb2t118 (uni) (Array (Array Int Int) (Array (Array Int Int) angle)))

;; BridgeL
(assert
  (forall ((i (Array (Array Int Int) (Array (Array Int Int) angle))))
    (! (= (tb2t118 (t2tb118 i)) i) :pattern ((t2tb118 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort
           (infix_mngt
             (infix_mngt int int)
             (infix_mngt (infix_mngt int int) angle1))
           j)
         (= (t2tb118 (tb2t118 j)) j)) :pattern ((t2tb118 (tb2t118 j))) )))

;; pps'invariant
(assert
  (forall ((self pps))
    (! (and
         (<= 0 (h_width self))
         (and
           (<= 0 (h_range self))
           (and
             (forall ((x (Array Int Int)) (y (Array Int Int)))
               (=>
                 (forall ((i Int))
                   (=>
                     (and (<= 0 i) (< i (h_width self)))
                     (and (<= 0 (select x i)) (< (select x i) 2))))
                 (=>
                   (forall ((i Int))
                     (=>
                       (and (<= 0 i) (< i (h_range self)))
                       (and (<= 0 (select y i)) (< (select y i) 2))))
                   (forall ((i Int))
                     (=>
                       (and (<= 0 i) (< i (h_width self)))
                       (and
                         (<= 0 (select (select (select (h_basis_ket self) x) y) i))
                         (< (select (select (select (h_basis_ket self) x) y) i) 2)))))))
             (and
               (forall ((x (Array Int Int)) (xqt (Array Int Int)) (y (Array Int Int)) (yqt (Array Int Int)))
                 (=>
                   (forall ((i Int))
                     (=>
                       (and (<= 0 i) (< i (h_width self)))
                       (= (select x i) (select xqt i))))
                   (=>
                     (forall ((i Int))
                       (=>
                         (and (<= 0 i) (< i (h_range self)))
                         (= (select y i) (select yqt i))))
                     (forall ((i Int))
                       (=>
                         (and (<= 0 i) (< i (h_width self)))
                         (= (select (select (select (h_basis_ket self) x) y) i) (select (select (select 
                         (h_basis_ket
                           self) xqt) yqt) i)))))))
               (forall ((x (Array Int Int)) (xqt (Array Int Int)) (y (Array Int Int)) (yqt (Array Int Int)))
                 (=>
                   (forall ((i Int))
                     (=>
                       (and (<= 0 i) (< i (h_width self)))
                       (= (select x i) (select xqt i))))
                   (=>
                     (forall ((i Int))
                       (=>
                         (and (<= 0 i) (< i (h_range self)))
                         (= (select y i) (select yqt i))))
                     (= (tb2t84
                          (infix_at
                            angle1
                            (infix_mngt int int)
                            (infix_at
                              (infix_mngt (infix_mngt int int) angle1)
                              (infix_mngt int int)
                              (t2tb118 (h_angle self))
                              (t2tb7 x))
                            (t2tb7 y))) (tb2t84
                                          (infix_at
                                            angle1
                                            (infix_mngt int int)
                                            (infix_at
                                              (infix_mngt
                                                (infix_mngt int int)
                                                angle1)
                                              (infix_mngt int int)
                                              (t2tb118 (h_angle self))
                                              (t2tb7 xqt))
                                            (t2tb7 yqt))))))))))) :pattern (
    (h_angle
      self)) :pattern ((h_basis_ket self)) :pattern ((h_range self)) :pattern (
    (h_width
      self)) )))

;; inv_func_int
(declare-fun inv_func_int ((Array Int Int)
  Int) (Array Int Int))

;; inv_func_int'def
(assert
  (forall ((f (Array Int Int)) (n Int))
    (=>
      (p_bijective1 f (to_fset 0 n) (to_fset 0 n))
      (= (inv_func_int f n) (tb2t7
                              (inverse1
                                int
                                int
                                (t2tb7 f)
                                (t2tb16 (to_fset 0 n))
                                (t2tb16 (to_fset 0 n))))))))

;; inv_func_int'spec
(assert
  (forall ((f (Array Int Int)) (n Int))
    (=>
      (p_bijective1 f (to_fset 0 n) (to_fset 0 n))
      (and
        (p_bijective1 (inv_func_int f n) (to_fset 0 n) (to_fset 0 n))
        (and
          (forall ((a Int))
            (=>
              (and (<= 0 a) (< a n))
              (and
                (<= 0 (select (inv_func_int f n) a))
                (< (select (inv_func_int f n) a) n))))
          (and
            (forall ((a Int))
              (=>
                (and (<= 0 a) (< a n))
                (= (select f (select (inv_func_int f n) a)) a)))
            (and
              (forall ((a Int))
                (=>
                  (and (<= 0 a) (< a n))
                  (= (select (inv_func_int f n) (select f a)) a)))
              (forall ((a Int) (b Int))
                (=>
                  (and (<= 0 a) (< a n))
                  (=>
                    (and (<= 0 b) (< b n))
                    (=>
                      (= (select f a) b)
                      (= (select (inv_func_int f n) b) a))))))))))))

;; binary_h_basis_ket
(assert
  (forall ((p pps) (w Int) (x (Array Int Int)) (y (Array Int Int)))
    (=>
      (= w (h_width p))
      (=>
        (binary_l x w)
        (=>
          (binary_l y (h_range p))
          (binary_l (select (select (h_basis_ket p) x) y) w))))))

;; swap_int
(declare-fun swap_int (Int
  Int
  Int) (Array Int Int))

;; swap_int'def
(assert
  (forall ((t1 Int) (t2 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 t2) (< t2 n))
        (forall ((i Int))
          (= (select (swap_int t1 t2 n) i) (ite (= i t1)
                                             t2
                                             (ite (= i t2) t1 i))))))))

;; swap_int'spec
(assert
  (forall ((t1 Int) (t2 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 t2) (< t2 n))
        (and
          (forall ((a Int))
            (=> (= a t1) (= (select (swap_int t1 t2 n) a) t2)))
          (and
            (forall ((a Int))
              (=> (= a t2) (= (select (swap_int t1 t2 n) a) t1)))
            (and
              (forall ((a Int))
                (=>
                  (not (= a t1))
                  (=> (not (= a t2)) (= (select (swap_int t1 t2 n) a) a))))
              (and
                (p_bijective1 (swap_int t1 t2 n) (to_fset 0 n) (to_fset 0 n))
                (forall ((i Int))
                  (=>
                    (and (<= 0 i) (< i n))
                    (= (select (inv_func_int (swap_int t1 t2 n) n) i) (select 
                    (swap_int
                      t1
                      t2
                      n) i))))))))))))

;; build_pps
(declare-fun build_pps (Int
  Int
  (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))
  (Array (Array Int Int) (Array (Array Int Int) angle))) pps)

;; build_pps'spec
(assert
  (forall ((w Int) (r Int) (k (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))) (a (Array (Array Int Int) (Array (Array Int Int) angle))))
    (=>
      (<= 0 w)
      (=>
        (<= 0 r)
        (=>
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (=>
              (forall ((i Int))
                (=>
                  (and (<= 0 i) (< i w))
                  (and (<= 0 (select x i)) (< (select x i) 2))))
              (=>
                (forall ((i Int))
                  (=>
                    (and (<= 0 i) (< i r))
                    (and (<= 0 (select y i)) (< (select y i) 2))))
                (forall ((i Int))
                  (=>
                    (and (<= 0 i) (< i w))
                    (and
                      (<= 0 (select (select (select k x) y) i))
                      (< (select (select (select k x) y) i) 2)))))))
          (=>
            (forall ((x (Array Int Int)) (xqt (Array Int Int)) (y (Array Int Int)) (yqt (Array Int Int)))
              (=>
                (forall ((i Int))
                  (=> (and (<= 0 i) (< i w)) (= (select x i) (select xqt i))))
                (=>
                  (forall ((i Int))
                    (=>
                      (and (<= 0 i) (< i r))
                      (= (select y i) (select yqt i))))
                  (forall ((i Int))
                    (=>
                      (and (<= 0 i) (< i w))
                      (= (select (select (select k x) y) i) (select (select (select k xqt) yqt) i)))))))
            (=>
              (forall ((x (Array Int Int)) (xqt (Array Int Int)) (y (Array Int Int)) (yqt (Array Int Int)))
                (=>
                  (forall ((i Int))
                    (=>
                      (and (<= 0 i) (< i w))
                      (= (select x i) (select xqt i))))
                  (=>
                    (forall ((i Int))
                      (=>
                        (and (<= 0 i) (< i r))
                        (= (select y i) (select yqt i))))
                    (= (tb2t84
                         (infix_at
                           angle1
                           (infix_mngt int int)
                           (infix_at
                             (infix_mngt (infix_mngt int int) angle1)
                             (infix_mngt int int)
                             (t2tb118 a)
                             (t2tb7 x))
                           (t2tb7 y))) (tb2t84
                                         (infix_at
                                           angle1
                                           (infix_mngt int int)
                                           (infix_at
                                             (infix_mngt
                                               (infix_mngt int int)
                                               angle1)
                                             (infix_mngt int int)
                                             (t2tb118 a)
                                             (t2tb7 xqt))
                                           (t2tb7 yqt)))))))
              (and
                (= (h_width (build_pps w r k a)) w)
                (and
                  (= (h_range (build_pps w r k a)) r)
                  (and
                    (forall ((x bitvec) (y bitvec))
                      (forall ((i Int))
                        (=>
                          (= (length x) w)
                          (=>
                            (= (length y) r)
                            (=>
                              (and (<= 0 i) (< i w))
                              (= (select (select (select (h_basis_ket
                                                           (build_pps
                                                             w
                                                             r
                                                             k
                                                             a)) (value x)) 
                              (value
                                y)) i) (mod (select (select (select k 
                              (value
                                x)) (value y)) i) 2)))))))
                    (forall ((x bitvec) (y bitvec))
                      (=>
                        (= (length x) w)
                        (=>
                          (= (length y) r)
                          (= (tb2t84
                               (infix_at
                                 angle1
                                 (infix_mngt int int)
                                 (infix_at
                                   (infix_mngt (infix_mngt int int) angle1)
                                   (infix_mngt int int)
                                   (t2tb118 (h_angle (build_pps w r k a)))
                                   (t2tb7 (value x)))
                                 (t2tb7 (value y)))) (tb2t84
                                                       (infix_at
                                                         angle1
                                                         (infix_mngt int int)
                                                         (infix_at
                                                           (infix_mngt
                                                             (infix_mngt
                                                               int
                                                               int)
                                                             angle1)
                                                           (infix_mngt
                                                             int
                                                             int)
                                                           (t2tb118 a)
                                                           (t2tb7 (value x)))
                                                         (t2tb7 (value y))))))))))))))))))

;; build_pps_bv
(declare-fun build_pps_bv (Int
  Int
  (Array bitvec (Array bitvec bitvec))
  (Array bitvec (Array bitvec angle))) pps)

;; result
(declare-fun result41 ((Array Int Int)) (Array Int Int))

;; result
(declare-fun result42 ((Array Int Int)) (Array Int Int))

;; result
(declare-fun result43 (Int
  Int
  (Array bitvec (Array bitvec bitvec))) (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))

;; result
(declare-fun result44 ((Array Int Int)) (Array Int Int))

;; result
(declare-fun result45 ((Array Int Int)) (Array Int Int))

;; result
(declare-fun result46 (Int
  Int
  (Array bitvec (Array bitvec angle))) (Array (Array Int Int) (Array (Array Int Int) angle)))

;; result'def
(assert
  (forall ((x (Array Int Int)) (i Int))
    (= (select (result41 x) i) (mod (select x i) 2))))

;; result'def
(assert
  (forall ((y (Array Int Int)) (i Int))
    (= (select (result42 y) i) (mod (select y i) 2))))

;; t2tb
(declare-fun t2tb119 ((Array bitvec (Array bitvec bitvec))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array bitvec (Array bitvec bitvec))))
    (sort (infix_mngt bitvec1 (infix_mngt bitvec1 bitvec1)) (t2tb119 x))))

;; tb2t
(declare-fun tb2t119 (uni) (Array bitvec (Array bitvec bitvec)))

;; BridgeL
(assert
  (forall ((i (Array bitvec (Array bitvec bitvec))))
    (! (= (tb2t119 (t2tb119 i)) i) :pattern ((t2tb119 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort (infix_mngt bitvec1 (infix_mngt bitvec1 bitvec1)) j)
         (= (t2tb119 (tb2t119 j)) j)) :pattern ((t2tb119 (tb2t119 j))) )))

;; result'def
(assert
  (forall ((w Int) (r Int) (k (Array bitvec (Array bitvec bitvec))) (x (Array Int Int)) (y (Array Int Int)))
    (= (select (select (result43 w r k) x) y) (value
                                                (tb2t77
                                                  (infix_at
                                                    bitvec1
                                                    bitvec1
                                                    (infix_at
                                                      (infix_mngt
                                                        bitvec1
                                                        bitvec1)
                                                      bitvec1
                                                      (t2tb119 k)
                                                      (t2tb77
                                                        (make_bv
                                                          (result41 x)
                                                          w)))
                                                    (t2tb77
                                                      (make_bv
                                                        (result42 y)
                                                        r))))))))

;; result'def
(assert
  (forall ((x (Array Int Int)) (i Int))
    (= (select (result44 x) i) (mod (select x i) 2))))

;; result'def
(assert
  (forall ((y (Array Int Int)) (i Int))
    (= (select (result45 y) i) (mod (select y i) 2))))

;; t2tb
(declare-fun t2tb120 ((Array bitvec angle)) uni)

;; t2tb_sort
(assert
  (forall ((x (Array bitvec angle)))
    (sort (infix_mngt bitvec1 angle1) (t2tb120 x))))

;; tb2t
(declare-fun tb2t120 (uni) (Array bitvec angle))

;; BridgeL
(assert
  (forall ((i (Array bitvec angle)))
    (! (= (tb2t120 (t2tb120 i)) i) :pattern ((t2tb120 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=> (sort (infix_mngt bitvec1 angle1) j) (= (t2tb120 (tb2t120 j)) j)) :pattern (
    (t2tb120
      (tb2t120 j))) )))

;; t2tb
(declare-fun t2tb121 ((Array bitvec (Array bitvec angle))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array bitvec (Array bitvec angle))))
    (sort (infix_mngt bitvec1 (infix_mngt bitvec1 angle1)) (t2tb121 x))))

;; tb2t
(declare-fun tb2t121 (uni) (Array bitvec (Array bitvec angle)))

;; BridgeL
(assert
  (forall ((i (Array bitvec (Array bitvec angle))))
    (! (= (tb2t121 (t2tb121 i)) i) :pattern ((t2tb121 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort (infix_mngt bitvec1 (infix_mngt bitvec1 angle1)) j)
         (= (t2tb121 (tb2t121 j)) j)) :pattern ((t2tb121 (tb2t121 j))) )))

;; result'def
(assert
  (forall ((w Int) (r Int) (a (Array bitvec (Array bitvec angle))) (x (Array Int Int)) (y (Array Int Int)))
    (= (tb2t84
         (infix_at
           angle1
           (infix_mngt int int)
           (infix_at
             (infix_mngt (infix_mngt int int) angle1)
             (infix_mngt int int)
             (t2tb118 (result46 w r a))
             (t2tb7 x))
           (t2tb7 y))) (tb2t84
                         (infix_at
                           angle1
                           bitvec1
                           (infix_at
                             (infix_mngt bitvec1 angle1)
                             bitvec1
                             (t2tb121 a)
                             (t2tb77 (make_bv (result44 x) w)))
                           (t2tb77 (make_bv (result45 y) r)))))))

;; build_pps_bv'def
(assert
  (forall ((w Int) (r Int) (k (Array bitvec (Array bitvec bitvec))) (a (Array bitvec (Array bitvec angle))))
    (=>
      (<= 0 w)
      (=>
        (<= 0 r)
        (=>
          (forall ((x bitvec) (y bitvec))
            (=>
              (= (length x) w)
              (=>
                (= (length y) r)
                (= (length
                     (tb2t77
                       (infix_at
                         bitvec1
                         bitvec1
                         (infix_at
                           (infix_mngt bitvec1 bitvec1)
                           bitvec1
                           (t2tb119 k)
                           (t2tb77 x))
                         (t2tb77 y)))) w))))
          (= (build_pps_bv w r k a) (build_pps
                                      w
                                      r
                                      (result43 w r k)
                                      (result46 w r a))))))))

;; build_pps_bv'spec
(assert
  (forall ((w Int) (r Int) (k (Array bitvec (Array bitvec bitvec))) (a (Array bitvec (Array bitvec angle))))
    (=>
      (<= 0 w)
      (=>
        (<= 0 r)
        (=>
          (forall ((x bitvec) (y bitvec))
            (=>
              (= (length x) w)
              (=>
                (= (length y) r)
                (= (length
                     (tb2t77
                       (infix_at
                         bitvec1
                         bitvec1
                         (infix_at
                           (infix_mngt bitvec1 bitvec1)
                           bitvec1
                           (t2tb119 k)
                           (t2tb77 x))
                         (t2tb77 y)))) w))))
          (and
            (= (h_width (build_pps_bv w r k a)) w)
            (and
              (= (h_range (build_pps_bv w r k a)) r)
              (and
                (forall ((x bitvec) (y bitvec))
                  (forall ((i Int))
                    (=>
                      (= (length x) w)
                      (=>
                        (= (length y) r)
                        (=>
                          (and (<= 0 i) (< i w))
                          (= (select (select (select (h_basis_ket
                                                       (build_pps_bv w r k a)) 
                          (value
                            x)) (value y)) i) (select (value
                                                        (tb2t77
                                                          (infix_at
                                                            bitvec1
                                                            bitvec1
                                                            (infix_at
                                                              (infix_mngt
                                                                bitvec1
                                                                bitvec1)
                                                              bitvec1
                                                              (t2tb119 k)
                                                              (t2tb77 x))
                                                            (t2tb77 y)))) i)))))))
                (forall ((x bitvec) (y bitvec))
                  (=>
                    (= (length x) w)
                    (=>
                      (= (length y) r)
                      (= (tb2t84
                           (infix_at
                             angle1
                             (infix_mngt int int)
                             (infix_at
                               (infix_mngt (infix_mngt int int) angle1)
                               (infix_mngt int int)
                               (t2tb118 (h_angle (build_pps_bv w r k a)))
                               (t2tb7 (value x)))
                             (t2tb7 (value y)))) (tb2t84
                                                   (infix_at
                                                     angle1
                                                     bitvec1
                                                     (infix_at
                                                       (infix_mngt
                                                         bitvec1
                                                         angle1)
                                                       bitvec1
                                                       (t2tb121 a)
                                                       (t2tb77 x))
                                                     (t2tb77 y)))))))))))))))

;; h_basis_ket_bv
(declare-fun h_basis_ket_bv (pps
  bitvec
  bitvec) bitvec)

;; h_basis_ket_bv'def
(assert
  (forall ((h pps) (x bitvec) (y bitvec))
    (=>
      (= (length x) (h_width h))
      (=>
        (= (length y) (h_range h))
        (= (h_basis_ket_bv h x y) (make_bv
                                    (select (select (h_basis_ket h) (value x)) 
                                    (value
                                      y))
                                    (h_width h)))))))

;; h_basis_ket_bv'spec
(assert
  (forall ((h pps) (x bitvec) (y bitvec))
    (=>
      (= (length x) (h_width h))
      (=>
        (= (length y) (h_range h))
        (and
          (= (length (h_basis_ket_bv h x y)) (h_width h))
          (forall ((i Int))
            (=>
              (and (<= 0 i) (< i (h_width h)))
              (= (select (value (h_basis_ket_bv h x y)) i) (select (select (select 
              (h_basis_ket
                h) (value x)) (value y)) i)))))))))

;; h_angle_bv
(declare-fun h_angle_bv (pps
  bitvec
  bitvec) angle)

;; h_angle_bv'def
(assert
  (forall ((h pps) (x bitvec) (y bitvec))
    (=>
      (= (length x) (h_width h))
      (=>
        (= (length y) (h_range h))
        (= (h_angle_bv h x y) (tb2t84
                                (infix_at
                                  angle1
                                  (infix_mngt int int)
                                  (infix_at
                                    (infix_mngt (infix_mngt int int) angle1)
                                    (infix_mngt int int)
                                    (t2tb118 (h_angle h))
                                    (t2tb7 (value x)))
                                  (t2tb7 (value y)))))))))

;; pps_ket_bound
(assert
  (forall ((h pps) (x (Array Int Int)) (y (Array Int Int)) (i Int))
    (=>
      (and (<= 0 i) (< i (h_width h)))
      (=>
        (forall ((i1 Int))
          (=>
            (and (<= 0 i1) (< i1 (h_width h)))
            (and (<= 0 (select x i1)) (< (select x i1) 2))))
        (=>
          (forall ((i1 Int))
            (=>
              (and (<= 0 i1) (< i1 (h_range h)))
              (and (<= 0 (select y i1)) (< (select y i1) 2))))
          (and
            (<= 0 (select (select (select (h_basis_ket h) x) y) i))
            (< (select (select (select (h_basis_ket h) x) y) i) 2)))))))

;; low_pps_ket_bound
(assert
  (forall ((h pps) (x (Array Int Int)) (y (Array Int Int)) (i Int))
    (=>
      (and (<= 0 i) (< i (h_width h)))
      (=>
        (forall ((i1 Int))
          (=>
            (and (<= 0 i1) (< i1 (h_width h)))
            (and (<= 0 (select x i1)) (< (select x i1) 2))))
        (=>
          (forall ((i1 Int))
            (=>
              (and (<= 0 i1) (< i1 (h_range h)))
              (and (<= 0 (select y i1)) (< (select y i1) 2))))
          (<= 0 (select (select (select (h_basis_ket h) x) y) i)))))))

;; high_pps_ket_bound
(assert
  (forall ((h pps) (x (Array Int Int)) (y (Array Int Int)) (i Int))
    (=>
      (and (<= 0 i) (< i (h_width h)))
      (=>
        (forall ((i1 Int))
          (=>
            (and (<= 0 i1) (< i1 (h_width h)))
            (and (<= 0 (select x i1)) (< (select x i1) 2))))
        (=>
          (forall ((i1 Int))
            (=>
              (and (<= 0 i1) (< i1 (h_range h)))
              (and (<= 0 (select y i1)) (< (select y i1) 2))))
          (< (select (select (select (h_basis_ket h) x) y) i) 2))))))

;; pps_apply_basis
(declare-fun pps_apply_basis (pps
  bitvec) (matrix complex))

;; result
(declare-fun result47 (pps
  bitvec) (Array bitvec (matrix complex)))

;; result'def
(assert
  (forall ((h pps) (x bitvec) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (result47 h x))
           (t2tb77 y))) (infix_asdtdt
                          (ang_exp
                            (tb2t84
                              (infix_at
                                angle1
                                (infix_mngt int int)
                                (infix_at
                                  (infix_mngt (infix_mngt int int) angle1)
                                  (infix_mngt int int)
                                  (t2tb118 (h_angle h))
                                  (t2tb7 (value x)))
                                (t2tb7 (value y)))))
                          (bv_to_ket
                            (make_bv
                              (select (select (h_basis_ket h) (value x)) 
                              (value
                                y))
                              (h_width h)))))))

;; pps_apply_basis'def
(assert
  (forall ((h pps) (x bitvec))
    (=>
      (= (length x) (h_width h))
      (= (pps_apply_basis h x) (infix_asdtdt
                                 (pow_inv_sqrt_2 (h_range h))
                                 (ket_sum_l
                                   bitvec1
                                   (t2tb79 (n_bvs (h_range h)))
                                   (t2tb80 (result47 h x))
                                   (h_width h)))))))

;; fc
(declare-fun fc397 (pps
  bitvec
  Int) (Array bitvec complex))

;; fc'def
(assert
  (forall ((h pps) (x bitvec) (i Int) (y bitvec))
    (= (tb2t (infix_at complex1 bitvec1 (t2tb82 (fc397 h x i)) (t2tb77 y))) 
    (infix_asdt
      (ang_exp
        (tb2t84
          (infix_at
            angle1
            (infix_mngt int int)
            (infix_at
              (infix_mngt (infix_mngt int int) angle1)
              (infix_mngt int int)
              (t2tb118 (h_angle h))
              (t2tb7 (value x)))
            (t2tb7 (value y)))))
      (indic
        int
        (t2tb8
          (bv_to_int
            (make_bv
              (select (select (h_basis_ket h) (value x)) (value y))
              (h_width h))))
        (t2tb8 i))))))

;; pps_apply_basis'spec
(assert
  (forall ((h pps) (x bitvec))
    (=>
      (= (length x) (h_width h))
      (and
        (is_a_ket_l (pps_apply_basis h x) (h_width h))
        (forall ((i Int))
          (=>
            (and (<= 0 i) (< i (power 2 (h_width h))))
            (= (tb2t (get complex1 (t2tb65 (pps_apply_basis h x)) i 0)) 
            (infix_asdt
              (pow_inv_sqrt_2 (h_range h))
              (sum
                bitvec1
                (t2tb79 (n_bvs (h_range h)))
                (t2tb82 (fc397 h x i)))))))))))

;; fc
(declare-fun fc398 (pps
  bitvec
  bitvec) (Array bitvec complex))

;; fc
(declare-fun fc399 (pps
  bitvec) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((h pps) (x bitvec) (z bitvec) (y bitvec))
    (= (tb2t (infix_at complex1 bitvec1 (t2tb82 (fc398 h x z)) (t2tb77 y))) 
    (infix_asdt
      (ang_exp
        (tb2t84
          (infix_at
            angle1
            (infix_mngt int int)
            (infix_at
              (infix_mngt (infix_mngt int int) angle1)
              (infix_mngt int int)
              (t2tb118 (h_angle h))
              (t2tb7 (value x)))
            (t2tb7 (value y)))))
      (indic bitvec1 (t2tb77 (h_basis_ket_bv h x y)) (t2tb77 z))))))

;; fc'def
(assert
  (forall ((h pps) (x bitvec) (z bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc399 h x))
           (t2tb77 z))) (infix_asdtdt
                          (infix_asdt
                            (pow_inv_sqrt_2 (h_range h))
                            (sum
                              bitvec1
                              (t2tb79 (n_bvs (h_range h)))
                              (t2tb82 (fc398 h x z))))
                          (ket (h_width h) (bv_to_int z))))))

;; pps_apply_basis_decomp
(assert
  (forall ((h pps) (x bitvec))
    (=>
      (= (length x) (h_width h))
      (= (pps_apply_basis h x) (ket_sum_l
                                 bitvec1
                                 (t2tb79 (n_bvs (h_width h)))
                                 (t2tb80 (fc399 h x))
                                 (h_width h))))))

;; pps_apply_basis_ket_l
(assert
  (forall ((h pps) (x bitvec) (l Int))
    (=>
      (= (length x) l)
      (=> (= l (h_width h)) (is_a_ket_l (pps_apply_basis h x) l)))))

;; pps_apply_basis_ket_length
(assert
  (forall ((h pps) (x bitvec) (l Int))
    (=>
      (= (length x) l)
      (=> (= l (h_width h)) (= (ket_length (pps_apply_basis h x)) l)))))

;; fc
(declare-fun fc400 (pps
  bitvec) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((h pps) (x bitvec) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc400 h x))
           (t2tb77 y))) (infix_asdtdt
                          (ang_exp (h_angle_bv h x y))
                          (bv_to_ket (h_basis_ket_bv h x y))))))

;; pps_apply_basis_bv
(assert
  (forall ((h pps) (x bitvec))
    (=>
      (= (length x) (h_width h))
      (= (pps_apply_basis h x) (infix_asdtdt
                                 (pow_inv_sqrt_2 (h_range h))
                                 (ket_sum_l
                                   bitvec1
                                   (t2tb79 (n_bvs (h_range h)))
                                   (t2tb80 (fc400 h x))
                                   (h_width h)))))))

;; fc
(declare-fun fc401 (pps
  bitvec
  Int) (Array bitvec complex))

;; fc'def
(assert
  (forall ((h pps) (x bitvec) (i Int) (y bitvec))
    (= (tb2t (infix_at complex1 bitvec1 (t2tb82 (fc401 h x i)) (t2tb77 y))) 
    (infix_asdt
      (ang_exp (h_angle_bv h x y))
      (indic
        bitvec1
        (t2tb77 (h_basis_ket_bv h x y))
        (t2tb77 (int_to_bv i (h_width h))))))))

;; pps_apply_basis_value
(assert
  (forall ((h pps) (x bitvec))
    (=>
      (= (length x) (h_width h))
      (forall ((i Int))
        (=>
          (and (<= 0 i) (< i (power 2 (h_width h))))
          (= (tb2t (get complex1 (t2tb65 (pps_apply_basis h x)) i 0)) 
          (infix_asdt
            (pow_inv_sqrt_2 (h_range h))
            (sum bitvec1 (t2tb79 (n_bvs (h_range h))) (t2tb82 (fc401 h x i))))))))))

;; fc
(declare-fun fc402 (pps
  bitvec
  Int) (Array bitvec Bool))

;; fc
(declare-fun fc403 (pps
  bitvec) (Array bitvec complex))

;; t2tb
(declare-fun t2tb122 ((Array bitvec Bool)) uni)

;; t2tb_sort
(assert
  (forall ((x (Array bitvec Bool)))
    (sort (infix_mngt bitvec1 bool) (t2tb122 x))))

;; tb2t
(declare-fun tb2t122 (uni) (Array bitvec Bool))

;; BridgeL
(assert
  (forall ((i (Array bitvec Bool)))
    (! (= (tb2t122 (t2tb122 i)) i) :pattern ((t2tb122 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=> (sort (infix_mngt bitvec1 bool) j) (= (t2tb122 (tb2t122 j)) j)) :pattern (
    (t2tb122
      (tb2t122 j))) )))

;; fc'def
(assert
  (forall ((h pps) (x bitvec) (k Int) (y bitvec))
    (=
      (= (tb2t10 (infix_at bool bitvec1 (t2tb122 (fc402 h x k)) (t2tb77 y))) true)
      (= (h_basis_ket_bv h x y) (int_to_bv k (h_width h))))))

;; fc'def
(assert
  (forall ((h pps) (x bitvec) (y bitvec))
    (= (tb2t (infix_at complex1 bitvec1 (t2tb82 (fc403 h x)) (t2tb77 y))) 
    (ang_exp
      (tb2t84
        (infix_at
          angle1
          (infix_mngt int int)
          (infix_at
            (infix_mngt (infix_mngt int int) angle1)
            (infix_mngt int int)
            (t2tb118 (h_angle h))
            (t2tb7 (value x)))
          (t2tb7 (value y))))))))

;; pps_apply_basis_value_filter
(assert
  (forall ((h pps) (x bitvec) (k Int))
    (=>
      (= (length x) (h_width h))
      (=>
        (and (<= 0 k) (< k (power 2 (h_width h))))
        (= (tb2t (get complex1 (t2tb65 (pps_apply_basis h x)) k 0)) (infix_asdt
                                                                    (pow_inv_sqrt_2
                                                                    (h_range
                                                                    h))
                                                                    (sum
                                                                    bitvec1
                                                                    (my_filter
                                                                    bitvec1
                                                                    (t2tb79
                                                                    (n_bvs
                                                                    (h_range
                                                                    h)))
                                                                    (t2tb122
                                                                    (fc402
                                                                    h
                                                                    x
                                                                    k)))
                                                                    (t2tb82
                                                                    (fc403
                                                                    h
                                                                    x)))))))))

;; fc
(declare-fun fc404 (pps
  bitvec
  Int) (Array bitvec Bool))

;; fc
(declare-fun fc405 (pps
  bitvec) (Array bitvec complex))

;; fc'def
(assert
  (forall ((h pps) (x bitvec) (k Int) (y bitvec))
    (=
      (= (tb2t10 (infix_at bool bitvec1 (t2tb122 (fc404 h x k)) (t2tb77 y))) true)
      (= (h_basis_ket_bv h x y) (int_to_bv k (h_width h))))))

;; fc'def
(assert
  (forall ((h pps) (x bitvec) (y bitvec))
    (= (tb2t (infix_at complex1 bitvec1 (t2tb82 (fc405 h x)) (t2tb77 y))) 
    (ang_exp
      (tb2t84
        (infix_at
          angle1
          (infix_mngt int int)
          (infix_at
            (infix_mngt (infix_mngt int int) angle1)
            (infix_mngt int int)
            (t2tb118 (h_angle h))
            (t2tb7 (value x)))
          (t2tb7 (value y))))))))

;; pps_apply_basis_value_filter_gen
(assert
  (forall ((h pps) (x bitvec))
    (=>
      (= (length x) (h_width h))
      (forall ((k Int))
        (=>
          (and (<= 0 k) (< k (power 2 (h_width h))))
          (= (tb2t (get complex1 (t2tb65 (pps_apply_basis h x)) k 0)) 
          (infix_asdt
            (pow_inv_sqrt_2 (h_range h))
            (sum
              bitvec1
              (my_filter
                bitvec1
                (t2tb79 (n_bvs (h_range h)))
                (t2tb122 (fc404 h x k)))
              (t2tb82 (fc405 h x))))))))))

;; fc
(declare-fun fc406 (pps
  bitvec
  bitvec) (Array bitvec (matrix complex)))

;; fc
(declare-fun fc407 (pps
  bitvec
  Int) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((h pps) (x bitvec) (z bitvec) (t bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc406 h x z))
           (t2tb77 t))) (infix_asdtdt
                          (tb2t
                            (get
                              complex1
                              (t2tb65 (pps_apply_basis h x))
                              (bv_to_int (concat1 z t))
                              0))
                          (bv_to_ket (concat1 z t))))))

;; fc'def
(assert
  (forall ((h pps) (x bitvec) (s Int) (z bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc407 h x s))
           (t2tb77 z))) (ket_sum_l
                          bitvec1
                          (t2tb79 (n_bvs (- (h_width h) s)))
                          (t2tb80 (fc406 h x z))
                          (h_width h)))))

;; pps_apply_basis_ht
(assert
  (forall ((h pps) (x bitvec) (s Int))
    (=>
      (= (length x) (h_width h))
      (=>
        (and (<= 1 s) (<= s (h_width h)))
        (= (pps_apply_basis h x) (ket_sum_l
                                   bitvec1
                                   (t2tb79 (n_bvs s))
                                   (t2tb80 (fc407 h x s))
                                   (h_width h)))))))

;; pps_apply
(declare-fun pps_apply (pps
  (matrix complex)) (matrix complex))

;; result
(declare-fun result48 (pps
  (matrix complex)) (Array bitvec (matrix complex)))

;; result'def
(assert
  (forall ((h pps) (x (matrix complex)) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (result48 h x))
           (t2tb77 y))) (ite (= (length y) (h_width h))
                          (infix_asdtdt
                            (tb2t (get complex1 (t2tb65 x) (bv_to_int y) 0))
                            (pps_apply_basis h y))
                          x))))

;; pps_apply'def
(assert
  (forall ((h pps) (x (matrix complex)))
    (=>
      (is_a_ket_l x (h_width h))
      (= (pps_apply h x) (ket_sum_l
                           bitvec1
                           (t2tb79 (n_bvs (h_width h)))
                           (t2tb80 (result48 h x))
                           (h_width h))))))

;; pps_apply'spec
(assert
  (forall ((h pps) (x (matrix complex)))
    (=> (is_a_ket_l x (h_width h)) (is_a_ket_l (pps_apply h x) (h_width h)))))

;; fc
(declare-fun fc408 (pps
  (matrix complex)) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((h pps) (x (matrix complex)) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc408 h x))
           (t2tb77 y))) (infix_asdtdt
                          (tb2t (get complex1 (t2tb65 x) (bv_to_int y) 0))
                          (pps_apply_basis h y)))))

;; get_pps_apply
(assert
  (forall ((h pps) (x (matrix complex)))
    (=>
      (is_a_ket_l x (h_width h))
      (= (pps_apply h x) (ket_sum_l
                           bitvec1
                           (t2tb79 (n_bvs (h_width h)))
                           (t2tb80 (fc408 h x))
                           (h_width h))))))

;; rewrite_pps_apply_basis
(assert
  (forall ((h pps) (x (matrix complex)))
    (=>
      (is_a_ket_l x (h_width h))
      (=>
        (is_a_ket_basis_elt x)
        (= (pps_apply h x) (pps_apply_basis h (ket_to_bv x)))))))

;; fc
(declare-fun fc409 (pps
  (matrix complex)) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((h pps) (x (matrix complex)) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc409 h x))
           (t2tb77 y))) (infix_asdtdt
                          (ang_exp
                            (tb2t84
                              (infix_at
                                angle1
                                (infix_mngt int int)
                                (infix_at
                                  (infix_mngt (infix_mngt int int) angle1)
                                  (infix_mngt int int)
                                  (t2tb118 (h_angle h))
                                  (t2tb7 (value (ket_to_bv x))))
                                (t2tb7 (value y)))))
                          (bv_to_ket
                            (make_bv
                              (select (select (h_basis_ket h) (value
                                                                (ket_to_bv x))) 
                              (value
                                y))
                              (h_width h)))))))

;; rewrite_pps_apply_basis_
(assert
  (forall ((h pps) (x (matrix complex)))
    (=>
      (is_a_ket_l x (h_width h))
      (=>
        (is_a_ket_basis_elt x)
        (= (pps_apply h x) (infix_asdtdt
                             (pow_inv_sqrt_2 (h_range h))
                             (ket_sum_l
                               bitvec1
                               (t2tb79 (n_bvs (h_range h)))
                               (t2tb80 (fc409 h x))
                               (h_width h))))))))

;; rewrite_pps_apply_basis_rev
(assert
  (forall ((h pps) (x bitvec))
    (=>
      (= (length x) (h_width h))
      (= (pps_apply_basis h x) (pps_apply h (bv_to_ket x))))))

;; fc
(declare-fun fc410 (pps
  (matrix complex)) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((h pps) (x (matrix complex)) (z bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc410 h x))
           (t2tb77 z))) (infix_asdtdt
                          (tb2t (get complex1 (t2tb65 x) (bv_to_int z) 0))
                          (pps_apply h (bv_to_ket z))))))

;; pps_apply_decomp
(assert
  (forall ((h pps) (x (matrix complex)))
    (=>
      (is_a_ket_l x (h_width h))
      (= (pps_apply h x) (ket_sum_l
                           bitvec1
                           (t2tb79 (n_bvs (h_width h)))
                           (t2tb80 (fc410 h x))
                           (h_width h))))))

;; pps_apply_scal
(assert
  (forall ((h pps) (x (matrix complex)) (a complex))
    (=>
      (is_a_ket_l x (h_width h))
      (= (pps_apply h (infix_asdtdt a x)) (infix_asdtdt a (pps_apply h x))))))

;; pps_apply_add
(assert
  (forall ((h pps) (x (matrix complex)) (y (matrix complex)) (l Int))
    (=>
      (is_a_ket_l x (h_width h))
      (=>
        (is_a_ket_l y (h_width h))
        (=>
          (= l (h_width h))
          (= (pps_apply h (add_ket_l x y l)) (add_ket_l
                                               (pps_apply h x)
                                               (pps_apply h y)
                                               l)))))))

;; fc
(declare-fun fc411 (ty
  pps
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x pps) (x1 uni))
      (sort (infix_mngt a (matrix1 complex1)) (fc411 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((h pps) (f uni) (e uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc411 a h f) e)) (pps_apply
                                                                    h
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    e)))))))

;; pps_apply_sum
(assert
  (forall ((a ty))
    (forall ((h pps) (s uni) (f uni) (l Int))
      (=>
        (<= 1 (cardinal a s))
        (=>
          (forall ((e uni))
            (=>
              (sort a e)
              (=>
                (mem a e s)
                (is_a_ket_l
                  (tb2t65 (infix_at (matrix1 complex1) a f e))
                  (h_width h)))))
          (=>
            (= l (h_width h))
            (= (pps_apply h (ket_sum_l a s f l)) (ket_sum_l
                                                   a
                                                   s
                                                   (fc411 a h f)
                                                   l))))))))

;; pps_id
(declare-fun pps_id () pps)

;; pps_id'def
(assert
  (and
    (= (h_width pps_id) 1)
    (and
      (= (h_range pps_id) 0)
      (and
        (forall ((x (Array Int Int)) (y (Array Int Int)))
          (forall ((i Int))
            (= (select (select (select (h_basis_ket pps_id) x) y) i) (select x i))))
        (forall ((x (Array Int Int)) (y (Array Int Int)))
          (= (tb2t84
               (infix_at
                 angle1
                 (infix_mngt int int)
                 (infix_at
                   (infix_mngt (infix_mngt int int) angle1)
                   (infix_mngt int int)
                   (t2tb118 (h_angle pps_id))
                   (t2tb7 x))
                 (t2tb7 y))) ang_zero))))))

;; pps_swap
(declare-fun pps_swap (Int
  Int
  Int) pps)

;; pps_swap'def
(assert
  (forall ((t1 Int) (t2 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 t2) (< t2 n))
        (=>
          (not (= t1 t2))
          (and
            (= (h_width (pps_swap t1 t2 n)) n)
            (and
              (= (h_range (pps_swap t1 t2 n)) 0)
              (and
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (forall ((i Int))
                    (= (select (select (select (h_basis_ket
                                                 (pps_swap t1 t2 n)) x) y) i) (select x (select 
                    (swap_int
                      t1
                      t2
                      n) i)))))
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (= (tb2t84
                       (infix_at
                         angle1
                         (infix_mngt int int)
                         (infix_at
                           (infix_mngt (infix_mngt int int) angle1)
                           (infix_mngt int int)
                           (t2tb118 (h_angle (pps_swap t1 t2 n)))
                           (t2tb7 x))
                         (t2tb7 y))) ang_zero))))))))))

;; pps_phase
(declare-fun pps_phase (Int) pps)

;; pps_phase'spec
(assert
  (forall ((k Int))
    (and
      (= (h_width (pps_phase k)) 1)
      (and
        (= (h_range (pps_phase k)) 0)
        (and
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (forall ((i Int))
              (= (select (select (select (h_basis_ket (pps_phase k)) x) y) i) (select x i))))
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (= (tb2t84
                 (infix_at
                   angle1
                   (infix_mngt int int)
                   (infix_at
                     (infix_mngt (infix_mngt int int) angle1)
                     (infix_mngt int int)
                     (t2tb118 (h_angle (pps_phase k)))
                     (t2tb7 x))
                   (t2tb7 y))) (infix_sldtsl 1 k))))))))

;; pps_rz
(declare-fun pps_rz (Int) pps)

;; pps_rz'spec
(assert
  (forall ((k Int))
    (and
      (= (h_width (pps_rz k)) 1)
      (and
        (= (h_range (pps_rz k)) 0)
        (and
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (forall ((i Int))
              (= (select (select (select (h_basis_ket (pps_rz k)) x) y) i) (select x i))))
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (= (tb2t84
                 (infix_at
                   angle1
                   (infix_mngt int int)
                   (infix_at
                     (infix_mngt (infix_mngt int int) angle1)
                     (infix_mngt int int)
                     (t2tb118 (h_angle (pps_rz k)))
                     (t2tb7 x))
                   (t2tb7 y))) (infix_sldtsl (select x 0) k))))))))

;; incr_abs
(declare-fun incr_abs (Int) Int)

;; incr_abs'def
(assert
  (forall ((k Int))
    (ite (<= 0 k) (= (incr_abs k) (+ k 1)) (= (incr_abs k) (- k 1)))))

;; incr_abs'spec
(assert
  (forall ((k Int))
    (and
      (=> (<= 0 k) (= (incr_abs k) (+ k 1)))
      (=> (< k 0) (= (incr_abs k) (- k 1))))))

;; decr_abs
(declare-fun decr_abs (Int) Int)

;; decr_abs'def
(assert
  (forall ((k Int))
    (ite (<= k 0) (= (decr_abs k) (+ k 1)) (= (decr_abs k) (- k 1)))))

;; decr_abs'spec
(assert
  (forall ((k Int))
    (and
      (=> (< 0 k) (= (decr_abs k) (- k 1)))
      (and
        (=> (<= k 0) (= (decr_abs k) (+ k 1)))
        (=>
          (not (= k 0))
          (=> (not (= k (- 1))) (= (incr_abs (decr_abs k)) k)))))))

;; decr_inc
(assert (forall ((k Int)) (= (decr_abs (incr_abs k)) k)))

;; pps_rx
(declare-fun pps_rx (Int) pps)

;; pps_rx'spec
(assert
  (forall ((k Int))
    (and
      (= (h_width (pps_rx k)) 1)
      (and
        (= (h_range (pps_rx k)) 2)
        (and
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (forall ((i Int))
              (= (select (select (select (h_basis_ket (pps_rx k)) x) y) i) (select y 1))))
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (= (tb2t84
                 (infix_at
                   angle1
                   (infix_mngt int int)
                   (infix_at
                     (infix_mngt (infix_mngt int int) angle1)
                     (infix_mngt int int)
                     (t2tb118 (h_angle (pps_rx k)))
                     (t2tb7 x))
                   (t2tb7 y))) (ang_add
                                 (ang_add
                                   (infix_sldtsl
                                     (* (select x 0) (select y 0))
                                     1)
                                   (infix_sldtsl
                                     (* (select y 0) (select y 1))
                                     1))
                                 (phase_inv_
                                   (- (select y 0) 1)
                                   (infix_sldtsl 1 (incr_abs k)))))))))))

;; pps_xx
(declare-fun pps_xx () pps)

;; pps_xx'def
(assert
  (and
    (= (h_width pps_xx) 1)
    (and
      (= (h_range pps_xx) 0)
      (and
        (forall ((x (Array Int Int)) (y (Array Int Int)))
          (forall ((i Int))
            (= (select (select (select (h_basis_ket pps_xx) x) y) i) (- 1 (select x i)))))
        (forall ((x (Array Int Int)) (y (Array Int Int)))
          (= (tb2t84
               (infix_at
                 angle1
                 (infix_mngt int int)
                 (infix_at
                   (infix_mngt (infix_mngt int int) angle1)
                   (infix_mngt int int)
                   (t2tb118 (h_angle pps_xx))
                   (t2tb7 x))
                 (t2tb7 y))) (infix_sldtsl 1 0)))))))

;; pps_yy
(declare-fun pps_yy () pps)

;; pps_yy'def
(assert
  (and
    (= (h_width pps_yy) 1)
    (and
      (= (h_range pps_yy) 0)
      (and
        (forall ((x (Array Int Int)) (y (Array Int Int)))
          (forall ((i Int))
            (= (select (select (select (h_basis_ket pps_yy) x) y) i) (- 1 (select x i)))))
        (forall ((x (Array Int Int)) (y (Array Int Int)))
          (= (tb2t84
               (infix_at
                 angle1
                 (infix_mngt int int)
                 (infix_at
                   (infix_mngt (infix_mngt int int) angle1)
                   (infix_mngt int int)
                   (t2tb118 (h_angle pps_yy))
                   (t2tb7 x))
                 (t2tb7 y))) (phase_inv_ (select x 0) (infix_sldtsl 1 2))))))))

;; pps_zz
(declare-fun pps_zz () pps)

;; pps_zz'def
(assert
  (and
    (= (h_width pps_zz) 1)
    (and
      (= (h_range pps_zz) 0)
      (and
        (forall ((x (Array Int Int)) (y (Array Int Int)))
          (forall ((i Int))
            (= (select (select (select (h_basis_ket pps_zz) x) y) i) (select x i))))
        (forall ((x (Array Int Int)) (y (Array Int Int)))
          (= (tb2t84
               (infix_at
                 angle1
                 (infix_mngt int int)
                 (infix_at
                   (infix_mngt (infix_mngt int int) angle1)
                   (infix_mngt int int)
                   (t2tb118 (h_angle pps_zz))
                   (t2tb7 x))
                 (t2tb7 y))) (infix_sldtsl (select x 0) 1)))))))

;; pps_ry
(declare-fun pps_ry (Int) pps)

;; pps_ry'spec
(assert
  (forall ((k Int))
    (and
      (= (h_width (pps_ry k)) 1)
      (and
        (= (h_range (pps_ry k)) 2)
        (and
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (forall ((i Int))
              (= (select (select (select (h_basis_ket (pps_ry k)) x) y) i) (select y 1))))
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (= (tb2t84
                 (infix_at
                   angle1
                   (infix_mngt int int)
                   (infix_at
                     (infix_mngt (infix_mngt int int) angle1)
                     (infix_mngt int int)
                     (t2tb118 (h_angle (pps_ry k)))
                     (t2tb7 x))
                   (t2tb7 y))) (ang_add
                                 (ang_add
                                   (ang_add
                                     (infix_sldtsl
                                       (* (select x 0) (select y 0))
                                       1)
                                     (infix_sldtsl
                                       (* (select y 0) (select y 1))
                                       1))
                                   (phase_inv_
                                     (- (select y 0) 1)
                                     (infix_sldtsl 1 (incr_abs k))))
                                 (infix_sldtsl
                                   (- (select y 1) (select x 0))
                                   2)))))))))

;; pps_rz_b
(declare-fun pps_rz_b (Int) pps)

;; pps_rz_b'spec
(assert
  (forall ((k Int))
    (and
      (= (h_width (pps_rz_b k)) 1)
      (and
        (= (h_range (pps_rz_b k)) 0)
        (and
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (forall ((i Int))
              (= (select (select (select (h_basis_ket (pps_rz_b k)) x) y) i) (select x i))))
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (= (tb2t84
                 (infix_at
                   angle1
                   (infix_mngt int int)
                   (infix_at
                     (infix_mngt (infix_mngt int int) angle1)
                     (infix_mngt int int)
                     (t2tb118 (h_angle (pps_rz_b k)))
                     (t2tb7 x))
                   (t2tb7 y))) (phase_inv_
                                 (- (select x 0) 1)
                                 (infix_sldtsl 1 (incr_abs k))))))))))

;; pps_hadamard
(declare-fun pps_hadamard () pps)

;; pps_hadamard'def
(assert
  (and
    (= (h_width pps_hadamard) 1)
    (and
      (= (h_range pps_hadamard) 1)
      (and
        (forall ((x (Array Int Int)) (y (Array Int Int)))
          (forall ((i Int))
            (= (select (select (select (h_basis_ket pps_hadamard) x) y) i) (select y i))))
        (forall ((x (Array Int Int)) (y (Array Int Int)))
          (= (tb2t84
               (infix_at
                 angle1
                 (infix_mngt int int)
                 (infix_at
                   (infix_mngt (infix_mngt int int) angle1)
                   (infix_mngt int int)
                   (t2tb118 (h_angle pps_hadamard))
                   (t2tb7 x))
                 (t2tb7 y))) (infix_sldtsl (* (select x 0) (select y 0)) 1)))))))

;; pps_cnot
(declare-fun pps_cnot (Int
  Int
  Int) pps)

;; pps_cnot'def
(assert
  (forall ((c Int) (t Int) (n Int))
    (=>
      (and (<= 0 c) (< c n))
      (=>
        (and (<= 0 t) (< t n))
        (=>
          (not (= t c))
          (and
            (= (h_width (pps_cnot c t n)) n)
            (and
              (= (h_range (pps_cnot c t n)) 0)
              (and
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (forall ((i Int))
                    (=>
                      (not (= i t))
                      (= (select (select (select (h_basis_ket
                                                   (pps_cnot c t n)) x) y) i) (select x i)))))
                (and
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (forall ((i Int))
                      (=>
                        (= i t)
                        (= (select (select (select (h_basis_ket
                                                     (pps_cnot c t n)) x) y) i) (+ (* (select x c) (- 1 (select x t))) (* (- 1 (select x c)) (select x t)))))))
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (= (tb2t84
                         (infix_at
                           angle1
                           (infix_mngt int int)
                           (infix_at
                             (infix_mngt (infix_mngt int int) angle1)
                             (infix_mngt int int)
                             (t2tb118 (h_angle (pps_cnot c t n)))
                             (t2tb7 x))
                           (t2tb7 y))) (infix_sldtsl 1 0))))))))))))

;; pps_toffoli
(declare-fun pps_toffoli (Int
  Int
  Int
  Int) pps)

;; pps_toffoli'def
(assert
  (forall ((c1 Int) (c2 Int) (t Int) (n Int))
    (=>
      (and (<= 0 c1) (< c1 n))
      (=>
        (and (<= 0 c2) (< c2 n))
        (=>
          (and (<= 0 t) (< t n))
          (=>
            (not (= t c1))
            (=>
              (not (= t c2))
              (=>
                (not (= c2 c1))
                (and
                  (= (h_width (pps_toffoli c1 c2 t n)) n)
                  (and
                    (= (h_range (pps_toffoli c1 c2 t n)) 0)
                    (and
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (forall ((i Int))
                          (=>
                            (not (= i t))
                            (= (select (select (select (h_basis_ket
                                                         (pps_toffoli
                                                           c1
                                                           c2
                                                           t
                                                           n)) x) y) i) (select x i)))))
                      (and
                        (forall ((x (Array Int Int)) (y (Array Int Int)))
                          (forall ((i Int))
                            (=>
                              (= i t)
                              (= (select (select (select (h_basis_ket
                                                           (pps_toffoli
                                                             c1
                                                             c2
                                                             t
                                                             n)) x) y) i) (+ (* (* (select x c1) (select x c2)) (- 1 (select x i))) (* (select x t) (- 1 (* (select x c1) (select x c2)))))))))
                        (forall ((x (Array Int Int)) (y (Array Int Int)))
                          (= (tb2t84
                               (infix_at
                                 angle1
                                 (infix_mngt int int)
                                 (infix_at
                                   (infix_mngt (infix_mngt int int) angle1)
                                   (infix_mngt int int)
                                   (t2tb118
                                     (h_angle (pps_toffoli c1 c2 t n)))
                                   (t2tb7 x))
                                 (t2tb7 y))) (infix_sldtsl 1 0)))))))))))))))

;; pps_fredkin
(declare-fun pps_fredkin (Int
  Int
  Int
  Int) pps)

;; pps_fredkin'def
(assert
  (forall ((c Int) (t1 Int) (t2 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 t2) (< t2 n))
        (=>
          (and (<= 0 c) (< c n))
          (=>
            (not (= c t1))
            (=>
              (not (= c t2))
              (=>
                (not (= t2 t1))
                (and
                  (= (h_width (pps_fredkin c t1 t2 n)) n)
                  (and
                    (= (h_range (pps_fredkin c t1 t2 n)) 0)
                    (and
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (forall ((i Int))
                          (=>
                            (= i t1)
                            (= (select (select (select (h_basis_ket
                                                         (pps_fredkin
                                                           c
                                                           t1
                                                           t2
                                                           n)) x) y) i) (+ (* (select x c) (select x t2)) (* (- 1 (select x c)) (select x t1)))))))
                      (and
                        (forall ((x (Array Int Int)) (y (Array Int Int)))
                          (forall ((i Int))
                            (=>
                              (= i t2)
                              (= (select (select (select (h_basis_ket
                                                           (pps_fredkin
                                                             c
                                                             t1
                                                             t2
                                                             n)) x) y) i) (+ (* (select x c) (select x t1)) (* (- 1 (select x c)) (select x t2)))))))
                        (and
                          (forall ((x (Array Int Int)) (y (Array Int Int)))
                            (forall ((i Int))
                              (=>
                                (not (= i t1))
                                (=>
                                  (not (= i t2))
                                  (= (select (select (select (h_basis_ket
                                                               (pps_fredkin
                                                                 c
                                                                 t1
                                                                 t2
                                                                 n)) x) y) i) (select x i))))))
                          (forall ((x (Array Int Int)) (y (Array Int Int)))
                            (= (tb2t84
                                 (infix_at
                                   angle1
                                   (infix_mngt int int)
                                   (infix_at
                                     (infix_mngt (infix_mngt int int) angle1)
                                     (infix_mngt int int)
                                     (t2tb118
                                       (h_angle (pps_fredkin c t1 t2 n)))
                                     (t2tb7 x))
                                   (t2tb7 y))) (infix_sldtsl 1 0))))))))))))))))

;; pps_id_apply_basis
(assert
  (forall ((x bitvec))
    (=> (= (length x) 1) (= (pps_apply_basis pps_id x) (bv_to_ket x)))))

;; pps_swap_apply_basis
(assert
  (forall ((x bitvec))
    (=>
      (= (length x) 2)
      (= (pps_apply_basis (pps_swap 0 1 2) x) (ket
                                                2
                                                (ite (= (bv_to_int x) 0)
                                                  0
                                                  (ite (= (bv_to_int x) 1)
                                                    2
                                                    (ite (= (bv_to_int x) 2)
                                                      1
                                                      3))))))))

;; pps_cnot_apply_basis
(assert
  (forall ((x bitvec))
    (=>
      (= (length x) 2)
      (= (pps_apply_basis (pps_cnot 0 1 2) x) (ket
                                                2
                                                (ite (= (bv_to_int x) 0)
                                                  0
                                                  (ite (= (bv_to_int x) 1)
                                                    1
                                                    (ite (= (bv_to_int x) 2)
                                                      3
                                                      2))))))))

;; pps_phase_apply_basis
(assert
  (forall ((k Int) (x bitvec))
    (=>
      (= (length x) 1)
      (= (pps_apply_basis (pps_phase k) x) (infix_asdtdt
                                             (ang_exp (infix_sldtsl 1 k))
                                             (bv_to_ket x))))))

;; pps_rz_apply_basis
(assert
  (forall ((k Int) (x bitvec))
    (=>
      (= (length x) 1)
      (= (pps_apply_basis (pps_rz k) x) (infix_asdtdt
                                          (ang_exp
                                            (infix_sldtsl
                                              (select (value x) 0)
                                              k))
                                          (bv_to_ket x))))))

;; pps_hadamard_apply_basis
(assert
  (forall ((x bitvec))
    (=>
      (= (length x) 1)
      (= (pps_apply_basis pps_hadamard x) (infix_asdtdt
                                            (pow_inv_sqrt_2 1)
                                            (add_ket_l
                                              (ket 1 0)
                                              (infix_asdtdt
                                                (ang_exp
                                                  (infix_sldtsl
                                                    (select (value x) 0)
                                                    1))
                                                (ket 1 1))
                                              1))))))

;; pps_seq
(declare-fun pps_seq (pps
  pps) pps)

;; fc
(declare-fun fc412 (pps
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc413 (pps
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((h1 pps) (y (Array Int Int)) (k Int))
    (= (select (fc412 h1 y) k) (select y (+ k (h_range h1))))))

;; fc'def
(assert
  (forall ((h1 pps) (y (Array Int Int)) (k Int))
    (= (select (fc413 h1 y) k) (select y (+ k (h_range h1))))))

;; pps_seq'spec
(assert
  (forall ((h1 pps) (h2 pps))
    (=>
      (= (h_width h1) (h_width h2))
      (and
        (= (h_width (pps_seq h1 h2)) (h_width h1))
        (and
          (= (h_range (pps_seq h1 h2)) (+ (h_range h1) (h_range h2)))
          (and
            (forall ((x (Array Int Int)) (y (Array Int Int)))
              (forall ((i Int))
                (= (select (select (select (h_basis_ket (pps_seq h1 h2)) x) y) i) (select (select (select 
                (h_basis_ket
                  h2) (select (select (h_basis_ket h1) x) y)) (fc412 h1 y)) i))))
            (forall ((x (Array Int Int)) (y (Array Int Int)))
              (= (tb2t84
                   (infix_at
                     angle1
                     (infix_mngt int int)
                     (infix_at
                       (infix_mngt (infix_mngt int int) angle1)
                       (infix_mngt int int)
                       (t2tb118 (h_angle (pps_seq h1 h2)))
                       (t2tb7 x))
                     (t2tb7 y))) (ang_add
                                   (tb2t84
                                     (infix_at
                                       angle1
                                       (infix_mngt int int)
                                       (infix_at
                                         (infix_mngt
                                           (infix_mngt int int)
                                           angle1)
                                         (infix_mngt int int)
                                         (t2tb118 (h_angle h1))
                                         (t2tb7 x))
                                       (t2tb7 y)))
                                   (tb2t84
                                     (infix_at
                                       angle1
                                       (infix_mngt int int)
                                       (infix_at
                                         (infix_mngt
                                           (infix_mngt int int)
                                           angle1)
                                         (infix_mngt int int)
                                         (t2tb118 (h_angle h2))
                                         (t2tb7
                                           (select (select (h_basis_ket h1) x) y)))
                                       (t2tb7 (fc413 h1 y)))))))))))))

;; pps_place
(declare-fun pps_place (pps
  Int
  Int) pps)

;; fc
(declare-fun fc414 (Int
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc415 (Int
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((t Int) (x (Array Int Int)) (j Int))
    (= (select (fc414 t x) j) (select x (+ j t)))))

;; fc'def
(assert
  (forall ((t Int) (x (Array Int Int)) (j Int))
    (= (select (fc415 t x) j) (select x (+ j t)))))

;; pps_place'spec
(assert
  (forall ((h pps) (t Int) (n Int))
    (=>
      (<= 0 t)
      (=>
        (<= (+ t (h_width h)) n)
        (and
          (= (h_width (pps_place h t n)) n)
          (and
            (= (h_range (pps_place h t n)) (h_range h))
            (and
              (forall ((x (Array Int Int)) (y (Array Int Int)))
                (forall ((i Int))
                  (= (select (select (select (h_basis_ket (pps_place h t n)) x) y) i) 
                  (ite (and (<= t i) (< i (+ t (h_width h))))
                    (select (select (select (h_basis_ket h) (fc414 t x)) y) (- i t))
                    (select x i)))))
              (forall ((x (Array Int Int)) (y (Array Int Int)))
                (= (tb2t84
                     (infix_at
                       angle1
                       (infix_mngt int int)
                       (infix_at
                         (infix_mngt (infix_mngt int int) angle1)
                         (infix_mngt int int)
                         (t2tb118 (h_angle (pps_place h t n)))
                         (t2tb7 x))
                       (t2tb7 y))) (tb2t84
                                     (infix_at
                                       angle1
                                       (infix_mngt int int)
                                       (infix_at
                                         (infix_mngt
                                           (infix_mngt int int)
                                           angle1)
                                         (infix_mngt int int)
                                         (t2tb118 (h_angle h))
                                         (t2tb7 (fc415 t x)))
                                       (t2tb7 y))))))))))))

;; complex_as_a_vector
(declare-fun complex_as_a_vector (complex) (matrix complex))

;; result
(declare-fun result49 (complex) (Array Int (Array Int complex)))

;; result'def
(assert
  (forall ((x complex) (i Int) (us Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             int
             (t2tb61 (result49 x))
             (t2tb8 i))
           (t2tb8 us))) (ite (= i 0) (t_real_part x) (t_im_part x)))))

;; complex_as_a_vector'def
(assert
  (forall ((x complex))
    (= (complex_as_a_vector x) (tb2t65
                                 (make_f complex1 2 1 (t2tb61 (result49 x)))))))

;; complex_as_a_vector'spec
(assert
  (forall ((x complex))
    (and
      (is_a_ket_l (complex_as_a_vector x) 1)
      (= (ket_norm_l (complex_as_a_vector x) 1) (modulus x)))))

;; sin
(declare-fun sin1 (complex) complex)

;; sin'def
(assert
  (forall ((x complex))
    (=> (real_ x) (= (sin1 x) (t_im_part (exp1 (infix_asdt im x)))))))

;; sin'spec
(assert (forall ((x complex)) (=> (real_ x) (real_ (sin1 x)))))

;; cos
(declare-fun cos1 (complex) complex)

;; cos'def
(assert
  (forall ((x complex))
    (=> (real_ x) (= (cos1 x) (t_real_part (exp1 (infix_asdt im x)))))))

;; cos'spec
(assert (forall ((x complex)) (=> (real_ x) (real_ (cos1 x)))))

;; euler_real_r
(assert
  (forall ((x complex))
    (=> (real_ x) (= (cos1 x) (r_to_c (real_part (exp1 (infix_asdt im x))))))))

;; euler_im_r
(assert
  (forall ((x complex))
    (=> (real_ x) (= (sin1 x) (r_to_c (im_part (exp1 (infix_asdt im x))))))))

;; cos_zero
(assert (= (cos1 c_zero) c_one))

;; cos_half_pi
(assert (= (cos1 (infix_sldt pi1 (infix_pldt c_one c_one))) c_zero))

;; cos_quarter_pi
(assert
  (= (cos1 (infix_sldt pi1 (i_to_c 4))) (infix_sldt
                                          (square_rt
                                            (infix_pldt c_one c_one))
                                          (infix_pldt c_one c_one))))

;; cos_pi
(assert (= (cos1 pi1) (prefix_mndt c_one)))

;; sin_zero
(assert (= (sin1 c_zero) c_zero))

;; sin_half_pi
(assert (= (sin1 (infix_sldt pi1 (infix_pldt c_one c_one))) c_one))

;; sin_ang_exp
(assert
  (forall ((x complex))
    (=>
      (real_ x)
      (= (sin1 (infix_asdt (infix_asdt (infix_pldt c_one c_one) pi1) x)) 
      (t_im_part
        (ang_exp (real_to_ang x)))))))

;; cos_ang_exp
(assert
  (forall ((x complex))
    (=>
      (real_ x)
      (= (cos1 (infix_asdt (infix_asdt (infix_pldt c_one c_one) pi1) x)) 
      (t_real_part
        (ang_exp (real_to_ang x)))))))

;; sin_ang_exp_
(assert
  (forall ((x complex))
    (=>
      (real_ x)
      (= (sin1 x) (t_im_part
                    (ang_exp
                      (real_to_ang
                        (infix_sldt
                          x
                          (infix_asdt (infix_pldt c_one c_one) pi1)))))))))

;; cos_ang_exp_
(assert
  (forall ((x complex))
    (=>
      (real_ x)
      (= (cos1 x) (t_real_part
                    (ang_exp
                      (real_to_ang
                        (infix_sldt
                          x
                          (infix_asdt (infix_pldt c_one c_one) pi1)))))))))

;; cos_sin_square_add
(assert
  (forall ((x complex))
    (=>
      (real_ x)
      (= (infix_pldt (cpower (cos1 x) 2) (cpower (sin1 x) 2)) c_one))))

;; c_one_minus_sin_square
(assert
  (forall ((x complex))
    (=>
      (real_ x)
      (= (infix_mndt c_one (cpower (sin1 x) 2)) (cpower (cos1 x) 2)))))

;; c_one_minus_cos_square
(assert
  (forall ((x complex))
    (=>
      (real_ x)
      (= (infix_mndt c_one (cpower (cos1 x) 2)) (cpower (sin1 x) 2)))))

;; cos_ang
(declare-fun cos_ang (angle) complex)

;; cos_ang'def
(assert
  (forall ((theta angle))
    (= (cos_ang theta) (cos1
                         (infix_asdt
                           (ang_meas theta)
                           (infix_asdt (infix_pldt c_one c_one) pi1))))))

;; cos_ang'spec
(assert
  (forall ((theta angle)) (= (cos_ang theta) (t_real_part (ang_exp theta)))))

;; sin_ang
(declare-fun sin_ang (angle) complex)

;; sin_ang'def
(assert
  (forall ((theta angle))
    (= (sin_ang theta) (sin1
                         (infix_asdt
                           (ang_meas theta)
                           (infix_asdt (infix_pldt c_one c_one) pi1))))))

;; sin_ang'spec
(assert
  (forall ((theta angle)) (= (sin_ang theta) (t_im_part (ang_exp theta)))))

;; euler_moivre_cos
(assert
  (forall ((theta angle))
    (= (cos_ang theta) (infix_asdt
                         (infix_sldt c_one (infix_pldt c_one c_one))
                         (infix_pldt
                           (ang_exp theta)
                           (ang_exp (ang_inv theta)))))))

;; euler_moivre_cos_rev
(assert
  (forall ((theta angle))
    (= (infix_pldt (ang_exp theta) (ang_exp (ang_inv theta))) (infix_asdt
                                                                (infix_pldt
                                                                  c_one
                                                                  c_one)
                                                                (cos_ang
                                                                  theta)))))

;; euler_moivre_cos_int
(assert
  (forall ((k Int) (n Int))
    (= (cos_ang (infix_sldtsl k n)) (infix_asdt
                                      (infix_sldt
                                        c_one
                                        (infix_pldt c_one c_one))
                                      (infix_pldt
                                        (ang_exp (infix_sldtsl k n))
                                        (ang_exp (infix_sldtsl (- k) n)))))))

;; euler_moivre_cos_rev_int
(assert
  (forall ((k Int) (n Int))
    (= (infix_pldt
         (ang_exp (infix_sldtsl k n))
         (ang_exp (infix_sldtsl (- k) n))) (infix_asdt
                                             (infix_pldt c_one c_one)
                                             (cos_ang (infix_sldtsl k n))))))

;; euler_moivre_sin
(assert
  (forall ((theta angle))
    (= (sin_ang theta) (infix_asdt
                         (infix_sldt
                           c_one
                           (infix_asdt (infix_pldt c_one c_one) im))
                         (infix_mndt
                           (ang_exp theta)
                           (ang_exp (ang_inv theta)))))))

;; euler_moivre_sin_rev
(assert
  (forall ((theta angle))
    (= (infix_mndt (ang_exp theta) (ang_exp (ang_inv theta))) (infix_asdt
                                                                (infix_asdt
                                                                  (infix_pldt
                                                                    c_one
                                                                    c_one)
                                                                  im)
                                                                (sin_ang
                                                                  theta)))))

;; euler_moivre_sin_int
(assert
  (forall ((k Int) (n Int))
    (= (sin_ang (infix_sldtsl k n)) (infix_asdt
                                      (infix_sldt
                                        c_one
                                        (infix_asdt
                                          (infix_pldt c_one c_one)
                                          im))
                                      (infix_mndt
                                        (ang_exp (infix_sldtsl k n))
                                        (ang_exp (infix_sldtsl (- k) n)))))))

;; euler_moivre_sin_rev_int
(assert
  (forall ((k Int) (n Int))
    (= (infix_mndt
         (ang_exp (infix_sldtsl k n))
         (ang_exp (infix_sldtsl (- k) n))) (infix_asdt
                                             (infix_asdt
                                               (infix_pldt c_one c_one)
                                               im)
                                             (sin_ang (infix_sldtsl k n))))))

;; euler_real
(assert
  (forall ((x complex))
    (=> (real_ x) (= (cos1 x) (t_real_part (exp1 (infix_asdt im x)))))))

;; euler_im
(assert
  (forall ((x complex))
    (=> (real_ x) (= (sin1 x) (t_im_part (exp1 (infix_asdt im x)))))))

;; arc_cos_ang
(declare-fun arc_cos_ang (complex) angle)

;; arc_cos_ang'spec
(assert
  (forall ((x complex))
    (=>
      (and (infix_lseqdt (prefix_mndt c_one) x) (infix_lseqdt x c_one))
      (and
        (= (cos_ang (arc_cos_ang x)) x)
        (and
          (and
            (infix_lseqdt c_zero (ang_meas (arc_cos_ang x)))
            (infix_lseqdt
              (ang_meas (arc_cos_ang x))
              (infix_sldt c_one (infix_pldt c_one c_one))))
          (forall ((t angle))
            (=>
              (and
                (infix_lseqdt c_zero (ang_meas t))
                (infix_lseqdt
                  (ang_meas t)
                  (infix_sldt c_one (infix_pldt c_one c_one))))
              (=> (= (cos_ang t) x) (= t (arc_cos_ang x))))))))))

;; set_arc_cos_ang_exp
(assert
  (forall ((x complex) (o angle))
    (=>
      (and (infix_lseqdt (prefix_mndt c_one) x) (infix_lseqdt x c_one))
      (=>
        (and
          (infix_lseqdt c_zero (ang_meas o))
          (infix_lseqdt
            (ang_meas o)
            (infix_sldt c_one (infix_pldt c_one c_one))))
        (=> (= (cos_ang o) x) (= (arc_cos_ang x) o))))))

;; arc_cos_ang_exp_plus_inv
(assert
  (forall ((x complex))
    (=>
      (and (infix_lseqdt (prefix_mndt c_one) x) (infix_lseqdt x c_one))
      (= (infix_pldt
           (ang_exp (arc_cos_ang x))
           (ang_exp (ang_inv (arc_cos_ang x)))) (infix_asdt
                                                  (infix_pldt c_one c_one)
                                                  x)))))

;; arc_cos_ang_add_inv
(assert
  (forall ((x complex))
    (=>
      (and (infix_lseqdt (prefix_mndt c_one) x) (infix_lseqdt x c_one))
      (= (ang_add (arc_cos_ang x) (ang_inv (arc_cos_ang x))) ang_zero))))

;; ang_add_incr
(assert
  (forall ((k Int) (i Int))
    (= (ang_add (infix_sldtsl i (incr_abs k)) (infix_sldtsl i (incr_abs k))) 
    (infix_sldtsl
      i
      k))))

;; pps_cont
(declare-fun pps_cont (pps
  Int
  Int
  Int) pps)

;; fc
(declare-fun fc416 (Int
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc417 (Int
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((t Int) (x (Array Int Int)) (j Int))
    (= (select (fc416 t x) j) (select x (+ j t)))))

;; fc'def
(assert
  (forall ((t Int) (x (Array Int Int)) (j Int))
    (= (select (fc417 t x) j) (select x (+ j t)))))

;; pps_cont'spec
(assert
  (forall ((h pps) (co Int) (t Int) (n Int))
    (=>
      (and (<= 0 t) (<= t (- n (h_width h))))
      (=>
        (and (<= 0 co) (< co n))
        (=>
          (=> (<= t co) (<= (+ t (h_width h)) co))
          (and
            (= (h_width (pps_cont h co t n)) n)
            (and
              (= (h_range (pps_cont h co t n)) (h_range h))
              (and
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (forall ((i Int))
                    (= (select (select (select (h_basis_ket
                                                 (pps_cont h co t n)) x) y) i) 
                    (ite (and
                           (= (select x co) 1)
                           (and (<= t i) (< i (+ t (h_width h)))))
                      (select (select (select (h_basis_ket h) (fc416 t x)) y) (- i t))
                      (select x i)))))
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (= (tb2t84
                       (infix_at
                         angle1
                         (infix_mngt int int)
                         (infix_at
                           (infix_mngt (infix_mngt int int) angle1)
                           (infix_mngt int int)
                           (t2tb118 (h_angle (pps_cont h co t n)))
                           (t2tb7 x))
                         (t2tb7 y))) (ang_add
                                       (ang_mult_int
                                         (tb2t84
                                           (infix_at
                                             angle1
                                             (infix_mngt int int)
                                             (infix_at
                                               (infix_mngt
                                                 (infix_mngt int int)
                                                 angle1)
                                               (infix_mngt int int)
                                               (t2tb118 (h_angle h))
                                               (t2tb7 (fc417 t x)))
                                             (t2tb7 y)))
                                         (select x co))
                                       (ang_mult_int
                                         (phase_inv_
                                           (select y 0)
                                           (arc_cos_ang
                                             (pow_inv_sqrt_2 (h_range h))))
                                         (- 1 (select x co))))))))))))))

;; pps_apply_cont
(assert
  (forall ((h pps) (co Int) (t Int) (n Int))
    (=>
      (and (<= 0 t) (<= t (- n (h_width h))))
      (=>
        (and (<= 0 co) (< co n))
        (=>
          (=> (<= t co) (<= (+ t (h_width h)) co))
          (and
            (forall ((bv1 bitvec))
              (=>
                (= (length bv1) n)
                (=>
                  (= (select (value bv1) co) 0)
                  (= (pps_apply_basis (pps_cont h co t n) bv1) (bv_to_ket
                                                                 bv1)))))
            (forall ((bv1 bitvec))
              (=>
                (= (length bv1) n)
                (=>
                  (= (select (value bv1) co) 1)
                  (= (pps_apply_basis (pps_cont h co t n) bv1) (pps_apply_basis
                                                                 (pps_place
                                                                   h
                                                                   t
                                                                   n)
                                                                 bv1)))))))))))

;; h_basis_ket_bv_seq
(assert
  (forall ((h1 pps) (h2 pps) (x bitvec) (y bitvec))
    (=>
      (= (h_width h1) (h_width h2))
      (=>
        (= (length x) (h_width h1))
        (=>
          (= (length y) (+ (h_range h1) (h_range h2)))
          (= (h_basis_ket_bv (pps_seq h1 h2) x y) (h_basis_ket_bv
                                                    h2
                                                    (h_basis_ket_bv
                                                      h1
                                                      x
                                                      (hpart y (h_range h1)))
                                                    (tpart y (h_range h1)))))))))

;; h_angle_bv_seq
(assert
  (forall ((h1 pps) (h2 pps) (x bitvec) (y bitvec))
    (=>
      (= (h_width h1) (h_width h2))
      (=>
        (= (length x) (h_width h1))
        (=>
          (= (length y) (+ (h_range h1) (h_range h2)))
          (= (h_angle_bv (pps_seq h1 h2) x y) (ang_add
                                                (h_angle_bv
                                                  h1
                                                  x
                                                  (hpart y (h_range h1)))
                                                (h_angle_bv
                                                  h2
                                                  (h_basis_ket_bv
                                                    h1
                                                    x
                                                    (hpart y (h_range h1)))
                                                  (tpart y (h_range h1))))))))))

;; pps_par
(declare-fun pps_par (pps
  pps) pps)

;; fc
(declare-fun fc418 (pps
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc419 (pps
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc420 (pps
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc421 (pps
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((h1 pps) (x (Array Int Int)) (k Int))
    (= (select (fc418 h1 x) k) (select x (+ k (h_width h1))))))

;; fc'def
(assert
  (forall ((h1 pps) (y (Array Int Int)) (k Int))
    (= (select (fc419 h1 y) k) (select y (+ k (h_range h1))))))

;; fc'def
(assert
  (forall ((h1 pps) (x (Array Int Int)) (k Int))
    (= (select (fc420 h1 x) k) (select x (+ k (h_width h1))))))

;; fc'def
(assert
  (forall ((h1 pps) (y (Array Int Int)) (k Int))
    (= (select (fc421 h1 y) k) (select y (+ k (h_range h1))))))

;; pps_par'spec
(assert
  (forall ((h1 pps) (h2 pps))
    (and
      (= (h_width (pps_par h1 h2)) (+ (h_width h1) (h_width h2)))
      (and
        (= (h_range (pps_par h1 h2)) (+ (h_range h1) (h_range h2)))
        (and
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (forall ((i Int))
              (= (select (select (select (h_basis_ket (pps_par h1 h2)) x) y) i) 
              (ite (< i (h_width h1))
                (select (select (select (h_basis_ket h1) x) y) i)
                (select (select (select (h_basis_ket h2) (fc418 h1 x)) 
                (fc419
                  h1
                  y)) (- i (h_width h1)))))))
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (= (tb2t84
                 (infix_at
                   angle1
                   (infix_mngt int int)
                   (infix_at
                     (infix_mngt (infix_mngt int int) angle1)
                     (infix_mngt int int)
                     (t2tb118 (h_angle (pps_par h1 h2)))
                     (t2tb7 x))
                   (t2tb7 y))) (ang_add
                                 (tb2t84
                                   (infix_at
                                     angle1
                                     (infix_mngt int int)
                                     (infix_at
                                       (infix_mngt
                                         (infix_mngt int int)
                                         angle1)
                                       (infix_mngt int int)
                                       (t2tb118 (h_angle h1))
                                       (t2tb7 x))
                                     (t2tb7 y)))
                                 (tb2t84
                                   (infix_at
                                     angle1
                                     (infix_mngt int int)
                                     (infix_at
                                       (infix_mngt
                                         (infix_mngt int int)
                                         angle1)
                                       (infix_mngt int int)
                                       (t2tb118 (h_angle h2))
                                       (t2tb7 (fc420 h1 x)))
                                     (t2tb7 (fc421 h1 y))))))))))))

;; h_basis_ket_bv_par
(assert
  (forall ((h1 pps) (h2 pps) (x bitvec) (y bitvec))
    (=>
      (= (length x) (+ (h_width h1) (h_width h2)))
      (=>
        (= (length y) (+ (h_range h1) (h_range h2)))
        (= (h_basis_ket_bv (pps_par h1 h2) x y) (concat1
                                                  (h_basis_ket_bv
                                                    h1
                                                    (hpart x (h_width h1))
                                                    (hpart y (h_range h1)))
                                                  (h_basis_ket_bv
                                                    h2
                                                    (tpart x (h_width h1))
                                                    (tpart y (h_range h1)))))))))

;; h_angle_bv_par
(assert
  (forall ((h1 pps) (h2 pps) (x bitvec) (y bitvec))
    (=>
      (= (length x) (+ (h_width h1) (h_width h2)))
      (=>
        (= (length y) (+ (h_range h1) (h_range h2)))
        (= (h_angle_bv (pps_par h1 h2) x y) (ang_add
                                              (h_angle_bv
                                                h1
                                                (hpart x (h_width h1))
                                                (hpart y (h_range h1)))
                                              (h_angle_bv
                                                h2
                                                (tpart x (h_width h1))
                                                (tpart y (h_range h1)))))))))

;; kron_to_ket_l
(assert
  (forall ((x (matrix complex)) (l Int))
    (=>
      (<= 0 l)
      (=> (is_a_ket_l (kronecker x (ket 1 0)) (+ l 1)) (is_a_ket_l x l)))))

;; pps_ancs
(declare-fun pps_ancs (pps
  Int) pps)

;; fc
(declare-fun fc422 (pps
  Int
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc423 (pps
  Int
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((h1 pps) (i Int) (x (Array Int Int)) (k Int))
    (= (select (fc422 h1 i x) k) (ite (< k (- (h_width h1) i))
                                   (select x k)
                                   0))))

;; fc'def
(assert
  (forall ((h1 pps) (i Int) (x (Array Int Int)) (k Int))
    (= (select (fc423 h1 i x) k) (ite (< k (- (h_width h1) i))
                                   (select x k)
                                   0))))

;; pps_ancs'spec
(assert
  (forall ((h1 pps) (i Int))
    (=>
      (<= 1 i)
      (=>
        (<= i (h_width h1))
        (and
          (= (h_width (pps_ancs h1 i)) (- (h_width h1) i))
          (and
            (= (h_range (pps_ancs h1 i)) (h_range h1))
            (and
              (forall ((x (Array Int Int)) (y (Array Int Int)))
                (forall ((ii Int))
                  (= (select (select (select (h_basis_ket (pps_ancs h1 i)) x) y) ii) (select (select (select 
                  (h_basis_ket
                    h1) (fc422 h1 i x)) y) ii))))
              (forall ((x (Array Int Int)) (y (Array Int Int)))
                (= (tb2t84
                     (infix_at
                       angle1
                       (infix_mngt int int)
                       (infix_at
                         (infix_mngt (infix_mngt int int) angle1)
                         (infix_mngt int int)
                         (t2tb118 (h_angle (pps_ancs h1 i)))
                         (t2tb7 x))
                       (t2tb7 y))) (tb2t84
                                     (infix_at
                                       angle1
                                       (infix_mngt int int)
                                       (infix_at
                                         (infix_mngt
                                           (infix_mngt int int)
                                           angle1)
                                         (infix_mngt int int)
                                         (t2tb118 (h_angle h1))
                                         (t2tb7 (fc423 h1 i x)))
                                       (t2tb7 y))))))))))))

;; h_basis_ket_bv_anc
(assert
  (forall ((h pps) (x bitvec) (y bitvec) (i Int))
    (=>
      (<= 1 i)
      (=>
        (<= i (h_width h))
        (=>
          (= (length x) (- (h_width h) i))
          (=>
            (= (length y) (h_range h))
            (= (h_basis_ket_bv (pps_ancs h i) x y) (hpart
                                                     (h_basis_ket_bv
                                                       h
                                                       (concat1
                                                         x
                                                         (int_to_bv 0 i))
                                                       y)
                                                     (- (h_width h) i)))))))))

;; h_basis_ket_bv_anc_
(assert
  (forall ((h pps) (x bitvec) (y bitvec) (l Int) (i Int))
    (=>
      (<= 1 i)
      (=>
        (<= i (h_width h))
        (=>
          (= (tpart x l) (int_to_bv 0 i))
          (=>
            (= (length x) (h_width h))
            (=>
              (= l (- (h_width h) i))
              (=>
                (= (length y) (h_range h))
                (= (h_basis_ket_bv (pps_ancs h i) (hpart x l) y) (hpart
                                                                   (h_basis_ket_bv
                                                                    h
                                                                    x
                                                                    y)
                                                                   (- 
                                                                   (h_width
                                                                    h) i)))))))))))

;; h_angle_bv_anc
(assert
  (forall ((h pps) (x bitvec) (y bitvec) (i Int))
    (=>
      (<= 1 i)
      (=>
        (<= i (h_width h))
        (=>
          (= (length x) (- (h_width h) i))
          (=>
            (= (length y) (h_range h))
            (= (h_angle_bv (pps_ancs h i) x y) (h_angle_bv
                                                 h
                                                 (concat1 x (int_to_bv 0 i))
                                                 y))))))))

;; h_angle_bv_anc_
(assert
  (forall ((h pps) (x bitvec) (y bitvec) (l Int) (i Int))
    (=>
      (<= 1 i)
      (=>
        (<= i (h_width h))
        (=>
          (= (tpart x l) (int_to_bv 0 i))
          (=>
            (= (length x) (h_width h))
            (=>
              (= l (- (h_width h) i))
              (=>
                (= (length y) (h_range h))
                (= (h_angle_bv (pps_ancs h i) (hpart x l) y) (h_angle_bv
                                                               h
                                                               x
                                                               y))))))))))

;; kronecker_scalar_distr
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (a complex))
    (= (kronecker (infix_asdtdt a m) n) (infix_asdtdt a (kronecker m n)))))

;; kronecker_scalar_distr_r
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (a complex))
    (= (kronecker m (infix_asdtdt a n)) (infix_asdtdt a (kronecker m n)))))

;; kronecker_scalar_distr_rev
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (a complex))
    (= (infix_asdtdt a (kronecker m n)) (kronecker (infix_asdtdt a m) n))))

;; kronecker_scalar_distr_rev_r
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (a complex))
    (= (infix_asdtdt a (kronecker m n)) (kronecker m (infix_asdtdt a n)))))

;; kronecker_scalars
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (a complex) (b complex))
    (= (kronecker (infix_asdtdt a m) (infix_asdtdt b n)) (infix_asdtdt
                                                           (infix_asdt a b)
                                                           (kronecker m n)))))

;; mat_k_id
(declare-fun mat_k_id ((matrix complex)
  Int) (matrix complex))

;; mat_k_id'def
(assert
  (forall ((m (matrix complex)) (n Int))
    (=> (<= 0 n) (= (mat_k_id m n) (kronecker m (identity n))))))

;; fc
(declare-fun fc424 ((matrix complex)
  Int) (Array Int (Array Int complex)))

;; fc'def
(assert
  (forall ((m (matrix complex)) (n Int) (i Int) (j Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             int
             (t2tb61 (fc424 m n))
             (t2tb8 i))
           (t2tb8 j))) (infix_asdt
                         (indic
                           int
                           (t2tb8 (mod i (power 2 n)))
                           (t2tb8 (mod j (power 2 n))))
                         (tb2t
                           (get
                             complex1
                             (t2tb65 m)
                             (div i (power 2 n))
                             (div j (power 2 n))))))))

;; mat_k_id'spec
(assert
  (forall ((m (matrix complex)) (n Int))
    (=>
      (<= 0 n)
      (= (mat_k_id m n) (tb2t65
                          (make_f
                            complex1
                            (* (rows complex1 (t2tb65 m)) (power 2 n))
                            (* (columns complex1 (t2tb65 m)) (power 2 n))
                            (t2tb61 (fc424 m n))))))))

;; mat_k_id_values
(assert
  (forall ((m (matrix complex)) (n Int) (i Int) (j Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 i) (< i (* (rows complex1 (t2tb65 m)) (power 2 n))))
        (=>
          (and (<= 0 j) (< j (* (columns complex1 (t2tb65 m)) (power 2 n))))
          (= (tb2t (get complex1 (t2tb65 (mat_k_id m n)) i j)) (infix_asdt
                                                                 (indic
                                                                   int
                                                                   (t2tb8
                                                                    (mod i 
                                                                    (power
                                                                    2
                                                                    n)))
                                                                   (t2tb8
                                                                    (mod j 
                                                                    (power
                                                                    2
                                                                    n))))
                                                                 (tb2t
                                                                   (get
                                                                    complex1
                                                                    (t2tb65
                                                                    m)
                                                                    (div i 
                                                                    (power
                                                                    2
                                                                    n))
                                                                    (div j 
                                                                    (power
                                                                    2
                                                                    n)))))))))))

;; mat_k_id_rows
(assert
  (forall ((m (matrix complex)) (n Int))
    (=>
      (<= 0 n)
      (= (rows complex1 (t2tb65 (mat_k_id m n))) (* (rows
                                                      complex1
                                                      (t2tb65 m)) (power 2 n))))))

;; mat_k_id_columns
(assert
  (forall ((m (matrix complex)) (n Int))
    (=>
      (<= 0 n)
      (= (columns complex1 (t2tb65 (mat_k_id m n))) (* (columns
                                                         complex1
                                                         (t2tb65 m)) 
      (power
        2
        n))))))

;; id_k_mat
(declare-fun id_k_mat ((matrix complex)
  Int) (matrix complex))

;; id_k_mat'def
(assert
  (forall ((m (matrix complex)) (n Int))
    (=> (<= 0 n) (= (id_k_mat m n) (kronecker (identity n) m)))))

;; fc
(declare-fun fc425 ((matrix complex)) (Array Int (Array Int complex)))

;; fc'def
(assert
  (forall ((m (matrix complex)) (i Int) (j Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             int
             (t2tb61 (fc425 m))
             (t2tb8 i))
           (t2tb8 j))) (infix_asdt
                         (indic
                           int
                           (t2tb8 (div i (rows complex1 (t2tb65 m))))
                           (t2tb8 (div j (columns complex1 (t2tb65 m)))))
                         (tb2t
                           (get
                             complex1
                             (t2tb65 m)
                             (mod i (rows complex1 (t2tb65 m)))
                             (mod j (columns complex1 (t2tb65 m)))))))))

;; id_k_mat'spec
(assert
  (forall ((m (matrix complex)) (n Int))
    (=>
      (<= 0 n)
      (= (id_k_mat m n) (tb2t65
                          (make_f
                            complex1
                            (* (rows complex1 (t2tb65 m)) (power 2 n))
                            (* (columns complex1 (t2tb65 m)) (power 2 n))
                            (t2tb61 (fc425 m))))))))

;; id_k_mat_values
(assert
  (forall ((m (matrix complex)) (n Int) (i Int) (j Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 i) (< i (* (rows complex1 (t2tb65 m)) (power 2 n))))
        (=>
          (and (<= 0 j) (< j (* (columns complex1 (t2tb65 m)) (power 2 n))))
          (= (tb2t (get complex1 (t2tb65 (id_k_mat m n)) i j)) (infix_asdt
                                                                 (indic
                                                                   int
                                                                   (t2tb8
                                                                    (div i 
                                                                    (rows
                                                                    complex1
                                                                    (t2tb65
                                                                    m))))
                                                                   (t2tb8
                                                                    (div j 
                                                                    (columns
                                                                    complex1
                                                                    (t2tb65
                                                                    m)))))
                                                                 (tb2t
                                                                   (get
                                                                    complex1
                                                                    (t2tb65
                                                                    m)
                                                                    (mod i 
                                                                    (rows
                                                                    complex1
                                                                    (t2tb65
                                                                    m)))
                                                                    (mod j 
                                                                    (columns
                                                                    complex1
                                                                    (t2tb65
                                                                    m))))))))))))

;; id_k_mat_rows
(assert
  (forall ((m (matrix complex)) (n Int))
    (=>
      (<= 0 n)
      (= (rows complex1 (t2tb65 (id_k_mat m n))) (* (rows
                                                      complex1
                                                      (t2tb65 m)) (power 2 n))))))

;; id_k_mat_columns
(assert
  (forall ((m (matrix complex)) (n Int))
    (=>
      (<= 0 n)
      (= (columns complex1 (t2tb65 (id_k_mat m n))) (* (columns
                                                         complex1
                                                         (t2tb65 m)) 
      (power
        2
        n))))))

;; mat_prod_k_id
(declare-fun mat_prod_k_id ((matrix complex)
  (matrix complex)
  Int) (matrix complex))

;; mat_prod_k_id'def
(assert
  (forall ((m (matrix complex)) (o (matrix complex)) (n Int))
    (=>
      (<= 0 n)
      (=>
        (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 o)))
        (= (mat_prod_k_id m o n) (kronecker (mat_mult m o) (identity n)))))))

;; fc
(declare-fun fc426 ((matrix complex)
  (matrix complex)
  Int
  Int
  Int) (Array Int complex))

;; fc
(declare-fun fc427 ((matrix complex)
  (matrix complex)
  Int) (Array Int (Array Int complex)))

;; fc'def
(assert
  (forall ((m (matrix complex)) (o (matrix complex)) (n Int) (i Int) (j Int) (k Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc426 m o n i j)) (t2tb8 k))) 
    (infix_asdt
      (tb2t (get complex1 (t2tb65 m) (div i (power 2 n)) k))
      (tb2t (get complex1 (t2tb65 o) k (div j (power 2 n))))))))

;; fc'def
(assert
  (forall ((m (matrix complex)) (o (matrix complex)) (n Int) (i Int) (j Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             int
             (t2tb61 (fc427 m o n))
             (t2tb8 i))
           (t2tb8 j))) (infix_asdt
                         (indic
                           int
                           (t2tb8 (mod i (power 2 n)))
                           (t2tb8 (mod j (power 2 n))))
                         (ind_sum
                           (fc426 m o n i j)
                           0
                           (columns complex1 (t2tb65 m)))))))

;; mat_prod_k_id'spec
(assert
  (forall ((m (matrix complex)) (o (matrix complex)) (n Int))
    (=>
      (<= 0 n)
      (=>
        (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 o)))
        (= (mat_prod_k_id m o n) (tb2t65
                                   (make_f
                                     complex1
                                     (* (rows complex1 (t2tb65 m)) (power
                                                                    2
                                                                    n))
                                     (* (columns complex1 (t2tb65 o)) 
                                     (power
                                       2
                                       n))
                                     (t2tb61 (fc427 m o n)))))))))

;; id_k_mat_prod
(declare-fun id_k_mat_prod ((matrix complex)
  (matrix complex)
  Int) (matrix complex))

;; id_k_mat_prod'def
(assert
  (forall ((m (matrix complex)) (o (matrix complex)) (n Int))
    (=>
      (<= 0 n)
      (=>
        (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 o)))
        (= (id_k_mat_prod m o n) (kronecker (identity n) (mat_mult m o)))))))

;; fc
(declare-fun fc428 ((matrix complex)
  (matrix complex)
  Int
  Int) (Array Int complex))

;; fc
(declare-fun fc429 ((matrix complex)
  (matrix complex)) (Array Int (Array Int complex)))

;; fc'def
(assert
  (forall ((m (matrix complex)) (o (matrix complex)) (i Int) (j Int) (k Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc428 m o i j)) (t2tb8 k))) 
    (infix_asdt
      (tb2t (get complex1 (t2tb65 m) (mod i (rows complex1 (t2tb65 m))) k))
      (tb2t
        (get complex1 (t2tb65 o) k (mod j (columns complex1 (t2tb65 o)))))))))

;; fc'def
(assert
  (forall ((m (matrix complex)) (o (matrix complex)) (i Int) (j Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             int
             (t2tb61 (fc429 m o))
             (t2tb8 i))
           (t2tb8 j))) (infix_asdt
                         (indic
                           int
                           (t2tb8 (div i (rows complex1 (t2tb65 m))))
                           (t2tb8 (div j (columns complex1 (t2tb65 o)))))
                         (ind_sum
                           (fc428 m o i j)
                           0
                           (columns complex1 (t2tb65 m)))))))

;; id_k_mat_prod'spec
(assert
  (forall ((m (matrix complex)) (o (matrix complex)) (n Int))
    (=>
      (<= 0 n)
      (=>
        (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 o)))
        (= (id_k_mat_prod m o n) (tb2t65
                                   (make_f
                                     complex1
                                     (* (rows complex1 (t2tb65 m)) (power
                                                                    2
                                                                    n))
                                     (* (columns complex1 (t2tb65 o)) 
                                     (power
                                       2
                                       n))
                                     (t2tb61 (fc429 m o)))))))))

;; fc
(declare-fun fc430 (Int
  Int
  (Array Int complex)) (Array Int complex))

;; fc'def
(assert
  (forall ((v Int) (p Int) (g (Array Int complex)) (k Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc430 v p g)) (t2tb8 k))) 
    (infix_asdt
      (indic int (t2tb8 (mod k v)) (t2tb8 p))
      (tb2t (infix_at complex1 int (t2tb51 g) (t2tb8 (div k v))))))))

;; filter_sum_mod_indic
(assert
  (forall ((v Int) (n Int) (p Int) (g (Array Int complex)))
    (=>
      (< 0 n)
      (=>
        (< 0 v)
        (=>
          (and (<= 0 p) (< p v))
          (= (sum int (t2tb16 (to_fset 0 (* v n))) (t2tb51 (fc430 v p g))) 
          (sum
            int
            (t2tb16 (to_fset 0 n))
            (t2tb51 g))))))))

;; fc
(declare-fun fc431 (Int
  Int
  (Array Int complex)) (Array Int complex))

;; fc'def
(assert
  (forall ((v Int) (p Int) (g (Array Int complex)) (k Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc431 v p g)) (t2tb8 k))) 
    (infix_asdt
      (tb2t (infix_at complex1 int (t2tb51 g) (t2tb8 (mod k v))))
      (indic int (t2tb8 (div k v)) (t2tb8 p))))))

;; filter_sum_indic_div
(assert
  (forall ((v Int) (n Int) (p Int) (g (Array Int complex)))
    (=>
      (< 0 n)
      (=>
        (< 0 v)
        (=>
          (and (<= 0 p) (< p n))
          (= (sum int (t2tb16 (to_fset 0 (* v n))) (t2tb51 (fc431 v p g))) 
          (sum
            int
            (t2tb16 (to_fset 0 v))
            (t2tb51 g))))))))

;; fc
(declare-fun fc432 (Int
  Int
  (Array Int complex)) (Array Int complex))

;; fc'def
(assert
  (forall ((v Int) (p Int) (g (Array Int complex)) (k Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc432 v p g)) (t2tb8 k))) 
    (infix_asdt
      (indic int (t2tb8 (mod k v)) (t2tb8 p))
      (tb2t (infix_at complex1 int (t2tb51 g) (t2tb8 (div k v))))))))

;; filtered_ind_sum_mod_indic
(assert
  (forall ((v Int) (n Int) (p Int) (g (Array Int complex)))
    (=>
      (< 0 n)
      (=>
        (< 0 v)
        (=>
          (and (<= 0 p) (< p v))
          (= (ind_sum (fc432 v p g) 0 (* v n)) (ind_sum g 0 n)))))))

;; fc
(declare-fun fc433 (Int
  Int
  (Array Int complex)) (Array Int complex))

;; fc'def
(assert
  (forall ((v Int) (p Int) (g (Array Int complex)) (k Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc433 v p g)) (t2tb8 k))) 
    (infix_asdt
      (tb2t (infix_at complex1 int (t2tb51 g) (t2tb8 (mod k v))))
      (indic int (t2tb8 (div k v)) (t2tb8 p))))))

;; filtered_ind_sum_indic_div
(assert
  (forall ((v Int) (n Int) (p Int) (g (Array Int complex)))
    (=>
      (< 0 n)
      (=>
        (< 0 v)
        (=>
          (and (<= 0 p) (< p n))
          (= (ind_sum (fc433 v p g) 0 (* v n)) (ind_sum g 0 v)))))))

;; fc
(declare-fun fc434 ((matrix complex)
  (matrix complex)
  Int
  Int
  Int) (Array Int complex))

;; fc'def
(assert
  (forall ((m (matrix complex)) (o (matrix complex)) (i Int) (j Int) (n Int) (k Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc434 m o i j n)) (t2tb8 k))) 
    (infix_asdt
      (tb2t (get complex1 (t2tb65 m) (div i (power 2 n)) k))
      (tb2t (get complex1 (t2tb65 o) k (div j (power 2 n))))))))

;; prod_mat_k_id_pre
(assert
  (forall ((m (matrix complex)) (o (matrix complex)) (i Int) (j Int) (n Int))
    (=>
      (<= 0 n)
      (=>
        (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 o)))
        (=>
          (and (<= 0 i) (< i (* (rows complex1 (t2tb65 m)) (power 2 n))))
          (=>
            (and
              (<= 0 j)
              (< j (* (columns complex1 (t2tb65 o)) (power 2 n))))
            (= (tb2t
                 (get
                   complex1
                   (t2tb65 (mat_mult (mat_k_id m n) (mat_k_id o n)))
                   i
                   j)) (infix_asdt
                         (indic
                           int
                           (t2tb8 (mod i (power 2 n)))
                           (t2tb8 (mod j (power 2 n))))
                         (ind_sum
                           (fc434 m o i j n)
                           0
                           (columns complex1 (t2tb65 m)))))))))))

;; prod_mat_k_id
(declare-fun prod_mat_k_id ((matrix complex)
  (matrix complex)
  Int) (matrix complex))

;; prod_mat_k_id'def
(assert
  (forall ((m (matrix complex)) (o (matrix complex)) (n Int))
    (=>
      (<= 0 n)
      (=>
        (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 o)))
        (= (prod_mat_k_id m o n) (mat_mult (mat_k_id m n) (mat_k_id o n)))))))

;; fc
(declare-fun fc435 ((matrix complex)
  (matrix complex)
  Int
  Int
  Int) (Array Int complex))

;; fc
(declare-fun fc436 ((matrix complex)
  (matrix complex)
  Int) (Array Int (Array Int complex)))

;; fc'def
(assert
  (forall ((m (matrix complex)) (o (matrix complex)) (n Int) (i Int) (j Int) (k Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc435 m o n i j)) (t2tb8 k))) 
    (infix_asdt
      (tb2t (get complex1 (t2tb65 m) (div i (power 2 n)) k))
      (tb2t (get complex1 (t2tb65 o) k (div j (power 2 n))))))))

;; fc'def
(assert
  (forall ((m (matrix complex)) (o (matrix complex)) (n Int) (i Int) (j Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             int
             (t2tb61 (fc436 m o n))
             (t2tb8 i))
           (t2tb8 j))) (infix_asdt
                         (indic
                           int
                           (t2tb8 (mod i (power 2 n)))
                           (t2tb8 (mod j (power 2 n))))
                         (ind_sum
                           (fc435 m o n i j)
                           0
                           (columns complex1 (t2tb65 m)))))))

;; prod_mat_k_id'spec
(assert
  (forall ((m (matrix complex)) (o (matrix complex)) (n Int))
    (=>
      (<= 0 n)
      (=>
        (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 o)))
        (= (prod_mat_k_id m o n) (tb2t65
                                   (make_f
                                     complex1
                                     (* (rows complex1 (t2tb65 m)) (power
                                                                    2
                                                                    n))
                                     (* (columns complex1 (t2tb65 o)) 
                                     (power
                                       2
                                       n))
                                     (t2tb61 (fc436 m o n)))))))))

;; prod_mat_k_id_dec
(assert
  (forall ((m (matrix complex)) (o (matrix complex)) (n Int))
    (=>
      (<= 0 n)
      (=>
        (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 o)))
        (= (prod_mat_k_id m o n) (mat_prod_k_id m o n))))))

;; fc
(declare-fun fc437 ((matrix complex)
  (matrix complex)
  Int
  Int) (Array Int complex))

;; fc'def
(assert
  (forall ((m (matrix complex)) (o (matrix complex)) (i Int) (j Int) (k Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc437 m o i j)) (t2tb8 k))) 
    (infix_asdt
      (tb2t (get complex1 (t2tb65 m) (mod i (rows complex1 (t2tb65 m))) k))
      (tb2t
        (get complex1 (t2tb65 o) k (mod j (columns complex1 (t2tb65 o)))))))))

;; k_id_prod_mat_pre
(assert
  (forall ((m (matrix complex)) (o (matrix complex)) (i Int) (j Int) (n Int))
    (=>
      (<= 0 n)
      (=>
        (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 o)))
        (=>
          (and (<= 0 i) (< i (* (rows complex1 (t2tb65 m)) (power 2 n))))
          (=>
            (and
              (<= 0 j)
              (< j (* (columns complex1 (t2tb65 o)) (power 2 n))))
            (= (tb2t
                 (get
                   complex1
                   (t2tb65 (mat_mult (id_k_mat m n) (id_k_mat o n)))
                   i
                   j)) (infix_asdt
                         (indic
                           int
                           (t2tb8 (div i (rows complex1 (t2tb65 m))))
                           (t2tb8 (div j (columns complex1 (t2tb65 o)))))
                         (ind_sum
                           (fc437 m o i j)
                           0
                           (columns complex1 (t2tb65 m)))))))))))

;; k_id_prod_mat
(declare-fun k_id_prod_mat ((matrix complex)
  (matrix complex)
  Int) (matrix complex))

;; k_id_prod_mat'def
(assert
  (forall ((m (matrix complex)) (o (matrix complex)) (n Int))
    (=>
      (<= 0 n)
      (=>
        (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 o)))
        (= (k_id_prod_mat m o n) (mat_mult (id_k_mat m n) (id_k_mat o n)))))))

;; fc
(declare-fun fc438 ((matrix complex)
  (matrix complex)
  Int
  Int) (Array Int complex))

;; fc
(declare-fun fc439 ((matrix complex)
  (matrix complex)) (Array Int (Array Int complex)))

;; fc'def
(assert
  (forall ((m (matrix complex)) (o (matrix complex)) (i Int) (j Int) (k Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc438 m o i j)) (t2tb8 k))) 
    (infix_asdt
      (tb2t (get complex1 (t2tb65 m) (mod i (rows complex1 (t2tb65 m))) k))
      (tb2t
        (get complex1 (t2tb65 o) k (mod j (columns complex1 (t2tb65 o)))))))))

;; fc'def
(assert
  (forall ((m (matrix complex)) (o (matrix complex)) (i Int) (j Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             int
             (t2tb61 (fc439 m o))
             (t2tb8 i))
           (t2tb8 j))) (infix_asdt
                         (indic
                           int
                           (t2tb8 (div i (rows complex1 (t2tb65 m))))
                           (t2tb8 (div j (columns complex1 (t2tb65 o)))))
                         (ind_sum
                           (fc438 m o i j)
                           0
                           (columns complex1 (t2tb65 m)))))))

;; k_id_prod_mat'spec
(assert
  (forall ((m (matrix complex)) (o (matrix complex)) (n Int))
    (=>
      (<= 0 n)
      (=>
        (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 o)))
        (= (k_id_prod_mat m o n) (tb2t65
                                   (make_f
                                     complex1
                                     (* (rows complex1 (t2tb65 m)) (power
                                                                    2
                                                                    n))
                                     (* (columns complex1 (t2tb65 o)) 
                                     (power
                                       2
                                       n))
                                     (t2tb61 (fc439 m o)))))))))

;; k_id_prod_mat_dec
(assert
  (forall ((m (matrix complex)) (o (matrix complex)) (n Int))
    (=>
      (<= 0 n)
      (=>
        (= (columns complex1 (t2tb65 m)) (rows complex1 (t2tb65 o)))
        (= (k_id_prod_mat m o n) (id_k_mat_prod m o n))))))

;; split_ne_pre
(assert
  (forall ((m1 (matrix complex)) (m2 (matrix complex)) (nc1 Int) (nc2 Int) (nr1 Int) (nr2 Int) (i Int) (j Int))
    (=>
      (<= 0 nr1)
      (=>
        (<= 0 nr2)
        (=>
          (<= 0 nc1)
          (=>
            (<= 0 nc2)
            (=>
              (= (columns complex1 (t2tb65 m1)) (power 2 nc1))
              (=>
                (= (columns complex1 (t2tb65 m2)) (power 2 nc2))
                (=>
                  (= (rows complex1 (t2tb65 m1)) (power 2 nr1))
                  (=>
                    (= (rows complex1 (t2tb65 m2)) (power 2 nr2))
                    (=>
                      (and (<= 0 i) (< i (* (power 2 nr1) (power 2 nr2))))
                      (=>
                        (and (<= 0 j) (< j (* (power 2 nc1) (power 2 nc2))))
                        (= (tb2t
                             (get
                               complex1
                               (t2tb65
                                 (mat_mult
                                   (id_k_mat m1 nr2)
                                   (mat_k_id m2 nc1)))
                               i
                               j)) (tb2t
                                     (get
                                       complex1
                                       (t2tb65 (kronecker m2 m1))
                                       i
                                       j)))))))))))))))

;; split_nw_pre
(assert
  (forall ((m1 (matrix complex)) (m2 (matrix complex)) (nc1 Int) (nc2 Int) (nr1 Int) (nr2 Int) (i Int) (j Int))
    (=>
      (<= 0 nr1)
      (=>
        (<= 0 nr2)
        (=>
          (<= 0 nc1)
          (=>
            (<= 0 nc2)
            (=>
              (= (columns complex1 (t2tb65 m1)) (power 2 nc1))
              (=>
                (= (columns complex1 (t2tb65 m2)) (power 2 nc2))
                (=>
                  (= (rows complex1 (t2tb65 m1)) (power 2 nr1))
                  (=>
                    (= (rows complex1 (t2tb65 m2)) (power 2 nr2))
                    (=>
                      (and (<= 0 i) (< i (* (power 2 nr1) (power 2 nr2))))
                      (=>
                        (and (<= 0 j) (< j (* (power 2 nc1) (power 2 nc2))))
                        (= (tb2t
                             (get
                               complex1
                               (t2tb65
                                 (mat_mult
                                   (mat_k_id m1 nr2)
                                   (id_k_mat m2 nc1)))
                               i
                               j)) (tb2t
                                     (get
                                       complex1
                                       (t2tb65 (kronecker m1 m2))
                                       i
                                       j)))))))))))))))

;; split_ne
(assert
  (forall ((m1 (matrix complex)) (m2 (matrix complex)) (nc1 Int) (nc2 Int) (nr1 Int) (nr2 Int))
    (=>
      (<= 0 nr1)
      (=>
        (<= 0 nr2)
        (=>
          (<= 0 nc1)
          (=>
            (<= 0 nc2)
            (=>
              (= (columns complex1 (t2tb65 m1)) (power 2 nc1))
              (=>
                (= (columns complex1 (t2tb65 m2)) (power 2 nc2))
                (=>
                  (= (rows complex1 (t2tb65 m1)) (power 2 nr1))
                  (=>
                    (= (rows complex1 (t2tb65 m2)) (power 2 nr2))
                    (= (mat_mult (id_k_mat m1 nr2) (mat_k_id m2 nc1)) 
                    (kronecker
                      m2
                      m1))))))))))))

;; split_nw
(assert
  (forall ((m1 (matrix complex)) (m2 (matrix complex)) (nc1 Int) (nc2 Int) (nr1 Int) (nr2 Int))
    (=>
      (<= 0 nr1)
      (=>
        (<= 0 nr2)
        (=>
          (<= 0 nc1)
          (=>
            (<= 0 nc2)
            (=>
              (= (columns complex1 (t2tb65 m1)) (power 2 nc1))
              (=>
                (= (columns complex1 (t2tb65 m2)) (power 2 nc2))
                (=>
                  (= (rows complex1 (t2tb65 m1)) (power 2 nr1))
                  (=>
                    (= (rows complex1 (t2tb65 m2)) (power 2 nr2))
                    (= (mat_mult (mat_k_id m1 nr2) (id_k_mat m2 nc1)) 
                    (kronecker
                      m1
                      m2))))))))))))

;; shift_k_id
(assert
  (forall ((m1 (matrix complex)) (m2 (matrix complex)) (nc1 Int) (nc2 Int) (nr1 Int) (nr2 Int))
    (=>
      (<= 0 nr1)
      (=>
        (<= 0 nr2)
        (=>
          (<= 0 nc1)
          (=>
            (<= 0 nc2)
            (=>
              (= (columns complex1 (t2tb65 m1)) (power 2 nc1))
              (=>
                (= (columns complex1 (t2tb65 m2)) (power 2 nc2))
                (=>
                  (= (rows complex1 (t2tb65 m1)) (power 2 nr1))
                  (=>
                    (= (rows complex1 (t2tb65 m2)) (power 2 nr2))
                    (= (mat_mult (mat_k_id m1 nr2) (id_k_mat m2 nc1)) 
                    (mat_mult
                      (id_k_mat m2 nr1)
                      (mat_k_id m1 nc2)))))))))))))

;; kronecker_mult_commut
(assert
  (forall ((a (matrix complex)) (b (matrix complex)) (c (matrix complex)) (d (matrix complex)) (ra Int) (ca Int) (cc Int) (rb Int) (cb Int) (cd Int))
    (=>
      (<= 0 ra)
      (=>
        (<= 0 ca)
        (=>
          (<= 0 cc)
          (=>
            (<= 0 rb)
            (=>
              (<= 0 cb)
              (=>
                (<= 0 cd)
                (=>
                  (= (rows complex1 (t2tb65 a)) (power 2 ra))
                  (=>
                    (= (columns complex1 (t2tb65 a)) (power 2 ca))
                    (=>
                      (= (rows complex1 (t2tb65 c)) (power 2 ca))
                      (=>
                        (= (columns complex1 (t2tb65 c)) (power 2 cc))
                        (=>
                          (= (rows complex1 (t2tb65 b)) (power 2 rb))
                          (=>
                            (= (columns complex1 (t2tb65 b)) (power 2 cb))
                            (=>
                              (= (rows complex1 (t2tb65 d)) (power 2 cb))
                              (=>
                                (= (columns complex1 (t2tb65 d)) (power 2 cd))
                                (= (mat_mult (kronecker a b) (kronecker c d)) 
                                (kronecker
                                  (mat_mult a c)
                                  (mat_mult b d)))))))))))))))))))

;; isa_square
(declare-fun isa_square ((matrix complex)) Bool)

;; isa_square'def
(assert
  (forall ((m (matrix complex)))
    (=
      (isa_square m)
      (= (rows complex1 (t2tb65 m)) (columns complex1 (t2tb65 m))))))

;; pow2dim
(declare-fun pow2dim ((matrix complex)) Bool)

;; pow2dim'def
(assert
  (forall ((m (matrix complex)))
    (=
      (pow2dim m)
      (exists ((i Int) (j Int))
        (and
          (= (rows complex1 (t2tb65 m)) (power 2 i))
          (= (columns complex1 (t2tb65 m)) (power 2 j)))))))

;; pow2dim_square
(declare-fun pow2dim_square ((matrix complex)) Bool)

;; pow2dim_square'def
(assert
  (forall ((m (matrix complex)))
    (=
      (pow2dim_square m)
      (exists ((i Int))
        (and
          (= (rows complex1 (t2tb65 m)) (power 2 i))
          (= (columns complex1 (t2tb65 m)) (power 2 i)))))))

;; pow_2dim_kets
(assert (forall ((m (matrix complex))) (=> (is_a_ket m) (pow2dim m))))

;; lnr
(declare-fun lnr ((matrix complex)) Int)

;; lnr'spec
(assert
  (forall ((m (matrix complex)))
    (=>
      (pow2dim m)
      (and (= (rows complex1 (t2tb65 m)) (power 2 (lnr m))) (<= 0 (lnr m))))))

;; lnc
(declare-fun lnc ((matrix complex)) Int)

;; lnc'spec
(assert
  (forall ((m (matrix complex)))
    (=>
      (pow2dim m)
      (and
        (= (columns complex1 (t2tb65 m)) (power 2 (lnc m)))
        (<= 0 (lnc m))))))

;; get_pow2dim
(assert
  (forall ((m (matrix complex)))
    (=>
      (pow2dim m)
      (exists ((i Int) (j Int))
        (and
          (= (rows complex1 (t2tb65 m)) (power 2 i))
          (= (columns complex1 (t2tb65 m)) (power 2 j)))))))

;; set_pow2dim
(assert
  (forall ((m (matrix complex)))
    (=>
      (exists ((i Int) (j Int))
        (and
          (= (rows complex1 (t2tb65 m)) (power 2 i))
          (= (columns complex1 (t2tb65 m)) (power 2 j))))
      (pow2dim m))))

;; get_pow2dim_elt
(assert
  (forall ((m (matrix complex)) (i Int) (j Int))
    (=>
      (pow2dim m)
      (=>
        (= (lnr m) i)
        (=>
          (= (lnc m) j)
          (and
            (= (rows complex1 (t2tb65 m)) (power 2 i))
            (= (columns complex1 (t2tb65 m)) (power 2 j))))))))

;; set_pow2dim_elt
(assert
  (forall ((m (matrix complex)) (i Int) (j Int))
    (=>
      (<= 0 i)
      (=>
        (<= 0 j)
        (=>
          (= (rows complex1 (t2tb65 m)) (power 2 i))
          (=>
            (= (columns complex1 (t2tb65 m)) (power 2 j))
            (and (pow2dim m) (and (= (lnr m) i) (= (lnc m) j)))))))))

;; mat_size
(declare-fun mat_size ((matrix complex)) Int)

;; mat_size'def
(assert
  (forall ((m (matrix complex)))
    (=> (isa_square m) (= (mat_size m) (rows complex1 (t2tb65 m))))))

;; mat_size'spec
(assert
  (forall ((m (matrix complex)))
    (=>
      (isa_square m)
      (and
        (= (mat_size m) (rows complex1 (t2tb65 m)))
        (= (mat_size m) (columns complex1 (t2tb65 m)))))))

;; get_square
(assert
  (forall ((m (matrix complex)))
    (=>
      (isa_square m)
      (= (rows complex1 (t2tb65 m)) (columns complex1 (t2tb65 m))))))

;; set_square
(assert
  (forall ((m (matrix complex)))
    (=>
      (= (rows complex1 (t2tb65 m)) (columns complex1 (t2tb65 m)))
      (isa_square m))))

;; set_square_elt
(assert
  (forall ((m (matrix complex)) (i Int))
    (=>
      (= (rows complex1 (t2tb65 m)) i)
      (=>
        (= (columns complex1 (t2tb65 m)) i)
        (and (isa_square m) (= (mat_size m) i))))))

;; get_square_elt
(assert
  (forall ((m (matrix complex)) (i Int))
    (=>
      (isa_square m)
      (=>
        (= (mat_size m) i)
        (and
          (= (rows complex1 (t2tb65 m)) i)
          (= (columns complex1 (t2tb65 m)) i))))))

;; pow2dim_square_dec
(assert
  (forall ((m (matrix complex)))
    (=> (isa_square m) (=> (pow2dim m) (pow2dim_square m)))))

;; dec_pow2dim_square
(assert
  (forall ((m (matrix complex)))
    (=> (pow2dim_square m) (and (isa_square m) (pow2dim m)))))

;; ln_size
(declare-fun ln_size ((matrix complex)) Int)

;; ln_size'def
(assert
  (forall ((m (matrix complex)))
    (=> (pow2dim_square m) (= (ln_size m) (lnr m)))))

;; ln_size'spec
(assert
  (forall ((m (matrix complex)))
    (=>
      (pow2dim_square m)
      (and
        (= (ln_size m) (lnc m))
        (and
          (= (rows complex1 (t2tb65 m)) (power 2 (ln_size m)))
          (= (columns complex1 (t2tb65 m)) (power 2 (ln_size m))))))))

;; set_ln_size_lnc
(assert
  (forall ((m (matrix complex)) (i Int))
    (=> (pow2dim_square m) (=> (= (lnc m) i) (= (ln_size m) i)))))

;; set_ln_size_lnr
(assert
  (forall ((m (matrix complex)) (i Int))
    (=> (pow2dim_square m) (=> (= (lnr m) i) (= (ln_size m) i)))))

;; set_ln_size_columns
(assert
  (forall ((m (matrix complex)) (i Int))
    (=>
      (<= 0 i)
      (=>
        (pow2dim_square m)
        (=> (= (columns complex1 (t2tb65 m)) (power 2 i)) (= (ln_size m) i))))))

;; set_ln_size_rows
(assert
  (forall ((m (matrix complex)) (i Int))
    (=>
      (<= 0 i)
      (=>
        (pow2dim_square m)
        (=> (= (rows complex1 (t2tb65 m)) (power 2 i)) (= (ln_size m) i))))))

;; set_pow2dim_square
(assert
  (forall ((m (matrix complex)))
    (=>
      (exists ((i Int))
        (and
          (= (rows complex1 (t2tb65 m)) (columns complex1 (t2tb65 m)))
          (= (columns complex1 (t2tb65 m)) (power 2 i))))
      (pow2dim_square m))))

;; set_pow2dim_square_elt
(assert
  (forall ((m (matrix complex)) (i Int))
    (=>
      (<= 0 i)
      (=>
        (and
          (= (rows complex1 (t2tb65 m)) (columns complex1 (t2tb65 m)))
          (= (columns complex1 (t2tb65 m)) (power 2 i)))
        (and (pow2dim_square m) (= (ln_size m) i))))))

;; get_pow2dim_square_elt
(assert
  (forall ((m (matrix complex)) (i Int))
    (=>
      (pow2dim_square m)
      (=>
        (= (ln_size m) i)
        (and
          (= (rows complex1 (t2tb65 m)) (power 2 i))
          (= (columns complex1 (t2tb65 m)) (power 2 i)))))))

;; kronecker_mult_commut_p
(assert
  (forall ((a (matrix complex)) (b (matrix complex)) (c (matrix complex)) (d (matrix complex)))
    (=>
      (= (columns complex1 (t2tb65 a)) (rows complex1 (t2tb65 c)))
      (=>
        (= (columns complex1 (t2tb65 b)) (rows complex1 (t2tb65 d)))
        (=>
          (pow2dim a)
          (=>
            (pow2dim b)
            (=>
              (pow2dim c)
              (=>
                (pow2dim d)
                (= (mat_mult (kronecker a b) (kronecker c d)) (kronecker
                                                                (mat_mult
                                                                  a
                                                                  c)
                                                                (mat_mult
                                                                  b
                                                                  d)))))))))))

;; kronecker_mult_commut_p_quant
(assert
  (forall ((a (matrix complex)) (b (matrix complex)))
    (=>
      (pow2dim a)
      (=>
        (pow2dim b)
        (forall ((c (matrix complex)) (d (matrix complex)))
          (=>
            (= (columns complex1 (t2tb65 a)) (rows complex1 (t2tb65 c)))
            (=>
              (= (columns complex1 (t2tb65 b)) (rows complex1 (t2tb65 d)))
              (=>
                (pow2dim c)
                (=>
                  (pow2dim d)
                  (= (mat_mult (kronecker a b) (kronecker c d)) (kronecker
                                                                  (mat_mult
                                                                    a
                                                                    c)
                                                                  (mat_mult
                                                                    b
                                                                    d))))))))))))

;; kronecker_add_distr_l
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (o (matrix complex)))
    (=>
      (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (=>
        (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
        (and
          (= (rows complex1 (t2tb65 (kronecker (add_mat m n) o))) (* 
          (rows
            complex1
            (t2tb65 m)) (rows complex1 (t2tb65 o))))
          (and
            (= (columns complex1 (t2tb65 (kronecker (add_mat m n) o))) (* 
            (columns
              complex1
              (t2tb65 m)) (columns complex1 (t2tb65 o))))
            (= (kronecker (add_mat m n) o) (add_mat
                                             (kronecker m o)
                                             (kronecker n o)))))))))

;; kronecker_add_distr_r
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (o (matrix complex)))
    (=>
      (= (rows complex1 (t2tb65 m)) (rows complex1 (t2tb65 n)))
      (=>
        (= (columns complex1 (t2tb65 m)) (columns complex1 (t2tb65 n)))
        (and
          (= (kronecker o (add_mat m n)) (add_mat
                                           (kronecker o m)
                                           (kronecker o n)))
          (and
            (= (rows complex1 (t2tb65 (kronecker o (add_mat m n)))) (* 
            (rows
              complex1
              (t2tb65 m)) (rows complex1 (t2tb65 o))))
            (= (columns complex1 (t2tb65 (kronecker o (add_mat m n)))) (* 
            (columns
              complex1
              (t2tb65 m)) (columns complex1 (t2tb65 o))))))))))

;; kronecker_ket_add_distr_r
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (x (matrix complex)) (l Int) (l1 Int) (l2 Int))
    (=>
      (= l (+ l1 l2))
      (=>
        (is_a_ket_l m l1)
        (=>
          (is_a_ket_l n l1)
          (=>
            (is_a_ket_l x l2)
            (= (add_ket_l (kronecker m x) (kronecker n x) l) (kronecker
                                                               (add_ket_l
                                                                 m
                                                                 n
                                                                 l1)
                                                               x))))))))

;; fc
(declare-fun fc440 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc440 a x x1)))))

;; fc
(declare-fun fc441 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc441 a x x1)))))

;; fc
(declare-fun fc442 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc442 a x x1)))))

;; fc
(declare-fun fc443 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc443 a x x1)))))

;; fc
(declare-fun fc444 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc444 a x x1)))))

;; fc
(declare-fun fc445 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc445 a x x1)))))

;; fc
(declare-fun fc446 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc446 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc440 a f m) k)) (kronecker
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k))
                                                                    m)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc441 a f m) k)) (kronecker
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k))
                                                                    m)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc442 a f m) k)) (kronecker
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k))
                                                                    m)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc443 a f m) k)) (kronecker
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k))
                                                                    m)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc444 a f m) k)) (kronecker
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k))
                                                                    m)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc445 a f m) k)) (kronecker
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k))
                                                                    m)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc446 a f m) k)) (kronecker
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k))
                                                                    m)))))

;; kronecker_sum_distr_l
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (m (matrix complex)))
      (=>
        (constant_size a s f)
        (=>
          (< 0 (cardinal a s))
          (and
            (and
              (= (columns complex1 (t2tb65 (mat_sum a s (fc440 a f m)))) 
              (columns
                complex1
                (infix_at (matrix1 complex1) a (fc441 a f m) (choose1 a s))))
              (= (columns
                   complex1
                   (infix_at
                     (matrix1 complex1)
                     a
                     (fc442 a f m)
                     (choose1 a s))) (* (columns complex1 (t2tb65 m)) 
              (columns
                complex1
                (infix_at (matrix1 complex1) a f (choose1 a s))))))
            (and
              (and
                (= (rows complex1 (t2tb65 (mat_sum a s (fc443 a f m)))) 
                (rows
                  complex1
                  (infix_at (matrix1 complex1) a (fc444 a f m) (choose1 a s))))
                (= (rows
                     complex1
                     (infix_at
                       (matrix1 complex1)
                       a
                       (fc445 a f m)
                       (choose1 a s))) (* (rows complex1 (t2tb65 m)) 
                (rows
                  complex1
                  (infix_at (matrix1 complex1) a f (choose1 a s))))))
              (= (kronecker (mat_sum a s f) m) (mat_sum a s (fc446 a f m))))))))))

;; fc
(declare-fun fc447 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc447 a x x1)))))

;; fc
(declare-fun fc448 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc448 a x x1)))))

;; fc
(declare-fun fc449 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc449 a x x1)))))

;; fc
(declare-fun fc450 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc450 a x x1)))))

;; fc
(declare-fun fc451 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc451 a x x1)))))

;; fc
(declare-fun fc452 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc452 a x x1)))))

;; fc
(declare-fun fc453 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc453 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc447 a f m) k)) (kronecker
                                                                    m
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k)))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc448 a f m) k)) (kronecker
                                                                    m
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k)))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc449 a f m) k)) (kronecker
                                                                    m
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k)))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc450 a f m) k)) (kronecker
                                                                    m
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k)))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc451 a f m) k)) (kronecker
                                                                    m
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k)))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc452 a f m) k)) (kronecker
                                                                    m
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k)))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc453 a f m) k)) (kronecker
                                                                    m
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k)))))))

;; kronecker_sum_distr_r
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (m (matrix complex)))
      (=>
        (constant_size a s f)
        (=>
          (< 0 (cardinal a s))
          (and
            (and
              (= (columns complex1 (t2tb65 (mat_sum a s (fc447 a f m)))) 
              (columns
                complex1
                (infix_at (matrix1 complex1) a (fc448 a f m) (choose1 a s))))
              (= (columns
                   complex1
                   (infix_at
                     (matrix1 complex1)
                     a
                     (fc449 a f m)
                     (choose1 a s))) (* (columns complex1 (t2tb65 m)) 
              (columns
                complex1
                (infix_at (matrix1 complex1) a f (choose1 a s))))))
            (and
              (and
                (= (rows complex1 (t2tb65 (mat_sum a s (fc450 a f m)))) 
                (rows
                  complex1
                  (infix_at (matrix1 complex1) a (fc451 a f m) (choose1 a s))))
                (= (rows
                     complex1
                     (infix_at
                       (matrix1 complex1)
                       a
                       (fc452 a f m)
                       (choose1 a s))) (* (rows complex1 (t2tb65 m)) 
                (rows
                  complex1
                  (infix_at (matrix1 complex1) a f (choose1 a s))))))
              (= (kronecker m (mat_sum a s f)) (mat_sum a s (fc453 a f m))))))))))

;; fc
(declare-fun fc454 (ty
  uni
  complex) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 complex))
      (sort (infix_mngt a (matrix1 complex1)) (fc454 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (a1 complex) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc454 a f a1) k)) (infix_asdtdt
                                                                    a1
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k)))))))

;; mat_sum_scalar
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (a1 complex))
      (=>
        (constant_size a s f)
        (=>
          (< 0 (cardinal a s))
          (= (mat_sum a s (fc454 a f a1)) (infix_asdtdt a1 (mat_sum a s f))))))))

;; fc
(declare-fun fc455 (ty
  uni
  (matrix complex)
  complex) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)) (x2 complex))
      (sort (infix_mngt a (matrix1 complex1)) (fc455 a x x1 x2)))))

;; fc
(declare-fun fc456 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc456 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (a1 complex) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc455 a f m a1) k)) 
      (kronecker
        (infix_asdtdt a1 (tb2t65 (infix_at (matrix1 complex1) a f k)))
        m)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc456 a f m) k)) (kronecker
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k))
                                                                    m)))))

;; kronecker_sum_distr_sc
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (m (matrix complex)) (a1 complex))
      (=>
        (constant_size a s f)
        (=>
          (< 0 (cardinal a s))
          (= (mat_sum a s (fc455 a f m a1)) (infix_asdtdt
                                              a1
                                              (mat_sum a s (fc456 a f m)))))))))

;; fc
(declare-fun fc457 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc457 a x x1)))))

;; fc
(declare-fun fc458 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc458 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc457 a f m) k)) (kronecker
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k))
                                                                    m)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc458 a f m) k)) (kronecker
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k))
                                                                    m)))))

;; kronecker_ket_sum_distr_l
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (m (matrix complex)) (l1 Int) (l2 Int))
      (=>
        (forall ((e uni))
          (=>
            (sort a e)
            (=>
              (mem a e s)
              (is_a_ket_l (tb2t65 (infix_at (matrix1 complex1) a f e)) l1))))
        (=>
          (is_a_ket_l m l2)
          (=>
            (< 0 (cardinal a s))
            (and
              (is_a_ket_l (ket_sum_l a s (fc457 a f m) (+ l1 l2)) (+ l1 l2))
              (= (kronecker (ket_sum_l a s f l1) m) (ket_sum_l
                                                      a
                                                      s
                                                      (fc458 a f m)
                                                      (+ l1 l2))))))))))

;; fc
(declare-fun fc459 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc459 a x x1)))))

;; fc
(declare-fun fc460 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc460 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc459 a f m) k)) (kronecker
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k))
                                                                    m)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc460 a f m) k)) (kronecker
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k))
                                                                    m)))))

;; kronecker_ket_sum_distr_l_nol
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (m (matrix complex)) (l1 Int))
      (=>
        (forall ((e uni))
          (=>
            (sort a e)
            (=>
              (mem a e s)
              (is_a_ket_l (tb2t65 (infix_at (matrix1 complex1) a f e)) l1))))
        (=>
          (is_a_ket m)
          (=>
            (< 0 (cardinal a s))
            (and
              (is_a_ket_l
                (ket_sum_l a s (fc459 a f m) (+ l1 (ket_length m)))
                (+ l1 (ket_length m)))
              (= (kronecker (ket_sum_l a s f l1) m) (ket_sum_l
                                                      a
                                                      s
                                                      (fc460 a f m)
                                                      (+ l1 (ket_length m)))))))))))

;; fc
(declare-fun fc461 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc461 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc461 a f m) k)) (kronecker
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k))
                                                                    m)))))

;; kronecker_ket_sum_distr_l_rew
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (m (matrix complex)) (l1 Int))
      (=>
        (forall ((e uni))
          (=>
            (sort a e)
            (=>
              (mem a e s)
              (is_a_ket_l (tb2t65 (infix_at (matrix1 complex1) a f e)) l1))))
        (=>
          (is_a_ket m)
          (=>
            (< 0 (cardinal a s))
            (= (kronecker (ket_sum_l a s f l1) m) (ket_sum_l
                                                    a
                                                    s
                                                    (fc461 a f m)
                                                    (+ l1 (ket_length m))))))))))

;; fc
(declare-fun fc462 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc462 a x x1)))))

;; fc
(declare-fun fc463 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc463 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc462 a f m) k)) (kronecker
                                                                    m
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k)))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc463 a f m) k)) (kronecker
                                                                    m
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k)))))))

;; kronecker_ket_sum_distr_r
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (m (matrix complex)) (l1 Int) (l2 Int))
      (=>
        (forall ((e uni))
          (=>
            (sort a e)
            (=>
              (mem a e s)
              (is_a_ket_l (tb2t65 (infix_at (matrix1 complex1) a f e)) l1))))
        (=>
          (is_a_ket_l m l2)
          (=>
            (< 0 (cardinal a s))
            (and
              (is_a_ket_l (ket_sum_l a s (fc462 a f m) (+ l1 l2)) (+ l1 l2))
              (= (kronecker m (ket_sum_l a s f l1)) (ket_sum_l
                                                      a
                                                      s
                                                      (fc463 a f m)
                                                      (+ l1 l2))))))))))

;; fc
(declare-fun fc464 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc464 a x x1)))))

;; fc
(declare-fun fc465 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc465 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc464 a f m) k)) (kronecker
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k))
                                                                    m)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc465 a f m) k)) (kronecker
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k))
                                                                    m)))))

;; kronecker_ket_sum_distr_l_rev
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (m (matrix complex)) (l1 Int) (l2 Int))
      (=>
        (forall ((e uni))
          (=>
            (sort a e)
            (=>
              (mem a e s)
              (is_a_ket_l (tb2t65 (infix_at (matrix1 complex1) a f e)) l1))))
        (=>
          (is_a_ket_l m l2)
          (=>
            (< 0 (cardinal a s))
            (and
              (is_a_ket_l (ket_sum_l a s (fc464 a f m) (+ l1 l2)) (+ l1 l2))
              (= (ket_sum_l a s (fc465 a f m) (+ l1 l2)) (kronecker
                                                           (ket_sum_l
                                                             a
                                                             s
                                                             f
                                                             l1)
                                                           m)))))))))

;; fc
(declare-fun fc466 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc466 a x x1)))))

;; fc
(declare-fun fc467 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc467 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc466 a f m) k)) (kronecker
                                                                    m
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k)))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc467 a f m) k)) (kronecker
                                                                    m
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k)))))))

;; kronecker_ket_sum_distr_r_rev
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (m (matrix complex)) (l1 Int) (l2 Int))
      (=>
        (forall ((e uni))
          (=>
            (sort a e)
            (=>
              (mem a e s)
              (is_a_ket_l (tb2t65 (infix_at (matrix1 complex1) a f e)) l1))))
        (=>
          (is_a_ket_l m l2)
          (=>
            (< 0 (cardinal a s))
            (and
              (is_a_ket_l (ket_sum_l a s (fc466 a f m) (+ l1 l2)) (+ l1 l2))
              (= (ket_sum_l a s (fc467 a f m) (+ l1 l2)) (kronecker
                                                           m
                                                           (ket_sum_l
                                                             a
                                                             s
                                                             f
                                                             l1))))))))))

;; fc
(declare-fun fc468 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc468 a x x1)))))

;; fc
(declare-fun fc469 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc469 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc468 a f m) k)) (kronecker
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k))
                                                                    m)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc469 a f m) k)) (kronecker
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k))
                                                                    m)))))

;; kronecker_ket_sum_distr_l_
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (m (matrix complex)) (l1 Int) (l2 Int))
      (=>
        (forall ((e uni))
          (=>
            (sort a e)
            (=>
              (mem a e s)
              (is_a_ket_l (tb2t65 (infix_at (matrix1 complex1) a f e)) l1))))
        (=>
          (is_a_ket_l m l2)
          (=>
            (<= 0 l1)
            (and
              (is_a_ket_l (ket_sum_l a s (fc468 a f m) (+ l1 l2)) (+ l1 l2))
              (= (kronecker (ket_sum_l a s f l1) m) (ket_sum_l
                                                      a
                                                      s
                                                      (fc469 a f m)
                                                      (+ l1 l2))))))))))

;; fc
(declare-fun fc470 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc470 a x x1)))))

;; fc
(declare-fun fc471 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc471 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc470 a f m) k)) (kronecker
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k))
                                                                    m)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc471 a f m) k)) (kronecker
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k))
                                                                    m)))))

;; kronecker_ket_sum_distr_l_nol_
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (m (matrix complex)) (l1 Int))
      (=>
        (forall ((e uni))
          (=>
            (sort a e)
            (=>
              (mem a e s)
              (is_a_ket_l (tb2t65 (infix_at (matrix1 complex1) a f e)) l1))))
        (=>
          (is_a_ket m)
          (=>
            (<= 0 l1)
            (and
              (is_a_ket_l
                (ket_sum_l a s (fc470 a f m) (+ l1 (ket_length m)))
                (+ l1 (ket_length m)))
              (= (kronecker (ket_sum_l a s f l1) m) (ket_sum_l
                                                      a
                                                      s
                                                      (fc471 a f m)
                                                      (+ l1 (ket_length m)))))))))))

;; fc
(declare-fun fc472 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc472 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc472 a f m) k)) (kronecker
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k))
                                                                    m)))))

;; kronecker_ket_sum_distr_l_rew_
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (m (matrix complex)) (l1 Int))
      (=>
        (forall ((e uni))
          (=>
            (sort a e)
            (=>
              (mem a e s)
              (is_a_ket_l (tb2t65 (infix_at (matrix1 complex1) a f e)) l1))))
        (=>
          (is_a_ket m)
          (=>
            (<= 0 l1)
            (= (kronecker (ket_sum_l a s f l1) m) (ket_sum_l
                                                    a
                                                    s
                                                    (fc472 a f m)
                                                    (+ l1 (ket_length m))))))))))

;; fc
(declare-fun fc473 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc473 a x x1)))))

;; fc
(declare-fun fc474 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc474 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc473 a f m) k)) (kronecker
                                                                    m
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k)))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc474 a f m) k)) (kronecker
                                                                    m
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k)))))))

;; kronecker_ket_sum_distr_r_
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (m (matrix complex)) (l1 Int) (l2 Int))
      (=>
        (forall ((e uni))
          (=>
            (sort a e)
            (=>
              (mem a e s)
              (is_a_ket_l (tb2t65 (infix_at (matrix1 complex1) a f e)) l1))))
        (=>
          (is_a_ket_l m l2)
          (=>
            (<= 0 l1)
            (and
              (is_a_ket_l (ket_sum_l a s (fc473 a f m) (+ l1 l2)) (+ l1 l2))
              (= (kronecker m (ket_sum_l a s f l1)) (ket_sum_l
                                                      a
                                                      s
                                                      (fc474 a f m)
                                                      (+ l1 l2))))))))))

;; fc
(declare-fun fc475 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc475 a x x1)))))

;; fc
(declare-fun fc476 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc476 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc475 a f m) k)) (kronecker
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k))
                                                                    m)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc476 a f m) k)) (kronecker
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k))
                                                                    m)))))

;; kronecker_ket_sum_distr_l_rev_
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (m (matrix complex)) (l1 Int) (l2 Int))
      (=>
        (forall ((e uni))
          (=>
            (sort a e)
            (=>
              (mem a e s)
              (is_a_ket_l (tb2t65 (infix_at (matrix1 complex1) a f e)) l1))))
        (=>
          (is_a_ket_l m l2)
          (=>
            (<= 0 l1)
            (and
              (is_a_ket_l (ket_sum_l a s (fc475 a f m) (+ l1 l2)) (+ l1 l2))
              (= (ket_sum_l a s (fc476 a f m) (+ l1 l2)) (kronecker
                                                           (ket_sum_l
                                                             a
                                                             s
                                                             f
                                                             l1)
                                                           m)))))))))

;; fc
(declare-fun fc477 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc477 a x x1)))))

;; fc
(declare-fun fc478 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc478 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc477 a f m) k)) (kronecker
                                                                    m
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k)))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc478 a f m) k)) (kronecker
                                                                    m
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k)))))))

;; kronecker_ket_sum_distr_r_rev_
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (m (matrix complex)) (l1 Int) (l2 Int))
      (=>
        (forall ((e uni))
          (=>
            (sort a e)
            (=>
              (mem a e s)
              (is_a_ket_l (tb2t65 (infix_at (matrix1 complex1) a f e)) l1))))
        (=>
          (is_a_ket_l m l2)
          (=>
            (<= 0 l1)
            (and
              (is_a_ket_l (ket_sum_l a s (fc477 a f m) (+ l1 l2)) (+ l1 l2))
              (= (ket_sum_l a s (fc478 a f m) (+ l1 l2)) (kronecker
                                                           m
                                                           (ket_sum_l
                                                             a
                                                             s
                                                             f
                                                             l1))))))))))

;; fc
(declare-fun fc479 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc479 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc479 a f m) k)) (kronecker
                                                                    m
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k)))))))

;; kronecker_ket_sum_distr_r_rew
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (m (matrix complex)) (l1 Int))
      (=>
        (forall ((e uni))
          (=>
            (sort a e)
            (=>
              (mem a e s)
              (is_a_ket_l (tb2t65 (infix_at (matrix1 complex1) a f e)) l1))))
        (=>
          (is_a_ket m)
          (=>
            (< 0 (cardinal a s))
            (= (kronecker m (ket_sum_l a s f l1)) (ket_sum_l
                                                    a
                                                    s
                                                    (fc479 a f m)
                                                    (+ l1 (ket_length m))))))))))

;; fc
(declare-fun fc480 (ty
  uni
  complex) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 complex))
      (sort (infix_mngt a (matrix1 complex1)) (fc480 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (a1 complex) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc480 a f a1) k)) (infix_asdtdt
                                                                    a1
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k)))))))

;; ket_sum_scalar
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (a1 complex) (l Int))
      (=>
        (forall ((e uni))
          (=>
            (sort a e)
            (=>
              (mem a e s)
              (is_a_ket_l (tb2t65 (infix_at (matrix1 complex1) a f e)) l))))
        (=>
          (< 0 (cardinal a s))
          (= (ket_sum_l a s (fc480 a f a1) l) (infix_asdtdt
                                                a1
                                                (ket_sum_l a s f l))))))))

;; fc
(declare-fun fc481 (ty
  uni
  (matrix complex)
  complex) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)) (x2 complex))
      (sort (infix_mngt a (matrix1 complex1)) (fc481 a x x1 x2)))))

;; fc
(declare-fun fc482 (ty
  uni
  (matrix complex)) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni) (x1 (matrix complex)))
      (sort (infix_mngt a (matrix1 complex1)) (fc482 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (a1 complex) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc481 a f m a1) k)) 
      (kronecker
        (infix_asdtdt a1 (tb2t65 (infix_at (matrix1 complex1) a f k)))
        m)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (m (matrix complex)) (k uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc482 a f m) k)) (kronecker
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    k))
                                                                    m)))))

;; kronecker_ket_sum_distr_sc
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni) (m (matrix complex)) (a1 complex) (l1 Int) (l2 Int))
      (=>
        (forall ((e uni))
          (=>
            (sort a e)
            (=>
              (mem a e s)
              (is_a_ket_l (tb2t65 (infix_at (matrix1 complex1) a f e)) l1))))
        (=>
          (is_a_ket_l m l2)
          (=>
            (< 0 (cardinal a s))
            (= (ket_sum_l a s (fc481 a f m a1) (+ l1 l2)) (infix_asdtdt
                                                            a1
                                                            (ket_sum_l
                                                              a
                                                              s
                                                              (fc482 a f m)
                                                              (+ l1 l2))))))))))

;; fc
(declare-fun fc483 ((matrix complex)
  (matrix complex)) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (x bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc483 m n))
           (t2tb77 x))) (infix_asdtdt
                          (tb2t (get complex1 (t2tb65 n) (bv_to_int x) 0))
                          (kronecker m (bv_to_ket x))))))

;; kronecker_decomp_r
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (lm Int) (ln Int))
    (=>
      (is_a_ket_l m lm)
      (=>
        (is_a_ket_l n ln)
        (= (kronecker m n) (ket_sum_l
                             bitvec1
                             (t2tb79 (n_bvs ln))
                             (t2tb80 (fc483 m n))
                             (+ lm ln)))))))

;; fc
(declare-fun fc484 ((matrix complex)
  (matrix complex)) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (x bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc484 m n))
           (t2tb77 x))) (infix_asdtdt
                          (tb2t (get complex1 (t2tb65 m) (bv_to_int x) 0))
                          (kronecker (bv_to_ket x) n)))))

;; kronecker_decomp_l
(assert
  (forall ((m (matrix complex)) (n (matrix complex)) (lm Int) (ln Int))
    (=>
      (is_a_ket_l m lm)
      (=>
        (is_a_ket_l n ln)
        (= (kronecker m n) (ket_sum_l
                             bitvec1
                             (t2tb79 (n_bvs lm))
                             (t2tb80 (fc484 m n))
                             (+ lm ln)))))))

;; fc
(declare-fun fc485 (Int
  (Array bitvec (matrix complex))
  (Array bitvec (matrix complex))) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((i Int) (f (Array bitvec (matrix complex))) (g (Array bitvec (matrix complex))) (k bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc485 i f g))
           (t2tb77 k))) (kronecker
                          (tb2t65
                            (infix_at
                              (matrix1 complex1)
                              bitvec1
                              (t2tb80 f)
                              (t2tb77 (hpart k i))))
                          (tb2t65
                            (infix_at
                              (matrix1 complex1)
                              bitvec1
                              (t2tb80 g)
                              (t2tb77 (tpart k i))))))))

;; kronecker_ket_sum_distr_double
(assert
  (forall ((i Int) (j Int) (f (Array bitvec (matrix complex))) (g (Array bitvec (matrix complex))) (l1 Int) (l2 Int))
    (=>
      (<= 0 i)
      (=>
        (<= 0 j)
        (=>
          (forall ((bv1 bitvec))
            (=>
              (mem bitvec1 (t2tb77 bv1) (t2tb79 (n_bvs i)))
              (is_a_ket_l
                (tb2t65
                  (infix_at
                    (matrix1 complex1)
                    bitvec1
                    (t2tb80 f)
                    (t2tb77 bv1)))
                l1)))
          (=>
            (forall ((bv1 bitvec))
              (=>
                (mem bitvec1 (t2tb77 bv1) (t2tb79 (n_bvs j)))
                (is_a_ket_l
                  (tb2t65
                    (infix_at
                      (matrix1 complex1)
                      bitvec1
                      (t2tb80 g)
                      (t2tb77 bv1)))
                  l2)))
            (= (kronecker
                 (ket_sum_l bitvec1 (t2tb79 (n_bvs i)) (t2tb80 f) l1)
                 (ket_sum_l bitvec1 (t2tb79 (n_bvs j)) (t2tb80 g) l2)) 
            (ket_sum_l
              bitvec1
              (t2tb79 (n_bvs (+ i j)))
              (t2tb80 (fc485 i f g))
              (+ l1 l2)))))))))

;; kronecker_add_null
(assert
  (forall ((m (matrix complex)) (m1 (matrix complex)) (m2 (matrix complex)) (x (matrix complex)) (xqt (matrix complex)) (l1 Int) (l2 Int))
    (=>
      (is_a_ket_l m l1)
      (=>
        (is_a_ket_l m1 l1)
        (=>
          (is_a_ket_l m2 l1)
          (=>
            (is_a_ket_l x l2)
            (=>
              (is_a_ket_l xqt l2)
              (=>
                (is_a_ket_basis_elt x)
                (=>
                  (is_a_ket_basis_elt xqt)
                  (=>
                    (not (= (ket_to_int x) (ket_to_int xqt)))
                    (=>
                      (= (kronecker m x) (add_ket_l
                                           (kronecker m1 x)
                                           (kronecker m2 xqt)
                                           (+ l1 l2)))
                      (and
                        (null_mat (kronecker m2 xqt))
                        (and
                          (null_mat m2)
                          (forall ((xqt1 (matrix complex)))
                            (null_mat (kronecker m2 xqt1))))))))))))))))

;; kronecker_injec_eq_left
(assert
  (forall ((m (matrix complex)) (mqt (matrix complex)) (o (matrix complex)))
    (=>
      (= (kronecker m o) (kronecker mqt o))
      (=> (not (null_mat o)) (= m mqt)))))

;; pps_apply_equiv
(declare-fun pps_apply_equiv (pps
  pps) Bool)

;; pps_apply_equiv'def
(assert
  (forall ((h1 pps) (h2 pps))
    (=
      (pps_apply_equiv h1 h2)
      (and
        (= (h_width h1) (h_width h2))
        (forall ((x (matrix complex)))
          (=>
            (is_a_ket_l x (h_width h1))
            (= (pps_apply h1 x) (pps_apply h2 x))))))))

;; set_pps_apply_equiv
(assert
  (forall ((h1 pps) (h2 pps))
    (=>
      (= (h_width h1) (h_width h2))
      (=>
        (forall ((x bitvec))
          (=>
            (= (length x) (h_width h1))
            (= (pps_apply_basis h1 x) (pps_apply_basis h2 x))))
        (pps_apply_equiv h1 h2)))))

;; set_pps_apply_equiv_sim
(assert
  (forall ((h1 pps) (h2 pps))
    (=>
      (= (h_width h1) (h_width h2))
      (=>
        (= (h_range h1) (h_range h2))
        (=>
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (forall ((i Int))
              (=>
                (forall ((j Int))
                  (=>
                    (and (<= 0 j) (< j (h_width h1)))
                    (and (<= 0 (select x j)) (< (select x j) 2))))
                (=>
                  (forall ((j Int))
                    (=>
                      (and (<= 0 j) (< j (h_range h1)))
                      (and (<= 0 (select y j)) (< (select y j) 2))))
                  (=>
                    (and (<= 0 i) (< i (h_width h1)))
                    (= (select (select (select (h_basis_ket h1) x) y) i) (select (select (select 
                    (h_basis_ket
                      h2) x) y) i)))))))
          (=>
            (forall ((x (Array Int Int)) (y (Array Int Int)))
              (=>
                (forall ((j Int))
                  (=>
                    (and (<= 0 j) (< j (h_width h1)))
                    (and (<= 0 (select x j)) (< (select x j) 2))))
                (=>
                  (forall ((j Int))
                    (=>
                      (and (<= 0 j) (< j (h_range h1)))
                      (and (<= 0 (select y j)) (< (select y j) 2))))
                  (= (tb2t84
                       (infix_at
                         angle1
                         (infix_mngt int int)
                         (infix_at
                           (infix_mngt (infix_mngt int int) angle1)
                           (infix_mngt int int)
                           (t2tb118 (h_angle h1))
                           (t2tb7 x))
                         (t2tb7 y))) (tb2t84
                                       (infix_at
                                         angle1
                                         (infix_mngt int int)
                                         (infix_at
                                           (infix_mngt
                                             (infix_mngt int int)
                                             angle1)
                                           (infix_mngt int int)
                                           (t2tb118 (h_angle h2))
                                           (t2tb7 x))
                                         (t2tb7 y)))))))
            (pps_apply_equiv h1 h2)))))))

;; get_pps_apply_equiv
(assert
  (forall ((h1 pps) (h2 pps) (x (matrix complex)))
    (=>
      (= (h_width h1) (h_width h2))
      (=>
        (pps_apply_equiv h1 h2)
        (=>
          (is_a_ket_l x (h_width h1))
          (= (pps_apply h1 x) (pps_apply h2 x)))))))

;; get_pps_apply_basis_equiv
(assert
  (forall ((h1 pps) (h2 pps) (x bitvec))
    (=>
      (= (h_width h1) (h_width h2))
      (=>
        (pps_apply_equiv h1 h2)
        (=>
          (= (length x) (h_width h1))
          (= (pps_apply_basis h1 x) (pps_apply_basis h2 x)))))))

;; reflexive_pps_apply_equiv
(assert (forall ((h pps)) (pps_apply_equiv h h)))

;; commut_pps_apply_equiv
(assert
  (forall ((h pps) (hqt pps))
    (=> (pps_apply_equiv h hqt) (pps_apply_equiv hqt h))))

;; transitive_pps_apply_equiv
(assert
  (forall ((h pps) (hqt pps) (hqtqt pps))
    (=>
      (pps_apply_equiv h hqt)
      (=> (pps_apply_equiv hqt hqtqt) (pps_apply_equiv h hqtqt)))))

;; pps_apply_basis_seq
(assert
  (forall ((h1 pps) (h2 pps) (x bitvec))
    (=>
      (= (length x) (h_width h1))
      (=>
        (= (h_width h1) (h_width h2))
        (= (pps_apply_basis (pps_seq h1 h2) x) (pps_apply
                                                 h2
                                                 (pps_apply_basis h1 x)))))))

;; pps_apply_seq
(assert
  (forall ((h1 pps) (h2 pps) (x (matrix complex)))
    (=>
      (= (h_width h1) (h_width h2))
      (=>
        (is_a_ket_l x (h_width h1))
        (= (pps_apply (pps_seq h1 h2) x) (pps_apply h2 (pps_apply h1 x)))))))

;; fc
(declare-fun fc486 (pps
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc487 (pps
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((h1 pps) (y (Array Int Int)) (k Int))
    (= (select (fc486 h1 y) k) (select y (+ k (h_range h1))))))

;; fc'def
(assert
  (forall ((h1 pps) (y (Array Int Int)) (k Int))
    (= (select (fc487 h1 y) k) (select y (+ k (h_range h1))))))

;; pps_seq_pred
(assert
  (forall ((h1 pps) (h2 pps) (h3 pps))
    (=>
      (and (= (h_width h1) (h_width h2)) (= (h_width h2) (h_width h3)))
      (=>
        (= (h_range h3) (+ (h_range h1) (h_range h2)))
        (=>
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (forall ((i Int))
              (=>
                (forall ((j Int))
                  (=>
                    (and (<= 0 j) (< j (h_width h3)))
                    (and (<= 0 (select x j)) (< (select x j) 2))))
                (=>
                  (forall ((j Int))
                    (=>
                      (and (<= 0 j) (< j (h_range h3)))
                      (and (<= 0 (select y j)) (< (select y j) 2))))
                  (=>
                    (and (<= 0 i) (< i (h_width h3)))
                    (= (select (select (select (h_basis_ket h3) x) y) i) (select (select (select 
                    (h_basis_ket
                      h2) (select (select (h_basis_ket h1) x) y)) (fc486
                                                                    h1
                                                                    y)) i)))))))
          (=>
            (forall ((x (Array Int Int)) (y (Array Int Int)))
              (=>
                (forall ((j Int))
                  (=>
                    (and (<= 0 j) (< j (h_width h3)))
                    (and (<= 0 (select x j)) (< (select x j) 2))))
                (=>
                  (forall ((j Int))
                    (=>
                      (and (<= 0 j) (< j (h_range h3)))
                      (and (<= 0 (select y j)) (< (select y j) 2))))
                  (= (tb2t84
                       (infix_at
                         angle1
                         (infix_mngt int int)
                         (infix_at
                           (infix_mngt (infix_mngt int int) angle1)
                           (infix_mngt int int)
                           (t2tb118 (h_angle h3))
                           (t2tb7 x))
                         (t2tb7 y))) (ang_add
                                       (tb2t84
                                         (infix_at
                                           angle1
                                           (infix_mngt int int)
                                           (infix_at
                                             (infix_mngt
                                               (infix_mngt int int)
                                               angle1)
                                             (infix_mngt int int)
                                             (t2tb118 (h_angle h1))
                                             (t2tb7 x))
                                           (t2tb7 y)))
                                       (tb2t84
                                         (infix_at
                                           angle1
                                           (infix_mngt int int)
                                           (infix_at
                                             (infix_mngt
                                               (infix_mngt int int)
                                               angle1)
                                             (infix_mngt int int)
                                             (t2tb118 (h_angle h2))
                                             (t2tb7
                                               (select (select (h_basis_ket
                                                                 h1) x) y)))
                                           (t2tb7 (fc487 h1 y)))))))))
            (forall ((x (matrix complex)))
              (=>
                (is_a_ket_l x (h_width h3))
                (= (pps_apply h3 x) (pps_apply h2 (pps_apply h1 x)))))))))))

;; pps_apply_basis_par
(assert
  (forall ((h1 pps) (h2 pps) (x bitvec))
    (=>
      (= (length x) (+ (h_width h1) (h_width h2)))
      (= (pps_apply_basis (pps_par h1 h2) x) (kronecker
                                               (pps_apply_basis
                                                 h1
                                                 (hpart x (h_width h1)))
                                               (pps_apply_basis
                                                 h2
                                                 (tpart x (h_width h1))))))))

;; pps_apply_par
(assert
  (forall ((h1 pps) (h2 pps) (x (matrix complex)) (y (matrix complex)))
    (=>
      (is_a_ket_l x (h_width h1))
      (=>
        (is_a_ket_l y (h_width h2))
        (= (pps_apply (pps_par h1 h2) (kronecker x y)) (kronecker
                                                         (pps_apply h1 x)
                                                         (pps_apply h2 y)))))))

;; fc
(declare-fun fc488 (pps
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc489 (pps
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc490 (pps
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc491 (pps
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((h1 pps) (x (Array Int Int)) (k Int))
    (= (select (fc488 h1 x) k) (select x (+ k (h_width h1))))))

;; fc'def
(assert
  (forall ((h1 pps) (y (Array Int Int)) (k Int))
    (= (select (fc489 h1 y) k) (select y (+ k (h_range h1))))))

;; fc'def
(assert
  (forall ((h1 pps) (x (Array Int Int)) (k Int))
    (= (select (fc490 h1 x) k) (select x (+ k (h_width h1))))))

;; fc'def
(assert
  (forall ((h1 pps) (y (Array Int Int)) (k Int))
    (= (select (fc491 h1 y) k) (select y (+ k (h_range h1))))))

;; pps_par_pred
(assert
  (forall ((h1 pps) (h2 pps) (h3 pps))
    (=>
      (= (h_width h3) (+ (h_width h1) (h_width h2)))
      (=>
        (= (h_range h3) (+ (h_range h1) (h_range h2)))
        (=>
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (forall ((i Int))
              (=>
                (forall ((j Int))
                  (=>
                    (and (<= 0 j) (< j (h_width h3)))
                    (and (<= 0 (select x j)) (< (select x j) 2))))
                (=>
                  (forall ((j Int))
                    (=>
                      (and (<= 0 j) (< j (h_range h3)))
                      (and (<= 0 (select y j)) (< (select y j) 2))))
                  (=>
                    (and (<= 0 i) (< i (h_width h3)))
                    (= (select (select (select (h_basis_ket h3) x) y) i) 
                    (ite (< i (h_width h1))
                      (select (select (select (h_basis_ket h1) x) y) i)
                      (select (select (select (h_basis_ket h2) (fc488 h1 x)) 
                      (fc489
                        h1
                        y)) (- i (h_width h1))))))))))
          (=>
            (forall ((x (Array Int Int)) (y (Array Int Int)))
              (=>
                (forall ((j Int))
                  (=>
                    (and (<= 0 j) (< j (h_width h3)))
                    (and (<= 0 (select x j)) (< (select x j) 2))))
                (=>
                  (forall ((j Int))
                    (=>
                      (and (<= 0 j) (< j (h_range h3)))
                      (and (<= 0 (select y j)) (< (select y j) 2))))
                  (= (tb2t84
                       (infix_at
                         angle1
                         (infix_mngt int int)
                         (infix_at
                           (infix_mngt (infix_mngt int int) angle1)
                           (infix_mngt int int)
                           (t2tb118 (h_angle h3))
                           (t2tb7 x))
                         (t2tb7 y))) (ang_add
                                       (tb2t84
                                         (infix_at
                                           angle1
                                           (infix_mngt int int)
                                           (infix_at
                                             (infix_mngt
                                               (infix_mngt int int)
                                               angle1)
                                             (infix_mngt int int)
                                             (t2tb118 (h_angle h1))
                                             (t2tb7 x))
                                           (t2tb7 y)))
                                       (tb2t84
                                         (infix_at
                                           angle1
                                           (infix_mngt int int)
                                           (infix_at
                                             (infix_mngt
                                               (infix_mngt int int)
                                               angle1)
                                             (infix_mngt int int)
                                             (t2tb118 (h_angle h2))
                                             (t2tb7 (fc490 h1 x)))
                                           (t2tb7 (fc491 h1 y)))))))))
            (forall ((x (matrix complex)) (y (matrix complex)))
              (=>
                (is_a_ket_l x (h_width h1))
                (=>
                  (is_a_ket_l y (h_width h2))
                  (= (pps_apply h3 (kronecker x y)) (kronecker
                                                      (pps_apply h1 x)
                                                      (pps_apply h2 y))))))))))))

;; pps_apply_basis_anc
(assert
  (forall ((h pps) (x bitvec) (y (matrix complex)) (i Int))
    (=>
      (<= 1 i)
      (=>
        (< i (h_width h))
        (=>
          (= (length x) (h_width h))
          (=>
            (= (tpart x (- (h_width h) i)) (int_to_bv 0 i))
            (=>
              (= (pps_apply_basis h x) (kronecker y (ket i 0)))
              (=>
                (is_a_ket_l y (- (h_width h) i))
                (= (pps_apply_basis
                     (pps_ancs h i)
                     (hpart x (- (h_width h) i))) y)))))))))

;; pps_apply_basis_anc_
(assert
  (forall ((h pps) (x bitvec) (y (matrix complex)) (i Int))
    (=>
      (<= 1 i)
      (=>
        (< i (h_width h))
        (=>
          (= (length x) (- (h_width h) i))
          (=>
            (= (pps_apply_basis h (concat1 x (int_to_bv 0 i))) (kronecker
                                                                 y
                                                                 (ket i 0)))
            (=>
              (is_a_ket_l y (- (h_width h) i))
              (= (pps_apply_basis (pps_ancs h i) x) y))))))))

;; pps_apply_anc
(assert
  (forall ((h pps) (path_sem_target (Array (matrix complex) (matrix complex))) (x (matrix complex)) (i Int))
    (=>
      (<= 1 i)
      (=>
        (< i (h_width h))
        (=>
          (is_a_ket_l x (- (h_width h) i))
          (=>
            (forall ((x1 (matrix complex)))
              (=>
                (is_a_ket_l x1 (- (h_width h) i))
                (= (pps_apply h (kronecker x1 (ket i 0))) (kronecker
                                                            (tb2t65
                                                              (infix_at
                                                                (matrix1
                                                                  complex1)
                                                                (matrix1
                                                                  complex1)
                                                                (t2tb66
                                                                  path_sem_target)
                                                                (t2tb65 x1)))
                                                            (ket i 0)))))
            (=>
              (is_a_ket_l x (- (h_width h) i))
              (= (pps_apply (pps_ancs h i) x) (tb2t65
                                                (infix_at
                                                  (matrix1 complex1)
                                                  (matrix1 complex1)
                                                  (t2tb66 path_sem_target)
                                                  (t2tb65 x)))))))))))

;; pps_apply_equiv_seq
(assert
  (forall ((h1 pps) (h1qt pps) (h2 pps) (h2qt pps))
    (=>
      (pps_apply_equiv h1 h1qt)
      (=>
        (pps_apply_equiv h2 h2qt)
        (=>
          (= (h_width h1) (h_width h2))
          (pps_apply_equiv (pps_seq h1 h2) (pps_seq h1qt h2qt)))))))

;; pps_apply_equiv_par
(assert
  (forall ((h1 pps) (h1qt pps) (h2 pps) (h2qt pps))
    (=>
      (pps_apply_equiv h1 h1qt)
      (=>
        (pps_apply_equiv h2 h2qt)
        (pps_apply_equiv (pps_par h1 h2) (pps_par h1qt h2qt))))))

;; pps_apply_equiv_anc
(assert
  (forall ((h pps) (hqt pps) (i Int))
    (=>
      (<= 1 i)
      (=>
        (< i (h_width h))
        (=>
          (pps_apply_equiv h hqt)
          (=>
            (exists ((path_sem_target (Array (matrix complex) (matrix complex))))
              (forall ((y (matrix complex)))
                (=>
                  (is_a_ket_l y (- (h_width h) i))
                  (= (pps_apply h (kronecker y (ket i 0))) (kronecker
                                                             (tb2t65
                                                               (infix_at
                                                                 (matrix1
                                                                   complex1)
                                                                 (matrix1
                                                                   complex1)
                                                                 (t2tb66
                                                                   path_sem_target)
                                                                 (t2tb65 y)))
                                                             (ket i 0))))))
            (pps_apply_equiv (pps_ancs h i) (pps_ancs hqt i))))))))

;; pps_place_image
(assert
  (forall ((h pps) (k Int) (n Int) (x bitvec) (y bitvec) (z bitvec))
    (=>
      (<= 0 k)
      (=>
        (<= (+ k (h_width h)) n)
        (=>
          (= (length x) k)
          (=>
            (= (length y) (h_width h))
            (=>
              (= (length z) (- (- n (h_width h)) k))
              (= (pps_apply_basis
                   (pps_place h k n)
                   (concat1 (concat1 x y) z)) (kronecker
                                                (kronecker
                                                  (bv_to_ket x)
                                                  (pps_apply_basis h y))
                                                (bv_to_ket z))))))))))

;; pps_place_image_bv
(assert
  (forall ((h pps) (t Int) (n Int) (x bitvec))
    (=>
      (<= 0 t)
      (=>
        (<= (+ t (h_width h)) n)
        (=>
          (= (length x) n)
          (= (pps_apply_basis (pps_place h t n) x) (kronecker
                                                     (kronecker
                                                       (bv_to_ket
                                                         (hpart x t))
                                                       (pps_apply_basis
                                                         h
                                                         (htpart
                                                           x
                                                           t
                                                           (h_width h))))
                                                     (bv_to_ket
                                                       (tpart
                                                         x
                                                         (+ t (h_width h)))))))))))

;; pps_apply_equiv_place
(assert
  (forall ((h pps) (hqt pps) (t Int) (n Int) (tqt Int) (nqt Int))
    (=>
      (<= 0 t)
      (=>
        (<= (+ t (h_width h)) n)
        (=>
          (= t tqt)
          (=>
            (= n nqt)
            (=>
              (pps_apply_equiv h hqt)
              (pps_apply_equiv (pps_place h t n) (pps_place hqt tqt nqt)))))))))

;; pps_apply_equiv_cont
(assert
  (forall ((h pps) (hqt pps) (co Int) (t Int) (n Int) (coqt Int) (tqt Int) (nqt Int))
    (=>
      (= co coqt)
      (=>
        (= t tqt)
        (=>
          (= n nqt)
          (=>
            (and (<= 0 t) (<= t (- n (h_width h))))
            (=>
              (and (<= 0 co) (< co n))
              (=>
                (=> (<= t co) (<= (+ t (h_width h)) co))
                (=>
                  (pps_apply_equiv h hqt)
                  (pps_apply_equiv
                    (pps_cont h co t n)
                    (pps_cont hqt coqt tqt nqt)))))))))))

;; fc
(declare-fun fc492 (pps
  Int
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc493 (pps
  Int
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((h1 pps) (i Int) (x (Array Int Int)) (k Int))
    (= (select (fc492 h1 i x) k) (ite (< k (- (h_width h1) i))
                                   (select x k)
                                   0))))

;; fc'def
(assert
  (forall ((h1 pps) (i Int) (x (Array Int Int)) (k Int))
    (= (select (fc493 h1 i x) k) (ite (< k (- (h_width h1) i))
                                   (select x k)
                                   0))))

;; pps_anc_pred
(assert
  (forall ((h1 pps) (h2 pps) (path_sem_target (Array (matrix complex) (matrix complex))) (i Int))
    (=>
      (<= 1 i)
      (=>
        (< i (h_width h1))
        (=>
          (forall ((y (matrix complex)))
            (=>
              (is_a_ket_l y (- (h_width h1) i))
              (= (pps_apply h1 (kronecker y (ket i 0))) (kronecker
                                                          (tb2t65
                                                            (infix_at
                                                              (matrix1
                                                                complex1)
                                                              (matrix1
                                                                complex1)
                                                              (t2tb66
                                                                path_sem_target)
                                                              (t2tb65 y)))
                                                          (ket i 0)))))
          (=>
            (= (h_width h2) (- (h_width h1) i))
            (=>
              (= (h_range h2) (h_range h1))
              (=>
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (forall ((ii Int))
                    (=>
                      (forall ((j Int))
                        (=>
                          (and (<= 0 j) (< j (h_width h2)))
                          (and (<= 0 (select x j)) (< (select x j) 2))))
                      (=>
                        (forall ((j Int))
                          (=>
                            (and (<= 0 j) (< j (h_range h2)))
                            (and (<= 0 (select y j)) (< (select y j) 2))))
                        (=>
                          (and (<= 0 ii) (< ii (h_width h2)))
                          (= (select (select (select (h_basis_ket h2) x) y) ii) (select (select (select 
                          (h_basis_ket
                            h1) (fc492 h1 i x)) y) ii)))))))
                (=>
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (=>
                      (forall ((j Int))
                        (=>
                          (and (<= 0 j) (< j (h_width h2)))
                          (and (<= 0 (select x j)) (< (select x j) 2))))
                      (=>
                        (forall ((j Int))
                          (=>
                            (and (<= 0 j) (< j (h_range h2)))
                            (and (<= 0 (select y j)) (< (select y j) 2))))
                        (= (tb2t84
                             (infix_at
                               angle1
                               (infix_mngt int int)
                               (infix_at
                                 (infix_mngt (infix_mngt int int) angle1)
                                 (infix_mngt int int)
                                 (t2tb118 (h_angle h2))
                                 (t2tb7 x))
                               (t2tb7 y))) (tb2t84
                                             (infix_at
                                               angle1
                                               (infix_mngt int int)
                                               (infix_at
                                                 (infix_mngt
                                                   (infix_mngt int int)
                                                   angle1)
                                                 (infix_mngt int int)
                                                 (t2tb118 (h_angle h1))
                                                 (t2tb7 (fc493 h1 i x)))
                                               (t2tb7 y)))))))
                  (forall ((x bitvec))
                    (=>
                      (= (length x) (h_width h2))
                      (= (pps_apply_basis h2 x) (tb2t65
                                                  (infix_at
                                                    (matrix1 complex1)
                                                    (matrix1 complex1)
                                                    (t2tb66 path_sem_target)
                                                    (t2tb65 (bv_to_ket x))))))))))))))))

;; fc
(declare-fun fc494 (pps
  Int
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc495 (pps
  Int
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((h1 pps) (i Int) (x (Array Int Int)) (k Int))
    (= (select (fc494 h1 i x) k) (ite (< k (- (h_width h1) i))
                                   (select x k)
                                   0))))

;; fc'def
(assert
  (forall ((h1 pps) (i Int) (x (Array Int Int)) (k Int))
    (= (select (fc495 h1 i x) k) (ite (< k (- (h_width h1) i))
                                   (select x k)
                                   0))))

;; pps_anc_pred_
(assert
  (forall ((h1 pps) (h2 pps) (i Int))
    (=>
      (<= 1 i)
      (=>
        (< i (h_width h1))
        (=>
          (exists ((path_sem_target (Array (matrix complex) (matrix complex))))
            (forall ((y (matrix complex)))
              (=>
                (is_a_ket_l y (- (h_width h1) i))
                (= (pps_apply h1 (kronecker y (ket i 0))) (kronecker
                                                            (tb2t65
                                                              (infix_at
                                                                (matrix1
                                                                  complex1)
                                                                (matrix1
                                                                  complex1)
                                                                (t2tb66
                                                                  path_sem_target)
                                                                (t2tb65 y)))
                                                            (ket i 0))))))
          (=>
            (= (h_width h2) (- (h_width h1) i))
            (=>
              (= (h_range h2) (h_range h1))
              (=>
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (forall ((ii Int))
                    (=>
                      (forall ((j Int))
                        (=>
                          (and (<= 0 j) (< j (h_width h2)))
                          (and (<= 0 (select x j)) (< (select x j) 2))))
                      (=>
                        (forall ((j Int))
                          (=>
                            (and (<= 0 j) (< j (h_range h2)))
                            (and (<= 0 (select y j)) (< (select y j) 2))))
                        (=>
                          (and (<= 0 ii) (< ii (h_width h2)))
                          (= (select (select (select (h_basis_ket h2) x) y) ii) (select (select (select 
                          (h_basis_ket
                            h1) (fc494 h1 i x)) y) ii)))))))
                (=>
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (=>
                      (forall ((j Int))
                        (=>
                          (and (<= 0 j) (< j (h_width h2)))
                          (and (<= 0 (select x j)) (< (select x j) 2))))
                      (=>
                        (forall ((j Int))
                          (=>
                            (and (<= 0 j) (< j (h_range h2)))
                            (and (<= 0 (select y j)) (< (select y j) 2))))
                        (= (tb2t84
                             (infix_at
                               angle1
                               (infix_mngt int int)
                               (infix_at
                                 (infix_mngt (infix_mngt int int) angle1)
                                 (infix_mngt int int)
                                 (t2tb118 (h_angle h2))
                                 (t2tb7 x))
                               (t2tb7 y))) (tb2t84
                                             (infix_at
                                               angle1
                                               (infix_mngt int int)
                                               (infix_at
                                                 (infix_mngt
                                                   (infix_mngt int int)
                                                   angle1)
                                                 (infix_mngt int int)
                                                 (t2tb118 (h_angle h1))
                                                 (t2tb7 (fc495 h1 i x)))
                                               (t2tb7 y)))))))
                  (forall ((x bitvec))
                    (=>
                      (= (length x) (h_width h2))
                      (= (pps_apply_basis h1 (concat1 x (int_to_bv 0 i))) 
                      (kronecker
                        (pps_apply_basis h2 x)
                        (ket i 0))))))))))))))

;; pps_to_mat
(declare-fun pps_to_mat (pps) (matrix complex))

;; result
(declare-fun result50 (pps
  bitvec
  bitvec) (Array Int (Array Int complex)))

;; result
(declare-fun result51 () (Array Int (Array Int complex)))

;; result
(declare-fun result52 (pps
  bitvec) (Array bitvec (matrix complex)))

;; result
(declare-fun result53 (pps) (Array bitvec (matrix complex)))

;; result'def
(assert
  (forall ((h pps) (x bitvec) (y bitvec) (i Int) (j Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             int
             (t2tb61 (result50 h x y))
             (t2tb8 i))
           (t2tb8 j))) (ite (and
                              (= i (bv_to_int (h_basis_ket_bv h x y)))
                              (= j (bv_to_int x)))
                         (ang_exp (h_angle_bv h x y))
                         c_zero))))

;; result'def
(assert
  (forall ((us Int) (us1 Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             int
             (t2tb61 result51)
             (t2tb8 us))
           (t2tb8 us1))) c_zero)))

;; result'def
(assert
  (forall ((h pps) (x bitvec) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (result52 h x))
           (t2tb77 y))) (ite (and
                               (= (length x) (h_width h))
                               (= (length y) (h_range h)))
                          (tb2t65
                            (make_f
                              complex1
                              (power 2 (h_width h))
                              (power 2 (h_width h))
                              (t2tb61 (result50 h x y))))
                          (tb2t65
                            (make_f
                              complex1
                              (power 2 (h_width h))
                              (power 2 (h_width h))
                              (t2tb61 result51)))))))

;; result'def
(assert
  (forall ((h pps) (x bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (result53 h))
           (t2tb77 x))) (mat_sum_dim
                          bitvec1
                          (t2tb79 (n_bvs (h_range h)))
                          (t2tb80 (result52 h x))
                          (power 2 (h_width h))
                          (power 2 (h_width h))))))

;; pps_to_mat'def
(assert
  (forall ((h pps))
    (= (pps_to_mat h) (infix_asdtdt
                        (pow_inv_sqrt_2 (h_range h))
                        (mat_sum_dim
                          bitvec1
                          (t2tb79 (n_bvs (h_width h)))
                          (t2tb80 (result53 h))
                          (power 2 (h_width h))
                          (power 2 (h_width h)))))))

;; fc
(declare-fun fc496 (pps
  bitvec
  bitvec) (Array Int (Array Int complex)))

;; fc
(declare-fun fc497 (pps
  bitvec) (Array bitvec (matrix complex)))

;; fc
(declare-fun fc498 (pps) (Array bitvec (matrix complex)))

;; fc
(declare-fun fc499 (pps
  bitvec
  bitvec) (Array Int (Array Int complex)))

;; fc
(declare-fun fc500 (pps
  bitvec) (Array bitvec (matrix complex)))

;; fc
(declare-fun fc501 (pps) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((h pps) (x bitvec) (y bitvec) (i Int) (j Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             int
             (t2tb61 (fc496 h x y))
             (t2tb8 i))
           (t2tb8 j))) (ite (and
                              (= i (bv_to_int (h_basis_ket_bv h x y)))
                              (= j (bv_to_int x)))
                         (ang_exp (h_angle_bv h x y))
                         c_zero))))

;; fc'def
(assert
  (forall ((h pps) (x bitvec) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc497 h x))
           (t2tb77 y))) (tb2t65
                          (make_f
                            complex1
                            (power 2 (h_width h))
                            (power 2 (h_width h))
                            (t2tb61 (fc496 h x y)))))))

;; fc'def
(assert
  (forall ((h pps) (x bitvec))
    (= (tb2t65
         (infix_at (matrix1 complex1) bitvec1 (t2tb80 (fc498 h)) (t2tb77 x))) 
    (mat_sum_dim
      bitvec1
      (t2tb79 (n_bvs (h_range h)))
      (t2tb80 (fc497 h x))
      (power 2 (h_width h))
      (power 2 (h_width h))))))

;; fc'def
(assert
  (forall ((h pps) (x bitvec) (y bitvec) (i Int) (j Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             int
             (t2tb61 (fc499 h x y))
             (t2tb8 i))
           (t2tb8 j))) (ite (and
                              (= i (bv_to_int (h_basis_ket_bv h x y)))
                              (= j (bv_to_int x)))
                         (ang_exp (h_angle_bv h x y))
                         c_zero))))

;; fc'def
(assert
  (forall ((h pps) (x bitvec) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc500 h x))
           (t2tb77 y))) (tb2t65
                          (make_f
                            complex1
                            (power 2 (h_width h))
                            (power 2 (h_width h))
                            (t2tb61 (fc499 h x y)))))))

;; fc'def
(assert
  (forall ((h pps) (x bitvec))
    (= (tb2t65
         (infix_at (matrix1 complex1) bitvec1 (t2tb80 (fc501 h)) (t2tb77 x))) 
    (mat_sum
      bitvec1
      (t2tb79 (n_bvs (h_range h)))
      (t2tb80 (fc500 h x))))))

;; pps_to_mat'spec
(assert
  (forall ((h pps))
    (and
      (= (pps_to_mat h) (infix_asdtdt
                          (pow_inv_sqrt_2 (h_range h))
                          (mat_sum_dim
                            bitvec1
                            (t2tb79 (n_bvs (h_width h)))
                            (t2tb80 (fc498 h))
                            (power 2 (h_width h))
                            (power 2 (h_width h)))))
      (and
        (= (pps_to_mat h) (infix_asdtdt
                            (pow_inv_sqrt_2 (h_range h))
                            (mat_sum
                              bitvec1
                              (t2tb79 (n_bvs (h_width h)))
                              (t2tb80 (fc501 h)))))
        (and
          (= (rows complex1 (t2tb65 (pps_to_mat h))) (power 2 (h_width h)))
          (and
            (= (columns complex1 (t2tb65 (pps_to_mat h))) (power
                                                            2
                                                            (h_width h)))
            (and
              (forall ((x bitvec))
                (=>
                  (= (length x) (h_width h))
                  (= (mat_mult (pps_to_mat h) (bv_to_ket x)) (pps_apply_basis
                                                               h
                                                               x))))
              (forall ((x (matrix complex)))
                (=>
                  (is_a_ket_l x (h_width h))
                  (= (mat_mult (pps_to_mat h) x) (pps_apply h x)))))))))))

;; sem_id_mat
(declare-fun sem_id_mat (tuple0) (matrix complex))

;; indic_closure
(declare-fun indic_closure (ty) uni)

;; indic_closure_sort
(assert
  (forall ((a ty))
    (sort (infix_mngt a (infix_mngt a complex1)) (indic_closure a))))

;; indic_closure_def
(assert
  (forall ((a ty))
    (forall ((y uni) (y1 uni))
      (= (tb2t
           (infix_at
             complex1
             a
             (infix_at (infix_mngt a complex1) a (indic_closure a) y)
             y1)) (indic a y y1)))))

;; sem_id_mat'def
(assert
  (forall ((us tuple0))
    (= (sem_id_mat us) (tb2t65 (make_f complex1 2 2 (indic_closure int))))))

;; sem_id_mat'spec
(assert
  (forall ((us tuple0))
    (and
      (= (rows complex1 (t2tb65 (sem_id_mat us))) (power 2 1))
      (and
        (= (columns complex1 (t2tb65 (sem_id_mat us))) (power 2 1))
        (and
          (forall ((x bitvec))
            (=>
              (= (length x) 1)
              (= (mat_mult (sem_id_mat us) (bv_to_ket x)) (bv_to_ket x))))
          (forall ((x bitvec))
            (=>
              (= (length x) 1)
              (= (mat_mult (sem_id_mat us) (bv_to_ket x)) (pps_apply_basis
                                                            pps_id
                                                            x)))))))))

;; sem_rz_mat
(declare-fun sem_rz_mat (Int) (matrix complex))

;; result
(declare-fun result54 (Int) (Array Int (Array Int complex)))

;; result'def
(assert
  (forall ((k Int) (i Int) (j Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             int
             (t2tb61 (result54 k))
             (t2tb8 i))
           (t2tb8 j))) (ite (= i j) (ang_exp (infix_sldtsl i k)) c_zero))))

;; sem_rz_mat'def
(assert
  (forall ((k Int))
    (= (sem_rz_mat k) (tb2t65 (make_f complex1 2 2 (t2tb61 (result54 k)))))))

;; sem_rz_mat'spec
(assert
  (forall ((k Int))
    (and
      (= (rows complex1 (t2tb65 (sem_rz_mat k))) (power 2 1))
      (and
        (= (columns complex1 (t2tb65 (sem_rz_mat k))) (power 2 1))
        (and
          (forall ((x bitvec))
            (=>
              (= (length x) 1)
              (= (mat_mult (sem_rz_mat k) (bv_to_ket x)) (infix_asdtdt
                                                           (ang_exp
                                                             (infix_sldtsl
                                                               (select 
                                                               (value
                                                                 x) 0)
                                                               k))
                                                           (bv_to_ket x)))))
          (forall ((x bitvec))
            (=>
              (= (length x) 1)
              (= (mat_mult (sem_rz_mat k) (bv_to_ket x)) (pps_apply_basis
                                                           (pps_rz k)
                                                           x)))))))))

;; sem_phase_mat
(declare-fun sem_phase_mat (Int) (matrix complex))

;; result
(declare-fun result55 (Int) (Array Int (Array Int complex)))

;; result'def
(assert
  (forall ((k Int) (i Int) (j Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             int
             (t2tb61 (result55 k))
             (t2tb8 i))
           (t2tb8 j))) (ite (= i j) (ang_exp (infix_sldtsl 1 k)) c_zero))))

;; sem_phase_mat'def
(assert
  (forall ((k Int))
    (= (sem_phase_mat k) (tb2t65 (make_f complex1 2 2 (t2tb61 (result55 k)))))))

;; sem_phase_mat'spec
(assert
  (forall ((k Int))
    (and
      (= (rows complex1 (t2tb65 (sem_phase_mat k))) (power 2 1))
      (and
        (= (columns complex1 (t2tb65 (sem_phase_mat k))) (power 2 1))
        (and
          (forall ((x bitvec))
            (=>
              (= (length x) 1)
              (= (mat_mult (sem_phase_mat k) (bv_to_ket x)) (infix_asdtdt
                                                              (ang_exp
                                                                (infix_sldtsl
                                                                  1
                                                                  k))
                                                              (bv_to_ket x)))))
          (forall ((x bitvec))
            (=>
              (= (length x) 1)
              (= (mat_mult (sem_phase_mat k) (bv_to_ket x)) (pps_apply_basis
                                                              (pps_phase k)
                                                              x)))))))))

;; sem_hadamard_mat
(declare-fun sem_hadamard_mat (tuple0) (matrix complex))

;; result
(declare-fun result56 () (Array Int (Array Int complex)))

;; result'def
(assert
  (forall ((i Int) (j Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             int
             (t2tb61 result56)
             (t2tb8 i))
           (t2tb8 j))) (infix_asdt
                         (cpower (prefix_mndt c_one) (* i j))
                         (pow_inv_sqrt_2 1)))))

;; sem_hadamard_mat'def
(assert
  (forall ((us tuple0))
    (= (sem_hadamard_mat us) (tb2t65 (make_f complex1 2 2 (t2tb61 result56))))))

;; sem_hadamard_mat'spec
(assert
  (forall ((us tuple0))
    (and
      (= (rows complex1 (t2tb65 (sem_hadamard_mat us))) (power 2 1))
      (and
        (= (columns complex1 (t2tb65 (sem_hadamard_mat us))) (power 2 1))
        (and
          (forall ((x bitvec))
            (=>
              (= (length x) 1)
              (= (mat_mult (sem_hadamard_mat us) (bv_to_ket x)) (infix_asdtdt
                                                                  (pow_inv_sqrt_2
                                                                    1)
                                                                  (add_ket_l
                                                                    (ket 1 0)
                                                                    (infix_asdtdt
                                                                    (ang_exp
                                                                    (infix_sldtsl
                                                                    (select 
                                                                    (value
                                                                    x) 0)
                                                                    1))
                                                                    (ket 1 1))
                                                                    1)))))
          (forall ((x bitvec))
            (=>
              (= (length x) 1)
              (= (mat_mult (sem_hadamard_mat us) (bv_to_ket x)) (pps_apply_basis
                                                                  pps_hadamard
                                                                  x)))))))))

;; cnot_func
(declare-fun cnot_func (bitvec) bitvec)

;; result
(declare-fun result57 (bitvec) (Array Int Int))

;; result'def
(assert
  (forall ((x bitvec) (i Int))
    (= (select (result57 x) i) (ite (= i 0)
                                 (select (value x) i)
                                 (- 1 (select (value x) i))))))

;; cnot_func'def
(assert
  (forall ((x bitvec))
    (=>
      (= (length x) 2)
      (ite (= (select (value x) 0) 0)
        (= (cnot_func x) x)
        (= (cnot_func x) (make_bv (result57 x) 2))))))

;; cnot_func'spec
(assert
  (forall ((x bitvec))
    (=>
      (= (length x) 2)
      (and
        (= (length (cnot_func x)) 2)
        (and
          (=> (= (bv_to_int x) 0) (= (cnot_func x) (int_to_bv 0 2)))
          (and
            (=> (= (bv_to_int x) 1) (= (cnot_func x) (int_to_bv 1 2)))
            (and
              (=> (= (bv_to_int x) 2) (= (cnot_func x) (int_to_bv 3 2)))
              (=> (= (bv_to_int x) 3) (= (cnot_func x) (int_to_bv 2 2))))))))))

;; invol_cnot_func
(assert
  (forall ((x bitvec)) (=> (= (length x) 2) (= (cnot_func (cnot_func x)) x))))

;; cnot_func_int
(declare-fun cnot_func_int (Int) Int)

;; cnot_func_int'def
(assert
  (forall ((i Int))
    (= (cnot_func_int i) (bv_to_int (cnot_func (int_to_bv i 2))))))

;; cnot_func_int'spec
(assert
  (forall ((i Int))
    (and
      (and (<= 0 (cnot_func_int i)) (< (cnot_func_int i) 4))
      (and
        (=> (= i 0) (= (cnot_func_int i) 0))
        (and
          (=> (= i 1) (= (cnot_func_int i) 1))
          (and
            (=> (= i 2) (= (cnot_func_int i) 3))
            (and
              (=> (= i 3) (= (cnot_func_int i) 2))
              (=>
                (and (<= 0 i) (< i 4))
                (= (cnot_func_int i) (ite (= (div i 2) 0) i (- 3 (mod i 2))))))))))))

;; invol_cnot_func_int
(assert
  (forall ((i Int))
    (=> (and (<= 0 i) (< i 4)) (= (cnot_func_int (cnot_func_int i)) i))))

;; sem_cnot_mat
(declare-fun sem_cnot_mat (tuple0) (matrix complex))

;; result
(declare-fun result58 () (Array Int (Array Int complex)))

;; result'def
(assert
  (forall ((i Int) (j Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             int
             (t2tb61 result58)
             (t2tb8 i))
           (t2tb8 j))) (ite (= j (cnot_func_int i)) c_one c_zero))))

;; sem_cnot_mat'def
(assert
  (forall ((us tuple0))
    (= (sem_cnot_mat us) (tb2t65 (make_f complex1 4 4 (t2tb61 result58))))))

;; fc
(declare-fun fc502 () (Array Int (Array Int complex)))

;; fc
(declare-fun fc503 (bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((i Int) (j Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at (infix_mngt int complex1) int (t2tb61 fc502) (t2tb8 i))
           (t2tb8 j))) (ite (= j (ite (= (div i 2) 0) i (- 3 (mod i 2))))
                         c_one
                         c_zero))))

;; fc'def
(assert
  (forall ((x bitvec) (i Int))
    (= (select (fc503 x) i) (ite (= i 0)
                              (select (value x) i)
                              (- 1 (select (value x) i))))))

;; sem_cnot_mat'spec
(assert
  (forall ((us tuple0))
    (and
      (= (rows complex1 (t2tb65 (sem_cnot_mat us))) (power 2 2))
      (and
        (= (columns complex1 (t2tb65 (sem_cnot_mat us))) (power 2 2))
        (and
          (= (sem_cnot_mat us) (tb2t65 (make_f complex1 4 4 (t2tb61 fc502))))
          (and
            (forall ((x bitvec))
              (=>
                (= (length x) 2)
                (= (mat_mult (sem_cnot_mat us) (bv_to_ket x)) (bv_to_ket
                                                                (ite (= (select 
                                                                  (value
                                                                    x) 0) 0)
                                                                  x
                                                                  (int_to_bv
                                                                    (ite (= 
                                                                    (bv_to_int
                                                                    x) 2)
                                                                    3
                                                                    2)
                                                                    2))))))
            (and
              (forall ((x bitvec))
                (=>
                  (= (length x) 2)
                  (= (mat_mult (sem_cnot_mat us) (bv_to_ket x)) (bv_to_ket
                                                                  (ite (= (select 
                                                                    (value
                                                                    x) 0) 0)
                                                                    x
                                                                    (make_bv
                                                                    (fc503 x)
                                                                    2))))))
              (and
                (forall ((i Int))
                  (=>
                    (and (<= 0 i) (< i (power 2 2)))
                    (= (mat_mult (sem_cnot_mat us) (ket 2 i)) (ket
                                                                2
                                                                (ite (= i 0)
                                                                  0
                                                                  (ite (= i 1)
                                                                    1
                                                                    (ite (= i 2)
                                                                    3
                                                                    2)))))))
                (and
                  (forall ((x bitvec))
                    (=>
                      (= (length x) 2)
                      (= (mat_mult (sem_cnot_mat us) (bv_to_ket x)) (bv_to_ket
                                                                    (cnot_func
                                                                    x)))))
                  (forall ((x bitvec))
                    (=>
                      (= (length x) 2)
                      (= (mat_mult (sem_cnot_mat us) (bv_to_ket x)) (pps_apply_basis
                                                                    (pps_cnot
                                                                    0
                                                                    1
                                                                    2)
                                                                    x)))))))))))))

;; swap_func
(declare-fun swap_func (bitvec) bitvec)

;; result
(declare-fun result59 (bitvec) (Array Int Int))

;; result'def
(assert
  (forall ((x bitvec) (i Int))
    (= (select (result59 x) i) (select (value x) (- 1 i)))))

;; swap_func'def
(assert
  (forall ((x bitvec))
    (=> (= (length x) 2) (= (swap_func x) (make_bv (result59 x) 2)))))

;; swap_func'spec
(assert
  (forall ((x bitvec))
    (=>
      (= (length x) 2)
      (and
        (= (length (swap_func x)) 2)
        (and
          (=> (= (bv_to_int x) 0) (= (swap_func x) (int_to_bv 0 2)))
          (and
            (=> (= (bv_to_int x) 1) (= (swap_func x) (int_to_bv 2 2)))
            (and
              (=> (= (bv_to_int x) 2) (= (swap_func x) (int_to_bv 1 2)))
              (=> (= (bv_to_int x) 3) (= (swap_func x) (int_to_bv 3 2))))))))))

;; invol_swap_func
(assert
  (forall ((x bitvec)) (=> (= (length x) 2) (= (swap_func (swap_func x)) x))))

;; swap_func_int
(declare-fun swap_func_int (Int) Int)

;; swap_func_int'def
(assert
  (forall ((i Int))
    (= (swap_func_int i) (bv_to_int (swap_func (int_to_bv i 2))))))

;; swap_func_int'spec
(assert
  (forall ((i Int))
    (and
      (and (<= 0 (swap_func_int i)) (< (swap_func_int i) 4))
      (and
        (=> (= i 0) (= (swap_func_int i) 0))
        (and
          (=> (= i 1) (= (swap_func_int i) 2))
          (and
            (=> (= i 2) (= (swap_func_int i) 1))
            (and
              (=> (= i 3) (= (swap_func_int i) 3))
              (=>
                (and (<= 0 i) (< i 4))
                (= (swap_func_int i) (ite (= (div i 2) (mod i 2)) i (- 3 i)))))))))))

;; invol_swap_func_int
(assert
  (forall ((i Int))
    (=> (and (<= 0 i) (< i 4)) (= (swap_func_int (swap_func_int i)) i))))

;; sem_swap_mat
(declare-fun sem_swap_mat (tuple0) (matrix complex))

;; result
(declare-fun result60 () (Array Int (Array Int complex)))

;; result'def
(assert
  (forall ((i Int) (j Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             int
             (t2tb61 result60)
             (t2tb8 i))
           (t2tb8 j))) (indic int (t2tb8 j) (t2tb8 (swap_func_int i))))))

;; sem_swap_mat'def
(assert
  (forall ((us tuple0))
    (= (sem_swap_mat us) (tb2t65 (make_f complex1 4 4 (t2tb61 result60))))))

;; fc
(declare-fun fc504 () (Array Int (Array Int complex)))

;; fc
(declare-fun fc505 (bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((i Int) (j Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at (infix_mngt int complex1) int (t2tb61 fc504) (t2tb8 i))
           (t2tb8 j))) (indic
                         int
                         (t2tb8 j)
                         (t2tb8
                           (ite (= i 0) i (ite (= i 1) 2 (ite (= i 2) 1 3))))))))

;; fc'def
(assert
  (forall ((x bitvec) (i Int))
    (= (select (fc505 x) i) (select (value x) (- 1 i)))))

;; sem_swap_mat'spec
(assert
  (forall ((us tuple0))
    (and
      (= (rows complex1 (t2tb65 (sem_swap_mat us))) (power 2 2))
      (and
        (= (columns complex1 (t2tb65 (sem_swap_mat us))) (power 2 2))
        (and
          (= (sem_swap_mat us) (tb2t65 (make_f complex1 4 4 (t2tb61 fc504))))
          (and
            (forall ((x bitvec))
              (=>
                (= (length x) 2)
                (= (mat_mult (sem_swap_mat us) (bv_to_ket x)) (bv_to_ket
                                                                (make_bv
                                                                  (fc505 x)
                                                                  2)))))
            (and
              (forall ((x bitvec))
                (=>
                  (= (length x) 2)
                  (= (mat_mult (sem_swap_mat us) (bv_to_ket x)) (bv_to_ket
                                                                  (swap_func
                                                                    x)))))
              (and
                (forall ((i Int))
                  (=>
                    (and (<= 0 i) (< i (power 2 2)))
                    (= (mat_mult (sem_swap_mat us) (ket 2 i)) (ket
                                                                2
                                                                (ite (= i 0)
                                                                  0
                                                                  (ite (= i 1)
                                                                    2
                                                                    (ite (= i 2)
                                                                    1
                                                                    3)))))))
                (forall ((x bitvec))
                  (=>
                    (= (length x) 2)
                    (= (mat_mult (sem_swap_mat us) (bv_to_ket x)) (pps_apply_basis
                                                                    (pps_swap
                                                                    0
                                                                    1
                                                                    2)
                                                                    x))))))))))))

(declare-sort circuit_pre 0)

;; circuit_pre
(declare-fun circuit_pre1 () ty)

;; Phase
(declare-fun Phase (Int) circuit_pre)

;; Rz
(declare-fun Rz (Int) circuit_pre)

;; Hadamard
(declare-fun Hadamard () circuit_pre)

;; Cnot
(declare-fun Cnot () circuit_pre)

;; Swap
(declare-fun Swap () circuit_pre)

;; Id
(declare-fun Id () circuit_pre)

;; Sequence
(declare-fun Sequence (circuit_pre
  circuit_pre) circuit_pre)

;; Parallel
(declare-fun Parallel (circuit_pre
  circuit_pre) circuit_pre)

;; Ancillas
(declare-fun Ancillas (circuit_pre
  Int) circuit_pre)

;; match_circuit_pre
(declare-fun match_circuit_pre (ty
  circuit_pre
  uni
  uni
  uni
  uni
  uni
  uni
  uni
  uni
  uni) uni)

;; match_circuit_pre_sort
(assert
  (forall ((a ty))
    (forall ((x circuit_pre) (x1 uni) (x2 uni) (x3 uni) (x4 uni) (x5 uni) (x6 uni) (x7 uni) (x8 uni) (x9 uni))
      (sort a (match_circuit_pre a x x1 x2 x3 x4 x5 x6 x7 x8 x9)))))

;; match_circuit_pre_Phase
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (z4 uni) (z5 uni) (z6 uni) (z7 uni) (z8 uni) (u Int))
      (=>
        (sort a z)
        (= (match_circuit_pre a (Phase u) z z1 z2 z3 z4 z5 z6 z7 z8) z)))))

;; match_circuit_pre_Rz
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (z4 uni) (z5 uni) (z6 uni) (z7 uni) (z8 uni) (u Int))
      (=>
        (sort a z1)
        (= (match_circuit_pre a (Rz u) z z1 z2 z3 z4 z5 z6 z7 z8) z1)))))

;; match_circuit_pre_Hadamard
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (z4 uni) (z5 uni) (z6 uni) (z7 uni) (z8 uni))
      (=>
        (sort a z2)
        (= (match_circuit_pre a Hadamard z z1 z2 z3 z4 z5 z6 z7 z8) z2)))))

;; match_circuit_pre_Cnot
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (z4 uni) (z5 uni) (z6 uni) (z7 uni) (z8 uni))
      (=>
        (sort a z3)
        (= (match_circuit_pre a Cnot z z1 z2 z3 z4 z5 z6 z7 z8) z3)))))

;; match_circuit_pre_Swap
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (z4 uni) (z5 uni) (z6 uni) (z7 uni) (z8 uni))
      (=>
        (sort a z4)
        (= (match_circuit_pre a Swap z z1 z2 z3 z4 z5 z6 z7 z8) z4)))))

;; match_circuit_pre_Id
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (z4 uni) (z5 uni) (z6 uni) (z7 uni) (z8 uni))
      (=>
        (sort a z5)
        (= (match_circuit_pre a Id z z1 z2 z3 z4 z5 z6 z7 z8) z5)))))

;; match_circuit_pre_Sequence
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (z4 uni) (z5 uni) (z6 uni) (z7 uni) (z8 uni) (u circuit_pre) (u1 circuit_pre))
      (=>
        (sort a z6)
        (= (match_circuit_pre a (Sequence u u1) z z1 z2 z3 z4 z5 z6 z7 z8) z6)))))

;; match_circuit_pre_Parallel
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (z4 uni) (z5 uni) (z6 uni) (z7 uni) (z8 uni) (u circuit_pre) (u1 circuit_pre))
      (=>
        (sort a z7)
        (= (match_circuit_pre a (Parallel u u1) z z1 z2 z3 z4 z5 z6 z7 z8) z7)))))

;; match_circuit_pre_Ancillas
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (z4 uni) (z5 uni) (z6 uni) (z7 uni) (z8 uni) (u circuit_pre) (u1 Int))
      (=>
        (sort a z8)
        (= (match_circuit_pre a (Ancillas u u1) z z1 z2 z3 z4 z5 z6 z7 z8) z8)))))

;; index_circuit_pre
(declare-fun index_circuit_pre (circuit_pre) Int)

;; index_circuit_pre_Phase
(assert
  (forall ((u Int))
    (! (= (index_circuit_pre (Phase u)) 0) :pattern ((Phase u)) )))

;; index_circuit_pre_Rz
(assert
  (forall ((u Int)) (! (= (index_circuit_pre (Rz u)) 1) :pattern ((Rz u)) )))

;; index_circuit_pre_Hadamard
(assert (= (index_circuit_pre Hadamard) 2))

;; index_circuit_pre_Cnot
(assert (= (index_circuit_pre Cnot) 3))

;; index_circuit_pre_Swap
(assert (= (index_circuit_pre Swap) 4))

;; index_circuit_pre_Id
(assert (= (index_circuit_pre Id) 5))

;; index_circuit_pre_Sequence
(assert
  (forall ((u circuit_pre) (u1 circuit_pre))
    (! (= (index_circuit_pre (Sequence u u1)) 6) :pattern ((Sequence u u1)) )))

;; index_circuit_pre_Parallel
(assert
  (forall ((u circuit_pre) (u1 circuit_pre))
    (! (= (index_circuit_pre (Parallel u u1)) 7) :pattern ((Parallel u u1)) )))

;; index_circuit_pre_Ancillas
(assert
  (forall ((u circuit_pre) (u1 Int))
    (! (= (index_circuit_pre (Ancillas u u1)) 8) :pattern ((Ancillas u u1)) )))

;; Phase_proj_1
(declare-fun Phase_proj_1 (circuit_pre) Int)

;; Phase_proj_1'def
(assert (forall ((u Int)) (= (Phase_proj_1 (Phase u)) u)))

;; Rz_proj_1
(declare-fun Rz_proj_1 (circuit_pre) Int)

;; Rz_proj_1'def
(assert (forall ((u Int)) (= (Rz_proj_1 (Rz u)) u)))

;; Sequence_proj_1
(declare-fun Sequence_proj_1 (circuit_pre) circuit_pre)

;; Sequence_proj_1'def
(assert
  (forall ((u circuit_pre) (u1 circuit_pre))
    (= (Sequence_proj_1 (Sequence u u1)) u)))

;; Sequence_proj_2
(declare-fun Sequence_proj_2 (circuit_pre) circuit_pre)

;; Sequence_proj_2'def
(assert
  (forall ((u circuit_pre) (u1 circuit_pre))
    (= (Sequence_proj_2 (Sequence u u1)) u1)))

;; Parallel_proj_1
(declare-fun Parallel_proj_1 (circuit_pre) circuit_pre)

;; Parallel_proj_1'def
(assert
  (forall ((u circuit_pre) (u1 circuit_pre))
    (= (Parallel_proj_1 (Parallel u u1)) u)))

;; Parallel_proj_2
(declare-fun Parallel_proj_2 (circuit_pre) circuit_pre)

;; Parallel_proj_2'def
(assert
  (forall ((u circuit_pre) (u1 circuit_pre))
    (= (Parallel_proj_2 (Parallel u u1)) u1)))

;; Ancillas_proj_1
(declare-fun Ancillas_proj_1 (circuit_pre) circuit_pre)

;; Ancillas_proj_1'def
(assert
  (forall ((u circuit_pre) (u1 Int)) (= (Ancillas_proj_1 (Ancillas u u1)) u)))

;; Ancillas_proj_2
(declare-fun Ancillas_proj_2 (circuit_pre) Int)

;; Ancillas_proj_2'def
(assert
  (forall ((u circuit_pre) (u1 Int))
    (= (Ancillas_proj_2 (Ancillas u u1)) u1)))

;; circuit_pre_inversion
(assert
  (forall ((u circuit_pre))
    (or
      (or
        (or
          (or
            (or
              (or
                (or
                  (or
                    (= u (Phase (Phase_proj_1 u)))
                    (= u (Rz (Rz_proj_1 u))))
                  (= u Hadamard))
                (= u Cnot))
              (= u Swap))
            (= u Id))
          (= u (Sequence (Sequence_proj_1 u) (Sequence_proj_2 u))))
        (= u (Parallel (Parallel_proj_1 u) (Parallel_proj_2 u))))
      (= u (Ancillas (Ancillas_proj_1 u) (Ancillas_proj_2 u))))))

;; width_pre
(declare-fun width_pre (circuit_pre) Int)

;; width_pre'def
(assert
  (and
    (and
      (and
        (and
          (and
            (and
              (and
                (and
                  (forall ((w Int)) (= (width_pre (Phase w)) 1))
                  (forall ((w Int)) (= (width_pre (Rz w)) 1)))
                (= (width_pre Hadamard) 1))
              (= (width_pre Cnot) 2))
            (= (width_pre Swap) 2))
          (= (width_pre Id) 1))
        (forall ((x circuit_pre) (x1 circuit_pre))
          (= (width_pre (Sequence x x1)) (width_pre x))))
      (forall ((x circuit_pre) (x1 circuit_pre))
        (= (width_pre (Parallel x x1)) (+ (width_pre x) (width_pre x1)))))
    (forall ((x circuit_pre) (x1 Int))
      (= (width_pre (Ancillas x x1)) (- (width_pre x) x1)))))

;; build_correct
(declare-fun build_correct (circuit_pre) Bool)

;; build_correct'def
(assert
  (and
    (and
      (and
        (and
          (and
            (and
              (and
                (and
                  (forall ((w Int)) (build_correct (Phase w)))
                  (forall ((w Int)) (build_correct (Rz w))))
                (build_correct Hadamard))
              (build_correct Cnot))
            (build_correct Swap))
          (build_correct Id))
        (forall ((d circuit_pre) (e circuit_pre))
          (=
            (build_correct (Sequence d e))
            (and
              (= (width_pre d) (width_pre e))
              (and (build_correct d) (build_correct e))))))
      (forall ((d circuit_pre) (e circuit_pre))
        (=
          (build_correct (Parallel d e))
          (and (build_correct d) (build_correct e)))))
    (forall ((d circuit_pre) (i Int))
      (=
        (build_correct (Ancillas d i))
        (and (<= 1 i) (and (<= (+ i 1) (width_pre d)) (build_correct d)))))))

;; circ_to_pps_pre
(declare-fun circ_to_pps_pre (circuit_pre) pps)

;; circ_to_pps_pre'def
(assert
  (forall ((c circuit_pre))
    (=>
      (build_correct c)
      (and
        (and
          (and
            (and
              (and
                (and
                  (and
                    (and
                      (forall ((k Int))
                        (=>
                          (= c (Phase k))
                          (= (circ_to_pps_pre c) (pps_phase k))))
                      (forall ((k Int))
                        (=> (= c (Rz k)) (= (circ_to_pps_pre c) (pps_rz k)))))
                    (=> (= c Hadamard) (= (circ_to_pps_pre c) pps_hadamard)))
                  (=> (= c Cnot) (= (circ_to_pps_pre c) (pps_cnot 0 1 2))))
                (=> (= c Swap) (= (circ_to_pps_pre c) (pps_swap 0 1 2))))
              (=> (= c Id) (= (circ_to_pps_pre c) pps_id)))
            (forall ((d circuit_pre) (e circuit_pre))
              (=>
                (= c (Sequence d e))
                (= (circ_to_pps_pre c) (pps_seq
                                         (circ_to_pps_pre d)
                                         (circ_to_pps_pre e))))))
          (forall ((d circuit_pre) (e circuit_pre))
            (=>
              (= c (Parallel d e))
              (= (circ_to_pps_pre c) (pps_par
                                       (circ_to_pps_pre d)
                                       (circ_to_pps_pre e))))))
        (forall ((d circuit_pre) (i Int))
          (=>
            (= c (Ancillas d i))
            (= (circ_to_pps_pre c) (pps_ancs (circ_to_pps_pre d) i))))))))

;; circ_to_pps_pre'spec
(assert
  (forall ((c circuit_pre))
    (=>
      (build_correct c)
      (and
        (= (h_width (circ_to_pps_pre c)) (width_pre c))
        (<= 1 (h_width (circ_to_pps_pre c)))))))

;; ancillable_pre
(declare-fun ancillable_pre (circuit_pre
  Int) Bool)

;; ancillable_pre'spec
(assert
  (forall ((c circuit_pre) (i Int))
    (=
      (ancillable_pre c i)
      (exists ((path_sem_target (Array (matrix complex) (matrix complex))))
        (forall ((x (matrix complex)))
          (=>
            (is_a_ket_l x (- (width_pre c) i))
            (= (pps_apply (circ_to_pps_pre c) (kronecker x (ket i 0))) 
            (kronecker
              (tb2t65
                (infix_at
                  (matrix1 complex1)
                  (matrix1 complex1)
                  (t2tb66 path_sem_target)
                  (t2tb65 x)))
              (ket i 0)))))))))

;; correct
(declare-fun correct (circuit_pre) Bool)

;; correct'def
(assert
  (and
    (and
      (and
        (and
          (and
            (and
              (and
                (and
                  (forall ((w Int)) (correct (Phase w)))
                  (forall ((w Int)) (correct (Rz w))))
                (correct Hadamard))
              (correct Cnot))
            (correct Swap))
          (correct Id))
        (forall ((d circuit_pre) (e circuit_pre))
          (=
            (correct (Sequence d e))
            (and
              (= (width_pre d) (width_pre e))
              (and (correct d) (correct e))))))
      (forall ((d circuit_pre) (e circuit_pre))
        (= (correct (Parallel d e)) (and (correct d) (correct e)))))
    (forall ((d circuit_pre) (i Int))
      (=
        (correct (Ancillas d i))
        (and
          (<= 1 i)
          (and
            (<= (+ i 1) (width_pre d))
            (and (correct d) (ancillable_pre d i))))))))

;; correct'spec
(assert (forall ((c circuit_pre)) (=> (correct c) (build_correct c))))

(declare-sort circuit2 0)

;; circuit
(declare-fun circuit3 () ty)

;; pre
(declare-fun pre (circuit2) circuit_pre)

;; circuit'invariant
(assert
  (forall ((self circuit2)) (! (correct (pre self)) :pattern ((pre self)) )))

;; injective_pre
(assert
  (forall ((c circuit2) (cqt circuit2))
    (=> (not (= c cqt)) (not (= (pre c) (pre cqt))))))

;; to_qc
(declare-fun to_qc (circuit_pre) circuit2)

;; to_qc'spec
(assert (forall ((c circuit_pre)) (=> (correct c) (= (pre (to_qc c)) c))))

(declare-sort int63 0)

;; int63
(declare-fun int631 () ty)

;; int63'int
(declare-fun int63qtint (int63) Int)

;; int63'axiom
(assert
  (forall ((i int63))
    (and
      (<= (- 4611686018427387904) (int63qtint i))
      (<= (int63qtint i) 4611686018427387903))))

;; in_bounds
(declare-fun in_bounds (Int) Bool)

;; in_bounds'def
(assert
  (forall ((n Int))
    (=
      (in_bounds n)
      (and (<= (- 4611686018427387904) n) (<= n 4611686018427387903)))))

;; to_int_in_bounds
(assert (forall ((n int63)) (in_bounds (int63qtint n))))

;; extensionality
(assert
  (forall ((x int63) (y int63))
    (=> (= (int63qtint x) (int63qtint y)) (= x y))))

;; div
(declare-fun div1 (Int
  Int) Int)

;; mod
(declare-fun mod1 (Int
  Int) Int)

;; Div_mod
(assert
  (forall ((x Int) (y Int))
    (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
(assert
  (forall ((x Int) (y Int))
    (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
(assert
  (forall ((x Int) (y Int))
    (=>
      (not (= y 0))
      (and (< (- (abs1 y)) (mod1 x y)) (< (mod1 x y) (abs1 y))))))

;; Div_sign_pos
(assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
(assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
(assert
  (forall ((x Int) (y Int))
    (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
(assert
  (forall ((x Int) (y Int))
    (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
(assert
  (forall ((x Int) (y Int))
    (=> (not (= y 0)) (<= (abs1 (* (div1 x y) y)) (abs1 x)))))

;; Div_1
(assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
(assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
(assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
(assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=>
         (and (< 0 x) (and (<= 0 y) (<= 0 z)))
         (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                                  (+ (* x y) z)
                                                                  x)) )))

;; Mod_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=>
         (and (< 0 x) (and (<= 0 y) (<= 0 z)))
         (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1
                                                            (+ (* x y) z)
                                                            x)) )))

;; max_int
(declare-fun max_int () int63)

;; max_int'def
(assert (= (int63qtint max_int) 4611686018427387903))

;; min_int
(declare-fun min_int () int63)

;; min_int'def
(assert (= (int63qtint min_int) (- 4611686018427387904)))

;; concat
(declare-fun concat2 (string
  string) string)

;; concat_assoc
(assert
  (forall ((s1 string) (s2 string) (s3 string))
    (= (concat2 (concat2 s1 s2) s3) (concat2 s1 (concat2 s2 s3)))))

;; rliteral
(declare-fun rliteral () string)

;; rliteral_axiom
(assert true)

;; concat_empty
(assert
  (forall ((s string))
    (and
      (= (concat2 s rliteral) (concat2 rliteral s))
      (= (concat2 rliteral s) s))))

;; length
(declare-fun length1 (string) Int)

;; length_empty
(assert (= (length1 rliteral) 0))

;; length_concat
(assert
  (forall ((s1 string) (s2 string))
    (= (length1 (concat2 s1 s2)) (+ (length1 s1) (length1 s2)))))

;; lt
(declare-fun lt (string
  string) Bool)

;; lt_empty
(assert (forall ((s string)) (=> (not (= s rliteral)) (lt rliteral s))))

;; lt_not_com
(assert (forall ((s1 string) (s2 string)) (=> (lt s1 s2) (not (lt s2 s1)))))

;; lt_ref
(assert (forall ((s1 string)) (not (lt s1 s1))))

;; lt_trans
(assert
  (forall ((s1 string) (s2 string) (s3 string))
    (=> (and (lt s1 s2) (lt s2 s3)) (lt s1 s3))))

;; le
(declare-fun le (string
  string) Bool)

;; le_empty
(assert (forall ((s string)) (le rliteral s)))

;; le_ref
(assert (forall ((s1 string)) (le s1 s1)))

;; lt_le
(assert (forall ((s1 string) (s2 string)) (=> (lt s1 s2) (le s1 s2))))

;; lt_le_eq
(assert
  (forall ((s1 string) (s2 string))
    (=> (le s1 s2) (or (lt s1 s2) (= s1 s2)))))

;; le_trans
(assert
  (forall ((s1 string) (s2 string) (s3 string))
    (=> (and (le s1 s2) (le s2 s3)) (le s1 s3))))

;; s_at
(declare-fun s_at (string
  Int) string)

;; at_out_of_range
(assert
  (forall ((s string) (i Int))
    (=> (or (< i 0) (<= (length1 s) i)) (= (s_at s i) rliteral))))

;; at_empty
(assert (forall ((i Int)) (= (s_at rliteral i) rliteral)))

;; at_length
(assert
  (forall ((s string) (i Int))
    (let ((j (s_at s i)))
      (ite (and (<= 0 i) (< i (length1 s)))
        (= (length1 j) 1)
        (= (length1 j) 0)))))

;; concat_at
(assert
  (forall ((s1 string) (s2 string))
    (let ((s (concat2 s1 s2)))
      (forall ((i Int))
        (and
          (=> (and (<= 0 i) (< i (length1 s1))) (= (s_at s i) (s_at s1 i)))
          (=>
            (and (<= (length1 s1) i) (< i (length1 s)))
            (= (s_at s i) (s_at s2 (- i (length1 s1))))))))))

;; substring
(declare-fun substring (string
  Int
  Int) string)

;; substring_out_of_range
(assert
  (forall ((s string) (i Int) (x Int))
    (=> (or (< i 0) (<= (length1 s) i)) (= (substring s i x) rliteral))))

;; substring_of_length_zero_or_less
(assert
  (forall ((s string) (i Int) (x Int))
    (=> (<= x 0) (= (substring s i x) rliteral))))

;; substring_of_empty
(assert (forall ((i Int) (x Int)) (= (substring rliteral i x) rliteral)))

;; substring_smaller
(assert
  (forall ((s string) (i Int) (x Int))
    (<= (length1 (substring s i x)) (length1 s))))

;; substring_smaller_x
(assert
  (forall ((s string) (i Int) (x Int))
    (=> (<= 0 x) (<= (length1 (substring s i x)) x))))

;; substring_length
(assert
  (forall ((s string) (i Int) (x Int))
    (=>
      (and (<= 0 x) (and (<= 0 i) (< i (length1 s))))
      (ite (< (length1 s) (+ i x))
        (= (length1 (substring s i x)) (- (length1 s) i))
        (= (length1 (substring s i x)) x)))))

;; substring_at
(assert (forall ((s string) (i Int)) (= (s_at s i) (substring s i 1))))

;; substring_substring
(assert
  (forall ((s string) (ofs Int) (len Int) (ofsqt Int) (lenqt Int))
    (=>
      (and (<= 0 ofs) (<= ofs (length1 s)))
      (=>
        (<= 0 len)
        (=>
          (<= (+ ofs len) (length1 s))
          (=>
            (and (<= 0 ofsqt) (<= ofsqt len))
            (=>
              (<= 0 lenqt)
              (=>
                (<= (+ ofsqt lenqt) len)
                (= (substring (substring s ofs len) ofsqt lenqt) (substring
                                                                   s
                                                                   (+ ofs ofsqt)
                                                                   lenqt))))))))))

;; concat_substring
(assert
  (forall ((s string) (ofs Int) (len Int) (lenqt Int))
    (=>
      (and (<= 0 ofs) (<= ofs (length1 s)))
      (=>
        (<= 0 len)
        (=>
          (<= (+ ofs len) (length1 s))
          (=>
            (<= 0 lenqt)
            (=>
              (and
                (<= 0 (+ (+ ofs len) lenqt))
                (<= (+ (+ ofs len) lenqt) (length1 s)))
              (= (concat2
                   (substring s ofs len)
                   (substring s (+ ofs len) lenqt)) (substring
                                                      s
                                                      ofs
                                                      (+ len lenqt))))))))))

;; prefixof
(declare-fun prefixof (string
  string) Bool)

;; prefixof_substring
(assert
  (forall ((s1 string) (s2 string))
    (= (prefixof s1 s2) (= s1 (substring s2 0 (length1 s1))))))

;; prefixof_concat
(assert (forall ((s1 string) (s2 string)) (prefixof s1 (concat2 s1 s2))))

;; prefixof_empty
(assert (forall ((s2 string)) (prefixof rliteral s2)))

;; prefixof_empty2
(assert
  (forall ((s1 string))
    (=> (not (= s1 rliteral)) (not (prefixof s1 rliteral)))))

;; suffixof
(declare-fun suffixof (string
  string) Bool)

;; suffixof_substring
(assert
  (forall ((s1 string) (s2 string))
    (=
      (suffixof s1 s2)
      (= s1 (substring s2 (- (length1 s2) (length1 s1)) (length1 s1))))))

;; suffixof_concat
(assert (forall ((s1 string) (s2 string)) (suffixof s2 (concat2 s1 s2))))

;; suffixof_empty
(assert (forall ((s2 string)) (suffixof rliteral s2)))

;; suffixof_empty2
(assert
  (forall ((s1 string))
    (=> (not (= s1 rliteral)) (not (suffixof s1 rliteral)))))

;; contains
(declare-fun contains (string
  string) Bool)

;; contains_prefixof
(assert
  (forall ((s1 string) (s2 string)) (=> (prefixof s1 s2) (contains s2 s1))))

;; contains_suffixof
(assert
  (forall ((s1 string) (s2 string)) (=> (suffixof s1 s2) (contains s2 s1))))

;; contains_empty
(assert (forall ((s2 string)) (= (contains rliteral s2) (= s2 rliteral))))

;; contains_empty2
(assert (forall ((s1 string)) (contains s1 rliteral)))

;; contains_substring
(assert
  (forall ((s1 string) (s2 string) (i Int))
    (=> (= (substring s1 i (length1 s2)) s2) (contains s1 s2))))

;; contains_concat
(assert
  (forall ((s1 string) (s2 string))
    (and (contains (concat2 s1 s2) s1) (contains (concat2 s1 s2) s2))))

;; contains_at
(assert
  (forall ((s1 string) (s2 string) (i Int))
    (=> (= (s_at s1 i) s2) (contains s1 s2))))

;; indexof
(declare-fun indexof (string
  string
  Int) Int)

;; indexof_empty
(assert
  (forall ((s string) (i Int))
    (=> (and (<= 0 i) (<= i (length1 s))) (= (indexof s rliteral i) i))))

;; indexof_empty1
(assert
  (forall ((s string) (i Int))
    (let ((j (indexof rliteral s i)))
      (or (= j (- 1)) (and (= s rliteral) (and (= i j) (= j 0)))))))

;; indexof_contains
(assert
  (forall ((s1 string) (s2 string))
    (let ((j (indexof s1 s2 0)))
      (=>
        (contains s1 s2)
        (and
          (and (<= 0 j) (<= j (length1 s1)))
          (= (substring s1 j (length1 s2)) s2))))))

;; contains_indexof
(assert
  (forall ((s1 string) (s2 string) (i Int))
    (=> (<= 0 (indexof s1 s2 i)) (contains s1 s2))))

;; not_contains_indexof
(assert
  (forall ((s1 string) (s2 string) (i Int))
    (=> (not (contains s1 s2)) (= (indexof s1 s2 i) (- 1)))))

;; substring_indexof
(assert
  (forall ((s1 string) (s2 string) (i Int))
    (let ((j (indexof s1 s2 i)))
      (=> (<= 0 j) (= (substring s1 j (length1 s2)) s2)))))

;; indexof_out_of_range
(assert
  (forall ((i Int) (s1 string) (s2 string))
    (=> (not (and (<= 0 i) (<= i (length1 s1)))) (= (indexof s1 s2 i) (- 1)))))

;; indexof_in_range
(assert
  (forall ((s1 string) (s2 string) (i Int))
    (let ((j (indexof s1 s2 i)))
      (=>
        (and (<= 0 i) (<= i (length1 s1)))
        (or (= j (- 1)) (and (<= i j) (<= j (length1 s1))))))))

;; indexof_contains_substring
(assert
  (forall ((s1 string) (s2 string) (i Int))
    (=>
      (and
        (and (<= 0 i) (<= i (length1 s1)))
        (contains (substring s1 i (- (length1 s1) i)) s2))
      (and (<= i (indexof s1 s2 i)) (<= (indexof s1 s2 i) (length1 s1))))))

;; replace
(declare-fun replace (string
  string
  string) string)

;; replace_empty
(assert
  (forall ((s1 string) (s3 string))
    (= (replace s1 rliteral s3) (concat2 s3 s1))))

;; replace_not_contains
(assert
  (forall ((s1 string) (s2 string) (s3 string))
    (=> (not (contains s1 s2)) (= (replace s1 s2 s3) s1))))

;; replace_empty2
(assert
  (forall ((s2 string) (s3 string))
    (let ((s4 (replace rliteral s2 s3)))
      (ite (= s2 rliteral) (= s4 s3) (= s4 rliteral)))))

;; replace_substring_indexof
(assert
  (forall ((s1 string) (s2 string) (s3 string))
    (let ((j (indexof s1 s2 0)))
      (= (replace s1 s2 s3) (ite (< j 0)
                              s1
                              (concat2
                                (concat2 (substring s1 0 j) s3)
                                (substring
                                  s1
                                  (+ j (length1 s2))
                                  (- (- (length1 s1) j) (length1 s2)))))))))

;; replaceall
(declare-fun replaceall (string
  string
  string) string)

;; replaceall_empty1
(assert
  (forall ((s1 string) (s3 string)) (= (replaceall s1 rliteral s3) s1)))

;; not_contains_replaceall
(assert
  (forall ((s1 string) (s2 string) (s3 string))
    (=> (not (contains s1 s2)) (= (replaceall s1 s2 s3) s1))))

;; to_int
(declare-fun to_int1 (string) Int)

;; to_int_gt_minus_1
(assert (forall ((s string)) (<= (- 1) (to_int1 s))))

;; to_int_empty
(assert (= (to_int1 rliteral) (- 1)))

;; is_digit
(declare-fun is_digit (string) Bool)

;; is_digit'def
(assert
  (forall ((s string))
    (=
      (is_digit s)
      (and (and (<= 0 (to_int1 s)) (<= (to_int1 s) 9)) (= (length1 s) 1)))))

;; from_int
(declare-fun from_int1 (Int) string)

;; from_int_negative
(assert (forall ((i Int)) (= (< i 0) (= (from_int1 i) rliteral))))

;; from_int_to_int
(assert
  (forall ((i Int))
    (ite (<= 0 i)
      (= (to_int1 (from_int1 i)) i)
      (= (to_int1 (from_int1 i)) (- 1)))))

(declare-sort char1 0)

;; char
(declare-fun char2 () ty)

;; contents
(declare-fun contents2 (char1) string)

;; char'invariant
(assert
  (forall ((self char1))
    (! (= (length1 (contents2 self)) 1) :pattern ((contents2 self)) )))

;; char_eq
(assert
  (forall ((c1 char1) (c2 char1))
    (=> (= (contents2 c1) (contents2 c2)) (= c1 c2))))

;; code
(declare-fun code (char1) Int)

;; code
(assert (forall ((c char1)) (and (<= 0 (code c)) (< (code c) 256))))

;; chr
(declare-fun chr (Int) char1)

;; code_chr
(assert
  (forall ((n Int)) (=> (and (<= 0 n) (< n 256)) (= (code (chr n)) n))))

;; chr_code
(assert (forall ((c char1)) (= (chr (code c)) c)))

;; get
(declare-fun get1 (string
  Int) char1)

;; get
(assert
  (forall ((s string) (i Int))
    (=>
      (and (<= 0 i) (< i (length1 s)))
      (= (contents2 (get1 s i)) (s_at s i)))))

;; substring_get
(assert
  (forall ((s string) (ofs Int) (len Int) (i Int))
    (=>
      (and (<= 0 ofs) (<= ofs (length1 s)))
      (=>
        (<= 0 len)
        (=>
          (<= (+ ofs len) (length1 s))
          (=>
            (and (<= 0 i) (< i len))
            (= (get1 (substring s ofs len) i) (get1 s (+ ofs i)))))))))

;; concat_first
(assert
  (forall ((s1 string) (s2 string))
    (forall ((i Int))
      (=>
        (and (<= 0 i) (< i (length1 s1)))
        (= (get1 (concat2 s1 s2) i) (get1 s1 i))))))

;; concat_second
(assert
  (forall ((s1 string) (s2 string))
    (forall ((i Int))
      (=>
        (and (<= (length1 s1) i) (< i (+ (length1 s1) (length1 s2))))
        (= (get1 (concat2 s1 s2) i) (get1 s2 (- i (length1 s1))))))))

;; eq_string
(declare-fun eq_string (string
  string) Bool)

;; eq_string'def
(assert
  (forall ((s1 string) (s2 string))
    (=
      (eq_string s1 s2)
      (and
        (= (length1 s1) (length1 s2))
        (forall ((i Int))
          (=> (and (<= 0 i) (< i (length1 s1))) (= (get1 s1 i) (get1 s2 i))))))))

;; extensionality
(assert (forall ((s1 string) (s2 string)) (=> (eq_string s1 s2) (= s1 s2))))

;; make
(declare-fun make1 (Int
  char1) string)

;; make_length
(assert
  (forall ((size Int) (v char1))
    (=> (<= 0 size) (= (length1 (make1 size v)) size))))

;; make_contents
(assert
  (forall ((size Int) (v char1))
    (=>
      (<= 0 size)
      (forall ((i Int))
        (=> (and (<= 0 i) (< i size)) (= (get1 (make1 size v) i) v))))))

;; int_to_string
(declare-fun int_to_string (Int) string)

;; circ_to_string_
(declare-fun circ_to_string_ (circuit2) string)

;; rliteral
(declare-fun rliteral1 () string)

;; rliteral_axiom
(assert true)

;; rliteral
(declare-fun rliteral2 () string)

;; rliteral_axiom
(assert true)

;; rliteral
(declare-fun rliteral3 () string)

;; rliteral_axiom
(assert true)

;; rliteral
(declare-fun rliteral4 () string)

;; rliteral_axiom
(assert true)

;; rliteral
(declare-fun rliteral5 () string)

;; rliteral_axiom
(assert true)

;; rliteral
(declare-fun rliteral6 () string)

;; rliteral_axiom
(assert true)

;; rliteral
(declare-fun rliteral7 () string)

;; rliteral_axiom
(assert true)

;; rliteral
(declare-fun rliteral8 () string)

;; rliteral_axiom
(assert true)

;; rliteral
(declare-fun rliteral9 () string)

;; rliteral_axiom
(assert true)

;; rliteral
(declare-fun rliteral10 () string)

;; rliteral_axiom
(assert true)

;; rliteral
(declare-fun rliteral11 () string)

;; rliteral_axiom
(assert true)

;; circ_to_string_'def
(assert
  (forall ((c circuit2))
    (and
      (and
        (and
          (and
            (and
              (and
                (and
                  (and
                    (forall ((x Int))
                      (=>
                        (= (pre c) (Phase x))
                        (= (circ_to_string_ c) (concat2
                                                 (concat2
                                                   rliteral1
                                                   (int_to_string x))
                                                 rliteral2))))
                    (forall ((x Int))
                      (=>
                        (= (pre c) (Rz x))
                        (= (circ_to_string_ c) (concat2
                                                 (concat2
                                                   rliteral3
                                                   (int_to_string x))
                                                 rliteral2)))))
                  (=> (= (pre c) Hadamard) (= (circ_to_string_ c) rliteral4)))
                (=> (= (pre c) Cnot) (= (circ_to_string_ c) rliteral5)))
              (=> (= (pre c) Swap) (= (circ_to_string_ c) rliteral6)))
            (=> (= (pre c) Id) (= (circ_to_string_ c) rliteral7)))
          (forall ((x circuit_pre) (x1 circuit_pre))
            (=>
              (= (pre c) (Sequence x x1))
              (= (circ_to_string_ c) (concat2
                                       (concat2
                                         (circ_to_string_ (to_qc x))
                                         rliteral8)
                                       (circ_to_string_ (to_qc x1)))))))
        (forall ((x circuit_pre) (x1 circuit_pre))
          (=>
            (= (pre c) (Parallel x x1))
            (= (circ_to_string_ c) (concat2
                                     (concat2
                                       (concat2
                                         (concat2
                                           rliteral9
                                           (circ_to_string_ (to_qc x)))
                                         rliteral10)
                                       (circ_to_string_ (to_qc x1)))
                                     rliteral2)))))
      (forall ((x circuit_pre) (x1 Int))
        (=>
          (= (pre c) (Ancillas x x1))
          (= (circ_to_string_ c) (concat2
                                   (concat2
                                     rliteral11
                                     (circ_to_string_ (to_qc x)))
                                   rliteral2)))))))

;; circ_to_string
(declare-fun circ_to_string (circuit2) string)

;; rliteral
(declare-fun rliteral12 () string)

;; rliteral_axiom
(assert true)

;; circ_to_string'def
(assert
  (forall ((c circuit2))
    (= (circ_to_string c) (concat2 (circ_to_string_ c) rliteral12))))

;; to_qc_rev
(assert (forall ((c circuit2)) (= c (to_qc (pre c)))))

;; to_qc_pre
(assert (forall ((c circuit2)) (= (to_qc (pre c)) c)))

;; pre_rev
(assert (forall ((c circuit_pre)) (=> (correct c) (= c (pre (to_qc c))))))

;; pre_to_qc
(assert (forall ((c circuit_pre)) (=> (correct c) (= (pre (to_qc c)) c))))

;; circ_to_pps
(declare-fun circ_to_pps (circuit2) pps)

;; circ_to_pps'def
(assert
  (forall ((c circuit2))
    (and
      (and
        (and
          (and
            (and
              (and
                (and
                  (and
                    (forall ((k Int))
                      (=>
                        (= (pre c) (Phase k))
                        (= (circ_to_pps c) (pps_phase k))))
                    (forall ((k Int))
                      (=> (= (pre c) (Rz k)) (= (circ_to_pps c) (pps_rz k)))))
                  (=> (= (pre c) Hadamard) (= (circ_to_pps c) pps_hadamard)))
                (=> (= (pre c) Cnot) (= (circ_to_pps c) (pps_cnot 0 1 2))))
              (=> (= (pre c) Swap) (= (circ_to_pps c) (pps_swap 0 1 2))))
            (=> (= (pre c) Id) (= (circ_to_pps c) pps_id)))
          (forall ((d circuit_pre) (e circuit_pre))
            (=>
              (= (pre c) (Sequence d e))
              (= (circ_to_pps c) (pps_seq
                                   (circ_to_pps (to_qc d))
                                   (circ_to_pps (to_qc e)))))))
        (forall ((d circuit_pre) (e circuit_pre))
          (=>
            (= (pre c) (Parallel d e))
            (= (circ_to_pps c) (pps_par
                                 (circ_to_pps (to_qc d))
                                 (circ_to_pps (to_qc e)))))))
      (forall ((d circuit_pre) (i Int))
        (=>
          (= (pre c) (Ancillas d i))
          (= (circ_to_pps c) (pps_ancs (circ_to_pps (to_qc d)) i)))))))

;; circ_to_pps'spec
(assert
  (forall ((c circuit2))
    (and
      (= (circ_to_pps c) (circ_to_pps_pre (pre c)))
      (and
        (= (h_width (circ_to_pps c)) (width_pre (pre c)))
        (<= 1 (h_width (circ_to_pps c)))))))

;; width
(declare-fun width (circuit2) Int)

;; width'def
(assert (forall ((c circuit2)) (= (width c) (width_pre (pre c)))))

;; width'spec
(assert
  (forall ((c circuit2))
    (and (<= 1 (width c)) (= (width c) (h_width (circ_to_pps c))))))

;; mat_sem
(declare-fun mat_sem (circuit2) (matrix complex))

;; mat_sem'def
(assert
  (forall ((c circuit2))
    (and
      (and
        (and
          (and
            (and
              (and
                (and
                  (and
                    (forall ((k Int))
                      (=>
                        (= (pre c) (Phase k))
                        (= (mat_sem c) (sem_phase_mat k))))
                    (forall ((k Int))
                      (=> (= (pre c) (Rz k)) (= (mat_sem c) (sem_rz_mat k)))))
                  (=>
                    (= (pre c) Hadamard)
                    (= (mat_sem c) (sem_hadamard_mat Tuple0))))
                (=> (= (pre c) Cnot) (= (mat_sem c) (sem_cnot_mat Tuple0))))
              (=> (= (pre c) Swap) (= (mat_sem c) (sem_swap_mat Tuple0))))
            (=> (= (pre c) Id) (= (mat_sem c) (sem_id_mat Tuple0))))
          (forall ((d circuit_pre) (e circuit_pre))
            (=>
              (= (pre c) (Sequence d e))
              (= (mat_sem c) (mat_mult
                               (mat_sem (to_qc e))
                               (mat_sem (to_qc d)))))))
        (forall ((d circuit_pre) (e circuit_pre))
          (=>
            (= (pre c) (Parallel d e))
            (= (mat_sem c) (kronecker
                             (mat_sem (to_qc d))
                             (mat_sem (to_qc e)))))))
      (forall ((d circuit_pre) (i Int))
        (=>
          (= (pre c) (Ancillas d i))
          (= (mat_sem c) (pps_to_mat (pps_ancs (circ_to_pps (to_qc d)) i))))))))

;; mat_sem'spec
(assert
  (forall ((c circuit2))
    (and
      (= (rows complex1 (t2tb65 (mat_sem c))) (power 2 (width_pre (pre c))))
      (and
        (= (columns complex1 (t2tb65 (mat_sem c))) (power
                                                     2
                                                     (width_pre (pre c))))
        (and
          (forall ((x bitvec))
            (=>
              (= (length x) (width_pre (pre c)))
              (= (mat_mult (mat_sem c) (bv_to_ket x)) (pps_apply_basis
                                                        (circ_to_pps c)
                                                        x))))
          (forall ((x (matrix complex)))
            (=>
              (is_a_ket_l x (width_pre (pre c)))
              (= (mat_mult (mat_sem c) x) (pps_apply (circ_to_pps c) x)))))))))

;; pps_to_mat_mat_sem
(assert (forall ((c circuit2)) (= (mat_sem c) (pps_to_mat (circ_to_pps c)))))

;; sem_correction_gen
(assert
  (forall ((c circuit2) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width c))
      (= (mat_mult (mat_sem c) x) (pps_apply (circ_to_pps c) x)))))

;; sem_correction_gen_rev
(assert
  (forall ((c circuit2) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width c))
      (= (pps_apply (circ_to_pps c) x) (mat_mult (mat_sem c) x)))))

;; size
(declare-fun size (circuit2) Int)

;; size'def
(assert
  (forall ((c circuit2))
    (and
      (and
        (and
          (and
            (and
              (and
                (and
                  (and
                    (forall ((w Int))
                      (=> (= (pre c) (Phase w)) (= (size c) 1)))
                    (forall ((w Int)) (=> (= (pre c) (Rz w)) (= (size c) 1))))
                  (=> (= (pre c) Hadamard) (= (size c) 1)))
                (=> (= (pre c) Cnot) (= (size c) 1)))
              (=> (= (pre c) Swap) (= (size c) 0)))
            (=> (= (pre c) Id) (= (size c) 0)))
          (forall ((x circuit_pre) (x1 circuit_pre))
            (=>
              (= (pre c) (Sequence x x1))
              (= (size c) (+ (size (to_qc x)) (size (to_qc x1)))))))
        (forall ((x circuit_pre) (x1 circuit_pre))
          (=>
            (= (pre c) (Parallel x x1))
            (= (size c) (+ (size (to_qc x)) (size (to_qc x1)))))))
      (forall ((x circuit_pre) (x1 Int))
        (=> (= (pre c) (Ancillas x x1)) (= (size c) (size (to_qc x))))))))

;; size'spec
(assert (forall ((c circuit2)) (<= 0 (size c))))

;; min
(declare-fun min (Int
  Int) Int)

;; min'def
(assert
  (forall ((x Int) (y Int)) (ite (<= x y) (= (min x y) x) (= (min x y) y))))

;; max
(declare-fun max (Int
  Int) Int)

;; max'def
(assert
  (forall ((x Int) (y Int)) (ite (<= x y) (= (max x y) y) (= (max x y) x))))

;; Min_r
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
(assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
(assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
(assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
(assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

;; min_set
(declare-fun min_set ((set Int)) Int)

;; min_set'def
(assert
  (forall ((s (set Int)))
    (=>
      (< 0 (cardinal int (t2tb16 s)))
      (ite (= (cardinal int (t2tb16 s)) 1)
        (= (min_set s) (tb2t8 (choose1 int (t2tb16 s))))
        (= (min_set s) (min
                         (tb2t8 (choose1 int (t2tb16 s)))
                         (min_set
                           (tb2t16
                             (remove int (choose1 int (t2tb16 s)) (t2tb16 s))))))))))

;; min_set'spec
(assert
  (forall ((s (set Int)))
    (=>
      (< 0 (cardinal int (t2tb16 s)))
      (and
        (mem int (t2tb8 (min_set s)) (t2tb16 s))
        (forall ((e Int))
          (=> (mem int (t2tb8 e) (t2tb16 s)) (<= (min_set s) e)))))))

;; max_set
(declare-fun max_set ((set Int)) Int)

;; max_set'def
(assert
  (forall ((s (set Int)))
    (=>
      (< 0 (cardinal int (t2tb16 s)))
      (ite (= (cardinal int (t2tb16 s)) 1)
        (= (max_set s) (tb2t8 (choose1 int (t2tb16 s))))
        (= (max_set s) (max
                         (tb2t8 (choose1 int (t2tb16 s)))
                         (max_set
                           (tb2t16
                             (remove int (choose1 int (t2tb16 s)) (t2tb16 s))))))))))

;; max_set'spec
(assert
  (forall ((s (set Int)))
    (=>
      (< 0 (cardinal int (t2tb16 s)))
      (and
        (mem int (t2tb8 (max_set s)) (t2tb16 s))
        (forall ((e Int))
          (=> (mem int (t2tb8 e) (t2tb16 s)) (<= e (max_set s))))))))

;; max3
(declare-fun max3 (Int
  Int
  Int) Int)

;; max3'def
(assert
  (forall ((a Int) (b Int) (c Int)) (= (max3 a b c) (max (max a b) c))))

;; max3'spec
(assert
  (forall ((a Int) (b Int) (c Int))
    (and
      (<= a (max3 a b c))
      (and
        (<= b (max3 a b c))
        (and (<= c (max3 a b c)) (= (max3 a b c) (max a (max b c))))))))

;; min3
(declare-fun min3 (Int
  Int
  Int) Int)

;; min3'def
(assert
  (forall ((a Int) (b Int) (c Int)) (= (min3 a b c) (min (min a b) c))))

;; min3'spec
(assert
  (forall ((a Int) (b Int) (c Int))
    (and
      (<= (min3 a b c) a)
      (and
        (<= (min3 a b c) b)
        (and (<= (min3 a b c) c) (= (min3 a b c) (min a (min b c))))))))

;; midd3
(declare-fun midd3 (Int
  Int
  Int) Int)

;; midd3'def
(assert
  (forall ((a Int) (b Int) (c Int))
    (ite (= (min3 a b c) a)
      (ite (= (max3 a b c) b) (= (midd3 a b c) c) (= (midd3 a b c) b))
      (ite (= (min3 a b c) b)
        (ite (= (max3 a b c) a) (= (midd3 a b c) c) (= (midd3 a b c) a))
        (ite (= (max3 a b c) a) (= (midd3 a b c) b) (= (midd3 a b c) a))))))

;; midd3'spec
(assert
  (forall ((a Int) (b Int) (c Int))
    (and (<= (min3 a b c) (midd3 a b c)) (<= (midd3 a b c) (max3 a b c)))))

;; max3_strict
(declare-fun max3_strict (Int
  Int
  Int) Int)

;; max3_strict'def
(assert
  (forall ((a Int) (b Int) (c Int))
    (=>
      (not (= a b))
      (=>
        (not (= a c))
        (=> (not (= b c)) (= (max3_strict a b c) (max3 a b c)))))))

;; max3_strict'spec
(assert
  (forall ((a Int) (b Int) (c Int))
    (=>
      (not (= a b))
      (=>
        (not (= a c))
        (=>
          (not (= b c))
          (and
            (< (min3 a b c) (midd3 a b c))
            (< (midd3 a b c) (max3_strict a b c))))))))

;; min3_strict
(declare-fun min3_strict (Int
  Int
  Int) Int)

;; min3_strict'def
(assert
  (forall ((a Int) (b Int) (c Int))
    (=>
      (not (= a b))
      (=>
        (not (= a c))
        (=> (not (= b c)) (= (min3_strict a b c) (min3 a b c)))))))

;; min3_strict'spec
(assert
  (forall ((a Int) (b Int) (c Int))
    (=>
      (not (= a b))
      (=>
        (not (= a c))
        (=>
          (not (= b c))
          (and
            (< (min3_strict a b c) (midd3 a b c))
            (< (midd3 a b c) (max3_strict a b c))))))))

;; midd3_strict
(declare-fun midd3_strict (Int
  Int
  Int) Int)

;; midd3_strict'def
(assert
  (forall ((a Int) (b Int) (c Int))
    (=>
      (not (= a b))
      (=>
        (not (= a c))
        (=> (not (= b c)) (= (midd3_strict a b c) (midd3 a b c)))))))

;; midd3_strict'spec
(assert
  (forall ((a Int) (b Int) (c Int))
    (=>
      (not (= a b))
      (=>
        (not (= a c))
        (=>
          (not (= b c))
          (and
            (< (min3_strict a b c) (midd3_strict a b c))
            (< (midd3_strict a b c) (max3_strict a b c))))))))

;; max_right
(assert (forall ((a Int) (b Int)) (=> (<= a b) (= (max a b) b))))

;; max_left
(assert (forall ((a Int) (b Int)) (=> (<= b a) (= (max a b) a))))

;; min_filter
(declare-fun min_filter ((set Int)
  (Array Int Bool)) Int)

;; min_filter'def
(assert
  (forall ((s (set Int)) (p (Array Int Bool)))
    (=>
      (exists ((e Int))
        (and
          (mem int (t2tb8 e) (t2tb16 s))
          (= (tb2t10 (infix_at bool int (t2tb21 p) (t2tb8 e))) true)))
      (ite (= (tb2t10 (infix_at bool int (t2tb21 p) (t2tb8 (min_set s)))) true)
        (= (min_filter s p) (min_set s))
        (= (min_filter s p) (min_filter
                              (tb2t16
                                (remove int (t2tb8 (min_set s)) (t2tb16 s)))
                              p))))))

;; min_filter'spec
(assert
  (forall ((s (set Int)) (p (Array Int Bool)))
    (=>
      (exists ((e Int))
        (and
          (mem int (t2tb8 e) (t2tb16 s))
          (= (tb2t10 (infix_at bool int (t2tb21 p) (t2tb8 e))) true)))
      (and
        (= (tb2t10 (infix_at bool int (t2tb21 p) (t2tb8 (min_filter s p)))) true)
        (and
          (mem int (t2tb8 (min_filter s p)) (t2tb16 s))
          (and
            (forall ((e Int))
              (=>
                (mem int (t2tb8 e) (t2tb16 s))
                (=>
                  (= (tb2t10 (infix_at bool int (t2tb21 p) (t2tb8 e))) true)
                  (<= (min_filter s p) e))))
            (forall ((e Int))
              (=>
                (mem int (t2tb8 e) (t2tb16 s))
                (=>
                  (< e (min_filter s p))
                  (not
                    (= (tb2t10 (infix_at bool int (t2tb21 p) (t2tb8 e))) true)))))))))))

;; min_filter_min_set
(assert
  (forall ((s (set Int)) (p (Array Int Bool)))
    (=>
      (exists ((e Int))
        (and
          (mem int (t2tb8 e) (t2tb16 s))
          (= (tb2t10 (infix_at bool int (t2tb21 p) (t2tb8 e))) true)))
      (= (min_filter s p) (min_set
                            (tb2t16 (my_filter int (t2tb16 s) (t2tb21 p))))))))

;; max_filter
(declare-fun max_filter ((set Int)
  (Array Int Bool)) Int)

;; max_filter'def
(assert
  (forall ((s (set Int)) (p (Array Int Bool)))
    (=>
      (exists ((e Int))
        (and
          (mem int (t2tb8 e) (t2tb16 s))
          (= (tb2t10 (infix_at bool int (t2tb21 p) (t2tb8 e))) true)))
      (ite (= (tb2t10 (infix_at bool int (t2tb21 p) (t2tb8 (max_set s)))) true)
        (= (max_filter s p) (max_set s))
        (= (max_filter s p) (max_filter
                              (tb2t16
                                (remove int (t2tb8 (max_set s)) (t2tb16 s)))
                              p))))))

;; max_filter'spec
(assert
  (forall ((s (set Int)) (p (Array Int Bool)))
    (=>
      (exists ((e Int))
        (and
          (mem int (t2tb8 e) (t2tb16 s))
          (= (tb2t10 (infix_at bool int (t2tb21 p) (t2tb8 e))) true)))
      (and
        (= (tb2t10 (infix_at bool int (t2tb21 p) (t2tb8 (max_filter s p)))) true)
        (and
          (mem int (t2tb8 (max_filter s p)) (t2tb16 s))
          (and
            (forall ((e Int))
              (=>
                (mem int (t2tb8 e) (t2tb16 s))
                (=>
                  (= (tb2t10 (infix_at bool int (t2tb21 p) (t2tb8 e))) true)
                  (<= e (max_filter s p)))))
            (forall ((e Int))
              (=>
                (mem int (t2tb8 e) (t2tb16 s))
                (=>
                  (< (max_filter s p) e)
                  (not
                    (= (tb2t10 (infix_at bool int (t2tb21 p) (t2tb8 e))) true)))))))))))

;; appr_pre
(assert
  (forall ((theta complex) (n Int))
    (=>
      (< 0 n)
      (=>
        (real_ theta)
        (=>
          (and (infix_lsdt c_zero theta) (infix_lseqdt theta c_one))
          (exists ((k Int))
            (and
              (mem int (t2tb8 k) (t2tb16 (to_fset 0 (+ n 1))))
              (infix_lseqdt
                (modulus
                  (infix_mndt theta (infix_sldt (i_to_c k) (i_to_c n))))
                (infix_sldt c_one (i_to_c (* n 2)))))))))))

;; appr
(assert
  (forall ((theta complex) (n Int))
    (=>
      (< 0 n)
      (=>
        (real_ theta)
        (=>
          (and (infix_lseqdt c_zero theta) (infix_lseqdt theta c_one))
          (exists ((k Int))
            (and
              (mem int (t2tb8 k) (t2tb16 (to_fset 0 (+ n 1))))
              (infix_lseqdt
                (modulus
                  (infix_mndt theta (infix_sldt (i_to_c k) (i_to_c n))))
                (infix_sldt c_one (i_to_c (* n 2)))))))))))

;; min_complex
(declare-fun min_complex (complex
  complex) complex)

;; min_complex'def
(assert
  (forall ((a complex) (b complex))
    (=>
      (real_ a)
      (=>
        (real_ b)
        (ite (infix_lseqdt a b)
          (= (min_complex a b) a)
          (= (min_complex a b) b))))))

;; min_complex'spec
(assert
  (forall ((a complex) (b complex))
    (=>
      (real_ a)
      (=>
        (real_ b)
        (and
          (real_ (min_complex a b))
          (and
            (infix_lseqdt (min_complex a b) a)
            (infix_lseqdt (min_complex a b) b)))))))

;; min_set_complex
(declare-fun min_set_complex (ty
  uni
  uni) complex)

;; min_set_complex'def
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni))
      (=>
        (< 0 (cardinal a s))
        (=>
          (forall ((x uni))
            (=>
              (sort a x)
              (=> (mem a x s) (real_ (tb2t (infix_at complex1 a f x))))))
          (ite (= (cardinal a s) 1)
            (= (min_set_complex a s f) (tb2t
                                         (infix_at
                                           complex1
                                           a
                                           f
                                           (choose1 a s))))
            (= (min_set_complex a s f) (min_complex
                                         (tb2t
                                           (infix_at
                                             complex1
                                             a
                                             f
                                             (choose1 a s)))
                                         (min_set_complex
                                           a
                                           (remove a (choose1 a s) s)
                                           f)))))))))

;; min_set_complex'spec
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni))
      (=>
        (< 0 (cardinal a s))
        (=>
          (forall ((x uni))
            (=>
              (sort a x)
              (=> (mem a x s) (real_ (tb2t (infix_at complex1 a f x))))))
          (and
            (exists ((e uni))
              (and
                (sort a e)
                (and
                  (mem a e s)
                  (= (min_set_complex a s f) (tb2t (infix_at complex1 a f e))))))
            (and
              (real_ (min_set_complex a s f))
              (forall ((e uni))
                (=>
                  (mem a e s)
                  (infix_lseqdt
                    (min_set_complex a s f)
                    (tb2t (infix_at complex1 a f e))))))))))))

;; min_set_complex_pos
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni))
      (=>
        (< 0 (cardinal a s))
        (=>
          (forall ((x uni))
            (=>
              (sort a x)
              (=> (mem a x s) (real_ (tb2t (infix_at complex1 a f x))))))
          (=>
            (forall ((x uni))
              (=>
                (sort a x)
                (=>
                  (mem a x s)
                  (infix_lseqdt c_zero (tb2t (infix_at complex1 a f x))))))
            (infix_lseqdt c_zero (min_set_complex a s f))))))))

;; ancillas
(declare-fun ancillas (circuit2) Int)

;; ancillas'def
(assert
  (forall ((c circuit2))
    (and
      (and
        (and
          (and
            (and
              (and
                (and
                  (and
                    (forall ((w Int))
                      (=> (= (pre c) (Phase w)) (= (ancillas c) 0)))
                    (forall ((w Int))
                      (=> (= (pre c) (Rz w)) (= (ancillas c) 0))))
                  (=> (= (pre c) Hadamard) (= (ancillas c) 0)))
                (=> (= (pre c) Cnot) (= (ancillas c) 0)))
              (=> (= (pre c) Swap) (= (ancillas c) 0)))
            (=> (= (pre c) Id) (= (ancillas c) 0)))
          (forall ((d circuit_pre) (e circuit_pre))
            (=>
              (= (pre c) (Sequence d e))
              (= (ancillas c) (max (ancillas (to_qc d)) (ancillas (to_qc e)))))))
        (forall ((d circuit_pre) (e circuit_pre))
          (=>
            (= (pre c) (Parallel d e))
            (= (ancillas c) (+ (ancillas (to_qc d)) (ancillas (to_qc e)))))))
      (forall ((d circuit_pre) (i Int))
        (=>
          (= (pre c) (Ancillas d i))
          (= (ancillas c) (+ (ancillas (to_qc d)) i)))))))

;; ancillas'spec
(assert (forall ((c circuit2)) (<= 0 (ancillas c))))

;; range
(declare-fun range (circuit2) Int)

;; range'def
(assert (forall ((c circuit2)) (= (range c) (h_range (circ_to_pps c)))))

;; range'spec
(assert (forall ((c circuit2)) (<= 0 (range c))))

;; basis_ket
(declare-fun basis_ket (circuit2
  (Array Int Int)
  (Array Int Int)
  Int) Int)

;; basis_ket'def
(assert
  (forall ((c circuit2) (x (Array Int Int)) (y (Array Int Int)) (i Int))
    (= (basis_ket c x y i) (select (select (select (h_basis_ket
                                                     (circ_to_pps c)) x) y) i))))

;; basis_ket'spec
(assert
  (forall ((c circuit2) (x (Array Int Int)) (y (Array Int Int)) (i Int))
    (=>
      (forall ((i1 Int))
        (=>
          (and (<= 0 i1) (< i1 (width c)))
          (and (<= 0 (select x i1)) (< (select x i1) 2))))
      (=>
        (forall ((i1 Int))
          (=>
            (and (<= 0 i1) (< i1 (range c)))
            (and (<= 0 (select y i1)) (< (select y i1) 2))))
        (=>
          (and (<= 0 i) (< i (width c)))
          (and (<= 0 (basis_ket c x y i)) (< (basis_ket c x y i) 2)))))))

;; basis_ket_closure
(declare-fun basis_ket_closure () (Array circuit2 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))

;; t2tb
(declare-fun t2tb123 (circuit2) uni)

;; t2tb_sort
(assert (forall ((x circuit2)) (sort circuit3 (t2tb123 x))))

;; tb2t
(declare-fun tb2t123 (uni) circuit2)

;; BridgeL
(assert
  (forall ((i circuit2))
    (! (= (tb2t123 (t2tb123 i)) i) :pattern ((t2tb123 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=> (sort circuit3 j) (= (t2tb123 (tb2t123 j)) j)) :pattern ((t2tb123
                                                                    (tb2t123
                                                                    j))) )))

;; t2tb
(declare-fun t2tb124 ((Array circuit2 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array circuit2 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (sort
      (infix_mngt
        circuit3
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int))))
      (t2tb124 x))))

;; tb2t
(declare-fun tb2t124 (uni) (Array circuit2 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))

;; BridgeL
(assert
  (forall ((i (Array circuit2 (Array (Array Int Int) (Array (Array Int Int) (Array Int Int))))))
    (! (= (tb2t124 (t2tb124 i)) i) :pattern ((t2tb124 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb124 (tb2t124 j)) j) :pattern ((t2tb124 (tb2t124 j))) )))

;; basis_ket_closure_def
(assert
  (forall ((y circuit2) (y1 (Array Int Int)) (y2 (Array Int Int)) (y3 Int))
    (= (select (select (select (tb2t3
                                 (infix_at
                                   (infix_mngt
                                     (infix_mngt int int)
                                     (infix_mngt
                                       (infix_mngt int int)
                                       (infix_mngt int int)))
                                   circuit3
                                   (t2tb124 basis_ket_closure)
                                   (t2tb123 y))) y1) y2) y3) (basis_ket
                                                               y
                                                               y1
                                                               y2
                                                               y3))))

;; binary_basis_ket
(assert
  (forall ((c circuit2) (w Int) (x (Array Int Int)) (y (Array Int Int)))
    (=>
      (= w (width c))
      (=>
        (binary_l x w)
        (=>
          (binary_l y (range c))
          (binary_l
            (select (select (tb2t3
                              (infix_at
                                (infix_mngt
                                  (infix_mngt int int)
                                  (infix_mngt
                                    (infix_mngt int int)
                                    (infix_mngt int int)))
                                circuit3
                                (t2tb124 basis_ket_closure)
                                (t2tb123 c))) x) y)
            w))))))

;; basis_ket_invariant
(assert
  (forall ((c circuit2))
    (forall ((x (Array Int Int)) (xqt (Array Int Int)) (y (Array Int Int)) (yqt (Array Int Int)))
      (=>
        (forall ((i Int))
          (=> (and (<= 0 i) (< i (width c))) (= (select x i) (select xqt i))))
        (=>
          (forall ((i Int))
            (=>
              (and (<= 0 i) (< i (range c)))
              (= (select y i) (select yqt i))))
          (forall ((i Int))
            (=>
              (and (<= 0 i) (< i (width c)))
              (= (basis_ket c x y i) (basis_ket c xqt yqt i)))))))))

;; ang_ind
(declare-fun ang_ind (circuit2
  (Array Int Int)
  (Array Int Int)) angle)

;; ang_ind'def
(assert
  (forall ((c circuit2) (x (Array Int Int)) (y (Array Int Int)))
    (= (ang_ind c x y) (tb2t84
                         (infix_at
                           angle1
                           (infix_mngt int int)
                           (infix_at
                             (infix_mngt (infix_mngt int int) angle1)
                             (infix_mngt int int)
                             (t2tb118 (h_angle (circ_to_pps c)))
                             (t2tb7 x))
                           (t2tb7 y))))))

;; ang_ind_invariant
(assert
  (forall ((c circuit2))
    (forall ((x (Array Int Int)) (xqt (Array Int Int)) (y (Array Int Int)) (yqt (Array Int Int)))
      (=>
        (forall ((i Int))
          (=> (and (<= 0 i) (< i (width c))) (= (select x i) (select xqt i))))
        (=>
          (forall ((i Int))
            (=>
              (and (<= 0 i) (< i (range c)))
              (= (select y i) (select yqt i))))
          (= (ang_ind c x y) (ang_ind c xqt yqt)))))))

;; phase
(declare-fun phase (Int) circuit2)

;; phase'spec
(assert
  (forall ((k Int))
    (and
      (= (pre (phase k)) (Phase k))
      (and
        (= (circ_to_pps (phase k)) (pps_phase k))
        (and
          (= (ancillas (phase k)) 0)
          (and
            (= (size (phase k)) 1)
            (and
              (= (range (phase k)) 0)
              (and
                (= (width (phase k)) 1)
                (and
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (forall ((i Int))
                      (= (basis_ket (phase k) x y i) (select x i))))
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (= (ang_ind (phase k) x y) (infix_sldtsl 1 k))))))))))))

;; rz
(declare-fun rz (Int) circuit2)

;; rz'spec
(assert
  (forall ((k Int))
    (and
      (= (pre (rz k)) (Rz k))
      (and
        (= (circ_to_pps (rz k)) (pps_rz k))
        (and
          (= (ancillas (rz k)) 0)
          (and
            (= (size (rz k)) 1)
            (and
              (= (range (rz k)) 0)
              (and
                (= (width (rz k)) 1)
                (and
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (forall ((i Int))
                      (= (basis_ket (rz k) x y i) (select x i))))
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (= (ang_ind (rz k) x y) (infix_sldtsl (select x 0) k))))))))))))

;; hadamard
(declare-fun hadamard () circuit2)

;; hadamard'def
(assert
  (and
    (= (pre hadamard) Hadamard)
    (and
      (= (circ_to_pps hadamard) pps_hadamard)
      (and
        (= (ancillas hadamard) 0)
        (and
          (= (size hadamard) 1)
          (and
            (= (range hadamard) 1)
            (and
              (= (width hadamard) 1)
              (and
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (forall ((i Int))
                    (= (basis_ket hadamard x y i) (select y i))))
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (= (ang_ind hadamard x y) (infix_sldtsl
                                              (* (select x 0) (select y 0))
                                              1)))))))))))

;; cnot
(declare-fun cnot () circuit2)

;; cnot'def
(assert
  (and
    (= (pre cnot) Cnot)
    (and
      (= (circ_to_pps cnot) (pps_cnot 0 1 2))
      (and
        (= (ancillas cnot) 0)
        (and
          (= (size cnot) 1)
          (and
            (= (range cnot) 0)
            (and
              (= (width cnot) 2)
              (and
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (forall ((i Int))
                    (=>
                      (not (= i 1))
                      (= (basis_ket cnot x y i) (select x i)))))
                (and
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (forall ((i Int))
                      (=>
                        (= i 1)
                        (= (basis_ket cnot x y i) (+ (* (select x 0) (- 1 (select x i))) (* (select x i) (- 1 (select x 0))))))))
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (= (ang_ind cnot x y) ang_zero)))))))))))

;; id
(declare-fun id () circuit2)

;; id'def
(assert
  (and
    (= (pre id) Id)
    (and
      (= (circ_to_pps id) pps_id)
      (and
        (= (ancillas id) 0)
        (and
          (= (size id) 0)
          (and
            (= (range id) 0)
            (and
              (= (width id) 1)
              (and
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (forall ((i Int)) (= (basis_ket id x y i) (select x i))))
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (= (ang_ind id x y) ang_zero))))))))))

;; swap
(declare-fun swap () circuit2)

;; swap'def
(assert
  (and
    (= (pre swap) Swap)
    (and
      (= (circ_to_pps swap) (pps_swap 0 1 2))
      (and
        (= (ancillas swap) 0)
        (and
          (= (size swap) 0)
          (and
            (= (range swap) 0)
            (and
              (= (width swap) 2)
              (and
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (= (basis_ket swap x y 0) (select x 1)))
                (and
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (= (basis_ket swap x y 1) (select x 0)))
                  (and
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (forall ((i Int))
                        (=>
                          (and (<= 0 i) (< i 2))
                          (= (basis_ket swap x y i) (select x (- 1 i))))))
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (= (ang_ind swap x y) ang_zero))))))))))))

;; sequence
(declare-fun sequence (circuit2
  circuit2) circuit2)

;; sequence'spec
(assert
  (forall ((d circuit2) (e circuit2))
    (=>
      (= (width d) (width e))
      (and
        (= (pre (sequence d e)) (Sequence (pre d) (pre e)))
        (and
          (= (sequence d e) (to_qc (Sequence (pre d) (pre e))))
          (= (circ_to_pps (sequence d e)) (pps_seq
                                            (circ_to_pps d)
                                            (circ_to_pps e))))))))

;; ancilla
(declare-fun ancilla (circuit2
  Int) circuit2)

;; ancilla'spec
(assert
  (forall ((d circuit2) (i Int))
    (=>
      (<= 1 i)
      (=>
        (<= (+ i 1) (width d))
        (=>
          (exists ((path_sem_target (Array (matrix complex) (matrix complex))))
            (forall ((x (matrix complex)))
              (=>
                (is_a_ket_l x (- (width d) i))
                (=>
                  (is_a_ket_basis_elt x)
                  (= (pps_apply (circ_to_pps d) (kronecker x (ket i 0))) 
                  (kronecker
                    (tb2t65
                      (infix_at
                        (matrix1 complex1)
                        (matrix1 complex1)
                        (t2tb66 path_sem_target)
                        (t2tb65 x)))
                    (ket i 0)))))))
          (and
            (= (pre (ancilla d i)) (Ancillas (pre d) i))
            (and
              (= (ancilla d i) (to_qc (Ancillas (pre d) i)))
              (= (circ_to_pps (ancilla d i)) (pps_ancs (circ_to_pps d) i)))))))))

;; ancilla_pre_cond
(assert
  (forall ((d circuit2) (e circuit_pre) (i Int))
    (=>
      (= (pre d) (Ancillas e i))
      (exists ((path_sem_target (Array (matrix complex) (matrix complex))))
        (forall ((x (matrix complex)))
          (=>
            (is_a_ket_l x (width d))
            (= (pps_apply (circ_to_pps_pre e) (kronecker x (ket i 0))) 
            (kronecker
              (tb2t65
                (infix_at
                  (matrix1 complex1)
                  (matrix1 complex1)
                  (t2tb66 path_sem_target)
                  (t2tb65 x)))
              (ket i 0)))))))))

;; parallel
(declare-fun parallel (circuit2
  circuit2) circuit2)

;; parallel'spec
(assert
  (forall ((d circuit2) (e circuit2))
    (and
      (= (pre (parallel d e)) (Parallel (pre d) (pre e)))
      (and
        (= (parallel d e) (to_qc (Parallel (pre d) (pre e))))
        (= (circ_to_pps (parallel d e)) (pps_par
                                          (circ_to_pps d)
                                          (circ_to_pps e)))))))

;; circ_to_pps_width
(assert (forall ((c circuit2)) (= (h_width (circ_to_pps c)) (width c))))

;; circ_to_pps_range
(assert (forall ((c circuit2)) (= (h_range (circ_to_pps c)) (range c))))

;; circ_to_pps_basis_ket
(assert
  (forall ((c circuit2) (x (Array Int Int)) (y (Array Int Int)) (i Int))
    (= (select (select (select (h_basis_ket (circ_to_pps c)) x) y) i) 
    (basis_ket
      c
      x
      y
      i))))

;; circ_to_pps_basis_ket_gen
(assert
  (forall ((c circuit2) (x (Array Int Int)) (y (Array Int Int)))
    (= (select (select (h_basis_ket (circ_to_pps c)) x) y) (select (select 
    (tb2t3
      (infix_at
        (infix_mngt
          (infix_mngt int int)
          (infix_mngt (infix_mngt int int) (infix_mngt int int)))
        circuit3
        (t2tb124 basis_ket_closure)
        (t2tb123 c))) x) y))))

;; circ_to_pps_angle
(assert
  (forall ((c circuit2) (x (Array Int Int)) (y (Array Int Int)))
    (= (tb2t84
         (infix_at
           angle1
           (infix_mngt int int)
           (infix_at
             (infix_mngt (infix_mngt int int) angle1)
             (infix_mngt int int)
             (t2tb118 (h_angle (circ_to_pps c)))
             (t2tb7 x))
           (t2tb7 y))) (ang_ind c x y))))

;; path_sem_basis
(declare-fun path_sem_basis (circuit2
  (matrix complex)) (matrix complex))

;; result
(declare-fun result61 (circuit2
  (matrix complex)) (Array bitvec (matrix complex)))

;; result'def
(assert
  (forall ((c circuit2) (x (matrix complex)) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (result61 c x))
           (t2tb77 y))) (infix_asdtdt
                          (ang_exp
                            (ang_ind c (value (ket_to_bv x)) (value y)))
                          (bv_to_ket
                            (make_bv
                              (select (select (tb2t3
                                                (infix_at
                                                  (infix_mngt
                                                    (infix_mngt int int)
                                                    (infix_mngt
                                                      (infix_mngt int int)
                                                      (infix_mngt int int)))
                                                  circuit3
                                                  (t2tb124 basis_ket_closure)
                                                  (t2tb123 c))) (value
                                                                  (ket_to_bv
                                                                    x))) 
                              (value
                                y))
                              (width c)))))))

;; path_sem_basis'def
(assert
  (forall ((c circuit2) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width c))
      (=>
        (is_a_ket_basis_elt x)
        (= (path_sem_basis c x) (infix_asdtdt
                                  (pow_inv_sqrt_2 (range c))
                                  (ket_sum_l
                                    bitvec1
                                    (t2tb79 (n_bvs (range c)))
                                    (t2tb80 (result61 c x))
                                    (width c))))))))

;; path_sem_basis'spec
(assert
  (forall ((c circuit2) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width c))
      (=>
        (is_a_ket_basis_elt x)
        (and
          (is_a_ket_l (path_sem_basis c x) (width c))
          (= (path_sem_basis c x) (pps_apply_basis
                                    (circ_to_pps c)
                                    (ket_to_bv x))))))))

;; path_sem
(declare-fun path_sem (circuit2
  (matrix complex)) (matrix complex))

;; result
(declare-fun result62 (circuit2
  (matrix complex)) (Array bitvec (matrix complex)))

;; result'def
(assert
  (forall ((c circuit2) (x (matrix complex)) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (result62 c x))
           (t2tb77 y))) (ite (= (length y) (width c))
                          (infix_asdtdt
                            (tb2t (get complex1 (t2tb65 x) (bv_to_int y) 0))
                            (path_sem_basis c (bv_to_ket y)))
                          x))))

;; path_sem'def
(assert
  (forall ((c circuit2) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width c))
      (= (path_sem c x) (ket_sum_l
                          bitvec1
                          (t2tb79 (n_bvs (width c)))
                          (t2tb80 (result62 c x))
                          (width c))))))

;; path_sem'spec
(assert
  (forall ((c circuit2) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width c))
      (and
        (is_a_ket_l (path_sem c x) (width c))
        (= (path_sem c x) (pps_apply (circ_to_pps c) x))))))

;; mat_sem_to_path
(assert
  (forall ((c circuit2) (x (matrix complex)))
    (=> (is_a_ket_l x (width c)) (= (mat_mult (mat_sem c) x) (path_sem c x)))))

;; path_sem_to_mat
(assert
  (forall ((c circuit2) (x (matrix complex)))
    (=> (is_a_ket_l x (width c)) (= (path_sem c x) (mat_mult (mat_sem c) x)))))

;; sem
(declare-fun sem (circuit2
  (matrix complex)
  (matrix complex)) Bool)

;; sem'def
(assert
  (forall ((c circuit2) (x (matrix complex)) (y (matrix complex)))
    (=
      (sem c x y)
      (and
        (is_a_ket_l x (width c))
        (infix_eqeq (matrix1 complex1) (t2tb65 y) (t2tb65 (path_sem c x)))))))

;; path_sem_to_sem
(assert
  (forall ((c circuit2) (x (matrix complex)) (y (matrix complex)))
    (=> (is_a_ket_l x (width c)) (=> (= (path_sem c x) y) (sem c x y)))))

;; sem_to_path_sem
(assert
  (forall ((c circuit2) (x (matrix complex)) (y (matrix complex)))
    (=> (sem c x y) (= (path_sem c x) y))))

;; path_sem_basis_apply
(assert
  (forall ((c circuit2) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width c))
      (=>
        (is_a_ket_basis_elt x)
        (= (path_sem_basis c x) (pps_apply_basis
                                  (circ_to_pps c)
                                  (ket_to_bv x)))))))

;; fc
(declare-fun fc506 (circuit2
  (matrix complex)) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((c circuit2) (x (matrix complex)) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc506 c x))
           (t2tb77 y))) (infix_asdtdt
                          (ang_exp
                            (ang_ind c (value (ket_to_bv x)) (value y)))
                          (bv_to_ket
                            (make_bv
                              (select (select (tb2t3
                                                (infix_at
                                                  (infix_mngt
                                                    (infix_mngt int int)
                                                    (infix_mngt
                                                      (infix_mngt int int)
                                                      (infix_mngt int int)))
                                                  circuit3
                                                  (t2tb124 basis_ket_closure)
                                                  (t2tb123 c))) (value
                                                                  (ket_to_bv
                                                                    x))) 
                              (value
                                y))
                              (width c)))))))

;; path_sem_basis_value
(assert
  (forall ((c circuit2) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width c))
      (=>
        (is_a_ket_basis_elt x)
        (= (path_sem_basis c x) (infix_asdtdt
                                  (pow_inv_sqrt_2 (range c))
                                  (ket_sum_l
                                    bitvec1
                                    (t2tb79 (n_bvs (range c)))
                                    (t2tb80 (fc506 c x))
                                    (width c))))))))

;; fc
(declare-fun fc507 (circuit2
  (matrix complex)) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((c circuit2) (x (matrix complex)) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc507 c x))
           (t2tb77 y))) (infix_asdtdt
                          (ang_exp
                            (ang_ind c (value (ket_to_bv x)) (value y)))
                          (bv_to_ket
                            (make_bv
                              (select (select (tb2t3
                                                (infix_at
                                                  (infix_mngt
                                                    (infix_mngt int int)
                                                    (infix_mngt
                                                      (infix_mngt int int)
                                                      (infix_mngt int int)))
                                                  circuit3
                                                  (t2tb124 basis_ket_closure)
                                                  (t2tb123 c))) (value
                                                                  (ket_to_bv
                                                                    x))) 
                              (value
                                y))
                              (width c)))))))

;; path_sem_value_for_basis
(assert
  (forall ((c circuit2) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width c))
      (=>
        (is_a_ket_basis_elt x)
        (= (path_sem c x) (infix_asdtdt
                            (pow_inv_sqrt_2 (range c))
                            (ket_sum_l
                              bitvec1
                              (t2tb79 (n_bvs (range c)))
                              (t2tb80 (fc507 c x))
                              (width c))))))))

;; apply_path_sem_basis
(assert
  (forall ((c circuit2) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width c))
      (=>
        (is_a_ket_basis_elt x)
        (= (pps_apply_basis (circ_to_pps c) (ket_to_bv x)) (path_sem_basis
                                                             c
                                                             x))))))

;; path_sem_apply
(assert
  (forall ((c circuit2) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width c))
      (= (path_sem c x) (pps_apply (circ_to_pps c) x)))))

;; apply_path_sem
(assert
  (forall ((c circuit2) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width c))
      (= (pps_apply (circ_to_pps c) x) (path_sem c x)))))

;; ancilla_pre_cond_path_sem
(assert
  (forall ((d circuit2) (e circuit_pre) (i Int))
    (=>
      (= (pre d) (Ancillas e i))
      (exists ((path_sem_target (Array (matrix complex) (matrix complex))))
        (forall ((x (matrix complex)))
          (=>
            (is_a_ket_l x (width d))
            (= (path_sem (to_qc e) (kronecker x (ket i 0))) (kronecker
                                                              (tb2t65
                                                                (infix_at
                                                                  (matrix1
                                                                    complex1)
                                                                  (matrix1
                                                                    complex1)
                                                                  (t2tb66
                                                                    path_sem_target)
                                                                  (t2tb65 x)))
                                                              (ket i 0)))))))))

;; ancilla_pre_path_sem
(assert
  (forall ((d circuit2) (e circuit_pre) (i Int))
    (=>
      (= (pre d) (Ancillas e i))
      (forall ((x (matrix complex)))
        (=>
          (is_a_ket_l x (width d))
          (= (path_sem (to_qc e) (kronecker x (ket i 0))) (kronecker
                                                            (path_sem d x)
                                                            (ket i 0))))))))

;; pre_ancilla
(assert
  (forall ((d circuit2) (e circuit2) (i Int))
    (=> (= (pre d) (Ancillas (pre e) i)) (= d (ancilla e i)))))

;; set_mat_sem_path_sem
(assert
  (forall ((c circuit2) (x (matrix complex)))
    (=>
      (= (rows complex1 (t2tb65 x)) (power 2 (width c)))
      (=>
        (= (columns complex1 (t2tb65 x)) (power 2 (width c)))
        (=>
          (forall ((ket1 (matrix complex)))
            (=>
              (is_a_ket_l ket1 (width c))
              (=>
                (is_a_ket_basis_elt ket1)
                (= (mat_mult x ket1) (path_sem c ket1)))))
          (= x (mat_sem c)))))))

;; path_sem_basis_ket_l
(assert
  (forall ((c circuit2) (x (matrix complex)) (l Int))
    (=>
      (is_a_ket_l x (width c))
      (=>
        (= l (width c))
        (=> (is_a_ket_basis_elt x) (is_a_ket_l (path_sem_basis c x) l))))))

;; path_sem_ket_l
(assert
  (forall ((c circuit2) (x (matrix complex)) (l Int))
    (=>
      (is_a_ket_l x (width c))
      (=> (= l (width c)) (is_a_ket_l (path_sem c x) l)))))

;; path_sem_ket
(assert
  (forall ((c circuit2) (x (matrix complex)))
    (=> (is_a_ket_l x (width c)) (is_a_ket (path_sem c x)))))

;; path_sem_ket_length
(assert
  (forall ((c circuit2) (x (matrix complex)) (l Int))
    (=>
      (is_a_ket_l x (width c))
      (=> (= l (width c)) (= (ket_length (path_sem c x)) l)))))

;; path_sem_to_ket_l
(assert
  (forall ((c circuit2) (x (matrix complex)) (y (matrix complex)))
    (=>
      (is_a_ket_l x (width c))
      (=> (= (path_sem c x) y) (is_a_ket_l y (width c))))))

;; fc
(declare-fun fc508 (circuit2
  (matrix complex)) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((c circuit2) (x (matrix complex)) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc508 c x))
           (t2tb77 y))) (infix_asdtdt
                          (tb2t (get complex1 (t2tb65 x) (bv_to_int y) 0))
                          (path_sem_basis c (bv_to_ket y))))))

;; get_path_sem
(assert
  (forall ((c circuit2) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width c))
      (= (path_sem c x) (ket_sum_l
                          bitvec1
                          (t2tb79 (n_bvs (width c)))
                          (t2tb80 (fc508 c x))
                          (width c))))))

;; get_path_sem_basis
(assert
  (forall ((c circuit2) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width c))
      (=> (is_a_ket_basis_elt x) (= (path_sem c x) (path_sem_basis c x))))))

;; set_path_sem_basis
(assert
  (forall ((c circuit2) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width c))
      (=> (is_a_ket_basis_elt x) (= (path_sem_basis c x) (path_sem c x))))))

;; circ_to_pps_parallel
(assert
  (forall ((d circuit2) (e circuit2))
    (= (circ_to_pps (parallel d e)) (pps_par (circ_to_pps d) (circ_to_pps e)))))

;; parallel_width
(assert
  (forall ((d circuit2) (e circuit2))
    (= (width (parallel d e)) (+ (width d) (width e)))))

;; parallel_range
(assert
  (forall ((d circuit2) (e circuit2))
    (= (range (parallel d e)) (+ (range d) (range e)))))

;; parallel_size
(assert
  (forall ((d circuit2) (e circuit2))
    (= (size (parallel d e)) (+ (size d) (size e)))))

;; parallel_ancilla
(assert
  (forall ((d circuit2) (e circuit2))
    (= (ancillas (parallel d e)) (+ (ancillas d) (ancillas e)))))

;; fc
(declare-fun fc509 (circuit2
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc510 (circuit2
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((d circuit2) (x (Array Int Int)) (k Int))
    (= (select (fc509 d x) k) (select x (+ k (width d))))))

;; fc'def
(assert
  (forall ((d circuit2) (y (Array Int Int)) (k Int))
    (= (select (fc510 d y) k) (select y (+ k (range d))))))

;; parallel_basis_ket
(assert
  (forall ((d circuit2) (e circuit2) (x (Array Int Int)) (y (Array Int Int)) (i Int))
    (= (basis_ket (parallel d e) x y i) (ite (< i (width d))
                                          (basis_ket d x y i)
                                          (basis_ket
                                            e
                                            (fc509 d x)
                                            (fc510 d y)
                                            (- i (width d)))))))

;; fc
(declare-fun fc511 (circuit2
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc512 (circuit2
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((d circuit2) (x (Array Int Int)) (k Int))
    (= (select (fc511 d x) k) (select x (+ k (width d))))))

;; fc'def
(assert
  (forall ((d circuit2) (y (Array Int Int)) (k Int))
    (= (select (fc512 d y) k) (select y (+ k (range d))))))

;; parallel_angle
(assert
  (forall ((d circuit2) (e circuit2) (x (Array Int Int)) (y (Array Int Int)))
    (= (ang_ind (parallel d e) x y) (ang_add
                                      (ang_ind d x y)
                                      (ang_ind e (fc511 d x) (fc512 d y))))))

;; circ_to_pps_sequence
(assert
  (forall ((d circuit2) (e circuit2))
    (=>
      (= (width d) (width e))
      (= (circ_to_pps (sequence d e)) (pps_seq
                                        (circ_to_pps d)
                                        (circ_to_pps e))))))

;; sequence_width
(assert
  (forall ((d circuit2) (e circuit2))
    (=> (= (width d) (width e)) (= (width (sequence d e)) (width d)))))

;; sequence_size
(assert
  (forall ((d circuit2) (e circuit2))
    (=>
      (= (width d) (width e))
      (= (size (sequence d e)) (+ (size d) (size e))))))

;; sequence_ancillas
(assert
  (forall ((d circuit2) (e circuit2))
    (=>
      (= (width d) (width e))
      (= (ancillas (sequence d e)) (max (ancillas d) (ancillas e))))))

;; sequence_range
(assert
  (forall ((d circuit2) (e circuit2))
    (=>
      (= (width d) (width e))
      (= (range (sequence d e)) (+ (range d) (range e))))))

;; fc
(declare-fun fc513 (circuit2
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((d circuit2) (y (Array Int Int)) (k Int))
    (= (select (fc513 d y) k) (select y (+ k (range d))))))

;; sequence_basis_ket
(assert
  (forall ((d circuit2) (e circuit2) (x (Array Int Int)) (y (Array Int Int)) (i Int))
    (=>
      (= (width d) (width e))
      (= (basis_ket (sequence d e) x y i) (basis_ket
                                            e
                                            (select (select (tb2t3
                                                              (infix_at
                                                                (infix_mngt
                                                                  (infix_mngt
                                                                    int
                                                                    int)
                                                                  (infix_mngt
                                                                    (infix_mngt
                                                                    int
                                                                    int)
                                                                    (infix_mngt
                                                                    int
                                                                    int)))
                                                                circuit3
                                                                (t2tb124
                                                                  basis_ket_closure)
                                                                (t2tb123 d))) x) y)
                                            (fc513 d y)
                                            i)))))

;; fc
(declare-fun fc514 (circuit2
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((d circuit2) (y (Array Int Int)) (k Int))
    (= (select (fc514 d y) k) (select y (+ k (range d))))))

;; sequence_angle
(assert
  (forall ((d circuit2) (e circuit2) (x (Array Int Int)) (y (Array Int Int)))
    (=>
      (= (width d) (width e))
      (= (ang_ind (sequence d e) x y) (ang_add
                                        (ang_ind d x y)
                                        (ang_ind
                                          e
                                          (select (select (tb2t3
                                                            (infix_at
                                                              (infix_mngt
                                                                (infix_mngt
                                                                  int
                                                                  int)
                                                                (infix_mngt
                                                                  (infix_mngt
                                                                    int
                                                                    int)
                                                                  (infix_mngt
                                                                    int
                                                                    int)))
                                                              circuit3
                                                              (t2tb124
                                                                basis_ket_closure)
                                                              (t2tb123 d))) x) y)
                                          (fc514 d y)))))))

;; circ_to_pps_ancilla
(assert
  (forall ((c circuit2) (i Int))
    (=>
      (<= 1 i)
      (=>
        (<= (+ i 1) (width c))
        (=>
          (exists ((path_sem_target (Array (matrix complex) (matrix complex))))
            (forall ((x (matrix complex)))
              (=>
                (is_a_ket_l x (- (width c) i))
                (= (path_sem c (kronecker x (ket i 0))) (kronecker
                                                          (tb2t65
                                                            (infix_at
                                                              (matrix1
                                                                complex1)
                                                              (matrix1
                                                                complex1)
                                                              (t2tb66
                                                                path_sem_target)
                                                              (t2tb65 x)))
                                                          (ket i 0))))))
          (= (circ_to_pps (ancilla c i)) (pps_ancs (circ_to_pps c) i)))))))

;; ancilla_width
(assert
  (forall ((c circuit2) (i Int))
    (=>
      (<= 1 i)
      (=>
        (<= (+ i 1) (width c))
        (=>
          (exists ((path_sem_target (Array (matrix complex) (matrix complex))))
            (forall ((x (matrix complex)))
              (=>
                (is_a_ket_l x (- (width c) i))
                (= (path_sem c (kronecker x (ket i 0))) (kronecker
                                                          (tb2t65
                                                            (infix_at
                                                              (matrix1
                                                                complex1)
                                                              (matrix1
                                                                complex1)
                                                              (t2tb66
                                                                path_sem_target)
                                                              (t2tb65 x)))
                                                          (ket i 0))))))
          (= (width (ancilla c i)) (- (width c) i)))))))

;; ancilla_size
(assert
  (forall ((c circuit2) (i Int))
    (=>
      (<= 1 i)
      (=>
        (<= (+ i 1) (width c))
        (=>
          (exists ((path_sem_target (Array (matrix complex) (matrix complex))))
            (forall ((x (matrix complex)))
              (=>
                (is_a_ket_l x (- (width c) i))
                (= (path_sem c (kronecker x (ket i 0))) (kronecker
                                                          (tb2t65
                                                            (infix_at
                                                              (matrix1
                                                                complex1)
                                                              (matrix1
                                                                complex1)
                                                              (t2tb66
                                                                path_sem_target)
                                                              (t2tb65 x)))
                                                          (ket i 0))))))
          (= (size (ancilla c i)) (size c)))))))

;; ancilla_range
(assert
  (forall ((c circuit2) (i Int))
    (=>
      (<= 1 i)
      (=>
        (<= (+ i 1) (width c))
        (=>
          (exists ((path_sem_target (Array (matrix complex) (matrix complex))))
            (forall ((x (matrix complex)))
              (=>
                (is_a_ket_l x (- (width c) i))
                (= (path_sem c (kronecker x (ket i 0))) (kronecker
                                                          (tb2t65
                                                            (infix_at
                                                              (matrix1
                                                                complex1)
                                                              (matrix1
                                                                complex1)
                                                              (t2tb66
                                                                path_sem_target)
                                                              (t2tb65 x)))
                                                          (ket i 0))))))
          (= (range (ancilla c i)) (range c)))))))

;; ancilla_ancilla
(assert
  (forall ((c circuit2) (i Int))
    (=>
      (<= 1 i)
      (=>
        (<= (+ i 1) (width c))
        (=>
          (exists ((path_sem_target (Array (matrix complex) (matrix complex))))
            (forall ((x (matrix complex)))
              (=>
                (is_a_ket_l x (- (width c) i))
                (= (path_sem c (kronecker x (ket i 0))) (kronecker
                                                          (tb2t65
                                                            (infix_at
                                                              (matrix1
                                                                complex1)
                                                              (matrix1
                                                                complex1)
                                                              (t2tb66
                                                                path_sem_target)
                                                              (t2tb65 x)))
                                                          (ket i 0))))))
          (= (ancillas (ancilla c i)) (+ (ancillas c) i)))))))

;; fc
(declare-fun fc515 (circuit2
  (Array Int Int)
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((c circuit2) (x (Array Int Int)) (i Int) (k Int))
    (= (select (fc515 c x i) k) (ite (< k (- (width c) i)) (select x k) 0))))

;; ancilla_basis_ket
(assert
  (forall ((c circuit2) (x (Array Int Int)) (y (Array Int Int)) (l Int) (i Int))
    (=>
      (<= 1 i)
      (=>
        (<= (+ i 1) (width c))
        (=>
          (exists ((path_sem_target (Array (matrix complex) (matrix complex))))
            (forall ((x1 (matrix complex)))
              (=>
                (is_a_ket_l x1 (- (width c) i))
                (= (path_sem c (kronecker x1 (ket i 0))) (kronecker
                                                           (tb2t65
                                                             (infix_at
                                                               (matrix1
                                                                 complex1)
                                                               (matrix1
                                                                 complex1)
                                                               (t2tb66
                                                                 path_sem_target)
                                                               (t2tb65 x1)))
                                                           (ket i 0))))))
          (= (basis_ket (ancilla c i) x y l) (basis_ket c (fc515 c x i) y l)))))))

;; fc
(declare-fun fc516 (circuit2
  (Array Int Int)
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((c circuit2) (x (Array Int Int)) (i Int) (k Int))
    (= (select (fc516 c x i) k) (ite (< k (- (width c) i)) (select x k) 0))))

;; ancilla_angle
(assert
  (forall ((c circuit2) (x (Array Int Int)) (y (Array Int Int)) (i Int))
    (=>
      (<= 1 i)
      (=>
        (<= (+ i 1) (width c))
        (=>
          (exists ((path_sem_target (Array (matrix complex) (matrix complex))))
            (forall ((x1 (matrix complex)))
              (=>
                (is_a_ket_l x1 (- (width c) i))
                (= (path_sem c (kronecker x1 (ket i 0))) (kronecker
                                                           (tb2t65
                                                             (infix_at
                                                               (matrix1
                                                                 complex1)
                                                               (matrix1
                                                                 complex1)
                                                               (t2tb66
                                                                 path_sem_target)
                                                               (t2tb65 x1)))
                                                           (ket i 0))))))
          (= (ang_ind (ancilla c i) x y) (ang_ind c (fc516 c x i) y)))))))

;; sequence_eq
(assert
  (forall ((d circuit2) (dqt circuit2) (e circuit2) (eqt circuit2))
    (=>
      (= (width d) (width e))
      (=> (= d dqt) (=> (= e eqt) (= (sequence d e) (sequence dqt eqt)))))))

;; ancilla_closure
(declare-fun ancilla_closure () (Array circuit2 (Array Int circuit2)))

;; t2tb
(declare-fun t2tb125 ((Array Int circuit2)) uni)

;; t2tb_sort
(assert
  (forall ((x (Array Int circuit2)))
    (sort (infix_mngt int circuit3) (t2tb125 x))))

;; tb2t
(declare-fun tb2t125 (uni) (Array Int circuit2))

;; BridgeL
(assert
  (forall ((i (Array Int circuit2)))
    (! (= (tb2t125 (t2tb125 i)) i) :pattern ((t2tb125 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=> (sort (infix_mngt int circuit3) j) (= (t2tb125 (tb2t125 j)) j)) :pattern (
    (t2tb125
      (tb2t125 j))) )))

;; t2tb
(declare-fun t2tb126 ((Array circuit2 (Array Int circuit2))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array circuit2 (Array Int circuit2))))
    (sort (infix_mngt circuit3 (infix_mngt int circuit3)) (t2tb126 x))))

;; tb2t
(declare-fun tb2t126 (uni) (Array circuit2 (Array Int circuit2)))

;; BridgeL
(assert
  (forall ((i (Array circuit2 (Array Int circuit2))))
    (! (= (tb2t126 (t2tb126 i)) i) :pattern ((t2tb126 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort (infix_mngt circuit3 (infix_mngt int circuit3)) j)
         (= (t2tb126 (tb2t126 j)) j)) :pattern ((t2tb126 (tb2t126 j))) )))

;; ancilla_closure_def
(assert
  (forall ((y circuit2) (y1 Int))
    (= (tb2t123
         (infix_at
           circuit3
           int
           (infix_at
             (infix_mngt int circuit3)
             circuit3
             (t2tb126 ancilla_closure)
             (t2tb123 y))
           (t2tb8 y1))) (ancilla y y1))))

;; ancilla_eq
(assert
  (forall ((c circuit2) (cqt circuit2) (path_sem_target (Array (matrix complex) (matrix complex))))
    (=>
      (forall ((x (matrix complex)))
        (=>
          (is_a_ket_l x (width c))
          (= (path_sem c (kronecker x (ket 1 0))) (kronecker
                                                    (tb2t65
                                                      (infix_at
                                                        (matrix1 complex1)
                                                        (matrix1 complex1)
                                                        (t2tb66
                                                          path_sem_target)
                                                        (t2tb65 x)))
                                                    (ket 1 0)))))
      (=>
        (= (width c) (width cqt))
        (=>
          (= c cqt)
          (= (tb2t125
               (infix_at
                 (infix_mngt int circuit3)
                 circuit3
                 (t2tb126 ancilla_closure)
                 (t2tb123 c))) (tb2t125
                                 (infix_at
                                   (infix_mngt int circuit3)
                                   circuit3
                                   (t2tb126 ancilla_closure)
                                   (t2tb123 cqt)))))))))

;; parallel_eq
(assert
  (forall ((d circuit2) (dqt circuit2) (e circuit2) (eqt circuit2))
    (=> (= d dqt) (=> (= e eqt) (= (parallel d e) (parallel dqt eqt))))))

;; fc
(declare-fun fc517 (circuit2
  (matrix complex)) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((c circuit2) (x (matrix complex)) (z bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc517 c x))
           (t2tb77 z))) (infix_asdtdt
                          (tb2t (get complex1 (t2tb65 x) (bv_to_int z) 0))
                          (path_sem c (bv_to_ket z))))))

;; path_sem_decomp
(assert
  (forall ((c circuit2) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width c))
      (= (path_sem c x) (ket_sum_l
                          bitvec1
                          (t2tb79 (n_bvs (width c)))
                          (t2tb80 (fc517 c x))
                          (width c))))))

;; path_sem_scal_
(assert
  (forall ((c circuit2) (x (matrix complex)) (y (matrix complex)) (sc complex))
    (=>
      (is_a_ket_l x (width c))
      (=>
        (= (path_sem c x) y)
        (= (path_sem c (infix_asdtdt sc x)) (infix_asdtdt sc y))))))

;; path_sem_scal
(assert
  (forall ((c circuit2) (x (matrix complex)) (sc complex))
    (=>
      (is_a_ket_l x (width c))
      (= (path_sem c (infix_asdtdt sc x)) (infix_asdtdt sc (path_sem c x))))))

;; path_sem_scal_rev
(assert
  (forall ((c circuit2) (x (matrix complex)) (sc complex))
    (=>
      (is_a_ket_l x (width c))
      (= (infix_asdtdt sc (path_sem c x)) (path_sem c (infix_asdtdt sc x))))))

;; path_sem_add
(assert
  (forall ((c circuit2) (x (matrix complex)) (xqt (matrix complex)) (y (matrix complex)) (yqt (matrix complex)))
    (=>
      (is_a_ket_l x (width c))
      (=>
        (is_a_ket_l xqt (width c))
        (=>
          (= (path_sem c x) y)
          (=>
            (= (path_sem c xqt) yqt)
            (= (path_sem c (add_ket_l x xqt (width c))) (add_ket_l
                                                          y
                                                          yqt
                                                          (width c)))))))))

;; path_sem_add_
(assert
  (forall ((c circuit2) (x (matrix complex)) (xqt (matrix complex)) (l Int))
    (=>
      (is_a_ket_l x (width c))
      (=>
        (is_a_ket_l xqt (width c))
        (=>
          (= l (width c))
          (= (path_sem c (add_ket_l x xqt l)) (add_ket_l
                                                (path_sem c x)
                                                (path_sem c xqt)
                                                l)))))))

;; path_sem_scal_add_ket_l
(assert
  (forall ((c circuit2) (x (matrix complex)) (xqt (matrix complex)) (a complex) (aqt complex) (n Int))
    (=>
      (= (width c) n)
      (=>
        (is_a_ket_l x n)
        (=>
          (is_a_ket_l xqt n)
          (= (path_sem
               c
               (add_ket_l (infix_asdtdt a x) (infix_asdtdt aqt xqt) n)) 
          (add_ket_l
            (infix_asdtdt a (path_sem c x))
            (infix_asdtdt aqt (path_sem c xqt))
            n)))))))

;; path_sem_substr
(assert
  (forall ((c circuit2) (x (matrix complex)) (xqt (matrix complex)) (y (matrix complex)) (yqt (matrix complex)))
    (=>
      (is_a_ket_l x (width c))
      (=>
        (is_a_ket_l xqt (width c))
        (=>
          (= (path_sem c x) y)
          (=>
            (= (path_sem c xqt) yqt)
            (= (path_sem c (mat_substr x xqt)) (mat_substr y yqt))))))))

;; path_sem_scal_add
(assert
  (forall ((c circuit2) (x (matrix complex)) (xqt (matrix complex)) (y (matrix complex)) (yqt (matrix complex)) (scal complex))
    (=>
      (is_a_ket_l x (width c))
      (=>
        (is_a_ket_l xqt (width c))
        (=>
          (= (path_sem c x) y)
          (=>
            (= (path_sem c xqt) yqt)
            (= (path_sem c (infix_asdtdt scal (add_ket_l x xqt (width c)))) 
            (infix_asdtdt
              scal
              (add_ket_l y yqt (width c))))))))))

;; fc
(declare-fun fc518 (circuit2
  bitvec
  Int) (Array bitvec complex))

;; fc'def
(assert
  (forall ((c circuit2) (x bitvec) (i Int) (y bitvec))
    (= (tb2t (infix_at complex1 bitvec1 (t2tb82 (fc518 c x i)) (t2tb77 y))) 
    (infix_asdt
      (ang_exp (ang_ind c (value x) (value y)))
      (indic
        bitvec1
        (t2tb77
          (make_bv
            (select (select (tb2t3
                              (infix_at
                                (infix_mngt
                                  (infix_mngt int int)
                                  (infix_mngt
                                    (infix_mngt int int)
                                    (infix_mngt int int)))
                                circuit3
                                (t2tb124 basis_ket_closure)
                                (t2tb123 c))) (value x)) (value y))
            (width c)))
        (t2tb77 (int_to_bv i (width c))))))))

;; pat_sem_apply_basis_value
(assert
  (forall ((c circuit2) (x bitvec))
    (=>
      (= (length x) (width c))
      (forall ((i Int))
        (=>
          (and (<= 0 i) (< i (power 2 (width c))))
          (= (tb2t (get complex1 (t2tb65 (path_sem c (bv_to_ket x))) i 0)) 
          (infix_asdt
            (pow_inv_sqrt_2 (range c))
            (sum bitvec1 (t2tb79 (n_bvs (range c))) (t2tb82 (fc518 c x i))))))))))

;; path_sem_scal_substr
(assert
  (forall ((c circuit2) (x (matrix complex)) (xqt (matrix complex)) (y (matrix complex)) (yqt (matrix complex)) (scal complex))
    (=>
      (is_a_ket_l x (width c))
      (=>
        (is_a_ket_l xqt (width c))
        (=>
          (= (path_sem c x) y)
          (=>
            (= (path_sem c xqt) yqt)
            (= (path_sem c (infix_asdtdt scal (mat_substr x xqt))) (infix_asdtdt
                                                                    scal
                                                                    (mat_substr
                                                                    y
                                                                    yqt)))))))))

;; path_sem_sum
(assert
  (forall ((a ty))
    (forall ((c circuit2) (s uni) (f uni) (g uni) (n Int))
      (=>
        (<= 1 (cardinal a s))
        (=>
          (= n (width c))
          (=>
            (forall ((x uni))
              (=>
                (sort a x)
                (=>
                  (mem a x s)
                  (is_a_ket_l
                    (tb2t65 (infix_at (matrix1 complex1) a f x))
                    (width c)))))
            (=>
              (forall ((x uni))
                (=>
                  (sort a x)
                  (=>
                    (mem a x s)
                    (= (path_sem
                         c
                         (tb2t65 (infix_at (matrix1 complex1) a f x))) 
                    (tb2t65
                      (infix_at (matrix1 complex1) a g x))))))
              (= (path_sem c (ket_sum_l a s f n)) (ket_sum_l a s g n)))))))))

;; fc
(declare-fun fc519 (circuit2
  (Array bitvec complex)) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((c circuit2) (f (Array bitvec complex)) (x bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc519 c f))
           (t2tb77 x))) (infix_asdtdt
                          (tb2t
                            (infix_at complex1 bitvec1 (t2tb82 f) (t2tb77 x)))
                          (path_sem c (bv_to_ket x))))))

;; path_sem_sum_diag
(assert
  (forall ((c circuit2) (s (set bitvec)) (f (Array bitvec complex)) (l Int))
    (=>
      (= s (n_bvs l))
      (=>
        (= l (width c))
        (= (path_sem c (ket_sum_l_diag f l)) (ket_sum_l
                                               bitvec1
                                               (t2tb79 s)
                                               (t2tb80 (fc519 c f))
                                               l))))))

;; fc
(declare-fun fc520 (ty
  circuit2
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x circuit2) (x1 uni))
      (sort (infix_mngt a (matrix1 complex1)) (fc520 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((c circuit2) (f uni) (x uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc520 a c f) x)) (path_sem
                                                                    c
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    x)))))))

;; path_sem_sum_
(assert
  (forall ((a ty))
    (forall ((c circuit2) (s uni) (f uni) (n Int))
      (=>
        (<= 1 (cardinal a s))
        (=>
          (= n (width c))
          (=>
            (forall ((x uni))
              (=>
                (sort a x)
                (=>
                  (mem a x s)
                  (is_a_ket_l
                    (tb2t65 (infix_at (matrix1 complex1) a f x))
                    (width c)))))
            (= (path_sem c (ket_sum_l a s f n)) (ket_sum_l
                                                  a
                                                  s
                                                  (fc520 a c f)
                                                  n))))))))

;; path_sem_sum_gen
(assert
  (forall ((a ty))
    (forall ((c circuit2) (s uni) (f uni) (g uni) (n Int))
      (=>
        (<= 1 (cardinal a s))
        (=>
          (= n (width c))
          (=>
            (forall ((x uni))
              (=>
                (sort a x)
                (=>
                  (mem a x s)
                  (is_a_ket_l
                    (tb2t65 (infix_at (matrix1 complex1) a f x))
                    (width c)))))
            (=>
              (forall ((x uni))
                (=>
                  (sort a x)
                  (=>
                    (mem a x s)
                    (= (path_sem
                         c
                         (tb2t65 (infix_at (matrix1 complex1) a f x))) 
                    (tb2t65
                      (infix_at (matrix1 complex1) a g x))))))
              (= (path_sem c (ket_sum_l a s f n)) (ket_sum_l a s g n)))))))))

;; scal_path_sem_sum_gen
(assert
  (forall ((a ty))
    (forall ((c circuit2) (s uni) (f uni) (g uni) (n Int) (nqt Int) (a1 complex) (b complex))
      (=>
        (<= 1 (cardinal a s))
        (=>
          (= n (width c))
          (=>
            (forall ((x uni))
              (=>
                (sort a x)
                (=>
                  (mem a x s)
                  (is_a_ket_l
                    (tb2t65 (infix_at (matrix1 complex1) a f x))
                    (width c)))))
            (=>
              (forall ((x uni))
                (=>
                  (sort a x)
                  (=>
                    (mem a x s)
                    (= (path_sem
                         c
                         (tb2t65 (infix_at (matrix1 complex1) a f x))) 
                    (tb2t65
                      (infix_at (matrix1 complex1) a g x))))))
              (=>
                (= a1 b)
                (=>
                  (= n nqt)
                  (= (infix_asdtdt a1 (path_sem c (ket_sum_l a s f n))) 
                  (infix_asdtdt
                    b
                    (ket_sum_l a s g nqt))))))))))))

;; fc
(declare-fun fc521 (ty
  circuit2
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x circuit2) (x1 uni))
      (sort (infix_mngt a (matrix1 complex1)) (fc521 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((c circuit2) (f uni) (x uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc521 a c f) x)) (path_sem
                                                                    c
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    x)))))))

;; scal_path_sem_sum
(assert
  (forall ((a ty))
    (forall ((c circuit2) (s uni) (f uni) (n Int) (a1 complex))
      (=>
        (<= 1 (cardinal a s))
        (=>
          (= n (width c))
          (=>
            (forall ((x uni))
              (=>
                (sort a x)
                (=>
                  (mem a x s)
                  (is_a_ket_l
                    (tb2t65 (infix_at (matrix1 complex1) a f x))
                    (width c)))))
            (= (infix_asdtdt a1 (path_sem c (ket_sum_l a s f n))) (infix_asdtdt
                                                                    a1
                                                                    (ket_sum_l
                                                                    a
                                                                    s
                                                                    (fc521
                                                                    a
                                                                    c
                                                                    f)
                                                                    n)))))))))

;; fc
(declare-fun fc522 (ty
  circuit2
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x circuit2) (x1 uni))
      (sort (infix_mngt a (matrix1 complex1)) (fc522 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((c circuit2) (f uni) (x uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc522 a c f) x)) (path_sem
                                                                    c
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    x)))))))

;; path_sem_scal_sum
(assert
  (forall ((a ty))
    (forall ((c circuit2) (s uni) (f uni) (n Int) (a1 complex))
      (=>
        (<= 1 (cardinal a s))
        (=>
          (= n (width c))
          (=>
            (forall ((x uni))
              (=>
                (sort a x)
                (=>
                  (mem a x s)
                  (is_a_ket_l
                    (tb2t65 (infix_at (matrix1 complex1) a f x))
                    (width c)))))
            (= (path_sem c (infix_asdtdt a1 (ket_sum_l a s f n))) (infix_asdtdt
                                                                    a1
                                                                    (ket_sum_l
                                                                    a
                                                                    s
                                                                    (fc522
                                                                    a
                                                                    c
                                                                    f)
                                                                    n)))))))))

;; path_sem_comp_basis
(assert
  (forall ((d circuit2) (e circuit2) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width d))
      (=>
        (is_a_ket_basis_elt x)
        (=>
          (= (width d) (width e))
          (= (path_sem_basis (sequence d e) x) (path_sem
                                                 e
                                                 (path_sem_basis d x))))))))

;; path_sem_comp_pre
(assert
  (forall ((d circuit2) (e circuit2) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width d))
      (=>
        (= (width d) (width e))
        (= (path_sem (sequence d e) x) (path_sem e (path_sem d x)))))))

;; path_sem_comp
(assert
  (forall ((d circuit2) (e circuit2) (x (matrix complex)) (y (matrix complex)) (z (matrix complex)))
    (=>
      (is_a_ket_l x (width d))
      (=>
        (= (path_sem d x) y)
        (=>
          (= (path_sem e y) z)
          (=> (= (width d) (width e)) (= (path_sem (sequence d e) x) z)))))))

;; path_sem_comp_
(assert
  (forall ((d circuit2) (e circuit2) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width d))
      (=>
        (= (width d) (width e))
        (= (path_sem (sequence d e) x) (path_sem e (path_sem d x)))))))

;; sem_comp
(assert
  (forall ((d circuit2) (e circuit2) (x (matrix complex)) (y (matrix complex)) (z (matrix complex)))
    (=>
      (sem d x y)
      (=> (sem e y z) (=> (= (width d) (width e)) (sem (sequence d e) x z))))))

;; path_sem_kron_basis
(assert
  (forall ((d circuit2) (e circuit2) (x (matrix complex)) (y (matrix complex)))
    (=>
      (is_a_ket_l x (width d))
      (=>
        (is_a_ket_l y (width e))
        (=>
          (is_a_ket_basis_elt x)
          (=>
            (is_a_ket_basis_elt y)
            (= (path_sem_basis (parallel d e) (kronecker x y)) (kronecker
                                                                 (path_sem_basis
                                                                   d
                                                                   x)
                                                                 (path_sem_basis
                                                                   e
                                                                   y)))))))))

;; path_sem_kron_pre
(assert
  (forall ((d circuit2) (e circuit2) (x (matrix complex)) (y (matrix complex)))
    (=>
      (is_a_ket_l x (width d))
      (=>
        (is_a_ket_l y (width e))
        (= (path_sem (parallel d e) (kronecker x y)) (kronecker
                                                       (path_sem d x)
                                                       (path_sem e y)))))))

;; path_sem_kron
(assert
  (forall ((d circuit2) (e circuit2) (x (matrix complex)) (xqt (matrix complex)) (y (matrix complex)) (yqt (matrix complex)))
    (=>
      (is_a_ket_l x (width d))
      (=>
        (is_a_ket_l y (width e))
        (=>
          (= (path_sem d x) xqt)
          (=>
            (= (path_sem e y) yqt)
            (= (path_sem (parallel d e) (kronecker x y)) (kronecker xqt yqt))))))))

;; path_sem_kron_
(assert
  (forall ((d circuit2) (e circuit2) (x (matrix complex)) (y (matrix complex)))
    (=>
      (is_a_ket_l x (width d))
      (=>
        (is_a_ket_l y (width e))
        (= (path_sem (parallel d e) (kronecker x y)) (kronecker
                                                       (path_sem d x)
                                                       (path_sem e y)))))))

;; path_sem_sequence_parallel_basis
(assert
  (forall ((a circuit2) (b circuit2) (d circuit2) (e circuit2) (x (matrix complex)))
    (=>
      (is_a_ket_l x (+ (width a) (width b)))
      (=>
        (= (width a) (width d))
        (=>
          (= (width b) (width e))
          (=>
            (is_a_ket_basis_elt x)
            (= (path_sem (sequence (parallel a b) (parallel d e)) x) 
            (path_sem
              (parallel (sequence a d) (sequence b e))
              x))))))))

;; path_sem_sequence_parallel
(assert
  (forall ((a circuit2) (b circuit2) (d circuit2) (e circuit2) (x (matrix complex)))
    (=>
      (is_a_ket_l x (+ (width a) (width b)))
      (=>
        (= (width a) (width d))
        (=>
          (= (width b) (width e))
          (= (path_sem (sequence (parallel a b) (parallel d e)) x) (path_sem
                                                                    (parallel
                                                                    (sequence
                                                                    a
                                                                    d)
                                                                    (sequence
                                                                    b
                                                                    e))
                                                                    x)))))))

;; path_sem_id_basis
(assert
  (forall ((x (matrix complex)))
    (=>
      (is_a_ket_l x 1)
      (=> (is_a_ket_basis_elt x) (= (path_sem_basis id x) x)))))

;; path_sem_id
(assert
  (forall ((x (matrix complex))) (=> (is_a_ket_l x 1) (= (path_sem id x) x))))

;; path_sem_phase_basis
(assert
  (forall ((x (matrix complex)) (k Int))
    (=>
      (is_a_ket_l x 1)
      (=>
        (is_a_ket_basis_elt x)
        (= (path_sem (phase k) x) (infix_asdtdt
                                    (ang_exp (infix_sldtsl 1 k))
                                    x))))))

;; path_sem_phase_basis_inv
(assert
  (forall ((x (matrix complex)) (k Int))
    (=>
      (is_a_ket_l x 1)
      (=>
        (is_a_ket_basis_elt x)
        (= (path_sem (phase k) (path_sem (phase (- k)) x)) x)))))

;; path_sem_phase_inv
(assert
  (forall ((x (matrix complex)) (k Int))
    (=>
      (is_a_ket_l x 1)
      (= (path_sem (phase k) (path_sem (phase (- k)) x)) x))))

;; path_sem_rz_basis
(assert
  (forall ((x (matrix complex)) (k Int))
    (=>
      (is_a_ket_l x 1)
      (=>
        (is_a_ket_basis_elt x)
        (= (path_sem (rz k) x) (infix_asdtdt
                                 (ang_exp
                                   (infix_sldtsl
                                     (select (value (ket_to_bv x)) 0)
                                     k))
                                 x))))))

;; path_sem_rz_basis_inv
(assert
  (forall ((x (matrix complex)) (k Int))
    (=>
      (is_a_ket_l x 1)
      (=>
        (is_a_ket_basis_elt x)
        (= (path_sem (rz k) (path_sem (rz (- k)) x)) x)))))

;; path_sem_rz_inv
(assert
  (forall ((x (matrix complex)) (k Int))
    (=> (is_a_ket_l x 1) (= (path_sem (rz k) (path_sem (rz (- k)) x)) x))))

;; qbit_zero'spec
(assert
  (and
    (= (tb2t (get complex1 (t2tb65 (ket 1 0)) 0 0)) c_one)
    (and
      (= (tb2t (get complex1 (t2tb65 (ket 1 0)) 1 0)) c_zero)
      (and
        (is_a_ket_l (ket 1 0) 1)
        (and
          (= (rows complex1 (t2tb65 (ket 1 0))) 2)
          (and
            (= (columns complex1 (t2tb65 (ket 1 0))) 1)
            (and
              (= (tb2t (get complex1 (t2tb65 (ket 1 0)) 0 0)) c_one)
              (and
                (= (tb2t (get complex1 (t2tb65 (ket 1 0)) 1 0)) c_zero)
                (is_a_ket_basis_elt (ket 1 0))))))))))

;; qbit_one'spec
(assert
  (and
    (= (tb2t (get complex1 (t2tb65 (ket 1 1)) 0 0)) c_zero)
    (and
      (= (tb2t (get complex1 (t2tb65 (ket 1 1)) 1 0)) c_one)
      (and
        (is_a_ket_l (ket 1 1) 1)
        (and
          (= (rows complex1 (t2tb65 (ket 1 1))) 2)
          (and
            (= (columns complex1 (t2tb65 (ket 1 1))) 1)
            (and
              (= (tb2t (get complex1 (t2tb65 (ket 1 1)) 0 0)) c_zero)
              (and
                (= (tb2t (get complex1 (t2tb65 (ket 1 1)) 1 0)) c_one)
                (is_a_ket_basis_elt (ket 1 1))))))))))

;; get_ket_one
(assert
  (forall ((x (matrix complex)))
    (=>
      (is_a_ket_l x 1)
      (=> (is_a_ket_basis_elt x) (=> (not (= x (ket 1 0))) (= x (ket 1 1)))))))

;; get_ket_zero
(assert
  (forall ((x (matrix complex)))
    (=>
      (is_a_ket_l x 1)
      (=> (is_a_ket_basis_elt x) (=> (not (= x (ket 1 1))) (= x (ket 1 0)))))))

;; get_ket_one_decomp_z
(assert
  (forall ((a complex) (b complex))
    (= (tb2t
         (get
           complex1
           (t2tb65
             (add_ket_l
               (infix_asdtdt a (ket 1 0))
               (infix_asdtdt b (ket 1 1))
               1))
           0
           0)) a)))

;; get_ket_one_decomp_o
(assert
  (forall ((a complex) (b complex))
    (= (tb2t
         (get
           complex1
           (t2tb65
             (add_ket_l
               (infix_asdtdt a (ket 1 0))
               (infix_asdtdt b (ket 1 1))
               1))
           1
           0)) b)))

;; zero_to_bv
(assert
  (forall ((f (Array Int Int)) (l Int))
    (=>
      (= (select f 0) 0)
      (=> (= l 1) (= (ket 1 0) (bv_to_ket (make_bv f l)))))))

;; one_to_bv
(assert
  (forall ((f (Array Int Int)) (l Int))
    (=>
      (= (select f 0) 1)
      (=> (= l 1) (= (ket 1 1) (bv_to_ket (make_bv f l)))))))

;; bv_to_zero
(assert
  (forall ((f (Array Int Int)) (l Int))
    (=>
      (= (select f 0) 0)
      (=> (= l 1) (= (bv_to_ket (make_bv f l)) (ket 1 0))))))

;; bv_to_one
(assert
  (forall ((f (Array Int Int)) (l Int))
    (=>
      (= (select f 0) 1)
      (=> (= l 1) (= (bv_to_ket (make_bv f l)) (ket 1 1))))))

;; qbit_plus'spec
(assert
  (and
    (= (pps_apply pps_hadamard (ket 1 0)) (infix_asdtdt
                                            (pow_inv_sqrt_2 1)
                                            (add_ket_l (ket 1 0) (ket 1 1) 1)))
    (and
      (is_a_ket_l (pps_apply pps_hadamard (ket 1 0)) 1)
      (and
        (= (rows complex1 (t2tb65 (pps_apply pps_hadamard (ket 1 0)))) 2)
        (and
          (= (columns complex1 (t2tb65 (pps_apply pps_hadamard (ket 1 0)))) 1)
          (and
            (= (tb2t
                 (get
                   complex1
                   (t2tb65 (pps_apply pps_hadamard (ket 1 0)))
                   0
                   0)) (pow_inv_sqrt_2 1))
            (= (tb2t
                 (get
                   complex1
                   (t2tb65 (pps_apply pps_hadamard (ket 1 0)))
                   1
                   0)) (pow_inv_sqrt_2 1))))))))

;; qbit_minus'spec
(assert
  (and
    (= (pps_apply pps_hadamard (ket 1 1)) (infix_asdtdt
                                            (pow_inv_sqrt_2 1)
                                            (add_ket_l
                                              (ket 1 0)
                                              (infix_asdtdt
                                                (prefix_mndt c_one)
                                                (ket 1 1))
                                              1)))
    (and
      (is_a_ket_l (pps_apply pps_hadamard (ket 1 1)) 1)
      (and
        (= (rows complex1 (t2tb65 (pps_apply pps_hadamard (ket 1 1)))) 2)
        (and
          (= (columns complex1 (t2tb65 (pps_apply pps_hadamard (ket 1 1)))) 1)
          (and
            (= (tb2t
                 (get
                   complex1
                   (t2tb65 (pps_apply pps_hadamard (ket 1 1)))
                   0
                   0)) (pow_inv_sqrt_2 1))
            (= (tb2t
                 (get
                   complex1
                   (t2tb65 (pps_apply pps_hadamard (ket 1 1)))
                   1
                   0)) (prefix_mndt (pow_inv_sqrt_2 1)))))))))

;; add_plus_minus
(assert
  (and
    (= (add_ket_l
         (pps_apply pps_hadamard (ket 1 0))
         (pps_apply pps_hadamard (ket 1 1))
         1) (infix_asdtdt (square_rt (infix_pldt c_one c_one)) (ket 1 0)))
    (= (add_ket_l
         (infix_asdtdt (pow_inv_sqrt_2 1) (pps_apply pps_hadamard (ket 1 0)))
         (infix_asdtdt (pow_inv_sqrt_2 1) (pps_apply pps_hadamard (ket 1 1)))
         1) (ket 1 0))))

;; substr_plus_minus
(assert
  (and
    (= (add_ket_l
         (pps_apply pps_hadamard (ket 1 0))
         (infix_asdtdt
           (prefix_mndt c_one)
           (pps_apply pps_hadamard (ket 1 1)))
         1) (infix_asdtdt (square_rt (infix_pldt c_one c_one)) (ket 1 1)))
    (= (add_ket_l
         (infix_asdtdt (pow_inv_sqrt_2 1) (pps_apply pps_hadamard (ket 1 0)))
         (infix_asdtdt
           (prefix_mndt (pow_inv_sqrt_2 1))
           (pps_apply pps_hadamard (ket 1 1)))
         1) (ket 1 1))))

;; plus_to_zero
(assert
  (= (pps_apply pps_hadamard (pps_apply pps_hadamard (ket 1 0))) (ket 1 0)))

;; plus_to_one
(assert
  (= (pps_apply pps_hadamard (pps_apply pps_hadamard (ket 1 1))) (ket 1 1)))

;; hadamard_comp
(assert
  (forall ((x bitvec))
    (=>
      (= (length x) 1)
      (= (pps_apply pps_hadamard (pps_apply pps_hadamard (bv_to_ket x))) 
      (bv_to_ket
        x)))))

;; set_equal_qbit
(assert
  (forall ((a (matrix complex)) (b (matrix complex)))
    (=>
      (is_a_ket_l a 1)
      (=>
        (is_a_ket_l b 1)
        (=>
          (= (tb2t (get complex1 (t2tb65 a) 0 0)) (tb2t
                                                    (get
                                                      complex1
                                                      (t2tb65 b)
                                                      0
                                                      0)))
          (=>
            (= (tb2t (get complex1 (t2tb65 a) 1 0)) (tb2t
                                                      (get
                                                        complex1
                                                        (t2tb65 b)
                                                        1
                                                        0)))
            (= a b)))))))

;; xor_qbits
(declare-fun xor_qbits ((matrix complex)
  (matrix complex)) (matrix complex))

;; result
(declare-fun result63 ((matrix complex)
  (matrix complex)) (Array Int complex))

;; result'def
(assert
  (forall ((x (matrix complex)) (y (matrix complex)) (i Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (result63 x y)) (t2tb8 i))) 
    (ite (= i 0)
      (infix_pldt
        (infix_asdt
          (tb2t (get complex1 (t2tb65 x) 0 0))
          (tb2t (get complex1 (t2tb65 y) 0 0)))
        (infix_asdt
          (tb2t (get complex1 (t2tb65 x) 1 0))
          (tb2t (get complex1 (t2tb65 y) 1 0))))
      (infix_pldt
        (infix_asdt
          (tb2t (get complex1 (t2tb65 x) 0 0))
          (tb2t (get complex1 (t2tb65 y) 1 0)))
        (infix_asdt
          (tb2t (get complex1 (t2tb65 x) 1 0))
          (tb2t (get complex1 (t2tb65 y) 0 0))))))))

;; xor_qbits'def
(assert
  (forall ((x (matrix complex)) (y (matrix complex)))
    (=>
      (is_a_ket_l x 1)
      (=> (is_a_ket_l y 1) (= (xor_qbits x y) (make_ket 1 (result63 x y)))))))

;; xor_qbits'spec
(assert
  (forall ((x (matrix complex)) (y (matrix complex)))
    (=>
      (is_a_ket_l x 1)
      (=>
        (is_a_ket_l y 1)
        (and
          (is_a_ket_l (xor_qbits x y) 1)
          (and
            (=>
              (is_a_ket_basis_elt x)
              (=>
                (is_a_ket_basis_elt y)
                (= (xor_qbits x y) (ket
                                     1
                                     (xor_i (ket_to_int x) (ket_to_int y))))))
            (and
              (= (tb2t (get complex1 (t2tb65 (xor_qbits x y)) 0 0)) (infix_pldt
                                                                    (infix_asdt
                                                                    (tb2t
                                                                    (get
                                                                    complex1
                                                                    (t2tb65
                                                                    x)
                                                                    0
                                                                    0))
                                                                    (tb2t
                                                                    (get
                                                                    complex1
                                                                    (t2tb65
                                                                    y)
                                                                    0
                                                                    0)))
                                                                    (infix_asdt
                                                                    (tb2t
                                                                    (get
                                                                    complex1
                                                                    (t2tb65
                                                                    x)
                                                                    1
                                                                    0))
                                                                    (tb2t
                                                                    (get
                                                                    complex1
                                                                    (t2tb65
                                                                    y)
                                                                    1
                                                                    0)))))
              (= (tb2t (get complex1 (t2tb65 (xor_qbits x y)) 1 0)) (infix_pldt
                                                                    (infix_asdt
                                                                    (tb2t
                                                                    (get
                                                                    complex1
                                                                    (t2tb65
                                                                    x)
                                                                    0
                                                                    0))
                                                                    (tb2t
                                                                    (get
                                                                    complex1
                                                                    (t2tb65
                                                                    y)
                                                                    1
                                                                    0)))
                                                                    (infix_asdt
                                                                    (tb2t
                                                                    (get
                                                                    complex1
                                                                    (t2tb65
                                                                    x)
                                                                    1
                                                                    0))
                                                                    (tb2t
                                                                    (get
                                                                    complex1
                                                                    (t2tb65
                                                                    y)
                                                                    0
                                                                    0))))))))))))

;; xor_int_to_ket
(assert
  (forall ((x (matrix complex)) (i Int))
    (=> (is_a_ket_l x 1) (is_a_ket_l (xor_qbits (ket 1 i) x) 1))))

;; xor_qbit_minus
(assert
  (forall ((i Int))
    (=>
      (and (<= 0 i) (< i 2))
      (= (xor_qbits (ket 1 i) (pps_apply pps_hadamard (ket 1 1))) (infix_asdtdt
                                                                    (cpower
                                                                    (prefix_mndt
                                                                    c_one)
                                                                    i)
                                                                    (pps_apply
                                                                    pps_hadamard
                                                                    (ket 1 1)))))))

;; fc
(declare-fun fc523 (ty
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni)) (sort (infix_mngt a (matrix1 complex1)) (fc523 a x)))))

;; fc
(declare-fun fc524 (ty
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x uni)) (sort (infix_mngt a (matrix1 complex1)) (fc524 a x)))))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (e Int))
    (= (tb2t65
         (infix_at (matrix1 complex1) int (fc523 int (t2tb7 f)) (t2tb8 e))) 
    (xor_qbits
      (ket 1 (select f e))
      (pps_apply pps_hadamard (ket 1 1))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (e uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc523 a f) e)) (xor_qbits
                                                                  (ket
                                                                    1
                                                                    (tb2t8
                                                                    (infix_at
                                                                    int
                                                                    a
                                                                    f
                                                                    e)))
                                                                  (pps_apply
                                                                    pps_hadamard
                                                                    (ket 1 1)))))))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (e Int))
    (= (tb2t65
         (infix_at (matrix1 complex1) int (fc524 int (t2tb7 f)) (t2tb8 e))) 
    (infix_asdtdt
      (cpower (prefix_mndt c_one) (select f e))
      (pps_apply pps_hadamard (ket 1 1))))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((f uni) (e uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc524 a f) e)) (infix_asdtdt
                                                                  (cpower
                                                                    (prefix_mndt
                                                                    c_one)
                                                                    (tb2t8
                                                                    (infix_at
                                                                    int
                                                                    a
                                                                    f
                                                                    e)))
                                                                  (pps_apply
                                                                    pps_hadamard
                                                                    (ket 1 1)))))))

;; ket_sum_xor_qbit_minus
(assert
  (forall ((s (set Int)) (f (Array Int Int)))
    (=>
      (forall ((e Int))
        (=>
          (mem int (t2tb8 e) (t2tb16 s))
          (and (<= 0 (select f e)) (< (select f e) 2))))
      (= (ket_sum_l int (t2tb16 s) (fc523 int (t2tb7 f)) 1) (ket_sum_l
                                                              int
                                                              (t2tb16 s)
                                                              (fc524
                                                                int
                                                                (t2tb7 f))
                                                              1)))))

;; ket_sum_xor_qbit_minus
(assert
  (forall ((a ty))
    (forall ((s uni) (f uni))
      (=>
        (forall ((e uni))
          (=>
            (sort a e)
            (=>
              (mem a e s)
              (and
                (<= 0 (tb2t8 (infix_at int a f e)))
                (< (tb2t8 (infix_at int a f e)) 2)))))
        (= (ket_sum_l a s (fc523 a f) 1) (ket_sum_l a s (fc524 a f) 1))))))

;; fc
(declare-fun fc525 ((Array bitvec Int)) (Array bitvec (matrix complex)))

;; fc
(declare-fun fc526 ((Array bitvec Int)) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((f (Array bitvec Int)) (x bitvec))
    (= (tb2t65
         (infix_at (matrix1 complex1) bitvec1 (t2tb80 (fc525 f)) (t2tb77 x))) 
    (infix_asdtdt
      (cpower
        (prefix_mndt c_one)
        (tb2t8 (infix_at int bitvec1 (t2tb81 f) (t2tb77 x))))
      (bv_to_ket x)))))

;; fc'def
(assert
  (forall ((f (Array bitvec Int)) (e bitvec))
    (= (tb2t65
         (infix_at (matrix1 complex1) bitvec1 (t2tb80 (fc526 f)) (t2tb77 e))) 
    (kronecker
      (bv_to_ket e)
      (xor_qbits
        (ket 1 (tb2t8 (infix_at int bitvec1 (t2tb81 f) (t2tb77 e))))
        (pps_apply pps_hadamard (ket 1 1)))))))

;; superposition_xor_qbit_minus
(assert
  (forall ((f (Array bitvec Int)) (n Int))
    (=>
      (forall ((e bitvec))
        (=>
          (= (length e) n)
          (and
            (<= 0 (tb2t8 (infix_at int bitvec1 (t2tb81 f) (t2tb77 e))))
            (< (tb2t8 (infix_at int bitvec1 (t2tb81 f) (t2tb77 e))) 2))))
      (=>
        (<= 0 n)
        (= (kronecker
             (infix_asdtdt
               (pow_inv_sqrt_2 n)
               (ket_sum_l bitvec1 (t2tb79 (n_bvs n)) (t2tb80 (fc525 f)) n))
             (pps_apply pps_hadamard (ket 1 1))) (infix_asdtdt
                                                   (pow_inv_sqrt_2 n)
                                                   (ket_sum_l
                                                     bitvec1
                                                     (t2tb79 (n_bvs n))
                                                     (t2tb80 (fc526 f))
                                                     (+ n 1))))))))

;; fc
(declare-fun fc527 (Int
  bitvec) (Array Int angle))

;; fc'def
(assert
  (forall ((n Int) (y bitvec) (i Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc527 n y)) (t2tb8 i))) 
    (infix_sldtsl
      (* (select (value (ket_to_bv (ket n 0))) i) (select (value y) i))
      1))))

;; sum_ket_zero
(assert
  (forall ((n Int))
    (=>
      (<= 0 n)
      (forall ((y bitvec)) (= (ang_sum (fc527 n y) 0 n) ang_zero)))))

;; repeat_pps_had
(declare-fun repeat_pps_had (Int) pps)

;; repeat_pps_had'def
(assert
  (forall ((n Int))
    (=>
      (<= 1 n)
      (ite (= n 1)
        (= (repeat_pps_had n) pps_hadamard)
        (= (repeat_pps_had n) (pps_par (repeat_pps_had (- n 1)) pps_hadamard))))))

;; fc
(declare-fun fc528 ((Array Int Int)
  (Array Int Int)) (Array Int angle))

;; fc'def
(assert
  (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc528 x y)) (t2tb8 i))) 
    (infix_sldtsl
      (* (select x i) (select y i))
      1))))

;; repeat_pps_had'spec
(assert
  (forall ((n Int))
    (=>
      (<= 1 n)
      (and
        (= (h_width (repeat_pps_had n)) n)
        (and
          (= (h_range (repeat_pps_had n)) n)
          (and
            (forall ((x (Array Int Int)) (y (Array Int Int)))
              (forall ((i Int))
                (=>
                  (and (<= 0 i) (< i n))
                  (= (select (select (select (h_basis_ket (repeat_pps_had n)) x) y) i) (select y i)))))
            (forall ((x (Array Int Int)) (y (Array Int Int)))
              (= (tb2t84
                   (infix_at
                     angle1
                     (infix_mngt int int)
                     (infix_at
                       (infix_mngt (infix_mngt int int) angle1)
                       (infix_mngt int int)
                       (t2tb118 (h_angle (repeat_pps_had n)))
                       (t2tb7 x))
                     (t2tb7 y))) (ang_sum (fc528 x y) 0 n)))))))))

;; kron_had_coeffs
(declare-fun kron_had_coeffs (Int
  Int
  Int) complex)

;; result
(declare-fun result64 (Int
  Int
  Int) (Array Int Int))

;; result'def
(assert
  (forall ((n Int) (i Int) (j Int) (k Int))
    (= (select (result64 n i j) k) (* (select (value (int_to_bv i n)) k) (select 
    (value
      (int_to_bv j n)) k)))))

;; kron_had_coeffs'def
(assert
  (forall ((n Int) (i Int) (j Int))
    (=>
      (<= 0 n)
      (= (kron_had_coeffs n i j) (infix_asdt
                                   (pow_inv_sqrt_2 n)
                                   (cpower
                                     (prefix_mndt c_one)
                                     (ind_isum (result64 n i j) 0 n)))))))

;; superposition_state
(declare-fun superposition_state (Int) (matrix complex))

;; superposition_state'def
(assert
  (forall ((n Int))
    (=>
      (<= 1 n)
      (= (superposition_state n) (pps_apply (repeat_pps_had n) (ket n 0))))))

;; bv_to_ket_closure
(declare-fun bv_to_ket_closure () (Array bitvec (matrix complex)))

;; ket_closure
(declare-fun ket_closure () (Array Int (Array Int (matrix complex))))

;; bv_to_ket_closure_def
(assert
  (forall ((y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 bv_to_ket_closure)
           (t2tb77 y))) (bv_to_ket y))))

;; ket_closure_def
(assert
  (forall ((y Int) (y1 Int))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           int
           (infix_at
             (infix_mngt int (matrix1 complex1))
             int
             (t2tb109 ket_closure)
             (t2tb8 y))
           (t2tb8 y1))) (ket y y1))))

;; superposition_state'spec
(assert
  (forall ((n Int))
    (=>
      (<= 1 n)
      (and
        (= (superposition_state n) (infix_asdtdt
                                     (pow_inv_sqrt_2 n)
                                     (ket_sum_l
                                       bitvec1
                                       (t2tb79 (n_bvs n))
                                       (t2tb80 bv_to_ket_closure)
                                       n)))
        (and
          (= (superposition_state n) (infix_asdtdt
                                       (pow_inv_sqrt_2 n)
                                       (ket_sum_l
                                         int
                                         (t2tb16 (to_fset 0 (power 2 n)))
                                         (infix_at
                                           (infix_mngt
                                             int
                                             (matrix1 complex1))
                                           int
                                           (t2tb109 ket_closure)
                                           (t2tb8 n))
                                         n)))
          (is_a_ket_l (superposition_state n) n))))))

;; get_ket_superposition
(assert
  (forall ((n Int) (i Int))
    (=>
      (<= 1 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (= (tb2t (get complex1 (t2tb65 (superposition_state n)) i 0)) 
        (infix_sldt
          c_one
          (square_rt (i_to_c (power 2 n)))))))))

;; repeat_had_twice_bv
(assert
  (forall ((n Int) (x bitvec))
    (=>
      (<= 1 n)
      (=>
        (= (length x) n)
        (= (pps_apply
             (repeat_pps_had n)
             (pps_apply (repeat_pps_had n) (bv_to_ket x))) (bv_to_ket x))))))

;; repeat_had_twice_bv_gen
(assert
  (forall ((n Int))
    (=>
      (<= 1 n)
      (forall ((x bitvec))
        (=>
          (= (length x) n)
          (= (pps_apply
               (repeat_pps_had n)
               (pps_apply (repeat_pps_had n) (bv_to_ket x))) (bv_to_ket x)))))))

;; repeat_had_twice_ket
(assert
  (forall ((n Int))
    (=>
      (<= 1 n)
      (forall ((x (matrix complex)))
        (=>
          (is_a_ket_l x n)
          (= (pps_apply (repeat_pps_had n) (pps_apply (repeat_pps_had n) x)) x))))))

;; fc
(declare-fun fc529 (bitvec
  bitvec) (Array Int Int))

;; fc
(declare-fun fc530 (Int
  bitvec) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((x bitvec) (y bitvec) (k Int))
    (= (select (fc529 x y) k) (* (select (value x) k) (select (value y) k)))))

;; fc'def
(assert
  (forall ((n Int) (x bitvec) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc530 n x))
           (t2tb77 y))) (infix_asdtdt
                          (cpower
                            (prefix_mndt c_one)
                            (ind_isum (fc529 x y) 0 n))
                          (bv_to_ket y)))))

;; repeat_pps_had_basis_bv
(assert
  (forall ((n Int) (x bitvec))
    (=>
      (<= 1 n)
      (=>
        (= (length x) n)
        (= (pps_apply (repeat_pps_had n) (bv_to_ket x)) (infix_asdtdt
                                                          (pow_inv_sqrt_2 n)
                                                          (ket_sum_l
                                                            bitvec1
                                                            (t2tb79
                                                              (n_bvs n))
                                                            (t2tb80
                                                              (fc530 n x))
                                                            n)))))))

;; fc
(declare-fun fc531 (Int
  Int
  bitvec) (Array Int Int))

;; fc
(declare-fun fc532 (Int
  Int) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((n Int) (i Int) (y bitvec) (k Int))
    (= (select (fc531 n i y) k) (* (select (value (int_to_bv i n)) k) (select 
    (value
      y) k)))))

;; fc'def
(assert
  (forall ((n Int) (i Int) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc532 n i))
           (t2tb77 y))) (infix_asdtdt
                          (cpower
                            (prefix_mndt c_one)
                            (ind_isum (fc531 n i y) 0 n))
                          (bv_to_ket y)))))

;; repeat_pps_had_basis
(assert
  (forall ((n Int) (i Int))
    (=>
      (<= 1 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (= (pps_apply (repeat_pps_had n) (ket n i)) (infix_asdtdt
                                                      (pow_inv_sqrt_2 n)
                                                      (ket_sum_l
                                                        bitvec1
                                                        (t2tb79 (n_bvs n))
                                                        (t2tb80 (fc532 n i))
                                                        n)))))))

;; repeat_had_superposition
(assert
  (forall ((n Int))
    (=>
      (<= 1 n)
      (= (pps_apply (repeat_pps_had n) (superposition_state n)) (ket n 0)))))

;; path_sem_repeat_at_zero_bv
(assert
  (forall ((n Int) (x bitvec))
    (=>
      (<= 1 n)
      (=>
        (= (length x) n)
        (= (tb2t
             (get
               complex1
               (t2tb65 (pps_apply (repeat_pps_had n) (bv_to_ket x)))
               0
               0)) (pow_inv_sqrt_2 n))))))

;; fc
(declare-fun fc533 () (Array (matrix complex) (Array Int complex)))

;; fc'def
(assert
  (forall ((y0 (matrix complex)) (y1 Int))
    (= (tb2t
         (infix_at
           complex1
           int
           (infix_at
             (infix_mngt int complex1)
             (matrix1 complex1)
             (t2tb113 fc533)
             (t2tb65 y0))
           (t2tb8 y1))) (tb2t (get complex1 (t2tb65 y0) y1 0)))))

;; path_sem_repeat_at_zero
(assert
  (forall ((n Int) (x (matrix complex)))
    (=>
      (<= 1 n)
      (=>
        (is_a_ket_l x n)
        (= (tb2t
             (get complex1 (t2tb65 (pps_apply (repeat_pps_had n) x)) 0 0)) 
        (infix_asdt
          (pow_inv_sqrt_2 n)
          (ind_sum
            (tb2t51
              (infix_at
                (infix_mngt int complex1)
                (matrix1 complex1)
                (t2tb113 fc533)
                (t2tb65 x)))
            0
            (power 2 n))))))))

;; fc
(declare-fun fc534 ((Array bitvec (Array bitvec Int))
  bitvec) (Array bitvec (matrix complex)))

;; fc
(declare-fun fc535 ((Array bitvec Int)
  (Array bitvec (Array bitvec Int))
  Int) (Array bitvec (matrix complex)))

;; fc
(declare-fun fc536 ((Array bitvec Int)
  (Array bitvec (Array bitvec Int))
  bitvec) (Array bitvec complex))

;; fc
(declare-fun fc537 ((Array bitvec Int)
  (Array bitvec (Array bitvec Int))
  Int) (Array bitvec (matrix complex)))

;; t2tb
(declare-fun t2tb127 ((Array bitvec (Array bitvec Int))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array bitvec (Array bitvec Int))))
    (sort (infix_mngt bitvec1 (infix_mngt bitvec1 int)) (t2tb127 x))))

;; tb2t
(declare-fun tb2t127 (uni) (Array bitvec (Array bitvec Int)))

;; BridgeL
(assert
  (forall ((i (Array bitvec (Array bitvec Int))))
    (! (= (tb2t127 (t2tb127 i)) i) :pattern ((t2tb127 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (= (t2tb127 (tb2t127 j)) j) :pattern ((t2tb127 (tb2t127 j))) )))

;; fc'def
(assert
  (forall ((g (Array bitvec (Array bitvec Int))) (x bitvec) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc534 g x))
           (t2tb77 y))) (infix_asdtdt
                          (cpower
                            (prefix_mndt c_one)
                            (tb2t8
                              (infix_at
                                int
                                bitvec1
                                (infix_at
                                  (infix_mngt bitvec1 int)
                                  bitvec1
                                  (t2tb127 g)
                                  (t2tb77 x))
                                (t2tb77 y))))
                          (bv_to_ket y)))))

;; fc'def
(assert
  (forall ((f (Array bitvec Int)) (g (Array bitvec (Array bitvec Int))) (n Int) (x bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc535 f g n))
           (t2tb77 x))) (infix_asdtdt
                          (cpower
                            (prefix_mndt c_one)
                            (tb2t8
                              (infix_at int bitvec1 (t2tb81 f) (t2tb77 x))))
                          (ket_sum_l
                            bitvec1
                            (t2tb79 (n_bvs n))
                            (t2tb80 (fc534 g x))
                            n)))))

;; fc'def
(assert
  (forall ((f (Array bitvec Int)) (g (Array bitvec (Array bitvec Int))) (y bitvec) (x bitvec))
    (= (tb2t (infix_at complex1 bitvec1 (t2tb82 (fc536 f g y)) (t2tb77 x))) 
    (cpower
      (prefix_mndt c_one)
      (+ (tb2t8
           (infix_at
             int
             bitvec1
             (infix_at
               (infix_mngt bitvec1 int)
               bitvec1
               (t2tb127 g)
               (t2tb77 x))
             (t2tb77 y))) (tb2t8
                            (infix_at int bitvec1 (t2tb81 f) (t2tb77 x))))))))

;; fc'def
(assert
  (forall ((f (Array bitvec Int)) (g (Array bitvec (Array bitvec Int))) (n Int) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc537 f g n))
           (t2tb77 y))) (infix_asdtdt
                          (sum
                            bitvec1
                            (t2tb79 (n_bvs n))
                            (t2tb82 (fc536 f g y)))
                          (bv_to_ket y)))))

;; ket_sum_power_minus_one
(assert
  (forall ((f (Array bitvec Int)) (g (Array bitvec (Array bitvec Int))) (n Int))
    (=>
      (<= 0 n)
      (= (ket_sum_l bitvec1 (t2tb79 (n_bvs n)) (t2tb80 (fc535 f g n)) n) 
      (ket_sum_l
        bitvec1
        (t2tb79 (n_bvs n))
        (t2tb80 (fc537 f g n))
        n)))))

;; path_sem_hadamard_zero
(assert
  (forall ((x (matrix complex)))
    (=>
      (= x (ket 1 0))
      (= (path_sem hadamard x) (pps_apply pps_hadamard (ket 1 0))))))

;; path_sem_hadamard_one
(assert
  (forall ((x (matrix complex)))
    (=>
      (= x (ket 1 1))
      (= (path_sem hadamard x) (pps_apply pps_hadamard (ket 1 1))))))

;; path_sem_hadamard_plus
(assert
  (forall ((x (matrix complex)))
    (=>
      (= x (pps_apply pps_hadamard (ket 1 0)))
      (= (path_sem hadamard x) (ket 1 0)))))

;; path_sem_hadamard_minus
(assert
  (forall ((x (matrix complex)))
    (=>
      (= x (pps_apply pps_hadamard (ket 1 1)))
      (= (path_sem hadamard x) (ket 1 1)))))

;; path_sem_cnot_basis
(assert
  (forall ((x (matrix complex)))
    (=>
      (is_a_ket_l x 2)
      (=>
        (is_a_ket_basis_elt x)
        (= (path_sem cnot x) (ite (= (ket_to_int x) 0)
                               (ket 2 0)
                               (ite (= (ket_to_int x) 1)
                                 (ket 2 1)
                                 (ite (= (ket_to_int x) 2)
                                   (ket 2 3)
                                   (ket 2 2)))))))))

;; path_sem_swap_basis
(assert
  (forall ((x (matrix complex)))
    (=>
      (is_a_ket_l x 2)
      (=>
        (is_a_ket_basis_elt x)
        (= (path_sem swap x) (ite (= (ket_to_int x) 0)
                               (ket 2 0)
                               (ite (= (ket_to_int x) 1)
                                 (ket 2 2)
                                 (ite (= (ket_to_int x) 2)
                                   (ket 2 1)
                                   (ket 2 3)))))))))

;; hadamard_invol
(assert
  (forall ((x (matrix complex)))
    (=> (is_a_ket_l x 1) (= (path_sem hadamard (path_sem hadamard x)) x))))

;; ancilla_g
(declare-fun ancilla_g (circuit2
  Int
  (Array (matrix complex) (matrix complex))) circuit2)

;; ancilla_g'def
(assert
  (forall ((c circuit2) (i Int) (path_sem_target (Array (matrix complex) (matrix complex))))
    (=>
      (<= 1 i)
      (=>
        (<= (+ i 1) (width c))
        (=>
          (forall ((x (matrix complex)))
            (=>
              (is_a_ket_l x (- (width c) i))
              (= (path_sem c (kronecker x (ket i 0))) (kronecker
                                                        (tb2t65
                                                          (infix_at
                                                            (matrix1
                                                              complex1)
                                                            (matrix1
                                                              complex1)
                                                            (t2tb66
                                                              path_sem_target)
                                                            (t2tb65 x)))
                                                        (ket i 0)))))
          (= (ancilla_g c i path_sem_target) (ancilla c i)))))))

;; fc
(declare-fun fc538 (circuit2
  Int
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc539 (circuit2
  Int
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((c circuit2) (i Int) (x (Array Int Int)) (k Int))
    (= (select (fc538 c i x) k) (ite (< k (- (width c) i)) (select x k) 0))))

;; fc'def
(assert
  (forall ((c circuit2) (i Int) (x (Array Int Int)) (k Int))
    (= (select (fc539 c i x) k) (ite (< k (- (width c) i)) (select x k) 0))))

;; ancilla_g'spec
(assert
  (forall ((c circuit2) (i Int) (path_sem_target (Array (matrix complex) (matrix complex))))
    (=>
      (<= 1 i)
      (=>
        (<= (+ i 1) (width c))
        (=>
          (forall ((x (matrix complex)))
            (=>
              (is_a_ket_l x (- (width c) i))
              (= (path_sem c (kronecker x (ket i 0))) (kronecker
                                                        (tb2t65
                                                          (infix_at
                                                            (matrix1
                                                              complex1)
                                                            (matrix1
                                                              complex1)
                                                            (t2tb66
                                                              path_sem_target)
                                                            (t2tb65 x)))
                                                        (ket i 0)))))
          (and
            (= (ancillas (ancilla_g c i path_sem_target)) (+ (ancillas c) i))
            (and
              (= (size (ancilla_g c i path_sem_target)) (size c))
              (and
                (= (range (ancilla_g c i path_sem_target)) (range c))
                (and
                  (= (width (ancilla_g c i path_sem_target)) (- (width c) i))
                  (and
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (forall ((ii Int))
                        (= (basis_ket (ancilla_g c i path_sem_target) x y ii) 
                        (basis_ket
                          c
                          (fc538 c i x)
                          y
                          ii))))
                    (and
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (= (ang_ind (ancilla_g c i path_sem_target) x y) 
                        (ang_ind
                          c
                          (fc539 c i x)
                          y)))
                      (and
                        (forall ((x (matrix complex)))
                          (=>
                            (is_a_ket_l
                              x
                              (width (ancilla_g c i path_sem_target)))
                            (= (kronecker
                                 (path_sem (ancilla_g c i path_sem_target) x)
                                 (ket i 0)) (path_sem
                                              c
                                              (kronecker x (ket i 0))))))
                        (forall ((x (matrix complex)))
                          (=>
                            (is_a_ket_l
                              x
                              (width (ancilla_g c i path_sem_target)))
                            (= (path_sem (ancilla_g c i path_sem_target) x) 
                            (tb2t65
                              (infix_at
                                (matrix1 complex1)
                                (matrix1 complex1)
                                (t2tb66 path_sem_target)
                                (t2tb65 x))))))))))))))))))

;; ancilla_spec
(declare-fun ancilla_spec (circuit2
  Int
  (Array bitvec (matrix complex))) circuit2)

;; result
(declare-fun result65 ((Array bitvec (matrix complex))
  (matrix complex)) (Array bitvec (matrix complex)))

;; result
(declare-fun result66 (circuit2
  Int
  (Array bitvec (matrix complex))) (Array (matrix complex) (matrix complex)))

;; result'def
(assert
  (forall ((path_sem_target (Array bitvec (matrix complex))) (z (matrix complex)) (x bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (result65 path_sem_target z))
           (t2tb77 x))) (infix_asdtdt
                          (tb2t (get complex1 (t2tb65 z) (bv_to_int x) 0))
                          (tb2t65
                            (infix_at
                              (matrix1 complex1)
                              bitvec1
                              (t2tb80 path_sem_target)
                              (t2tb77 x)))))))

;; result'def
(assert
  (forall ((c circuit2) (i Int) (path_sem_target (Array bitvec (matrix complex))) (z (matrix complex)))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           (matrix1 complex1)
           (t2tb66 (result66 c i path_sem_target))
           (t2tb65 z))) (ite (is_a_ket_l z (- (width c) i))
                          (ket_sum_l
                            bitvec1
                            (t2tb79 (n_bvs (- (width c) i)))
                            (t2tb80 (result65 path_sem_target z))
                            (- (width c) i))
                          (tb2t65 (make complex1 1 1 (t2tb c_one)))))))

;; ancilla_spec'def
(assert
  (forall ((c circuit2) (i Int) (path_sem_target (Array bitvec (matrix complex))))
    (=>
      (<= 1 i)
      (=>
        (<= (+ i 1) (width c))
        (=>
          (forall ((x bitvec))
            (=>
              (= (length x) (- (width c) i))
              (= (path_sem c (kronecker (bv_to_ket x) (ket i 0))) (kronecker
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    bitvec1
                                                                    (t2tb80
                                                                    path_sem_target)
                                                                    (t2tb77
                                                                    x)))
                                                                    (ket i 0)))))
          (= (ancilla_spec c i path_sem_target) (ancilla_g
                                                  c
                                                  i
                                                  (result66
                                                    c
                                                    i
                                                    path_sem_target))))))))

;; fc
(declare-fun fc540 (circuit2
  Int
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc541 (circuit2
  Int
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc542 ((Array bitvec (matrix complex))
  (matrix complex)) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((c circuit2) (i Int) (x (Array Int Int)) (k Int))
    (= (select (fc540 c i x) k) (ite (< k (- (width c) i)) (select x k) 0))))

;; fc'def
(assert
  (forall ((c circuit2) (i Int) (x (Array Int Int)) (k Int))
    (= (select (fc541 c i x) k) (ite (< k (- (width c) i)) (select x k) 0))))

;; fc'def
(assert
  (forall ((path_sem_target (Array bitvec (matrix complex))) (z (matrix complex)) (x bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc542 path_sem_target z))
           (t2tb77 x))) (infix_asdtdt
                          (tb2t (get complex1 (t2tb65 z) (bv_to_int x) 0))
                          (tb2t65
                            (infix_at
                              (matrix1 complex1)
                              bitvec1
                              (t2tb80 path_sem_target)
                              (t2tb77 x)))))))

;; ancilla_spec'spec
(assert
  (forall ((c circuit2) (i Int) (path_sem_target (Array bitvec (matrix complex))))
    (=>
      (<= 1 i)
      (=>
        (<= (+ i 1) (width c))
        (=>
          (forall ((x bitvec))
            (=>
              (= (length x) (- (width c) i))
              (= (path_sem c (kronecker (bv_to_ket x) (ket i 0))) (kronecker
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    bitvec1
                                                                    (t2tb80
                                                                    path_sem_target)
                                                                    (t2tb77
                                                                    x)))
                                                                    (ket i 0)))))
          (and
            (= (ancillas (ancilla_spec c i path_sem_target)) (+ (ancillas c) i))
            (and
              (= (size (ancilla_spec c i path_sem_target)) (size c))
              (and
                (= (range (ancilla_spec c i path_sem_target)) (range c))
                (and
                  (= (width (ancilla_spec c i path_sem_target)) (- (width c) i))
                  (and
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (forall ((ii Int))
                        (= (basis_ket
                             (ancilla_spec c i path_sem_target)
                             x
                             y
                             ii) (basis_ket c (fc540 c i x) y ii))))
                    (and
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (= (ang_ind (ancilla_spec c i path_sem_target) x y) 
                        (ang_ind
                          c
                          (fc541 c i x)
                          y)))
                      (and
                        (forall ((x (matrix complex)))
                          (=>
                            (is_a_ket_l
                              x
                              (width (ancilla_spec c i path_sem_target)))
                            (= (kronecker
                                 (path_sem
                                   (ancilla_spec c i path_sem_target)
                                   x)
                                 (ket i 0)) (path_sem
                                              c
                                              (kronecker x (ket i 0))))))
                        (forall ((z (matrix complex)))
                          (=>
                            (is_a_ket_l
                              z
                              (width (ancilla_spec c i path_sem_target)))
                            (= (path_sem
                                 (ancilla_spec c i path_sem_target)
                                 z) (ket_sum_l
                                      bitvec1
                                      (t2tb79 (n_bvs (- (width c) i)))
                                      (t2tb80 (fc542 path_sem_target z))
                                      (- (width c) i)))))))))))))))))

;; mat_sem_seq
(assert
  (forall ((d circuit2) (e circuit2))
    (=>
      (= (width d) (width e))
      (= (mat_sem (sequence d e)) (mat_mult (mat_sem e) (mat_sem d))))))

;; mat_sem_par
(assert
  (forall ((d circuit2) (e circuit2))
    (= (mat_sem (parallel d e)) (kronecker (mat_sem d) (mat_sem e)))))

;; mat_sem_anc
(assert
  (forall ((c circuit2) (mat_sem_target (matrix complex)) (i Int))
    (=>
      (<= 1 i)
      (=>
        (<= (+ i 1) (width c))
        (=>
          (= (rows complex1 (t2tb65 mat_sem_target)) (power
                                                       2
                                                       (- (width c) i)))
          (=>
            (= (columns complex1 (t2tb65 mat_sem_target)) (power
                                                            2
                                                            (- (width c) i)))
            (=>
              (forall ((x (matrix complex)))
                (=>
                  (is_a_ket_l x (- (width c) i))
                  (= (mat_mult (mat_sem c) (kronecker x (ket i 0))) (kronecker
                                                                    (mat_mult
                                                                    mat_sem_target
                                                                    x)
                                                                    (ket i 0)))))
              (= (mat_sem (ancilla c i)) mat_sem_target))))))))

;; mat_sem_anc_
(assert
  (forall ((c circuit2) (mat_sem_target (matrix complex)) (i Int))
    (=>
      (<= 1 i)
      (=>
        (= (rows complex1 (t2tb65 mat_sem_target)) (power 2 (- (width c) i)))
        (=>
          (= (columns complex1 (t2tb65 mat_sem_target)) (power
                                                          2
                                                          (- (width c) i)))
          (=>
            (<= (+ i 1) (width c))
            (=>
              (forall ((x (matrix complex)))
                (=>
                  (is_a_ket_l x (- (width c) i))
                  (=>
                    (is_a_ket_basis_elt x)
                    (= (mat_mult (mat_sem c) (kronecker x (ket i 0))) 
                    (kronecker
                      (mat_mult mat_sem_target x)
                      (ket i 0))))))
              (= (mat_sem (ancilla c i)) mat_sem_target))))))))

;; mat_sem_id
(assert (= (mat_sem id) (tb2t65 (make_f complex1 2 2 (indic_closure int)))))

;; correct_path_sum_basis
(declare-fun correct_path_sum_basis (circuit2
  pps
  bitvec) Bool)

;; correct_path_sum_basis'def
(assert
  (forall ((c circuit2) (h pps) (x bitvec))
    (=
      (correct_path_sum_basis c h x)
      (and
        (let ((q1_ (h_width h))) (and (= (length x) q1_) (= q1_ (width c))))
        (infix_eqeq
          (matrix1 complex1)
          (t2tb65 (mat_mult (mat_sem c) (bv_to_ket x)))
          (t2tb65 (pps_apply_basis h x)))))))

;; correct_path_sum_
(declare-fun correct_path_sum_ (circuit2
  pps) Bool)

;; correct_path_sum_'def
(assert
  (forall ((c circuit2) (h pps))
    (=
      (correct_path_sum_ c h)
      (and
        (= (h_width h) (width c))
        (forall ((x (matrix complex)))
          (=>
            (is_a_ket_l x (width c))
            (= (pps_apply h x) (mat_mult (mat_sem c) x))))))))

;; set_correct_path_sum
(assert
  (forall ((c circuit2) (h pps))
    (=>
      (= (h_width h) (width c))
      (=>
        (forall ((x (matrix complex)))
          (=>
            (is_a_ket_l x (width c))
            (= (pps_apply h x) (mat_mult (mat_sem c) x))))
        (correct_path_sum_ c h)))))

;; get_correct_path_sum
(assert
  (forall ((c circuit2) (h pps) (x (matrix complex)))
    (=>
      (= (h_width h) (width c))
      (=>
        (is_a_ket_l x (width c))
        (=>
          (correct_path_sum_ c h)
          (= (pps_apply h x) (mat_mult (mat_sem c) x)))))))

;; get_correct_path_sum_path
(assert
  (forall ((c circuit2) (h pps) (x (matrix complex)))
    (=>
      (= (h_width h) (width c))
      (=>
        (is_a_ket_l x (width c))
        (=> (correct_path_sum_ c h) (= (pps_apply h x) (path_sem c x)))))))

;; set_correct_path_sum_basis
(assert
  (forall ((c circuit2) (h pps))
    (=>
      (= (h_width h) (width c))
      (=>
        (forall ((x (matrix complex)))
          (=>
            (is_a_ket_l x (width c))
            (=>
              (is_a_ket_basis_elt x)
              (= (pps_apply h x) (mat_mult (mat_sem c) x)))))
        (correct_path_sum_ c h)))))

;; set_correct_pps
(assert
  (forall ((c circuit2) (h pps))
    (=>
      (= (h_width h) (width c))
      (=>
        (forall ((x (matrix complex)))
          (=>
            (is_a_ket_l x (width c))
            (=>
              (is_a_ket_basis_elt x)
              (= (pps_apply h x) (path_sem_basis c x)))))
        (correct_path_sum_ c h)))))

;; set_correct_pps_
(assert
  (forall ((c circuit2) (h pps))
    (=>
      (= (h_width h) (width c))
      (=>
        (forall ((x (matrix complex)))
          (=>
            (is_a_ket_l x (width c))
            (=> (is_a_ket_basis_elt x) (= (pps_apply h x) (path_sem c x)))))
        (correct_path_sum_ c h)))))

;; fc
(declare-fun fc543 (pps
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc544 (pps
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((h pps) (y (Array Int Int)) (k Int))
    (= (select (fc543 h y) k) (select y (+ k (h_range h))))))

;; fc'def
(assert
  (forall ((h pps) (y (Array Int Int)) (k Int))
    (= (select (fc544 h y) k) (select y (+ k (h_range h))))))

;; correct_seq
(assert
  (forall ((c circuit2) (cqt circuit2) (h pps) (hqt pps) (hqtqt pps))
    (=>
      (correct_path_sum_ c h)
      (=>
        (correct_path_sum_ cqt hqt)
        (=>
          (= (width c) (width cqt))
          (=>
            (= (h_width hqtqt) (width c))
            (=>
              (= (h_range hqtqt) (+ (h_range h) (h_range hqt)))
              (=>
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (=>
                    (forall ((j Int))
                      (=>
                        (and (<= 0 j) (< j (h_width hqtqt)))
                        (and (<= 0 (select x j)) (< (select x j) 2))))
                    (=>
                      (forall ((j Int))
                        (=>
                          (and (<= 0 j) (< j (h_range hqtqt)))
                          (and (<= 0 (select y j)) (< (select y j) 2))))
                      (= (tb2t84
                           (infix_at
                             angle1
                             (infix_mngt int int)
                             (infix_at
                               (infix_mngt (infix_mngt int int) angle1)
                               (infix_mngt int int)
                               (t2tb118 (h_angle hqtqt))
                               (t2tb7 x))
                             (t2tb7 y))) (ang_add
                                           (tb2t84
                                             (infix_at
                                               angle1
                                               (infix_mngt int int)
                                               (infix_at
                                                 (infix_mngt
                                                   (infix_mngt int int)
                                                   angle1)
                                                 (infix_mngt int int)
                                                 (t2tb118 (h_angle h))
                                                 (t2tb7 x))
                                               (t2tb7 y)))
                                           (tb2t84
                                             (infix_at
                                               angle1
                                               (infix_mngt int int)
                                               (infix_at
                                                 (infix_mngt
                                                   (infix_mngt int int)
                                                   angle1)
                                                 (infix_mngt int int)
                                                 (t2tb118 (h_angle hqt))
                                                 (t2tb7
                                                   (select (select (h_basis_ket
                                                                    h) x) y)))
                                               (t2tb7 (fc543 h y)))))))))
                (=>
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (forall ((i Int))
                      (=>
                        (forall ((j Int))
                          (=>
                            (and (<= 0 j) (< j (h_width hqtqt)))
                            (and (<= 0 (select x j)) (< (select x j) 2))))
                        (=>
                          (forall ((j Int))
                            (=>
                              (and (<= 0 j) (< j (h_range hqtqt)))
                              (and (<= 0 (select y j)) (< (select y j) 2))))
                          (=>
                            (and (<= 0 i) (< i (h_width hqtqt)))
                            (= (select (select (select (h_basis_ket hqtqt) x) y) i) (select (select (select 
                            (h_basis_ket
                              hqt) (select (select (h_basis_ket h) x) y)) 
                            (fc544
                              h
                              y)) i)))))))
                  (correct_path_sum_ (sequence c cqt) hqtqt))))))))))

;; seq_pps
(declare-fun seq_pps (circuit2
  circuit2
  pps
  pps
  pps) circuit2)

;; fc
(declare-fun fc545 (pps
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc546 (pps
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((h pps) (y (Array Int Int)) (k Int))
    (= (select (fc545 h y) k) (select y (+ k (h_range h))))))

;; fc'def
(assert
  (forall ((h pps) (y (Array Int Int)) (k Int))
    (= (select (fc546 h y) k) (select y (+ k (h_range h))))))

;; seq_pps'def
(assert
  (forall ((c circuit2) (cqt circuit2) (h pps) (hqt pps) (hqtqt pps))
    (=>
      (correct_path_sum_ c h)
      (=>
        (correct_path_sum_ cqt hqt)
        (=>
          (= (width c) (width cqt))
          (=>
            (= (h_width hqtqt) (width c))
            (=>
              (= (h_range hqtqt) (+ (h_range h) (h_range hqt)))
              (=>
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (=>
                    (forall ((j Int))
                      (=>
                        (and (<= 0 j) (< j (h_width hqtqt)))
                        (and (<= 0 (select x j)) (< (select x j) 2))))
                    (=>
                      (forall ((j Int))
                        (=>
                          (and (<= 0 j) (< j (h_range hqtqt)))
                          (and (<= 0 (select y j)) (< (select y j) 2))))
                      (= (tb2t84
                           (infix_at
                             angle1
                             (infix_mngt int int)
                             (infix_at
                               (infix_mngt (infix_mngt int int) angle1)
                               (infix_mngt int int)
                               (t2tb118 (h_angle hqtqt))
                               (t2tb7 x))
                             (t2tb7 y))) (ang_add
                                           (tb2t84
                                             (infix_at
                                               angle1
                                               (infix_mngt int int)
                                               (infix_at
                                                 (infix_mngt
                                                   (infix_mngt int int)
                                                   angle1)
                                                 (infix_mngt int int)
                                                 (t2tb118 (h_angle h))
                                                 (t2tb7 x))
                                               (t2tb7 y)))
                                           (tb2t84
                                             (infix_at
                                               angle1
                                               (infix_mngt int int)
                                               (infix_at
                                                 (infix_mngt
                                                   (infix_mngt int int)
                                                   angle1)
                                                 (infix_mngt int int)
                                                 (t2tb118 (h_angle hqt))
                                                 (t2tb7
                                                   (select (select (h_basis_ket
                                                                    h) x) y)))
                                               (t2tb7 (fc545 h y)))))))))
                (=>
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (forall ((i Int))
                      (=>
                        (forall ((j Int))
                          (=>
                            (and (<= 0 j) (< j (h_width hqtqt)))
                            (and (<= 0 (select x j)) (< (select x j) 2))))
                        (=>
                          (forall ((j Int))
                            (=>
                              (and (<= 0 j) (< j (h_range hqtqt)))
                              (and (<= 0 (select y j)) (< (select y j) 2))))
                          (=>
                            (and (<= 0 i) (< i (h_width hqtqt)))
                            (= (select (select (select (h_basis_ket hqtqt) x) y) i) (select (select (select 
                            (h_basis_ket
                              hqt) (select (select (h_basis_ket h) x) y)) 
                            (fc546
                              h
                              y)) i)))))))
                  (= (seq_pps c cqt h hqt hqtqt) (sequence c cqt)))))))))))

;; fc
(declare-fun fc547 (pps
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc548 (pps
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((h pps) (y (Array Int Int)) (k Int))
    (= (select (fc547 h y) k) (select y (+ k (h_range h))))))

;; fc'def
(assert
  (forall ((h pps) (y (Array Int Int)) (k Int))
    (= (select (fc548 h y) k) (select y (+ k (h_range h))))))

;; seq_pps'spec
(assert
  (forall ((c circuit2) (cqt circuit2) (h pps) (hqt pps) (hqtqt pps))
    (=>
      (correct_path_sum_ c h)
      (=>
        (correct_path_sum_ cqt hqt)
        (=>
          (= (width c) (width cqt))
          (=>
            (= (h_width hqtqt) (width c))
            (=>
              (= (h_range hqtqt) (+ (h_range h) (h_range hqt)))
              (=>
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (=>
                    (forall ((j Int))
                      (=>
                        (and (<= 0 j) (< j (h_width hqtqt)))
                        (and (<= 0 (select x j)) (< (select x j) 2))))
                    (=>
                      (forall ((j Int))
                        (=>
                          (and (<= 0 j) (< j (h_range hqtqt)))
                          (and (<= 0 (select y j)) (< (select y j) 2))))
                      (= (tb2t84
                           (infix_at
                             angle1
                             (infix_mngt int int)
                             (infix_at
                               (infix_mngt (infix_mngt int int) angle1)
                               (infix_mngt int int)
                               (t2tb118 (h_angle hqtqt))
                               (t2tb7 x))
                             (t2tb7 y))) (ang_add
                                           (tb2t84
                                             (infix_at
                                               angle1
                                               (infix_mngt int int)
                                               (infix_at
                                                 (infix_mngt
                                                   (infix_mngt int int)
                                                   angle1)
                                                 (infix_mngt int int)
                                                 (t2tb118 (h_angle h))
                                                 (t2tb7 x))
                                               (t2tb7 y)))
                                           (tb2t84
                                             (infix_at
                                               angle1
                                               (infix_mngt int int)
                                               (infix_at
                                                 (infix_mngt
                                                   (infix_mngt int int)
                                                   angle1)
                                                 (infix_mngt int int)
                                                 (t2tb118 (h_angle hqt))
                                                 (t2tb7
                                                   (select (select (h_basis_ket
                                                                    h) x) y)))
                                               (t2tb7 (fc547 h y)))))))))
                (=>
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (forall ((i Int))
                      (=>
                        (forall ((j Int))
                          (=>
                            (and (<= 0 j) (< j (h_width hqtqt)))
                            (and (<= 0 (select x j)) (< (select x j) 2))))
                        (=>
                          (forall ((j Int))
                            (=>
                              (and (<= 0 j) (< j (h_range hqtqt)))
                              (and (<= 0 (select y j)) (< (select y j) 2))))
                          (=>
                            (and (<= 0 i) (< i (h_width hqtqt)))
                            (= (select (select (select (h_basis_ket hqtqt) x) y) i) (select (select (select 
                            (h_basis_ket
                              hqt) (select (select (h_basis_ket h) x) y)) 
                            (fc548
                              h
                              y)) i)))))))
                  (and
                    (= (width (seq_pps c cqt h hqt hqtqt)) (width c))
                    (and
                      (= (size (seq_pps c cqt h hqt hqtqt)) (+ (size c) 
                      (size
                        cqt)))
                      (and
                        (= (ancillas (seq_pps c cqt h hqt hqtqt)) (max
                                                                    (ancillas
                                                                    c)
                                                                    (ancillas
                                                                    cqt)))
                        (and
                          (correct_path_sum_
                            (seq_pps c cqt h hqt hqtqt)
                            hqtqt)
                          (= (seq_pps c cqt h hqt hqtqt) (sequence c cqt)))))))))))))))

;; fc
(declare-fun fc549 (pps
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc550 (pps
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc551 (pps
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc552 (pps
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((h pps) (x (Array Int Int)) (k Int))
    (= (select (fc549 h x) k) (select x (+ k (h_width h))))))

;; fc'def
(assert
  (forall ((h pps) (y (Array Int Int)) (k Int))
    (= (select (fc550 h y) k) (select y (+ k (h_range h))))))

;; fc'def
(assert
  (forall ((h pps) (x (Array Int Int)) (k Int))
    (= (select (fc551 h x) k) (select x (+ k (h_width h))))))

;; fc'def
(assert
  (forall ((h pps) (y (Array Int Int)) (k Int))
    (= (select (fc552 h y) k) (select y (+ k (h_range h))))))

;; correct_par
(assert
  (forall ((c circuit2) (cqt circuit2) (h pps) (hqt pps) (hqtqt pps))
    (=>
      (correct_path_sum_ c h)
      (=>
        (correct_path_sum_ cqt hqt)
        (=>
          (= (h_width hqtqt) (+ (width c) (width cqt)))
          (=>
            (= (h_range hqtqt) (+ (h_range h) (h_range hqt)))
            (=>
              (forall ((x (Array Int Int)) (y (Array Int Int)))
                (=>
                  (forall ((j Int))
                    (=>
                      (and (<= 0 j) (< j (h_width hqtqt)))
                      (and (<= 0 (select x j)) (< (select x j) 2))))
                  (=>
                    (forall ((j Int))
                      (=>
                        (and (<= 0 j) (< j (h_range hqtqt)))
                        (and (<= 0 (select y j)) (< (select y j) 2))))
                    (= (tb2t84
                         (infix_at
                           angle1
                           (infix_mngt int int)
                           (infix_at
                             (infix_mngt (infix_mngt int int) angle1)
                             (infix_mngt int int)
                             (t2tb118 (h_angle hqtqt))
                             (t2tb7 x))
                           (t2tb7 y))) (ang_add
                                         (tb2t84
                                           (infix_at
                                             angle1
                                             (infix_mngt int int)
                                             (infix_at
                                               (infix_mngt
                                                 (infix_mngt int int)
                                                 angle1)
                                               (infix_mngt int int)
                                               (t2tb118 (h_angle h))
                                               (t2tb7 x))
                                             (t2tb7 y)))
                                         (tb2t84
                                           (infix_at
                                             angle1
                                             (infix_mngt int int)
                                             (infix_at
                                               (infix_mngt
                                                 (infix_mngt int int)
                                                 angle1)
                                               (infix_mngt int int)
                                               (t2tb118 (h_angle hqt))
                                               (t2tb7 (fc549 h x)))
                                             (t2tb7 (fc550 h y)))))))))
              (=>
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (forall ((i Int))
                    (=>
                      (forall ((j Int))
                        (=>
                          (and (<= 0 j) (< j (h_width hqtqt)))
                          (and (<= 0 (select x j)) (< (select x j) 2))))
                      (=>
                        (forall ((j Int))
                          (=>
                            (and (<= 0 j) (< j (h_range hqtqt)))
                            (and (<= 0 (select y j)) (< (select y j) 2))))
                        (=>
                          (and (<= 0 i) (< i (h_width h)))
                          (= (select (select (select (h_basis_ket hqtqt) x) y) i) (select (select (select 
                          (h_basis_ket
                            h) x) y) i)))))))
                (=>
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (forall ((i Int))
                      (=>
                        (forall ((j Int))
                          (=>
                            (and (<= 0 j) (< j (h_width hqtqt)))
                            (and (<= 0 (select x j)) (< (select x j) 2))))
                        (=>
                          (forall ((j Int))
                            (=>
                              (and (<= 0 j) (< j (h_range hqtqt)))
                              (and (<= 0 (select y j)) (< (select y j) 2))))
                          (=>
                            (and (<= (h_width h) i) (< i (h_width hqtqt)))
                            (= (select (select (select (h_basis_ket hqtqt) x) y) i) (select (select (select 
                            (h_basis_ket
                              hqt) (fc551 h x)) (fc552 h y)) (- i (h_width h)))))))))
                  (correct_path_sum_ (parallel c cqt) hqtqt))))))))))

;; sequence_ghost_pps
(declare-fun sequence_ghost_pps (circuit2
  circuit2
  pps
  pps
  pps) circuit2)

;; fc
(declare-fun fc553 (pps
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc554 (pps
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((h pps) (y (Array Int Int)) (k Int))
    (= (select (fc553 h y) k) (select y (+ k (h_range h))))))

;; fc'def
(assert
  (forall ((h pps) (y (Array Int Int)) (k Int))
    (= (select (fc554 h y) k) (select y (+ k (h_range h))))))

;; sequence_ghost_pps'def
(assert
  (forall ((c circuit2) (cqt circuit2) (h pps) (hqt pps) (hqtqt pps))
    (=>
      (correct_path_sum_ c h)
      (=>
        (correct_path_sum_ cqt hqt)
        (=>
          (= (width c) (width cqt))
          (=>
            (= (h_width hqtqt) (width c))
            (=>
              (= (h_range hqtqt) (+ (h_range h) (h_range hqt)))
              (=>
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (=>
                    (forall ((j Int))
                      (=>
                        (and (<= 0 j) (< j (h_width hqtqt)))
                        (and (<= 0 (select x j)) (< (select x j) 2))))
                    (=>
                      (forall ((j Int))
                        (=>
                          (and (<= 0 j) (< j (h_range hqtqt)))
                          (and (<= 0 (select y j)) (< (select y j) 2))))
                      (= (tb2t84
                           (infix_at
                             angle1
                             (infix_mngt int int)
                             (infix_at
                               (infix_mngt (infix_mngt int int) angle1)
                               (infix_mngt int int)
                               (t2tb118 (h_angle hqtqt))
                               (t2tb7 x))
                             (t2tb7 y))) (ang_add
                                           (tb2t84
                                             (infix_at
                                               angle1
                                               (infix_mngt int int)
                                               (infix_at
                                                 (infix_mngt
                                                   (infix_mngt int int)
                                                   angle1)
                                                 (infix_mngt int int)
                                                 (t2tb118 (h_angle h))
                                                 (t2tb7 x))
                                               (t2tb7 y)))
                                           (tb2t84
                                             (infix_at
                                               angle1
                                               (infix_mngt int int)
                                               (infix_at
                                                 (infix_mngt
                                                   (infix_mngt int int)
                                                   angle1)
                                                 (infix_mngt int int)
                                                 (t2tb118 (h_angle hqt))
                                                 (t2tb7
                                                   (select (select (h_basis_ket
                                                                    h) x) y)))
                                               (t2tb7 (fc553 h y)))))))))
                (=>
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (forall ((i Int))
                      (=>
                        (forall ((j Int))
                          (=>
                            (and (<= 0 j) (< j (h_width hqtqt)))
                            (and (<= 0 (select x j)) (< (select x j) 2))))
                        (=>
                          (forall ((j Int))
                            (=>
                              (and (<= 0 j) (< j (h_range hqtqt)))
                              (and (<= 0 (select y j)) (< (select y j) 2))))
                          (=>
                            (and (<= 0 i) (< i (h_width hqtqt)))
                            (= (select (select (select (h_basis_ket hqtqt) x) y) i) (select (select (select 
                            (h_basis_ket
                              hqt) (select (select (h_basis_ket h) x) y)) 
                            (fc554
                              h
                              y)) i)))))))
                  (= (sequence_ghost_pps c cqt h hqt hqtqt) (sequence c cqt)))))))))))

;; fc
(declare-fun fc555 (pps
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc556 (pps
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((h pps) (y (Array Int Int)) (k Int))
    (= (select (fc555 h y) k) (select y (+ k (h_range h))))))

;; fc'def
(assert
  (forall ((h pps) (y (Array Int Int)) (k Int))
    (= (select (fc556 h y) k) (select y (+ k (h_range h))))))

;; sequence_ghost_pps'spec
(assert
  (forall ((c circuit2) (cqt circuit2) (h pps) (hqt pps) (hqtqt pps))
    (=>
      (correct_path_sum_ c h)
      (=>
        (correct_path_sum_ cqt hqt)
        (=>
          (= (width c) (width cqt))
          (=>
            (= (h_width hqtqt) (width c))
            (=>
              (= (h_range hqtqt) (+ (h_range h) (h_range hqt)))
              (=>
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (=>
                    (forall ((j Int))
                      (=>
                        (and (<= 0 j) (< j (h_width hqtqt)))
                        (and (<= 0 (select x j)) (< (select x j) 2))))
                    (=>
                      (forall ((j Int))
                        (=>
                          (and (<= 0 j) (< j (h_range hqtqt)))
                          (and (<= 0 (select y j)) (< (select y j) 2))))
                      (= (tb2t84
                           (infix_at
                             angle1
                             (infix_mngt int int)
                             (infix_at
                               (infix_mngt (infix_mngt int int) angle1)
                               (infix_mngt int int)
                               (t2tb118 (h_angle hqtqt))
                               (t2tb7 x))
                             (t2tb7 y))) (ang_add
                                           (tb2t84
                                             (infix_at
                                               angle1
                                               (infix_mngt int int)
                                               (infix_at
                                                 (infix_mngt
                                                   (infix_mngt int int)
                                                   angle1)
                                                 (infix_mngt int int)
                                                 (t2tb118 (h_angle h))
                                                 (t2tb7 x))
                                               (t2tb7 y)))
                                           (tb2t84
                                             (infix_at
                                               angle1
                                               (infix_mngt int int)
                                               (infix_at
                                                 (infix_mngt
                                                   (infix_mngt int int)
                                                   angle1)
                                                 (infix_mngt int int)
                                                 (t2tb118 (h_angle hqt))
                                                 (t2tb7
                                                   (select (select (h_basis_ket
                                                                    h) x) y)))
                                               (t2tb7 (fc555 h y)))))))))
                (=>
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (forall ((i Int))
                      (=>
                        (forall ((j Int))
                          (=>
                            (and (<= 0 j) (< j (h_width hqtqt)))
                            (and (<= 0 (select x j)) (< (select x j) 2))))
                        (=>
                          (forall ((j Int))
                            (=>
                              (and (<= 0 j) (< j (h_range hqtqt)))
                              (and (<= 0 (select y j)) (< (select y j) 2))))
                          (=>
                            (and (<= 0 i) (< i (h_width hqtqt)))
                            (= (select (select (select (h_basis_ket hqtqt) x) y) i) (select (select (select 
                            (h_basis_ket
                              hqt) (select (select (h_basis_ket h) x) y)) 
                            (fc556
                              h
                              y)) i)))))))
                  (and
                    (= (width (sequence_ghost_pps c cqt h hqt hqtqt)) 
                    (width
                      c))
                    (and
                      (= (size (sequence_ghost_pps c cqt h hqt hqtqt)) (+ 
                      (size
                        c) (size cqt)))
                      (and
                        (= (ancillas (sequence_ghost_pps c cqt h hqt hqtqt)) 
                        (max
                          (ancillas c)
                          (ancillas cqt)))
                        (and
                          (correct_path_sum_
                            (sequence_ghost_pps c cqt h hqt hqtqt)
                            hqtqt)
                          (= (sequence_ghost_pps c cqt h hqt hqtqt) (sequence
                                                                    c
                                                                    cqt)))))))))))))))

;; parallel_ghost_pps
(declare-fun parallel_ghost_pps (circuit2
  circuit2
  pps
  pps
  pps) circuit2)

;; fc
(declare-fun fc557 (pps
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc558 (pps
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc559 (pps
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc560 (pps
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((h pps) (x (Array Int Int)) (k Int))
    (= (select (fc557 h x) k) (select x (+ k (h_width h))))))

;; fc'def
(assert
  (forall ((h pps) (y (Array Int Int)) (k Int))
    (= (select (fc558 h y) k) (select y (+ k (h_range h))))))

;; fc'def
(assert
  (forall ((h pps) (x (Array Int Int)) (k Int))
    (= (select (fc559 h x) k) (select x (+ k (h_width h))))))

;; fc'def
(assert
  (forall ((h pps) (y (Array Int Int)) (k Int))
    (= (select (fc560 h y) k) (select y (+ k (h_range h))))))

;; parallel_ghost_pps'def
(assert
  (forall ((c circuit2) (cqt circuit2) (h pps) (hqt pps) (hqtqt pps))
    (=>
      (correct_path_sum_ c h)
      (=>
        (correct_path_sum_ cqt hqt)
        (=>
          (= (h_width hqtqt) (+ (width c) (width cqt)))
          (=>
            (= (h_range hqtqt) (+ (h_range h) (h_range hqt)))
            (=>
              (forall ((x (Array Int Int)) (y (Array Int Int)))
                (=>
                  (forall ((j Int))
                    (=>
                      (and (<= 0 j) (< j (h_width hqtqt)))
                      (and (<= 0 (select x j)) (< (select x j) 2))))
                  (=>
                    (forall ((j Int))
                      (=>
                        (and (<= 0 j) (< j (h_range hqtqt)))
                        (and (<= 0 (select y j)) (< (select y j) 2))))
                    (= (tb2t84
                         (infix_at
                           angle1
                           (infix_mngt int int)
                           (infix_at
                             (infix_mngt (infix_mngt int int) angle1)
                             (infix_mngt int int)
                             (t2tb118 (h_angle hqtqt))
                             (t2tb7 x))
                           (t2tb7 y))) (ang_add
                                         (tb2t84
                                           (infix_at
                                             angle1
                                             (infix_mngt int int)
                                             (infix_at
                                               (infix_mngt
                                                 (infix_mngt int int)
                                                 angle1)
                                               (infix_mngt int int)
                                               (t2tb118 (h_angle h))
                                               (t2tb7 x))
                                             (t2tb7 y)))
                                         (tb2t84
                                           (infix_at
                                             angle1
                                             (infix_mngt int int)
                                             (infix_at
                                               (infix_mngt
                                                 (infix_mngt int int)
                                                 angle1)
                                               (infix_mngt int int)
                                               (t2tb118 (h_angle hqt))
                                               (t2tb7 (fc557 h x)))
                                             (t2tb7 (fc558 h y)))))))))
              (=>
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (forall ((i Int))
                    (=>
                      (forall ((j Int))
                        (=>
                          (and (<= 0 j) (< j (h_width hqtqt)))
                          (and (<= 0 (select x j)) (< (select x j) 2))))
                      (=>
                        (forall ((j Int))
                          (=>
                            (and (<= 0 j) (< j (h_range hqtqt)))
                            (and (<= 0 (select y j)) (< (select y j) 2))))
                        (=>
                          (and (<= 0 i) (< i (h_width h)))
                          (= (select (select (select (h_basis_ket hqtqt) x) y) i) (select (select (select 
                          (h_basis_ket
                            h) x) y) i)))))))
                (=>
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (forall ((i Int))
                      (=>
                        (forall ((j Int))
                          (=>
                            (and (<= 0 j) (< j (h_width hqtqt)))
                            (and (<= 0 (select x j)) (< (select x j) 2))))
                        (=>
                          (forall ((j Int))
                            (=>
                              (and (<= 0 j) (< j (h_range hqtqt)))
                              (and (<= 0 (select y j)) (< (select y j) 2))))
                          (=>
                            (and (<= (h_width h) i) (< i (h_width hqtqt)))
                            (= (select (select (select (h_basis_ket hqtqt) x) y) i) (select (select (select 
                            (h_basis_ket
                              hqt) (fc559 h x)) (fc560 h y)) (- i (h_width h)))))))))
                  (= (parallel_ghost_pps c cqt h hqt hqtqt) (parallel c cqt)))))))))))

;; fc
(declare-fun fc561 (pps
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc562 (pps
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc563 (pps
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc564 (pps
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((h pps) (x (Array Int Int)) (k Int))
    (= (select (fc561 h x) k) (select x (+ k (h_width h))))))

;; fc'def
(assert
  (forall ((h pps) (y (Array Int Int)) (k Int))
    (= (select (fc562 h y) k) (select y (+ k (h_range h))))))

;; fc'def
(assert
  (forall ((h pps) (x (Array Int Int)) (k Int))
    (= (select (fc563 h x) k) (select x (+ k (h_width h))))))

;; fc'def
(assert
  (forall ((h pps) (y (Array Int Int)) (k Int))
    (= (select (fc564 h y) k) (select y (+ k (h_range h))))))

;; parallel_ghost_pps'spec
(assert
  (forall ((c circuit2) (cqt circuit2) (h pps) (hqt pps) (hqtqt pps))
    (=>
      (correct_path_sum_ c h)
      (=>
        (correct_path_sum_ cqt hqt)
        (=>
          (= (h_width hqtqt) (+ (width c) (width cqt)))
          (=>
            (= (h_range hqtqt) (+ (h_range h) (h_range hqt)))
            (=>
              (forall ((x (Array Int Int)) (y (Array Int Int)))
                (=>
                  (forall ((j Int))
                    (=>
                      (and (<= 0 j) (< j (h_width hqtqt)))
                      (and (<= 0 (select x j)) (< (select x j) 2))))
                  (=>
                    (forall ((j Int))
                      (=>
                        (and (<= 0 j) (< j (h_range hqtqt)))
                        (and (<= 0 (select y j)) (< (select y j) 2))))
                    (= (tb2t84
                         (infix_at
                           angle1
                           (infix_mngt int int)
                           (infix_at
                             (infix_mngt (infix_mngt int int) angle1)
                             (infix_mngt int int)
                             (t2tb118 (h_angle hqtqt))
                             (t2tb7 x))
                           (t2tb7 y))) (ang_add
                                         (tb2t84
                                           (infix_at
                                             angle1
                                             (infix_mngt int int)
                                             (infix_at
                                               (infix_mngt
                                                 (infix_mngt int int)
                                                 angle1)
                                               (infix_mngt int int)
                                               (t2tb118 (h_angle h))
                                               (t2tb7 x))
                                             (t2tb7 y)))
                                         (tb2t84
                                           (infix_at
                                             angle1
                                             (infix_mngt int int)
                                             (infix_at
                                               (infix_mngt
                                                 (infix_mngt int int)
                                                 angle1)
                                               (infix_mngt int int)
                                               (t2tb118 (h_angle hqt))
                                               (t2tb7 (fc561 h x)))
                                             (t2tb7 (fc562 h y)))))))))
              (=>
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (forall ((i Int))
                    (=>
                      (forall ((j Int))
                        (=>
                          (and (<= 0 j) (< j (h_width hqtqt)))
                          (and (<= 0 (select x j)) (< (select x j) 2))))
                      (=>
                        (forall ((j Int))
                          (=>
                            (and (<= 0 j) (< j (h_range hqtqt)))
                            (and (<= 0 (select y j)) (< (select y j) 2))))
                        (=>
                          (and (<= 0 i) (< i (h_width h)))
                          (= (select (select (select (h_basis_ket hqtqt) x) y) i) (select (select (select 
                          (h_basis_ket
                            h) x) y) i)))))))
                (=>
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (forall ((i Int))
                      (=>
                        (forall ((j Int))
                          (=>
                            (and (<= 0 j) (< j (h_width hqtqt)))
                            (and (<= 0 (select x j)) (< (select x j) 2))))
                        (=>
                          (forall ((j Int))
                            (=>
                              (and (<= 0 j) (< j (h_range hqtqt)))
                              (and (<= 0 (select y j)) (< (select y j) 2))))
                          (=>
                            (and (<= (h_width h) i) (< i (h_width hqtqt)))
                            (= (select (select (select (h_basis_ket hqtqt) x) y) i) (select (select (select 
                            (h_basis_ket
                              hqt) (fc563 h x)) (fc564 h y)) (- i (h_width h)))))))))
                  (and
                    (correct_path_sum_
                      (parallel_ghost_pps c cqt h hqt hqtqt)
                      hqtqt)
                    (and
                      (= (width (parallel_ghost_pps c cqt h hqt hqtqt)) (+ 
                      (width
                        c) (width cqt)))
                      (and
                        (= (size (parallel_ghost_pps c cqt h hqt hqtqt)) (+ 
                        (size
                          c) (size cqt)))
                        (and
                          (= (ancillas
                               (parallel_ghost_pps c cqt h hqt hqtqt)) (+ 
                          (ancillas
                            c) (ancillas cqt)))
                          (= (parallel_ghost_pps c cqt h hqt hqtqt) (parallel
                                                                    c
                                                                    cqt)))))))))))))))

;; fc
(declare-fun fc565 (circuit2
  Int
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc566 (circuit2
  Int
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((c circuit2) (i Int) (x (Array Int Int)) (k Int))
    (= (select (fc565 c i x) k) (ite (< k (- (width c) i)) (select x k) 0))))

;; fc'def
(assert
  (forall ((c circuit2) (i Int) (x (Array Int Int)) (k Int))
    (= (select (fc566 c i x) k) (ite (< k (- (width c) i)) (select x k) 0))))

;; correct_ancilla
(assert
  (forall ((c circuit2) (h pps) (hqt pps) (i Int))
    (=>
      (<= 1 i)
      (=>
        (<= (+ i 1) (width c))
        (=>
          (correct_path_sum_ c h)
          (=>
            (exists ((path_sem_target (Array (matrix complex) (matrix complex))))
              (forall ((x (matrix complex)))
                (=>
                  (is_a_ket_l x (- (width c) i))
                  (= (path_sem c (kronecker x (ket i 0))) (kronecker
                                                            (tb2t65
                                                              (infix_at
                                                                (matrix1
                                                                  complex1)
                                                                (matrix1
                                                                  complex1)
                                                                (t2tb66
                                                                  path_sem_target)
                                                                (t2tb65 x)))
                                                            (ket i 0))))))
            (=>
              (= (h_width hqt) (- (width c) i))
              (=>
                (= (h_range hqt) (h_range h))
                (=>
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (forall ((ii Int))
                      (=>
                        (forall ((j Int))
                          (=>
                            (and (<= 0 j) (< j (h_width hqt)))
                            (and (<= 0 (select x j)) (< (select x j) 2))))
                        (=>
                          (forall ((j Int))
                            (=>
                              (and (<= 0 j) (< j (h_range hqt)))
                              (and (<= 0 (select y j)) (< (select y j) 2))))
                          (= (select (select (select (h_basis_ket hqt) x) y) ii) (select (select (select 
                          (h_basis_ket
                            h) (fc565 c i x)) y) ii))))))
                  (=>
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (= (tb2t84
                           (infix_at
                             angle1
                             (infix_mngt int int)
                             (infix_at
                               (infix_mngt (infix_mngt int int) angle1)
                               (infix_mngt int int)
                               (t2tb118 (h_angle hqt))
                               (t2tb7 x))
                             (t2tb7 y))) (tb2t84
                                           (infix_at
                                             angle1
                                             (infix_mngt int int)
                                             (infix_at
                                               (infix_mngt
                                                 (infix_mngt int int)
                                                 angle1)
                                               (infix_mngt int int)
                                               (t2tb118 (h_angle h))
                                               (t2tb7 (fc566 c i x)))
                                             (t2tb7 y)))))
                    (correct_path_sum_ (ancilla c i) hqt)))))))))))

;; set_correct_main_path_sum
(assert
  (forall ((c circuit2) (h pps))
    (=>
      (= (h_width h) (width c))
      (=>
        (= (h_range h) (range c))
        (=>
          (forall ((x bitvec) (y bitvec))
            (=>
              (= (length x) (width c))
              (=>
                (= (length y) (range c))
                (= (tb2t84
                     (infix_at
                       angle1
                       (infix_mngt int int)
                       (infix_at
                         (infix_mngt (infix_mngt int int) angle1)
                         (infix_mngt int int)
                         (t2tb118 (h_angle h))
                         (t2tb7 (value x)))
                       (t2tb7 (value y)))) (ang_ind c (value x) (value y))))))
          (=>
            (forall ((x bitvec) (y bitvec))
              (forall ((i Int))
                (=>
                  (and (<= 0 i) (< i (width c)))
                  (=>
                    (= (length x) (width c))
                    (=>
                      (= (length y) (range c))
                      (= (select (select (select (h_basis_ket h) (value x)) 
                      (value
                        y)) i) (basis_ket c (value x) (value y) i)))))))
            (correct_path_sum_ c h)))))))

;; set_correct_circ_to_pps
(assert (forall ((c circuit2)) (correct_path_sum_ c (circ_to_pps c))))

;; circuit_equiv
(declare-fun circuit_equiv (circuit2
  circuit2) Bool)

;; circuit_equiv'def
(assert
  (forall ((c circuit2) (cqt circuit2))
    (=
      (circuit_equiv c cqt)
      (and
        (= (width c) (width cqt))
        (forall ((x bitvec))
          (=>
            (= (length x) (width c))
            (= (path_sem c (bv_to_ket x)) (path_sem cqt (bv_to_ket x)))))))))

;; path_to_mat_sem
(assert
  (forall ((c circuit2) (x (matrix complex)) (y (matrix complex)))
    (=>
      (is_a_ket_l x (width c))
      (=> (= (path_sem c x) y) (= (mat_mult (mat_sem c) x) y)))))

;; path_to_mat_sem_rev
(assert
  (forall ((c circuit2) (x (matrix complex)) (y (matrix complex)))
    (=>
      (is_a_ket_l x (width c))
      (=> (= (path_sem c x) y) (= y (mat_mult (mat_sem c) x))))))

;; mat_to_path_sem
(assert
  (forall ((c circuit2) (x (matrix complex)) (y (matrix complex)))
    (=>
      (is_a_ket_l x (width c))
      (=> (= (mat_mult (mat_sem c) x) y) (= (path_sem c x) y)))))

;; path_to_mat_sem_exp
(assert
  (forall ((c circuit2) (x (matrix complex)))
    (=> (is_a_ket_l x (width c)) (= (path_sem c x) (mat_mult (mat_sem c) x)))))

;; mat_to_path_sem_exp
(assert
  (forall ((c circuit2) (x (matrix complex)))
    (=> (is_a_ket_l x (width c)) (= (mat_mult (mat_sem c) x) (path_sem c x)))))

;; set_path_sem_by_correct_pps
(assert
  (forall ((c circuit2) (h pps) (x (matrix complex)))
    (=>
      (correct_path_sum_ c h)
      (=>
        (is_a_ket_l x (width c))
        (=> (is_a_ket_basis_elt x) (= (path_sem c x) (pps_apply h x)))))))

;; fc
(declare-fun fc567 (circuit2
  bitvec) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((c circuit2) (x bitvec) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc567 c x))
           (t2tb77 y))) (infix_asdtdt
                          (ang_exp (ang_ind c (value x) (value y)))
                          (bv_to_ket
                            (make_bv
                              (select (select (tb2t3
                                                (infix_at
                                                  (infix_mngt
                                                    (infix_mngt int int)
                                                    (infix_mngt
                                                      (infix_mngt int int)
                                                      (infix_mngt int int)))
                                                  circuit3
                                                  (t2tb124 basis_ket_closure)
                                                  (t2tb123 c))) (value x)) 
                              (value
                                y))
                              (width c)))))))

;; set_path_sem_by_main_pps
(assert
  (forall ((c circuit2) (x bitvec))
    (=>
      (= (length x) (width c))
      (= (path_sem c (bv_to_ket x)) (infix_asdtdt
                                      (pow_inv_sqrt_2 (range c))
                                      (ket_sum_l
                                        bitvec1
                                        (t2tb79 (n_bvs (range c)))
                                        (t2tb80 (fc567 c x))
                                        (width c)))))))

;; set_path_sem_by_correct_pps_gen
(assert
  (forall ((c circuit2) (h pps))
    (=>
      (correct_path_sum_ c h)
      (forall ((x (matrix complex)))
        (=>
          (is_a_ket_l x (width c))
          (=> (is_a_ket_basis_elt x) (= (path_sem c x) (pps_apply h x))))))))

;; set_correct_path_sum_sim
(assert
  (forall ((c circuit2) (h pps) (hqt pps))
    (=>
      (= (h_range h) (h_range hqt))
      (=>
        (= (h_width h) (h_width hqt))
        (=>
          (forall ((x bitvec) (y bitvec))
            (=>
              (= (length x) (width c))
              (=>
                (= (length y) (h_range h))
                (= (tb2t84
                     (infix_at
                       angle1
                       (infix_mngt int int)
                       (infix_at
                         (infix_mngt (infix_mngt int int) angle1)
                         (infix_mngt int int)
                         (t2tb118 (h_angle h))
                         (t2tb7 (value x)))
                       (t2tb7 (value y)))) (tb2t84
                                             (infix_at
                                               angle1
                                               (infix_mngt int int)
                                               (infix_at
                                                 (infix_mngt
                                                   (infix_mngt int int)
                                                   angle1)
                                                 (infix_mngt int int)
                                                 (t2tb118 (h_angle hqt))
                                                 (t2tb7 (value x)))
                                               (t2tb7 (value y))))))))
          (=>
            (forall ((x bitvec) (y bitvec))
              (forall ((i Int))
                (=>
                  (= (length x) (width c))
                  (=>
                    (= (length y) (h_range h))
                    (=>
                      (and (<= 0 i) (< i (width c)))
                      (= (select (select (select (h_basis_ket h) (value x)) 
                      (value
                        y)) i) (select (select (select (h_basis_ket hqt) 
                      (value
                        x)) (value y)) i)))))))
            (=> (correct_path_sum_ c h) (correct_path_sum_ c hqt))))))))

;; set_correct_path_sum_by_main_sim
(assert
  (forall ((c circuit2) (h pps))
    (=>
      (= (h_range h) (range c))
      (=>
        (= (h_width h) (width c))
        (=>
          (forall ((x bitvec) (y bitvec))
            (=>
              (= (length x) (width c))
              (=>
                (= (length y) (h_range h))
                (= (tb2t84
                     (infix_at
                       angle1
                       (infix_mngt int int)
                       (infix_at
                         (infix_mngt (infix_mngt int int) angle1)
                         (infix_mngt int int)
                         (t2tb118 (h_angle h))
                         (t2tb7 (value x)))
                       (t2tb7 (value y)))) (ang_ind c (value x) (value y))))))
          (=>
            (forall ((x bitvec) (y bitvec))
              (forall ((i Int))
                (=>
                  (= (length x) (width c))
                  (=>
                    (= (length y) (h_range h))
                    (=>
                      (and (<= 0 i) (< i (width c)))
                      (= (select (select (select (h_basis_ket h) (value x)) 
                      (value
                        y)) i) (basis_ket c (value x) (value y) i)))))))
            (correct_path_sum_ c h)))))))

;; path_sum_equiv
(assert
  (forall ((c circuit2) (h pps) (hqt pps))
    (=>
      (<= 0 (h_range h))
      (=>
        (= (h_range h) (h_range hqt))
        (=>
          (= (h_width h) (h_width hqt))
          (=>
            (forall ((x bitvec) (y bitvec))
              (=>
                (= (length x) (width c))
                (=>
                  (= (length y) (h_range h))
                  (= (tb2t84
                       (infix_at
                         angle1
                         (infix_mngt int int)
                         (infix_at
                           (infix_mngt (infix_mngt int int) angle1)
                           (infix_mngt int int)
                           (t2tb118 (h_angle h))
                           (t2tb7 (value x)))
                         (t2tb7 (value y)))) (tb2t84
                                               (infix_at
                                                 angle1
                                                 (infix_mngt int int)
                                                 (infix_at
                                                   (infix_mngt
                                                     (infix_mngt int int)
                                                     angle1)
                                                   (infix_mngt int int)
                                                   (t2tb118 (h_angle hqt))
                                                   (t2tb7 (value x)))
                                                 (t2tb7 (value y))))))))
            (=>
              (forall ((x bitvec) (y bitvec))
                (forall ((i Int))
                  (=>
                    (and (<= 0 i) (< i (width c)))
                    (=>
                      (= (length x) (width c))
                      (=>
                        (= (length y) (h_range h))
                        (= (select (select (select (h_basis_ket h) (value x)) 
                        (value
                          y)) i) (select (select (select (h_basis_ket hqt) 
                        (value
                          x)) (value y)) i)))))))
              (= (correct_path_sum_ c h) (correct_path_sum_ c hqt)))))))))

;; path_sum_pps_apply_equiv
(assert
  (forall ((c circuit2) (h pps) (hqt pps))
    (=>
      (pps_apply_equiv h hqt)
      (=> (correct_path_sum_ c h) (correct_path_sum_ c hqt)))))

;; path_sum_pps_apply_equiv_ref
(assert
  (forall ((c circuit2) (h pps))
    (=> (pps_apply_equiv h (circ_to_pps c)) (correct_path_sum_ c h))))

;; path_sum_pps_apply_equiv_rev
(assert
  (forall ((c circuit2) (h pps) (hqt pps))
    (=>
      (correct_path_sum_ c h)
      (=> (correct_path_sum_ c hqt) (pps_apply_equiv h hqt)))))

;; path_sum_pps_apply_equiv_ref_rev
(assert
  (forall ((c circuit2) (h pps))
    (=> (correct_path_sum_ c h) (pps_apply_equiv h (circ_to_pps c)))))

;; correct_to_path_sem
(assert
  (forall ((c circuit2) (h pps))
    (=>
      (correct_path_sum_ c h)
      (forall ((x (matrix complex)))
        (=> (is_a_ket_l x (width c)) (= (pps_apply h x) (path_sem c x)))))))

;; correct_to_mat_sem
(assert
  (forall ((c circuit2) (h pps))
    (=>
      (correct_path_sum_ c h)
      (forall ((x (matrix complex)))
        (=>
          (is_a_ket_l x (width c))
          (= (pps_apply h x) (mat_mult (mat_sem c) x)))))))

;; swap_invol_basis
(assert
  (forall ((x (matrix complex)))
    (=>
      (is_a_ket_l x 2)
      (=> (is_a_ket_basis_elt x) (= (path_sem swap (path_sem swap x)) x)))))

;; cnot_invol_basis
(assert
  (forall ((x (matrix complex)))
    (=>
      (is_a_ket_l x 2)
      (=> (is_a_ket_basis_elt x) (= (path_sem cnot (path_sem cnot x)) x)))))

;; swap_invol
(assert
  (forall ((x (matrix complex)))
    (=> (is_a_ket_l x 2) (= (path_sem swap (path_sem swap x)) x))))

;; cnot_invol
(assert
  (forall ((x (matrix complex)))
    (=> (is_a_ket_l x 2) (= (path_sem cnot (path_sem cnot x)) x))))

;; mat_sem_to_correct
(assert
  (forall ((c circuit2) (h pps))
    (=>
      (= (h_width h) (width c))
      (=>
        (forall ((x (matrix complex)))
          (=>
            (is_a_ket_l x (width c))
            (=>
              (is_a_ket_basis_elt x)
              (= (pps_apply h x) (mat_mult (mat_sem c) x)))))
        (correct_path_sum_ c h)))))

;; path_sem_to_correct
(assert
  (forall ((c circuit2) (h pps))
    (=>
      (= (h_width h) (width c))
      (=>
        (forall ((x (matrix complex)))
          (=>
            (is_a_ket_l x (width c))
            (=> (is_a_ket_basis_elt x) (= (pps_apply h x) (path_sem c x)))))
        (correct_path_sum_ c h)))))

;; correct_main_path_sum
(assert (forall ((c circuit2)) (correct_path_sum_ c (circ_to_pps c))))

;; correct_path_sum_bv
(declare-fun correct_path_sum_bv (circuit2
  Int
  (Array bitvec (Array bitvec bitvec))
  (Array bitvec (Array bitvec angle))) Bool)

;; correct_path_sum_bv'def
(assert
  (forall ((c circuit2) (r Int) (k (Array bitvec (Array bitvec bitvec))) (a (Array bitvec (Array bitvec angle))))
    (=>
      (<= 0 r)
      (=>
        (forall ((x bitvec) (y bitvec))
          (=>
            (= (length x) (width c))
            (=>
              (= (length y) r)
              (= (length
                   (tb2t77
                     (infix_at
                       bitvec1
                       bitvec1
                       (infix_at
                         (infix_mngt bitvec1 bitvec1)
                         bitvec1
                         (t2tb119 k)
                         (t2tb77 x))
                       (t2tb77 y)))) (width c)))))
        (=
          (correct_path_sum_bv c r k a)
          (correct_path_sum_ c (build_pps_bv (width c) r k a)))))))

;; correct_path_sum_to_bv
(assert
  (forall ((c circuit2) (r Int) (k (Array bitvec (Array bitvec bitvec))) (a (Array bitvec (Array bitvec angle))))
    (=>
      (<= 0 r)
      (=>
        (forall ((x bitvec) (y bitvec))
          (=>
            (= (length x) (width c))
            (=>
              (= (length y) r)
              (= (length
                   (tb2t77
                     (infix_at
                       bitvec1
                       bitvec1
                       (infix_at
                         (infix_mngt bitvec1 bitvec1)
                         bitvec1
                         (t2tb119 k)
                         (t2tb77 x))
                       (t2tb77 y)))) (width c)))))
        (=>
          (correct_path_sum_ c (build_pps_bv (width c) r k a))
          (correct_path_sum_bv c r k a))))))

;; correct_path_sum_by_bv
(assert
  (forall ((c circuit2) (r Int) (k (Array bitvec (Array bitvec bitvec))) (a (Array bitvec (Array bitvec angle))))
    (=>
      (forall ((x bitvec) (y bitvec))
        (=>
          (= (length x) (width c))
          (=>
            (= (length y) r)
            (= (length
                 (tb2t77
                   (infix_at
                     bitvec1
                     bitvec1
                     (infix_at
                       (infix_mngt bitvec1 bitvec1)
                       bitvec1
                       (t2tb119 k)
                       (t2tb77 x))
                     (t2tb77 y)))) (width c)))))
      (=>
        (<= 0 r)
        (=>
          (correct_path_sum_bv c r k a)
          (correct_path_sum_ c (build_pps_bv (width c) r k a)))))))

;; correct_path_sum_bv_main
(assert
  (forall ((c circuit2) (r Int) (k (Array bitvec (Array bitvec bitvec))) (a (Array bitvec (Array bitvec angle))))
    (=>
      (<= 0 r)
      (=>
        (forall ((x bitvec) (y bitvec))
          (=>
            (= (length x) (width c))
            (=>
              (= (length y) r)
              (= (length
                   (tb2t77
                     (infix_at
                       bitvec1
                       bitvec1
                       (infix_at
                         (infix_mngt bitvec1 bitvec1)
                         bitvec1
                         (t2tb119 k)
                         (t2tb77 x))
                       (t2tb77 y)))) (width c)))))
        (=>
          (forall ((x bitvec) (y bitvec))
            (forall ((i Int))
              (=>
                (= (length x) (width c))
                (=>
                  (= (length y) r)
                  (=>
                    (and (<= 0 i) (< i (width c)))
                    (= (select (value
                                 (tb2t77
                                   (infix_at
                                     bitvec1
                                     bitvec1
                                     (infix_at
                                       (infix_mngt bitvec1 bitvec1)
                                       bitvec1
                                       (t2tb119 k)
                                       (t2tb77 x))
                                     (t2tb77 y)))) i) (basis_ket
                                                        c
                                                        (value x)
                                                        (value y)
                                                        i)))))))
          (=>
            (forall ((x bitvec) (y bitvec))
              (=>
                (= (length x) (width c))
                (=>
                  (= (length y) r)
                  (= (tb2t84
                       (infix_at
                         angle1
                         bitvec1
                         (infix_at
                           (infix_mngt bitvec1 angle1)
                           bitvec1
                           (t2tb121 a)
                           (t2tb77 x))
                         (t2tb77 y))) (ang_ind c (value x) (value y))))))
            (=> (= r (range c)) (correct_path_sum_bv c r k a))))))))

;; fc
(declare-fun fc568 ((Array bitvec (Array bitvec bitvec))
  (Array bitvec (Array bitvec angle))
  bitvec) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((k (Array bitvec (Array bitvec bitvec))) (a (Array bitvec (Array bitvec angle))) (x bitvec) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc568 k a x))
           (t2tb77 y))) (infix_asdtdt
                          (ang_exp
                            (tb2t84
                              (infix_at
                                angle1
                                bitvec1
                                (infix_at
                                  (infix_mngt bitvec1 angle1)
                                  bitvec1
                                  (t2tb121 a)
                                  (t2tb77 x))
                                (t2tb77 y))))
                          (bv_to_ket
                            (tb2t77
                              (infix_at
                                bitvec1
                                bitvec1
                                (infix_at
                                  (infix_mngt bitvec1 bitvec1)
                                  bitvec1
                                  (t2tb119 k)
                                  (t2tb77 x))
                                (t2tb77 y))))))))

;; correct_path_sum_bv_apply
(assert
  (forall ((c circuit2) (r Int) (k (Array bitvec (Array bitvec bitvec))) (a (Array bitvec (Array bitvec angle))) (x bitvec))
    (=>
      (<= 0 r)
      (=>
        (forall ((x1 bitvec) (y bitvec))
          (=>
            (= (length x1) (width c))
            (=>
              (= (length y) r)
              (= (length
                   (tb2t77
                     (infix_at
                       bitvec1
                       bitvec1
                       (infix_at
                         (infix_mngt bitvec1 bitvec1)
                         bitvec1
                         (t2tb119 k)
                         (t2tb77 x1))
                       (t2tb77 y)))) (width c)))))
        (=>
          (= (length x) (width c))
          (=>
            (correct_path_sum_bv c r k a)
            (= (path_sem c (bv_to_ket x)) (infix_asdtdt
                                            (pow_inv_sqrt_2 r)
                                            (ket_sum_l
                                              bitvec1
                                              (t2tb79 (n_bvs r))
                                              (t2tb80 (fc568 k a x))
                                              (width c))))))))))

;; correct_path_sum_bv_sim
(assert
  (forall ((c circuit2) (r1 Int) (k1 (Array bitvec (Array bitvec bitvec))) (a1 (Array bitvec (Array bitvec angle))) (r2 Int) (k2 (Array bitvec (Array bitvec bitvec))) (a2 (Array bitvec (Array bitvec angle))))
    (=>
      (<= 0 r1)
      (=>
        (= r1 r2)
        (=>
          (forall ((x bitvec) (y bitvec))
            (=>
              (= (length x) (width c))
              (=>
                (= (length y) r1)
                (= (length
                     (tb2t77
                       (infix_at
                         bitvec1
                         bitvec1
                         (infix_at
                           (infix_mngt bitvec1 bitvec1)
                           bitvec1
                           (t2tb119 k1)
                           (t2tb77 x))
                         (t2tb77 y)))) (width c)))))
          (=>
            (forall ((x bitvec) (y bitvec))
              (=>
                (= (length x) (width c))
                (=>
                  (= (length y) r1)
                  (= (tb2t77
                       (infix_at
                         bitvec1
                         bitvec1
                         (infix_at
                           (infix_mngt bitvec1 bitvec1)
                           bitvec1
                           (t2tb119 k1)
                           (t2tb77 x))
                         (t2tb77 y))) (tb2t77
                                        (infix_at
                                          bitvec1
                                          bitvec1
                                          (infix_at
                                            (infix_mngt bitvec1 bitvec1)
                                            bitvec1
                                            (t2tb119 k2)
                                            (t2tb77 x))
                                          (t2tb77 y)))))))
            (=>
              (forall ((x bitvec) (y bitvec))
                (=>
                  (= (length x) (width c))
                  (=>
                    (= (length y) r1)
                    (= (tb2t84
                         (infix_at
                           angle1
                           bitvec1
                           (infix_at
                             (infix_mngt bitvec1 angle1)
                             bitvec1
                             (t2tb121 a1)
                             (t2tb77 x))
                           (t2tb77 y))) (tb2t84
                                          (infix_at
                                            angle1
                                            bitvec1
                                            (infix_at
                                              (infix_mngt bitvec1 angle1)
                                              bitvec1
                                              (t2tb121 a2)
                                              (t2tb77 x))
                                            (t2tb77 y)))))))
              (=>
                (correct_path_sum_bv c r1 k1 a1)
                (correct_path_sum_bv c r2 k2 a2)))))))))

;; ids
(declare-fun ids (Int) circuit2)

;; ids'def
(assert
  (forall ((n Int))
    (=>
      (<= 1 n)
      (ite (= n 1) (= (ids n) id) (= (ids n) (parallel (ids (- n 1)) id))))))

;; ids'spec
(assert
  (forall ((n Int))
    (=>
      (<= 1 n)
      (and
        (= (width (ids n)) n)
        (and
          (= (size (ids n)) 0)
          (and
            (= (ancillas (ids n)) 0)
            (and
              (= (range (ids n)) 0)
              (and
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (forall ((i Int))
                    (= (basis_ket (ids n) x y i) (select x i))))
                (and
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (= (ang_ind (ids n) x y) ang_zero))
                  (and
                    (forall ((x (matrix complex)))
                      (=>
                        (is_a_ket_l x n)
                        (=>
                          (is_a_ket_basis_elt x)
                          (= (path_sem (ids n) x) x))))
                    (forall ((x (matrix complex)))
                      (=> (is_a_ket_l x n) (= (path_sem (ids n) x) x)))))))))))))

;; place_zero
(declare-fun place_zero (circuit2
  Int) circuit2)

;; place_zero'def
(assert
  (forall ((c circuit2) (n Int))
    (=>
      (<= (width c) n)
      (ite (= n (width c))
        (= (place_zero c n) c)
        (= (place_zero c n) (parallel c (ids (- n (width c)))))))))

;; place_zero'spec
(assert
  (forall ((c circuit2) (n Int))
    (=>
      (<= (width c) n)
      (and
        (= (ancillas (place_zero c n)) (ancillas c))
        (and
          (= (size (place_zero c n)) (size c))
          (and
            (= (range (place_zero c n)) (range c))
            (and
              (= (width (place_zero c n)) n)
              (and
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (forall ((i Int))
                    (=>
                      (and (<= 0 i) (< i n))
                      (= (basis_ket (place_zero c n) x y i) (ite (and
                                                                   (<= 0 i)
                                                                   (< i 
                                                                   (width
                                                                    c)))
                                                              (basis_ket
                                                                c
                                                                x
                                                                y
                                                                i)
                                                              (select x i))))))
                (and
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (= (ang_ind (place_zero c n) x y) (ang_ind c x y)))
                  (= (place_zero c n) (ite (= n (width c))
                                        c
                                        (parallel c (ids (- n (width c)))))))))))))))

;; place
(declare-fun place (circuit2
  Int
  Int) circuit2)

;; place'def
(assert
  (forall ((c circuit2) (k Int) (n Int))
    (=>
      (<= 0 k)
      (=>
        (<= (+ (width c) k) n)
        (ite (= k 0)
          (= (place c k n) (place_zero c n))
          (= (place c k n) (parallel (ids k) (place_zero c (- n k)))))))))

;; fc
(declare-fun fc569 (Int
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc570 (Int
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((k Int) (x (Array Int Int)) (j Int))
    (= (select (fc569 k x) j) (select x (+ j k)))))

;; fc'def
(assert
  (forall ((k Int) (x (Array Int Int)) (j Int))
    (= (select (fc570 k x) j) (select x (+ j k)))))

;; place'spec
(assert
  (forall ((c circuit2) (k Int) (n Int))
    (=>
      (<= 0 k)
      (=>
        (<= (+ (width c) k) n)
        (and
          (= (ancillas (place c k n)) (ancillas c))
          (and
            (= (size (place c k n)) (size c))
            (and
              (= (range (place c k n)) (range c))
              (and
                (= (width (place c k n)) n)
                (and
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (forall ((i Int))
                      (=>
                        (and (<= 0 i) (< i n))
                        (= (basis_ket (place c k n) x y i) (ite (and
                                                                  (<= k i)
                                                                  (< i (+ k 
                                                                  (width
                                                                    c))))
                                                             (basis_ket
                                                               c
                                                               (fc569 k x)
                                                               y
                                                               (- i k))
                                                             (select x i))))))
                  (and
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (= (ang_ind (place c k n) x y) (ang_ind
                                                       c
                                                       (fc570 k x)
                                                       y)))
                    (= (place c k n) (ite (and (= k 0) (= n (+ k (width c))))
                                       c
                                       (ite (= k 0)
                                         (parallel
                                           c
                                           (ids (- (- n k) (width c))))
                                         (ite (= n (+ k (width c)))
                                           (parallel (ids k) c)
                                           (parallel
                                             (ids k)
                                             (parallel
                                               c
                                               (ids (- (- n k) (width c)))))))))))))))))))

;; ket_zero
(declare-fun ket_zero () (matrix complex))

;; ket_zero'def
(assert
  (and
    (is_a_ket_l ket_zero 0)
    (and
      (is_a_ket_basis_elt ket_zero)
      (and
        (forall ((i Int))
          (=> (= i 0) (= (tb2t (get complex1 (t2tb65 ket_zero) i 0)) c_one)))
        (and
          (= (rows complex1 (t2tb65 ket_zero)) 1)
          (= (columns complex1 (t2tb65 ket_zero)) 1))))))

;; get_ket_zero
(assert
  (forall ((x (matrix complex)))
    (=>
      (= x ket_zero)
      (and
        (is_a_ket_l x 0)
        (forall ((i Int))
          (=> (= i 0) (= (tb2t (get complex1 (t2tb65 x) i 0)) c_one)))))))

;; set_ket_zero
(assert
  (forall ((x (matrix complex)))
    (=>
      (= (rows complex1 (t2tb65 x)) 1)
      (=>
        (= (columns complex1 (t2tb65 x)) 1)
        (=> (= (tb2t (get complex1 (t2tb65 x) 0 0)) c_one) (= x ket_zero))))))

;; ket_to_bv_zero
(assert
  (forall ((x bitvec)) (=> (= (length x) 0) (= x (ket_to_bv ket_zero)))))

;; bv_to_ket_zero
(assert
  (forall ((x bitvec)) (=> (= (length x) 0) (= (bv_to_ket x) ket_zero))))

;; ket_zero_kron
(assert
  (forall ((x (matrix complex)) (y (matrix complex)))
    (=> (= x ket_zero) (= (kronecker x y) y))))

;; kron_ket_zero
(assert
  (forall ((x (matrix complex)) (y (matrix complex)))
    (=> (= x ket_zero) (= (kronecker y x) y))))

;; place_circ_to_pps
(assert
  (forall ((c circuit2) (k Int) (n Int))
    (=>
      (<= 0 k)
      (=>
        (<= (+ (width c) k) n)
        (correct_path_sum_ (place c k n) (pps_place (circ_to_pps c) k n))))))

;; pps_apply_equiv_by_circ
(assert
  (forall ((c circuit2) (h pps) (hqt pps))
    (=>
      (correct_path_sum_ c h)
      (=> (correct_path_sum_ c hqt) (pps_apply_equiv h hqt)))))

;; place_pps
(assert
  (forall ((c circuit2) (h pps) (k Int) (n Int))
    (=>
      (<= 0 k)
      (=>
        (<= (+ (width c) k) n)
        (=>
          (correct_path_sum_ c h)
          (correct_path_sum_ (place c k n) (pps_place h k n)))))))

;; place_kron
(assert
  (forall ((c circuit2) (k Int) (n Int) (x (matrix complex)) (y (matrix complex)) (yqt (matrix complex)) (z (matrix complex)))
    (=>
      (< 0 k)
      (=>
        (< (+ (width c) k) n)
        (=>
          (is_a_ket_l x k)
          (=>
            (is_a_ket_l y (width c))
            (=>
              (is_a_ket_l z (- (- n (width c)) k))
              (=>
                (= (path_sem c y) yqt)
                (= (path_sem (place c k n) (kronecker x (kronecker y z))) 
                (kronecker
                  x
                  (kronecker yqt z)))))))))))

;; place_kron_left
(assert
  (forall ((c circuit2) (n Int) (y (matrix complex)) (yqt (matrix complex)) (z (matrix complex)))
    (=>
      (< (width c) n)
      (=>
        (is_a_ket_l y (width c))
        (=>
          (is_a_ket_l z (- n (width c)))
          (=>
            (= (path_sem c y) yqt)
            (= (path_sem (place c 0 n) (kronecker y z)) (kronecker yqt z))))))))

;; place_kron_right
(assert
  (forall ((c circuit2) (k Int) (n Int))
    (=>
      (< 0 k)
      (=>
        (= n (+ (width c) k))
        (forall ((y (matrix complex)) (x (matrix complex)))
          (=>
            (is_a_ket_l x k)
            (=>
              (is_a_ket_l y (- n k))
              (= (path_sem (place c k n) (kronecker x y)) (kronecker
                                                            x
                                                            (path_sem c y))))))))))

;; place_kron_right_sem
(assert
  (forall ((c circuit2) (k Int) (n Int))
    (=>
      (< 0 k)
      (=>
        (= n (+ (width c) k))
        (forall ((y (matrix complex)) (x (matrix complex)) (z (matrix complex)))
          (=>
            (is_a_ket_l x k)
            (=>
              (is_a_ket_l y (- n k))
              (=>
                (sem c y z)
                (sem (place c k n) (kronecker x y) (kronecker x z))))))))))

;; place_zero_kron
(assert
  (forall ((c circuit2) (n Int) (x bitvec))
    (=>
      (<= (width c) n)
      (=>
        (= (length x) n)
        (= (path_sem (place_zero c n) (bv_to_ket x)) (ite (= n (width c))
                                                       (path_sem
                                                         c
                                                         (bv_to_ket x))
                                                       (kronecker
                                                         (path_sem
                                                           c
                                                           (bv_to_ket
                                                             (hpart
                                                               x
                                                               (width c))))
                                                         (bv_to_ket
                                                           (tpart
                                                             x
                                                             (width c))))))))))

;; place_kron_gen
(assert
  (forall ((c circuit2) (k Int) (n Int) (x bitvec))
    (=>
      (<= 0 k)
      (=>
        (<= (+ (width c) k) n)
        (=>
          (= (length x) n)
          (= (path_sem (place c k n) (bv_to_ket x)) (ite (= k 0)
                                                      (ite (= n (width c))
                                                        (path_sem
                                                          c
                                                          (bv_to_ket x))
                                                        (kronecker
                                                          (path_sem
                                                            c
                                                            (bv_to_ket
                                                              (hpart
                                                                x
                                                                (width c))))
                                                          (bv_to_ket
                                                            (tpart
                                                              x
                                                              (width c)))))
                                                      (ite (= n (+ k 
                                                        (width
                                                          c)))
                                                        (kronecker
                                                          (bv_to_ket
                                                            (hpart x k))
                                                          (path_sem
                                                            c
                                                            (bv_to_ket
                                                              (tpart x k))))
                                                        (kronecker
                                                          (bv_to_ket
                                                            (hpart x k))
                                                          (kronecker
                                                            (path_sem
                                                              c
                                                              (bv_to_ket
                                                                (htpart
                                                                  x
                                                                  k
                                                                  (width c))))
                                                            (bv_to_ket
                                                              (tpart
                                                                x
                                                                (+ (width c) k)))))))))))))

;; place_kronecker
(assert
  (forall ((c circuit2) (k Int) (n Int) (x bitvec))
    (=>
      (<= 0 k)
      (=>
        (<= (+ (width c) k) n)
        (=>
          (= (length x) n)
          (= (path_sem (place c k n) (bv_to_ket x)) (kronecker
                                                      (bv_to_ket (hpart x k))
                                                      (kronecker
                                                        (path_sem
                                                          c
                                                          (bv_to_ket
                                                            (htpart
                                                              x
                                                              k
                                                              (width c))))
                                                        (bv_to_ket
                                                          (tpart
                                                            x
                                                            (+ (width c) k)))))))))))

;; place_kron_gen_
(assert
  (forall ((c circuit2) (k Int) (n Int))
    (=>
      (< 0 k)
      (=>
        (< (+ (width c) k) n)
        (forall ((x (matrix complex)) (y (matrix complex)) (yqt (matrix complex)) (z (matrix complex)))
          (=>
            (is_a_ket_l x k)
            (=>
              (is_a_ket_l y (width c))
              (=>
                (is_a_ket_l z (- (- n (width c)) k))
                (=>
                  (sem c y yqt)
                  (sem
                    (place c k n)
                    (kronecker x (kronecker y z))
                    (kronecker x (kronecker yqt z))))))))))))

;; place_zero_place
(assert
  (forall ((c circuit2) (k Int) (n Int) (nqt Int) (x bitvec))
    (=>
      (<= 0 k)
      (=>
        (<= (+ (width c) k) n)
        (=>
          (<= n nqt)
          (=>
            (= (length x) nqt)
            (= (path_sem (place_zero (place c k n) nqt) (bv_to_ket x)) 
            (path_sem
              (place c k nqt)
              (bv_to_ket x)))))))))

;; place_place
(assert
  (forall ((c circuit2) (k Int) (kqt Int) (n Int) (nqt Int) (x bitvec))
    (=>
      (<= 0 k)
      (=>
        (<= (+ (width c) k) n)
        (=>
          (<= 0 kqt)
          (=>
            (<= (+ n kqt) nqt)
            (=>
              (= (length x) nqt)
              (= (path_sem (place (place c k n) kqt nqt) (bv_to_ket x)) 
              (path_sem
                (place c (+ k kqt) nqt)
                (bv_to_ket x))))))))))

;; fc
(declare-fun fc571 (Int
  bitvec) (Array Int Int))

;; fc
(declare-fun fc572 (Int
  bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((k Int) (x bitvec) (i Int))
    (= (select (fc571 k x) i) (select (value x) (+ i k)))))

;; fc'def
(assert
  (forall ((k Int) (y bitvec) (i Int))
    (= (select (fc572 k y) i) (select (value y) (+ i k)))))

;; place_get_ket
(assert
  (forall ((c circuit2) (k Int) (n Int) (x bitvec) (y bitvec))
    (=>
      (<= 0 k)
      (=>
        (<= (+ (width c) k) n)
        (=>
          (= (length x) n)
          (=>
            (= (length y) n)
            (=>
              (= (hpart x k) (hpart y k))
              (=>
                (= (tpart x (+ k (width c))) (tpart y (+ k (width c))))
                (= (tb2t
                     (get
                       complex1
                       (t2tb65 (path_sem (place c k n) (bv_to_ket x)))
                       (bv_to_int y)
                       0)) (tb2t
                             (get
                               complex1
                               (t2tb65
                                 (path_sem
                                   c
                                   (bv_to_ket
                                     (make_bv (fc571 k x) (width c)))))
                               (bv_to_int (make_bv (fc572 k y) (width c)))
                               0)))))))))))

;; place_get_ket_hpart_null
(assert
  (forall ((c circuit2) (k Int) (n Int) (x bitvec) (y bitvec))
    (=>
      (<= 0 k)
      (=>
        (<= (+ (width c) k) n)
        (=>
          (= (length x) n)
          (=>
            (= (length y) n)
            (=>
              (not (= (hpart x k) (hpart y k)))
              (= (tb2t
                   (get
                     complex1
                     (t2tb65 (path_sem (place c k n) (bv_to_ket x)))
                     (bv_to_int y)
                     0)) c_zero))))))))

;; place_get_ket_tpart_null
(assert
  (forall ((c circuit2) (k Int) (n Int) (x bitvec) (y bitvec))
    (=>
      (<= 0 k)
      (=>
        (<= (+ (width c) k) n)
        (=>
          (= (length x) n)
          (=>
            (= (length y) n)
            (=>
              (not (= (tpart x (+ k (width c))) (tpart y (+ k (width c)))))
              (= (tb2t
                   (get
                     complex1
                     (t2tb65 (path_sem (place c k n) (bv_to_ket x)))
                     (bv_to_int y)
                     0)) c_zero))))))))

;; place_hadamard
(declare-fun place_hadamard (Int
  Int) circuit2)

;; place_hadamard'def
(assert
  (forall ((k Int) (n Int))
    (=> (and (<= 0 k) (< k n)) (= (place_hadamard k n) (place hadamard k n)))))

;; place_hadamard'spec
(assert
  (forall ((k Int) (n Int))
    (=>
      (and (<= 0 k) (< k n))
      (and
        (= (range (place_hadamard k n)) 1)
        (and
          (= (width (place_hadamard k n)) n)
          (and
            (= (size (place_hadamard k n)) 1)
            (and
              (= (ancillas (place_hadamard k n)) 0)
              (and
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (forall ((i Int))
                    (=>
                      (and (<= 0 i) (< i n))
                      (= (basis_ket (place_hadamard k n) x y i) (ite (= i k)
                                                                  (select y 0)
                                                                  (select x i))))))
                (and
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (= (ang_ind (place_hadamard k n) x y) (infix_sldtsl
                                                            (* (select x k) (select y 0))
                                                            1)))
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (forall ((m Int))
                      (=>
                        (<= 1 m)
                        (= (ang_ind (place_hadamard k n) x y) (infix_sldtsl
                                                                (* (* (select x k) (select y 0)) 
                                                                (power
                                                                  2
                                                                  (- m 1)))
                                                                m))))))))))))))

;; place_hadamard_bv
(declare-fun place_hadamard_bv (Int
  Int) circuit2)

;; place_hadamard_bv'def
(assert
  (forall ((k Int) (n Int))
    (=>
      (and (<= 0 k) (< k n))
      (= (place_hadamard_bv k n) (place_hadamard k n)))))

;; fc
(declare-fun fc573 (Int
  bitvec
  bitvec) (Array Int Int))

;; fc
(declare-fun fc574 (Int
  Int) (Array bitvec (Array bitvec bitvec)))

;; fc
(declare-fun fc575 (Int
  Int) (Array bitvec (Array bitvec angle)))

;; fc'def
(assert
  (forall ((k Int) (x bitvec) (y bitvec) (i Int))
    (= (select (fc573 k x y) i) (ite (= i k)
                                  (select (value y) 0)
                                  (select (value x) i)))))

;; fc'def
(assert
  (forall ((k Int) (n Int) (x bitvec) (y bitvec))
    (= (tb2t77
         (infix_at
           bitvec1
           bitvec1
           (infix_at
             (infix_mngt bitvec1 bitvec1)
             bitvec1
             (t2tb119 (fc574 k n))
             (t2tb77 x))
           (t2tb77 y))) (make_bv (fc573 k x y) n))))

;; fc'def
(assert
  (forall ((k Int) (n Int) (x bitvec) (y bitvec))
    (= (tb2t84
         (infix_at
           angle1
           bitvec1
           (infix_at
             (infix_mngt bitvec1 angle1)
             bitvec1
             (t2tb121 (fc575 k n))
             (t2tb77 x))
           (t2tb77 y))) (infix_sldtsl
                          (* (* (select (value x) k) (select (value y) 0)) 
                          (power
                            2
                            (- n 1)))
                          n))))

;; place_hadamard_bv'spec
(assert
  (forall ((k Int) (n Int))
    (=>
      (and (<= 0 k) (< k n))
      (and
        (= (range (place_hadamard_bv k n)) 1)
        (and
          (= (width (place_hadamard_bv k n)) n)
          (and
            (= (size (place_hadamard_bv k n)) 1)
            (and
              (= (ancillas (place_hadamard_bv k n)) 0)
              (and
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (forall ((i Int))
                    (=>
                      (and (<= 0 i) (< i n))
                      (= (basis_ket (place_hadamard_bv k n) x y i) (ite (= i k)
                                                                    (select y 0)
                                                                    (select x i))))))
                (and
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (= (ang_ind (place_hadamard_bv k n) x y) (infix_sldtsl
                                                               (* (select x k) (select y 0))
                                                               1)))
                  (and
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (= (ang_ind (place_hadamard_bv k n) x y) (infix_sldtsl
                                                                 (* (* (select x k) (select y 0)) 
                                                                 (power
                                                                   2
                                                                   (- n 1)))
                                                                 n)))
                    (correct_path_sum_bv
                      (place_hadamard_bv k n)
                      1
                      (fc574 k n)
                      (fc575 k n))))))))))))

;; cont_size
(declare-fun cont_size () Int)

;; cont_size'def
(assert (< 0 cont_size))

;; rz_
(declare-fun rz_ (Int) circuit2)

;; rz_'def
(assert
  (forall ((k Int))
    (= (rz_ k) (seq_pps
                 (phase (- (incr_abs k)))
                 (rz k)
                 (pps_phase (- (incr_abs k)))
                 (pps_rz k)
                 (pps_rz_b k)))))

;; rz_'spec
(assert
  (forall ((k Int))
    (and
      (= (pre (rz_ k)) (Sequence (Phase (- (incr_abs k))) (Rz k)))
      (and
        (correct_path_sum_ (rz_ k) (pps_rz_b k))
        (and
          (= (ancillas (rz_ k)) 0)
          (and
            (= (size (rz_ k)) 2)
            (and
              (= (range (rz_ k)) 0)
              (and
                (= (width (rz_ k)) 1)
                (and
                  (= (path_sem (rz_ k) (ket 1 0)) (infix_asdtdt
                                                    (ang_exp
                                                      (infix_sldtsl
                                                        (- 1)
                                                        (incr_abs k)))
                                                    (ket 1 0)))
                  (and
                    (= (path_sem (rz_ k) (ket 1 1)) (infix_asdtdt
                                                      (ang_exp
                                                        (infix_sldtsl
                                                          1
                                                          (incr_abs k)))
                                                      (ket 1 1)))
                    (and
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (forall ((i Int))
                          (= (basis_ket (rz_ k) x y i) (select x i))))
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (=>
                          (and (<= 0 (select x 0)) (< (select x 0) 2))
                          (= (ang_ind (rz_ k) x y) (phase_inv_
                                                     (- (select x 0) 1)
                                                     (infix_sldtsl
                                                       1
                                                       (incr_abs k)))))))))))))))))

;; rx
(declare-fun rx (Int) circuit2)

;; rx'def
(assert
  (forall ((k Int))
    (= (rx k) (seq_pps
                hadamard
                (seq_pps
                  (rz_ k)
                  hadamard
                  (pps_rz_b k)
                  pps_hadamard
                  (pps_seq (pps_rz_b k) pps_hadamard))
                pps_hadamard
                (pps_seq (pps_rz_b k) pps_hadamard)
                (pps_rx k)))))

;; rx'spec
(assert
  (forall ((k Int))
    (and
      (= (rx k) (sequence hadamard (sequence (rz_ k) hadamard)))
      (and
        (= (pre (rx k)) (Sequence
                          Hadamard
                          (Sequence
                            (Sequence (Phase (- (incr_abs k))) (Rz k))
                            Hadamard)))
        (and (correct_path_sum_ (rx k) (pps_rx k)) (= (width (rx k)) 1))))))

;; zz
(declare-fun zz () circuit2)

;; zz'def
(assert (and (correct_path_sum_ zz pps_zz) (= (width zz) 1)))

;; path_sem_zz_zero
(assert
  (forall ((x (matrix complex)))
    (=> (= x (ket 1 0)) (= (path_sem zz x) (ket 1 0)))))

;; path_sem_zz_one
(assert
  (forall ((x (matrix complex)))
    (=>
      (= x (ket 1 1))
      (= (path_sem zz x) (infix_asdtdt (prefix_mndt c_one) (ket 1 1))))))

;; path_sem_zz_plus
(assert
  (forall ((x (matrix complex)))
    (=>
      (= x (pps_apply pps_hadamard (ket 1 0)))
      (= (path_sem zz x) (pps_apply pps_hadamard (ket 1 1))))))

;; path_sem_zz_minus
(assert
  (forall ((x (matrix complex)))
    (=>
      (= x (pps_apply pps_hadamard (ket 1 1)))
      (= (path_sem zz x) (pps_apply pps_hadamard (ket 1 0))))))

;; xx
(declare-fun xx () circuit2)

;; xx'def
(assert (and (correct_path_sum_ xx pps_xx) (= (width xx) 1)))

;; path_sem_xx
(declare-fun path_sem_xx ((matrix complex)) (matrix complex))

;; path_sem_xx'def
(assert
  (forall ((x (matrix complex)))
    (=> (is_a_ket_l x 1) (= (path_sem_xx x) (path_sem xx x)))))

;; path_sem_xx'spec
(assert
  (forall ((x (matrix complex)))
    (=>
      (is_a_ket_l x 1)
      (= (path_sem_xx x) (add_ket_l
                           (infix_asdtdt
                             (tb2t (get complex1 (t2tb65 x) 1 0))
                             (ket 1 0))
                           (infix_asdtdt
                             (tb2t (get complex1 (t2tb65 x) 0 0))
                             (ket 1 1))
                           1)))))

;; path_sem_xx_add_rev
(assert
  (forall ((a complex) (b complex))
    (= (path_sem_xx
         (add_ket_l (infix_asdtdt a (ket 1 0)) (infix_asdtdt b (ket 1 1)) 1)) 
    (add_ket_l
      (infix_asdtdt b (ket 1 0))
      (infix_asdtdt a (ket 1 1))
      1))))

;; path_sem_xx_z
(assert (= (path_sem_xx (ket 1 0)) (ket 1 1)))

;; path_sem_xx_o
(assert (= (path_sem_xx (ket 1 1)) (ket 1 0)))

;; path_sem_xx_invol
(assert
  (forall ((x (matrix complex)))
    (=> (is_a_ket_l x 1) (= (path_sem_xx (path_sem_xx x)) x))))

;; path_sem_cnot_basis_left
(declare-fun path_sem_cnot_basis_left ((matrix complex)
  (matrix complex)) (matrix complex))

;; path_sem_cnot_basis_left'def
(assert
  (forall ((x (matrix complex)) (y (matrix complex)))
    (=>
      (is_a_ket_l x 1)
      (=>
        (is_a_ket_l y 1)
        (=>
          (is_a_ket_basis_elt x)
          (=>
            (is_a_ket_basis_elt y)
            (= (path_sem_cnot_basis_left x y) (path_sem cnot (kronecker x y)))))))))

;; path_sem_cnot_basis_left'spec
(assert
  (forall ((x (matrix complex)) (y (matrix complex)))
    (=>
      (is_a_ket_l x 1)
      (=>
        (is_a_ket_l y 1)
        (=>
          (is_a_ket_basis_elt x)
          (=>
            (is_a_ket_basis_elt y)
            (and
              (= (path_sem_cnot_basis_left x y) (ite (= x (ket 1 0))
                                                  (kronecker x y)
                                                  (kronecker
                                                    x
                                                    (path_sem_xx y))))
              (and
                (=>
                  (= x (ket 1 0))
                  (= (path_sem_cnot_basis_left x y) (kronecker x y)))
                (=>
                  (= x (ket 1 1))
                  (= (path_sem_cnot_basis_left x y) (kronecker
                                                      x
                                                      (path_sem_xx y))))))))))))

;; path_sem_cnot
(declare-fun path_sem_cnot ((matrix complex)
  (matrix complex)) (matrix complex))

;; path_sem_cnot'def
(assert
  (forall ((x (matrix complex)) (y (matrix complex)))
    (=>
      (is_a_ket_l x 1)
      (=>
        (is_a_ket_l y 1)
        (=>
          (is_a_ket_basis_elt x)
          (= (path_sem_cnot x y) (path_sem cnot (kronecker x y))))))))

;; path_sem_cnot'spec
(assert
  (forall ((x (matrix complex)) (y (matrix complex)))
    (=>
      (is_a_ket_l x 1)
      (=>
        (is_a_ket_l y 1)
        (=>
          (is_a_ket_basis_elt x)
          (and
            (= (path_sem_cnot x y) (ite (= x (ket 1 0))
                                     (kronecker x y)
                                     (kronecker x (path_sem_xx y))))
            (and
              (=> (= x (ket 1 0)) (= (path_sem_cnot x y) (kronecker x y)))
              (=>
                (= x (ket 1 1))
                (= (path_sem_cnot x y) (kronecker x (path_sem_xx y)))))))))))

;; path_sem_swap
(declare-fun path_sem_swap ((matrix complex)
  (matrix complex)) (matrix complex))

;; path_sem_swap'def
(assert
  (forall ((x (matrix complex)) (y (matrix complex)))
    (=>
      (is_a_ket_l x 1)
      (=>
        (is_a_ket_l y 1)
        (= (path_sem_swap x y) (path_sem swap (kronecker x y)))))))

;; path_sem_swap'spec
(assert
  (forall ((x (matrix complex)) (y (matrix complex)))
    (=>
      (is_a_ket_l x 1)
      (=> (is_a_ket_l y 1) (= (path_sem_swap x y) (kronecker y x))))))

;; yy
(declare-fun yy () circuit2)

;; yy'def
(assert (and (correct_path_sum_ yy pps_yy) (= (width yy) 1)))

;; ry
(declare-fun ry (Int) circuit2)

;; ry'def
(assert
  (forall ((k Int))
    (= (ry k) (seq_pps
                (seq_pps
                  (rz (- 2))
                  (rx k)
                  (pps_rz (- 2))
                  (pps_rx k)
                  (pps_seq (pps_rz (- 2)) (pps_rx k)))
                (rz 2)
                (pps_seq (pps_rz (- 2)) (pps_rx k))
                (pps_rz 2)
                (pps_ry k)))))

;; ry'spec
(assert
  (forall ((k Int))
    (and
      (= (ry k) (sequence (sequence (rz (- 2)) (rx k)) (rz 2)))
      (and
        (= (pre (ry k)) (Sequence (Sequence (Rz (- 2)) (pre (rx k))) (Rz 2)))
        (and (correct_path_sum_ (ry k) (pps_ry k)) (= (width (ry k)) 1))))))

;; c_inverse_pre
(declare-fun c_inverse_pre ((Array Int Int)
  Int
  Int) Int)

;; c_inverse_pre'spec
(assert
  (forall ((f (Array Int Int)) (n Int) (i Int))
    (=>
      (p_bijective1 f (to_fset 0 n) (to_fset 0 n))
      (=>
        (and (<= 0 i) (< i n))
        (and
          (and (<= 0 (c_inverse_pre f n i)) (< (c_inverse_pre f n i) n))
          (= (select f (c_inverse_pre f n i)) i))))))

;; c_inverse
(declare-fun c_inverse ((Array Int Int)
  Int) (Array Int Int))

;; c_inverse'def
(assert
  (forall ((f (Array Int Int)) (n Int))
    (=>
      (p_bijective1 f (to_fset 0 n) (to_fset 0 n))
      (forall ((x Int))
        (= (select (c_inverse f n) x) (ite (and (<= 0 x) (< x n))
                                        (c_inverse_pre f n x)
                                        x))))))

;; c_inverse'spec
(assert
  (forall ((f (Array Int Int)) (n Int))
    (=>
      (p_bijective1 f (to_fset 0 n) (to_fset 0 n))
      (and
        (forall ((b Int))
          (=>
            (and (<= 0 b) (< b n))
            (and
              (<= 0 (select (c_inverse f n) b))
              (< (select (c_inverse f n) b) n))))
        (and
          (forall ((b Int))
            (=>
              (and (<= 0 b) (< b n))
              (= (select f (select (c_inverse f n) b)) b)))
          (and
            (p_bijective1 (c_inverse f n) (to_fset 0 n) (to_fset 0 n))
            (and
              (forall ((b Int))
                (=>
                  (and (<= 0 b) (< b n))
                  (= (select (c_inverse f n) (select f b)) b)))
              (forall ((b Int))
                (=>
                  (and (<= 0 b) (< b n))
                  (= (select (c_inverse f n) b) (select (inv_func_int f n) b)))))))))))

;; unic_inverse_c
(assert
  (forall ((f (Array Int Int)) (fqt (Array Int Int)) (n Int))
    (=>
      (p_bijective1 f (to_fset 0 n) (to_fset 0 n))
      (=>
        (forall ((a Int))
          (=> (and (<= 0 a) (< a n)) (= (select fqt (select f a)) a)))
        (forall ((b Int))
          (=>
            (and (<= 0 b) (< b n))
            (= (select fqt b) (select (c_inverse f n) b))))))))

;; c_inv_func_int
(declare-fun c_inv_func_int ((Array Int Int)
  Int) (Array Int Int))

;; c_inv_func_int'def
(assert
  (forall ((f (Array Int Int)) (n Int))
    (=>
      (p_bijective1 f (to_fset 0 n) (to_fset 0 n))
      (= (c_inv_func_int f n) (c_inverse f n)))))

;; c_inv_func_int'spec
(assert
  (forall ((f (Array Int Int)) (n Int))
    (=>
      (p_bijective1 f (to_fset 0 n) (to_fset 0 n))
      (and
        (forall ((b Int))
          (=>
            (and (<= 0 b) (< b n))
            (= (select (c_inv_func_int f n) b) (select (inv_func_int f n) b))))
        (and
          (p_bijective1 (c_inv_func_int f n) (to_fset 0 n) (to_fset 0 n))
          (and
            (forall ((a Int))
              (=>
                (and (<= 0 a) (< a n))
                (and
                  (<= 0 (select (c_inv_func_int f n) a))
                  (< (select (c_inv_func_int f n) a) n))))
            (and
              (forall ((a Int))
                (=>
                  (and (<= 0 a) (< a n))
                  (= (select f (select (c_inv_func_int f n) a)) a)))
              (and
                (forall ((a Int))
                  (=>
                    (and (<= 0 a) (< a n))
                    (= (select (c_inv_func_int f n) (select f a)) a)))
                (forall ((a Int) (b Int))
                  (=>
                    (and (<= 0 a) (< a n))
                    (=>
                      (and (<= 0 b) (< b n))
                      (=>
                        (= (select f a) b)
                        (= (select (c_inv_func_int f n) b) a)))))))))))))

;; unic_inverse_c_int
(assert
  (forall ((f (Array Int Int)) (fqt (Array Int Int)) (n Int))
    (=>
      (p_bijective1 f (to_fset 0 n) (to_fset 0 n))
      (=>
        (forall ((a Int))
          (=> (and (<= 0 a) (< a n)) (= (select fqt (select f a)) a)))
        (forall ((b Int))
          (=>
            (and (<= 0 b) (< b n))
            (= (select (c_inv_func_int f n) b) (select fqt b))))))))

;; qbit_permutes
(declare-fun qbit_permutes (circuit2) Bool)

;; qbit_permutes'def
(assert
  (forall ((c circuit2))
    (and
      (and
        (and
          (and
            (and
              (and
                (and
                  (and
                    (forall ((x Int))
                      (=> (= (pre c) (Phase x)) (not (qbit_permutes c))))
                    (forall ((x Int))
                      (=> (= (pre c) (Rz x)) (not (qbit_permutes c)))))
                  (=> (= (pre c) Hadamard) (not (qbit_permutes c))))
                (=> (= (pre c) Cnot) (not (qbit_permutes c))))
              (=> (= (pre c) Swap) (qbit_permutes c)))
            (=> (= (pre c) Id) (qbit_permutes c)))
          (forall ((x circuit_pre) (x1 circuit_pre))
            (=>
              (= (pre c) (Sequence x x1))
              (=
                (qbit_permutes c)
                (and (qbit_permutes (to_qc x)) (qbit_permutes (to_qc x1)))))))
        (forall ((x circuit_pre) (x1 circuit_pre))
          (=>
            (= (pre c) (Parallel x x1))
            (=
              (qbit_permutes c)
              (and (qbit_permutes (to_qc x)) (qbit_permutes (to_qc x1)))))))
      (forall ((x circuit_pre) (x1 Int))
        (=> (= (pre c) (Ancillas x x1)) (not (qbit_permutes c)))))))

;; qbit_permutes'spec
(assert
  (forall ((c circuit2))
    (and
      (=> (qbit_permutes c) (= (size c) 0))
      (and
        (=> (qbit_permutes c) (= (ancillas c) 0))
        (and
          (=> (qbit_permutes c) (= (range c) 0))
          (=>
            (qbit_permutes c)
            (forall ((x (Array Int Int)) (y (Array Int Int)))
              (= (ang_ind c x y) ang_zero))))))))

;; qbit_permutation
(declare-fun qbit_permutation (circuit2) (Array Int Int))

;; identity
(declare-fun identity2 () (Array Int Int))

;; identity_def
(assert (forall ((y Int)) (= (select identity2 y) y)))

;; qbit_permutation'def
(assert
  (forall ((c circuit2))
    (=>
      (qbit_permutes c)
      (and
        (and
          (and
            (and
              (and
                (and
                  (and
                    (and
                      (forall ((w Int))
                        (=>
                          (= (pre c) (Phase w))
                          (= (qbit_permutation c) identity2)))
                      (forall ((w Int))
                        (=>
                          (= (pre c) (Rz w))
                          (= (qbit_permutation c) identity2))))
                    (=>
                      (= (pre c) Hadamard)
                      (= (qbit_permutation c) identity2)))
                  (=> (= (pre c) Cnot) (= (qbit_permutation c) identity2)))
                (=>
                  (= (pre c) Swap)
                  (forall ((i Int))
                    (= (select (qbit_permutation c) i) (ite (= i 0)
                                                         1
                                                         (ite (= i 1) 0 i))))))
              (=> (= (pre c) Id) (= (qbit_permutation c) identity2)))
            (forall ((d circuit_pre) (e circuit_pre))
              (=>
                (= (pre c) (Sequence d e))
                (forall ((i Int))
                  (= (select (qbit_permutation c) i) (select (qbit_permutation
                                                               (to_qc d)) (select 
                  (qbit_permutation
                    (to_qc e)) i)))))))
          (forall ((d circuit_pre) (e circuit_pre))
            (=>
              (= (pre c) (Parallel d e))
              (forall ((i Int))
                (= (select (qbit_permutation c) i) (ite (< i (width
                                                               (to_qc d)))
                                                     (select (qbit_permutation
                                                               (to_qc d)) i)
                                                     (+ (select (qbit_permutation
                                                                  (to_qc e)) (- i 
                                                     (width
                                                       (to_qc d)))) (width
                                                                    (to_qc d)))))))))
        (forall ((w circuit_pre) (w1 Int))
          (=> (= (pre c) (Ancillas w w1)) (= (qbit_permutation c) identity2)))))))

;; qbit_permutation'spec
(assert
  (forall ((c circuit2))
    (=>
      (qbit_permutes c)
      (and
        (forall ((x (Array Int Int)) (y (Array Int Int)))
          (forall ((i Int))
            (=>
              (and (<= 0 i) (< i (width c)))
              (= (basis_ket c x y i) (select x (select (qbit_permutation c) i))))))
        (p_bijective1
          (qbit_permutation c)
          (to_fset 0 (width c))
          (to_fset 0 (width c)))))))

;; in_to_fset_qp
(assert
  (forall ((c circuit2) (i Int))
    (=>
      (qbit_permutes c)
      (=>
        (and (<= 0 i) (< i (width c)))
        (mem
          int
          (t2tb8 (select (qbit_permutation c) i))
          (t2tb16 (to_fset 0 (width c))))))))

;; bound_qp
(assert
  (forall ((c circuit2) (i Int))
    (=>
      (qbit_permutes c)
      (=>
        (and (<= 0 i) (< i (width c)))
        (and
          (<= 0 (select (qbit_permutation c) i))
          (< (select (qbit_permutation c) i) (width c)))))))

;; qbit_permute_sequence
(declare-fun qbit_permute_sequence (circuit2
  circuit2) circuit2)

;; qbit_permute_sequence'def
(assert
  (forall ((d circuit2) (e circuit2))
    (=>
      (= (width d) (width e))
      (=>
        (qbit_permutes d)
        (=> (qbit_permutes e) (= (qbit_permute_sequence d e) (sequence d e)))))))

;; qbit_permute_sequence'spec
(assert
  (forall ((d circuit2) (e circuit2))
    (=>
      (= (width d) (width e))
      (=>
        (qbit_permutes d)
        (=>
          (qbit_permutes e)
          (and
            (qbit_permutes (qbit_permute_sequence d e))
            (and
              (forall ((i Int))
                (= (select (qbit_permutation (qbit_permute_sequence d e)) i) (select 
                (qbit_permutation
                  d) (select (qbit_permutation e) i))))
              (= (width (qbit_permute_sequence d e)) (width d)))))))))

;; qbit_permute_parallel
(declare-fun qbit_permute_parallel (circuit2
  circuit2) circuit2)

;; qbit_permute_parallel'def
(assert
  (forall ((d circuit2) (e circuit2))
    (=>
      (qbit_permutes d)
      (=> (qbit_permutes e) (= (qbit_permute_parallel d e) (parallel d e))))))

;; qbit_permute_parallel'spec
(assert
  (forall ((d circuit2) (e circuit2))
    (=>
      (qbit_permutes d)
      (=>
        (qbit_permutes e)
        (and
          (qbit_permutes (qbit_permute_parallel d e))
          (and
            (forall ((i Int))
              (= (select (qbit_permutation (qbit_permute_parallel d e)) i) 
              (ite (< i (width d))
                (select (qbit_permutation d) i)
                (+ (select (qbit_permutation e) (- i (width d))) (width d)))))
            (= (width (qbit_permute_parallel d e)) (+ (width d) (width e)))))))))

;; ids_permute
(declare-fun ids_permute (Int) circuit2)

;; ids_permute'def
(assert
  (forall ((n Int))
    (=>
      (<= 1 n)
      (ite (= n 1)
        (= (ids_permute n) id)
        (= (ids_permute n) (qbit_permute_parallel (ids_permute (- n 1)) id))))))

;; ids_permute'spec
(assert
  (forall ((n Int))
    (=>
      (<= 1 n)
      (and
        (= (ids_permute n) (ids n))
        (and
          (= (width (ids_permute n)) n)
          (and
            (qbit_permutes (ids_permute n))
            (forall ((i Int))
              (= (select (qbit_permutation (ids_permute n)) i) i))))))))

;; permute_place
(declare-fun permute_place (circuit2
  Int
  Int) circuit2)

;; permute_place'spec
(assert
  (forall ((c circuit2) (k Int) (n Int))
    (=>
      (<= 0 k)
      (=>
        (<= (+ (width c) k) n)
        (=>
          (qbit_permutes c)
          (and
            (= (width (permute_place c k n)) n)
            (and
              (qbit_permutes (permute_place c k n))
              (forall ((i Int))
                (=>
                  (and (<= 0 i) (< i n))
                  (= (select (qbit_permutation (permute_place c k n)) i) 
                  (ite (and (<= k i) (< i (+ k (width c))))
                    (+ (select (qbit_permutation c) (- i k)) k)
                    i)))))))))))

;; permute_plus_one
(declare-fun permute_plus_one (Int
  Int) circuit2)

;; permute_plus_one'def
(assert
  (forall ((k Int) (n Int))
    (=>
      (<= 0 k)
      (=> (<= (+ k 2) n) (= (permute_plus_one k n) (permute_place swap k n))))))

;; permute_plus_one'spec
(assert
  (forall ((k Int) (n Int))
    (=>
      (<= 0 k)
      (=>
        (<= (+ k 2) n)
        (and
          (= (width (permute_plus_one k n)) n)
          (and
            (qbit_permutes (permute_plus_one k n))
            (forall ((i Int))
              (=>
                (and (<= 0 i) (< i n))
                (= (select (qbit_permutation (permute_plus_one k n)) i) 
                (ite (= i k)
                  (+ k 1)
                  (ite (= i (+ k 1)) k i)))))))))))

;; up_to_image
(declare-fun up_to_image (Int
  Int
  Int) circuit2)

;; up_to_image'def
(assert
  (forall ((k Int) (fk Int) (n Int))
    (=>
      (and (<= 0 k) (<= k fk))
      (=>
        (< fk n)
        (ite (= k fk)
          (= (up_to_image k fk n) (ids_permute n))
          (= (up_to_image k fk n) (qbit_permute_sequence
                                    (up_to_image (+ k 1) fk n)
                                    (permute_plus_one k n))))))))

;; up_to_image'spec
(assert
  (forall ((k Int) (fk Int) (n Int))
    (=>
      (and (<= 0 k) (<= k fk))
      (=>
        (< fk n)
        (and
          (= (width (up_to_image k fk n)) n)
          (and
            (qbit_permutes (up_to_image k fk n))
            (forall ((i Int))
              (=>
                (and (<= 0 i) (< i n))
                (= (select (qbit_permutation (up_to_image k fk n)) i) 
                (ite (= i k)
                  fk
                  (ite (and (< k i) (<= i fk)) (- i 1) i)))))))))))

;; down_to_image
(declare-fun down_to_image (Int
  Int
  Int) circuit2)

;; down_to_image'def
(assert
  (forall ((k Int) (fk Int) (n Int))
    (=>
      (and (<= 0 fk) (<= fk k))
      (=>
        (< k n)
        (ite (= k fk)
          (= (down_to_image k fk n) (ids_permute n))
          (= (down_to_image k fk n) (qbit_permute_sequence
                                      (down_to_image (- k 1) fk n)
                                      (permute_plus_one (- k 1) n))))))))

;; down_to_image'spec
(assert
  (forall ((k Int) (fk Int) (n Int))
    (=>
      (and (<= 0 fk) (<= fk k))
      (=>
        (< k n)
        (and
          (= (width (down_to_image k fk n)) n)
          (and
            (qbit_permutes (down_to_image k fk n))
            (forall ((i Int))
              (=>
                (and (<= 0 i) (< i n))
                (= (select (qbit_permutation (down_to_image k fk n)) i) 
                (ite (= i k)
                  fk
                  (ite (and (<= fk i) (<= i k)) (+ i 1) i)))))))))))

;; permute_up
(declare-fun permute_up (Int
  Int
  Int) circuit2)

;; permute_up'def
(assert
  (forall ((k Int) (fk Int) (n Int))
    (=>
      (and (<= 0 k) (and (<= k fk) (< fk n)))
      (=>
        (< fk n)
        (ite (= k fk)
          (= (permute_up k fk n) (ids_permute n))
          (= (permute_up k fk n) (qbit_permute_sequence
                                   (down_to_image (- fk 1) k n)
                                   (up_to_image k fk n))))))))

;; permute_up'spec
(assert
  (forall ((k Int) (fk Int) (n Int))
    (=>
      (and (<= 0 k) (and (<= k fk) (< fk n)))
      (=>
        (< fk n)
        (and
          (= (width (permute_up k fk n)) n)
          (and
            (qbit_permutes (permute_up k fk n))
            (forall ((i Int))
              (=>
                (and (<= 0 i) (< i n))
                (= (select (qbit_permutation (permute_up k fk n)) i) 
                (ite (= i k)
                  fk
                  (ite (= i fk) k i)))))))))))

;; permute_atom
(declare-fun permute_atom (Int
  Int
  Int) circuit2)

;; permute_atom'def
(assert
  (forall ((k Int) (fk Int) (n Int))
    (=>
      (and (<= 0 k) (< k n))
      (=>
        (and (<= 0 fk) (< fk n))
        (ite (<= k fk)
          (= (permute_atom k fk n) (permute_up k fk n))
          (= (permute_atom k fk n) (permute_up fk k n)))))))

;; permute_atom'spec
(assert
  (forall ((k Int) (fk Int) (n Int))
    (=>
      (and (<= 0 k) (< k n))
      (=>
        (and (<= 0 fk) (< fk n))
        (and
          (= (width (permute_atom k fk n)) n)
          (and
            (qbit_permutes (permute_atom k fk n))
            (and
              (= (select (qbit_permutation (permute_atom k fk n)) k) fk)
              (and
                (= (select (qbit_permutation (permute_atom k fk n)) fk) k)
                (forall ((i Int))
                  (=>
                    (and (<= 0 i) (< i n))
                    (=>
                      (not (= i k))
                      (=>
                        (not (= i fk))
                        (= (select (qbit_permutation (permute_atom k fk n)) i) i)))))))))))))

;; permutation_circuit_pre
(declare-fun permutation_circuit_pre (Int
  Int
  (Array Int Int)) circuit2)

;; permutation_circuit_pre'def
(assert
  (forall ((k Int) (n Int) (f (Array Int Int)))
    (=>
      (< 0 n)
      (=>
        (p_bijective1 f (to_fset 0 n) (to_fset 0 n))
        (=>
          (and (<= 0 k) (< k n))
          (ite (= k (- n 1))
            (= (permutation_circuit_pre k n f) (permute_atom
                                                 (select (c_inv_func_int f n) (- n 1))
                                                 (- n 1)
                                                 n))
            (let ((o (permutation_circuit_pre (+ k 1) n f)))
              (= (permutation_circuit_pre k n f) (qbit_permute_sequence
                                                   (permute_atom
                                                     k
                                                     (select (qbit_permutation
                                                               o) (select 
                                                     (c_inv_func_int
                                                       f
                                                       n) k))
                                                     n)
                                                   o)))))))))

;; permutation_circuit_pre'spec
(assert
  (forall ((k Int) (n Int) (f (Array Int Int)))
    (=>
      (< 0 n)
      (=>
        (p_bijective1 f (to_fset 0 n) (to_fset 0 n))
        (=>
          (and (<= 0 k) (< k n))
          (and
            (= (width (permutation_circuit_pre k n f)) n)
            (and
              (qbit_permutes (permutation_circuit_pre k n f))
              (and
                (forall ((i Int))
                  (=>
                    (and (<= k i) (< i n))
                    (= (select (qbit_permutation
                                 (permutation_circuit_pre k n f)) (select 
                    (c_inv_func_int
                      f
                      n) i)) i)))
                (forall ((i Int))
                  (=>
                    (and (<= 0 i) (< i k))
                    (and
                      (<= 0 (select (qbit_permutation
                                      (permutation_circuit_pre k n f)) (select 
                      (c_inv_func_int
                        f
                        n) i)))
                      (< (select (qbit_permutation
                                   (permutation_circuit_pre k n f)) (select 
                      (c_inv_func_int
                        f
                        n) i)) k))))))))))))

;; permutation_circuit
(declare-fun permutation_circuit (Int
  (Array Int Int)) circuit2)

;; permutation_circuit'def
(assert
  (forall ((n Int) (f (Array Int Int)))
    (=>
      (< 0 n)
      (=>
        (p_bijective1 f (to_fset 0 n) (to_fset 0 n))
        (= (permutation_circuit n f) (permutation_circuit_pre 0 n f))))))

;; fc
(declare-fun fc576 ((Array Int Int)
  bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (x bitvec) (i Int))
    (= (select (fc576 f x) i) (select (value x) (select f i)))))

;; permutation_circuit'spec
(assert
  (forall ((n Int) (f (Array Int Int)))
    (=>
      (< 0 n)
      (=>
        (p_bijective1 f (to_fset 0 n) (to_fset 0 n))
        (and
          (= (width (permutation_circuit n f)) n)
          (and
            (qbit_permutes (permutation_circuit n f))
            (and
              (forall ((i Int))
                (=>
                  (and (<= 0 i) (< i n))
                  (= (select (qbit_permutation (permutation_circuit n f)) i) (select f i))))
              (and
                (forall ((i Int))
                  (=>
                    (and (<= 0 i) (< i n))
                    (= (select (qbit_permutation (permutation_circuit n f)) (select 
                    (c_inv_func_int
                      f
                      n) i)) i)))
                (and
                  (forall ((x bitvec))
                    (=>
                      (= (length x) n)
                      (= (path_sem (permutation_circuit n f) (bv_to_ket x)) 
                      (bv_to_ket
                        (make_bv (fc576 f x) n)))))
                  (and
                    (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
                      (=>
                        (and (<= 0 i) (< i n))
                        (= (basis_ket (permutation_circuit n f) x y i) (select x (select f i)))))
                    (and
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (= (ang_ind (permutation_circuit n f) x y) ang_zero))
                      (and
                        (= (width (permutation_circuit n f)) n)
                        (= (range (permutation_circuit n f)) 0)))))))))))))

;; with_permutation
(declare-fun with_permutation (circuit2
  (Array Int Int)) circuit2)

;; fc
(declare-fun fc577 ((Array Int Int)
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc578 ((Array Int Int)
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc579 (circuit2
  (Array Int Int)
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (x (Array Int Int)) (i Int))
    (= (select (fc577 f x) i) (select x (select f i)))))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (x (Array Int Int)) (i Int))
    (= (select (fc578 f x) i) (select x (select f i)))))

;; fc'def
(assert
  (forall ((c circuit2) (f (Array Int Int)) (x (Array Int Int)) (i Int))
    (= (select (fc579 c f x) i) (select x (select (c_inv_func_int
                                                    f
                                                    (width c)) i)))))

;; with_permutation'spec
(assert
  (forall ((c circuit2) (f (Array Int Int)))
    (=>
      (p_bijective1 f (to_fset 0 (width c)) (to_fset 0 (width c)))
      (and
        (= (size (with_permutation c f)) (size c))
        (and
          (= (ancillas (with_permutation c f)) (ancillas c))
          (and
            (= (width (with_permutation c f)) (width c))
            (and
              (= (range (with_permutation c f)) (range c))
              (and
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (= (ang_ind (with_permutation c f) x y) (ang_ind
                                                            c
                                                            (fc577 f x)
                                                            y)))
                (and
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (forall ((i Int))
                      (=>
                        (and (<= 0 i) (< i (width c)))
                        (= (basis_ket (with_permutation c f) x y i) (basis_ket
                                                                    c
                                                                    (fc578
                                                                    f
                                                                    x)
                                                                    y
                                                                    (select 
                                                                    (c_inv_func_int
                                                                    f
                                                                    (width c)) i))))))
                  (and
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (forall ((i Int))
                        (=>
                          (and (<= 0 i) (< i (width c)))
                          (= (basis_ket
                               (with_permutation c f)
                               (fc579 c f x)
                               y
                               i) (basis_ket
                                    c
                                    x
                                    y
                                    (select (c_inv_func_int f (width c)) i))))))
                    (= (with_permutation c f) (sequence
                                                (sequence
                                                  (permutation_circuit
                                                    (width c)
                                                    f)
                                                  c)
                                                (permutation_circuit
                                                  (width c)
                                                  (c_inv_func_int
                                                    f
                                                    (width c)))))))))))))))

;; c_swap_int
(declare-fun c_swap_int (Int
  Int
  Int) (Array Int Int))

;; c_swap_int'def
(assert
  (forall ((t1 Int) (t2 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 t2) (< t2 n))
        (forall ((i Int))
          (= (select (c_swap_int t1 t2 n) i) (ite (= i t1)
                                               t2
                                               (ite (= i t2) t1 i))))))))

;; c_swap_int'spec
(assert
  (forall ((t1 Int) (t2 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 t2) (< t2 n))
        (and
          (forall ((a Int))
            (=> (= a t1) (= (select (c_swap_int t1 t2 n) a) t2)))
          (and
            (forall ((a Int))
              (=> (= a t2) (= (select (c_swap_int t1 t2 n) a) t1)))
            (and
              (forall ((a Int))
                (=>
                  (not (= a t1))
                  (=> (not (= a t2)) (= (select (c_swap_int t1 t2 n) a) a))))
              (and
                (p_bijective1
                  (c_swap_int t1 t2 n)
                  (to_fset 0 n)
                  (to_fset 0 n))
                (forall ((i Int))
                  (=>
                    (and (<= 0 i) (< i n))
                    (= (select (c_inv_func_int (c_swap_int t1 t2 n) n) i) (select 
                    (c_swap_int
                      t1
                      t2
                      n) i))))))))))))

;; with_int_swap
(declare-fun with_int_swap (circuit2
  Int
  Int) circuit2)

;; with_int_swap'def
(assert
  (forall ((c circuit2) (t1 Int) (t2 Int))
    (=>
      (and (<= 0 t1) (< t1 (width c)))
      (=>
        (and (<= 0 t2) (< t2 (width c)))
        (= (with_int_swap c t1 t2) (with_permutation
                                     c
                                     (c_swap_int t1 t2 (width c))))))))

;; fc
(declare-fun fc580 (Int
  Int
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc581 (Int
  Int
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc582 (Int
  Int
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc583 (Int
  Int
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((t1 Int) (t2 Int) (x (Array Int Int)) (i Int))
    (= (select (fc580 t1 t2 x) i) (select x (ite (= i t1)
                                              t2
                                              (ite (= i t2) t1 i))))))

;; fc'def
(assert
  (forall ((t1 Int) (t2 Int) (x (Array Int Int)) (i Int))
    (= (select (fc581 t1 t2 x) i) (select x (ite (= i t1)
                                              t2
                                              (ite (= i t2) t1 i))))))

;; fc'def
(assert
  (forall ((t1 Int) (t2 Int) (x (Array Int Int)) (i Int))
    (= (select (fc582 t1 t2 x) i) (select x (ite (= i t1)
                                              t2
                                              (ite (= i t2) t1 i))))))

;; fc'def
(assert
  (forall ((t1 Int) (t2 Int) (x (Array Int Int)) (i Int))
    (= (select (fc583 t1 t2 x) i) (select x (ite (= i t1)
                                              t2
                                              (ite (= i t2) t1 i))))))

;; with_int_swap'spec
(assert
  (forall ((c circuit2) (t1 Int) (t2 Int))
    (=>
      (and (<= 0 t1) (< t1 (width c)))
      (=>
        (and (<= 0 t2) (< t2 (width c)))
        (and
          (= (size (with_int_swap c t1 t2)) (size c))
          (and
            (= (ancillas (with_int_swap c t1 t2)) (ancillas c))
            (and
              (= (width (with_int_swap c t1 t2)) (width c))
              (and
                (= (range (with_int_swap c t1 t2)) (range c))
                (and
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (= (ang_ind (with_int_swap c t1 t2) x y) (ang_ind
                                                               c
                                                               (fc580
                                                                 t1
                                                                 t2
                                                                 x)
                                                               y)))
                  (and
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (forall ((i Int))
                        (=>
                          (= i t1)
                          (= (basis_ket (with_int_swap c t1 t2) x y i) 
                          (basis_ket
                            c
                            (fc581 t1 t2 x)
                            y
                            t2)))))
                    (and
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (forall ((i Int))
                          (=>
                            (= i t2)
                            (= (basis_ket (with_int_swap c t1 t2) x y i) 
                            (basis_ket
                              c
                              (fc582 t1 t2 x)
                              y
                              t1)))))
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (forall ((i Int))
                          (=>
                            (and (<= 0 i) (< i (width c)))
                            (=>
                              (not (= i t1))
                              (=>
                                (not (= i t2))
                                (= (basis_ket (with_int_swap c t1 t2) x y i) 
                                (basis_ket
                                  c
                                  (fc583 t1 t2 x)
                                  y
                                  i))))))))))))))))))

;; permutation_circuit_equiv
(assert
  (forall ((n Int) (f (Array Int Int)) (fqt (Array Int Int)))
    (=>
      (< 0 n)
      (=>
        (p_bijective1 f (to_fset 0 n) (to_fset 0 n))
        (=>
          (forall ((x Int))
            (=> (and (<= 0 x) (< x n)) (= (select f x) (select fqt x))))
          (forall ((x (matrix complex)))
            (=>
              (is_a_ket_l x n)
              (= (path_sem (permutation_circuit n f) x) (path_sem
                                                          (permutation_circuit
                                                            n
                                                            fqt)
                                                          x)))))))))

;; fc
(declare-fun fc584 ((Array Int Int)
  bitvec) (Array Int Int))

;; fc
(declare-fun fc585 ((Array Int Int)
  bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (x bitvec) (i Int))
    (= (select (fc584 f x) i) (select (value x) (select f i)))))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (y bitvec) (i Int))
    (= (select (fc585 f y) i) (select (value y) (select f i)))))

;; with_permutation_get_ket
(assert
  (forall ((c circuit2) (f (Array Int Int)) (x bitvec) (y bitvec))
    (=>
      (= (length x) (width c))
      (=>
        (= (length y) (width c))
        (=>
          (p_bijective1 f (to_fset 0 (width c)) (to_fset 0 (width c)))
          (= (tb2t
               (get
                 complex1
                 (t2tb65 (path_sem (with_permutation c f) (bv_to_ket x)))
                 (bv_to_int y)
                 0)) (tb2t
                       (get
                         complex1
                         (t2tb65
                           (path_sem
                             c
                             (bv_to_ket (make_bv (fc584 f x) (width c)))))
                         (bv_to_int (make_bv (fc585 f y) (width c)))
                         0))))))))

;; fc
(declare-fun fc586 ((Array Int Int)
  (matrix complex)) (Array Int Int))

;; fc
(declare-fun fc587 (circuit2
  (Array Int Int)
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (x (matrix complex)) (j Int))
    (= (select (fc586 f x) j) (select (value (ket_to_bv x)) (select f j)))))

;; fc'def
(assert
  (forall ((c circuit2) (f (Array Int Int)) (i Int) (j Int))
    (= (select (fc587 c f i) j) (select (value (int_to_bv i (width c))) (select f j)))))

;; with_permutation_get_ket_
(assert
  (forall ((c circuit2) (f (Array Int Int)) (x (matrix complex)) (i Int))
    (=>
      (is_a_ket_l x (width c))
      (=>
        (is_a_ket_basis_elt x)
        (=>
          (and (<= 0 i) (< i (power 2 (width c))))
          (=>
            (p_bijective1 f (to_fset 0 (width c)) (to_fset 0 (width c)))
            (= (tb2t
                 (get
                   complex1
                   (t2tb65 (path_sem (with_permutation c f) x))
                   i
                   0)) (tb2t
                         (get
                           complex1
                           (t2tb65
                             (path_sem
                               c
                               (bv_to_ket (make_bv (fc586 f x) (width c)))))
                           (bv_to_int (make_bv (fc587 c f i) (width c)))
                           0)))))))))

;; fc
(declare-fun fc588 (Int
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((k Int) (n Int) (i Int))
    (= (select (fc588 k n) i) (ite (< i k) (- (+ i n) k) (- i k)))))

;; with_permutation_kronecker
(assert
  (forall ((c circuit2) (im1 (matrix complex)) (im_d (matrix complex)) (ant (matrix complex)) (ant_d (matrix complex)) (k Int) (n Int))
    (=>
      (= (width c) n)
      (=>
        (and (<= 0 k) (< k n))
        (=>
          (is_a_ket_l im1 k)
          (=>
            (is_a_ket_l im_d (- n k))
            (=>
              (is_a_ket_l ant k)
              (=>
                (is_a_ket_l ant_d (- n k))
                (=>
                  (is_a_ket_basis_elt ant)
                  (=>
                    (is_a_ket_basis_elt ant_d)
                    (=>
                      (= (path_sem c (kronecker ant ant_d)) (kronecker
                                                              im1
                                                              im_d))
                      (= (path_sem
                           (with_permutation c (fc588 k n))
                           (kronecker ant_d ant)) (kronecker im_d im1)))))))))))))

;; fc
(declare-fun fc589 (Int
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((k Int) (n Int) (i Int))
    (= (select (fc589 k n) i) (ite (< i k) (- (+ i n) k) (- i k)))))

;; with_permutation_kronecker_gen
(assert
  (forall ((c circuit2) (k Int) (n Int))
    (=>
      (= (width c) n)
      (=>
        (and (<= 0 k) (< k n))
        (forall ((im1 (matrix complex)) (im_d (matrix complex)) (ant (matrix complex)) (ant_d (matrix complex)))
          (=>
            (is_a_ket_l ant k)
            (=>
              (is_a_ket_l ant_d (- n k))
              (=>
                (is_a_ket_l im1 k)
                (=>
                  (is_a_ket_l im_d (- n k))
                  (=>
                    (is_a_ket_basis_elt ant)
                    (=>
                      (is_a_ket_basis_elt ant_d)
                      (=>
                        (= (path_sem c (kronecker ant ant_d)) (kronecker
                                                                im1
                                                                im_d))
                        (= (path_sem
                             (with_permutation c (fc589 k n))
                             (kronecker ant_d ant)) (kronecker im_d im1))))))))))))))

;; fc
(declare-fun fc590 (Int
  Int
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((n1 Int) (n2 Int) (n3 Int) (j Int))
    (= (select (fc590 n1 n2 n3) j) (ite (< j n1)
                                     j
                                     (ite (< j (+ n1 n3)) (+ j n2) (- j n3))))))

;; permutation_three_blocks
(assert
  (forall ((n1 Int) (n2 Int) (n3 Int) (n Int) (x bitvec) (y bitvec) (z bitvec))
    (=>
      (= (length x) n1)
      (=>
        (= (length y) n2)
        (=>
          (= (length z) n3)
          (=>
            (<= 0 n1)
            (=>
              (<= 0 n2)
              (=>
                (<= 0 n3)
                (=>
                  (< 0 n)
                  (=>
                    (= n (+ (+ n1 n2) n3))
                    (= (path_sem
                         (permutation_circuit n (fc590 n1 n2 n3))
                         (kronecker
                           (kronecker (bv_to_ket x) (bv_to_ket y))
                           (bv_to_ket z))) (kronecker
                                             (kronecker
                                               (bv_to_ket x)
                                               (bv_to_ket z))
                                             (bv_to_ket y)))))))))))))

;; insert_qbits
(declare-fun insert_qbits (circuit2
  Int
  Int
  Int) circuit2)

;; result
(declare-fun result67 (Int
  Int
  Int) (Array Int Int))

;; result'def
(assert
  (forall ((k Int) (n Int) (i Int) (j Int))
    (= (select (result67 k n i) j) (ite (< j k)
                                     j
                                     (ite (< j n) (+ j i) (+ (- j n) k))))))

;; insert_qbits'def
(assert
  (forall ((c circuit2) (k Int) (n Int) (i Int))
    (=>
      (= (width c) n)
      (=>
        (and (<= 0 k) (< k n))
        (=>
          (< 0 i)
          (= (insert_qbits c k n i) (with_permutation
                                      (parallel c (ids i))
                                      (result67 k n i))))))))

;; fc
(declare-fun fc591 (Int
  Int
  Int
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc592 (Int
  Int
  Int
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc593 (Int
  Int
  Int
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((k Int) (n Int) (i Int) (x (Array Int Int)) (j Int))
    (= (select (fc591 k n i x) j) (select x (ite (< j k)
                                              j
                                              (ite (< j n)
                                                (+ j i)
                                                (+ (- j n) k)))))))

;; fc'def
(assert
  (forall ((k Int) (n Int) (i Int) (x (Array Int Int)) (ii Int))
    (= (select (fc592 k n i x) ii) (select x (ite (< ii k)
                                               ii
                                               (ite (< ii n)
                                                 (+ ii i)
                                                 (+ (- ii n) k)))))))

;; fc'def
(assert
  (forall ((k Int) (n Int) (i Int) (x (Array Int Int)) (ii Int))
    (= (select (fc593 k n i x) ii) (select x (ite (< ii k)
                                               ii
                                               (ite (< ii n)
                                                 (+ ii i)
                                                 (+ (- ii n) k)))))))

;; insert_qbits'spec
(assert
  (forall ((c circuit2) (k Int) (n Int) (i Int))
    (=>
      (= (width c) n)
      (=>
        (and (<= 0 k) (< k n))
        (=>
          (< 0 i)
          (and
            (= (ancillas (insert_qbits c k n i)) (ancillas c))
            (and
              (= (width (insert_qbits c k n i)) (+ n i))
              (and
                (= (size (insert_qbits c k n i)) (size c))
                (and
                  (= (range (insert_qbits c k n i)) (range c))
                  (and
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (= (ang_ind (insert_qbits c k n i) x y) (ang_ind
                                                                c
                                                                (fc591
                                                                  k
                                                                  n
                                                                  i
                                                                  x)
                                                                y)))
                    (and
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (forall ((j Int))
                          (=>
                            (and (<= 0 j) (< j k))
                            (= (basis_ket (insert_qbits c k n i) x y j) 
                            (basis_ket
                              c
                              (fc592 k n i x)
                              y
                              j)))))
                      (and
                        (forall ((x (Array Int Int)) (y (Array Int Int)))
                          (forall ((j Int))
                            (=>
                              (and (<= (+ k i) j) (< j (+ n i)))
                              (= (basis_ket (insert_qbits c k n i) x y j) 
                              (basis_ket
                                c
                                (fc593 k n i x)
                                y
                                (- j i))))))
                        (forall ((x (Array Int Int)) (y (Array Int Int)))
                          (forall ((j Int))
                            (=>
                              (and (<= k j) (< j (+ k i)))
                              (= (basis_ket (insert_qbits c k n i) x y j) (select x j)))))))))))))))))

;; insert_qbits_gen
(declare-fun insert_qbits_gen (circuit2
  Int
  Int
  Int) circuit2)

;; insert_qbits_gen'def
(assert
  (forall ((c circuit2) (k Int) (n Int) (i Int))
    (=>
      (= (width c) n)
      (=>
        (and (<= 0 k) (< k n))
        (=>
          (<= 0 i)
          (ite (< 0 i)
            (= (insert_qbits_gen c k n i) (insert_qbits c k n i))
            (= (insert_qbits_gen c k n i) c)))))))

;; fc
(declare-fun fc594 (Int
  Int
  Int
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc595 (Int
  Int
  Int
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc596 (Int
  Int
  Int
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((k Int) (n Int) (i Int) (x (Array Int Int)) (j Int))
    (= (select (fc594 k n i x) j) (select x (ite (< j k)
                                              j
                                              (ite (< j n)
                                                (+ j i)
                                                (+ (- j n) k)))))))

;; fc'def
(assert
  (forall ((k Int) (n Int) (i Int) (x (Array Int Int)) (ii Int))
    (= (select (fc595 k n i x) ii) (select x (ite (< ii k)
                                               ii
                                               (ite (< ii n)
                                                 (+ ii i)
                                                 (+ (- ii n) k)))))))

;; fc'def
(assert
  (forall ((k Int) (n Int) (i Int) (x (Array Int Int)) (ii Int))
    (= (select (fc596 k n i x) ii) (select x (ite (< ii k)
                                               ii
                                               (ite (< ii n)
                                                 (+ ii i)
                                                 (+ (- ii n) k)))))))

;; insert_qbits_gen'spec
(assert
  (forall ((c circuit2) (k Int) (n Int) (i Int))
    (=>
      (= (width c) n)
      (=>
        (and (<= 0 k) (< k n))
        (=>
          (<= 0 i)
          (and
            (= (ancillas (insert_qbits_gen c k n i)) (ancillas c))
            (and
              (= (width (insert_qbits_gen c k n i)) (+ n i))
              (and
                (= (size (insert_qbits_gen c k n i)) (size c))
                (and
                  (= (range (insert_qbits_gen c k n i)) (range c))
                  (and
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (= (ang_ind (insert_qbits_gen c k n i) x y) (ang_ind
                                                                    c
                                                                    (fc594
                                                                    k
                                                                    n
                                                                    i
                                                                    x)
                                                                    y)))
                    (and
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (forall ((j Int))
                          (=>
                            (and (<= 0 j) (< j k))
                            (= (basis_ket (insert_qbits_gen c k n i) x y j) 
                            (basis_ket
                              c
                              (fc595 k n i x)
                              y
                              j)))))
                      (and
                        (forall ((x (Array Int Int)) (y (Array Int Int)))
                          (forall ((j Int))
                            (=>
                              (and (<= (+ k i) j) (< j (+ n i)))
                              (= (basis_ket (insert_qbits_gen c k n i) x y j) 
                              (basis_ket
                                c
                                (fc596 k n i x)
                                y
                                (- j i))))))
                        (forall ((x (Array Int Int)) (y (Array Int Int)))
                          (forall ((j Int))
                            (=>
                              (and (<= k j) (< j (+ k i)))
                              (= (basis_ket (insert_qbits_gen c k n i) x y j) (select x j)))))))))))))))))

;; insert_qbits_path_sem
(assert
  (forall ((c circuit2) (k Int) (n Int) (i Int) (x bitvec) (im1 (matrix complex)) (im_d (matrix complex)))
    (=>
      (= (width c) n)
      (=>
        (and (<= 0 k) (< k n))
        (=>
          (< 0 i)
          (=>
            (= (length x) (+ n i))
            (=>
              (is_a_ket_l im1 k)
              (=>
                (is_a_ket_l im_d (- n k))
                (=>
                  (= (path_sem
                       c
                       (bv_to_ket (concat1 (hpart x k) (tpart x (+ k i))))) 
                  (kronecker
                    im1
                    im_d))
                  (= (path_sem (insert_qbits c k n i) (bv_to_ket x)) 
                  (kronecker
                    im1
                    (kronecker (bv_to_ket (htpart x k i)) im_d))))))))))))

;; cos_add
(assert
  (forall ((x complex) (xqt complex))
    (=>
      (real_ x)
      (=>
        (real_ xqt)
        (= (cos1 (infix_pldt x xqt)) (infix_mndt
                                       (infix_asdt (cos1 x) (cos1 xqt))
                                       (infix_asdt (sin1 x) (sin1 xqt))))))))

;; sin_add
(assert
  (forall ((x complex) (xqt complex))
    (=>
      (real_ x)
      (=>
        (real_ xqt)
        (= (sin1 (infix_pldt x xqt)) (infix_pldt
                                       (infix_asdt (sin1 x) (cos1 xqt))
                                       (infix_asdt (cos1 x) (sin1 xqt))))))))

;; cos_ang_add
(assert
  (forall ((theta angle) (thetaqt angle))
    (= (cos_ang (ang_add theta thetaqt)) (infix_mndt
                                           (infix_asdt
                                             (cos_ang theta)
                                             (cos_ang thetaqt))
                                           (infix_asdt
                                             (sin_ang theta)
                                             (sin_ang thetaqt))))))

;; sin_ang_add
(assert
  (forall ((theta angle) (thetaqt angle))
    (= (sin_ang (ang_add theta thetaqt)) (infix_pldt
                                           (infix_asdt
                                             (sin_ang theta)
                                             (cos_ang thetaqt))
                                           (infix_asdt
                                             (cos_ang theta)
                                             (sin_ang thetaqt))))))

;; cos_ang_add_rev
(assert
  (forall ((theta angle) (thetaqt angle))
    (= (infix_mndt
         (infix_asdt (cos_ang theta) (cos_ang thetaqt))
         (infix_asdt (sin_ang theta) (sin_ang thetaqt))) (cos_ang
                                                           (ang_add
                                                             theta
                                                             thetaqt)))))

;; sin_ang_add_rev
(assert
  (forall ((theta angle) (thetaqt angle))
    (= (infix_pldt
         (infix_asdt (sin_ang theta) (cos_ang thetaqt))
         (infix_asdt (cos_ang theta) (sin_ang thetaqt))) (sin_ang
                                                           (ang_add
                                                             theta
                                                             thetaqt)))))

;; sin_ang_add_rev_rev
(assert
  (forall ((theta angle) (thetaqt angle))
    (= (infix_pldt
         (infix_asdt (cos_ang theta) (sin_ang thetaqt))
         (infix_asdt (sin_ang theta) (cos_ang thetaqt))) (sin_ang
                                                           (ang_add
                                                             theta
                                                             thetaqt)))))

;; sin_ang_inv
(assert
  (forall ((theta angle))
    (= (sin_ang (ang_inv theta)) (prefix_mndt (sin_ang theta)))))

;; cos_ang_inv
(assert
  (forall ((theta angle)) (= (cos_ang (ang_inv theta)) (cos_ang theta))))

;; sin_ang_inv_int
(assert
  (forall ((k Int) (n Int))
    (= (sin_ang (infix_sldtsl (- k) n)) (prefix_mndt
                                          (sin_ang (infix_sldtsl k n))))))

;; cos_ang_inv_int
(assert true)

;; sin_ang_zero
(assert (= (sin_ang (infix_sldtsl 1 0)) c_zero))

;; sin_ang_one
(assert (= (sin_ang (infix_sldtsl 1 1)) c_zero))

;; sin_ang_two
(assert (= (sin_ang (infix_sldtsl 1 2)) c_one))

;; sin_ang_three
(assert (= (sin_ang (infix_sldtsl 1 3)) (pow_inv_sqrt_2 1)))

;; cos_ang_zero
(assert (= (cos_ang (infix_sldtsl 1 0)) c_one))

;; cos_ang_one
(assert (= (cos_ang (infix_sldtsl 1 1)) (prefix_mndt c_one)))

;; cos_ang_two
(assert (= (cos_ang (infix_sldtsl 1 2)) c_zero))

;; cos_ang_three
(assert (= (cos_ang (infix_sldtsl 1 3)) (pow_inv_sqrt_2 1)))

;; cos_two_x
(assert
  (forall ((x complex))
    (=>
      (real_ x)
      (= (cos1 (infix_asdt (infix_pldt c_one c_one) x)) (infix_mndt
                                                          (cpower (cos1 x) 2)
                                                          (cpower (sin1 x) 2))))))

;; sin_two_x
(assert
  (forall ((x complex) (xqt complex))
    (=>
      (real_ x)
      (=>
        (real_ xqt)
        (= (sin1 (infix_asdt (infix_pldt c_one c_one) x)) (infix_asdt
                                                            (infix_asdt
                                                              (infix_pldt
                                                                c_one
                                                                c_one)
                                                              (sin1 x))
                                                            (cos1 x)))))))

;; cos_minus
(assert
  (forall ((x complex)) (=> (real_ x) (= (cos1 (prefix_mndt x)) (cos1 x)))))

;; sin_minus
(assert
  (forall ((x complex))
    (=> (real_ x) (= (sin1 (prefix_mndt x)) (prefix_mndt (sin1 x))))))

;; symetries_vert
(assert
  (forall ((x complex))
    (=>
      (real_ x)
      (and
        (= (sin1 (infix_pldt (infix_sldt pi1 (infix_pldt c_one c_one)) x)) 
        (sin1
          (infix_mndt (infix_sldt pi1 (infix_pldt c_one c_one)) x)))
        (= (cos1 (infix_pldt (infix_sldt pi1 (infix_pldt c_one c_one)) x)) 
        (prefix_mndt
          (cos1 (infix_mndt (infix_sldt pi1 (infix_pldt c_one c_one)) x))))))))

;; pi_minus
(assert
  (forall ((x complex))
    (=>
      (real_ x)
      (and
        (= (sin1 (infix_mndt pi1 x)) (sin1 x))
        (= (cos1 (infix_mndt pi1 x)) (prefix_mndt (cos1 x)))))))

;; sin_plus_pi_pos
(assert
  (forall ((x complex) (k Int))
    (=>
      (real_ x)
      (=>
        (<= 0 k)
        (and
          (=>
            (= (even k) true)
            (= (sin1 (infix_asdt pi1 (infix_pldt x (i_to_c k)))) (sin1
                                                                   (infix_asdt
                                                                    pi1
                                                                    x))))
          (=>
            (= (odd k) true)
            (= (sin1 (infix_asdt pi1 (infix_pldt x (i_to_c k)))) (prefix_mndt
                                                                   (sin1
                                                                    (infix_asdt
                                                                    pi1
                                                                    x))))))))))

;; sin_plus_pi
(assert
  (forall ((x complex) (k Int))
    (=>
      (real_ x)
      (and
        (=>
          (= (even k) true)
          (= (sin1 (infix_asdt pi1 (infix_pldt x (i_to_c k)))) (sin1
                                                                 (infix_asdt
                                                                   pi1
                                                                   x))))
        (=>
          (= (odd k) true)
          (= (sin1 (infix_asdt pi1 (infix_pldt x (i_to_c k)))) (prefix_mndt
                                                                 (sin1
                                                                   (infix_asdt
                                                                    pi1
                                                                    x)))))))))

;; cos_plus_pi_pos
(assert
  (forall ((x complex) (k Int))
    (=>
      (real_ x)
      (=>
        (<= 0 k)
        (and
          (=>
            (= (even k) true)
            (= (cos1 (infix_asdt pi1 (infix_pldt x (i_to_c k)))) (cos1
                                                                   (infix_asdt
                                                                    pi1
                                                                    x))))
          (=>
            (= (odd k) true)
            (= (cos1 (infix_asdt pi1 (infix_pldt x (i_to_c k)))) (prefix_mndt
                                                                   (cos1
                                                                    (infix_asdt
                                                                    pi1
                                                                    x))))))))))

;; cos_plus_pi
(assert
  (forall ((x complex) (k Int))
    (=>
      (real_ x)
      (and
        (=>
          (= (even k) true)
          (= (cos1 (infix_asdt pi1 (infix_pldt x (i_to_c k)))) (cos1
                                                                 (infix_asdt
                                                                   pi1
                                                                   x))))
        (=>
          (= (odd k) true)
          (= (cos1 (infix_asdt pi1 (infix_pldt x (i_to_c k)))) (prefix_mndt
                                                                 (cos1
                                                                   (infix_asdt
                                                                    pi1
                                                                    x)))))))))

;; mod_sin_plus_pi
(assert
  (forall ((x complex) (k Int))
    (=>
      (real_ x)
      (= (modulus (sin1 (infix_asdt pi1 (infix_pldt x (i_to_c k))))) 
      (modulus
        (sin1 (infix_asdt pi1 x)))))))

;; mod_cos_plus_pi
(assert
  (forall ((x complex) (k Int))
    (=>
      (real_ x)
      (= (modulus (cos1 (infix_asdt pi1 (infix_pldt x (i_to_c k))))) 
      (modulus
        (cos1 (infix_asdt pi1 x)))))))

;; sin_mod_two_pi
(assert
  (forall ((x complex))
    (=>
      (real_ x)
      (= (sin1 (infix_asdt (infix_asdt (infix_pldt c_one c_one) pi1) x)) 
      (sin1
        (infix_asdt (infix_asdt (infix_pldt c_one c_one) pi1) (dec_part x)))))))

;; cos_mod_two_pi
(assert
  (forall ((x complex))
    (=>
      (real_ x)
      (= (cos1 (infix_asdt (infix_asdt (infix_pldt c_one c_one) pi1) x)) 
      (cos1
        (infix_asdt (infix_asdt (infix_pldt c_one c_one) pi1) (dec_part x)))))))

;; square_modulus_c_one_minus
(assert
  (forall ((phi complex))
    (=>
      (real_ phi)
      (= (cpower (modulus (infix_mndt c_one (ang_exp (real_to_ang phi)))) 2) 
      (infix_asdt
        (i_to_c 4)
        (cpower (modulus (sin1 (infix_asdt pi1 phi))) 2))))))

;; growing_sine
(assert
  (forall ((a complex) (b complex))
    (=>
      (and
        (infix_lseqdt c_zero a)
        (and
          (infix_lsdt a b)
          (infix_lseqdt b (infix_sldt c_one (infix_pldt c_one c_one)))))
      (infix_lsdt (sin1 (infix_asdt pi1 a)) (sin1 (infix_asdt pi1 b))))))

;; non_null_sine
(assert
  (forall ((x complex))
    (=>
      (and (infix_lsdt c_zero x) (infix_lsdt x pi1))
      (infix_lsdt c_zero (sin1 x)))))

;; bounded_by_sine
(assert
  (forall ((x complex))
    (=>
      (real_ x)
      (=>
        (and
          (infix_lseqdt c_zero (modulus x))
          (infix_lseqdt
            (modulus x)
            (infix_sldt c_one (infix_pldt c_one c_one))))
        (infix_lseqdt
          (modulus (infix_asdt (infix_pldt c_one c_one) x))
          (modulus (sin1 (infix_asdt pi1 x))))))))

;; bounded_by_sine_one
(assert
  (forall ((x complex) (k Int))
    (=>
      (<= 0 k)
      (=>
        (real_ x)
        (=>
          (infix_lseqdt
            (modulus (infix_mndt x c_one))
            (infix_sldt c_one (i_to_c (power 2 (+ k 1)))))
          (infix_lseqdt
            (modulus
              (infix_asdt
                (infix_asdt (infix_pldt c_one c_one) (infix_mndt x c_one))
                (i_to_c (power 2 k))))
            (modulus
              (sin1 (infix_asdt (infix_asdt pi1 (i_to_c (power 2 k))) x)))))))))

;; bounded_sine
(assert
  (forall ((x complex))
    (=> (real_ x) (infix_lseqdt (modulus (sin1 x)) (modulus x)))))

;; non_c_zero_sin
(assert
  (forall ((x complex))
    (=>
      (real_ x)
      (=>
        (infix_lsdt c_zero (dec_part x))
        (not (= (sin1 (infix_asdt pi1 x)) c_zero))))))

;; non_c_zero_sin_bounded_mod
(assert
  (forall ((x complex))
    (=>
      (real_ x)
      (=>
        (and (infix_lsdt c_zero (modulus x)) (infix_lsdt (modulus x) c_one))
        (not (= (sin1 (infix_asdt pi1 x)) c_zero))))))

;; non_ang_zero_bounded_mod
(assert
  (forall ((x complex))
    (=>
      (real_ x)
      (=>
        (and (infix_lsdt c_zero (modulus x)) (infix_lsdt (modulus x) c_one))
        (not (= (real_to_ang x) ang_zero))))))

;; non_ang_zero_int_to_ang
(assert
  (forall ((k Int) (n Int))
    (=>
      (<= 0 n)
      (=>
        (not (= (mod k (power 2 n)) 0))
        (not (= (infix_sldtsl k n) ang_zero))))))

;; modulus_ang_exp
(assert (forall ((a angle)) (= (modulus (ang_exp a)) c_one)))

;; ket_zero_y
(declare-fun ket_zero_y (Int) (matrix complex))

;; ket_zero_y'def
(assert (forall ((k Int)) (= (ket_zero_y k) (path_sem (ry k) (ket 1 0)))))

;; ket_zero_y'spec
(assert
  (forall ((k Int))
    (and
      (= (ket_zero_y k) (infix_asdtdt
                          (pow_inv_sqrt_2 2)
                          (add_ket_l
                            (infix_asdtdt
                              (infix_pldt
                                (ang_exp (infix_sldtsl (- 1) (incr_abs k)))
                                (ang_exp (infix_sldtsl 1 (incr_abs k))))
                              (ket 1 0))
                            (infix_asdtdt
                              (infix_asdt
                                im
                                (infix_mndt
                                  (ang_exp (infix_sldtsl (- 1) (incr_abs k)))
                                  (ang_exp (infix_sldtsl 1 (incr_abs k)))))
                              (ket 1 1))
                            1)))
      (= (ket_zero_y k) (add_ket_l
                          (infix_asdtdt
                            (cos_ang (infix_sldtsl 1 (incr_abs k)))
                            (ket 1 0))
                          (infix_asdtdt
                            (sin_ang (infix_sldtsl 1 (incr_abs k)))
                            (ket 1 1))
                          1)))))

;; ket_one_y
(declare-fun ket_one_y (Int) (matrix complex))

;; ket_one_y'def
(assert (forall ((k Int)) (= (ket_one_y k) (path_sem (ry k) (ket 1 1)))))

;; ket_one_y'spec
(assert
  (forall ((k Int))
    (and
      (= (ket_one_y k) (infix_asdtdt
                         (pow_inv_sqrt_2 2)
                         (add_ket_l
                           (infix_asdtdt
                             (infix_asdt
                               (prefix_mndt im)
                               (infix_mndt
                                 (ang_exp (infix_sldtsl (- 1) (incr_abs k)))
                                 (ang_exp (infix_sldtsl 1 (incr_abs k)))))
                             (ket 1 0))
                           (infix_asdtdt
                             (infix_pldt
                               (ang_exp (infix_sldtsl (- 1) (incr_abs k)))
                               (ang_exp (infix_sldtsl 1 (incr_abs k))))
                             (ket 1 1))
                           1)))
      (= (ket_one_y k) (add_ket_l
                         (infix_asdtdt
                           (prefix_mndt
                             (sin_ang (infix_sldtsl 1 (incr_abs k))))
                           (ket 1 0))
                         (infix_asdtdt
                           (cos_ang (infix_sldtsl 1 (incr_abs k)))
                           (ket 1 1))
                         1)))))

;; ket_zero_z
(declare-fun ket_zero_z (Int) (matrix complex))

;; ket_zero_z'def
(assert (forall ((k Int)) (= (ket_zero_z k) (path_sem (rz_ k) (ket 1 0)))))

;; ket_zero_z'spec
(assert
  (forall ((k Int))
    (= (ket_zero_z k) (infix_asdtdt
                        (ang_exp (infix_sldtsl (- 1) (incr_abs k)))
                        (ket 1 0)))))

;; ket_one_z
(declare-fun ket_one_z (Int) (matrix complex))

;; ket_one_z'def
(assert (forall ((k Int)) (= (ket_one_z k) (path_sem (rz_ k) (ket 1 1)))))

;; ket_one_z'spec
(assert
  (forall ((k Int))
    (= (ket_one_z k) (infix_asdtdt
                       (ang_exp (infix_sldtsl 1 (incr_abs k)))
                       (ket 1 1)))))

;; path_sem_ry_add_zero
(assert
  (forall ((k Int)) (= (path_sem (ry (- k)) (ket_zero_y k)) (ket 1 0))))

;; path_sem_ry_add_one
(assert (forall ((k Int)) (= (path_sem (ry (- k)) (ket_one_y k)) (ket 1 1))))

;; path_sem_ry_add
(assert
  (forall ((x (matrix complex)) (k Int))
    (=> (is_a_ket_l x 1) (= (path_sem (ry (- k)) (path_sem (ry k) x)) x))))

;; path_sem_ry_twice_zero
(assert
  (forall ((k Int))
    (= (path_sem (ry (incr_abs k)) (ket_zero_y (incr_abs k))) (ket_zero_y k))))

;; path_sem_ry_twice_one
(assert
  (forall ((k Int))
    (= (path_sem (ry (incr_abs k)) (ket_one_y (incr_abs k))) (ket_one_y k))))

;; path_sem_ry_twice
(assert
  (forall ((x (matrix complex)) (k Int))
    (=>
      (is_a_ket_l x 1)
      (= (path_sem (ry (incr_abs k)) (path_sem (ry (incr_abs k)) x)) 
      (path_sem
        (ry k)
        x)))))

;; ket_zero_inv_y
(assert
  (forall ((k Int)) (= (path_sem_xx (ket_zero_y k)) (ket_one_y (- k)))))

;; ket_one_inv_y
(assert
  (forall ((k Int)) (= (path_sem_xx (ket_one_y k)) (ket_zero_y (- k)))))

;; ket_inv_y
(assert
  (forall ((k Int) (x (matrix complex)))
    (=>
      (is_a_ket_l x 1)
      (= (path_sem_xx (path_sem (ry k) x)) (path_sem
                                             (ry (- k))
                                             (path_sem_xx x))))))

;; ket_inv_y_rev
(assert
  (forall ((k Int) (x (matrix complex)))
    (=>
      (is_a_ket_l x 1)
      (= (path_sem (ry (- k)) (path_sem_xx x)) (path_sem_xx
                                                 (path_sem (ry k) x))))))

;; ket_zero_inv_z
(assert
  (forall ((k Int)) (= (path_sem_xx (ket_zero_z k)) (ket_one_z (- k)))))

;; ket_one_inv_z
(assert
  (forall ((k Int)) (= (path_sem_xx (ket_one_z k)) (ket_zero_z (- k)))))

;; ket_inv_z
(assert
  (forall ((k Int) (x (matrix complex)))
    (=>
      (is_a_ket_l x 1)
      (= (path_sem_xx (path_sem (rz_ k) x)) (path_sem
                                              (rz_ (- k))
                                              (path_sem_xx x))))))

;; ket_inv_z_rev
(assert
  (forall ((k Int) (x (matrix complex)))
    (=>
      (is_a_ket_l x 1)
      (= (path_sem (rz_ (- k)) (path_sem_xx x)) (path_sem_xx
                                                  (path_sem (rz_ k) x))))))

;; contph
(declare-fun contph (Int) circuit2)

;; contph'def
(assert (forall ((k Int)) (= (contph k) (parallel (rz k) id))))

;; contph'spec
(assert
  (forall ((k Int))
    (and
      (= (width (contph k)) 2)
      (and
        (= (range (contph k)) 0)
        (and
          (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
            (=>
              (and (<= 0 i) (< i 2))
              (= (basis_ket (contph k) x y i) (select x i))))
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (= (ang_ind (contph k) x y) (infix_sldtsl (select x 0) k))))))))

;; path_sem_contph_z
(assert
  (forall ((k Int) (bv1 bitvec))
    (=>
      (= (length bv1) 2)
      (=>
        (= (select (value bv1) 0) 0)
        (= (path_sem (contph k) (bv_to_ket bv1)) (bv_to_ket bv1))))))

;; path_sem_contph_o
(assert
  (forall ((k Int) (bv1 bitvec))
    (=>
      (= (length bv1) 2)
      (=>
        (= (select (value bv1) 0) 1)
        (= (path_sem (contph k) (bv_to_ket bv1)) (path_sem
                                                   (place (phase k) 1 2)
                                                   (bv_to_ket bv1)))))))

;; contrz_pre
(declare-fun contrz_pre (Int) circuit2)

;; contrz_pre'def
(assert
  (forall ((k Int))
    (= (contrz_pre k) (sequence
                        (sequence (place (rz (incr_abs k)) 1 2) cnot)
                        (place (rz (- (incr_abs k))) 1 2)))))

;; contrz_pre'spec
(assert
  (forall ((k Int))
    (and
      (= (width (contrz_pre k)) 2)
      (and
        (= (range (contrz_pre k)) 0)
        (and
          (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
            (=>
              (and (<= 0 i) (< i 2))
              (= (basis_ket (contrz_pre k) x y i) (basis_ket cnot x y i))))
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (=>
              (binary_l x 2)
              (= (ang_ind (contrz_pre k) x y) (phase_inv_
                                                (- 1 (select x 1))
                                                (infix_sldtsl
                                                  (select x 0)
                                                  (incr_abs k)))))))))))

;; contrz_
(declare-fun contrz_ (Int) circuit2)

;; contrz_'def
(assert (forall ((k Int)) (= (contrz_ k) (sequence (contrz_pre k) cnot))))

;; contrz_'spec
(assert
  (forall ((k Int))
    (and
      (= (width (contrz_ k)) 2)
      (and
        (= (range (contrz_ k)) 0)
        (and
          (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
            (=>
              (and (<= 0 i) (< i 2))
              (=>
                (binary_l x 2)
                (= (basis_ket (contrz_ k) x y i) (select x i)))))
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (=>
              (binary_l x 2)
              (= (ang_ind (contrz_ k) x y) (phase_inv_
                                             (- 1 (select x 1))
                                             (infix_sldtsl
                                               (select x 0)
                                               (incr_abs k)))))))))))

;; contrz
(declare-fun contrz (Int) circuit2)

;; contrz'def
(assert
  (forall ((k Int))
    (= (contrz k) (sequence (contrz_ k) (contph (incr_abs k))))))

;; contrz'spec
(assert
  (forall ((k Int))
    (and
      (= (width (contrz k)) 2)
      (and
        (= (range (contrz k)) 0)
        (and
          (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
            (=>
              (and (<= 0 i) (< i 2))
              (=>
                (binary_l x 2)
                (= (basis_ket (contrz k) x y i) (select x i)))))
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (=>
              (binary_l x 2)
              (= (ang_ind (contrz k) x y) (infix_sldtsl
                                            (* (select x 0) (select x 1))
                                            k)))))))))

;; path_sem_contrz_z
(assert
  (forall ((k Int) (bv1 bitvec))
    (=>
      (= (length bv1) 2)
      (=>
        (= (select (value bv1) 0) 0)
        (= (path_sem (contrz k) (bv_to_ket bv1)) (bv_to_ket bv1))))))

;; path_sem_contrz_o
(assert
  (forall ((k Int) (bv1 bitvec))
    (=>
      (= (length bv1) 2)
      (=>
        (= (select (value bv1) 0) 1)
        (= (path_sem (contrz k) (bv_to_ket bv1)) (path_sem
                                                   (place (rz k) 1 2)
                                                   (bv_to_ket bv1)))))))

;; contrz1_2
(declare-fun contrz1_2 (Int) circuit2)

;; contrz1_2'def
(assert (forall ((k Int)) (= (contrz1_2 k) (parallel (contrz k) id))))

;; contrz1_2'spec
(assert
  (forall ((k Int))
    (and
      (= (width (contrz1_2 k)) 3)
      (and
        (= (range (contrz1_2 k)) 0)
        (and
          (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
            (=>
              (and (<= 0 i) (< i 2))
              (=>
                (binary_l x 2)
                (= (basis_ket (contrz1_2 k) x y i) (select x i)))))
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (=>
              (binary_l x 3)
              (= (ang_ind (contrz1_2 k) x y) (infix_sldtsl
                                               (* (select x 0) (select x 1))
                                               k)))))))))

;; swap_1_2_in3
(declare-fun swap_1_2_in3 () circuit2)

;; swap_1_2_in3'def
(assert
  (and
    (= (width swap_1_2_in3) 3)
    (and
      (= (range swap_1_2_in3) 0)
      (and
        (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
          (=>
            (and (<= 0 i) (< i 2))
            (= (basis_ket swap_1_2_in3 x y i) (select x (ite (= i 0)
                                                          1
                                                          (ite (= i 1) 0 i))))))
        (and
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (= (ang_ind swap_1_2_in3 x y) (infix_sldtsl 0 1)))
          (forall ((x (matrix complex)) (y (matrix complex)) (z (matrix complex)))
            (=>
              (is_a_ket_l x 1)
              (=>
                (is_a_ket_l y 1)
                (=>
                  (is_a_ket_l z 1)
                  (= (path_sem swap_1_2_in3 (kronecker (kronecker x y) z)) 
                  (kronecker
                    (kronecker y x)
                    z)))))))))))

;; swap_2_3_in3
(declare-fun swap_2_3_in3 () circuit2)

;; swap_2_3_in3'def
(assert
  (and
    (= (width swap_2_3_in3) 3)
    (and
      (= (range swap_2_3_in3) 0)
      (and
        (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
          (=>
            (and (<= 0 i) (< i 2))
            (= (basis_ket swap_2_3_in3 x y i) (select x (ite (= i 0)
                                                          i
                                                          (ite (= i 1) 2 1))))))
        (and
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (= (ang_ind swap_2_3_in3 x y) (infix_sldtsl 0 1)))
          (forall ((x (matrix complex)) (y (matrix complex)) (z (matrix complex)))
            (=>
              (is_a_ket_l x 1)
              (=>
                (is_a_ket_l y 1)
                (=>
                  (is_a_ket_l z 1)
                  (= (path_sem swap_2_3_in3 (kronecker (kronecker x y) z)) 
                  (kronecker
                    (kronecker x z)
                    y)))))))))))

;; contrz1_3
(declare-fun contrz1_3 (Int) circuit2)

;; contrz1_3'def
(assert (forall ((k Int)) (= (contrz1_3 k) (insert_qbits (contrz k) 1 2 1))))

;; contrz1_3'spec
(assert
  (forall ((k Int))
    (and
      (= (width (contrz1_3 k)) 3)
      (and
        (= (range (contrz1_3 k)) 0)
        (and
          (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
            (=>
              (and (<= 0 i) (< i 3))
              (=>
                (binary_l x 3)
                (= (basis_ket (contrz1_3 k) x y i) (select x i)))))
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (=>
              (binary_l x 3)
              (= (ang_ind (contrz1_3 k) x y) (infix_sldtsl
                                               (* (select x 0) (select x 2))
                                               k)))))))))

;; contrz2_3
(declare-fun contrz2_3 (Int) circuit2)

;; contrz2_3'def
(assert (forall ((k Int)) (= (contrz2_3 k) (parallel id (contrz k)))))

;; contrz2_3'spec
(assert
  (forall ((k Int))
    (and
      (= (width (contrz2_3 k)) 3)
      (and
        (= (range (contrz2_3 k)) 0)
        (and
          (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
            (=>
              (and (<= 0 i) (< i 3))
              (=>
                (binary_l x 3)
                (= (basis_ket (contrz2_3 k) x y i) (select x i)))))
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (=>
              (binary_l x 3)
              (= (ang_ind (contrz2_3 k) x y) (infix_sldtsl
                                               (* (select x 1) (select x 2))
                                               k)))))))))

;; contrz_xor_3
(declare-fun contrz_xor_3 (Int) circuit2)

;; contrz_xor_3'spec
(assert
  (forall ((k Int))
    (and
      (= (width (contrz_xor_3 k)) 3)
      (and
        (= (range (contrz_xor_3 k)) 0)
        (and
          (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
            (=>
              (and (<= 0 i) (< i 3))
              (=>
                (binary_l x 3)
                (= (basis_ket (contrz_xor_3 k) x y i) (select x i)))))
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (=>
              (binary_l x 3)
              (= (ang_ind (contrz_xor_3 k) x y) (infix_sldtsl
                                                  (* (+ (* (select x 0) (- 1 (select x 1))) (* (select x 1) (- 1 (select x 0)))) (select x 2))
                                                  k)))))))))

;; path_sem_xx_plus
(assert
  (= (path_sem_xx (pps_apply pps_hadamard (ket 1 0))) (pps_apply
                                                        pps_hadamard
                                                        (ket 1 0))))

;; path_sem_xx_minus
(assert
  (= (path_sem_xx (pps_apply pps_hadamard (ket 1 1))) (infix_asdtdt
                                                        (prefix_mndt c_one)
                                                        (pps_apply
                                                          pps_hadamard
                                                          (ket 1 1)))))

;; ket_zero_y2
(assert
  (and
    (= (ket_zero_y 2) (pps_apply pps_hadamard (ket 1 0)))
    (= (ket_zero_y 2) (path_sem_xx (pps_apply pps_hadamard (ket 1 0))))))

;; ket_one_y2
(assert
  (and
    (= (ket_one_y 2) (infix_asdtdt
                       (prefix_mndt c_one)
                       (pps_apply pps_hadamard (ket 1 1))))
    (= (ket_one_y 2) (path_sem_xx (pps_apply pps_hadamard (ket 1 1))))))

;; contry_pre_
(declare-fun contry_pre_ (Int
  (matrix complex)) circuit2)

;; contry_pre_'def
(assert
  (forall ((k Int) (y (matrix complex)))
    (=>
      (is_a_ket_l y 1)
      (= (contry_pre_ k y) (sequence
                             (sequence
                               (place (ry (- (incr_abs k))) 1 2)
                               cnot)
                             (place (ry (incr_abs k)) 1 2))))))

;; contry_pre_'spec
(assert
  (forall ((k Int) (y (matrix complex)))
    (=>
      (is_a_ket_l y 1)
      (and
        (= (path_sem (contry_pre_ k y) (kronecker (ket 1 0) y)) (kronecker
                                                                  (ket 1 0)
                                                                  y))
        (and
          (= (path_sem (contry_pre_ k y) (kronecker (ket 1 1) y)) (kronecker
                                                                    (ket 1 1)
                                                                    (path_sem
                                                                    (ry k)
                                                                    (path_sem_xx
                                                                    y))))
          (= (width (contry_pre_ k y)) 2))))))

;; contry_pre
(declare-fun contry_pre (Int) circuit2)

;; contry_pre'def
(assert
  (forall ((k Int))
    (= (contry_pre k) (sequence
                        (sequence (place (ry (- (incr_abs k))) 1 2) cnot)
                        (place (ry (incr_abs k)) 1 2)))))

;; contry_pre'spec
(assert
  (forall ((k Int))
    (and
      (forall ((y (matrix complex)))
        (=>
          (is_a_ket_l y 1)
          (= (path_sem (contry_pre k) (kronecker (ket 1 0) y)) (kronecker
                                                                 (ket 1 0)
                                                                 y))))
      (and
        (forall ((y (matrix complex)))
          (=>
            (is_a_ket_l y 1)
            (= (path_sem (contry_pre k) (kronecker (ket 1 1) y)) (kronecker
                                                                   (ket 1 1)
                                                                   (path_sem
                                                                    (ry k)
                                                                    (path_sem_xx
                                                                    y))))))
        (= (width (contry_pre k)) 2)))))

;; contry
(declare-fun contry (Int) circuit2)

;; contry'def
(assert (forall ((k Int)) (= (contry k) (sequence (contry_pre k) cnot))))

;; contry'spec
(assert
  (forall ((k Int))
    (and
      (forall ((y (matrix complex)))
        (=>
          (is_a_ket_l y 1)
          (= (path_sem (contry k) (kronecker (ket 1 0) y)) (kronecker
                                                             (ket 1 0)
                                                             y))))
      (and
        (forall ((y (matrix complex)))
          (=>
            (is_a_ket_l y 1)
            (= (path_sem (contry k) (kronecker (ket 1 1) y)) (kronecker
                                                               (ket 1 1)
                                                               (path_sem
                                                                 (ry (- k))
                                                                 y)))))
        (= (width (contry k)) 2)))))

;; conth
(declare-fun conth () circuit2)

;; conth'def
(assert
  (and
    (= (path_sem conth (kronecker (ket 1 0) (ket 1 0))) (kronecker
                                                          (ket 1 0)
                                                          (ket 1 0)))
    (and
      (= (path_sem conth (kronecker (ket 1 0) (ket 1 1))) (kronecker
                                                            (ket 1 0)
                                                            (ket 1 1)))
      (and
        (= (path_sem conth (kronecker (ket 1 1) (ket 1 0))) (kronecker
                                                              (ket 1 1)
                                                              (pps_apply
                                                                pps_hadamard
                                                                (ket 1 0))))
        (and
          (= (path_sem conth (kronecker (ket 1 1) (ket 1 1))) (kronecker
                                                                (ket 1 1)
                                                                (pps_apply
                                                                  pps_hadamard
                                                                  (ket 1 1))))
          (= (width conth) 2))))))

;; conth_z
(assert
  (forall ((z (matrix complex)))
    (=>
      (is_a_ket_l z 1)
      (= (path_sem conth (kronecker (ket 1 0) z)) (kronecker (ket 1 0) z)))))

;; conth_o
(assert
  (forall ((z (matrix complex)))
    (=>
      (is_a_ket_l z 1)
      (= (path_sem conth (kronecker (ket 1 1) z)) (kronecker
                                                    (ket 1 1)
                                                    (path_sem hadamard z))))))

;; conth1_3
(declare-fun conth1_3 () circuit2)

;; conth1_3'def
(assert
  (and
    (forall ((y (matrix complex)) (z (matrix complex)))
      (=>
        (is_a_ket_l y 1)
        (=>
          (is_a_ket_l z 1)
          (= (path_sem conth1_3 (kronecker (kronecker (ket 1 0) y) z)) 
          (kronecker
            (kronecker (ket 1 0) y)
            z)))))
    (forall ((y (matrix complex)) (z (matrix complex)))
      (=>
        (is_a_ket_l y 1)
        (=>
          (is_a_ket_l z 1)
          (= (path_sem conth1_3 (kronecker (kronecker (ket 1 1) y) z)) 
          (kronecker
            (kronecker (ket 1 1) y)
            (path_sem hadamard z))))))))

;; ccz
(declare-fun ccz () circuit2)

;; ccz'def
(assert
  (and
    (= (width ccz) 3)
    (and
      (= (range ccz) 0)
      (and
        (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
          (=>
            (and (<= 0 i) (< i 3))
            (=> (binary_l x 3) (= (basis_ket ccz x y i) (select x i)))))
        (and
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (=>
              (binary_l x 3)
              (= (ang_ind ccz x y) (infix_sldtsl
                                     (* (* (select x 0) (select x 1)) (select x 2))
                                     1))))
          (forall ((x (matrix complex)) (y (matrix complex)) (z (matrix complex)))
            (=>
              (is_a_ket_l x 1)
              (=>
                (is_a_ket_l y 1)
                (=>
                  (is_a_ket_l z 1)
                  (=>
                    (is_a_ket_basis_elt x)
                    (=>
                      (is_a_ket_basis_elt y)
                      (=>
                        (is_a_ket_basis_elt z)
                        (= (path_sem ccz (kronecker (kronecker x y) z)) 
                        (kronecker
                          (kronecker x y)
                          (infix_asdtdt
                            (cpower
                              (prefix_mndt c_one)
                              (* (* (ket_to_int x) (ket_to_int y)) (ket_to_int
                                                                    z)))
                            z)))))))))))))))

;; ccz_cont_null
(assert
  (forall ((x (matrix complex)) (y (matrix complex)) (z (matrix complex)))
    (=>
      (is_a_ket_l x 1)
      (=>
        (is_a_ket_l y 1)
        (=>
          (is_a_ket_l z 1)
          (=>
            (is_a_ket_basis_elt x)
            (=>
              (is_a_ket_basis_elt y)
              (=>
                (not (= (* (ket_to_int x) (ket_to_int y)) 1))
                (= (path_sem ccz (kronecker (kronecker x y) z)) (kronecker
                                                                  (kronecker
                                                                    x
                                                                    y)
                                                                  z))))))))))

;; ccz_had_basis
(assert
  (and
    (forall ((x (matrix complex)) (y (matrix complex)))
      (=>
        (is_a_ket_l x 1)
        (=>
          (is_a_ket_l y 1)
          (=>
            (is_a_ket_basis_elt x)
            (=>
              (is_a_ket_basis_elt y)
              (=>
                (= (* (ket_to_int x) (ket_to_int y)) 1)
                (= (path_sem
                     ccz
                     (kronecker
                       (kronecker x y)
                       (pps_apply pps_hadamard (ket 1 0)))) (kronecker
                                                              (kronecker x y)
                                                              (pps_apply
                                                                pps_hadamard
                                                                (ket 1 1))))))))))
    (forall ((x (matrix complex)) (y (matrix complex)))
      (=>
        (is_a_ket_l x 1)
        (=>
          (is_a_ket_l y 1)
          (=>
            (is_a_ket_basis_elt x)
            (=>
              (is_a_ket_basis_elt y)
              (=>
                (= (* (ket_to_int x) (ket_to_int y)) 1)
                (= (path_sem
                     ccz
                     (kronecker
                       (kronecker x y)
                       (pps_apply pps_hadamard (ket 1 1)))) (kronecker
                                                              (kronecker x y)
                                                              (pps_apply
                                                                pps_hadamard
                                                                (ket 1 0))))))))))))

;; toffoli
(declare-fun toffoli () circuit2)

;; toffoli'def
(assert
  (and
    (= (width toffoli) 3)
    (and
      (forall ((x (matrix complex)) (y (matrix complex)) (z (matrix complex)))
        (=>
          (is_a_ket_l x 1)
          (=>
            (is_a_ket_l y 1)
            (=>
              (is_a_ket_l z 1)
              (=>
                (is_a_ket_basis_elt x)
                (=>
                  (is_a_ket_basis_elt y)
                  (=>
                    (is_a_ket_basis_elt z)
                    (= (path_sem toffoli (kronecker (kronecker x y) z)) 
                    (kronecker
                      (kronecker x y)
                      (ket
                        1
                        (mod (+ (ket_to_int z) (* (ket_to_int x) (ket_to_int
                                                                   y))) 2)))))))))))
      (and
        (forall ((bv1 bitvec))
          (=>
            (= (length bv1) 3)
            (=>
              (= (select (value bv1) 0) 0)
              (= (path_sem toffoli (bv_to_ket bv1)) (bv_to_ket bv1)))))
        (forall ((bv1 bitvec))
          (=>
            (= (length bv1) 3)
            (=>
              (= (select (value bv1) 0) 1)
              (= (path_sem toffoli (bv_to_ket bv1)) (path_sem
                                                      (place cnot 1 3)
                                                      (bv_to_ket bv1))))))))))

;; toffoli_cont_1_3
(declare-fun toffoli_cont_1_3 () circuit2)

;; toffoli_cont_1_3'def
(assert
  (and
    (= (width toffoli_cont_1_3) 3)
    (forall ((x (matrix complex)) (y (matrix complex)) (z (matrix complex)))
      (=>
        (is_a_ket_l x 1)
        (=>
          (is_a_ket_l y 1)
          (=>
            (is_a_ket_l z 1)
            (=>
              (is_a_ket_basis_elt x)
              (=>
                (is_a_ket_basis_elt y)
                (=>
                  (is_a_ket_basis_elt z)
                  (= (path_sem
                       toffoli_cont_1_3
                       (kronecker (kronecker x y) z)) (kronecker
                                                        (kronecker
                                                          x
                                                          (ket
                                                            1
                                                            (mod (+ (ket_to_int
                                                                    y) (* 
                                                            (ket_to_int
                                                              x) (ket_to_int
                                                                   z))) 2)))
                                                        z)))))))))))

;; toffoli_cont_1_3_id
(assert
  (forall ((bv1 bitvec))
    (=>
      (= (length bv1) 3)
      (=>
        (=> (= (select (value bv1) 0) 1) (= (select (value bv1) 2) 0))
        (= (path_sem toffoli_cont_1_3 (bv_to_ket bv1)) (bv_to_ket bv1))))))

;; fredkin
(declare-fun fredkin () circuit2)

;; fredkin'def
(assert
  (and
    (= (width fredkin) 3)
    (and
      (forall ((x (matrix complex)) (y (matrix complex)) (z (matrix complex)))
        (=>
          (is_a_ket_l x 1)
          (=>
            (is_a_ket_l y 1)
            (=>
              (is_a_ket_l z 1)
              (=>
                (is_a_ket_basis_elt x)
                (=>
                  (is_a_ket_basis_elt y)
                  (=>
                    (is_a_ket_basis_elt z)
                    (= (path_sem fredkin (kronecker (kronecker x y) z)) 
                    (ite (= x (ket 1 0))
                      (kronecker (kronecker x y) z)
                      (kronecker (kronecker x z) y))))))))))
      (and
        (forall ((bv1 bitvec))
          (=>
            (= (length bv1) 3)
            (=>
              (= (select (value bv1) 0) 0)
              (= (path_sem fredkin (bv_to_ket bv1)) (bv_to_ket bv1)))))
        (forall ((bv1 bitvec))
          (=>
            (= (length bv1) 3)
            (=>
              (= (select (value bv1) 0) 1)
              (= (path_sem fredkin (bv_to_ket bv1)) (path_sem
                                                      (place swap 1 3)
                                                      (bv_to_ket bv1))))))))))

;; notc
(declare-fun notc () circuit2)

;; notc'def
(assert
  (and
    (= (range notc) 0)
    (and
      (= (width notc) 2)
      (and
        (forall ((x (Array Int Int)) (y (Array Int Int)))
          (forall ((i Int))
            (=>
              (binary_l x 2)
              (=> (= i 1) (= (basis_ket notc x y i) (select x i))))))
        (and
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (forall ((i Int))
              (=>
                (binary_l x 2)
                (=>
                  (= i 0)
                  (= (basis_ket notc x y i) (+ (* (select x 0) (- 1 (select x 1))) (* (select x 1) (- 1 (select x 0)))))))))
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (= (ang_ind notc x y) ang_zero)))))))

;; place_cnot
(declare-fun place_cnot (Int
  Int
  Int) circuit2)

;; place_cnot'spec
(assert
  (forall ((c Int) (t Int) (n Int))
    (=>
      (and (<= 0 c) (< c n))
      (=>
        (and (<= 0 t) (< t n))
        (=>
          (not (= c t))
          (and
            (= (width (place_cnot c t n)) n)
            (and
              (= (range (place_cnot c t n)) 0)
              (and
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (= (ang_ind (place_cnot c t n) x y) ang_zero))
                (and
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (forall ((i Int))
                      (=>
                        (and (<= 0 i) (< i n))
                        (=>
                          (binary_l x n)
                          (=>
                            (not (= i t))
                            (= (basis_ket (place_cnot c t n) x y i) (select x i)))))))
                  (and
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (forall ((i Int))
                        (=>
                          (and (<= 0 i) (< i n))
                          (=>
                            (binary_l x n)
                            (=>
                              (= i t)
                              (= (basis_ket (place_cnot c t n) x y i) (+ (* (select x c) (- 1 (select x t))) (* (- 1 (select x c)) (select x t)))))))))
                    (correct_path_sum_ (place_cnot c t n) (pps_cnot c t n))))))))))))

;; cont_zero
(declare-fun cont_zero (circuit2) circuit2)

;; cont_zero'spec
(assert
  (forall ((c circuit2))
    (and
      (= (width (cont_zero c)) (+ (width c) 1))
      (and
        (forall ((bv1 bitvec))
          (=>
            (= (length bv1) (+ (width c) 1))
            (=>
              (= (select (value bv1) 0) 0)
              (= (path_sem (cont_zero c) (bv_to_ket bv1)) (bv_to_ket bv1)))))
        (and
          (forall ((bv1 bitvec))
            (=>
              (= (length bv1) (+ (width c) 1))
              (=>
                (= (select (value bv1) 0) 1)
                (= (path_sem (cont_zero c) (bv_to_ket bv1)) (path_sem
                                                              (place
                                                                c
                                                                1
                                                                (+ (width c) 1))
                                                              (bv_to_ket bv1))))))
          (and
            (forall ((x (matrix complex)))
              (=>
                (is_a_ket_l x (width c))
                (= (path_sem (cont_zero c) (kronecker (ket 1 0) x)) (kronecker
                                                                    (ket 1 0)
                                                                    x))))
            (forall ((x (matrix complex)))
              (=>
                (is_a_ket_l x (width c))
                (= (path_sem (cont_zero c) (kronecker (ket 1 1) x)) (kronecker
                                                                    (ket 1 1)
                                                                    (path_sem
                                                                    c
                                                                    x)))))))))))

;; cont_zero_path_sem_kron
(assert
  (forall ((c circuit2) (x bitvec))
    (=>
      (= (length x) (width c))
      (and
        (= (path_sem (cont_zero c) (kronecker (ket 1 0) (bv_to_ket x))) 
        (kronecker
          (ket 1 0)
          (bv_to_ket x)))
        (= (path_sem (cont_zero c) (kronecker (ket 1 1) (bv_to_ket x))) 
        (kronecker
          (ket 1 1)
          (path_sem c (bv_to_ket x))))))))

;; cont_zero_sem_kron'spec
(assert
  (forall ((c circuit2))
    (and
      (= (width (cont_zero c)) (+ (width c) 1))
      (and
        (forall ((x (matrix complex)) (y (matrix complex)))
          (=>
            (sem c x y)
            (sem
              (cont_zero c)
              (kronecker (ket 1 1) x)
              (kronecker (ket 1 1) y))))
        (forall ((x (matrix complex)))
          (=>
            (is_a_ket_l x (width c))
            (sem
              (cont_zero c)
              (kronecker (ket 1 0) x)
              (kronecker (ket 1 0) x))))))))

;; cont_last_qbit
(declare-fun cont_last_qbit (circuit2) circuit2)

;; result
(declare-fun result68 (circuit2) (Array Int Int))

;; result'def
(assert
  (forall ((c circuit2) (i Int))
    (= (select (result68 c) i) (ite (< i 1) (+ i (width c)) (- i 1)))))

;; cont_last_qbit'def
(assert
  (forall ((c circuit2))
    (= (cont_last_qbit c) (with_permutation (cont_zero c) (result68 c)))))

;; cont_last_qbit'spec
(assert
  (forall ((c circuit2))
    (and
      (= (width (cont_last_qbit c)) (+ (width c) 1))
      (and
        (forall ((bv1 bitvec))
          (=>
            (= (length bv1) (width c))
            (= (path_sem
                 (cont_last_qbit c)
                 (kronecker (bv_to_ket bv1) (ket 1 0))) (kronecker
                                                          (bv_to_ket bv1)
                                                          (ket 1 0)))))
        (and
          (forall ((bv1 bitvec))
            (=>
              (= (length bv1) (width c))
              (= (path_sem
                   (cont_last_qbit c)
                   (kronecker (bv_to_ket bv1) (ket 1 1))) (kronecker
                                                            (path_sem
                                                              c
                                                              (bv_to_ket bv1))
                                                            (ket 1 1)))))
          (and
            (forall ((bv1 bitvec))
              (=>
                (= (length bv1) (+ (width c) 1))
                (=>
                  (= (select (value bv1) (width c)) 0)
                  (= (path_sem (cont_last_qbit c) (bv_to_ket bv1)) (bv_to_ket
                                                                    bv1)))))
            (forall ((bv1 bitvec))
              (=>
                (= (length bv1) (+ (width c) 1))
                (=>
                  (= (select (value bv1) (width c)) 1)
                  (= (path_sem (cont_last_qbit c) (bv_to_ket bv1)) (path_sem
                                                                    (place
                                                                    c
                                                                    0
                                                                    (+ 
                                                                    (width
                                                                    c) 1))
                                                                    (bv_to_ket
                                                                    bv1))))))))))))

;; cont_last_qbit_kron'spec
(assert
  (forall ((c circuit2))
    (and
      (= (width (cont_last_qbit c)) (+ (width c) 1))
      (and
        (forall ((x (matrix complex)) (y (matrix complex)))
          (=>
            (sem c x y)
            (sem
              (cont_last_qbit c)
              (kronecker x (ket 1 1))
              (kronecker y (ket 1 1)))))
        (forall ((x (matrix complex)))
          (=>
            (is_a_ket_l x (width c))
            (sem
              (cont_last_qbit c)
              (kronecker x (ket 1 0))
              (kronecker x (ket 1 0)))))))))

;; cont_zero_gen
(declare-fun cont_zero_gen (circuit2
  Int
  Int) circuit2)

;; cont_zero_gen'def
(assert
  (forall ((c circuit2) (k Int) (n Int))
    (=>
      (and (<= 1 k) (<= k (- n (width c))))
      (= (cont_zero_gen c k n) (cont_zero (place c (- k 1) (- n 1)))))))

;; cont_zero_gen'spec
(assert
  (forall ((c circuit2) (k Int) (n Int))
    (=>
      (and (<= 1 k) (<= k (- n (width c))))
      (and
        (= (width (cont_zero_gen c k n)) n)
        (and
          (forall ((bv1 bitvec))
            (=>
              (= (length bv1) n)
              (=>
                (= (select (value bv1) 0) 0)
                (= (path_sem (cont_zero_gen c k n) (bv_to_ket bv1)) (bv_to_ket
                                                                    bv1)))))
          (forall ((bv1 bitvec))
            (=>
              (= (length bv1) n)
              (=>
                (= (select (value bv1) 0) 1)
                (= (path_sem (cont_zero_gen c k n) (bv_to_ket bv1)) (path_sem
                                                                    (place
                                                                    c
                                                                    k
                                                                    n)
                                                                    (bv_to_ket
                                                                    bv1)))))))))))

;; cont_before
(declare-fun cont_before (circuit2
  Int
  Int
  Int) circuit2)

;; cont_before'def
(assert
  (forall ((c circuit2) (co Int) (k Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 k) (<= k (- n (width c))))
        (=>
          (< co k)
          (= (cont_before c co k n) (place
                                      (cont_zero_gen c (- k co) (- n co))
                                      co
                                      n)))))))

;; cont_before'spec
(assert
  (forall ((c circuit2) (co Int) (k Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 k) (<= k (- n (width c))))
        (=>
          (< co k)
          (and
            (= (width (cont_before c co k n)) n)
            (and
              (forall ((bv1 bitvec))
                (=>
                  (= (length bv1) n)
                  (=>
                    (= (select (value bv1) co) 0)
                    (= (path_sem (cont_before c co k n) (bv_to_ket bv1)) 
                    (bv_to_ket
                      bv1)))))
              (forall ((bv1 bitvec))
                (=>
                  (= (length bv1) n)
                  (=>
                    (= (select (value bv1) co) 1)
                    (= (path_sem (cont_before c co k n) (bv_to_ket bv1)) 
                    (path_sem
                      (place c k n)
                      (bv_to_ket bv1)))))))))))))

;; cont_last_gen
(declare-fun cont_last_gen (circuit2
  Int
  Int) circuit2)

;; cont_last_gen'def
(assert
  (forall ((c circuit2) (k Int) (co Int))
    (=>
      (and (<= 0 k) (<= k (- co (width c))))
      (= (cont_last_gen c k co) (cont_last_qbit (place c k co))))))

;; cont_last_gen'spec
(assert
  (forall ((c circuit2) (k Int) (co Int))
    (=>
      (and (<= 0 k) (<= k (- co (width c))))
      (and
        (= (width (cont_last_gen c k co)) (+ co 1))
        (and
          (forall ((bv1 bitvec))
            (=>
              (= (length bv1) (+ co 1))
              (=>
                (= (select (value bv1) co) 0)
                (= (path_sem (cont_last_gen c k co) (bv_to_ket bv1)) 
                (bv_to_ket
                  bv1)))))
          (forall ((bv1 bitvec))
            (=>
              (= (length bv1) (+ co 1))
              (=>
                (= (select (value bv1) co) 1)
                (= (path_sem (cont_last_gen c k co) (bv_to_ket bv1)) 
                (path_sem
                  (place c k (+ co 1))
                  (bv_to_ket bv1)))))))))))

;; cont_after
(declare-fun cont_after (circuit2
  Int
  Int
  Int) circuit2)

;; cont_after'def
(assert
  (forall ((c circuit2) (co Int) (k Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (<= 0 k)
        (=>
          (<= (+ k (width c)) co)
          (= (cont_after c co k n) (place (cont_last_gen c k co) 0 n)))))))

;; cont_after'spec
(assert
  (forall ((c circuit2) (co Int) (k Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (<= 0 k)
        (=>
          (<= (+ k (width c)) co)
          (and
            (= (width (cont_after c co k n)) n)
            (and
              (forall ((bv1 bitvec))
                (=>
                  (= (length bv1) n)
                  (=>
                    (= (select (value bv1) co) 0)
                    (= (path_sem (cont_after c co k n) (bv_to_ket bv1)) 
                    (bv_to_ket
                      bv1)))))
              (forall ((bv1 bitvec))
                (=>
                  (= (length bv1) n)
                  (=>
                    (= (select (value bv1) co) 1)
                    (= (path_sem (cont_after c co k n) (bv_to_ket bv1)) 
                    (path_sem
                      (place c k n)
                      (bv_to_ket bv1)))))))))))))

;; cont
(declare-fun cont (circuit2
  Int
  Int
  Int) circuit2)

;; cont'def
(assert
  (forall ((c circuit2) (co Int) (k Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 k) (<= k (- n (width c))))
        (=>
          (=> (<= k co) (<= (+ k (width c)) co))
          (ite (< co k)
            (= (cont c co k n) (cont_before c co k n))
            (= (cont c co k n) (cont_after c co k n))))))))

;; cont'spec
(assert
  (forall ((c circuit2) (co Int) (k Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 k) (<= k (- n (width c))))
        (=>
          (=> (<= k co) (<= (+ k (width c)) co))
          (and
            (= (width (cont c co k n)) n)
            (and
              (forall ((bv1 bitvec))
                (=>
                  (= (length bv1) n)
                  (=>
                    (= (select (value bv1) co) 0)
                    (= (path_sem (cont c co k n) (bv_to_ket bv1)) (bv_to_ket
                                                                    bv1)))))
              (forall ((bv1 bitvec))
                (=>
                  (= (length bv1) n)
                  (=>
                    (= (select (value bv1) co) 1)
                    (= (path_sem (cont c co k n) (bv_to_ket bv1)) (path_sem
                                                                    (place
                                                                    c
                                                                    k
                                                                    n)
                                                                    (bv_to_ket
                                                                    bv1)))))))))))))

;; cont_circ_to_pps
(assert
  (forall ((c circuit2) (co Int) (k Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 k) (<= k (- n (width c))))
        (=>
          (=> (<= k co) (<= (+ k (width c)) co))
          (correct_path_sum_
            (cont c co k n)
            (pps_cont (circ_to_pps c) co k n)))))))

;; cont_pps
(assert
  (forall ((c circuit2) (h pps) (co Int) (k Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 k) (<= k (- n (width c))))
        (=>
          (=> (<= k co) (<= (+ k (width c)) co))
          (=>
            (correct_path_sum_ c h)
            (correct_path_sum_ (cont c co k n) (pps_cont h co k n))))))))

;; path_cont
(assert
  (forall ((c circuit2) (co Int) (k Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 k) (<= k (- n (width c))))
        (=>
          (=> (<= k co) (<= (+ k (width c)) co))
          (and
            (forall ((bv1 bitvec))
              (=>
                (= (length bv1) n)
                (=>
                  (= (select (value bv1) co) 0)
                  (= (path_sem (cont c co k n) (bv_to_ket bv1)) (bv_to_ket
                                                                  bv1)))))
            (forall ((bv1 bitvec))
              (=>
                (= (length bv1) n)
                (=>
                  (= (select (value bv1) co) 1)
                  (= (path_sem (cont c co k n) (bv_to_ket bv1)) (path_sem
                                                                  (place
                                                                    c
                                                                    k
                                                                    n)
                                                                  (bv_to_ket
                                                                    bv1))))))))))))

;; path_cont_ketz
(assert
  (forall ((c circuit2) (co Int) (k Int) (n Int) (x (matrix complex)))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 k) (<= k (- n (width c))))
        (=>
          (=> (<= k co) (<= (+ k (width c)) co))
          (=>
            (is_a_ket_l x n)
            (=>
              (is_a_ket_basis_elt x)
              (=>
                (= (select (value (ket_to_bv x)) co) 0)
                (= (path_sem (cont c co k n) x) x)))))))))

;; path_cont_keto
(assert
  (forall ((c circuit2) (co Int) (k Int) (n Int) (x (matrix complex)))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 k) (<= k (- n (width c))))
        (=>
          (=> (<= k co) (<= (+ k (width c)) co))
          (=>
            (is_a_ket_l x n)
            (=>
              (is_a_ket_basis_elt x)
              (=>
                (= (select (value (ket_to_bv x)) co) 1)
                (= (path_sem (cont c co k n) x) (path_sem (place c k n) x))))))))))

;; path_cont_ketz_gen
(assert
  (forall ((c circuit2) (co Int) (k Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 k) (<= k (- n (width c))))
        (=>
          (=> (<= k co) (<= (+ k (width c)) co))
          (forall ((x (matrix complex)))
            (=>
              (is_a_ket_l x n)
              (=>
                (is_a_ket_basis_elt x)
                (=>
                  (= (select (value (ket_to_bv x)) co) 0)
                  (= (path_sem (cont c co k n) x) x))))))))))

;; path_cont_keto_gen
(assert
  (forall ((c circuit2) (co Int) (k Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 k) (<= k (- n (width c))))
        (=>
          (=> (<= k co) (<= (+ k (width c)) co))
          (forall ((x (matrix complex)))
            (=>
              (is_a_ket_l x n)
              (=>
                (is_a_ket_basis_elt x)
                (=>
                  (= (select (value (ket_to_bv x)) co) 1)
                  (= (path_sem (cont c co k n) x) (path_sem (place c k n) x)))))))))))

;; cont_kron_left_bv_to_ket
(assert
  (forall ((c circuit2) (n Int) (x (matrix complex)))
    (=>
      (and (<= 0 (width c)) (= (width c) (- n 1)))
      (=>
        (is_a_ket_l x (width c))
        (and
          (forall ((y bitvec))
            (=>
              (= (length y) 1)
              (=>
                (= (select (value y) 0) 0)
                (= (path_sem
                     (cont c (- n 1) 0 n)
                     (kronecker x (bv_to_ket y))) (kronecker x (bv_to_ket y))))))
          (forall ((y bitvec))
            (=>
              (= (length y) 1)
              (=>
                (= (select (value y) 0) 1)
                (= (path_sem
                     (cont c (- n 1) 0 n)
                     (kronecker x (bv_to_ket y))) (kronecker
                                                    (path_sem c x)
                                                    (bv_to_ket y)))))))))))

;; place_kron_left_path
(assert
  (forall ((c circuit2) (n Int))
    (=>
      (< (width c) n)
      (forall ((x (matrix complex)) (y (matrix complex)))
        (=>
          (is_a_ket_l x (width c))
          (=>
            (is_a_ket_l y (- n (width c)))
            (= (path_sem (place c 0 n) (kronecker x y)) (kronecker
                                                          (path_sem c x)
                                                          y))))))))

;; place_kron_left_sem
(assert
  (forall ((c circuit2) (n Int))
    (=>
      (< (width c) n)
      (forall ((x (matrix complex)) (y (matrix complex)) (z (matrix complex)))
        (=>
          (is_a_ket_l y (- n (width c)))
          (=>
            (sem c x z)
            (sem (place c 0 n) (kronecker x y) (kronecker z y))))))))

;; cont_kron_pat_right
(assert
  (forall ((c circuit2) (co Int) (k Int) (n Int) (y (matrix complex)))
    (=>
      (and (<= 0 co) (< co k))
      (=>
        (= n (+ k (width c)))
        (=>
          (is_a_ket_l y (width c))
          (and
            (forall ((x (matrix complex)))
              (=>
                (is_a_ket_basis_elt x)
                (=>
                  (is_a_ket_l x k)
                  (=>
                    (= (select (value (ket_to_bv x)) co) 0)
                    (= (path_sem (cont c co k n) (kronecker x y)) (kronecker
                                                                    x
                                                                    y))))))
            (forall ((x (matrix complex)))
              (=>
                (is_a_ket_basis_elt x)
                (=>
                  (is_a_ket_l x k)
                  (=>
                    (= (select (value (ket_to_bv x)) co) 1)
                    (= (path_sem (cont c co k n) (kronecker x y)) (kronecker
                                                                    x
                                                                    (path_sem
                                                                    c
                                                                    y)))))))))))))

;; cont_kron_pat_right_gen
(assert
  (forall ((circ circuit2) (c Int) (k Int) (n Int))
    (=>
      (and (<= 0 c) (< c k))
      (=>
        (= n (+ k (width circ)))
        (and
          (forall ((y (matrix complex)))
            (forall ((x bitvec))
              (=>
                (is_a_ket_l y (width circ))
                (=>
                  (= (length x) k)
                  (=>
                    (= (select (value x) c) 0)
                    (= (path_sem
                         (cont circ c k n)
                         (kronecker (bv_to_ket x) y)) (kronecker
                                                        (bv_to_ket x)
                                                        y)))))))
          (forall ((y (matrix complex)))
            (forall ((x bitvec))
              (=>
                (is_a_ket_l y (width circ))
                (=>
                  (= (length x) k)
                  (=>
                    (= (select (value x) c) 1)
                    (= (path_sem
                         (cont circ c k n)
                         (kronecker (bv_to_ket x) y)) (kronecker
                                                        (bv_to_ket x)
                                                        (path_sem circ y)))))))))))))

;; size_cont
(assert
  (forall ((c circuit2) (co Int) (k Int) (n Int) (s Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 k) (<= k (- n (width c))))
        (=>
          (=> (<= k co) (<= (+ k (width c)) co))
          (=> (<= (size c) s) (<= (size (cont c co k n)) (* cont_size s))))))))

;; place_xx
(declare-fun place_xx (Int
  Int) circuit2)

;; place_xx'def
(assert
  (forall ((t Int) (n Int))
    (=> (and (<= 0 t) (< t n)) (= (place_xx t n) (place xx t n)))))

;; fc
(declare-fun fc597 (Int
  bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((t Int) (bv1 bitvec) (i Int))
    (= (select (fc597 t bv1) i) (ite (= i t)
                                  (- 1 (select (value bv1) i))
                                  (select (value bv1) i)))))

;; place_xx'spec
(assert
  (forall ((t Int) (n Int))
    (=>
      (and (<= 0 t) (< t n))
      (and
        (= (width (place_xx t n)) n)
        (and
          (forall ((bv1 bitvec))
            (=>
              (= (length bv1) n)
              (= (path_sem (place_xx t n) (bv_to_ket bv1)) (bv_to_ket
                                                             (make_bv
                                                               (fc597 t bv1)
                                                               n)))))
          (and
            (forall ((bv1 bitvec))
              (=>
                (= (length bv1) n)
                (is_a_ket_basis_elt
                  (path_sem (place_xx t n) (bv_to_ket bv1)))))
            (and
              (forall ((bv1 bitvec))
                (=>
                  (= (length bv1) n)
                  (= (select (value
                               (ket_to_bv
                                 (path_sem (place_xx t n) (bv_to_ket bv1)))) t) (- 1 (select 
                  (value
                    bv1) t)))))
              (forall ((bv1 bitvec))
                (forall ((i Int))
                  (=>
                    (= (length bv1) n)
                    (=>
                      (and (<= 0 i) (< i n))
                      (=>
                        (not (= i t))
                        (= (select (value
                                     (ket_to_bv
                                       (path_sem
                                         (place_xx t n)
                                         (bv_to_ket bv1)))) i) (select 
                        (value
                          bv1) i))))))))))))))

;; place_cnot_ps
(declare-fun place_cnot_ps (Int
  Int
  Int) circuit2)

;; place_cnot_ps'def
(assert
  (forall ((c Int) (t Int) (n Int))
    (=>
      (and (<= 0 c) (< c n))
      (=>
        (and (<= 0 t) (< t n))
        (=> (not (= c t)) (= (place_cnot_ps c t n) (place_cnot c t n)))))))

;; place_cnot_ps'spec
(assert
  (forall ((c Int) (t Int) (n Int))
    (=>
      (and (<= 0 c) (< c n))
      (=>
        (and (<= 0 t) (< t n))
        (=>
          (not (= c t))
          (and
            (= (width (place_cnot_ps c t n)) n)
            (and
              (forall ((bv1 bitvec))
                (=>
                  (= (length bv1) n)
                  (is_a_ket_basis_elt
                    (path_sem (place_cnot_ps c t n) (bv_to_ket bv1)))))
              (and
                (forall ((bv1 bitvec))
                  (=>
                    (= (length bv1) n)
                    (=>
                      (= (select (value bv1) c) 0)
                      (= (path_sem (place_cnot_ps c t n) (bv_to_ket bv1)) 
                      (bv_to_ket
                        bv1)))))
                (forall ((bv1 bitvec))
                  (=>
                    (= (length bv1) n)
                    (=>
                      (= (select (value bv1) c) 1)
                      (= (path_sem (place_cnot_ps c t n) (bv_to_ket bv1)) 
                      (path_sem
                        (place_xx t n)
                        (bv_to_ket bv1))))))))))))))

;; place_toffoli_tcc
(declare-fun place_toffoli_tcc (Int
  Int
  Int
  Int) circuit2)

;; place_toffoli_tcc'def
(assert
  (forall ((c1 Int) (c2 Int) (t Int) (n Int))
    (=>
      (and (<= 0 t) (and (< t c1) (and (< c1 c2) (< c2 n))))
      (= (place_toffoli_tcc c1 c2 t n) (cont
                                         (place_cnot_ps
                                           (- c1 t)
                                           0
                                           (+ (- c1 t) 1))
                                         c2
                                         t
                                         n)))))

;; fc
(declare-fun fc598 (Int
  Int
  Int
  (matrix complex)) (Array Int Int))

;; fc'def
(assert
  (forall ((c1 Int) (c2 Int) (t Int) (x (matrix complex)) (i Int))
    (= (select (fc598 c1 c2 t x) i) (ite (= i t)
                                      (+ (* (* (select (value (ket_to_bv x)) c1) (select 
                                      (value
                                        (ket_to_bv x)) c2)) (- 1 (select 
                                      (value
                                        (ket_to_bv x)) t))) (* (select 
                                      (value
                                        (ket_to_bv x)) t) (- 1 (* (select 
                                      (value
                                        (ket_to_bv x)) c1) (select (value
                                                                    (ket_to_bv
                                                                    x)) c2)))))
                                      (select (value (ket_to_bv x)) i)))))

;; place_toffoli_tcc'spec
(assert
  (forall ((c1 Int) (c2 Int) (t Int) (n Int))
    (=>
      (and (<= 0 t) (and (< t c1) (and (< c1 c2) (< c2 n))))
      (and
        (= (width (place_toffoli_tcc c1 c2 t n)) n)
        (forall ((x (matrix complex)))
          (=>
            (is_a_ket_l x n)
            (=>
              (is_a_ket_basis_elt x)
              (= (path_sem (place_toffoli_tcc c1 c2 t n) x) (bv_to_ket
                                                              (make_bv
                                                                (fc598
                                                                  c1
                                                                  c2
                                                                  t
                                                                  x)
                                                                n))))))))))

;; place_toffoli_ctc
(declare-fun place_toffoli_ctc (Int
  Int
  Int
  Int) circuit2)

;; place_toffoli_ctc'def
(assert
  (forall ((c1 Int) (c2 Int) (t Int) (n Int))
    (=>
      (and (<= 0 c1) (and (< c1 t) (and (< t c2) (< c2 n))))
      (= (place_toffoli_ctc c1 c2 t n) (cont
                                         (place_cnot_ps
                                           0
                                           (- t c1)
                                           (+ (- t c1) 1))
                                         c2
                                         c1
                                         n)))))

;; fc
(declare-fun fc599 (Int
  Int
  Int
  (matrix complex)) (Array Int Int))

;; fc'def
(assert
  (forall ((c1 Int) (c2 Int) (t Int) (x (matrix complex)) (i Int))
    (= (select (fc599 c1 c2 t x) i) (ite (= i t)
                                      (+ (* (* (select (value (ket_to_bv x)) c1) (select 
                                      (value
                                        (ket_to_bv x)) c2)) (- 1 (select 
                                      (value
                                        (ket_to_bv x)) t))) (* (select 
                                      (value
                                        (ket_to_bv x)) t) (- 1 (* (select 
                                      (value
                                        (ket_to_bv x)) c1) (select (value
                                                                    (ket_to_bv
                                                                    x)) c2)))))
                                      (select (value (ket_to_bv x)) i)))))

;; place_toffoli_ctc'spec
(assert
  (forall ((c1 Int) (c2 Int) (t Int) (n Int))
    (=>
      (and (<= 0 c1) (and (< c1 t) (and (< t c2) (< c2 n))))
      (and
        (= (width (place_toffoli_ctc c1 c2 t n)) n)
        (forall ((x (matrix complex)))
          (=>
            (is_a_ket_l x n)
            (=>
              (is_a_ket_basis_elt x)
              (= (path_sem (place_toffoli_ctc c1 c2 t n) x) (bv_to_ket
                                                              (make_bv
                                                                (fc599
                                                                  c1
                                                                  c2
                                                                  t
                                                                  x)
                                                                n))))))))))

;; place_toffoli_cct
(declare-fun place_toffoli_cct (Int
  Int
  Int
  Int) circuit2)

;; place_toffoli_cct'def
(assert
  (forall ((c1 Int) (c2 Int) (t Int) (n Int))
    (=>
      (and (<= 0 c1) (and (< c1 c2) (and (< c2 t) (< t n))))
      (= (place_toffoli_cct c1 c2 t n) (cont
                                         (place_cnot_ps
                                           0
                                           (- t c2)
                                           (+ (- t c2) 1))
                                         c1
                                         c2
                                         n)))))

;; fc
(declare-fun fc600 (Int
  Int
  Int
  (matrix complex)) (Array Int Int))

;; fc'def
(assert
  (forall ((c1 Int) (c2 Int) (t Int) (x (matrix complex)) (i Int))
    (= (select (fc600 c1 c2 t x) i) (ite (= i t)
                                      (+ (* (* (select (value (ket_to_bv x)) c1) (select 
                                      (value
                                        (ket_to_bv x)) c2)) (- 1 (select 
                                      (value
                                        (ket_to_bv x)) t))) (* (select 
                                      (value
                                        (ket_to_bv x)) t) (- 1 (* (select 
                                      (value
                                        (ket_to_bv x)) c1) (select (value
                                                                    (ket_to_bv
                                                                    x)) c2)))))
                                      (select (value (ket_to_bv x)) i)))))

;; place_toffoli_cct'spec
(assert
  (forall ((c1 Int) (c2 Int) (t Int) (n Int))
    (=>
      (and (<= 0 c1) (and (< c1 c2) (and (< c2 t) (< t n))))
      (and
        (= (width (place_toffoli_cct c1 c2 t n)) n)
        (forall ((x (matrix complex)))
          (=>
            (is_a_ket_l x n)
            (=>
              (is_a_ket_basis_elt x)
              (= (path_sem (place_toffoli_cct c1 c2 t n) x) (bv_to_ket
                                                              (make_bv
                                                                (fc600
                                                                  c1
                                                                  c2
                                                                  t
                                                                  x)
                                                                n))))))))))

;; place_toffoli
(declare-fun place_toffoli (Int
  Int
  Int
  Int) circuit2)

;; place_toffoli'def
(assert
  (forall ((c1 Int) (c2 Int) (t Int) (n Int))
    (=>
      (and (<= 0 c1) (< c1 n))
      (=>
        (and (<= 0 c2) (< c2 n))
        (=>
          (and (<= 0 t) (< t n))
          (=>
            (not (= c1 c2))
            (=>
              (not (= c1 t))
              (=>
                (not (= c2 t))
                (let ((mincont (min c1 c2)))
                  (let ((maxcont (max c1 c2)))
                    (ite (< t mincont)
                      (= (place_toffoli c1 c2 t n) (place_toffoli_tcc
                                                     mincont
                                                     maxcont
                                                     t
                                                     n))
                      (ite (< t maxcont)
                        (= (place_toffoli c1 c2 t n) (place_toffoli_ctc
                                                       mincont
                                                       maxcont
                                                       t
                                                       n))
                        (= (place_toffoli c1 c2 t n) (place_toffoli_cct
                                                       mincont
                                                       maxcont
                                                       t
                                                       n))))))))))))))

;; fc
(declare-fun fc601 (Int
  Int
  Int
  (matrix complex)) (Array Int Int))

;; fc'def
(assert
  (forall ((c1 Int) (c2 Int) (t Int) (x (matrix complex)) (i Int))
    (= (select (fc601 c1 c2 t x) i) (ite (= i t)
                                      (+ (* (* (select (value (ket_to_bv x)) c1) (select 
                                      (value
                                        (ket_to_bv x)) c2)) (- 1 (select 
                                      (value
                                        (ket_to_bv x)) t))) (* (select 
                                      (value
                                        (ket_to_bv x)) t) (- 1 (* (select 
                                      (value
                                        (ket_to_bv x)) c1) (select (value
                                                                    (ket_to_bv
                                                                    x)) c2)))))
                                      (select (value (ket_to_bv x)) i)))))

;; place_toffoli'spec
(assert
  (forall ((c1 Int) (c2 Int) (t Int) (n Int))
    (=>
      (and (<= 0 c1) (< c1 n))
      (=>
        (and (<= 0 c2) (< c2 n))
        (=>
          (and (<= 0 t) (< t n))
          (=>
            (not (= c1 c2))
            (=>
              (not (= c1 t))
              (=>
                (not (= c2 t))
                (and
                  (= (width (place_toffoli c1 c2 t n)) n)
                  (and
                    (forall ((x (matrix complex)))
                      (=>
                        (is_a_ket_l x n)
                        (=>
                          (is_a_ket_basis_elt x)
                          (= (path_sem (place_toffoli c1 c2 t n) x) (bv_to_ket
                                                                    (make_bv
                                                                    (fc601
                                                                    c1
                                                                    c2
                                                                    t
                                                                    x)
                                                                    n))))))
                    (and
                      (correct_path_sum_
                        (place_toffoli c1 c2 t n)
                        (pps_toffoli c1 c2 t n))
                      (and
                        (forall ((bv1 bitvec))
                          (=>
                            (= (length bv1) n)
                            (is_a_ket_basis_elt
                              (path_sem
                                (place_toffoli c1 c2 t n)
                                (bv_to_ket bv1)))))
                        (and
                          (forall ((x (matrix complex)))
                            (=>
                              (is_a_ket_l x n)
                              (=>
                                (is_a_ket_basis_elt x)
                                (= (select (value
                                             (ket_to_bv
                                               (path_sem
                                                 (place_toffoli c1 c2 t n)
                                                 x))) t) (+ (* (* (select 
                                (value
                                  (ket_to_bv x)) c1) (select (value
                                                               (ket_to_bv x)) c2)) (- 1 (select 
                                (value
                                  (ket_to_bv x)) t))) (* (select (value
                                                                   (ket_to_bv
                                                                    x)) t) (- 1 (* (select 
                                (value
                                  (ket_to_bv x)) c1) (select (value
                                                               (ket_to_bv x)) c2)))))))))
                          (forall ((x (matrix complex)))
                            (forall ((i Int))
                              (=>
                                (is_a_ket_l x n)
                                (=>
                                  (is_a_ket_basis_elt x)
                                  (=>
                                    (and (<= 0 i) (< i n))
                                    (=>
                                      (not (= i t))
                                      (= (select (value
                                                   (ket_to_bv
                                                     (path_sem
                                                       (place_toffoli
                                                         c1
                                                         c2
                                                         t
                                                         n)
                                                       x))) i) (select 
                                      (value
                                        (ket_to_bv x)) i)))))))))))))))))))))

;; bricks_toffoli_path
(assert (correct_path_sum_ toffoli (pps_toffoli 0 1 2 3)))

;; place_fredkin
(declare-fun place_fredkin (Int
  Int
  Int
  Int) circuit2)

;; place_fredkin'def
(assert
  (forall ((c Int) (t1 Int) (t2 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 t2) (< t2 n))
        (=>
          (and (<= 0 c) (< c n))
          (=>
            (not (= t1 t2))
            (=>
              (not (= t1 c))
              (=>
                (not (= t2 c))
                (= (place_fredkin c t1 t2 n) (sequence
                                               (sequence
                                                 (place_toffoli c t1 t2 n)
                                                 (place_toffoli c t2 t1 n))
                                               (place_toffoli c t1 t2 n)))))))))))

;; fc
(declare-fun fc602 (Int
  Int
  Int
  bitvec) (Array Int Int))

;; fc
(declare-fun fc603 () (Array Int Int))

;; fc'def
(assert
  (forall ((c Int) (t1 Int) (t2 Int) (bv1 bitvec) (i Int))
    (= (select (fc602 c t1 t2 bv1) i) (ite (= i t1)
                                        (+ (* (select (value bv1) c) (select 
                                        (value
                                          bv1) t2)) (* (- 1 (select (value
                                                                    bv1) c)) (select 
                                        (value
                                          bv1) t1)))
                                        (ite (= i t2)
                                          (+ (* (select (value bv1) c) (select 
                                          (value
                                            bv1) t1)) (* (- 1 (select 
                                          (value
                                            bv1) c)) (select (value bv1) t2)))
                                          (select (value bv1) i))))))

;; fc'def
(assert (forall ((us Int)) (= (select fc603 us) 0)))

;; place_fredkin'spec
(assert
  (forall ((c Int) (t1 Int) (t2 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 t2) (< t2 n))
        (=>
          (and (<= 0 c) (< c n))
          (=>
            (not (= t1 t2))
            (=>
              (not (= t1 c))
              (=>
                (not (= t2 c))
                (and
                  (forall ((bv1 bitvec))
                    (forall ((i Int))
                      (=>
                        (= (length bv1) n)
                        (=>
                          (= (select (value bv1) c) 0)
                          (=>
                            (and (<= 0 i) (< i n))
                            (= (select (value
                                         (ket_to_bv
                                           (path_sem
                                             (place_fredkin c t1 t2 n)
                                             (bv_to_ket bv1)))) i) (select 
                            (value
                              bv1) i)))))))
                  (and
                    (forall ((bv1 bitvec))
                      (=>
                        (= (length bv1) n)
                        (=>
                          (= (select (value bv1) c) 1)
                          (= (select (value
                                       (ket_to_bv
                                         (path_sem
                                           (place_fredkin c t1 t2 n)
                                           (bv_to_ket bv1)))) t1) (select 
                          (value
                            bv1) t2)))))
                    (and
                      (forall ((bv1 bitvec))
                        (=>
                          (= (length bv1) n)
                          (=>
                            (= (select (value bv1) c) 1)
                            (= (select (value
                                         (ket_to_bv
                                           (path_sem
                                             (place_fredkin c t1 t2 n)
                                             (bv_to_ket bv1)))) t2) (select 
                            (value
                              bv1) t1)))))
                      (and
                        (forall ((bv1 bitvec))
                          (forall ((i Int))
                            (=>
                              (= (length bv1) n)
                              (=>
                                (= (select (value bv1) c) 1)
                                (=>
                                  (and (<= 0 i) (< i n))
                                  (=>
                                    (not (= i t1))
                                    (=>
                                      (not (= i t2))
                                      (= (select (value
                                                   (ket_to_bv
                                                     (path_sem
                                                       (place_fredkin
                                                         c
                                                         t1
                                                         t2
                                                         n)
                                                       (bv_to_ket bv1)))) i) (select 
                                      (value
                                        bv1) i)))))))))
                        (and
                          (forall ((bv1 bitvec))
                            (=>
                              (= (length bv1) n)
                              (is_a_ket_basis_elt
                                (path_sem
                                  (place_fredkin c t1 t2 n)
                                  (bv_to_ket bv1)))))
                          (and
                            (forall ((bv1 bitvec))
                              (=>
                                (= (length bv1) n)
                                (= (path_sem
                                     (place_fredkin c t1 t2 n)
                                     (bv_to_ket bv1)) (bv_to_ket
                                                        (make_bv
                                                          (fc602 c t1 t2 bv1)
                                                          n)))))
                            (and
                              (forall ((bv1 bitvec))
                                (=>
                                  (= (length bv1) n)
                                  (= (path_sem
                                       (place_fredkin c t1 t2 n)
                                       (bv_to_ket bv1)) (bv_to_ket
                                                          (make_bv
                                                            (select (select 
                                                            (h_basis_ket
                                                              (pps_fredkin
                                                                c
                                                                t1
                                                                t2
                                                                n)) (value
                                                                    bv1)) 
                                                            fc603)
                                                            n)))))
                              (and
                                (correct_path_sum_
                                  (place_fredkin c t1 t2 n)
                                  (pps_fredkin c t1 t2 n))
                                (= (width (place_fredkin c t1 t2 n)) n)))))))))))))))))

;; bricks_fredkin_path
(assert (correct_path_sum_ fredkin (pps_fredkin 0 1 2 3)))

;; swap_c
(declare-fun swap_c (Int
  Int
  Int) circuit2)

;; swap_c'def
(assert
  (forall ((t1 Int) (t2 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 t2) (< t2 n))
        (=> (not (= t1 t2)) (= (swap_c t1 t2 n) (permute_atom t1 t2 n)))))))

;; swap_c'spec
(assert
  (forall ((t1 Int) (t2 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 t2) (< t2 n))
        (=>
          (not (= t1 t2))
          (and
            (= (width (swap_c t1 t2 n)) n)
            (correct_path_sum_ (swap_c t1 t2 n) (pps_swap t1 t2 n))))))))

(declare-sort wired_circuit 0)

;; wired_circuit
(declare-fun wired_circuit1 () ty)

;; Skip
(declare-fun Skip () wired_circuit)

;; Phase
(declare-fun Phase1 (Int) wired_circuit)

;; Rx
(declare-fun Rx (Int) wired_circuit)

;; Ry
(declare-fun Ry (Int) wired_circuit)

;; Rz
(declare-fun Rz1 (Int) wired_circuit)

;; Rzp
(declare-fun Rzp (Int) wired_circuit)

;; Hadamard
(declare-fun Hadamard1 () wired_circuit)

;; S
(declare-fun S () wired_circuit)

;; T
(declare-fun T () wired_circuit)

;; X
(declare-fun X () wired_circuit)

;; Y
(declare-fun Y () wired_circuit)

;; Z
(declare-fun Z () wired_circuit)

;; Bricks_Cnot
(declare-fun Bricks_Cnot () wired_circuit)

;; Bricks_Toffoli
(declare-fun Bricks_Toffoli () wired_circuit)

;; Bricks_Fredkin
(declare-fun Bricks_Fredkin () wired_circuit)

;; Bricks_Swap
(declare-fun Bricks_Swap () wired_circuit)

;; Swap
(declare-fun Swap1 (Int
  Int
  Int) wired_circuit)

;; Cnot
(declare-fun Cnot1 (Int
  Int
  Int) wired_circuit)

;; Toffoli
(declare-fun Toffoli (Int
  Int
  Int
  Int) wired_circuit)

;; Fredkin
(declare-fun Fredkin (Int
  Int
  Int
  Int) wired_circuit)

;; Place
(declare-fun Place (wired_circuit
  Int
  Int) wired_circuit)

;; Cont
(declare-fun Cont (wired_circuit
  Int
  Int
  Int) wired_circuit)

;; Sequence
(declare-fun Sequence1 (wired_circuit
  wired_circuit) wired_circuit)

;; Parallel
(declare-fun Parallel1 (wired_circuit
  wired_circuit) wired_circuit)

;; Ancillas
(declare-fun Ancillas1 (wired_circuit
  Int) wired_circuit)

;; match_wired_circuit
(declare-fun match_wired_circuit (ty
  wired_circuit
  uni
  uni
  uni
  uni
  uni
  uni
  uni
  uni
  uni
  uni
  uni
  uni
  uni
  uni
  uni
  uni
  uni
  uni
  uni
  uni
  uni
  uni
  uni
  uni
  uni) uni)

;; match_wired_circuit_sort
(assert
  (forall ((a ty))
    (forall ((x wired_circuit) (x1 uni) (x2 uni) (x3 uni) (x4 uni) (x5 uni) (x6 uni) (x7 uni) (x8 uni) (x9 uni) (x10 uni) (x11 uni) (x12 uni) (x13 uni) (x14 uni) (x15 uni) (x16 uni) (x17 uni) (x18 uni) (x19 uni) (x20 uni) (x21 uni) (x22 uni) (x23 uni) (x24 uni) (x25 uni))
      (sort
        a
        (match_wired_circuit
          a
          x
          x1
          x2
          x3
          x4
          x5
          x6
          x7
          x8
          x9
          x10
          x11
          x12
          x13
          x14
          x15
          x16
          x17
          x18
          x19
          x20
          x21
          x22
          x23
          x24
          x25)))))

;; match_wired_circuit_Skip
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (z4 uni) (z5 uni) (z6 uni) (z7 uni) (z8 uni) (z9 uni) (z10 uni) (z11 uni) (z12 uni) (z13 uni) (z14 uni) (z15 uni) (z16 uni) (z17 uni) (z18 uni) (z19 uni) (z20 uni) (z21 uni) (z22 uni) (z23 uni) (z24 uni))
      (=>
        (sort a z)
        (= (match_wired_circuit
             a
             Skip
             z
             z1
             z2
             z3
             z4
             z5
             z6
             z7
             z8
             z9
             z10
             z11
             z12
             z13
             z14
             z15
             z16
             z17
             z18
             z19
             z20
             z21
             z22
             z23
             z24) z)))))

;; match_wired_circuit_Phase
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (z4 uni) (z5 uni) (z6 uni) (z7 uni) (z8 uni) (z9 uni) (z10 uni) (z11 uni) (z12 uni) (z13 uni) (z14 uni) (z15 uni) (z16 uni) (z17 uni) (z18 uni) (z19 uni) (z20 uni) (z21 uni) (z22 uni) (z23 uni) (z24 uni) (u Int))
      (=>
        (sort a z1)
        (= (match_wired_circuit
             a
             (Phase1 u)
             z
             z1
             z2
             z3
             z4
             z5
             z6
             z7
             z8
             z9
             z10
             z11
             z12
             z13
             z14
             z15
             z16
             z17
             z18
             z19
             z20
             z21
             z22
             z23
             z24) z1)))))

;; match_wired_circuit_Rx
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (z4 uni) (z5 uni) (z6 uni) (z7 uni) (z8 uni) (z9 uni) (z10 uni) (z11 uni) (z12 uni) (z13 uni) (z14 uni) (z15 uni) (z16 uni) (z17 uni) (z18 uni) (z19 uni) (z20 uni) (z21 uni) (z22 uni) (z23 uni) (z24 uni) (u Int))
      (=>
        (sort a z2)
        (= (match_wired_circuit
             a
             (Rx u)
             z
             z1
             z2
             z3
             z4
             z5
             z6
             z7
             z8
             z9
             z10
             z11
             z12
             z13
             z14
             z15
             z16
             z17
             z18
             z19
             z20
             z21
             z22
             z23
             z24) z2)))))

;; match_wired_circuit_Ry
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (z4 uni) (z5 uni) (z6 uni) (z7 uni) (z8 uni) (z9 uni) (z10 uni) (z11 uni) (z12 uni) (z13 uni) (z14 uni) (z15 uni) (z16 uni) (z17 uni) (z18 uni) (z19 uni) (z20 uni) (z21 uni) (z22 uni) (z23 uni) (z24 uni) (u Int))
      (=>
        (sort a z3)
        (= (match_wired_circuit
             a
             (Ry u)
             z
             z1
             z2
             z3
             z4
             z5
             z6
             z7
             z8
             z9
             z10
             z11
             z12
             z13
             z14
             z15
             z16
             z17
             z18
             z19
             z20
             z21
             z22
             z23
             z24) z3)))))

;; match_wired_circuit_Rz
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (z4 uni) (z5 uni) (z6 uni) (z7 uni) (z8 uni) (z9 uni) (z10 uni) (z11 uni) (z12 uni) (z13 uni) (z14 uni) (z15 uni) (z16 uni) (z17 uni) (z18 uni) (z19 uni) (z20 uni) (z21 uni) (z22 uni) (z23 uni) (z24 uni) (u Int))
      (=>
        (sort a z4)
        (= (match_wired_circuit
             a
             (Rz1 u)
             z
             z1
             z2
             z3
             z4
             z5
             z6
             z7
             z8
             z9
             z10
             z11
             z12
             z13
             z14
             z15
             z16
             z17
             z18
             z19
             z20
             z21
             z22
             z23
             z24) z4)))))

;; match_wired_circuit_Rzp
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (z4 uni) (z5 uni) (z6 uni) (z7 uni) (z8 uni) (z9 uni) (z10 uni) (z11 uni) (z12 uni) (z13 uni) (z14 uni) (z15 uni) (z16 uni) (z17 uni) (z18 uni) (z19 uni) (z20 uni) (z21 uni) (z22 uni) (z23 uni) (z24 uni) (u Int))
      (=>
        (sort a z5)
        (= (match_wired_circuit
             a
             (Rzp u)
             z
             z1
             z2
             z3
             z4
             z5
             z6
             z7
             z8
             z9
             z10
             z11
             z12
             z13
             z14
             z15
             z16
             z17
             z18
             z19
             z20
             z21
             z22
             z23
             z24) z5)))))

;; match_wired_circuit_Hadamard
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (z4 uni) (z5 uni) (z6 uni) (z7 uni) (z8 uni) (z9 uni) (z10 uni) (z11 uni) (z12 uni) (z13 uni) (z14 uni) (z15 uni) (z16 uni) (z17 uni) (z18 uni) (z19 uni) (z20 uni) (z21 uni) (z22 uni) (z23 uni) (z24 uni))
      (=>
        (sort a z6)
        (= (match_wired_circuit
             a
             Hadamard1
             z
             z1
             z2
             z3
             z4
             z5
             z6
             z7
             z8
             z9
             z10
             z11
             z12
             z13
             z14
             z15
             z16
             z17
             z18
             z19
             z20
             z21
             z22
             z23
             z24) z6)))))

;; match_wired_circuit_S
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (z4 uni) (z5 uni) (z6 uni) (z7 uni) (z8 uni) (z9 uni) (z10 uni) (z11 uni) (z12 uni) (z13 uni) (z14 uni) (z15 uni) (z16 uni) (z17 uni) (z18 uni) (z19 uni) (z20 uni) (z21 uni) (z22 uni) (z23 uni) (z24 uni))
      (=>
        (sort a z7)
        (= (match_wired_circuit
             a
             S
             z
             z1
             z2
             z3
             z4
             z5
             z6
             z7
             z8
             z9
             z10
             z11
             z12
             z13
             z14
             z15
             z16
             z17
             z18
             z19
             z20
             z21
             z22
             z23
             z24) z7)))))

;; match_wired_circuit_T
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (z4 uni) (z5 uni) (z6 uni) (z7 uni) (z8 uni) (z9 uni) (z10 uni) (z11 uni) (z12 uni) (z13 uni) (z14 uni) (z15 uni) (z16 uni) (z17 uni) (z18 uni) (z19 uni) (z20 uni) (z21 uni) (z22 uni) (z23 uni) (z24 uni))
      (=>
        (sort a z8)
        (= (match_wired_circuit
             a
             T
             z
             z1
             z2
             z3
             z4
             z5
             z6
             z7
             z8
             z9
             z10
             z11
             z12
             z13
             z14
             z15
             z16
             z17
             z18
             z19
             z20
             z21
             z22
             z23
             z24) z8)))))

;; match_wired_circuit_X
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (z4 uni) (z5 uni) (z6 uni) (z7 uni) (z8 uni) (z9 uni) (z10 uni) (z11 uni) (z12 uni) (z13 uni) (z14 uni) (z15 uni) (z16 uni) (z17 uni) (z18 uni) (z19 uni) (z20 uni) (z21 uni) (z22 uni) (z23 uni) (z24 uni))
      (=>
        (sort a z9)
        (= (match_wired_circuit
             a
             X
             z
             z1
             z2
             z3
             z4
             z5
             z6
             z7
             z8
             z9
             z10
             z11
             z12
             z13
             z14
             z15
             z16
             z17
             z18
             z19
             z20
             z21
             z22
             z23
             z24) z9)))))

;; match_wired_circuit_Y
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (z4 uni) (z5 uni) (z6 uni) (z7 uni) (z8 uni) (z9 uni) (z10 uni) (z11 uni) (z12 uni) (z13 uni) (z14 uni) (z15 uni) (z16 uni) (z17 uni) (z18 uni) (z19 uni) (z20 uni) (z21 uni) (z22 uni) (z23 uni) (z24 uni))
      (=>
        (sort a z10)
        (= (match_wired_circuit
             a
             Y
             z
             z1
             z2
             z3
             z4
             z5
             z6
             z7
             z8
             z9
             z10
             z11
             z12
             z13
             z14
             z15
             z16
             z17
             z18
             z19
             z20
             z21
             z22
             z23
             z24) z10)))))

;; match_wired_circuit_Z
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (z4 uni) (z5 uni) (z6 uni) (z7 uni) (z8 uni) (z9 uni) (z10 uni) (z11 uni) (z12 uni) (z13 uni) (z14 uni) (z15 uni) (z16 uni) (z17 uni) (z18 uni) (z19 uni) (z20 uni) (z21 uni) (z22 uni) (z23 uni) (z24 uni))
      (=>
        (sort a z11)
        (= (match_wired_circuit
             a
             Z
             z
             z1
             z2
             z3
             z4
             z5
             z6
             z7
             z8
             z9
             z10
             z11
             z12
             z13
             z14
             z15
             z16
             z17
             z18
             z19
             z20
             z21
             z22
             z23
             z24) z11)))))

;; match_wired_circuit_Bricks_Cnot
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (z4 uni) (z5 uni) (z6 uni) (z7 uni) (z8 uni) (z9 uni) (z10 uni) (z11 uni) (z12 uni) (z13 uni) (z14 uni) (z15 uni) (z16 uni) (z17 uni) (z18 uni) (z19 uni) (z20 uni) (z21 uni) (z22 uni) (z23 uni) (z24 uni))
      (=>
        (sort a z12)
        (= (match_wired_circuit
             a
             Bricks_Cnot
             z
             z1
             z2
             z3
             z4
             z5
             z6
             z7
             z8
             z9
             z10
             z11
             z12
             z13
             z14
             z15
             z16
             z17
             z18
             z19
             z20
             z21
             z22
             z23
             z24) z12)))))

;; match_wired_circuit_Bricks_Toffoli
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (z4 uni) (z5 uni) (z6 uni) (z7 uni) (z8 uni) (z9 uni) (z10 uni) (z11 uni) (z12 uni) (z13 uni) (z14 uni) (z15 uni) (z16 uni) (z17 uni) (z18 uni) (z19 uni) (z20 uni) (z21 uni) (z22 uni) (z23 uni) (z24 uni))
      (=>
        (sort a z13)
        (= (match_wired_circuit
             a
             Bricks_Toffoli
             z
             z1
             z2
             z3
             z4
             z5
             z6
             z7
             z8
             z9
             z10
             z11
             z12
             z13
             z14
             z15
             z16
             z17
             z18
             z19
             z20
             z21
             z22
             z23
             z24) z13)))))

;; match_wired_circuit_Bricks_Fredkin
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (z4 uni) (z5 uni) (z6 uni) (z7 uni) (z8 uni) (z9 uni) (z10 uni) (z11 uni) (z12 uni) (z13 uni) (z14 uni) (z15 uni) (z16 uni) (z17 uni) (z18 uni) (z19 uni) (z20 uni) (z21 uni) (z22 uni) (z23 uni) (z24 uni))
      (=>
        (sort a z14)
        (= (match_wired_circuit
             a
             Bricks_Fredkin
             z
             z1
             z2
             z3
             z4
             z5
             z6
             z7
             z8
             z9
             z10
             z11
             z12
             z13
             z14
             z15
             z16
             z17
             z18
             z19
             z20
             z21
             z22
             z23
             z24) z14)))))

;; match_wired_circuit_Bricks_Swap
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (z4 uni) (z5 uni) (z6 uni) (z7 uni) (z8 uni) (z9 uni) (z10 uni) (z11 uni) (z12 uni) (z13 uni) (z14 uni) (z15 uni) (z16 uni) (z17 uni) (z18 uni) (z19 uni) (z20 uni) (z21 uni) (z22 uni) (z23 uni) (z24 uni))
      (=>
        (sort a z15)
        (= (match_wired_circuit
             a
             Bricks_Swap
             z
             z1
             z2
             z3
             z4
             z5
             z6
             z7
             z8
             z9
             z10
             z11
             z12
             z13
             z14
             z15
             z16
             z17
             z18
             z19
             z20
             z21
             z22
             z23
             z24) z15)))))

;; match_wired_circuit_Swap
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (z4 uni) (z5 uni) (z6 uni) (z7 uni) (z8 uni) (z9 uni) (z10 uni) (z11 uni) (z12 uni) (z13 uni) (z14 uni) (z15 uni) (z16 uni) (z17 uni) (z18 uni) (z19 uni) (z20 uni) (z21 uni) (z22 uni) (z23 uni) (z24 uni) (u Int) (u1 Int) (u2 Int))
      (=>
        (sort a z16)
        (= (match_wired_circuit
             a
             (Swap1 u u1 u2)
             z
             z1
             z2
             z3
             z4
             z5
             z6
             z7
             z8
             z9
             z10
             z11
             z12
             z13
             z14
             z15
             z16
             z17
             z18
             z19
             z20
             z21
             z22
             z23
             z24) z16)))))

;; match_wired_circuit_Cnot
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (z4 uni) (z5 uni) (z6 uni) (z7 uni) (z8 uni) (z9 uni) (z10 uni) (z11 uni) (z12 uni) (z13 uni) (z14 uni) (z15 uni) (z16 uni) (z17 uni) (z18 uni) (z19 uni) (z20 uni) (z21 uni) (z22 uni) (z23 uni) (z24 uni) (u Int) (u1 Int) (u2 Int))
      (=>
        (sort a z17)
        (= (match_wired_circuit
             a
             (Cnot1 u u1 u2)
             z
             z1
             z2
             z3
             z4
             z5
             z6
             z7
             z8
             z9
             z10
             z11
             z12
             z13
             z14
             z15
             z16
             z17
             z18
             z19
             z20
             z21
             z22
             z23
             z24) z17)))))

;; match_wired_circuit_Toffoli
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (z4 uni) (z5 uni) (z6 uni) (z7 uni) (z8 uni) (z9 uni) (z10 uni) (z11 uni) (z12 uni) (z13 uni) (z14 uni) (z15 uni) (z16 uni) (z17 uni) (z18 uni) (z19 uni) (z20 uni) (z21 uni) (z22 uni) (z23 uni) (z24 uni) (u Int) (u1 Int) (u2 Int) (u3 Int))
      (=>
        (sort a z18)
        (= (match_wired_circuit
             a
             (Toffoli u u1 u2 u3)
             z
             z1
             z2
             z3
             z4
             z5
             z6
             z7
             z8
             z9
             z10
             z11
             z12
             z13
             z14
             z15
             z16
             z17
             z18
             z19
             z20
             z21
             z22
             z23
             z24) z18)))))

;; match_wired_circuit_Fredkin
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (z4 uni) (z5 uni) (z6 uni) (z7 uni) (z8 uni) (z9 uni) (z10 uni) (z11 uni) (z12 uni) (z13 uni) (z14 uni) (z15 uni) (z16 uni) (z17 uni) (z18 uni) (z19 uni) (z20 uni) (z21 uni) (z22 uni) (z23 uni) (z24 uni) (u Int) (u1 Int) (u2 Int) (u3 Int))
      (=>
        (sort a z19)
        (= (match_wired_circuit
             a
             (Fredkin u u1 u2 u3)
             z
             z1
             z2
             z3
             z4
             z5
             z6
             z7
             z8
             z9
             z10
             z11
             z12
             z13
             z14
             z15
             z16
             z17
             z18
             z19
             z20
             z21
             z22
             z23
             z24) z19)))))

;; match_wired_circuit_Place
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (z4 uni) (z5 uni) (z6 uni) (z7 uni) (z8 uni) (z9 uni) (z10 uni) (z11 uni) (z12 uni) (z13 uni) (z14 uni) (z15 uni) (z16 uni) (z17 uni) (z18 uni) (z19 uni) (z20 uni) (z21 uni) (z22 uni) (z23 uni) (z24 uni) (u wired_circuit) (u1 Int) (u2 Int))
      (=>
        (sort a z20)
        (= (match_wired_circuit
             a
             (Place u u1 u2)
             z
             z1
             z2
             z3
             z4
             z5
             z6
             z7
             z8
             z9
             z10
             z11
             z12
             z13
             z14
             z15
             z16
             z17
             z18
             z19
             z20
             z21
             z22
             z23
             z24) z20)))))

;; match_wired_circuit_Cont
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (z4 uni) (z5 uni) (z6 uni) (z7 uni) (z8 uni) (z9 uni) (z10 uni) (z11 uni) (z12 uni) (z13 uni) (z14 uni) (z15 uni) (z16 uni) (z17 uni) (z18 uni) (z19 uni) (z20 uni) (z21 uni) (z22 uni) (z23 uni) (z24 uni) (u wired_circuit) (u1 Int) (u2 Int) (u3 Int))
      (=>
        (sort a z21)
        (= (match_wired_circuit
             a
             (Cont u u1 u2 u3)
             z
             z1
             z2
             z3
             z4
             z5
             z6
             z7
             z8
             z9
             z10
             z11
             z12
             z13
             z14
             z15
             z16
             z17
             z18
             z19
             z20
             z21
             z22
             z23
             z24) z21)))))

;; match_wired_circuit_Sequence
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (z4 uni) (z5 uni) (z6 uni) (z7 uni) (z8 uni) (z9 uni) (z10 uni) (z11 uni) (z12 uni) (z13 uni) (z14 uni) (z15 uni) (z16 uni) (z17 uni) (z18 uni) (z19 uni) (z20 uni) (z21 uni) (z22 uni) (z23 uni) (z24 uni) (u wired_circuit) (u1 wired_circuit))
      (=>
        (sort a z22)
        (= (match_wired_circuit
             a
             (Sequence1 u u1)
             z
             z1
             z2
             z3
             z4
             z5
             z6
             z7
             z8
             z9
             z10
             z11
             z12
             z13
             z14
             z15
             z16
             z17
             z18
             z19
             z20
             z21
             z22
             z23
             z24) z22)))))

;; match_wired_circuit_Parallel
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (z4 uni) (z5 uni) (z6 uni) (z7 uni) (z8 uni) (z9 uni) (z10 uni) (z11 uni) (z12 uni) (z13 uni) (z14 uni) (z15 uni) (z16 uni) (z17 uni) (z18 uni) (z19 uni) (z20 uni) (z21 uni) (z22 uni) (z23 uni) (z24 uni) (u wired_circuit) (u1 wired_circuit))
      (=>
        (sort a z23)
        (= (match_wired_circuit
             a
             (Parallel1 u u1)
             z
             z1
             z2
             z3
             z4
             z5
             z6
             z7
             z8
             z9
             z10
             z11
             z12
             z13
             z14
             z15
             z16
             z17
             z18
             z19
             z20
             z21
             z22
             z23
             z24) z23)))))

;; match_wired_circuit_Ancillas
(assert
  (forall ((a ty))
    (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (z4 uni) (z5 uni) (z6 uni) (z7 uni) (z8 uni) (z9 uni) (z10 uni) (z11 uni) (z12 uni) (z13 uni) (z14 uni) (z15 uni) (z16 uni) (z17 uni) (z18 uni) (z19 uni) (z20 uni) (z21 uni) (z22 uni) (z23 uni) (z24 uni) (u wired_circuit) (u1 Int))
      (=>
        (sort a z24)
        (= (match_wired_circuit
             a
             (Ancillas1 u u1)
             z
             z1
             z2
             z3
             z4
             z5
             z6
             z7
             z8
             z9
             z10
             z11
             z12
             z13
             z14
             z15
             z16
             z17
             z18
             z19
             z20
             z21
             z22
             z23
             z24) z24)))))

;; index_wired_circuit
(declare-fun index_wired_circuit (wired_circuit) Int)

;; index_wired_circuit_Skip
(assert (= (index_wired_circuit Skip) 0))

;; index_wired_circuit_Phase
(assert
  (forall ((u Int))
    (! (= (index_wired_circuit (Phase1 u)) 1) :pattern ((Phase1 u)) )))

;; index_wired_circuit_Rx
(assert
  (forall ((u Int))
    (! (= (index_wired_circuit (Rx u)) 2) :pattern ((Rx u)) )))

;; index_wired_circuit_Ry
(assert
  (forall ((u Int))
    (! (= (index_wired_circuit (Ry u)) 3) :pattern ((Ry u)) )))

;; index_wired_circuit_Rz
(assert
  (forall ((u Int))
    (! (= (index_wired_circuit (Rz1 u)) 4) :pattern ((Rz1 u)) )))

;; index_wired_circuit_Rzp
(assert
  (forall ((u Int))
    (! (= (index_wired_circuit (Rzp u)) 5) :pattern ((Rzp u)) )))

;; index_wired_circuit_Hadamard
(assert (= (index_wired_circuit Hadamard1) 6))

;; index_wired_circuit_S
(assert (= (index_wired_circuit S) 7))

;; index_wired_circuit_T
(assert (= (index_wired_circuit T) 8))

;; index_wired_circuit_X
(assert (= (index_wired_circuit X) 9))

;; index_wired_circuit_Y
(assert (= (index_wired_circuit Y) 10))

;; index_wired_circuit_Z
(assert (= (index_wired_circuit Z) 11))

;; index_wired_circuit_Bricks_Cnot
(assert (= (index_wired_circuit Bricks_Cnot) 12))

;; index_wired_circuit_Bricks_Toffoli
(assert (= (index_wired_circuit Bricks_Toffoli) 13))

;; index_wired_circuit_Bricks_Fredkin
(assert (= (index_wired_circuit Bricks_Fredkin) 14))

;; index_wired_circuit_Bricks_Swap
(assert (= (index_wired_circuit Bricks_Swap) 15))

;; index_wired_circuit_Swap
(assert
  (forall ((u Int) (u1 Int) (u2 Int))
    (! (= (index_wired_circuit (Swap1 u u1 u2)) 16) :pattern ((Swap1 u u1 u2)) )))

;; index_wired_circuit_Cnot
(assert
  (forall ((u Int) (u1 Int) (u2 Int))
    (! (= (index_wired_circuit (Cnot1 u u1 u2)) 17) :pattern ((Cnot1 u u1 u2)) )))

;; index_wired_circuit_Toffoli
(assert
  (forall ((u Int) (u1 Int) (u2 Int) (u3 Int))
    (! (= (index_wired_circuit (Toffoli u u1 u2 u3)) 18) :pattern ((Toffoli
                                                                    u
                                                                    u1
                                                                    u2
                                                                    u3)) )))

;; index_wired_circuit_Fredkin
(assert
  (forall ((u Int) (u1 Int) (u2 Int) (u3 Int))
    (! (= (index_wired_circuit (Fredkin u u1 u2 u3)) 19) :pattern ((Fredkin
                                                                    u
                                                                    u1
                                                                    u2
                                                                    u3)) )))

;; index_wired_circuit_Place
(assert
  (forall ((u wired_circuit) (u1 Int) (u2 Int))
    (! (= (index_wired_circuit (Place u u1 u2)) 20) :pattern ((Place u u1 u2)) )))

;; index_wired_circuit_Cont
(assert
  (forall ((u wired_circuit) (u1 Int) (u2 Int) (u3 Int))
    (! (= (index_wired_circuit (Cont u u1 u2 u3)) 21) :pattern ((Cont
                                                                  u
                                                                  u1
                                                                  u2
                                                                  u3)) )))

;; index_wired_circuit_Sequence
(assert
  (forall ((u wired_circuit) (u1 wired_circuit))
    (! (= (index_wired_circuit (Sequence1 u u1)) 22) :pattern ((Sequence1
                                                                 u
                                                                 u1)) )))

;; index_wired_circuit_Parallel
(assert
  (forall ((u wired_circuit) (u1 wired_circuit))
    (! (= (index_wired_circuit (Parallel1 u u1)) 23) :pattern ((Parallel1
                                                                 u
                                                                 u1)) )))

;; index_wired_circuit_Ancillas
(assert
  (forall ((u wired_circuit) (u1 Int))
    (! (= (index_wired_circuit (Ancillas1 u u1)) 24) :pattern ((Ancillas1
                                                                 u
                                                                 u1)) )))

;; Phase_proj_1
(declare-fun Phase_proj_11 (wired_circuit) Int)

;; Phase_proj_1'def
(assert (forall ((u Int)) (= (Phase_proj_11 (Phase1 u)) u)))

;; Rx_proj_1
(declare-fun Rx_proj_1 (wired_circuit) Int)

;; Rx_proj_1'def
(assert (forall ((u Int)) (= (Rx_proj_1 (Rx u)) u)))

;; Ry_proj_1
(declare-fun Ry_proj_1 (wired_circuit) Int)

;; Ry_proj_1'def
(assert (forall ((u Int)) (= (Ry_proj_1 (Ry u)) u)))

;; Rz_proj_1
(declare-fun Rz_proj_11 (wired_circuit) Int)

;; Rz_proj_1'def
(assert (forall ((u Int)) (= (Rz_proj_11 (Rz1 u)) u)))

;; Rzp_proj_1
(declare-fun Rzp_proj_1 (wired_circuit) Int)

;; Rzp_proj_1'def
(assert (forall ((u Int)) (= (Rzp_proj_1 (Rzp u)) u)))

;; Swap_proj_1
(declare-fun Swap_proj_1 (wired_circuit) Int)

;; Swap_proj_1'def
(assert
  (forall ((u Int) (u1 Int) (u2 Int)) (= (Swap_proj_1 (Swap1 u u1 u2)) u)))

;; Swap_proj_2
(declare-fun Swap_proj_2 (wired_circuit) Int)

;; Swap_proj_2'def
(assert
  (forall ((u Int) (u1 Int) (u2 Int)) (= (Swap_proj_2 (Swap1 u u1 u2)) u1)))

;; Swap_proj_3
(declare-fun Swap_proj_3 (wired_circuit) Int)

;; Swap_proj_3'def
(assert
  (forall ((u Int) (u1 Int) (u2 Int)) (= (Swap_proj_3 (Swap1 u u1 u2)) u2)))

;; Cnot_proj_1
(declare-fun Cnot_proj_1 (wired_circuit) Int)

;; Cnot_proj_1'def
(assert
  (forall ((u Int) (u1 Int) (u2 Int)) (= (Cnot_proj_1 (Cnot1 u u1 u2)) u)))

;; Cnot_proj_2
(declare-fun Cnot_proj_2 (wired_circuit) Int)

;; Cnot_proj_2'def
(assert
  (forall ((u Int) (u1 Int) (u2 Int)) (= (Cnot_proj_2 (Cnot1 u u1 u2)) u1)))

;; Cnot_proj_3
(declare-fun Cnot_proj_3 (wired_circuit) Int)

;; Cnot_proj_3'def
(assert
  (forall ((u Int) (u1 Int) (u2 Int)) (= (Cnot_proj_3 (Cnot1 u u1 u2)) u2)))

;; Toffoli_proj_1
(declare-fun Toffoli_proj_1 (wired_circuit) Int)

;; Toffoli_proj_1'def
(assert
  (forall ((u Int) (u1 Int) (u2 Int) (u3 Int))
    (= (Toffoli_proj_1 (Toffoli u u1 u2 u3)) u)))

;; Toffoli_proj_2
(declare-fun Toffoli_proj_2 (wired_circuit) Int)

;; Toffoli_proj_2'def
(assert
  (forall ((u Int) (u1 Int) (u2 Int) (u3 Int))
    (= (Toffoli_proj_2 (Toffoli u u1 u2 u3)) u1)))

;; Toffoli_proj_3
(declare-fun Toffoli_proj_3 (wired_circuit) Int)

;; Toffoli_proj_3'def
(assert
  (forall ((u Int) (u1 Int) (u2 Int) (u3 Int))
    (= (Toffoli_proj_3 (Toffoli u u1 u2 u3)) u2)))

;; Toffoli_proj_4
(declare-fun Toffoli_proj_4 (wired_circuit) Int)

;; Toffoli_proj_4'def
(assert
  (forall ((u Int) (u1 Int) (u2 Int) (u3 Int))
    (= (Toffoli_proj_4 (Toffoli u u1 u2 u3)) u3)))

;; Fredkin_proj_1
(declare-fun Fredkin_proj_1 (wired_circuit) Int)

;; Fredkin_proj_1'def
(assert
  (forall ((u Int) (u1 Int) (u2 Int) (u3 Int))
    (= (Fredkin_proj_1 (Fredkin u u1 u2 u3)) u)))

;; Fredkin_proj_2
(declare-fun Fredkin_proj_2 (wired_circuit) Int)

;; Fredkin_proj_2'def
(assert
  (forall ((u Int) (u1 Int) (u2 Int) (u3 Int))
    (= (Fredkin_proj_2 (Fredkin u u1 u2 u3)) u1)))

;; Fredkin_proj_3
(declare-fun Fredkin_proj_3 (wired_circuit) Int)

;; Fredkin_proj_3'def
(assert
  (forall ((u Int) (u1 Int) (u2 Int) (u3 Int))
    (= (Fredkin_proj_3 (Fredkin u u1 u2 u3)) u2)))

;; Fredkin_proj_4
(declare-fun Fredkin_proj_4 (wired_circuit) Int)

;; Fredkin_proj_4'def
(assert
  (forall ((u Int) (u1 Int) (u2 Int) (u3 Int))
    (= (Fredkin_proj_4 (Fredkin u u1 u2 u3)) u3)))

;; Place_proj_1
(declare-fun Place_proj_1 (wired_circuit) wired_circuit)

;; Place_proj_1'def
(assert
  (forall ((u wired_circuit) (u1 Int) (u2 Int))
    (= (Place_proj_1 (Place u u1 u2)) u)))

;; Place_proj_2
(declare-fun Place_proj_2 (wired_circuit) Int)

;; Place_proj_2'def
(assert
  (forall ((u wired_circuit) (u1 Int) (u2 Int))
    (= (Place_proj_2 (Place u u1 u2)) u1)))

;; Place_proj_3
(declare-fun Place_proj_3 (wired_circuit) Int)

;; Place_proj_3'def
(assert
  (forall ((u wired_circuit) (u1 Int) (u2 Int))
    (= (Place_proj_3 (Place u u1 u2)) u2)))

;; Cont_proj_1
(declare-fun Cont_proj_1 (wired_circuit) wired_circuit)

;; Cont_proj_1'def
(assert
  (forall ((u wired_circuit) (u1 Int) (u2 Int) (u3 Int))
    (= (Cont_proj_1 (Cont u u1 u2 u3)) u)))

;; Cont_proj_2
(declare-fun Cont_proj_2 (wired_circuit) Int)

;; Cont_proj_2'def
(assert
  (forall ((u wired_circuit) (u1 Int) (u2 Int) (u3 Int))
    (= (Cont_proj_2 (Cont u u1 u2 u3)) u1)))

;; Cont_proj_3
(declare-fun Cont_proj_3 (wired_circuit) Int)

;; Cont_proj_3'def
(assert
  (forall ((u wired_circuit) (u1 Int) (u2 Int) (u3 Int))
    (= (Cont_proj_3 (Cont u u1 u2 u3)) u2)))

;; Cont_proj_4
(declare-fun Cont_proj_4 (wired_circuit) Int)

;; Cont_proj_4'def
(assert
  (forall ((u wired_circuit) (u1 Int) (u2 Int) (u3 Int))
    (= (Cont_proj_4 (Cont u u1 u2 u3)) u3)))

;; Sequence_proj_1
(declare-fun Sequence_proj_11 (wired_circuit) wired_circuit)

;; Sequence_proj_1'def
(assert
  (forall ((u wired_circuit) (u1 wired_circuit))
    (= (Sequence_proj_11 (Sequence1 u u1)) u)))

;; Sequence_proj_2
(declare-fun Sequence_proj_21 (wired_circuit) wired_circuit)

;; Sequence_proj_2'def
(assert
  (forall ((u wired_circuit) (u1 wired_circuit))
    (= (Sequence_proj_21 (Sequence1 u u1)) u1)))

;; Parallel_proj_1
(declare-fun Parallel_proj_11 (wired_circuit) wired_circuit)

;; Parallel_proj_1'def
(assert
  (forall ((u wired_circuit) (u1 wired_circuit))
    (= (Parallel_proj_11 (Parallel1 u u1)) u)))

;; Parallel_proj_2
(declare-fun Parallel_proj_21 (wired_circuit) wired_circuit)

;; Parallel_proj_2'def
(assert
  (forall ((u wired_circuit) (u1 wired_circuit))
    (= (Parallel_proj_21 (Parallel1 u u1)) u1)))

;; Ancillas_proj_1
(declare-fun Ancillas_proj_11 (wired_circuit) wired_circuit)

;; Ancillas_proj_1'def
(assert
  (forall ((u wired_circuit) (u1 Int))
    (= (Ancillas_proj_11 (Ancillas1 u u1)) u)))

;; Ancillas_proj_2
(declare-fun Ancillas_proj_21 (wired_circuit) Int)

;; Ancillas_proj_2'def
(assert
  (forall ((u wired_circuit) (u1 Int))
    (= (Ancillas_proj_21 (Ancillas1 u u1)) u1)))

;; wired_circuit_inversion
(assert
  (forall ((u wired_circuit))
    (or
      (or
        (or
          (or
            (or
              (or
                (or
                  (or
                    (or
                      (or
                        (or
                          (or
                            (or
                              (or
                                (or
                                  (or
                                    (or
                                      (or
                                        (or
                                          (or
                                            (or
                                              (or
                                                (or
                                                  (or
                                                    (= u Skip)
                                                    (= u (Phase1
                                                           (Phase_proj_11 u))))
                                                  (= u (Rx (Rx_proj_1 u))))
                                                (= u (Ry (Ry_proj_1 u))))
                                              (= u (Rz1 (Rz_proj_11 u))))
                                            (= u (Rzp (Rzp_proj_1 u))))
                                          (= u Hadamard1))
                                        (= u S))
                                      (= u T))
                                    (= u X))
                                  (= u Y))
                                (= u Z))
                              (= u Bricks_Cnot))
                            (= u Bricks_Toffoli))
                          (= u Bricks_Fredkin))
                        (= u Bricks_Swap))
                      (= u (Swap1
                             (Swap_proj_1 u)
                             (Swap_proj_2 u)
                             (Swap_proj_3 u))))
                    (= u (Cnot1
                           (Cnot_proj_1 u)
                           (Cnot_proj_2 u)
                           (Cnot_proj_3 u))))
                  (= u (Toffoli
                         (Toffoli_proj_1 u)
                         (Toffoli_proj_2 u)
                         (Toffoli_proj_3 u)
                         (Toffoli_proj_4 u))))
                (= u (Fredkin
                       (Fredkin_proj_1 u)
                       (Fredkin_proj_2 u)
                       (Fredkin_proj_3 u)
                       (Fredkin_proj_4 u))))
              (= u (Place (Place_proj_1 u) (Place_proj_2 u) (Place_proj_3 u))))
            (= u (Cont
                   (Cont_proj_1 u)
                   (Cont_proj_2 u)
                   (Cont_proj_3 u)
                   (Cont_proj_4 u))))
          (= u (Sequence1 (Sequence_proj_11 u) (Sequence_proj_21 u))))
        (= u (Parallel1 (Parallel_proj_11 u) (Parallel_proj_21 u))))
      (= u (Ancillas1 (Ancillas_proj_11 u) (Ancillas_proj_21 u))))))

;; width_pre_
(declare-fun width_pre_ (wired_circuit) Int)

;; width_pre_'def
(assert
  (and
    (and
      (and
        (and
          (and
            (and
              (and
                (and
                  (and
                    (and
                      (and
                        (and
                          (and
                            (and
                              (and
                                (and
                                  (and
                                    (and
                                      (and
                                        (and
                                          (and
                                            (and
                                              (and
                                                (and
                                                  (= (width_pre_ Skip) 1)
                                                  (forall ((w Int))
                                                    (= (width_pre_
                                                         (Phase1 w)) 1)))
                                                (forall ((w Int))
                                                  (= (width_pre_ (Rx w)) 1)))
                                              (forall ((w Int))
                                                (= (width_pre_ (Ry w)) 1)))
                                            (forall ((w Int))
                                              (= (width_pre_ (Rz1 w)) 1)))
                                          (forall ((w Int))
                                            (= (width_pre_ (Rzp w)) 1)))
                                        (= (width_pre_ Hadamard1) 1))
                                      (= (width_pre_ S) 1))
                                    (= (width_pre_ T) 1))
                                  (= (width_pre_ X) 1))
                                (= (width_pre_ Y) 1))
                              (= (width_pre_ Z) 1))
                            (= (width_pre_ Bricks_Cnot) 2))
                          (= (width_pre_ Bricks_Toffoli) 3))
                        (= (width_pre_ Bricks_Fredkin) 3))
                      (= (width_pre_ Bricks_Swap) 2))
                    (forall ((x Int) (x1 Int) (x2 Int))
                      (= (width_pre_ (Swap1 x x1 x2)) x2)))
                  (forall ((x Int) (x1 Int) (x2 Int))
                    (= (width_pre_ (Cnot1 x x1 x2)) x2)))
                (forall ((x Int) (x1 Int) (x2 Int) (x3 Int))
                  (= (width_pre_ (Toffoli x x1 x2 x3)) x3)))
              (forall ((x Int) (x1 Int) (x2 Int) (x3 Int))
                (= (width_pre_ (Fredkin x x1 x2 x3)) x3)))
            (forall ((x wired_circuit) (x1 Int) (x2 Int))
              (= (width_pre_ (Place x x1 x2)) x2)))
          (forall ((x wired_circuit) (x1 Int) (x2 Int) (x3 Int))
            (= (width_pre_ (Cont x x1 x2 x3)) x3)))
        (forall ((x wired_circuit) (x1 wired_circuit))
          (= (width_pre_ (Sequence1 x x1)) (width_pre_ x))))
      (forall ((x wired_circuit) (x1 wired_circuit))
        (= (width_pre_ (Parallel1 x x1)) (+ (width_pre_ x) (width_pre_ x1)))))
    (forall ((x wired_circuit) (x1 Int))
      (= (width_pre_ (Ancillas1 x x1)) (- (width_pre_ x) x1)))))

;; build_correct_
(declare-fun build_correct_ (wired_circuit) Bool)

;; build_correct_'def
(assert
  (and
    (and
      (and
        (and
          (and
            (and
              (and
                (and
                  (and
                    (and
                      (and
                        (and
                          (and
                            (and
                              (and
                                (and
                                  (and
                                    (and
                                      (and
                                        (and
                                          (and
                                            (and
                                              (and
                                                (and
                                                  (build_correct_ Skip)
                                                  (forall ((w Int))
                                                    (build_correct_
                                                      (Phase1 w))))
                                                (forall ((w Int))
                                                  (build_correct_ (Rx w))))
                                              (forall ((w Int))
                                                (build_correct_ (Ry w))))
                                            (forall ((w Int))
                                              (build_correct_ (Rz1 w))))
                                          (forall ((w Int))
                                            (build_correct_ (Rzp w))))
                                        (build_correct_ Hadamard1))
                                      (build_correct_ S))
                                    (build_correct_ T))
                                  (build_correct_ X))
                                (build_correct_ Y))
                              (build_correct_ Z))
                            (build_correct_ Bricks_Cnot))
                          (build_correct_ Bricks_Toffoli))
                        (build_correct_ Bricks_Fredkin))
                      (build_correct_ Bricks_Swap))
                    (forall ((t1 Int) (t2 Int) (n Int))
                      (=
                        (build_correct_ (Swap1 t1 t2 n))
                        (and
                          (and (<= 0 t1) (< t1 n))
                          (and (and (<= 0 t2) (< t2 n)) (not (= t1 t2)))))))
                  (forall ((c Int) (t Int) (n Int))
                    (=
                      (build_correct_ (Cnot1 c t n))
                      (and
                        (and (<= 0 c) (< c n))
                        (and (and (<= 0 t) (< t n)) (not (= c t)))))))
                (forall ((c1 Int) (c2 Int) (t Int) (n Int))
                  (=
                    (build_correct_ (Toffoli c1 c2 t n))
                    (and
                      (and (<= 0 c1) (< c1 n))
                      (and
                        (and (<= 0 c2) (< c2 n))
                        (and
                          (and (<= 0 t) (< t n))
                          (and
                            (not (= c1 t))
                            (and (not (= c2 t)) (not (= c1 c2))))))))))
              (forall ((c1 Int) (c2 Int) (t Int) (n Int))
                (=
                  (build_correct_ (Fredkin c1 c2 t n))
                  (and
                    (and (<= 0 c1) (< c1 n))
                    (and
                      (and (<= 0 c2) (< c2 n))
                      (and
                        (and (<= 0 t) (< t n))
                        (and
                          (not (= c1 t))
                          (and (not (= c2 t)) (not (= c1 c2))))))))))
            (forall ((c wired_circuit) (t Int) (n Int))
              (=
                (build_correct_ (Place c t n))
                (and
                  (build_correct_ c)
                  (and (and (<= 0 t) (< t n)) (<= (+ t (width_pre_ c)) n))))))
          (forall ((c wired_circuit) (co Int) (t Int) (n Int))
            (=
              (build_correct_ (Cont c co t n))
              (and
                (build_correct_ c)
                (and
                  (and (<= 0 co) (< co n))
                  (and
                    (and (<= 0 t) (<= t (- n (width_pre_ c))))
                    (or (< co t) (<= (+ t (width_pre_ c)) co))))))))
        (forall ((d wired_circuit) (e wired_circuit))
          (=
            (build_correct_ (Sequence1 d e))
            (and
              (= (width_pre_ d) (width_pre_ e))
              (and (build_correct_ d) (build_correct_ e))))))
      (forall ((d wired_circuit) (e wired_circuit))
        (=
          (build_correct_ (Parallel1 d e))
          (and (build_correct_ d) (build_correct_ e)))))
    (forall ((d wired_circuit) (i Int))
      (=
        (build_correct_ (Ancillas1 d i))
        (and (<= 1 i) (and (<= (+ i 1) (width_pre_ d)) (build_correct_ d)))))))

;; width_pre
(declare-fun width_pre1 (wired_circuit) Int)

;; width_pre'def
(assert
  (forall ((c wired_circuit))
    (=>
      (build_correct_ c)
      (and
        (and
          (and
            (and
              (and
                (and
                  (and
                    (and
                      (and
                        (and
                          (and
                            (and
                              (and
                                (and
                                  (and
                                    (and
                                      (and
                                        (and
                                          (and
                                            (and
                                              (and
                                                (and
                                                  (and
                                                    (and
                                                      (=>
                                                        (= c Skip)
                                                        (= (width_pre1 c) 1))
                                                      (forall ((w Int))
                                                        (=>
                                                          (= c (Phase1 w))
                                                          (= (width_pre1 c) 1))))
                                                    (forall ((w Int))
                                                      (=>
                                                        (= c (Rx w))
                                                        (= (width_pre1 c) 1))))
                                                  (forall ((w Int))
                                                    (=>
                                                      (= c (Ry w))
                                                      (= (width_pre1 c) 1))))
                                                (forall ((w Int))
                                                  (=>
                                                    (= c (Rz1 w))
                                                    (= (width_pre1 c) 1))))
                                              (forall ((w Int))
                                                (=>
                                                  (= c (Rzp w))
                                                  (= (width_pre1 c) 1))))
                                            (=>
                                              (= c Hadamard1)
                                              (= (width_pre1 c) 1)))
                                          (=> (= c S) (= (width_pre1 c) 1)))
                                        (=> (= c T) (= (width_pre1 c) 1)))
                                      (=> (= c X) (= (width_pre1 c) 1)))
                                    (=> (= c Y) (= (width_pre1 c) 1)))
                                  (=> (= c Z) (= (width_pre1 c) 1)))
                                (=> (= c Bricks_Cnot) (= (width_pre1 c) 2)))
                              (=> (= c Bricks_Toffoli) (= (width_pre1 c) 3)))
                            (=> (= c Bricks_Fredkin) (= (width_pre1 c) 3)))
                          (=> (= c Bricks_Swap) (= (width_pre1 c) 2)))
                        (forall ((x Int) (x1 Int) (x2 Int))
                          (=> (= c (Swap1 x x1 x2)) (= (width_pre1 c) x2))))
                      (forall ((x Int) (x1 Int) (x2 Int))
                        (=> (= c (Cnot1 x x1 x2)) (= (width_pre1 c) x2))))
                    (forall ((x Int) (x1 Int) (x2 Int) (x3 Int))
                      (=> (= c (Toffoli x x1 x2 x3)) (= (width_pre1 c) x3))))
                  (forall ((x Int) (x1 Int) (x2 Int) (x3 Int))
                    (=> (= c (Fredkin x x1 x2 x3)) (= (width_pre1 c) x3))))
                (forall ((x wired_circuit) (x1 Int) (x2 Int))
                  (=> (= c (Place x x1 x2)) (= (width_pre1 c) x2))))
              (forall ((x wired_circuit) (x1 Int) (x2 Int) (x3 Int))
                (=> (= c (Cont x x1 x2 x3)) (= (width_pre1 c) x3))))
            (forall ((x wired_circuit) (x1 wired_circuit))
              (=> (= c (Sequence1 x x1)) (= (width_pre1 c) (width_pre1 x)))))
          (forall ((x wired_circuit) (x1 wired_circuit))
            (=>
              (= c (Parallel1 x x1))
              (= (width_pre1 c) (+ (width_pre1 x) (width_pre1 x1))))))
        (forall ((x wired_circuit) (x1 Int))
          (=>
            (= c (Ancillas1 x x1))
            (= (width_pre1 c) (- (width_pre1 x) x1))))))))

;; width_pre'spec
(assert
  (forall ((c wired_circuit))
    (=>
      (build_correct_ c)
      (and (<= 1 (width_pre1 c)) (= (width_pre1 c) (width_pre_ c))))))

;; build_correct
(declare-fun build_correct1 (wired_circuit) Bool)

;; build_correct'def
(assert
  (and
    (and
      (and
        (and
          (and
            (and
              (and
                (and
                  (and
                    (and
                      (and
                        (and
                          (and
                            (and
                              (and
                                (and
                                  (and
                                    (and
                                      (and
                                        (and
                                          (and
                                            (and
                                              (and
                                                (and
                                                  (build_correct1 Skip)
                                                  (forall ((w Int))
                                                    (build_correct1
                                                      (Phase1 w))))
                                                (forall ((w Int))
                                                  (build_correct1 (Rx w))))
                                              (forall ((w Int))
                                                (build_correct1 (Ry w))))
                                            (forall ((w Int))
                                              (build_correct1 (Rz1 w))))
                                          (forall ((w Int))
                                            (build_correct1 (Rzp w))))
                                        (build_correct1 Hadamard1))
                                      (build_correct1 S))
                                    (build_correct1 T))
                                  (build_correct1 X))
                                (build_correct1 Y))
                              (build_correct1 Z))
                            (build_correct1 Bricks_Cnot))
                          (build_correct1 Bricks_Toffoli))
                        (build_correct1 Bricks_Fredkin))
                      (build_correct1 Bricks_Swap))
                    (forall ((t1 Int) (t2 Int) (n Int))
                      (=
                        (build_correct1 (Swap1 t1 t2 n))
                        (and
                          (and (<= 0 t1) (< t1 n))
                          (and (and (<= 0 t2) (< t2 n)) (not (= t1 t2)))))))
                  (forall ((c Int) (t Int) (n Int))
                    (=
                      (build_correct1 (Cnot1 c t n))
                      (and
                        (and (<= 0 c) (< c n))
                        (and (and (<= 0 t) (< t n)) (not (= c t)))))))
                (forall ((c1 Int) (c2 Int) (t Int) (n Int))
                  (=
                    (build_correct1 (Toffoli c1 c2 t n))
                    (and
                      (and (<= 0 c1) (< c1 n))
                      (and
                        (and (<= 0 c2) (< c2 n))
                        (and
                          (and (<= 0 t) (< t n))
                          (and
                            (not (= c1 t))
                            (and (not (= c2 t)) (not (= c1 c2))))))))))
              (forall ((c1 Int) (c2 Int) (t Int) (n Int))
                (=
                  (build_correct1 (Fredkin c1 c2 t n))
                  (and
                    (and (<= 0 c1) (< c1 n))
                    (and
                      (and (<= 0 c2) (< c2 n))
                      (and
                        (and (<= 0 t) (< t n))
                        (and
                          (not (= c1 t))
                          (and (not (= c2 t)) (not (= c1 c2))))))))))
            (forall ((c wired_circuit) (t Int) (n Int))
              (=
                (build_correct1 (Place c t n))
                (and
                  (build_correct1 c)
                  (and (and (<= 0 t) (< t n)) (<= (+ t (width_pre1 c)) n))))))
          (forall ((c wired_circuit) (co Int) (t Int) (n Int))
            (=
              (build_correct1 (Cont c co t n))
              (and
                (build_correct1 c)
                (and
                  (and (<= 0 co) (< co n))
                  (and
                    (and (<= 0 t) (<= t (- n (width_pre1 c))))
                    (or (< co t) (<= (+ t (width_pre1 c)) co))))))))
        (forall ((d wired_circuit) (e wired_circuit))
          (=
            (build_correct1 (Sequence1 d e))
            (and
              (build_correct1 d)
              (and (build_correct1 e) (= (width_pre1 d) (width_pre1 e)))))))
      (forall ((d wired_circuit) (e wired_circuit))
        (=
          (build_correct1 (Parallel1 d e))
          (and (build_correct1 d) (build_correct1 e)))))
    (forall ((d wired_circuit) (i Int))
      (=
        (build_correct1 (Ancillas1 d i))
        (and (build_correct1 d) (and (<= 1 i) (<= (+ i 1) (width_pre1 d))))))))

;; build_correct'spec
(assert
  (forall ((c wired_circuit)) (= (build_correct1 c) (build_correct_ c))))

;; depth_pre
(declare-fun depth_pre (wired_circuit) Int)

;; depth_pre'def
(assert
  (forall ((c wired_circuit))
    (=>
      (build_correct1 c)
      (and
        (and
          (and
            (and
              (and
                (and
                  (and
                    (and
                      (and
                        (and
                          (and
                            (and
                              (and
                                (and
                                  (and
                                    (and
                                      (and
                                        (and
                                          (and
                                            (and
                                              (and
                                                (and
                                                  (and
                                                    (and
                                                      (=>
                                                        (= c Skip)
                                                        (= (depth_pre c) 0))
                                                      (forall ((w Int))
                                                        (=>
                                                          (= c (Phase1 w))
                                                          (= (depth_pre c) 1))))
                                                    (forall ((w Int))
                                                      (=>
                                                        (= c (Rx w))
                                                        (= (depth_pre c) 1))))
                                                  (forall ((w Int))
                                                    (=>
                                                      (= c (Ry w))
                                                      (= (depth_pre c) 1))))
                                                (forall ((w Int))
                                                  (=>
                                                    (= c (Rz1 w))
                                                    (= (depth_pre c) 1))))
                                              (forall ((w Int))
                                                (=>
                                                  (= c (Rzp w))
                                                  (= (depth_pre c) 1))))
                                            (=>
                                              (= c Hadamard1)
                                              (= (depth_pre c) 1)))
                                          (=> (= c S) (= (depth_pre c) 1)))
                                        (=> (= c T) (= (depth_pre c) 1)))
                                      (=> (= c X) (= (depth_pre c) 1)))
                                    (=> (= c Y) (= (depth_pre c) 1)))
                                  (=> (= c Z) (= (depth_pre c) 1)))
                                (=> (= c Bricks_Cnot) (= (depth_pre c) 1)))
                              (=> (= c Bricks_Toffoli) (= (depth_pre c) 1)))
                            (=> (= c Bricks_Fredkin) (= (depth_pre c) 1)))
                          (=> (= c Bricks_Swap) (= (depth_pre c) 1)))
                        (forall ((w Int) (w1 Int) (w2 Int))
                          (=> (= c (Swap1 w w1 w2)) (= (depth_pre c) 1))))
                      (forall ((w Int) (w1 Int) (w2 Int))
                        (=> (= c (Cnot1 w w1 w2)) (= (depth_pre c) 1))))
                    (forall ((w Int) (w1 Int) (w2 Int) (w3 Int))
                      (=> (= c (Toffoli w w1 w2 w3)) (= (depth_pre c) 1))))
                  (forall ((w Int) (w1 Int) (w2 Int) (w3 Int))
                    (=> (= c (Fredkin w w1 w2 w3)) (= (depth_pre c) 1))))
                (forall ((x wired_circuit) (x1 Int) (x2 Int))
                  (=> (= c (Place x x1 x2)) (= (depth_pre c) (depth_pre x)))))
              (forall ((x wired_circuit) (x1 Int) (x2 Int) (x3 Int))
                (=> (= c (Cont x x1 x2 x3)) (= (depth_pre c) (depth_pre x)))))
            (forall ((x wired_circuit) (x1 wired_circuit))
              (=>
                (= c (Sequence1 x x1))
                (= (depth_pre c) (+ (depth_pre x) (depth_pre x1))))))
          (forall ((x wired_circuit) (x1 wired_circuit))
            (=>
              (= c (Parallel1 x x1))
              (= (depth_pre c) (max (depth_pre x) (depth_pre x1))))))
        (forall ((x wired_circuit) (x1 Int))
          (=> (= c (Ancillas1 x x1)) (= (depth_pre c) (depth_pre x))))))))

;; cont_size
(declare-fun cont_size1 () Int)

;; cont_size'def
(assert (<= 1 cont_size1))

;; ancillas_pre
(declare-fun ancillas_pre (wired_circuit) Int)

;; ancillas_pre'def
(assert
  (forall ((c wired_circuit))
    (=>
      (build_correct1 c)
      (and
        (and
          (and
            (and
              (and
                (and
                  (and
                    (and
                      (and
                        (and
                          (and
                            (and
                              (and
                                (and
                                  (and
                                    (and
                                      (and
                                        (and
                                          (and
                                            (and
                                              (and
                                                (and
                                                  (and
                                                    (and
                                                      (=>
                                                        (= c Skip)
                                                        (= (ancillas_pre c) 0))
                                                      (forall ((w Int))
                                                        (=>
                                                          (= c (Phase1 w))
                                                          (= (ancillas_pre c) 0))))
                                                    (forall ((w Int))
                                                      (=>
                                                        (= c (Rx w))
                                                        (= (ancillas_pre c) 0))))
                                                  (forall ((w Int))
                                                    (=>
                                                      (= c (Ry w))
                                                      (= (ancillas_pre c) 0))))
                                                (forall ((w Int))
                                                  (=>
                                                    (= c (Rz1 w))
                                                    (= (ancillas_pre c) 0))))
                                              (forall ((w Int))
                                                (=>
                                                  (= c (Rzp w))
                                                  (= (ancillas_pre c) 0))))
                                            (=>
                                              (= c Hadamard1)
                                              (= (ancillas_pre c) 0)))
                                          (=> (= c S) (= (ancillas_pre c) 0)))
                                        (=> (= c T) (= (ancillas_pre c) 0)))
                                      (=> (= c X) (= (ancillas_pre c) 0)))
                                    (=> (= c Y) (= (ancillas_pre c) 0)))
                                  (=> (= c Z) (= (ancillas_pre c) 0)))
                                (=> (= c Bricks_Cnot) (= (ancillas_pre c) 0)))
                              (=>
                                (= c Bricks_Toffoli)
                                (= (ancillas_pre c) 0)))
                            (=> (= c Bricks_Fredkin) (= (ancillas_pre c) 0)))
                          (=> (= c Bricks_Swap) (= (ancillas_pre c) 0)))
                        (forall ((w Int) (w1 Int) (w2 Int))
                          (=> (= c (Swap1 w w1 w2)) (= (ancillas_pre c) 0))))
                      (forall ((w Int) (w1 Int) (w2 Int))
                        (=> (= c (Cnot1 w w1 w2)) (= (ancillas_pre c) 0))))
                    (forall ((w Int) (w1 Int) (w2 Int) (w3 Int))
                      (=> (= c (Toffoli w w1 w2 w3)) (= (ancillas_pre c) 0))))
                  (forall ((w Int) (w1 Int) (w2 Int) (w3 Int))
                    (=> (= c (Fredkin w w1 w2 w3)) (= (ancillas_pre c) 0))))
                (forall ((x wired_circuit) (x1 Int) (x2 Int))
                  (=>
                    (= c (Place x x1 x2))
                    (= (ancillas_pre c) (ancillas_pre x)))))
              (forall ((x wired_circuit) (x1 Int) (x2 Int) (x3 Int))
                (=>
                  (= c (Cont x x1 x2 x3))
                  (= (ancillas_pre c) (ancillas_pre x)))))
            (forall ((x wired_circuit) (x1 wired_circuit))
              (=>
                (= c (Sequence1 x x1))
                (= (ancillas_pre c) (max (ancillas_pre x) (ancillas_pre x1))))))
          (forall ((x wired_circuit) (x1 wired_circuit))
            (=>
              (= c (Parallel1 x x1))
              (= (ancillas_pre c) (+ (ancillas_pre x) (ancillas_pre x1))))))
        (forall ((x wired_circuit) (x1 Int))
          (=>
            (= c (Ancillas1 x x1))
            (= (ancillas_pre c) (+ (ancillas_pre x) x1))))))))

;; ancillas_pre'spec
(assert
  (forall ((c wired_circuit))
    (=> (build_correct1 c) (<= 0 (ancillas_pre c)))))

;; atomic
(declare-fun atomic (wired_circuit) Bool)

;; atomic'def
(assert
  (and
    (and
      (and
        (and
          (and
            (and
              (and
                (and
                  (and
                    (and
                      (and
                        (and
                          (and
                            (and
                              (and
                                (and
                                  (and
                                    (and
                                      (and
                                        (and
                                          (and
                                            (and
                                              (and
                                                (and
                                                  (not (atomic Skip))
                                                  (forall ((x Int))
                                                    (atomic (Phase1 x))))
                                                (forall ((x Int))
                                                  (atomic (Rx x))))
                                              (forall ((x Int))
                                                (atomic (Ry x))))
                                            (forall ((x Int))
                                              (atomic (Rz1 x))))
                                          (forall ((x Int)) (atomic (Rzp x))))
                                        (atomic Hadamard1))
                                      (atomic S))
                                    (atomic T))
                                  (atomic X))
                                (atomic Y))
                              (atomic Z))
                            (not (atomic Bricks_Cnot)))
                          (not (atomic Bricks_Toffoli)))
                        (not (atomic Bricks_Fredkin)))
                      (not (atomic Bricks_Swap)))
                    (forall ((w Int) (w1 Int) (w2 Int))
                      (not (atomic (Swap1 w w1 w2)))))
                  (forall ((w Int) (w1 Int) (w2 Int))
                    (not (atomic (Cnot1 w w1 w2)))))
                (forall ((w Int) (w1 Int) (w2 Int) (w3 Int))
                  (not (atomic (Toffoli w w1 w2 w3)))))
              (forall ((w Int) (w1 Int) (w2 Int) (w3 Int))
                (not (atomic (Fredkin w w1 w2 w3)))))
            (forall ((w wired_circuit) (w1 Int) (w2 Int))
              (not (atomic (Place w w1 w2)))))
          (forall ((w wired_circuit) (w1 Int) (w2 Int) (w3 Int))
            (not (atomic (Cont w w1 w2 w3)))))
        (forall ((w wired_circuit) (w1 wired_circuit))
          (not (atomic (Sequence1 w w1)))))
      (forall ((w wired_circuit) (w1 wired_circuit))
        (not (atomic (Parallel1 w w1)))))
    (forall ((w wired_circuit) (w1 Int)) (not (atomic (Ancillas1 w w1))))))

;; size_pre
(declare-fun size_pre (wired_circuit) Int)

;; size_pre'def
(assert
  (forall ((c wired_circuit))
    (=>
      (build_correct1 c)
      (and
        (and
          (and
            (and
              (and
                (and
                  (and
                    (and
                      (and
                        (and
                          (and
                            (and
                              (and
                                (and
                                  (and
                                    (and
                                      (and
                                        (and
                                          (and
                                            (and
                                              (and
                                                (and
                                                  (and
                                                    (and
                                                      (=>
                                                        (= c Skip)
                                                        (= (size_pre c) 0))
                                                      (forall ((w Int))
                                                        (=>
                                                          (= c (Phase1 w))
                                                          (= (size_pre c) 1))))
                                                    (forall ((w Int))
                                                      (=>
                                                        (= c (Rx w))
                                                        (= (size_pre c) 1))))
                                                  (forall ((w Int))
                                                    (=>
                                                      (= c (Ry w))
                                                      (= (size_pre c) 1))))
                                                (forall ((w Int))
                                                  (=>
                                                    (= c (Rz1 w))
                                                    (= (size_pre c) 1))))
                                              (forall ((w Int))
                                                (=>
                                                  (= c (Rzp w))
                                                  (= (size_pre c) 1))))
                                            (=>
                                              (= c Hadamard1)
                                              (= (size_pre c) 1)))
                                          (=> (= c S) (= (size_pre c) 1)))
                                        (=> (= c T) (= (size_pre c) 1)))
                                      (=> (= c X) (= (size_pre c) 1)))
                                    (=> (= c Y) (= (size_pre c) 1)))
                                  (=> (= c Z) (= (size_pre c) 1)))
                                (=> (= c Bricks_Cnot) (= (size_pre c) 1)))
                              (=> (= c Bricks_Toffoli) (= (size_pre c) 1)))
                            (=> (= c Bricks_Fredkin) (= (size_pre c) 1)))
                          (=> (= c Bricks_Swap) (= (size_pre c) 1)))
                        (forall ((w Int) (w1 Int) (w2 Int))
                          (=> (= c (Swap1 w w1 w2)) (= (size_pre c) 1))))
                      (forall ((w Int) (w1 Int) (w2 Int))
                        (=> (= c (Cnot1 w w1 w2)) (= (size_pre c) 1))))
                    (forall ((w Int) (w1 Int) (w2 Int) (w3 Int))
                      (=> (= c (Toffoli w w1 w2 w3)) (= (size_pre c) 1))))
                  (forall ((w Int) (w1 Int) (w2 Int) (w3 Int))
                    (=> (= c (Fredkin w w1 w2 w3)) (= (size_pre c) 1))))
                (forall ((x wired_circuit) (x1 Int) (x2 Int))
                  (=> (= c (Place x x1 x2)) (= (size_pre c) (size_pre x)))))
              (forall ((x wired_circuit) (x1 Int) (x2 Int) (x3 Int))
                (=>
                  (= c (Cont x x1 x2 x3))
                  (= (size_pre c) (* (size_pre x) cont_size1)))))
            (forall ((x wired_circuit) (x1 wired_circuit))
              (=>
                (= c (Sequence1 x x1))
                (= (size_pre c) (+ (size_pre x) (size_pre x1))))))
          (forall ((x wired_circuit) (x1 wired_circuit))
            (=>
              (= c (Parallel1 x x1))
              (= (size_pre c) (+ (size_pre x) (size_pre x1))))))
        (forall ((x wired_circuit) (x1 Int))
          (=> (= c (Ancillas1 x x1)) (= (size_pre c) (size_pre x))))))))

;; range_pre
(declare-fun range_pre (wired_circuit) Int)

;; range_pre'def
(assert
  (forall ((c wired_circuit))
    (=>
      (build_correct1 c)
      (and
        (and
          (and
            (and
              (and
                (and
                  (and
                    (and
                      (and
                        (and
                          (and
                            (and
                              (and
                                (and
                                  (and
                                    (and
                                      (and
                                        (and
                                          (and
                                            (and
                                              (and
                                                (and
                                                  (and
                                                    (and
                                                      (=>
                                                        (= c Skip)
                                                        (= (range_pre c) 0))
                                                      (forall ((w Int))
                                                        (=>
                                                          (= c (Phase1 w))
                                                          (= (range_pre c) 0))))
                                                    (forall ((x Int))
                                                      (=>
                                                        (= c (Rx x))
                                                        (= (range_pre c) 2))))
                                                  (forall ((x Int))
                                                    (=>
                                                      (= c (Ry x))
                                                      (= (range_pre c) 2))))
                                                (forall ((w Int))
                                                  (=>
                                                    (= c (Rz1 w))
                                                    (= (range_pre c) 0))))
                                              (forall ((w Int))
                                                (=>
                                                  (= c (Rzp w))
                                                  (= (range_pre c) 0))))
                                            (=>
                                              (= c Hadamard1)
                                              (= (range_pre c) 1)))
                                          (=> (= c S) (= (range_pre c) 0)))
                                        (=> (= c T) (= (range_pre c) 0)))
                                      (=> (= c X) (= (range_pre c) 0)))
                                    (=> (= c Y) (= (range_pre c) 0)))
                                  (=> (= c Z) (= (range_pre c) 0)))
                                (=> (= c Bricks_Cnot) (= (range_pre c) 0)))
                              (=> (= c Bricks_Toffoli) (= (range_pre c) 0)))
                            (=> (= c Bricks_Fredkin) (= (range_pre c) 0)))
                          (=> (= c Bricks_Swap) (= (range_pre c) 0)))
                        (forall ((w Int) (w1 Int) (w2 Int))
                          (=> (= c (Swap1 w w1 w2)) (= (range_pre c) 0))))
                      (forall ((w Int) (w1 Int) (w2 Int))
                        (=> (= c (Cnot1 w w1 w2)) (= (range_pre c) 0))))
                    (forall ((w Int) (w1 Int) (w2 Int) (w3 Int))
                      (=> (= c (Toffoli w w1 w2 w3)) (= (range_pre c) 0))))
                  (forall ((w Int) (w1 Int) (w2 Int) (w3 Int))
                    (=> (= c (Fredkin w w1 w2 w3)) (= (range_pre c) 0))))
                (forall ((x wired_circuit) (x1 Int) (x2 Int))
                  (=> (= c (Place x x1 x2)) (= (range_pre c) (range_pre x)))))
              (forall ((x wired_circuit) (x1 Int) (x2 Int) (x3 Int))
                (=> (= c (Cont x x1 x2 x3)) (= (range_pre c) (range_pre x)))))
            (forall ((x wired_circuit) (x1 wired_circuit))
              (=>
                (= c (Sequence1 x x1))
                (= (range_pre c) (+ (range_pre x) (range_pre x1))))))
          (forall ((x wired_circuit) (x1 wired_circuit))
            (=>
              (= c (Parallel1 x x1))
              (= (range_pre c) (+ (range_pre x) (range_pre x1))))))
        (forall ((x wired_circuit) (x1 Int))
          (=> (= c (Ancillas1 x x1)) (= (range_pre c) (range_pre x))))))))

;; range_pre'spec
(assert
  (forall ((c wired_circuit)) (=> (build_correct1 c) (<= 0 (range_pre c)))))

;; circ_to_pps_pre
(declare-fun circ_to_pps_pre1 (wired_circuit) pps)

;; circ_to_pps_pre'def
(assert
  (forall ((c wired_circuit))
    (=>
      (build_correct1 c)
      (and
        (and
          (and
            (and
              (and
                (and
                  (and
                    (and
                      (and
                        (and
                          (and
                            (and
                              (and
                                (and
                                  (and
                                    (and
                                      (and
                                        (and
                                          (and
                                            (and
                                              (and
                                                (and
                                                  (and
                                                    (and
                                                      (=>
                                                        (= c Skip)
                                                        (= (circ_to_pps_pre1
                                                             c) pps_id))
                                                      (forall ((k Int))
                                                        (=>
                                                          (= c (Phase1 k))
                                                          (= (circ_to_pps_pre1
                                                               c) (pps_phase
                                                                    k)))))
                                                    (forall ((k Int))
                                                      (=>
                                                        (= c (Rx k))
                                                        (= (circ_to_pps_pre1
                                                             c) (pps_rx k)))))
                                                  (forall ((k Int))
                                                    (=>
                                                      (= c (Ry k))
                                                      (= (circ_to_pps_pre1 c) 
                                                      (pps_ry
                                                        k)))))
                                                (forall ((k Int))
                                                  (=>
                                                    (= c (Rz1 k))
                                                    (= (circ_to_pps_pre1 c) 
                                                    (pps_rz_b
                                                      k)))))
                                              (forall ((k Int))
                                                (=>
                                                  (= c (Rzp k))
                                                  (= (circ_to_pps_pre1 c) 
                                                  (pps_rz
                                                    k)))))
                                            (=>
                                              (= c Hadamard1)
                                              (= (circ_to_pps_pre1 c) 
                                              pps_hadamard)))
                                          (=>
                                            (= c S)
                                            (= (circ_to_pps_pre1 c) (pps_rz
                                                                    2))))
                                        (=>
                                          (= c T)
                                          (= (circ_to_pps_pre1 c) (pps_rz 3))))
                                      (=>
                                        (= c X)
                                        (= (circ_to_pps_pre1 c) pps_xx)))
                                    (=>
                                      (= c Y)
                                      (= (circ_to_pps_pre1 c) pps_yy)))
                                  (=>
                                    (= c Z)
                                    (= (circ_to_pps_pre1 c) pps_zz)))
                                (=>
                                  (= c Bricks_Cnot)
                                  (= (circ_to_pps_pre1 c) (pps_cnot 0 1 2))))
                              (=>
                                (= c Bricks_Toffoli)
                                (= (circ_to_pps_pre1 c) (pps_toffoli 0 1 2 3))))
                            (=>
                              (= c Bricks_Fredkin)
                              (= (circ_to_pps_pre1 c) (pps_fredkin 0 1 2 3))))
                          (=>
                            (= c Bricks_Swap)
                            (= (circ_to_pps_pre1 c) (pps_swap 0 1 2))))
                        (forall ((t1 Int) (t2 Int) (n Int))
                          (=>
                            (= c (Swap1 t1 t2 n))
                            (= (circ_to_pps_pre1 c) (pps_swap t1 t2 n)))))
                      (forall ((c1 Int) (t Int) (n Int))
                        (=>
                          (= c (Cnot1 c1 t n))
                          (= (circ_to_pps_pre1 c) (pps_cnot c1 t n)))))
                    (forall ((c1 Int) (c2 Int) (t Int) (n Int))
                      (=>
                        (= c (Toffoli c1 c2 t n))
                        (= (circ_to_pps_pre1 c) (pps_toffoli c1 c2 t n)))))
                  (forall ((c1 Int) (c2 Int) (t Int) (n Int))
                    (=>
                      (= c (Fredkin c1 c2 t n))
                      (= (circ_to_pps_pre1 c) (pps_fredkin c1 c2 t n)))))
                (forall ((c1 wired_circuit) (t Int) (n Int))
                  (=>
                    (= c (Place c1 t n))
                    (= (circ_to_pps_pre1 c) (pps_place
                                              (circ_to_pps_pre1 c1)
                                              t
                                              n)))))
              (forall ((c1 wired_circuit) (co Int) (t Int) (n Int))
                (=>
                  (= c (Cont c1 co t n))
                  (= (circ_to_pps_pre1 c) (pps_cont
                                            (circ_to_pps_pre1 c1)
                                            co
                                            t
                                            n)))))
            (forall ((d wired_circuit) (e wired_circuit))
              (=>
                (= c (Sequence1 d e))
                (= (circ_to_pps_pre1 c) (pps_seq
                                          (circ_to_pps_pre1 d)
                                          (circ_to_pps_pre1 e))))))
          (forall ((d wired_circuit) (e wired_circuit))
            (=>
              (= c (Parallel1 d e))
              (= (circ_to_pps_pre1 c) (pps_par
                                        (circ_to_pps_pre1 d)
                                        (circ_to_pps_pre1 e))))))
        (forall ((d wired_circuit) (i Int))
          (=>
            (= c (Ancillas1 d i))
            (= (circ_to_pps_pre1 c) (pps_ancs (circ_to_pps_pre1 d) i))))))))

;; circ_to_pps_pre'spec
(assert
  (forall ((c wired_circuit))
    (=>
      (build_correct1 c)
      (and
        (<= 1 (h_width (circ_to_pps_pre1 c)))
        (and
          (= (h_width (circ_to_pps_pre1 c)) (width_pre1 c))
          (= (h_range (circ_to_pps_pre1 c)) (range_pre c)))))))

;; ancillable
(declare-fun ancillable (wired_circuit
  Int) Bool)

;; ancillable'spec
(assert
  (forall ((c wired_circuit) (i Int))
    (=
      (ancillable c i)
      (exists ((path_sem_target (Array (matrix complex) (matrix complex))))
        (forall ((x (matrix complex)))
          (=>
            (is_a_ket_l x (- (width_pre1 c) i))
            (= (pps_apply (circ_to_pps_pre1 c) (kronecker x (ket i 0))) 
            (kronecker
              (tb2t65
                (infix_at
                  (matrix1 complex1)
                  (matrix1 complex1)
                  (t2tb66 path_sem_target)
                  (t2tb65 x)))
              (ket i 0)))))))))

;; correct
(declare-fun correct1 (wired_circuit) Bool)

;; correct'def
(assert
  (and
    (and
      (and
        (and
          (and
            (and
              (and
                (and
                  (and
                    (and
                      (and
                        (and
                          (and
                            (and
                              (and
                                (and
                                  (and
                                    (and
                                      (and
                                        (and
                                          (and
                                            (and
                                              (and
                                                (and
                                                  (correct1 Skip)
                                                  (forall ((x Int))
                                                    (correct1 (Phase1 x))))
                                                (forall ((x Int))
                                                  (correct1 (Rx x))))
                                              (forall ((x Int))
                                                (correct1 (Ry x))))
                                            (forall ((x Int))
                                              (correct1 (Rz1 x))))
                                          (forall ((x Int))
                                            (correct1 (Rzp x))))
                                        (correct1 Hadamard1))
                                      (correct1 S))
                                    (correct1 T))
                                  (correct1 X))
                                (correct1 Y))
                              (correct1 Z))
                            (correct1 Bricks_Cnot))
                          (correct1 Bricks_Toffoli))
                        (correct1 Bricks_Fredkin))
                      (correct1 Bricks_Swap))
                    (forall ((x Int) (x1 Int) (x2 Int))
                      (=
                        (correct1 (Swap1 x x1 x2))
                        (and
                          (and (<= 0 x) (< x x2))
                          (and (and (<= 0 x1) (< x1 x2)) (not (= x x1)))))))
                  (forall ((x Int) (x1 Int) (x2 Int))
                    (=
                      (correct1 (Cnot1 x x1 x2))
                      (and
                        (and (<= 0 x) (< x x2))
                        (and (and (<= 0 x1) (< x1 x2)) (not (= x x1)))))))
                (forall ((x Int) (x1 Int) (x2 Int) (x3 Int))
                  (=
                    (correct1 (Toffoli x x1 x2 x3))
                    (and
                      (and (<= 0 x) (< x x3))
                      (and
                        (and (<= 0 x1) (< x1 x3))
                        (and
                          (and (<= 0 x2) (< x2 x3))
                          (and
                            (not (= x x2))
                            (and (not (= x1 x2)) (not (= x x1))))))))))
              (forall ((x Int) (x1 Int) (x2 Int) (x3 Int))
                (=
                  (correct1 (Fredkin x x1 x2 x3))
                  (and
                    (and (<= 0 x) (< x x3))
                    (and
                      (and (<= 0 x1) (< x1 x3))
                      (and
                        (and (<= 0 x2) (< x2 x3))
                        (and
                          (not (= x x2))
                          (and (not (= x1 x2)) (not (= x x1))))))))))
            (forall ((x wired_circuit) (x1 Int) (x2 Int))
              (=
                (correct1 (Place x x1 x2))
                (and
                  (correct1 x)
                  (and
                    (and (<= 0 x1) (<= x1 x2))
                    (<= (+ x1 (width_pre1 x)) x2))))))
          (forall ((x wired_circuit) (x1 Int) (x2 Int) (x3 Int))
            (=
              (correct1 (Cont x x1 x2 x3))
              (and
                (correct1 x)
                (and
                  (and (<= 0 x1) (< x1 x3))
                  (and
                    (and (<= 0 x2) (<= x2 (- x3 (width_pre1 x))))
                    (or (< x1 x2) (<= (+ x2 (width_pre1 x)) x1))))))))
        (forall ((x wired_circuit) (x1 wired_circuit))
          (=
            (correct1 (Sequence1 x x1))
            (and
              (correct1 x)
              (and (correct1 x1) (= (width_pre1 x) (width_pre1 x1)))))))
      (forall ((x wired_circuit) (x1 wired_circuit))
        (= (correct1 (Parallel1 x x1)) (and (correct1 x) (correct1 x1)))))
    (forall ((x wired_circuit) (x1 Int))
      (=
        (correct1 (Ancillas1 x x1))
        (and
          (correct1 x)
          (and
            (<= 1 x1)
            (and (<= (+ x1 1) (width_pre1 x)) (ancillable x x1))))))))

;; correct'spec
(assert (forall ((c wired_circuit)) (=> (correct1 c) (build_correct_ c))))

;; pre
(declare-fun pre1 (circuit) wired_circuit)

;; circuit'invariant
(assert
  (forall ((self circuit))
    (! (correct1 (pre1 self)) :pattern ((pre1 self)) )))

;; injective_pre
(assert
  (forall ((c circuit) (cqt circuit))
    (=> (not (= c cqt)) (not (= (pre1 c) (pre1 cqt))))))

;; build_correct_pre
(assert (forall ((c circuit)) (build_correct_ (pre1 c))))

;; to_qc
(declare-fun to_qc1 (wired_circuit) circuit)

;; to_qc'def
(assert
  (forall ((c wired_circuit)) (=> (correct1 c) (= (pre1 (to_qc1 c)) c))))

;; range
(declare-fun range1 (circuit) Int)

;; range'def
(assert
  (forall ((c circuit))
    (and
      (and
        (and
          (and
            (and
              (and
                (and
                  (and
                    (and
                      (and
                        (and
                          (and
                            (and
                              (and
                                (and
                                  (and
                                    (and
                                      (and
                                        (and
                                          (and
                                            (and
                                              (and
                                                (and
                                                  (and
                                                    (=>
                                                      (= (pre1 c) Skip)
                                                      (= (range1 c) 0))
                                                    (forall ((w Int))
                                                      (=>
                                                        (= (pre1 c) (Phase1
                                                                    w))
                                                        (= (range1 c) 0))))
                                                  (forall ((x Int))
                                                    (=>
                                                      (= (pre1 c) (Rx x))
                                                      (= (range1 c) 2))))
                                                (forall ((x Int))
                                                  (=>
                                                    (= (pre1 c) (Ry x))
                                                    (= (range1 c) 2))))
                                              (forall ((w Int))
                                                (=>
                                                  (= (pre1 c) (Rz1 w))
                                                  (= (range1 c) 0))))
                                            (forall ((w Int))
                                              (=>
                                                (= (pre1 c) (Rzp w))
                                                (= (range1 c) 0))))
                                          (=>
                                            (= (pre1 c) Hadamard1)
                                            (= (range1 c) 1)))
                                        (=> (= (pre1 c) S) (= (range1 c) 0)))
                                      (=> (= (pre1 c) T) (= (range1 c) 0)))
                                    (=> (= (pre1 c) X) (= (range1 c) 0)))
                                  (=> (= (pre1 c) Y) (= (range1 c) 0)))
                                (=> (= (pre1 c) Z) (= (range1 c) 0)))
                              (=> (= (pre1 c) Bricks_Cnot) (= (range1 c) 0)))
                            (=> (= (pre1 c) Bricks_Toffoli) (= (range1 c) 0)))
                          (=> (= (pre1 c) Bricks_Fredkin) (= (range1 c) 0)))
                        (=> (= (pre1 c) Bricks_Swap) (= (range1 c) 0)))
                      (forall ((w Int) (w1 Int) (w2 Int))
                        (=> (= (pre1 c) (Swap1 w w1 w2)) (= (range1 c) 0))))
                    (forall ((w Int) (w1 Int) (w2 Int))
                      (=> (= (pre1 c) (Cnot1 w w1 w2)) (= (range1 c) 0))))
                  (forall ((w Int) (w1 Int) (w2 Int) (w3 Int))
                    (=> (= (pre1 c) (Toffoli w w1 w2 w3)) (= (range1 c) 0))))
                (forall ((w Int) (w1 Int) (w2 Int) (w3 Int))
                  (=> (= (pre1 c) (Fredkin w w1 w2 w3)) (= (range1 c) 0))))
              (forall ((x wired_circuit) (x1 Int) (x2 Int))
                (=>
                  (= (pre1 c) (Place x x1 x2))
                  (= (range1 c) (range1 (to_qc1 x))))))
            (forall ((x wired_circuit) (x1 Int) (x2 Int) (x3 Int))
              (=>
                (= (pre1 c) (Cont x x1 x2 x3))
                (= (range1 c) (range1 (to_qc1 x))))))
          (forall ((x wired_circuit) (x1 wired_circuit))
            (=>
              (= (pre1 c) (Sequence1 x x1))
              (= (range1 c) (+ (range1 (to_qc1 x)) (range1 (to_qc1 x1)))))))
        (forall ((x wired_circuit) (x1 wired_circuit))
          (=>
            (= (pre1 c) (Parallel1 x x1))
            (= (range1 c) (+ (range1 (to_qc1 x)) (range1 (to_qc1 x1)))))))
      (forall ((x wired_circuit) (x1 Int))
        (=> (= (pre1 c) (Ancillas1 x x1)) (= (range1 c) (range1 (to_qc1 x))))))))

;; range'spec
(assert
  (forall ((c circuit))
    (and
      (= (range1 c) (range_pre (pre1 c)))
      (and
        (= (range1 c) (h_range (circ_to_pps_pre1 (pre1 c))))
        (<= 0 (range1 c))))))

;; size
(declare-fun size1 (circuit) Int)

;; size'def
(assert
  (forall ((c circuit))
    (and
      (and
        (and
          (and
            (and
              (and
                (and
                  (and
                    (and
                      (and
                        (and
                          (and
                            (and
                              (and
                                (and
                                  (and
                                    (and
                                      (and
                                        (and
                                          (and
                                            (and
                                              (and
                                                (and
                                                  (and
                                                    (=>
                                                      (= (pre1 c) Skip)
                                                      (= (size1 c) 0))
                                                    (forall ((w Int))
                                                      (=>
                                                        (= (pre1 c) (Phase1
                                                                    w))
                                                        (= (size1 c) 1))))
                                                  (forall ((w Int))
                                                    (=>
                                                      (= (pre1 c) (Rx w))
                                                      (= (size1 c) 1))))
                                                (forall ((w Int))
                                                  (=>
                                                    (= (pre1 c) (Ry w))
                                                    (= (size1 c) 1))))
                                              (forall ((w Int))
                                                (=>
                                                  (= (pre1 c) (Rz1 w))
                                                  (= (size1 c) 1))))
                                            (forall ((w Int))
                                              (=>
                                                (= (pre1 c) (Rzp w))
                                                (= (size1 c) 1))))
                                          (=>
                                            (= (pre1 c) Hadamard1)
                                            (= (size1 c) 1)))
                                        (=> (= (pre1 c) S) (= (size1 c) 1)))
                                      (=> (= (pre1 c) T) (= (size1 c) 1)))
                                    (=> (= (pre1 c) X) (= (size1 c) 1)))
                                  (=> (= (pre1 c) Y) (= (size1 c) 1)))
                                (=> (= (pre1 c) Z) (= (size1 c) 1)))
                              (=> (= (pre1 c) Bricks_Cnot) (= (size1 c) 1)))
                            (=> (= (pre1 c) Bricks_Toffoli) (= (size1 c) 1)))
                          (=> (= (pre1 c) Bricks_Fredkin) (= (size1 c) 1)))
                        (=> (= (pre1 c) Bricks_Swap) (= (size1 c) 1)))
                      (forall ((w Int) (w1 Int) (w2 Int))
                        (=> (= (pre1 c) (Swap1 w w1 w2)) (= (size1 c) 1))))
                    (forall ((w Int) (w1 Int) (w2 Int))
                      (=> (= (pre1 c) (Cnot1 w w1 w2)) (= (size1 c) 1))))
                  (forall ((w Int) (w1 Int) (w2 Int) (w3 Int))
                    (=> (= (pre1 c) (Toffoli w w1 w2 w3)) (= (size1 c) 1))))
                (forall ((w Int) (w1 Int) (w2 Int) (w3 Int))
                  (=> (= (pre1 c) (Fredkin w w1 w2 w3)) (= (size1 c) 1))))
              (forall ((x wired_circuit) (x1 Int) (x2 Int))
                (=> (= (pre1 c) (Place x x1 x2)) (= (size1 c) (size_pre x)))))
            (forall ((x wired_circuit) (x1 Int) (x2 Int) (x3 Int))
              (=>
                (= (pre1 c) (Cont x x1 x2 x3))
                (= (size1 c) (* (size1 (to_qc1 x)) cont_size1)))))
          (forall ((x wired_circuit) (x1 wired_circuit))
            (=>
              (= (pre1 c) (Sequence1 x x1))
              (= (size1 c) (+ (size1 (to_qc1 x)) (size1 (to_qc1 x1)))))))
        (forall ((x wired_circuit) (x1 wired_circuit))
          (=>
            (= (pre1 c) (Parallel1 x x1))
            (= (size1 c) (+ (size1 (to_qc1 x)) (size1 (to_qc1 x1)))))))
      (forall ((x wired_circuit) (x1 Int))
        (=> (= (pre1 c) (Ancillas1 x x1)) (= (size1 c) (size_pre x)))))))

;; size'spec
(assert (forall ((c circuit)) (= (size1 c) (size_pre (pre1 c)))))

;; ancillas
(declare-fun ancillas1 (circuit) Int)

;; ancillas'def
(assert
  (forall ((c circuit))
    (and
      (and
        (and
          (and
            (and
              (and
                (and
                  (and
                    (and
                      (and
                        (and
                          (and
                            (and
                              (and
                                (and
                                  (and
                                    (and
                                      (and
                                        (and
                                          (and
                                            (and
                                              (and
                                                (and
                                                  (and
                                                    (=>
                                                      (= (pre1 c) Skip)
                                                      (= (ancillas1 c) 0))
                                                    (forall ((w Int))
                                                      (=>
                                                        (= (pre1 c) (Phase1
                                                                    w))
                                                        (= (ancillas1 c) 0))))
                                                  (forall ((w Int))
                                                    (=>
                                                      (= (pre1 c) (Rx w))
                                                      (= (ancillas1 c) 0))))
                                                (forall ((w Int))
                                                  (=>
                                                    (= (pre1 c) (Ry w))
                                                    (= (ancillas1 c) 0))))
                                              (forall ((w Int))
                                                (=>
                                                  (= (pre1 c) (Rz1 w))
                                                  (= (ancillas1 c) 0))))
                                            (forall ((w Int))
                                              (=>
                                                (= (pre1 c) (Rzp w))
                                                (= (ancillas1 c) 0))))
                                          (=>
                                            (= (pre1 c) Hadamard1)
                                            (= (ancillas1 c) 0)))
                                        (=>
                                          (= (pre1 c) S)
                                          (= (ancillas1 c) 0)))
                                      (=> (= (pre1 c) T) (= (ancillas1 c) 0)))
                                    (=> (= (pre1 c) X) (= (ancillas1 c) 0)))
                                  (=> (= (pre1 c) Y) (= (ancillas1 c) 0)))
                                (=> (= (pre1 c) Z) (= (ancillas1 c) 0)))
                              (=>
                                (= (pre1 c) Bricks_Cnot)
                                (= (ancillas1 c) 0)))
                            (=>
                              (= (pre1 c) Bricks_Toffoli)
                              (= (ancillas1 c) 0)))
                          (=>
                            (= (pre1 c) Bricks_Fredkin)
                            (= (ancillas1 c) 0)))
                        (=> (= (pre1 c) Bricks_Swap) (= (ancillas1 c) 0)))
                      (forall ((w Int) (w1 Int) (w2 Int))
                        (=> (= (pre1 c) (Swap1 w w1 w2)) (= (ancillas1 c) 0))))
                    (forall ((w Int) (w1 Int) (w2 Int))
                      (=> (= (pre1 c) (Cnot1 w w1 w2)) (= (ancillas1 c) 0))))
                  (forall ((w Int) (w1 Int) (w2 Int) (w3 Int))
                    (=>
                      (= (pre1 c) (Toffoli w w1 w2 w3))
                      (= (ancillas1 c) 0))))
                (forall ((w Int) (w1 Int) (w2 Int) (w3 Int))
                  (=> (= (pre1 c) (Fredkin w w1 w2 w3)) (= (ancillas1 c) 0))))
              (forall ((x wired_circuit) (x1 Int) (x2 Int))
                (=>
                  (= (pre1 c) (Place x x1 x2))
                  (= (ancillas1 c) (ancillas1 (to_qc1 x))))))
            (forall ((x wired_circuit) (x1 Int) (x2 Int) (x3 Int))
              (=>
                (= (pre1 c) (Cont x x1 x2 x3))
                (= (ancillas1 c) (ancillas1 (to_qc1 x))))))
          (forall ((x wired_circuit) (x1 wired_circuit))
            (=>
              (= (pre1 c) (Sequence1 x x1))
              (= (ancillas1 c) (max
                                 (ancillas1 (to_qc1 x))
                                 (ancillas1 (to_qc1 x1)))))))
        (forall ((x wired_circuit) (x1 wired_circuit))
          (=>
            (= (pre1 c) (Parallel1 x x1))
            (= (ancillas1 c) (+ (ancillas1 (to_qc1 x)) (ancillas1
                                                         (to_qc1 x1)))))))
      (forall ((x wired_circuit) (x1 Int))
        (=>
          (= (pre1 c) (Ancillas1 x x1))
          (= (ancillas1 c) (+ (ancillas1 (to_qc1 x)) x1)))))))

;; ancillas'spec
(assert (forall ((c circuit)) (= (ancillas1 c) (ancillas_pre (pre1 c)))))

;; ancillas_pos
(assert (forall ((c circuit)) (<= 0 (ancillas1 c))))

;; size_pos
(assert (forall ((c circuit)) (<= 0 (size1 c))))

;; width
(declare-fun width1 (circuit) Int)

;; width'def
(assert
  (forall ((c circuit))
    (and
      (and
        (and
          (and
            (and
              (and
                (and
                  (and
                    (and
                      (and
                        (and
                          (and
                            (and
                              (and
                                (and
                                  (and
                                    (and
                                      (and
                                        (and
                                          (and
                                            (and
                                              (and
                                                (and
                                                  (and
                                                    (=>
                                                      (= (pre1 c) Skip)
                                                      (= (width1 c) 1))
                                                    (forall ((w Int))
                                                      (=>
                                                        (= (pre1 c) (Phase1
                                                                    w))
                                                        (= (width1 c) 1))))
                                                  (forall ((w Int))
                                                    (=>
                                                      (= (pre1 c) (Rx w))
                                                      (= (width1 c) 1))))
                                                (forall ((w Int))
                                                  (=>
                                                    (= (pre1 c) (Ry w))
                                                    (= (width1 c) 1))))
                                              (forall ((w Int))
                                                (=>
                                                  (= (pre1 c) (Rz1 w))
                                                  (= (width1 c) 1))))
                                            (forall ((w Int))
                                              (=>
                                                (= (pre1 c) (Rzp w))
                                                (= (width1 c) 1))))
                                          (=>
                                            (= (pre1 c) Hadamard1)
                                            (= (width1 c) 1)))
                                        (=> (= (pre1 c) S) (= (width1 c) 1)))
                                      (=> (= (pre1 c) T) (= (width1 c) 1)))
                                    (=> (= (pre1 c) X) (= (width1 c) 1)))
                                  (=> (= (pre1 c) Y) (= (width1 c) 1)))
                                (=> (= (pre1 c) Z) (= (width1 c) 1)))
                              (=> (= (pre1 c) Bricks_Cnot) (= (width1 c) 2)))
                            (=> (= (pre1 c) Bricks_Toffoli) (= (width1 c) 3)))
                          (=> (= (pre1 c) Bricks_Fredkin) (= (width1 c) 3)))
                        (=> (= (pre1 c) Bricks_Swap) (= (width1 c) 2)))
                      (forall ((x Int) (x1 Int) (x2 Int))
                        (=> (= (pre1 c) (Swap1 x x1 x2)) (= (width1 c) x2))))
                    (forall ((x Int) (x1 Int) (x2 Int))
                      (=> (= (pre1 c) (Cnot1 x x1 x2)) (= (width1 c) x2))))
                  (forall ((x Int) (x1 Int) (x2 Int) (x3 Int))
                    (=> (= (pre1 c) (Toffoli x x1 x2 x3)) (= (width1 c) x3))))
                (forall ((x Int) (x1 Int) (x2 Int) (x3 Int))
                  (=> (= (pre1 c) (Fredkin x x1 x2 x3)) (= (width1 c) x3))))
              (forall ((x wired_circuit) (x1 Int) (x2 Int))
                (=> (= (pre1 c) (Place x x1 x2)) (= (width1 c) x2))))
            (forall ((x wired_circuit) (x1 Int) (x2 Int) (x3 Int))
              (=> (= (pre1 c) (Cont x x1 x2 x3)) (= (width1 c) x3))))
          (forall ((x wired_circuit) (x1 wired_circuit))
            (=>
              (= (pre1 c) (Sequence1 x x1))
              (= (width1 c) (width1 (to_qc1 x))))))
        (forall ((x wired_circuit) (x1 wired_circuit))
          (=>
            (= (pre1 c) (Parallel1 x x1))
            (= (width1 c) (+ (width1 (to_qc1 x)) (width1 (to_qc1 x1)))))))
      (forall ((x wired_circuit) (x1 Int))
        (=>
          (= (pre1 c) (Ancillas1 x x1))
          (= (width1 c) (- (width1 (to_qc1 x)) x1)))))))

;; width'spec
(assert
  (forall ((c circuit))
    (and (<= 1 (width1 c)) (= (width1 c) (width_pre1 (pre1 c))))))

;; basis_ket
(declare-fun basis_ket1 (circuit
  (Array Int Int)
  (Array Int Int)
  Int) Int)

;; result
(declare-fun result69 ((Array Int Int)
  Int) (Array Int Int))

;; result
(declare-fun result70 ((Array Int Int)
  Int) (Array Int Int))

;; basis_ket_closure
(declare-fun basis_ket_closure1 () (Array circuit (Array (Array Int Int) (Array (Array Int Int) (Array Int Int)))))

;; result
(declare-fun result71 ((Array Int Int)
  wired_circuit) (Array Int Int))

;; result
(declare-fun result72 ((Array Int Int)
  wired_circuit) (Array Int Int))

;; result
(declare-fun result73 ((Array Int Int)
  wired_circuit) (Array Int Int))

;; result
(declare-fun result74 ((Array Int Int)
  wired_circuit
  Int) (Array Int Int))

;; result'def
(assert
  (forall ((x (Array Int Int)) (x1 Int) (j Int))
    (= (select (result69 x x1) j) (select x (+ j x1)))))

;; result'def
(assert
  (forall ((x (Array Int Int)) (x1 Int) (j Int))
    (= (select (result70 x x1) j) (select x (+ j x1)))))

;; basis_ket_closure_def
(assert
  (forall ((y circuit) (y1 (Array Int Int)) (y2 (Array Int Int)) (y3 Int))
    (= (select (select (select (select basis_ket_closure1 y) y1) y2) y3) 
    (basis_ket1
      y
      y1
      y2
      y3))))

;; result'def
(assert
  (forall ((y (Array Int Int)) (x wired_circuit) (k Int))
    (= (select (result71 y x) k) (select y (+ k (range1 (to_qc1 x)))))))

;; result'def
(assert
  (forall ((x (Array Int Int)) (x1 wired_circuit) (k Int))
    (= (select (result72 x x1) k) (select x (+ k (width1 (to_qc1 x1)))))))

;; result'def
(assert
  (forall ((y (Array Int Int)) (x wired_circuit) (k Int))
    (= (select (result73 y x) k) (select y (+ k (range1 (to_qc1 x)))))))

;; result'def
(assert
  (forall ((x (Array Int Int)) (x1 wired_circuit) (x2 Int) (k Int))
    (= (select (result74 x x1 x2) k) (ite (< k (- (width1 (to_qc1 x1)) x2))
                                       (select x k)
                                       0))))

;; basis_ket'def
(assert
  (forall ((c circuit) (x (Array Int Int)) (y (Array Int Int)) (i Int))
    (and
      (and
        (and
          (and
            (and
              (and
                (and
                  (and
                    (and
                      (and
                        (and
                          (and
                            (and
                              (and
                                (and
                                  (and
                                    (and
                                      (and
                                        (and
                                          (and
                                            (and
                                              (and
                                                (and
                                                  (and
                                                    (=>
                                                      (= (pre1 c) Skip)
                                                      (= (basis_ket1 c x y i) (select x i)))
                                                    (forall ((x1 Int))
                                                      (=>
                                                        (= (pre1 c) (Phase1
                                                                    x1))
                                                        (= (basis_ket1
                                                             c
                                                             x
                                                             y
                                                             i) (select x i)))))
                                                  (forall ((x1 Int))
                                                    (=>
                                                      (= (pre1 c) (Rx x1))
                                                      (= (basis_ket1 c x y i) (select y 1)))))
                                                (forall ((x1 Int))
                                                  (=>
                                                    (= (pre1 c) (Ry x1))
                                                    (= (basis_ket1 c x y i) (select y 1)))))
                                              (forall ((x1 Int))
                                                (=>
                                                  (= (pre1 c) (Rz1 x1))
                                                  (= (basis_ket1 c x y i) (select x i)))))
                                            (forall ((x1 Int))
                                              (=>
                                                (= (pre1 c) (Rzp x1))
                                                (= (basis_ket1 c x y i) (select x i)))))
                                          (=>
                                            (= (pre1 c) Hadamard1)
                                            (= (basis_ket1 c x y i) (select y i))))
                                        (=>
                                          (= (pre1 c) S)
                                          (= (basis_ket1 c x y i) (select x i))))
                                      (=>
                                        (= (pre1 c) T)
                                        (= (basis_ket1 c x y i) (select x i))))
                                    (=>
                                      (= (pre1 c) X)
                                      (= (basis_ket1 c x y i) (- 1 (select x i)))))
                                  (=>
                                    (= (pre1 c) Y)
                                    (= (basis_ket1 c x y i) (- 1 (select x i)))))
                                (=>
                                  (= (pre1 c) Z)
                                  (= (basis_ket1 c x y i) (select x i))))
                              (=>
                                (= (pre1 c) Bricks_Cnot)
                                (ite (= i 1)
                                  (= (basis_ket1 c x y i) (+ (* (select x 0) (- 1 (select x 1))) (* (select x 1) (- 1 (select x 0)))))
                                  (= (basis_ket1 c x y i) (select x i)))))
                            (=>
                              (= (pre1 c) Bricks_Toffoli)
                              (ite (= i 2)
                                (= (basis_ket1 c x y i) (+ (* (* (select x 0) (select x 1)) (- 1 (select x 2))) (* (select x 2) (- 1 (* (select x 0) (select x 1))))))
                                (= (basis_ket1 c x y i) (select x i)))))
                          (=>
                            (= (pre1 c) Bricks_Fredkin)
                            (ite (= i 1)
                              (= (basis_ket1 c x y i) (+ (* (select x 0) (select x 2)) (* (- 1 (select x 0)) (select x 1))))
                              (ite (= i 2)
                                (= (basis_ket1 c x y i) (+ (* (select x 0) (select x 1)) (* (- 1 (select x 0)) (select x 2))))
                                (= (basis_ket1 c x y i) (select x i))))))
                        (=>
                          (= (pre1 c) Bricks_Swap)
                          (ite (= i 0)
                            (= (basis_ket1 c x y i) (select x 1))
                            (ite (= i 1)
                              (= (basis_ket1 c x y i) (select x 0))
                              (= (basis_ket1 c x y i) (select x i))))))
                      (forall ((x1 Int) (x2 Int) (x3 Int))
                        (=>
                          (= (pre1 c) (Swap1 x1 x2 x3))
                          (ite (= i x1)
                            (= (basis_ket1 c x y i) (select x x2))
                            (ite (= i x2)
                              (= (basis_ket1 c x y i) (select x x1))
                              (= (basis_ket1 c x y i) (select x i)))))))
                    (forall ((x1 Int) (x2 Int) (x3 Int))
                      (=>
                        (= (pre1 c) (Cnot1 x1 x2 x3))
                        (ite (= i x2)
                          (= (basis_ket1 c x y i) (+ (* (select x x1) (- 1 (select x x2))) (* (select x x2) (- 1 (select x x1)))))
                          (= (basis_ket1 c x y i) (select x i))))))
                  (forall ((x1 Int) (x2 Int) (x3 Int) (x4 Int))
                    (=>
                      (= (pre1 c) (Toffoli x1 x2 x3 x4))
                      (ite (= i x3)
                        (= (basis_ket1 c x y i) (+ (* (* (select x x1) (select x x2)) (- 1 (select x x3))) (* (select x x3) (- 1 (* (select x x1) (select x x2))))))
                        (= (basis_ket1 c x y i) (select x i))))))
                (forall ((x1 Int) (x2 Int) (x3 Int) (x4 Int))
                  (=>
                    (= (pre1 c) (Fredkin x1 x2 x3 x4))
                    (ite (= i x2)
                      (= (basis_ket1 c x y i) (+ (* (select x x1) (select x x3)) (* (- 1 (select x x1)) (select x x2))))
                      (ite (= i x3)
                        (= (basis_ket1 c x y i) (+ (* (select x x1) (select x x2)) (* (- 1 (select x x1)) (select x x3))))
                        (= (basis_ket1 c x y i) (select x i)))))))
              (forall ((x1 wired_circuit) (x2 Int) (x3 Int))
                (=>
                  (= (pre1 c) (Place x1 x2 x3))
                  (ite (and (<= x2 i) (< i (+ x2 (width1 (to_qc1 x1)))))
                    (= (basis_ket1 c x y i) (basis_ket1
                                              (to_qc1 x1)
                                              (result69 x x2)
                                              y
                                              (- i x2)))
                    (= (basis_ket1 c x y i) (select x i))))))
            (forall ((x1 wired_circuit) (x2 Int) (x3 Int) (x4 Int))
              (=>
                (= (pre1 c) (Cont x1 x2 x3 x4))
                (ite (and
                       (= (select x x2) 1)
                       (and (<= x3 i) (< i (+ x3 (width1 (to_qc1 x1))))))
                  (= (basis_ket1 c x y i) (basis_ket1
                                            (to_qc1 x1)
                                            (result70 x x3)
                                            y
                                            (- i x3)))
                  (= (basis_ket1 c x y i) (select x i))))))
          (forall ((x1 wired_circuit) (x2 wired_circuit))
            (=>
              (= (pre1 c) (Sequence1 x1 x2))
              (= (basis_ket1 c x y i) (basis_ket1
                                        (to_qc1 x2)
                                        (select (select (select basis_ket_closure1 
                                        (to_qc1
                                          x1)) x) y)
                                        (result71 y x1)
                                        i)))))
        (forall ((x1 wired_circuit) (x2 wired_circuit))
          (=>
            (= (pre1 c) (Parallel1 x1 x2))
            (ite (< i (width1 (to_qc1 x1)))
              (= (basis_ket1 c x y i) (basis_ket1 (to_qc1 x1) x y i))
              (= (basis_ket1 c x y i) (basis_ket1
                                        (to_qc1 x2)
                                        (result72 x x1)
                                        (result73 y x1)
                                        (- i (width1 (to_qc1 x1)))))))))
      (forall ((x1 wired_circuit) (x2 Int))
        (=>
          (= (pre1 c) (Ancillas1 x1 x2))
          (= (basis_ket1 c x y i) (basis_ket1
                                    (to_qc1 x1)
                                    (result74 x x1 x2)
                                    y
                                    i)))))))

;; basis_ket'spec
(assert
  (forall ((c circuit) (x (Array Int Int)) (y (Array Int Int)) (i Int))
    (and
      (= (basis_ket1 c x y i) (select (select (select (h_basis_ket
                                                        (circ_to_pps_pre1
                                                          (pre1 c))) x) y) i))
      (=>
        (forall ((i1 Int))
          (=>
            (and (<= 0 i1) (< i1 (width1 c)))
            (and (<= 0 (select x i1)) (< (select x i1) 2))))
        (=>
          (forall ((i1 Int))
            (=>
              (and (<= 0 i1) (< i1 (range1 c)))
              (and (<= 0 (select y i1)) (< (select y i1) 2))))
          (=>
            (and (<= 0 i) (< i (width1 c)))
            (and (<= 0 (basis_ket1 c x y i)) (< (basis_ket1 c x y i) 2))))))))

;; basis_ket_invariant
(assert
  (forall ((c circuit))
    (forall ((x (Array Int Int)) (xqt (Array Int Int)) (y (Array Int Int)) (yqt (Array Int Int)))
      (=>
        (forall ((i Int))
          (=>
            (and (<= 0 i) (< i (width1 c)))
            (= (select x i) (select xqt i))))
        (=>
          (forall ((i Int))
            (=>
              (and (<= 0 i) (< i (range1 c)))
              (= (select y i) (select yqt i))))
          (forall ((i Int))
            (=>
              (and (<= 0 i) (< i (width1 c)))
              (= (basis_ket1 c x y i) (basis_ket1 c xqt yqt i)))))))))

;; binary_l_basis_ket
(assert
  (forall ((c circuit) (x (Array Int Int)) (y (Array Int Int)) (w Int))
    (=>
      (binary_l x (width1 c))
      (=>
        (binary_l y (range1 c))
        (=>
          (= (width1 c) w)
          (binary_l (select (select (select basis_ket_closure1 c) x) y) w))))))

;; ang_ind
(declare-fun ang_ind1 (circuit
  (Array Int Int)
  (Array Int Int)) angle)

;; result
(declare-fun result75 ((Array Int Int)
  Int) (Array Int Int))

;; result
(declare-fun result76 ((Array Int Int)
  Int) (Array Int Int))

;; result
(declare-fun result77 ((Array Int Int)
  wired_circuit) (Array Int Int))

;; result
(declare-fun result78 ((Array Int Int)
  wired_circuit) (Array Int Int))

;; result
(declare-fun result79 ((Array Int Int)
  wired_circuit) (Array Int Int))

;; result
(declare-fun result80 ((Array Int Int)
  wired_circuit
  Int) (Array Int Int))

;; result'def
(assert
  (forall ((x (Array Int Int)) (x1 Int) (j Int))
    (= (select (result75 x x1) j) (select x (+ j x1)))))

;; result'def
(assert
  (forall ((x (Array Int Int)) (x1 Int) (j Int))
    (= (select (result76 x x1) j) (select x (+ j x1)))))

;; result'def
(assert
  (forall ((y (Array Int Int)) (x wired_circuit) (k Int))
    (= (select (result77 y x) k) (select y (+ k (range1 (to_qc1 x)))))))

;; result'def
(assert
  (forall ((x (Array Int Int)) (x1 wired_circuit) (k Int))
    (= (select (result78 x x1) k) (select x (+ k (width1 (to_qc1 x1)))))))

;; result'def
(assert
  (forall ((y (Array Int Int)) (x wired_circuit) (k Int))
    (= (select (result79 y x) k) (select y (+ k (range1 (to_qc1 x)))))))

;; result'def
(assert
  (forall ((x (Array Int Int)) (x1 wired_circuit) (x2 Int) (k Int))
    (= (select (result80 x x1 x2) k) (ite (< k (- (width1 (to_qc1 x1)) x2))
                                       (select x k)
                                       0))))

;; ang_ind'def
(assert
  (forall ((c circuit) (x (Array Int Int)) (y (Array Int Int)))
    (and
      (and
        (and
          (and
            (and
              (and
                (and
                  (and
                    (and
                      (and
                        (and
                          (and
                            (and
                              (and
                                (and
                                  (and
                                    (and
                                      (and
                                        (and
                                          (and
                                            (and
                                              (and
                                                (and
                                                  (and
                                                    (=>
                                                      (= (pre1 c) Skip)
                                                      (= (ang_ind1 c x y) 
                                                      (infix_sldtsl
                                                        0
                                                        0)))
                                                    (forall ((x1 Int))
                                                      (=>
                                                        (= (pre1 c) (Phase1
                                                                    x1))
                                                        (= (ang_ind1 c x y) 
                                                        (infix_sldtsl
                                                          1
                                                          x1)))))
                                                  (forall ((x1 Int))
                                                    (=>
                                                      (= (pre1 c) (Rx x1))
                                                      (= (ang_ind1 c x y) 
                                                      (ang_add
                                                        (ang_add
                                                          (infix_sldtsl
                                                            (* (select x 0) (select y 0))
                                                            1)
                                                          (infix_sldtsl
                                                            (* (select y 0) (select y 1))
                                                            1))
                                                        (phase_inv_
                                                          (- (select y 0) 1)
                                                          (infix_sldtsl
                                                            1
                                                            (incr_abs x1))))))))
                                                (forall ((x1 Int))
                                                  (=>
                                                    (= (pre1 c) (Ry x1))
                                                    (= (ang_ind1 c x y) 
                                                    (ang_add
                                                      (ang_add
                                                        (ang_add
                                                          (infix_sldtsl
                                                            (* (select x 0) (select y 0))
                                                            1)
                                                          (infix_sldtsl
                                                            (* (select y 0) (select y 1))
                                                            1))
                                                        (phase_inv_
                                                          (- (select y 0) 1)
                                                          (infix_sldtsl
                                                            1
                                                            (incr_abs x1))))
                                                      (infix_sldtsl
                                                        (- (select y 1) (select x 0))
                                                        2))))))
                                              (forall ((x1 Int))
                                                (=>
                                                  (= (pre1 c) (Rz1 x1))
                                                  (= (ang_ind1 c x y) 
                                                  (phase_inv_
                                                    (- (select x 0) 1)
                                                    (infix_sldtsl
                                                      1
                                                      (incr_abs x1)))))))
                                            (forall ((x1 Int))
                                              (=>
                                                (= (pre1 c) (Rzp x1))
                                                (= (ang_ind1 c x y) (infix_sldtsl
                                                                    (select x 0)
                                                                    x1)))))
                                          (=>
                                            (= (pre1 c) Hadamard1)
                                            (= (ang_ind1 c x y) (infix_sldtsl
                                                                  (* (select x 0) (select y 0))
                                                                  1))))
                                        (=>
                                          (= (pre1 c) S)
                                          (= (ang_ind1 c x y) (infix_sldtsl
                                                                (select x 0)
                                                                2))))
                                      (=>
                                        (= (pre1 c) T)
                                        (= (ang_ind1 c x y) (infix_sldtsl
                                                              (select x 0)
                                                              3))))
                                    (=>
                                      (= (pre1 c) X)
                                      (= (ang_ind1 c x y) (infix_sldtsl 1 0))))
                                  (=>
                                    (= (pre1 c) Y)
                                    (= (ang_ind1 c x y) (phase_inv_
                                                          (select x 0)
                                                          (infix_sldtsl 1 2)))))
                                (=>
                                  (= (pre1 c) Z)
                                  (= (ang_ind1 c x y) (infix_sldtsl
                                                        (select x 0)
                                                        1))))
                              (=>
                                (= (pre1 c) Bricks_Cnot)
                                (= (ang_ind1 c x y) (infix_sldtsl 1 0))))
                            (=>
                              (= (pre1 c) Bricks_Toffoli)
                              (= (ang_ind1 c x y) (infix_sldtsl 1 0))))
                          (=>
                            (= (pre1 c) Bricks_Fredkin)
                            (= (ang_ind1 c x y) (infix_sldtsl 1 0))))
                        (=>
                          (= (pre1 c) Bricks_Swap)
                          (= (ang_ind1 c x y) (infix_sldtsl 1 0))))
                      (forall ((x1 Int) (x2 Int) (x3 Int))
                        (=>
                          (= (pre1 c) (Swap1 x1 x2 x3))
                          (= (ang_ind1 c x y) (infix_sldtsl 1 0)))))
                    (forall ((x1 Int) (x2 Int) (x3 Int))
                      (=>
                        (= (pre1 c) (Cnot1 x1 x2 x3))
                        (= (ang_ind1 c x y) (infix_sldtsl 1 0)))))
                  (forall ((x1 Int) (x2 Int) (x3 Int) (x4 Int))
                    (=>
                      (= (pre1 c) (Toffoli x1 x2 x3 x4))
                      (= (ang_ind1 c x y) (infix_sldtsl 1 0)))))
                (forall ((x1 Int) (x2 Int) (x3 Int) (x4 Int))
                  (=>
                    (= (pre1 c) (Fredkin x1 x2 x3 x4))
                    (= (ang_ind1 c x y) (infix_sldtsl 1 0)))))
              (forall ((x1 wired_circuit) (x2 Int) (x3 Int))
                (=>
                  (= (pre1 c) (Place x1 x2 x3))
                  (= (ang_ind1 c x y) (tb2t84
                                        (infix_at
                                          angle1
                                          (infix_mngt int int)
                                          (infix_at
                                            (infix_mngt
                                              (infix_mngt int int)
                                              angle1)
                                            (infix_mngt int int)
                                            (t2tb118
                                              (h_angle (circ_to_pps_pre1 x1)))
                                            (t2tb7 (result75 x x2)))
                                          (t2tb7 y)))))))
            (forall ((x1 wired_circuit) (x2 Int) (x3 Int) (x4 Int))
              (=>
                (= (pre1 c) (Cont x1 x2 x3 x4))
                (= (ang_ind1 c x y) (ang_add
                                      (ang_mult_int
                                        (tb2t84
                                          (infix_at
                                            angle1
                                            (infix_mngt int int)
                                            (infix_at
                                              (infix_mngt
                                                (infix_mngt int int)
                                                angle1)
                                              (infix_mngt int int)
                                              (t2tb118
                                                (h_angle
                                                  (circ_to_pps_pre1 x1)))
                                              (t2tb7 (result76 x x3)))
                                            (t2tb7 y)))
                                        (select x x2))
                                      (ang_mult_int
                                        (phase_inv_
                                          (select y 0)
                                          (arc_cos_ang
                                            (pow_inv_sqrt_2
                                              (range1 (to_qc1 x1)))))
                                        (- 1 (select x x2))))))))
          (forall ((x1 wired_circuit) (x2 wired_circuit))
            (=>
              (= (pre1 c) (Sequence1 x1 x2))
              (= (ang_ind1 c x y) (ang_add
                                    (tb2t84
                                      (infix_at
                                        angle1
                                        (infix_mngt int int)
                                        (infix_at
                                          (infix_mngt
                                            (infix_mngt int int)
                                            angle1)
                                          (infix_mngt int int)
                                          (t2tb118
                                            (h_angle (circ_to_pps_pre1 x1)))
                                          (t2tb7 x))
                                        (t2tb7 y)))
                                    (tb2t84
                                      (infix_at
                                        angle1
                                        (infix_mngt int int)
                                        (infix_at
                                          (infix_mngt
                                            (infix_mngt int int)
                                            angle1)
                                          (infix_mngt int int)
                                          (t2tb118
                                            (h_angle (circ_to_pps_pre1 x2)))
                                          (t2tb7
                                            (select (select (select basis_ket_closure1 
                                            (to_qc1
                                              x1)) x) y)))
                                        (t2tb7 (result77 y x1)))))))))
        (forall ((x1 wired_circuit) (x2 wired_circuit))
          (=>
            (= (pre1 c) (Parallel1 x1 x2))
            (= (ang_ind1 c x y) (ang_add
                                  (tb2t84
                                    (infix_at
                                      angle1
                                      (infix_mngt int int)
                                      (infix_at
                                        (infix_mngt
                                          (infix_mngt int int)
                                          angle1)
                                        (infix_mngt int int)
                                        (t2tb118
                                          (h_angle (circ_to_pps_pre1 x1)))
                                        (t2tb7 x))
                                      (t2tb7 y)))
                                  (tb2t84
                                    (infix_at
                                      angle1
                                      (infix_mngt int int)
                                      (infix_at
                                        (infix_mngt
                                          (infix_mngt int int)
                                          angle1)
                                        (infix_mngt int int)
                                        (t2tb118
                                          (h_angle (circ_to_pps_pre1 x2)))
                                        (t2tb7 (result78 x x1)))
                                      (t2tb7 (result79 y x1)))))))))
      (forall ((x1 wired_circuit) (x2 Int))
        (=>
          (= (pre1 c) (Ancillas1 x1 x2))
          (= (ang_ind1 c x y) (tb2t84
                                (infix_at
                                  angle1
                                  (infix_mngt int int)
                                  (infix_at
                                    (infix_mngt (infix_mngt int int) angle1)
                                    (infix_mngt int int)
                                    (t2tb118 (h_angle (circ_to_pps_pre1 x1)))
                                    (t2tb7 (result80 x x1 x2)))
                                  (t2tb7 y)))))))))

;; ang_ind'spec
(assert
  (forall ((c circuit) (x (Array Int Int)) (y (Array Int Int)))
    (= (ang_ind1 c x y) (tb2t84
                          (infix_at
                            angle1
                            (infix_mngt int int)
                            (infix_at
                              (infix_mngt (infix_mngt int int) angle1)
                              (infix_mngt int int)
                              (t2tb118 (h_angle (circ_to_pps_pre1 (pre1 c))))
                              (t2tb7 x))
                            (t2tb7 y))))))

;; ang_ind_invariant
(assert
  (forall ((c circuit))
    (forall ((x (Array Int Int)) (xqt (Array Int Int)) (y (Array Int Int)) (yqt (Array Int Int)))
      (=>
        (forall ((i Int))
          (=>
            (and (<= 0 i) (< i (width1 c)))
            (= (select x i) (select xqt i))))
        (=>
          (forall ((i Int))
            (=>
              (and (<= 0 i) (< i (range1 c)))
              (= (select y i) (select yqt i))))
          (= (ang_ind1 c x y) (ang_ind1 c xqt yqt)))))))

;; unwire_pre
(declare-fun unwire_pre (wired_circuit) circuit2)

;; unwire_pre'def
(assert
  (forall ((c wired_circuit))
    (=>
      (correct1 c)
      (and
        (and
          (and
            (and
              (and
                (and
                  (and
                    (and
                      (and
                        (and
                          (and
                            (and
                              (and
                                (and
                                  (and
                                    (and
                                      (and
                                        (and
                                          (and
                                            (and
                                              (and
                                                (and
                                                  (and
                                                    (and
                                                      (=>
                                                        (= c Skip)
                                                        (= (unwire_pre c) 
                                                        id))
                                                      (forall ((k Int))
                                                        (=>
                                                          (= c (Phase1 k))
                                                          (= (unwire_pre c) 
                                                          (phase
                                                            k)))))
                                                    (forall ((k Int))
                                                      (=>
                                                        (= c (Rx k))
                                                        (= (unwire_pre c) 
                                                        (rx
                                                          k)))))
                                                  (forall ((k Int))
                                                    (=>
                                                      (= c (Ry k))
                                                      (= (unwire_pre c) 
                                                      (ry
                                                        k)))))
                                                (forall ((k Int))
                                                  (=>
                                                    (= c (Rz1 k))
                                                    (= (unwire_pre c) 
                                                    (rz_ k)))))
                                              (forall ((k Int))
                                                (=>
                                                  (= c (Rzp k))
                                                  (= (unwire_pre c) (rz k)))))
                                            (=>
                                              (= c Hadamard1)
                                              (= (unwire_pre c) hadamard)))
                                          (=>
                                            (= c S)
                                            (= (unwire_pre c) (rz 2))))
                                        (=>
                                          (= c T)
                                          (= (unwire_pre c) (rz 3))))
                                      (=> (= c X) (= (unwire_pre c) xx)))
                                    (=> (= c Y) (= (unwire_pre c) yy)))
                                  (=> (= c Z) (= (unwire_pre c) zz)))
                                (=>
                                  (= c Bricks_Cnot)
                                  (= (unwire_pre c) cnot)))
                              (=>
                                (= c Bricks_Toffoli)
                                (= (unwire_pre c) toffoli)))
                            (=>
                              (= c Bricks_Fredkin)
                              (= (unwire_pre c) fredkin)))
                          (=> (= c Bricks_Swap) (= (unwire_pre c) swap)))
                        (forall ((t1 Int) (t2 Int) (n Int))
                          (=>
                            (= c (Swap1 t1 t2 n))
                            (= (unwire_pre c) (swap_c t1 t2 n)))))
                      (forall ((c1 Int) (t Int) (n Int))
                        (=>
                          (= c (Cnot1 c1 t n))
                          (= (unwire_pre c) (place_cnot c1 t n)))))
                    (forall ((c1 Int) (c2 Int) (t Int) (n Int))
                      (=>
                        (= c (Toffoli c1 c2 t n))
                        (= (unwire_pre c) (place_toffoli c1 c2 t n)))))
                  (forall ((c1 Int) (t1 Int) (t2 Int) (n Int))
                    (=>
                      (= c (Fredkin c1 t1 t2 n))
                      (= (unwire_pre c) (place_fredkin c1 t1 t2 n)))))
                (forall ((c1 wired_circuit) (p Int) (n Int))
                  (=>
                    (= c (Place c1 p n))
                    (= (unwire_pre c) (place (unwire_pre c1) p n)))))
              (forall ((c1 wired_circuit) (co Int) (t Int) (n Int))
                (=>
                  (= c (Cont c1 co t n))
                  (= (unwire_pre c) (cont (unwire_pre c1) co t n)))))
            (forall ((d wired_circuit) (e wired_circuit))
              (=>
                (= c (Sequence1 d e))
                (= (unwire_pre c) (sequence (unwire_pre d) (unwire_pre e))))))
          (forall ((d wired_circuit) (e wired_circuit))
            (=>
              (= c (Parallel1 d e))
              (= (unwire_pre c) (parallel (unwire_pre d) (unwire_pre e))))))
        (forall ((d wired_circuit) (l Int))
          (=>
            (= c (Ancillas1 d l))
            (= (unwire_pre c) (ancilla (unwire_pre d) l))))))))

;; unwire_pre'spec
(assert
  (forall ((c wired_circuit))
    (=>
      (correct1 c)
      (and
        (= (width (unwire_pre c)) (width_pre1 c))
        (and
          (correct_path_sum_ (unwire_pre c) (circ_to_pps_pre1 c))
          (forall ((x (matrix complex)))
            (=>
              (is_a_ket_l x (width_pre1 c))
              (= (path_sem (unwire_pre c) x) (pps_apply
                                               (circ_to_pps_pre1 c)
                                               x)))))))))

;; circ_to_pps
(declare-fun circ_to_pps1 (circuit) pps)

;; circ_to_pps'def
(assert
  (forall ((c circuit)) (= (circ_to_pps1 c) (circ_to_pps_pre1 (pre1 c)))))

;; circ_to_pps'spec
(assert
  (forall ((c circuit))
    (and
      (<= 1 (h_width (circ_to_pps1 c)))
      (and
        (= (h_width (circ_to_pps1 c)) (width1 c))
        (and
          (= (h_range (circ_to_pps1 c)) (range1 c))
          (and
            (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
              (= (select (select (select (h_basis_ket (circ_to_pps1 c)) x) y) i) 
              (basis_ket1
                c
                x
                y
                i)))
            (forall ((x (Array Int Int)) (y (Array Int Int)))
              (= (tb2t84
                   (infix_at
                     angle1
                     (infix_mngt int int)
                     (infix_at
                       (infix_mngt (infix_mngt int int) angle1)
                       (infix_mngt int int)
                       (t2tb118 (h_angle (circ_to_pps1 c)))
                       (t2tb7 x))
                     (t2tb7 y))) (ang_ind1 c x y)))))))))

;; unwire
(declare-fun unwire (circuit) circuit2)

;; unwire'def
(assert (forall ((c circuit)) (= (unwire c) (unwire_pre (pre1 c)))))

;; unwire'spec
(assert
  (forall ((c circuit))
    (forall ((x (matrix complex)))
      (=>
        (is_a_ket_l x (width1 c))
        (= (path_sem (unwire c) x) (pps_apply (circ_to_pps1 c) x))))))

;; phase
(declare-fun phase1 (Int) circuit)

;; phase'spec
(assert
  (forall ((k Int))
    (and
      (= (pre1 (phase1 k)) (Phase1 k))
      (and
        (= (ancillas1 (phase1 k)) 0)
        (and
          (= (size1 (phase1 k)) 1)
          (and
            (= (range1 (phase1 k)) 0)
            (and
              (= (width1 (phase1 k)) 1)
              (and
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (forall ((i Int))
                    (= (basis_ket1 (phase1 k) x y i) (select x i))))
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (= (ang_ind1 (phase1 k) x y) (infix_sldtsl 1 k)))))))))))

;; skip
(declare-fun skip () circuit)

;; skip'def
(assert
  (and
    (= (pre1 skip) Skip)
    (and
      (= (ancillas1 skip) 0)
      (and
        (= (size1 skip) 0)
        (and
          (= (range1 skip) 0)
          (and
            (= (width1 skip) 1)
            (and
              (forall ((x (Array Int Int)) (y (Array Int Int)))
                (forall ((i Int)) (= (basis_ket1 skip x y i) (select x i))))
              (and
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (= (ang_ind1 skip x y) (infix_sldtsl 1 0)))
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (forall ((k Int))
                    (= (ang_ind1 skip x y) (infix_sldtsl 0 k))))))))))))

;; rz
(declare-fun rz1 (Int) circuit)

;; rz'spec
(assert
  (forall ((k Int))
    (and
      (= (pre1 (rz1 k)) (Rz1 k))
      (and
        (= (ancillas1 (rz1 k)) 0)
        (and
          (= (size1 (rz1 k)) 1)
          (and
            (= (range1 (rz1 k)) 0)
            (and
              (= (width1 (rz1 k)) 1)
              (and
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (forall ((i Int))
                    (= (basis_ket1 (rz1 k) x y i) (select x i))))
                (and
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (=>
                      (and (<= 0 (select x 0)) (< (select x 0) 2))
                      (=>
                        (< k 0)
                        (= (ang_ind1 (rz1 k) x y) (phase_inv_
                                                    (- (select x 0) 1)
                                                    (infix_sldtsl 1 (- k 1)))))))
                  (and
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (=>
                        (and (<= 0 (select x 0)) (< (select x 0) 2))
                        (=>
                          (<= 0 k)
                          (= (ang_ind1 (rz1 k) x y) (phase_inv_
                                                      (- (select x 0) 1)
                                                      (infix_sldtsl
                                                        1
                                                        (+ k 1)))))))
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (=>
                        (and (<= 0 (select x 0)) (< (select x 0) 2))
                        (= (ang_ind1 (rz1 k) x y) (phase_inv_
                                                    (- (select x 0) 1)
                                                    (infix_sldtsl
                                                      1
                                                      (incr_abs k))))))))))))))))

;; rzp
(declare-fun rzp (Int) circuit)

;; rzp'spec
(assert
  (forall ((k Int))
    (and
      (= (pre1 (rzp k)) (Rzp k))
      (and
        (= (ancillas1 (rzp k)) 0)
        (and
          (= (size1 (rzp k)) 1)
          (and
            (= (range1 (rzp k)) 0)
            (and
              (= (width1 (rzp k)) 1)
              (and
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (forall ((i Int))
                    (= (basis_ket1 (rzp k) x y i) (select x i))))
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (= (ang_ind1 (rzp k) x y) (infix_sldtsl (select x 0) k)))))))))))

;; rx
(declare-fun rx1 (Int) circuit)

;; rx'spec
(assert
  (forall ((k Int))
    (and
      (= (pre1 (rx1 k)) (Rx k))
      (and
        (= (ancillas1 (rx1 k)) 0)
        (and
          (= (size1 (rx1 k)) 1)
          (and
            (= (range1 (rx1 k)) 2)
            (and
              (= (width1 (rx1 k)) 1)
              (and
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (forall ((i Int))
                    (= (basis_ket1 (rx1 k) x y i) (select y 1))))
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (= (ang_ind1 (rx1 k) x y) (ang_add
                                              (ang_add
                                                (infix_sldtsl
                                                  (* (select x 0) (select y 0))
                                                  1)
                                                (infix_sldtsl
                                                  (* (select y 0) (select y 1))
                                                  1))
                                              (phase_inv_
                                                (- (select y 0) 1)
                                                (infix_sldtsl 1 (incr_abs k))))))))))))))

;; ry
(declare-fun ry1 (Int) circuit)

;; ry'spec
(assert
  (forall ((k Int))
    (and
      (= (pre1 (ry1 k)) (Ry k))
      (and
        (= (ancillas1 (ry1 k)) 0)
        (and
          (= (size1 (ry1 k)) 1)
          (and
            (= (range1 (ry1 k)) 2)
            (and
              (= (width1 (ry1 k)) 1)
              (and
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (forall ((i Int))
                    (= (basis_ket1 (ry1 k) x y i) (select y 1))))
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (= (ang_ind1 (ry1 k) x y) (ang_add
                                              (ang_add
                                                (ang_add
                                                  (infix_sldtsl
                                                    (* (select x 0) (select y 0))
                                                    1)
                                                  (infix_sldtsl
                                                    (* (select y 0) (select y 1))
                                                    1))
                                                (phase_inv_
                                                  (- (select y 0) 1)
                                                  (infix_sldtsl
                                                    1
                                                    (incr_abs k))))
                                              (infix_sldtsl
                                                (- (select y 1) (select x 0))
                                                2))))))))))))

;; hadamard
(declare-fun hadamard1 () circuit)

;; hadamard'def
(assert
  (and
    (= (pre1 hadamard1) Hadamard1)
    (and
      (= (ancillas1 hadamard1) 0)
      (and
        (= (size1 hadamard1) 1)
        (and
          (= (range1 hadamard1) 1)
          (and
            (= (width1 hadamard1) 1)
            (and
              (forall ((x (Array Int Int)) (y (Array Int Int)))
                (forall ((i Int))
                  (= (basis_ket1 hadamard1 x y i) (select y i))))
              (forall ((x (Array Int Int)) (y (Array Int Int)))
                (= (ang_ind1 hadamard1 x y) (infix_sldtsl
                                              (* (select x 0) (select y 0))
                                              1))))))))))

;; s
(declare-fun s () circuit)

;; s'def
(assert
  (and
    (= (pre1 s) S)
    (and
      (= (ancillas1 s) 0)
      (and
        (= (size1 s) 1)
        (and
          (= (range1 s) 0)
          (and
            (= (width1 s) 1)
            (and
              (forall ((x (Array Int Int)) (y (Array Int Int)))
                (forall ((i Int)) (= (basis_ket1 s x y i) (select x i))))
              (forall ((x (Array Int Int)) (y (Array Int Int)))
                (= (ang_ind1 s x y) (infix_sldtsl (select x 0) 2))))))))))

;; t
(declare-fun t () circuit)

;; t'def
(assert
  (and
    (= (pre1 t) T)
    (and
      (= (ancillas1 t) 0)
      (and
        (= (size1 t) 1)
        (and
          (= (range1 t) 0)
          (and
            (= (width1 t) 1)
            (and
              (forall ((x (Array Int Int)) (y (Array Int Int)))
                (forall ((i Int)) (= (basis_ket1 t x y i) (select x i))))
              (forall ((x (Array Int Int)) (y (Array Int Int)))
                (= (ang_ind1 t x y) (infix_sldtsl (select x 0) 3))))))))))

;; xx
(declare-fun xx1 () circuit)

;; xx'def
(assert
  (and
    (= (pre1 xx1) X)
    (and
      (= (ancillas1 xx1) 0)
      (and
        (= (size1 xx1) 1)
        (and
          (= (range1 xx1) 0)
          (and
            (= (width1 xx1) 1)
            (and
              (forall ((x (Array Int Int)) (y (Array Int Int)))
                (forall ((i Int))
                  (= (basis_ket1 xx1 x y i) (- 1 (select x i)))))
              (forall ((x (Array Int Int)) (y (Array Int Int)))
                (= (ang_ind1 xx1 x y) (infix_sldtsl 1 0))))))))))

;; yy
(declare-fun yy1 () circuit)

;; yy'def
(assert
  (and
    (= (pre1 yy1) Y)
    (and
      (= (ancillas1 yy1) 0)
      (and
        (= (size1 yy1) 1)
        (and
          (= (range1 yy1) 0)
          (and
            (= (width1 yy1) 1)
            (and
              (forall ((x (Array Int Int)) (y (Array Int Int)))
                (forall ((i Int))
                  (= (basis_ket1 yy1 x y i) (- 1 (select x i)))))
              (forall ((x (Array Int Int)) (y (Array Int Int)))
                (= (ang_ind1 yy1 x y) (phase_inv_
                                        (select x 0)
                                        (infix_sldtsl 1 2)))))))))))

;; zz
(declare-fun zz1 () circuit)

;; zz'def
(assert
  (and
    (= (pre1 zz1) Z)
    (and
      (= (ancillas1 zz1) 0)
      (and
        (= (size1 zz1) 1)
        (and
          (= (range1 zz1) 0)
          (and
            (= (width1 zz1) 1)
            (and
              (forall ((x (Array Int Int)) (y (Array Int Int)))
                (forall ((i Int)) (= (basis_ket1 zz1 x y i) (select x i))))
              (forall ((x (Array Int Int)) (y (Array Int Int)))
                (= (ang_ind1 zz1 x y) (infix_sldtsl (select x 0) 1))))))))))

;; bricks_cnot
(declare-fun bricks_cnot () circuit)

;; bricks_cnot'def
(assert
  (and
    (= (pre1 bricks_cnot) Bricks_Cnot)
    (and
      (= (ancillas1 bricks_cnot) 0)
      (and
        (= (size1 bricks_cnot) 1)
        (and
          (= (range1 bricks_cnot) 0)
          (and
            (= (width1 bricks_cnot) 2)
            (and
              (forall ((x (Array Int Int)) (y (Array Int Int)))
                (forall ((i Int))
                  (=>
                    (not (= i 1))
                    (= (basis_ket1 bricks_cnot x y i) (select x i)))))
              (and
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (forall ((i Int))
                    (=>
                      (= i 1)
                      (= (basis_ket1 bricks_cnot x y i) (+ (* (select x 0) (- 1 (select x 1))) (* (select x 1) (- 1 (select x 0))))))))
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (= (ang_ind1 bricks_cnot x y) (infix_sldtsl 1 0)))))))))))

;; bricks_toffoli
(declare-fun bricks_toffoli () circuit)

;; bricks_toffoli'def
(assert
  (and
    (= (pre1 bricks_toffoli) Bricks_Toffoli)
    (and
      (= (ancillas1 bricks_toffoli) 0)
      (and
        (= (size1 bricks_toffoli) 1)
        (and
          (= (range1 bricks_toffoli) 0)
          (and
            (= (width1 bricks_toffoli) 3)
            (and
              (forall ((x (Array Int Int)) (y (Array Int Int)))
                (forall ((i Int))
                  (=>
                    (not (= i 2))
                    (= (basis_ket1 bricks_toffoli x y i) (select x i)))))
              (and
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (forall ((i Int))
                    (=>
                      (= i 2)
                      (= (basis_ket1 bricks_toffoli x y i) (+ (* (* (select x 0) (select x 1)) (- 1 (select x 2))) (* (select x 2) (- 1 (* (select x 0) (select x 1)))))))))
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (= (ang_ind1 bricks_toffoli x y) (infix_sldtsl 1 0)))))))))))

;; bricks_fredkin
(declare-fun bricks_fredkin () circuit)

;; bricks_fredkin'def
(assert
  (and
    (= (pre1 bricks_fredkin) Bricks_Fredkin)
    (and
      (= (ancillas1 bricks_fredkin) 0)
      (and
        (= (size1 bricks_fredkin) 1)
        (and
          (= (range1 bricks_fredkin) 0)
          (and
            (= (width1 bricks_fredkin) 3)
            (and
              (forall ((x (Array Int Int)) (y (Array Int Int)))
                (forall ((i Int))
                  (=>
                    (= i 1)
                    (= (basis_ket1 bricks_fredkin x y i) (+ (* (select x 0) (select x 2)) (* (- 1 (select x 0)) (select x 1)))))))
              (and
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (forall ((i Int))
                    (=>
                      (= i 2)
                      (= (basis_ket1 bricks_fredkin x y i) (+ (* (select x 0) (select x 1)) (* (- 1 (select x 0)) (select x 2)))))))
                (and
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (forall ((i Int))
                      (=>
                        (not (= i 1))
                        (=>
                          (not (= i 2))
                          (= (basis_ket1 bricks_fredkin x y i) (select x i))))))
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (= (ang_ind1 bricks_fredkin x y) (infix_sldtsl 1 0))))))))))))

;; bricks_swap
(declare-fun bricks_swap () circuit)

;; bricks_swap'def
(assert
  (and
    (= (pre1 bricks_swap) Bricks_Swap)
    (and
      (= (ancillas1 bricks_swap) 0)
      (and
        (= (size1 bricks_swap) 1)
        (and
          (= (range1 bricks_swap) 0)
          (and
            (= (width1 bricks_swap) 2)
            (and
              (forall ((x (Array Int Int)) (y (Array Int Int)))
                (forall ((i Int))
                  (= (basis_ket1 bricks_swap x y i) (ite (= i 0)
                                                      (select x 1)
                                                      (ite (= i 1)
                                                        (select x 0)
                                                        (select x i))))))
              (forall ((x (Array Int Int)) (y (Array Int Int)))
                (= (ang_ind1 bricks_swap x y) (infix_sldtsl 1 0))))))))))

;; cnot
(declare-fun cnot1 (Int
  Int
  Int) circuit)

;; cnot'spec
(assert
  (forall ((co Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 t1) (< t1 n))
        (=>
          (not (= t1 co))
          (and
            (= (pre1 (cnot1 co t1 n)) (Cnot1 co t1 n))
            (and
              (= (ancillas1 (cnot1 co t1 n)) 0)
              (and
                (= (size1 (cnot1 co t1 n)) 1)
                (and
                  (= (range1 (cnot1 co t1 n)) 0)
                  (and
                    (= (width1 (cnot1 co t1 n)) n)
                    (and
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (forall ((i Int))
                          (=>
                            (not (= i t1))
                            (= (basis_ket1 (cnot1 co t1 n) x y i) (select x i)))))
                      (and
                        (forall ((x (Array Int Int)) (y (Array Int Int)))
                          (forall ((i Int))
                            (=>
                              (= i t1)
                              (= (basis_ket1 (cnot1 co t1 n) x y i) (+ (* (select x co) (- 1 (select x t1))) (* (select x t1) (- 1 (select x co))))))))
                        (forall ((x (Array Int Int)) (y (Array Int Int)))
                          (= (ang_ind1 (cnot1 co t1 n) x y) (infix_sldtsl
                                                              1
                                                              0)))))))))))))))

;; toffoli
(declare-fun toffoli1 (Int
  Int
  Int
  Int) circuit)

;; toffoli'spec
(assert
  (forall ((c1 Int) (c2 Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 c1) (< c1 n))
      (=>
        (and (<= 0 c2) (< c2 n))
        (=>
          (and (<= 0 t1) (< t1 n))
          (=>
            (not (= t1 c1))
            (=>
              (not (= t1 c2))
              (=>
                (not (= c2 c1))
                (and
                  (= (pre1 (toffoli1 c1 c2 t1 n)) (Toffoli c1 c2 t1 n))
                  (and
                    (= (ancillas1 (toffoli1 c1 c2 t1 n)) 0)
                    (and
                      (= (size1 (toffoli1 c1 c2 t1 n)) 1)
                      (and
                        (= (range1 (toffoli1 c1 c2 t1 n)) 0)
                        (and
                          (= (width1 (toffoli1 c1 c2 t1 n)) n)
                          (and
                            (forall ((x (Array Int Int)) (y (Array Int Int)))
                              (forall ((i Int))
                                (=>
                                  (not (= i t1))
                                  (= (basis_ket1 (toffoli1 c1 c2 t1 n) x y i) (select x i)))))
                            (and
                              (forall ((x (Array Int Int)) (y (Array Int Int)))
                                (forall ((i Int))
                                  (=>
                                    (= i t1)
                                    (= (basis_ket1
                                         (toffoli1 c1 c2 t1 n)
                                         x
                                         y
                                         i) (+ (* (* (select x c1) (select x c2)) (- 1 (select x t1))) (* (select x t1) (- 1 (* (select x c1) (select x c2)))))))))
                              (forall ((x (Array Int Int)) (y (Array Int Int)))
                                (= (ang_ind1 (toffoli1 c1 c2 t1 n) x y) 
                                (infix_sldtsl
                                  1
                                  0))))))))))))))))))

;; fredkin
(declare-fun fredkin1 (Int
  Int
  Int
  Int) circuit)

;; fredkin'spec
(assert
  (forall ((c Int) (t1 Int) (t2 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 t2) (< t2 n))
        (=>
          (and (<= 0 c) (< c n))
          (=>
            (not (= c t1))
            (=>
              (not (= c t2))
              (=>
                (not (= t2 t1))
                (and
                  (= (pre1 (fredkin1 c t1 t2 n)) (Fredkin c t1 t2 n))
                  (and
                    (= (ancillas1 (fredkin1 c t1 t2 n)) 0)
                    (and
                      (= (size1 (fredkin1 c t1 t2 n)) 1)
                      (and
                        (= (range1 (fredkin1 c t1 t2 n)) 0)
                        (and
                          (= (width1 (fredkin1 c t1 t2 n)) n)
                          (and
                            (forall ((x (Array Int Int)) (y (Array Int Int)))
                              (forall ((i Int))
                                (=>
                                  (= i t1)
                                  (= (basis_ket1 (fredkin1 c t1 t2 n) x y i) (+ (* (select x c) (select x t2)) (* (- 1 (select x c)) (select x t1)))))))
                            (and
                              (forall ((x (Array Int Int)) (y (Array Int Int)))
                                (forall ((i Int))
                                  (=>
                                    (= i t2)
                                    (= (basis_ket1
                                         (fredkin1 c t1 t2 n)
                                         x
                                         y
                                         i) (+ (* (select x c) (select x t1)) (* (- 1 (select x c)) (select x t2)))))))
                              (and
                                (forall ((x (Array Int Int)) (y (Array Int Int)))
                                  (forall ((i Int))
                                    (=>
                                      (not (= i t1))
                                      (=>
                                        (not (= i t2))
                                        (= (basis_ket1
                                             (fredkin1 c t1 t2 n)
                                             x
                                             y
                                             i) (select x i))))))
                                (forall ((x (Array Int Int)) (y (Array Int Int)))
                                  (= (ang_ind1 (fredkin1 c t1 t2 n) x y) 
                                  (infix_sldtsl
                                    1
                                    0)))))))))))))))))))

;; swap
(declare-fun swap1 (Int
  Int
  Int) circuit)

;; swap'spec
(assert
  (forall ((t1 Int) (t2 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 t2) (< t2 n))
        (=>
          (not (= t1 t2))
          (and
            (= (pre1 (swap1 t1 t2 n)) (Swap1 t1 t2 n))
            (and
              (= (ancillas1 (swap1 t1 t2 n)) 0)
              (and
                (= (size1 (swap1 t1 t2 n)) 1)
                (and
                  (= (range1 (swap1 t1 t2 n)) 0)
                  (and
                    (= (width1 (swap1 t1 t2 n)) n)
                    (and
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (forall ((i Int))
                          (=>
                            (= i t1)
                            (= (basis_ket1 (swap1 t1 t2 n) x y i) (select x t2)))))
                      (and
                        (forall ((x (Array Int Int)) (y (Array Int Int)))
                          (forall ((i Int))
                            (=>
                              (= i t2)
                              (= (basis_ket1 (swap1 t1 t2 n) x y i) (select x t1)))))
                        (and
                          (forall ((x (Array Int Int)) (y (Array Int Int)))
                            (forall ((i Int))
                              (=>
                                (not (= i t1))
                                (=>
                                  (not (= i t2))
                                  (= (basis_ket1 (swap1 t1 t2 n) x y i) (select x i))))))
                          (forall ((x (Array Int Int)) (y (Array Int Int)))
                            (= (ang_ind1 (swap1 t1 t2 n) x y) (infix_sldtsl
                                                                1
                                                                0))))))))))))))))

;; place
(declare-fun place1 (circuit
  Int
  Int) circuit)

;; fc
(declare-fun fc604 (Int
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc605 (Int
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((k Int) (x (Array Int Int)) (j Int))
    (= (select (fc604 k x) j) (select x (+ j k)))))

;; fc'def
(assert
  (forall ((k Int) (x (Array Int Int)) (j Int))
    (= (select (fc605 k x) j) (select x (+ j k)))))

;; place'spec
(assert
  (forall ((c circuit) (k Int) (n Int))
    (=>
      (<= 0 k)
      (=>
        (<= (+ (width1 c) k) n)
        (and
          (= (pre1 (place1 c k n)) (Place (pre1 c) k n))
          (and
            (= (ancillas1 (place1 c k n)) (ancillas1 c))
            (and
              (= (size1 (place1 c k n)) (size1 c))
              (and
                (= (width1 (place1 c k n)) n)
                (and
                  (= (range1 (place1 c k n)) (range1 c))
                  (and
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (forall ((i Int))
                        (= (basis_ket1 (place1 c k n) x y i) (ite (and
                                                                    (<= k i)
                                                                    (< i (+ k 
                                                                    (width1
                                                                    c))))
                                                               (basis_ket1
                                                                 c
                                                                 (fc604 k x)
                                                                 y
                                                                 (- i k))
                                                               (select x i)))))
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (= (ang_ind1 (place1 c k n) x y) (ang_ind1
                                                         c
                                                         (fc605 k x)
                                                         y)))))))))))))

;; cont
(declare-fun cont1 (circuit
  Int
  Int
  Int) circuit)

;; fc
(declare-fun fc606 (Int
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc607 (Int
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((k Int) (x (Array Int Int)) (j Int))
    (= (select (fc606 k x) j) (select x (+ j k)))))

;; fc'def
(assert
  (forall ((k Int) (x (Array Int Int)) (j Int))
    (= (select (fc607 k x) j) (select x (+ j k)))))

;; cont'spec
(assert
  (forall ((c circuit) (co Int) (k Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 k) (<= k (- n (width1 c))))
        (=>
          (=> (<= k co) (<= (+ k (width1 c)) co))
          (and
            (= (pre1 (cont1 c co k n)) (Cont (pre1 c) co k n))
            (and
              (= (width1 (cont1 c co k n)) n)
              (and
                (= (ancillas1 (cont1 c co k n)) (ancillas1 c))
                (and
                  (= (size1 (cont1 c co k n)) (* (size1 c) cont_size1))
                  (and
                    (= (range1 (cont1 c co k n)) (range1 c))
                    (and
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (forall ((i Int))
                          (= (basis_ket1 (cont1 c co k n) x y i) (ite 
                                                                   (and
                                                                    (= (select x co) 1)
                                                                    (and
                                                                    (<= k i)
                                                                    (< i (+ k 
                                                                    (width1
                                                                    c)))))
                                                                   (basis_ket1
                                                                    c
                                                                    (fc606
                                                                    k
                                                                    x)
                                                                    y
                                                                    (- i k))
                                                                   (select x i)))))
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (= (ang_ind1 (cont1 c co k n) x y) (ang_add
                                                             (ang_mult_int
                                                               (ang_ind1
                                                                 c
                                                                 (fc607 k x)
                                                                 y)
                                                               (select x co))
                                                             (ang_mult_int
                                                               (phase_inv_
                                                                 (select y 0)
                                                                 (arc_cos_ang
                                                                   (pow_inv_sqrt_2
                                                                    (range1
                                                                    c))))
                                                               (- 1 (select x co)))))))))))))))))

;; infix --
(declare-fun infix_mnmn (circuit
  circuit) circuit)

;; fc
(declare-fun fc608 (circuit
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc609 (circuit
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((d circuit) (y (Array Int Int)) (k Int))
    (= (select (fc608 d y) k) (select y (+ k (range1 d))))))

;; fc'def
(assert
  (forall ((d circuit) (y (Array Int Int)) (k Int))
    (= (select (fc609 d y) k) (select y (+ k (range1 d))))))

;; infix --'spec
(assert
  (forall ((d circuit) (e circuit))
    (=>
      (= (width1 d) (width1 e))
      (and
        (= (pre1 (infix_mnmn d e)) (Sequence1 (pre1 d) (pre1 e)))
        (and
          (= (ancillas1 (infix_mnmn d e)) (max (ancillas1 d) (ancillas1 e)))
          (and
            (= (size1 (infix_mnmn d e)) (+ (size1 d) (size1 e)))
            (and
              (= (width1 (infix_mnmn d e)) (width1 d))
              (and
                (= (range1 (infix_mnmn d e)) (+ (range1 d) (range1 e)))
                (and
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (forall ((i Int))
                      (= (basis_ket1 (infix_mnmn d e) x y i) (basis_ket1
                                                               e
                                                               (select (select (select 
                                                               basis_ket_closure1 d) x) y)
                                                               (fc608 d y)
                                                               i))))
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (= (ang_ind1 (infix_mnmn d e) x y) (ang_add
                                                         (ang_ind1 d x y)
                                                         (ang_ind1
                                                           e
                                                           (select (select (select 
                                                           basis_ket_closure1 d) x) y)
                                                           (fc609 d y))))))))))))))

;; sequence_eq
(assert
  (forall ((d circuit) (dqt circuit) (e circuit) (eqt circuit))
    (=>
      (= (width1 d) (width1 e))
      (=> (= d dqt) (=> (= e eqt) (= (infix_mnmn d e) (infix_mnmn dqt eqt)))))))

;; infix //
(declare-fun infix_slsl (circuit
  circuit) circuit)

;; fc
(declare-fun fc610 (circuit
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc611 (circuit
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc612 (circuit
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc613 (circuit
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((d circuit) (x (Array Int Int)) (k Int))
    (= (select (fc610 d x) k) (select x (+ k (width1 d))))))

;; fc'def
(assert
  (forall ((d circuit) (y (Array Int Int)) (k Int))
    (= (select (fc611 d y) k) (select y (+ k (range1 d))))))

;; fc'def
(assert
  (forall ((d circuit) (x (Array Int Int)) (k Int))
    (= (select (fc612 d x) k) (select x (+ k (width1 d))))))

;; fc'def
(assert
  (forall ((d circuit) (y (Array Int Int)) (k Int))
    (= (select (fc613 d y) k) (select y (+ k (range1 d))))))

;; infix //'spec
(assert
  (forall ((d circuit) (e circuit))
    (and
      (= (pre1 (infix_slsl d e)) (Parallel1 (pre1 d) (pre1 e)))
      (and
        (= (ancillas1 (infix_slsl d e)) (+ (ancillas1 d) (ancillas1 e)))
        (and
          (= (size1 (infix_slsl d e)) (+ (size1 d) (size1 e)))
          (and
            (= (width1 (infix_slsl d e)) (+ (width1 d) (width1 e)))
            (and
              (= (range1 (infix_slsl d e)) (+ (range1 d) (range1 e)))
              (and
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (forall ((i Int))
                    (= (basis_ket1 (infix_slsl d e) x y i) (ite (< i 
                                                             (width1
                                                               d))
                                                             (basis_ket1
                                                               d
                                                               x
                                                               y
                                                               i)
                                                             (basis_ket1
                                                               e
                                                               (fc610 d x)
                                                               (fc611 d y)
                                                               (- i (width1
                                                                    d)))))))
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (= (ang_ind1 (infix_slsl d e) x y) (ang_add
                                                       (ang_ind1 d x y)
                                                       (ang_ind1
                                                         e
                                                         (fc612 d x)
                                                         (fc613 d y)))))))))))))

;; path_sem_basis
(declare-fun path_sem_basis1 (circuit
  (matrix complex)) (matrix complex))

;; result
(declare-fun result81 (circuit
  (matrix complex)) (Array bitvec (matrix complex)))

;; result'def
(assert
  (forall ((c circuit) (x (matrix complex)) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (result81 c x))
           (t2tb77 y))) (infix_asdtdt
                          (ang_exp
                            (ang_ind1 c (value (ket_to_bv x)) (value y)))
                          (bv_to_ket
                            (make_bv
                              (select (select (select basis_ket_closure1 c) 
                              (value
                                (ket_to_bv x))) (value y))
                              (width1 c)))))))

;; path_sem_basis'def
(assert
  (forall ((c circuit) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width1 c))
      (=>
        (is_a_ket_basis_elt x)
        (= (path_sem_basis1 c x) (infix_asdtdt
                                   (pow_inv_sqrt_2 (range1 c))
                                   (ket_sum_l
                                     bitvec1
                                     (t2tb79 (n_bvs (range1 c)))
                                     (t2tb80 (result81 c x))
                                     (width1 c))))))))

;; path_sem_basis'spec
(assert
  (forall ((c circuit) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width1 c))
      (=>
        (is_a_ket_basis_elt x)
        (and
          (is_a_ket_l (path_sem_basis1 c x) (width1 c))
          (= (path_sem_basis1 c x) (pps_apply_basis
                                     (circ_to_pps1 c)
                                     (ket_to_bv x))))))))

;; path_sem
(declare-fun path_sem1 (circuit
  (matrix complex)) (matrix complex))

;; result
(declare-fun result82 (circuit
  (matrix complex)) (Array bitvec (matrix complex)))

;; result'def
(assert
  (forall ((c circuit) (x (matrix complex)) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (result82 c x))
           (t2tb77 y))) (ite (= (length y) (width1 c))
                          (infix_asdtdt
                            (tb2t (get complex1 (t2tb65 x) (bv_to_int y) 0))
                            (path_sem_basis1 c (bv_to_ket y)))
                          x))))

;; path_sem'def
(assert
  (forall ((c circuit) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width1 c))
      (= (path_sem1 c x) (ket_sum_l
                           bitvec1
                           (t2tb79 (n_bvs (width1 c)))
                           (t2tb80 (result82 c x))
                           (width1 c))))))

;; path_sem'spec
(assert
  (forall ((c circuit) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width1 c))
      (and
        (is_a_ket_l (path_sem1 c x) (width1 c))
        (= (path_sem1 c x) (pps_apply (circ_to_pps1 c) x))))))

;; ancilla_pre
(declare-fun ancilla_pre (circuit
  Int) circuit)

;; fc
(declare-fun fc614 (circuit
  Int
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc615 (circuit
  Int
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((c circuit) (l Int) (x (Array Int Int)) (k Int))
    (= (select (fc614 c l x) k) (ite (< k (- (width1 c) l)) (select x k) 0))))

;; fc'def
(assert
  (forall ((c circuit) (l Int) (x (Array Int Int)) (k Int))
    (= (select (fc615 c l x) k) (ite (< k (- (width1 c) l)) (select x k) 0))))

;; ancilla_pre'spec
(assert
  (forall ((c circuit) (l Int))
    (=>
      (<= 1 l)
      (=>
        (< l (width1 c))
        (=>
          (exists ((path_sem_target (Array (matrix complex) (matrix complex))))
            (forall ((x (matrix complex)))
              (=>
                (is_a_ket_l x (- (width1 c) l))
                (= (pps_apply (circ_to_pps1 c) (kronecker x (ket l 0))) 
                (kronecker
                  (tb2t65
                    (infix_at
                      (matrix1 complex1)
                      (matrix1 complex1)
                      (t2tb66 path_sem_target)
                      (t2tb65 x)))
                  (ket l 0))))))
          (and
            (forall ((x (matrix complex)))
              (=>
                (is_a_ket_l x (- (width1 c) l))
                (= (pps_apply (circ_to_pps1 c) (kronecker x (ket l 0))) 
                (kronecker
                  (path_sem1 (ancilla_pre c l) x)
                  (ket l 0)))))
            (and
              (= (pre1 (ancilla_pre c l)) (Ancillas1 (pre1 c) l))
              (and
                (= (ancillas1 (ancilla_pre c l)) (+ (ancillas1 c) l))
                (and
                  (= (size1 (ancilla_pre c l)) (size1 c))
                  (and
                    (= (width1 (ancilla_pre c l)) (- (width1 c) l))
                    (and
                      (= (range1 (ancilla_pre c l)) (range1 c))
                      (and
                        (forall ((x (Array Int Int)) (y (Array Int Int)))
                          (forall ((i Int))
                            (= (basis_ket1 (ancilla_pre c l) x y i) (basis_ket1
                                                                    c
                                                                    (fc614
                                                                    c
                                                                    l
                                                                    x)
                                                                    y
                                                                    i))))
                        (forall ((x (Array Int Int)) (y (Array Int Int)))
                          (= (ang_ind1 (ancilla_pre c l) x y) (ang_ind1
                                                                c
                                                                (fc615 c l x)
                                                                y)))))))))))))))

;; ancilla
(declare-fun ancilla1 (circuit
  Int) circuit)

;; fc
(declare-fun fc616 (circuit
  Int
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc617 (circuit
  Int
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((c circuit) (l Int) (x (Array Int Int)) (k Int))
    (= (select (fc616 c l x) k) (ite (< k (- (width1 c) l)) (select x k) 0))))

;; fc'def
(assert
  (forall ((c circuit) (l Int) (x (Array Int Int)) (k Int))
    (= (select (fc617 c l x) k) (ite (< k (- (width1 c) l)) (select x k) 0))))

;; ancilla'spec
(assert
  (forall ((c circuit) (l Int))
    (=>
      (<= 1 l)
      (=>
        (< l (width1 c))
        (=>
          (forall ((x (matrix complex)))
            (=>
              (is_a_ket_l x (- (width1 c) l))
              (=>
                (is_a_ket_basis_elt x)
                (exists ((y (matrix complex)))
                  (= (path_sem1 c (kronecker x (ket l 0))) (kronecker
                                                             y
                                                             (ket l 0)))))))
          (and
            (forall ((x (matrix complex)))
              (=>
                (is_a_ket_l x (- (width1 c) l))
                (= (path_sem1 c (kronecker x (ket l 0))) (kronecker
                                                           (path_sem1
                                                             (ancilla1 c l)
                                                             x)
                                                           (ket l 0)))))
            (and
              (forall ((x (matrix complex)) (y (matrix complex)))
                (=>
                  (is_a_ket_l x (- (width1 c) l))
                  (=>
                    (= (path_sem1 c (kronecker x (ket l 0))) (kronecker
                                                               y
                                                               (ket l 0)))
                    (= (path_sem1 (ancilla1 c l) x) y))))
              (and
                (= (pre1 (ancilla1 c l)) (Ancillas1 (pre1 c) l))
                (and
                  (= (ancillas1 (ancilla1 c l)) (+ (ancillas1 c) l))
                  (and
                    (= (size1 (ancilla1 c l)) (size1 c))
                    (and
                      (= (width1 (ancilla1 c l)) (- (width1 c) l))
                      (and
                        (= (range1 (ancilla1 c l)) (range1 c))
                        (and
                          (forall ((x (Array Int Int)) (y (Array Int Int)))
                            (forall ((i Int))
                              (= (basis_ket1 (ancilla1 c l) x y i) (basis_ket1
                                                                    c
                                                                    (fc616
                                                                    c
                                                                    l
                                                                    x)
                                                                    y
                                                                    i))))
                          (forall ((x (Array Int Int)) (y (Array Int Int)))
                            (= (ang_ind1 (ancilla1 c l) x y) (ang_ind1
                                                               c
                                                               (fc617 c l x)
                                                               y))))))))))))))))

;; set_ancilla_circ
(assert
  (forall ((x wired_circuit) (c circuit) (l Int))
    (=>
      (<= 1 l)
      (=>
        (< l (width1 c))
        (=>
          (correct1 x)
          (=> (= (pre1 c) (Ancillas1 x l)) (= c (ancilla1 (to_qc1 x) l))))))))

;; get_path_sem_basis
(assert
  (forall ((c circuit) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width1 c))
      (=> (is_a_ket_basis_elt x) (= (path_sem1 c x) (path_sem_basis1 c x))))))

;; fc
(declare-fun fc618 (circuit
  (matrix complex)) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((c circuit) (x (matrix complex)) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc618 c x))
           (t2tb77 y))) (infix_asdtdt
                          (ang_exp
                            (ang_ind1 c (value (ket_to_bv x)) (value y)))
                          (bv_to_ket
                            (make_bv
                              (select (select (select basis_ket_closure1 c) 
                              (value
                                (ket_to_bv x))) (value y))
                              (width1 c)))))))

;; rewrite_path_sem_basis
(assert
  (forall ((c circuit) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width1 c))
      (=>
        (is_a_ket_basis_elt x)
        (= (path_sem1 c x) (infix_asdtdt
                             (pow_inv_sqrt_2 (range1 c))
                             (ket_sum_l
                               bitvec1
                               (t2tb79 (n_bvs (range1 c)))
                               (t2tb80 (fc618 c x))
                               (width1 c))))))))

;; path_sem_basis_comp_
(assert
  (forall ((d circuit) (e circuit) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width1 d))
      (=>
        (is_a_ket_basis_elt x)
        (=>
          (= (width1 d) (width1 e))
          (= (path_sem_basis1 (infix_mnmn d e) x) (path_sem1
                                                    e
                                                    (path_sem_basis1 d x))))))))

;; path_sem_basis_kron
(assert
  (forall ((d circuit) (e circuit) (x (matrix complex)) (xqt (matrix complex)) (y (matrix complex)) (yqt (matrix complex)))
    (=>
      (is_a_ket_l x (width1 d))
      (=>
        (is_a_ket_l y (width1 e))
        (=>
          (is_a_ket_basis_elt x)
          (=>
            (is_a_ket_basis_elt y)
            (=>
              (= (path_sem_basis1 d x) xqt)
              (=>
                (= (path_sem_basis1 e y) yqt)
                (= (path_sem_basis1 (infix_slsl d e) (kronecker x y)) 
                (kronecker
                  xqt
                  yqt))))))))))

;; path_sem_basis_par
(assert
  (forall ((d circuit) (e circuit) (x (matrix complex)))
    (=>
      (is_a_ket_l x (+ (width1 d) (width1 e)))
      (=>
        (is_a_ket_basis_elt x)
        (= (path_sem1 (infix_slsl d e) x) (kronecker
                                            (path_sem1
                                              d
                                              (bv_to_ket
                                                (hpart
                                                  (ket_to_bv x)
                                                  (width1 d))))
                                            (path_sem1
                                              e
                                              (bv_to_ket
                                                (tpart
                                                  (ket_to_bv x)
                                                  (width1 d))))))))))

;; path_sem_comp_
(assert
  (forall ((d circuit) (e circuit) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width1 d))
      (=>
        (= (width1 d) (width1 e))
        (= (path_sem1 (infix_mnmn d e) x) (path_sem1 e (path_sem1 d x)))))))

;; path_sem_kron
(assert
  (forall ((d circuit) (e circuit) (x (matrix complex)) (xqt (matrix complex)) (y (matrix complex)) (yqt (matrix complex)))
    (=>
      (is_a_ket_l x (width1 d))
      (=>
        (is_a_ket_l y (width1 e))
        (=>
          (= (path_sem1 d x) xqt)
          (=>
            (= (path_sem1 e y) yqt)
            (= (path_sem1 (infix_slsl d e) (kronecker x y)) (kronecker
                                                              xqt
                                                              yqt))))))))

;; path_sem_comp_rev
(assert
  (forall ((d circuit) (e circuit) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width1 d))
      (=>
        (= (width1 d) (width1 e))
        (= (path_sem1 e (path_sem1 d x)) (path_sem1 (infix_mnmn d e) x))))))

;; unwire_path_sem
(assert
  (forall ((c circuit) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width1 c))
      (= (path_sem1 c x) (path_sem (unwire c) x)))))

;; unwire_path_sem_basis
(assert
  (forall ((c circuit) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width1 c))
      (=>
        (is_a_ket_basis_elt x)
        (= (path_sem_basis1 c x) (path_sem_basis (unwire c) x))))))

;; unwire_width
(assert (forall ((c circuit)) (= (width1 c) (width (unwire c)))))

;; wire_pre
(declare-fun wire_pre (circuit_pre) circuit)

;; wire_pre'def
(assert
  (forall ((c circuit_pre))
    (=>
      (correct c)
      (and
        (and
          (and
            (and
              (and
                (and
                  (and
                    (and
                      (forall ((k Int))
                        (=> (= c (Phase k)) (= (wire_pre c) (phase1 k))))
                      (forall ((k Int))
                        (=> (= c (Rz k)) (= (wire_pre c) (rzp k)))))
                    (=> (= c Hadamard) (= (wire_pre c) hadamard1)))
                  (=> (= c Cnot) (= (wire_pre c) bricks_cnot)))
                (=> (= c Swap) (= (wire_pre c) bricks_swap)))
              (=> (= c Id) (= (wire_pre c) skip)))
            (forall ((d circuit_pre) (e circuit_pre))
              (=>
                (= c (Sequence d e))
                (= (wire_pre c) (infix_mnmn (wire_pre d) (wire_pre e))))))
          (forall ((d circuit_pre) (e circuit_pre))
            (=>
              (= c (Parallel d e))
              (= (wire_pre c) (infix_slsl (wire_pre d) (wire_pre e))))))
        (forall ((d circuit_pre) (l Int))
          (=>
            (= c (Ancillas d l))
            (= (wire_pre c) (ancilla1 (wire_pre d) l))))))))

;; wire_pre'spec
(assert
  (forall ((c circuit_pre))
    (=>
      (correct c)
      (and
        (= (width1 (wire_pre c)) (width_pre c))
        (and
          (forall ((x (matrix complex)))
            (=>
              (is_a_ket_l x (width1 (wire_pre c)))
              (=>
                (is_a_ket_basis_elt x)
                (= (path_sem_basis1 (wire_pre c) x) (path_sem_basis
                                                      (to_qc c)
                                                      x)))))
          (forall ((x (matrix complex)))
            (=>
              (is_a_ket_l x (width1 (wire_pre c)))
              (= (path_sem1 (wire_pre c) x) (path_sem (to_qc c) x)))))))))

;; wire
(declare-fun wire (circuit2) circuit)

;; wire'def
(assert (forall ((c circuit2)) (= (wire c) (wire_pre (pre c)))))

;; wire'spec
(assert
  (forall ((c circuit2))
    (and
      (= (width1 (wire c)) (width c))
      (and
        (forall ((x (matrix complex)))
          (=>
            (is_a_ket_l x (width1 (wire c)))
            (=>
              (is_a_ket_basis_elt x)
              (= (path_sem_basis1 (wire c) x) (path_sem_basis c x)))))
        (forall ((x (matrix complex)))
          (=>
            (is_a_ket_l x (width1 (wire c)))
            (= (path_sem1 (wire c) x) (path_sem c x))))))))

;; wire_path_sem
(assert
  (forall ((c circuit2) (x (matrix complex)))
    (=> (is_a_ket_l x (width c)) (= (path_sem c x) (path_sem1 (wire c) x)))))

;; wire_path_sem_basis
(assert
  (forall ((c circuit2) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width c))
      (=>
        (is_a_ket_basis_elt x)
        (= (path_sem_basis c x) (path_sem_basis1 (wire c) x))))))

;; wire_width
(assert (forall ((c circuit2)) (= (width c) (width1 (wire c)))))

;; unwire_embedding_path_sem
(assert
  (forall ((c circuit) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width1 c))
      (= (path_sem1 c x) (path_sem1 (wire (unwire c)) x)))))

;; unwire_embedding_path_sem_basis
(assert
  (forall ((c circuit) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width1 c))
      (=>
        (is_a_ket_basis_elt x)
        (= (path_sem_basis1 c x) (path_sem_basis1 (wire (unwire c)) x))))))

;; to_qc_rev
(assert (forall ((c circuit)) (= c (to_qc1 (pre1 c)))))

;; to_qc_pre
(assert (forall ((c circuit)) (= (to_qc1 (pre1 c)) c)))

;; pre_rev
(assert
  (forall ((c wired_circuit)) (=> (correct1 c) (= c (pre1 (to_qc1 c))))))

;; pre_to_qc
(assert
  (forall ((c wired_circuit)) (=> (correct1 c) (= (pre1 (to_qc1 c)) c))))

;; path_sem_apply
(assert
  (forall ((c circuit) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width1 c))
      (= (path_sem1 c x) (pps_apply (circ_to_pps1 c) x)))))

;; apply_path_sem
(assert
  (forall ((c circuit) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width1 c))
      (= (pps_apply (circ_to_pps1 c) x) (path_sem1 c x)))))

;; correct_path_sum
(declare-fun correct_path_sum (circuit
  pps) Bool)

;; correct_path_sum'def
(assert
  (forall ((c circuit) (p pps))
    (= (correct_path_sum c p) (pps_apply_equiv (circ_to_pps1 c) p))))

;; set_correct_pps_basis
(assert
  (forall ((c circuit) (h pps))
    (=>
      (= (h_width h) (width1 c))
      (=>
        (forall ((x (matrix complex)))
          (=>
            (is_a_ket_l x (width1 c))
            (=>
              (is_a_ket_basis_elt x)
              (= (pps_apply h x) (path_sem_basis1 c x)))))
        (correct_path_sum c h)))))

;; set_correct_pps
(assert
  (forall ((c circuit) (h pps))
    (=>
      (= (h_width h) (width1 c))
      (=>
        (forall ((x (matrix complex)))
          (=>
            (is_a_ket_l x (width1 c))
            (=> (is_a_ket_basis_elt x) (= (pps_apply h x) (path_sem1 c x)))))
        (correct_path_sum c h)))))

;; get_correct_pps
(assert
  (forall ((c circuit) (h pps) (x (matrix complex)))
    (=>
      (= (h_width h) (width1 c))
      (=>
        (is_a_ket_l x (width1 c))
        (=> (correct_path_sum c h) (= (pps_apply h x) (path_sem1 c x)))))))

;; unwire_correct
(assert
  (forall ((c circuit) (h pps))
    (=> (correct_path_sum c h) (correct_path_sum_ (unwire c) h))))

;; unwire_correct_rev
(assert
  (forall ((c circuit) (h pps))
    (=> (correct_path_sum_ (unwire c) h) (correct_path_sum c h))))

;; wire_correct
(assert
  (forall ((c circuit2) (h pps))
    (=> (correct_path_sum_ c h) (correct_path_sum (wire c) h))))

;; unwire_ancillable
(assert
  (forall ((c circuit) (l Int))
    (=>
      (<= 0 l)
      (=> (ancillable (pre1 c) l) (ancillable_pre (pre (unwire c)) l)))))

;; unwire_sequence
(assert
  (forall ((d circuit) (e circuit))
    (=>
      (= (width1 d) (width1 e))
      (= (unwire (infix_mnmn d e)) (sequence (unwire d) (unwire e))))))

;; unwire_parallel
(assert
  (forall ((d circuit) (e circuit))
    (= (unwire (infix_slsl d e)) (parallel (unwire d) (unwire e)))))

;; unwire_place
(assert
  (forall ((c circuit) (k Int) (n Int))
    (=>
      (<= 0 k)
      (=>
        (<= (+ (width1 c) k) n)
        (= (unwire (place1 c k n)) (place (unwire c) k n))))))

;; unwire_cont
(assert
  (forall ((c circuit) (co Int) (k Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 k) (<= k (- n (width1 c))))
        (=>
          (=> (<= k co) (<= (+ k (width1 c)) co))
          (= (unwire (cont1 c co k n)) (cont (unwire c) co k n)))))))

;; unwire_ancilla
(assert
  (forall ((c circuit) (l Int))
    (=>
      (<= 1 l)
      (=>
        (< l (width1 c))
        (=>
          (ancillable (pre1 c) l)
          (= (unwire (ancilla1 c l)) (ancilla (unwire c) l)))))))

;; unwire_skip
(assert (= (unwire skip) id))

;; unwire_hadamard
(assert (= (unwire hadamard1) hadamard))

;; unwire_s
(assert (= (unwire s) (rz 2)))

;; unwire_t
(assert (= (unwire t) (rz 3)))

;; unwire_xx
(assert (= (unwire xx1) xx))

;; unwire_yy
(assert (= (unwire yy1) yy))

;; unwire_zz
(assert (= (unwire zz1) zz))

;; unwire_phase
(assert (forall ((k Int)) (= (unwire (phase1 k)) (phase k))))

;; unwire_rx
(assert (forall ((k Int)) (= (unwire (rx1 k)) (rx k))))

;; unwire_ry
(assert (forall ((k Int)) (= (unwire (ry1 k)) (ry k))))

;; unwire_rz
(assert (forall ((k Int)) (= (unwire (rz1 k)) (rz_ k))))

;; unwire_rzp
(assert (forall ((k Int)) (= (unwire (rzp k)) (rz k))))

;; unwire_cnot
(assert
  (forall ((c Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 c) (< c n))
      (=>
        (and (<= 0 t1) (< t1 n))
        (=> (not (= t1 c)) (= (unwire (cnot1 c t1 n)) (place_cnot c t1 n)))))))

;; unwire_swap
(assert
  (forall ((t1 Int) (t2 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 t2) (< t2 n))
        (=> (not (= t2 t1)) (= (unwire (swap1 t1 t2 n)) (swap_c t1 t2 n)))))))

;; unwire_toffoli
(assert
  (forall ((c1 Int) (c2 Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 c1) (< c1 n))
      (=>
        (and (<= 0 c2) (< c2 n))
        (=>
          (and (<= 0 t1) (< t1 n))
          (=>
            (not (= t1 c1))
            (=>
              (not (= t1 c2))
              (=>
                (not (= c2 c1))
                (= (unwire (toffoli1 c1 c2 t1 n)) (place_toffoli c1 c2 t1 n))))))))))

;; unwire_fredkin
(assert
  (forall ((c Int) (t1 Int) (t2 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 t2) (< t2 n))
        (=>
          (and (<= 0 c) (< c n))
          (=>
            (not (= c t1))
            (=>
              (not (= c t2))
              (=>
                (not (= t2 t1))
                (= (unwire (fredkin1 c t1 t2 n)) (place_fredkin c t1 t2 n))))))))))

;; wire_sequence
(assert
  (forall ((d circuit2) (e circuit2))
    (=>
      (= (width d) (width e))
      (= (wire (sequence d e)) (infix_mnmn (wire d) (wire e))))))

;; wire_parallel
(assert
  (forall ((d circuit2) (e circuit2))
    (= (wire (parallel d e)) (infix_slsl (wire d) (wire e)))))

;; wire_ancilla
(assert
  (forall ((c circuit2) (l Int))
    (=>
      (<= 1 l)
      (=>
        (< l (width c))
        (=>
          (ancillable_pre (pre c) l)
          (= (wire (ancilla c l)) (ancilla1 (wire c) l)))))))

;; positive_width
(assert (forall ((c circuit)) (<= 0 (width1 c))))

;; circ_to_pps_width
(assert (forall ((c circuit)) (= (h_width (circ_to_pps1 c)) (width1 c))))

;; circ_to_pps_range
(assert (forall ((c circuit)) (= (h_range (circ_to_pps1 c)) (range1 c))))

;; circ_to_pps_basis_ket
(assert
  (forall ((c circuit) (x (Array Int Int)) (y (Array Int Int)) (i Int))
    (= (select (select (select (h_basis_ket (circ_to_pps1 c)) x) y) i) 
    (basis_ket1
      c
      x
      y
      i))))

;; circ_to_pps_basis_ket_gen
(assert
  (forall ((c circuit) (x (Array Int Int)) (y (Array Int Int)))
    (= (select (select (h_basis_ket (circ_to_pps1 c)) x) y) (select (select (select 
    basis_ket_closure1 c) x) y))))

;; circ_to_pps_angle
(assert
  (forall ((c circuit) (x (Array Int Int)) (y (Array Int Int)))
    (= (tb2t84
         (infix_at
           angle1
           (infix_mngt int int)
           (infix_at
             (infix_mngt (infix_mngt int int) angle1)
             (infix_mngt int int)
             (t2tb118 (h_angle (circ_to_pps1 c)))
             (t2tb7 x))
           (t2tb7 y))) (ang_ind1 c x y))))

;; sem
(declare-fun sem1 (circuit
  (matrix complex)
  (matrix complex)) Bool)

;; sem'def
(assert
  (forall ((c circuit) (x (matrix complex)) (y (matrix complex)))
    (=
      (sem1 c x y)
      (and
        (is_a_ket_l x (width1 c))
        (infix_eqeq (matrix1 complex1) (t2tb65 y) (t2tb65 (path_sem1 c x)))))))

;; path_sem_to_sem
(assert
  (forall ((c circuit) (x (matrix complex)) (y (matrix complex)))
    (=> (is_a_ket_l x (width1 c)) (=> (= (path_sem1 c x) y) (sem1 c x y)))))

;; sem_to_path_sem
(assert
  (forall ((c circuit) (x (matrix complex)) (y (matrix complex)))
    (=> (sem1 c x y) (= (path_sem1 c x) y))))

;; fc
(declare-fun fc619 (circuit
  (matrix complex)) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((c circuit) (x (matrix complex)) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc619 c x))
           (t2tb77 y))) (infix_asdtdt
                          (tb2t (get complex1 (t2tb65 x) (bv_to_int y) 0))
                          (path_sem_basis1 c (bv_to_ket y))))))

;; get_path_sem
(assert
  (forall ((c circuit) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width1 c))
      (= (path_sem1 c x) (ket_sum_l
                           bitvec1
                           (t2tb79 (n_bvs (width1 c)))
                           (t2tb80 (fc619 c x))
                           (width1 c))))))

;; fc
(declare-fun fc620 (circuit
  (matrix complex)) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((c circuit) (x (matrix complex)) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc620 c x))
           (t2tb77 y))) (infix_asdtdt
                          (tb2t (get complex1 (t2tb65 x) (bv_to_int y) 0))
                          (path_sem_basis1 c (bv_to_ket y))))))

;; get_path_sem_gen
(assert
  (forall ((c circuit))
    (forall ((x (matrix complex)))
      (=>
        (is_a_ket_l x (width1 c))
        (= (path_sem1 c x) (ket_sum_l
                             bitvec1
                             (t2tb79 (n_bvs (width1 c)))
                             (t2tb80 (fc620 c x))
                             (width1 c)))))))

;; fc
(declare-fun fc621 (circuit
  (matrix complex)) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((c circuit) (x (matrix complex)) (z bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc621 c x))
           (t2tb77 z))) (infix_asdtdt
                          (tb2t (get complex1 (t2tb65 x) (bv_to_int z) 0))
                          (path_sem1 c (bv_to_ket z))))))

;; path_sem_decomp
(assert
  (forall ((c circuit) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width1 c))
      (= (path_sem1 c x) (ket_sum_l
                           bitvec1
                           (t2tb79 (n_bvs (width1 c)))
                           (t2tb80 (fc621 c x))
                           (width1 c))))))

;; ancilla_g
(declare-fun ancilla_g1 (circuit
  Int
  (Array (matrix complex) (matrix complex))) circuit)

;; ancilla_g'def
(assert
  (forall ((c circuit) (i Int) (path_sem_target (Array (matrix complex) (matrix complex))))
    (=>
      (<= 1 i)
      (=>
        (<= (+ i 1) (width1 c))
        (=>
          (forall ((x (matrix complex)))
            (=>
              (is_a_ket_l x (- (width1 c) i))
              (= (path_sem1 c (kronecker x (ket i 0))) (kronecker
                                                         (tb2t65
                                                           (infix_at
                                                             (matrix1
                                                               complex1)
                                                             (matrix1
                                                               complex1)
                                                             (t2tb66
                                                               path_sem_target)
                                                             (t2tb65 x)))
                                                         (ket i 0)))))
          (= (ancilla_g1 c i path_sem_target) (ancilla1 c i)))))))

;; fc
(declare-fun fc622 (circuit
  Int
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc623 (circuit
  Int
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((c circuit) (i Int) (x (Array Int Int)) (k Int))
    (= (select (fc622 c i x) k) (ite (< k (- (width1 c) i)) (select x k) 0))))

;; fc'def
(assert
  (forall ((c circuit) (i Int) (x (Array Int Int)) (k Int))
    (= (select (fc623 c i x) k) (ite (< k (- (width1 c) i)) (select x k) 0))))

;; ancilla_g'spec
(assert
  (forall ((c circuit) (i Int) (path_sem_target (Array (matrix complex) (matrix complex))))
    (=>
      (<= 1 i)
      (=>
        (<= (+ i 1) (width1 c))
        (=>
          (forall ((x (matrix complex)))
            (=>
              (is_a_ket_l x (- (width1 c) i))
              (= (path_sem1 c (kronecker x (ket i 0))) (kronecker
                                                         (tb2t65
                                                           (infix_at
                                                             (matrix1
                                                               complex1)
                                                             (matrix1
                                                               complex1)
                                                             (t2tb66
                                                               path_sem_target)
                                                             (t2tb65 x)))
                                                         (ket i 0)))))
          (and
            (= (ancillas1 (ancilla_g1 c i path_sem_target)) (+ (ancillas1 c) i))
            (and
              (= (size1 (ancilla_g1 c i path_sem_target)) (size1 c))
              (and
                (= (range1 (ancilla_g1 c i path_sem_target)) (range1 c))
                (and
                  (= (width1 (ancilla_g1 c i path_sem_target)) (- (width1 c) i))
                  (and
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (forall ((ii Int))
                        (= (basis_ket1
                             (ancilla_g1 c i path_sem_target)
                             x
                             y
                             ii) (basis_ket1 c (fc622 c i x) y ii))))
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (= (ang_ind1 (ancilla_g1 c i path_sem_target) x y) 
                      (ang_ind1
                        c
                        (fc623 c i x)
                        y)))))))))))))

;; sequence_ghost_pps
(declare-fun sequence_ghost_pps1 (circuit
  circuit
  pps
  pps
  pps) circuit)

;; fc
(declare-fun fc624 (pps
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc625 (pps
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((h pps) (y (Array Int Int)) (k Int))
    (= (select (fc624 h y) k) (select y (+ k (h_range h))))))

;; fc'def
(assert
  (forall ((h pps) (y (Array Int Int)) (k Int))
    (= (select (fc625 h y) k) (select y (+ k (h_range h))))))

;; sequence_ghost_pps'def
(assert
  (forall ((c circuit) (cqt circuit) (h pps) (hqt pps) (hqtqt pps))
    (=>
      (correct_path_sum c h)
      (=>
        (correct_path_sum cqt hqt)
        (=>
          (= (width1 c) (width1 cqt))
          (=>
            (= (h_width hqtqt) (width1 c))
            (=>
              (= (h_range hqtqt) (+ (h_range h) (h_range hqt)))
              (=>
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (=>
                    (forall ((j Int))
                      (=>
                        (and (<= 0 j) (< j (h_width hqtqt)))
                        (and (<= 0 (select x j)) (< (select x j) 2))))
                    (=>
                      (forall ((j Int))
                        (=>
                          (and (<= 0 j) (< j (h_range hqtqt)))
                          (and (<= 0 (select y j)) (< (select y j) 2))))
                      (= (tb2t84
                           (infix_at
                             angle1
                             (infix_mngt int int)
                             (infix_at
                               (infix_mngt (infix_mngt int int) angle1)
                               (infix_mngt int int)
                               (t2tb118 (h_angle hqtqt))
                               (t2tb7 x))
                             (t2tb7 y))) (ang_add
                                           (tb2t84
                                             (infix_at
                                               angle1
                                               (infix_mngt int int)
                                               (infix_at
                                                 (infix_mngt
                                                   (infix_mngt int int)
                                                   angle1)
                                                 (infix_mngt int int)
                                                 (t2tb118 (h_angle h))
                                                 (t2tb7 x))
                                               (t2tb7 y)))
                                           (tb2t84
                                             (infix_at
                                               angle1
                                               (infix_mngt int int)
                                               (infix_at
                                                 (infix_mngt
                                                   (infix_mngt int int)
                                                   angle1)
                                                 (infix_mngt int int)
                                                 (t2tb118 (h_angle hqt))
                                                 (t2tb7
                                                   (select (select (h_basis_ket
                                                                    h) x) y)))
                                               (t2tb7 (fc624 h y)))))))))
                (=>
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (forall ((i Int))
                      (=>
                        (forall ((j Int))
                          (=>
                            (and (<= 0 j) (< j (h_width hqtqt)))
                            (and (<= 0 (select x j)) (< (select x j) 2))))
                        (=>
                          (forall ((j Int))
                            (=>
                              (and (<= 0 j) (< j (h_range hqtqt)))
                              (and (<= 0 (select y j)) (< (select y j) 2))))
                          (=>
                            (and (<= 0 i) (< i (h_width hqtqt)))
                            (= (select (select (select (h_basis_ket hqtqt) x) y) i) (select (select (select 
                            (h_basis_ket
                              hqt) (select (select (h_basis_ket h) x) y)) 
                            (fc625
                              h
                              y)) i)))))))
                  (= (sequence_ghost_pps1 c cqt h hqt hqtqt) (infix_mnmn
                                                               c
                                                               cqt)))))))))))

;; fc
(declare-fun fc626 (pps
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc627 (pps
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((h pps) (y (Array Int Int)) (k Int))
    (= (select (fc626 h y) k) (select y (+ k (h_range h))))))

;; fc'def
(assert
  (forall ((h pps) (y (Array Int Int)) (k Int))
    (= (select (fc627 h y) k) (select y (+ k (h_range h))))))

;; sequence_ghost_pps'spec
(assert
  (forall ((c circuit) (cqt circuit) (h pps) (hqt pps) (hqtqt pps))
    (=>
      (correct_path_sum c h)
      (=>
        (correct_path_sum cqt hqt)
        (=>
          (= (width1 c) (width1 cqt))
          (=>
            (= (h_width hqtqt) (width1 c))
            (=>
              (= (h_range hqtqt) (+ (h_range h) (h_range hqt)))
              (=>
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (=>
                    (forall ((j Int))
                      (=>
                        (and (<= 0 j) (< j (h_width hqtqt)))
                        (and (<= 0 (select x j)) (< (select x j) 2))))
                    (=>
                      (forall ((j Int))
                        (=>
                          (and (<= 0 j) (< j (h_range hqtqt)))
                          (and (<= 0 (select y j)) (< (select y j) 2))))
                      (= (tb2t84
                           (infix_at
                             angle1
                             (infix_mngt int int)
                             (infix_at
                               (infix_mngt (infix_mngt int int) angle1)
                               (infix_mngt int int)
                               (t2tb118 (h_angle hqtqt))
                               (t2tb7 x))
                             (t2tb7 y))) (ang_add
                                           (tb2t84
                                             (infix_at
                                               angle1
                                               (infix_mngt int int)
                                               (infix_at
                                                 (infix_mngt
                                                   (infix_mngt int int)
                                                   angle1)
                                                 (infix_mngt int int)
                                                 (t2tb118 (h_angle h))
                                                 (t2tb7 x))
                                               (t2tb7 y)))
                                           (tb2t84
                                             (infix_at
                                               angle1
                                               (infix_mngt int int)
                                               (infix_at
                                                 (infix_mngt
                                                   (infix_mngt int int)
                                                   angle1)
                                                 (infix_mngt int int)
                                                 (t2tb118 (h_angle hqt))
                                                 (t2tb7
                                                   (select (select (h_basis_ket
                                                                    h) x) y)))
                                               (t2tb7 (fc626 h y)))))))))
                (=>
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (forall ((i Int))
                      (=>
                        (forall ((j Int))
                          (=>
                            (and (<= 0 j) (< j (h_width hqtqt)))
                            (and (<= 0 (select x j)) (< (select x j) 2))))
                        (=>
                          (forall ((j Int))
                            (=>
                              (and (<= 0 j) (< j (h_range hqtqt)))
                              (and (<= 0 (select y j)) (< (select y j) 2))))
                          (=>
                            (and (<= 0 i) (< i (h_width hqtqt)))
                            (= (select (select (select (h_basis_ket hqtqt) x) y) i) (select (select (select 
                            (h_basis_ket
                              hqt) (select (select (h_basis_ket h) x) y)) 
                            (fc627
                              h
                              y)) i)))))))
                  (and
                    (= (width1 (sequence_ghost_pps1 c cqt h hqt hqtqt)) 
                    (width1
                      c))
                    (and
                      (= (size1 (sequence_ghost_pps1 c cqt h hqt hqtqt)) (+ 
                      (size1
                        c) (size1 cqt)))
                      (and
                        (= (ancillas1
                             (sequence_ghost_pps1 c cqt h hqt hqtqt)) 
                        (max
                          (ancillas1 c)
                          (ancillas1 cqt)))
                        (correct_path_sum
                          (sequence_ghost_pps1 c cqt h hqt hqtqt)
                          hqtqt)))))))))))))

;; parallel_ghost_pps
(declare-fun parallel_ghost_pps1 (circuit
  circuit
  pps
  pps
  pps) circuit)

;; fc
(declare-fun fc628 (pps
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc629 (pps
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc630 (pps
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc631 (pps
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((h pps) (x (Array Int Int)) (k Int))
    (= (select (fc628 h x) k) (select x (+ k (h_width h))))))

;; fc'def
(assert
  (forall ((h pps) (y (Array Int Int)) (k Int))
    (= (select (fc629 h y) k) (select y (+ k (h_range h))))))

;; fc'def
(assert
  (forall ((h pps) (x (Array Int Int)) (k Int))
    (= (select (fc630 h x) k) (select x (+ k (h_width h))))))

;; fc'def
(assert
  (forall ((h pps) (y (Array Int Int)) (k Int))
    (= (select (fc631 h y) k) (select y (+ k (h_range h))))))

;; parallel_ghost_pps'def
(assert
  (forall ((c circuit) (cqt circuit) (h pps) (hqt pps) (hqtqt pps))
    (=>
      (correct_path_sum c h)
      (=>
        (correct_path_sum cqt hqt)
        (=>
          (= (h_width hqtqt) (+ (width1 c) (width1 cqt)))
          (=>
            (= (h_range hqtqt) (+ (h_range h) (h_range hqt)))
            (=>
              (forall ((x (Array Int Int)) (y (Array Int Int)))
                (=>
                  (forall ((j Int))
                    (=>
                      (and (<= 0 j) (< j (h_width hqtqt)))
                      (and (<= 0 (select x j)) (< (select x j) 2))))
                  (=>
                    (forall ((j Int))
                      (=>
                        (and (<= 0 j) (< j (h_range hqtqt)))
                        (and (<= 0 (select y j)) (< (select y j) 2))))
                    (= (tb2t84
                         (infix_at
                           angle1
                           (infix_mngt int int)
                           (infix_at
                             (infix_mngt (infix_mngt int int) angle1)
                             (infix_mngt int int)
                             (t2tb118 (h_angle hqtqt))
                             (t2tb7 x))
                           (t2tb7 y))) (ang_add
                                         (tb2t84
                                           (infix_at
                                             angle1
                                             (infix_mngt int int)
                                             (infix_at
                                               (infix_mngt
                                                 (infix_mngt int int)
                                                 angle1)
                                               (infix_mngt int int)
                                               (t2tb118 (h_angle h))
                                               (t2tb7 x))
                                             (t2tb7 y)))
                                         (tb2t84
                                           (infix_at
                                             angle1
                                             (infix_mngt int int)
                                             (infix_at
                                               (infix_mngt
                                                 (infix_mngt int int)
                                                 angle1)
                                               (infix_mngt int int)
                                               (t2tb118 (h_angle hqt))
                                               (t2tb7 (fc628 h x)))
                                             (t2tb7 (fc629 h y)))))))))
              (=>
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (forall ((i Int))
                    (=>
                      (forall ((j Int))
                        (=>
                          (and (<= 0 j) (< j (h_width hqtqt)))
                          (and (<= 0 (select x j)) (< (select x j) 2))))
                      (=>
                        (forall ((j Int))
                          (=>
                            (and (<= 0 j) (< j (h_range hqtqt)))
                            (and (<= 0 (select y j)) (< (select y j) 2))))
                        (=>
                          (and (<= 0 i) (< i (h_width h)))
                          (= (select (select (select (h_basis_ket hqtqt) x) y) i) (select (select (select 
                          (h_basis_ket
                            h) x) y) i)))))))
                (=>
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (forall ((i Int))
                      (=>
                        (forall ((j Int))
                          (=>
                            (and (<= 0 j) (< j (h_width hqtqt)))
                            (and (<= 0 (select x j)) (< (select x j) 2))))
                        (=>
                          (forall ((j Int))
                            (=>
                              (and (<= 0 j) (< j (h_range hqtqt)))
                              (and (<= 0 (select y j)) (< (select y j) 2))))
                          (=>
                            (and (<= (h_width h) i) (< i (h_width hqtqt)))
                            (= (select (select (select (h_basis_ket hqtqt) x) y) i) (select (select (select 
                            (h_basis_ket
                              hqt) (fc630 h x)) (fc631 h y)) (- i (h_width h)))))))))
                  (= (parallel_ghost_pps1 c cqt h hqt hqtqt) (infix_slsl
                                                               c
                                                               cqt)))))))))))

;; fc
(declare-fun fc632 (pps
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc633 (pps
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc634 (pps
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc635 (pps
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((h pps) (x (Array Int Int)) (k Int))
    (= (select (fc632 h x) k) (select x (+ k (h_width h))))))

;; fc'def
(assert
  (forall ((h pps) (y (Array Int Int)) (k Int))
    (= (select (fc633 h y) k) (select y (+ k (h_range h))))))

;; fc'def
(assert
  (forall ((h pps) (x (Array Int Int)) (k Int))
    (= (select (fc634 h x) k) (select x (+ k (h_width h))))))

;; fc'def
(assert
  (forall ((h pps) (y (Array Int Int)) (k Int))
    (= (select (fc635 h y) k) (select y (+ k (h_range h))))))

;; parallel_ghost_pps'spec
(assert
  (forall ((c circuit) (cqt circuit) (h pps) (hqt pps) (hqtqt pps))
    (=>
      (correct_path_sum c h)
      (=>
        (correct_path_sum cqt hqt)
        (=>
          (= (h_width hqtqt) (+ (width1 c) (width1 cqt)))
          (=>
            (= (h_range hqtqt) (+ (h_range h) (h_range hqt)))
            (=>
              (forall ((x (Array Int Int)) (y (Array Int Int)))
                (=>
                  (forall ((j Int))
                    (=>
                      (and (<= 0 j) (< j (h_width hqtqt)))
                      (and (<= 0 (select x j)) (< (select x j) 2))))
                  (=>
                    (forall ((j Int))
                      (=>
                        (and (<= 0 j) (< j (h_range hqtqt)))
                        (and (<= 0 (select y j)) (< (select y j) 2))))
                    (= (tb2t84
                         (infix_at
                           angle1
                           (infix_mngt int int)
                           (infix_at
                             (infix_mngt (infix_mngt int int) angle1)
                             (infix_mngt int int)
                             (t2tb118 (h_angle hqtqt))
                             (t2tb7 x))
                           (t2tb7 y))) (ang_add
                                         (tb2t84
                                           (infix_at
                                             angle1
                                             (infix_mngt int int)
                                             (infix_at
                                               (infix_mngt
                                                 (infix_mngt int int)
                                                 angle1)
                                               (infix_mngt int int)
                                               (t2tb118 (h_angle h))
                                               (t2tb7 x))
                                             (t2tb7 y)))
                                         (tb2t84
                                           (infix_at
                                             angle1
                                             (infix_mngt int int)
                                             (infix_at
                                               (infix_mngt
                                                 (infix_mngt int int)
                                                 angle1)
                                               (infix_mngt int int)
                                               (t2tb118 (h_angle hqt))
                                               (t2tb7 (fc632 h x)))
                                             (t2tb7 (fc633 h y)))))))))
              (=>
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (forall ((i Int))
                    (=>
                      (forall ((j Int))
                        (=>
                          (and (<= 0 j) (< j (h_width hqtqt)))
                          (and (<= 0 (select x j)) (< (select x j) 2))))
                      (=>
                        (forall ((j Int))
                          (=>
                            (and (<= 0 j) (< j (h_range hqtqt)))
                            (and (<= 0 (select y j)) (< (select y j) 2))))
                        (=>
                          (and (<= 0 i) (< i (h_width h)))
                          (= (select (select (select (h_basis_ket hqtqt) x) y) i) (select (select (select 
                          (h_basis_ket
                            h) x) y) i)))))))
                (=>
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (forall ((i Int))
                      (=>
                        (forall ((j Int))
                          (=>
                            (and (<= 0 j) (< j (h_width hqtqt)))
                            (and (<= 0 (select x j)) (< (select x j) 2))))
                        (=>
                          (forall ((j Int))
                            (=>
                              (and (<= 0 j) (< j (h_range hqtqt)))
                              (and (<= 0 (select y j)) (< (select y j) 2))))
                          (=>
                            (and (<= (h_width h) i) (< i (h_width hqtqt)))
                            (= (select (select (select (h_basis_ket hqtqt) x) y) i) (select (select (select 
                            (h_basis_ket
                              hqt) (fc634 h x)) (fc635 h y)) (- i (h_width h)))))))))
                  (and
                    (correct_path_sum
                      (parallel_ghost_pps1 c cqt h hqt hqtqt)
                      hqtqt)
                    (and
                      (= (width1 (parallel_ghost_pps1 c cqt h hqt hqtqt)) (+ 
                      (width1
                        c) (width1 cqt)))
                      (and
                        (= (size1 (parallel_ghost_pps1 c cqt h hqt hqtqt)) (+ 
                        (size1
                          c) (size1 cqt)))
                        (= (ancillas1
                             (parallel_ghost_pps1 c cqt h hqt hqtqt)) (+ 
                        (ancillas1
                          c) (ancillas1 cqt)))))))))))))))

;; path_sem_scal_
(assert
  (forall ((c circuit) (x (matrix complex)) (y (matrix complex)) (sc complex))
    (=>
      (is_a_ket_l x (width1 c))
      (=>
        (= (path_sem1 c x) y)
        (= (path_sem1 c (infix_asdtdt sc x)) (infix_asdtdt sc y))))))

;; path_sem_scal
(assert
  (forall ((c circuit) (x (matrix complex)) (sc complex))
    (=>
      (is_a_ket_l x (width1 c))
      (= (path_sem1 c (infix_asdtdt sc x)) (infix_asdtdt sc (path_sem1 c x))))))

;; path_sem_scal_rev
(assert
  (forall ((c circuit) (x (matrix complex)) (sc complex))
    (=>
      (is_a_ket_l x (width1 c))
      (= (infix_asdtdt sc (path_sem1 c x)) (path_sem1 c (infix_asdtdt sc x))))))

;; fc
(declare-fun fc636 (circuit
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc637 (circuit
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((d circuit) (x (Array Int Int)) (k Int))
    (= (select (fc636 d x) k) (select x (+ k (width1 d))))))

;; fc'def
(assert
  (forall ((d circuit) (y (Array Int Int)) (k Int))
    (= (select (fc637 d y) k) (select y (+ k (range1 d))))))

;; parallel_basis_ket
(assert
  (forall ((d circuit) (e circuit) (x (Array Int Int)) (y (Array Int Int)) (i Int))
    (= (basis_ket1 (infix_slsl d e) x y i) (ite (< i (width1 d))
                                             (basis_ket1 d x y i)
                                             (basis_ket1
                                               e
                                               (fc636 d x)
                                               (fc637 d y)
                                               (- i (width1 d)))))))

;; fc
(declare-fun fc638 (circuit
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc639 (circuit
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((d circuit) (x (Array Int Int)) (k Int))
    (= (select (fc638 d x) k) (select x (+ k (width1 d))))))

;; fc'def
(assert
  (forall ((d circuit) (y (Array Int Int)) (k Int))
    (= (select (fc639 d y) k) (select y (+ k (range1 d))))))

;; parallel_angle
(assert
  (forall ((d circuit) (e circuit) (x (Array Int Int)) (y (Array Int Int)))
    (= (ang_ind1 (infix_slsl d e) x y) (ang_add
                                         (ang_ind1 d x y)
                                         (ang_ind1 e (fc638 d x) (fc639 d y))))))

;; path_sem_add
(assert
  (forall ((c circuit) (x (matrix complex)) (xqt (matrix complex)) (y (matrix complex)) (yqt (matrix complex)))
    (=>
      (is_a_ket_l x (width1 c))
      (=>
        (is_a_ket_l xqt (width1 c))
        (=>
          (= (path_sem1 c x) y)
          (=>
            (= (path_sem1 c xqt) yqt)
            (= (path_sem1 c (add_ket_l x xqt (width1 c))) (add_ket_l
                                                            y
                                                            yqt
                                                            (width1 c)))))))))

;; path_sem_add_
(assert
  (forall ((c circuit) (x (matrix complex)) (xqt (matrix complex)) (n Int))
    (=>
      (is_a_ket_l x (width1 c))
      (=>
        (is_a_ket_l xqt (width1 c))
        (=>
          (= (width1 c) n)
          (= (path_sem1 c (add_ket_l x xqt n)) (add_ket_l
                                                 (path_sem1 c x)
                                                 (path_sem1 c xqt)
                                                 n)))))))

;; path_sem_scal_add_ket_l
(assert
  (forall ((c circuit) (x (matrix complex)) (xqt (matrix complex)) (a complex) (aqt complex) (n Int))
    (=>
      (= (width1 c) n)
      (=>
        (is_a_ket_l x n)
        (=>
          (is_a_ket_l xqt n)
          (= (path_sem1
               c
               (add_ket_l (infix_asdtdt a x) (infix_asdtdt aqt xqt) n)) 
          (add_ket_l
            (infix_asdtdt a (path_sem1 c x))
            (infix_asdtdt aqt (path_sem1 c xqt))
            n)))))))

;; path_sem_substr
(assert
  (forall ((c circuit) (x (matrix complex)) (xqt (matrix complex)) (y (matrix complex)) (yqt (matrix complex)))
    (=>
      (is_a_ket_l x (width1 c))
      (=>
        (is_a_ket_l xqt (width1 c))
        (=>
          (= (path_sem1 c x) y)
          (=>
            (= (path_sem1 c xqt) yqt)
            (= (path_sem1 c (mat_substr x xqt)) (mat_substr y yqt))))))))

;; path_sem_scal_add
(assert
  (forall ((c circuit) (x (matrix complex)) (xqt (matrix complex)) (y (matrix complex)) (yqt (matrix complex)) (scal complex))
    (=>
      (is_a_ket_l x (width1 c))
      (=>
        (is_a_ket_l xqt (width1 c))
        (=>
          (= (path_sem1 c x) y)
          (=>
            (= (path_sem1 c xqt) yqt)
            (= (path_sem1 c (infix_asdtdt scal (add_ket_l x xqt (width1 c)))) 
            (infix_asdtdt
              scal
              (add_ket_l y yqt (width1 c))))))))))

;; path_sem_basis_apply
(assert
  (forall ((c circuit) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width1 c))
      (=>
        (is_a_ket_basis_elt x)
        (= (path_sem_basis1 c x) (pps_apply_basis
                                   (circ_to_pps1 c)
                                   (ket_to_bv x)))))))

;; fc
(declare-fun fc640 (circuit
  (matrix complex)) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((c circuit) (x (matrix complex)) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc640 c x))
           (t2tb77 y))) (infix_asdtdt
                          (ang_exp
                            (ang_ind1 c (value (ket_to_bv x)) (value y)))
                          (bv_to_ket
                            (make_bv
                              (select (select (select basis_ket_closure1 c) 
                              (value
                                (ket_to_bv x))) (value y))
                              (width1 c)))))))

;; path_sem_basis_value
(assert
  (forall ((c circuit) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width1 c))
      (=>
        (is_a_ket_basis_elt x)
        (= (path_sem_basis1 c x) (infix_asdtdt
                                   (pow_inv_sqrt_2 (range1 c))
                                   (ket_sum_l
                                     bitvec1
                                     (t2tb79 (n_bvs (range1 c)))
                                     (t2tb80 (fc640 c x))
                                     (width1 c))))))))

;; fc
(declare-fun fc641 (circuit
  (matrix complex)) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((c circuit) (x (matrix complex)) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc641 c x))
           (t2tb77 y))) (infix_asdtdt
                          (ang_exp
                            (ang_ind1 c (value (ket_to_bv x)) (value y)))
                          (bv_to_ket
                            (make_bv
                              (select (select (select basis_ket_closure1 c) 
                              (value
                                (ket_to_bv x))) (value y))
                              (width1 c)))))))

;; path_sem_value_for_basis
(assert
  (forall ((c circuit) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width1 c))
      (=>
        (is_a_ket_basis_elt x)
        (= (path_sem1 c x) (infix_asdtdt
                             (pow_inv_sqrt_2 (range1 c))
                             (ket_sum_l
                               bitvec1
                               (t2tb79 (n_bvs (range1 c)))
                               (t2tb80 (fc641 c x))
                               (width1 c))))))))

;; apply_path_sem_basis
(assert
  (forall ((c circuit) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width1 c))
      (=>
        (is_a_ket_basis_elt x)
        (= (pps_apply_basis (circ_to_pps1 c) (ket_to_bv x)) (path_sem_basis1
                                                              c
                                                              x))))))

;; path_sem_ket_l
(assert
  (forall ((c circuit) (x (matrix complex)) (l Int))
    (=>
      (is_a_ket_l x (width1 c))
      (=> (= l (width1 c)) (is_a_ket_l (path_sem1 c x) l)))))

;; path_sem_scal_substr
(assert
  (forall ((c circuit) (x (matrix complex)) (xqt (matrix complex)) (y (matrix complex)) (yqt (matrix complex)) (scal complex))
    (=>
      (is_a_ket_l x (width1 c))
      (=>
        (is_a_ket_l xqt (width1 c))
        (=>
          (= (path_sem1 c x) y)
          (=>
            (= (path_sem1 c xqt) yqt)
            (= (path_sem1 c (infix_asdtdt scal (mat_substr x xqt))) (infix_asdtdt
                                                                    scal
                                                                    (mat_substr
                                                                    y
                                                                    yqt)))))))))

;; path_sem_sum
(assert
  (forall ((a ty))
    (forall ((c circuit) (s1 uni) (f uni) (g uni) (n Int))
      (=>
        (<= 1 (cardinal a s1))
        (=>
          (= n (width1 c))
          (=>
            (forall ((x uni))
              (=>
                (sort a x)
                (=>
                  (mem a x s1)
                  (is_a_ket_l
                    (tb2t65 (infix_at (matrix1 complex1) a f x))
                    (width1 c)))))
            (=>
              (forall ((x uni))
                (=>
                  (sort a x)
                  (=>
                    (mem a x s1)
                    (= (path_sem1
                         c
                         (tb2t65 (infix_at (matrix1 complex1) a f x))) 
                    (tb2t65
                      (infix_at (matrix1 complex1) a g x))))))
              (= (path_sem1 c (ket_sum_l a s1 f n)) (ket_sum_l a s1 g n)))))))))

;; fc
(declare-fun fc642 (circuit
  (Array bitvec complex)) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((c circuit) (f (Array bitvec complex)) (x bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc642 c f))
           (t2tb77 x))) (infix_asdtdt
                          (tb2t
                            (infix_at complex1 bitvec1 (t2tb82 f) (t2tb77 x)))
                          (path_sem1 c (bv_to_ket x))))))

;; path_sem_sum_diag
(assert
  (forall ((c circuit) (s1 (set bitvec)) (f (Array bitvec complex)) (l Int))
    (=>
      (= s1 (n_bvs l))
      (=>
        (= l (width1 c))
        (= (path_sem1 c (ket_sum_l_diag f l)) (ket_sum_l
                                                bitvec1
                                                (t2tb79 s1)
                                                (t2tb80 (fc642 c f))
                                                l))))))

;; fc
(declare-fun fc643 (ty
  circuit
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x circuit) (x1 uni))
      (sort (infix_mngt a (matrix1 complex1)) (fc643 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((c circuit) (f uni) (x uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc643 a c f) x)) (path_sem1
                                                                    c
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    x)))))))

;; path_sem_sum_
(assert
  (forall ((a ty))
    (forall ((c circuit) (s1 uni) (f uni) (n Int))
      (=>
        (<= 1 (cardinal a s1))
        (=>
          (= n (width1 c))
          (=>
            (forall ((x uni))
              (=>
                (sort a x)
                (=>
                  (mem a x s1)
                  (is_a_ket_l
                    (tb2t65 (infix_at (matrix1 complex1) a f x))
                    (width1 c)))))
            (= (path_sem1 c (ket_sum_l a s1 f n)) (ket_sum_l
                                                    a
                                                    s1
                                                    (fc643 a c f)
                                                    n))))))))

;; path_sem_sum_gen
(assert
  (forall ((a ty))
    (forall ((c circuit) (s1 uni) (f uni) (g uni) (n Int))
      (=>
        (<= 1 (cardinal a s1))
        (=>
          (= n (width1 c))
          (=>
            (forall ((x uni))
              (=>
                (sort a x)
                (=>
                  (mem a x s1)
                  (is_a_ket_l
                    (tb2t65 (infix_at (matrix1 complex1) a f x))
                    (width1 c)))))
            (=>
              (forall ((x uni))
                (=>
                  (sort a x)
                  (=>
                    (mem a x s1)
                    (= (path_sem1
                         c
                         (tb2t65 (infix_at (matrix1 complex1) a f x))) 
                    (tb2t65
                      (infix_at (matrix1 complex1) a g x))))))
              (= (path_sem1 c (ket_sum_l a s1 f n)) (ket_sum_l a s1 g n)))))))))

;; scal_path_sem_sum_gen
(assert
  (forall ((a ty))
    (forall ((c circuit) (s1 uni) (f uni) (g uni) (n Int) (nqt Int) (a1 complex) (b complex))
      (=>
        (<= 1 (cardinal a s1))
        (=>
          (= n (width1 c))
          (=>
            (forall ((x uni))
              (=>
                (sort a x)
                (=>
                  (mem a x s1)
                  (is_a_ket_l
                    (tb2t65 (infix_at (matrix1 complex1) a f x))
                    (width1 c)))))
            (=>
              (forall ((x uni))
                (=>
                  (sort a x)
                  (=>
                    (mem a x s1)
                    (= (path_sem1
                         c
                         (tb2t65 (infix_at (matrix1 complex1) a f x))) 
                    (tb2t65
                      (infix_at (matrix1 complex1) a g x))))))
              (=>
                (= a1 b)
                (=>
                  (= n nqt)
                  (= (infix_asdtdt a1 (path_sem1 c (ket_sum_l a s1 f n))) 
                  (infix_asdtdt
                    b
                    (ket_sum_l a s1 g nqt))))))))))))

;; fc
(declare-fun fc644 (ty
  circuit
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x circuit) (x1 uni))
      (sort (infix_mngt a (matrix1 complex1)) (fc644 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((c circuit) (f uni) (x uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc644 a c f) x)) (path_sem1
                                                                    c
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    x)))))))

;; scal_path_sem_sum
(assert
  (forall ((a ty))
    (forall ((c circuit) (s1 uni) (f uni) (n Int) (a1 complex))
      (=>
        (<= 1 (cardinal a s1))
        (=>
          (= n (width1 c))
          (=>
            (forall ((x uni))
              (=>
                (sort a x)
                (=>
                  (mem a x s1)
                  (is_a_ket_l
                    (tb2t65 (infix_at (matrix1 complex1) a f x))
                    (width1 c)))))
            (= (infix_asdtdt a1 (path_sem1 c (ket_sum_l a s1 f n))) (infix_asdtdt
                                                                    a1
                                                                    (ket_sum_l
                                                                    a
                                                                    s1
                                                                    (fc644
                                                                    a
                                                                    c
                                                                    f)
                                                                    n)))))))))

;; fc
(declare-fun fc645 (ty
  circuit
  uni) uni)

;; fc_sort
(assert
  (forall ((a ty))
    (forall ((x circuit) (x1 uni))
      (sort (infix_mngt a (matrix1 complex1)) (fc645 a x x1)))))

;; fc'def
(assert
  (forall ((a ty))
    (forall ((c circuit) (f uni) (x uni))
      (= (tb2t65 (infix_at (matrix1 complex1) a (fc645 a c f) x)) (path_sem1
                                                                    c
                                                                    (tb2t65
                                                                    (infix_at
                                                                    (matrix1
                                                                    complex1)
                                                                    a
                                                                    f
                                                                    x)))))))

;; path_sem_scal_sum
(assert
  (forall ((a ty))
    (forall ((c circuit) (s1 uni) (f uni) (n Int) (a1 complex))
      (=>
        (<= 1 (cardinal a s1))
        (=>
          (= n (width1 c))
          (=>
            (forall ((x uni))
              (=>
                (sort a x)
                (=>
                  (mem a x s1)
                  (is_a_ket_l
                    (tb2t65 (infix_at (matrix1 complex1) a f x))
                    (width1 c)))))
            (= (path_sem1 c (infix_asdtdt a1 (ket_sum_l a s1 f n))) (infix_asdtdt
                                                                    a1
                                                                    (ket_sum_l
                                                                    a
                                                                    s1
                                                                    (fc645
                                                                    a
                                                                    c
                                                                    f)
                                                                    n)))))))))

;; path_sem_sequence_parallel_basis
(assert
  (forall ((a circuit) (b circuit) (d circuit) (e circuit) (x (matrix complex)))
    (=>
      (is_a_ket_l x (+ (width1 a) (width1 b)))
      (=>
        (= (width1 a) (width1 d))
        (=>
          (= (width1 b) (width1 e))
          (=>
            (is_a_ket_basis_elt x)
            (= (path_sem1 (infix_mnmn (infix_slsl a b) (infix_slsl d e)) x) 
            (path_sem1
              (infix_slsl (infix_mnmn a d) (infix_mnmn b e))
              x))))))))

;; path_sem_sequence_parallel
(assert
  (forall ((a circuit) (b circuit) (d circuit) (e circuit) (x (matrix complex)))
    (=>
      (is_a_ket_l x (+ (width1 a) (width1 b)))
      (=>
        (= (width1 a) (width1 d))
        (=>
          (= (width1 b) (width1 e))
          (= (path_sem1 (infix_mnmn (infix_slsl a b) (infix_slsl d e)) x) 
          (path_sem1
            (infix_slsl (infix_mnmn a d) (infix_mnmn b e))
            x)))))))

;; path_sem_phase_basis
(assert
  (forall ((x (matrix complex)) (k Int))
    (=>
      (is_a_ket_l x 1)
      (=>
        (is_a_ket_basis_elt x)
        (= (path_sem1 (phase1 k) x) (ite (<= 0 k)
                                      (infix_asdtdt
                                        (ang_exp (int_to_ang 1 k))
                                        x)
                                      (infix_asdtdt
                                        (ang_exp (int_to_ang (- 1) (- k)))
                                        x)))))))

;; path_sem_phase_basis_inv
(assert
  (forall ((x (matrix complex)) (k Int))
    (=>
      (is_a_ket_l x 1)
      (=>
        (is_a_ket_basis_elt x)
        (= (path_sem1 (phase1 k) (path_sem1 (phase1 (- k)) x)) x)))))

;; path_sem_phase_inv
(assert
  (forall ((x (matrix complex)) (k Int))
    (=>
      (is_a_ket_l x 1)
      (= (path_sem1 (phase1 k) (path_sem1 (phase1 (- k)) x)) x))))

;; path_sem_rz_basis
(assert
  (forall ((x (matrix complex)) (k Int))
    (=>
      (is_a_ket_l x 1)
      (=>
        (is_a_ket_basis_elt x)
        (= (path_sem1 (rzp k) x) (infix_asdtdt
                                   (ang_exp
                                     (infix_sldtsl
                                       (select (value (ket_to_bv x)) 0)
                                       k))
                                   x))))))

;; path_sem_rz_basis_inv
(assert
  (forall ((x (matrix complex)) (k Int))
    (=>
      (is_a_ket_l x 1)
      (=>
        (is_a_ket_basis_elt x)
        (= (path_sem1 (rzp k) (path_sem1 (rzp (- k)) x)) x)))))

;; path_sem_rz_inv
(assert
  (forall ((x (matrix complex)) (k Int))
    (=> (is_a_ket_l x 1) (= (path_sem1 (rzp k) (path_sem1 (rzp (- k)) x)) x))))

;; path_sem_hadamard_zero
(assert
  (forall ((x (matrix complex)))
    (=>
      (= x (ket 1 0))
      (= (path_sem1 hadamard1 x) (pps_apply pps_hadamard (ket 1 0))))))

;; path_sem_hadamard_one
(assert
  (forall ((x (matrix complex)))
    (=>
      (= x (ket 1 1))
      (= (path_sem1 hadamard1 x) (pps_apply pps_hadamard (ket 1 1))))))

;; path_sem_hadamard_plus
(assert
  (forall ((x (matrix complex)))
    (=>
      (= x (pps_apply pps_hadamard (ket 1 0)))
      (= (path_sem1 hadamard1 x) (ket 1 0)))))

;; path_sem_hadamard_minus
(assert
  (forall ((x (matrix complex)))
    (=>
      (= x (pps_apply pps_hadamard (ket 1 1)))
      (= (path_sem1 hadamard1 x) (ket 1 1)))))

;; path_semnot_basis
(assert
  (forall ((x (matrix complex)))
    (=>
      (is_a_ket_l x 2)
      (=>
        (is_a_ket_basis_elt x)
        (= (path_sem1 bricks_cnot x) (ite (= (ket_to_int x) 0)
                                       (ket 2 0)
                                       (ite (= (ket_to_int x) 1)
                                         (ket 2 1)
                                         (ite (= (ket_to_int x) 2)
                                           (ket 2 3)
                                           (ket 2 2)))))))))

;; path_sem_swap_basis
(assert
  (forall ((x (matrix complex)))
    (=>
      (is_a_ket_l x 2)
      (=>
        (is_a_ket_basis_elt x)
        (= (path_sem1 bricks_swap x) (ite (= (ket_to_int x) 0)
                                       (ket 2 0)
                                       (ite (= (ket_to_int x) 1)
                                         (ket 2 2)
                                         (ite (= (ket_to_int x) 2)
                                           (ket 2 1)
                                           (ket 2 3)))))))))

;; hadamard_invol
(assert
  (forall ((x (matrix complex)))
    (=> (is_a_ket_l x 1) (= (path_sem1 hadamard1 (path_sem1 hadamard1 x)) x))))

;; fc
(declare-fun fc646 (pps
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc647 (pps
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((h pps) (y (Array Int Int)) (k Int))
    (= (select (fc646 h y) k) (select y (+ k (h_range h))))))

;; fc'def
(assert
  (forall ((h pps) (y (Array Int Int)) (k Int))
    (= (select (fc647 h y) k) (select y (+ k (h_range h))))))

;; correct_seq
(assert
  (forall ((c circuit) (cqt circuit) (h pps) (hqt pps) (hqtqt pps))
    (=>
      (correct_path_sum c h)
      (=>
        (correct_path_sum cqt hqt)
        (=>
          (= (width1 c) (width1 cqt))
          (=>
            (= (h_width hqtqt) (width1 c))
            (=>
              (= (h_range hqtqt) (+ (h_range h) (h_range hqt)))
              (=>
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (=>
                    (forall ((j Int))
                      (=>
                        (and (<= 0 j) (< j (h_width hqtqt)))
                        (and (<= 0 (select x j)) (< (select x j) 2))))
                    (=>
                      (forall ((j Int))
                        (=>
                          (and (<= 0 j) (< j (h_range hqtqt)))
                          (and (<= 0 (select y j)) (< (select y j) 2))))
                      (= (tb2t84
                           (infix_at
                             angle1
                             (infix_mngt int int)
                             (infix_at
                               (infix_mngt (infix_mngt int int) angle1)
                               (infix_mngt int int)
                               (t2tb118 (h_angle hqtqt))
                               (t2tb7 x))
                             (t2tb7 y))) (ang_add
                                           (tb2t84
                                             (infix_at
                                               angle1
                                               (infix_mngt int int)
                                               (infix_at
                                                 (infix_mngt
                                                   (infix_mngt int int)
                                                   angle1)
                                                 (infix_mngt int int)
                                                 (t2tb118 (h_angle h))
                                                 (t2tb7 x))
                                               (t2tb7 y)))
                                           (tb2t84
                                             (infix_at
                                               angle1
                                               (infix_mngt int int)
                                               (infix_at
                                                 (infix_mngt
                                                   (infix_mngt int int)
                                                   angle1)
                                                 (infix_mngt int int)
                                                 (t2tb118 (h_angle hqt))
                                                 (t2tb7
                                                   (select (select (h_basis_ket
                                                                    h) x) y)))
                                               (t2tb7 (fc646 h y)))))))))
                (=>
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (forall ((i Int))
                      (=>
                        (forall ((j Int))
                          (=>
                            (and (<= 0 j) (< j (h_width hqtqt)))
                            (and (<= 0 (select x j)) (< (select x j) 2))))
                        (=>
                          (forall ((j Int))
                            (=>
                              (and (<= 0 j) (< j (h_range hqtqt)))
                              (and (<= 0 (select y j)) (< (select y j) 2))))
                          (=>
                            (and (<= 0 i) (< i (h_width hqtqt)))
                            (= (select (select (select (h_basis_ket hqtqt) x) y) i) (select (select (select 
                            (h_basis_ket
                              hqt) (select (select (h_basis_ket h) x) y)) 
                            (fc647
                              h
                              y)) i)))))))
                  (correct_path_sum (infix_mnmn c cqt) hqtqt))))))))))

;; fc
(declare-fun fc648 (pps
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc649 (pps
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc650 (pps
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc651 (pps
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((h pps) (x (Array Int Int)) (k Int))
    (= (select (fc648 h x) k) (select x (+ k (h_width h))))))

;; fc'def
(assert
  (forall ((h pps) (y (Array Int Int)) (k Int))
    (= (select (fc649 h y) k) (select y (+ k (h_range h))))))

;; fc'def
(assert
  (forall ((h pps) (x (Array Int Int)) (k Int))
    (= (select (fc650 h x) k) (select x (+ k (h_width h))))))

;; fc'def
(assert
  (forall ((h pps) (y (Array Int Int)) (k Int))
    (= (select (fc651 h y) k) (select y (+ k (h_range h))))))

;; correct_par
(assert
  (forall ((c circuit) (cqt circuit) (h pps) (hqt pps) (hqtqt pps))
    (=>
      (correct_path_sum c h)
      (=>
        (correct_path_sum cqt hqt)
        (=>
          (= (h_width hqtqt) (+ (width1 c) (width1 cqt)))
          (=>
            (= (h_range hqtqt) (+ (h_range h) (h_range hqt)))
            (=>
              (forall ((x (Array Int Int)) (y (Array Int Int)))
                (=>
                  (forall ((j Int))
                    (=>
                      (and (<= 0 j) (< j (h_width hqtqt)))
                      (and (<= 0 (select x j)) (< (select x j) 2))))
                  (=>
                    (forall ((j Int))
                      (=>
                        (and (<= 0 j) (< j (h_range hqtqt)))
                        (and (<= 0 (select y j)) (< (select y j) 2))))
                    (= (tb2t84
                         (infix_at
                           angle1
                           (infix_mngt int int)
                           (infix_at
                             (infix_mngt (infix_mngt int int) angle1)
                             (infix_mngt int int)
                             (t2tb118 (h_angle hqtqt))
                             (t2tb7 x))
                           (t2tb7 y))) (ang_add
                                         (tb2t84
                                           (infix_at
                                             angle1
                                             (infix_mngt int int)
                                             (infix_at
                                               (infix_mngt
                                                 (infix_mngt int int)
                                                 angle1)
                                               (infix_mngt int int)
                                               (t2tb118 (h_angle h))
                                               (t2tb7 x))
                                             (t2tb7 y)))
                                         (tb2t84
                                           (infix_at
                                             angle1
                                             (infix_mngt int int)
                                             (infix_at
                                               (infix_mngt
                                                 (infix_mngt int int)
                                                 angle1)
                                               (infix_mngt int int)
                                               (t2tb118 (h_angle hqt))
                                               (t2tb7 (fc648 h x)))
                                             (t2tb7 (fc649 h y)))))))))
              (=>
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (forall ((i Int))
                    (=>
                      (forall ((j Int))
                        (=>
                          (and (<= 0 j) (< j (h_width hqtqt)))
                          (and (<= 0 (select x j)) (< (select x j) 2))))
                      (=>
                        (forall ((j Int))
                          (=>
                            (and (<= 0 j) (< j (h_range hqtqt)))
                            (and (<= 0 (select y j)) (< (select y j) 2))))
                        (=>
                          (and (<= 0 i) (< i (h_width h)))
                          (= (select (select (select (h_basis_ket hqtqt) x) y) i) (select (select (select 
                          (h_basis_ket
                            h) x) y) i)))))))
                (=>
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (forall ((i Int))
                      (=>
                        (forall ((j Int))
                          (=>
                            (and (<= 0 j) (< j (h_width hqtqt)))
                            (and (<= 0 (select x j)) (< (select x j) 2))))
                        (=>
                          (forall ((j Int))
                            (=>
                              (and (<= 0 j) (< j (h_range hqtqt)))
                              (and (<= 0 (select y j)) (< (select y j) 2))))
                          (=>
                            (and (<= (h_width h) i) (< i (h_width hqtqt)))
                            (= (select (select (select (h_basis_ket hqtqt) x) y) i) (select (select (select 
                            (h_basis_ket
                              hqt) (fc650 h x)) (fc651 h y)) (- i (h_width h)))))))))
                  (correct_path_sum (infix_slsl c cqt) hqtqt))))))))))

;; set_correct_main_path_sum
(assert
  (forall ((c circuit) (h pps))
    (=>
      (= (h_width h) (width1 c))
      (=>
        (= (h_range h) (range1 c))
        (=>
          (forall ((x bitvec) (y bitvec))
            (=>
              (= (length x) (width1 c))
              (=>
                (= (length y) (range1 c))
                (= (tb2t84
                     (infix_at
                       angle1
                       (infix_mngt int int)
                       (infix_at
                         (infix_mngt (infix_mngt int int) angle1)
                         (infix_mngt int int)
                         (t2tb118 (h_angle h))
                         (t2tb7 (value x)))
                       (t2tb7 (value y)))) (ang_ind1 c (value x) (value y))))))
          (=>
            (forall ((x bitvec) (y bitvec))
              (forall ((i Int))
                (=>
                  (and (<= 0 i) (< i (width1 c)))
                  (=>
                    (= (length x) (width1 c))
                    (=>
                      (= (length y) (range1 c))
                      (= (select (select (select (h_basis_ket h) (value x)) 
                      (value
                        y)) i) (basis_ket1 c (value x) (value y) i)))))))
            (correct_path_sum c h)))))))

;; set_path_sem_by_correct_pps
(assert
  (forall ((c circuit) (h pps) (x (matrix complex)))
    (=>
      (correct_path_sum c h)
      (=>
        (is_a_ket_l x (width1 c))
        (=> (is_a_ket_basis_elt x) (= (path_sem1 c x) (pps_apply h x)))))))

;; fc
(declare-fun fc652 (circuit
  bitvec) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((c circuit) (x bitvec) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc652 c x))
           (t2tb77 y))) (infix_asdtdt
                          (ang_exp (ang_ind1 c (value x) (value y)))
                          (bv_to_ket
                            (make_bv
                              (select (select (select basis_ket_closure1 c) 
                              (value
                                x)) (value y))
                              (width1 c)))))))

;; set_path_sem_by_main_pps
(assert
  (forall ((c circuit) (x bitvec))
    (=>
      (= (length x) (width1 c))
      (= (path_sem1 c (bv_to_ket x)) (infix_asdtdt
                                       (pow_inv_sqrt_2 (range1 c))
                                       (ket_sum_l
                                         bitvec1
                                         (t2tb79 (n_bvs (range1 c)))
                                         (t2tb80 (fc652 c x))
                                         (width1 c)))))))

;; set_path_sem_by_correct_pps_gen
(assert
  (forall ((c circuit) (h pps))
    (=>
      (correct_path_sum c h)
      (forall ((x (matrix complex)))
        (=>
          (is_a_ket_l x (width1 c))
          (=> (is_a_ket_basis_elt x) (= (path_sem1 c x) (pps_apply h x))))))))

;; set_correct_path_sum_sim
(assert
  (forall ((c circuit) (h pps) (hqt pps))
    (=>
      (= (h_range h) (h_range hqt))
      (=>
        (= (h_width h) (h_width hqt))
        (=>
          (forall ((x bitvec) (y bitvec))
            (=>
              (= (length x) (width1 c))
              (=>
                (= (length y) (h_range h))
                (= (tb2t84
                     (infix_at
                       angle1
                       (infix_mngt int int)
                       (infix_at
                         (infix_mngt (infix_mngt int int) angle1)
                         (infix_mngt int int)
                         (t2tb118 (h_angle h))
                         (t2tb7 (value x)))
                       (t2tb7 (value y)))) (tb2t84
                                             (infix_at
                                               angle1
                                               (infix_mngt int int)
                                               (infix_at
                                                 (infix_mngt
                                                   (infix_mngt int int)
                                                   angle1)
                                                 (infix_mngt int int)
                                                 (t2tb118 (h_angle hqt))
                                                 (t2tb7 (value x)))
                                               (t2tb7 (value y))))))))
          (=>
            (forall ((x bitvec) (y bitvec))
              (forall ((i Int))
                (=>
                  (= (length x) (width1 c))
                  (=>
                    (= (length y) (h_range h))
                    (=>
                      (and (<= 0 i) (< i (width1 c)))
                      (= (select (select (select (h_basis_ket h) (value x)) 
                      (value
                        y)) i) (select (select (select (h_basis_ket hqt) 
                      (value
                        x)) (value y)) i)))))))
            (=> (correct_path_sum c h) (correct_path_sum c hqt))))))))

;; path_sum_equiv
(assert
  (forall ((c circuit) (h pps) (hqt pps))
    (=>
      (<= 0 (h_range h))
      (=>
        (= (h_range h) (h_range hqt))
        (=>
          (= (h_width h) (h_width hqt))
          (=>
            (forall ((x bitvec) (y bitvec))
              (=>
                (= (length x) (width1 c))
                (=>
                  (= (length y) (h_range h))
                  (= (tb2t84
                       (infix_at
                         angle1
                         (infix_mngt int int)
                         (infix_at
                           (infix_mngt (infix_mngt int int) angle1)
                           (infix_mngt int int)
                           (t2tb118 (h_angle h))
                           (t2tb7 (value x)))
                         (t2tb7 (value y)))) (tb2t84
                                               (infix_at
                                                 angle1
                                                 (infix_mngt int int)
                                                 (infix_at
                                                   (infix_mngt
                                                     (infix_mngt int int)
                                                     angle1)
                                                   (infix_mngt int int)
                                                   (t2tb118 (h_angle hqt))
                                                   (t2tb7 (value x)))
                                                 (t2tb7 (value y))))))))
            (=>
              (forall ((x bitvec) (y bitvec))
                (forall ((i Int))
                  (=>
                    (and (<= 0 i) (< i (width1 c)))
                    (=>
                      (= (length x) (width1 c))
                      (=>
                        (= (length y) (h_range h))
                        (= (select (select (select (h_basis_ket h) (value x)) 
                        (value
                          y)) i) (select (select (select (h_basis_ket hqt) 
                        (value
                          x)) (value y)) i)))))))
              (= (correct_path_sum c h) (correct_path_sum c hqt)))))))))

;; correct_to_path_sem
(assert
  (forall ((c circuit) (h pps))
    (=>
      (correct_path_sum c h)
      (forall ((x (matrix complex)))
        (=> (is_a_ket_l x (width1 c)) (= (pps_apply h x) (path_sem1 c x)))))))

;; swap_invol_basis
(assert
  (forall ((x (matrix complex)))
    (=>
      (is_a_ket_l x 2)
      (=>
        (is_a_ket_basis_elt x)
        (= (path_sem1 bricks_swap (path_sem1 bricks_swap x)) x)))))

;; path_sem_to_correct
(assert
  (forall ((c circuit) (h pps))
    (=>
      (= (h_width h) (width1 c))
      (=>
        (forall ((x (matrix complex)))
          (=>
            (is_a_ket_l x (width1 c))
            (=> (is_a_ket_basis_elt x) (= (pps_apply h x) (path_sem1 c x)))))
        (correct_path_sum c h)))))

;; correct_main_path_sum
(assert (forall ((c circuit)) (correct_path_sum c (circ_to_pps1 c))))

;; correct_path_sum_bv
(declare-fun correct_path_sum_bv1 (circuit
  Int
  (Array bitvec (Array bitvec bitvec))
  (Array bitvec (Array bitvec angle))) Bool)

;; correct_path_sum_bv'def
(assert
  (forall ((c circuit) (r Int) (k (Array bitvec (Array bitvec bitvec))) (a (Array bitvec (Array bitvec angle))))
    (=>
      (<= 0 r)
      (=>
        (forall ((x bitvec) (y bitvec))
          (=>
            (= (length x) (width1 c))
            (=>
              (= (length y) r)
              (= (length
                   (tb2t77
                     (infix_at
                       bitvec1
                       bitvec1
                       (infix_at
                         (infix_mngt bitvec1 bitvec1)
                         bitvec1
                         (t2tb119 k)
                         (t2tb77 x))
                       (t2tb77 y)))) (width1 c)))))
        (=
          (correct_path_sum_bv1 c r k a)
          (correct_path_sum c (build_pps_bv (width1 c) r k a)))))))

;; correct_path_sum_to_bv
(assert
  (forall ((c circuit) (r Int) (k (Array bitvec (Array bitvec bitvec))) (a (Array bitvec (Array bitvec angle))))
    (=>
      (<= 0 r)
      (=>
        (forall ((x bitvec) (y bitvec))
          (=>
            (= (length x) (width1 c))
            (=>
              (= (length y) r)
              (= (length
                   (tb2t77
                     (infix_at
                       bitvec1
                       bitvec1
                       (infix_at
                         (infix_mngt bitvec1 bitvec1)
                         bitvec1
                         (t2tb119 k)
                         (t2tb77 x))
                       (t2tb77 y)))) (width1 c)))))
        (=>
          (correct_path_sum c (build_pps_bv (width1 c) r k a))
          (correct_path_sum_bv1 c r k a))))))

;; unwire_correct_bv
(assert
  (forall ((c circuit) (r Int) (k (Array bitvec (Array bitvec bitvec))) (a (Array bitvec (Array bitvec angle))))
    (=>
      (<= 0 r)
      (=>
        (forall ((x bitvec) (y bitvec))
          (=>
            (= (length x) (width1 c))
            (=>
              (= (length y) r)
              (= (length
                   (tb2t77
                     (infix_at
                       bitvec1
                       bitvec1
                       (infix_at
                         (infix_mngt bitvec1 bitvec1)
                         bitvec1
                         (t2tb119 k)
                         (t2tb77 x))
                       (t2tb77 y)))) (width1 c)))))
        (=>
          (correct_path_sum_bv1 c r k a)
          (correct_path_sum_bv (unwire c) r k a))))))

;; unwire_correct_bv_rev
(assert
  (forall ((c circuit) (r Int) (k (Array bitvec (Array bitvec bitvec))) (a (Array bitvec (Array bitvec angle))))
    (=>
      (<= 0 r)
      (=>
        (forall ((x bitvec) (y bitvec))
          (=>
            (= (length x) (width1 c))
            (=>
              (= (length y) r)
              (= (length
                   (tb2t77
                     (infix_at
                       bitvec1
                       bitvec1
                       (infix_at
                         (infix_mngt bitvec1 bitvec1)
                         bitvec1
                         (t2tb119 k)
                         (t2tb77 x))
                       (t2tb77 y)))) (width1 c)))))
        (=>
          (correct_path_sum_bv (unwire c) r k a)
          (correct_path_sum_bv1 c r k a))))))

;; wire_correct_bv
(assert
  (forall ((c circuit2) (r Int) (k (Array bitvec (Array bitvec bitvec))) (a (Array bitvec (Array bitvec angle))))
    (=>
      (<= 0 r)
      (=>
        (forall ((x bitvec) (y bitvec))
          (=>
            (= (length x) (width c))
            (=>
              (= (length y) r)
              (= (length
                   (tb2t77
                     (infix_at
                       bitvec1
                       bitvec1
                       (infix_at
                         (infix_mngt bitvec1 bitvec1)
                         bitvec1
                         (t2tb119 k)
                         (t2tb77 x))
                       (t2tb77 y)))) (width c)))))
        (=>
          (correct_path_sum_bv c r k a)
          (correct_path_sum_bv1 (wire c) r k a))))))

;; correct_path_sum_by_bv
(assert
  (forall ((c circuit) (r Int) (k (Array bitvec (Array bitvec bitvec))) (a (Array bitvec (Array bitvec angle))))
    (=>
      (<= 0 r)
      (=>
        (forall ((x bitvec) (y bitvec))
          (=>
            (= (length x) (width1 c))
            (=>
              (= (length y) r)
              (= (length
                   (tb2t77
                     (infix_at
                       bitvec1
                       bitvec1
                       (infix_at
                         (infix_mngt bitvec1 bitvec1)
                         bitvec1
                         (t2tb119 k)
                         (t2tb77 x))
                       (t2tb77 y)))) (width1 c)))))
        (=>
          (correct_path_sum_bv1 c r k a)
          (correct_path_sum c (build_pps_bv (width1 c) r k a)))))))

;; correct_path_sum_bv_main
(assert
  (forall ((c circuit) (r Int) (k (Array bitvec (Array bitvec bitvec))) (a (Array bitvec (Array bitvec angle))))
    (=>
      (<= 0 r)
      (=>
        (forall ((x bitvec) (y bitvec))
          (=>
            (= (length x) (width1 c))
            (=>
              (= (length y) r)
              (= (length
                   (tb2t77
                     (infix_at
                       bitvec1
                       bitvec1
                       (infix_at
                         (infix_mngt bitvec1 bitvec1)
                         bitvec1
                         (t2tb119 k)
                         (t2tb77 x))
                       (t2tb77 y)))) (width1 c)))))
        (=>
          (forall ((x bitvec) (y bitvec))
            (forall ((i Int))
              (=>
                (= (length x) (width1 c))
                (=>
                  (= (length y) r)
                  (=>
                    (and (<= 0 i) (< i (width1 c)))
                    (= (select (value
                                 (tb2t77
                                   (infix_at
                                     bitvec1
                                     bitvec1
                                     (infix_at
                                       (infix_mngt bitvec1 bitvec1)
                                       bitvec1
                                       (t2tb119 k)
                                       (t2tb77 x))
                                     (t2tb77 y)))) i) (basis_ket1
                                                        c
                                                        (value x)
                                                        (value y)
                                                        i)))))))
          (=>
            (forall ((x bitvec) (y bitvec))
              (=>
                (= (length x) (width1 c))
                (=>
                  (= (length y) r)
                  (= (tb2t84
                       (infix_at
                         angle1
                         bitvec1
                         (infix_at
                           (infix_mngt bitvec1 angle1)
                           bitvec1
                           (t2tb121 a)
                           (t2tb77 x))
                         (t2tb77 y))) (ang_ind1 c (value x) (value y))))))
            (=> (= r (range1 c)) (correct_path_sum_bv1 c r k a))))))))

;; fc
(declare-fun fc653 ((Array bitvec (Array bitvec bitvec))
  (Array bitvec (Array bitvec angle))
  bitvec) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((k (Array bitvec (Array bitvec bitvec))) (a (Array bitvec (Array bitvec angle))) (x bitvec) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc653 k a x))
           (t2tb77 y))) (infix_asdtdt
                          (ang_exp
                            (tb2t84
                              (infix_at
                                angle1
                                bitvec1
                                (infix_at
                                  (infix_mngt bitvec1 angle1)
                                  bitvec1
                                  (t2tb121 a)
                                  (t2tb77 x))
                                (t2tb77 y))))
                          (bv_to_ket
                            (tb2t77
                              (infix_at
                                bitvec1
                                bitvec1
                                (infix_at
                                  (infix_mngt bitvec1 bitvec1)
                                  bitvec1
                                  (t2tb119 k)
                                  (t2tb77 x))
                                (t2tb77 y))))))))

;; correct_path_sum_bv_apply
(assert
  (forall ((c circuit) (r Int) (k (Array bitvec (Array bitvec bitvec))) (a (Array bitvec (Array bitvec angle))) (x bitvec))
    (=>
      (<= 0 r)
      (=>
        (forall ((x1 bitvec) (y bitvec))
          (=>
            (= (length x1) (width1 c))
            (=>
              (= (length y) r)
              (= (length
                   (tb2t77
                     (infix_at
                       bitvec1
                       bitvec1
                       (infix_at
                         (infix_mngt bitvec1 bitvec1)
                         bitvec1
                         (t2tb119 k)
                         (t2tb77 x1))
                       (t2tb77 y)))) (width1 c)))))
        (=>
          (= (length x) (width1 c))
          (=>
            (correct_path_sum_bv1 c r k a)
            (= (path_sem1 c (bv_to_ket x)) (infix_asdtdt
                                             (pow_inv_sqrt_2 r)
                                             (ket_sum_l
                                               bitvec1
                                               (t2tb79 (n_bvs r))
                                               (t2tb80 (fc653 k a x))
                                               (width1 c))))))))))

;; seq_pps_bv
(declare-fun seq_pps_bv (circuit
  circuit
  Int
  Int
  Int
  (Array bitvec (Array bitvec bitvec))
  (Array bitvec (Array bitvec bitvec))
  (Array bitvec (Array bitvec bitvec))
  (Array bitvec (Array bitvec angle))
  (Array bitvec (Array bitvec angle))
  (Array bitvec (Array bitvec angle))) circuit)

;; seq_pps_bv'def
(assert
  (forall ((c circuit) (cqt circuit) (r1 Int) (r2 Int) (r3 Int) (k1 (Array bitvec (Array bitvec bitvec))) (k2 (Array bitvec (Array bitvec bitvec))) (k3 (Array bitvec (Array bitvec bitvec))) (a1 (Array bitvec (Array bitvec angle))) (a2 (Array bitvec (Array bitvec angle))) (a3 (Array bitvec (Array bitvec angle))))
    (=>
      (<= 0 r1)
      (=>
        (<= 0 r2)
        (=>
          (forall ((x bitvec) (y bitvec))
            (=>
              (= (length x) (width1 c))
              (=>
                (= (length y) r1)
                (= (length
                     (tb2t77
                       (infix_at
                         bitvec1
                         bitvec1
                         (infix_at
                           (infix_mngt bitvec1 bitvec1)
                           bitvec1
                           (t2tb119 k1)
                           (t2tb77 x))
                         (t2tb77 y)))) (width1 c)))))
          (=>
            (forall ((x bitvec) (y bitvec))
              (=>
                (= (length x) (width1 c))
                (=>
                  (= (length y) r2)
                  (= (length
                       (tb2t77
                         (infix_at
                           bitvec1
                           bitvec1
                           (infix_at
                             (infix_mngt bitvec1 bitvec1)
                             bitvec1
                             (t2tb119 k2)
                             (t2tb77 x))
                           (t2tb77 y)))) (width1 c)))))
            (=>
              (forall ((x bitvec) (y bitvec))
                (=>
                  (= (length x) (width1 c))
                  (=>
                    (= (length y) r3)
                    (= (length
                         (tb2t77
                           (infix_at
                             bitvec1
                             bitvec1
                             (infix_at
                               (infix_mngt bitvec1 bitvec1)
                               bitvec1
                               (t2tb119 k3)
                               (t2tb77 x))
                             (t2tb77 y)))) (width1 c)))))
              (=>
                (= (width1 c) (width1 cqt))
                (=>
                  (= r3 (+ r1 r2))
                  (=>
                    (correct_path_sum_bv1 c r1 k1 a1)
                    (=>
                      (correct_path_sum_bv1 cqt r2 k2 a2)
                      (=>
                        (forall ((x bitvec) (y bitvec))
                          (=>
                            (= (length x) (width1 c))
                            (=>
                              (= (length y) r3)
                              (= (tb2t84
                                   (infix_at
                                     angle1
                                     bitvec1
                                     (infix_at
                                       (infix_mngt bitvec1 angle1)
                                       bitvec1
                                       (t2tb121 a3)
                                       (t2tb77 x))
                                     (t2tb77 y))) (ang_add
                                                    (tb2t84
                                                      (infix_at
                                                        angle1
                                                        bitvec1
                                                        (infix_at
                                                          (infix_mngt
                                                            bitvec1
                                                            angle1)
                                                          bitvec1
                                                          (t2tb121 a1)
                                                          (t2tb77 x))
                                                        (t2tb77 (hpart y r1))))
                                                    (tb2t84
                                                      (infix_at
                                                        angle1
                                                        bitvec1
                                                        (infix_at
                                                          (infix_mngt
                                                            bitvec1
                                                            angle1)
                                                          bitvec1
                                                          (t2tb121 a2)
                                                          (infix_at
                                                            bitvec1
                                                            bitvec1
                                                            (infix_at
                                                              (infix_mngt
                                                                bitvec1
                                                                bitvec1)
                                                              bitvec1
                                                              (t2tb119 k1)
                                                              (t2tb77 x))
                                                            (t2tb77
                                                              (hpart y r1))))
                                                        (t2tb77 (tpart y r1)))))))))
                        (=>
                          (forall ((x bitvec) (y bitvec))
                            (=>
                              (= (length x) (width1 c))
                              (=>
                                (= (length y) r3)
                                (= (tb2t77
                                     (infix_at
                                       bitvec1
                                       bitvec1
                                       (infix_at
                                         (infix_mngt bitvec1 bitvec1)
                                         bitvec1
                                         (t2tb119 k3)
                                         (t2tb77 x))
                                       (t2tb77 y))) (tb2t77
                                                      (infix_at
                                                        bitvec1
                                                        bitvec1
                                                        (infix_at
                                                          (infix_mngt
                                                            bitvec1
                                                            bitvec1)
                                                          bitvec1
                                                          (t2tb119 k2)
                                                          (infix_at
                                                            bitvec1
                                                            bitvec1
                                                            (infix_at
                                                              (infix_mngt
                                                                bitvec1
                                                                bitvec1)
                                                              bitvec1
                                                              (t2tb119 k1)
                                                              (t2tb77 x))
                                                            (t2tb77
                                                              (hpart y r1))))
                                                        (t2tb77 (tpart y r1))))))))
                          (= (seq_pps_bv c cqt r1 r2 r3 k1 k2 k3 a1 a2 a3) 
                          (infix_mnmn
                            c
                            cqt)))))))))))))))

;; seq_pps_bv'spec
(assert
  (forall ((c circuit) (cqt circuit) (r1 Int) (r2 Int) (r3 Int) (k1 (Array bitvec (Array bitvec bitvec))) (k2 (Array bitvec (Array bitvec bitvec))) (k3 (Array bitvec (Array bitvec bitvec))) (a1 (Array bitvec (Array bitvec angle))) (a2 (Array bitvec (Array bitvec angle))) (a3 (Array bitvec (Array bitvec angle))))
    (=>
      (<= 0 r1)
      (=>
        (<= 0 r2)
        (=>
          (forall ((x bitvec) (y bitvec))
            (=>
              (= (length x) (width1 c))
              (=>
                (= (length y) r1)
                (= (length
                     (tb2t77
                       (infix_at
                         bitvec1
                         bitvec1
                         (infix_at
                           (infix_mngt bitvec1 bitvec1)
                           bitvec1
                           (t2tb119 k1)
                           (t2tb77 x))
                         (t2tb77 y)))) (width1 c)))))
          (=>
            (forall ((x bitvec) (y bitvec))
              (=>
                (= (length x) (width1 c))
                (=>
                  (= (length y) r2)
                  (= (length
                       (tb2t77
                         (infix_at
                           bitvec1
                           bitvec1
                           (infix_at
                             (infix_mngt bitvec1 bitvec1)
                             bitvec1
                             (t2tb119 k2)
                             (t2tb77 x))
                           (t2tb77 y)))) (width1 c)))))
            (=>
              (forall ((x bitvec) (y bitvec))
                (=>
                  (= (length x) (width1 c))
                  (=>
                    (= (length y) r3)
                    (= (length
                         (tb2t77
                           (infix_at
                             bitvec1
                             bitvec1
                             (infix_at
                               (infix_mngt bitvec1 bitvec1)
                               bitvec1
                               (t2tb119 k3)
                               (t2tb77 x))
                             (t2tb77 y)))) (width1 c)))))
              (=>
                (= (width1 c) (width1 cqt))
                (=>
                  (= r3 (+ r1 r2))
                  (=>
                    (correct_path_sum_bv1 c r1 k1 a1)
                    (=>
                      (correct_path_sum_bv1 cqt r2 k2 a2)
                      (=>
                        (forall ((x bitvec) (y bitvec))
                          (=>
                            (= (length x) (width1 c))
                            (=>
                              (= (length y) r3)
                              (= (tb2t84
                                   (infix_at
                                     angle1
                                     bitvec1
                                     (infix_at
                                       (infix_mngt bitvec1 angle1)
                                       bitvec1
                                       (t2tb121 a3)
                                       (t2tb77 x))
                                     (t2tb77 y))) (ang_add
                                                    (tb2t84
                                                      (infix_at
                                                        angle1
                                                        bitvec1
                                                        (infix_at
                                                          (infix_mngt
                                                            bitvec1
                                                            angle1)
                                                          bitvec1
                                                          (t2tb121 a1)
                                                          (t2tb77 x))
                                                        (t2tb77 (hpart y r1))))
                                                    (tb2t84
                                                      (infix_at
                                                        angle1
                                                        bitvec1
                                                        (infix_at
                                                          (infix_mngt
                                                            bitvec1
                                                            angle1)
                                                          bitvec1
                                                          (t2tb121 a2)
                                                          (infix_at
                                                            bitvec1
                                                            bitvec1
                                                            (infix_at
                                                              (infix_mngt
                                                                bitvec1
                                                                bitvec1)
                                                              bitvec1
                                                              (t2tb119 k1)
                                                              (t2tb77 x))
                                                            (t2tb77
                                                              (hpart y r1))))
                                                        (t2tb77 (tpart y r1)))))))))
                        (=>
                          (forall ((x bitvec) (y bitvec))
                            (=>
                              (= (length x) (width1 c))
                              (=>
                                (= (length y) r3)
                                (= (tb2t77
                                     (infix_at
                                       bitvec1
                                       bitvec1
                                       (infix_at
                                         (infix_mngt bitvec1 bitvec1)
                                         bitvec1
                                         (t2tb119 k3)
                                         (t2tb77 x))
                                       (t2tb77 y))) (tb2t77
                                                      (infix_at
                                                        bitvec1
                                                        bitvec1
                                                        (infix_at
                                                          (infix_mngt
                                                            bitvec1
                                                            bitvec1)
                                                          bitvec1
                                                          (t2tb119 k2)
                                                          (infix_at
                                                            bitvec1
                                                            bitvec1
                                                            (infix_at
                                                              (infix_mngt
                                                                bitvec1
                                                                bitvec1)
                                                              bitvec1
                                                              (t2tb119 k1)
                                                              (t2tb77 x))
                                                            (t2tb77
                                                              (hpart y r1))))
                                                        (t2tb77 (tpart y r1))))))))
                          (and
                            (= (seq_pps_bv c cqt r1 r2 r3 k1 k2 k3 a1 a2 a3) 
                            (infix_mnmn
                              c
                              cqt))
                            (and
                              (= (width1
                                   (seq_pps_bv
                                     c
                                     cqt
                                     r1
                                     r2
                                     r3
                                     k1
                                     k2
                                     k3
                                     a1
                                     a2
                                     a3)) (width1 c))
                              (and
                                (= (size1
                                     (seq_pps_bv
                                       c
                                       cqt
                                       r1
                                       r2
                                       r3
                                       k1
                                       k2
                                       k3
                                       a1
                                       a2
                                       a3)) (+ (size1 c) (size1 cqt)))
                                (and
                                  (= (ancillas1
                                       (seq_pps_bv
                                         c
                                         cqt
                                         r1
                                         r2
                                         r3
                                         k1
                                         k2
                                         k3
                                         a1
                                         a2
                                         a3)) (max
                                                (ancillas1 c)
                                                (ancillas1 cqt)))
                                  (correct_path_sum_bv1
                                    (seq_pps_bv
                                      c
                                      cqt
                                      r1
                                      r2
                                      r3
                                      k1
                                      k2
                                      k3
                                      a1
                                      a2
                                      a3)
                                    r3
                                    k3
                                    a3))))))))))))))))))

;; correct_path_sum_bv_sim
(assert
  (forall ((c circuit) (r1 Int) (k1 (Array bitvec (Array bitvec bitvec))) (a1 (Array bitvec (Array bitvec angle))) (r2 Int) (k2 (Array bitvec (Array bitvec bitvec))) (a2 (Array bitvec (Array bitvec angle))))
    (=>
      (= r1 r2)
      (=>
        (<= 0 r1)
        (=>
          (forall ((x bitvec) (y bitvec))
            (=>
              (= (length x) (width1 c))
              (=>
                (= (length y) r1)
                (= (length
                     (tb2t77
                       (infix_at
                         bitvec1
                         bitvec1
                         (infix_at
                           (infix_mngt bitvec1 bitvec1)
                           bitvec1
                           (t2tb119 k1)
                           (t2tb77 x))
                         (t2tb77 y)))) (width1 c)))))
          (=>
            (forall ((x bitvec) (y bitvec))
              (=>
                (= (length x) (width1 c))
                (=>
                  (= (length y) r1)
                  (= (tb2t77
                       (infix_at
                         bitvec1
                         bitvec1
                         (infix_at
                           (infix_mngt bitvec1 bitvec1)
                           bitvec1
                           (t2tb119 k1)
                           (t2tb77 x))
                         (t2tb77 y))) (tb2t77
                                        (infix_at
                                          bitvec1
                                          bitvec1
                                          (infix_at
                                            (infix_mngt bitvec1 bitvec1)
                                            bitvec1
                                            (t2tb119 k2)
                                            (t2tb77 x))
                                          (t2tb77 y)))))))
            (=>
              (forall ((x bitvec) (y bitvec))
                (=>
                  (= (length x) (width1 c))
                  (=>
                    (= (length y) r1)
                    (= (tb2t84
                         (infix_at
                           angle1
                           bitvec1
                           (infix_at
                             (infix_mngt bitvec1 angle1)
                             bitvec1
                             (t2tb121 a1)
                             (t2tb77 x))
                           (t2tb77 y))) (tb2t84
                                          (infix_at
                                            angle1
                                            bitvec1
                                            (infix_at
                                              (infix_mngt bitvec1 angle1)
                                              bitvec1
                                              (t2tb121 a2)
                                              (t2tb77 x))
                                            (t2tb77 y)))))))
              (=>
                (correct_path_sum_bv1 c r1 k1 a1)
                (correct_path_sum_bv1 c r2 k2 a2)))))))))

;; path_sem_comp
(assert
  (forall ((d circuit) (e circuit) (x (matrix complex)) (y (matrix complex)) (z (matrix complex)))
    (=>
      (is_a_ket_l x (width1 d))
      (=>
        (= (path_sem1 d x) y)
        (=>
          (= (path_sem1 e y) z)
          (=> (= (width1 d) (width1 e)) (= (path_sem1 (infix_mnmn d e) x) z)))))))

;; path_seq
(declare-fun path_seq (circuit
  circuit
  (matrix complex)
  (matrix complex)
  (matrix complex)
  Int) circuit)

;; path_seq'def
(assert
  (forall ((d circuit) (e circuit) (x (matrix complex)) (y (matrix complex)) (z (matrix complex)) (w Int))
    (=>
      (is_a_ket_l x w)
      (=>
        (= (path_sem1 d x) y)
        (=>
          (= (path_sem1 e y) z)
          (=>
            (and (= (width1 d) (width1 e)) (= (width1 e) w))
            (= (path_seq d e x y z w) (infix_mnmn d e))))))))

;; path_seq'spec
(assert
  (forall ((d circuit) (e circuit) (x (matrix complex)) (y (matrix complex)) (z (matrix complex)) (w Int))
    (=>
      (is_a_ket_l x w)
      (=>
        (= (path_sem1 d x) y)
        (=>
          (= (path_sem1 e y) z)
          (=>
            (and (= (width1 d) (width1 e)) (= (width1 e) w))
            (and
              (= (width1 (path_seq d e x y z w)) w)
              (and
                (= (path_sem1 (path_seq d e x y z w) x) z)
                (and
                  (is_a_ket_l z w)
                  (= (path_seq d e x y z w) (infix_mnmn d e)))))))))))

;; path_sem_comp_
(assert
  (forall ((d circuit) (e circuit) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width1 d))
      (=>
        (= (width1 d) (width1 e))
        (= (path_sem1 (infix_mnmn d e) x) (path_sem1 e (path_sem1 d x)))))))

;; sem_comp
(assert
  (forall ((d circuit) (e circuit) (x (matrix complex)) (y (matrix complex)) (z (matrix complex)))
    (=>
      (sem1 d x y)
      (=>
        (sem1 e y z)
        (=> (= (width1 d) (width1 e)) (sem1 (infix_mnmn d e) x z))))))

;; path_sem_cnot_basis
(assert
  (forall ((x (matrix complex)))
    (=>
      (is_a_ket_l x 2)
      (=>
        (is_a_ket_basis_elt x)
        (= (path_sem1 bricks_cnot x) (ite (= (ket_to_int x) 0)
                                       (ket 2 0)
                                       (ite (= (ket_to_int x) 1)
                                         (ket 2 1)
                                         (ite (= (ket_to_int x) 2)
                                           (ket 2 3)
                                           (ket 2 2)))))))))

;; place_kron
(assert
  (forall ((c circuit) (k Int) (n Int) (x (matrix complex)) (y (matrix complex)) (yqt (matrix complex)) (z (matrix complex)))
    (=>
      (<= 0 k)
      (=>
        (<= (+ (width1 c) k) n)
        (=>
          (is_a_ket_l x k)
          (=>
            (is_a_ket_l y (width1 c))
            (=>
              (is_a_ket_l z (- (- n (width1 c)) k))
              (=>
                (= (path_sem1 c y) yqt)
                (= (path_sem1 (place1 c k n) (kronecker x (kronecker y z))) 
                (kronecker
                  x
                  (kronecker yqt z)))))))))))

;; place_width
(assert
  (forall ((c circuit) (k Int) (n Int))
    (=> (<= 0 k) (=> (<= (+ (width1 c) k) n) (= (width1 (place1 c k n)) n)))))

;; fc
(declare-fun fc654 (Int
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((k Int) (x (Array Int Int)) (j Int))
    (= (select (fc654 k x) j) (select x (+ j k)))))

;; place_bv_in
(assert
  (forall ((c circuit) (k Int) (n Int))
    (=>
      (<= 0 k)
      (=>
        (<= (+ (width1 c) k) n)
        (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
          (=>
            (binary_l x n)
            (=>
              (and (<= k i) (< i (+ k (width1 c))))
              (= (basis_ket1 (place1 c k n) x y i) (basis_ket1
                                                     c
                                                     (fc654 k x)
                                                     y
                                                     (- i k))))))))))

;; place_bv_out
(assert
  (forall ((c circuit) (k Int) (n Int))
    (=>
      (<= 0 k)
      (=>
        (<= (+ (width1 c) k) n)
        (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
          (=>
            (binary_l x n)
            (=>
              (and (<= 0 i) (< i n))
              (=>
                (not (and (<= k i) (< i (+ k (width1 c)))))
                (= (basis_ket1 (place1 c k n) x y i) (select x i))))))))))

;; sequence_width
(assert
  (forall ((c circuit) (d circuit))
    (=> (= (width1 c) (width1 d)) (= (width1 (infix_mnmn c d)) (width1 c)))))

;; place_kron_bv
(assert
  (forall ((c circuit) (k Int) (n Int) (bv1 bitvec))
    (=>
      (<= 0 k)
      (=>
        (<= (+ (width1 c) k) n)
        (=>
          (= (length bv1) n)
          (= (path_sem1 (place1 c k n) (bv_to_ket bv1)) (kronecker
                                                          (kronecker
                                                            (bv_to_ket
                                                              (hpart bv1 k))
                                                            (path_sem1
                                                              c
                                                              (bv_to_ket
                                                                (htpart
                                                                  bv1
                                                                  k
                                                                  (width1 c)))))
                                                          (bv_to_ket
                                                            (tpart
                                                              bv1
                                                              (+ k (width1 c)))))))))))

;; place_kron_exp
(assert
  (forall ((c circuit) (k Int) (n Int) (x (matrix complex)) (y (matrix complex)) (z (matrix complex)))
    (=>
      (<= 0 k)
      (=>
        (<= (+ (width1 c) k) n)
        (=>
          (is_a_ket_l x k)
          (=>
            (is_a_ket_l y (width1 c))
            (=>
              (is_a_ket_l z (- (- n (width1 c)) k))
              (= (path_sem1 (place1 c k n) (kronecker x (kronecker y z))) 
              (kronecker
                x
                (kronecker (path_sem1 c y) z))))))))))

;; place_kron_left
(assert
  (forall ((c circuit) (n Int) (y (matrix complex)) (yqt (matrix complex)) (z (matrix complex)))
    (=>
      (<= (width1 c) n)
      (=>
        (is_a_ket_l y (width1 c))
        (=>
          (is_a_ket_l z (- n (width1 c)))
          (=>
            (= (path_sem1 c y) yqt)
            (= (path_sem1 (place1 c 0 n) (kronecker y z)) (kronecker yqt z))))))))

;; place_kron_right
(assert
  (forall ((c circuit) (k Int) (n Int))
    (=>
      (< 0 k)
      (=>
        (= n (+ (width1 c) k))
        (forall ((y (matrix complex)) (x (matrix complex)))
          (=>
            (is_a_ket_l x k)
            (=>
              (is_a_ket_l y (- n k))
              (= (path_sem1 (place1 c k n) (kronecker x y)) (kronecker
                                                              x
                                                              (path_sem1 c y))))))))))

;; place_place
(assert
  (forall ((c circuit) (k Int) (kqt Int) (n Int) (nqt Int) (x bitvec))
    (=>
      (<= 0 k)
      (=>
        (<= (+ (width1 c) k) n)
        (=>
          (<= 0 kqt)
          (=>
            (<= (+ n kqt) nqt)
            (=>
              (= (length x) nqt)
              (= (path_sem1 (place1 (place1 c k n) kqt nqt) (bv_to_ket x)) 
              (path_sem1
                (place1 c (+ k kqt) nqt)
                (bv_to_ket x))))))))))

;; fc
(declare-fun fc655 (Int
  bitvec) (Array Int Int))

;; fc
(declare-fun fc656 (Int
  bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((k Int) (x bitvec) (i Int))
    (= (select (fc655 k x) i) (select (value x) (+ i k)))))

;; fc'def
(assert
  (forall ((k Int) (y bitvec) (i Int))
    (= (select (fc656 k y) i) (select (value y) (+ i k)))))

;; place_get_ket
(assert
  (forall ((c circuit) (k Int) (n Int) (x bitvec) (y bitvec))
    (=>
      (<= 0 k)
      (=>
        (<= (+ (width1 c) k) n)
        (=>
          (= (length x) n)
          (=>
            (= (length y) n)
            (=>
              (= (hpart x k) (hpart y k))
              (=>
                (= (tpart x (+ k (width1 c))) (tpart y (+ k (width1 c))))
                (= (tb2t
                     (get
                       complex1
                       (t2tb65 (path_sem1 (place1 c k n) (bv_to_ket x)))
                       (bv_to_int y)
                       0)) (tb2t
                             (get
                               complex1
                               (t2tb65
                                 (path_sem1
                                   c
                                   (bv_to_ket
                                     (make_bv (fc655 k x) (width1 c)))))
                               (bv_to_int (make_bv (fc656 k y) (width1 c)))
                               0)))))))))))

;; place_get_ket_hpart_null
(assert
  (forall ((c circuit) (k Int) (n Int) (x bitvec) (y bitvec))
    (=>
      (<= 0 k)
      (=>
        (<= (+ (width1 c) k) n)
        (=>
          (= (length x) n)
          (=>
            (= (length y) n)
            (=>
              (not (= (hpart x k) (hpart y k)))
              (= (tb2t
                   (get
                     complex1
                     (t2tb65 (path_sem1 (place1 c k n) (bv_to_ket x)))
                     (bv_to_int y)
                     0)) c_zero))))))))

;; place_get_ket_tpart_null
(assert
  (forall ((c circuit) (k Int) (n Int) (x bitvec) (y bitvec))
    (=>
      (<= 0 k)
      (=>
        (<= (+ (width1 c) k) n)
        (=>
          (= (length x) n)
          (=>
            (= (length y) n)
            (=>
              (not (= (tpart x (+ k (width1 c))) (tpart y (+ k (width1 c)))))
              (= (tb2t
                   (get
                     complex1
                     (t2tb65 (path_sem1 (place1 c k n) (bv_to_ket x)))
                     (bv_to_int y)
                     0)) c_zero))))))))

;; place_hadamard
(declare-fun place_hadamard1 (Int
  Int) circuit)

;; place_hadamard'def
(assert
  (forall ((k Int) (n Int))
    (=>
      (and (<= 0 k) (< k n))
      (= (place_hadamard1 k n) (place1 hadamard1 k n)))))

;; place_hadamard'spec
(assert
  (forall ((k Int) (n Int))
    (=>
      (and (<= 0 k) (< k n))
      (and
        (= (range1 (place_hadamard1 k n)) 1)
        (and
          (= (size1 (place_hadamard1 k n)) 1)
          (and
            (= (width1 (place_hadamard1 k n)) n)
            (and
              (= (ancillas1 (place_hadamard1 k n)) 0)
              (and
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (forall ((i Int))
                    (=>
                      (and (<= 0 i) (< i n))
                      (= (basis_ket1 (place_hadamard1 k n) x y i) (ite (= i k)
                                                                    (select y 0)
                                                                    (select x i))))))
                (and
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (= (ang_ind1 (place_hadamard1 k n) x y) (infix_sldtsl
                                                              (* (select x k) (select y 0))
                                                              1)))
                  (and
                    (forall ((m Int))
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (=>
                          (<= 1 m)
                          (= (ang_ind1 (place_hadamard1 k n) x y) (infix_sldtsl
                                                                    (* (* (select x k) (select y 0)) 
                                                                    (power
                                                                    2
                                                                    (- m 1)))
                                                                    m)))))
                    (forall ((m Int))
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (=>
                          (<= 1 m)
                          (= (ang_ind1 (place_hadamard1 k n) x y) (infix_sldtsl
                                                                    (- (* (* (select x k) (select y 0)) 
                                                                    (power
                                                                    2
                                                                    (- m 1))))
                                                                    m)))))))))))))))

;; place_hadamard_bv
(declare-fun place_hadamard_bv1 (Int
  Int) circuit)

;; place_hadamard_bv'def
(assert
  (forall ((k Int) (n Int))
    (=>
      (and (<= 0 k) (< k n))
      (= (place_hadamard_bv1 k n) (place_hadamard1 k n)))))

;; fc
(declare-fun fc657 (Int
  bitvec
  bitvec) (Array Int Int))

;; fc
(declare-fun fc658 (Int
  Int) (Array bitvec (Array bitvec bitvec)))

;; fc
(declare-fun fc659 (Int
  Int) (Array bitvec (Array bitvec angle)))

;; fc'def
(assert
  (forall ((k Int) (x bitvec) (y bitvec) (i Int))
    (= (select (fc657 k x y) i) (ite (= i k)
                                  (select (value y) 0)
                                  (select (value x) i)))))

;; fc'def
(assert
  (forall ((k Int) (n Int) (x bitvec) (y bitvec))
    (= (tb2t77
         (infix_at
           bitvec1
           bitvec1
           (infix_at
             (infix_mngt bitvec1 bitvec1)
             bitvec1
             (t2tb119 (fc658 k n))
             (t2tb77 x))
           (t2tb77 y))) (make_bv (fc657 k x y) n))))

;; fc'def
(assert
  (forall ((k Int) (n Int) (x bitvec) (y bitvec))
    (= (tb2t84
         (infix_at
           angle1
           bitvec1
           (infix_at
             (infix_mngt bitvec1 angle1)
             bitvec1
             (t2tb121 (fc659 k n))
             (t2tb77 x))
           (t2tb77 y))) (infix_sldtsl
                          (* (* (select (value x) k) (select (value y) 0)) 
                          (power
                            2
                            (- n 1)))
                          n))))

;; place_hadamard_bv'spec
(assert
  (forall ((k Int) (n Int))
    (=>
      (and (<= 0 k) (< k n))
      (and
        (= (range1 (place_hadamard_bv1 k n)) 1)
        (and
          (= (width1 (place_hadamard_bv1 k n)) n)
          (and
            (= (size1 (place_hadamard_bv1 k n)) 1)
            (and
              (= (ancillas1 (place_hadamard_bv1 k n)) 0)
              (and
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (forall ((i Int))
                    (=>
                      (and (<= 0 i) (< i n))
                      (= (basis_ket1 (place_hadamard_bv1 k n) x y i) 
                      (ite (= i k)
                        (select y 0)
                        (select x i))))))
                (and
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (= (ang_ind1 (place_hadamard_bv1 k n) x y) (infix_sldtsl
                                                                 (* (select x k) (select y 0))
                                                                 1)))
                  (and
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (forall ((m Int))
                        (=>
                          (<= 1 m)
                          (= (ang_ind1 (place_hadamard_bv1 k n) x y) 
                          (infix_sldtsl
                            (* (* (select x k) (select y 0)) (power
                                                               2
                                                               (- m 1)))
                            m)))))
                    (correct_path_sum_bv1
                      (place_hadamard_bv1 k n)
                      1
                      (fc658 k n)
                      (fc659 k n))))))))))))

;; path_cont
(assert
  (forall ((c circuit) (co Int) (k Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 k) (<= k (- n (width1 c))))
        (=>
          (=> (<= k co) (<= (+ k (width1 c)) co))
          (and
            (forall ((bv1 bitvec))
              (=>
                (= (length bv1) n)
                (=>
                  (= (select (value bv1) co) 0)
                  (= (path_sem1 (cont1 c co k n) (bv_to_ket bv1)) (bv_to_ket
                                                                    bv1)))))
            (forall ((bv1 bitvec))
              (=>
                (= (length bv1) n)
                (=>
                  (= (select (value bv1) co) 1)
                  (= (path_sem1 (cont1 c co k n) (bv_to_ket bv1)) (path_sem1
                                                                    (place1
                                                                    c
                                                                    k
                                                                    n)
                                                                    (bv_to_ket
                                                                    bv1))))))))))))

;; cont_width
(assert
  (forall ((c circuit) (co Int) (k Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 k) (<= k (- n (width1 c))))
        (=>
          (=> (<= k co) (<= (+ k (width1 c)) co))
          (= (width1 (cont1 c co k n)) n))))))

;; path_cont_ketz
(assert
  (forall ((c circuit) (co Int) (k Int) (n Int) (x (matrix complex)))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 k) (<= k (- n (width1 c))))
        (=>
          (=> (<= k co) (<= (+ k (width1 c)) co))
          (=>
            (is_a_ket_l x n)
            (=>
              (is_a_ket_basis_elt x)
              (=>
                (= (select (value (ket_to_bv x)) co) 0)
                (= (path_sem1 (cont1 c co k n) x) x)))))))))

;; path_cont_keto
(assert
  (forall ((c circuit) (co Int) (k Int) (n Int) (x (matrix complex)))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 k) (<= k (- n (width1 c))))
        (=>
          (=> (<= k co) (<= (+ k (width1 c)) co))
          (=>
            (is_a_ket_l x n)
            (=>
              (is_a_ket_basis_elt x)
              (=>
                (= (select (value (ket_to_bv x)) co) 1)
                (= (path_sem1 (cont1 c co k n) x) (path_sem1
                                                    (place1 c k n)
                                                    x))))))))))

;; path_cont_ketz_gen
(assert
  (forall ((c circuit) (co Int) (k Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 k) (<= k (- n (width1 c))))
        (=>
          (=> (<= k co) (<= (+ k (width1 c)) co))
          (forall ((x (matrix complex)))
            (=>
              (is_a_ket_l x n)
              (=>
                (is_a_ket_basis_elt x)
                (=>
                  (= (select (value (ket_to_bv x)) co) 0)
                  (= (path_sem1 (cont1 c co k n) x) x))))))))))

;; path_cont_keto_gen
(assert
  (forall ((c circuit) (co Int) (k Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 k) (<= k (- n (width1 c))))
        (=>
          (=> (<= k co) (<= (+ k (width1 c)) co))
          (forall ((x (matrix complex)))
            (=>
              (is_a_ket_l x n)
              (=>
                (is_a_ket_basis_elt x)
                (=>
                  (= (select (value (ket_to_bv x)) co) 1)
                  (= (path_sem1 (cont1 c co k n) x) (path_sem1
                                                      (place1 c k n)
                                                      x)))))))))))

;; cont_kron_left_bv_to_ket
(assert
  (forall ((c circuit) (n Int) (x (matrix complex)))
    (=>
      (and (<= 0 (width1 c)) (= (width1 c) (- n 1)))
      (=>
        (is_a_ket_l x (width1 c))
        (and
          (forall ((y bitvec))
            (=>
              (= (length y) 1)
              (=>
                (= (select (value y) 0) 0)
                (= (path_sem1
                     (cont1 c (- n 1) 0 n)
                     (kronecker x (bv_to_ket y))) (kronecker x (bv_to_ket y))))))
          (forall ((y bitvec))
            (=>
              (= (length y) 1)
              (=>
                (= (select (value y) 0) 1)
                (= (path_sem1
                     (cont1 c (- n 1) 0 n)
                     (kronecker x (bv_to_ket y))) (kronecker
                                                    (path_sem1 c x)
                                                    (bv_to_ket y)))))))))))

;; place_kron_left_path
(assert
  (forall ((c circuit) (n Int))
    (=>
      (< (width1 c) n)
      (forall ((x (matrix complex)) (y (matrix complex)))
        (=>
          (is_a_ket_l x (width1 c))
          (=>
            (is_a_ket_l y (- n (width1 c)))
            (= (path_sem1 (place1 c 0 n) (kronecker x y)) (kronecker
                                                            (path_sem1 c x)
                                                            y))))))))

;; place_kron_left_sem
(assert
  (forall ((c circuit) (n Int))
    (=>
      (< (width1 c) n)
      (forall ((x (matrix complex)) (y (matrix complex)) (z (matrix complex)))
        (=>
          (is_a_ket_l y (- n (width1 c)))
          (=>
            (sem1 c x z)
            (sem1 (place1 c 0 n) (kronecker x y) (kronecker z y))))))))

;; cont_kron_pat_right
(assert
  (forall ((c circuit) (co Int) (k Int) (n Int) (y (matrix complex)))
    (=>
      (and (<= 0 co) (< co k))
      (=>
        (= n (+ k (width1 c)))
        (=>
          (is_a_ket_l y (width1 c))
          (and
            (forall ((x (matrix complex)))
              (=>
                (is_a_ket_basis_elt x)
                (=>
                  (is_a_ket_l x k)
                  (=>
                    (= (select (value (ket_to_bv x)) co) 0)
                    (= (path_sem1 (cont1 c co k n) (kronecker x y)) (kronecker
                                                                    x
                                                                    y))))))
            (forall ((x (matrix complex)))
              (=>
                (is_a_ket_basis_elt x)
                (=>
                  (is_a_ket_l x k)
                  (=>
                    (= (select (value (ket_to_bv x)) co) 1)
                    (= (path_sem1 (cont1 c co k n) (kronecker x y)) (kronecker
                                                                    x
                                                                    (path_sem1
                                                                    c
                                                                    y)))))))))))))

;; cont_kron_zero
(assert
  (forall ((c circuit) (co Int) (k Int) (n Int) (x (matrix complex)) (y (matrix complex)) (z (matrix complex)))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 k) (<= k (- n (width1 c))))
        (=>
          (=> (<= k co) (<= (+ k (width1 c)) co))
          (=>
            (is_a_ket_l x k)
            (=>
              (is_a_ket_l y (width1 c))
              (=>
                (is_a_ket_l z (- (- n k) (width1 c)))
                (=>
                  (is_a_ket_basis_elt x)
                  (=>
                    (is_a_ket_basis_elt z)
                    (=>
                      (=> (< co k) (= (select (value (ket_to_bv x)) co) 0))
                      (=>
                        (=>
                          (<= k co)
                          (= (select (value (ket_to_bv z)) (- (- co k) 
                          (width1
                            c))) 0))
                        (= (path_sem1
                             (cont1 c co k n)
                             (kronecker (kronecker x y) z)) (kronecker
                                                              (kronecker x y)
                                                              z))))))))))))))

;; cont_kron_one
(assert
  (forall ((c circuit) (co Int) (k Int) (n Int) (x (matrix complex)) (y (matrix complex)) (z (matrix complex)))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 k) (<= k (- n (width1 c))))
        (=>
          (=> (<= k co) (<= (+ k (width1 c)) co))
          (=>
            (is_a_ket_l x k)
            (=>
              (is_a_ket_l y (width1 c))
              (=>
                (is_a_ket_l z (- (- n k) (width1 c)))
                (=>
                  (is_a_ket_basis_elt x)
                  (=>
                    (is_a_ket_basis_elt z)
                    (=>
                      (=> (< co k) (= (select (value (ket_to_bv x)) co) 1))
                      (=>
                        (=>
                          (<= k co)
                          (= (select (value (ket_to_bv z)) (- (- co k) 
                          (width1
                            c))) 1))
                        (= (path_sem1
                             (cont1 c co k n)
                             (kronecker (kronecker x y) z)) (path_sem1
                                                              (place1 c k n)
                                                              (kronecker
                                                                (kronecker
                                                                  x
                                                                  y)
                                                                z)))))))))))))))

;; cont_kron_pat_right_gen
(assert
  (forall ((circ circuit) (c Int) (k Int) (n Int))
    (=>
      (and (<= 0 c) (< c k))
      (=>
        (= n (+ k (width1 circ)))
        (and
          (forall ((y (matrix complex)))
            (forall ((x bitvec))
              (=>
                (is_a_ket_l y (width1 circ))
                (=>
                  (= (length x) k)
                  (=>
                    (= (select (value x) c) 0)
                    (= (path_sem1
                         (cont1 circ c k n)
                         (kronecker (bv_to_ket x) y)) (kronecker
                                                        (bv_to_ket x)
                                                        y)))))))
          (forall ((y (matrix complex)))
            (forall ((x bitvec))
              (=>
                (is_a_ket_l y (width1 circ))
                (=>
                  (= (length x) k)
                  (=>
                    (= (select (value x) c) 1)
                    (= (path_sem1
                         (cont1 circ c k n)
                         (kronecker (bv_to_ket x) y)) (kronecker
                                                        (bv_to_ket x)
                                                        (path_sem1 circ y)))))))))))))

;; cont_kron_pat_right_gen_ket
(assert
  (forall ((circ circuit) (c Int) (k Int) (n Int))
    (=>
      (and (<= 0 c) (< c k))
      (=>
        (= n (+ k (width1 circ)))
        (and
          (forall ((x (matrix complex)) (y (matrix complex)))
            (=>
              (is_a_ket_l y (width1 circ))
              (=>
                (is_a_ket_l x k)
                (=>
                  (is_a_ket_basis_elt x)
                  (=>
                    (= (select (value (ket_to_bv x)) c) 0)
                    (= (path_sem1 (cont1 circ c k n) (kronecker x y)) 
                    (kronecker
                      x
                      y)))))))
          (forall ((x (matrix complex)) (y (matrix complex)))
            (=>
              (is_a_ket_l y (width1 circ))
              (=>
                (is_a_ket_l x k)
                (=>
                  (is_a_ket_basis_elt x)
                  (=>
                    (= (select (value (ket_to_bv x)) c) 1)
                    (= (path_sem1 (cont1 circ c k n) (kronecker x y)) 
                    (kronecker
                      x
                      (path_sem1 circ y)))))))))))))

;; cont_last_qbit_kron
(declare-fun cont_last_qbit_kron (circuit) circuit)

;; cont_last_qbit_kron'def
(assert
  (forall ((c circuit))
    (= (cont_last_qbit_kron c) (cont1 c (width1 c) 0 (+ (width1 c) 1)))))

;; cont_last_qbit_kron'spec
(assert
  (forall ((c circuit))
    (and
      (<= (size1 (cont_last_qbit_kron c)) (* (size1 c) cont_size1))
      (and
        (= (ancillas1 (cont_last_qbit_kron c)) (ancillas1 c))
        (and
          (= (range1 (cont_last_qbit_kron c)) (range1 c))
          (and
            (= (width1 (cont_last_qbit_kron c)) (+ (width1 c) 1))
            (and
              (forall ((x (matrix complex)) (y (matrix complex)))
                (=>
                  (sem1 c x y)
                  (sem1
                    (cont_last_qbit_kron c)
                    (kronecker x (ket 1 1))
                    (kronecker y (ket 1 1)))))
              (forall ((x (matrix complex)))
                (=>
                  (is_a_ket_l x (width1 c))
                  (sem1
                    (cont_last_qbit_kron c)
                    (kronecker x (ket 1 0))
                    (kronecker x (ket 1 0))))))))))))

;; cont_last_qbit_kron_path
(declare-fun cont_last_qbit_kron_path (circuit) circuit)

;; cont_last_qbit_kron_path'def
(assert
  (forall ((c circuit))
    (= (cont_last_qbit_kron_path c) (cont1 c (width1 c) 0 (+ (width1 c) 1)))))

;; cont_last_qbit_kron_path'spec
(assert
  (forall ((c circuit))
    (and
      (<= (size1 (cont_last_qbit_kron_path c)) (* (size1 c) cont_size1))
      (and
        (= (ancillas1 (cont_last_qbit_kron_path c)) (ancillas1 c))
        (and
          (= (range1 (cont_last_qbit_kron_path c)) (range1 c))
          (and
            (= (width1 (cont_last_qbit_kron_path c)) (+ (width1 c) 1))
            (and
              (forall ((x (matrix complex)) (y (matrix complex)))
                (=>
                  (is_a_ket_l x (width1 c))
                  (=>
                    (= (path_sem1 c x) y)
                    (= (path_sem1
                         (cont_last_qbit_kron_path c)
                         (kronecker x (ket 1 1))) (kronecker y (ket 1 1))))))
              (forall ((x (matrix complex)))
                (=>
                  (is_a_ket_l x (width1 c))
                  (= (path_sem1
                       (cont_last_qbit_kron_path c)
                       (kronecker x (ket 1 0))) (kronecker x (ket 1 0))))))))))))

;; seq_diag
(declare-fun seq_diag (circuit
  circuit) circuit)

;; seq_diag'def
(assert
  (forall ((d circuit) (e circuit))
    (=>
      (= (width1 d) (width1 e))
      (=>
        (= (range1 d) 0)
        (=>
          (= (range1 e) 0)
          (=>
            (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
              (=>
                (binary_l x (width1 d))
                (=>
                  (and (<= 0 i) (< i (width1 d)))
                  (= (basis_ket1 d x y i) (select x i)))))
            (=>
              (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
                (=>
                  (binary_l x (width1 e))
                  (=>
                    (and (<= 0 i) (< i (width1 e)))
                    (= (basis_ket1 e x y i) (select x i)))))
              (= (seq_diag d e) (infix_mnmn d e)))))))))

;; seq_diag'spec
(assert
  (forall ((d circuit) (e circuit))
    (=>
      (= (width1 d) (width1 e))
      (=>
        (= (range1 d) 0)
        (=>
          (= (range1 e) 0)
          (=>
            (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
              (=>
                (binary_l x (width1 d))
                (=>
                  (and (<= 0 i) (< i (width1 d)))
                  (= (basis_ket1 d x y i) (select x i)))))
            (=>
              (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
                (=>
                  (binary_l x (width1 e))
                  (=>
                    (and (<= 0 i) (< i (width1 e)))
                    (= (basis_ket1 e x y i) (select x i)))))
              (and
                (= (size1 (seq_diag d e)) (+ (size1 d) (size1 e)))
                (and
                  (= (ancillas1 (seq_diag d e)) (max
                                                  (ancillas1 d)
                                                  (ancillas1 e)))
                  (and
                    (= (pre1 (seq_diag d e)) (Sequence1 (pre1 d) (pre1 e)))
                    (and
                      (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
                        (=>
                          (binary_l x (width1 d))
                          (=>
                            (and (<= 0 i) (< i (width1 d)))
                            (= (basis_ket1 (seq_diag d e) x y i) (select x i)))))
                      (and
                        (= (width1 (seq_diag d e)) (width1 d))
                        (and
                          (= (range1 (seq_diag d e)) 0)
                          (forall ((x (Array Int Int)) (y (Array Int Int)))
                            (=>
                              (binary_l x (width1 d))
                              (= (ang_ind1 (seq_diag d e) x y) (ang_add
                                                                 (ang_ind1
                                                                   d
                                                                   x
                                                                   y)
                                                                 (ang_ind1
                                                                   e
                                                                   x
                                                                   y))))))))))))))))))

;; cont_diag
(declare-fun cont_diag (circuit
  Int
  Int
  Int) circuit)

;; cont_diag'def
(assert
  (forall ((c circuit) (co Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 t1) (<= t1 (- n (width1 c))))
        (=>
          (=> (<= t1 co) (<= (+ t1 (width1 c)) co))
          (=>
            (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
              (=>
                (binary_l x (width1 c))
                (=>
                  (and (<= 0 i) (< i (width1 c)))
                  (= (basis_ket1 c x y i) (select x i)))))
            (=> (= (range1 c) 0) (= (cont_diag c co t1 n) (cont1 c co t1 n)))))))))

;; fc
(declare-fun fc660 (Int
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((t1 Int) (x (Array Int Int)) (j Int))
    (= (select (fc660 t1 x) j) (select x (+ j t1)))))

;; cont_diag'spec
(assert
  (forall ((c circuit) (co Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 t1) (<= t1 (- n (width1 c))))
        (=>
          (=> (<= t1 co) (<= (+ t1 (width1 c)) co))
          (=>
            (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
              (=>
                (binary_l x (width1 c))
                (=>
                  (and (<= 0 i) (< i (width1 c)))
                  (= (basis_ket1 c x y i) (select x i)))))
            (=>
              (= (range1 c) 0)
              (and
                (<= (size1 (cont_diag c co t1 n)) (* cont_size1 (size1 c)))
                (and
                  (= (ancillas1 (cont_diag c co t1 n)) (ancillas1 c))
                  (and
                    (= (pre1 (cont_diag c co t1 n)) (Cont (pre1 c) co t1 n))
                    (and
                      (= (width1 (cont_diag c co t1 n)) n)
                      (and
                        (= (range1 (cont_diag c co t1 n)) 0)
                        (and
                          (forall ((x (Array Int Int)) (y (Array Int Int)))
                            (=>
                              (binary_l x n)
                              (forall ((i Int))
                                (= (basis_ket1 (cont_diag c co t1 n) x y i) (select x i)))))
                          (forall ((x (Array Int Int)) (y (Array Int Int)))
                            (=>
                              (binary_l x n)
                              (= (ang_ind1 (cont_diag c co t1 n) x y) 
                              (ang_mult_int
                                (ang_ind1 c (fc660 t1 x) y)
                                (select x co))))))))))))))))))

;; place_diag
(declare-fun place_diag (circuit
  Int
  Int) circuit)

;; place_diag'def
(assert
  (forall ((c circuit) (t1 Int) (n Int))
    (=>
      (<= 0 t1)
      (=>
        (<= (+ t1 (width1 c)) n)
        (=>
          (= (range1 c) 0)
          (=>
            (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
              (=>
                (binary_l x (width1 c))
                (=>
                  (and (<= 0 i) (< i (width1 c)))
                  (= (basis_ket1 c x y i) (select x i)))))
            (= (place_diag c t1 n) (place1 c t1 n))))))))

;; fc
(declare-fun fc661 (Int
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((t1 Int) (x (Array Int Int)) (j Int))
    (= (select (fc661 t1 x) j) (select x (+ j t1)))))

;; place_diag'spec
(assert
  (forall ((c circuit) (t1 Int) (n Int))
    (=>
      (<= 0 t1)
      (=>
        (<= (+ t1 (width1 c)) n)
        (=>
          (= (range1 c) 0)
          (=>
            (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
              (=>
                (binary_l x (width1 c))
                (=>
                  (and (<= 0 i) (< i (width1 c)))
                  (= (basis_ket1 c x y i) (select x i)))))
            (and
              (= (ancillas1 (place_diag c t1 n)) (ancillas1 c))
              (and
                (= (size1 (place_diag c t1 n)) (size1 c))
                (and
                  (= (pre1 (place_diag c t1 n)) (Place (pre1 c) t1 n))
                  (and
                    (= (width1 (place_diag c t1 n)) n)
                    (and
                      (= (range1 (place_diag c t1 n)) 0)
                      (and
                        (forall ((x (Array Int Int)) (y (Array Int Int)))
                          (forall ((i Int))
                            (=>
                              (binary_l x n)
                              (= (basis_ket1 (place_diag c t1 n) x y i) (select x i)))))
                        (forall ((x (Array Int Int)) (y (Array Int Int)))
                          (=>
                            (binary_l x n)
                            (= (ang_ind1 (place_diag c t1 n) x y) (ang_ind1
                                                                    c
                                                                    (fc661
                                                                    t1
                                                                    x)
                                                                    y))))))))))))))))

;; seq_diag_right
(declare-fun seq_diag_right (circuit
  circuit) circuit)

;; seq_diag_right'def
(assert
  (forall ((d circuit) (e circuit))
    (=>
      (= (width1 d) (width1 e))
      (=>
        (= (range1 e) 0)
        (=>
          (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
            (=>
              (and (<= 0 i) (< i (width1 e)))
              (=>
                (binary_l x (width1 e))
                (= (basis_ket1 e x y i) (select x i)))))
          (= (seq_diag_right d e) (infix_mnmn d e)))))))

;; fc
(declare-fun fc662 (circuit
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((d circuit) (y (Array Int Int)) (k Int))
    (= (select (fc662 d y) k) (select y (+ k (range1 d))))))

;; seq_diag_right'spec
(assert
  (forall ((d circuit) (e circuit))
    (=>
      (= (width1 d) (width1 e))
      (=>
        (= (range1 e) 0)
        (=>
          (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
            (=>
              (and (<= 0 i) (< i (width1 e)))
              (=>
                (binary_l x (width1 e))
                (= (basis_ket1 e x y i) (select x i)))))
          (and
            (= (size1 (seq_diag_right d e)) (+ (size1 d) (size1 e)))
            (and
              (= (ancillas1 (seq_diag_right d e)) (max
                                                    (ancillas1 d)
                                                    (ancillas1 e)))
              (and
                (= (pre1 (seq_diag_right d e)) (Sequence1 (pre1 d) (pre1 e)))
                (and
                  (= (width1 (seq_diag_right d e)) (width1 d))
                  (and
                    (= (range1 (seq_diag_right d e)) (range1 d))
                    (and
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (forall ((i Int))
                          (=>
                            (binary_l x (width1 (seq_diag_right d e)))
                            (=>
                              (binary_l y (range1 (seq_diag_right d e)))
                              (=>
                                (and (<= 0 i) (< i (width1 d)))
                                (= (basis_ket1 (seq_diag_right d e) x y i) 
                                (basis_ket1
                                  d
                                  x
                                  y
                                  i)))))))
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (=>
                          (binary_l x (width1 (seq_diag_right d e)))
                          (=>
                            (binary_l y (range1 (seq_diag_right d e)))
                            (= (ang_ind1 (seq_diag_right d e) x y) (ang_add
                                                                    (ang_ind1
                                                                    d
                                                                    x
                                                                    y)
                                                                    (ang_ind1
                                                                    e
                                                                    (select (select (select 
                                                                    basis_ket_closure1 d) x) y)
                                                                    (fc662
                                                                    d
                                                                    y))))))))))))))))))

;; seq_diag_left
(declare-fun seq_diag_left (circuit
  circuit) circuit)

;; seq_diag_left'def
(assert
  (forall ((d circuit) (e circuit))
    (=>
      (= (width1 d) (width1 e))
      (=>
        (= (range1 d) 0)
        (=>
          (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
            (=>
              (binary_l x (width1 e))
              (=>
                (and (<= 0 i) (< i (width1 e)))
                (= (basis_ket1 d x y i) (select x i)))))
          (= (seq_diag_left d e) (infix_mnmn d e)))))))

;; seq_diag_left'spec
(assert
  (forall ((d circuit) (e circuit))
    (=>
      (= (width1 d) (width1 e))
      (=>
        (= (range1 d) 0)
        (=>
          (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
            (=>
              (binary_l x (width1 e))
              (=>
                (and (<= 0 i) (< i (width1 e)))
                (= (basis_ket1 d x y i) (select x i)))))
          (and
            (= (size1 (seq_diag_left d e)) (+ (size1 d) (size1 e)))
            (and
              (= (ancillas1 (seq_diag_left d e)) (max
                                                   (ancillas1 d)
                                                   (ancillas1 e)))
              (and
                (= (pre1 (seq_diag_left d e)) (Sequence1 (pre1 d) (pre1 e)))
                (and
                  (= (width1 (seq_diag_left d e)) (width1 d))
                  (and
                    (= (range1 (seq_diag_left d e)) (range1 e))
                    (and
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (forall ((i Int))
                          (=>
                            (binary_l x (width1 (seq_diag_left d e)))
                            (=>
                              (and (<= 0 i) (< i (width1 d)))
                              (= (basis_ket1 (seq_diag_left d e) x y i) 
                              (basis_ket1
                                e
                                x
                                y
                                i))))))
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (=>
                          (binary_l x (width1 (seq_diag_left d e)))
                          (= (ang_ind1 (seq_diag_left d e) x y) (ang_add
                                                                  (ang_ind1
                                                                    d
                                                                    x
                                                                    y)
                                                                  (ang_ind1
                                                                    e
                                                                    x
                                                                    y))))))))))))))))

;; path_sem_diag
(assert
  (forall ((d circuit) (x bitvec))
    (=>
      (= (length x) (width1 d))
      (=>
        (= (range1 d) 0)
        (=>
          (forall ((x1 (Array Int Int)) (y (Array Int Int)) (i Int))
            (=>
              (binary_l x1 (width1 d))
              (=>
                (and (<= 0 i) (< i (width1 d)))
                (= (basis_ket1 d x1 y i) (select x1 i)))))
          (= (path_sem1 d (bv_to_ket x)) (infix_asdtdt
                                           (ang_exp
                                             (ang_ind1 d (value x) identity2))
                                           (bv_to_ket x))))))))

;; path_sem_diag_basis
(assert
  (forall ((d circuit) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width1 d))
      (=>
        (is_a_ket_basis_elt x)
        (=>
          (= (range1 d) 0)
          (=>
            (forall ((x1 (Array Int Int)) (y (Array Int Int)) (i Int))
              (=>
                (binary_l x1 (width1 d))
                (=>
                  (and (<= 0 i) (< i (width1 d)))
                  (= (basis_ket1 d x1 y i) (select x1 i)))))
            (= (path_sem1 d x) (infix_asdtdt
                                 (ang_exp
                                   (ang_ind1
                                     d
                                     (value (ket_to_bv x))
                                     identity2))
                                 x))))))))

;; path_sem_diag_apply
(assert
  (forall ((d circuit) (x bitvec) (a complex))
    (=>
      (= (length x) (width1 d))
      (=>
        (= (range1 d) 0)
        (=>
          (forall ((x1 (Array Int Int)) (y (Array Int Int)) (i Int))
            (=>
              (binary_l x1 (width1 d))
              (=>
                (and (<= 0 i) (< i (width1 d)))
                (= (basis_ket1 d x1 y i) (select x1 i)))))
          (=>
            (forall ((y bitvec))
              (=>
                (= (length y) 0)
                (= (ang_exp (ang_ind1 d (value x) (value y))) a)))
            (= (path_sem1 d (bv_to_ket x)) (infix_asdtdt a (bv_to_ket x)))))))))

;; m_skip
(declare-fun m_skip (Int) circuit)

;; m_skip'def
(assert
  (forall ((k Int))
    (=>
      (< 0 k)
      (ite (= k 1)
        (= (m_skip k) skip)
        (= (m_skip k) (infix_slsl (m_skip (- k 1)) skip))))))

;; m_skip'spec
(assert
  (forall ((k Int))
    (=>
      (< 0 k)
      (and
        (= (size1 (m_skip k)) 0)
        (and
          (= (unwire (m_skip k)) (ids k))
          (and
            (= (ancillas1 (m_skip k)) 0)
            (and
              (= (size1 (m_skip k)) 0)
              (and
                (= (range1 (m_skip k)) 0)
                (and
                  (= (width1 (m_skip k)) k)
                  (and
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (forall ((i Int))
                        (= (basis_ket1 (m_skip k) x y i) (select x i))))
                    (and
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (= (ang_ind1 (m_skip k) x y) (infix_sldtsl 1 0)))
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (forall ((k1 Int))
                          (= (ang_ind1 (m_skip k) x y) (infix_sldtsl 0 k1)))))))))))))))

;; m_skip_path_sem
(assert
  (forall ((k Int) (x (matrix complex)))
    (=> (< 0 k) (=> (is_a_ket_l x k) (= (path_sem1 (m_skip k) x) x)))))

;; permutation_circuit_pre
(declare-fun permutation_circuit_pre1 (Int
  Int
  (Array Int Int)) circuit)

;; permutation_circuit_pre'spec
(assert
  (forall ((k Int) (n Int) (f (Array Int Int)))
    (=>
      (and (<= 0 k) (< k n))
      (=>
        (p_bijective1 f (to_fset 0 n) (to_fset 0 n))
        (and
          (= (unwire (permutation_circuit_pre1 k n f)) (permutation_circuit_pre
                                                         k
                                                         n
                                                         f))
          (and
            (= (width1 (permutation_circuit_pre1 k n f)) n)
            (and
              (<= (size1 (permutation_circuit_pre1 k n f)) (- n k))
              (and
                (= (ancillas1 (permutation_circuit_pre1 k n f)) 0)
                (and
                  (= (range1 (permutation_circuit_pre1 k n f)) 0)
                  (and
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (= (ang_ind1 (permutation_circuit_pre1 k n f) x y) 
                      (ang_ind
                        (permutation_circuit_pre k n f)
                        x
                        y)))
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (forall ((i Int))
                        (=>
                          (and (<= 0 i) (< i n))
                          (= (basis_ket1
                               (permutation_circuit_pre1 k n f)
                               x
                               y
                               i) (basis_ket
                                    (permutation_circuit_pre k n f)
                                    x
                                    y
                                    i)))))))))))))))

;; permutation_circuit
(declare-fun permutation_circuit1 (Int
  (Array Int Int)) circuit)

;; permutation_circuit'def
(assert
  (forall ((n Int) (f (Array Int Int)))
    (=>
      (< 0 n)
      (=>
        (p_bijective1 f (to_fset 0 n) (to_fset 0 n))
        (= (permutation_circuit1 n f) (permutation_circuit_pre1 0 n f))))))

;; fc
(declare-fun fc663 ((Array Int Int)
  bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (x bitvec) (i Int))
    (= (select (fc663 f x) i) (select (value x) (select f i)))))

;; permutation_circuit'spec
(assert
  (forall ((n Int) (f (Array Int Int)))
    (=>
      (< 0 n)
      (=>
        (p_bijective1 f (to_fset 0 n) (to_fset 0 n))
        (and
          (= (unwire (permutation_circuit1 n f)) (permutation_circuit n f))
          (and
            (= (width1 (permutation_circuit1 n f)) n)
            (and
              (<= (size1 (permutation_circuit1 n f)) n)
              (and
                (= (ancillas1 (permutation_circuit1 n f)) 0)
                (and
                  (= (range1 (permutation_circuit1 n f)) 0)
                  (and
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (= (ang_ind1 (permutation_circuit1 n f) x y) ang_zero))
                    (and
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (forall ((i Int))
                          (=>
                            (and (<= 0 i) (< i n))
                            (= (basis_ket1 (permutation_circuit1 n f) x y i) (select x (select f i))))))
                      (forall ((x bitvec))
                        (=>
                          (= (length x) n)
                          (= (path_sem1
                               (permutation_circuit1 n f)
                               (bv_to_ket x)) (bv_to_ket
                                                (make_bv (fc663 f x) n))))))))))))))))

;; gen_phase
(declare-fun gen_phase (Int
  Int) circuit)

;; gen_phase'def
(assert
  (forall ((k Int) (n Int))
    (=> (< 0 n) (=> (<= 0 k) (= (gen_phase k n) (place1 (phase1 k) 0 n))))))

;; gen_phase'spec
(assert
  (forall ((k Int) (n Int))
    (=>
      (< 0 n)
      (=>
        (<= 0 k)
        (and
          (= (size1 (gen_phase k n)) 1)
          (and
            (= (range1 (gen_phase k n)) 0)
            (and
              (= (width1 (gen_phase k n)) n)
              (and
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (forall ((i Int))
                    (= (basis_ket1 (gen_phase k n) x y i) (select x i))))
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (= (ang_ind1 (gen_phase k n) x y) (infix_sldtsl 1 k)))))))))))

;; crz
(declare-fun crz (Int
  Int
  Int
  Int) circuit)

;; crz'def
(assert
  (forall ((c Int) (t1 Int) (k Int) (n Int))
    (=>
      (and (<= 0 c) (< c n))
      (=>
        (and (<= 0 t1) (< t1 n))
        (=> (not (= c t1)) (= (crz c t1 k n) (cont1 (rzp k) c t1 n)))))))

;; crz'spec
(assert
  (forall ((c Int) (t1 Int) (k Int) (n Int))
    (=>
      (and (<= 0 c) (< c n))
      (=>
        (and (<= 0 t1) (< t1 n))
        (=>
          (not (= c t1))
          (and
            (= (width1 (crz c t1 k n)) n)
            (and
              (= (size1 (crz c t1 k n)) cont_size1)
              (and
                (= (range1 (crz c t1 k n)) 0)
                (and
                  (= (ancillas1 (crz c t1 k n)) 0)
                  (and
                    (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
                      (= (basis_ket1 (crz c t1 k n) x y i) (select x i)))
                    (and
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (= (ang_ind1 (crz c t1 k n) x y) (infix_sldtsl
                                                           (* (select x c) (select x t1))
                                                           k)))
                      (forall ((x (Array Int Int)) (y (Array Int Int)) (kqt Int))
                        (=>
                          (and (<= 0 k) (<= k kqt))
                          (= (ang_ind1 (crz c t1 k n) x y) (infix_sldtsl
                                                             (* (* (select x c) (select x t1)) 
                                                             (power
                                                               2
                                                               (- kqt k)))
                                                             kqt)))))))))))))))

;; prz
(declare-fun prz (Int
  Int
  Int) circuit)

;; prz'def
(assert
  (forall ((k Int) (t1 Int) (n Int))
    (=> (and (<= 0 t1) (< t1 n)) (= (prz k t1 n) (place1 (rzp k) t1 n)))))

;; prz'spec
(assert
  (forall ((k Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (and
        (= (width1 (prz k t1 n)) n)
        (and
          (= (size1 (prz k t1 n)) 1)
          (and
            (= (range1 (prz k t1 n)) 0)
            (and
              (= (ancillas1 (prz k t1 n)) 0)
              (and
                (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
                  (= (basis_ket1 (prz k t1 n) x y i) (select x i)))
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (=>
                    (and (<= 0 k) (<= k n))
                    (= (ang_ind1 (prz k t1 n) x y) (infix_sldtsl
                                                     (* (select x t1) 
                                                     (power
                                                       2
                                                       (- n k)))
                                                     n))))))))))))

;; crzn
(declare-fun crzn (Int
  Int
  Int
  Int) circuit)

;; crzn'def
(assert
  (forall ((c Int) (t1 Int) (k Int) (n Int))
    (=>
      (and (<= 0 c) (< c n))
      (=>
        (and (<= 0 t1) (< t1 n))
        (=>
          (not (= c t1))
          (=> (<= k 0) (= (crzn c t1 k n) (cont1 (rzp k) c t1 n))))))))

;; crzn'spec
(assert
  (forall ((c Int) (t1 Int) (k Int) (n Int))
    (=>
      (and (<= 0 c) (< c n))
      (=>
        (and (<= 0 t1) (< t1 n))
        (=>
          (not (= c t1))
          (=>
            (<= k 0)
            (and
              (= (width1 (crzn c t1 k n)) n)
              (and
                (= (size1 (crzn c t1 k n)) cont_size1)
                (and
                  (= (range1 (crzn c t1 k n)) 0)
                  (and
                    (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
                      (= (basis_ket1 (crzn c t1 k n) x y i) (select x i)))
                    (and
                      (= (ancillas1 (crzn c t1 k n)) 0)
                      (forall ((x (Array Int Int)) (y (Array Int Int)) (kqt Int))
                        (=>
                          (<= (- k) kqt)
                          (= (ang_ind1 (crzn c t1 k n) x y) (infix_sldtsl
                                                              (- (* (* (select x c) (select x t1)) 
                                                              (power
                                                                2
                                                                (+ kqt k))))
                                                              kqt)))))))))))))))

;; crzn_up
(declare-fun crzn_up (Int
  Int
  Int
  Int
  Int) circuit)

;; crzn_up'def
(assert
  (forall ((c Int) (t1 Int) (k Int) (n Int) (den Int))
    (=>
      (and (<= 0 c) (< c n))
      (=>
        (and (<= 0 t1) (< t1 n))
        (=>
          (not (= c t1))
          (=>
            (<= k 0)
            (=>
              (<= (- k) den)
              (= (crzn_up c t1 k n den) (cont1 (rzp k) c t1 n)))))))))

;; crzn_up'spec
(assert
  (forall ((c Int) (t1 Int) (k Int) (n Int) (den Int))
    (=>
      (and (<= 0 c) (< c n))
      (=>
        (and (<= 0 t1) (< t1 n))
        (=>
          (not (= c t1))
          (=>
            (<= k 0)
            (=>
              (<= (- k) den)
              (and
                (= (width1 (crzn_up c t1 k n den)) n)
                (and
                  (= (size1 (crzn_up c t1 k n den)) cont_size1)
                  (and
                    (= (range1 (crzn_up c t1 k n den)) 0)
                    (and
                      (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
                        (= (basis_ket1 (crzn_up c t1 k n den) x y i) (select x i)))
                      (and
                        (= (ancillas1 (crzn_up c t1 k n den)) 0)
                        (forall ((x (Array Int Int)) (y (Array Int Int)))
                          (= (ang_ind1 (crzn_up c t1 k n den) x y) (infix_sldtsl
                                                                    (- (* (* (select x c) (select x t1)) 
                                                                    (power
                                                                    2
                                                                    (+ den k))))
                                                                    den)))))))))))))))

;; bv_to_int_zero
(assert
  (forall ((x bitvec) (n Int))
    (=>
      (< 0 n)
      (=>
        (= (length x) n)
        (=>
          (forall ((i Int))
            (=> (and (<= 0 i) (< i n)) (= (select (value x) i) 0)))
          (= (bv_to_int x) 0))))))

;; bv_to_int_all_one
(assert
  (forall ((x bitvec) (n Int))
    (=>
      (< 0 n)
      (=>
        (= (length x) n)
        (=>
          (forall ((i Int))
            (=> (and (<= 0 i) (< i n)) (= (select (value x) i) 1)))
          (= (bv_to_int x) (- (power 2 n) 1)))))))

;; bv_to_int_zero_gen
(assert
  (forall ((n Int))
    (=>
      (< 0 n)
      (forall ((x bitvec))
        (=>
          (= (length x) n)
          (=>
            (forall ((i Int))
              (=> (and (<= 0 i) (< i n)) (= (select (value x) i) 0)))
            (= (bv_to_int x) 0)))))))

;; bv_to_int_zero_gen_rev
(assert
  (forall ((n Int))
    (=>
      (< 0 n)
      (forall ((x bitvec))
        (=>
          (= (length x) n)
          (=>
            (= (bv_to_int x) 0)
            (forall ((i Int))
              (=> (and (<= 0 i) (< i n)) (= (select (value x) i) 0)))))))))

;; bv_to_int_all_one_gen
(assert
  (forall ((n Int))
    (=>
      (< 0 n)
      (forall ((x bitvec))
        (=>
          (= (length x) n)
          (=>
            (forall ((i Int))
              (=> (and (<= 0 i) (< i n)) (= (select (value x) i) 1)))
            (= (bv_to_int x) (- (power 2 n) 1))))))))

;; bv_to_int_all_one_gen_rev
(assert
  (forall ((n Int))
    (=>
      (< 0 n)
      (forall ((x bitvec))
        (=>
          (= (length x) n)
          (=>
            (= (bv_to_int x) (- (power 2 n) 1))
            (forall ((i Int))
              (=> (and (<= 0 i) (< i n)) (= (select (value x) i) 1)))))))))

;; bin_check_zero
(declare-fun bin_check_zero ((Array Int Int)
  Int) angle)

;; result
(declare-fun result83 ((Array Int Int)) (Array Int Int))

;; result'def
(assert
  (forall ((x (Array Int Int)) (i Int))
    (= (select (result83 x) i) (select x (+ i 1)))))

;; bin_check_zero'def
(assert
  (forall ((x (Array Int Int)) (n Int))
    (=>
      (<= 0 n)
      (=>
        (binary_l x n)
        (ite (= n 0)
          (= (bin_check_zero x n) (infix_sldtsl 1 1))
          (ite (= n 1)
            (ite (= (select x 0) 1)
              (= (bin_check_zero x n) (infix_sldtsl 1 1))
              (= (bin_check_zero x n) ang_zero))
            (ite (= (select x 0) 1)
              (= (bin_check_zero x n) (bin_check_zero (result83 x) (- n 1)))
              (= (bin_check_zero x n) ang_zero))))))))

;; bin_check_zero'spec
(assert
  (forall ((x (Array Int Int)) (n Int))
    (=>
      (<= 0 n)
      (=>
        (binary_l x n)
        (= (bin_check_zero x n) (ite (forall ((j Int))
                                       (=>
                                         (and (<= 0 j) (< j n))
                                         (= (select x j) 1)))
                                  (infix_sldtsl 1 1)
                                  ang_zero))))))

;; bin_check_zero_int
(assert
  (forall ((i Int) (n Int))
    (=>
      (<= 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (= (bin_check_zero (int_to_bin i n) n) (ite (= i (- (power 2 n) 1))
                                                 (infix_sldtsl 1 1)
                                                 ang_zero))))))

;; fc
(declare-fun fc664 ((Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((x (Array Int Int)) (i Int))
    (= (select (fc664 x) i) (select x (+ i 1)))))

;; bin_check_zero_plus_one
(assert
  (forall ((x (Array Int Int)) (n Int))
    (=>
      (binary_l x n)
      (=>
        (< 1 n)
        (= (bin_check_zero x n) (ite (= (select x 0) 1)
                                  (bin_check_zero (fc664 x) (- n 1))
                                  ang_zero))))))

;; bin_check_zero_two
(assert
  (forall ((x (Array Int Int)))
    (=>
      (binary_l x 2)
      (= (bin_check_zero x 2) (ite (and
                                     (= (select x 0) (select x 1))
                                     (= (select x 1) 1))
                                (infix_sldtsl 1 1)
                                ang_zero)))))

;; c_rzp_one
(declare-fun c_rzp_one (Int
  Int
  Int) circuit)

;; c_rzp_one'def
(assert
  (forall ((c Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 c) (< c n))
      (=>
        (and (<= 0 t1) (< t1 n))
        (=> (not (= c t1)) (= (c_rzp_one c t1 n) (crz c t1 1 n)))))))

;; c_rzp_one'spec
(assert
  (forall ((c Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 c) (< c n))
      (=>
        (and (<= 0 t1) (< t1 n))
        (=>
          (not (= c t1))
          (and
            (= (width1 (c_rzp_one c t1 n)) n)
            (and
              (= (size1 (c_rzp_one c t1 n)) cont_size1)
              (and
                (= (range1 (c_rzp_one c t1 n)) 0)
                (and
                  (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
                    (= (basis_ket1 (c_rzp_one c t1 n) x y i) (select x i)))
                  (and
                    (= (ancillas1 (c_rzp_one c t1 n)) 0)
                    (and
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (= (ang_ind1 (c_rzp_one c t1 n) x y) (infix_sldtsl
                                                               (* (select x c) (select x t1))
                                                               1)))
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (=>
                          (= n 2)
                          (=>
                            (binary_l x 2)
                            (= (ang_ind1 (c_rzp_one c t1 n) x y) (bin_check_zero
                                                                   x
                                                                   2))))))))))))))))

;; repeat_had
(declare-fun repeat_had (Int) circuit)

;; repeat_had'def
(assert
  (forall ((n Int))
    (=>
      (<= 1 n)
      (ite (= n 1)
        (= (repeat_had n) hadamard1)
        (= (repeat_had n) (infix_slsl (repeat_had (- n 1)) hadamard1))))))

;; fc
(declare-fun fc665 ((Array Int Int)
  (Array Int Int)) (Array Int angle))

;; fc'def
(assert
  (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc665 x y)) (t2tb8 i))) 
    (int_to_ang
      (ite (and (= (select x i) (select y i)) (= (select y i) 1)) 1 0)
      1))))

;; repeat_had'spec
(assert
  (forall ((n Int))
    (=>
      (<= 1 n)
      (and
        (= (width1 (repeat_had n)) n)
        (and
          (= (range1 (repeat_had n)) n)
          (and
            (= (size1 (repeat_had n)) n)
            (and
              (= (ancillas1 (repeat_had n)) 0)
              (and
                (= (circ_to_pps1 (repeat_had n)) (repeat_pps_had n))
                (and
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (forall ((i Int))
                      (=>
                        (and (<= 0 i) (< i n))
                        (= (basis_ket1 (repeat_had n) x y i) (select y i)))))
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (=>
                      (binary_l x n)
                      (=>
                        (binary_l y n)
                        (= (ang_ind1 (repeat_had n) x y) (ang_sum
                                                           (fc665 x y)
                                                           0
                                                           n))))))))))))))

;; fc
(declare-fun fc666 (bitvec
  bitvec) (Array Int Int))

;; fc
(declare-fun fc667 (Int
  bitvec) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((x bitvec) (y bitvec) (k Int))
    (= (select (fc666 x y) k) (* (select (value x) k) (select (value y) k)))))

;; fc'def
(assert
  (forall ((n Int) (x bitvec) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc667 n x))
           (t2tb77 y))) (infix_asdtdt
                          (cpower
                            (prefix_mndt c_one)
                            (ind_isum (fc666 x y) 0 n))
                          (bv_to_ket y)))))

;; repeat_had_basis_bv
(assert
  (forall ((n Int) (x bitvec))
    (=>
      (<= 1 n)
      (=>
        (= (length x) n)
        (= (path_sem1 (repeat_had n) (bv_to_ket x)) (infix_asdtdt
                                                      (pow_inv_sqrt_2 n)
                                                      (ket_sum_l
                                                        bitvec1
                                                        (t2tb79 (n_bvs n))
                                                        (t2tb80 (fc667 n x))
                                                        n)))))))

;; fc
(declare-fun fc668 (Int
  Int
  bitvec) (Array Int Int))

;; fc
(declare-fun fc669 (Int
  Int) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((n Int) (i Int) (y bitvec) (k Int))
    (= (select (fc668 n i y) k) (* (select (value (int_to_bv i n)) k) (select 
    (value
      y) k)))))

;; fc'def
(assert
  (forall ((n Int) (i Int) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc669 n i))
           (t2tb77 y))) (infix_asdtdt
                          (cpower
                            (prefix_mndt c_one)
                            (ind_isum (fc668 n i y) 0 n))
                          (bv_to_ket y)))))

;; repeat_had_basis
(assert
  (forall ((n Int) (i Int))
    (=>
      (<= 1 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (= (path_sem1 (repeat_had n) (ket n i)) (infix_asdtdt
                                                  (pow_inv_sqrt_2 n)
                                                  (ket_sum_l
                                                    bitvec1
                                                    (t2tb79 (n_bvs n))
                                                    (t2tb80 (fc669 n i))
                                                    n)))))))

;; path_sem_repeat_had_superposition
(assert
  (forall ((n Int))
    (=>
      (<= 1 n)
      (= (path_sem1 (repeat_had n) (superposition_state n)) (ket n 0)))))

;; path_sem_repeat_had_invol
(assert
  (forall ((n Int) (x (matrix complex)))
    (=>
      (is_a_ket_l x n)
      (=>
        (<= 1 n)
        (= (path_sem1 (repeat_had n) (path_sem1 (repeat_had n) x)) x)))))

;; path_sem_repeat_had_to_superposition
(assert
  (forall ((n Int))
    (=>
      (<= 1 n)
      (= (path_sem1 (repeat_had n) (ket n 0)) (superposition_state n)))))

;; seq_flat_mute
(declare-fun seq_flat_mute (circuit
  circuit) circuit)

;; seq_flat_mute'def
(assert
  (forall ((d circuit) (e circuit))
    (=>
      (= (width1 d) (width1 e))
      (=>
        (= (range1 d) 0)
        (=>
          (= (range1 e) 0)
          (=>
            (forall ((x (Array Int Int)) (y (Array Int Int)))
              (=>
                (binary_l x (width1 d))
                (= (ang_ind1 d x y) (infix_sldtsl 1 0))))
            (=>
              (forall ((x (Array Int Int)) (y (Array Int Int)))
                (=>
                  (binary_l x (width1 e))
                  (= (ang_ind1 e x y) (infix_sldtsl 1 0))))
              (= (seq_flat_mute d e) (infix_mnmn d e)))))))))

;; seq_flat_mute'spec
(assert
  (forall ((d circuit) (e circuit))
    (=>
      (= (width1 d) (width1 e))
      (=>
        (= (range1 d) 0)
        (=>
          (= (range1 e) 0)
          (=>
            (forall ((x (Array Int Int)) (y (Array Int Int)))
              (=>
                (binary_l x (width1 d))
                (= (ang_ind1 d x y) (infix_sldtsl 1 0))))
            (=>
              (forall ((x (Array Int Int)) (y (Array Int Int)))
                (=>
                  (binary_l x (width1 e))
                  (= (ang_ind1 e x y) (infix_sldtsl 1 0))))
              (and
                (= (size1 (seq_flat_mute d e)) (+ (size1 d) (size1 e)))
                (and
                  (= (ancillas1 (seq_flat_mute d e)) (max
                                                       (ancillas1 d)
                                                       (ancillas1 e)))
                  (and
                    (= (pre1 (seq_flat_mute d e)) (Sequence1
                                                    (pre1 d)
                                                    (pre1 e)))
                    (and
                      (= (width1 (seq_flat_mute d e)) (width1 d))
                      (and
                        (forall ((x (Array Int Int)) (y (Array Int Int)))
                          (forall ((i Int))
                            (=>
                              (binary_l x (width1 d))
                              (=>
                                (and (<= 0 i) (< i (width1 d)))
                                (= (basis_ket1 (seq_flat_mute d e) x y i) 
                                (basis_ket1
                                  e
                                  (select (select (select basis_ket_closure1 d) x) y)
                                  y
                                  i))))))
                        (and
                          (= (width1 (seq_flat_mute d e)) (width1 d))
                          (and
                            (= (range1 (seq_flat_mute d e)) 0)
                            (forall ((x (Array Int Int)) (y (Array Int Int)))
                              (=>
                                (binary_l x (width1 d))
                                (= (ang_ind1 (seq_flat_mute d e) x y) 
                                (infix_sldtsl
                                  1
                                  0))))))))))))))))))

;; cont_flat_mute
(declare-fun cont_flat_mute (circuit
  Int
  Int
  Int) circuit)

;; cont_flat_mute'def
(assert
  (forall ((c circuit) (co Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 t1) (<= t1 (- n (width1 c))))
        (=>
          (=> (<= t1 co) (<= (+ t1 (width1 c)) co))
          (=>
            (forall ((x (Array Int Int)) (y (Array Int Int)))
              (=>
                (binary_l x (width1 c))
                (= (ang_ind1 c x y) (infix_sldtsl 1 0))))
            (=>
              (= (range1 c) 0)
              (= (cont_flat_mute c co t1 n) (cont1 c co t1 n)))))))))

;; fc
(declare-fun fc670 (Int
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((t1 Int) (x (Array Int Int)) (j Int))
    (= (select (fc670 t1 x) j) (select x (+ j t1)))))

;; cont_flat_mute'spec
(assert
  (forall ((c circuit) (co Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 t1) (<= t1 (- n (width1 c))))
        (=>
          (=> (<= t1 co) (<= (+ t1 (width1 c)) co))
          (=>
            (forall ((x (Array Int Int)) (y (Array Int Int)))
              (=>
                (binary_l x (width1 c))
                (= (ang_ind1 c x y) (infix_sldtsl 1 0))))
            (=>
              (= (range1 c) 0)
              (and
                (<= (size1 (cont_flat_mute c co t1 n)) (* cont_size1 
                (size1
                  c)))
                (and
                  (= (ancillas1 (cont_flat_mute c co t1 n)) (ancillas1 c))
                  (and
                    (= (pre1 (cont_flat_mute c co t1 n)) (Cont
                                                           (pre1 c)
                                                           co
                                                           t1
                                                           n))
                    (and
                      (= (width1 (cont_flat_mute c co t1 n)) n)
                      (and
                        (= (range1 (cont_flat_mute c co t1 n)) 0)
                        (and
                          (forall ((x (Array Int Int)) (y (Array Int Int)))
                            (forall ((i Int))
                              (=>
                                (binary_l x n)
                                (=>
                                  (and (<= 0 i) (< i n))
                                  (= (basis_ket1
                                       (cont_flat_mute c co t1 n)
                                       x
                                       y
                                       i) (ite (and
                                                 (= (select x co) 1)
                                                 (and
                                                   (<= t1 i)
                                                   (< i (+ t1 (width1 c)))))
                                            (basis_ket1
                                              c
                                              (fc670 t1 x)
                                              y
                                              (- i t1))
                                            (select x i)))))))
                          (forall ((x (Array Int Int)) (y (Array Int Int)))
                            (=>
                              (binary_l x n)
                              (= (ang_ind1 (cont_flat_mute c co t1 n) x y) 
                              (infix_sldtsl
                                1
                                0)))))))))))))))))

;; cont_flat_mute_lemma
(declare-fun cont_flat_mute_lemma (circuit
  Int
  Int
  Int) tuple0)

;; cont_flat_mute_lemma'def
(assert
  (forall ((c circuit) (co Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 t1) (<= t1 (- n (width1 c))))
        (=>
          (=> (<= t1 co) (<= (+ t1 (width1 c)) co))
          (=>
            (forall ((x (Array Int Int)) (y (Array Int Int)))
              (=>
                (binary_l x (width1 c))
                (= (ang_ind1 c x y) (infix_sldtsl 1 0))))
            (=> (= (range1 c) 0) (= (cont_flat_mute_lemma c co t1 n) Tuple0))))))))

;; fc
(declare-fun fc671 (Int
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((t1 Int) (x (Array Int Int)) (j Int))
    (= (select (fc671 t1 x) j) (select x (+ j t1)))))

;; cont_flat_mute_lemma'spec
(assert
  (forall ((c circuit) (co Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 t1) (<= t1 (- n (width1 c))))
        (=>
          (=> (<= t1 co) (<= (+ t1 (width1 c)) co))
          (=>
            (forall ((x (Array Int Int)) (y (Array Int Int)))
              (=>
                (binary_l x (width1 c))
                (= (ang_ind1 c x y) (infix_sldtsl 1 0))))
            (=>
              (= (range1 c) 0)
              (and
                (= (range1 (cont1 c co t1 n)) 0)
                (and
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (forall ((i Int))
                      (=>
                        (binary_l x n)
                        (=>
                          (and (<= 0 i) (< i n))
                          (= (basis_ket1 (cont1 c co t1 n) x y i) (ite 
                                                                    (and
                                                                    (= (select x co) 1)
                                                                    (and
                                                                    (<= t1 i)
                                                                    (< i (+ t1 
                                                                    (width1
                                                                    c)))))
                                                                    (basis_ket1
                                                                    c
                                                                    (fc671
                                                                    t1
                                                                    x)
                                                                    y
                                                                    (- i t1))
                                                                    (select x i)))))))
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (=>
                      (binary_l x n)
                      (= (ang_ind1 (cont1 c co t1 n) x y) (infix_sldtsl 1 0)))))))))))))

;; seq_flat_mute_right
(declare-fun seq_flat_mute_right (circuit
  circuit) circuit)

;; seq_flat_mute_right'def
(assert
  (forall ((d circuit) (e circuit))
    (=>
      (= (width1 d) (width1 e))
      (=>
        (= (range1 e) 0)
        (=>
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (=>
              (binary_l x (width1 e))
              (= (ang_ind1 e x y) (infix_sldtsl 1 0))))
          (= (seq_flat_mute_right d e) (infix_mnmn d e)))))))

;; fc
(declare-fun fc672 (circuit
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((d circuit) (y (Array Int Int)) (k Int))
    (= (select (fc672 d y) k) (select y (+ k (range1 d))))))

;; seq_flat_mute_right'spec
(assert
  (forall ((d circuit) (e circuit))
    (=>
      (= (width1 d) (width1 e))
      (=>
        (= (range1 e) 0)
        (=>
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (=>
              (binary_l x (width1 e))
              (= (ang_ind1 e x y) (infix_sldtsl 1 0))))
          (and
            (= (size1 (seq_flat_mute_right d e)) (+ (size1 d) (size1 e)))
            (and
              (= (ancillas1 (seq_flat_mute_right d e)) (max
                                                         (ancillas1 d)
                                                         (ancillas1 e)))
              (and
                (= (width1 (seq_flat_mute_right d e)) (width1 d))
                (and
                  (= (pre1 (seq_flat_mute_right d e)) (Sequence1
                                                        (pre1 d)
                                                        (pre1 e)))
                  (and
                    (= (range1 (seq_flat_mute_right d e)) (range1 d))
                    (and
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (forall ((i Int))
                          (=>
                            (binary_l x (width1 d))
                            (=>
                              (binary_l y (range1 d))
                              (=>
                                (and (<= 0 i) (< i (width1 d)))
                                (= (basis_ket1
                                     (seq_flat_mute_right d e)
                                     x
                                     y
                                     i) (basis_ket1
                                          e
                                          (select (select (select basis_ket_closure1 d) x) y)
                                          (fc672 d y)
                                          i)))))))
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (=>
                          (binary_l x (width1 d))
                          (=>
                            (binary_l y (range1 d))
                            (= (ang_ind1 (seq_flat_mute_right d e) x y) 
                            (ang_ind1
                              d
                              x
                              y))))))))))))))))

;; seq_flat_mute_left
(declare-fun seq_flat_mute_left (circuit
  circuit) circuit)

;; seq_flat_mute_left'def
(assert
  (forall ((d circuit) (e circuit))
    (=>
      (= (width1 d) (width1 e))
      (=>
        (= (range1 d) 0)
        (=>
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (=>
              (binary_l x (width1 d))
              (= (ang_ind1 d x y) (infix_sldtsl 1 0))))
          (= (seq_flat_mute_left d e) (infix_mnmn d e)))))))

;; seq_flat_mute_left'spec
(assert
  (forall ((d circuit) (e circuit))
    (=>
      (= (width1 d) (width1 e))
      (=>
        (= (range1 d) 0)
        (=>
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (=>
              (binary_l x (width1 d))
              (= (ang_ind1 d x y) (infix_sldtsl 1 0))))
          (and
            (= (size1 (seq_flat_mute_left d e)) (+ (size1 d) (size1 e)))
            (and
              (= (ancillas1 (seq_flat_mute_left d e)) (max
                                                        (ancillas1 d)
                                                        (ancillas1 e)))
              (and
                (= (pre1 (seq_flat_mute_left d e)) (Sequence1
                                                     (pre1 d)
                                                     (pre1 e)))
                (and
                  (= (width1 (seq_flat_mute_left d e)) (width1 d))
                  (and
                    (= (range1 (seq_flat_mute_left d e)) (range1 e))
                    (and
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (forall ((i Int))
                          (=>
                            (binary_l x (width1 d))
                            (=>
                              (binary_l y (range1 e))
                              (=>
                                (and (<= 0 i) (< i (width1 d)))
                                (= (basis_ket1
                                     (seq_flat_mute_left d e)
                                     x
                                     y
                                     i) (basis_ket1
                                          e
                                          (select (select (select basis_ket_closure1 d) x) y)
                                          y
                                          i)))))))
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (=>
                          (binary_l x (width1 d))
                          (=>
                            (binary_l y (range1 e))
                            (= (ang_ind1 (seq_flat_mute_left d e) x y) 
                            (ang_ind1
                              e
                              (select (select (select basis_ket_closure1 d) x) y)
                              y))))))))))))))))

;; path_sem_flat_mute
(assert
  (forall ((d circuit) (x bitvec))
    (=>
      (= (length x) (width1 d))
      (=>
        (= (range1 d) 0)
        (=>
          (forall ((x1 (Array Int Int)) (y (Array Int Int)))
            (=>
              (binary_l x1 (width1 d))
              (= (ang_ind1 d x1 y) (infix_sldtsl 1 0))))
          (= (path_sem1 d (bv_to_ket x)) (bv_to_ket
                                           (make_bv
                                             (select (select (select 
                                             basis_ket_closure1 d) (value x)) 
                                             identity2)
                                             (width1 d)))))))))

;; path_sem_flat_mute_gen
(assert
  (forall ((d circuit))
    (=>
      (= (range1 d) 0)
      (=>
        (forall ((x (Array Int Int)) (y (Array Int Int)))
          (=>
            (binary_l x (width1 d))
            (= (ang_ind1 d x y) (infix_sldtsl 1 0))))
        (forall ((x bitvec))
          (=>
            (= (length x) (width1 d))
            (= (path_sem1 d (bv_to_ket x)) (bv_to_ket
                                             (make_bv
                                               (select (select (select 
                                               basis_ket_closure1 d) 
                                               (value
                                                 x)) identity2)
                                               (width1 d))))))))))

;; path_sem_flat_mute_ket
(assert
  (forall ((d circuit))
    (=>
      (= (range1 d) 0)
      (=>
        (forall ((x (Array Int Int)) (y (Array Int Int)))
          (=>
            (binary_l x (width1 d))
            (= (ang_ind1 d x y) (infix_sldtsl 1 0))))
        (forall ((x (matrix complex)))
          (=>
            (is_a_ket_l x (width1 d))
            (=>
              (is_a_ket_basis_elt x)
              (= (path_sem1 d x) (bv_to_ket
                                   (make_bv
                                     (select (select (select basis_ket_closure1 d) 
                                     (value
                                       (ket_to_bv x))) identity2)
                                     (width1 d)))))))))))

;; path_sem_flat_mute_bv
(assert
  (forall ((d circuit) (x bitvec) (y bitvec))
    (=>
      (= (length x) (width1 d))
      (=>
        (= (length y) (width1 d))
        (=>
          (= (range1 d) 0)
          (=>
            (forall ((i Int))
              (=>
                (and (<= 0 i) (< i (width1 d)))
                (= (basis_ket1 d (value x) identity2 i) (select (value y) i))))
            (=>
              (forall ((x1 (Array Int Int)) (y1 (Array Int Int)))
                (=>
                  (binary_l x1 (width1 d))
                  (= (ang_ind1 d x1 y1) (infix_sldtsl 1 0))))
              (= (path_sem1 d (bv_to_ket x)) (bv_to_ket y)))))))))

;; fc
(declare-fun fc673 (Int
  (matrix complex)) (Array Int Int))

;; fc'def
(assert
  (forall ((k Int) (ket1 (matrix complex)) (i Int))
    (= (select (fc673 k ket1) i) (ite (= i k)
                                   (- 1 (select (value (ket_to_bv ket1)) i))
                                   (select (value (ket_to_bv ket1)) i)))))

;; sem_ind_cnot
(assert
  (forall ((c Int) (k Int) (n Int))
    (=>
      (and (<= 0 c) (< c n))
      (=>
        (and (<= 0 k) (< k n))
        (=>
          (not (= k c))
          (and
            (forall ((ket1 (matrix complex)))
              (=>
                (is_a_ket_l ket1 n)
                (=>
                  (is_a_ket_basis_elt ket1)
                  (=>
                    (= (select (value (ket_to_bv ket1)) c) 0)
                    (= (path_sem1 (cnot1 c k n) ket1) ket1)))))
            (forall ((ket1 (matrix complex)))
              (=>
                (is_a_ket_l ket1 n)
                (=>
                  (is_a_ket_basis_elt ket1)
                  (=>
                    (= (select (value (ket_to_bv ket1)) c) 1)
                    (= (path_sem1 (cnot1 c k n) ket1) (bv_to_ket
                                                        (make_bv
                                                          (fc673 k ket1)
                                                          n)))))))))))))

;; sem_ind_cnot_zero
(assert
  (forall ((n Int))
    (=>
      (< 1 n)
      (and
        (forall ((ket1 (matrix complex)))
          (forall ((i Int))
            (=>
              (is_a_ket_l ket1 (- n 1))
              (=>
                (is_a_ket_basis_elt ket1)
                (=>
                  (and (<= 0 i) (< i 2))
                  (=>
                    (= (select (value (ket_to_bv ket1)) 0) 1)
                    (= (path_sem1
                         (cnot1 0 (- n 1) n)
                         (kronecker ket1 (ket 1 i))) (kronecker
                                                       ket1
                                                       (ket 1 (- 1 i))))))))))
        (forall ((ket1 (matrix complex)))
          (forall ((i Int))
            (=>
              (is_a_ket_l ket1 (- n 1))
              (=>
                (is_a_ket_basis_elt ket1)
                (=>
                  (and (<= 0 i) (< i 2))
                  (=>
                    (= (select (value (ket_to_bv ket1)) 0) 0)
                    (= (path_sem1
                         (cnot1 0 (- n 1) n)
                         (kronecker ket1 (ket 1 i))) (kronecker
                                                       ket1
                                                       (ket 1 i)))))))))))))

;; ind_neg_cnot
(declare-fun ind_neg_cnot (Int
  Int
  Int) circuit)

;; fc
(declare-fun fc674 (Int
  Int
  bitvec) (Array Int Int))

;; fc'def
(assert
  (forall ((c Int) (k Int) (x bitvec) (i Int))
    (= (select (fc674 c k x) i) (ite (= i k)
                                  (ite (= (select (value x) c) 0)
                                    (- 1 (select (value x) i))
                                    (select (value x) i))
                                  (select (value x) i)))))

;; ind_neg_cnot'spec
(assert
  (forall ((c Int) (k Int) (n Int))
    (=>
      (and (<= 0 c) (< c n))
      (=>
        (and (<= 0 k) (< k n))
        (=>
          (not (= k c))
          (and
            (= (range1 (ind_neg_cnot c k n)) 0)
            (and
              (= (ancillas1 (ind_neg_cnot c k n)) 0)
              (and
                (= (size1 (ind_neg_cnot c k n)) 3)
                (and
                  (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
                    (=>
                      (binary_l x n)
                      (=>
                        (and (<= 0 i) (< i n))
                        (= (basis_ket1 (ind_neg_cnot c k n) x y i) (ite (= i k)
                                                                    (ite (= (select x c) 0)
                                                                    (- 1 (select x i))
                                                                    (select x i))
                                                                    (select x i))))))
                  (and
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (=>
                        (binary_l x n)
                        (= (ang_ind1 (ind_neg_cnot c k n) x y) ang_zero)))
                    (and
                      (forall ((x bitvec))
                        (=>
                          (= (length x) n)
                          (= (path_sem1 (ind_neg_cnot c k n) (bv_to_ket x)) 
                          (bv_to_ket
                            (make_bv (fc674 c k x) n)))))
                      (= (width1 (ind_neg_cnot c k n)) n))))))))))))

;; fc
(declare-fun fc675 (Int
  (matrix complex)) (Array Int Int))

;; fc'def
(assert
  (forall ((n Int) (ket1 (matrix complex)) (i Int))
    (= (select (fc675 n ket1) i) (ite (= i n)
                                   (- 1 (select (value (ket_to_bv ket1)) i))
                                   (select (value (ket_to_bv ket1)) i)))))

;; sem_ind_neg_cnot_zero
(assert
  (forall ((n Int))
    (=>
      (< 0 n)
      (and
        (forall ((i Int))
          (=>
            (and (<= 0 i) (< i (power 2 (- n 1))))
            (= (path_sem1
                 (ind_neg_cnot 0 n (+ n 1))
                 (kronecker (ket n i) (ket 1 1))) (kronecker
                                                    (ket n i)
                                                    (ket 1 0)))))
        (and
          (forall ((i Int))
            (=>
              (and (<= (power 2 (- n 1)) i) (< i (power 2 n)))
              (= (path_sem1
                   (ind_neg_cnot 0 n (+ n 1))
                   (kronecker (ket n i) (ket 1 0))) (kronecker
                                                      (ket n i)
                                                      (ket 1 0)))))
          (and
            (forall ((ket1 (matrix complex)))
              (=>
                (is_a_ket_l ket1 (+ n 1))
                (=>
                  (is_a_ket_basis_elt ket1)
                  (=>
                    (= (select (value (ket_to_bv ket1)) 0) 1)
                    (= (path_sem1 (ind_neg_cnot 0 n (+ n 1)) ket1) ket1)))))
            (forall ((ket1 (matrix complex)))
              (=>
                (is_a_ket_l ket1 (+ n 1))
                (=>
                  (is_a_ket_basis_elt ket1)
                  (=>
                    (= (select (value (ket_to_bv ket1)) 0) 0)
                    (= (path_sem1 (ind_neg_cnot 0 n (+ n 1)) ket1) (bv_to_ket
                                                                    (make_bv
                                                                    (fc675
                                                                    n
                                                                    ket1)
                                                                    (+ n 1))))))))))))))

;; repeat_xx
(declare-fun repeat_xx (Int) circuit)

;; repeat_xx'def
(assert
  (forall ((n Int))
    (=>
      (<= 1 n)
      (ite (= n 1)
        (= (repeat_xx n) xx1)
        (= (repeat_xx n) (infix_slsl (repeat_xx (- n 1)) xx1))))))

;; repeat_xx'spec
(assert
  (forall ((n Int))
    (=>
      (<= 1 n)
      (and
        (= (width1 (repeat_xx n)) n)
        (and
          (= (range1 (repeat_xx n)) 0)
          (and
            (= (size1 (repeat_xx n)) n)
            (and
              (= (ancillas1 (repeat_xx n)) 0)
              (and
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (forall ((i Int))
                    (=>
                      (and (<= 0 i) (< i n))
                      (= (basis_ket1 (repeat_xx n) x y i) (- 1 (select x i))))))
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (= (ang_ind1 (repeat_xx n) x y) ang_zero))))))))))

;; with_permutation
(declare-fun with_permutation1 (circuit
  (Array Int Int)) circuit)

;; fc
(declare-fun fc676 ((Array Int Int)
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc677 ((Array Int Int)
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc678 (circuit
  (Array Int Int)
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (x (Array Int Int)) (i Int))
    (= (select (fc676 f x) i) (select x (select f i)))))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (x (Array Int Int)) (i Int))
    (= (select (fc677 f x) i) (select x (select f i)))))

;; fc'def
(assert
  (forall ((c circuit) (f (Array Int Int)) (x (Array Int Int)) (i Int))
    (= (select (fc678 c f x) i) (select x (select (c_inv_func_int
                                                    f
                                                    (width1 c)) i)))))

;; with_permutation'spec
(assert
  (forall ((c circuit) (f (Array Int Int)))
    (=>
      (p_bijective1 f (to_fset 0 (width1 c)) (to_fset 0 (width1 c)))
      (and
        (= (unwire (with_permutation1 c f)) (with_permutation (unwire c) f))
        (and
          (<= (size1 (with_permutation1 c f)) (+ (* 2 (width1 c)) (size1 c)))
          (and
            (= (ancillas1 (with_permutation1 c f)) (ancillas1 c))
            (and
              (= (width1 (with_permutation1 c f)) (width1 c))
              (and
                (= (range1 (with_permutation1 c f)) (range1 c))
                (and
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (= (ang_ind1 (with_permutation1 c f) x y) (ang_ind1
                                                                c
                                                                (fc676 f x)
                                                                y)))
                  (and
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (forall ((i Int))
                        (=>
                          (and (<= 0 i) (< i (width1 c)))
                          (= (basis_ket1 (with_permutation1 c f) x y i) 
                          (basis_ket1
                            c
                            (fc677 f x)
                            y
                            (select (c_inv_func_int f (width1 c)) i))))))
                    (and
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (forall ((i Int))
                          (=>
                            (and (<= 0 i) (< i (width1 c)))
                            (= (basis_ket1
                                 (with_permutation1 c f)
                                 (fc678 c f x)
                                 y
                                 i) (basis_ket1
                                      c
                                      x
                                      y
                                      (select (c_inv_func_int f (width1 c)) i))))))
                      (= (with_permutation1 c f) (infix_mnmn
                                                   (infix_mnmn
                                                     (permutation_circuit1
                                                       (width1 c)
                                                       f)
                                                     c)
                                                   (permutation_circuit1
                                                     (width1 c)
                                                     (c_inv_func_int
                                                       f
                                                       (width1 c))))))))))))))))

;; unwire_with_permutation
(declare-fun unwire_with_permutation (circuit
  (Array Int Int)) tuple0)

;; unwire_with_permutation'def
(assert
  (forall ((c circuit) (f (Array Int Int)))
    (=>
      (p_bijective1 f (to_fset 0 (width1 c)) (to_fset 0 (width1 c)))
      (= (unwire_with_permutation c f) Tuple0))))

;; unwire_with_permutation'spec
(assert
  (forall ((c circuit) (f (Array Int Int)))
    (=>
      (p_bijective1 f (to_fset 0 (width1 c)) (to_fset 0 (width1 c)))
      (forall ((x (matrix complex)))
        (=>
          (is_a_ket_l x (width1 c))
          (= (path_sem1 (with_permutation1 c f) x) (path_sem
                                                     (with_permutation
                                                       (unwire c)
                                                       f)
                                                     x)))))))

;; fc
(declare-fun fc679 (Int
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((k Int) (n Int) (i Int))
    (= (select (fc679 k n) i) (ite (< i k) (- (+ i n) k) (- i k)))))

;; with_permutation_kronecker_gen
(assert
  (forall ((c circuit) (k Int) (n Int))
    (=>
      (= (width1 c) n)
      (=>
        (and (<= 0 k) (< k n))
        (forall ((im1 (matrix complex)) (im_d (matrix complex)) (ant (matrix complex)) (ant_d (matrix complex)))
          (=>
            (is_a_ket_l ant k)
            (=>
              (is_a_ket_l ant_d (- n k))
              (=>
                (is_a_ket_l im1 k)
                (=>
                  (is_a_ket_l im_d (- n k))
                  (=>
                    (is_a_ket_basis_elt ant)
                    (=>
                      (is_a_ket_basis_elt ant_d)
                      (=>
                        (= (path_sem1 c (kronecker ant ant_d)) (kronecker
                                                                 im1
                                                                 im_d))
                        (= (path_sem1
                             (with_permutation1 c (fc679 k n))
                             (kronecker ant_d ant)) (kronecker im_d im1))))))))))))))

;; permutation_three_blocks
(declare-fun permutation_three_blocks (Int
  Int
  Int
  Int) circuit)

;; result
(declare-fun result84 (Int
  Int
  Int) (Array Int Int))

;; result'def
(assert
  (forall ((n1 Int) (n2 Int) (n3 Int) (j Int))
    (= (select (result84 n1 n2 n3) j) (ite (< j n1)
                                        j
                                        (ite (< j (+ n1 n3))
                                          (+ j n2)
                                          (- j n3))))))

;; permutation_three_blocks'def
(assert
  (forall ((n1 Int) (n2 Int) (n3 Int) (n Int))
    (=>
      (<= 0 n1)
      (=>
        (<= 0 n2)
        (=>
          (<= 0 n3)
          (=>
            (< 0 n)
            (=>
              (= n (+ (+ n1 n2) n3))
              (= (permutation_three_blocks n1 n2 n3 n) (permutation_circuit1
                                                         n
                                                         (result84 n1 n2 n3))))))))))

;; permutation_three_blocks'spec
(assert
  (forall ((n1 Int) (n2 Int) (n3 Int) (n Int))
    (=>
      (<= 0 n1)
      (=>
        (<= 0 n2)
        (=>
          (<= 0 n3)
          (=>
            (< 0 n)
            (=>
              (= n (+ (+ n1 n2) n3))
              (and
                (<= (size1 (permutation_three_blocks n1 n2 n3 n)) n)
                (and
                  (= (ancillas1 (permutation_three_blocks n1 n2 n3 n)) 0)
                  (and
                    (= (width1 (permutation_three_blocks n1 n2 n3 n)) n)
                    (forall ((x bitvec) (y bitvec) (z bitvec))
                      (=>
                        (= (length x) n1)
                        (=>
                          (= (length y) n2)
                          (=>
                            (= (length z) n3)
                            (= (path_sem1
                                 (permutation_three_blocks n1 n2 n3 n)
                                 (kronecker
                                   (kronecker (bv_to_ket x) (bv_to_ket y))
                                   (bv_to_ket z))) (kronecker
                                                     (kronecker
                                                       (bv_to_ket x)
                                                       (bv_to_ket z))
                                                     (bv_to_ket y)))))))))))))))))

;; insert_qbits
(declare-fun insert_qbits1 (circuit
  Int
  Int
  Int) circuit)

;; result
(declare-fun result85 (Int
  Int
  Int) (Array Int Int))

;; result'def
(assert
  (forall ((k Int) (n Int) (i Int) (j Int))
    (= (select (result85 k n i) j) (ite (< j k)
                                     j
                                     (ite (< j n) (+ j i) (+ (- j n) k))))))

;; insert_qbits'def
(assert
  (forall ((c circuit) (k Int) (n Int) (i Int))
    (=>
      (= (width1 c) n)
      (=>
        (and (<= 0 k) (< k n))
        (=>
          (< 0 i)
          (= (insert_qbits1 c k n i) (with_permutation1
                                       (infix_slsl c (m_skip i))
                                       (result85 k n i))))))))

;; fc
(declare-fun fc680 (Int
  Int
  Int
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc681 (Int
  Int
  Int
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc682 (Int
  Int
  Int
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((k Int) (n Int) (i Int) (x (Array Int Int)) (j Int))
    (= (select (fc680 k n i x) j) (select x (ite (< j k)
                                              j
                                              (ite (< j n)
                                                (+ j i)
                                                (+ (- j n) k)))))))

;; fc'def
(assert
  (forall ((k Int) (n Int) (i Int) (x (Array Int Int)) (ii Int))
    (= (select (fc681 k n i x) ii) (select x (ite (< ii k)
                                               ii
                                               (ite (< ii n)
                                                 (+ ii i)
                                                 (+ (- ii n) k)))))))

;; fc'def
(assert
  (forall ((k Int) (n Int) (i Int) (x (Array Int Int)) (ii Int))
    (= (select (fc682 k n i x) ii) (select x (ite (< ii k)
                                               ii
                                               (ite (< ii n)
                                                 (+ ii i)
                                                 (+ (- ii n) k)))))))

;; insert_qbits'spec
(assert
  (forall ((c circuit) (k Int) (n Int) (i Int))
    (=>
      (= (width1 c) n)
      (=>
        (and (<= 0 k) (< k n))
        (=>
          (< 0 i)
          (and
            (= (ancillas1 (insert_qbits1 c k n i)) (ancillas1 c))
            (and
              (= (width1 (insert_qbits1 c k n i)) (+ n i))
              (and
                (<= (size1 (insert_qbits1 c k n i)) (+ (* 2 (+ n i)) 
                (size1
                  c)))
                (and
                  (= (range1 (insert_qbits1 c k n i)) (range1 c))
                  (and
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (= (ang_ind1 (insert_qbits1 c k n i) x y) (ang_ind1
                                                                  c
                                                                  (fc680
                                                                    k
                                                                    n
                                                                    i
                                                                    x)
                                                                  y)))
                    (and
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (forall ((j Int))
                          (=>
                            (and (<= 0 j) (< j k))
                            (= (basis_ket1 (insert_qbits1 c k n i) x y j) 
                            (basis_ket1
                              c
                              (fc681 k n i x)
                              y
                              j)))))
                      (and
                        (forall ((x (Array Int Int)) (y (Array Int Int)))
                          (forall ((j Int))
                            (=>
                              (and (<= (+ k i) j) (< j (+ n i)))
                              (= (basis_ket1 (insert_qbits1 c k n i) x y j) 
                              (basis_ket1
                                c
                                (fc682 k n i x)
                                y
                                (- j i))))))
                        (forall ((x (Array Int Int)) (y (Array Int Int)))
                          (forall ((j Int))
                            (=>
                              (and (<= k j) (< j (+ k i)))
                              (= (basis_ket1 (insert_qbits1 c k n i) x y j) (select x j)))))))))))))))))

;; insert_qbits_path_sem
(assert
  (forall ((c circuit) (k Int) (n Int) (i Int) (x bitvec) (im1 (matrix complex)) (im_d (matrix complex)))
    (=>
      (= (width1 c) n)
      (=>
        (and (<= 0 k) (< k n))
        (=>
          (< 0 i)
          (=>
            (= (length x) (+ n i))
            (=>
              (is_a_ket_l im1 k)
              (=>
                (is_a_ket_l im_d (- n k))
                (=>
                  (= (path_sem1
                       c
                       (bv_to_ket (concat1 (hpart x k) (tpart x (+ k i))))) 
                  (kronecker
                    im1
                    im_d))
                  (= (path_sem1 (insert_qbits1 c k n i) (bv_to_ket x)) 
                  (kronecker
                    im1
                    (kronecker (bv_to_ket (htpart x k i)) im_d))))))))))))

;; insert_qbits_path_sem_basis
(assert
  (forall ((c circuit) (k Int) (n Int) (i Int) (x (matrix complex)) (y (matrix complex)) (z (matrix complex)) (xqt (matrix complex)) (zqt (matrix complex)))
    (=>
      (= (width1 c) n)
      (=>
        (and (<= 0 k) (< k n))
        (=>
          (< 0 i)
          (=>
            (is_a_ket_l x k)
            (=>
              (is_a_ket_basis_elt x)
              (=>
                (is_a_ket_basis_elt y)
                (=>
                  (is_a_ket_basis_elt z)
                  (=>
                    (is_a_ket_l xqt k)
                    (=>
                      (is_a_ket_l y i)
                      (=>
                        (is_a_ket_l z (- n k))
                        (=>
                          (is_a_ket_l zqt (- n k))
                          (=>
                            (= (path_sem1 c (kronecker x z)) (kronecker
                                                               xqt
                                                               zqt))
                            (= (path_sem1
                                 (insert_qbits1 c k n i)
                                 (kronecker x (kronecker y z))) (kronecker
                                                                  xqt
                                                                  (kronecker
                                                                    y
                                                                    zqt)))))))))))))))))

;; insert_qbits_gen
(declare-fun insert_qbits_gen1 (circuit
  Int
  Int
  Int) circuit)

;; insert_qbits_gen'def
(assert
  (forall ((c circuit) (k Int) (n Int) (i Int))
    (=>
      (= (width1 c) n)
      (=>
        (and (<= 0 k) (< k n))
        (=>
          (<= 0 i)
          (ite (< 0 i)
            (= (insert_qbits_gen1 c k n i) (insert_qbits1 c k n i))
            (= (insert_qbits_gen1 c k n i) c)))))))

;; fc
(declare-fun fc683 (Int
  Int
  Int
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc684 (Int
  Int
  Int
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc685 (Int
  Int
  Int
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((k Int) (n Int) (i Int) (x (Array Int Int)) (j Int))
    (= (select (fc683 k n i x) j) (select x (ite (< j k)
                                              j
                                              (ite (< j n)
                                                (+ j i)
                                                (+ (- j n) k)))))))

;; fc'def
(assert
  (forall ((k Int) (n Int) (i Int) (x (Array Int Int)) (ii Int))
    (= (select (fc684 k n i x) ii) (select x (ite (< ii k)
                                               ii
                                               (ite (< ii n)
                                                 (+ ii i)
                                                 (+ (- ii n) k)))))))

;; fc'def
(assert
  (forall ((k Int) (n Int) (i Int) (x (Array Int Int)) (ii Int))
    (= (select (fc685 k n i x) ii) (select x (ite (< ii k)
                                               ii
                                               (ite (< ii n)
                                                 (+ ii i)
                                                 (+ (- ii n) k)))))))

;; insert_qbits_gen'spec
(assert
  (forall ((c circuit) (k Int) (n Int) (i Int))
    (=>
      (= (width1 c) n)
      (=>
        (and (<= 0 k) (< k n))
        (=>
          (<= 0 i)
          (and
            (= (ancillas1 (insert_qbits_gen1 c k n i)) (ancillas1 c))
            (and
              (= (width1 (insert_qbits_gen1 c k n i)) (+ n i))
              (and
                (<= (size1 (insert_qbits_gen1 c k n i)) (+ (* 2 (+ n i)) 
                (size1
                  c)))
                (and
                  (= (range1 (insert_qbits_gen1 c k n i)) (range1 c))
                  (and
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (= (ang_ind1 (insert_qbits_gen1 c k n i) x y) (ang_ind1
                                                                    c
                                                                    (fc683
                                                                    k
                                                                    n
                                                                    i
                                                                    x)
                                                                    y)))
                    (and
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (forall ((j Int))
                          (=>
                            (and (<= 0 j) (< j k))
                            (= (basis_ket1 (insert_qbits_gen1 c k n i) x y j) 
                            (basis_ket1
                              c
                              (fc684 k n i x)
                              y
                              j)))))
                      (and
                        (forall ((x (Array Int Int)) (y (Array Int Int)))
                          (forall ((j Int))
                            (=>
                              (and (<= (+ k i) j) (< j (+ n i)))
                              (= (basis_ket1
                                   (insert_qbits_gen1 c k n i)
                                   x
                                   y
                                   j) (basis_ket1
                                        c
                                        (fc685 k n i x)
                                        y
                                        (- j i))))))
                        (and
                          (forall ((x (Array Int Int)) (y (Array Int Int)))
                            (forall ((j Int))
                              (=>
                                (and (<= k j) (< j (+ k i)))
                                (= (basis_ket1
                                     (insert_qbits_gen1 c k n i)
                                     x
                                     y
                                     j) (select x j)))))
                          (forall ((im1 (matrix complex)) (im_d (matrix complex)) (inserted (matrix complex)) (x bitvec))
                            (=>
                              (is_a_ket_l im1 k)
                              (=>
                                (is_a_ket_l im_d (- n k))
                                (=>
                                  (= inserted (bv_to_ket (htpart x k i)))
                                  (=>
                                    (= (length x) (+ n i))
                                    (=>
                                      (= (path_sem1
                                           c
                                           (bv_to_ket
                                             (concat1
                                               (hpart x k)
                                               (tpart x (+ k i))))) (kronecker
                                                                    im1
                                                                    im_d))
                                      (= (path_sem1
                                           (insert_qbits_gen1 c k n i)
                                           (bv_to_ket x)) (kronecker
                                                            im1
                                                            (kronecker
                                                              inserted
                                                              im_d))))))))))))))))))))))

;; swap_lists
(declare-fun swap_lists (Int
  Int
  Int
  Int) circuit)

;; swap_lists'def
(assert
  (forall ((c1 Int) (c2 Int) (l Int) (n Int))
    (=>
      (and (<= 0 c1) (< c1 n))
      (=>
        (< 0 l)
        (=>
          (<= (+ c2 l) n)
          (=>
            (<= (+ c1 l) c2)
            (=>
              (not (= c1 c2))
              (= (swap_lists c1 c2 l n) (place1
                                          (insert_qbits_gen1
                                            (permutation_three_blocks
                                              0
                                              l
                                              l
                                              (* 2 l))
                                            l
                                            (* 2 l)
                                            (- c2 l))
                                          0
                                          n)))))))))

;; swap_lists'spec
(assert
  (forall ((c1 Int) (c2 Int) (l Int) (n Int))
    (=>
      (and (<= 0 c1) (< c1 n))
      (=>
        (< 0 l)
        (=>
          (<= (+ c2 l) n)
          (=>
            (<= (+ c1 l) c2)
            (=>
              (not (= c1 c2))
              (and
                (<= (size1 (swap_lists c1 c2 l n)) (* 2 (+ (* 2 l) c2)))
                (and
                  (= (ancillas1 (swap_lists c1 c2 l n)) 0)
                  (= (width1 (swap_lists c1 c2 l n)) n))))))))))

;; swap_lists_kets_basis
(assert
  (forall ((c2 Int) (l Int) (n Int))
    (=>
      (< 0 l)
      (=>
        (and (<= 0 (+ c2 l)) (<= (+ c2 l) n))
        (forall ((a (matrix complex)) (x (matrix complex)) (y (matrix complex)) (z (matrix complex)))
          (=>
            (is_a_ket_l a (- c2 l))
            (=>
              (is_a_ket_l x l)
              (=>
                (is_a_ket_l y l)
                (=>
                  (is_a_ket_l z (- (- n c2) l))
                  (=>
                    (is_a_ket_basis_elt x)
                    (=>
                      (is_a_ket_basis_elt y)
                      (=>
                        (is_a_ket_basis_elt a)
                        (=>
                          (is_a_ket_basis_elt z)
                          (= (path_sem1
                               (swap_lists 0 c2 l n)
                               (kronecker x (kronecker (kronecker a y) z))) 
                          (kronecker
                            y
                            (kronecker (kronecker a x) z))))))))))))))))

;; swap_lists_kets
(assert
  (forall ((c2 Int) (l Int) (n Int))
    (=>
      (< 0 l)
      (=>
        (and (<= 0 (+ c2 l)) (<= (+ c2 l) n))
        (forall ((a (matrix complex)) (x (matrix complex)) (y (matrix complex)) (z (matrix complex)))
          (=>
            (is_a_ket_l a (- c2 l))
            (=>
              (is_a_ket_l x l)
              (=>
                (is_a_ket_l y l)
                (=>
                  (is_a_ket_l z (- (- n c2) l))
                  (= (path_sem1
                       (swap_lists 0 c2 l n)
                       (kronecker x (kronecker (kronecker a y) z))) (kronecker
                                                                    y
                                                                    (kronecker
                                                                    (kronecker
                                                                    a
                                                                    x)
                                                                    z))))))))))))

;; cascade_cont_rz_neg
(declare-fun cascade_cont_rz_neg (Int
  Int
  Int
  Int
  Int) circuit)

;; cascade_cont_rz_neg'def
(assert
  (forall ((first_k Int) (first_c Int) (t1 Int) (l Int) (n Int))
    (=>
      (and (<= 0 l) (< l n))
      (=>
        (and (<= 0 first_c) (< first_c n))
        (=>
          (and (<= 0 t1) (< t1 n))
          (=>
            (< (+ first_c l) n)
            (=>
              (<= 0 first_k)
              (=>
                (<= (+ first_k l) n)
                (=>
                  (=> (<= t1 (+ first_c l)) (< t1 first_c))
                  (ite (= l 0)
                    (= (cascade_cont_rz_neg first_k first_c t1 l n) (crzn_up
                                                                    first_c
                                                                    t1
                                                                    (- first_k)
                                                                    n
                                                                    n))
                    (= (cascade_cont_rz_neg first_k first_c t1 l n) (seq_diag
                                                                    (cascade_cont_rz_neg
                                                                    first_k
                                                                    first_c
                                                                    t1
                                                                    (- l 1)
                                                                    n)
                                                                    (crzn_up
                                                                    (+ first_c l)
                                                                    t1
                                                                    (- (+ first_k l))
                                                                    n
                                                                    n)))))))))))))

;; fc
(declare-fun fc686 (Int
  Int
  Int
  Int
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((first_k Int) (first_c Int) (t1 Int) (n Int) (x (Array Int Int)) (k Int))
    (= (select (fc686 first_k first_c t1 n x) k) (* (* (select x (+ first_c k)) (select x t1)) 
    (power
      2
      (- n (+ k first_k)))))))

;; cascade_cont_rz_neg'spec
(assert
  (forall ((first_k Int) (first_c Int) (t1 Int) (l Int) (n Int))
    (=>
      (and (<= 0 l) (< l n))
      (=>
        (and (<= 0 first_c) (< first_c n))
        (=>
          (and (<= 0 t1) (< t1 n))
          (=>
            (< (+ first_c l) n)
            (=>
              (<= 0 first_k)
              (=>
                (<= (+ first_k l) n)
                (=>
                  (=> (<= t1 (+ first_c l)) (< t1 first_c))
                  (and
                    (= (width1 (cascade_cont_rz_neg first_k first_c t1 l n)) n)
                    (and
                      (= (range1
                           (cascade_cont_rz_neg first_k first_c t1 l n)) 0)
                      (and
                        (= (ancillas1
                             (cascade_cont_rz_neg first_k first_c t1 l n)) 0)
                        (and
                          (<= (size1
                                (cascade_cont_rz_neg first_k first_c t1 l n)) (* 
                          cont_size1 (+ l 1)))
                          (and
                            (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
                              (=>
                                (and (<= 0 i) (< i n))
                                (=>
                                  (binary_l x n)
                                  (= (basis_ket1
                                       (cascade_cont_rz_neg
                                         first_k
                                         first_c
                                         t1
                                         l
                                         n)
                                       x
                                       y
                                       i) (select x i)))))
                            (forall ((x (Array Int Int)) (y (Array Int Int)))
                              (=>
                                (binary_l x n)
                                (= (ang_ind1
                                     (cascade_cont_rz_neg
                                       first_k
                                       first_c
                                       t1
                                       l
                                       n)
                                     x
                                     y) (infix_sldtsl
                                          (- (ind_isum
                                               (fc686 first_k first_c t1 n x)
                                               0
                                               (+ l 1)))
                                          n))))))))))))))))))

;; cascade_cont_qft
(declare-fun cascade_cont_qft (Int
  Int) circuit)

;; cascade_cont_qft'def
(assert
  (forall ((t1 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 (- n 1)))
      (= (cascade_cont_qft t1 n) (cascade_cont_rz_neg
                                   2
                                   (+ t1 1)
                                   t1
                                   (- n (+ t1 2))
                                   n)))))

;; fc
(declare-fun fc687 (Int
  Int
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc688 (Int
  Int
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((t1 Int) (n Int) (x (Array Int Int)) (k Int))
    (= (select (fc687 t1 n x) k) (* (* (select x (+ (+ t1 1) k)) (select x t1)) 
    (power
      2
      (- n (+ k 2)))))))

;; fc'def
(assert
  (forall ((t1 Int) (n Int) (x (Array Int Int)) (k Int))
    (= (select (fc688 t1 n x) k) (* (* (select x t1) (select x k)) (power
                                                                    2
                                                                    (+ (- (- n k) 1) t1))))))

;; cascade_cont_qft'spec
(assert
  (forall ((t1 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 (- n 1)))
      (and
        (= (width1 (cascade_cont_qft t1 n)) n)
        (and
          (<= (size1 (cascade_cont_qft t1 n)) (* cont_size1 (- (- n t1) 1)))
          (and
            (= (ancillas1 (cascade_cont_qft t1 n)) 0)
            (and
              (= (range1 (cascade_cont_qft t1 n)) 0)
              (and
                (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
                  (=>
                    (and (<= 0 i) (< i n))
                    (=>
                      (binary_l x n)
                      (= (basis_ket1 (cascade_cont_qft t1 n) x y i) (select x i)))))
                (and
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (=>
                      (binary_l x n)
                      (= (ang_ind1 (cascade_cont_qft t1 n) x y) (infix_sldtsl
                                                                  (- 
                                                                  (ind_isum
                                                                    (fc687
                                                                    t1
                                                                    n
                                                                    x)
                                                                    0
                                                                    (+ (- n (+ t1 2)) 1)))
                                                                  n))))
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (=>
                      (binary_l x n)
                      (= (ang_ind1 (cascade_cont_qft t1 n) x y) (infix_sldtsl
                                                                  (- 
                                                                  (ind_isum
                                                                    (fc688
                                                                    t1
                                                                    n
                                                                    x)
                                                                    (+ t1 1)
                                                                    n))
                                                                  n)))))))))))))

;; qft_rev_line
(declare-fun qft_rev_line (Int
  Int) circuit)

;; qft_rev_line'def
(assert
  (forall ((t1 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (ite (= t1 (- n 1))
        (= (qft_rev_line t1 n) (place_hadamard1 t1 n))
        (= (qft_rev_line t1 n) (seq_diag_right
                                 (place_hadamard1 t1 n)
                                 (cascade_cont_qft t1 n)))))))

;; fc
(declare-fun fc689 (Int
  Int
  (Array Int Int)
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((t1 Int) (n Int) (x (Array Int Int)) (y (Array Int Int)) (j Int))
    (= (select (fc689 t1 n x y) j) (* (* (select x j) (select y 0)) (power
                                                                    2
                                                                    (+ (- (- n j) 1) t1))))))

;; qft_rev_line'spec
(assert
  (forall ((t1 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (and
        (<= (size1 (qft_rev_line t1 n)) (+ (* cont_size1 (- (- n t1) 1)) 1))
        (and
          (= (ancillas1 (qft_rev_line t1 n)) 0)
          (and
            (= (width1 (qft_rev_line t1 n)) n)
            (and
              (= (range1 (qft_rev_line t1 n)) 1)
              (and
                (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
                  (=>
                    (and (<= 0 i) (< i n))
                    (=>
                      (binary_l x n)
                      (=>
                        (binary_l y 1)
                        (= (basis_ket1 (qft_rev_line t1 n) x y i) (ite (= i t1)
                                                                    (select y 0)
                                                                    (select x i)))))))
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (=>
                    (binary_l x n)
                    (=>
                      (binary_l y 1)
                      (= (ang_ind1 (qft_rev_line t1 n) x y) (infix_sldtsl
                                                              (- (ind_isum
                                                                   (fc689
                                                                    t1
                                                                    n
                                                                    x
                                                                    y)
                                                                   t1
                                                                   n))
                                                              n)))))))))))))

;; qft_rev_be
(declare-fun qft_rev_be (Int) circuit)

;; fc
(declare-fun fc690 (Int
  (Array Int Int)
  (Array Int Int)
  Int) (Array Int Int))

;; fc
(declare-fun fc691 (Int
  (Array Int Int)
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((n Int) (x (Array Int Int)) (y (Array Int Int)) (l Int) (k Int))
    (= (select (fc690 n x y l) k) (* (* (select x k) (select y l)) (power
                                                                    2
                                                                    (+ (- (- n k) 1) l))))))

;; fc'def
(assert
  (forall ((n Int) (x (Array Int Int)) (y (Array Int Int)) (l Int))
    (= (select (fc691 n x y) l) (- (ind_isum (fc690 n x y l) l n)))))

;; qft_rev_be'spec
(assert
  (forall ((n Int))
    (=>
      (< 0 n)
      (and
        (<= (size1 (qft_rev_be n)) (+ (* cont_size1 (ind_isum identity2 0 n)) n))
        (and
          (= (ancillas1 (qft_rev_be n)) 0)
          (and
            (= (width1 (qft_rev_be n)) n)
            (and
              (= (range1 (qft_rev_be n)) n)
              (and
                (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
                  (=>
                    (and (<= 0 i) (< i n))
                    (=>
                      (binary_l x n)
                      (=>
                        (binary_l y n)
                        (= (basis_ket1 (qft_rev_be n) x y i) (select y i))))))
                (forall ((x (Array Int Int)) (y (Array Int Int)))
                  (=>
                    (binary_l x n)
                    (=>
                      (binary_l y n)
                      (= (ang_ind1 (qft_rev_be n) x y) (infix_sldtsl
                                                         (ind_isum
                                                           (fc691 n x y)
                                                           0
                                                           n)
                                                         n)))))))))))))

;; qft_rev_coeff
(declare-fun qft_rev_coeff (bitvec
  bitvec
  Int) complex)

;; qft_rev_coeff'def
(assert
  (forall ((x bitvec) (y bitvec) (n Int))
    (=>
      (< 0 n)
      (= (qft_rev_coeff x y n) (ang_exp
                                 (real_to_ang
                                   (infix_asdt
                                     (infix_asdt
                                       (i_to_c (- (bv_to_int x)))
                                       (i_to_c (bv_to_int (bv_inversion y))))
                                     (pow_inv_2 n))))))))

;; fc
(declare-fun fc692 (bitvec
  bitvec
  Int
  Int) (Array Int Int))

;; fc
(declare-fun fc693 (bitvec
  bitvec
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((x bitvec) (y bitvec) (n Int) (l Int) (k Int))
    (= (select (fc692 x y n l) k) (* (* (select (value x) k) (select 
    (value
      y) l)) (power 2 (+ (- (- n k) 1) l))))))

;; fc'def
(assert
  (forall ((x bitvec) (y bitvec) (n Int) (l Int))
    (= (select (fc693 x y n) l) (- (ind_isum (fc692 x y n l) l n)))))

;; qft_rev_coeff'spec
(assert
  (forall ((x bitvec) (y bitvec) (n Int))
    (=>
      (< 0 n)
      (=>
        (= (length x) n)
        (=>
          (= (length y) n)
          (= (qft_rev_coeff x y n) (ang_exp
                                     (infix_sldtsl
                                       (ind_isum (fc693 x y n) 0 n)
                                       n))))))))

;; fc
(declare-fun fc694 (Int
  (matrix complex)) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((n Int) (x (matrix complex)) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc694 n x))
           (t2tb77 y))) (infix_asdtdt
                          (qft_rev_coeff (ket_to_bv x) y n)
                          (bv_to_ket y)))))

;; path_sem_rev_qft_unit_be
(assert
  (forall ((n Int))
    (=>
      (< 0 n)
      (forall ((x (matrix complex)))
        (=>
          (is_a_ket_l x n)
          (=>
            (is_a_ket_basis_elt x)
            (= (path_sem1 (qft_rev_be n) x) (infix_asdtdt
                                              (pow_inv_sqrt_2 n)
                                              (ket_sum_l
                                                bitvec1
                                                (t2tb79 (n_bvs n))
                                                (t2tb80 (fc694 n x))
                                                n)))))))))

;; int_qft_rev_coeff
(declare-fun int_qft_rev_coeff (Int
  Int
  Int) complex)

;; int_qft_rev_coeff'def
(assert
  (forall ((i Int) (j Int) (n Int))
    (=>
      (< 0 n)
      (= (int_qft_rev_coeff i j n) (ang_exp
                                     (real_to_ang
                                       (infix_asdt
                                         (infix_asdt
                                           (i_to_c (mod (- i) (power 2 n)))
                                           (i_to_c
                                             (int_bit_inversion
                                               (mod j (power 2 n))
                                               n)))
                                         (pow_inv_2 n))))))))

;; int_qft_rev_coeff'spec
(assert
  (forall ((i Int) (j Int) (n Int))
    (=>
      (< 0 n)
      (and
        (= (int_qft_rev_coeff i j n) (ang_exp
                                       (real_to_ang
                                         (infix_asdt
                                           (infix_asdt
                                             (i_to_c (- (mod i (power 2 n))))
                                             (i_to_c
                                               (int_bit_inversion
                                                 (mod j (power 2 n))
                                                 n)))
                                           (pow_inv_2 n)))))
        (= (int_qft_rev_coeff i j n) (qft_rev_coeff
                                       (int_to_bv (mod i (power 2 n)) n)
                                       (int_to_bv (mod j (power 2 n)) n)
                                       n))))))

;; qft_rev_coeff_int_to_ang
(assert
  (forall ((x bitvec) (y bitvec) (n Int))
    (=>
      (< 0 n)
      (=>
        (= (length x) n)
        (=>
          (= (length y) n)
          (= (qft_rev_coeff x y n) (ang_exp
                                     (infix_sldtsl
                                       (* (- (bv_to_int x)) (bv_to_int
                                                              (bv_inversion
                                                                y)))
                                       n))))))))

;; fc
(declare-fun fc695 (Int
  Int) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((i Int) (n Int) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc695 i n))
           (t2tb77 y))) (infix_asdtdt
                          (qft_rev_coeff (int_to_bv i n) y n)
                          (bv_to_ket y)))))

;; path_sem_rev_qft_ket_be
(assert
  (forall ((i Int) (n Int))
    (=>
      (< 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (= (path_sem1 (qft_rev_be n) (ket n i)) (infix_asdtdt
                                                  (pow_inv_sqrt_2 n)
                                                  (ket_sum_l
                                                    bitvec1
                                                    (t2tb79 (n_bvs n))
                                                    (t2tb80 (fc695 i n))
                                                    n)))))))

;; get_path_sem_rev_qft_ket_be
(assert
  (forall ((i Int) (j Int) (n Int))
    (=>
      (< 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (=>
          (and (<= 0 j) (< j (power 2 n)))
          (= (tb2t
               (get
                 complex1
                 (t2tb65 (path_sem1 (qft_rev_be n) (ket n i)))
                 j
                 0)) (infix_asdt
                       (pow_inv_sqrt_2 n)
                       (qft_rev_coeff (int_to_bv i n) (int_to_bv j n) n))))))))

;; fc
(declare-fun fc696 (Int
  Int) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((i Int) (n Int) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc696 i n))
           (t2tb77 y))) (infix_asdtdt
                          (int_qft_rev_coeff i (bv_to_int y) n)
                          (bv_to_ket y)))))

;; path_sem_rev_qft_ket_ind_be
(assert
  (forall ((i Int) (n Int))
    (=>
      (< 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (= (path_sem1 (qft_rev_be n) (ket n i)) (infix_asdtdt
                                                  (pow_inv_sqrt_2 n)
                                                  (ket_sum_l
                                                    bitvec1
                                                    (t2tb79 (n_bvs n))
                                                    (t2tb80 (fc696 i n))
                                                    n)))))))

;; fc
(declare-fun fc697 (Int
  bitvec) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((n Int) (x bitvec) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc697 n x))
           (t2tb77 y))) (infix_asdtdt (qft_rev_coeff x y n) (bv_to_ket y)))))

;; path_sem_rev_qft_bv_be
(assert
  (forall ((n Int))
    (=>
      (< 0 n)
      (forall ((x bitvec))
        (=>
          (= (length x) n)
          (= (path_sem1 (qft_rev_be n) (bv_to_ket x)) (infix_asdtdt
                                                        (pow_inv_sqrt_2 n)
                                                        (ket_sum_l
                                                          bitvec1
                                                          (t2tb79 (n_bvs n))
                                                          (t2tb80
                                                            (fc697 n x))
                                                          n))))))))

;; int_qft_rev_coeff_expo
(assert
  (forall ((i Int) (j Int) (n Int))
    (=>
      (< 0 n)
      (= (int_qft_rev_coeff i j n) (cpower
                                     (ang_exp
                                       (real_to_ang
                                         (infix_asdt
                                           (i_to_c (- (mod i (power 2 n))))
                                           (pow_inv_2 n))))
                                     (int_bit_inversion
                                       (mod j (power 2 n))
                                       n))))))

;; qft_rev
(declare-fun qft_rev (Int) circuit)

;; qft_rev'def
(assert
  (forall ((n Int))
    (=>
      (< 0 n)
      (ite (= n 1)
        (= (qft_rev n) (qft_rev_be n))
        (ite (= n 2)
          (= (qft_rev n) (infix_mnmn (qft_rev_be n) bricks_swap))
          (= (qft_rev n) (infix_mnmn
                           (qft_rev_be n)
                           (permutation_circuit1
                             n
                             (tb2t7
                               (infix_at
                                 (infix_mngt int int)
                                 int
                                 (t2tb9 infix_mn_closure)
                                 (t2tb8 (- n 1))))))))))))

;; fc
(declare-fun fc698 (Int
  bitvec) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((n Int) (x bitvec) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc698 n x))
           (t2tb77 y))) (infix_asdtdt
                          (qft_rev_coeff x (bv_inversion y) n)
                          (bv_to_ket y)))))

;; qft_rev'spec
(assert
  (forall ((n Int))
    (=>
      (< 0 n)
      (and
        (<= (size1 (qft_rev n)) (polysquare n cont_size1 0 0))
        (and
          (= (ancillas1 (qft_rev n)) 0)
          (and
            (= (width1 (qft_rev n)) n)
            (and
              (forall ((x bitvec))
                (=>
                  (= (length x) n)
                  (= (path_sem1 (qft_rev n) (bv_to_ket x)) (infix_asdtdt
                                                             (pow_inv_sqrt_2
                                                               n)
                                                             (ket_sum_l
                                                               bitvec1
                                                               (t2tb79
                                                                 (n_bvs n))
                                                               (t2tb80
                                                                 (fc698 n x))
                                                               n)))))
              (forall ((x bitvec))
                (forall ((i Int))
                  (=>
                    (= (length x) n)
                    (=>
                      (and (<= 0 i) (< i (power 2 n)))
                      (= (tb2t
                           (get
                             complex1
                             (t2tb65 (path_sem1 (qft_rev n) (bv_to_ket x)))
                             i
                             0)) (infix_asdt
                                   (pow_inv_sqrt_2 n)
                                   (qft_rev_coeff
                                     x
                                     (bv_inversion (int_to_bv i n))
                                     n))))))))))))))

;; infix <=>
(declare-fun infix_lseqgt (circuit
  circuit) Bool)

;; infix <=>'def
(assert
  (forall ((c circuit) (cqt circuit))
    (=
      (infix_lseqgt c cqt)
      (and
        (= (width1 c) (width1 cqt))
        (forall ((x (matrix complex)))
          (=>
            (is_a_ket_l x (width1 c))
            (=>
              (is_a_ket_basis_elt x)
              (= (path_sem_basis1 c x) (path_sem_basis1 cqt x)))))))))

;; set_equiv_circuits_basis
(assert
  (forall ((c circuit) (cqt circuit))
    (=>
      (= (width1 c) (width1 cqt))
      (=>
        (forall ((x (matrix complex)))
          (=>
            (is_a_ket_l x (width1 c))
            (=>
              (is_a_ket_basis_elt x)
              (= (path_sem_basis1 c x) (path_sem_basis1 cqt x)))))
        (infix_lseqgt c cqt)))))

;; set_equiv_circuits_bv
(assert
  (forall ((c circuit) (cqt circuit))
    (=>
      (= (width1 c) (width1 cqt))
      (=>
        (forall ((x bitvec))
          (=>
            (= (length x) (width1 c))
            (= (path_sem1 c (bv_to_ket x)) (path_sem1 cqt (bv_to_ket x)))))
        (infix_lseqgt c cqt)))))

;; set_equiv_circuits
(assert
  (forall ((c circuit) (cqt circuit))
    (=>
      (= (width1 c) (width1 cqt))
      (=>
        (forall ((x (matrix complex)))
          (=>
            (is_a_ket_l x (width1 c))
            (=> (is_a_ket_basis_elt x) (= (path_sem1 c x) (path_sem1 cqt x)))))
        (infix_lseqgt c cqt)))))

;; set_equiv_circuits_path_sem
(assert
  (forall ((c circuit) (cqt circuit))
    (=>
      (= (width1 c) (width1 cqt))
      (=>
        (= (range1 c) (range1 cqt))
        (=>
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (=>
              (binary_l x (width1 c))
              (=>
                (binary_l y (range1 c))
                (= (ang_ind1 c x y) (ang_ind1 cqt x y)))))
          (=>
            (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
              (=>
                (binary_l x (width1 c))
                (=>
                  (binary_l y (range1 c))
                  (=>
                    (and (<= 0 i) (< i (width1 c)))
                    (= (basis_ket1 c x y i) (basis_ket1 cqt x y i))))))
            (infix_lseqgt c cqt)))))))

;; get_equiv_circuits_basis
(assert
  (forall ((c1 circuit) (c2 circuit) (x (matrix complex)))
    (=>
      (infix_lseqgt c1 c2)
      (=>
        (is_a_ket_l x (width1 c1))
        (=>
          (is_a_ket_basis_elt x)
          (= (path_sem_basis1 c1 x) (path_sem_basis1 c2 x)))))))

;; get_equiv_circuits
(assert
  (forall ((c1 circuit) (c2 circuit) (x (matrix complex)))
    (=>
      (infix_lseqgt c1 c2)
      (=> (is_a_ket_l x (width1 c1)) (= (path_sem1 c1 x) (path_sem1 c2 x))))))

;; get_correct_path_sum_equiv
(assert
  (forall ((c1 circuit) (c2 circuit) (h pps))
    (=>
      (infix_lseqgt c1 c2)
      (=> (correct_path_sum c1 h) (correct_path_sum c2 h)))))

;; get_equiv_circuits_width
(assert
  (forall ((c1 circuit) (c2 circuit))
    (=> (infix_lseqgt c1 c2) (= (width1 c1) (width1 c2)))))

;; refl_circuit_equiv
(assert
  (forall ((c circuit) (cqt circuit)) (=> (= c cqt) (infix_lseqgt c cqt))))

;; sym_circuit_equiv
(assert
  (forall ((c circuit) (cqt circuit))
    (=> (infix_lseqgt c cqt) (infix_lseqgt cqt c))))

;; transitive_circuit_equiv
(assert
  (forall ((c circuit) (cqt circuit) (cqtqt circuit))
    (=>
      (infix_lseqgt c cqt)
      (=> (infix_lseqgt cqt cqtqt) (infix_lseqgt c cqtqt)))))

;; sequence_assoc
(assert
  (forall ((c circuit) (cqt circuit) (cqtqt circuit))
    (=>
      (and (= (width1 c) (width1 cqt)) (= (width1 cqt) (width1 cqtqt)))
      (infix_lseqgt
        (infix_mnmn (infix_mnmn c cqt) cqtqt)
        (infix_mnmn c (infix_mnmn cqt cqtqt))))))

;; parallel_assoc
(assert
  (forall ((c circuit) (cqt circuit) (cqtqt circuit))
    (=>
      (and (= (width1 c) (width1 cqt)) (= (width1 cqt) (width1 cqtqt)))
      (infix_lseqgt
        (infix_slsl (infix_slsl c cqt) cqtqt)
        (infix_slsl c (infix_slsl cqt cqtqt))))))

;; sequence_equiv
(assert
  (forall ((c1 circuit) (c2 circuit) (c3 circuit) (c4 circuit))
    (=>
      (infix_lseqgt c1 c2)
      (=>
        (infix_lseqgt c3 c4)
        (=>
          (= (width1 c1) (width1 c3))
          (infix_lseqgt (infix_mnmn c1 c3) (infix_mnmn c2 c4)))))))

;; parallel_equiv
(assert
  (forall ((c1 circuit) (c2 circuit) (c3 circuit) (c4 circuit))
    (=>
      (infix_lseqgt c1 c2)
      (=>
        (infix_lseqgt c3 c4)
        (infix_lseqgt (infix_slsl c1 c3) (infix_slsl c2 c4))))))

;; place_equiv
(assert
  (forall ((c circuit) (cqt circuit) (k Int) (n Int) (kqt Int) (nqt Int))
    (=>
      (<= 0 k)
      (=>
        (<= (+ (width1 c) k) n)
        (=>
          (infix_lseqgt c cqt)
          (=>
            (= k kqt)
            (=> (= n nqt) (infix_lseqgt (place1 c k n) (place1 cqt kqt nqt)))))))))

;; cont_equiv
(assert
  (forall ((c circuit) (cqt circuit) (co Int) (k Int) (n Int) (coqt Int) (kqt Int) (nqt Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 k) (<= k (- n (width1 c))))
        (=>
          (=> (<= k co) (<= (+ k (width1 c)) co))
          (=>
            (infix_lseqgt c cqt)
            (=>
              (= co coqt)
              (=>
                (= k kqt)
                (=>
                  (= n nqt)
                  (infix_lseqgt (cont1 c co k n) (cont1 cqt coqt kqt nqt)))))))))))

;; remove_parallel
(declare-fun remove_parallel (circuit
  circuit) circuit)

;; remove_parallel'def
(assert
  (forall ((c circuit) (cqt circuit))
    (= (remove_parallel c cqt) (infix_mnmn
                                 (place1 c 0 (+ (width1 c) (width1 cqt)))
                                 (place1
                                   cqt
                                   (width1 c)
                                   (+ (width1 c) (width1 cqt)))))))

;; remove_parallel'spec
(assert
  (forall ((c circuit) (cqt circuit))
    (infix_lseqgt (remove_parallel c cqt) (infix_slsl c cqt))))

;; par_seq_commut
(assert
  (forall ((a circuit) (b circuit) (c circuit) (d circuit))
    (=>
      (= (width1 a) (width1 c))
      (=>
        (= (width1 b) (width1 d))
        (infix_lseqgt
          (infix_mnmn (infix_slsl a b) (infix_slsl c d))
          (infix_slsl (infix_mnmn a c) (infix_mnmn b d)))))))

;; with_permutation_equiv
(assert
  (forall ((c circuit) (d circuit) (f (Array Int Int)))
    (=>
      (infix_lseqgt c d)
      (=>
        (p_bijective1 f (to_fset 0 (width1 c)) (to_fset 0 (width1 c)))
        (infix_lseqgt (with_permutation1 c f) (with_permutation1 d f))))))

;; insert_qbits_equiv
(assert
  (forall ((c circuit) (d circuit) (k Int) (n Int) (i Int))
    (=>
      (= (width1 c) n)
      (=>
        (and (<= 0 k) (< k n))
        (=>
          (< 0 i)
          (=>
            (infix_lseqgt c d)
            (infix_lseqgt (insert_qbits1 c k n i) (insert_qbits1 d k n i))))))))

;; seq_flat
(declare-fun seq_flat (circuit
  circuit) circuit)

;; seq_flat'def
(assert
  (forall ((d circuit) (e circuit))
    (=>
      (= (width1 d) (width1 e))
      (=>
        (= (range1 d) 0)
        (=> (= (range1 e) 0) (= (seq_flat d e) (infix_mnmn d e)))))))

;; seq_flat'spec
(assert
  (forall ((d circuit) (e circuit))
    (=>
      (= (width1 d) (width1 e))
      (=>
        (= (range1 d) 0)
        (=>
          (= (range1 e) 0)
          (and
            (= (size1 (seq_flat d e)) (+ (size1 d) (size1 e)))
            (and
              (= (ancillas1 (seq_flat d e)) (max (ancillas1 d) (ancillas1 e)))
              (and
                (= (pre1 (seq_flat d e)) (Sequence1 (pre1 d) (pre1 e)))
                (and
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (forall ((i Int))
                      (=>
                        (binary_l x (width1 d))
                        (=>
                          (and (<= 0 i) (< i (width1 d)))
                          (= (basis_ket1 (seq_flat d e) x y i) (basis_ket1
                                                                 e
                                                                 (select (select (select 
                                                                 basis_ket_closure1 d) x) y)
                                                                 y
                                                                 i))))))
                  (and
                    (= (width1 (seq_flat d e)) (width1 d))
                    (and
                      (= (range1 (seq_flat d e)) 0)
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (=>
                          (binary_l x (width1 d))
                          (= (ang_ind1 (seq_flat d e) x y) (ang_add
                                                             (ang_ind1 d x y)
                                                             (ang_ind1
                                                               e
                                                               (select (select (select 
                                                               basis_ket_closure1 d) x) y)
                                                               y))))))))))))))))

;; cont_flat
(declare-fun cont_flat (circuit
  Int
  Int
  Int) circuit)

;; cont_flat'def
(assert
  (forall ((c circuit) (co Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 t1) (<= t1 (- n (width1 c))))
        (=>
          (=> (<= t1 co) (<= (+ t1 (width1 c)) co))
          (=> (= (range1 c) 0) (= (cont_flat c co t1 n) (cont1 c co t1 n))))))))

;; fc
(declare-fun fc699 (Int
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc700 (Int
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((t1 Int) (x (Array Int Int)) (j Int))
    (= (select (fc699 t1 x) j) (select x (+ j t1)))))

;; fc'def
(assert
  (forall ((t1 Int) (x (Array Int Int)) (j Int))
    (= (select (fc700 t1 x) j) (select x (+ j t1)))))

;; cont_flat'spec
(assert
  (forall ((c circuit) (co Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 t1) (<= t1 (- n (width1 c))))
        (=>
          (=> (<= t1 co) (<= (+ t1 (width1 c)) co))
          (=>
            (= (range1 c) 0)
            (and
              (= (ancillas1 (cont_flat c co t1 n)) (ancillas1 c))
              (and
                (<= (size1 (cont_flat c co t1 n)) (* cont_size1 (size1 c)))
                (and
                  (= (pre1 (cont_flat c co t1 n)) (Cont (pre1 c) co t1 n))
                  (and
                    (= (width1 (cont_flat c co t1 n)) n)
                    (and
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (forall ((i Int))
                          (=>
                            (binary_l x (width1 c))
                            (=>
                              (and (<= 0 i) (< i (width1 c)))
                              (= (basis_ket1 (cont_flat c co t1 n) x y i) 
                              (ite (and
                                     (= (select x co) 1)
                                     (and (<= t1 i) (< i (+ t1 (width1 c)))))
                                (basis_ket1 c (fc699 t1 x) y (- i t1))
                                (select x i)))))))
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (=>
                          (binary_l x (width1 c))
                          (= (ang_ind1 (cont_flat c co t1 n) x y) (ang_mult_int
                                                                    (ang_ind1
                                                                    c
                                                                    (fc700
                                                                    t1
                                                                    x)
                                                                    y)
                                                                    (select x co))))))))))))))))

;; seq_flat_right
(declare-fun seq_flat_right (circuit
  circuit) circuit)

;; seq_flat_right'def
(assert
  (forall ((d circuit) (e circuit))
    (=>
      (= (width1 d) (width1 e))
      (=> (= (range1 e) 0) (= (seq_flat_right d e) (infix_mnmn d e))))))

;; fc
(declare-fun fc701 (circuit
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc702 (circuit
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((d circuit) (y (Array Int Int)) (k Int))
    (= (select (fc701 d y) k) (select y (+ k (range1 d))))))

;; fc'def
(assert
  (forall ((d circuit) (y (Array Int Int)) (k Int))
    (= (select (fc702 d y) k) (select y (+ k (range1 d))))))

;; seq_flat_right'spec
(assert
  (forall ((d circuit) (e circuit))
    (=>
      (= (width1 d) (width1 e))
      (=>
        (= (range1 e) 0)
        (and
          (= (size1 (seq_flat_right d e)) (+ (size1 d) (size1 e)))
          (and
            (= (ancillas1 (seq_flat_right d e)) (max
                                                  (ancillas1 d)
                                                  (ancillas1 e)))
            (and
              (= (pre1 (seq_flat_right d e)) (Sequence1 (pre1 d) (pre1 e)))
              (and
                (= (width1 (seq_flat_right d e)) (width1 d))
                (and
                  (= (range1 (seq_flat_right d e)) (range1 d))
                  (and
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (forall ((i Int))
                        (=>
                          (and (<= 0 i) (< i (width1 d)))
                          (=>
                            (binary_l x (width1 (seq_flat_right d e)))
                            (= (basis_ket1 (seq_flat_right d e) x y i) 
                            (basis_ket1
                              e
                              (select (select (select basis_ket_closure1 d) x) y)
                              (fc701 d y)
                              i))))))
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (=>
                        (binary_l x (width1 (seq_flat_right d e)))
                        (= (ang_ind1 (seq_flat_right d e) x y) (ang_add
                                                                 (ang_ind1
                                                                   d
                                                                   x
                                                                   y)
                                                                 (ang_ind1
                                                                   e
                                                                   (select (select (select 
                                                                   basis_ket_closure1 d) x) y)
                                                                   (fc702
                                                                    d
                                                                    y))))))))))))))))

;; seq_flat_left
(declare-fun seq_flat_left (circuit
  circuit) circuit)

;; seq_flat_left'def
(assert
  (forall ((d circuit) (e circuit))
    (=>
      (= (width1 d) (width1 e))
      (=> (= (range1 d) 0) (= (seq_flat_left d e) (infix_mnmn d e))))))

;; seq_flat_left'spec
(assert
  (forall ((d circuit) (e circuit))
    (=>
      (= (width1 d) (width1 e))
      (=>
        (= (range1 d) 0)
        (and
          (= (size1 (seq_flat_left d e)) (+ (size1 d) (size1 e)))
          (and
            (= (ancillas1 (seq_flat_left d e)) (max
                                                 (ancillas1 d)
                                                 (ancillas1 e)))
            (and
              (= (pre1 (seq_flat_left d e)) (Sequence1 (pre1 d) (pre1 e)))
              (and
                (= (width1 (seq_flat_left d e)) (width1 d))
                (and
                  (= (range1 (seq_flat_left d e)) (range1 e))
                  (and
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (forall ((i Int))
                        (=>
                          (and (<= 0 i) (< i (width1 d)))
                          (=>
                            (binary_l x (width1 d))
                            (= (basis_ket1 (seq_flat_left d e) x y i) 
                            (basis_ket1
                              e
                              (select (select (select basis_ket_closure1 d) x) y)
                              y
                              i))))))
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (=>
                        (binary_l x (width1 (seq_flat_left d e)))
                        (= (ang_ind1 (seq_flat_left d e) x y) (ang_add
                                                                (ang_ind1
                                                                  d
                                                                  x
                                                                  y)
                                                                (ang_ind1
                                                                  e
                                                                  (select (select (select 
                                                                  basis_ket_closure1 d) x) y)
                                                                  y)))))))))))))))

;; path_sem_flat
(assert
  (forall ((d circuit) (x bitvec))
    (=>
      (= (length x) (width1 d))
      (=>
        (= (range1 d) 0)
        (= (path_sem1 d (bv_to_ket x)) (infix_asdtdt
                                         (ang_exp
                                           (ang_ind1 d (value x) identity2))
                                         (bv_to_ket
                                           (make_bv
                                             (select (select (select 
                                             basis_ket_closure1 d) (value x)) 
                                             identity2)
                                             (width1 d)))))))))

;; path_sem_flat_gen
(assert
  (forall ((d circuit))
    (=>
      (= (range1 d) 0)
      (forall ((x bitvec))
        (=>
          (= (length x) (width1 d))
          (= (path_sem1 d (bv_to_ket x)) (infix_asdtdt
                                           (ang_exp
                                             (ang_ind1 d (value x) identity2))
                                           (bv_to_ket
                                             (make_bv
                                               (select (select (select 
                                               basis_ket_closure1 d) 
                                               (value
                                                 x)) identity2)
                                               (width1 d))))))))))

;; circuit_equiv_by_unwire
(assert
  (forall ((c circuit) (d circuit))
    (=> (= (unwire c) (unwire d)) (infix_lseqgt c d))))

;; circuit_equiv_by_unwire_equiv
(assert
  (forall ((c circuit) (d circuit))
    (=>
      (forall ((x (matrix complex)))
        (=>
          (is_a_ket_basis_elt x)
          (=>
            (is_a_ket_l x (width1 c))
            (= (path_sem (unwire c) x) (path_sem (unwire d) x)))))
      (=> (= (width1 c) (width1 d)) (infix_lseqgt c d)))))

;; place_place
(assert
  (forall ((c circuit) (k Int) (kqt Int) (n Int) (nqt Int))
    (=>
      (<= 0 k)
      (=>
        (<= (+ (width1 c) k) n)
        (=>
          (<= 0 kqt)
          (=>
            (<= (+ n kqt) nqt)
            (infix_lseqgt
              (place1 (place1 c k n) kqt nqt)
              (place1 c (+ k kqt) nqt))))))))

;; place_cont
(assert
  (forall ((c circuit) (co Int) (k Int) (kqt Int) (n Int) (nqt Int))
    (=>
      (<= 0 k)
      (=>
        (and (<= 0 co) (< co n))
        (=>
          (<= (+ (width1 c) k) n)
          (=>
            (<= 0 kqt)
            (=>
              (<= (+ n kqt) nqt)
              (=>
                (=> (<= k co) (<= (+ k (width1 c)) co))
                (infix_lseqgt
                  (place1 (cont1 c co k n) kqt nqt)
                  (cont1 c (+ co kqt) (+ k kqt) nqt))))))))))

;; cont_place
(assert
  (forall ((c circuit) (co Int) (k Int) (kqt Int) (n Int) (nqt Int))
    (=>
      (<= 0 k)
      (=>
        (<= (+ (width1 c) k) n)
        (=>
          (and (<= 0 co) (< co nqt))
          (=>
            (<= 0 kqt)
            (=>
              (<= (+ n kqt) nqt)
              (=>
                (=> (<= kqt co) (<= (+ kqt n) co))
                (infix_lseqgt
                  (cont1 (place1 c k n) co kqt nqt)
                  (cont1 c co (+ k kqt) nqt))))))))))

;; cont_sequence_comm
(assert
  (forall ((co Int) (k Int) (n Int) (c circuit) (d circuit))
    (=>
      (<= 0 k)
      (=>
        (<= (+ (width1 c) k) n)
        (=>
          (=> (<= k co) (<= (+ k (width1 c)) co))
          (=>
            (= (width1 c) (width1 d))
            (=>
              (and (<= 0 co) (< co n))
              (infix_lseqgt
                (cont1 (infix_mnmn c d) co k n)
                (infix_mnmn (cont1 c co k n) (cont1 d co k n))))))))))

;; cont_sequence
(assert
  (forall ((co Int) (k Int) (n Int) (c circuit) (d circuit))
    (=>
      (<= 0 k)
      (=>
        (<= (+ (width1 c) k) n)
        (=>
          (=> (<= k co) (<= (+ k n) co))
          (=>
            (= (width1 c) (width1 d))
            (=>
              (and (<= 0 co) (< co n))
              (infix_lseqgt
                (infix_mnmn (cont1 c co k n) (cont1 d co k n))
                (cont1 (infix_mnmn c d) co k n)))))))))

;; place_sequence_comm
(assert
  (forall ((k Int) (n Int) (c circuit) (d circuit))
    (=>
      (<= 0 k)
      (=>
        (<= (+ (width1 c) k) n)
        (=>
          (= (width1 c) (width1 d))
          (infix_lseqgt
            (place1 (infix_mnmn c d) k n)
            (infix_mnmn (place1 c k n) (place1 d k n))))))))

;; place_sequence
(assert
  (forall ((k Int) (n Int) (c circuit) (d circuit))
    (=>
      (<= 0 k)
      (=>
        (<= (+ (width1 c) k) n)
        (=>
          (= (width1 c) (width1 d))
          (infix_lseqgt
            (infix_mnmn (place1 c k n) (place1 d k n))
            (place1 (infix_mnmn c d) k n)))))))

;; hadamard_zero
(assert
  (= (path_sem1 hadamard1 (ket 1 0)) (pps_apply pps_hadamard (ket 1 0))))

;; hadamard_one
(assert
  (= (path_sem1 hadamard1 (ket 1 1)) (pps_apply pps_hadamard (ket 1 1))))

;; hadamard_plus
(assert
  (= (path_sem1 hadamard1 (pps_apply pps_hadamard (ket 1 0))) (ket 1 0)))

;; hadamard_minus
(assert
  (= (path_sem1 hadamard1 (pps_apply pps_hadamard (ket 1 1))) (ket 1 1)))

;; xx_zero
(assert (= (path_sem1 xx1 (ket 1 0)) (ket 1 1)))

;; xx_one
(assert (= (path_sem1 xx1 (ket 1 1)) (ket 1 0)))

;; xx_plus
(assert
  (= (path_sem1 xx1 (pps_apply pps_hadamard (ket 1 0))) (pps_apply
                                                          pps_hadamard
                                                          (ket 1 0))))

;; xx_minus
(assert
  (= (path_sem1 xx1 (pps_apply pps_hadamard (ket 1 1))) (infix_asdtdt
                                                          (prefix_mndt c_one)
                                                          (pps_apply
                                                            pps_hadamard
                                                            (ket 1 1)))))

;; xx_invol
(assert
  (forall ((x (matrix complex)))
    (=> (is_a_ket_l x 1) (= (path_sem1 xx1 (path_sem1 xx1 x)) x))))

;; zz_zero
(assert (= (path_sem1 zz1 (ket 1 0)) (ket 1 0)))

;; zz_one
(assert
  (= (path_sem1 zz1 (ket 1 1)) (infix_asdtdt (prefix_mndt c_one) (ket 1 1))))

;; zz_invol
(assert
  (forall ((x (matrix complex)))
    (=> (is_a_ket_l x 1) (= (path_sem1 zz1 (path_sem1 zz1 x)) x))))

;; zz_plus
(assert
  (= (path_sem1 zz1 (pps_apply pps_hadamard (ket 1 0))) (pps_apply
                                                          pps_hadamard
                                                          (ket 1 1))))

;; zz_minus
(assert
  (= (path_sem1 zz1 (pps_apply pps_hadamard (ket 1 1))) (pps_apply
                                                          pps_hadamard
                                                          (ket 1 0))))

;; ry_zero
(assert (forall ((k Int)) (= (path_sem1 (ry1 k) (ket 1 0)) (ket_zero_y k))))

;; ry_one
(assert (forall ((k Int)) (= (path_sem1 (ry1 k) (ket 1 1)) (ket_one_y k))))

;; yy_zero
(assert (= (path_sem1 yy1 (ket 1 0)) (infix_asdtdt im (ket_zero_y 1))))

;; yy_one
(assert (= (path_sem1 yy1 (ket 1 1)) (infix_asdtdt im (ket_one_y 1))))

;; ry_add_opp
(assert
  (forall ((x (matrix complex)) (k Int))
    (=> (is_a_ket_l x 1) (= (path_sem1 (ry1 (- k)) (path_sem1 (ry1 k) x)) x))))

;; ry_twice
(assert
  (forall ((x (matrix complex)) (k Int))
    (=>
      (is_a_ket_l x 1)
      (= (path_sem1 (ry1 (incr_abs k)) (path_sem1 (ry1 (incr_abs k)) x)) 
      (path_sem1
        (ry1 k)
        x)))))

;; rz_zero
(assert
  (forall ((k Int))
    (= (path_sem1 (rz1 k) (ket 1 0)) (infix_asdtdt
                                       (ang_exp
                                         (infix_sldtsl (- 1) (incr_abs k)))
                                       (ket 1 0)))))

;; rz_one
(assert
  (forall ((k Int))
    (= (path_sem1 (rz1 k) (ket 1 1)) (infix_asdtdt
                                       (ang_exp
                                         (infix_sldtsl 1 (incr_abs k)))
                                       (ket 1 1)))))

;; ry_inv
(assert
  (forall ((k Int) (x (matrix complex)))
    (=>
      (is_a_ket_l x 1)
      (= (path_sem1 xx1 (path_sem1 (ry1 k) x)) (path_sem1
                                                 (ry1 (- k))
                                                 (path_sem1 xx1 x))))))

;; ry_inv_rev
(assert
  (forall ((k Int) (x (matrix complex)))
    (=>
      (is_a_ket_l x 1)
      (= (path_sem1 (ry1 (- k)) (path_sem1 xx1 x)) (path_sem1
                                                     xx1
                                                     (path_sem1 (ry1 k) x))))))

;; rz_inv
(assert
  (forall ((k Int) (x (matrix complex)))
    (=>
      (is_a_ket_l x 1)
      (= (path_sem1 xx1 (path_sem1 (rz1 k) x)) (path_sem1
                                                 (rz1 (- k))
                                                 (path_sem1 xx1 x))))))

;; rz_inv_rev
(assert
  (forall ((k Int) (x (matrix complex)))
    (=>
      (is_a_ket_l x 1)
      (= (path_sem1 (rz1 (- k)) (path_sem1 xx1 x)) (path_sem1
                                                     xx1
                                                     (path_sem1 (rz1 k) x))))))

;; rzp_zero
(assert (forall ((k Int)) (= (path_sem1 (rzp k) (ket 1 0)) (ket 1 0))))

;; path_sem_phase
(assert
  (forall ((k Int) (x (matrix complex)))
    (=>
      (is_a_ket_l x 1)
      (= (path_sem1 (phase1 k) x) (infix_asdtdt
                                    (ang_exp (infix_sldtsl 1 k))
                                    x)))))

;; rzp_one
(assert
  (forall ((k Int))
    (= (path_sem1 (rzp k) (ket 1 1)) (infix_asdtdt
                                       (ang_exp (infix_sldtsl 1 k))
                                       (ket 1 1)))))

;; rz_twice_
(assert
  (forall ((x (matrix complex)) (k Int))
    (=>
      (is_a_ket_l x 1)
      (= (path_sem1 (rz1 (incr_abs k)) (path_sem1 (rz1 (incr_abs k)) x)) 
      (path_sem1
        (rz1 k)
        x)))))

;; rzp_twice_
(assert
  (forall ((x (matrix complex)) (k Int))
    (=>
      (is_a_ket_l x 1)
      (= (path_sem1 (rzp (incr_abs k)) (path_sem1 (rzp (incr_abs k)) x)) 
      (path_sem1
        (rzp k)
        x)))))

;; phase_twice_
(assert
  (forall ((x (matrix complex)) (k Int))
    (=>
      (is_a_ket_l x 1)
      (= (path_sem1
           (phase1 (incr_abs k))
           (path_sem1 (phase1 (incr_abs k)) x)) (path_sem1 (phase1 k) x)))))

;; hadamard_twice_
(assert
  (forall ((x (matrix complex)))
    (=> (is_a_ket_l x 1) (= (path_sem1 hadamard1 (path_sem1 hadamard1 x)) x))))

;; phase_comm
(assert
  (forall ((k Int) (c circuit))
    (=>
      (= (width1 c) 1)
      (infix_lseqgt (infix_mnmn (phase1 k) c) (infix_mnmn c (phase1 k))))))

;; comm_phase
(assert
  (forall ((k Int) (c circuit))
    (=>
      (= (width1 c) 1)
      (infix_lseqgt (infix_mnmn c (phase1 k)) (infix_mnmn (phase1 k) c)))))

;; rewrite_cnot
(declare-fun rewrite_cnot (Int
  Int
  Int) circuit)

;; rewrite_cnot'def
(assert
  (forall ((co Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 co) (< co n))
        (=> (not (= t1 co)) (= (rewrite_cnot co t1 n) (cont1 xx1 co t1 n)))))))

;; rewrite_cnot'spec
(assert
  (forall ((co Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 co) (< co n))
        (=>
          (not (= t1 co))
          (and
            (= (ancillas1 (rewrite_cnot co t1 n)) 0)
            (infix_lseqgt (rewrite_cnot co t1 n) (cnot1 co t1 n))))))))

;; rz_not
(declare-fun rz_not (Int) circuit)

;; rz_not'def
(assert
  (forall ((k Int)) (= (rz_not k) (infix_mnmn (infix_mnmn xx1 (rz1 k)) xx1))))

;; rz_not'spec
(assert
  (forall ((k Int))
    (and (= (ancillas1 (rz_not k)) 0) (infix_lseqgt (rz_not k) (rz1 (- k))))))

;; ry_not
(declare-fun ry_not (Int) circuit)

;; ry_not'def
(assert
  (forall ((k Int)) (= (ry_not k) (infix_mnmn (infix_mnmn xx1 (ry1 k)) xx1))))

;; ry_not'spec
(assert
  (forall ((k Int))
    (and (= (ancillas1 (ry_not k)) 0) (infix_lseqgt (ry_not k) (ry1 (- k))))))

;; rewrite_rz
(declare-fun rewrite_rz (Int) circuit)

;; rewrite_rz'def
(assert
  (forall ((k Int))
    (= (rewrite_rz k) (infix_mnmn (phase1 (- (incr_abs k))) (rzp k)))))

;; rewrite_rz'spec
(assert
  (forall ((k Int))
    (and
      (= (ancillas1 (rewrite_rz k)) 0)
      (infix_lseqgt (rewrite_rz k) (rz1 k)))))

;; rewrite_rzp
(declare-fun rewrite_rzp (Int) circuit)

;; rewrite_rzp'def
(assert
  (forall ((k Int))
    (= (rewrite_rzp k) (infix_mnmn (phase1 (incr_abs k)) (rz1 k)))))

;; rewrite_rzp'spec
(assert
  (forall ((k Int))
    (and
      (= (ancillas1 (rewrite_rzp k)) 0)
      (infix_lseqgt (rewrite_rzp k) (rzp k)))))

;; rewrite_rx
(declare-fun rewrite_rx (Int) circuit)

;; rewrite_rx'def
(assert
  (forall ((k Int))
    (= (rewrite_rx k) (infix_mnmn (infix_mnmn hadamard1 (rz1 k)) hadamard1))))

;; rewrite_rx'spec
(assert
  (forall ((k Int))
    (and
      (= (ancillas1 (rewrite_rx k)) 0)
      (infix_lseqgt (rewrite_rx k) (rx1 k)))))

;; rewrite_ry
(declare-fun rewrite_ry (Int) circuit)

;; rewrite_ry'def
(assert
  (forall ((k Int))
    (= (rewrite_ry k) (infix_mnmn (infix_mnmn (rzp (- 2)) (rx1 k)) (rzp 2)))))

;; rewrite_ry'spec
(assert
  (forall ((k Int))
    (and
      (= (ancillas1 (rewrite_ry k)) 0)
      (infix_lseqgt (rewrite_ry k) (ry1 k)))))

;; rewrite_ry_with_z
(declare-fun rewrite_ry_with_z (Int) circuit)

;; rewrite_ry_with_z'def
(assert
  (forall ((k Int))
    (= (rewrite_ry_with_z k) (infix_mnmn
                               (infix_mnmn (rzp (- 2)) (rewrite_rx k))
                               (rzp 2)))))

;; rewrite_ry_with_z'spec
(assert
  (forall ((k Int))
    (and
      (= (ancillas1 (rewrite_ry_with_z k)) 0)
      (infix_lseqgt (rewrite_ry_with_z k) (ry1 k)))))

;; rewrite_s'spec
(assert (and (= (ancillas1 (rzp 2)) 0) (infix_lseqgt (rzp 2) s)))

;; rewrite_t'spec
(assert (and (= (ancillas1 (rzp 3)) 0) (infix_lseqgt (rzp 3) t)))

;; rewrite_zz'spec
(assert (and (= (ancillas1 (rzp 1)) 0) (infix_lseqgt (rzp 1) zz1)))

;; rewrite_xx'spec
(assert
  (and
    (= (ancillas1 (infix_mnmn (infix_mnmn hadamard1 zz1) hadamard1)) 0)
    (infix_lseqgt (infix_mnmn (infix_mnmn hadamard1 zz1) hadamard1) xx1)))

;; rewrite_yy'spec
(assert
  (and
    (= (ancillas1 (infix_mnmn (phase1 2) (ry1 1))) 0)
    (infix_lseqgt (infix_mnmn (phase1 2) (ry1 1)) yy1)))

;; rewrite_hadamard'spec
(assert
  (and
    (= (ancillas1 (infix_mnmn (ry1 2) xx1)) 0)
    (infix_lseqgt (infix_mnmn (ry1 2) xx1) hadamard1)))

;; place_hadamard_with_ry
(declare-fun place_hadamard_with_ry (Int
  Int) circuit)

;; place_hadamard_with_ry'def
(assert
  (forall ((t1 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (= (place_hadamard_with_ry t1 n) (infix_mnmn
                                         (infix_mnmn
                                           (place1 (ry1 3) t1 n)
                                           (place1 xx1 t1 n))
                                         (place1 (ry1 (- 3)) t1 n))))))

;; place_hadamard_with_ry'spec
(assert
  (forall ((t1 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (and
        (= (ancillas1 (place_hadamard_with_ry t1 n)) 0)
        (infix_lseqgt (place_hadamard_with_ry t1 n) (place1 hadamard1 t1 n))))))

;; cont_hadamard
(declare-fun cont_hadamard (Int
  Int
  Int) circuit)

;; cont_hadamard'def
(assert
  (forall ((co Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 t1) (< t1 n))
        (=>
          (not (= co t1))
          (= (cont_hadamard co t1 n) (infix_mnmn
                                       (infix_mnmn
                                         (place1 (ry1 3) t1 n)
                                         (cnot1 co t1 n))
                                       (place1 (ry1 (- 3)) t1 n))))))))

;; cont_hadamard'spec
(assert
  (forall ((co Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 t1) (< t1 n))
        (=>
          (not (= co t1))
          (and
            (= (ancillas1 (cont_hadamard co t1 n)) 0)
            (infix_lseqgt (cont_hadamard co t1 n) (cont1 hadamard1 co t1 n))))))))

;; cont_ry
(declare-fun cont_ry (Int
  Int
  Int
  Int) circuit)

;; cont_ry'def
(assert
  (forall ((k Int) (co Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 t1) (< t1 n))
        (=>
          (not (= co t1))
          (= (cont_ry k co t1 n) (infix_mnmn
                                   (infix_mnmn
                                     (infix_mnmn
                                       (place1 (ry1 (incr_abs k)) t1 n)
                                       (cnot1 co t1 n))
                                     (place1 (ry1 (- (incr_abs k))) t1 n))
                                   (cnot1 co t1 n))))))))

;; cont_ry'spec
(assert
  (forall ((k Int) (co Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 t1) (< t1 n))
        (=>
          (not (= co t1))
          (and
            (= (ancillas1 (cont_ry k co t1 n)) 0)
            (infix_lseqgt (cont_ry k co t1 n) (cont1 (ry1 k) co t1 n))))))))

;; cont_rz
(declare-fun cont_rz (Int
  Int
  Int
  Int) circuit)

;; cont_rz'spec
(assert
  (forall ((k Int) (co Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 co) (< co n))
        (=>
          (not (= t1 co))
          (and
            (infix_lseqgt (cont_rz k co t1 n) (cont1 (rz1 k) co t1 n))
            (and
              (= (ancillas1 (cont_rz k co t1 n)) 0)
              (and
                (= (width1 (cont_rz k co t1 n)) n)
                (and
                  (= (range1 (cont_rz k co t1 n)) 0)
                  (and
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (forall ((i Int))
                        (=>
                          (binary_l x n)
                          (=>
                            (and (<= 0 i) (< i n))
                            (= (basis_ket1 (cont_rz k co t1 n) x y i) (select x i))))))
                    (and
                      (forall ((x (Array Int Int)) (y (Array Int Int)))
                        (=>
                          (binary_l x n)
                          (= (ang_ind1 (cont_rz k co t1 n) x y) (phase_inv_
                                                                  (- (select x t1) 1)
                                                                  (infix_sldtsl
                                                                    (select x co)
                                                                    (incr_abs
                                                                    k))))))
                      (= (cont_rz k co t1 n) (infix_mnmn
                                               (infix_mnmn
                                                 (infix_mnmn
                                                   (place1
                                                     (rz1 (incr_abs k))
                                                     t1
                                                     n)
                                                   (cnot1 co t1 n))
                                                 (place1
                                                   (rz1 (- (incr_abs k)))
                                                   t1
                                                   n))
                                               (cnot1 co t1 n))))))))))))))

;; cont_phase
(declare-fun cont_phase (Int
  Int
  Int
  Int) circuit)

;; cont_phase'def
(assert
  (forall ((k Int) (co Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 co) (< co n))
        (=>
          (not (= t1 co))
          (= (cont_phase k co t1 n) (place_diag (rzp k) co n)))))))

;; cont_phase'spec
(assert
  (forall ((k Int) (co Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 co) (< co n))
        (=>
          (not (= t1 co))
          (and
            (= (ancillas1 (cont_phase k co t1 n)) 0)
            (and
              (infix_lseqgt
                (cont_phase k co t1 n)
                (cont1 (phase1 k) co t1 n))
              (and
                (= (width1 (cont_phase k co t1 n)) n)
                (and
                  (= (range1 (cont_phase k co t1 n)) 0)
                  (and
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (forall ((i Int))
                        (=>
                          (binary_l x n)
                          (=>
                            (and (<= 0 i) (< i n))
                            (= (basis_ket1 (cont_phase k co t1 n) x y i) (select x i))))))
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (=>
                        (binary_l x n)
                        (= (ang_ind1 (cont_phase k co t1 n) x y) (infix_sldtsl
                                                                   (select x co)
                                                                   k))))))))))))))

;; cont_rzp
(declare-fun cont_rzp (Int
  Int
  Int
  Int) circuit)

;; cont_rzp'def
(assert
  (forall ((k Int) (co Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 t1) (< t1 n))
        (=>
          (=> (<= t1 co) (<= (+ t1 1) co))
          (= (cont_rzp k co t1 n) (seq_diag
                                    (cont_phase (incr_abs k) co t1 n)
                                    (cont_rz k co t1 n))))))))

;; cont_rzp'spec
(assert
  (forall ((k Int) (co Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 t1) (< t1 n))
        (=>
          (=> (<= t1 co) (<= (+ t1 1) co))
          (and
            (= (ancillas1 (cont_rzp k co t1 n)) 0)
            (and
              (= (width1 (cont_rzp k co t1 n)) n)
              (and
                (= (range1 (cont_rzp k co t1 n)) 0)
                (and
                  (forall ((x (Array Int Int)) (y (Array Int Int)))
                    (forall ((i Int))
                      (=>
                        (binary_l x n)
                        (=>
                          (and (<= 0 i) (< i n))
                          (= (basis_ket1 (cont_rzp k co t1 n) x y i) (select x i))))))
                  (and
                    (forall ((x (Array Int Int)) (y (Array Int Int)))
                      (=>
                        (binary_l x n)
                        (= (ang_ind1 (cont_rzp k co t1 n) x y) (infix_sldtsl
                                                                 (* (select x co) (select x t1))
                                                                 k))))
                    (infix_lseqgt
                      (cont_rzp k co t1 n)
                      (cont1 (rzp k) co t1 n))))))))))))

;; cont_xor_rz
(declare-fun cont_xor_rz (Int
  Int
  Int
  Int
  Int) circuit)

;; cont_xor_rz'def
(assert
  (forall ((k Int) (co1 Int) (co2 Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 co1) (< co1 n))
      (=>
        (and (<= 0 co2) (< co2 n))
        (=>
          (and (<= 0 t1) (< t1 n))
          (=>
            (not (= co1 co2))
            (=>
              (not (= co1 t1))
              (=>
                (not (= t1 co2))
                (= (cont_xor_rz k co1 co2 t1 n) (seq_flat
                                                  (seq_flat
                                                    (cnot1 co1 co2 n)
                                                    (cont_rzp k co2 t1 n))
                                                  (cnot1 co1 co2 n)))))))))))

;; cont_xor_rz'spec
(assert
  (forall ((k Int) (co1 Int) (co2 Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 co1) (< co1 n))
      (=>
        (and (<= 0 co2) (< co2 n))
        (=>
          (and (<= 0 t1) (< t1 n))
          (=>
            (not (= co1 co2))
            (=>
              (not (= co1 t1))
              (=>
                (not (= t1 co2))
                (and
                  (= (ancillas1 (cont_xor_rz k co1 co2 t1 n)) 0)
                  (and
                    (= (width1 (cont_xor_rz k co1 co2 t1 n)) n)
                    (and
                      (= (range1 (cont_xor_rz k co1 co2 t1 n)) 0)
                      (and
                        (forall ((x (Array Int Int)) (y (Array Int Int)))
                          (=>
                            (binary_l x n)
                            (= (ang_ind1 (cont_xor_rz k co1 co2 t1 n) x y) 
                            (infix_sldtsl
                              (* (- (+ (select x co1) (select x co2)) (* 2 (* (select x co1) (select x co2)))) (select x t1))
                              k))))
                        (forall ((x (Array Int Int)) (y (Array Int Int)))
                          (forall ((i Int))
                            (=>
                              (binary_l x n)
                              (=>
                                (and (<= 0 i) (< i n))
                                (= (basis_ket1
                                     (cont_xor_rz k co1 co2 t1 n)
                                     x
                                     y
                                     i) (select x i))))))))))))))))))

;; cont_rx
(declare-fun cont_rx (Int
  Int
  Int
  Int) circuit)

;; cont_rx'def
(assert
  (forall ((k Int) (co Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 t1) (<= t1 (- n 1)))
        (=>
          (=> (<= t1 co) (<= (+ t1 1) co))
          (= (cont_rx k co t1 n) (infix_mnmn
                                   (infix_mnmn
                                     (cont_hadamard co t1 n)
                                     (cont_rz k co t1 n))
                                   (cont_hadamard co t1 n))))))))

;; cont_rx'spec
(assert
  (forall ((k Int) (co Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 t1) (<= t1 (- n 1)))
        (=>
          (=> (<= t1 co) (<= (+ t1 1) co))
          (and
            (= (ancillas1 (cont_rx k co t1 n)) 0)
            (infix_lseqgt (cont_rx k co t1 n) (cont1 (rx1 k) co t1 n))))))))

;; swap_decomp
(declare-fun swap_decomp (Int
  Int
  Int) circuit)

;; swap_decomp'def
(assert
  (forall ((t1 Int) (t2 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 t2) (< t2 n))
        (=>
          (not (= t1 t2))
          (= (swap_decomp t1 t2 n) (seq_flat_mute
                                     (seq_flat_mute
                                       (cnot1 t1 t2 n)
                                       (cnot1 t2 t1 n))
                                     (cnot1 t1 t2 n))))))))

;; swap_decomp'spec
(assert
  (forall ((t1 Int) (t2 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 t2) (< t2 n))
        (=>
          (not (= t1 t2))
          (and
            (= (width1 (swap_decomp t1 t2 n)) n)
            (and
              (= (ancillas1 (swap_decomp t1 t2 n)) 0)
              (infix_lseqgt (swap_decomp t1 t2 n) (swap1 t1 t2 n)))))))))

;; ccz
(declare-fun ccz1 (Int
  Int
  Int
  Int) circuit)

;; ccz'def
(assert
  (forall ((t1 Int) (t2 Int) (t3 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 t2) (< t2 n))
        (=>
          (and (<= 0 t3) (< t3 n))
          (=>
            (not (= t1 t2))
            (=>
              (not (= t1 t3))
              (=>
                (not (= t3 t2))
                (= (ccz1 t1 t2 t3 n) (seq_diag
                                       (seq_diag
                                         (cont_rzp 2 t1 t3 n)
                                         (cont_rzp 2 t2 t3 n))
                                       (cont_xor_rz (- 2) t1 t2 t3 n)))))))))))

;; ccz'spec
(assert
  (forall ((t1 Int) (t2 Int) (t3 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 t2) (< t2 n))
        (=>
          (and (<= 0 t3) (< t3 n))
          (=>
            (not (= t1 t2))
            (=>
              (not (= t1 t3))
              (=>
                (not (= t3 t2))
                (and
                  (= (ancillas1 (ccz1 t1 t2 t3 n)) 0)
                  (and
                    (= (range1 (ccz1 t1 t2 t3 n)) 0)
                    (and
                      (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
                        (=>
                          (binary_l x n)
                          (=>
                            (and (<= 0 i) (< i n))
                            (= (basis_ket1 (ccz1 t1 t2 t3 n) x y i) (select x i)))))
                      (and
                        (= (width1 (ccz1 t1 t2 t3 n)) n)
                        (forall ((x (Array Int Int)) (y (Array Int Int)))
                          (=>
                            (binary_l x n)
                            (= (ang_ind1 (ccz1 t1 t2 t3 n) x y) (infix_sldtsl
                                                                  (* (* (select x t1) (select x t2)) (select x t3))
                                                                  1))))))))))))))))

;; path_sem_toffoli
(assert
  (forall ((c1 Int) (c2 Int) (t1 Int) (n Int) (x bitvec))
    (=>
      (and (<= 0 c1) (< c1 n))
      (=>
        (and (<= 0 c2) (< c2 n))
        (=>
          (and (<= 0 t1) (< t1 n))
          (=>
            (not (= c1 c2))
            (=>
              (not (= c1 t1))
              (=>
                (not (= t1 c2))
                (=>
                  (= (length x) n)
                  (= (path_sem1 (toffoli1 c1 c2 t1 n) (bv_to_ket x)) 
                  (ite (and
                         (= (select (value x) c1) (select (value x) c2))
                         (= (select (value x) c2) 1))
                    (path_sem1 (place1 xx1 t1 n) (bv_to_ket x))
                    (bv_to_ket x))))))))))))

;; set_equiv_flat_mute
(assert
  (forall ((d circuit) (e circuit))
    (=>
      (= (width1 d) (width1 e))
      (=>
        (= (range1 e) 0)
        (=>
          (forall ((x (Array Int Int)) (y (Array Int Int)))
            (=> (binary_l x (width1 d)) (= (ang_ind1 e x y) ang_zero)))
          (=>
            (= (range1 d) 0)
            (=>
              (forall ((x (Array Int Int)) (y (Array Int Int)))
                (=> (binary_l x (width1 d)) (= (ang_ind1 d x y) ang_zero)))
              (=>
                (forall ((x (Array Int Int)) (y (Array Int Int)) (i Int))
                  (=>
                    (binary_l x (width1 d))
                    (=>
                      (and (<= 0 i) (< i (width1 d)))
                      (= (basis_ket1 d x y i) (basis_ket1 e x y i)))))
                (infix_lseqgt d e)))))))))

;; path_sem_ccz
(assert
  (forall ((c1 Int) (c2 Int) (t1 Int) (n Int) (x bitvec))
    (=>
      (and (<= 0 c1) (< c1 n))
      (=>
        (and (<= 0 c2) (< c2 n))
        (=>
          (and (<= 0 t1) (< t1 n))
          (=>
            (not (= c1 c2))
            (=>
              (not (= c1 t1))
              (=>
                (not (= t1 c2))
                (=>
                  (= (length x) n)
                  (= (path_sem1 (ccz1 c1 c2 t1 n) (bv_to_ket x)) (ite 
                                                                   (and
                                                                    (= (select 
                                                                    (value
                                                                    x) c1) (select 
                                                                    (value
                                                                    x) c2))
                                                                    (= (select 
                                                                    (value
                                                                    x) c2) 1))
                                                                   (path_sem1
                                                                    (place1
                                                                    zz1
                                                                    t1
                                                                    n)
                                                                    (bv_to_ket
                                                                    x))
                                                                   (bv_to_ket
                                                                    x))))))))))))

;; path_sem_ccz_
(assert
  (forall ((c1 Int) (c2 Int) (t1 Int) (n Int) (x bitvec) (y (matrix complex)))
    (=>
      (and (<= 0 c1) (< c1 n))
      (=>
        (and (<= 0 c2) (< c2 n))
        (=>
          (and (<= 0 t1) (< t1 n))
          (=>
            (not (= c1 c2))
            (=>
              (not (= c1 t1))
              (=>
                (not (= t1 c2))
                (=>
                  (= (length x) n)
                  (=>
                    (is_a_ket_l y 1)
                    (= (path_sem1
                         (ccz1 c1 c2 t1 n)
                         (kronecker
                           (kronecker (bv_to_ket (hpart x t1)) y)
                           (bv_to_ket (tpart x (+ t1 1))))) (ite (and
                                                                   (= (select 
                                                                   (value
                                                                    x) c1) (select 
                                                                   (value
                                                                    x) c2))
                                                                   (= (select 
                                                                   (value
                                                                    x) c2) 1))
                                                              (kronecker
                                                                (kronecker
                                                                  (bv_to_ket
                                                                    (hpart
                                                                    x
                                                                    t1))
                                                                  (path_sem1
                                                                    zz1
                                                                    y))
                                                                (bv_to_ket
                                                                  (tpart
                                                                    x
                                                                    (+ t1 1))))
                                                              (kronecker
                                                                (kronecker
                                                                  (bv_to_ket
                                                                    (hpart
                                                                    x
                                                                    t1))
                                                                  y)
                                                                (bv_to_ket
                                                                  (tpart
                                                                    x
                                                                    (+ t1 1))))))))))))))))

;; basis_ket_cnot_if
(assert
  (forall ((co Int) (t1 Int) (n Int) (x (Array Int Int)) (y (Array Int Int)) (i Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 t1) (< t1 n))
        (=>
          (not (= t1 co))
          (=>
            (binary_l x n)
            (=>
              (and (<= 0 i) (< i n))
              (= (basis_ket1 (cnot1 co t1 n) x y i) (ite (and
                                                           (= i t1)
                                                           (= (select x co) 1))
                                                      (ite (= (select x t1) 1)
                                                        0
                                                        1)
                                                      (select x i))))))))))

;; basis_ket_swap_if
(assert
  (forall ((t1 Int) (t2 Int) (n Int) (x (Array Int Int)) (y (Array Int Int)) (i Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 t2) (< t2 n))
        (=>
          (not (= t1 t2))
          (=>
            (binary_l x n)
            (=>
              (and (<= 0 i) (< i n))
              (= (basis_ket1 (swap1 t1 t2 n) x y i) (ite (= i t1)
                                                      (select x t2)
                                                      (ite (= i t2)
                                                        (select x t1)
                                                        (select x i)))))))))))

;; basis_ket_toffoli_if
(assert
  (forall ((c1 Int) (c2 Int) (t1 Int) (n Int) (x (Array Int Int)) (y (Array Int Int)) (i Int))
    (=>
      (and (<= 0 c1) (< c1 n))
      (=>
        (and (<= 0 c2) (< c2 n))
        (=>
          (and (<= 0 t1) (< t1 n))
          (=>
            (not (= t1 c1))
            (=>
              (not (= t1 c2))
              (=>
                (not (= c2 c1))
                (=>
                  (binary_l x n)
                  (=>
                    (and (<= 0 i) (< i n))
                    (= (basis_ket1 (toffoli1 c1 c2 t1 n) x y i) (ite 
                                                                  (and
                                                                    (= i t1)
                                                                    (and
                                                                    (= (select x c1) 1)
                                                                    (= (select x c2) 1)))
                                                                  (ite (= (select x t1) 1)
                                                                    0
                                                                    1)
                                                                  (select x i)))))))))))))

;; basis_ket_fredkin_if
(assert
  (forall ((c Int) (t1 Int) (t2 Int) (n Int) (x (Array Int Int)) (y (Array Int Int)) (i Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 t2) (< t2 n))
        (=>
          (and (<= 0 c) (< c n))
          (=>
            (not (= c t1))
            (=>
              (not (= c t2))
              (=>
                (not (= t2 t1))
                (=>
                  (binary_l x n)
                  (=>
                    (and (<= 0 i) (< i n))
                    (= (basis_ket1 (fredkin1 c t1 t2 n) x y i) (ite (and
                                                                    (= i t1)
                                                                    (= (select x c) 1))
                                                                 (select x t2)
                                                                 (ite 
                                                                   (and
                                                                    (= i t2)
                                                                    (= (select x c) 1))
                                                                   (select x t1)
                                                                   (select x i))))))))))))))

;; toffoli_decomp
(declare-fun toffoli_decomp (Int
  Int
  Int
  Int) circuit)

;; toffoli_decomp'def
(assert
  (forall ((c1 Int) (c2 Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 c1) (< c1 n))
      (=>
        (and (<= 0 c2) (< c2 n))
        (=>
          (and (<= 0 t1) (< t1 n))
          (=>
            (not (= c1 c2))
            (=>
              (not (= c1 t1))
              (=>
                (not (= t1 c2))
                (= (toffoli_decomp c1 c2 t1 n) (infix_mnmn
                                                 (infix_mnmn
                                                   (place1 hadamard1 t1 n)
                                                   (ccz1 c1 c2 t1 n))
                                                 (place1 hadamard1 t1 n)))))))))))

;; toffoli_decomp'spec
(assert
  (forall ((c1 Int) (c2 Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 c1) (< c1 n))
      (=>
        (and (<= 0 c2) (< c2 n))
        (=>
          (and (<= 0 t1) (< t1 n))
          (=>
            (not (= c1 c2))
            (=>
              (not (= c1 t1))
              (=>
                (not (= t1 c2))
                (and
                  (= (ancillas1 (toffoli_decomp c1 c2 t1 n)) 0)
                  (and
                    (= (width1 (toffoli_decomp c1 c2 t1 n)) n)
                    (infix_lseqgt
                      (toffoli_decomp c1 c2 t1 n)
                      (toffoli1 c1 c2 t1 n))))))))))))

;; fredkin_as_cont_swap
(declare-fun fredkin_as_cont_swap (Int
  Int
  Int
  Int
  Int
  Int) circuit)

;; fredkin_as_cont_swap'def
(assert
  (forall ((c Int) (ta1 Int) (ta2 Int) (k Int) (n1 Int) (n2 Int))
    (=>
      (and (<= k ta1) (< ta1 (+ k n1)))
      (=>
        (and (<= k ta2) (< ta2 (+ k n1)))
        (=>
          (not (= ta1 ta2))
          (=>
            (<= (+ k n1) n2)
            (=>
              (<= 0 k)
              (=>
                (=> (<= k c) (<= (+ k n1) c))
                (=>
                  (and (<= 0 c) (< c n2))
                  (= (fredkin_as_cont_swap c ta1 ta2 k n1 n2) (cont_flat_mute
                                                                (swap1
                                                                  (- ta1 k)
                                                                  (- ta2 k)
                                                                  n1)
                                                                c
                                                                k
                                                                n2)))))))))))

;; fredkin_as_cont_swap'spec
(assert
  (forall ((c Int) (ta1 Int) (ta2 Int) (k Int) (n1 Int) (n2 Int))
    (=>
      (and (<= k ta1) (< ta1 (+ k n1)))
      (=>
        (and (<= k ta2) (< ta2 (+ k n1)))
        (=>
          (not (= ta1 ta2))
          (=>
            (<= (+ k n1) n2)
            (=>
              (<= 0 k)
              (=>
                (=> (<= k c) (<= (+ k n1) c))
                (=>
                  (and (<= 0 c) (< c n2))
                  (and
                    (= (ancillas1 (fredkin_as_cont_swap c ta1 ta2 k n1 n2)) 0)
                    (infix_lseqgt
                      (fredkin_as_cont_swap c ta1 ta2 k n1 n2)
                      (fredkin1 c ta1 ta2 n2))))))))))))

;; toffoli_as_cont_cnot
(declare-fun toffoli_as_cont_cnot (Int
  Int
  Int
  Int
  Int
  Int) circuit)

;; toffoli_as_cont_cnot'def
(assert
  (forall ((c Int) (ta1 Int) (ta2 Int) (k Int) (n1 Int) (n2 Int))
    (=>
      (and (<= k ta1) (< ta1 (+ k n1)))
      (=>
        (and (<= k ta2) (< ta2 (+ k n1)))
        (=>
          (not (= ta1 ta2))
          (=>
            (<= (+ k n1) n2)
            (=>
              (<= 0 k)
              (=>
                (=> (<= k c) (<= (+ k n1) c))
                (=>
                  (and (<= 0 c) (< c n2))
                  (= (toffoli_as_cont_cnot c ta1 ta2 k n1 n2) (cont_flat_mute
                                                                (cnot1
                                                                  (- ta1 k)
                                                                  (- ta2 k)
                                                                  n1)
                                                                c
                                                                k
                                                                n2)))))))))))

;; toffoli_as_cont_cnot'spec
(assert
  (forall ((c Int) (ta1 Int) (ta2 Int) (k Int) (n1 Int) (n2 Int))
    (=>
      (and (<= k ta1) (< ta1 (+ k n1)))
      (=>
        (and (<= k ta2) (< ta2 (+ k n1)))
        (=>
          (not (= ta1 ta2))
          (=>
            (<= (+ k n1) n2)
            (=>
              (<= 0 k)
              (=>
                (=> (<= k c) (<= (+ k n1) c))
                (=>
                  (and (<= 0 c) (< c n2))
                  (and
                    (= (ancillas1 (toffoli_as_cont_cnot c ta1 ta2 k n1 n2)) 0)
                    (infix_lseqgt
                      (toffoli_as_cont_cnot c ta1 ta2 k n1 n2)
                      (toffoli1 c ta1 ta2 n2))))))))))))

;; fredkin_decomp
(declare-fun fredkin_decomp (Int
  Int
  Int
  Int) circuit)

;; fredkin_decomp'spec
(assert
  (forall ((c Int) (t1 Int) (t2 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 t2) (< t2 n))
        (=>
          (and (<= 0 c) (< c n))
          (=>
            (not (= t1 t2))
            (=>
              (not (= t1 c))
              (=>
                (not (= c t2))
                (and
                  (= (width1 (fredkin_decomp c t1 t2 n)) n)
                  (and
                    (= (ancillas1 (fredkin_decomp c t1 t2 n)) 0)
                    (and
                      (infix_lseqgt
                        (fredkin_decomp c t1 t2 n)
                        (fredkin1 c t1 t2 n))
                      (= (fredkin_decomp c t1 t2 n) (infix_mnmn
                                                      (infix_mnmn
                                                        (cnot1 t2 t1 n)
                                                        (toffoli1 c t1 t2 n))
                                                      (cnot1 t2 t1 n))))))))))))))

;; fredkin_decomp_toffoli
(declare-fun fredkin_decomp_toffoli (Int
  Int
  Int
  Int) circuit)

;; fredkin_decomp_toffoli'def
(assert
  (forall ((c Int) (t1 Int) (t2 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 t2) (< t2 n))
        (=>
          (and (<= 0 c) (< c n))
          (=>
            (not (= t1 t2))
            (=>
              (not (= t1 c))
              (=>
                (not (= c t2))
                (= (fredkin_decomp_toffoli c t1 t2 n) (infix_mnmn
                                                        (infix_mnmn
                                                          (cnot1 t2 t1 n)
                                                          (toffoli_decomp
                                                            c
                                                            t1
                                                            t2
                                                            n))
                                                        (cnot1 t2 t1 n)))))))))))

;; fredkin_decomp_toffoli'spec
(assert
  (forall ((c Int) (t1 Int) (t2 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 t2) (< t2 n))
        (=>
          (and (<= 0 c) (< c n))
          (=>
            (not (= t1 t2))
            (=>
              (not (= t1 c))
              (=>
                (not (= c t2))
                (and
                  (= (ancillas1 (fredkin_decomp_toffoli c t1 t2 n)) 0)
                  (infix_lseqgt
                    (fredkin_decomp_toffoli c t1 t2 n)
                    (fredkin1 c t1 t2 n)))))))))))

;; unbricks_fredkin'spec
(assert (infix_lseqgt bricks_fredkin (fredkin1 0 1 2 3)))

;; unbricks_toffoli'spec
(assert (infix_lseqgt bricks_toffoli (toffoli1 0 1 2 3)))

;; unbricks_swap'spec
(assert (infix_lseqgt bricks_swap (swap1 0 1 2)))

;; unbricks_cnot'spec
(assert (infix_lseqgt bricks_cnot (cnot1 0 1 2)))

;; ry_twice_equiv
(assert
  (forall ((k Int) (kqt Int))
    (=>
      (= kqt (incr_abs k))
      (infix_lseqgt (infix_mnmn (ry1 kqt) (ry1 kqt)) (ry1 k)))))

;; rz_twice_equiv
(assert
  (forall ((k Int) (kqt Int))
    (=>
      (= kqt (incr_abs k))
      (infix_lseqgt (infix_mnmn (rz1 kqt) (rz1 kqt)) (rz1 k)))))

;; rzp_twice_equiv
(assert
  (forall ((k Int) (kqt Int))
    (=>
      (= kqt (incr_abs k))
      (infix_lseqgt (infix_mnmn (rzp kqt) (rzp kqt)) (rzp k)))))

;; rx_twice_equiv
(assert
  (forall ((k Int) (kqt Int))
    (=>
      (= kqt (incr_abs k))
      (infix_lseqgt (infix_mnmn (rx1 kqt) (rx1 kqt)) (rx1 k)))))

;; rx_twice_
(assert
  (forall ((x (matrix complex)) (k Int))
    (=>
      (is_a_ket_l x 1)
      (= (path_sem1 (rx1 (incr_abs k)) (path_sem1 (rx1 (incr_abs k)) x)) 
      (path_sem1
        (rx1 k)
        x)))))

;; phase_twice_equiv
(assert
  (forall ((k Int) (kqt Int))
    (=>
      (= kqt (incr_abs k))
      (infix_lseqgt (infix_mnmn (phase1 kqt) (phase1 kqt)) (phase1 k)))))

;; ry_twice_equiv_rev
(assert
  (forall ((k Int) (kqt Int))
    (=>
      (= kqt (incr_abs k))
      (infix_lseqgt (ry1 k) (infix_mnmn (ry1 kqt) (ry1 kqt))))))

;; rx_twice_equiv_rev
(assert
  (forall ((k Int) (kqt Int))
    (=>
      (= kqt (incr_abs k))
      (infix_lseqgt (rx1 k) (infix_mnmn (rx1 kqt) (rx1 kqt))))))

;; rz_twice_equiv_rev
(assert
  (forall ((k Int) (kqt Int))
    (=>
      (= kqt (incr_abs k))
      (infix_lseqgt (rz1 k) (infix_mnmn (rz1 kqt) (rz1 kqt))))))

;; rzp_twice_equiv_rev
(assert
  (forall ((k Int) (kqt Int))
    (=>
      (= kqt (incr_abs k))
      (infix_lseqgt (rzp k) (infix_mnmn (rzp kqt) (rzp kqt))))))

;; phase_twice_equiv_rev
(assert
  (forall ((k Int) (kqt Int))
    (=>
      (= kqt (incr_abs k))
      (infix_lseqgt (phase1 k) (infix_mnmn (phase1 kqt) (phase1 kqt))))))

;; neutral_circ
(declare-fun neutral_circ (circuit) Bool)

;; neutral_circ'def
(assert
  (forall ((c circuit))
    (= (neutral_circ c) (infix_lseqgt c (m_skip (width1 c))))))

;; set_neutral_circ
(assert
  (forall ((c circuit))
    (=>
      (forall ((x (matrix complex)))
        (=>
          (is_a_ket_l x (width1 c))
          (=> (is_a_ket_basis_elt x) (= (path_sem1 c x) x))))
      (neutral_circ c))))

;; set_neutral_circ_bv
(assert
  (forall ((c circuit))
    (=>
      (forall ((x bitvec))
        (=>
          (= (length x) (width1 c))
          (= (path_sem1 c (bv_to_ket x)) (bv_to_ket x))))
      (neutral_circ c))))

;; get_neutral_circ
(assert
  (forall ((c circuit) (x (matrix complex)))
    (=>
      (neutral_circ c)
      (=> (is_a_ket_l x (width1 c)) (= (path_sem1 c x) x)))))

;; neutral_skip
(assert (neutral_circ skip))

;; neutral_m_skip
(assert (forall ((n Int)) (=> (<= 1 n) (neutral_circ (m_skip n)))))

;; m_skip_path_sem
(assert
  (forall ((n Int) (x (matrix complex)))
    (=> (<= 1 n) (=> (is_a_ket_l x n) (= (path_sem1 (m_skip n) x) x)))))

;; neutral_equiv
(assert
  (forall ((c circuit) (d circuit))
    (=>
      (neutral_circ c)
      (=> (neutral_circ d) (=> (= (width1 c) (width1 d)) (infix_lseqgt c d))))))

;; cont_neutral
(assert
  (forall ((co Int) (k Int) (n Int) (c circuit))
    (=>
      (<= 0 k)
      (=>
        (<= (+ (width1 c) k) n)
        (=>
          (=> (<= k co) (<= (+ k (width1 c)) co))
          (=>
            (and (<= 0 co) (< co n))
            (=> (neutral_circ c) (neutral_circ (cont1 c co k n)))))))))

;; place_neutral
(assert
  (forall ((k Int) (n Int) (c circuit))
    (=>
      (<= 0 k)
      (=>
        (<= (+ (width1 c) k) n)
        (=> (neutral_circ c) (neutral_circ (place1 c k n)))))))

;; cont_skip_to_place
(declare-fun cont_skip_to_place (Int
  Int
  Int) circuit)

;; cont_skip_to_place'def
(assert
  (forall ((co Int) (ta Int) (n Int))
    (=>
      (and (<= 0 ta) (< ta n))
      (=>
        (and (<= 0 co) (< co n))
        (=>
          (not (= co ta))
          (= (cont_skip_to_place co ta n) (place1 skip ta n)))))))

;; cont_skip_to_place'spec
(assert
  (forall ((co Int) (ta Int) (n Int))
    (=>
      (and (<= 0 ta) (< ta n))
      (=>
        (and (<= 0 co) (< co n))
        (=>
          (not (= co ta))
          (infix_lseqgt (cont_skip_to_place co ta n) (cont1 skip co ta n)))))))

;; neutral_seq_left
(assert
  (forall ((c circuit) (d circuit))
    (=>
      (= (width1 c) (width1 d))
      (=> (neutral_circ c) (infix_lseqgt (infix_mnmn c d) d)))))

;; neutral_seq_right
(assert
  (forall ((c circuit) (d circuit))
    (=>
      (= (width1 c) (width1 d))
      (=> (neutral_circ c) (infix_lseqgt (infix_mnmn d c) d)))))

;; neutral_seq_had
(assert (neutral_circ (infix_mnmn hadamard1 hadamard1)))

;; neutral_seq_swap
(assert
  (forall ((t1 Int) (t2 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 t2) (< t2 n))
        (=>
          (not (= t1 t2))
          (neutral_circ (infix_mnmn (swap1 t1 t2 n) (swap1 t1 t2 n))))))))

;; neutral_seq_cnot
(assert
  (forall ((co Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 co) (< co n))
        (=>
          (not (= t1 co))
          (neutral_circ (infix_mnmn (cnot1 co t1 n) (cnot1 co t1 n))))))))

;; neutral_seq_toffoli
(assert
  (forall ((c1 Int) (c2 Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 c1) (< c1 n))
      (=>
        (and (<= 0 c2) (< c2 n))
        (=>
          (and (<= 0 t1) (< t1 n))
          (=>
            (not (= t1 c1))
            (=>
              (not (= t1 c2))
              (=>
                (not (= c2 c1))
                (neutral_circ
                  (infix_mnmn (toffoli1 c1 c2 t1 n) (toffoli1 c1 c2 t1 n)))))))))))

;; neutral_seq_fredkin
(assert
  (forall ((c Int) (t1 Int) (t2 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 t2) (< t2 n))
        (=>
          (and (<= 0 c) (< c n))
          (=>
            (not (= c t1))
            (=>
              (not (= c t2))
              (=>
                (not (= t2 t1))
                (neutral_circ
                  (infix_mnmn (fredkin1 c t1 t2 n) (fredkin1 c t1 t2 n)))))))))))

;; neutral_seq_ry
(assert (forall ((k Int)) (neutral_circ (infix_mnmn (ry1 k) (ry1 (- k))))))

;; neutral_seq_ry_minus
(assert (forall ((k Int)) (neutral_circ (infix_mnmn (ry1 (- k)) (ry1 k)))))

;; ang_exp_comp_one
(assert
  (forall ((k Int))
    (= (infix_asdt
         (ang_exp (infix_sldtsl 1 (incr_abs k)))
         (ang_exp (infix_sldtsl 1 (incr_abs (- k))))) c_one)))

;; ang_exp_comp_one_minus
(assert
  (forall ((k Int))
    (= (infix_asdt
         (ang_exp (infix_sldtsl (- 1) (incr_abs k)))
         (ang_exp (infix_sldtsl (- 1) (incr_abs (- k))))) c_one)))

;; neutral_seq_rz
(assert (forall ((k Int)) (neutral_circ (infix_mnmn (rz1 k) (rz1 (- k))))))

;; neutral_seq_rz_minus
(assert (forall ((k Int)) (neutral_circ (infix_mnmn (rz1 (- k)) (rz1 k)))))

;; neutral_seq_rzp
(assert (forall ((k Int)) (neutral_circ (infix_mnmn (rzp k) (rzp (- k))))))

;; neutral_seq_phase
(assert
  (forall ((k Int)) (neutral_circ (infix_mnmn (phase1 k) (phase1 (- k))))))

;; neutral_seq_rx
(assert (forall ((k Int)) (neutral_circ (infix_mnmn (rx1 k) (rx1 (- k))))))

;; neutral_seq_rx_minus
(assert (forall ((k Int)) (neutral_circ (infix_mnmn (rx1 (- k)) (rx1 k)))))

;; neutral_seq_yy
(assert (neutral_circ (infix_mnmn yy1 yy1)))

;; neutral_seq_xx
(assert (neutral_circ (infix_mnmn xx1 xx1)))

;; neutral_seq_zz
(assert (neutral_circ (infix_mnmn zz1 zz1)))

;; to_qc_place
(assert
  (forall ((c wired_circuit) (c1 wired_circuit) (k Int) (n Int))
    (=>
      (correct1 c)
      (=>
        (= c (Place c1 k n))
        (=>
          (<= 0 k)
          (=>
            (<= (+ (width_pre1 c1) k) n)
            (= (to_qc1 c) (place1 (to_qc1 c1) k n))))))))

;; to_qc_cont
(assert
  (forall ((c wired_circuit) (c1 wired_circuit) (co Int) (k Int) (n Int))
    (=>
      (correct1 c)
      (=>
        (= c (Cont c1 co k n))
        (=>
          (and (<= 0 co) (< co n))
          (=>
            (and (<= 0 k) (<= k (- n (width_pre1 c1))))
            (=>
              (=> (<= k co) (<= (+ k (width_pre1 c1)) co))
              (= (to_qc1 c) (cont1 (to_qc1 c1) co k n)))))))))

;; to_qc_seq
(assert
  (forall ((c wired_circuit) (c1 wired_circuit) (c2 wired_circuit))
    (=>
      (correct1 c)
      (=>
        (= c (Sequence1 c1 c2))
        (=>
          (= (width_pre1 c1) (width_pre1 c2))
          (= (to_qc1 c) (infix_mnmn (to_qc1 c1) (to_qc1 c2))))))))

;; to_qc_par
(assert
  (forall ((c wired_circuit) (c1 wired_circuit) (c2 wired_circuit))
    (=>
      (correct1 c)
      (=>
        (= c (Parallel1 c1 c2))
        (= (to_qc1 c) (infix_slsl (to_qc1 c1) (to_qc1 c2)))))))

;; to_qc_cnot
(assert
  (forall ((c wired_circuit) (co Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 co) (< co n))
        (=>
          (not (= t1 co))
          (=> (= c (Cnot1 co t1 n)) (= (to_qc1 c) (cnot1 co t1 n))))))))

;; to_qc_swap
(assert
  (forall ((c wired_circuit) (t1 Int) (t2 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 t2) (< t2 n))
        (=>
          (not (= t1 t2))
          (=> (= c (Swap1 t1 t2 n)) (= (to_qc1 c) (swap1 t1 t2 n))))))))

;; to_qc_toffoli
(assert
  (forall ((c wired_circuit) (c1 Int) (c2 Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 c1) (< c1 n))
      (=>
        (and (<= 0 c2) (< c2 n))
        (=>
          (and (<= 0 t1) (< t1 n))
          (=>
            (not (= c1 c2))
            (=>
              (not (= c1 t1))
              (=>
                (not (= t1 c2))
                (=>
                  (= c (Toffoli c1 c2 t1 n))
                  (= (to_qc1 c) (toffoli1 c1 c2 t1 n)))))))))))

;; to_qc_fredkin
(assert
  (forall ((c wired_circuit) (co Int) (t1 Int) (t2 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 t2) (< t2 n))
        (=>
          (and (<= 0 co) (< co n))
          (=>
            (not (= co t1))
            (=>
              (not (= co t2))
              (=>
                (not (= t2 t1))
                (=>
                  (= c (Fredkin co t1 t2 n))
                  (= (to_qc1 c) (fredkin1 co t1 t2 n)))))))))))

;; to_qc_place_
(assert
  (forall ((c wired_circuit) (k Int) (n Int))
    (=>
      (correct1 c)
      (=>
        (<= 0 k)
        (=>
          (<= (+ (width_pre1 c) k) n)
          (= (to_qc1 (Place c k n)) (place1 (to_qc1 c) k n)))))))

;; to_qc_cont_
(assert
  (forall ((c wired_circuit) (co Int) (k Int) (n Int))
    (=>
      (correct1 c)
      (=>
        (and (<= 0 co) (< co n))
        (=>
          (and (<= 0 k) (<= k (- n (width_pre1 c))))
          (=>
            (=> (<= k co) (<= (+ k (width_pre1 c)) co))
            (= (to_qc1 (Cont c co k n)) (cont1 (to_qc1 c) co k n))))))))

;; to_qc_seq_
(assert
  (forall ((c1 wired_circuit) (c2 wired_circuit))
    (=>
      (correct1 c1)
      (=>
        (correct1 c2)
        (=>
          (= (width_pre1 c1) (width_pre1 c2))
          (= (to_qc1 (Sequence1 c1 c2)) (infix_mnmn (to_qc1 c1) (to_qc1 c2))))))))

;; to_qc_par_
(assert
  (forall ((c1 wired_circuit) (c2 wired_circuit))
    (=>
      (correct1 c1)
      (=>
        (correct1 c2)
        (= (to_qc1 (Parallel1 c1 c2)) (infix_slsl (to_qc1 c1) (to_qc1 c2)))))))

;; to_qc_cnot_
(assert
  (forall ((co Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 co) (< co n))
        (=> (not (= t1 co)) (= (to_qc1 (Cnot1 co t1 n)) (cnot1 co t1 n)))))))

;; to_qc_swap_
(assert
  (forall ((t1 Int) (t2 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 t2) (< t2 n))
        (=> (not (= t1 t2)) (= (to_qc1 (Swap1 t1 t2 n)) (swap1 t1 t2 n)))))))

;; to_qc_toffoli_
(assert
  (forall ((c1 Int) (c2 Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 c1) (< c1 n))
      (=>
        (and (<= 0 c2) (< c2 n))
        (=>
          (and (<= 0 t1) (< t1 n))
          (=>
            (not (= c1 c2))
            (=>
              (not (= c1 t1))
              (=>
                (not (= t1 c2))
                (= (to_qc1 (Toffoli c1 c2 t1 n)) (toffoli1 c1 c2 t1 n))))))))))

;; to_qc_fredkin_
(assert
  (forall ((co Int) (t1 Int) (t2 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 t2) (< t2 n))
        (=>
          (and (<= 0 co) (< co n))
          (=>
            (not (= co t1))
            (=>
              (not (= co t2))
              (=>
                (not (= t2 t1))
                (= (to_qc1 (Fredkin co t1 t2 n)) (fredkin1 co t1 t2 n))))))))))

;; to_qc_rx_
(assert (forall ((k Int)) (= (to_qc1 (Rx k)) (rx1 k))))

;; to_qc_ry_
(assert (forall ((k Int)) (= (to_qc1 (Ry k)) (ry1 k))))

;; to_qc_rz_
(assert (forall ((k Int)) (= (to_qc1 (Rz1 k)) (rz1 k))))

;; to_qc_rzp_
(assert (forall ((k Int)) (= (to_qc1 (Rzp k)) (rzp k))))

;; pre_place_
(assert
  (forall ((c circuit) (k Int) (n Int))
    (=>
      (<= 0 k)
      (=>
        (<= (+ (width1 c) k) n)
        (= (pre1 (place1 c k n)) (Place (pre1 c) k n))))))

;; pre_cont_
(assert
  (forall ((c circuit) (co Int) (k Int) (n Int))
    (=>
      (and (<= 0 co) (< co n))
      (=>
        (and (<= 0 k) (<= k (- n (width1 c))))
        (=>
          (=> (<= k co) (<= (+ k (width1 c)) co))
          (= (pre1 (cont1 c co k n)) (Cont (pre1 c) co k n)))))))

;; pre_seq_
(assert
  (forall ((c1 circuit) (c2 circuit))
    (=>
      (= (width1 c1) (width1 c2))
      (= (pre1 (infix_mnmn c1 c2)) (Sequence1 (pre1 c1) (pre1 c2))))))

;; pre_par_
(assert
  (forall ((c1 circuit) (c2 circuit))
    (= (pre1 (infix_slsl c1 c2)) (Parallel1 (pre1 c1) (pre1 c2)))))

;; pre_cnot_
(assert
  (forall ((co Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 co) (< co n))
        (=> (not (= t1 co)) (= (pre1 (cnot1 co t1 n)) (Cnot1 co t1 n)))))))

;; pre_swap_
(assert
  (forall ((t1 Int) (t2 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 t2) (< t2 n))
        (=> (not (= t1 t2)) (= (pre1 (swap1 t1 t2 n)) (Swap1 t1 t2 n)))))))

;; pre_toffoli_
(assert
  (forall ((c1 Int) (c2 Int) (t1 Int) (n Int))
    (=>
      (and (<= 0 c1) (< c1 n))
      (=>
        (and (<= 0 c2) (< c2 n))
        (=>
          (and (<= 0 t1) (< t1 n))
          (=>
            (not (= c1 c2))
            (=>
              (not (= c1 t1))
              (=>
                (not (= t1 c2))
                (= (pre1 (toffoli1 c1 c2 t1 n)) (Toffoli c1 c2 t1 n))))))))))

;; pre_fredkin_
(assert
  (forall ((co Int) (t1 Int) (t2 Int) (n Int))
    (=>
      (and (<= 0 t1) (< t1 n))
      (=>
        (and (<= 0 t2) (< t2 n))
        (=>
          (and (<= 0 co) (< co n))
          (=>
            (not (= co t1))
            (=>
              (not (= co t2))
              (=>
                (not (= t2 t1))
                (= (pre1 (fredkin1 co t1 t2 n)) (Fredkin co t1 t2 n))))))))))

;; pre_rx_
(assert (forall ((k Int)) (= (pre1 (rx1 k)) (Rx k))))

;; pre_ry_
(assert (forall ((k Int)) (= (pre1 (ry1 k)) (Ry k))))

;; pre_rz_
(assert (forall ((k Int)) (= (pre1 (rz1 k)) (Rz1 k))))

;; pre_rzp_
(assert (forall ((k Int)) (= (pre1 (rzp k)) (Rzp k))))

;; ancilla_free_pre
(declare-fun ancilla_free_pre (wired_circuit) Bool)

;; ancilla_free_pre'def
(assert
  (forall ((c wired_circuit))
    (=>
      (build_correct1 c)
      (and
        (and
          (and
            (and
              (and
                (and
                  (and
                    (and
                      (and
                        (and
                          (and
                            (and
                              (and
                                (and
                                  (and
                                    (and
                                      (and
                                        (and
                                          (and
                                            (and
                                              (and
                                                (and
                                                  (and
                                                    (and
                                                      (=>
                                                        (= c Skip)
                                                        (ancilla_free_pre c))
                                                      (forall ((x Int))
                                                        (=>
                                                          (= c (Phase1 x))
                                                          (ancilla_free_pre
                                                            c))))
                                                    (forall ((x Int))
                                                      (=>
                                                        (= c (Rx x))
                                                        (ancilla_free_pre c))))
                                                  (forall ((x Int))
                                                    (=>
                                                      (= c (Ry x))
                                                      (ancilla_free_pre c))))
                                                (forall ((x Int))
                                                  (=>
                                                    (= c (Rz1 x))
                                                    (ancilla_free_pre c))))
                                              (forall ((x Int))
                                                (=>
                                                  (= c (Rzp x))
                                                  (ancilla_free_pre c))))
                                            (=>
                                              (= c Hadamard1)
                                              (ancilla_free_pre c)))
                                          (=> (= c S) (ancilla_free_pre c)))
                                        (=> (= c T) (ancilla_free_pre c)))
                                      (=> (= c X) (ancilla_free_pre c)))
                                    (=> (= c Y) (ancilla_free_pre c)))
                                  (=> (= c Z) (ancilla_free_pre c)))
                                (=> (= c Bricks_Cnot) (ancilla_free_pre c)))
                              (=> (= c Bricks_Toffoli) (ancilla_free_pre c)))
                            (=> (= c Bricks_Fredkin) (ancilla_free_pre c)))
                          (=> (= c Bricks_Swap) (ancilla_free_pre c)))
                        (forall ((x Int) (x1 Int) (x2 Int))
                          (=> (= c (Swap1 x x1 x2)) (ancilla_free_pre c))))
                      (forall ((x Int) (x1 Int) (x2 Int))
                        (=> (= c (Cnot1 x x1 x2)) (ancilla_free_pre c))))
                    (forall ((x Int) (x1 Int) (x2 Int) (x3 Int))
                      (=> (= c (Toffoli x x1 x2 x3)) (ancilla_free_pre c))))
                  (forall ((x Int) (x1 Int) (x2 Int) (x3 Int))
                    (=> (= c (Fredkin x x1 x2 x3)) (ancilla_free_pre c))))
                (forall ((x wired_circuit) (x1 Int) (x2 Int))
                  (=>
                    (= c (Place x x1 x2))
                    (= (ancilla_free_pre c) (ancilla_free_pre x)))))
              (forall ((x wired_circuit) (x1 Int) (x2 Int) (x3 Int))
                (=>
                  (= c (Cont x x1 x2 x3))
                  (= (ancilla_free_pre c) (ancilla_free_pre x)))))
            (forall ((x wired_circuit) (x1 wired_circuit))
              (=>
                (= c (Sequence1 x x1))
                (=
                  (ancilla_free_pre c)
                  (and (ancilla_free_pre x) (ancilla_free_pre x1))))))
          (forall ((x wired_circuit) (x1 wired_circuit))
            (=>
              (= c (Parallel1 x x1))
              (=
                (ancilla_free_pre c)
                (and (ancilla_free_pre x) (ancilla_free_pre x1))))))
        (forall ((x wired_circuit) (x1 Int))
          (=> (= c (Ancillas1 x x1)) (not (ancilla_free_pre c))))))))

;; ancilla_free_pre'spec
(assert
  (forall ((c wired_circuit))
    (=> (build_correct1 c) (= (ancilla_free_pre c) (= (ancillas_pre c) 0)))))

;; ancilla_free
(declare-fun ancilla_free (circuit) Bool)

;; ancilla_free'def
(assert
  (forall ((c circuit)) (= (ancilla_free c) (ancilla_free_pre (pre1 c)))))

;; ancilla_free'spec
(assert (forall ((c circuit)) (= (ancilla_free c) (= (ancillas1 c) 0))))

;; set_ancilla_free
(assert (forall ((c circuit)) (=> (= (ancillas1 c) 0) (ancilla_free c))))

;; ancilla_free_seq
(assert
  (forall ((c circuit) (d circuit))
    (=>
      (= (width1 c) (width1 d))
      (=>
        (ancilla_free c)
        (=> (ancilla_free d) (ancilla_free (infix_mnmn c d)))))))

;; phase_invol
(assert
  (forall ((k Int) (x (matrix complex)) (y (matrix complex)))
    (=>
      (is_a_ket_l x 1)
      (=>
        (is_a_ket_basis_elt x)
        (=>
          (= (path_sem1 (to_qc1 (Phase1 k)) x) y)
          (= (path_sem1 (to_qc1 (Phase1 (- k))) y) x))))))

;; rz_invol
(assert
  (forall ((k Int) (x (matrix complex)) (y (matrix complex)))
    (=>
      (is_a_ket_l x 1)
      (=>
        (is_a_ket_basis_elt x)
        (=>
          (= (path_sem1 (to_qc1 (Rz1 k)) x) y)
          (= (path_sem1 (to_qc1 (Rz1 (- k))) y) x))))))

;; ry_invol
(assert
  (forall ((k Int) (x (matrix complex)) (y (matrix complex)))
    (=>
      (is_a_ket_l x 1)
      (=>
        (is_a_ket_basis_elt x)
        (=>
          (= (path_sem1 (to_qc1 (Ry k)) x) y)
          (= (path_sem1 (to_qc1 (Ry (- k))) y) x))))))

;; rx_invol
(assert
  (forall ((k Int) (x (matrix complex)) (y (matrix complex)))
    (=>
      (is_a_ket_l x 1)
      (=>
        (is_a_ket_basis_elt x)
        (=>
          (= (path_sem1 (to_qc1 (Rx k)) x) y)
          (= (path_sem1 (to_qc1 (Rx (- k))) y) x))))))

;; rzp_invol
(assert
  (forall ((k Int) (x (matrix complex)) (y (matrix complex)))
    (=>
      (is_a_ket_l x 1)
      (=>
        (is_a_ket_basis_elt x)
        (=>
          (= (path_sem1 (to_qc1 (Rzp k)) x) y)
          (= (path_sem1 (to_qc1 (Rzp (- k))) y) x))))))

;; yy_invol
(assert
  (forall ((x (matrix complex)) (y (matrix complex)))
    (=>
      (is_a_ket_l x 1)
      (=>
        (is_a_ket_basis_elt x)
        (=> (= (path_sem1 (to_qc1 Y) x) y) (= (path_sem1 (to_qc1 Y) y) x))))))

;; swap_invol
(assert
  (forall ((t1 Int) (t2 Int) (n Int) (x (matrix complex)) (y (matrix complex)))
    (=>
      (is_a_ket_l x n)
      (=>
        (is_a_ket_basis_elt x)
        (=>
          (and (<= 0 t1) (< t1 n))
          (=>
            (and (<= 0 t2) (< t2 n))
            (=>
              (not (= t1 t2))
              (=>
                (= (path_sem1 (to_qc1 (Swap1 t1 t2 n)) x) y)
                (= (path_sem1 (to_qc1 (Swap1 t1 t2 n)) y) x)))))))))

;; cnot_invol
(assert
  (forall ((co Int) (t1 Int) (n Int) (x (matrix complex)) (y (matrix complex)))
    (=>
      (is_a_ket_l x n)
      (=>
        (is_a_ket_basis_elt x)
        (=>
          (and (<= 0 t1) (< t1 n))
          (=>
            (and (<= 0 co) (< co n))
            (=>
              (not (= t1 co))
              (=>
                (= (path_sem1 (to_qc1 (Cnot1 co t1 n)) x) y)
                (= (path_sem1 (to_qc1 (Cnot1 co t1 n)) y) x)))))))))

;; toffoli_invol
(assert
  (forall ((c1 Int) (c2 Int) (t1 Int) (n Int) (x (matrix complex)) (y (matrix complex)))
    (=>
      (is_a_ket_l x n)
      (=>
        (is_a_ket_basis_elt x)
        (=>
          (and (<= 0 c1) (< c1 n))
          (=>
            (and (<= 0 c2) (< c2 n))
            (=>
              (and (<= 0 t1) (< t1 n))
              (=>
                (not (= t1 c1))
                (=>
                  (not (= t1 c2))
                  (=>
                    (not (= c2 c1))
                    (=>
                      (= (path_sem1 (to_qc1 (Toffoli c1 c2 t1 n)) x) y)
                      (= (path_sem1 (to_qc1 (Toffoli c1 c2 t1 n)) y) x))))))))))))

;; fredkin_invol
(assert
  (forall ((c Int) (t1 Int) (t2 Int) (n Int) (x (matrix complex)) (y (matrix complex)))
    (=>
      (is_a_ket_l x n)
      (=>
        (is_a_ket_basis_elt x)
        (=>
          (and (<= 0 t1) (< t1 n))
          (=>
            (and (<= 0 t2) (< t2 n))
            (=>
              (and (<= 0 c) (< c n))
              (=>
                (not (= c t1))
                (=>
                  (not (= c t2))
                  (=>
                    (not (= t2 t1))
                    (=>
                      (= (path_sem1 (to_qc1 (Fredkin c t1 t2 n)) x) y)
                      (= (path_sem1 (to_qc1 (Fredkin c t1 t2 n)) y) x))))))))))))

;; reverse_pre
(declare-fun reverse_pre (wired_circuit) wired_circuit)

;; reverse_pre'def
(assert
  (forall ((c wired_circuit))
    (=>
      (= (ancillas_pre c) 0)
      (=>
        (correct1 c)
        (and
          (and
            (and
              (and
                (and
                  (and
                    (and
                      (and
                        (and
                          (and
                            (and
                              (and
                                (and
                                  (and
                                    (and
                                      (and
                                        (and
                                          (and
                                            (and
                                              (and
                                                (and
                                                  (and
                                                    (and
                                                      (and
                                                        (=>
                                                          (= c Skip)
                                                          (= (reverse_pre c) 
                                                          Skip))
                                                        (forall ((k Int))
                                                          (=>
                                                            (= c (Phase1 k))
                                                            (= (reverse_pre
                                                                 c) (Phase1
                                                                    (- k))))))
                                                      (forall ((k Int))
                                                        (=>
                                                          (= c (Rx k))
                                                          (= (reverse_pre c) 
                                                          (Rx
                                                            (- k))))))
                                                    (forall ((k Int))
                                                      (=>
                                                        (= c (Ry k))
                                                        (= (reverse_pre c) 
                                                        (Ry
                                                          (- k))))))
                                                  (forall ((k Int))
                                                    (=>
                                                      (= c (Rz1 k))
                                                      (= (reverse_pre c) 
                                                      (Rz1
                                                        (- k))))))
                                                (forall ((k Int))
                                                  (=>
                                                    (= c (Rzp k))
                                                    (= (reverse_pre c) 
                                                    (Rzp
                                                      (- k))))))
                                              (=>
                                                (= c Hadamard1)
                                                (= (reverse_pre c) Hadamard1)))
                                            (=>
                                              (= c S)
                                              (= (reverse_pre c) (Rzp (- 2)))))
                                          (=>
                                            (= c T)
                                            (= (reverse_pre c) (Rzp (- 3)))))
                                        (=> (= c X) (= (reverse_pre c) X)))
                                      (=> (= c Y) (= (reverse_pre c) Y)))
                                    (=> (= c Z) (= (reverse_pre c) Z)))
                                  (=>
                                    (= c Bricks_Cnot)
                                    (= (reverse_pre c) Bricks_Cnot)))
                                (=>
                                  (= c Bricks_Toffoli)
                                  (= (reverse_pre c) Bricks_Toffoli)))
                              (=>
                                (= c Bricks_Fredkin)
                                (= (reverse_pre c) Bricks_Fredkin)))
                            (=>
                              (= c Bricks_Swap)
                              (= (reverse_pre c) Bricks_Swap)))
                          (forall ((t1 Int) (t2 Int) (n Int))
                            (=>
                              (= c (Swap1 t1 t2 n))
                              (= (reverse_pre c) (Swap1 t1 t2 n)))))
                        (forall ((c1 Int) (t1 Int) (n Int))
                          (=>
                            (= c (Cnot1 c1 t1 n))
                            (= (reverse_pre c) (Cnot1 c1 t1 n)))))
                      (forall ((c1 Int) (c2 Int) (t1 Int) (n Int))
                        (=>
                          (= c (Toffoli c1 c2 t1 n))
                          (= (reverse_pre c) (Toffoli c1 c2 t1 n)))))
                    (forall ((c1 Int) (t1 Int) (t2 Int) (n Int))
                      (=>
                        (= c (Fredkin c1 t1 t2 n))
                        (= (reverse_pre c) (Fredkin c1 t1 t2 n)))))
                  (forall ((c1 wired_circuit) (p Int) (n Int))
                    (=>
                      (= c (Place c1 p n))
                      (= (reverse_pre c) (Place (reverse_pre c1) p n)))))
                (forall ((c1 wired_circuit) (co Int) (t1 Int) (n Int))
                  (=>
                    (= c (Cont c1 co t1 n))
                    (= (reverse_pre c) (Cont (reverse_pre c1) co t1 n)))))
              (forall ((d wired_circuit) (e wired_circuit))
                (=>
                  (= c (Sequence1 d e))
                  (= (reverse_pre c) (Sequence1
                                       (reverse_pre e)
                                       (reverse_pre d))))))
            (forall ((d wired_circuit) (e wired_circuit))
              (=>
                (= c (Parallel1 d e))
                (= (reverse_pre c) (Parallel1
                                     (reverse_pre d)
                                     (reverse_pre e))))))
          (forall ((d wired_circuit) (l Int))
            (=> (= c (Ancillas1 d l)) (= (reverse_pre c) (Ancillas1 d l)))))))))

;; reverse_pre'spec
(assert
  (forall ((c wired_circuit))
    (=>
      (= (ancillas_pre c) 0)
      (=>
        (correct1 c)
        (and
          (correct1 (reverse_pre c))
          (and
            (= (width_pre1 (reverse_pre c)) (width_pre1 c))
            (and
              (= (size_pre (reverse_pre c)) (size_pre c))
              (and
                (= (ancillas_pre (reverse_pre c)) 0)
                (and
                  (= (width1 (to_qc1 (reverse_pre c))) (width1 (to_qc1 c)))
                  (and
                    (= (size1 (to_qc1 (reverse_pre c))) (size1 (to_qc1 c)))
                    (and
                      (ancilla_free (to_qc1 (reverse_pre c)))
                      (and
                        (forall ((x (matrix complex)) (y (matrix complex)))
                          (=>
                            (is_a_ket_l x (width_pre1 c))
                            (=>
                              (is_a_ket_basis_elt x)
                              (=>
                                (is_a_ket_l y (width_pre1 c))
                                (and
                                  (=>
                                    (= (path_sem1 (to_qc1 c) x) y)
                                    (= (path_sem1 (to_qc1 (reverse_pre c)) y) x))
                                  (=>
                                    (= (path_sem1 (to_qc1 (reverse_pre c)) x) y)
                                    (= (path_sem1 (to_qc1 c) y) x)))))))
                        (forall ((x (matrix complex)) (y (matrix complex)))
                          (=>
                            (is_a_ket_l x (width_pre1 c))
                            (=>
                              (is_a_ket_l y (width_pre1 c))
                              (=
                                (= (path_sem1 (to_qc1 c) x) y)
                                (= (path_sem1 (to_qc1 (reverse_pre c)) y) x)))))))))))))))))

;; reverse
(declare-fun reverse (circuit) circuit)

;; reverse'def
(assert
  (forall ((c circuit))
    (=> (ancilla_free c) (= (reverse c) (to_qc1 (reverse_pre (pre1 c)))))))

;; reverse'spec
(assert
  (forall ((c circuit))
    (=>
      (ancilla_free c)
      (and
        (= (width1 (reverse c)) (width1 c))
        (and
          (= (size1 (reverse c)) (size1 c))
          (and
            (ancilla_free (reverse c))
            (forall ((x (matrix complex)) (y (matrix complex)))
              (=>
                (is_a_ket_l x (width1 c))
                (=>
                  (is_a_ket_l y (width1 c))
                  (= (= (path_sem1 c x) y) (= (path_sem1 (reverse c) y) x)))))))))))

;; reverse_invol
(assert
  (forall ((c circuit))
    (=> (ancilla_free c) (infix_lseqgt (reverse (reverse c)) c))))

;; path_sem_reverse_invol
(assert
  (forall ((c circuit) (x (matrix complex)))
    (=>
      (is_a_ket_l x (width1 c))
      (=>
        (ancilla_free c)
        (= (path_sem1 (reverse (reverse c)) x) (path_sem1 c x))))))

;; path_sem_reverse
(assert
  (forall ((c circuit) (x (matrix complex)) (y (matrix complex)))
    (=>
      (is_a_ket_l x (width1 c))
      (=>
        (= (path_sem1 c x) y)
        (=> (ancilla_free c) (= (path_sem1 (reverse c) y) x))))))

;; sem_reverse
(assert
  (forall ((c circuit) (x (matrix complex)) (y (matrix complex)))
    (=> (sem1 c x y) (=> (ancilla_free c) (sem1 (reverse c) y x)))))

;; qft
(declare-fun qft (Int) circuit)

;; qft'def
(assert (forall ((n Int)) (=> (< 0 n) (= (qft n) (reverse (qft_rev n))))))

;; fc
(declare-fun fc703 (Int
  bitvec) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((n Int) (x bitvec) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc703 n x))
           (t2tb77 y))) (infix_asdtdt
                          (qft_rev_coeff x (bv_inversion y) n)
                          (bv_to_ket y)))))

;; qft'spec
(assert
  (forall ((n Int))
    (=>
      (< 0 n)
      (and
        (<= (size1 (qft n)) (polysquare n cont_size1 0 0))
        (and
          (= (ancillas1 (qft n)) 0)
          (and
            (= (width1 (qft n)) n)
            (forall ((x bitvec))
              (=>
                (= (length x) n)
                (= (path_sem1
                     (qft n)
                     (infix_asdtdt
                       (pow_inv_sqrt_2 n)
                       (ket_sum_l
                         bitvec1
                         (t2tb79 (n_bvs n))
                         (t2tb80 (fc703 n x))
                         n))) (bv_to_ket x))))))))))

;; int_qft_coeff
(declare-fun int_qft_coeff (Int
  Int
  Int) complex)

;; int_qft_coeff'def
(assert
  (forall ((i Int) (j Int) (n Int))
    (=> (< 0 n) (= (int_qft_coeff i j n) (ang_exp (infix_sldtsl (* i j) n))))))

;; int_qft_coeff'spec
(assert
  (forall ((i Int) (j Int) (n Int))
    (=>
      (< 0 n)
      (and
        (= (modulus (int_qft_coeff i j n)) c_one)
        (= (int_qft_coeff i j n) (int_qft_rev_coeff
                                   (- i)
                                   (int_bit_inversion (mod j (power 2 n)) n)
                                   n))))))

;; int_qft_coeff_rev
(assert
  (forall ((i Int) (j Int) (n Int))
    (=> (< 0 n) (= (int_qft_coeff i j n) (int_qft_coeff j i n)))))

;; int_qft_coeff_minus_to_right
(assert
  (forall ((i Int) (j Int) (n Int))
    (=> (< 0 n) (= (int_qft_coeff (- i) j n) (int_qft_coeff i (- j) n)))))

;; int_qft_coeff_minus_to_left
(assert
  (forall ((i Int) (j Int) (n Int))
    (=> (< 0 n) (= (int_qft_coeff i (- j) n) (int_qft_coeff (- i) j n)))))

;; int_qft_coeff_as_real
(assert
  (forall ((i Int) (j Int) (n Int))
    (=>
      (< 0 n)
      (= (int_qft_coeff i j n) (ang_exp
                                 (real_to_ang
                                   (infix_asdt
                                     (i_to_c (* i j))
                                     (pow_inv_2 n))))))))

;; int_qft_coeff_expo
(assert
  (forall ((i Int) (j Int) (n Int))
    (=>
      (< 0 n)
      (= (int_qft_coeff i j n) (cpower (ang_exp (infix_sldtsl i n)) j)))))

;; int_qft_coeff_expo_
(assert
  (forall ((i Int) (j Int) (n Int))
    (=>
      (< 0 n)
      (= (int_qft_coeff i j n) (cpower (ang_exp (infix_sldtsl j n)) i)))))

;; int_qft_coeff_as_mod
(assert
  (forall ((i Int) (j Int) (n Int))
    (=>
      (< 0 n)
      (= (int_qft_coeff i j n) (int_qft_coeff
                                 (mod i (power 2 n))
                                 (mod j (power 2 n))
                                 n)))))

;; int_qft_rev_coeff_to_qft_coeff
(assert
  (forall ((i Int) (j Int) (n Int))
    (=>
      (< 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (=>
          (and (<= 0 j) (< j (power 2 n)))
          (= (int_qft_rev_coeff i j n) (int_qft_coeff
                                         (int_bit_inversion j n)
                                         (- i)
                                         n)))))))

;; qft_rev_
(declare-fun qft_rev_ (Int) circuit)

;; qft_rev_'def
(assert (forall ((n Int)) (=> (< 0 n) (= (qft_rev_ n) (qft_rev n)))))

;; fc
(declare-fun fc704 (Int
  bitvec) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((n Int) (x bitvec) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc704 n x))
           (t2tb77 y))) (infix_asdtdt
                          (int_qft_coeff (- (bv_to_int y)) (bv_to_int x) n)
                          (bv_to_ket y)))))

;; qft_rev_'spec
(assert
  (forall ((n Int))
    (=>
      (< 0 n)
      (and
        (<= (size1 (qft_rev_ n)) (polysquare n cont_size1 0 0))
        (and
          (= (ancillas1 (qft_rev_ n)) 0)
          (and
            (= (width1 (qft_rev_ n)) n)
            (and
              (forall ((x bitvec))
                (=>
                  (= (length x) n)
                  (= (path_sem1 (qft_rev_ n) (bv_to_ket x)) (infix_asdtdt
                                                              (pow_inv_sqrt_2
                                                                n)
                                                              (ket_sum_l
                                                                bitvec1
                                                                (t2tb79
                                                                  (n_bvs n))
                                                                (t2tb80
                                                                  (fc704 n x))
                                                                n)))))
              (and
                (forall ((x bitvec))
                  (forall ((i Int))
                    (=>
                      (= (length x) n)
                      (=>
                        (and (<= 0 i) (< i (power 2 n)))
                        (= (tb2t
                             (get
                               complex1
                               (t2tb65
                                 (path_sem1 (qft_rev_ n) (bv_to_ket x)))
                               i
                               0)) (infix_asdt
                                     (pow_inv_sqrt_2 n)
                                     (int_qft_coeff (- i) (bv_to_int x) n)))))))
                (forall ((x bitvec))
                  (forall ((i Int))
                    (=>
                      (= (length x) n)
                      (=>
                        (and (<= 0 i) (< i (power 2 n)))
                        (= (tb2t
                             (get
                               complex1
                               (t2tb65
                                 (path_sem1 (qft_rev_ n) (bv_to_ket x)))
                               i
                               0)) (infix_asdt
                                     (pow_inv_sqrt_2 n)
                                     (int_qft_coeff i (- (bv_to_int x)) n)))))))))))))))

;; fc
(declare-fun fc705 (Int
  (matrix complex)) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((n Int) (x (matrix complex)) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc705 n x))
           (t2tb77 y))) (infix_asdtdt
                          (int_qft_coeff (- (ket_to_int x)) (bv_to_int y) n)
                          (bv_to_ket y)))))

;; path_sem_rev_qft_unit
(assert
  (forall ((n Int))
    (=>
      (< 0 n)
      (forall ((x (matrix complex)))
        (=>
          (is_a_ket_l x n)
          (=>
            (is_a_ket_basis_elt x)
            (= (path_sem1 (qft_rev n) x) (infix_asdtdt
                                           (pow_inv_sqrt_2 n)
                                           (ket_sum_l
                                             bitvec1
                                             (t2tb79 (n_bvs n))
                                             (t2tb80 (fc705 n x))
                                             n)))))))))

;; fc
(declare-fun fc706 (Int
  Int) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((n Int) (i Int) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc706 n i))
           (t2tb77 y))) (infix_asdtdt
                          (int_qft_coeff (- i) (bv_to_int y) n)
                          (bv_to_ket y)))))

;; path_sem_rev_qft_unit_int
(assert
  (forall ((n Int))
    (=>
      (< 0 n)
      (forall ((i Int))
        (=>
          (and (<= 0 i) (< i (power 2 n)))
          (= (path_sem1 (qft_rev n) (ket n i)) (infix_asdtdt
                                                 (pow_inv_sqrt_2 n)
                                                 (ket_sum_l
                                                   bitvec1
                                                   (t2tb79 (n_bvs n))
                                                   (t2tb80 (fc706 n i))
                                                   n))))))))

;; fc
(declare-fun fc707 (Int
  (matrix complex)) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((n Int) (x (matrix complex)) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc707 n x))
           (t2tb77 y))) (infix_asdtdt
                          (int_qft_coeff (- (ket_to_int x)) (bv_to_int y) n)
                          (bv_to_ket y)))))

;; sem_rev_qft_unit
(assert
  (forall ((n Int))
    (=>
      (< 0 n)
      (forall ((x (matrix complex)))
        (=>
          (is_a_ket_l x n)
          (=>
            (is_a_ket_basis_elt x)
            (sem1
              (qft_rev n)
              x
              (infix_asdtdt
                (pow_inv_sqrt_2 n)
                (ket_sum_l bitvec1 (t2tb79 (n_bvs n)) (t2tb80 (fc707 n x)) n)))))))))

;; fc
(declare-fun fc708 (Int
  Int) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((n Int) (i Int) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc708 n i))
           (t2tb77 y))) (infix_asdtdt
                          (int_qft_coeff (- i) (bv_to_int y) n)
                          (bv_to_ket y)))))

;; sem_rev_qft_unit_int
(assert
  (forall ((n Int))
    (=>
      (< 0 n)
      (forall ((i Int))
        (=>
          (and (<= 0 i) (< i (power 2 n)))
          (sem1
            (qft_rev n)
            (ket n i)
            (infix_asdtdt
              (pow_inv_sqrt_2 n)
              (ket_sum_l bitvec1 (t2tb79 (n_bvs n)) (t2tb80 (fc708 n i)) n))))))))

;; int_qft_coeff_eq
(assert
  (forall ((i Int) (iqt Int) (j Int) (jqt Int) (n Int) (nqt Int))
    (=>
      (= n nqt)
      (=>
        (< 0 n)
        (=>
          (= (mod i (power 2 n)) (mod iqt (power 2 n)))
          (=>
            (= (mod j (power 2 n)) (mod jqt (power 2 n)))
            (= (int_qft_coeff i j n) (int_qft_coeff iqt jqt n))))))))

;; fc
(declare-fun fc709 (Int
  Int) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((i Int) (n Int) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc709 i n))
           (t2tb77 y))) (infix_asdtdt
                          (int_qft_coeff i (bv_to_int y) n)
                          (bv_to_ket y)))))

;; rev_qft_apply_qft
(assert
  (forall ((i Int) (n Int))
    (=>
      (< 0 n)
      (= (path_sem1
           (qft_rev n)
           (infix_asdtdt
             (pow_inv_sqrt_2 n)
             (ket_sum_l bitvec1 (t2tb79 (n_bvs n)) (t2tb80 (fc709 i n)) n))) 
      (ket
        n
        (mod i (power 2 n)))))))

;; apply_qft
(declare-fun apply_qft (Int
  Int) (matrix complex))

;; result
(declare-fun result86 (Int
  Int) (Array bitvec (matrix complex)))

;; result'def
(assert
  (forall ((n Int) (i Int) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (result86 n i))
           (t2tb77 y))) (infix_asdtdt
                          (int_qft_coeff i (bv_to_int y) n)
                          (bv_to_ket y)))))

;; apply_qft'def
(assert
  (forall ((n Int) (i Int))
    (=>
      (< 0 n)
      (= (apply_qft n i) (infix_asdtdt
                           (pow_inv_sqrt_2 n)
                           (ket_sum_l
                             bitvec1
                             (t2tb79 (n_bvs n))
                             (t2tb80 (result86 n i))
                             n))))))

;; apply_qft'spec
(assert
  (forall ((n Int) (i Int))
    (=>
      (< 0 n)
      (and
        (is_a_ket_l (apply_qft n i) n)
        (= (apply_qft n i) (path_sem1 (qft n) (ket n (mod i (power 2 n)))))))))

;; fc
(declare-fun fc710 () (Array bitvec (Array bitvec bitvec)))

;; fc
(declare-fun fc711 (Int) (Array bitvec (Array bitvec angle)))

;; fc'def
(assert
  (forall ((us bitvec) (y bitvec))
    (= (tb2t77
         (infix_at
           bitvec1
           bitvec1
           (infix_at
             (infix_mngt bitvec1 bitvec1)
             bitvec1
             (t2tb119 fc710)
             (t2tb77 us))
           (t2tb77 y))) y)))

;; fc'def
(assert
  (forall ((n Int) (x bitvec) (y bitvec))
    (= (tb2t84
         (infix_at
           angle1
           bitvec1
           (infix_at
             (infix_mngt bitvec1 angle1)
             bitvec1
             (t2tb121 (fc711 n))
             (t2tb77 x))
           (t2tb77 y))) (infix_sldtsl (* (bv_to_int x) (bv_to_int y)) n))))

;; qft_correct_bv
(assert
  (forall ((n Int))
    (=> (< 0 n) (correct_path_sum_bv1 (qft n) n fc710 (fc711 n)))))

;; fc
(declare-fun fc712 (Int
  bitvec) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((n Int) (x bitvec) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc712 n x))
           (t2tb77 y))) (infix_asdtdt
                          (int_qft_coeff (- (bv_to_int x)) (bv_to_int y) n)
                          (bv_to_ket y)))))

;; path_sem_qft_pre
(assert
  (forall ((n Int) (x bitvec))
    (=>
      (< 0 n)
      (=>
        (= (length x) n)
        (= (path_sem1
             (qft n)
             (infix_asdtdt
               (pow_inv_sqrt_2 n)
               (ket_sum_l bitvec1 (t2tb79 (n_bvs n)) (t2tb80 (fc712 n x)) n))) 
        (bv_to_ket
          x))))))

;; fc
(declare-fun fc713 (Int
  bitvec) (Array bitvec (matrix complex)))

;; fc'def
(assert
  (forall ((n Int) (x bitvec) (y bitvec))
    (= (tb2t65
         (infix_at
           (matrix1 complex1)
           bitvec1
           (t2tb80 (fc713 n x))
           (t2tb77 y))) (infix_asdtdt
                          (int_qft_coeff (- (bv_to_int x)) (bv_to_int y) n)
                          (bv_to_ket y)))))

;; path_sem_qft
(assert
  (forall ((n Int))
    (=>
      (< 0 n)
      (forall ((x bitvec))
        (=>
          (= (length x) n)
          (= (path_sem1
               (qft n)
               (infix_asdtdt
                 (pow_inv_sqrt_2 n)
                 (ket_sum_l
                   bitvec1
                   (t2tb79 (n_bvs n))
                   (t2tb80 (fc713 n x))
                   n))) (bv_to_ket x)))))))

;; get_ket_apply_qft
(assert
  (forall ((n Int) (i Int) (j Int))
    (=>
      (< 0 n)
      (=>
        (and (<= 0 j) (< j (power 2 n)))
        (= (tb2t (get complex1 (t2tb65 (apply_qft n i)) j 0)) (infix_asdt
                                                                (pow_inv_sqrt_2
                                                                  n)
                                                                (int_qft_coeff
                                                                  i
                                                                  j
                                                                  n)))))))

;; apply_qft_equiv
(assert
  (forall ((n Int) (i Int) (j Int))
    (=>
      (< 0 n)
      (=>
        (= (mod i (power 2 n)) (mod j (power 2 n)))
        (= (apply_qft n i) (apply_qft n j))))))

;; apply_qft_mod
(assert
  (forall ((n Int) (i Int))
    (=> (< 0 n) (= (apply_qft n (mod i (power 2 n))) (apply_qft n i)))))

;; qft_rev_qft_int
(assert
  (forall ((n Int) (i Int))
    (=>
      (< 0 n)
      (= (path_sem1 (qft_rev n) (apply_qft n i)) (ket n (mod i (power 2 n)))))))

;; from_qft_basis
(assert
  (forall ((n Int) (i Int))
    (=>
      (< 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (= (path_sem1 (qft_rev n) (apply_qft n i)) (ket n i))))))

;; qft_apply_basis
(assert
  (forall ((n Int) (i Int))
    (=>
      (< 0 n)
      (= (path_sem1 (qft n) (ket n (mod i (power 2 n)))) (apply_qft n i)))))

;; sem_qft_rev_qft_int
(assert
  (forall ((n Int) (i Int))
    (=>
      (< 0 n)
      (sem1 (qft_rev n) (apply_qft n i) (ket n (mod i (power 2 n)))))))

;; sem_from_qft_basis
(assert
  (forall ((n Int) (i Int))
    (=>
      (< 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (sem1 (qft_rev n) (apply_qft n i) (ket n i))))))

;; sem_qft_apply_basis
(assert
  (forall ((n Int) (i Int))
    (=> (< 0 n) (sem1 (qft n) (ket n (mod i (power 2 n))) (apply_qft n i)))))

;; apply_qft_eq
(assert
  (forall ((n Int) (nqt Int) (i Int) (iqt Int))
    (=>
      (< 0 n)
      (=>
        (= n nqt)
        (=>
          (= (mod i (power 2 n)) (mod iqt (power 2 n)))
          (= (apply_qft n i) (apply_qft nqt iqt)))))))

;; apply_qft_as_mod
(declare-fun apply_qft_as_mod (Int
  Int) tuple0)

;; apply_qft_as_mod'def
(assert
  (forall ((n Int) (i Int)) (=> (< 0 n) (= (apply_qft_as_mod n i) Tuple0))))

;; apply_qft_as_mod'spec
(assert
  (forall ((n Int) (i Int))
    (=> (< 0 n) (= (apply_qft n i) (apply_qft n (mod i (power 2 n)))))))

;; int_qft_coeff_add
(assert
  (forall ((i Int) (iqt Int) (j Int) (n Int))
    (=>
      (< 0 n)
      (= (int_qft_coeff (+ i iqt) j n) (infix_asdt
                                         (int_qft_coeff i j n)
                                         (int_qft_coeff iqt j n))))))

;; path_sem_qft_unit
(assert
  (forall ((n Int))
    (=>
      (< 0 n)
      (forall ((x (matrix complex)))
        (=>
          (is_a_ket_l x n)
          (=>
            (is_a_ket_basis_elt x)
            (= (path_sem1 (qft n) x) (apply_qft n (ket_to_int x)))))))))

;; path_sem_qft_bv
(assert
  (forall ((n Int))
    (=>
      (< 0 n)
      (forall ((x bitvec))
        (=>
          (= (length x) n)
          (= (path_sem1 (qft n) (bv_to_ket x)) (apply_qft n (bv_to_int x))))))))

;; to_qft_basis
(assert
  (forall ((n Int) (i Int))
    (=>
      (< 0 n)
      (=>
        (and (<= 0 i) (< i (power 2 n)))
        (forall ((x bitvec))
          (=>
            (= (length x) n)
            (= (path_sem1 (qft n) (ket n i)) (apply_qft n i))))))))

;; place_qft_zero
(declare-fun place_qft_zero (Int
  Int) circuit)

;; place_qft_zero'def
(assert
  (forall ((n Int) (k Int))
    (=>
      (< 0 n)
      (=> (< 0 k) (= (place_qft_zero n k) (place1 (qft n) 0 (+ n k)))))))

;; place_qft_zero'spec
(assert
  (forall ((n Int) (k Int))
    (=>
      (< 0 n)
      (=>
        (< 0 k)
        (and
          (= (width1 (place_qft_zero n k)) (+ n k))
          (and
            (<= (size1 (place_qft_zero n k)) (polysquare n cont_size1 0 0))
            (and
              (= (ancillas1 (place_qft_zero n k)) 0)
              (and
                (forall ((g Int))
                  (forall ((y (matrix complex)))
                    (=>
                      (and (<= 0 g) (< g (power 2 n)))
                      (=>
                        (is_a_ket_l y k)
                        (sem1
                          (place_qft_zero n k)
                          (kronecker (ket n g) y)
                          (kronecker (apply_qft n g) y))))))
                (= (width1 (place_qft_zero n k)) (+ n k))))))))))

;; place_rev_qft_zero
(declare-fun place_rev_qft_zero (Int
  Int) circuit)

;; place_rev_qft_zero'def
(assert
  (forall ((n Int) (k Int))
    (=>
      (< 0 n)
      (=>
        (< 0 k)
        (= (place_rev_qft_zero n k) (reverse (place_qft_zero n k)))))))

;; place_rev_qft_zero'spec
(assert
  (forall ((n Int) (k Int))
    (=>
      (< 0 n)
      (=>
        (< 0 k)
        (and
          (= (width1 (place_rev_qft_zero n k)) (+ n k))
          (and
            (<= (size1 (place_rev_qft_zero n k)) (polysquare
                                                   n
                                                   cont_size1
                                                   0
                                                   0))
            (and
              (= (ancillas1 (place_rev_qft_zero n k)) 0)
              (forall ((g Int))
                (forall ((y (matrix complex)))
                  (=>
                    (and (<= 0 g) (< g (power 2 n)))
                    (=>
                      (is_a_ket_l y k)
                      (sem1
                        (place_rev_qft_zero n k)
                        (kronecker (apply_qft n g) y)
                        (kronecker (ket n g) y)))))))))))))

;; place_qft
(declare-fun place_qft (Int
  Int
  Int) circuit)

;; place_qft'def
(assert
  (forall ((n Int) (k Int) (size_reg Int))
    (=>
      (< 0 n)
      (=>
        (< 0 k)
        (=>
          (< (+ k n) size_reg)
          (= (place_qft n k size_reg) (place1 (qft n) k size_reg)))))))

;; place_qft'spec
(assert
  (forall ((n Int) (k Int) (size_reg Int))
    (=>
      (< 0 n)
      (=>
        (< 0 k)
        (=>
          (< (+ k n) size_reg)
          (and
            (= (width1 (place_qft n k size_reg)) size_reg)
            (and
              (<= (size1 (place_qft n k size_reg)) (polysquare
                                                     n
                                                     cont_size1
                                                     0
                                                     0))
              (and
                (= (ancillas1 (place_qft n k size_reg)) 0)
                (and
                  (forall ((g Int))
                    (forall ((y (matrix complex)) (z (matrix complex)))
                      (=>
                        (and (<= 0 g) (< g (power 2 n)))
                        (=>
                          (is_a_ket_l y k)
                          (=>
                            (is_a_ket_l z (- (- size_reg k) n))
                            (sem1
                              (place_qft n k size_reg)
                              (kronecker y (kronecker (ket n g) z))
                              (kronecker y (kronecker (apply_qft n g) z))))))))
                  (= (width1 (place_qft n k size_reg)) size_reg))))))))))

;; place_rev_qft
(declare-fun place_rev_qft (Int
  Int
  Int) circuit)

;; place_rev_qft'def
(assert
  (forall ((n Int) (k Int) (size_reg Int))
    (=>
      (< 0 n)
      (=>
        (< 0 k)
        (=>
          (< (+ k n) size_reg)
          (= (place_rev_qft n k size_reg) (reverse (place_qft n k size_reg))))))))

;; place_rev_qft'spec
(assert
  (forall ((n Int) (k Int) (size_reg Int))
    (=>
      (< 0 n)
      (=>
        (< 0 k)
        (=>
          (< (+ k n) size_reg)
          (and
            (= (width1 (place_rev_qft n k size_reg)) size_reg)
            (and
              (<= (size1 (place_rev_qft n k size_reg)) (polysquare
                                                         n
                                                         cont_size1
                                                         0
                                                         0))
              (and
                (= (ancillas1 (place_rev_qft n k size_reg)) 0)
                (and
                  (forall ((g Int))
                    (forall ((y (matrix complex)) (z (matrix complex)))
                      (=>
                        (and (<= 0 g) (< g (power 2 n)))
                        (=>
                          (is_a_ket_l y k)
                          (=>
                            (is_a_ket_l z (- (- size_reg k) n))
                            (sem1
                              (place_rev_qft n k size_reg)
                              (kronecker y (kronecker (apply_qft n g) z))
                              (kronecker y (kronecker (ket n g) z))))))))
                  (= (width1 (place_rev_qft n k size_reg)) size_reg))))))))))

;; apply_function_in_qft_basis
(declare-fun apply_function_in_qft_basis (circuit
  Int
  Int
  Int
  (Array Int Int)) circuit)

;; apply_function_in_qft_basis'spec
(assert
  (forall ((c circuit) (n Int) (k Int) (size_reg Int) (f (Array Int Int)))
    (=>
      (< 0 n)
      (=>
        (< 0 k)
        (=>
          (< (+ k n) size_reg)
          (=>
            (= (width1 c) size_reg)
            (=>
              (forall ((i Int))
                (=>
                  (and (<= 0 i) (< i (power 2 n)))
                  (and (<= 0 (select f i)) (< (select f i) (power 2 n)))))
              (and
                (<= (size1 (apply_function_in_qft_basis c n k size_reg f)) (+ 
                (polysquare
                  n
                  (* cont_size1 2)
                  0
                  0) (size1 c)))
                (and
                  (= (ancillas1
                       (apply_function_in_qft_basis c n k size_reg f)) 
                  (ancillas1
                    c))
                  (and
                    (= (width1
                         (apply_function_in_qft_basis c n k size_reg f)) size_reg)
                    (and
                      (forall ((y (matrix complex)) (z (matrix complex)))
                        (forall ((i Int))
                          (=>
                            (and (<= 0 i) (< i (power 2 n)))
                            (=>
                              (is_a_ket_l y k)
                              (=>
                                (is_a_ket_l z (- (- size_reg n) k))
                                (=>
                                  (= (path_sem1
                                       c
                                       (kronecker
                                         y
                                         (kronecker (apply_qft n i) z))) 
                                  (kronecker
                                    y
                                    (kronecker (apply_qft n (select f i)) z)))
                                  (= (path_sem1
                                       (apply_function_in_qft_basis
                                         c
                                         n
                                         k
                                         size_reg
                                         f)
                                       (kronecker y (kronecker (ket n i) z))) 
                                  (kronecker
                                    y
                                    (kronecker (ket n (select f i)) z)))))))))
                      (= (apply_function_in_qft_basis c n k size_reg f) 
                      (infix_mnmn
                        (infix_mnmn (place_qft n k size_reg) c)
                        (place_rev_qft n k size_reg))))))))))))))

;; apply_function_in_qft_basis_gen
(declare-fun apply_function_in_qft_basis_gen (circuit
  Int
  Int
  Int) circuit)

;; apply_function_in_qft_basis_gen'def
(assert
  (forall ((c circuit) (n Int) (k Int) (size_reg Int))
    (=>
      (< 0 n)
      (=>
        (< 0 k)
        (=>
          (< (+ k n) size_reg)
          (=>
            (= (width1 c) size_reg)
            (= (apply_function_in_qft_basis_gen c n k size_reg) (infix_mnmn
                                                                  (infix_mnmn
                                                                    (place_qft
                                                                    n
                                                                    k
                                                                    size_reg)
                                                                    c)
                                                                  (place_rev_qft
                                                                    n
                                                                    k
                                                                    size_reg)))))))))

;; apply_function_in_qft_basis_gen'spec
(assert
  (forall ((c circuit) (n Int) (k Int) (size_reg Int))
    (=>
      (< 0 n)
      (=>
        (< 0 k)
        (=>
          (< (+ k n) size_reg)
          (=>
            (= (width1 c) size_reg)
            (and
              (<= (size1 (apply_function_in_qft_basis_gen c n k size_reg)) (+ 
              (polysquare
                n
                (* cont_size1 2)
                0
                0) (size1 c)))
              (and
                (= (ancillas1
                     (apply_function_in_qft_basis_gen c n k size_reg)) 
                (ancillas1
                  c))
                (and
                  (= (width1
                       (apply_function_in_qft_basis_gen c n k size_reg)) size_reg)
                  (forall ((y (matrix complex)) (z (matrix complex)))
                    (forall ((i Int))
                      (forall ((f (Array Int Int)))
                        (=>
                          (and (<= 0 i) (< i (power 2 n)))
                          (=>
                            (is_a_ket_l y k)
                            (=>
                              (is_a_ket_l z (- (- size_reg n) k))
                              (=>
                                (forall ((iqt Int))
                                  (=>
                                    (and (<= 0 iqt) (< iqt (power 2 n)))
                                    (and
                                      (<= 0 (select f iqt))
                                      (< (select f iqt) (power 2 n)))))
                                (=>
                                  (= (path_sem1
                                       c
                                       (kronecker
                                         y
                                         (kronecker (apply_qft n i) z))) 
                                  (kronecker
                                    y
                                    (kronecker (apply_qft n (select f i)) z)))
                                  (= (path_sem1
                                       (apply_function_in_qft_basis_gen
                                         c
                                         n
                                         k
                                         size_reg)
                                       (kronecker y (kronecker (ket n i) z))) 
                                  (kronecker
                                    y
                                    (kronecker (ket n (select f i)) z))))))))))))))))))))

;; apply_function_in_qft_basis_zero
(declare-fun apply_function_in_qft_basis_zero (circuit
  Int
  Int
  (Array Int Int)) circuit)

;; apply_function_in_qft_basis_zero'spec
(assert
  (forall ((c circuit) (n Int) (size_reg Int) (f (Array Int Int)))
    (=>
      (< 0 n)
      (=>
        (< n size_reg)
        (=>
          (= (width1 c) size_reg)
          (=>
            (forall ((i Int))
              (=>
                (and (<= 0 i) (< i (power 2 n)))
                (and (<= 0 (select f i)) (< (select f i) (power 2 n)))))
            (and
              (<= (size1 (apply_function_in_qft_basis_zero c n size_reg f)) (+ 
              (polysquare
                n
                (* cont_size1 2)
                0
                0) (size1 c)))
              (and
                (= (ancillas1
                     (apply_function_in_qft_basis_zero c n size_reg f)) 
                (ancillas1
                  c))
                (and
                  (= (width1
                       (apply_function_in_qft_basis_zero c n size_reg f)) size_reg)
                  (and
                    (forall ((z (matrix complex)))
                      (forall ((i Int))
                        (=>
                          (and (<= 0 i) (< i (power 2 n)))
                          (=>
                            (is_a_ket_l z (- size_reg n))
                            (=>
                              (sem1
                                c
                                (kronecker (apply_qft n i) z)
                                (kronecker (apply_qft n (select f i)) z))
                              (sem1
                                (apply_function_in_qft_basis_zero
                                  c
                                  n
                                  size_reg
                                  f)
                                (kronecker (ket n i) z)
                                (kronecker (ket n (select f i)) z)))))))
                    (and
                      (forall ((z (matrix complex)))
                        (forall ((i Int))
                          (=>
                            (and (<= 0 i) (< i (power 2 n)))
                            (=>
                              (is_a_ket_l z (- size_reg n))
                              (=>
                                (= (path_sem1
                                     c
                                     (kronecker (apply_qft n i) z)) (kronecker
                                                                    (apply_qft
                                                                    n
                                                                    (select f i))
                                                                    z))
                                (= (path_sem1
                                     (apply_function_in_qft_basis_zero
                                       c
                                       n
                                       size_reg
                                       f)
                                     (kronecker (ket n i) z)) (kronecker
                                                                (ket
                                                                  n
                                                                  (select f i))
                                                                z)))))))
                      (= (apply_function_in_qft_basis_zero c n size_reg f) 
                      (infix_mnmn
                        (infix_mnmn (place_qft_zero n (- size_reg n)) c)
                        (place_rev_qft_zero n (- size_reg n)))))))))))))))

;; apply_from_qft_zero
(declare-fun apply_from_qft_zero (Int
  Int
  circuit) circuit)

;; apply_from_qft_zero'spec
(assert
  (forall ((n Int) (k Int) (c circuit))
    (=>
      (< 0 n)
      (=>
        (< 0 k)
        (=>
          (= (width1 c) (+ n k))
          (and
            (<= (size1 (apply_from_qft_zero n k c)) (+ (polysquare
                                                         n
                                                         (* cont_size1 2)
                                                         0
                                                         0) (size1 c)))
            (and
              (= (ancillas1 (apply_from_qft_zero n k c)) (ancillas1 c))
              (and
                (= (width1 (apply_from_qft_zero n k c)) (+ n k))
                (forall ((y (matrix complex)) (z (matrix complex)))
                  (forall ((i Int))
                    (=>
                      (and (<= 0 i) (< i (power 2 n)))
                      (=>
                        (is_a_ket_l y k)
                        (=>
                          (is_a_ket_l z k)
                          (=>
                            (sem1
                              c
                              (kronecker (ket n i) y)
                              (kronecker (ket n i) z))
                            (sem1
                              (apply_from_qft_zero n k c)
                              (kronecker (apply_qft n i) y)
                              (kronecker (apply_qft n i) z))))))))))))))))

;; apply_in_qft_zero
(declare-fun apply_in_qft_zero (Int
  Int
  circuit) circuit)

;; apply_in_qft_zero'spec
(assert
  (forall ((n Int) (k Int) (c circuit))
    (=>
      (< 0 n)
      (=>
        (< 0 k)
        (=>
          (= (width1 c) (+ n k))
          (and
            (<= (size1 (apply_in_qft_zero n k c)) (+ (polysquare
                                                       n
                                                       (* cont_size1 2)
                                                       0
                                                       0) (size1 c)))
            (and
              (= (ancillas1 (apply_in_qft_zero n k c)) (ancillas1 c))
              (and
                (= (width1 (apply_in_qft_zero n k c)) (+ n k))
                (forall ((y (matrix complex)) (z (matrix complex)))
                  (forall ((i Int))
                    (=>
                      (and (<= 0 i) (< i (power 2 n)))
                      (=>
                        (is_a_ket_l y k)
                        (=>
                          (is_a_ket_l z k)
                          (=>
                            (sem1
                              c
                              (kronecker (apply_qft n i) y)
                              (kronecker (apply_qft n i) z))
                            (sem1
                              (apply_in_qft_zero n k c)
                              (kronecker (ket n i) y)
                              (kronecker (ket n i) z))))))))))))))))

;; apply_from_qft_zero_path
(declare-fun apply_from_qft_zero_path (Int
  Int
  circuit) circuit)

;; apply_from_qft_zero_path'def
(assert
  (forall ((n Int) (k Int) (c circuit))
    (=>
      (< 0 n)
      (=>
        (< 0 k)
        (=>
          (= (width1 c) (+ n k))
          (= (apply_from_qft_zero_path n k c) (apply_from_qft_zero n k c)))))))

;; apply_from_qft_zero_path'spec
(assert
  (forall ((n Int) (k Int) (c circuit))
    (=>
      (< 0 n)
      (=>
        (< 0 k)
        (=>
          (= (width1 c) (+ n k))
          (and
            (<= (size1 (apply_from_qft_zero_path n k c)) (+ (polysquare
                                                              n
                                                              (* cont_size1 2)
                                                              0
                                                              0) (size1 c)))
            (and
              (= (ancillas1 (apply_from_qft_zero_path n k c)) (ancillas1 c))
              (and
                (= (width1 (apply_from_qft_zero_path n k c)) (+ n k))
                (forall ((y (matrix complex)) (z (matrix complex)))
                  (forall ((i Int))
                    (=>
                      (is_a_ket_l y k)
                      (=>
                        (is_a_ket_l z k)
                        (=>
                          (= (path_sem1
                               c
                               (kronecker (ket n (mod i (power 2 n))) y)) 
                          (kronecker
                            (ket n (mod i (power 2 n)))
                            z))
                          (= (path_sem1
                               (apply_from_qft_zero_path n k c)
                               (kronecker (apply_qft n i) y)) (kronecker
                                                                (apply_qft
                                                                  n
                                                                  i)
                                                                z)))))))))))))))

;; apply_in_qft_zero_path
(declare-fun apply_in_qft_zero_path (Int
  Int
  circuit) circuit)

;; apply_in_qft_zero_path'def
(assert
  (forall ((n Int) (k Int) (c circuit))
    (=>
      (< 0 n)
      (=>
        (< 0 k)
        (=>
          (= (width1 c) (+ n k))
          (= (apply_in_qft_zero_path n k c) (apply_from_qft_zero n k c)))))))

;; apply_in_qft_zero_path'spec
(assert
  (forall ((n Int) (k Int) (c circuit))
    (=>
      (< 0 n)
      (=>
        (< 0 k)
        (=>
          (= (width1 c) (+ n k))
          (and
            (<= (size1 (apply_in_qft_zero_path n k c)) (+ (polysquare
                                                            n
                                                            (* cont_size1 2)
                                                            0
                                                            0) (size1 c)))
            (and
              (= (ancillas1 (apply_in_qft_zero_path n k c)) (ancillas1 c))
              (and
                (= (width1 (apply_in_qft_zero_path n k c)) (+ n k))
                (forall ((y (matrix complex)) (z (matrix complex)))
                  (forall ((i Int))
                    (=>
                      (and (<= 0 i) (< i (power 2 n)))
                      (=>
                        (is_a_ket_l y k)
                        (=>
                          (is_a_ket_l z k)
                          (=>
                            (= (path_sem1 c (kronecker (apply_qft n i) y)) 
                            (kronecker
                              (apply_qft n i)
                              z))
                            (= (path_sem1
                                 (apply_in_qft_zero_path n k c)
                                 (kronecker (ket n i) y)) (kronecker
                                                            (ket n i)
                                                            z))))))))))))))))

;; divisors
(declare-fun divisors (Int) (set Int))

;; result
(declare-fun result87 (Int) (Array Int Bool))

;; result'def
(assert
  (forall ((i Int) (j Int))
    (=
      (= (tb2t10 (infix_at bool int (t2tb21 (result87 i)) (t2tb8 j))) true)
      (and (and (<= 1 j) (<= j i)) (= (mod i j) 0)))))

;; divisors'def
(assert
  (forall ((i Int))
    (=>
      (< 0 i)
      (= (divisors i) (tb2t16
                        (my_filter
                          int
                          (t2tb16 (to_fset 1 (+ i 1)))
                          (t2tb21 (result87 i))))))))

;; divisors'spec
(assert
  (forall ((i Int))
    (=>
      (< 0 i)
      (and
        (forall ((j Int))
          (=>
            (mem int (t2tb8 j) (t2tb16 (divisors i)))
            (and (< 0 j) (<= j i))))
        (and
          (forall ((j Int))
            (=> (mem int (t2tb8 j) (t2tb16 (divisors i))) (= (mod i j) 0)))
          (and
            (forall ((j Int))
              (=>
                (mem int (t2tb8 j) (t2tb16 (divisors i)))
                (exists ((k Int))
                  (and (and (<= 1 k) (<= k i)) (= i (* k j))))))
            (and
              (forall ((j Int))
                (=>
                  (and (<= 1 j) (<= j i))
                  (=>
                    (= (mod i j) 0)
                    (mem int (t2tb8 j) (t2tb16 (divisors i))))))
              (forall ((j Int))
                (=>
                  (and (<= 1 j) (<= j i))
                  (=>
                    (exists ((k Int))
                      (and (and (<= 1 k) (<= k i)) (= i (* k j))))
                    (mem int (t2tb8 j) (t2tb16 (divisors i)))))))))))))

;; set_mem_divisors
(assert
  (forall ((j Int) (i Int))
    (=>
      (< 0 i)
      (=>
        (and (<= 1 j) (<= j i))
        (=> (= (mod i j) 0) (mem int (t2tb8 j) (t2tb16 (divisors i))))))))

;; get_mem_divisors_mod
(assert
  (forall ((j Int) (i Int))
    (=>
      (< 0 i)
      (=> (mem int (t2tb8 j) (t2tb16 (divisors i))) (= (mod i j) 0)))))

;; get_mem_divisors_bounds
(assert
  (forall ((j Int) (i Int))
    (=>
      (< 0 i)
      (=> (mem int (t2tb8 j) (t2tb16 (divisors i))) (and (<= 1 j) (<= j i))))))

;; get_mem_divisors_inf
(assert
  (forall ((j Int) (i Int))
    (=> (< 0 i) (=> (mem int (t2tb8 j) (t2tb16 (divisors i))) (<= j i)))))

;; get_mem_divisors
(assert
  (forall ((j Int) (i Int))
    (=>
      (< 0 i)
      (=>
        (mem int (t2tb8 j) (t2tb16 (divisors i)))
        (and (= (mod i j) 0) (and (<= 1 j) (<= j i)))))))

;; in_divisors_mult
(assert
  (forall ((i Int) (j Int) (k Int))
    (=>
      (<= 1 k)
      (=>
        (< 0 j)
        (=>
          (mem int (t2tb8 i) (t2tb16 (divisors j)))
          (mem int (t2tb8 i) (t2tb16 (divisors (* j k)))))))))

;; in_divisors_powers
(assert
  (forall ((a Int) (b Int) (bqt Int) (i Int))
    (=>
      (<= 1 a)
      (=>
        (<= 1 i)
        (=>
          (and (<= 0 b) (<= b bqt))
          (=>
            (mem int (t2tb8 i) (t2tb16 (divisors (power a b))))
            (mem int (t2tb8 i) (t2tb16 (divisors (power a bqt))))))))))

;; powers_in_divisors
(assert
  (forall ((a Int) (b Int) (bqt Int) (i Int))
    (=>
      (<= 1 a)
      (=>
        (<= 1 i)
        (=>
          (and (<= 0 b) (<= b bqt))
          (=>
            (mem int (t2tb8 (power a bqt)) (t2tb16 (divisors i)))
            (mem int (t2tb8 (power a b)) (t2tb16 (divisors i)))))))))

;; not_powers_in_divisors
(assert
  (forall ((a Int) (b Int) (bqt Int) (i Int))
    (=>
      (<= 1 a)
      (=>
        (<= 1 i)
        (=>
          (and (<= 0 b) (<= b bqt))
          (=>
            (not (mem int (t2tb8 (power a b)) (t2tb16 (divisors i))))
            (not (mem int (t2tb8 (power a bqt)) (t2tb16 (divisors i))))))))))

;; itself_divisors
(assert
  (forall ((i Int)) (=> (< 0 i) (mem int (t2tb8 i) (t2tb16 (divisors i))))))

;; unicity_div_rev
(assert
  (forall ((i Int) (j Int) (q Int))
    (=>
      (< 0 i)
      (=>
        (mem int (t2tb8 j) (t2tb16 (divisors i)))
        (=> (= q (div i j)) (= i (* q j)))))))

;; mem_own_divisors
(assert
  (forall ((i Int)) (=> (< 0 i) (mem int (t2tb8 i) (t2tb16 (divisors i))))))

;; mem_one_divisors
(assert
  (forall ((i Int)) (=> (< 0 i) (mem int (t2tb8 1) (t2tb16 (divisors i))))))

;; trivial_divisors_left
(assert
  (forall ((i Int) (j Int))
    (=> (< 0 i) (=> (< 0 j) (mem int (t2tb8 i) (t2tb16 (divisors (* i j))))))))

;; trivial_divisors_right
(assert
  (forall ((i Int) (j Int))
    (=> (< 0 i) (=> (< 0 j) (mem int (t2tb8 i) (t2tb16 (divisors (* j i))))))))

;; prime
(declare-fun prime (Int) Bool)

;; prime'def
(assert
  (forall ((a Int))
    (=
      (prime a)
      (and
        (< 0 a)
        (= (divisors a) (tb2t16
                          (add int (t2tb8 a) (add int (t2tb8 1) (empty int)))))))))

;; get_not_prime
(assert
  (forall ((a Int))
    (=>
      (< 0 a)
      (=>
        (not (prime a))
        (exists ((b Int))
          (and
            (and (< 1 b) (< b a))
            (mem int (t2tb8 b) (t2tb16 (divisors a)))))))))

;; set_not_prime
(assert
  (forall ((a Int))
    (=>
      (< 0 a)
      (=>
        (exists ((b Int))
          (and
            (and (< 1 b) (< b a))
            (mem int (t2tb8 b) (t2tb16 (divisors a)))))
        (not (prime a))))))

;; card_prime_divisors
(assert
  (forall ((a Int))
    (=> (< 1 a) (=> (prime a) (= (cardinal int (t2tb16 (divisors a))) 2)))))

;; co_prime
(declare-fun co_prime (Int
  Int) Bool)

;; co_prime'def
(assert
  (forall ((a Int) (b Int))
    (=
      (co_prime a b)
      (and
        (< 0 a)
        (and
          (< 0 b)
          (= (tb2t16 (inter int (t2tb16 (divisors a)) (t2tb16 (divisors b)))) 
          (tb2t16
            (add int (t2tb8 1) (empty int)))))))))

;; symetric_co_prime
(assert
  (forall ((a Int) (b Int))
    (=> (< 0 a) (=> (< 0 b) (=> (co_prime a b) (co_prime b a))))))

;; prime_is_co_prime_right
(assert
  (forall ((a Int) (b Int))
    (=>
      (< 0 a)
      (=>
        (prime b)
        (=> (not (mem int (t2tb8 b) (t2tb16 (divisors a)))) (co_prime a b))))))

;; prime_is_co_prime
(assert
  (forall ((a Int) (b Int))
    (=>
      (< 0 a)
      (=>
        (prime b)
        (=> (not (mem int (t2tb8 b) (t2tb16 (divisors a)))) (co_prime b a))))))

;; prime_are_co_primes
(assert
  (forall ((a Int) (b Int))
    (=> (not (= a b)) (=> (prime b) (=> (prime a) (co_prime a b))))))

;; one_is_co_prime
(assert (forall ((a Int)) (=> (< 0 a) (co_prime a 1))))

;; mem_divisors_trans
(assert
  (forall ((a Int) (b Int) (c Int))
    (=>
      (< 0 c)
      (=>
        (mem int (t2tb8 b) (t2tb16 (divisors c)))
        (=>
          (mem int (t2tb8 a) (t2tb16 (divisors b)))
          (mem int (t2tb8 a) (t2tb16 (divisors c))))))))

;; subset_divisors
(assert
  (forall ((a Int) (b Int))
    (=>
      (< 0 b)
      (=>
        (mem int (t2tb8 a) (t2tb16 (divisors b)))
        (subset1 int (t2tb16 (divisors a)) (t2tb16 (divisors b)))))))

;; not_prime_divisors
(assert
  (forall ((a Int))
    (=>
      (< 1 a)
      (=>
        (not (prime a))
        (and
          (< 2 (cardinal int (t2tb16 (divisors a))))
          (exists ((i Int))
            (and
              (mem int (t2tb8 i) (t2tb16 (divisors a)))
              (and (not (= i 1)) (not (= i a))))))))))

;; strict_subset_divisors
(assert
  (forall ((a Int) (b Int))
    (=>
      (< 0 b)
      (=>
        (not (= a b))
        (=>
          (mem int (t2tb8 a) (t2tb16 (divisors b)))
          (and
            (subset1 int (t2tb16 (divisors a)) (t2tb16 (divisors b)))
            (and
              (not (= (divisors a) (divisors b)))
              (< (cardinal int (t2tb16 (divisors a))) (cardinal
                                                        int
                                                        (t2tb16 (divisors b)))))))))))

;; divisors_contains_prime
(assert
  (forall ((i Int))
    (=>
      (< 1 i)
      (exists ((j Int))
        (and
          (prime j)
          (and (< 1 j) (mem int (t2tb8 j) (t2tb16 (divisors i)))))))))

;; set_not_co_prime
(assert
  (forall ((a Int) (b Int) (k Int))
    (=>
      (< 0 a)
      (=>
        (< 0 b)
        (=>
          (not (= a b))
          (=>
            (and (< 1 k) (<= k a))
            (=>
              (and (< 1 k) (<= k b))
              (=> (= (mod a k) 0) (=> (= (mod b k) 0) (not (co_prime a b)))))))))))

;; set_not_co_prime_
(assert
  (forall ((a Int) (b Int))
    (=>
      (< 0 a)
      (=>
        (< 0 b)
        (=>
          (not (= a b))
          (=>
            (exists ((k Int))
              (and
                (and (< 1 k) (<= k a))
                (and
                  (and (< 1 k) (<= k b))
                  (and (= (mod a k) 0) (= (mod b k) 0)))))
            (not (co_prime a b))))))))

;; set_co_prime
(assert
  (forall ((a Int) (b Int))
    (=>
      (< 0 a)
      (=>
        (< 0 b)
        (=>
          (not (= a b))
          (=>
            (forall ((c Int))
              (=>
                (mem int (t2tb8 c) (t2tb16 (divisors a)))
                (=>
                  (not (= c 1))
                  (not (mem int (t2tb8 c) (t2tb16 (divisors b)))))))
            (co_prime a b)))))))

;; co_prime_to_mod
(assert
  (forall ((a Int) (b Int))
    (=>
      (< 0 a)
      (=> (< 1 b) (=> (not (= a b)) (=> (co_prime a b) (< 0 (mod a b))))))))

;; co_prime_to_mod_right
(assert
  (forall ((a Int) (b Int))
    (=>
      (< 1 a)
      (=> (< 0 b) (=> (not (= a b)) (=> (co_prime a b) (< 0 (mod b a))))))))

;; inter_div_mod
(assert
  (forall ((a Int) (b Int))
    (=>
      (< 0 a)
      (=>
        (< 1 b)
        (=>
          (co_prime a b)
          (subset1
            int
            (inter int (t2tb16 (divisors (mod a b))) (t2tb16 (divisors b)))
            (inter int (t2tb16 (divisors a)) (t2tb16 (divisors b)))))))))

;; co_prime_mod
(assert
  (forall ((a Int) (b Int))
    (=> (< 0 a) (=> (< 1 b) (=> (co_prime a b) (co_prime (mod a b) b))))))

;; co_prime_by_primes
(assert
  (forall ((a Int) (b Int))
    (=>
      (< 0 a)
      (=>
        (< 1 b)
        (=>
          (not (= a b))
          (=>
            (forall ((c Int))
              (=>
                (prime c)
                (=>
                  (not (= c 1))
                  (=>
                    (mem int (t2tb8 c) (t2tb16 (divisors a)))
                    (not (mem int (t2tb8 c) (t2tb16 (divisors b))))))))
            (co_prime a b)))))))

;; euclid_lemma_pre
(assert
  (forall ((a Int) (b Int) (c Int))
    (=>
      (< 0 a)
      (=>
        (< 0 b)
        (=>
          (< 0 c)
          (=>
            (prime c)
            (=>
              (= (mod (* a b) c) 0)
              (=> (not (= (mod b c) 0)) (= (mod a c) 0)))))))))

;; euclid_lemma
(assert
  (forall ((a Int) (b Int) (c Int))
    (=>
      (< 0 a)
      (=>
        (< 0 b)
        (=>
          (< 0 c)
          (=>
            (prime c)
            (=>
              (= (mod (* a b) c) 0)
              (=> (not (= (mod b c) 0)) (= (mod a c) 0)))))))))

;; divisors_euclid_lemma
(assert
  (forall ((a Int) (b Int) (c Int))
    (=>
      (< 0 a)
      (=>
        (< 0 b)
        (=>
          (< 0 c)
          (=>
            (prime c)
            (=>
              (mem int (t2tb8 c) (t2tb16 (divisors (* a b))))
              (=>
                (not (mem int (t2tb8 c) (t2tb16 (divisors b))))
                (mem int (t2tb8 c) (t2tb16 (divisors a)))))))))))

;; bounded_primes
(declare-fun bounded_primes (Int) (set Int))

;; prime_closure
(declare-fun prime_closure () (Array Int Bool))

;; prime_closure_def
(assert
  (forall ((y Int))
    (=
      (= (tb2t10 (infix_at bool int (t2tb21 prime_closure) (t2tb8 y))) true)
      (prime y))))

;; bounded_primes'def
(assert
  (forall ((a Int))
    (=>
      (<= 0 a)
      (= (bounded_primes a) (tb2t16
                              (my_filter
                                int
                                (t2tb16 (to_fset 1 (+ a 1)))
                                (t2tb21 prime_closure)))))))

;; bounded_primes'spec
(assert
  (forall ((a Int))
    (=>
      (<= 0 a)
      (and
        (forall ((i Int))
          (=> (mem int (t2tb8 i) (t2tb16 (bounded_primes a))) (prime i)))
        (and
          (forall ((i Int))
            (=>
              (mem int (t2tb8 i) (t2tb16 (bounded_primes a)))
              (and (<= 1 i) (<= i a))))
          (forall ((i Int))
            (=>
              (and (<= 1 i) (<= i a))
              (=> (prime i) (mem int (t2tb8 i) (t2tb16 (bounded_primes a)))))))))))

;; prime_factors
(declare-fun prime_factors (Int
  Int) Int)

;; result
(declare-fun result88 (Int
  Int) (Array Int Bool))

;; result'def
(assert
  (forall ((a Int) (b Int) (i Int))
    (=
      (= (tb2t10 (infix_at bool int (t2tb21 (result88 a b)) (t2tb8 i))) true)
      (mem int (t2tb8 (power b i)) (t2tb16 (divisors a))))))

;; prime_factors'def
(assert
  (forall ((a Int) (b Int))
    (=>
      (<= 1 a)
      (ite (and (< 1 b) (prime b))
        (= (prime_factors a b) (max_filter
                                 (to_fset 0 (+ a 1))
                                 (result88 a b)))
        (= (prime_factors a b) 0)))))

;; prime_factors'spec
(assert
  (forall ((a Int) (b Int))
    (=>
      (<= 1 a)
      (and
        (<= 0 (prime_factors a b))
        (and
          (forall ((j Int))
            (=>
              (and (<= 0 j) (<= j (prime_factors a b)))
              (mem int (t2tb8 (power b j)) (t2tb16 (divisors a)))))
          (and
            (=> (and (< 1 b) (prime b)) (< (prime_factors a b) a))
            (and
              (=>
                (and (< 1 b) (prime b))
                (forall ((j Int))
                  (=>
                    (< (prime_factors a b) j)
                    (not (mem int (t2tb8 (power b j)) (t2tb16 (divisors a)))))))
              (=>
                (and (< 1 b) (prime b))
                (forall ((j Int))
                  (=>
                    (< (prime_factors a b) j)
                    (not
                      (mem
                        int
                        (t2tb8 b)
                        (t2tb16
                          (divisors (div a (power b (prime_factors a b)))))))))))))))))

;; set_prime_factors
(assert
  (forall ((a Int) (b Int) (i Int))
    (=>
      (<= 1 a)
      (=>
        (prime b)
        (=>
          (< 1 b)
          (=>
            (= (mod a (power b i)) 0)
            (=>
              (not (= (mod a (power b (+ i 1))) 0))
              (= (prime_factors a b) i))))))))

;; set_prime_factors_null
(assert
  (forall ((a Int) (b Int))
    (=>
      (<= 1 a)
      (=>
        (prime b)
        (=> (< 1 b) (=> (not (= (mod a b) 0)) (= (prime_factors a b) 0)))))))

;; set_prime_factors_over
(assert
  (forall ((a Int) (b Int))
    (=> (<= 1 a) (=> (< a b) (= (prime_factors a b) 0)))))

;; set_prime_factors_not_prime
(assert
  (forall ((a Int) (b Int))
    (=> (<= 1 a) (=> (not (prime b)) (= (prime_factors a b) 0)))))

;; set_prime_factors_one
(assert
  (forall ((a Int) (b Int))
    (=> (<= 1 a) (=> (= b 1) (= (prime_factors a b) 0)))))

;; set_prime_factors_diff
(assert
  (forall ((a Int) (b Int))
    (=>
      (<= 1 a)
      (=>
        (prime b)
        (=> (prime a) (=> (not (= a b)) (= (prime_factors a b) 0)))))))

;; get_prime_factors
(assert
  (forall ((a Int) (b Int) (i Int))
    (=>
      (<= 1 a)
      (=>
        (prime b)
        (=>
          (< 1 b)
          (=>
            (= (prime_factors a b) i)
            (and
              (= (mod a (power b i)) 0)
              (not (= (mod a (power b (+ i 1))) 0)))))))))

;; prime_factors_itself
(assert
  (forall ((a Int)) (=> (< 1 a) (=> (prime a) (= (prime_factors a a) 1)))))

;; prime_factors_one
(assert (forall ((a Int)) (=> (< 1 a) (= (prime_factors a 1) 0))))

;; fc
(declare-fun fc714 (Int) (Array Int Int))

;; fc
(declare-fun fc715 (Int) (Array Int Int))

;; fc'def
(assert
  (forall ((a Int) (i Int))
    (= (select (fc714 a) i) (power i (prime_factors a i)))))

;; fc'def
(assert
  (forall ((a Int) (i Int))
    (= (select (fc715 a) i) (power i (prime_factors a i)))))

;; prime_factors_up
(assert
  (forall ((a Int))
    (=>
      (<= 1 a)
      (and
        (forall ((b Int)) (=> (< a b) (= (prime_factors a b) 0)))
        (forall ((b Int))
          (=>
            (< a b)
            (= (ind_iproduct (fc714 a) 0 (+ b 1)) (ind_iproduct
                                                    (fc715 a)
                                                    0
                                                    (+ a 1)))))))))

;; fc
(declare-fun fc716 (Int) (Array Int Int))

;; fc
(declare-fun fc717 (Int) (Array Int Int))

;; fc'def
(assert
  (forall ((a Int) (i Int))
    (= (select (fc716 a) i) (power i (prime_factors a i)))))

;; fc'def
(assert
  (forall ((a Int) (i Int))
    (= (select (fc717 a) i) (power i (prime_factors a i)))))

;; prime_factors_up_set
(assert
  (forall ((a Int) (b Int))
    (=>
      (and (<= 1 a) (<= a b))
      (= (ind_iproduct (fc716 a) 0 (+ b 1)) (ind_iproduct
                                              (fc717 a)
                                              0
                                              (+ a 1))))))

;; prime_factors_mult
(assert
  (forall ((a Int) (aqt Int) (b Int))
    (=>
      (<= 1 a)
      (=>
        (<= 1 aqt)
        (= (prime_factors (* a aqt) b) (+ (prime_factors a b) (prime_factors
                                                                aqt
                                                                b)))))))

;; fc
(declare-fun fc718 (Int
  Int) (Array Int Int))

;; fc
(declare-fun fc719 (Int) (Array Int Int))

;; fc
(declare-fun fc720 (Int) (Array Int Int))

;; fc'def
(assert
  (forall ((a Int) (aqt Int) (i Int))
    (= (select (fc718 a aqt) i) (power i (prime_factors (* a aqt) i)))))

;; fc'def
(assert
  (forall ((a Int) (i Int))
    (= (select (fc719 a) i) (power i (prime_factors a i)))))

;; fc'def
(assert
  (forall ((aqt Int) (i Int))
    (= (select (fc720 aqt) i) (power i (prime_factors aqt i)))))

;; prime_factors_mult_gen
(assert
  (forall ((a Int) (aqt Int))
    (=>
      (<= 1 a)
      (=>
        (<= 1 aqt)
        (= (ind_iproduct (fc718 a aqt) 0 (+ (* a aqt) 1)) (* (ind_iproduct
                                                               (fc719 a)
                                                               0
                                                               (+ (* a aqt) 1)) 
        (ind_iproduct
          (fc720 aqt)
          0
          (+ (* a aqt) 1))))))))

;; proper_divisors
(declare-fun proper_divisors (Int) (set Int))

;; proper_divisors'def
(assert
  (forall ((a Int))
    (=>
      (< 1 a)
      (=>
        (not (prime a))
        (= (proper_divisors a) (tb2t16
                                 (remove
                                   int
                                   (t2tb8 a)
                                   (remove
                                     int
                                     (t2tb8 1)
                                     (t2tb16 (divisors a))))))))))

;; proper_divisors'spec
(assert
  (forall ((a Int))
    (=>
      (< 1 a)
      (=>
        (not (prime a))
        (and
          (exists ((i Int)) (mem int (t2tb8 i) (t2tb16 (proper_divisors a))))
          (and
            (forall ((i Int))
              (=>
                (mem int (t2tb8 i) (t2tb16 (proper_divisors a)))
                (mem int (t2tb8 i) (t2tb16 (divisors a)))))
            (and
              (forall ((i Int))
                (=>
                  (mem int (t2tb8 i) (t2tb16 (proper_divisors a)))
                  (and (< 1 i) (< i a))))
              (and
                (forall ((i Int))
                  (=>
                    (and (and (< 1 i) (< i a)) (= (mod a i) 0))
                    (mem int (t2tb8 i) (t2tb16 (proper_divisors a)))))
                (and
                  (forall ((i Int))
                    (=>
                      (mem int (t2tb8 i) (t2tb16 (proper_divisors a)))
                      (mem
                        int
                        (t2tb8 (div a i))
                        (t2tb16 (proper_divisors a)))))
                  (forall ((i Int))
                    (=>
                      (mem int (t2tb8 i) (t2tb16 (proper_divisors a)))
                      (< (cardinal int (t2tb16 (divisors i))) (cardinal
                                                                int
                                                                (t2tb16
                                                                  (divisors
                                                                    a)))))))))))))))

;; prime_divisors
(declare-fun prime_divisors (Int) (set Int))

;; prime_divisors'def
(assert
  (forall ((a Int))
    (=>
      (< 1 a)
      (=>
        (not (prime a))
        (= (prime_divisors a) (tb2t16
                                (my_filter
                                  int
                                  (t2tb16 (proper_divisors a))
                                  (t2tb21 prime_closure))))))))

;; prime_divisors'spec
(assert
  (forall ((a Int))
    (=>
      (< 1 a)
      (=>
        (not (prime a))
        (and
          (exists ((i Int)) (mem int (t2tb8 i) (t2tb16 (prime_divisors a))))
          (and
            (forall ((i Int))
              (=>
                (mem int (t2tb8 i) (t2tb16 (prime_divisors a)))
                (mem int (t2tb8 i) (t2tb16 (divisors a)))))
            (and
              (forall ((i Int))
                (=>
                  (mem int (t2tb8 i) (t2tb16 (prime_divisors a)))
                  (prime i)))
              (and
                (forall ((i Int))
                  (=>
                    (mem int (t2tb8 i) (t2tb16 (prime_divisors a)))
                    (and (< 1 i) (< i a))))
                (and
                  (forall ((i Int))
                    (=>
                      (and
                        (and (< 1 i) (< i a))
                        (and (= (mod a i) 0) (prime i)))
                      (mem int (t2tb8 i) (t2tb16 (prime_divisors a)))))
                  (and
                    (forall ((i Int))
                      (=>
                        (mem int (t2tb8 i) (t2tb16 (prime_divisors a)))
                        (mem
                          int
                          (t2tb8 (div a i))
                          (t2tb16 (proper_divisors a)))))
                    (forall ((i Int))
                      (=>
                        (mem int (t2tb8 i) (t2tb16 (prime_divisors a)))
                        (< (cardinal int (t2tb16 (divisors i))) (cardinal
                                                                  int
                                                                  (t2tb16
                                                                    (divisors
                                                                    a))))))))))))))))

;; unicity_div_rev_
(assert
  (forall ((i Int) (j Int) (q Int))
    (=>
      (< 0 i)
      (=>
        (mem int (t2tb8 j) (t2tb16 (divisors i)))
        (=> (= q (div i j)) (= i (* j q)))))))

;; fc
(declare-fun fc721 (Int) (Array Int Int))

;; fc'def
(assert
  (forall ((a Int) (i Int))
    (= (select (fc721 a) i) (power i (prime_factors a i)))))

;; factors_prod
(assert
  (forall ((a Int))
    (=>
      (<= 1 a)
      (forall ((x Int))
        (=> (<= a x) (= a (ind_iproduct (fc721 a) 0 (+ x 1))))))))

;; divisors_by_factor_decomp_pre
(assert
  (forall ((a Int) (b Int))
    (=>
      (<= 1 a)
      (=>
        (mem int (t2tb8 b) (t2tb16 (divisors a)))
        (forall ((i Int)) (<= (prime_factors b i) (prime_factors a i)))))))

;; divisors_by_factor_decomp_pre_
(assert
  (forall ((a Int) (b Int) (i Int))
    (=>
      (<= 1 a)
      (=>
        (mem int (t2tb8 b) (t2tb16 (divisors a)))
        (<= (prime_factors b i) (prime_factors a i))))))

;; divisors_by_factor_decomp_pre_rec
(assert
  (forall ((a Int) (b Int))
    (=>
      (<= 1 a)
      (=>
        (and (<= 1 b) (<= b a))
        (=>
          (forall ((i Int)) (<= (prime_factors b i) (prime_factors a i)))
          (mem int (t2tb8 b) (t2tb16 (divisors a))))))))

;; inf_by_prime_factors
(assert
  (forall ((a Int) (b Int) (c Int))
    (=>
      (and (<= 1 a) (<= a c))
      (=>
        (<= 1 b)
        (=>
          (forall ((i Int)) (<= (prime_factors b i) (prime_factors a i)))
          (<= b a))))))

;; co_prime_to_prod
(assert
  (forall ((a Int) (b Int) (c Int))
    (=>
      (< 1 b)
      (=>
        (< 0 c)
        (=> (co_prime a c) (=> (co_prime b c) (co_prime (* a b) c)))))))

;; co_prime_to_prod_rev
(assert
  (forall ((a Int) (b Int) (c Int))
    (=>
      (< 1 b)
      (=>
        (< 0 c)
        (=> (co_prime a c) (=> (co_prime b c) (co_prime c (* a b))))))))

;; co_prime_pow
(assert
  (forall ((a Int) (b Int) (c Int))
    (=> (< 0 b) (=> (co_prime a b) (=> (< 0 c) (co_prime (power a c) b))))))

;; co_prime_pows
(assert
  (forall ((a Int) (b Int) (c Int) (d Int))
    (=>
      (< 0 b)
      (=>
        (co_prime a b)
        (=> (<= 0 c) (=> (<= 0 d) (co_prime (power a c) (power b d))))))))

;; fc
(declare-fun fc722 ((Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc723 ((Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (i Int))
    (= (select (fc722 f) i) (power i (select f i)))))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (i Int))
    (= (select (fc723 f) i) (power i (select f i)))))

;; div_iproduct_primes
(assert
  (forall ((bound Int) (f (Array Int Int)))
    (=>
      (<= 0 bound)
      (=>
        (forall ((i Int))
          (=> (<= 1 i) (=> (not (prime i)) (= (select f i) 0))))
        (=>
          (forall ((i Int)) (=> (<= 1 i) (<= 0 (select f i))))
          (=>
            (= (select f 0) 0)
            (and
              (forall ((j Int))
                (=>
                  (< bound j)
                  (=>
                    (prime j)
                    (co_prime j (ind_iproduct (fc722 f) 0 (+ bound 1))))))
              (forall ((j Int))
                (=>
                  (and (<= 1 j) (<= j bound))
                  (=>
                    (prime j)
                    (=>
                      (= (select f j) 0)
                      (co_prime j (ind_iproduct (fc723 f) 0 (+ bound 1))))))))))))))

;; fc
(declare-fun fc724 ((Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (i Int))
    (= (select (fc724 f) i) (power i (select f i)))))

;; unicity_factors_prod_one
(assert
  (forall ((bound Int) (f (Array Int Int)))
    (=>
      (<= 0 bound)
      (=>
        (forall ((i Int)) (=> (not (prime i)) (= (select f i) 0)))
        (=>
          (= (select f 1) 0)
          (=>
            (forall ((i Int)) (=> (<= 1 i) (<= 0 (select f i))))
            (=>
              (= 1 (ind_iproduct (fc724 f) 0 (+ bound 1)))
              (=>
                (forall ((i Int))
                  (=> (prime i) (=> (< bound i) (= (select f i) 0))))
                (forall ((i Int)) (=> (prime i) (= (select f i) 0)))))))))))

;; fc
(declare-fun fc725 ((Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (i Int))
    (= (select (fc725 f) i) (power i (select f i)))))

;; unicity_factors_prod_pre
(assert
  (forall ((a Int) (bound Int) (f (Array Int Int)))
    (=>
      (forall ((i Int)) (=> (prime i) (=> (< bound i) (= (select f i) 0))))
      (=>
        (forall ((i Int)) (=> (not (prime i)) (= (select f i) 0)))
        (=>
          (= (select f 1) 0)
          (=>
            (forall ((i Int)) (=> (<= 1 i) (<= 0 (select f i))))
            (=>
              (and (<= 1 a) (<= a bound))
              (=>
                (= a (ind_iproduct (fc725 f) 0 (+ bound 1)))
                (forall ((i Int)) (= (prime_factors a i) (select f i)))))))))))

;; fc
(declare-fun fc726 ((Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (i Int))
    (= (select (fc726 f) i) (power i (select f i)))))

;; unicity_factors_prod
(assert
  (forall ((a Int) (c Int) (f (Array Int Int)))
    (=>
      (<= 1 c)
      (=>
        (forall ((i Int)) (<= 0 (select f i)))
        (=>
          (= a (ind_iproduct (fc726 f) 0 (+ c 1)))
          (=>
            (forall ((i Int)) (<= (select f i) (prime_factors c i)))
            (mem int (t2tb8 a) (t2tb16 (divisors c)))))))))

;; fc
(declare-fun fc727 ((Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (i Int))
    (= (select (fc727 f) i) (power i (select f i)))))

;; unicity_factors_prod_
(assert
  (forall ((c Int) (f (Array Int Int)))
    (=>
      (<= 1 c)
      (=>
        (forall ((i Int)) (<= 0 (select f i)))
        (=>
          (forall ((i Int)) (<= (select f i) (prime_factors c i)))
          (mem
            int
            (t2tb8 (ind_iproduct (fc727 f) 0 (+ c 1)))
            (t2tb16 (divisors c))))))))

;; fc
(declare-fun fc728 ((Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((f (Array Int Int)) (i Int))
    (= (select (fc728 f) i) (power i (select f i)))))

;; unicity_factors_prod_gen
(assert
  (forall ((bound Int) (c Int) (f (Array Int Int)))
    (=>
      (and (<= 1 c) (<= c bound))
      (=>
        (forall ((i Int)) (<= 0 (select f i)))
        (=>
          (forall ((i Int)) (<= (select f i) (prime_factors c i)))
          (mem
            int
            (t2tb8 (ind_iproduct (fc728 f) 0 (+ bound 1)))
            (t2tb16 (divisors c))))))))

;; gcd
(declare-fun gcd (Int
  Int) Int)

;; result
(declare-fun result89 (Int
  Int) (Array Int Int))

;; result'def
(assert
  (forall ((a Int) (b Int) (i Int))
    (= (select (result89 a b) i) (power
                                   i
                                   (min
                                     (prime_factors a i)
                                     (prime_factors b i))))))

;; gcd'def
(assert
  (forall ((a Int) (b Int))
    (=>
      (<= 1 a)
      (=>
        (<= 1 b)
        (= (gcd a b) (ind_iproduct (result89 a b) 0 (+ (* a b) 1)))))))

;; gcd'spec
(assert
  (forall ((a Int) (b Int))
    (=>
      (<= 1 a)
      (=>
        (<= 1 b)
        (and
          (forall ((i Int))
            (= (prime_factors (gcd a b) i) (min
                                             (prime_factors a i)
                                             (prime_factors b i))))
          (and
            (mem int (t2tb8 (gcd a b)) (t2tb16 (divisors a)))
            (and
              (mem int (t2tb8 (gcd a b)) (t2tb16 (divisors b)))
              (forall ((j Int))
                (=>
                  (mem int (t2tb8 j) (t2tb16 (divisors a)))
                  (=>
                    (mem int (t2tb8 j) (t2tb16 (divisors b)))
                    (mem int (t2tb8 j) (t2tb16 (divisors (gcd a b))))))))))))))

;; gcd_prime_factors
(assert
  (forall ((a Int) (b Int) (i Int))
    (=>
      (<= 1 a)
      (=>
        (<= 1 b)
        (= (prime_factors (gcd a b) i) (min
                                         (prime_factors a i)
                                         (prime_factors b i)))))))

;; scm
(declare-fun scm (Int
  Int) Int)

;; scm'spec
(assert
  (forall ((a Int) (b Int))
    (=>
      (<= 1 a)
      (=>
        (<= 1 b)
        (and
          (forall ((i Int))
            (= (prime_factors (scm a b) i) (max
                                             (prime_factors a i)
                                             (prime_factors b i))))
          (and
            (mem int (t2tb8 a) (t2tb16 (divisors (scm a b))))
            (and
              (mem int (t2tb8 b) (t2tb16 (divisors (scm a b))))
              (forall ((j Int))
                (=>
                  (< 0 j)
                  (=>
                    (mem int (t2tb8 a) (t2tb16 (divisors j)))
                    (=>
                      (mem int (t2tb8 b) (t2tb16 (divisors j)))
                      (mem int (t2tb8 (scm a b)) (t2tb16 (divisors j))))))))))))))

;; divisors_mult
(assert
  (forall ((a Int) (b Int) (k Int) (i Int))
    (=>
      (< 0 a)
      (=>
        (< 0 b)
        (=>
          (<= 1 k)
          (=>
            (mem int (t2tb8 (* a b)) (t2tb16 (divisors k)))
            (and
              (<= (prime_factors a i) (prime_factors k i))
              (<= (prime_factors b i) (prime_factors k i)))))))))

;; prime_factors_to_div
(assert
  (forall ((a Int) (i Int))
    (=>
      (< 0 a)
      (=>
        (< 0 (prime_factors a i))
        (mem int (t2tb8 i) (t2tb16 (divisors a)))))))

;; prime_factors_not_prime
(assert
  (forall ((a Int) (i Int))
    (=>
      (< 0 a)
      (=> (< 0 (prime_factors a i)) (=> (not (= a i)) (not (prime a)))))))

;; prime_factors_not_one
(assert
  (forall ((a Int) (i Int))
    (=> (< 0 a) (=> (< 0 (prime_factors a i)) (not (= a 1))))))

;; prime_prime_factors
(assert
  (forall ((a Int) (i Int))
    (=>
      (not (= a 1))
      (=> (prime a) (= (prime_factors a i) (ite (= a i) 1 0))))))

;; mem_div_by_fact
(assert
  (forall ((a Int) (c Int))
    (=>
      (<= 1 c)
      (=>
        (<= 1 a)
        (=>
          (forall ((i Int)) (<= (prime_factors a i) (prime_factors c i)))
          (mem int (t2tb8 a) (t2tb16 (divisors c))))))))

;; div_prime
(assert
  (forall ((a Int) (i Int))
    (=>
      (< 0 a)
      (=>
        (< 0 (prime_factors a i))
        (=> (not (= a i)) (mem int (t2tb8 i) (t2tb16 (divisors a))))))))

;; not_co_prime_itself
(assert (forall ((a Int)) (=> (< 1 a) (not (co_prime a a)))))

;; co_prime_gcd
(assert
  (forall ((a Int) (b Int))
    (=>
      (< 0 a)
      (=>
        (< 0 b)
        (=>
          (co_prime a b)
          (forall ((i Int)) (= (prime_factors (gcd a b) i) 0)))))))

;; co_prime_gcd_rev
(assert
  (forall ((a Int) (b Int))
    (=>
      (< 0 a)
      (=>
        (< 0 b)
        (=>
          (forall ((i Int)) (= (prime_factors (gcd a b) i) 0))
          (co_prime a b))))))

;; divisors_euclid_lemma_co_prime
(assert
  (forall ((a Int) (b Int) (c Int))
    (=>
      (< 0 a)
      (=>
        (< 0 b)
        (=>
          (< 0 c)
          (=>
            (mem int (t2tb8 c) (t2tb16 (divisors (* a b))))
            (=>
              (co_prime b c)
              (forall ((cqt Int))
                (=>
                  (mem int (t2tb8 cqt) (t2tb16 (divisors c)))
                  (mem int (t2tb8 cqt) (t2tb16 (divisors a))))))))))))

;; divisors_euclid_lemma_co_prime_itself
(assert
  (forall ((a Int) (b Int) (c Int))
    (=>
      (< 0 a)
      (=>
        (< 0 b)
        (=>
          (< 0 c)
          (=>
            (mem int (t2tb8 c) (t2tb16 (divisors (* a b))))
            (=> (co_prime b c) (mem int (t2tb8 c) (t2tb16 (divisors a))))))))))

;; euclid_lemma_co_prime
(assert
  (forall ((a Int) (b Int) (c Int))
    (=>
      (< 0 a)
      (=>
        (< 0 b)
        (=>
          (< 0 c)
          (=> (co_prime b c) (=> (co_prime a c) (co_prime (* a b) c))))))))

;; co_prime_odd
(assert
  (forall ((a Int) (i Int))
    (=> (< 0 a) (=> (< 0 i) (=> (= (odd a) true) (co_prime (power 2 i) a))))))

;; co_primes
(declare-fun co_primes (Int) (set Int))

;; co_prime_closure
(declare-fun co_prime_closure () (Array Int (Array Int Bool)))

;; t2tb
(declare-fun t2tb128 ((Array Int (Array Int Bool))) uni)

;; t2tb_sort
(assert
  (forall ((x (Array Int (Array Int Bool))))
    (sort (infix_mngt int (infix_mngt int bool)) (t2tb128 x))))

;; tb2t
(declare-fun tb2t128 (uni) (Array Int (Array Int Bool)))

;; BridgeL
(assert
  (forall ((i (Array Int (Array Int Bool))))
    (! (= (tb2t128 (t2tb128 i)) i) :pattern ((t2tb128 i)) )))

;; BridgeR
(assert
  (forall ((j uni))
    (! (=>
         (sort (infix_mngt int (infix_mngt int bool)) j)
         (= (t2tb128 (tb2t128 j)) j)) :pattern ((t2tb128 (tb2t128 j))) )))

;; co_prime_closure_def
(assert
  (forall ((y Int) (y1 Int))
    (=
      (= (tb2t10
           (infix_at
             bool
             int
             (infix_at
               (infix_mngt int bool)
               int
               (t2tb128 co_prime_closure)
               (t2tb8 y))
             (t2tb8 y1))) true)
      (co_prime y y1))))

;; co_primes'def
(assert
  (forall ((i Int))
    (=>
      (< 0 i)
      (= (co_primes i) (tb2t16
                         (my_filter
                           int
                           (t2tb16 (to_fset 0 i))
                           (infix_at
                             (infix_mngt int bool)
                             int
                             (t2tb128 co_prime_closure)
                             (t2tb8 i))))))))

;; co_primes'spec
(assert
  (forall ((i Int))
    (=>
      (< 0 i)
      (and
        (=> (< 1 i) (mem int (t2tb8 1) (t2tb16 (co_primes i))))
        (and
          (=>
            (< 1 i)
            (mem
              int
              (t2tb8 (cardinal int (t2tb16 (co_primes i))))
              (t2tb16 (to_fset 1 i))))
          (and
            (forall ((j Int))
              (=>
                (mem int (t2tb8 j) (t2tb16 (co_primes i)))
                (and (< 0 j) (< j i))))
            (and
              (forall ((j Int))
                (=>
                  (mem int (t2tb8 j) (t2tb16 (co_primes i)))
                  (co_prime i j)))
              (forall ((j Int))
                (=>
                  (and (<= 0 j) (< j i))
                  (=>
                    (co_prime i j)
                    (mem int (t2tb8 j) (t2tb16 (co_primes i)))))))))))))

;; co_prime_iproduct
(assert
  (forall ((s1 (set Int)) (f (Array Int Int)) (bound Int))
    (=>
      (< 0 bound)
      (=>
        (forall ((e Int))
          (=> (mem int (t2tb8 e) (t2tb16 s1)) (< 0 (select f e))))
        (=>
          (forall ((e Int))
            (=>
              (mem int (t2tb8 e) (t2tb16 s1))
              (co_prime (select f e) bound)))
          (co_prime (iproduct int (t2tb16 s1) (t2tb7 f)) bound))))))

;; greatest_factor_in_n
(declare-fun greatest_factor_in_n (Int
  Int
  Int) Int)

;; greatest_factor_in_n'def
(assert
  (forall ((multi Int) (n Int) (i Int))
    (=>
      (< 0 n)
      (=>
        (and (< 0 multi) (< multi (power 2 n)))
        (=>
          (and (<= 0 i) (< i multi))
          (ite (< i (mod (power 2 n) multi))
            (= (greatest_factor_in_n multi n i) (+ (div (power 2 n) multi) 1))
            (= (greatest_factor_in_n multi n i) (div (power 2 n) multi))))))))

;; greatest_factor_in_n'spec
(assert
  (forall ((multi Int) (n Int) (i Int))
    (=>
      (< 0 n)
      (=>
        (and (< 0 multi) (< multi (power 2 n)))
        (=>
          (and (<= 0 i) (< i multi))
          (and
            (<= 1 (greatest_factor_in_n multi n i))
            (and
              (forall ((j Int))
                (=>
                  (and (<= 0 j) (< j (greatest_factor_in_n multi n i)))
                  (< (+ (* j multi) (mod i multi)) (power 2 n))))
              (and
                (forall ((j Int))
                  (=>
                    (and (<= 0 j) (< j (power 2 n)))
                    (=
                      (= (mod j multi) i)
                      (exists ((k Int))
                        (and
                          (and
                            (<= 0 k)
                            (< k (greatest_factor_in_n multi n i)))
                          (= j (+ (* k multi) i)))))))
                (infix_lseqdt
                  (i_to_c (- (greatest_factor_in_n multi n i) 1))
                  (infix_sldt (i_to_c (- (power 2 n) i)) (i_to_c multi)))))))))))

;; fc
(declare-fun fc729 (Int
  Int
  complex) (Array Int complex))

;; fc
(declare-fun fc730 (Int
  Int) (Array Int complex))

;; fc'def
(assert
  (forall ((multi Int) (n Int) (cst complex) (i Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc729 multi n cst)) (t2tb8 i))) 
    (infix_asdt
      (i_to_c (greatest_factor_in_n multi n i))
      cst))))

;; fc'def
(assert
  (forall ((multi Int) (n Int) (i Int))
    (= (tb2t (infix_at complex1 int (t2tb51 (fc730 multi n)) (t2tb8 i))) 
    (cpower
      (i_to_c (greatest_factor_in_n multi n i))
      2))))

;; greatest_factor_sum_in_n
(assert
  (forall ((multi Int) (n Int) (cst complex))
    (=>
      (< 0 n)
      (=>
        (and (< 0 multi) (< multi (power 2 n)))
        (and
          (= (sum
               int
               (t2tb16 (to_fset 0 multi))
               (t2tb51 (fc729 multi n cst))) (infix_asdt
                                               (i_to_c (power 2 n))
                                               cst))
          (infix_lseqdt
            (cpower (i_to_c (power 2 n)) 2)
            (infix_asdt
              (sum int (t2tb16 (to_fset 0 multi)) (t2tb51 (fc730 multi n)))
              (i_to_c multi))))))))

;; antirefl_co_prime
(assert (forall ((a Int)) (=> (< 1 a) (not (co_prime a a)))))

;; min_filter_b
(declare-fun min_filter_b (Int
  Int
  (Array Int Bool)) Int)

;; min_filter_b'def
(assert
  (forall ((i Int) (j Int) (p (Array Int Bool)))
    (=>
      (exists ((e Int))
        (and
          (and (<= i e) (< e j))
          (= (tb2t10 (infix_at bool int (t2tb21 p) (t2tb8 e))) true)))
      (ite (= (tb2t10 (infix_at bool int (t2tb21 p) (t2tb8 i))) true)
        (= (min_filter_b i j p) i)
        (= (min_filter_b i j p) (min_filter_b (+ i 1) j p))))))

;; min_filter_b'spec
(assert
  (forall ((i Int) (j Int) (p (Array Int Bool)))
    (=>
      (exists ((e Int))
        (and
          (and (<= i e) (< e j))
          (= (tb2t10 (infix_at bool int (t2tb21 p) (t2tb8 e))) true)))
      (and
        (= (min_filter_b i j p) (min_filter (to_fset i j) p))
        (and
          (= (tb2t10
               (infix_at bool int (t2tb21 p) (t2tb8 (min_filter_b i j p)))) true)
          (and
            (and (<= i (min_filter_b i j p)) (< (min_filter_b i j p) j))
            (and
              (forall ((e Int))
                (=>
                  (and (<= i e) (< e j))
                  (=>
                    (= (tb2t10 (infix_at bool int (t2tb21 p) (t2tb8 e))) true)
                    (<= (min_filter_b i j p) e))))
              (forall ((e Int))
                (=>
                  (and (<= i e) (< e j))
                  (=>
                    (< e (min_filter_b i j p))
                    (not
                      (= (tb2t10 (infix_at bool int (t2tb21 p) (t2tb8 e))) true))))))))))))

;; euler_phi
(declare-fun euler_phi (Int) Int)

;; euler_phi'def
(assert
  (forall ((i Int))
    (=> (< 0 i) (= (euler_phi i) (cardinal int (t2tb16 (co_primes i)))))))

;; euler_phi'spec
(assert
  (forall ((i Int))
    (=>
      (< 0 i)
      (=> (< 1 i) (mem int (t2tb8 (euler_phi i)) (t2tb16 (to_fset 1 i)))))))

;; injec_mult_mod_pre
(assert
  (forall ((a Int) (i Int) (iqt Int) (bound Int))
    (=>
      (co_prime a bound)
      (=>
        (and (<= 0 i) (and (< i iqt) (< iqt bound)))
        (not (= (mod (* i a) bound) (mod (* iqt a) bound)))))))

;; injec_mult_mod
(assert
  (forall ((a Int) (i Int) (iqt Int) (bound Int))
    (=>
      (co_prime a bound)
      (=>
        (and (<= 0 i) (< i bound))
        (=>
          (and (<= 0 iqt) (< iqt bound))
          (=>
            (not (= i iqt))
            (not (= (mod (* i a) bound) (mod (* iqt a) bound)))))))))

;; co_prime_mod_mult
(assert
  (forall ((a Int) (e Int) (bound Int))
    (=>
      (< 0 a)
      (=>
        (< 0 e)
        (=>
          (< 1 bound)
          (=>
            (co_prime a bound)
            (=> (co_prime e bound) (co_prime (mod (* a e) bound) bound))))))))

;; fc
(declare-fun fc731 (Int
  Int) (Array Int Int))

;; fc
(declare-fun fc732 (Int
  Int) (Array Int Int))

;; fc'def
(assert
  (forall ((a Int) (bound Int) (i Int))
    (= (select (fc731 a bound) i) (mod (* a i) bound))))

;; fc'def
(assert
  (forall ((a Int) (bound Int) (i Int))
    (= (select (fc732 a bound) i) (mod (* a i) bound))))

;; set_injec_mult_mod
(assert
  (forall ((a Int) (bound Int))
    (=>
      (< 1 bound)
      (=>
        (co_prime a bound)
        (and
          (p_bijective1 (fc731 a bound) (co_primes bound) (co_primes bound))
          (= (tb2t16
               (map1
                 int
                 int
                 (t2tb7 (fc732 a bound))
                 (t2tb16 (co_primes bound)))) (co_primes bound)))))))

;; injec_mult_mod_rev
(assert
  (forall ((a Int) (i Int) (iqt Int) (bound Int))
    (=>
      (< 1 bound)
      (=>
        (co_prime a bound)
        (=>
          (and (<= 0 i) (< i bound))
          (=>
            (and (<= 0 iqt) (< iqt bound))
            (=> (= (mod (* i a) bound) (mod (* iqt a) bound)) (= i iqt))))))))

;; bezout_pred
(declare-fun bezout_pred (Int
  Int
  Int) Bool)

;; bezout_pred'def
(assert
  (forall ((pick Int) (bound Int) (k Int))
    (=
      (bezout_pred pick bound k)
      (exists ((a Int) (b Int)) (= k (+ (* a pick) (* b bound)))))))

;; bezout_set
(declare-fun bezout_set (Int
  Int) (set Int))

;; bezout_set'spec
(assert
  (forall ((pick Int) (bound Int))
    (=>
      (and (< 0 pick) (< pick bound))
      (and
        (mem
          int
          (t2tb8 (min_set (bezout_set pick bound)))
          (t2tb16 (divisors pick)))
        (and
          (mem
            int
            (t2tb8 (min_set (bezout_set pick bound)))
            (t2tb16 (divisors bound)))
          (and
            (< 0 (cardinal int (t2tb16 (bezout_set pick bound))))
            (and
              (and
                (<= 0 (min_set (bezout_set pick bound)))
                (<= (min_set (bezout_set pick bound)) pick))
              (and
                (<= 0 (min_set (bezout_set pick bound)))
                (< (min_set (bezout_set pick bound)) bound)))))))))

;; euler_theorem
(assert
  (forall ((pick Int) (bound Int))
    (=>
      (and (< 0 pick) (< pick bound))
      (=>
        (co_prime pick bound)
        (= (mod (power pick (euler_phi bound)) bound) 1)))))

;; modular_inverse
(declare-fun modular_inverse (Int
  Int) Int)

;; result
(declare-fun result90 (Int
  Int) (Array Int Bool))

;; result'def
(assert
  (forall ((pick Int) (bound Int) (i Int))
    (=
      (= (tb2t10
           (infix_at bool int (t2tb21 (result90 pick bound)) (t2tb8 i))) true)
      (= (mod (* i pick) bound) 1))))

;; modular_inverse'def
(assert
  (forall ((pick Int) (bound Int))
    (=>
      (and (< 0 pick) (< pick bound))
      (=>
        (co_prime pick bound)
        (= (modular_inverse pick bound) (min_filter_b
                                          0
                                          bound
                                          (result90 pick bound)))))))

;; modular_inverse'spec
(assert
  (forall ((pick Int) (bound Int))
    (=>
      (and (< 0 pick) (< pick bound))
      (=>
        (co_prime pick bound)
        (and
          (and
            (<= 0 (modular_inverse pick bound))
            (< (modular_inverse pick bound) bound))
          (= (mod (* (modular_inverse pick bound) pick) bound) 1))))))

;; multi_order
(declare-fun multi_order (Int
  Int) Int)

;; result
(declare-fun result91 (Int
  Int) (Array Int Bool))

;; result'def
(assert
  (forall ((pick Int) (bound Int) (i Int))
    (=
      (= (tb2t10
           (infix_at bool int (t2tb21 (result91 pick bound)) (t2tb8 i))) true)
      (= (mod (power pick i) bound) 1))))

;; multi_order'def
(assert
  (forall ((pick Int) (bound Int))
    (=>
      (co_prime pick bound)
      (=>
        (and (< 0 pick) (< pick bound))
        (= (multi_order pick bound) (min_filter_b
                                      1
                                      bound
                                      (result91 pick bound)))))))

;; multi_order'spec
(assert
  (forall ((pick Int) (bound Int))
    (=>
      (co_prime pick bound)
      (=>
        (and (< 0 pick) (< pick bound))
        (and
          (and
            (<= 1 (multi_order pick bound))
            (< (multi_order pick bound) bound))
          (= (mod (power pick (multi_order pick bound)) bound) 1))))))

;; modular_expo
(assert
  (forall ((a Int) (k Int) (bound Int) (i Int))
    (=>
      (<= 0 i)
      (=>
        (and (< 0 a) (< a bound))
        (=>
          (<= 0 k)
          (=>
            (co_prime a bound)
            (=>
              (<= 2 bound)
              (= (mod (power a i) bound) (mod (power
                                                a
                                                (+ (* k (multi_order a bound)) i)) bound)))))))))

;; modular_expo_gen
(assert
  (forall ((a Int) (bound Int))
    (=>
      (and (< 0 a) (< a bound))
      (=>
        (co_prime a bound)
        (forall ((i Int) (k Int))
          (=>
            (<= 0 i)
            (=>
              (<= 0 k)
              (= (mod (power a i) bound) (mod (power
                                                a
                                                (+ (* k (multi_order a bound)) i)) bound)))))))))

;; modular_expo_rev
(assert
  (forall ((a Int) (k Int) (bound Int) (i Int))
    (=>
      (and (< 0 a) (< a bound))
      (=>
        (<= 0 i)
        (=>
          (<= 0 k)
          (=>
            (co_prime a bound)
            (= (mod (power a (+ (* k (multi_order a bound)) i)) bound) (mod 
            (power
              a
              i) bound))))))))

;; modular_expo_gen_rev
(assert
  (forall ((a Int) (bound Int))
    (=>
      (and (< 0 a) (< a bound))
      (=>
        (co_prime a bound)
        (forall ((i Int) (k Int))
          (=>
            (<= 0 i)
            (=>
              (<= 0 k)
              (= (mod (power a (+ (* k (multi_order a bound)) i)) bound) (mod 
              (power
                a
                i) bound)))))))))

;; modular_expo_modulo
(assert
  (forall ((pick Int) (bound Int) (i Int))
    (=>
      (co_prime pick bound)
      (=>
        (and (< 0 pick) (< pick bound))
        (=>
          (<= 0 i)
          (= (mod (power pick i) bound) (mod (power
                                               pick
                                               (mod i (multi_order
                                                        pick
                                                        bound))) bound)))))))

;; modular_expo_modulo_rev
(assert
  (forall ((pick Int) (bound Int) (i Int))
    (=>
      (co_prime pick bound)
      (=>
        (and (< 0 pick) (< pick bound))
        (=>
          (<= 0 i)
          (= (mod (power pick (mod i (multi_order pick bound))) bound) (mod 
          (power
            pick
            i) bound)))))))

;; injec_mod_prod_multi_order_pre
(assert
  (forall ((pick Int) (bound Int) (i Int) (iqt Int))
    (=>
      (co_prime pick bound)
      (=>
        (and (< 0 pick) (< pick bound))
        (=>
          (mem int (t2tb8 i) (t2tb16 (to_fset 0 (multi_order pick bound))))
          (=>
            (mem
              int
              (t2tb8 iqt)
              (t2tb16 (to_fset 0 (multi_order pick bound))))
            (=>
              (< i iqt)
              (not
                (= (mod (power pick iqt) bound) (mod (power pick i) bound))))))))))

;; injec_mod_prod_multi_order
(assert
  (forall ((pick Int) (bound Int) (i Int) (iqt Int))
    (=>
      (co_prime pick bound)
      (=>
        (and (< 0 pick) (< pick bound))
        (=>
          (mem int (t2tb8 i) (t2tb16 (to_fset 0 (multi_order pick bound))))
          (=>
            (mem
              int
              (t2tb8 iqt)
              (t2tb16 (to_fset 0 (multi_order pick bound))))
            (=>
              (not (= i iqt))
              (not
                (= (mod (power pick iqt) bound) (mod (power pick i) bound))))))))))

;; injec_mod_prod_multi_order_gen
(assert
  (forall ((pick Int) (bound Int) (i Int) (iqt Int))
    (=>
      (co_prime pick bound)
      (=>
        (and (< 0 pick) (< pick bound))
        (=>
          (not
            (= (mod i (multi_order pick bound)) (mod iqt (multi_order
                                                           pick
                                                           bound))))
          (=>
            (<= 0 i)
            (=>
              (<= 0 iqt)
              (not
                (= (mod (power pick iqt) bound) (mod (power pick i) bound))))))))))

;; mod_eq_power_to_multi_order
(assert
  (forall ((pick Int) (bound Int) (i Int) (iqt Int))
    (=>
      (co_prime pick bound)
      (=>
        (and (< 0 pick) (< pick bound))
        (=>
          (<= 0 i)
          (=>
            (<= 0 iqt)
            (=>
              (= (mod (power pick iqt) bound) (mod (power pick i) bound))
              (= (mod i (multi_order pick bound)) (mod iqt (multi_order
                                                             pick
                                                             bound))))))))))

;; mod_eq_multi_order_to_power
(assert
  (forall ((pick Int) (bound Int) (i Int) (iqt Int))
    (=>
      (co_prime pick bound)
      (=>
        (and (< 0 pick) (< pick bound))
        (=>
          (<= 0 i)
          (=>
            (<= 0 iqt)
            (=>
              (= (mod i (multi_order pick bound)) (mod iqt (multi_order
                                                             pick
                                                             bound)))
              (= (mod (power pick iqt) bound) (mod (power pick i) bound)))))))))

;; composite
(declare-fun composite (shor_) Int)

;; compos_log
(declare-fun compos_log (shor_) Int)

;; picked
(declare-fun picked (shor_) Int)

;; shor_'invariant
(assert
  (forall ((self shor_))
    (! (and
         (< 0 (compos_log self))
         (and
           (and (< 1 (picked self)) (< (picked self) (composite self)))
           (and
             (and
               (<= (power 2 (- (compos_log self) 1)) (composite self))
               (< (composite self) (power 2 (compos_log self))))
             (and
               (co_prime (picked self) (composite self))
               (< 0 (compos_log self)))))) :pattern ((picked self)) :pattern (
    (compos_log
      self)) :pattern ((composite self)) )))

;; s
(declare-fun s1 (tuple0) (ref shor_))

;; bound_inf
(assert
  (and
    (< 0 (composite (contents1 (s1 Tuple0))))
    (< 1 (composite (contents1 (s1 Tuple0))))))

;; pre_adder_const_
(declare-fun pre_adder_const_ (bitvec) circuit)

;; fc
(declare-fun fc733 (bitvec
  (Array Int Int)
  Int) (Array Int angle))

;; fc
(declare-fun fc734 (bitvec
  (Array Int Int)) (Array Int angle))

;; fc'def
(assert
  (forall ((y bitvec) (x (Array Int Int)) (target Int) (k Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc733 y x target)) (t2tb8 k))) 
    (infix_sldtsl
      (* (* (select (value y) k) (select x target)) (power
                                                      2
                                                      (+ (- (compos_log
                                                              (contents1
                                                                (s1 Tuple0))) k) (- 
                                                      (compos_log
                                                        (contents1
                                                          (s1 Tuple0))) target))))
      (+ (compos_log (contents1 (s1 Tuple0))) 1)))))

;; fc'def
(assert
  (forall ((y bitvec) (x (Array Int Int)) (target Int))
    (= (tb2t84 (infix_at angle1 int (t2tb86 (fc734 y x)) (t2tb8 target))) 
    (ang_sum
      (fc733 y x target)
      (- (compos_log (contents1 (s1 Tuple0))) target)
      (+ (compos_log (contents1 (s1 Tuple0))) 1)))))

;; pre_adder_const_'spec
(assert
  (forall ((y bitvec))
    (=>
      (= (length y) (+ (compos_log (contents1 (s1 Tuple0))) 1))
      (and
        (= (width1 (pre_adder_const_ y)) (+ (compos_log
                                              (contents1 (s1 Tuple0))) 1))
        (and
          (forall ((x (Array Int Int)) (z (Array Int Int)))
            (=>
              (binary_l x (+ (compos_log (contents1 (s1 Tuple0))) 1))
              (= (ang_ind1 (pre_adder_const_ y) x z) (ang_sum
                                                       (fc734 y x)
                                                       0
                                                       (+ (compos_log
                                                            (contents1
                                                              (s1 Tuple0))) 1)))))
          (and
            (forall ((x bitvec) (z bitvec))
              (=>
                (= (length x) (+ (compos_log (contents1 (s1 Tuple0))) 1))
                (= (ang_ind1 (pre_adder_const_ y) (value x) (value z)) 
                (infix_sldtsl
                  (* (bv_to_int x) (bv_to_int y))
                  (+ (compos_log (contents1 (s1 Tuple0))) 1)))))
            (and
              (forall ((x (Array Int Int)) (z (Array Int Int)) (i Int))
                (=>
                  (binary_l x (+ (compos_log (contents1 (s1 Tuple0))) 1))
                  (=>
                    (and
                      (<= 0 i)
                      (< i (+ (compos_log (contents1 (s1 Tuple0))) 1)))
                    (= (basis_ket1 (pre_adder_const_ y) x z i) (select x i)))))
              (and
                (= (range1 (pre_adder_const_ y)) 0)
                (and
                  (forall ((x bitvec))
                    (=>
                      (= (length x) (+ (compos_log (contents1 (s1 Tuple0))) 1))
                      (= (path_sem1 (pre_adder_const_ y) (bv_to_ket x)) 
                      (infix_asdtdt
                        (int_qft_coeff
                          (bv_to_int y)
                          (bv_to_int x)
                          (+ (compos_log (contents1 (s1 Tuple0))) 1))
                        (bv_to_ket x)))))
                  (= (ancillas1 (pre_adder_const_ y)) 0))))))))))

;; add_in_qft
(declare-fun add_in_qft (Int) circuit)

;; add_in_qft'def
(assert
  (forall ((added Int))
    (= (add_in_qft added) (pre_adder_const_
                            (int_to_bv
                              (mod added (power
                                           2
                                           (+ (compos_log
                                                (contents1 (s1 Tuple0))) 1)))
                              (+ (compos_log (contents1 (s1 Tuple0))) 1))))))

;; add_in_qft'spec
(assert
  (forall ((added Int))
    (and
      (= (width1 (add_in_qft added)) (+ (compos_log (contents1 (s1 Tuple0))) 1))
      (and
        (forall ((b Int))
          (= (path_sem1
               (add_in_qft added)
               (apply_qft (+ (compos_log (contents1 (s1 Tuple0))) 1) b)) 
          (apply_qft
            (+ (compos_log (contents1 (s1 Tuple0))) 1)
            (+ added b))))
        (and
          (= (width1 (add_in_qft added)) (+ (compos_log
                                              (contents1 (s1 Tuple0))) 1))
          (= (ancillas1 (add_in_qft added)) 0))))))

;; place_add_in_qft
(declare-fun place_add_in_qft (Int
  Int) circuit)

;; place_add_in_qft'def
(assert
  (forall ((added Int) (k Int))
    (=>
      (< 0 k)
      (= (place_add_in_qft added k) (place1
                                      (add_in_qft added)
                                      0
                                      (+ (+ (compos_log
                                              (contents1 (s1 Tuple0))) 1) k))))))

;; place_add_in_qft'spec
(assert
  (forall ((added Int) (k Int))
    (=>
      (< 0 k)
      (and
        (= (width1 (place_add_in_qft added k)) (+ (+ (compos_log
                                                       (contents1
                                                         (s1 Tuple0))) 1) k))
        (and
          (forall ((b Int))
            (forall ((y (matrix complex)))
              (=>
                (is_a_ket_l y k)
                (= (path_sem1
                     (place_add_in_qft added k)
                     (kronecker
                       (apply_qft
                         (+ (compos_log (contents1 (s1 Tuple0))) 1)
                         b)
                       y)) (kronecker
                             (apply_qft
                               (+ (compos_log (contents1 (s1 Tuple0))) 1)
                               (+ b added))
                             y)))))
          (and
            (= (width1 (place_add_in_qft added k)) (+ (+ (compos_log
                                                           (contents1
                                                             (s1 Tuple0))) 1) k))
            (= (ancillas1 (place_add_in_qft added k)) 0)))))))

;; place_add_in_comput_basis
(declare-fun place_add_in_comput_basis (Int
  Int) circuit)

;; result
(declare-fun result92 (Int) (Array Int Int))

;; result'def
(assert
  (forall ((added Int) (i Int))
    (= (select (result92 added) i) (mod (+ i added) (power
                                                      2
                                                      (+ (compos_log
                                                           (contents1
                                                             (s1 Tuple0))) 1))))))

;; place_add_in_comput_basis'def
(assert
  (forall ((added Int) (size_reg Int))
    (=>
      (< (+ (compos_log (contents1 (s1 Tuple0))) 1) size_reg)
      (= (place_add_in_comput_basis added size_reg) (apply_function_in_qft_basis_zero
                                                      (place_add_in_qft
                                                        added
                                                        (- (- size_reg 
                                                        (compos_log
                                                          (contents1
                                                            (s1 Tuple0)))) 1))
                                                      (+ (compos_log
                                                           (contents1
                                                             (s1 Tuple0))) 1)
                                                      size_reg
                                                      (result92 added))))))

;; place_add_in_comput_basis'spec
(assert
  (forall ((added Int) (size_reg Int))
    (=>
      (< (+ (compos_log (contents1 (s1 Tuple0))) 1) size_reg)
      (and
        (= (width1 (place_add_in_comput_basis added size_reg)) size_reg)
        (and
          (forall ((b Int))
            (forall ((z (matrix complex)))
              (=>
                (and
                  (<= 0 b)
                  (< b (power 2 (+ (compos_log (contents1 (s1 Tuple0))) 1))))
                (=>
                  (is_a_ket_l
                    z
                    (- (- size_reg (compos_log (contents1 (s1 Tuple0)))) 1))
                  (= (path_sem1
                       (place_add_in_comput_basis added size_reg)
                       (kronecker
                         (ket (+ (compos_log (contents1 (s1 Tuple0))) 1) b)
                         z)) (kronecker
                               (ket
                                 (+ (compos_log (contents1 (s1 Tuple0))) 1)
                                 (mod (+ b added) (power
                                                    2
                                                    (+ (compos_log
                                                         (contents1
                                                           (s1 Tuple0))) 1))))
                               z))))))
          (and
            (= (width1 (place_add_in_comput_basis added size_reg)) size_reg)
            (= (ancillas1 (place_add_in_comput_basis added size_reg)) 0)))))))

;; div_bound
(declare-fun div_bound (Int
  Int) Int)

;; div_bound'def
(assert
  (forall ((added Int) (value1 Int))
    (=>
      (and (<= 0 added) (< added (composite (contents1 (s1 Tuple0)))))
      (=>
        (and (<= 0 value1) (< value1 (composite (contents1 (s1 Tuple0)))))
        (= (div_bound added value1) (div (+ value1 added) (composite
                                                            (contents1
                                                              (s1 Tuple0)))))))))

;; div_bound'spec
(assert
  (forall ((added Int) (value1 Int))
    (=>
      (and (<= 0 added) (< added (composite (contents1 (s1 Tuple0)))))
      (=>
        (and (<= 0 value1) (< value1 (composite (contents1 (s1 Tuple0)))))
        (and
          (and
            (<= 0 (div_bound added value1))
            (< (div_bound added value1) 2))
          (and
            (=>
              (= (div_bound added value1) 0)
              (= (mod (- (+ value1 added) (composite (contents1 (s1 Tuple0)))) 
              (power
                2
                (+ (compos_log (contents1 (s1 Tuple0))) 1))) (+ (power
                                                                  2
                                                                  (+ 
                                                                  (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))) 1)) (- (+ value1 added) 
              (composite
                (contents1 (s1 Tuple0)))))))
            (and
              (=>
                (= (div_bound added value1) 0)
                (and
                  (<= (power 2 (compos_log (contents1 (s1 Tuple0)))) (mod (- (+ value1 added) 
                  (composite
                    (contents1 (s1 Tuple0)))) (power
                                                2
                                                (+ (compos_log
                                                     (contents1 (s1 Tuple0))) 1))))
                  (< (mod (- (+ value1 added) (composite
                                                (contents1 (s1 Tuple0)))) 
                  (power
                    2
                    (+ (compos_log (contents1 (s1 Tuple0))) 1))) (power
                                                                   2
                                                                   (+ 
                                                                   (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))) 1)))))
              (and
                (=>
                  (= (div_bound added value1) 1)
                  (= (mod (+ value1 added) (composite
                                             (contents1 (s1 Tuple0)))) (- (+ value1 added) 
                  (composite
                    (contents1 (s1 Tuple0))))))
                (and
                  (=>
                    (= (div_bound added value1) 1)
                    (= (mod (- (+ value1 added) (composite
                                                  (contents1 (s1 Tuple0)))) 
                    (power
                      2
                      (+ (compos_log (contents1 (s1 Tuple0))) 1))) (- (+ value1 added) 
                    (composite
                      (contents1 (s1 Tuple0))))))
                  (=>
                    (= (div_bound added value1) 1)
                    (and
                      (<= 0 (mod (- (+ value1 added) (composite
                                                       (contents1
                                                         (s1 Tuple0)))) 
                      (power
                        2
                        (+ (compos_log (contents1 (s1 Tuple0))) 1))))
                      (< (mod (- (+ value1 added) (composite
                                                    (contents1 (s1 Tuple0)))) 
                      (power
                        2
                        (+ (compos_log (contents1 (s1 Tuple0))) 1))) 
                      (power
                        2
                        (compos_log (contents1 (s1 Tuple0))))))))))))))))

;; ket_l_two_n_plus_two
(assert
  (forall ((a (matrix complex)) (b (matrix complex)) (c (matrix complex)))
    (=>
      (is_a_ket_l a (compos_log (contents1 (s1 Tuple0))))
      (=>
        (is_a_ket_l b (+ (compos_log (contents1 (s1 Tuple0))) 1))
        (=>
          (is_a_ket_l c 1)
          (is_a_ket_l
            (kronecker a (kronecker b c))
            (+ (* 2 (compos_log (contents1 (s1 Tuple0)))) 2)))))))

;; ket_l_two_n_plus_four
(assert
  (forall ((a (matrix complex)) (b (matrix complex)) (c (matrix complex)))
    (=>
      (is_a_ket_l a (+ (compos_log (contents1 (s1 Tuple0))) 1))
      (=>
        (is_a_ket_l b (+ (compos_log (contents1 (s1 Tuple0))) 2))
        (=>
          (is_a_ket_l c 1)
          (is_a_ket_l
            (kronecker a (kronecker b c))
            (+ (* 2 (compos_log (contents1 (s1 Tuple0)))) 4)))))))

;; modular_adder
(declare-fun modular_adder (Int) circuit)

;; modular_adder'spec
(assert
  (forall ((post Int))
    (and
      (= (width1 (modular_adder post)) (+ (compos_log
                                            (contents1 (s1 Tuple0))) 2))
      (and
        (forall ((pre2 Int))
          (= (path_sem1
               (modular_adder post)
               (kronecker
                 (apply_qft
                   (+ (compos_log (contents1 (s1 Tuple0))) 1)
                   (mod pre2 (composite (contents1 (s1 Tuple0)))))
                 (ket 1 0))) (kronecker
                               (apply_qft
                                 (+ (compos_log (contents1 (s1 Tuple0))) 1)
                                 (mod (+ pre2 post) (composite
                                                      (contents1 (s1 Tuple0)))))
                               (ket 1 0))))
        (ancilla_free (modular_adder post))))))

;; multiplier_qft_pre
(declare-fun multiplier_qft_pre (Int) circuit)

;; multiplier_qft_pre'spec
(assert
  (forall ((p Int))
    (and
      (forall ((b Int) (i Int))
        (=>
          (and (<= 0 b) (< b (composite (contents1 (s1 Tuple0)))))
          (=>
            (and
              (<= 0 i)
              (< i (power 2 (compos_log (contents1 (s1 Tuple0))))))
            (= (path_sem1
                 (multiplier_qft_pre p)
                 (kronecker
                   (ket (compos_log (contents1 (s1 Tuple0))) i)
                   (kronecker
                     (ket (+ (compos_log (contents1 (s1 Tuple0))) 1) b)
                     (ket 1 0)))) (kronecker
                                    (ket
                                      (compos_log (contents1 (s1 Tuple0)))
                                      i)
                                    (kronecker
                                      (kronecker
                                        (ket 1 0)
                                        (ket
                                          (compos_log
                                            (contents1 (s1 Tuple0)))
                                          (mod (+ b (* p i)) (composite
                                                               (contents1
                                                                 (s1 Tuple0))))))
                                      (ket 1 0)))))))
      (and
        (= (width1 (multiplier_qft_pre p)) (+ (* 2 (compos_log
                                                     (contents1 (s1 Tuple0)))) 2))
        (ancilla_free (multiplier_qft_pre p))))))

;; cont_restricted_modular_multiplier
(declare-fun cont_restricted_modular_multiplier (Int) circuit)

;; cont_restricted_modular_multiplier'spec
(assert
  (forall ((p Int))
    (=>
      (and (< 0 p) (< p (composite (contents1 (s1 Tuple0)))))
      (=>
        (co_prime p (composite (contents1 (s1 Tuple0))))
        (and
          (= (width1 (cont_restricted_modular_multiplier p)) (+ (* 2 
          (compos_log
            (contents1 (s1 Tuple0)))) 4))
          (and
            (forall ((i Int))
              (=>
                (and (<= 0 i) (< i (composite (contents1 (s1 Tuple0)))))
                (= (path_sem1
                     (cont_restricted_modular_multiplier p)
                     (kronecker
                       (ket (+ (compos_log (contents1 (s1 Tuple0))) 1) i)
                       (kronecker
                         (ket (+ (compos_log (contents1 (s1 Tuple0))) 2) 0)
                         (ket 1 1)))) (kronecker
                                        (ket
                                          (+ (compos_log
                                               (contents1 (s1 Tuple0))) 1)
                                          (mod (* p i) (composite
                                                         (contents1
                                                           (s1 Tuple0)))))
                                        (kronecker
                                          (ket
                                            (+ (compos_log
                                                 (contents1 (s1 Tuple0))) 2)
                                            0)
                                          (ket 1 1))))))
            (ancilla_free (cont_restricted_modular_multiplier p))))))))

;; ket_with_ancs
(declare-fun ket_with_ancs (Int) (matrix complex))

;; ket_with_ancs'def
(assert
  (forall ((i Int))
    (=>
      (and (<= 0 i) (< i (composite (contents1 (s1 Tuple0)))))
      (= (ket_with_ancs i) (kronecker
                             (ket (compos_log (contents1 (s1 Tuple0))) i)
                             (ket
                               (+ (compos_log (contents1 (s1 Tuple0))) 4)
                               0))))))

;; ket_with_ancs'spec
(assert
  (forall ((i Int))
    (=>
      (and (<= 0 i) (< i (composite (contents1 (s1 Tuple0)))))
      (and
        (is_a_ket_l
          (ket_with_ancs i)
          (+ (* 2 (compos_log (contents1 (s1 Tuple0)))) 4))
        (and
          (= (ket_length (ket_with_ancs i)) (+ (* 2 (compos_log
                                                      (contents1 (s1 Tuple0)))) 4))
          (= (ket_with_ancs i) (kronecker
                                 (kronecker
                                   (ket
                                     (compos_log (contents1 (s1 Tuple0)))
                                     i)
                                   (ket
                                     (+ (compos_log (contents1 (s1 Tuple0))) 3)
                                     0))
                                 (ket 1 0))))))))

;; fc
(declare-fun fc735 (Int
  Int
  Int
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc736 (Int
  Int
  Int
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc737 (Int
  Int
  Int
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc738 (circuit
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc739 (circuit
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc740 (circuit
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc741 (circuit
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc742 (circuit
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc743 (circuit
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc744 (circuit
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc745 (circuit
  (Array Int Int)) (Array Int Int))

;; o
(declare-fun o () (Array Int Int))

;; fc
(declare-fun fc746 ((Array Int Int)
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc747 ((Array Int Int)
  (Array Int Int)) (Array Int Int))

;; fc
(declare-fun fc748 (circuit
  (Array Int Int)
  (Array Int Int)) (Array Int Int))

;; fc'def
(assert
  (forall ((o1 Int) (o2 Int) (o3 Int) (x (Array Int Int)) (j Int))
    (= (select (fc735 o1 o2 o3 x) j) (select x (ite (< j o3)
                                                 j
                                                 (ite (< j o2)
                                                   (+ j o1)
                                                   (+ (- j o2) o3)))))))

;; fc'def
(assert
  (forall ((o1 Int) (o2 Int) (o3 Int) (x (Array Int Int)) (ii Int))
    (= (select (fc736 o1 o2 o3 x) ii) (select x (ite (< ii o3)
                                                  ii
                                                  (ite (< ii o2)
                                                    (+ ii o1)
                                                    (+ (- ii o2) o3)))))))

;; fc'def
(assert
  (forall ((o1 Int) (o2 Int) (o3 Int) (x (Array Int Int)) (ii Int))
    (= (select (fc737 o1 o2 o3 x) ii) (select x (ite (< ii o3)
                                                  ii
                                                  (ite (< ii o2)
                                                    (+ ii o1)
                                                    (+ (- ii o2) o3)))))))

;; fc'def
(assert
  (forall ((o1 circuit) (y (Array Int Int)) (k Int))
    (= (select (fc738 o1 y) k) (select y (+ k (range1 o1))))))

;; fc'def
(assert
  (forall ((o1 circuit) (y (Array Int Int)) (k Int))
    (= (select (fc739 o1 y) k) (select y (+ k (range1 o1))))))

;; fc'def
(assert
  (forall ((check_ circuit) (y (Array Int Int)) (k Int))
    (= (select (fc740 check_ y) k) (select y (+ k (range1 check_))))))

;; fc'def
(assert
  (forall ((check_ circuit) (y (Array Int Int)) (k Int))
    (= (select (fc741 check_ y) k) (select y (+ k (range1 check_))))))

;; fc'def
(assert
  (forall ((check_ circuit) (y (Array Int Int)) (k Int))
    (= (select (fc742 check_ y) k) (select y (+ k (range1 check_))))))

;; fc'def
(assert
  (forall ((check_ circuit) (y (Array Int Int)) (k Int))
    (= (select (fc743 check_ y) k) (select y (+ k (range1 check_))))))

;; fc'def
(assert
  (forall ((o1 circuit) (y (Array Int Int)) (k Int))
    (= (select (fc744 o1 y) k) (select y (+ k (range1 o1))))))

;; fc'def
(assert
  (forall ((o1 circuit) (y (Array Int Int)) (k Int))
    (= (select (fc745 o1 y) k) (select y (+ k (range1 o1))))))

;; o'def
(assert
  (forall ((i Int))
    (= (select o i) (ite (< i 1)
                      (- (+ i (+ (* 2 (compos_log (contents1 (s1 Tuple0)))) 4)) 1)
                      (- i 1)))))

;; fc'def
(assert
  (forall ((o1 (Array Int Int)) (x (Array Int Int)) (i Int))
    (= (select (fc746 o1 x) i) (select x (select o1 i)))))

;; fc'def
(assert
  (forall ((o1 (Array Int Int)) (x (Array Int Int)) (i Int))
    (= (select (fc747 o1 x) i) (select x (select o1 i)))))

;; fc'def
(assert
  (forall ((c circuit) (o1 (Array Int Int)) (x (Array Int Int)) (i Int))
    (= (select (fc748 c o1 x) i) (select x (select (c_inv_func_int
                                                     o1
                                                     (width1 c)) i)))))

;; Goal modular_multiplier'vc
;; File "no_anc_shor_circ.mlw", line 321, characters 13-31
(assert
  (not
  (forall ((p Int))
    (=>
      (and
        (and (< 0 p) (< p (composite (contents1 (s1 Tuple0)))))
        (co_prime p (composite (contents1 (s1 Tuple0)))))
      (and
        (forall ((j Int))
          (=>
            (and (<= 0 j) (< j (composite (contents1 (s1 Tuple0)))))
            (let ((o1 (power 2 (+ (compos_log (contents1 (s1 Tuple0))) 1))))
              (and
                (not (= o1 0))
                (let ((result93 (mod (- j (composite (contents1 (s1 Tuple0)))) o1)))
                  (and
                    (and
                      (<= 0 result93)
                      (< result93 (power
                                    2
                                    (+ (compos_log (contents1 (s1 Tuple0))) 1))))
                    (and
                      (and
                        (<= (power 2 (compos_log (contents1 (s1 Tuple0)))) result93)
                        (< result93 (power
                                      2
                                      (+ (compos_log (contents1 (s1 Tuple0))) 1))))
                      (and
                        (= (div result93 (power
                                           2
                                           (compos_log
                                             (contents1 (s1 Tuple0))))) 1)
                        (= (select (value
                                     (ket_to_bv
                                       (ket
                                         (+ (compos_log
                                              (contents1 (s1 Tuple0))) 1)
                                         result93))) 0) 1)))))))))
        (forall ((modib (Array Int Int)))
          (=>
            (forall ((j Int))
              (=>
                (and (<= 0 j) (< j (composite (contents1 (s1 Tuple0)))))
                (and
                  (= (select modib j) (mod (- j (composite
                                                  (contents1 (s1 Tuple0)))) 
                  (power
                    2
                    (+ (compos_log (contents1 (s1 Tuple0))) 1))))
                  (and
                    (and
                      (<= 0 (select modib j))
                      (< (select modib j) (power
                                            2
                                            (+ (compos_log
                                                 (contents1 (s1 Tuple0))) 1))))
                    (and
                      (and
                        (<= (power 2 (compos_log (contents1 (s1 Tuple0)))) (select modib j))
                        (< (select modib j) (power
                                              2
                                              (+ (compos_log
                                                   (contents1 (s1 Tuple0))) 1))))
                      (and
                        (= (div (select modib j) (power
                                                   2
                                                   (compos_log
                                                     (contents1 (s1 Tuple0))))) 1)
                        (= (select (value
                                     (ket_to_bv
                                       (ket
                                         (+ (compos_log
                                              (contents1 (s1 Tuple0))) 1)
                                         (select modib j)))) 0) 1)))))))
            (let ((o1 (+ (compos_log (contents1 (s1 Tuple0))) 2)))
              (and
                (< 1 o1)
                (=>
                  (and
                    (forall ((ket1 (matrix complex)))
                      (forall ((i Int))
                        (=>
                          (is_a_ket_l ket1 (- o1 1))
                          (=>
                            (is_a_ket_basis_elt ket1)
                            (=>
                              (and (<= 0 i) (< i 2))
                              (=>
                                (= (select (value (ket_to_bv ket1)) 0) 1)
                                (= (path_sem1
                                     (cnot1 0 (- o1 1) o1)
                                     (kronecker ket1 (ket 1 i))) (kronecker
                                                                   ket1
                                                                   (ket
                                                                    1
                                                                    (- 1 i))))))))))
                    (forall ((ket1 (matrix complex)))
                      (forall ((i Int))
                        (=>
                          (is_a_ket_l ket1 (- o1 1))
                          (=>
                            (is_a_ket_basis_elt ket1)
                            (=>
                              (and (<= 0 i) (< i 2))
                              (=>
                                (= (select (value (ket_to_bv ket1)) 0) 0)
                                (= (path_sem1
                                     (cnot1 0 (- o1 1) o1)
                                     (kronecker ket1 (ket 1 i))) (kronecker
                                                                   ket1
                                                                   (ket 1 i))))))))))
                  (let ((o2 (+ (* 2 (compos_log (contents1 (s1 Tuple0)))) 4)))
                    (let ((o3 (- (composite (contents1 (s1 Tuple0))))))
                      (and
                        (< (+ (compos_log (contents1 (s1 Tuple0))) 1) o2)
                        (let ((o4 (place_add_in_comput_basis o3 o2)))
                          (=>
                            (and
                              (= (width1 o4) o2)
                              (and
                                (forall ((b Int))
                                  (forall ((z (matrix complex)))
                                    (=>
                                      (and
                                        (<= 0 b)
                                        (< b (power
                                               2
                                               (+ (compos_log
                                                    (contents1 (s1 Tuple0))) 1))))
                                      (=>
                                        (is_a_ket_l
                                          z
                                          (- (- o2 (compos_log
                                                     (contents1 (s1 Tuple0)))) 1))
                                        (= (path_sem1
                                             o4
                                             (kronecker
                                               (ket
                                                 (+ (compos_log
                                                      (contents1 (s1 Tuple0))) 1)
                                                 b)
                                               z)) (kronecker
                                                     (ket
                                                       (+ (compos_log
                                                            (contents1
                                                              (s1 Tuple0))) 1)
                                                       (mod (+ b o3) 
                                                       (power
                                                         2
                                                         (+ (compos_log
                                                              (contents1
                                                                (s1 Tuple0))) 1))))
                                                     z))))))
                                (and (= (width1 o4) o2) (= (ancillas1 o4) 0))))
                            (and
                              (and
                                (forall ((i Int))
                                  (=>
                                    (and
                                      (<= 0 i)
                                      (< i (composite
                                             (contents1 (s1 Tuple0)))))
                                    (= (path_sem1
                                         o4
                                         (kronecker
                                           (ket
                                             (+ (compos_log
                                                  (contents1 (s1 Tuple0))) 1)
                                             i)
                                           (kronecker
                                             (ket
                                               (+ (compos_log
                                                    (contents1 (s1 Tuple0))) 2)
                                               0)
                                             (ket 1 0)))) (kronecker
                                                            (ket
                                                              (+ (compos_log
                                                                   (contents1
                                                                    (s1
                                                                    Tuple0))) 1)
                                                              (select modib i))
                                                            (kronecker
                                                              (ket
                                                                (+ (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))) 2)
                                                                0)
                                                              (ket 1 0))))))
                                (ancilla_free o4))
                              (let ((o5 (+ (compos_log
                                             (contents1 (s1 Tuple0))) 2)))
                                (let ((o6 (+ (compos_log
                                               (contents1 (s1 Tuple0))) 2)))
                                  (let ((o7 (+ (compos_log
                                                 (contents1 (s1 Tuple0))) 1)))
                                    (let ((o8 (+ (compos_log
                                                   (contents1 (s1 Tuple0))) 2)))
                                      (let ((o9 (+ (compos_log
                                                     (contents1 (s1 Tuple0))) 1)))
                                        (and
                                          (and
                                            (and (<= 0 0) (< 0 o8))
                                            (and
                                              (and (<= 0 o9) (< o9 o8))
                                              (not (= o9 0))))
                                          (let ((o10 (cnot1 0 o9 o8)))
                                            (=>
                                              (and
                                                (= (pre1 o10) (Cnot1 0 o9 o8))
                                                (and
                                                  (= (ancillas1 o10) 0)
                                                  (and
                                                    (= (size1 o10) 1)
                                                    (and
                                                      (= (range1 o10) 0)
                                                      (and
                                                        (= (width1 o10) o8)
                                                        (and
                                                          (forall ((x (Array Int Int)) (y (Array Int Int)))
                                                            (forall ((i Int))
                                                              (=>
                                                                (not
                                                                  (= i o9))
                                                                (= (basis_ket1
                                                                    o10
                                                                    x
                                                                    y
                                                                    i) (select x i)))))
                                                          (and
                                                            (forall ((x (Array Int Int)) (y (Array Int Int)))
                                                              (forall 
                                                                ((i Int))
                                                                (=>
                                                                  (= i o9)
                                                                  (= 
                                                                  (basis_ket1
                                                                    o10
                                                                    x
                                                                    y
                                                                    i) (+ (* (select x 0) (- 1 (select x o9))) (* (select x o9) (- 1 (select x 0))))))))
                                                            (forall ((x (Array Int Int)) (y (Array Int Int)))
                                                              (= (ang_ind1
                                                                   o10
                                                                   x
                                                                   y) 
                                                              (infix_sldtsl
                                                                1
                                                                0))))))))))
                                              (and
                                                (and
                                                  (= (width1 o10) o6)
                                                  (and
                                                    (and (<= 0 o7) (< o7 o6))
                                                    (< 0 o5)))
                                                (let ((o11 (insert_qbits1
                                                             o10
                                                             o7
                                                             o6
                                                             o5)))
                                                  (=>
                                                    (and
                                                      (= (ancillas1 o11) 
                                                      (ancillas1
                                                        o10))
                                                      (and
                                                        (= (width1 o11) (+ o6 o5))
                                                        (and
                                                          (<= (size1 o11) (+ (* 2 (+ o6 o5)) 
                                                          (size1
                                                            o10)))
                                                          (and
                                                            (= (range1 o11) 
                                                            (range1
                                                              o10))
                                                            (and
                                                              (forall 
                                                                ((x (Array Int Int)) (y (Array Int Int)))
                                                                (= (ang_ind1
                                                                    o11
                                                                    x
                                                                    y) 
                                                                (ang_ind1
                                                                  o10
                                                                  (fc735
                                                                    o5
                                                                    o6
                                                                    o7
                                                                    x)
                                                                  y)))
                                                              (and
                                                                (forall 
                                                                  ((x (Array Int Int)) (y (Array Int Int)))
                                                                  (forall 
                                                                    ((j Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 0 j)
                                                                    (< j o7))
                                                                    (= 
                                                                    (basis_ket1
                                                                    o11
                                                                    x
                                                                    y
                                                                    j) 
                                                                    (basis_ket1
                                                                    o10
                                                                    (fc736
                                                                    o5
                                                                    o6
                                                                    o7
                                                                    x)
                                                                    y
                                                                    j)))))
                                                                (and
                                                                  (forall 
                                                                    ((x (Array Int Int)) (y (Array Int Int)))
                                                                    (forall 
                                                                    ((j Int))
                                                                    (=>
                                                                    (and
                                                                    (<= (+ o7 o5) j)
                                                                    (< j (+ o6 o5)))
                                                                    (= 
                                                                    (basis_ket1
                                                                    o11
                                                                    x
                                                                    y
                                                                    j) 
                                                                    (basis_ket1
                                                                    o10
                                                                    (fc737
                                                                    o5
                                                                    o6
                                                                    o7
                                                                    x)
                                                                    y
                                                                    (- j o5))))))
                                                                  (forall 
                                                                    ((x (Array Int Int)) (y (Array Int Int)))
                                                                    (forall 
                                                                    ((j Int))
                                                                    (=>
                                                                    (and
                                                                    (<= o7 j)
                                                                    (< j (+ o7 o5)))
                                                                    (= 
                                                                    (basis_ket1
                                                                    o11
                                                                    x
                                                                    y
                                                                    j) (select x j))))))))))))
                                                    (and
                                                      (= (width1 o4) 
                                                      (width1
                                                        o11))
                                                      (let ((o12 (infix_mnmn
                                                                   o4
                                                                   o11)))
                                                        (=>
                                                          (and
                                                            (= (pre1 o12) 
                                                            (Sequence1
                                                              (pre1 o4)
                                                              (pre1 o11)))
                                                            (and
                                                              (= (ancillas1
                                                                   o12) 
                                                              (max
                                                                (ancillas1
                                                                  o4)
                                                                (ancillas1
                                                                  o11)))
                                                              (and
                                                                (= (size1
                                                                    o12) (+ 
                                                                (size1
                                                                  o4) 
                                                                (size1
                                                                  o11)))
                                                                (and
                                                                  (= 
                                                                  (width1
                                                                    o12) 
                                                                  (width1
                                                                    o4))
                                                                  (and
                                                                    (= 
                                                                    (range1
                                                                    o12) (+ 
                                                                    (range1
                                                                    o4) 
                                                                    (range1
                                                                    o11)))
                                                                    (and
                                                                    (forall 
                                                                    ((x (Array Int Int)) (y (Array Int Int)))
                                                                    (forall 
                                                                    ((i Int))
                                                                    (= 
                                                                    (basis_ket1
                                                                    o12
                                                                    x
                                                                    y
                                                                    i) 
                                                                    (basis_ket1
                                                                    o11
                                                                    (select (select (select 
                                                                    basis_ket_closure1 o4) x) y)
                                                                    (fc738
                                                                    o4
                                                                    y)
                                                                    i))))
                                                                    (forall 
                                                                    ((x (Array Int Int)) (y (Array Int Int)))
                                                                    (= 
                                                                    (ang_ind1
                                                                    o12
                                                                    x
                                                                    y) 
                                                                    (ang_add
                                                                    (ang_ind1
                                                                    o4
                                                                    x
                                                                    y)
                                                                    (ang_ind1
                                                                    o11
                                                                    (select (select (select 
                                                                    basis_ket_closure1 o4) x) y)
                                                                    (fc739
                                                                    o4
                                                                    y)))))))))))
                                                          (forall ((check_ circuit))
                                                            (=>
                                                              (= check_ o12)
                                                              (and
                                                                (forall 
                                                                  ((i Int))
                                                                  (=>
                                                                    (and
                                                                    (<= 0 i)
                                                                    (< i 
                                                                    (composite
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0)))))
                                                                    (= 
                                                                    (path_sem1
                                                                    check_
                                                                    (kronecker
                                                                    (ket
                                                                    (+ 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))) 1)
                                                                    i)
                                                                    (kronecker
                                                                    (ket
                                                                    (+ 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))) 2)
                                                                    0)
                                                                    (ket 1 0)))) 
                                                                    (kronecker
                                                                    (ket
                                                                    (+ 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))) 1)
                                                                    (select modib i))
                                                                    (kronecker
                                                                    (ket
                                                                    (+ 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))) 2)
                                                                    0)
                                                                    (ket 1 1))))))
                                                                (and
                                                                  (= 
                                                                  (width1
                                                                    check_) (+ (* 2 
                                                                  (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0)))) 4))
                                                                  (and
                                                                    (ancilla_free
                                                                    check_)
                                                                    (let ((o13 (+ (* 2 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0)))) 4)))
                                                                    (let ((o14 
                                                                    (composite
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0)))))
                                                                    (and
                                                                    (< (+ 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))) 1) o13)
                                                                    (let ((o15 
                                                                    (place_add_in_comput_basis
                                                                    o14
                                                                    o13)))
                                                                    (=>
                                                                    (and
                                                                    (= 
                                                                    (width1
                                                                    o15) o13)
                                                                    (and
                                                                    (forall 
                                                                    ((b Int))
                                                                    (forall 
                                                                    ((z (matrix complex)))
                                                                    (=>
                                                                    (and
                                                                    (<= 0 b)
                                                                    (< b 
                                                                    (power
                                                                    2
                                                                    (+ 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))) 1))))
                                                                    (=>
                                                                    (is_a_ket_l
                                                                    z
                                                                    (- (- o13 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0)))) 1))
                                                                    (= 
                                                                    (path_sem1
                                                                    o15
                                                                    (kronecker
                                                                    (ket
                                                                    (+ 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))) 1)
                                                                    b)
                                                                    z)) 
                                                                    (kronecker
                                                                    (ket
                                                                    (+ 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))) 1)
                                                                    (mod (+ b o14) 
                                                                    (power
                                                                    2
                                                                    (+ 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))) 1))))
                                                                    z))))))
                                                                    (and
                                                                    (= 
                                                                    (width1
                                                                    o15) o13)
                                                                    (= 
                                                                    (ancillas1
                                                                    o15) 0))))
                                                                    (and
                                                                    (= 
                                                                    (width1
                                                                    check_) 
                                                                    (width1
                                                                    o15))
                                                                    (let ((o16 
                                                                    (infix_mnmn
                                                                    check_
                                                                    o15)))
                                                                    (=>
                                                                    (and
                                                                    (= 
                                                                    (pre1
                                                                    o16) 
                                                                    (Sequence1
                                                                    (pre1
                                                                    check_)
                                                                    (pre1
                                                                    o15)))
                                                                    (and
                                                                    (= 
                                                                    (ancillas1
                                                                    o16) 
                                                                    (max
                                                                    (ancillas1
                                                                    check_)
                                                                    (ancillas1
                                                                    o15)))
                                                                    (and
                                                                    (= 
                                                                    (size1
                                                                    o16) (+ 
                                                                    (size1
                                                                    check_) 
                                                                    (size1
                                                                    o15)))
                                                                    (and
                                                                    (= 
                                                                    (width1
                                                                    o16) 
                                                                    (width1
                                                                    check_))
                                                                    (and
                                                                    (= 
                                                                    (range1
                                                                    o16) (+ 
                                                                    (range1
                                                                    check_) 
                                                                    (range1
                                                                    o15)))
                                                                    (and
                                                                    (forall 
                                                                    ((x (Array Int Int)) (y (Array Int Int)))
                                                                    (forall 
                                                                    ((i Int))
                                                                    (= 
                                                                    (basis_ket1
                                                                    o16
                                                                    x
                                                                    y
                                                                    i) 
                                                                    (basis_ket1
                                                                    o15
                                                                    (select (select (select 
                                                                    basis_ket_closure1 check_) x) y)
                                                                    (fc740
                                                                    check_
                                                                    y)
                                                                    i))))
                                                                    (forall 
                                                                    ((x (Array Int Int)) (y (Array Int Int)))
                                                                    (= 
                                                                    (ang_ind1
                                                                    o16
                                                                    x
                                                                    y) 
                                                                    (ang_add
                                                                    (ang_ind1
                                                                    check_
                                                                    x
                                                                    y)
                                                                    (ang_ind1
                                                                    o15
                                                                    (select (select (select 
                                                                    basis_ket_closure1 check_) x) y)
                                                                    (fc741
                                                                    check_
                                                                    y)))))))))))
                                                                    (forall 
                                                                    ((check_1 circuit))
                                                                    (=>
                                                                    (= check_1 o16)
                                                                    (and
                                                                    (forall 
                                                                    ((i Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 0 i)
                                                                    (< i 
                                                                    (composite
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0)))))
                                                                    (= 
                                                                    (path_sem1
                                                                    check_1
                                                                    (kronecker
                                                                    (ket
                                                                    (+ 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))) 1)
                                                                    i)
                                                                    (kronecker
                                                                    (ket
                                                                    (+ 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))) 2)
                                                                    0)
                                                                    (ket 1 0)))) 
                                                                    (kronecker
                                                                    (ket
                                                                    (+ 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))) 1)
                                                                    i)
                                                                    (kronecker
                                                                    (ket
                                                                    (+ 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))) 2)
                                                                    0)
                                                                    (ket 1 1))))))
                                                                    (and
                                                                    (= 
                                                                    (width1
                                                                    check_1) (+ (* 2 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0)))) 4))
                                                                    (and
                                                                    (ancilla_free
                                                                    check_1)
                                                                    (and
                                                                    (and
                                                                    (forall 
                                                                    ((i Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 0 i)
                                                                    (< i 
                                                                    (composite
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0)))))
                                                                    (= 
                                                                    (path_sem1
                                                                    check_1
                                                                    (kronecker
                                                                    (ket
                                                                    (+ 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))) 1)
                                                                    i)
                                                                    (kronecker
                                                                    (ket
                                                                    (+ 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))) 2)
                                                                    0)
                                                                    (ket 1 0)))) 
                                                                    (kronecker
                                                                    (ket
                                                                    (+ 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))) 1)
                                                                    i)
                                                                    (kronecker
                                                                    (ket
                                                                    (+ 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))) 2)
                                                                    0)
                                                                    (ket 1 1))))))
                                                                    (and
                                                                    (= 
                                                                    (width1
                                                                    check_1) (+ (* 2 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0)))) 4))
                                                                    (ancilla_free
                                                                    check_1)))
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (< 0 p)
                                                                    (< p 
                                                                    (composite
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0)))))
                                                                    (co_prime
                                                                    p
                                                                    (composite
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0)))))
                                                                    (let ((o17 
                                                                    (cont_restricted_modular_multiplier
                                                                    p)))
                                                                    (=>
                                                                    (and
                                                                    (= 
                                                                    (width1
                                                                    o17) (+ (* 2 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0)))) 4))
                                                                    (and
                                                                    (forall 
                                                                    ((i Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 0 i)
                                                                    (< i 
                                                                    (composite
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0)))))
                                                                    (= 
                                                                    (path_sem1
                                                                    o17
                                                                    (kronecker
                                                                    (ket
                                                                    (+ 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))) 1)
                                                                    i)
                                                                    (kronecker
                                                                    (ket
                                                                    (+ 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))) 2)
                                                                    0)
                                                                    (ket 1 1)))) 
                                                                    (kronecker
                                                                    (ket
                                                                    (+ 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))) 1)
                                                                    (mod (* p i) 
                                                                    (composite
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0)))))
                                                                    (kronecker
                                                                    (ket
                                                                    (+ 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))) 2)
                                                                    0)
                                                                    (ket 1 1))))))
                                                                    (ancilla_free
                                                                    o17)))
                                                                    (and
                                                                    (= 
                                                                    (width1
                                                                    check_1) 
                                                                    (width1
                                                                    o17))
                                                                    (let ((o18 
                                                                    (infix_mnmn
                                                                    check_1
                                                                    o17)))
                                                                    (=>
                                                                    (and
                                                                    (= 
                                                                    (pre1
                                                                    o18) 
                                                                    (Sequence1
                                                                    (pre1
                                                                    check_1)
                                                                    (pre1
                                                                    o17)))
                                                                    (and
                                                                    (= 
                                                                    (ancillas1
                                                                    o18) 
                                                                    (max
                                                                    (ancillas1
                                                                    check_1)
                                                                    (ancillas1
                                                                    o17)))
                                                                    (and
                                                                    (= 
                                                                    (size1
                                                                    o18) (+ 
                                                                    (size1
                                                                    check_1) 
                                                                    (size1
                                                                    o17)))
                                                                    (and
                                                                    (= 
                                                                    (width1
                                                                    o18) 
                                                                    (width1
                                                                    check_1))
                                                                    (and
                                                                    (= 
                                                                    (range1
                                                                    o18) (+ 
                                                                    (range1
                                                                    check_1) 
                                                                    (range1
                                                                    o17)))
                                                                    (and
                                                                    (forall 
                                                                    ((x (Array Int Int)) (y (Array Int Int)))
                                                                    (forall 
                                                                    ((i Int))
                                                                    (= 
                                                                    (basis_ket1
                                                                    o18
                                                                    x
                                                                    y
                                                                    i) 
                                                                    (basis_ket1
                                                                    o17
                                                                    (select (select (select 
                                                                    basis_ket_closure1 check_1) x) y)
                                                                    (fc742
                                                                    check_1
                                                                    y)
                                                                    i))))
                                                                    (forall 
                                                                    ((x (Array Int Int)) (y (Array Int Int)))
                                                                    (= 
                                                                    (ang_ind1
                                                                    o18
                                                                    x
                                                                    y) 
                                                                    (ang_add
                                                                    (ang_ind1
                                                                    check_1
                                                                    x
                                                                    y)
                                                                    (ang_ind1
                                                                    o17
                                                                    (select (select (select 
                                                                    basis_ket_closure1 check_1) x) y)
                                                                    (fc743
                                                                    check_1
                                                                    y)))))))))))
                                                                    (and
                                                                    (forall 
                                                                    ((i Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 0 i)
                                                                    (< i 
                                                                    (composite
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0)))))
                                                                    (= 
                                                                    (path_sem1
                                                                    o18
                                                                    (kronecker
                                                                    (ket
                                                                    (+ 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))) 1)
                                                                    i)
                                                                    (kronecker
                                                                    (ket
                                                                    (+ 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))) 2)
                                                                    0)
                                                                    (ket 1 0)))) 
                                                                    (kronecker
                                                                    (ket
                                                                    (+ 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))) 1)
                                                                    (mod (* p i) 
                                                                    (composite
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0)))))
                                                                    (kronecker
                                                                    (ket
                                                                    (+ 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))) 2)
                                                                    0)
                                                                    (ket 1 1))))))
                                                                    (and
                                                                    (= 
                                                                    (width1
                                                                    o18) (+ (* 2 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0)))) 4))
                                                                    (and
                                                                    (ancilla_free
                                                                    o18)
                                                                    (and
                                                                    (ancilla_free
                                                                    check_1)
                                                                    (let ((o19 
                                                                    (reverse
                                                                    check_1)))
                                                                    (=>
                                                                    (and
                                                                    (= 
                                                                    (width1
                                                                    o19) 
                                                                    (width1
                                                                    check_1))
                                                                    (and
                                                                    (= 
                                                                    (size1
                                                                    o19) 
                                                                    (size1
                                                                    check_1))
                                                                    (and
                                                                    (ancilla_free
                                                                    o19)
                                                                    (forall 
                                                                    ((x (matrix complex)) (y (matrix complex)))
                                                                    (=>
                                                                    (is_a_ket_l
                                                                    x
                                                                    (width1
                                                                    check_1))
                                                                    (=>
                                                                    (is_a_ket_l
                                                                    y
                                                                    (width1
                                                                    check_1))
                                                                    (=
                                                                    (= 
                                                                    (path_sem1
                                                                    check_1
                                                                    x) y)
                                                                    (= 
                                                                    (path_sem1
                                                                    o19
                                                                    y) x))))))))
                                                                    (and
                                                                    (= 
                                                                    (width1
                                                                    o18) 
                                                                    (width1
                                                                    o19))
                                                                    (let ((o20 
                                                                    (infix_mnmn
                                                                    o18
                                                                    o19)))
                                                                    (=>
                                                                    (and
                                                                    (= 
                                                                    (pre1
                                                                    o20) 
                                                                    (Sequence1
                                                                    (pre1
                                                                    o18)
                                                                    (pre1
                                                                    o19)))
                                                                    (and
                                                                    (= 
                                                                    (ancillas1
                                                                    o20) 
                                                                    (max
                                                                    (ancillas1
                                                                    o18)
                                                                    (ancillas1
                                                                    o19)))
                                                                    (and
                                                                    (= 
                                                                    (size1
                                                                    o20) (+ 
                                                                    (size1
                                                                    o18) 
                                                                    (size1
                                                                    o19)))
                                                                    (and
                                                                    (= 
                                                                    (width1
                                                                    o20) 
                                                                    (width1
                                                                    o18))
                                                                    (and
                                                                    (= 
                                                                    (range1
                                                                    o20) (+ 
                                                                    (range1
                                                                    o18) 
                                                                    (range1
                                                                    o19)))
                                                                    (and
                                                                    (forall 
                                                                    ((x (Array Int Int)) (y (Array Int Int)))
                                                                    (forall 
                                                                    ((i Int))
                                                                    (= 
                                                                    (basis_ket1
                                                                    o20
                                                                    x
                                                                    y
                                                                    i) 
                                                                    (basis_ket1
                                                                    o19
                                                                    (select (select (select 
                                                                    basis_ket_closure1 o18) x) y)
                                                                    (fc744
                                                                    o18
                                                                    y)
                                                                    i))))
                                                                    (forall 
                                                                    ((x (Array Int Int)) (y (Array Int Int)))
                                                                    (= 
                                                                    (ang_ind1
                                                                    o20
                                                                    x
                                                                    y) 
                                                                    (ang_add
                                                                    (ang_ind1
                                                                    o18
                                                                    x
                                                                    y)
                                                                    (ang_ind1
                                                                    o19
                                                                    (select (select (select 
                                                                    basis_ket_closure1 o18) x) y)
                                                                    (fc745
                                                                    o18
                                                                    y)))))))))))
                                                                    (forall 
                                                                    ((c circuit))
                                                                    (=>
                                                                    (= c o20)
                                                                    (and
                                                                    (forall 
                                                                    ((i Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 0 i)
                                                                    (< i 
                                                                    (composite
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0)))))
                                                                    (= 
                                                                    (path_sem1
                                                                    c
                                                                    (kronecker
                                                                    (ket
                                                                    (+ 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))) 1)
                                                                    i)
                                                                    (kronecker
                                                                    (ket
                                                                    (+ 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))) 2)
                                                                    0)
                                                                    (ket 1 0)))) 
                                                                    (kronecker
                                                                    (ket
                                                                    (+ 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))) 1)
                                                                    (mod (* p i) 
                                                                    (composite
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0)))))
                                                                    (kronecker
                                                                    (ket
                                                                    (+ 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))) 2)
                                                                    0)
                                                                    (ket 1 0))))))
                                                                    (and
                                                                    (= 
                                                                    (width1
                                                                    c) (+ (* 2 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0)))) 4))
                                                                    (let ((o21 
                                                                    o))
                                                                    (and
                                                                    (p_bijective1
                                                                    o21
                                                                    (to_fset
                                                                    0
                                                                    (width1
                                                                    c))
                                                                    (to_fset
                                                                    0
                                                                    (width1
                                                                    c)))
                                                                    (let ((o22 
                                                                    (with_permutation1
                                                                    c
                                                                    o21)))
                                                                    (=>
                                                                    (and
                                                                    (= 
                                                                    (unwire
                                                                    o22) 
                                                                    (with_permutation
                                                                    (unwire
                                                                    c)
                                                                    o21))
                                                                    (and
                                                                    (<= 
                                                                    (size1
                                                                    o22) (+ (* 2 
                                                                    (width1
                                                                    c)) 
                                                                    (size1
                                                                    c)))
                                                                    (and
                                                                    (= 
                                                                    (ancillas1
                                                                    o22) 
                                                                    (ancillas1
                                                                    c))
                                                                    (and
                                                                    (= 
                                                                    (width1
                                                                    o22) 
                                                                    (width1
                                                                    c))
                                                                    (and
                                                                    (= 
                                                                    (range1
                                                                    o22) 
                                                                    (range1
                                                                    c))
                                                                    (and
                                                                    (forall 
                                                                    ((x (Array Int Int)) (y (Array Int Int)))
                                                                    (= 
                                                                    (ang_ind1
                                                                    o22
                                                                    x
                                                                    y) 
                                                                    (ang_ind1
                                                                    c
                                                                    (fc746
                                                                    o21
                                                                    x)
                                                                    y)))
                                                                    (and
                                                                    (forall 
                                                                    ((x (Array Int Int)) (y (Array Int Int)))
                                                                    (forall 
                                                                    ((i Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 0 i)
                                                                    (< i 
                                                                    (width1
                                                                    c)))
                                                                    (= 
                                                                    (basis_ket1
                                                                    o22
                                                                    x
                                                                    y
                                                                    i) 
                                                                    (basis_ket1
                                                                    c
                                                                    (fc747
                                                                    o21
                                                                    x)
                                                                    y
                                                                    (select 
                                                                    (c_inv_func_int
                                                                    o21
                                                                    (width1
                                                                    c)) i))))))
                                                                    (and
                                                                    (forall 
                                                                    ((x (Array Int Int)) (y (Array Int Int)))
                                                                    (forall 
                                                                    ((i Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 0 i)
                                                                    (< i 
                                                                    (width1
                                                                    c)))
                                                                    (= 
                                                                    (basis_ket1
                                                                    o22
                                                                    (fc748
                                                                    c
                                                                    o21
                                                                    x)
                                                                    y
                                                                    i) 
                                                                    (basis_ket1
                                                                    c
                                                                    x
                                                                    y
                                                                    (select 
                                                                    (c_inv_func_int
                                                                    o21
                                                                    (width1
                                                                    c)) i))))))
                                                                    (= o22 
                                                                    (infix_mnmn
                                                                    (infix_mnmn
                                                                    (permutation_circuit1
                                                                    (width1
                                                                    c)
                                                                    o21)
                                                                    c)
                                                                    (permutation_circuit1
                                                                    (width1
                                                                    c)
                                                                    (c_inv_func_int
                                                                    o21
                                                                    (width1
                                                                    c)))))))))))))
                                                                    (forall 
                                                                    ((c1 circuit))
                                                                    (=>
                                                                    (= c1 o22)
                                                                    (and
                                                                    (forall 
                                                                    ((i Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 0 i)
                                                                    (< i 
                                                                    (composite
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0)))))
                                                                    (= 
                                                                    (path_sem1
                                                                    c1
                                                                    (kronecker
                                                                    (kronecker
                                                                    (ket
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0)))
                                                                    i)
                                                                    (ket
                                                                    (+ 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))) 3)
                                                                    0))
                                                                    (ket 1 0))) 
                                                                    (kronecker
                                                                    (kronecker
                                                                    (ket
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0)))
                                                                    (mod (* p i) 
                                                                    (composite
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0)))))
                                                                    (ket
                                                                    (+ 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))) 3)
                                                                    0))
                                                                    (ket 1 0)))))
                                                                    (and
                                                                    (= 
                                                                    (width1
                                                                    c1) (+ (* 2 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0)))) 4))
                                                                    (and
                                                                    (forall 
                                                                    ((i Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 0 i)
                                                                    (< i 
                                                                    (composite
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0)))))
                                                                    (= 
                                                                    (path_sem1
                                                                    c1
                                                                    (ket_with_ancs
                                                                    i)) 
                                                                    (ket_with_ancs
                                                                    (mod (* p i) 
                                                                    (composite
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0))))))))
                                                                    (= 
                                                                    (width1
                                                                    c1) (+ (* 2 
                                                                    (compos_log
                                                                    (contents1
                                                                    (s1
                                                                    Tuple0)))) 4)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(check-sat)
(get-info :reason-unknown)
