<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="CVC3" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC4" version="1.8" timelimit="30" steplimit="0" memlimit="4000"/>
<prover id="6" name="CVC5" version="1.2.1" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="commuting_lemmas.mlw"/>
<theory name="Ancilla_pre" proved="true">
 <goal name="ancilla_free&#39;vc" expl="VC for ancilla_free" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ancilla_free&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="2.820000"/></proof>
  </goal>
  <goal name="ancilla_free&#39;vc.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="3.137808" steps="565970"/></proof>
  </goal>
  <goal name="ancilla_free&#39;vc.2" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="3.090000"/></proof>
  </goal>
  <goal name="ancilla_free&#39;vc.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="3.272156" steps="566055"/></proof>
  </goal>
  <goal name="ancilla_free&#39;vc.4" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="2.950000"/></proof>
  </goal>
  <goal name="ancilla_free&#39;vc.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="3.463430" steps="565937"/></proof>
  </goal>
  <goal name="ancilla_free&#39;vc.6" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="2.609946"/></proof>
  </goal>
  <goal name="ancilla_free&#39;vc.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="3.550747" steps="566828"/></proof>
  </goal>
  <goal name="ancilla_free&#39;vc.8" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="2.890000"/></proof>
  </goal>
  <goal name="ancilla_free&#39;vc.9" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="3.472186" steps="565943"/></proof>
  </goal>
  <goal name="ancilla_free&#39;vc.10" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="3.050000"/></proof>
  </goal>
  <goal name="ancilla_free&#39;vc.11" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="3.210193" steps="566828"/></proof>
  </goal>
  <goal name="ancilla_free&#39;vc.12" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="ancilla_free&#39;vc.12.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="1.497497" steps="419669"/></proof>
   </goal>
   <goal name="ancilla_free&#39;vc.12.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.750000"/></proof>
   </goal>
   <goal name="ancilla_free&#39;vc.12.2" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.870000"/></proof>
   </goal>
   <goal name="ancilla_free&#39;vc.12.3" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.870000"/></proof>
   </goal>
   <goal name="ancilla_free&#39;vc.12.4" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.870000"/></proof>
   </goal>
   <goal name="ancilla_free&#39;vc.12.5" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.840000"/></proof>
   </goal>
   <goal name="ancilla_free&#39;vc.12.6" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="1.469311" steps="419669"/></proof>
   </goal>
   <goal name="ancilla_free&#39;vc.12.7" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="1.467784" steps="419669"/></proof>
   </goal>
   <goal name="ancilla_free&#39;vc.12.8" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="1.407618" steps="419669"/></proof>
   </goal>
   <goal name="ancilla_free&#39;vc.12.9" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="1.384332" steps="419669"/></proof>
   </goal>
   <goal name="ancilla_free&#39;vc.12.10" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="1.397327" steps="419669"/></proof>
   </goal>
   <goal name="ancilla_free&#39;vc.12.11" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="1.402117" steps="419669"/></proof>
   </goal>
   <goal name="ancilla_free&#39;vc.12.12" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="1.467738" steps="419669"/></proof>
   </goal>
   <goal name="ancilla_free&#39;vc.12.13" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="1.529121" steps="419669"/></proof>
   </goal>
   <goal name="ancilla_free&#39;vc.12.14" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="1.511948" steps="419669"/></proof>
   </goal>
   <goal name="ancilla_free&#39;vc.12.15" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="1.388652" steps="419669"/></proof>
   </goal>
   <goal name="ancilla_free&#39;vc.12.16" expl="postcondition" proved="true">
   <proof prover="6" timelimit="10" memlimit="4000"><result status="valid" time="2.598419" steps="565441"/></proof>
   </goal>
   <goal name="ancilla_free&#39;vc.12.17" expl="postcondition" proved="true">
   <proof prover="6" timelimit="10" memlimit="4000"><result status="valid" time="2.681602" steps="565456"/></proof>
   </goal>
   <goal name="ancilla_free&#39;vc.12.18" expl="postcondition" proved="true">
   <proof prover="6" timelimit="10" memlimit="4000"><result status="valid" time="2.567499" steps="565537"/></proof>
   </goal>
   <goal name="ancilla_free&#39;vc.12.19" expl="postcondition" proved="true">
   <proof prover="6" timelimit="10" memlimit="4000"><result status="valid" time="2.563091" steps="565538"/></proof>
   </goal>
   <goal name="ancilla_free&#39;vc.12.20" expl="postcondition" proved="true">
   <proof prover="6" timelimit="10" memlimit="4000"><result status="valid" time="2.602995" steps="569408"/></proof>
   </goal>
   <goal name="ancilla_free&#39;vc.12.21" expl="postcondition" proved="true">
   <proof prover="6" timelimit="10" memlimit="4000"><result status="valid" time="2.626435" steps="569488"/></proof>
   </goal>
   <goal name="ancilla_free&#39;vc.12.22" expl="postcondition" proved="true">
   <proof prover="6" timelimit="10" memlimit="4000"><result status="valid" time="2.743873" steps="570310"/></proof>
   </goal>
   <goal name="ancilla_free&#39;vc.12.23" expl="postcondition" proved="true">
   <proof prover="6" timelimit="10" memlimit="4000"><result status="valid" time="2.708611" steps="570316"/></proof>
   </goal>
   <goal name="ancilla_free&#39;vc.12.24" expl="postcondition" proved="true">
   <proof prover="6" timelimit="10" memlimit="4000"><result status="valid" time="2.507544" steps="565804"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_ancilla_free&#39;vc" expl="VC for set_ancilla_free" proved="true">
 <proof prover="6" timelimit="10" memlimit="4000"><result status="valid" time="1.204600" steps="420278"/></proof>
 </goal>
 <goal name="correct_ancilla_free&#39;vc" expl="VC for correct_ancilla_free" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="correct_ancilla_free&#39;vc.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_ancilla_free">
   <goal name="correct_ancilla_free&#39;vc.0.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="2.880062" steps="566517"/></proof>
   </goal>
   <goal name="correct_ancilla_free&#39;vc.0.1" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.702887" steps="363283"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ancilla_free_place&#39;vc" expl="VC for ancilla_free_place" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ancilla_free_place&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="ancilla_free_place&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="ancilla_free&#39;def10" arg2="(Place c ta n)">
    <goal name="ancilla_free_place&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="ancilla_free_place&#39;vc.0.0.0.0" expl="destruct premise" proved="true">
     <proof prover="3" timelimit="1" memlimit="1000"><result status="valid" time="4.825530" steps="1312287"/></proof>
     </goal>
     <goal name="ancilla_free_place&#39;vc.0.0.0.1" expl="postcondition" proved="true">
     <proof prover="6"><result status="valid" time="1.406288" steps="451491"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ancilla_free_place_rev&#39;vc" expl="VC for ancilla_free_place_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ancilla_free_place_rev&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="14.609851" steps="1268507"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ancilla_free_cont&#39;vc" expl="VC for ancilla_free_cont" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ancilla_free_cont&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="16.598627" steps="1268059"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ancilla_free_cont_rev&#39;vc" expl="VC for ancilla_free_cont_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ancilla_free_cont_rev&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="14.163220" steps="1268470"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ancilla_free_seq&#39;vc" expl="VC for ancilla_free_seq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ancilla_free_seq&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ancilla_free_seq&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="ancilla_free_seq&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="ancilla_free&#39;def6" arg2="(Sequence c1 c2)">
     <goal name="ancilla_free_seq&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="ancilla_free_seq&#39;vc.0.0.0.0.0" expl="destruct premise" proved="true">
      <proof prover="3"><result status="valid" time="6.687809" steps="1313912"/></proof>
      </goal>
      <goal name="ancilla_free_seq&#39;vc.0.0.0.0.1" expl="postcondition" proved="true">
      <proof prover="6"><result status="valid" time="1.656342" steps="451816"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="ancilla_free_seq&#39;vc.0.1" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="ancilla_free_seq&#39;vc.0.1.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="ancilla_free&#39;def5" arg2="(Sequence c1 c2)">
     <goal name="ancilla_free_seq&#39;vc.0.1.0.0" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="ancilla_free_seq&#39;vc.0.1.0.0.0" expl="destruct premise" proved="true">
      <proof prover="3" timelimit="1" memlimit="1000"><result status="valid" time="4.739452" steps="1313912"/></proof>
      </goal>
      <goal name="ancilla_free_seq&#39;vc.0.1.0.0.1" expl="postcondition" proved="true">
      <proof prover="6"><result status="valid" time="1.469178" steps="451816"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="not_ancilla_free_anc&#39;vc" expl="VC for not_ancilla_free_anc" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="not_ancilla_free_anc&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="not_ancilla_free_anc&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="ancilla_free&#39;def" arg2="(Ancillas c i)">
    <goal name="not_ancilla_free_anc&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="4.515707" steps="682962"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ancilla_free_seq_rev&#39;vc" expl="VC for ancilla_free_seq_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ancilla_free_seq_rev&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="ancilla_free_seq_rev&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="ancilla_free&#39;def4" arg2="(Sequence c1 c2)">
    <goal name="ancilla_free_seq_rev&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="destruct_rec" proved="true" arg1="Hinst">
     <goal name="ancilla_free_seq_rev&#39;vc.0.0.0.0" expl="destruct premise" proved="true">
     <proof prover="3" timelimit="1" memlimit="1000"><result status="valid" time="4.793879" steps="1314277"/></proof>
     </goal>
     <goal name="ancilla_free_seq_rev&#39;vc.0.0.0.1" expl="postcondition" proved="true">
     <proof prover="6"><result status="valid" time="1.544986" steps="451962"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ancilla_free_par&#39;vc" expl="VC for ancilla_free_par" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ancilla_free_par&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="ancilla_free_par&#39;vc.0.0" expl="VC for ancilla_free_par" proved="true">
   <transf name="instantiate" proved="true" arg1="ancilla_free&#39;def3" arg2="(Parallel c1 c2)">
    <goal name="ancilla_free_par&#39;vc.0.0.0" expl="VC for ancilla_free_par" proved="true">
    <proof prover="0"><result status="valid" time="2.151583"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="ancilla_free_par&#39;vc.0.1" expl="VC for ancilla_free_par" proved="true">
   <transf name="instantiate" proved="true" arg1="ancilla_free&#39;def2" arg2="(Parallel c1 c2)">
    <goal name="ancilla_free_par&#39;vc.0.1.0" expl="VC for ancilla_free_par" proved="true">
    <proof prover="0"><result status="valid" time="2.146835"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ancilla_free_par_rev&#39;vc" expl="VC for ancilla_free_par_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ancilla_free_par_rev&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="ancilla_free_par_rev&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="ancilla_free&#39;def1" arg2="(Parallel c1 c2)">
    <goal name="ancilla_free_par_rev&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="2.062510"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ancilla_free_cont_seq&#39;vc" expl="VC for ancilla_free_cont_seq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ancilla_free_cont_seq&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ancilla_free_cont_seq&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="2.583938" steps="574315"/></proof>
   </goal>
   <goal name="ancilla_free_cont_seq&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="2.604878" steps="574469"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ancilla_free_cont_hadamard&#39;vc" expl="VC for ancilla_free_cont_hadamard" proved="true">
 <proof prover="6"><result status="valid" time="2.850226" steps="569596"/></proof>
 </goal>
 <goal name="ancilla_free_cont_rz&#39;vc" expl="VC for ancilla_free_cont_rz" proved="true">
 <proof prover="6"><result status="valid" time="2.864012" steps="566945"/></proof>
 </goal>
 <goal name="ancilla_free_cont_rx&#39;vc" expl="VC for ancilla_free_cont_rx" proved="true">
 <proof prover="6"><result status="valid" time="2.790687" steps="567402"/></proof>
 </goal>
 <goal name="ancilla_free_cont_ry&#39;vc" expl="VC for ancilla_free_cont_ry" proved="true">
 <proof prover="6"><result status="valid" time="2.699601" steps="567724"/></proof>
 </goal>
 <goal name="ancilla_free_toffoli_decomp&#39;vc" expl="VC for ancilla_free_toffoli_decomp" proved="true">
 <proof prover="6" timelimit="10" memlimit="4000"><result status="valid" time="2.640406" steps="570491"/></proof>
 </goal>
 <goal name="ancilla_free_fredkin_decomp&#39;vc" expl="VC for ancilla_free_fredkin_decomp" proved="true">
 <proof prover="6" timelimit="10" memlimit="4000"><result status="valid" time="2.713041" steps="571464"/></proof>
 </goal>
 <goal name="ancilla_free_swap_decomp&#39;vc" expl="VC for ancilla_free_swap_decomp" proved="true">
 <proof prover="6" timelimit="10" memlimit="4000"><result status="valid" time="2.660778" steps="572262"/></proof>
 </goal>
 <goal name="ancilla_free_cont_&#39;vc" expl="VC for ancilla_free_cont_" proved="true">
 <proof prover="6" timelimit="10" memlimit="4000"><result status="valid" time="2.783549" steps="574821"/></proof>
 </goal>
 <goal name="ancilla_free_cont_phase&#39;vc" expl="VC for ancilla_free_cont_phase" proved="true">
 <proof prover="6" timelimit="10" memlimit="4000"><result status="valid" time="2.748188" steps="572319"/></proof>
 </goal>
 <goal name="ancilla_free_cnot&#39;vc" expl="VC for ancilla_free_cnot" proved="true">
 <proof prover="0"><result status="valid" time="2.009498"/></proof>
 </goal>
 <goal name="ancilla_free_cont_rzp&#39;vc" expl="VC for ancilla_free_cont_rzp" proved="true">
 <proof prover="6"><result status="valid" time="2.802884" steps="572435"/></proof>
 </goal>
</theory>
<theory name="Cont_depth_pre" proved="true">
 <goal name="cont_depth&#39;vc" expl="VC for cont_depth" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cont_depth&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="3.678931"/></proof>
  </goal>
  <goal name="cont_depth&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.620836"/></proof>
  </goal>
  <goal name="cont_depth&#39;vc.2" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="3.646846"/></proof>
  </goal>
  <goal name="cont_depth&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="3.579827"/></proof>
  </goal>
  <goal name="cont_depth&#39;vc.4" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="3.834226"/></proof>
  </goal>
  <goal name="cont_depth&#39;vc.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.721707"/></proof>
  </goal>
  <goal name="cont_depth&#39;vc.6" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="4.777012"/></proof>
  </goal>
  <goal name="cont_depth&#39;vc.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.900463"/></proof>
  </goal>
  <goal name="cont_depth&#39;vc.8" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="4.572157"/></proof>
  </goal>
  <goal name="cont_depth&#39;vc.9" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="3.072645"/></proof>
  </goal>
  <goal name="cont_depth&#39;vc.10" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="4.189663"/></proof>
  </goal>
  <goal name="cont_depth&#39;vc.11" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="3.081828"/></proof>
  </goal>
  <goal name="cont_depth&#39;vc.12" expl="variant decrease" proved="true">
  <proof prover="6"><result status="valid" time="1.003208" steps="387117"/></proof>
  </goal>
  <goal name="cont_depth&#39;vc.13" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.939927"/></proof>
  </goal>
  <goal name="cont_depth&#39;vc.14" expl="postcondition" proved="true">
  <transf name="destruct_rec" proved="true" arg1="H">
   <goal name="cont_depth&#39;vc.14.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="1.485253" steps="420292"/></proof>
   </goal>
   <goal name="cont_depth&#39;vc.14.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="3.740146" steps="578711"/></proof>
   </goal>
   <goal name="cont_depth&#39;vc.14.2" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="3.663682" steps="578698"/></proof>
   </goal>
   <goal name="cont_depth&#39;vc.14.3" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.879192" steps="370733"/></proof>
   </goal>
   <goal name="cont_depth&#39;vc.14.4" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.901899" steps="370731"/></proof>
   </goal>
   <goal name="cont_depth&#39;vc.14.5" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.988503" steps="382623"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cont_depth_cont&#39;vc" expl="VC for cont_depth_cont" proved="true">
 <proof prover="6"><result status="valid" time="2.995760" steps="575139"/></proof>
 </goal>
 <goal name="cont_depth_seq&#39;vc" expl="VC for cont_depth_seq" proved="true">
 <proof prover="6"><result status="valid" time="2.981296" steps="579073"/></proof>
 </goal>
 <goal name="cont_depth_par&#39;vc" expl="VC for cont_depth_par" proved="true">
 <proof prover="6"><result status="valid" time="2.927484" steps="576531"/></proof>
 </goal>
 <goal name="cont_depth_place&#39;vc" expl="VC for cont_depth_place" proved="true">
 <proof prover="6"><result status="valid" time="2.959724" steps="575164"/></proof>
 </goal>
 <goal name="cont_depth_ancilla&#39;vc" expl="VC for cont_depth_ancilla" proved="true">
 <proof prover="6"><result status="valid" time="2.627195" steps="576095"/></proof>
 </goal>
 <goal name="cont_depth_cont_place&#39;vc" expl="VC for cont_depth_cont_place" proved="true">
 <proof prover="6"><result status="valid" time="3.539889" steps="685263"/></proof>
 </goal>
 <goal name="cont_depth_cont_place1&#39;vc" expl="VC for cont_depth_cont_place1" proved="true">
 <proof prover="6"><result status="valid" time="4.365135" steps="686209"/></proof>
 </goal>
 <goal name="cont_depth_cont_place2&#39;vc" expl="VC for cont_depth_cont_place2" proved="true">
 <proof prover="6"><result status="valid" time="2.960816" steps="582106"/></proof>
 </goal>
 <goal name="cont_depth_cont_seq&#39;vc" expl="VC for cont_depth_cont_seq" proved="true">
 <proof prover="6"><result status="valid" time="4.675196" steps="702257"/></proof>
 </goal>
 <goal name="cont_depth_cont_seq1&#39;vc" expl="VC for cont_depth_cont_seq1" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cont_depth_cont_seq1&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(cont_depth  (Sequence c1 c2) &lt;=&#39; 0)">
   <goal name="cont_depth_cont_seq1&#39;vc.0.0" expl="asserted formula" proved="true">
   <proof prover="6"><result status="valid" time="3.889399" steps="583750"/></proof>
   </goal>
   <goal name="cont_depth_cont_seq1&#39;vc.0.1" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="cont_depth_seq" arg2="in" arg3="h">
    <goal name="cont_depth_cont_seq1&#39;vc.0.1.0" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="3.805095" steps="586137"/></proof>
    </goal>
    <goal name="cont_depth_cont_seq1&#39;vc.0.1.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.918041" steps="372011"/></proof>
    </goal>
    <goal name="cont_depth_cont_seq1&#39;vc.0.1.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.942195" steps="372011"/></proof>
    </goal>
    <goal name="cont_depth_cont_seq1&#39;vc.0.1.3" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.926257" steps="372011"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cont_depth_cont_seq2&#39;vc" expl="VC for cont_depth_cont_seq2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cont_depth_cont_seq2&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="cont_depth_cont_seq2&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="3.570138" steps="685364"/></proof>
   </goal>
   <goal name="cont_depth_cont_seq2&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="6" memlimit="2000"><result status="valid" time="4.372045" steps="608412"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cont_depth_con1&#39;vc" expl="VC for cont_depth_con1" proved="true">
 <proof prover="6"><result status="valid" time="2.797589" steps="580805"/></proof>
 </goal>
 <goal name="cont_depth_zero&#39;vc" expl="VC for cont_depth_zero" proved="true">
 <proof prover="6"><result status="valid" time="2.861196" steps="579182"/></proof>
 </goal>
 <goal name="cont_depth_cnot&#39;vc" expl="VC for cont_depth_cnot" proved="true">
 <proof prover="0"><result status="valid" time="1.953989"/></proof>
 </goal>
 <goal name="cont_depth_ry&#39;vc" expl="VC for cont_depth_ry" proved="true">
 <proof prover="0"><result status="valid" time="2.014027"/></proof>
 </goal>
</theory>
<theory name="Lemmas_correct_circuit_pre" proved="true">
 <goal name="correct_cont&#39;vc" expl="VC for correct_cont" proved="true">
 <proof prover="6"><result status="valid" time="2.788852" steps="575210"/></proof>
 </goal>
 <goal name="correct_seq&#39;vc" expl="VC for correct_seq" proved="true">
 <proof prover="6"><result status="valid" time="1.176164" steps="420276"/></proof>
 </goal>
 <goal name="correct_par&#39;vc" expl="VC for correct_par" proved="true">
 <proof prover="6"><result status="valid" time="1.191150" steps="420313"/></proof>
 </goal>
 <goal name="correct_place&#39;vc" expl="VC for correct_place" proved="true">
 <proof prover="6"><result status="valid" time="2.727030" steps="575081"/></proof>
 </goal>
 <goal name="correct_cont_rev&#39;vc" expl="VC for correct_cont_rev" proved="true">
 <proof prover="6"><result status="valid" time="2.874704" steps="575837"/></proof>
 </goal>
 <goal name="correct_toffoli&#39;vc" expl="VC for correct_toffoli" proved="true">
 <proof prover="6"><result status="valid" time="3.011130" steps="581071"/></proof>
 </goal>
 <goal name="correct_fredkin&#39;vc" expl="VC for correct_fredkin" proved="true">
 <proof prover="6"><result status="valid" time="3.028506" steps="580955"/></proof>
 </goal>
 <goal name="correct_cnot&#39;vc" expl="VC for correct_cnot" proved="true">
 <proof prover="6"><result status="valid" time="3.013427" steps="580876"/></proof>
 </goal>
 <goal name="correct_swap&#39;vc" expl="VC for correct_swap" proved="true">
 <proof prover="6"><result status="valid" time="3.091945" steps="580761"/></proof>
 </goal>
 <goal name="correct_toffoli_rev&#39;vc" expl="VC for correct_toffoli_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="correct_toffoli_rev&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="3.890935" steps="575666"/></proof>
  </goal>
  <goal name="correct_toffoli_rev&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="3.966150" steps="575775"/></proof>
  </goal>
  <goal name="correct_toffoli_rev&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="3.787110" steps="575813"/></proof>
  </goal>
  <goal name="correct_toffoli_rev&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="3.766267" steps="575372"/></proof>
  </goal>
  <goal name="correct_toffoli_rev&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="3.749103" steps="575489"/></proof>
  </goal>
  <goal name="correct_toffoli_rev&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="3.851347" steps="575510"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="correct_fredkin_rev&#39;vc" expl="VC for correct_fredkin_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="correct_fredkin_rev&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="3.749129" steps="575770"/></proof>
  </goal>
  <goal name="correct_fredkin_rev&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="3.814554" steps="575880"/></proof>
  </goal>
  <goal name="correct_fredkin_rev&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="3.792600" steps="575906"/></proof>
  </goal>
  <goal name="correct_fredkin_rev&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="3.914384" steps="575570"/></proof>
  </goal>
  <goal name="correct_fredkin_rev&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="3.844541" steps="575646"/></proof>
  </goal>
  <goal name="correct_fredkin_rev&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="3.837531" steps="575654"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="correct_cnot_rev&#39;vc" expl="VC for correct_cnot_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="correct_cnot_rev&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="3.815803" steps="575999"/></proof>
  </goal>
  <goal name="correct_cnot_rev&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="3.786636" steps="576059"/></proof>
  </goal>
  <goal name="correct_cnot_rev&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="3.842052" steps="575643"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="correct_swap_rev&#39;vc" expl="VC for correct_swap_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="correct_swap_rev&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="3.785941" steps="575836"/></proof>
  </goal>
  <goal name="correct_swap_rev&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="3.733508" steps="575899"/></proof>
  </goal>
  <goal name="correct_swap_rev&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="3.608721" steps="575612"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Place_atomic_def" proved="true">
 <goal name="skip_atomic&#39;vc" expl="VC for skip_atomic" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="skip_atomic&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(build_correct c)">
   <goal name="skip_atomic&#39;vc.0.0" expl="asserted formula" proved="true">
   <proof prover="6"><result status="valid" time="3.448898" steps="577884"/></proof>
   </goal>
   <goal name="skip_atomic&#39;vc.0.1" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_ancilla_free">
    <goal name="skip_atomic&#39;vc.0.1.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.865782" steps="372227"/></proof>
    </goal>
    <goal name="skip_atomic&#39;vc.0.1.1" expl="apply premises" proved="true">
    <transf name="destruct_rec" proved="true" arg1="H1">
     <goal name="skip_atomic&#39;vc.0.1.1.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.813912" steps="371666"/></proof>
     </goal>
     <goal name="skip_atomic&#39;vc.0.1.1.1" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.812385" steps="371666"/></proof>
     </goal>
     <goal name="skip_atomic&#39;vc.0.1.1.2" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.768173" steps="371668"/></proof>
     </goal>
     <goal name="skip_atomic&#39;vc.0.1.1.3" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.792680" steps="371670"/></proof>
     </goal>
     <goal name="skip_atomic&#39;vc.0.1.1.4" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.812542" steps="371666"/></proof>
     </goal>
     <goal name="skip_atomic&#39;vc.0.1.1.5" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="1.430378" steps="428847"/></proof>
     </goal>
     <goal name="skip_atomic&#39;vc.0.1.1.6" expl="apply premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="skip_atomic&#39;vc.0.1.1.6.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="2.217026" steps="479595"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="skip_atomic&#39;vc.0.1.1.7" expl="apply premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="skip_atomic&#39;vc.0.1.1.7.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="2.233895" steps="479595"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="skip_atomic&#39;vc.0.1.1.8" expl="apply premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="skip_atomic&#39;vc.0.1.1.8.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="2.224666" steps="479595"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="skip_atomic&#39;vc.0.1.1.9" expl="apply premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="skip_atomic&#39;vc.0.1.1.9.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="2.220467" steps="479595"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="skip_atomic&#39;vc.0.1.1.10" expl="apply premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="skip_atomic&#39;vc.0.1.1.10.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="2.328571" steps="479595"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="skip_atomic&#39;vc.0.1.1.11" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="1.467376" steps="428851"/></proof>
     </goal>
     <goal name="skip_atomic&#39;vc.0.1.1.12" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="1.560445" steps="428851"/></proof>
     </goal>
     <goal name="skip_atomic&#39;vc.0.1.1.13" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="1.620754" steps="428851"/></proof>
     </goal>
     <goal name="skip_atomic&#39;vc.0.1.1.14" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="1.546094" steps="428851"/></proof>
     </goal>
     <goal name="skip_atomic&#39;vc.0.1.1.15" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="1.492750" steps="428851"/></proof>
     </goal>
     <goal name="skip_atomic&#39;vc.0.1.1.16" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="1.475920" steps="428851"/></proof>
     </goal>
     <goal name="skip_atomic&#39;vc.0.1.1.17" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="1.483048" steps="428851"/></proof>
     </goal>
     <goal name="skip_atomic&#39;vc.0.1.1.18" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="1.573732" steps="428851"/></proof>
     </goal>
     <goal name="skip_atomic&#39;vc.0.1.1.19" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="1.544640" steps="428851"/></proof>
     </goal>
     <goal name="skip_atomic&#39;vc.0.1.1.20" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="1.573655" steps="428851"/></proof>
     </goal>
     <goal name="skip_atomic&#39;vc.0.1.1.21" expl="apply premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="skip_atomic&#39;vc.0.1.1.21.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="2.219419" steps="479599"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="skip_atomic&#39;vc.0.1.1.22" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="3.066711" steps="576707"/></proof>
     </goal>
     <goal name="skip_atomic&#39;vc.0.1.1.23" expl="apply premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="skip_atomic&#39;vc.0.1.1.23.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="2.234966" steps="479601"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="skip_atomic&#39;vc.0.1.1.24" expl="apply premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="skip_atomic&#39;vc.0.1.1.24.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="2.328446" steps="479601"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="skip_atomic&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="2.563504" steps="579204"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="place_free&#39;vc" expl="VC for place_free" proved="true">
 <proof prover="6"><result status="valid" time="3.406404" steps="675569"/></proof>
 </goal>
</theory>
</file>
</why3session>
