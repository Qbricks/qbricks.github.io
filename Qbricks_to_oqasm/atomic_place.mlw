(**************************************************************************)
(*  This file is part of QBRICKS.                                         *)
(*                                                                        *)
(*  Copyright (C) 2020-2022                                               *)
(*    CEA (Commissariat à l'énergie atomique et aux énergies              *)
(*         alternatives)                                                  *)
(*    Université Paris-Saclay                                             *)
(*                                                                        *)
(*  you can redistribute it and/or modify it under the terms of the GNU   *)
(*  Lesser General Public License as published by the Free Software       *)
(*  Foundation, version 2.1.                                              *)
(*                                                                        *)
(*  It is distributed in the hope that it will be useful,                 *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of        *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *)
(*  GNU Lesser General Public License for more details.                   *)
(*                                                                        *)
(*  See the GNU Lesser General Public License version 2.1                 *)
(*  for more details (enclosed in the file licenses/LGPLv2.1).            *)
(*                                                                        *)
(**************************************************************************)

module Atomic_place

  use int.Int
  use wired_circuits.Circuit_c
  use wired_circuits.Qbricks_prim
  use circuits_equiv_pre.Circuit_equivalence_impl
  use circuits_equiv_pre.Gate_decomp
  use reversion.Circuit_reverse
  use commuting_lemmas.Ancilla_pre
  use commuting_lemmas.Lemmas_correct_circuit_pre
  use parallel_delete.Parallel_del
  use commuting_lemmas.Place_atomic_def
  use ternary_gates_delete.Ternary_gates_del

  (* TODO: factorizes specifications with predicates *)

  let rec predicate atomic_place (c: wired_circuit)
      requires{correct c}
      ensures{skip_atomic c -> result}
    =
    match  c with
    | Parallel c d -> atomic_place c && atomic_place d
    | Sequence c d -> atomic_place c && atomic_place d
    | Place c _ _ -> skip_atomic c
    | Cont c _ _ _ -> atomic_place c 
    | Ancillas _ _ -> false
    |  Skip |  Phase _ | Rx _ | Ry _ | Rz _ | Rzp _ | Hadamard  |  S | T | X | Y | Z 
    | Bricks_Cnot | Bricks_Toffoli | Bricks_Fredkin| Bricks_Swap
    | Swap _ _ _ | Cnot _ _ _ | Toffoli _ _ _ _ | Fredkin _ _ _ _
    -> true
    end
     
  let rec function placed_atomic (c: wired_circuit) (k n:int)
      requires{0 <= k }
      requires{k + width_pre c <= n}
      requires{correct c}
      ensures{correct result}
      ensures{result <=> Place c k n}
      ensures{atomic_place result}
      ensures{ternary_gates_free c -> ternary_gates_free result}
      requires{parallel_free c}
      requires{ancilla_free c}
      ensures{ancilla_free result}
      ensures{parallel_free result}
    =
    match  c with
    | Sequence c1 c2 -> Sequence (placed_atomic c1 k n) (placed_atomic c2 k n) 
    | Place c1 k1 _ -> placed_atomic c1 (k+k1) n
    | Cont c1 co t _ -> Cont (placed_atomic c1 0 (width_pre c1)) (co+k) (t+k) n
    | _ -> Place c k n
    end

  let rec function place_atomic (c: wired_circuit)
      requires{correct c}
      requires{parallel_free c}
      requires{ancilla_free c}
      ensures{correct result}
      ensures{result <=> c}
      ensures{atomic_place result}
      ensures{ternary_gates_free c -> ternary_gates_free result}
      ensures{parallel_free result}
      ensures{ancilla_free result}
    =
    match  c with
    | Sequence c1 c2 -> Sequence (place_atomic c1) (place_atomic c2) 
    | Ancillas c1 i -> Ancillas (place_atomic c1 ) i 
    | Place c1 k n -> placed_atomic c1 k n
    | Cont c1 c t n -> Cont (place_atomic c1) c t n
    | _ -> c
    end

  let lemma atomic_place_cont (c: wired_circuit) (co ta n: int)
      requires{correct c}
      requires{0 <= co /\ co < n}
      requires{0 <= ta /\ ta <= (n - width_pre c)}
      requires{ta <= co -> (ta + width_pre c) <= co}
      requires{atomic_place c}
      ensures{atomic_place (Cont c co ta n)}
    = ()

  let lemma atomic_place_seq (c1 c2: wired_circuit)
      requires{correct c1}
      requires{correct c2}
      requires{width_pre c1 = width_pre c2}
      requires{atomic_place c1}
      requires{atomic_place c2}
      ensures{atomic_place (Sequence c1 c2)}
    = ()

  let lemma atomic_place_par (c1 c2: wired_circuit)
      requires{correct c1}
      requires{correct c2}
      requires{atomic_place c1}
      requires{atomic_place c2}
      ensures{atomic_place (Parallel c1 c2)}
    = ()

  let lemma atomic_place_place (c: wired_circuit) (ta n: int)
      requires{correct c}
      requires{0 <= ta <= n - 1}
      requires{width_pre c + ta <= n}
      requires{skip_atomic c}
      ensures{atomic_place (Place c ta n)}
    = ()
     
end
