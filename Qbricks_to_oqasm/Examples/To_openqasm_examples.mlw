(**************************************************************************)
(*  This file is part of QBRICKS.                                         *)
(*                                                                        *)
(*  Copyright (C) 2020-2022                                               *)
(*    CEA (Commissariat à l'énergie atomique et aux énergies              *)
(*         alternatives)                                                  *)
(*    Université Paris-Saclay                                             *)
(*                                                                        *)
(*  you can redistribute it and/or modify it under the terms of the GNU   *)
(*  Lesser General Public License as published by the Free Software       *)
(*  Foundation, version 2.1.                                              *)
(*                                                                        *)
(*  It is distributed in the hope that it will be useful,                 *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of        *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *)
(*  GNU Lesser General Public License for more details.                   *)
(*                                                                        *)
(*  See the GNU Lesser General Public License version 2.1                 *)
(*  for more details (enclosed in the file licenses/LGPLv2.1).            *)
(*                                                                        *)
(**************************************************************************)

module Test_oq2

  (* use int.Int *)
  use wired_circuits.Circuit_c
  use draw_circuits.Draw
  use transpilation.To_OqenQASM_2
  (* use circuits_equiv.Gate_decomp *)
  (*use transpilation.Transpilation*)
  (* use wired_circuits.Circuit_c *)
  use wired_circuits.Qbricks_prim
  use export qft_test.Qft
  use modular_adder.Adder
  use modular_multiplier.Multiplier
  use shor_inst.Inst
  (* use circuits_equiv.Circuit_equivalence_impl *)
  (* use shor_circuit.Shor *)
  (* use grover.Diffusion_operator *)
  (* use deutsch-jozsa.Deutsch_jozsa *)
  (* use qpe.Phase_estim *)
  (* use translation.Program as P
  use translation_grover.Grover as G
  use translation_grovercz.Grover_cz as GCZ
  use translation_dj.Dj as DJ *)

  let run() : string =
  
  (* string_oq (Place Skip 0 1) *)
  (* string_oq (Place (Sequence (Rzp 1) (Rzp 2)) 0 1) *)
  (* string_oq (Toffoli 0 1 2 3) *)
  (* string_oq (Cnot 2 3 4) *)
  (* string_oq (Parallel (Place Hadamard 1 3) (Cnot 2 3 4)) *)
  (* string_oq (Sequence (Parallel (Place Hadamard 1 3) (Cnot 2 3 4)) (Toffoli 2 3 5 7)) *)
  (* string_oq (Place (Sequence (Sequence (Toffoli 0 1 2 3) (Cnot 1 2 3)) (Cnot 0 2 3)) 1 4) *)
  (* string_oq (Sequence (Cont (Place Hadamard 0 1) 0 1 2) (Place (Ry 1) 0 2)) *)
  (* string_oq (Cont Bricks_Toffoli 0 1 4) *)
  (* string_oq (Cont (Cont (Cont (Sequence (Sequence Hadamard Hadamard) Hadamard) 0 1 2) 0 1 3) 0 1 4) *)
  (* string_oq (Cont (Sequence (Cnot 1 2 3) (Cnot 1 2 3)) 0 1 4) *)
  (* string_oq (Cont (Cont Hadamard 0 1 2) 0 1 3) *)
  (* state bell *)
  (* string_oq(Sequence (Place Hadamard 0 2) (Cnot 0 1 2)) *)
  (* string_oq (Cont (Cont (Fredkin 0 1 2 3) 0 1 4) 0 1 5) *)
  (* string_oq (Parallel (Parallel (Cnot 0 2 3) (Fredkin 0 2 3 4)) Hadamard) *)

  
  (* QFT 4 *)
  (* string_oq (cont ((place xx 2 4) -- (place xx 0 4) -- (place hadamard 0 4) --
    (cont (rzp 2) 0 1 4) -- (place hadamard 1 4) -- (cont (rzp 3) 0 2 4) --
    (cont (rzp 2) 1 2 4) -- (place hadamard 2 4) -- (cont (rzp 4) 0 3 4) --
    (cont (rzp 3) 1 3 4) -- (cont (rzp 2) 2 3 4) -- (place hadamard 3 4)) 0 1 5) *)
    (* string_oq (qft 4) *)
    (* string_oq (cont (qft 4) 0 1 5) *)
    string_oq shor_circuit


  (* TODO : to fix  *)
  (* string_oq (pre (shor_circ 3 2 4)) *)
  (*string_oq (qpe 2)*)
  (* string_oq (pre (grover_run 2)) *)
  

  (* For Tomas *)
  (* string_oq (P.qft 3 3) *)
  (* OK 5-8-22 *)
  (*string_oq (GCZ.grover_cz 2 1 1 3)*)
  (* OK 8-8-22 tomas *)
  (* string_oq (DJ.dj 4 4) *)
  (* OK 8-8-22 tomas*)
  
end


