(***************************************************************************)
(***  This file is part of QBRICKS.                                         *)
(***                                                                        *)
(***  Copyright (C) 2020-2022                                               *)
(***    CEA (Commissariat à l'énergie atomique et aux énergies              *)
(***         alternatives)                                                  *)
(***    Université Paris-Saclay                                             *)
(***                                                                        *)
(***  you can redistribute it and/or modify it under the terms of the GNU   *)
(***  Lesser General Public License as published by the Free Software       *)
(***  Foundation, version 2.1.                                              *)
(***                                                                        *)
(***  It is distributed in the hope that it will be useful,                 *)
(***  but WITHOUT ANY WARRANTY; without even the implied warranty of        *)
(***  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *)
(***  GNU Lesser General Public License for more details.                   *)
(***                                                                        *)
(***  See the GNU Lesser General Public License version 2.1                 *)
(***  for more details (enclosed in the file licenses/LGPLv2.1).            *)
(***                                                                        *)
(***************************************************************************)


(**{1 Tool box} *)
(** This file provides a minimal toolbox of object and spec constructs, together with lemmas at use for adressing the exercise in file tuto.mlw. Functions and lemmas below are simple extraction from Qbricks library. *)

module Tool_box_Intf
(** This module is an interface, providing all the specifications at use for another module calling its realization. Note that is does not contain any dependency, so as to limitate the local context to the minimum required when using the library.*)

use int.Int

type circuit
type angle
val  function power (e i:int)  : int
   
(* mult_eq *)
(** "ind_isum" is a big integer addition operator, summing integers (f k) for k varying from i to j.*)
val   function ind_isum  (f :int -> int) (i:int) (j:int):int

(** term to term equality in sums*)
val  lemma ind_isum_eq (f g : int -> int) (i i1 j j1:int)
       requires{forall k : int. i <= k < j -> f k = g k}
       requires{i = i1}
       requires{j = j1}
       ensures{ ind_isum  f i j = ind_isum   g i1 j1}


(** empty sum of integer*)
val lemma ind_isum_empty (f :int -> int) (i:int) (j:int) 
       requires{j <= i}
       ensures{ ind_isum  f i j =  0}

(** integer sum right extension*)
val lemma ind_isum_re (f :int -> int) (i:int) (j:int)
       requires{i < j}
       ensures{ind_isum f i j = ind_isum f i (j-1) + f (j-1)}

(** integer sum left extension*)
val lemma ind_isum_plus_one (f :int -> int) (i:int) (j:int) 
       requires{i < j}
       ensures{ ind_isum  f i j =  (f i) + ( ind_isum  f (i+1) j)}


(** {2 Bit vectors } *)

type bitvec

(** An integer function is "binary_l n" ('binary up to n') iff it sends any  k st 0<=k<n to either "0" or "1". *)
predicate binary_l (x: int-> int)( n :int)

axiom binary_def: forall x n. binary_l x n <-> (forall k. 0<= k < n -> 0<= x k<2)


(** The "binary_l" property is stable by prefixing.*)
val lemma binary_prefix (x: int-> int)( n n':int)
       requires{0<=n'<=n}
       requires{binary_l x n}
       ensures{binary_l x n'}

(** Any function is 0-binary_l.*)
val lemma binary_init (x: int-> int)( n :int)
       requires{n =0}
       ensures{binary_l x n}


(** "make_bv" builds a bit vector of size s from an integer function that is binary up to "s". *)
val function make_bv (f:int->int) (s:int): (bitvec)
       requires{binary_l f s}
       requires{s>=0}
       (* ensures{length result = s} *)
       (* ensures{forall i:int.  0<=i < s ->  getbv result i =  f i} *)
       (* ensures{forall i:int. not ( 0<=i < s) ->  getbv result i = 0} *)

(** "bv_inversion" reverses a bit vector*)
val  function bv_inversion (bv:bitvec):bitvec
       (* ensures{length result = length bv} *)

(** Casting function from bit vector to integer.*)
val  function bv_to_int (_: bitvec): int
       (* ensures{result = ind_isum (fun k -> (getbv bv k) * (power 2 ((length bv -1) -k))) 0 (length bv) } *)
       ensures{0<= result}                 

(** boolean style naming for modulo 2 addition*)
val function xor (a b :int):int
       ensures{0<=a<2 -> 0<= b < 2 -> result = a *(1-b) + b *(1-a)}

(** xor identity*)
val lemma xor_eq (a b a' b':int)
       requires{a=a'}
       requires{b=b'}
       ensures{xor a  b= xor a'  b'}

(** {2 Angle type description} *)
(** In Qbricks, phase parameters are described in a dedicated 'angle' type, described in math_lib/unit_circle/Angle. *)


 (* type angle = Angle.angle *)

(** the angle of measure 0 is named "ang_zero"*)
val constant  ang_zero: angle
 
(** Given two integer parameters k and n, one can build the angle "k /./ n", of measure 2pi(k/2^n). *)
val function (/./) (k:int) (n:int) :angle

(** Angle addition: declaration. *)
val function (+.+) (k:angle) (n:angle) :angle


axiom ang_null : forall k. k /./0 = ang_zero

(** Function "+.+" represent an angle addition*)
val lemma ang_add_eq (d1 d2 e1 e2:angle)
       requires{d1 = e1}
       requires{d2 = e2}
       ensures{d1 +.+ d2 = e1 +.+ e2}

(** Addition decomposition for constructor /./. *)
val lemma int_to_ang_add_rev (i j n:int)
       requires{0<= n}
       ensures{(i + j) /./ n =  (i /./ n)+.+ (j /./ n) }

(** Equality accross "/./" *)
val lemma int_to_ang_eq (k1 k2 n1 n2: int)
        requires{k1=k2}
        requires{n1=n2}
        ensures{k1 /./ n1 = k2 /./ n2}

(** "ang_zero" is neutral for angle addition*)
val lemma ang_add_zero (d' d:angle)
        requires{d' = ang_zero}
        ensures{d +.+  d' = d}
 
(** big angle addition operator: declaration*)
val  function ang_sum (f : int -> angle) (i j:int):angle
 
(** big angle addition operator: right extension*)
val  lemma ang_sum_re  (f : int -> angle) (i j : int)
          requires{i +1 <= j }
          ensures  { (ang_sum f i j) =  ( (ang_sum f i (j-1)) +.+ (f (j-1))) }

(** big angle addition operator: left extension*)
val lemma ang_sum_plus_one (f :int -> angle) (i:int) (j:int) 
      requires{i< j}
      ensures{ ang_sum f i j =  (f i)+.+(ang_sum f (i+1) j)}

(** big angle addition operator: equality*)
val lemma ang_sum_eq  (f g : int -> angle) (i j i' j':int)
      requires{i <= j}
      requires{i = i'}
      requires{j = j'}
      requires{forall k : int. i <= k < j -> f k = g k}
      ensures{ ang_sum  f i j = ang_sum  g i' j'}

(** empty sum of angles*)
val lemma ang_sum_empty (f :int -> angle) (i:int) (j:int) 
       requires{j = i}
       ensures{ang_sum  f i j =  ang_zero}

(** sum of angles to sum of integers*)
val lemma ang_sum_to_ind_isum (f: int-> angle) ( g: int-> int) (n i j:int)
          requires{0<=n}
          requires{i < j}
	  requires{forall k. i<= k < j-> f k = (g k) /./ n}
          ensures{ang_sum f i j = (ind_isum g i j) /./ n}
  

(** {2 Quantum circuits constructors} *)
(** Here we provide some basic circuit constructors, sufficient for approximating any unitary operation with arbitrary precision (approximately universal set of gates). Each circuit is specified with parameters sufficient for building a path sum (its "width" -- the number of qubits it adresses; its "range" -- the base 2 logarithm of the number of path, its "basis_ket" function -- the standard basis vector handling each path; its "ang_ind" term -- the phase polynomial, of type angle). Note that, in addition, the specifications below hold a 'size' parameter -- specifying a 'weighted' gate count  enabling parametrized resource estimation. The implementation reffered to here holds a case study weight function: any elementary gate has weight 1 and a controlled Z rotation has weight 'cont_size', a non-instanciated integer parameter.  *)

(** Path-sum component declaration.*)
 function range : circuit ->int
 function basis_ket : circuit -> (int->int) -> (int->int) -> int->int
 function ang_ind : circuit -> (int->int) -> (int->int) -> angle
 function width : circuit ->int

(** As a generic quantum circuit invariant, the "basis_ket" function preserves binaricity up to the width of the circuit at stake.*)
val lemma binary_basis_ket (d:circuit)  (x y:int->int) (n :int)
        requires{width d = n}
        requires{binary_l x n}
        requires{binary_l y (range d)}
        ensures{binary_l (basis_ket d x y ) n}

(** Constructor for the Hadamard constant *)
val constant hadamard : circuit


(** Hadamard constant path-sum axioms *)
axiom range_had:range hadamard = 1
axiom width_had : width hadamard = 1
axiom basis_ket_had: forall x y: int->int. forall i:int. basis_ket hadamard x y i = y i
axiom ang_ind_had:forall x y: int->int.  ang_ind hadamard x y  = (x 0 *y 0)/./1 

(** Constructor for a 'skip' (empty) circuit of variable width, potentially useful for initializing loops. *)
val function m_skip (k:int): circuit
        requires{0<k}
        ensures{range result = 0}
        ensures{width result = k}
        ensures{forall x y: int->int. forall i. basis_ket result x y i = x i}
        ensures{forall x y: int->int. ang_ind result x y  =  1 /./ 0}
        ensures{forall x y: int->int. forall k:int. ang_ind result x y  =  0 /./ k}

(** Constructor for gate/subcircuit application. *)
val function place (c:circuit) (k n :int):circuit
        requires{0<=k}
        requires{ width c+ k <=n}
        ensures{width result = n}
        ensures{range result = range c}
        ensures{forall x y: int->int. forall i:int. k<= i < k + width c ->  basis_ket result x y i =  basis_ket c (fun j -> x (j+k)) y (i-k)}
        ensures{forall x y: int->int. forall i:int. i < k ->  basis_ket result x y i = x i}
        ensures{forall x y: int->int. forall i:int. k +width c <= i -> basis_ket result x y i =  x i}
        ensures{forall x y: int->int. ang_ind result x y  = ang_ind c (fun j -> x (j+k)) y}

(** Sequencing*)
val function (--) ( d e:circuit) :circuit
        requires{width d = width e}
        ensures{width result = width d}
        ensures{range result = range d + range e}
        ensures{forall x y: int->int. forall i:int.
		       basis_ket result x y i =
		       basis_ket e (basis_ket d x y) (fun k -> y (k+ range d)) i}
       ensures{forall x y: int->int. ang_ind result x y  =
                       (ang_ind d x y) +.+ (ang_ind e (basis_ket d x y)  (fun k -> y (k+ range d)))}

(** A generic controlled not gate, bitflipping its target qbit when its control qubit holds value 1. Note that it is provided postcondition pre-interpreting a left sequential composition.*)
val function cnot (co t n:int) : circuit
         requires{0<= co<n}
         requires{0<= t<n}
         requires{t<>co}
         ensures{range result = 0}
         ensures{width result = n}
         ensures{forall x y : int->int. forall i: int.
	 	i <> t ->basis_ket result x y i =  x i}
         ensures{forall x y : int->int. forall i: int.
	 	i = t  -> binary_l x n -> basis_ket result x y i = xor  (x co) (x t) }
         ensures{forall  x y. ang_ind result x y  = ang_zero}
         ensures{forall d: circuit. forall  x y i.
	 	width d = n -> i <> t -> basis_ket (d -- result) x y i =  basis_ket d x y i}
         ensures{forall d: circuit. forall  x y i.
	 	binary_l x n ->binary_l y (range d) ->  width d = n ->   i = t  ->
			 basis_ket (d --result) x y i = xor  ( basis_ket d x y co) ( basis_ket d x y t) }
         ensures{forall d: circuit. forall x y:int->int. 
	 	width d = n ->  ang_ind (d--result)  x y = ang_ind d x y }


(** {2 Proof accelerating material} *)

(** In this section we provide further material, built on the definition above, and enabling further automation in specifications proofs*)

(** {3 Remarkable fragments} *)

(** Upon the algebraic constrcution, certain fragments hold specific properties, stable by composition and enabling a simplified treatment of the path-sum analysis.
We introduce the "diagonal" and the "flat_mute" fragments.*)


(** {4 Diagonal fragment} *)


(** A diagonal circuit does not introduce any superposition nor boolean operation.*)
predicate diag_circ (d:circuit)

val lemma diag_circ_basis_ket (d:circuit) (x y:int->int) 
    requires{diag_circ d}
    ensures{basis_ket d x y  = x }
 

(** Simplified specification for the sequence of two diagonal circuits.*)
val function seq_diag ( d e:circuit) :circuit
               requires{width d = width e}
               requires{diag_circ d}
               requires{diag_circ e}
               ensures{diag_circ result}
               ensures{width result = width d}
               ensures{range result = 0}
               ensures{forall x y. ang_ind result x y =  ang_ind d x y  +.+ ang_ind e x y }
	       ensures{result = d --e}

(** Simplified specification for the sequence of two circuits, the second one being diagonal.*)
val function seq_diag_right ( d e:circuit)  :circuit
               requires{width d = width e}
               requires{diag_circ e}
               ensures{width result = width d}
               ensures{range result = range d}
               ensures{forall x y i. basis_ket result x y i= basis_ket d x y i}
               ensures{forall x y: int->int.
	       ang_ind result x y  =
                   (ang_ind d x y) +.+ (ang_ind e (basis_ket d x y)  (fun k -> y (k+ range d)))}
	       ensures{result = d --e}

(** Simplified specification for the sequence of two circuits, the first one being diagonal.*)
val function seq_diag_left ( d e:circuit)  :circuit
               requires{width d = width e}
               requires{diag_circ  d}
               ensures{width result = width d}
               ensures{range result = range e}
               ensures{forall x y: int->int. forall i:int. basis_ket result x y i =  basis_ket e x y  i}
               ensures{forall x y: int->int. ang_ind result x y  =   (ang_ind d x y) +.+ (ang_ind e x  y)}
	       ensures{result = d --e}

(** Controlled Z rotation, applying a Z rotation of angle (1/ 2^k) on qubit 't' if qubit 'c' holds value 1, in a 'n' qubits register.*)
val function crz (c t k n:int):circuit
      requires{0<= c < n}
      requires{0<= t < n}
      requires{c<>t}
      ensures{width result = n}
      ensures{range result = 0}
      ensures{diag_circ result}
ensures{forall x y k'. 0<= k<= k' ->
      		     ang_ind result x y  = (x c * x t *power 2 (k'-k))/./k'}
      ensures{forall d x y k'.  width d = n -> 0<= k<= k' ->
      		     ang_ind (d -- result) x y  =
	       (ang_ind d x y) +.+  ((basis_ket d x y) c * (basis_ket d x y) t *power 2 (k'-k))/./k'}

(** {4 Flate_mute fragment} *)


(** Another prpoperty catches purely boolean circuits, with no superposition nor phase differenciation *)

predicate flat_mute_circ (d:circuit)


val lemma flat_mute_circ_ang_ind (d:circuit) (x y:int -> int)
    requires{flat_mute_circ d}
    ensures{ang_ind d x y  = ang_zero}
 
(** Simplified specification for the sequence of two flat_mute circuits.*)
val function seq_flat_mute ( d e:circuit) :circuit
               requires{width d = width e}
	       requires{flat_mute_circ d}
	       requires{flat_mute_circ e}
               ensures{width result = width d}
               ensures{forall x y: int->int. forall i:int. binary_l  x (width d) -> 0<=i < width d ->
	       		      basis_ket result x y i =  basis_ket e (basis_ket d x y) y i}
               ensures{width result = width d}
               ensures{flat_mute_circ result}
	       ensures{result = d --e}


(** Simplified specification for the sequence of two circuits, the second one being flat_mute.*)
val function seq_flat_mute_right ( d e:circuit)  :circuit
               requires{width d = width e}
	       requires{flat_mute_circ e}
               ensures{width result = width d}
               ensures{range result = range d}
               ensures{forall x y: int->int. forall i:int. binary_l  x (width d) -> binary_l  y (range  d) -> 0<= i < width d ->basis_ket result x y i =
                                                                                                                                  basis_ket e (basis_ket d x y)  (fun k -> y (k + range d)) i}
               ensures{forall x y: int->int.  binary_l  x (width d) -> binary_l  y (range  d) -> ang_ind result x y  =
                                                                                                   (ang_ind d x y)}
	       ensures{result = d --e}


(** Simplified specification for the sequence of two circuits, the first one being flat_mute.*)
val function seq_flat_mute_left ( d e:circuit)  :circuit
               requires{width d = width e}
	       requires{flat_mute_circ d}
               ensures{width result = width d}
               ensures{range result = range e}
               ensures{forall x y: int->int. forall i:int. binary_l  x (width d) -> binary_l  y (range  e) ->0<= i < width d -> basis_ket result x y i =
                                                                                                                                  basis_ket e (basis_ket d x y) y i}
               ensures{forall x y: int->int. binary_l  x (width d) ->binary_l  y (range  e) ->ang_ind result x y  =
                                                                                                ang_ind e (basis_ket d x y)  y}
	       ensures{result = d --e}


(** A "flat_mute" version of the parametrized skip.*)
val function rm_skip (k:int): circuit
        requires{0<k}
	ensures{diag_circ result}
	ensures{flat_mute_circ result}
        ensures{width result = k}

(** {4 Additional material} *)

(** An example macro, for applying the Hadamard gate on a register of size "n" -- note it provides a solution for  one of the questions from the GHZ exercise.*)
val function place_hadamard   (k n:int)  : circuit
     requires{0<= k <n}
     ensures{range result = 1}
     ensures{width result = n}
     ensures{forall x y: int->int. forall i:int.
     		    0<=i<n ->basis_ket result x y i = if i = k then y 0 else x i}
     ensures{forall x y: int->int.
     		    ang_ind result x y  =  (x k * y 0) /./ 1}
     ensures{forall x y: int->int. forall m:int.
     		    1<= m ->  ang_ind result x y  = (x k * y 0*power 2 (m-1)) /./ m }


(** The three following lemmas provide an embryonic treatment of angle function as an object. Concretely, they reason about big sum functional addition.*)

(** Right composition for diagonal circuits*)
val lemma ang_sum_comp_re_diag (f:(int->int) ->  int ->int -> angle) (c d:circuit) (q i j:int)
    requires{i<=j}
    requires{width c = width d}
    requires{diag_circ c}
    requires{diag_circ d}
    requires{forall x y. ang_ind c x y = ang_sum (f x q) i j}
    requires{forall x y.  ang_ind d x y   = f x  q j}
    ensures{forall x y. ang_ind (seq_diag c d) x y = ang_sum (f x q) i (j+1)}

(** Right composition in the general case*)
val lemma ang_sum_comp_re (f:(int->int) -> (int->int) ->  int  -> int  -> angle) (c d:circuit) (q i j:int)
requires{i<j}
requires{width c = width d}
    requires{forall x y.  ang_ind c x y   =  ang_sum (f x y q) i (j-1)}
    requires{forall x y. ang_ind d (basis_ket c x y) (fun i  -> y(i+range c)) = f x y q (j-1)}
    ensures{forall x y. ang_ind (c -- d) x y = ang_sum (f x y q) i j}

(** Left composition in the general case*)
val lemma ang_sum_comp_plus_one (f:(int->int) -> (int->int) ->  int  -> int  -> angle) (c d:circuit) (q i j:int)
requires{i<j}
requires{width c = width d}
    requires{forall x y.  ang_ind c x y   = f x y q i}
    requires{forall x y. ang_ind d (basis_ket c x y) (fun i  -> y(i+range c)) = ang_sum (f x y q) (i+1) j}
    ensures{forall x y. ang_ind (c -- d) x y = ang_sum (f x y q) i j}


(** The following lemma encapsulates a post-treatment for the Quantum FOurier Transform basis_ket function: the composing path-sum analysis ends up with an integer product shaped as the decopposition product for their binary decomposition. In addition, therm "y" is big endian and null modulo 2^n terms are ommitted. Here only a final lemma is provided, refering to lemma int_to_ang_by_sum_mult_break from file math_lib/unit.circle, l. 1533  *)
val lemma phase_binary_prod_decomp (n :int)
        requires{0<n}
        ensures{forall x y. binary_l x n -> binary_l y n ->(ind_isum (fun j -> ind_isum (fun i ->   x i *  y j * power 2 (n-i-1+j)) j n) 0 n) /./n
               =  (bv_to_int (make_bv x n) * bv_to_int (bv_inversion (make_bv y n))) /./n}



end

module Tool_box_Real:Tool_box_Intf
(** This module is a realization of interface Tool_box_Intf -- built on the Qbricks library, it imports all the specifications from its interface*)
         use   int.EuclideanDivision
         use  extr_int.Ind_isum
         use arit.Div_Mod
         use wired_circuits.Qbricks_prim
         use qbricks.Circuit_macros
         use qbricks.Circuit_semantics
         use  binary.Bit_vector
         use  p_int.Int_comp
         use  ref.Ref
         use  int_expo.Int_Exponentiation
         use remarkable_fragments.Diag_circuits
         use qbricks.Circuit_semantics
         use  unit_circle.Angle
         use unit_circle.Ang_sum
	 use  binary.Binary_Op
         use  wired_circuits.Circuit_c
	 use  binary.Bit_vector_inversions
	 use fsum.Int_iter
	 use complex_operations.FromInt
	 use complex.Complex
         use fsum.Int_iter
         use  int.Int
	 use remarkable_fragments.Flat_mute_circuits	
	 use remarkable_fragments.Diag_circuits

let  function power (e i:int)  : int
    = power e i

let   function ind_isum  (f :int -> int) (i:int) (j:int):int
  = ind_isum f i j

let  lemma ind_isum_eq (f g : int -> int) (i i1 j j1:int)
       requires{forall k : int. i <= k < j -> f k = g k}
       requires{i = i1}
       requires{j = j1}
       ensures{ ind_isum  f i j = ind_isum   g i1 j1}
  =
  ind_isum_eq_gen  f g i i1  j j1

let lemma ind_isum_empty (f :int -> int) (i:int) (j:int) 
       requires{j <= i}
       ensures{ ind_isum  f i j =  0}
  = ind_isum_empty f i j

let lemma ind_isum_re (f :int -> int) (i:int) (j:int)
       requires{i < j}
       ensures{ind_isum f i j = ind_isum f i (j-1) + f (j-1)}
  =ind_isum_re f i j;
   ()

let lemma ind_isum_plus_one (f :int -> int) (i:int) (j:int) 
       requires{i < j}
       ensures{ ind_isum  f i j =  (f i) + ( ind_isum  f (i+1) j)}
  = ind_isum_plus_one f i j

type bitvec = Bit_vector.bitvec

predicate binary_l (t: int->int) (l:int) 
= forall k : int. 0 <= k < l -> 0<= t k <2 

 let lemma set_binary_l (t: int->int)  (l:int)
       requires{forall k : int.  0 <= k < l -> 0<= t k <2 }
       ensures{binary_l t l}
   =set_binary_l t l
                             
 let lemma get_binary_l (t: int->int)  (l:int)
       requires{binary_l t l}
       ensures{forall k : int.  0 <= k < l ->0<= t k <2 }
   = get_binary_l t l

let lemma binary_prefix (x: int-> int)( n n':int)
       requires{0<=n'<=n}
       requires{binary_l x n}
       ensures{binary_l x n'}
=
get_binary_l x n;
set_binary_l x n'

let lemma binary_init (x: int-> int)( n :int)
       requires{n =0}
       ensures{binary_l x n}
=()

let function make_bv (f:int->int) (s:int): (bitvec)
       requires{binary_l f s}
       requires{s>=0}
       ensures{length result = s}
       ensures{forall i:int.  0<=i < s ->  getbv result i =  f i}
       ensures{forall i:int. not ( 0<=i < s) ->  getbv result i = 0}
  = make_bv f s

let  function bv_inversion (bv:bitvec):bitvec
       ensures{length result = length bv}
       ensures{forall k. in_range result k -> getbv result k = getbv bv (length bv - k -1)}
  = bv_inversion bv

let  function bv_to_int (bv: bitvec): int
       ensures{result = ind_isum (fun k -> (getbv bv k) * (power 2 ((length bv -1) -k))) 0 (length bv) }
       ensures{0<= result}
  = bv_to_int bv

let function xor a b
       ensures{0<=a<2 -> 0<= b < 2 -> result = a *(1-b) + b *(1-a)}
= mod (a +b) 2

let lemma xor_eq (a b a' b':int)
       requires{a=a'}
       requires{b=b'}
       ensures{xor a  b= xor a'  b'}
=()

type angle = Angle.angle
let function (+.+) : angle -> angle -> angle = Angle.(+.+)

let constant  ang_zero
 = Angle.ang_zero
       ensures{result = ang_zero}
 
let function (/./) (k:int) (n:int) :angle
       ensures{0<=n -> result = real_to_ang (i_to_c (mod k (power 2 n)) /. i_to_c (power 2 n))}
       ensures{0<=n -> 0<= k < power 2 n-> ang_meas  result = (i_to_c k /. i_to_c (power 2 n))}
       ensures{n <0 -> result = real_to_ang (i_to_c (mod (-k) (power 2 (-n))) /. i_to_c (power 2 (-n)))}
       ensures{n <0 -> 0<= k < power 2 n-> ang_meas  result = (i_to_c (-k) /. i_to_c (power 2 (-n)))}
  =  Angle.(/./) k n

let lemma ang_add_eq (d1 d2 e1 e2:angle)
       requires{d1 = e1}
       requires{d2 = e2}
       ensures{d1 +.+ d2 = e1 +.+ e2}
  =ang_add_eq d1 d2 e1 e2

let lemma int_to_ang_add_rev (i j n:int)
       requires{0<= n}
       ensures{(i + j) /./ n =  (i /./ n)+.+ (j /./ n) }
  =()

let lemma int_to_ang_eq (k1 k2 n1 n2: int)
        requires{k1=k2}
        requires{n1=n2}
        ensures{k1 /./ n1 = k2 /./ n2}
  =()

let lemma ang_add_zero (d' d:angle)
        requires{d' = ang_zero}
        ensures{d +.+  d' = d}
  =()

let  function ang_sum (f : int -> angle) (i j:int):angle
  = ang_sum f i j

let lemma ang_sum_plus_one (f :int -> angle) (i:int) (j:int) 
      requires{i< j}
      ensures{ ang_sum f i j =  (f i)+.+(ang_sum f (i+1) j)}
  = if i +1 = j then ang_sum_cardone f i j
  else ang_sum_plus_one f i j

let lemma ang_sum_eq  (f g : int -> angle) (i j i' j':int)
      requires{i <= j}
      requires{i = i'}
      requires{j = j'}
      requires{forall k : int. i <= k < j -> f k = g k}
      ensures{ ang_sum  f i j = ang_sum  g i j}
  = ang_sum_eq f g i j

let lemma ang_sum_empty (f :int -> angle) (i:int) (j:int) 
       requires{j = i}
       ensures{ang_sum  f i j =  ang_zero}
  = ang_sum_neutral f i j

let lemma ang_sum_to_ind_isum (f: int-> angle) ( g: int-> int) (n i j:int)
          requires{0<=n}
          requires{i < j}
	  requires{forall k. i<= k < j-> f k = (g k) /./ n}
          ensures{ang_sum f i j = (ind_isum g i j) /./ n}
  = ang_sum_to_ind_isum   g n i j  

let  lemma ang_sum_re  (f : int -> angle) (i j : int)
          requires{i +1 <= j }
          ensures  { (ang_sum f i j) =  ( (ang_sum f i (j-1)) +.+ (f (j-1))) }
  = ang_sum_re f i j

 type circuit = Circuit_c.circuit
 function basis_ket: circuit -> (int->int)->(int->int)->int->int = Circuit_c.basis_ket
  function range : circuit -> int = Circuit_c.range 
 function ang_ind: circuit -> (int->int)->(int->int)->angle = Circuit_c.ang_ind
 function width: circuit-> int = Circuit_c.width 

let lemma binary_basis_ket (d:circuit)  (x y:int->int) (n :int)
        requires{width d = n}
        requires{binary_l x n}
        requires{binary_l y (range d)}
        ensures{binary_l (basis_ket d x y ) n}
= set_binary_l (basis_ket d x y ) n

let constant hadamard : circuit
  = {pre = Hadamard}
        ensures{size result = 1}
        ensures{range result = 1}
        ensures{width result = 1}
        ensures{forall x y: int->int. forall i:int. basis_ket result x y i = y i}
        ensures{forall x y: int->int.  ang_ind result x y  = (x 0 *y 0)/./1 }

let function m_skip (k:int): circuit
        requires{0<k}
        ensures{size result = 0}
        ensures{range result = 0}
        ensures{width result = k}
        ensures{forall x y: int->int. forall i. basis_ket result x y i = x i}
        ensures{forall x y: int->int. ang_ind result x y  =  1 /./ 0}
        ensures{forall x y: int->int. forall k:int. ang_ind result x y  =  0 /./ k}
  = m_skip k

let function place (c:circuit) (k n :int)
        requires{0<=k}
        requires{ width c+ k <=n}
        ensures{pre result = Place (pre c)  k n}
        ensures{size result = size c}
        ensures{width result = n}
        ensures{range result = range c}
        ensures{forall x y: int->int. forall i:int. k<= i < k + width c ->  basis_ket result x y i =  basis_ket c (fun j -> x (j+k)) y (i-k)}
        ensures{forall x y: int->int. forall i:int. i < k ->  basis_ket result x y i = x i}
        ensures{forall x y: int->int. forall i:int. k +width c <= i -> basis_ket result x y i =  x i}
        ensures{forall x y: int->int. ang_ind result x y  = ang_ind c (fun j -> x (j+k)) y}
  = place c k n

let function (--) ( d e:circuit) 
        requires{width d = width e}
        ensures{size result = size d + size e}
        ensures{width result = width d}
        ensures{range result = range d + range e}
        ensures{forall x y: int->int.forall i:int.
       		       basis_ket result x y i =
       		       basis_ket e (basis_ket d x y) (fun k -> y (k+ range d)) i}
       ensures{forall x y: int->int. ang_ind result x y  =
                       (ang_ind d x y) +.+ (ang_ind e (basis_ket d x y)  (fun k -> y (k+ range d)))}
  =  Qbricks_prim.(--) d e

let function cnot (co t n:int) : circuit
         requires{0<= co<n}
         requires{0<= t<n}
         requires{t<>co}
         ensures{size result = 1}
         ensures{range result = 0}
         ensures{width result = n}
         ensures{forall x y : int->int. forall i: int.
	 	i <> t ->basis_ket result x y i =  x i}
         ensures{forall x y : int->int. forall i: int.
	 	i = t  -> binary_l x n -> basis_ket result x y i = xor  (x co) (x t) }
         ensures{forall  x y. ang_ind result x y  = ang_zero}
         ensures{forall d: circuit. forall  x y i.
	 	width d = n -> i <> t -> basis_ket (d -- result) x y i =  basis_ket d x y i}
         ensures{forall d: circuit. forall  x y i.
	 	binary_l x n ->binary_l y (range d) ->  width d = n ->   i = t  ->
			 basis_ket (d --result) x y i = xor  ( basis_ket d x y co) ( basis_ket d x y t) }
         ensures{forall d: circuit. 
	 	width d = n ->  ang_ind (d--result)   = ang_ind d }
  = Qbricks_prim.cnot co t n

 predicate diag_circ (d:circuit)
= forall x y i. basis_ket d x y  i = x i
/\ range d = 0

let lemma get_diag (d:circuit)
    requires{diag_circ d}
    ensures{forall x y i. basis_ket d x y  i = x i}
    ensures{range d = 0}
    =()
    
let lemma set_diag (d:circuit)
    requires{forall x y i. basis_ket d x y  i = x i}
    requires{range d = 0}
    ensures{diag_circ d}
    =()
    
let lemma diag_circ_basis_ket (d:circuit) (x y:int->int)
    requires{diag_circ d}
    ensures{basis_ket d x y  = x }
    = ()

let function seq_diag ( d e:circuit) 
     requires{width d = width e}
     requires{diag_circ d}
     requires{diag_circ e}
     ensures{result = d -- e}
     ensures{size result = size d  + size e}
     ensures{width result = width d}
     ensures{range result = 0}
     ensures{forall x y. ang_ind result x y =  ang_ind d x y  +.+ ang_ind e x y }
     ensures{diag_circ result}
  =
get_diag d;
get_diag e;
set_diag (d -- e);
d -- e

let function seq_diag_right ( d e:circuit) 
     requires{width d = width e}
     requires{diag_circ e}
     ensures{result = d -- e}
     ensures{size result = size d  + size e}
     ensures{width result = width d}
     ensures{range result = range d}
     ensures{forall x y i. basis_ket result x y i= basis_ket d x y i}
     ensures{forall x y: int->int.
     	       ang_ind result x y  =
                   (ang_ind d x y) +.+ (ang_ind e (basis_ket d x y)  (fun k -> y (k+ range d)))}
  = get_diag e;
   d -- e

let function seq_diag_left ( d e:circuit) 
     requires{width d = width e}
     requires{diag_circ  d}
     ensures{result = d -- e}
     ensures{size result = size d  + size e}
     ensures{width result = width d}
     ensures{range result = range e}
     ensures{forall x y: int->int. forall i:int. basis_ket result x y i =  basis_ket e x y  i}
     ensures{forall x y: int->int. ang_ind result x y  =   (ang_ind d x y) +.+ (ang_ind e x  y)}
  = get_diag d;
   d -- e

let function crz (c t k n:int):circuit
      requires{0<= c < n}
      requires{0<= t < n}
      requires{c<>t}
      ensures{width result = n}
      ensures{size result = cont_size}
      ensures{range result = 0}
      ensures{forall x y k'. 0<= k<= k' ->
      		     ang_ind result x y  = (x c * x t *power 2 (k'-k))/./k'}
      (* ensures{forall d x y k'.  width d = n -> 0<= k<= k' -> *)
      (* 		     ang_ind (d -- result) x y  = *)
      (* 	       (ang_ind d x y) +.+  ((basis_ket d x y) c * (basis_ket d x y) t *power 2 (k'-k))/./k'} *)
      ensures{diag_circ result}
        =
	set_diag(crz c t k n);
	crz c t k n

predicate flat_mute_circ (d:circuit)
 = forall x y. ang_ind d x y  = ang_zero
/\ 
range d = 0

let lemma flat_mute_circ_ang_ind (d:circuit) (x y:int -> int) 
    requires{flat_mute_circ d}
    ensures{ang_ind d x y  = ang_zero}
    =()

let lemma get_flat_mute (d:circuit)
    requires{flat_mute_circ d}
    ensures{forall x y :int->int. ang_ind d x y   = ang_zero}
    ensures{range d = 0}
    =()
    
let lemma set_flat_mute (d:circuit)
    requires{forall x y  :int->int. ang_ind d x y   =  ang_zero}
    requires{range d = 0}
    ensures{flat_mute_circ d}
    =()
    
let function seq_flat_mute ( d e:circuit) 
     requires{width d = width e}
     requires{flat_mute_circ d}
     requires{flat_mute_circ e}
     ensures{width result = width d}
     ensures{forall x y: int->int. forall i:int. binary_l  x (width d) -> 0<=i < width d ->
	       		      basis_ket result x y i =  basis_ket e (basis_ket d x y) y i}
     ensures{width result = width d}
     ensures{flat_mute_circ result}
  = get_flat_mute d;
  get_flat_mute e;
  set_flat_mute (d -- e);
  d--e

let function seq_flat_mute_right ( d e:circuit) 
     requires{width d = width e}
     requires{flat_mute_circ e}
     ensures{size result = size d  + size e}
     ensures{width result = width d}
     ensures{range result = range d}
     ensures{forall x y: int->int. forall i:int. binary_l  x (width d) -> binary_l  y (range  d) ->
     0<= i < width d ->basis_ket result x y i = basis_ket e (basis_ket d x y)  (fun k -> y (k + range d)) i}
     ensures{forall x y: int->int.  binary_l  x (width d) -> binary_l  y (range  d) -> ang_ind result x y  =
                                                                                                   (ang_ind d x y)}
  =  get_flat_mute e;
  d -- e

let function seq_flat_mute_left ( d e:circuit) 
               requires{width d = width e}
	       requires{flat_mute_circ d}
               ensures{size result = size d  + size e}
               ensures{width result = width d}
               ensures{range result = range e}
               ensures{forall x y: int->int. forall i:int. binary_l  x (width d) -> binary_l  y (range  e) ->0<= i < width d -> basis_ket result x y i =
                                                                                                                                  basis_ket e (basis_ket d x y) y i}
               ensures{forall x y: int->int. binary_l  x (width d) ->binary_l  y (range  e) ->ang_ind result x y  =
                                                                                                ang_ind e (basis_ket d x y)  y}
  = get_flat_mute d;
  d -- e

let function rm_skip (k:int): circuit
        requires{0<k}
        ensures{size result = 0}
	ensures{diag_circ result}
	ensures{flat_mute_circ result}
        ensures{width result = k}
  = get_flat_mute (m_skip k); 
    get_diag (m_skip k); 
    m_skip k

let function place_hadamard   (k n:int)  : circuit
     requires{0<= k <n}
     ensures{range result = 1}
     ensures{width result = n}
     ensures{size result =1}
     ensures{forall x y: int->int. forall i:int.
     		    0<=i<n ->basis_ket result x y i = if i = k then y 0 else x i}
     ensures{forall x y: int->int.
     		    ang_ind result x y  =  (x k * y 0) /./ 1}
     ensures{forall x y: int->int. forall m:int.
     		    1<= m ->  ang_ind result x y  = (x k * y 0*power 2 (m-1)) /./ m }
  = place_hadamard  k n

let lemma ang_sum_comp_re_diag (f:(int->int) ->  int ->int -> angle) (c d:circuit) (q i j:int)
requires{i<=j}
requires{width c = width d}
    requires{diag_circ c}
    requires{diag_circ d}
    requires{forall x y. ang_ind c x y = ang_sum (f x q) i j}
    requires{forall x y.  ang_ind d x y   = f x  q j}
    ensures{forall x y. ang_ind (seq_diag c d) x y = ang_sum (f x q) i (j+1)}
   =()

let lemma ang_sum_comp_plus_one (f:(int->int) -> (int->int) ->  int  -> int  -> angle) (c d:circuit) (q i j:int)
requires{i<j}
requires{width c = width d}
    requires{forall x y.  ang_ind c x y   = f x y q i}
    requires{forall x y. ang_ind d (basis_ket c x y) (fun i  -> y(i+range c)) = ang_sum (f x y q) (i+1) j}
    ensures{forall x y. ang_ind (c -- d) x y = ang_sum (f x y q) i j}
   =()

let lemma ang_sum_comp_re (f:(int->int) -> (int->int) ->  int  -> int  -> angle) (c d:circuit) (q i j:int)
requires{i<j}
requires{width c = width d}
    requires{forall x y.  ang_ind c x y   =  ang_sum (f x y q) i (j-1)}
    requires{forall x y. ang_ind d (basis_ket c x y) (fun i  -> y(i+range c)) = f x y q (j-1)}
    ensures{forall x y. ang_ind (c -- d) x y = ang_sum (f x y q) i j}
   =()

let lemma int_to_ang_by_sum_mult_break(n:int) (x y: bitvec)
      requires{0<n}
      requires{length x = n}
      requires{length y = n}
      ensures{ (ind_isum (fun j -> ind_isum (fun i ->  getbv x i * getbv y j * power 2 (n-i-1+j)) j n) 0 n) /./n
               =  (bv_to_int x * bv_to_int (bv_inversion y)) /./n}
  = int_to_ang_by_sum_mult_break n x y

let lemma phase_binary_prod_decomp (n :int) 
        requires{0<n}
        ensures{forall x y. binary_l x n -> binary_l y n ->(ind_isum (fun j -> ind_isum (fun i ->   x i *  y j * power 2 (n-i-1+j)) j n) 0 n) /./n
               =  (bv_to_int (make_bv x n) * bv_to_int (bv_inversion (make_bv y n))) /./n}
  = ()


end
