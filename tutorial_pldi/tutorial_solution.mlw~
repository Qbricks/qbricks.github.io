(**************************************************************************)
(***  This file is part of QBRICKS.                                         *)
(***                                                                        *)
(***  Copyright (C) 2020-2022                                               *)
(***    CEA (Commissariat à l'énergie atomique et aux énergies              *)
(***         alternatives)                                                  *)
(***    Université Paris-Saclay                                             *)
(***                                                                        *)
(***  you can redistribute it and/or modify it under the terms of the GNU   *)
(***  Lesser General Public License as published by the Free Software       *)
(***  Foundation, version 2.1.                                              *)
(***                                                                        *)
(***  It is distributed in the hope that it will be useful,                 *)
(***  but WITHOUT ANY WARRANTY; without even the implied warranty of        *)
(***  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *)
(***  GNU Lesser General Public License for more details.                   *)
(***                                                                        *)
(***  See the GNU Lesser General Public License version 2.1                 *)
(***  for more details (enclosed in the file licenses/LGPLv2.1).            *)
(***                                                                        *)
(***************************************************************************)

(**{1 Solution} *)
(** This file provides solutions for both tutorial exercises.*)


module GHZ
use int.Int
use ref.Ref

use tool_box.Tool_box_Real

let constant hadamard : circuit
  = hadamard
      ensures{range result = 1}
      ensures{width result = 1}
      ensures{forall x y: int->int. basis_ket result x y 0 = y 0}
      ensures{forall x y: int->int.  ang_ind result x y  = (x 0 *y 0)/./1 }

let function place_hadamard   (k n:int)  : circuit
      requires{0<= k <n}
      ensures{range result = 1}
      ensures{width result = n}
      ensures{forall x y: int->int. forall i:int. 0<=i<n -> basis_ket result x y i = if i = k then y 0 else x i}
      ensures{forall x y: int->int.  ang_ind result x y  =  (x k * y 0) /./ 1}
      = place hadamard  k n

let constant place_hadamard_b  : circuit
      = place_hadamard  0 2
      ensures{range result = 1}
      ensures{width result = 2}
      ensures{forall x y: int->int. basis_ket result x y 0 =  y 0 }
      ensures{forall x y: int->int. basis_ket result x y 1 =  x 1 }
      ensures{forall x y: int->int.  ang_ind result x y  =  (x 0 * y 0) /./ 1}

let constant cnot_b : circuit
= cnot 0 1 2
      ensures{range result = 0}
      ensures{width result = 2}
      ensures{forall x y : int->int.  basis_ket result x y 0 =  x 0}
      ensures{forall x y : int->int. binary_l x 2 -> basis_ket result x y 1 = xor  (x 0) (x 1) }
      ensures{forall  x y.ang_ind result x y  =  ang_zero}
      ensures{forall d: circuit. forall  x y.
 	 	width d = 2 -> basis_ket (d -- result) x y 0 =  basis_ket d x y 0}
      ensures{forall d: circuit. forall  x y.
	 	binary_l x 2 ->binary_l y (range d) ->  width d = 2 -> 
			 basis_ket (d --result) x y 1 = xor  (basis_ket d x y 0) ( basis_ket d x y 1) }
      ensures{forall d: circuit. forall  x y.
	 	width d = 2 ->  ang_ind (d--result) x y  = ang_ind d x y}

let constant bell
=  place_hadamard_b -- cnot_b
       ensures{width result = 2}
       ensures{range result = 1}
       ensures{forall x y.  binary_l x 2 -> binary_l y 1 ->
                basis_ket result x y 0 =y 0  }
       ensures{forall x y.  binary_l x 2 -> binary_l y 1 ->
       		basis_ket result x y 1 = xor (y 0) (x 1)}
       ensures{forall x y. ang_ind result x y
                   = (y 0 * x 0) /./ 1}

let constant bell_size_three
= place bell 0 3
      ensures{width result = 3}
      ensures{range result = 1}
      ensures{forall x y.  binary_l x 3 -> binary_l y 1 ->
                   basis_ket result x y 0 =y 0  }
      ensures{forall x y.  binary_l x 3 -> binary_l y 1 ->
                   basis_ket result x y 1 = xor (y 0) (x 1)}
      ensures{forall x y.  binary_l x 3 -> binary_l y 1 ->
                   basis_ket result x y 2 = x 2}
      ensures{forall x y. ang_ind result x y
                   = (y 0 * x 0) /./ 1}

let constant ghz3
=  bell_size_three  -- cnot 0 2 3
      ensures{width result = 3}
      ensures{range result = 1}
      ensures{forall x y.  binary_l x 3 -> binary_l y 1 ->
                   basis_ket result x y 0 =y 0  }
      ensures{forall x y i. 1<= i < 3 ->  binary_l x 3 -> binary_l y 1 ->
                   basis_ket result x y i =  xor (y 0) (x i) }
      ensures{forall x y. ang_ind result x y
                   = (y 0 * x 0) /./ 1}

let rec ghz_rec(n:int)
      requires{2<=n}
      variant{n}
      ensures{width result = n}
      ensures{range result = 1}
      ensures{forall x y.  binary_l x n -> binary_l y 1 ->
                   basis_ket result x y 0 =y 0  }
      ensures{forall x y i. 1<= i < n ->  binary_l x n -> binary_l y 1 ->
                   basis_ket result x y i = xor (y 0) (x i)  }
      ensures{forall x y. ang_ind result x y
                   = (y 0 * x 0) /./ 1}
		   = if n = 2 then bell
		   else place (ghz_rec (n-1)) 0 n -- cnot 0 (n-1) n

let ghz(n:int)
requires{1<n}
      ensures{width result = n}
      ensures{range result = 1}
      ensures{forall x y.  binary_l x n -> binary_l y 1 ->
                   basis_ket result x y 0 =y 0  }
      ensures{forall x y i. 1<= i < n ->  binary_l x n -> binary_l y 1 ->
                   basis_ket result x y i = xor (y 0) (x i)  }
      ensures{forall x y. ang_ind result x y
                   = (y 0 * x 0) /./ 1}
= let cnot_reg = ref (m_skip n  )
  in for q = 1 to n-1 do
      invariant{width !cnot_reg = n}
      invariant{range !cnot_reg = 0}
      invariant{forall x y.  binary_l x n -> 
                   basis_ket !cnot_reg x y 0 =x 0  }
      invariant{forall x y i.  q<=i ->  binary_l x n -> 
                   basis_ket !cnot_reg x y i = x i }
      invariant{forall x y i. 1<= i < q ->  binary_l x n -> 
                   basis_ket !cnot_reg x y i = xor  (x 0)  (x i) }
      invariant{forall x y. ang_ind !cnot_reg x y
                   = ang_zero}
		   cnot_reg := !cnot_reg -- cnot 0 q n
		   done;
      assert{range !cnot_reg = 0};
 place_hadamard 0 n -- !cnot_reg
end

module Qft

use int.Int
use ref.Ref
use tool_box.Tool_box_Intf

  
let qft ( n:int) :circuit
      requires{0<n}  =
      let function qft_inner_phase   (x y :int -> int)  (q l  :int)
      =  x l * y q  * power 2 (n- l  -1 +q) /./n
      in
      begin
      let c = ref (m_skip n)
      in for q = 0 to n-1 do
            invariant{width !c = n}
      	    invariant{range !c = q}
      	    invariant{forall x y i. 0<= i < n ->
                   basis_ket !c x y i = if 0<= i < q then y i else x i}
      	    invariant{forall x y. ang_ind !c x y
                   = ang_sum(fun k -> ang_sum (fun l -> qft_inner_phase x y k l ) k n)0 q}
        begin
           let cl = ref (rm_skip n)
           in for i = q+1 to n-1 do
                  invariant{width !cl = n}
             	  invariant{diag_circ  !cl}
             	  invariant{forall x y. ang_ind !cl x y
                          = ang_sum (qft_inner_phase x x  q ) (q+1) i}
	   let  new_rot = (crz i (q) (i - q+1) n )
		      ensures{forall x y. ang_ind result x y = qft_inner_phase x x  q i}
	   in  ang_sum_comp_re_diag (fun x -> qft_inner_phase x x  ) !cl new_rot q (q+1) i;
           cl := seq_diag !cl  new_rot;   
           done;
	let place_had = place_hadamard (q) n
	    ensures{forall x y. ang_ind result x y = qft_inner_phase x (fun j -> y (j-q)) q q }
	in ang_sum_comp_plus_one (fun  x y k-> qft_inner_phase x (fun j -> y (j-q)) k)  place_had !cl q q n; 
        cl:=  seq_diag_right place_had  !cl;
	   assert{forall x y i. 0<= i < n ->
                     basis_ket !cl x y i = if i = q then y 0 else x i};
           assert{forall x y. ang_ind !cl x y =
                       ang_sum (qft_inner_phase x (fun j -> y (j-q)) q)q n};
              c:= !c -- !cl;
     end
    done;  
    phase_binary_prod_decomp n;
    return (!c)
     ensures{width result = n}
     ensures{range result = n}
     ensures{forall x y i. 0<= i < n -> basis_ket result x y i = y i}
     ensures{forall x y. ang_ind result x y  = ang_sum(fun k ->
             ang_sum (fun l -> qft_inner_phase x y k l ) k n) 0 n}          
     ensures{forall x y. ang_ind result x y  = (ind_isum(fun k -> 
             (ind_isum (fun l -> x l * y k * power 2 (n-l - 1+k)) k n))0 n) /./ n}
     ensures{forall x y. binary_l x n -> binary_l y n -> ang_ind result x y  =  
             (bv_to_int (make_bv x n) * bv_to_int (bv_inversion (make_bv y n))) /./n}
  end



end



